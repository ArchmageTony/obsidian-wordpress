/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a3, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a3, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a3, prop, b2[prop]);
    }
  return a3;
};
var __spreadProps = (a3, b2) => __defProps(a3, __getOwnPropDescs(b2));
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var step = (x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/xmlbuilder2/lib/xmlbuilder2.min.js
var require_xmlbuilder2_min = __commonJS({
  "node_modules/xmlbuilder2/lib/xmlbuilder2.min.js"(exports2, module2) {
    !function(e2, t2) {
      typeof exports2 == "object" && typeof module2 == "object" ? module2.exports = t2() : typeof define == "function" && define.amd ? define([], t2) : typeof exports2 == "object" ? exports2.xmlbuilder2 = t2() : e2.xmlbuilder2 = t2();
    }(exports2, function() {
      return function(e2) {
        var t2 = {};
        function r(n) {
          if (t2[n])
            return t2[n].exports;
          var i2 = t2[n] = { i: n, l: false, exports: {} };
          return e2[n].call(i2.exports, i2, i2.exports, r), i2.l = true, i2.exports;
        }
        return r.m = e2, r.c = t2, r.d = function(e3, t3, n) {
          r.o(e3, t3) || Object.defineProperty(e3, t3, { enumerable: true, get: n });
        }, r.r = function(e3) {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
        }, r.t = function(e3, t3) {
          if (1 & t3 && (e3 = r(e3)), 8 & t3)
            return e3;
          if (4 & t3 && typeof e3 == "object" && e3 && e3.__esModule)
            return e3;
          var n = /* @__PURE__ */ Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e3 }), 2 & t3 && typeof e3 != "string")
            for (var i2 in e3)
              r.d(n, i2, function(t4) {
                return e3[t4];
              }.bind(null, i2));
          return n;
        }, r.n = function(e3) {
          var t3 = e3 && e3.__esModule ? function() {
            return e3.default;
          } : function() {
            return e3;
          };
          return r.d(t3, "a", t3), t3;
        }, r.o = function(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }, r.p = "", r(r.s = 184);
      }([function(e2, t2, r) {
        "use strict";
        function n(e3) {
          for (var r2 in e3)
            t2.hasOwnProperty(r2) || (t2[r2] = e3[r2]);
        }
        Object.defineProperty(t2, "__esModule", { value: true }), n(r(240)), n(r(251)), n(r(175)), n(r(107)), n(r(29)), n(r(73)), n(r(106)), n(r(30)), n(r(252)), n(r(52)), n(r(97)), n(r(253)), n(r(37)), n(r(51)), n(r(173)), n(r(176)), n(r(172)), n(r(108)), n(r(254)), n(r(255)), n(r(256)), n(r(72)), n(r(177)), n(r(105)), n(r(17)), n(r(257)), n(r(12)), n(r(174));
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(212);
        t2.FixedSizeSet = i2.FixedSizeSet;
        var o = r(213);
        t2.ObjectCache = o.ObjectCache;
        var a3 = r(214);
        t2.CompareCache = a3.CompareCache;
        var s3 = r(215);
        t2.Lazy = s3.Lazy;
        var u2 = r(216);
        function l(e3, t3, r2) {
          if (m3(e3))
            e3.forEach(function(e4, n3) {
              return t3.call(r2, n3, e4);
            });
          else
            for (var n2 in e3)
              e3.hasOwnProperty(n2) && t3.call(r2, n2, e3[n2]);
        }
        function c2(e3) {
          var t3, r2;
          if (h3(e3))
            return e3;
          if (f(e3)) {
            var i3 = [];
            try {
              for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                i3.push(c2(s4));
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return i3;
          }
          if (p(e3)) {
            i3 = {};
            for (var u3 in e3)
              if (e3.hasOwnProperty(u3)) {
                var l2 = e3[u3];
                i3[u3] = c2(l2);
              }
            return i3;
          }
          return e3;
        }
        function h3(e3) {
          return !!e3 && Object.prototype.toString.call(e3) === "[object Function]";
        }
        function p(e3) {
          var t3 = typeof e3;
          return !!e3 && (t3 === "function" || t3 === "object");
        }
        function f(e3) {
          return Array.isArray(e3);
        }
        function d3(e3) {
          return e3 instanceof Set;
        }
        function m3(e3) {
          return e3 instanceof Map;
        }
        function y3(e3) {
          if (p(e3)) {
            var t3 = Object.getPrototypeOf(e3), r2 = t3.constructor;
            return t3 && r2 && typeof r2 == "function" && r2 instanceof r2 && Function.prototype.toString.call(r2) === Function.prototype.toString.call(Object);
          }
          return false;
        }
        t2.StringWalker = u2.StringWalker, t2.applyMixin = function(e3, t3) {
          for (var r2 = [], n2 = 2; n2 < arguments.length; n2++)
            r2[n2 - 2] = arguments[n2];
          Object.getOwnPropertyNames(t3.prototype).forEach(function(n3) {
            if (n3 !== "constructor") {
              if (r2.indexOf(n3) !== -1) {
                var i3 = Object.getOwnPropertyDescriptor(e3.prototype, n3);
                i3 && Object.defineProperty(e3.prototype, "_" + n3, i3);
              }
              var o2 = Object.getOwnPropertyDescriptor(t3.prototype, n3);
              o2 && Object.defineProperty(e3.prototype, n3, o2);
            }
          });
        }, t2.applyDefaults = function e3(t3, r2, n2) {
          n2 === void 0 && (n2 = false);
          var i3 = c2(t3 || {});
          return l(r2, function(t4, r3) {
            y3(r3) ? i3[t4] = e3(i3[t4], r3, n2) : (n2 || i3[t4] === void 0) && (i3[t4] = r3);
          }), i3;
        }, t2.forEachArray = function(e3, t3, r2) {
          e3.forEach(t3, r2);
        }, t2.forEachObject = l, t2.arrayLength = function(e3) {
          return d3(e3) ? e3.size : e3.length;
        }, t2.objectLength = function(e3) {
          return m3(e3) ? e3.size : Object.keys(e3).length;
        }, t2.getObjectValue = function(e3, t3) {
          return m3(e3) ? e3.get(t3) : e3[t3];
        }, t2.removeObjectValue = function(e3, t3) {
          m3(e3) ? e3.delete(t3) : delete e3[t3];
        }, t2.clone = c2, t2.isBoolean = function(e3) {
          return typeof e3 == "boolean";
        }, t2.isNumber = function(e3) {
          return typeof e3 == "number";
        }, t2.isString = function(e3) {
          return typeof e3 == "string";
        }, t2.isFunction = h3, t2.isObject = p, t2.isArray = f, t2.isSet = d3, t2.isMap = m3, t2.isEmpty = function(e3) {
          if (f(e3))
            return !e3.length;
          if (d3(e3))
            return !e3.size;
          if (m3(e3))
            return !e3.size;
          if (p(e3)) {
            for (var t3 in e3)
              if (e3.hasOwnProperty(t3))
                return false;
            return true;
          }
          return false;
        }, t2.isPlainObject = y3, t2.isIterable = function(e3) {
          return e3 && typeof e3[Symbol.iterator] == "function";
        }, t2.getValue = function(e3) {
          return h3(e3.valueOf) ? e3.valueOf() : e3;
        }, t2.utf8Encode = function(e3) {
          for (var t3 = new Uint8Array(4 * e3.length), r2 = 0, n2 = 0; n2 < e3.length; n2++) {
            var i3 = e3.charCodeAt(n2);
            if (i3 < 128)
              t3[r2++] = i3;
            else {
              if (i3 < 2048)
                t3[r2++] = i3 >> 6 | 192;
              else {
                if (i3 > 55295 && i3 < 56320) {
                  if (++n2 >= e3.length)
                    throw new Error("Incomplete surrogate pair.");
                  var o2 = e3.charCodeAt(n2);
                  if (o2 < 56320 || o2 > 57343)
                    throw new Error("Invalid surrogate character.");
                  i3 = 65536 + ((1023 & i3) << 10) + (1023 & o2), t3[r2++] = i3 >> 18 | 240, t3[r2++] = i3 >> 12 & 63 | 128;
                } else
                  t3[r2++] = i3 >> 12 | 224;
                t3[r2++] = i3 >> 6 & 63 | 128;
              }
              t3[r2++] = 63 & i3 | 128;
            }
          }
          return t3.subarray(0, r2);
        }, t2.utf8Decode = function(e3) {
          for (var t3 = "", r2 = 0; r2 < e3.length; ) {
            var n2 = e3[r2++];
            if (n2 > 127)
              if (n2 > 191 && n2 < 224) {
                if (r2 >= e3.length)
                  throw new Error("Incomplete 2-byte sequence.");
                n2 = (31 & n2) << 6 | 63 & e3[r2++];
              } else if (n2 > 223 && n2 < 240) {
                if (r2 + 1 >= e3.length)
                  throw new Error("Incomplete 3-byte sequence.");
                n2 = (15 & n2) << 12 | (63 & e3[r2++]) << 6 | 63 & e3[r2++];
              } else {
                if (!(n2 > 239 && n2 < 248))
                  throw new Error("Unknown multi-byte start.");
                if (r2 + 2 >= e3.length)
                  throw new Error("Incomplete 4-byte sequence.");
                n2 = (7 & n2) << 18 | (63 & e3[r2++]) << 12 | (63 & e3[r2++]) << 6 | 63 & e3[r2++];
              }
            if (n2 <= 65535)
              t3 += String.fromCharCode(n2);
            else {
              if (!(n2 <= 1114111))
                throw new Error("Code point exceeds UTF-16 limit.");
              n2 -= 65536, t3 += String.fromCharCode(n2 >> 10 | 55296), t3 += String.fromCharCode(1023 & n2 | 56320);
            }
          }
          return t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), function(e3) {
          e3[e3.Before = 0] = "Before", e3[e3.Equal = 1] = "Equal", e3[e3.After = 2] = "After";
        }(t2.BoundaryPosition || (t2.BoundaryPosition = {})), function(e3) {
          e3[e3.None = 0] = "None", e3[e3.Capturing = 1] = "Capturing", e3[e3.AtTarget = 2] = "AtTarget", e3[e3.Bubbling = 3] = "Bubbling";
        }(t2.EventPhase || (t2.EventPhase = {})), function(e3) {
          e3[e3.Element = 1] = "Element", e3[e3.Attribute = 2] = "Attribute", e3[e3.Text = 3] = "Text", e3[e3.CData = 4] = "CData", e3[e3.EntityReference = 5] = "EntityReference", e3[e3.Entity = 6] = "Entity", e3[e3.ProcessingInstruction = 7] = "ProcessingInstruction", e3[e3.Comment = 8] = "Comment", e3[e3.Document = 9] = "Document", e3[e3.DocumentType = 10] = "DocumentType", e3[e3.DocumentFragment = 11] = "DocumentFragment", e3[e3.Notation = 12] = "Notation";
        }(t2.NodeType || (t2.NodeType = {})), function(e3) {
          e3[e3.Disconnected = 1] = "Disconnected", e3[e3.Preceding = 2] = "Preceding", e3[e3.Following = 4] = "Following", e3[e3.Contains = 8] = "Contains", e3[e3.ContainedBy = 16] = "ContainedBy", e3[e3.ImplementationSpecific = 32] = "ImplementationSpecific";
        }(t2.Position || (t2.Position = {})), function(e3) {
          e3[e3.Accept = 1] = "Accept", e3[e3.Reject = 2] = "Reject", e3[e3.Skip = 3] = "Skip";
        }(t2.FilterResult || (t2.FilterResult = {})), function(e3) {
          e3[e3.All = 4294967295] = "All", e3[e3.Element = 1] = "Element", e3[e3.Attribute = 2] = "Attribute", e3[e3.Text = 4] = "Text", e3[e3.CDataSection = 8] = "CDataSection", e3[e3.EntityReference = 16] = "EntityReference", e3[e3.Entity = 32] = "Entity", e3[e3.ProcessingInstruction = 64] = "ProcessingInstruction", e3[e3.Comment = 128] = "Comment", e3[e3.Document = 256] = "Document", e3[e3.DocumentType = 512] = "DocumentType", e3[e3.DocumentFragment = 1024] = "DocumentFragment", e3[e3.Notation = 2048] = "Notation";
        }(t2.WhatToShow || (t2.WhatToShow = {})), function(e3) {
          e3[e3.StartToStart = 0] = "StartToStart", e3[e3.StartToEnd = 1] = "StartToEnd", e3[e3.EndToEnd = 2] = "EndToEnd", e3[e3.EndToStart = 3] = "EndToStart";
        }(t2.HowToCompare || (t2.HowToCompare = {}));
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(241);
        t2.Cast = n.Cast;
        var i2 = r(150);
        t2.Guard = i2.Guard;
        var o = r(242);
        t2.EmptySet = o.EmptySet;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(55).f, o = r(21), a3 = r(25), s3 = r(80), u2 = r(119), l = r(123);
        e2.exports = function(e3, t3) {
          var r2, c2, h3, p, f, d3 = e3.target, m3 = e3.global, y3 = e3.stat;
          if (r2 = m3 ? n : y3 ? n[d3] || s3(d3, {}) : (n[d3] || {}).prototype)
            for (c2 in t3) {
              if (p = t3[c2], h3 = e3.noTargetGet ? (f = i2(r2, c2)) && f.value : r2[c2], !l(m3 ? c2 : d3 + (y3 ? "." : "#") + c2, e3.forced) && h3 !== void 0) {
                if (typeof p == typeof h3)
                  continue;
                u2(p, h3);
              }
              (e3.sham || h3 && h3.sham) && o(p, "sham", true), a3(r2, c2, p, e3);
            }
        };
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(81), o = r(14), a3 = r(58), s3 = r(86), u2 = r(124), l = i2("wks"), c2 = n.Symbol, h3 = u2 ? c2 : c2 && c2.withoutSetter || a3;
        e2.exports = function(e3) {
          return o(l, e3) || (s3 && o(c2, e3) ? l[e3] = c2[e3] : l[e3] = h3("Symbol." + e3)), l[e3];
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(1), i2 = r(29), o = function() {
          function e3() {
            this._features = { mutationObservers: true, customElements: true, slots: true, steps: true }, this._window = null, this._compareCache = new n.CompareCache(), this._rangeList = new n.FixedSizeSet();
          }
          return e3.prototype.setFeatures = function(e4) {
            if (e4 === void 0 && (e4 = true), n.isObject(e4))
              for (var t3 in e4)
                this._features[t3] = e4[t3] || false;
            else
              for (var t3 in this._features)
                this._features[t3] = e4;
          }, Object.defineProperty(e3.prototype, "features", { get: function() {
            return this._features;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "window", { get: function() {
            return this._window === null && (this._window = i2.create_window()), this._window;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "compareCache", { get: function() {
            return this._compareCache;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "rangeList", { get: function() {
            return this._rangeList;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3, "instance", { get: function() {
            return e3._instance || (e3._instance = new e3()), e3._instance;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.dom = o.instance;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__importStar || function(e3) {
          if (e3 && e3.__esModule)
            return e3;
          var t3 = {};
          if (e3 != null)
            for (var r2 in e3)
              Object.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          return t3.default = e3, t3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = n(r(228));
        t2.base64 = i2;
        var o = n(r(146));
        t2.byte = o;
        var a3 = n(r(147));
        t2.byteSequence = a3;
        var s3 = n(r(96));
        t2.codePoint = s3;
        var u2 = n(r(232));
        t2.json = u2;
        var l = n(r(233));
        t2.list = l;
        var c2 = n(r(234));
        t2.map = c2;
        var h3 = n(r(235));
        t2.namespace = h3;
        var p = n(r(236));
        t2.queue = p;
        var f = n(r(237));
        t2.set = f;
        var d3 = n(r(238));
        t2.stack = d3;
        var m3 = n(r(239));
        t2.string = m3;
      }, function(e2, t2) {
        e2.exports = function(e3) {
          try {
            return !!e3();
          } catch (e4) {
            return true;
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = e3.call(this, r2) || this;
            return n2.name = t4, n2;
          }
          return i2(t3, e3), t3;
        }(Error);
        t2.DOMException = o;
        var a3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "DOMStringSizeError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.DOMStringSizeError = a3;
        var s3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "WrongDocumentError", "The object is in the wrong document. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.WrongDocumentError = s3;
        var u2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NoDataAllowedError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NoDataAllowedError = u2;
        var l = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NoModificationAllowedError", "The object can not be modified. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NoModificationAllowedError = l;
        var c2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NotSupportedError", "The operation is not supported. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NotSupportedError = c2;
        var h3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InUseAttributeError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InUseAttributeError = h3;
        var p = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidStateError", "The object is in an invalid state. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidStateError = p;
        var f = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidModificationError", "The object can not be modified in this way. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidModificationError = f;
        var d3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NamespaceError", "The operation is not allowed by Namespaces in XML. [XMLNS] " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NamespaceError = d3;
        var m3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidAccessError", "The object does not support the operation or argument. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidAccessError = m3;
        var y3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "ValidationError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.ValidationError = y3;
        var v = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "TypeMismatchError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.TypeMismatchError = v;
        var _ = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "SecurityError", "The operation is insecure. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.SecurityError = _;
        var g = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NetworkError", "A network error occurred. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NetworkError = g;
        var b2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "AbortError", "The operation was aborted. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.AbortError = b2;
        var x2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "URLMismatchError", "The given URL does not match another URL. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.URLMismatchError = x2;
        var w2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "QuotaExceededError", "The quota has been exceeded. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.QuotaExceededError = w2;
        var E2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "TimeoutError", "The operation timed out. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.TimeoutError = E2;
        var D2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidNodeTypeError", "The supplied node is incorrect or has an incorrect ancestor for this operation. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidNodeTypeError = D2;
        var S3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "DataCloneError", "The object can not be cloned. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.DataCloneError = S3;
        var C = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NotImplementedError", "The DOM method is not implemented by this module. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NotImplementedError = C;
        var A = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "HierarchyRequestError", "The operation would yield an incorrect node tree. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.HierarchyRequestError = A;
        var N = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NotFoundError", "The object can not be found here. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NotFoundError = N;
        var T2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "IndexSizeError", "The index is not in the allowed range. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.IndexSizeError = T2;
        var O2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "SyntaxError", "The string did not match the expected pattern. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.SyntaxError = O2;
        var F = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidCharacterError", "The string contains invalid characters. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidCharacterError = F;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(53), i2 = ["kind", "resolve", "construct", "instanceOf", "predicate", "represent", "defaultStyle", "styleAliases"], o = ["scalar", "sequence", "mapping"];
        e2.exports = function(e3, t3) {
          var r2, a3;
          if (t3 = t3 || {}, Object.keys(t3).forEach(function(t4) {
            if (i2.indexOf(t4) === -1)
              throw new n('Unknown option "' + t4 + '" is met in definition of "' + e3 + '" YAML type.');
          }), this.tag = e3, this.kind = t3.kind || null, this.resolve = t3.resolve || function() {
            return true;
          }, this.construct = t3.construct || function(e4) {
            return e4;
          }, this.instanceOf = t3.instanceOf || null, this.predicate = t3.predicate || null, this.represent = t3.represent || null, this.defaultStyle = t3.defaultStyle || null, this.styleAliases = (r2 = t3.styleAliases || null, a3 = {}, r2 !== null && Object.keys(r2).forEach(function(e4) {
            r2[e4].forEach(function(t4) {
              a3[String(t4)] = e4;
            });
          }), a3), o.indexOf(this.kind) === -1)
            throw new n('Unknown kind "' + this.kind + '" is specified for "' + e3 + '" YAML type.');
        };
      }, function(e2, t2, r) {
        (function(t3) {
          var r2 = function(e3) {
            return e3 && e3.Math == Math && e3;
          };
          e2.exports = r2(typeof globalThis == "object" && globalThis) || r2(typeof window == "object" && window) || r2(typeof self == "object" && self) || r2(typeof t3 == "object" && t3) || Function("return this")();
        }).call(this, r(78));
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.idl_defineConst = function(e3, t3, r2) {
          Object.defineProperty(e3, t3, { writable: false, enumerable: true, configurable: false, value: r2 });
        };
      }, function(e2, t2) {
        e2.exports = function(e3) {
          return typeof e3 == "object" ? e3 !== null : typeof e3 == "function";
        };
      }, function(e2, t2) {
        var r = {}.hasOwnProperty;
        e2.exports = function(e3, t3) {
          return r.call(e3, t3);
        };
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(115), o = r(18), a3 = r(56), s3 = Object.defineProperty;
        t2.f = n ? s3 : function(e3, t3, r2) {
          if (o(e3), t3 = a3(t3, true), o(r2), i2)
            try {
              return s3(e3, t3, r2);
            } catch (e4) {
            }
          if ("get" in r2 || "set" in r2)
            throw TypeError("Accessors not supported");
          return "value" in r2 && (e3[t3] = r2.value), e3;
        };
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !n(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(3), o = r(2);
        function a3(e3, t3, r2) {
          if (r2 === void 0 && (r2 = false), r2 && i2.Guard.isElementNode(t3) && i2.Guard.isShadowRoot(t3.shadowRoot) && t3.shadowRoot._firstChild)
            return t3.shadowRoot._firstChild;
          if (t3._firstChild)
            return t3._firstChild;
          if (t3 === e3)
            return null;
          if (t3._nextSibling)
            return t3._nextSibling;
          for (var n2 = t3._parent; n2 && n2 !== e3; ) {
            if (n2._nextSibling)
              return n2._nextSibling;
            n2 = n2._parent;
          }
          return null;
        }
        function s3() {
          var e3;
          return (e3 = {})[Symbol.iterator] = function() {
            return { next: function() {
              return { done: true, value: null };
            } };
          }, e3;
        }
        function u2(e3, t3, r2, n2) {
          t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false);
          for (var i3 = t3 ? e3 : a3(e3, e3, r2); i3 && n2 && !n2(i3); )
            i3 = a3(e3, i3, r2);
          return i3;
        }
        function l(e3, t3, r2, n2, i3) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = a3(e3, t3, n2); o2 && i3 && !i3(o2); )
            o2 = a3(e3, o2, n2);
          return o2;
        }
        function c2(e3, t3, r2, n2) {
          var i3;
          return t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), t3 || e3._children.size !== 0 ? ((i3 = {})[Symbol.iterator] = function() {
            var i4 = t3 ? e3 : a3(e3, e3, r2);
            return { next: function() {
              for (; i4 && n2 && !n2(i4); )
                i4 = a3(e3, i4, r2);
              if (i4 === null)
                return { done: true, value: null };
              var t4 = { done: false, value: i4 };
              return i4 = a3(e3, i4, r2), t4;
            } };
          }, i3) : s3();
        }
        function h3(e3, t3, r2) {
          t3 === void 0 && (t3 = false);
          for (var n2 = t3 ? e3 : e3._parent; n2 && r2 && !r2(n2); )
            n2 = n2._parent;
          return n2;
        }
        function p(e3, t3, r2, n2) {
          r2 === void 0 && (r2 = false);
          for (var i3 = t3._parent; i3 && n2 && !n2(i3); )
            i3 = i3._parent;
          return i3;
        }
        function f(e3) {
          return i2.Guard.isDocumentTypeNode(e3) ? 0 : i2.Guard.isCharacterDataNode(e3) ? e3._data.length : e3._children.size;
        }
        function d3(e3, t3) {
          if (t3 === void 0 && (t3 = false), t3) {
            var r2 = d3(e3, false);
            return i2.Guard.isShadowRoot(r2) ? d3(r2._host, true) : r2;
          }
          return e3._parent ? d3(e3._parent) : e3;
        }
        function m3(e3, t3, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = r2 ? e3 : n2 && i2.Guard.isShadowRoot(e3) ? e3._host : e3._parent; o2 !== null; ) {
            if (o2 === t3)
              return true;
            o2 = n2 && i2.Guard.isShadowRoot(o2) ? o2._host : o2._parent;
          }
          return false;
        }
        function y3(e3) {
          for (var t3 = d3(e3), r2 = 0, n2 = u2(t3); n2 !== null; ) {
            if (r2++, n2 === e3)
              return r2;
            n2 = l(t3, n2);
          }
          return -1;
        }
        t2.tree_getFirstDescendantNode = u2, t2.tree_getNextDescendantNode = l, t2.tree_getDescendantNodes = c2, t2.tree_getDescendantElements = function(e3, t3, r2, n2) {
          var o2;
          return t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), t3 || e3._children.size !== 0 ? ((o2 = {})[Symbol.iterator] = function() {
            var o3 = c2(e3, t3, r2, function(e4) {
              return i2.Guard.isElementNode(e4);
            })[Symbol.iterator](), a4 = o3.next().value;
            return { next: function() {
              for (; a4 && n2 && !n2(a4); )
                a4 = o3.next().value;
              if (a4 === null)
                return { done: true, value: null };
              var e4 = { done: false, value: a4 };
              return a4 = o3.next().value, e4;
            } };
          }, o2) : s3();
        }, t2.tree_getSiblingNodes = function(e3, t3, r2) {
          var n2;
          return t3 === void 0 && (t3 = false), e3._parent && e3._parent._children.size !== 0 ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = e3._parent ? e3._parent._firstChild : null;
            return { next: function() {
              for (; n3 && (r2 && !r2(n3) || !t3 && n3 === e3); )
                n3 = n3._nextSibling;
              if (n3 === null)
                return { done: true, value: null };
              var i3 = { done: false, value: n3 };
              return n3 = n3._nextSibling, i3;
            } };
          }, n2) : s3();
        }, t2.tree_getFirstAncestorNode = h3, t2.tree_getNextAncestorNode = p, t2.tree_getAncestorNodes = function(e3, t3, r2) {
          var n2;
          return t3 === void 0 && (t3 = false), t3 || e3._parent ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = h3(e3, t3, r2);
            return { next: function() {
              if (n3 === null)
                return { done: true, value: null };
              var e4 = { done: false, value: n3 };
              return n3 = p(0, n3, t3, r2), e4;
            } };
          }, n2) : s3();
        }, t2.tree_getCommonAncestor = function(e3, t3) {
          if (e3 === t3)
            return e3._parent;
          for (var r2 = [], n2 = [], i3 = h3(e3, true); i3 !== null; )
            r2.push(i3), i3 = p(0, i3, true);
          for (var o2 = h3(t3, true); o2 !== null; )
            n2.push(o2), o2 = p(0, o2, true);
          for (var a4 = r2.length, s4 = n2.length, u3 = null, l2 = Math.min(a4, s4); l2 > 0; l2--) {
            var c3 = r2[--a4];
            if (c3 !== n2[--s4])
              break;
            u3 = c3;
          }
          return u3;
        }, t2.tree_getFollowingNode = function(e3, t3) {
          if (t3._firstChild)
            return t3._firstChild;
          if (t3._nextSibling)
            return t3._nextSibling;
          for (; ; ) {
            var r2 = t3._parent;
            if (r2 === null || r2 === e3)
              return null;
            if (r2._nextSibling)
              return r2._nextSibling;
            t3 = r2;
          }
        }, t2.tree_getPrecedingNode = function(e3, t3) {
          return t3 === e3 ? null : t3._previousSibling ? (t3 = t3._previousSibling)._lastChild ? t3._lastChild : t3 : t3._parent;
        }, t2.tree_isConstrained = function e3(t3) {
          var r2, i3, a4, s4, u3, l2;
          switch (t3._nodeType) {
            case o.NodeType.Document:
              var c3 = false, h4 = false;
              try {
                for (var p2 = n(t3._children), f2 = p2.next(); !f2.done; f2 = p2.next()) {
                  switch (f2.value._nodeType) {
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.Comment:
                      break;
                    case o.NodeType.DocumentType:
                      if (c3 || h4)
                        return false;
                      c3 = true;
                      break;
                    case o.NodeType.Element:
                      if (h4)
                        return false;
                      h4 = true;
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  f2 && !f2.done && (i3 = p2.return) && i3.call(p2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              break;
            case o.NodeType.DocumentFragment:
            case o.NodeType.Element:
              try {
                for (var d4 = n(t3._children), m4 = d4.next(); !m4.done; m4 = d4.next()) {
                  switch (m4.value._nodeType) {
                    case o.NodeType.Element:
                    case o.NodeType.Text:
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.CData:
                    case o.NodeType.Comment:
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e4) {
                a4 = { error: e4 };
              } finally {
                try {
                  m4 && !m4.done && (s4 = d4.return) && s4.call(d4);
                } finally {
                  if (a4)
                    throw a4.error;
                }
              }
              break;
            case o.NodeType.DocumentType:
            case o.NodeType.Text:
            case o.NodeType.ProcessingInstruction:
            case o.NodeType.CData:
            case o.NodeType.Comment:
              return !t3.hasChildNodes();
          }
          try {
            for (var y4 = n(t3._children), v = y4.next(); !v.done; v = y4.next()) {
              if (!e3(v.value))
                return false;
            }
          } catch (e4) {
            u3 = { error: e4 };
          } finally {
            try {
              v && !v.done && (l2 = y4.return) && l2.call(y4);
            } finally {
              if (u3)
                throw u3.error;
            }
          }
          return true;
        }, t2.tree_nodeLength = f, t2.tree_isEmpty = function(e3) {
          return f(e3) === 0;
        }, t2.tree_rootNode = d3, t2.tree_isDescendantOf = function(e3, t3, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var i3 = u2(e3, r2, n2); i3 !== null; ) {
            if (i3 === t3)
              return true;
            i3 = l(e3, i3, r2, n2);
          }
          return false;
        }, t2.tree_isAncestorOf = m3, t2.tree_isHostIncludingAncestorOf = function e3(t3, r2, n2) {
          if (n2 === void 0 && (n2 = false), m3(t3, r2, n2))
            return true;
          var o2 = d3(t3);
          return !(!i2.Guard.isDocumentFragmentNode(o2) || o2._host === null || !e3(o2._host, r2, n2));
        }, t2.tree_isSiblingOf = function(e3, t3, r2) {
          return r2 === void 0 && (r2 = false), e3 !== t3 ? e3._parent !== null && e3._parent === t3._parent : !!r2;
        }, t2.tree_isPreceding = function(e3, t3) {
          var r2 = y3(e3), n2 = y3(t3);
          return r2 !== -1 && n2 !== -1 && (d3(e3) === d3(t3) && n2 < r2);
        }, t2.tree_isFollowing = function(e3, t3) {
          var r2 = y3(e3), n2 = y3(t3);
          return r2 !== -1 && n2 !== -1 && (d3(e3) === d3(t3) && n2 > r2);
        }, t2.tree_isParentOf = function(e3, t3) {
          return e3._parent === t3;
        }, t2.tree_isChildOf = function(e3, t3) {
          return t3._parent === e3;
        }, t2.tree_previousSibling = function(e3) {
          return e3._previousSibling;
        }, t2.tree_nextSibling = function(e3) {
          return e3._nextSibling;
        }, t2.tree_firstChild = function(e3) {
          return e3._firstChild;
        }, t2.tree_lastChild = function(e3) {
          return e3._lastChild;
        }, t2.tree_treePosition = y3, t2.tree_index = function(e3) {
          for (var t3 = 0; e3._previousSibling !== null; )
            t3++, e3 = e3._previousSibling;
          return t3;
        }, t2.tree_retarget = function(e3, t3) {
          for (; ; ) {
            if (!e3 || !i2.Guard.isNode(e3))
              return e3;
            var r2 = d3(e3);
            if (!i2.Guard.isShadowRoot(r2))
              return e3;
            if (t3 && i2.Guard.isNode(t3) && m3(r2, t3, true, true))
              return e3;
            e3 = r2.host;
          }
        };
      }, function(e2, t2, r) {
        var n = r(13);
        e2.exports = function(e3) {
          if (!n(e3))
            throw TypeError(String(e3) + " is not an object");
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(24), i2 = r(130), o = r(49), a3 = r(43), s3 = r(88), u2 = a3.set, l = a3.getterFor("Array Iterator");
        e2.exports = s3(Array, "Array", function(e3, t3) {
          u2(this, { type: "Array Iterator", target: n(e3), index: 0, kind: t3 });
        }, function() {
          var e3 = l(this), t3 = e3.target, r2 = e3.kind, n2 = e3.index++;
          return !t3 || n2 >= t3.length ? (e3.target = void 0, { value: void 0, done: true }) : r2 == "keys" ? { value: n2, done: false } : r2 == "values" ? { value: t3[n2], done: false } : { value: [n2, t3[n2]], done: false };
        }, "values"), o.Arguments = o.Array, i2("keys"), i2("values"), i2("entries");
      }, function(e2, t2, r) {
        var n = r(90), i2 = r(25), o = r(202);
        n || i2(Object.prototype, "toString", o, { unsafe: true });
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(15), o = r(40);
        e2.exports = n ? function(e3, t3, r2) {
          return i2.f(e3, t3, o(1, r2));
        } : function(e3, t3, r2) {
          return e3[t3] = r2, e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(137).charAt, i2 = r(43), o = r(88), a3 = i2.set, s3 = i2.getterFor("String Iterator");
        o(String, "String", function(e3) {
          a3(this, { type: "String Iterator", string: String(e3), index: 0 });
        }, function() {
          var e3, t3 = s3(this), r2 = t3.string, i3 = t3.index;
          return i3 >= r2.length ? { value: void 0, done: true } : (e3 = n(r2, i3), t3.index += e3.length, { value: e3, done: false });
        });
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(203), o = r(19), a3 = r(21), s3 = r(5), u2 = s3("iterator"), l = s3("toStringTag"), c2 = o.values;
        for (var h3 in i2) {
          var p = n[h3], f = p && p.prototype;
          if (f) {
            if (f[u2] !== c2)
              try {
                a3(f, u2, c2);
              } catch (e3) {
                f[u2] = c2;
              }
            if (f[l] || a3(f, l, h3), i2[h3]) {
              for (var d3 in o)
                if (f[d3] !== o[d3])
                  try {
                    a3(f, d3, o[d3]);
                  } catch (e3) {
                    f[d3] = o[d3];
                  }
            }
          }
        }
      }, function(e2, t2, r) {
        var n = r(41), i2 = r(35);
        e2.exports = function(e3) {
          return n(i2(e3));
        };
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(21), o = r(14), a3 = r(80), s3 = r(117), u2 = r(43), l = u2.get, c2 = u2.enforce, h3 = String(String).split("String");
        (e2.exports = function(e3, t3, r2, s4) {
          var u3 = !!s4 && !!s4.unsafe, l2 = !!s4 && !!s4.enumerable, p = !!s4 && !!s4.noTargetGet;
          typeof r2 == "function" && (typeof t3 != "string" || o(r2, "name") || i2(r2, "name", t3), c2(r2).source = h3.join(typeof t3 == "string" ? t3 : "")), e3 !== n ? (u3 ? !p && e3[t3] && (l2 = true) : delete e3[t3], l2 ? e3[t3] = r2 : i2(e3, t3, r2)) : l2 ? e3[t3] = r2 : a3(t3, r2);
        })(Function.prototype, "toString", function() {
          return typeof this == "function" && l(this).source || s3(this);
        });
      }, function(e2, t2, r) {
        var n = r(47), i2 = Math.min;
        e2.exports = function(e3) {
          return e3 > 0 ? i2(n(e3), 9007199254740991) : 0;
        };
      }, function(e2, t2, r) {
        var n = r(35);
        e2.exports = function(e3) {
          return Object(n(e3));
        };
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(8), o = r(14), a3 = Object.defineProperty, s3 = {}, u2 = function(e3) {
          throw e3;
        };
        e2.exports = function(e3, t3) {
          if (o(s3, e3))
            return s3[e3];
          t3 || (t3 = {});
          var r2 = [][e3], l = !!o(t3, "ACCESSORS") && t3.ACCESSORS, c2 = o(t3, 0) ? t3[0] : u2, h3 = o(t3, 1) ? t3[1] : void 0;
          return s3[e3] = !!r2 && !i2(function() {
            if (l && !n)
              return true;
            var e4 = { length: -1 };
            l ? a3(e4, 1, { enumerable: true, get: u2 }) : e4[1] = 1, r2.call(e4, c2, h3);
          });
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(148), i2 = r(149), o = r(151), a3 = r(98), s3 = r(153), u2 = r(154), l = r(155), c2 = r(99), h3 = r(100), p = r(156), f = r(157), d3 = r(101), m3 = r(158), y3 = r(159), v = r(160), _ = r(161), g = r(162), b2 = r(163), x2 = r(164), w2 = r(165), E2 = r(166), D2 = r(167), S3 = r(168), C = r(169), A = r(170);
        t2.create_domImplementation = function(e3) {
          return n.DOMImplementationImpl._create(e3);
        }, t2.create_window = function() {
          return i2.WindowImpl._create();
        }, t2.create_xmlDocument = function() {
          return new o.XMLDocumentImpl();
        }, t2.create_document = function() {
          return new a3.DocumentImpl();
        }, t2.create_abortController = function() {
          return new s3.AbortControllerImpl();
        }, t2.create_abortSignal = function() {
          return u2.AbortSignalImpl._create();
        }, t2.create_documentType = function(e3, t3, r2, n2) {
          return l.DocumentTypeImpl._create(e3, t3, r2, n2);
        }, t2.create_element = function(e3, t3, r2, n2) {
          return c2.ElementImpl._create(e3, t3, r2, n2);
        }, t2.create_htmlElement = function(e3, t3, r2, n2) {
          return c2.ElementImpl._create(e3, t3, r2, n2);
        }, t2.create_htmlUnknownElement = function(e3, t3, r2, n2) {
          return c2.ElementImpl._create(e3, t3, r2, n2);
        }, t2.create_documentFragment = function(e3) {
          return h3.DocumentFragmentImpl._create(e3);
        }, t2.create_shadowRoot = function(e3, t3) {
          return p.ShadowRootImpl._create(e3, t3);
        }, t2.create_attr = function(e3, t3) {
          return f.AttrImpl._create(e3, t3);
        }, t2.create_text = function(e3, t3) {
          return d3.TextImpl._create(e3, t3);
        }, t2.create_cdataSection = function(e3, t3) {
          return m3.CDATASectionImpl._create(e3, t3);
        }, t2.create_comment = function(e3, t3) {
          return y3.CommentImpl._create(e3, t3);
        }, t2.create_processingInstruction = function(e3, t3, r2) {
          return v.ProcessingInstructionImpl._create(e3, t3, r2);
        }, t2.create_htmlCollection = function(e3, t3) {
          return t3 === void 0 && (t3 = function() {
            return true;
          }), _.HTMLCollectionImpl._create(e3, t3);
        }, t2.create_nodeList = function(e3) {
          return g.NodeListImpl._create(e3);
        }, t2.create_nodeListStatic = function(e3, t3) {
          return b2.NodeListStaticImpl._create(e3, t3);
        }, t2.create_namedNodeMap = function(e3) {
          return x2.NamedNodeMapImpl._create(e3);
        }, t2.create_range = function(e3, t3) {
          return w2.RangeImpl._create(e3, t3);
        }, t2.create_nodeIterator = function(e3, t3, r2) {
          return E2.NodeIteratorImpl._create(e3, t3, r2);
        }, t2.create_treeWalker = function(e3, t3) {
          return D2.TreeWalkerImpl._create(e3, t3);
        }, t2.create_nodeFilter = function() {
          return S3.NodeFilterImpl._create();
        }, t2.create_mutationRecord = function(e3, t3, r2, n2, i3, o2, a4, s4, u3) {
          return C.MutationRecordImpl._create(e3, t3, r2, n2, i3, o2, a4, s4, u3);
        }, t2.create_domTokenList = function(e3, t3) {
          return A.DOMTokenListImpl._create(e3, t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(17), a3 = r(3), s3 = r(72), u2 = /* @__PURE__ */ new Map();
        function l(e3, t3) {
          if (t3 !== e3._root && o.tree_isAncestorOf(e3._reference, t3, true)) {
            if (e3._pointerBeforeReference)
              for (; ; ) {
                var r2 = o.tree_getFollowingNode(e3._root, t3);
                if (r2 !== null && o.tree_isDescendantOf(e3._root, r2, true) && !o.tree_isDescendantOf(t3, r2, true))
                  return void (e3._reference = r2);
                if (r2 === null)
                  return void (e3._pointerBeforeReference = false);
              }
            if (t3._previousSibling === null)
              t3._parent !== null && (e3._reference = t3._parent);
            else {
              for (var n2 = t3._previousSibling, i3 = o.tree_getFirstDescendantNode(t3._previousSibling, true, false); i3 !== null; )
                i3 !== null && (n2 = i3), i3 = o.tree_getNextDescendantNode(t3._previousSibling, i3, true, false);
              e3._reference = n2;
            }
          }
        }
        function c2(e3, t3, r2, n2, i3) {
          if (a3.Guard.isSlot(e3) && t3 === "name" && i3 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e3._name = n2 === null || n2 === "" ? "" : n2, s3.shadowTree_assignSlotablesForATree(o.tree_rootNode(e3));
          }
        }
        function h3(e3, t3, r2, n2, i3) {
          if (a3.Guard.isSlotable(e3) && t3 === "slot" && i3 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e3._name = n2 === null || n2 === "" ? "" : n2, s3.shadowTree_isAssigned(e3) && s3.shadowTree_assignSlotables(e3._assignedSlot), s3.shadowTree_assignASlot(e3);
          }
        }
        function p(e3, t3, r2, n2) {
          t3 === "id" && n2 === null && (e3._uniqueIdentifier = r2 || void 0);
        }
        t2.dom_runRemovingSteps = function(e3, t3) {
        }, t2.dom_runCloningSteps = function(e3, t3, r2, n2) {
        }, t2.dom_runAdoptingSteps = function(e3, t3) {
        }, t2.dom_runAttributeChangeSteps = function(e3, t3, r2, o2, a4) {
          var s4, u3;
          i2.dom.features.slots && (h3.call(e3, e3, t3, r2, o2, a4), c2.call(e3, e3, t3, r2, o2, a4)), p.call(e3, e3, t3, o2, a4);
          try {
            for (var l2 = n(e3._attributeChangeSteps), f = l2.next(); !f.done; f = l2.next()) {
              f.value.call(e3, e3, t3, r2, o2, a4);
            }
          } catch (e4) {
            s4 = { error: e4 };
          } finally {
            try {
              f && !f.done && (u3 = l2.return) && u3.call(l2);
            } finally {
              if (s4)
                throw s4.error;
            }
          }
        }, t2.dom_runInsertionSteps = function(e3) {
        }, t2.dom_runNodeIteratorPreRemovingSteps = function(e3, t3) {
          l.call(e3, e3, t3);
        }, t2.dom_hasSupportedTokens = function(e3) {
          return u2.has(e3);
        }, t2.dom_getSupportedTokens = function(e3) {
          return u2.get(e3) || /* @__PURE__ */ new Set();
        }, t2.dom_runEventConstructingSteps = function(e3) {
        }, t2.dom_runChildTextContentChangeSteps = function(e3) {
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(11), o = r(46), a3 = r(44), s3 = r(16), u2 = r(86), l = r(124), c2 = r(8), h3 = r(14), p = r(59), f = r(13), d3 = r(18), m3 = r(27), y3 = r(24), v = r(56), _ = r(40), g = r(60), b2 = r(61), x2 = r(82), w2 = r(190), E2 = r(85), D2 = r(55), S3 = r(15), C = r(79), A = r(21), N = r(25), T2 = r(81), O2 = r(57), F = r(45), k2 = r(58), P = r(5), I2 = r(125), L2 = r(126), M3 = r(62), B2 = r(43), j = r(36).forEach, R2 = O2("hidden"), z2 = P("toPrimitive"), U = B2.set, G2 = B2.getterFor("Symbol"), X2 = Object.prototype, q2 = i2.Symbol, W = o("JSON", "stringify"), H3 = D2.f, J = S3.f, Y2 = w2.f, V = C.f, K2 = T2("symbols"), $ = T2("op-symbols"), Q2 = T2("string-to-symbol-registry"), Z = T2("symbol-to-string-registry"), ee = T2("wks"), te = i2.QObject, re = !te || !te.prototype || !te.prototype.findChild, ne = s3 && c2(function() {
          return g(J({}, "a", { get: function() {
            return J(this, "a", { value: 7 }).a;
          } })).a != 7;
        }) ? function(e3, t3, r2) {
          var n2 = H3(X2, t3);
          n2 && delete X2[t3], J(e3, t3, r2), n2 && e3 !== X2 && J(X2, t3, n2);
        } : J, ie = function(e3, t3) {
          var r2 = K2[e3] = g(q2.prototype);
          return U(r2, { type: "Symbol", tag: e3, description: t3 }), s3 || (r2.description = t3), r2;
        }, oe = l ? function(e3) {
          return typeof e3 == "symbol";
        } : function(e3) {
          return Object(e3) instanceof q2;
        }, ae = function(e3, t3, r2) {
          e3 === X2 && ae($, t3, r2), d3(e3);
          var n2 = v(t3, true);
          return d3(r2), h3(K2, n2) ? (r2.enumerable ? (h3(e3, R2) && e3[R2][n2] && (e3[R2][n2] = false), r2 = g(r2, { enumerable: _(0, false) })) : (h3(e3, R2) || J(e3, R2, _(1, {})), e3[R2][n2] = true), ne(e3, n2, r2)) : J(e3, n2, r2);
        }, se = function(e3, t3) {
          d3(e3);
          var r2 = y3(t3), n2 = b2(r2).concat(he(r2));
          return j(n2, function(t4) {
            s3 && !ue.call(r2, t4) || ae(e3, t4, r2[t4]);
          }), e3;
        }, ue = function(e3) {
          var t3 = v(e3, true), r2 = V.call(this, t3);
          return !(this === X2 && h3(K2, t3) && !h3($, t3)) && (!(r2 || !h3(this, t3) || !h3(K2, t3) || h3(this, R2) && this[R2][t3]) || r2);
        }, le = function(e3, t3) {
          var r2 = y3(e3), n2 = v(t3, true);
          if (r2 !== X2 || !h3(K2, n2) || h3($, n2)) {
            var i3 = H3(r2, n2);
            return !i3 || !h3(K2, n2) || h3(r2, R2) && r2[R2][n2] || (i3.enumerable = true), i3;
          }
        }, ce = function(e3) {
          var t3 = Y2(y3(e3)), r2 = [];
          return j(t3, function(e4) {
            h3(K2, e4) || h3(F, e4) || r2.push(e4);
          }), r2;
        }, he = function(e3) {
          var t3 = e3 === X2, r2 = Y2(t3 ? $ : y3(e3)), n2 = [];
          return j(r2, function(e4) {
            !h3(K2, e4) || t3 && !h3(X2, e4) || n2.push(K2[e4]);
          }), n2;
        };
        (u2 || (N((q2 = function() {
          if (this instanceof q2)
            throw TypeError("Symbol is not a constructor");
          var e3 = arguments.length && arguments[0] !== void 0 ? String(arguments[0]) : void 0, t3 = k2(e3), r2 = function(e4) {
            this === X2 && r2.call($, e4), h3(this, R2) && h3(this[R2], t3) && (this[R2][t3] = false), ne(this, t3, _(1, e4));
          };
          return s3 && re && ne(X2, t3, { configurable: true, set: r2 }), ie(t3, e3);
        }).prototype, "toString", function() {
          return G2(this).tag;
        }), N(q2, "withoutSetter", function(e3) {
          return ie(k2(e3), e3);
        }), C.f = ue, S3.f = ae, D2.f = le, x2.f = w2.f = ce, E2.f = he, I2.f = function(e3) {
          return ie(P(e3), e3);
        }, s3 && (J(q2.prototype, "description", { configurable: true, get: function() {
          return G2(this).description;
        } }), a3 || N(X2, "propertyIsEnumerable", ue, { unsafe: true }))), n({ global: true, wrap: true, forced: !u2, sham: !u2 }, { Symbol: q2 }), j(b2(ee), function(e3) {
          L2(e3);
        }), n({ target: "Symbol", stat: true, forced: !u2 }, { for: function(e3) {
          var t3 = String(e3);
          if (h3(Q2, t3))
            return Q2[t3];
          var r2 = q2(t3);
          return Q2[t3] = r2, Z[r2] = t3, r2;
        }, keyFor: function(e3) {
          if (!oe(e3))
            throw TypeError(e3 + " is not a symbol");
          if (h3(Z, e3))
            return Z[e3];
        }, useSetter: function() {
          re = true;
        }, useSimple: function() {
          re = false;
        } }), n({ target: "Object", stat: true, forced: !u2, sham: !s3 }, { create: function(e3, t3) {
          return t3 === void 0 ? g(e3) : se(g(e3), t3);
        }, defineProperty: ae, defineProperties: se, getOwnPropertyDescriptor: le }), n({ target: "Object", stat: true, forced: !u2 }, { getOwnPropertyNames: ce, getOwnPropertySymbols: he }), n({ target: "Object", stat: true, forced: c2(function() {
          E2.f(1);
        }) }, { getOwnPropertySymbols: function(e3) {
          return E2.f(m3(e3));
        } }), W) && n({ target: "JSON", stat: true, forced: !u2 || c2(function() {
          var e3 = q2();
          return W([e3]) != "[null]" || W({ a: e3 }) != "{}" || W(Object(e3)) != "{}";
        }) }, { stringify: function(e3, t3, r2) {
          for (var n2, i3 = [e3], o2 = 1; arguments.length > o2; )
            i3.push(arguments[o2++]);
          if (n2 = t3, (f(t3) || e3 !== void 0) && !oe(e3))
            return p(t3) || (t3 = function(e4, t4) {
              if (typeof n2 == "function" && (t4 = n2.call(this, e4, t4)), !oe(t4))
                return t4;
            }), i3[1] = t3, W.apply(null, i3);
        } });
        q2.prototype[z2] || A(q2.prototype, z2, q2.prototype.valueOf), M3(q2, "Symbol"), F[R2] = true;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(16), o = r(11), a3 = r(14), s3 = r(13), u2 = r(15).f, l = r(119), c2 = o.Symbol;
        if (i2 && typeof c2 == "function" && (!("description" in c2.prototype) || c2().description !== void 0)) {
          var h3 = {}, p = function() {
            var e3 = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]), t3 = this instanceof p ? new c2(e3) : e3 === void 0 ? c2() : c2(e3);
            return e3 === "" && (h3[t3] = true), t3;
          };
          l(p, c2);
          var f = p.prototype = c2.prototype;
          f.constructor = p;
          var d3 = f.toString, m3 = String(c2("test")) == "Symbol(test)", y3 = /^Symbol\((.*)\)[^)]+$/;
          u2(f, "description", { configurable: true, get: function() {
            var e3 = s3(this) ? this.valueOf() : this, t3 = d3.call(e3);
            if (a3(h3, e3))
              return "";
            var r2 = m3 ? t3.slice(7, -1) : t3.replace(y3, "$1");
            return r2 === "" ? void 0 : r2;
          } }), n({ global: true, forced: true }, { Symbol: p });
        }
      }, function(e2, t2, r) {
        r(126)("iterator");
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(2), u2 = r(70), l = r(3), c2 = r(9), h3 = r(0), p = r(152), f = r(12), d3 = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._parent = null, t4._firstChild = null, t4._lastChild = null, t4._previousSibling = null, t4._nextSibling = null, t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "_childNodes", { get: function() {
            return this.__childNodes || (this.__childNodes = h3.create_nodeList(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverride || a3.dom.window._associatedDocument;
          }, set: function(e4) {
            this._nodeDocumentOverride = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_registeredObserverList", { get: function() {
            return this.__registeredObserverList || (this.__registeredObserverList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nodeType", { get: function() {
            return this._nodeType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nodeName", { get: function() {
            return l.Guard.isElementNode(this) ? this._htmlUppercasedQualifiedName : l.Guard.isAttrNode(this) ? this._qualifiedName : l.Guard.isExclusiveTextNode(this) ? "#text" : l.Guard.isCDATASectionNode(this) ? "#cdata-section" : l.Guard.isProcessingInstructionNode(this) ? this._target : l.Guard.isCommentNode(this) ? "#comment" : l.Guard.isDocumentNode(this) ? "#document" : l.Guard.isDocumentTypeNode(this) ? this._name : l.Guard.isDocumentFragmentNode(this) ? "#document-fragment" : "";
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "baseURI", { get: function() {
            return p.urlSerializer(this._nodeDocument._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "isConnected", { get: function() {
            return l.Guard.isElementNode(this) && h3.shadowTree_isConnected(this);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "ownerDocument", { get: function() {
            return this._nodeType === s3.NodeType.Document ? null : this._nodeDocument;
          }, enumerable: true, configurable: true }), t3.prototype.getRootNode = function(e4) {
            return h3.tree_rootNode(this, !!e4 && e4.composed);
          }, Object.defineProperty(t3.prototype, "parentNode", { get: function() {
            return this._nodeType === s3.NodeType.Attribute ? null : this._parent;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "parentElement", { get: function() {
            return this._parent && l.Guard.isElementNode(this._parent) ? this._parent : null;
          }, enumerable: true, configurable: true }), t3.prototype.hasChildNodes = function() {
            return this._firstChild !== null;
          }, Object.defineProperty(t3.prototype, "childNodes", { get: function() {
            return this._childNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstChild", { get: function() {
            return this._firstChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastChild", { get: function() {
            return this._lastChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nodeValue", { get: function() {
            return l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e4) {
            e4 === null && (e4 = ""), l.Guard.isAttrNode(this) ? h3.attr_setAnExistingAttributeValue(this, e4) : l.Guard.isCharacterDataNode(this) && h3.characterData_replaceData(this, 0, this._data.length, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "textContent", { get: function() {
            return l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h3.text_descendantTextContent(this) : l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e4) {
            e4 === null && (e4 = ""), l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h3.node_stringReplaceAll(e4, this) : l.Guard.isAttrNode(this) ? h3.attr_setAnExistingAttributeValue(this, e4) : l.Guard.isCharacterDataNode(this) && h3.characterData_replaceData(this, 0, h3.tree_nodeLength(this), e4);
          }, enumerable: true, configurable: true }), t3.prototype.normalize = function() {
            for (var e4, t4, r2, n2, i3 = [], s4 = h3.tree_getFirstDescendantNode(this, false, false, function(e5) {
              return l.Guard.isExclusiveTextNode(e5);
            }); s4 !== null; )
              i3.push(s4), s4 = h3.tree_getNextDescendantNode(this, s4, false, false, function(e5) {
                return l.Guard.isExclusiveTextNode(e5);
              });
            for (var u3 = 0; u3 < i3.length; u3++) {
              var c3 = i3[u3];
              if (c3._parent !== null) {
                var p2 = h3.tree_nodeLength(c3);
                if (p2 !== 0) {
                  var f2 = [], d4 = "";
                  try {
                    for (var m3 = (e4 = void 0, o(h3.text_contiguousExclusiveTextNodes(c3))), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                      var v = y3.value;
                      f2.push(v), d4 += v._data;
                    }
                  } catch (t5) {
                    e4 = { error: t5 };
                  } finally {
                    try {
                      y3 && !y3.done && (t4 = m3.return) && t4.call(m3);
                    } finally {
                      if (e4)
                        throw e4.error;
                    }
                  }
                  if (h3.characterData_replaceData(c3, p2, 0, d4), a3.dom.rangeList.size !== 0)
                    for (var _ = c3._nextSibling; _ !== null && l.Guard.isExclusiveTextNode(_); ) {
                      var g = _, b2 = h3.tree_index(g);
                      try {
                        for (var x2 = (r2 = void 0, o(a3.dom.rangeList)), w2 = x2.next(); !w2.done; w2 = x2.next()) {
                          var E2 = w2.value;
                          E2._start[0] === g && (E2._start[0] = c3, E2._start[1] += p2), E2._end[0] === g && (E2._end[0] = c3, E2._end[1] += p2), E2._start[0] === g._parent && E2._start[1] === b2 && (E2._start[0] = c3, E2._start[1] = p2), E2._end[0] === g._parent && E2._end[1] === b2 && (E2._end[0] = c3, E2._end[1] = p2);
                        }
                      } catch (e5) {
                        r2 = { error: e5 };
                      } finally {
                        try {
                          w2 && !w2.done && (n2 = x2.return) && n2.call(x2);
                        } finally {
                          if (r2)
                            throw r2.error;
                        }
                      }
                      p2 += h3.tree_nodeLength(_), _ = _._nextSibling;
                    }
                  for (var D2 = 0; D2 < f2.length; D2++) {
                    (v = f2[D2])._parent !== null && h3.mutation_remove(v, v._parent);
                  }
                } else
                  h3.mutation_remove(c3, c3._parent);
              }
            }
          }, t3.prototype.cloneNode = function(e4) {
            if (e4 === void 0 && (e4 = false), l.Guard.isShadowRoot(this))
              throw new c2.NotSupportedError();
            return h3.node_clone(this, null, e4);
          }, t3.prototype.isEqualNode = function(e4) {
            return e4 === void 0 && (e4 = null), e4 !== null && h3.node_equals(this, e4);
          }, t3.prototype.isSameNode = function(e4) {
            return e4 === void 0 && (e4 = null), this === e4;
          }, t3.prototype.compareDocumentPosition = function(e4) {
            if (e4 === this)
              return 0;
            var t4 = e4, r2 = this, n2 = null, i3 = null;
            if (l.Guard.isAttrNode(t4) && (t4 = (n2 = t4)._element), l.Guard.isAttrNode(r2) && (r2 = (i3 = r2)._element, n2 && t4 && t4 === r2))
              for (var o2 = 0; o2 < r2._attributeList.length; o2++) {
                var u3 = r2._attributeList[o2];
                if (h3.node_equals(u3, n2))
                  return s3.Position.ImplementationSpecific | s3.Position.Preceding;
                if (h3.node_equals(u3, i3))
                  return s3.Position.ImplementationSpecific | s3.Position.Following;
              }
            return t4 === null || r2 === null || h3.tree_rootNode(t4) !== h3.tree_rootNode(r2) ? s3.Position.Disconnected | s3.Position.ImplementationSpecific | (a3.dom.compareCache.check(this, e4) ? s3.Position.Preceding : s3.Position.Following) : !n2 && h3.tree_isAncestorOf(r2, t4) || i3 && t4 === r2 ? s3.Position.Contains | s3.Position.Preceding : !i3 && h3.tree_isDescendantOf(r2, t4) || n2 && t4 === r2 ? s3.Position.ContainedBy | s3.Position.Following : h3.tree_isPreceding(r2, t4) ? s3.Position.Preceding : s3.Position.Following;
          }, t3.prototype.contains = function(e4) {
            return e4 !== null && h3.tree_isDescendantOf(this, e4, true);
          }, t3.prototype.lookupPrefix = function(e4) {
            return e4 ? l.Guard.isElementNode(this) ? h3.node_locateANamespacePrefix(this, e4) : l.Guard.isDocumentNode(this) ? this.documentElement === null ? null : h3.node_locateANamespacePrefix(this.documentElement, e4) : l.Guard.isDocumentTypeNode(this) || l.Guard.isDocumentFragmentNode(this) ? null : l.Guard.isAttrNode(this) ? this._element === null ? null : h3.node_locateANamespacePrefix(this._element, e4) : this._parent !== null && l.Guard.isElementNode(this._parent) ? h3.node_locateANamespacePrefix(this._parent, e4) : null : null;
          }, t3.prototype.lookupNamespaceURI = function(e4) {
            return h3.node_locateANamespace(this, e4 || null);
          }, t3.prototype.isDefaultNamespace = function(e4) {
            return e4 || (e4 = null), h3.node_locateANamespace(this, null) === e4;
          }, t3.prototype.insertBefore = function(e4, t4) {
            return h3.mutation_preInsert(e4, this, t4);
          }, t3.prototype.appendChild = function(e4) {
            return h3.mutation_append(e4, this);
          }, t3.prototype.replaceChild = function(e4, t4) {
            return h3.mutation_replace(t4, e4, this);
          }, t3.prototype.removeChild = function(e4) {
            return h3.mutation_preRemove(e4, this);
          }, t3.prototype._getTheParent = function(e4) {
            return l.Guard.isSlotable(this) && h3.shadowTree_isAssigned(this) ? this._assignedSlot : this._parent;
          }, t3.ELEMENT_NODE = 1, t3.ATTRIBUTE_NODE = 2, t3.TEXT_NODE = 3, t3.CDATA_SECTION_NODE = 4, t3.ENTITY_REFERENCE_NODE = 5, t3.ENTITY_NODE = 6, t3.PROCESSING_INSTRUCTION_NODE = 7, t3.COMMENT_NODE = 8, t3.DOCUMENT_NODE = 9, t3.DOCUMENT_TYPE_NODE = 10, t3.DOCUMENT_FRAGMENT_NODE = 11, t3.NOTATION_NODE = 12, t3.DOCUMENT_POSITION_DISCONNECTED = 1, t3.DOCUMENT_POSITION_PRECEDING = 2, t3.DOCUMENT_POSITION_FOLLOWING = 4, t3.DOCUMENT_POSITION_CONTAINS = 8, t3.DOCUMENT_POSITION_CONTAINED_BY = 16, t3.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32, t3;
        }(u2.EventTargetImpl);
        t2.NodeImpl = d3, d3.prototype._children = new l.EmptySet(), f.idl_defineConst(d3.prototype, "ELEMENT_NODE", 1), f.idl_defineConst(d3.prototype, "ATTRIBUTE_NODE", 2), f.idl_defineConst(d3.prototype, "TEXT_NODE", 3), f.idl_defineConst(d3.prototype, "CDATA_SECTION_NODE", 4), f.idl_defineConst(d3.prototype, "ENTITY_REFERENCE_NODE", 5), f.idl_defineConst(d3.prototype, "ENTITY_NODE", 6), f.idl_defineConst(d3.prototype, "PROCESSING_INSTRUCTION_NODE", 7), f.idl_defineConst(d3.prototype, "COMMENT_NODE", 8), f.idl_defineConst(d3.prototype, "DOCUMENT_NODE", 9), f.idl_defineConst(d3.prototype, "DOCUMENT_TYPE_NODE", 10), f.idl_defineConst(d3.prototype, "DOCUMENT_FRAGMENT_NODE", 11), f.idl_defineConst(d3.prototype, "NOTATION_NODE", 12), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_DISCONNECTED", 1), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_PRECEDING", 2), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_FOLLOWING", 4), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_CONTAINS", 8), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_CONTAINED_BY", 16), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", 32);
      }, function(e2, t2) {
        e2.exports = function(e3) {
          if (e3 == null)
            throw TypeError("Can't call method on " + e3);
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(87), i2 = r(41), o = r(27), a3 = r(26), s3 = r(128), u2 = [].push, l = function(e3) {
          var t3 = e3 == 1, r2 = e3 == 2, l2 = e3 == 3, c2 = e3 == 4, h3 = e3 == 6, p = e3 == 5 || h3;
          return function(f, d3, m3, y3) {
            for (var v, _, g = o(f), b2 = i2(g), x2 = n(d3, m3, 3), w2 = a3(b2.length), E2 = 0, D2 = y3 || s3, S3 = t3 ? D2(f, w2) : r2 ? D2(f, 0) : void 0; w2 > E2; E2++)
              if ((p || E2 in b2) && (_ = x2(v = b2[E2], E2, g), e3)) {
                if (t3)
                  S3[E2] = _;
                else if (_)
                  switch (e3) {
                    case 3:
                      return true;
                    case 5:
                      return v;
                    case 6:
                      return E2;
                    case 2:
                      u2.call(S3, v);
                  }
                else if (c2)
                  return false;
              }
            return h3 ? -1 : l2 || c2 ? c2 : S3;
          };
        };
        e2.exports = { forEach: l(0), map: l(1), filter: l(2), some: l(3), every: l(4), find: l(5), findIndex: l(6) };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(9), u2 = r(2), l = r(3), c2 = r(1), h3 = r(7), p = r(73), f = r(17), d3 = r(172), m3 = r(72), y3 = r(51), v = r(30), _ = r(106);
        function g(e3, t3, r2) {
          var i3, o2, a4, l2, c3, h4, p2, d4, m4 = t3._nodeType, y4 = e3._nodeType, v2 = r2 ? r2._nodeType : null;
          if (m4 !== u2.NodeType.Document && m4 !== u2.NodeType.DocumentFragment && m4 !== u2.NodeType.Element)
            throw new s3.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + t3.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(t3, e3, true))
            throw new s3.HierarchyRequestError("The node to be inserted cannot be an inclusive ancestor of parent node. Node is " + e3.nodeName + ", parent node is " + t3.nodeName + ".");
          if (r2 !== null && r2._parent !== t3)
            throw new s3.NotFoundError("The reference child node cannot be found under parent node. Child node is " + r2.nodeName + ", parent node is " + t3.nodeName + ".");
          if (y4 !== u2.NodeType.DocumentFragment && y4 !== u2.NodeType.DocumentType && y4 !== u2.NodeType.Element && y4 !== u2.NodeType.Text && y4 !== u2.NodeType.ProcessingInstruction && y4 !== u2.NodeType.CData && y4 !== u2.NodeType.Comment)
            throw new s3.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + e3.nodeName + ".");
          if (y4 === u2.NodeType.Text && m4 === u2.NodeType.Document)
            throw new s3.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + e3.nodeName + ".");
          if (y4 === u2.NodeType.DocumentType && m4 !== u2.NodeType.Document)
            throw new s3.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + t3.nodeName + ".");
          if (m4 === u2.NodeType.Document) {
            if (y4 === u2.NodeType.DocumentFragment) {
              var _2 = 0;
              try {
                for (var g2 = n(e3._children), b3 = g2.next(); !b3.done; b3 = g2.next()) {
                  var x3 = b3.value;
                  if (x3._nodeType === u2.NodeType.Element)
                    _2++;
                  else if (x3._nodeType === u2.NodeType.Text)
                    throw new s3.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + x3.nodeName + ".");
                }
              } catch (e4) {
                i3 = { error: e4 };
              } finally {
                try {
                  b3 && !b3.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
              if (_2 > 1)
                throw new s3.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + _2 + " element nodes.");
              if (_2 === 1) {
                try {
                  for (var w3 = n(t3._children), E2 = w3.next(); !E2.done; E2 = w3.next()) {
                    if (E2.value._nodeType === u2.NodeType.Element)
                      throw new s3.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e4) {
                  a4 = { error: e4 };
                } finally {
                  try {
                    E2 && !E2.done && (l2 = w3.return) && l2.call(w3);
                  } finally {
                    if (a4)
                      throw a4.error;
                  }
                }
                if (r2) {
                  if (v2 === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  for (var D2 = r2._nextSibling; D2; ) {
                    if (D2._nodeType === u2.NodeType.DocumentType)
                      throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node.");
                    D2 = D2._nextSibling;
                  }
                }
              }
            } else if (y4 === u2.NodeType.Element) {
              try {
                for (var S3 = n(t3._children), C = S3.next(); !C.done; C = S3.next()) {
                  if (C.value._nodeType === u2.NodeType.Element)
                    throw new s3.HierarchyRequestError("Document already has a document element node. Node is " + e3.nodeName + ".");
                }
              } catch (e4) {
                c3 = { error: e4 };
              } finally {
                try {
                  C && !C.done && (h4 = S3.return) && h4.call(S3);
                } finally {
                  if (c3)
                    throw c3.error;
                }
              }
              if (r2) {
                if (v2 === u2.NodeType.DocumentType)
                  throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e3.nodeName + ".");
                for (D2 = r2._nextSibling; D2; ) {
                  if (D2._nodeType === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e3.nodeName + ".");
                  D2 = D2._nextSibling;
                }
              }
            } else if (y4 === u2.NodeType.DocumentType) {
              try {
                for (var A = n(t3._children), N = A.next(); !N.done; N = A.next()) {
                  if (N.value._nodeType === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Document already has a document type node. Node is " + e3.nodeName + ".");
                }
              } catch (e4) {
                p2 = { error: e4 };
              } finally {
                try {
                  N && !N.done && (d4 = A.return) && d4.call(A);
                } finally {
                  if (p2)
                    throw p2.error;
                }
              }
              if (r2)
                for (var T2 = r2._previousSibling; T2; ) {
                  if (T2._nodeType === u2.NodeType.Element)
                    throw new s3.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e3.nodeName + ".");
                  T2 = T2._previousSibling;
                }
              else
                for (T2 = t3._firstChild; T2; ) {
                  if (T2._nodeType === u2.NodeType.Element)
                    throw new s3.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e3.nodeName + ".");
                  T2 = T2._nextSibling;
                }
            }
          }
        }
        function b2(e3, t3, r2) {
          g(e3, t3, r2);
          var n2 = r2;
          return n2 === e3 && (n2 = e3._nextSibling), _.document_adopt(e3, t3._nodeDocument), x2(e3, t3, n2), e3;
        }
        function x2(e3, t3, r2, i3) {
          var s4, d4;
          if (r2 !== null || e3._nodeType === u2.NodeType.DocumentFragment) {
            var _2 = e3._nodeType === u2.NodeType.DocumentFragment ? e3._children.size : 1;
            if (r2 !== null && a3.dom.rangeList.size !== 0) {
              var g2 = f.tree_index(r2);
              try {
                for (var b3 = n(a3.dom.rangeList), x3 = b3.next(); !x3.done; x3 = b3.next()) {
                  var E2 = x3.value;
                  E2._start[0] === t3 && E2._start[1] > g2 && (E2._start[1] += _2), E2._end[0] === t3 && E2._end[1] > g2 && (E2._end[1] += _2);
                }
              } catch (e4) {
                s4 = { error: e4 };
              } finally {
                try {
                  x3 && !x3.done && (d4 = b3.return) && d4.call(b3);
                } finally {
                  if (s4)
                    throw s4.error;
                }
              }
            }
            var D2 = e3._nodeType === u2.NodeType.DocumentFragment ? new (Array.bind.apply(Array, o([void 0], e3._children)))() : [e3];
            if (e3._nodeType === u2.NodeType.DocumentFragment)
              for (; e3._firstChild; )
                w2(e3._firstChild, e3, true);
            a3.dom.features.mutationObservers && e3._nodeType === u2.NodeType.DocumentFragment && y3.observer_queueTreeMutationRecord(e3, [], D2, null, null);
            for (var S3 = r2 ? r2._previousSibling : t3._lastChild, C = r2 === null ? -1 : f.tree_index(r2), A = 0; A < D2.length; A++) {
              var N = D2[A];
              if (l.Guard.isElementNode(N) && (l.Guard.isDocumentNode(t3) && (t3._documentElement = N), N._nodeDocument._hasNamespaces || N._namespace === null && N._namespacePrefix === null || (N._nodeDocument._hasNamespaces = true)), N._parent = t3, r2 === null ? h3.set.append(t3._children, N) : (h3.set.insert(t3._children, N, C), C++), t3._firstChild === null)
                N._previousSibling = null, N._nextSibling = null, t3._firstChild = N, t3._lastChild = N;
              else {
                var T2 = r2 ? r2._previousSibling : t3._lastChild, O2 = r2 || null;
                N._previousSibling = T2, N._nextSibling = O2, T2 && (T2._nextSibling = N), O2 && (O2._previousSibling = N), T2 || (t3._firstChild = N), O2 || (t3._lastChild = N);
              }
              a3.dom.features.slots && t3._shadowRoot !== null && l.Guard.isSlotable(N) && m3.shadowTree_assignASlot(N), a3.dom.features.steps && l.Guard.isTextNode(N) && v.dom_runChildTextContentChangeSteps(t3), a3.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t3)) && l.Guard.isSlot(t3) && c2.isEmpty(t3._assignedNodes) && m3.shadowTree_signalASlotChange(t3), a3.dom.features.slots && m3.shadowTree_assignSlotablesForATree(f.tree_rootNode(N));
              for (var F = f.tree_getFirstDescendantNode(N, true, true); F !== null; )
                a3.dom.features.steps && v.dom_runInsertionSteps(F), a3.dom.features.customElements && l.Guard.isElementNode(F) && m3.shadowTree_isConnected(F) && (l.Guard.isCustomElementNode(F) ? p.customElement_enqueueACustomElementCallbackReaction(F, "connectedCallback", []) : p.customElement_tryToUpgrade(F)), F = f.tree_getNextDescendantNode(N, F, true, true);
            }
            a3.dom.features.mutationObservers && (i3 || y3.observer_queueTreeMutationRecord(t3, D2, [], S3, r2));
          } else
            !function(e4, t4, r3) {
              var n2 = t4._lastChild;
              l.Guard.isElementNode(e4) && (l.Guard.isDocumentNode(t4) && (t4._documentElement = e4), e4._nodeDocument._hasNamespaces || e4._namespace === null && e4._namespacePrefix === null || (e4._nodeDocument._hasNamespaces = true));
              if (e4._parent = t4, t4._children.add(e4), t4._firstChild === null)
                e4._previousSibling = null, e4._nextSibling = null, t4._firstChild = e4, t4._lastChild = e4;
              else {
                var i4 = t4._lastChild;
                e4._previousSibling = i4, e4._nextSibling = null, i4 && (i4._nextSibling = e4), i4 || (t4._firstChild = e4), t4._lastChild = e4;
              }
              a3.dom.features.slots && t4._shadowRoot !== null && l.Guard.isSlotable(e4) && m3.shadowTree_assignASlot(e4);
              a3.dom.features.steps && l.Guard.isTextNode(e4) && v.dom_runChildTextContentChangeSteps(t4);
              a3.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t4)) && l.Guard.isSlot(t4) && c2.isEmpty(t4._assignedNodes) && m3.shadowTree_signalASlotChange(t4);
              a3.dom.features.slots && m3.shadowTree_assignSlotablesForATree(f.tree_rootNode(e4));
              a3.dom.features.steps && v.dom_runInsertionSteps(e4);
              a3.dom.features.customElements && l.Guard.isElementNode(e4) && m3.shadowTree_isConnected(e4) && (l.Guard.isCustomElementNode(e4) ? p.customElement_enqueueACustomElementCallbackReaction(e4, "connectedCallback", []) : p.customElement_tryToUpgrade(e4));
              a3.dom.features.mutationObservers && (r3 || y3.observer_queueTreeMutationRecord(t4, [e4], [], n2, null));
            }(e3, t3, i3);
        }
        function w2(e3, t3, r2) {
          var i3, o2, s4, u3, h4, _2, g2, b3;
          if (a3.dom.rangeList.size !== 0) {
            var x3 = f.tree_index(e3);
            try {
              for (var w3 = n(a3.dom.rangeList), E2 = w3.next(); !E2.done; E2 = w3.next()) {
                var D2 = E2.value;
                f.tree_isDescendantOf(e3, D2._start[0], true) && (D2._start = [t3, x3]), f.tree_isDescendantOf(e3, D2._end[0], true) && (D2._end = [t3, x3]), D2._start[0] === t3 && D2._start[1] > x3 && D2._start[1]--, D2._end[0] === t3 && D2._end[1] > x3 && D2._end[1]--;
              }
            } catch (e4) {
              i3 = { error: e4 };
            } finally {
              try {
                E2 && !E2.done && (o2 = w3.return) && o2.call(w3);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            try {
              for (var S3 = n(a3.dom.rangeList), C = S3.next(); !C.done; C = S3.next()) {
                (D2 = C.value)._start[0] === t3 && D2._start[1] > x3 && (D2._start[1] -= 1), D2._end[0] === t3 && D2._end[1] > x3 && (D2._end[1] -= 1);
              }
            } catch (e4) {
              s4 = { error: e4 };
            } finally {
              try {
                C && !C.done && (u3 = S3.return) && u3.call(S3);
              } finally {
                if (s4)
                  throw s4.error;
              }
            }
          }
          if (a3.dom.features.steps)
            try {
              for (var A = n(d3.nodeIterator_iteratorList()), N = A.next(); !N.done; N = A.next()) {
                var T2 = N.value;
                T2._root._nodeDocument === e3._nodeDocument && v.dom_runNodeIteratorPreRemovingSteps(T2, e3);
              }
            } catch (e4) {
              h4 = { error: e4 };
            } finally {
              try {
                N && !N.done && (_2 = A.return) && _2.call(A);
              } finally {
                if (h4)
                  throw h4.error;
              }
            }
          var O2 = e3._previousSibling, F = e3._nextSibling;
          l.Guard.isDocumentNode(t3) && l.Guard.isElementNode(e3) && (t3._documentElement = null), e3._parent = null, t3._children.delete(e3);
          var k2 = e3._previousSibling, P = e3._nextSibling;
          (e3._previousSibling = null, e3._nextSibling = null, k2 && (k2._nextSibling = P), P && (P._previousSibling = k2), k2 || (t3._firstChild = P), P || (t3._lastChild = k2), a3.dom.features.slots && l.Guard.isSlotable(e3) && e3._assignedSlot !== null && m3.shadowTree_isAssigned(e3) && m3.shadowTree_assignSlotables(e3._assignedSlot), a3.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t3)) && l.Guard.isSlot(t3) && c2.isEmpty(t3._assignedNodes) && m3.shadowTree_signalASlotChange(t3), a3.dom.features.slots) && (f.tree_getFirstDescendantNode(e3, true, false, function(e4) {
            return l.Guard.isSlot(e4);
          }) !== null && (m3.shadowTree_assignSlotablesForATree(f.tree_rootNode(t3)), m3.shadowTree_assignSlotablesForATree(e3)));
          a3.dom.features.steps && v.dom_runRemovingSteps(e3, t3), a3.dom.features.customElements && l.Guard.isCustomElementNode(e3) && p.customElement_enqueueACustomElementCallbackReaction(e3, "disconnectedCallback", []);
          for (var I2 = f.tree_getFirstDescendantNode(e3, false, true); I2 !== null; )
            a3.dom.features.steps && v.dom_runRemovingSteps(I2, e3), a3.dom.features.customElements && l.Guard.isCustomElementNode(I2) && p.customElement_enqueueACustomElementCallbackReaction(I2, "disconnectedCallback", []), I2 = f.tree_getNextDescendantNode(e3, I2, false, true);
          if (a3.dom.features.mutationObservers)
            for (var L2 = f.tree_getFirstAncestorNode(t3, true); L2 !== null; ) {
              try {
                for (var M3 = (g2 = void 0, n(L2._registeredObserverList)), B2 = M3.next(); !B2.done; B2 = M3.next()) {
                  var j = B2.value;
                  j.options.subtree && e3._registeredObserverList.push({ observer: j.observer, options: j.options, source: j });
                }
              } catch (e4) {
                g2 = { error: e4 };
              } finally {
                try {
                  B2 && !B2.done && (b3 = M3.return) && b3.call(M3);
                } finally {
                  if (g2)
                    throw g2.error;
                }
              }
              L2 = f.tree_getNextAncestorNode(t3, L2, true);
            }
          a3.dom.features.mutationObservers && (r2 || y3.observer_queueTreeMutationRecord(t3, [], [e3], O2, F)), a3.dom.features.steps && l.Guard.isTextNode(e3) && v.dom_runChildTextContentChangeSteps(t3);
        }
        t2.mutation_ensurePreInsertionValidity = g, t2.mutation_preInsert = b2, t2.mutation_insert = x2, t2.mutation_append = function(e3, t3) {
          return b2(e3, t3, null);
        }, t2.mutation_replace = function(e3, t3, r2) {
          var i3, o2, l2, c3, h4, p2, d4, m4;
          if (r2._nodeType !== u2.NodeType.Document && r2._nodeType !== u2.NodeType.DocumentFragment && r2._nodeType !== u2.NodeType.Element)
            throw new s3.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + r2.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(r2, t3, true))
            throw new s3.HierarchyRequestError("The node to be inserted cannot be an ancestor of parent node. Node is " + t3.nodeName + ", parent node is " + r2.nodeName + ".");
          if (e3._parent !== r2)
            throw new s3.NotFoundError("The reference child node cannot be found under parent node. Child node is " + e3.nodeName + ", parent node is " + r2.nodeName + ".");
          if (t3._nodeType !== u2.NodeType.DocumentFragment && t3._nodeType !== u2.NodeType.DocumentType && t3._nodeType !== u2.NodeType.Element && t3._nodeType !== u2.NodeType.Text && t3._nodeType !== u2.NodeType.ProcessingInstruction && t3._nodeType !== u2.NodeType.CData && t3._nodeType !== u2.NodeType.Comment)
            throw new s3.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + t3.nodeName + ".");
          if (t3._nodeType === u2.NodeType.Text && r2._nodeType === u2.NodeType.Document)
            throw new s3.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + t3.nodeName + ".");
          if (t3._nodeType === u2.NodeType.DocumentType && r2._nodeType !== u2.NodeType.Document)
            throw new s3.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + r2.nodeName + ".");
          if (r2._nodeType === u2.NodeType.Document) {
            if (t3._nodeType === u2.NodeType.DocumentFragment) {
              var v2 = 0;
              try {
                for (var g2 = n(t3._children), b3 = g2.next(); !b3.done; b3 = g2.next()) {
                  var E2 = b3.value;
                  if (E2._nodeType === u2.NodeType.Element)
                    v2++;
                  else if (E2._nodeType === u2.NodeType.Text)
                    throw new s3.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + E2.nodeName + ".");
                }
              } catch (e4) {
                i3 = { error: e4 };
              } finally {
                try {
                  b3 && !b3.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
              if (v2 > 1)
                throw new s3.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + v2 + " element nodes.");
              if (v2 === 1) {
                try {
                  for (var D2 = n(r2._children), S3 = D2.next(); !S3.done; S3 = D2.next()) {
                    if ((F = S3.value)._nodeType === u2.NodeType.Element && F !== e3)
                      throw new s3.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e4) {
                  l2 = { error: e4 };
                } finally {
                  try {
                    S3 && !S3.done && (c3 = D2.return) && c3.call(D2);
                  } finally {
                    if (l2)
                      throw l2.error;
                  }
                }
                for (var C = e3._nextSibling; C; ) {
                  if (C._nodeType === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  C = C._nextSibling;
                }
              }
            } else if (t3._nodeType === u2.NodeType.Element) {
              try {
                for (var A = n(r2._children), N = A.next(); !N.done; N = A.next()) {
                  if ((F = N.value)._nodeType === u2.NodeType.Element && F !== e3)
                    throw new s3.HierarchyRequestError("Document already has a document element node. Node is " + t3.nodeName + ".");
                }
              } catch (e4) {
                h4 = { error: e4 };
              } finally {
                try {
                  N && !N.done && (p2 = A.return) && p2.call(A);
                } finally {
                  if (h4)
                    throw h4.error;
                }
              }
              for (C = e3._nextSibling; C; ) {
                if (C._nodeType === u2.NodeType.DocumentType)
                  throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + t3.nodeName + ".");
                C = C._nextSibling;
              }
            } else if (t3._nodeType === u2.NodeType.DocumentType) {
              try {
                for (var T2 = n(r2._children), O2 = T2.next(); !O2.done; O2 = T2.next()) {
                  var F;
                  if ((F = O2.value)._nodeType === u2.NodeType.DocumentType && F !== e3)
                    throw new s3.HierarchyRequestError("Document already has a document type node. Node is " + t3.nodeName + ".");
                }
              } catch (e4) {
                d4 = { error: e4 };
              } finally {
                try {
                  O2 && !O2.done && (m4 = T2.return) && m4.call(T2);
                } finally {
                  if (d4)
                    throw d4.error;
                }
              }
              for (var k2 = e3._previousSibling; k2; ) {
                if (k2._nodeType === u2.NodeType.Element)
                  throw new s3.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + t3.nodeName + ".");
                k2 = k2._previousSibling;
              }
            }
          }
          var P = e3._nextSibling;
          P === t3 && (P = t3._nextSibling);
          var I2 = e3._previousSibling;
          _.document_adopt(t3, r2._nodeDocument);
          var L2 = [];
          e3._parent !== null && (L2.push(e3), w2(e3, e3._parent, true));
          var M3 = [];
          return t3._nodeType === u2.NodeType.DocumentFragment ? M3 = Array.from(t3._children) : M3.push(t3), x2(t3, r2, P, true), a3.dom.features.mutationObservers && y3.observer_queueTreeMutationRecord(r2, M3, L2, I2, P), e3;
        }, t2.mutation_replaceAll = function(e3, t3) {
          var r2, i3;
          e3 !== null && _.document_adopt(e3, t3._nodeDocument);
          var o2 = Array.from(t3._children), s4 = [];
          e3 && e3._nodeType === u2.NodeType.DocumentFragment ? s4 = Array.from(e3._children) : e3 !== null && s4.push(e3);
          try {
            for (var l2 = n(o2), c3 = l2.next(); !c3.done; c3 = l2.next()) {
              w2(c3.value, t3, true);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (i3 = l2.return) && i3.call(l2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e3 !== null && x2(e3, t3, null, true), a3.dom.features.mutationObservers && y3.observer_queueTreeMutationRecord(t3, s4, o2, null, null);
        }, t2.mutation_preRemove = function(e3, t3) {
          if (e3._parent !== t3)
            throw new s3.NotFoundError("The child node cannot be found under parent node. Child node is " + e3.nodeName + ", parent node is " + t3.nodeName + ".");
          return w2(e3, t3), e3;
        }, t2.mutation_remove = w2;
      }, function(e2, t2, r) {
        "use strict";
        function n(e3) {
          return e3 == null;
        }
        e2.exports.isNothing = n, e2.exports.isObject = function(e3) {
          return typeof e3 == "object" && e3 !== null;
        }, e2.exports.toArray = function(e3) {
          return Array.isArray(e3) ? e3 : n(e3) ? [] : [e3];
        }, e2.exports.repeat = function(e3, t3) {
          var r2, n2 = "";
          for (r2 = 0; r2 < t3; r2 += 1)
            n2 += e3;
          return n2;
        }, e2.exports.isNegativeZero = function(e3) {
          return e3 === 0 && Number.NEGATIVE_INFINITY === 1 / e3;
        }, e2.exports.extend = function(e3, t3) {
          var r2, n2, i2, o;
          if (t3)
            for (r2 = 0, n2 = (o = Object.keys(t3)).length; r2 < n2; r2 += 1)
              e3[i2 = o[r2]] = t3[i2];
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(53), o = r(10);
        function a3(e3, t3, r2) {
          var n2 = [];
          return e3.include.forEach(function(e4) {
            r2 = a3(e4, t3, r2);
          }), e3[t3].forEach(function(e4) {
            r2.forEach(function(t4, r3) {
              t4.tag === e4.tag && t4.kind === e4.kind && n2.push(r3);
            }), r2.push(e4);
          }), r2.filter(function(e4, t4) {
            return n2.indexOf(t4) === -1;
          });
        }
        function s3(e3) {
          this.include = e3.include || [], this.implicit = e3.implicit || [], this.explicit = e3.explicit || [], this.implicit.forEach(function(e4) {
            if (e4.loadKind && e4.loadKind !== "scalar")
              throw new i2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }), this.compiledImplicit = a3(this, "implicit", []), this.compiledExplicit = a3(this, "explicit", []), this.compiledTypeMap = function() {
            var e4, t3, r2 = { scalar: {}, sequence: {}, mapping: {}, fallback: {} };
            function n2(e5) {
              r2[e5.kind][e5.tag] = r2.fallback[e5.tag] = e5;
            }
            for (e4 = 0, t3 = arguments.length; e4 < t3; e4 += 1)
              arguments[e4].forEach(n2);
            return r2;
          }(this.compiledImplicit, this.compiledExplicit);
        }
        s3.DEFAULT = null, s3.create = function() {
          var e3, t3;
          switch (arguments.length) {
            case 1:
              e3 = s3.DEFAULT, t3 = arguments[0];
              break;
            case 2:
              e3 = arguments[0], t3 = arguments[1];
              break;
            default:
              throw new i2("Wrong number of arguments for Schema.create function");
          }
          if (e3 = n.toArray(e3), t3 = n.toArray(t3), !e3.every(function(e4) {
            return e4 instanceof s3;
          }))
            throw new i2("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
          if (!t3.every(function(e4) {
            return e4 instanceof o;
          }))
            throw new i2("Specified list of YAML types (or a single Type object) contains a non-Type object.");
          return new s3({ include: e3, explicit: t3 });
        }, e2.exports = s3;
      }, function(e2, t2) {
        e2.exports = function(e3, t3) {
          return { enumerable: !(1 & e3), configurable: !(2 & e3), writable: !(4 & e3), value: t3 };
        };
      }, function(e2, t2, r) {
        var n = r(8), i2 = r(42), o = "".split;
        e2.exports = n(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(e3) {
          return i2(e3) == "String" ? o.call(e3, "") : Object(e3);
        } : Object;
      }, function(e2, t2) {
        var r = {}.toString;
        e2.exports = function(e3) {
          return r.call(e3).slice(8, -1);
        };
      }, function(e2, t2, r) {
        var n, i2, o, a3 = r(186), s3 = r(11), u2 = r(13), l = r(21), c2 = r(14), h3 = r(57), p = r(45), f = s3.WeakMap;
        if (a3) {
          var d3 = new f(), m3 = d3.get, y3 = d3.has, v = d3.set;
          n = function(e3, t3) {
            return v.call(d3, e3, t3), t3;
          }, i2 = function(e3) {
            return m3.call(d3, e3) || {};
          }, o = function(e3) {
            return y3.call(d3, e3);
          };
        } else {
          var _ = h3("state");
          p[_] = true, n = function(e3, t3) {
            return l(e3, _, t3), t3;
          }, i2 = function(e3) {
            return c2(e3, _) ? e3[_] : {};
          }, o = function(e3) {
            return c2(e3, _);
          };
        }
        e2.exports = { set: n, get: i2, has: o, enforce: function(e3) {
          return o(e3) ? i2(e3) : n(e3, {});
        }, getterFor: function(e3) {
          return function(t3) {
            var r2;
            if (!u2(t3) || (r2 = i2(t3)).type !== e3)
              throw TypeError("Incompatible receiver, " + e3 + " required");
            return r2;
          };
        } };
      }, function(e2, t2) {
        e2.exports = false;
      }, function(e2, t2) {
        e2.exports = {};
      }, function(e2, t2, r) {
        var n = r(120), i2 = r(11), o = function(e3) {
          return typeof e3 == "function" ? e3 : void 0;
        };
        e2.exports = function(e3, t3) {
          return arguments.length < 2 ? o(n[e3]) || o(i2[e3]) : n[e3] && n[e3][t3] || i2[e3] && i2[e3][t3];
        };
      }, function(e2, t2) {
        var r = Math.ceil, n = Math.floor;
        e2.exports = function(e3) {
          return isNaN(e3 = +e3) ? 0 : (e3 > 0 ? n : r)(e3);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(8);
        e2.exports = function(e3, t3) {
          var r2 = [][e3];
          return !!r2 && n(function() {
            r2.call(null, t3 || function() {
              throw 1;
            }, 1);
          });
        };
      }, function(e2, t2) {
        e2.exports = {};
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(220), r(64), r(19), r(65), r(20), r(68), r(66), r(92), r(144), r(22), r(94), r(23);
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(2), s3 = r(69), u2 = r(95), l = r(7), c2 = r(0), h3 = function() {
          function e3(e4) {
            this.level = 0, this._builderOptions = e4;
          }
          return e3.prototype.declaration = function(e4, t3, r2) {
          }, e3.prototype.docType = function(e4, t3, r2) {
          }, e3.prototype.comment = function(e4) {
          }, e3.prototype.text = function(e4) {
          }, e3.prototype.instruction = function(e4, t3) {
          }, e3.prototype.cdata = function(e4) {
          }, e3.prototype.openTagBegin = function(e4) {
          }, e3.prototype.openTagEnd = function(e4, t3, r2) {
          }, e3.prototype.closeTag = function(e4) {
          }, e3.prototype.attributes = function(e4) {
            var t3, r2;
            try {
              for (var i3 = n(e4), o2 = i3.next(); !o2.done; o2 = i3.next()) {
                var a4 = o2.value;
                this.attribute(a4[1] === null ? a4[2] : a4[1] + ":" + a4[2], a4[3]);
              }
            } catch (e5) {
              t3 = { error: e5 };
            } finally {
              try {
                o2 && !o2.done && (r2 = i3.return) && r2.call(i3);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          }, e3.prototype.attribute = function(e4, t3) {
          }, e3.prototype.beginElement = function(e4) {
          }, e3.prototype.endElement = function(e4) {
          }, e3.prototype.serializeNode = function(e4, t3) {
            var r2 = e4._nodeDocument !== void 0 && e4._nodeDocument._hasNamespaces;
            if (this.level = 0, this.currentNode = e4, r2) {
              var n2 = new u2.NamespacePrefixMap();
              n2.set("xml", l.namespace.XML);
              this._serializeNodeNS(e4, null, n2, { value: 1 }, t3);
            } else
              this._serializeNode(e4, t3);
          }, e3.prototype._serializeNodeNS = function(e4, t3, r2, n2, i3) {
            switch (this.currentNode = e4, e4.nodeType) {
              case a3.NodeType.Element:
                this._serializeElementNS(e4, t3, r2, n2, i3);
                break;
              case a3.NodeType.Document:
                this._serializeDocumentNS(e4, t3, r2, n2, i3);
                break;
              case a3.NodeType.Comment:
                this._serializeComment(e4, i3);
                break;
              case a3.NodeType.Text:
                this._serializeText(e4, i3);
                break;
              case a3.NodeType.DocumentFragment:
                this._serializeDocumentFragmentNS(e4, t3, r2, n2, i3);
                break;
              case a3.NodeType.DocumentType:
                this._serializeDocumentType(e4, i3);
                break;
              case a3.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e4, i3);
                break;
              case a3.NodeType.CData:
                this._serializeCData(e4, i3);
                break;
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeNode = function(e4, t3) {
            switch (this.currentNode = e4, e4.nodeType) {
              case a3.NodeType.Element:
                this._serializeElement(e4, t3);
                break;
              case a3.NodeType.Document:
                this._serializeDocument(e4, t3);
                break;
              case a3.NodeType.Comment:
                this._serializeComment(e4, t3);
                break;
              case a3.NodeType.Text:
                this._serializeText(e4, t3);
                break;
              case a3.NodeType.DocumentFragment:
                this._serializeDocumentFragment(e4, t3);
                break;
              case a3.NodeType.DocumentType:
                this._serializeDocumentType(e4, t3);
                break;
              case a3.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e4, t3);
                break;
              case a3.NodeType.CData:
                this._serializeCData(e4, t3);
                break;
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeElementNS = function(t3, r2, i3, a4, s4) {
            var u3, h4, p = [];
            if (s4 && (t3.localName.indexOf(":") !== -1 || !c2.xml_isName(t3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var f = "", d3 = false, m3 = false, y3 = i3.copy(), v = {}, _ = this._recordNamespaceInformation(t3, y3, v), g = r2, b2 = t3.namespaceURI;
            if (g === b2)
              _ !== null && (m3 = true), f = b2 === l.namespace.XML ? "xml:" + t3.localName : t3.localName, this.beginElement(f), this.openTagBegin(f);
            else {
              var x2 = t3.prefix, w2 = null;
              if (x2 === null && b2 === _ || (w2 = y3.get(x2, b2)), x2 === "xmlns") {
                if (s4)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                w2 = x2;
              }
              w2 !== null ? (f = w2 + ":" + t3.localName, _ !== null && _ !== l.namespace.XML && (g = _ || null), this.beginElement(f), this.openTagBegin(f)) : x2 !== null ? (x2 in v && (x2 = this._generatePrefix(b2, y3, a4)), y3.set(x2, b2), f += x2 + ":" + t3.localName, this.beginElement(f), this.openTagBegin(f), p.push([null, "xmlns", x2, this._serializeAttributeValue(b2, s4)]), _ !== null && (g = _ || null)) : _ === null || _ !== null && _ !== b2 ? (m3 = true, f += t3.localName, g = b2, this.beginElement(f), this.openTagBegin(f), p.push([null, null, "xmlns", this._serializeAttributeValue(b2, s4)])) : (f += t3.localName, g = b2, this.beginElement(f), this.openTagBegin(f));
            }
            p.push.apply(p, o(this._serializeAttributesNS(t3, y3, a4, v, m3, s4))), this.attributes(p);
            var E2 = b2 === l.namespace.HTML;
            if (E2 && t3.childNodes.length === 0 && e3._VoidElementNames.has(t3.localName) ? (this.openTagEnd(f, true, true), this.endElement(f), d3 = true) : E2 || t3.childNodes.length !== 0 ? this.openTagEnd(f, false, false) : (this.openTagEnd(f, true, false), this.endElement(f), d3 = true), !d3) {
              if (E2 && t3.localName === "template")
                ;
              else
                try {
                  for (var D2 = n(t3.childNodes), S3 = D2.next(); !S3.done; S3 = D2.next()) {
                    var C = S3.value;
                    this.level++, this._serializeNodeNS(C, g, y3, a4, s4), this.level--;
                  }
                } catch (e4) {
                  u3 = { error: e4 };
                } finally {
                  try {
                    S3 && !S3.done && (h4 = D2.return) && h4.call(D2);
                  } finally {
                    if (u3)
                      throw u3.error;
                  }
                }
              this.closeTag(f), this.endElement(f);
            }
          }, e3.prototype._serializeElement = function(e4, t3) {
            var r2, i3;
            if (t3 && (e4.localName.indexOf(":") !== -1 || !c2.xml_isName(e4.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a4 = e4.localName;
            this.beginElement(a4), this.openTagBegin(a4);
            var s4 = this._serializeAttributes(e4, t3);
            if (this.attributes(s4), e4.hasChildNodes() ? this.openTagEnd(a4, false, false) : (this.openTagEnd(a4, true, false), this.endElement(a4), o2 = true), !o2) {
              try {
                for (var u3 = n(e4._children), l2 = u3.next(); !l2.done; l2 = u3.next()) {
                  var h4 = l2.value;
                  this.level++, this._serializeNode(h4, t3), this.level--;
                }
              } catch (e5) {
                r2 = { error: e5 };
              } finally {
                try {
                  l2 && !l2.done && (i3 = u3.return) && i3.call(u3);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              this.closeTag(a4), this.endElement(a4);
            }
          }, e3.prototype._serializeDocumentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4;
            if (o2 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var u3 = n(e4.childNodes), l2 = u3.next(); !l2.done; l2 = u3.next()) {
                var c3 = l2.value;
                this._serializeNodeNS(c3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                l2 && !l2.done && (s4 = u3.return) && s4.call(u3);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
          }, e3.prototype._serializeDocument = function(e4, t3) {
            var r2, i3;
            if (t3 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var o2 = n(e4._children), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                this._serializeNode(s4, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (i3 = o2.return) && i3.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype._serializeComment = function(e4, t3) {
            if (t3 && (!c2.xml_isLegalChar(e4.data) || e4.data.indexOf("--") !== -1 || e4.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            this.comment(e4.data);
          }, e3.prototype._serializeText = function(e4, t3) {
            if (t3 && !c2.xml_isLegalChar(e4.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            var r2 = e4.data.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            this.text(r2);
          }, e3.prototype._serializeDocumentFragmentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4;
            try {
              for (var u3 = n(e4.childNodes), l2 = u3.next(); !l2.done; l2 = u3.next()) {
                var c3 = l2.value;
                this._serializeNodeNS(c3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                l2 && !l2.done && (s4 = u3.return) && s4.call(u3);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
          }, e3.prototype._serializeDocumentFragment = function(e4, t3) {
            var r2, i3;
            try {
              for (var o2 = n(e4._children), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                this._serializeNode(s4, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (i3 = o2.return) && i3.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype._serializeDocumentType = function(e4, t3) {
            if (t3 && !c2.xml_isPubidChar(e4.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t3 && (!c2.xml_isLegalChar(e4.systemId) || e4.systemId.indexOf('"') !== -1 && e4.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            this.docType(e4.name, e4.publicId, e4.systemId);
          }, e3.prototype._serializeProcessingInstruction = function(e4, t3) {
            if (t3 && (e4.target.indexOf(":") !== -1 || /^xml$/i.test(e4.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t3 && (!c2.xml_isLegalChar(e4.data) || e4.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            this.instruction(e4.target, e4.data);
          }, e3.prototype._serializeCData = function(e4, t3) {
            if (t3 && e4.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            this.cdata(e4.data);
          }, e3.prototype._serializeAttributesNS = function(e4, t3, r2, i3, o2, a4) {
            var u3, h4, p = [], f = a4 ? new s3.LocalNameSet() : void 0;
            try {
              for (var d3 = n(e4.attributes), m3 = d3.next(); !m3.done; m3 = d3.next()) {
                var y3 = m3.value;
                if (a4 || o2 || y3.namespaceURI !== null) {
                  if (a4 && f && f.has(y3.namespaceURI, y3.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  a4 && f && f.set(y3.namespaceURI, y3.localName);
                  var v = y3.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t3.get(y3.prefix, v), v === l.namespace.XMLNS) {
                      if (y3.value === l.namespace.XML || y3.prefix === null && o2 || y3.prefix !== null && (!(y3.localName in i3) || i3[y3.localName] !== y3.value) && t3.has(y3.localName, y3.value))
                        continue;
                      if (a4 && y3.value === l.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (a4 && y3.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y3.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (_ = y3.prefix === null || t3.hasPrefix(y3.prefix) && !t3.has(y3.prefix, v) ? this._generatePrefix(v, t3, r2) : y3.prefix, p.push([null, "xmlns", _, this._serializeAttributeValue(v, a4)]));
                  if (_ !== null && _, a4 && (y3.localName.indexOf(":") !== -1 || !c2.xml_isName(y3.localName) || y3.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p.push([v, _, y3.localName, this._serializeAttributeValue(y3.value, a4)]);
                } else
                  p.push([null, null, y3.localName, this._serializeAttributeValue(y3.value, a4)]);
              }
            } catch (e5) {
              u3 = { error: e5 };
            } finally {
              try {
                m3 && !m3.done && (h4 = d3.return) && h4.call(d3);
              } finally {
                if (u3)
                  throw u3.error;
              }
            }
            return p;
          }, e3.prototype._serializeAttributes = function(e4, t3) {
            var r2, i3, o2 = [], a4 = t3 ? {} : void 0;
            try {
              for (var s4 = n(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var l2 = u3.value;
                if (t3) {
                  if (t3 && a4 && l2.localName in a4)
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  if (t3 && a4 && (a4[l2.localName] = true), t3 && (l2.localName.indexOf(":") !== -1 || !c2.xml_isName(l2.localName)))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t3)]);
                } else
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t3)]);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3.prototype._recordNamespaceInformation = function(e4, t3, r2) {
            var i3, o2, a4 = null;
            try {
              for (var s4 = n(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var c3 = u3.value, h4 = c3.namespaceURI, p = c3.prefix;
                if (h4 === l.namespace.XMLNS) {
                  if (p === null) {
                    a4 = c3.value;
                    continue;
                  }
                  var f = c3.localName, d3 = c3.value;
                  if (d3 === l.namespace.XML)
                    continue;
                  if (d3 === "" && (d3 = null), t3.has(f, d3))
                    continue;
                  t3.set(f, d3), r2[f] = d3 || "";
                }
              }
            } catch (e5) {
              i3 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (o2 = s4.return) && o2.call(s4);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            return a4;
          }, e3.prototype._generatePrefix = function(e4, t3, r2) {
            var n2 = "ns" + r2.value.toString();
            return r2.value++, t3.set(n2, e4), n2;
          }, e3.prototype._serializeAttributeValue = function(e4, t3) {
            if (t3 && e4 !== null && !c2.xml_isLegalChar(e4))
              throw new Error("Invalid characters in attribute value.");
            return e4 === null ? "" : e4.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, e3._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e3;
        }();
        t2.BaseWriter = h3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(6), a3 = r(3), s3 = r(7), u2 = r(29), l = r(17), c2 = r(97);
        function h3() {
          var e3 = o.dom.window;
          e3._mutationObserverMicrotaskQueued || (e3._mutationObserverMicrotaskQueued = true, Promise.resolve().then(function() {
            p();
          }));
        }
        function p() {
          var e3, t3, r2, i3, u3 = o.dom.window;
          u3._mutationObserverMicrotaskQueued = false;
          var l2 = s3.set.clone(u3._mutationObservers), h4 = s3.set.clone(u3._signalSlots);
          s3.set.empty(u3._signalSlots);
          var p2 = function(e4) {
            var t4 = s3.list.clone(e4._recordQueue);
            s3.list.empty(e4._recordQueue);
            for (var r3 = 0; r3 < e4._nodeList.length; r3++) {
              var n2 = e4._nodeList[r3];
              s3.list.remove(n2._registeredObserverList, function(t5) {
                return a3.Guard.isTransientRegisteredObserver(t5) && t5.observer === e4;
              });
            }
            if (!s3.list.isEmpty(t4))
              try {
                e4._callback.call(e4, t4, e4);
              } catch (e5) {
              }
          };
          try {
            for (var f2 = n(l2), d3 = f2.next(); !d3.done; d3 = f2.next()) {
              p2(d3.value);
            }
          } catch (t4) {
            e3 = { error: t4 };
          } finally {
            try {
              d3 && !d3.done && (t3 = f2.return) && t3.call(f2);
            } finally {
              if (e3)
                throw e3.error;
            }
          }
          if (o.dom.features.slots)
            try {
              for (var m3 = n(h4), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                var v = y3.value;
                c2.event_fireAnEvent("slotchange", v, void 0, { bubbles: true });
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                y3 && !y3.done && (i3 = m3.return) && i3.call(m3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
        }
        function f(e3, t3, r2, o2, a4, s4, c3, p2, f2) {
          for (var d3, m3, y3 = /* @__PURE__ */ new Map(), v = l.tree_getFirstAncestorNode(t3, true); v !== null; ) {
            for (var _ = 0; _ < v._registeredObserverList.length; _++) {
              var g = v._registeredObserverList[_], b2 = g.options;
              if ((v === t3 || b2.subtree) && ((e3 !== "attributes" || b2.attributes) && (e3 !== "attributes" || !b2.attributeFilter || b2.attributeFilter.indexOf(r2 || "") && o2 === null) && (e3 !== "characterData" || b2.characterData) && (e3 !== "childList" || b2.childList))) {
                var x2 = g.observer;
                y3.has(x2) || y3.set(x2, null), (e3 === "attributes" && b2.attributeOldValue || e3 === "characterData" && b2.characterDataOldValue) && y3.set(x2, a4);
              }
            }
            v = l.tree_getNextAncestorNode(t3, v, true);
          }
          try {
            for (var w2 = n(y3), E2 = w2.next(); !E2.done; E2 = w2.next()) {
              var D2 = i2(E2.value, 2), S3 = D2[0], C = D2[1], A = u2.create_mutationRecord(e3, t3, u2.create_nodeListStatic(t3, s4), u2.create_nodeListStatic(t3, c3), p2, f2, r2, o2, C);
              S3._recordQueue.push(A);
            }
          } catch (e4) {
            d3 = { error: e4 };
          } finally {
            try {
              E2 && !E2.done && (m3 = w2.return) && m3.call(w2);
            } finally {
              if (d3)
                throw d3.error;
            }
          }
          h3();
        }
        t2.observer_queueAMutationObserverMicrotask = h3, t2.observer_notifyMutationObservers = p, t2.observer_queueMutationRecord = f, t2.observer_queueTreeMutationRecord = function(e3, t3, r2, n2, i3) {
          f("childList", e3, null, null, null, t3, r2, n2, i3);
        }, t2.observer_queueAttributeMutationRecord = function(e3, t3, r2, n2) {
          f("attributes", e3, t3, r2, n2, [], [], null, null);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(6), i2 = r(7), o = r(3), a3 = r(9), s3 = r(29), u2 = r(73), l = r(51), c2 = r(30), h3 = r(37), p = r(106);
        function f(e3, t3, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t3, e3._localName, e3._namespace, e3._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t3) && u2.customElement_enqueueACustomElementCallbackReaction(t3, "attributeChangedCallback", [e3._localName, e3._value, r2, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(t3, e3._localName, e3._value, r2, e3._namespace), e3._value = r2;
        }
        function d3(e3, t3) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t3, e3._localName, e3._namespace, null), n.dom.features.customElements && o.Guard.isCustomElementNode(t3) && u2.customElement_enqueueACustomElementCallbackReaction(t3, "attributeChangedCallback", [e3._localName, null, e3._value, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(t3, e3._localName, null, e3._value, e3._namespace), t3._attributeList._asArray().push(e3), e3._element = t3, t3._nodeDocument._hasNamespaces || e3._namespace === null && e3._namespacePrefix === null && e3._localName !== "xmlns" || (t3._nodeDocument._hasNamespaces = true);
        }
        function m3(e3, t3) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t3, e3._localName, e3._namespace, e3._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t3) && u2.customElement_enqueueACustomElementCallbackReaction(t3, "attributeChangedCallback", [e3._localName, e3._value, null, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(t3, e3._localName, e3._value, null, e3._namespace);
          var r2 = t3._attributeList._asArray().indexOf(e3);
          t3._attributeList._asArray().splice(r2, 1), e3._element = null;
        }
        function y3(e3, t3, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(r2, e3._localName, e3._namespace, e3._value), n.dom.features.customElements && o.Guard.isCustomElementNode(r2) && u2.customElement_enqueueACustomElementCallbackReaction(r2, "attributeChangedCallback", [e3._localName, e3._value, t3._value, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(r2, e3._localName, e3._value, t3._value, e3._namespace);
          var i3 = r2._attributeList._asArray().indexOf(e3);
          i3 !== -1 && (r2._attributeList._asArray()[i3] = t3), e3._element = null, t3._element = r2, r2._nodeDocument._hasNamespaces || t3._namespace === null && t3._namespacePrefix === null && t3._localName !== "xmlns" || (r2._nodeDocument._hasNamespaces = true);
        }
        function v(e3, t3) {
          return t3._namespace === i2.namespace.HTML && t3._nodeDocument._type === "html" && (e3 = e3.toLowerCase()), t3._attributeList._asArray().find(function(t4) {
            return t4._qualifiedName === e3;
          }) || null;
        }
        function _(e3, t3, r2) {
          var n2 = e3 || null;
          return r2._attributeList._asArray().find(function(e4) {
            return e4._namespace === n2 && e4._localName === t3;
          }) || null;
        }
        t2.element_has = function(e3, t3) {
          return t3._attributeList._asArray().indexOf(e3) !== -1;
        }, t2.element_change = f, t2.element_append = d3, t2.element_remove = m3, t2.element_replace = y3, t2.element_getAnAttributeByName = v, t2.element_getAnAttributeByNamespaceAndLocalName = _, t2.element_getAnAttributeValue = function(e3, t3, r2) {
          r2 === void 0 && (r2 = "");
          var n2 = _(r2, t3, e3);
          return n2 === null ? "" : n2._value;
        }, t2.element_setAnAttribute = function(e3, t3) {
          if (e3._element !== null && e3._element !== t3)
            throw new a3.InUseAttributeError("This attribute already exists in the document: " + e3._qualifiedName + " as a child of " + e3._element._qualifiedName + ".");
          var r2 = _(e3._namespace || "", e3._localName, t3);
          return r2 === e3 ? e3 : (r2 !== null ? y3(r2, e3, t3) : d3(e3, t3), r2);
        }, t2.element_setAnAttributeValue = function(e3, t3, r2, n2, i3) {
          n2 === void 0 && (n2 = null), i3 === void 0 && (i3 = null);
          var o2 = _(i3 || "", t3, e3);
          if (o2 === null) {
            var a4 = s3.create_attr(e3._nodeDocument, t3);
            return a4._namespace = i3, a4._namespacePrefix = n2, a4._value = r2, void d3(a4, e3);
          }
          f(o2, e3, r2);
        }, t2.element_removeAnAttributeByName = function(e3, t3) {
          var r2 = v(e3, t3);
          return r2 !== null && m3(r2, t3), r2;
        }, t2.element_removeAnAttributeByNamespaceAndLocalName = function(e3, t3, r2) {
          var n2 = _(e3, t3, r2);
          return n2 !== null && m3(n2, r2), n2;
        }, t2.element_createAnElement = function(e3, t3, r2, o2, l2, c3) {
          o2 === void 0 && (o2 = null), l2 === void 0 && (l2 = null), c3 === void 0 && (c3 = false);
          var h4 = null;
          if (!n.dom.features.customElements)
            return (h4 = s3.create_element(e3, t3, r2, o2))._customElementState = "uncustomized", h4._customElementDefinition = null, h4._is = l2, h4;
          var f2 = u2.customElement_lookUpACustomElementDefinition(e3, r2, t3, l2);
          if (f2 !== null && f2.name !== f2.localName)
            (h4 = new (p.document_elementInterface(t3, i2.namespace.HTML))())._localName = t3, h4._namespace = i2.namespace.HTML, h4._namespacePrefix = o2, h4._customElementState = "undefined", h4._customElementDefinition = null, h4._is = l2, h4._nodeDocument = e3, c3 ? u2.customElement_upgrade(f2, h4) : u2.customElement_enqueueACustomElementUpgradeReaction(h4, f2);
          else if (f2 !== null)
            if (c3)
              try {
                var d4 = new (0, f2.constructor)();
                if (console.assert(d4._customElementState !== void 0), console.assert(d4._customElementDefinition !== void 0), console.assert(d4._namespace === i2.namespace.HTML), d4._attributeList.length !== 0)
                  throw new a3.NotSupportedError("Custom element already has attributes.");
                if (d4._children.size !== 0)
                  throw new a3.NotSupportedError("Custom element already has child nodes.");
                if (d4._parent !== null)
                  throw new a3.NotSupportedError("Custom element already has a parent node.");
                if (d4._nodeDocument !== e3)
                  throw new a3.NotSupportedError("Custom element is already in a document.");
                if (d4._localName !== t3)
                  throw new a3.NotSupportedError("Custom element has a different local name.");
                d4._namespacePrefix = o2, d4._is = null;
              } catch (r3) {
                (h4 = s3.create_htmlUnknownElement(e3, t3, i2.namespace.HTML, o2))._customElementState = "failed", h4._customElementDefinition = null, h4._is = null;
              }
            else
              (h4 = s3.create_htmlElement(e3, t3, i2.namespace.HTML, o2))._customElementState = "undefined", h4._customElementDefinition = null, h4._is = null, u2.customElement_enqueueACustomElementUpgradeReaction(h4, f2);
          else {
            (h4 = new (p.document_elementInterface(t3, r2))())._localName = t3, h4._namespace = r2, h4._namespacePrefix = o2, h4._customElementState = "uncustomized", h4._customElementDefinition = null, h4._is = l2, h4._nodeDocument = e3, r2 !== i2.namespace.HTML || l2 === null && !u2.customElement_isValidCustomElementName(t3) || (h4._customElementState = "undefined");
          }
          if (h4 === null)
            throw new Error("Unable to create element.");
          return h4;
        }, t2.element_insertAdjacent = function(e3, t3, r2) {
          switch (t3.toLowerCase()) {
            case "beforebegin":
              return e3._parent === null ? null : h3.mutation_preInsert(r2, e3._parent, e3);
            case "afterbegin":
              return h3.mutation_preInsert(r2, e3, e3._firstChild);
            case "beforeend":
              return h3.mutation_preInsert(r2, e3, null);
            case "afterend":
              return e3._parent === null ? null : h3.mutation_preInsert(r2, e3._parent, e3._nextSibling);
            default:
              throw new a3.SyntaxError(`Invalid 'where' argument. "beforebegin", "afterbegin", "beforeend" or "afterend" expected`);
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        function n(e3, t3) {
          Error.call(this), this.name = "YAMLException", this.reason = e3, this.mark = t3, this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : ""), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack || "";
        }
        n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n.prototype.toString = function(e3) {
          var t3 = this.name + ": ";
          return t3 += this.reason || "(unknown reason)", !e3 && this.mark && (t3 += " " + this.mark.toString()), t3;
        }, e2.exports = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ include: [r(181)], implicit: [r(293), r(294)], explicit: [r(295), r(296), r(297), r(298)] });
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(79), o = r(40), a3 = r(24), s3 = r(56), u2 = r(14), l = r(115), c2 = Object.getOwnPropertyDescriptor;
        t2.f = n ? c2 : function(e3, t3) {
          if (e3 = a3(e3), t3 = s3(t3, true), l)
            try {
              return c2(e3, t3);
            } catch (e4) {
            }
          if (u2(e3, t3))
            return o(!i2.f.call(e3, t3), e3[t3]);
        };
      }, function(e2, t2, r) {
        var n = r(13);
        e2.exports = function(e3, t3) {
          if (!n(e3))
            return e3;
          var r2, i2;
          if (t3 && typeof (r2 = e3.toString) == "function" && !n(i2 = r2.call(e3)))
            return i2;
          if (typeof (r2 = e3.valueOf) == "function" && !n(i2 = r2.call(e3)))
            return i2;
          if (!t3 && typeof (r2 = e3.toString) == "function" && !n(i2 = r2.call(e3)))
            return i2;
          throw TypeError("Can't convert object to primitive value");
        };
      }, function(e2, t2, r) {
        var n = r(81), i2 = r(58), o = n("keys");
        e2.exports = function(e3) {
          return o[e3] || (o[e3] = i2(e3));
        };
      }, function(e2, t2) {
        var r = 0, n = Math.random();
        e2.exports = function(e3) {
          return "Symbol(" + String(e3 === void 0 ? "" : e3) + ")_" + (++r + n).toString(36);
        };
      }, function(e2, t2, r) {
        var n = r(42);
        e2.exports = Array.isArray || function(e3) {
          return n(e3) == "Array";
        };
      }, function(e2, t2, r) {
        var n, i2 = r(18), o = r(188), a3 = r(84), s3 = r(45), u2 = r(189), l = r(116), c2 = r(57), h3 = c2("IE_PROTO"), p = function() {
        }, f = function(e3) {
          return "<script>" + e3 + "<\/script>";
        }, d3 = function() {
          try {
            n = document.domain && new ActiveXObject("htmlfile");
          } catch (e4) {
          }
          var e3, t3;
          d3 = n ? function(e4) {
            e4.write(f("")), e4.close();
            var t4 = e4.parentWindow.Object;
            return e4 = null, t4;
          }(n) : ((t3 = l("iframe")).style.display = "none", u2.appendChild(t3), t3.src = String("javascript:"), (e3 = t3.contentWindow.document).open(), e3.write(f("document.F=Object")), e3.close(), e3.F);
          for (var r2 = a3.length; r2--; )
            delete d3.prototype[a3[r2]];
          return d3();
        };
        s3[h3] = true, e2.exports = Object.create || function(e3, t3) {
          var r2;
          return e3 !== null ? (p.prototype = i2(e3), r2 = new p(), p.prototype = null, r2[h3] = e3) : r2 = d3(), t3 === void 0 ? r2 : o(r2, t3);
        };
      }, function(e2, t2, r) {
        var n = r(121), i2 = r(84);
        e2.exports = Object.keys || function(e3) {
          return n(e3, i2);
        };
      }, function(e2, t2, r) {
        var n = r(15).f, i2 = r(14), o = r(5)("toStringTag");
        e2.exports = function(e3, t3, r2) {
          e3 && !i2(e3 = r2 ? e3 : e3.prototype, o) && n(e3, o, { configurable: true, value: t3 });
        };
      }, function(e2, t2, r) {
        var n = r(8), i2 = r(5), o = r(129), a3 = i2("species");
        e2.exports = function(e3) {
          return o >= 51 || !n(function() {
            var t3 = [];
            return (t3.constructor = {})[a3] = function() {
              return { foo: 1 };
            }, t3[e3](Boolean).foo !== 1;
          });
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(122).indexOf, o = r(48), a3 = r(28), s3 = [].indexOf, u2 = !!s3 && 1 / [1].indexOf(1, -0) < 0, l = o("indexOf"), c2 = a3("indexOf", { ACCESSORS: true, 1: 0 });
        n({ target: "Array", proto: true, forced: u2 || !l || !c2 }, { indexOf: function(e3) {
          return u2 ? s3.apply(this, arguments) || 0 : i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(15).f, o = Function.prototype, a3 = o.toString, s3 = /^\s*function ([^ (]*)/;
        n && !("name" in o) && i2(o, "name", { configurable: true, get: function() {
          try {
            return a3.call(this).match(s3)[1];
          } catch (e3) {
            return "";
          }
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(25), i2 = r(18), o = r(8), a3 = r(136), s3 = RegExp.prototype, u2 = s3.toString, l = o(function() {
          return u2.call({ source: "a", flags: "b" }) != "/a/b";
        }), c2 = u2.name != "toString";
        (l || c2) && n(RegExp.prototype, "toString", function() {
          var e3 = i2(this), t3 = String(e3.source), r2 = e3.flags;
          return "/" + t3 + "/" + String(r2 === void 0 && e3 instanceof RegExp && !("flags" in s3) ? a3.call(e3) : r2);
        }, { unsafe: true });
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(138), r(20), r(66), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(1), s3 = r(2), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._writerOptions = a3.applyDefaults(r2, { format: "object", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            return this._currentList = [], this._currentIndex = 0, this._listRegister = [this._currentList], this.serializeNode(e4, this._writerOptions.wellFormed), this._process(this._currentList, this._writerOptions);
          }, t3.prototype._process = function(e4, t4) {
            var r2, n2, i3, o2, u3, l, c2;
            if (e4.length === 0)
              return {};
            for (var h3 = {}, p = false, f = 0, d3 = 0, m3 = 0, y3 = 0, v = 0; v < e4.length; v++) {
              var _ = e4[v];
              switch (I2 = Object.keys(_)[0]) {
                case "@":
                  continue;
                case "#":
                  f++;
                  break;
                case "!":
                  d3++;
                  break;
                case "?":
                  m3++;
                  break;
                case "$":
                  y3++;
                  break;
                default:
                  h3[I2] ? p = true : h3[I2] = true;
              }
            }
            var g = this._getAttrKey(), b2 = this._getNodeKey(s3.NodeType.Text), x2 = this._getNodeKey(s3.NodeType.Comment), w2 = this._getNodeKey(s3.NodeType.ProcessingInstruction), E2 = this._getNodeKey(s3.NodeType.CData);
            if (f === 1 && e4.length === 1 && a3.isString(e4[0]["#"]))
              return e4[0]["#"];
            if (p) {
              var D2 = {};
              for (v = 0; v < e4.length; v++) {
                _ = e4[v];
                if ((I2 = Object.keys(_)[0]) === "@") {
                  var S3 = _["@"];
                  (L2 = Object.keys(S3)).length === 1 ? D2[g + L2[0]] = S3[L2[0]] : D2[g] = _["@"];
                }
              }
              var C = [];
              for (v = 0; v < e4.length; v++) {
                _ = e4[v];
                switch (I2 = Object.keys(_)[0]) {
                  case "@":
                    break;
                  case "#":
                    C.push(((r2 = {})[b2] = _["#"], r2));
                    break;
                  case "!":
                    C.push(((n2 = {})[x2] = _["!"], n2));
                    break;
                  case "?":
                    C.push(((i3 = {})[w2] = _["?"], i3));
                    break;
                  case "$":
                    C.push(((o2 = {})[E2] = _.$, o2));
                    break;
                  default:
                    if ((B2 = _)[I2].length !== 0 && a3.isArray(B2[I2][0])) {
                      for (var A = [], N = B2[I2], T2 = 0; T2 < N.length; T2++)
                        A.push(this._process(N[T2], t4));
                      C.push(((u3 = {})[I2] = A, u3));
                    } else
                      t4.verbose ? C.push(((l = {})[I2] = [this._process(B2[I2], t4)], l)) : C.push(((c2 = {})[I2] = this._process(B2[I2], t4), c2));
                }
              }
              return D2[b2] = C, D2;
            }
            var O2 = 1, F = 1, k2 = 1, P = 1;
            for (D2 = {}, v = 0; v < e4.length; v++) {
              var I2;
              _ = e4[v];
              switch (I2 = Object.keys(_)[0]) {
                case "@":
                  S3 = _["@"];
                  var L2 = Object.keys(S3);
                  if (t4.group && L2.length !== 1)
                    D2[g] = S3;
                  else
                    for (var M3 in S3)
                      D2[g + M3] = S3[M3];
                  break;
                case "#":
                  O2 = this._processSpecItem(_["#"], D2, t4.group, b2, f, O2);
                  break;
                case "!":
                  F = this._processSpecItem(_["!"], D2, t4.group, x2, d3, F);
                  break;
                case "?":
                  k2 = this._processSpecItem(_["?"], D2, t4.group, w2, m3, k2);
                  break;
                case "$":
                  P = this._processSpecItem(_.$, D2, t4.group, E2, y3, P);
                  break;
                default:
                  var B2;
                  if ((B2 = _)[I2].length !== 0 && a3.isArray(B2[I2][0])) {
                    A = [], N = B2[I2];
                    for (var j = 0; j < N.length; j++)
                      A.push(this._process(N[j], t4));
                    D2[I2] = A;
                  } else
                    t4.verbose ? D2[I2] = [this._process(B2[I2], t4)] : D2[I2] = this._process(B2[I2], t4);
              }
            }
            return D2;
          }, t3.prototype._processSpecItem = function(e4, t4, r2, n2, i3, s4) {
            var u3, l;
            if (!r2 && a3.isArray(e4) && i3 + e4.length > 2)
              try {
                for (var c2 = o(e4), h3 = c2.next(); !h3.done; h3 = c2.next()) {
                  var p = h3.value;
                  t4[n2 + (s4++).toString()] = p;
                }
              } catch (e5) {
                u3 = { error: e5 };
              } finally {
                try {
                  h3 && !h3.done && (l = c2.return) && l.call(c2);
                } finally {
                  if (u3)
                    throw u3.error;
                }
              }
            else
              t4[i3 > 1 ? n2 + (s4++).toString() : n2] = e4;
            return s4;
          }, t3.prototype.beginElement = function(e4) {
            var t4, r2, n2 = [];
            if (this._currentList.length === 0)
              this._currentList.push(((t4 = {})[e4] = n2, t4));
            else {
              var i3 = this._currentList[this._currentList.length - 1];
              if (this._isElementNode(i3, e4))
                if (i3[e4].length !== 0 && a3.isArray(i3[e4][0]))
                  i3[e4].push(n2);
                else
                  i3[e4] = [i3[e4], n2];
              else
                this._currentList.push(((r2 = {})[e4] = n2, r2));
            }
            this._currentIndex++, this._listRegister.length > this._currentIndex ? this._listRegister[this._currentIndex] = n2 : this._listRegister.push(n2), this._currentList = n2;
          }, t3.prototype.endElement = function() {
            this._currentList = this._listRegister[--this._currentIndex];
          }, t3.prototype.attribute = function(e4, t4) {
            var r2, n2;
            if (this._currentList.length === 0)
              this._currentList.push({ "@": (r2 = {}, r2[e4] = t4, r2) });
            else {
              var i3 = this._currentList[this._currentList.length - 1];
              this._isAttrNode(i3) ? i3["@"][e4] = t4 : this._currentList.push({ "@": (n2 = {}, n2[e4] = t4, n2) });
            }
          }, t3.prototype.comment = function(e4) {
            if (this._currentList.length === 0)
              this._currentList.push({ "!": e4 });
            else {
              var t4 = this._currentList[this._currentList.length - 1];
              this._isCommentNode(t4) ? a3.isArray(t4["!"]) ? t4["!"].push(e4) : t4["!"] = [t4["!"], e4] : this._currentList.push({ "!": e4 });
            }
          }, t3.prototype.text = function(e4) {
            if (this._currentList.length === 0)
              this._currentList.push({ "#": e4 });
            else {
              var t4 = this._currentList[this._currentList.length - 1];
              this._isTextNode(t4) ? a3.isArray(t4["#"]) ? t4["#"].push(e4) : t4["#"] = [t4["#"], e4] : this._currentList.push({ "#": e4 });
            }
          }, t3.prototype.instruction = function(e4, t4) {
            var r2 = t4 === "" ? e4 : e4 + " " + t4;
            if (this._currentList.length === 0)
              this._currentList.push({ "?": r2 });
            else {
              var n2 = this._currentList[this._currentList.length - 1];
              this._isInstructionNode(n2) ? a3.isArray(n2["?"]) ? n2["?"].push(r2) : n2["?"] = [n2["?"], r2] : this._currentList.push({ "?": r2 });
            }
          }, t3.prototype.cdata = function(e4) {
            if (this._currentList.length === 0)
              this._currentList.push({ $: e4 });
            else {
              var t4 = this._currentList[this._currentList.length - 1];
              this._isCDATANode(t4) ? a3.isArray(t4.$) ? t4.$.push(e4) : t4.$ = [t4.$, e4] : this._currentList.push({ $: e4 });
            }
          }, t3.prototype._isAttrNode = function(e4) {
            return "@" in e4;
          }, t3.prototype._isTextNode = function(e4) {
            return "#" in e4;
          }, t3.prototype._isCommentNode = function(e4) {
            return "!" in e4;
          }, t3.prototype._isInstructionNode = function(e4) {
            return "?" in e4;
          }, t3.prototype._isCDATANode = function(e4) {
            return "$" in e4;
          }, t3.prototype._isElementNode = function(e4, t4) {
            return t4 in e4;
          }, t3.prototype._getAttrKey = function() {
            return this._builderOptions.convert.att;
          }, t3.prototype._getNodeKey = function(e4) {
            switch (e4) {
              case s3.NodeType.Comment:
                return this._builderOptions.convert.comment;
              case s3.NodeType.Text:
                return this._builderOptions.convert.text;
              case s3.NodeType.ProcessingInstruction:
                return this._builderOptions.convert.ins;
              case s3.NodeType.CData:
                return this._builderOptions.convert.cdata;
              default:
                throw new Error("Invalid node type.");
            }
          }, t3;
        }(r(50).BaseWriter);
        t2.ObjectWriter = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(93);
        n({ target: "RegExp", proto: true, forced: /./.exec !== i2 }, { exec: i2 });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
            this._items = {}, this._nullItems = {};
          }
          return e3.prototype.set = function(e4, t3) {
            e4 === null ? this._nullItems[t3] = true : (this._items[e4] || (this._items[e4] = {}), this._items[e4][t3] = true);
          }, e3.prototype.has = function(e4, t3) {
            return e4 === null ? this._nullItems[t3] === true : !!this._items[e4] && this._items[e4][t3] === true;
          }, e3;
        }();
        t2.LocalNameSet = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(9), o = r(3), a3 = r(0), s3 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "_eventListenerList", { get: function() {
            return this.__eventListenerList || (this.__eventListenerList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_eventHandlerMap", { get: function() {
            return this.__eventHandlerMap || (this.__eventHandlerMap = {});
          }, enumerable: true, configurable: true }), e3.prototype.addEventListener = function(e4, t3, r2) {
            r2 === void 0 && (r2 = { passive: false, once: false, capture: false });
            var i3, s4 = n(a3.eventTarget_flattenMore(r2), 3), u2 = s4[0], l = s4[1], c2 = s4[2];
            t3 && (i3 = o.Guard.isEventListener(t3) ? t3 : { handleEvent: t3 }, a3.eventTarget_addEventListener(this, { type: e4, callback: i3, capture: u2, passive: l, once: c2, removed: false }));
          }, e3.prototype.removeEventListener = function(e4, t3, r2) {
            r2 === void 0 && (r2 = { capture: false });
            var n2 = a3.eventTarget_flatten(r2);
            if (t3)
              for (var i3 = 0; i3 < this._eventListenerList.length; i3++) {
                var s4 = this._eventListenerList[i3];
                if (s4.type === e4 && s4.capture === n2) {
                  if (o.Guard.isEventListener(t3) && s4.callback === t3) {
                    a3.eventTarget_removeEventListener(this, s4, i3);
                    break;
                  }
                  if (t3 && s4.callback.handleEvent === t3) {
                    a3.eventTarget_removeEventListener(this, s4, i3);
                    break;
                  }
                }
              }
          }, e3.prototype.dispatchEvent = function(e4) {
            if (e4._dispatchFlag || !e4._initializedFlag)
              throw new i2.InvalidStateError();
            return e4._isTrusted = false, a3.event_dispatch(e4, this);
          }, e3.prototype._getTheParent = function(e4) {
            return null;
          }, e3;
        }();
        t2.EventTargetImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(34), a3 = r(0), s3 = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this) || this;
            return r2._data = t4, r2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "data", { get: function() {
            return this._data;
          }, set: function(e4) {
            a3.characterData_replaceData(this, 0, this._data.length, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "length", { get: function() {
            return this._data.length;
          }, enumerable: true, configurable: true }), t3.prototype.substringData = function(e4, t4) {
            return a3.characterData_substringData(this, e4, t4);
          }, t3.prototype.appendData = function(e4) {
            return a3.characterData_replaceData(this, this._data.length, 0, e4);
          }, t3.prototype.insertData = function(e4, t4) {
            a3.characterData_replaceData(this, e4, 0, t4);
          }, t3.prototype.deleteData = function(e4, t4) {
            a3.characterData_replaceData(this, e4, t4, "");
          }, t3.prototype.replaceData = function(e4, t4, r2) {
            a3.characterData_replaceData(this, e4, t4, r2);
          }, Object.defineProperty(t3.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.before = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.after = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.replaceWith = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3;
        }(o.NodeImpl);
        t2.CharacterDataImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(3), u2 = r(1), l = r(17), c2 = r(51);
        function h3(e3) {
          a3.dom.window._signalSlots.add(e3), c2.observer_queueAMutationObserverMicrotask();
        }
        function p(e3, t3) {
          t3 === void 0 && (t3 = false);
          var r2 = s3.Cast.asNode(e3)._parent;
          if (r2 === null)
            return null;
          var n2 = r2._shadowRoot || null;
          if (n2 === null)
            return null;
          if (t3 && n2._mode !== "open")
            return null;
          for (var i3 = l.tree_getFirstDescendantNode(n2, false, true, function(e4) {
            return s3.Guard.isSlot(e4);
          }); i3 !== null; ) {
            if (i3._name === e3._name)
              return i3;
            i3 = l.tree_getNextDescendantNode(n2, i3, false, true, function(e4) {
              return s3.Guard.isSlot(e4);
            });
          }
          return null;
        }
        function f(e3) {
          var t3, r2, i3 = [], o2 = l.tree_rootNode(e3);
          if (!s3.Guard.isShadowRoot(o2))
            return i3;
          var a4 = o2._host;
          try {
            for (var u3 = n(a4._children), c3 = u3.next(); !c3.done; c3 = u3.next()) {
              var h4 = c3.value;
              if (s3.Guard.isSlotable(h4))
                p(h4) === e3 && i3.push(h4);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (r2 = u3.return) && r2.call(u3);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function d3(e3) {
          var t3, r2, i3 = f(e3);
          if (i3.length === e3._assignedNodes.length) {
            for (var o2 = true, a4 = 0; a4 < i3.length; a4++)
              if (i3[a4] !== e3._assignedNodes[a4]) {
                o2 = false;
                break;
              }
            o2 || h3(e3);
          }
          e3._assignedNodes = i3;
          try {
            for (var s4 = n(i3), u3 = s4.next(); !u3.done; u3 = s4.next()) {
              u3.value._assignedSlot = e3;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              u3 && !u3.done && (r2 = s4.return) && r2.call(s4);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
        }
        t2.shadowTree_signalASlotChange = h3, t2.shadowTree_isConnected = function(e3) {
          return s3.Guard.isDocumentNode(l.tree_rootNode(e3, true));
        }, t2.shadowTree_isAssigned = function(e3) {
          return e3._assignedSlot !== null;
        }, t2.shadowTree_findASlot = p, t2.shadowTree_findSlotables = f, t2.shadowTree_findFlattenedSlotables = function e3(t3) {
          var r2, i3, a4, c3, h4 = [], p2 = l.tree_rootNode(t3);
          if (!s3.Guard.isShadowRoot(p2))
            return h4;
          var d4 = f(t3);
          if (u2.isEmpty(d4))
            try {
              for (var m3 = n(t3._children), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                var v = y3.value;
                s3.Guard.isSlotable(v) && d4.push(v);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                y3 && !y3.done && (i3 = m3.return) && i3.call(m3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          try {
            for (var _ = n(d4), g = _.next(); !g.done; g = _.next()) {
              var b2 = g.value;
              if (s3.Guard.isSlot(b2) && s3.Guard.isShadowRoot(l.tree_rootNode(b2))) {
                var x2 = e3(b2);
                h4.push.apply(h4, o(x2));
              } else
                h4.push(b2);
            }
          } catch (e4) {
            a4 = { error: e4 };
          } finally {
            try {
              g && !g.done && (c3 = _.return) && c3.call(_);
            } finally {
              if (a4)
                throw a4.error;
            }
          }
          return h4;
        }, t2.shadowTree_assignSlotables = d3, t2.shadowTree_assignSlotablesForATree = function(e3) {
          for (var t3 = l.tree_getFirstDescendantNode(e3, true, false, function(e4) {
            return s3.Guard.isSlot(e4);
          }); t3 !== null; )
            d3(t3), t3 = l.tree_getNextDescendantNode(e3, t3, true, false, function(e4) {
              return s3.Guard.isSlot(e4);
            });
        }, t2.shadowTree_assignASlot = function(e3) {
          var t3 = p(e3);
          t3 !== null && d3(t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = /[a-z]([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*-([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*/, i2 = /* @__PURE__ */ new Set(["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"]), o = /* @__PURE__ */ new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]), a3 = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), s3 = /* @__PURE__ */ new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]);
        t2.customElement_isValidCustomElementName = function(e3) {
          return !!n.test(e3) && !i2.has(e3);
        }, t2.customElement_isValidElementName = function(e3) {
          return o.has(e3);
        }, t2.customElement_isVoidElementName = function(e3) {
          return a3.has(e3);
        }, t2.customElement_isValidShadowHostName = function(e3) {
          return s3.has(e3);
        }, t2.customElement_enqueueACustomElementUpgradeReaction = function(e3, t3) {
        }, t2.customElement_enqueueACustomElementCallbackReaction = function(e3, t3, r2) {
        }, t2.customElement_upgrade = function(e3, t3) {
        }, t2.customElement_tryToUpgrade = function(e3) {
        }, t2.customElement_lookUpACustomElementDefinition = function(e3, t3, r2, n2) {
          return null;
        };
      }, function(e2, t2, r) {
        r(4)({ target: "String", proto: true }, { repeat: r(259) });
      }, function(e2, t2, r) {
        "use strict";
        r(278), r(68), r(179), r(94), Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(109), i2 = function() {
          function e3(e4) {
            this._builderOptions = e4, e4.parser && Object.assign(this, e4.parser);
          }
          return e3.prototype._docType = function(e4, t3, r2, n2) {
            return e4.dtd({ name: t3, pubID: r2, sysID: n2 });
          }, e3.prototype._comment = function(e4, t3) {
            return e4.com(t3);
          }, e3.prototype._text = function(e4, t3) {
            return e4.txt(t3);
          }, e3.prototype._instruction = function(e4, t3, r2) {
            return e4.ins(t3, r2);
          }, e3.prototype._cdata = function(e4, t3) {
            return e4.dat(t3);
          }, e3.prototype._element = function(e4, t3, r2) {
            return t3 === void 0 ? e4.ele(r2) : e4.ele(t3, r2);
          }, e3.prototype._attribute = function(e4, t3, r2, n2) {
            return t3 === void 0 ? e4.att(r2, n2) : e4.att(t3, r2, n2);
          }, e3.prototype._sanitize = function(e4) {
            return n.sanitizeInput(e4, this._builderOptions.invalidCharReplacement);
          }, e3.prototype._decodeText = function(t3) {
            return t3 == null ? t3 : t3.replace(/&(quot|amp|apos|lt|gt);/g, function(t4, r2) {
              return e3._entityTable[r2];
            }).replace(/&#(?:x([a-fA-F0-9]+)|([0-9]+));/g, function(e4, t4, r2) {
              return String.fromCodePoint(parseInt(t4 || r2, t4 ? 16 : 10));
            });
          }, e3.prototype._decodeAttributeValue = function(e4) {
            return this._decodeText(e4);
          }, e3.prototype.parse = function(e4, t3) {
            return this._parse(e4, t3);
          }, e3.prototype.docType = function(e4, t3, r2, n2) {
            return this._docType(e4, t3, r2, n2);
          }, e3.prototype.comment = function(e4, t3) {
            return this._comment(e4, t3);
          }, e3.prototype.text = function(e4, t3) {
            return this._text(e4, t3);
          }, e3.prototype.instruction = function(e4, t3, r2) {
            return this._instruction(e4, t3, r2);
          }, e3.prototype.cdata = function(e4, t3) {
            return this._cdata(e4, t3);
          }, e3.prototype.element = function(e4, t3, r2) {
            return this._element(e4, t3, r2);
          }, e3.prototype.attribute = function(e4, t3, r2, n2) {
            return this._attribute(e4, t3, r2, n2);
          }, e3.prototype.sanitize = function(e4) {
            return this._sanitize(e4);
          }, e3._entityTable = { lt: "<", gt: ">", amp: "&", quot: '"', apos: "'" }, e3;
        }();
        t2.BaseReader = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = n.DEFAULT = new n({ include: [r(54)], explicit: [r(299), r(300), r(301)] });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(185);
        t2.XMLBuilderImpl = n.XMLBuilderImpl;
        var i2 = r(304);
        t2.XMLBuilderCBImpl = i2.XMLBuilderCBImpl;
        var o = r(183);
        t2.builder = o.builder, t2.create = o.create, t2.fragment = o.fragment, t2.convert = o.convert;
        var a3 = r(309);
        t2.createCB = a3.createCB, t2.fragmentCB = a3.fragmentCB;
      }, function(e2, t2) {
        var r;
        r = function() {
          return this;
        }();
        try {
          r = r || new Function("return this")();
        } catch (e3) {
          typeof window == "object" && (r = window);
        }
        e2.exports = r;
      }, function(e2, t2, r) {
        "use strict";
        var n = {}.propertyIsEnumerable, i2 = Object.getOwnPropertyDescriptor, o = i2 && !n.call({ 1: 2 }, 1);
        t2.f = o ? function(e3) {
          var t3 = i2(this, e3);
          return !!t3 && t3.enumerable;
        } : n;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(21);
        e2.exports = function(e3, t3) {
          try {
            i2(n, e3, t3);
          } catch (r2) {
            n[e3] = t3;
          }
          return t3;
        };
      }, function(e2, t2, r) {
        var n = r(44), i2 = r(118);
        (e2.exports = function(e3, t3) {
          return i2[e3] || (i2[e3] = t3 !== void 0 ? t3 : {});
        })("versions", []).push({ version: "3.6.5", mode: n ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
      }, function(e2, t2, r) {
        var n = r(121), i2 = r(84).concat("length", "prototype");
        t2.f = Object.getOwnPropertyNames || function(e3) {
          return n(e3, i2);
        };
      }, function(e2, t2, r) {
        var n = r(47), i2 = Math.max, o = Math.min;
        e2.exports = function(e3, t3) {
          var r2 = n(e3);
          return r2 < 0 ? i2(r2 + t3, 0) : o(r2, t3);
        };
      }, function(e2, t2) {
        e2.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      }, function(e2, t2) {
        t2.f = Object.getOwnPropertySymbols;
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !!Object.getOwnPropertySymbols && !n(function() {
          return !String(Symbol());
        });
      }, function(e2, t2, r) {
        var n = r(127);
        e2.exports = function(e3, t3, r2) {
          if (n(e3), t3 === void 0)
            return e3;
          switch (r2) {
            case 0:
              return function() {
                return e3.call(t3);
              };
            case 1:
              return function(r3) {
                return e3.call(t3, r3);
              };
            case 2:
              return function(r3, n2) {
                return e3.call(t3, r3, n2);
              };
            case 3:
              return function(r3, n2, i2) {
                return e3.call(t3, r3, n2, i2);
              };
          }
          return function() {
            return e3.apply(t3, arguments);
          };
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(195), o = r(132), a3 = r(133), s3 = r(62), u2 = r(21), l = r(25), c2 = r(5), h3 = r(44), p = r(49), f = r(131), d3 = f.IteratorPrototype, m3 = f.BUGGY_SAFARI_ITERATORS, y3 = c2("iterator"), v = function() {
          return this;
        };
        e2.exports = function(e3, t3, r2, c3, f2, _, g) {
          i2(r2, t3, c3);
          var b2, x2, w2, E2 = function(e4) {
            if (e4 === f2 && N)
              return N;
            if (!m3 && e4 in C)
              return C[e4];
            switch (e4) {
              case "keys":
              case "values":
              case "entries":
                return function() {
                  return new r2(this, e4);
                };
            }
            return function() {
              return new r2(this);
            };
          }, D2 = t3 + " Iterator", S3 = false, C = e3.prototype, A = C[y3] || C["@@iterator"] || f2 && C[f2], N = !m3 && A || E2(f2), T2 = t3 == "Array" && C.entries || A;
          if (T2 && (b2 = o(T2.call(new e3())), d3 !== Object.prototype && b2.next && (h3 || o(b2) === d3 || (a3 ? a3(b2, d3) : typeof b2[y3] != "function" && u2(b2, y3, v)), s3(b2, D2, true, true), h3 && (p[D2] = v))), f2 == "values" && A && A.name !== "values" && (S3 = true, N = function() {
            return A.call(this);
          }), h3 && !g || C[y3] === N || u2(C, y3, N), p[t3] = N, f2)
            if (x2 = { values: E2("values"), keys: _ ? N : E2("keys"), entries: E2("entries") }, g)
              for (w2 in x2)
                (m3 || S3 || !(w2 in C)) && l(C, w2, x2[w2]);
            else
              n({ target: t3, proto: true, forced: m3 || S3 }, x2);
          return x2;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(13), o = r(59), a3 = r(83), s3 = r(26), u2 = r(24), l = r(134), c2 = r(5), h3 = r(63), p = r(28), f = h3("slice"), d3 = p("slice", { ACCESSORS: true, 0: 0, 1: 2 }), m3 = c2("species"), y3 = [].slice, v = Math.max;
        n({ target: "Array", proto: true, forced: !f || !d3 }, { slice: function(e3, t3) {
          var r2, n2, c3, h4 = u2(this), p2 = s3(h4.length), f2 = a3(e3, p2), d4 = a3(t3 === void 0 ? p2 : t3, p2);
          if (o(h4) && (typeof (r2 = h4.constructor) != "function" || r2 !== Array && !o(r2.prototype) ? i2(r2) && (r2 = r2[m3]) === null && (r2 = void 0) : r2 = void 0, r2 === Array || r2 === void 0))
            return y3.call(h4, f2, d4);
          for (n2 = new (r2 === void 0 ? Array : r2)(v(d4 - f2, 0)), c3 = 0; f2 < d4; f2++, c3++)
            f2 in h4 && l(n2, c3, h4[f2]);
          return n2.length = c3, n2;
        } });
      }, function(e2, t2, r) {
        var n = {};
        n[r(5)("toStringTag")] = "z", e2.exports = String(n) === "[object z]";
      }, function(e2, t2, r) {
        "use strict";
        r(19), r(138), r(20), r(92), r(22), r(23), Object.defineProperty(t2, "__esModule", { value: true }), t2.DefaultBuilderOptions = { version: "1.0", encoding: void 0, standalone: void 0, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" }, invalidCharReplacement: void 0, parser: void 0 }, t2.XMLBuilderOptionKeys = new Set(Object.keys(t2.DefaultBuilderOptions)), t2.DefaultXMLBuilderCBOptions = { format: "xml", wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, spaceBeforeSlash: false, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" } };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(139), i2 = r(143);
        e2.exports = n("Set", function(e3) {
          return function() {
            return e3(this, arguments.length ? arguments[0] : void 0);
          };
        }, i2);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2, o = r(136), a3 = r(221), s3 = RegExp.prototype.exec, u2 = String.prototype.replace, l = s3, c2 = (n = /a/, i2 = /b*/g, s3.call(n, "a"), s3.call(i2, "a"), n.lastIndex !== 0 || i2.lastIndex !== 0), h3 = a3.UNSUPPORTED_Y || a3.BROKEN_CARET, p = /()??/.exec("")[1] !== void 0;
        (c2 || p || h3) && (l = function(e3) {
          var t3, r2, n2, i3, a4 = this, l2 = h3 && a4.sticky, f = o.call(a4), d3 = a4.source, m3 = 0, y3 = e3;
          return l2 && ((f = f.replace("y", "")).indexOf("g") === -1 && (f += "g"), y3 = String(e3).slice(a4.lastIndex), a4.lastIndex > 0 && (!a4.multiline || a4.multiline && e3[a4.lastIndex - 1] !== "\n") && (d3 = "(?: " + d3 + ")", y3 = " " + y3, m3++), r2 = new RegExp("^(?:" + d3 + ")", f)), p && (r2 = new RegExp("^" + d3 + "$(?!\\s)", f)), c2 && (t3 = a4.lastIndex), n2 = s3.call(l2 ? r2 : a4, y3), l2 ? n2 ? (n2.input = n2.input.slice(m3), n2[0] = n2[0].slice(m3), n2.index = a4.lastIndex, a4.lastIndex += n2[0].length) : a4.lastIndex = 0 : c2 && n2 && (a4.lastIndex = a4.global ? n2.index + n2[0].length : t3), p && n2 && n2.length > 1 && u2.call(n2[0], r2, function() {
            for (i3 = 1; i3 < arguments.length - 2; i3++)
              arguments[i3] === void 0 && (n2[i3] = void 0);
          }), n2;
        }), e2.exports = l;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(225), i2 = r(18), o = r(27), a3 = r(26), s3 = r(47), u2 = r(35), l = r(226), c2 = r(227), h3 = Math.max, p = Math.min, f = Math.floor, d3 = /\$([$&'`]|\d\d?|<[^>]*>)/g, m3 = /\$([$&'`]|\d\d?)/g;
        n("replace", 2, function(e3, t3, r2, n2) {
          var y3 = n2.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, v = n2.REPLACE_KEEPS_$0, _ = y3 ? "$" : "$0";
          return [function(r3, n3) {
            var i3 = u2(this), o2 = r3 == null ? void 0 : r3[e3];
            return o2 !== void 0 ? o2.call(r3, i3, n3) : t3.call(String(i3), r3, n3);
          }, function(e4, n3) {
            if (!y3 && v || typeof n3 == "string" && n3.indexOf(_) === -1) {
              var o2 = r2(t3, e4, this, n3);
              if (o2.done)
                return o2.value;
            }
            var u3 = i2(e4), f2 = String(this), d4 = typeof n3 == "function";
            d4 || (n3 = String(n3));
            var m4 = u3.global;
            if (m4) {
              var b2 = u3.unicode;
              u3.lastIndex = 0;
            }
            for (var x2 = []; ; ) {
              var w2 = c2(u3, f2);
              if (w2 === null)
                break;
              if (x2.push(w2), !m4)
                break;
              String(w2[0]) === "" && (u3.lastIndex = l(f2, a3(u3.lastIndex), b2));
            }
            for (var E2, D2 = "", S3 = 0, C = 0; C < x2.length; C++) {
              w2 = x2[C];
              for (var A = String(w2[0]), N = h3(p(s3(w2.index), f2.length), 0), T2 = [], O2 = 1; O2 < w2.length; O2++)
                T2.push((E2 = w2[O2]) === void 0 ? E2 : String(E2));
              var F = w2.groups;
              if (d4) {
                var k2 = [A].concat(T2, N, f2);
                F !== void 0 && k2.push(F);
                var P = String(n3.apply(void 0, k2));
              } else
                P = g(A, f2, N, T2, F, n3);
              N >= S3 && (D2 += f2.slice(S3, N) + P, S3 = N + A.length);
            }
            return D2 + f2.slice(S3);
          }];
          function g(e4, r3, n3, i3, a4, s4) {
            var u3 = n3 + e4.length, l2 = i3.length, c3 = m3;
            return a4 !== void 0 && (a4 = o(a4), c3 = d3), t3.call(s4, c3, function(t4, o2) {
              var s5;
              switch (o2.charAt(0)) {
                case "$":
                  return "$";
                case "&":
                  return e4;
                case "`":
                  return r3.slice(0, n3);
                case "'":
                  return r3.slice(u3);
                case "<":
                  s5 = a4[o2.slice(1, -1)];
                  break;
                default:
                  var c4 = +o2;
                  if (c4 === 0)
                    return t4;
                  if (c4 > l2) {
                    var h4 = f(c4 / 10);
                    return h4 === 0 ? t4 : h4 <= l2 ? i3[h4 - 1] === void 0 ? o2.charAt(1) : i3[h4 - 1] + o2.charAt(1) : t4;
                  }
                  s5 = i3[c4 - 1];
              }
              return s5 === void 0 ? "" : s5;
            });
          }
        });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
            this._items = {}, this._nullItems = [];
          }
          return e3.prototype.copy = function() {
            var t3 = new e3();
            for (var r2 in this._items)
              t3._items[r2] = this._items[r2].slice(0);
            return t3._nullItems = this._nullItems.slice(0), t3;
          }, e3.prototype.get = function(e4, t3) {
            var r2 = t3 === null ? this._nullItems : this._items[t3] || null;
            if (r2 === null)
              return null;
            for (var n2 = null, i2 = 0; i2 < r2.length; i2++)
              if ((n2 = r2[i2]) === e4)
                return n2;
            return n2;
          }, e3.prototype.has = function(e4, t3) {
            var r2 = t3 === null ? this._nullItems : this._items[t3] || null;
            return r2 !== null && r2.indexOf(e4) !== -1;
          }, e3.prototype.hasPrefix = function(e4) {
            if (this._nullItems.indexOf(e4) !== -1)
              return true;
            for (var t3 in this._items)
              if (this._items[t3].indexOf(e4) !== -1)
                return true;
            return false;
          }, e3.prototype.set = function(e4, t3) {
            var r2 = t3 === null ? this._nullItems : this._items[t3] || null;
            t3 !== null && r2 === null ? this._items[t3] = [e4] : r2.push(e4);
          }, e3;
        }();
        t2.NamespacePrefixMap = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Surrogate = /[\uD800-\uDFFF]/, t2.ScalarValue = /[\uD800-\uDFFF]/, t2.NonCharacter = /[\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]/, t2.ASCIICodePoint = /[\u0000-\u007F]/, t2.ASCIITabOrNewLine = /[\t\n\r]/, t2.ASCIIWhiteSpace = /[\t\n\f\r ]/, t2.C0Control = /[\u0000-\u001F]/, t2.C0ControlOrSpace = /[\u0000-\u001F ]/, t2.Control = /[\u0000-\u001F\u007F-\u009F]/, t2.ASCIIDigit = /[0-9]/, t2.ASCIIUpperHexDigit = /[0-9A-F]/, t2.ASCIILowerHexDigit = /[0-9a-f]/, t2.ASCIIHexDigit = /[0-9A-Fa-f]/, t2.ASCIIUpperAlpha = /[A-Z]/, t2.ASCIILowerAlpha = /[a-z]/, t2.ASCIIAlpha = /[A-Za-z]/, t2.ASCIIAlphanumeric = /[0-9A-Za-z]/;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(2), u2 = r(3), l = r(171), c2 = r(104), h3 = r(9), p = r(17), f = r(72), d3 = r(30);
        function m3(e3, t3) {
          t3 === void 0 && (t3 = void 0), t3 === void 0 && (t3 = null);
          var r2 = y3(e3, t3, new Date(), {});
          return r2._isTrusted = true, r2;
        }
        function y3(e3, t3, r2, n2) {
          var i3 = new e3("");
          return i3._initializedFlag = true, i3._timeStamp = r2.getTime(), Object.assign(i3, n2), a3.dom.features.steps && d3.dom_runEventConstructingSteps(i3), i3;
        }
        function v(e3, t3, r2, i3) {
          var o2, a4, l2, c3;
          r2 === void 0 && (r2 = false), i3 === void 0 && (i3 = { value: false });
          var h4 = false;
          e3._dispatchFlag = true;
          var d4 = t3;
          if (r2) {
            var m4 = t3._associatedDocument;
            u2.Guard.isDocumentNode(m4) && (d4 = m4);
          }
          var y4 = null, v2 = p.tree_retarget(e3._relatedTarget, t3);
          if (t3 !== v2 || t3 === e3._relatedTarget) {
            var b3 = [];
            try {
              for (var x3 = n(e3._touchTargetList), w3 = x3.next(); !w3.done; w3 = x3.next()) {
                var E3 = w3.value;
                b3.push(p.tree_retarget(E3, t3));
              }
            } catch (e4) {
              o2 = { error: e4 };
            } finally {
              try {
                w3 && !w3.done && (a4 = x3.return) && a4.call(x3);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
            _(e3, t3, d4, v2, b3, false);
            var D3 = u2.Guard.isMouseEvent(e3) && e3._type === "click";
            D3 && t3._activationBehavior !== void 0 && (y4 = t3);
            for (var S3 = u2.Guard.isSlotable(t3) && f.shadowTree_isAssigned(t3) ? t3 : null, C = false, A = t3._getTheParent(e3); A !== null && u2.Guard.isNode(A); ) {
              if (S3 !== null) {
                if (!u2.Guard.isSlot(A))
                  throw new Error("Parent node of a slotable should be a slot.");
                S3 = null;
                var N = p.tree_rootNode(A, true);
                u2.Guard.isShadowRoot(N) && N._mode === "closed" && (C = true);
              }
              u2.Guard.isSlotable(A) && f.shadowTree_isAssigned(A) && (S3 = A), v2 = p.tree_retarget(e3._relatedTarget, A), b3 = [];
              try {
                for (var T2 = (l2 = void 0, n(e3._touchTargetList)), O2 = T2.next(); !O2.done; O2 = T2.next()) {
                  E3 = O2.value;
                  b3.push(p.tree_retarget(E3, A));
                }
              } catch (e4) {
                l2 = { error: e4 };
              } finally {
                try {
                  O2 && !O2.done && (c3 = T2.return) && c3.call(T2);
                } finally {
                  if (l2)
                    throw l2.error;
                }
              }
              u2.Guard.isWindow(A) || u2.Guard.isNode(A) && u2.Guard.isNode(t3) && p.tree_isAncestorOf(p.tree_rootNode(t3, true), A, true, true) ? (D3 && e3._bubbles && y4 === null && A._activationBehavior && (y4 = A), _(e3, A, null, v2, b3, C)) : A === v2 ? A = null : (t3 = A, D3 && y4 === null && t3._activationBehavior && (y4 = t3), _(e3, A, t3, v2, b3, C)), A !== null && (A = A._getTheParent(e3)), C = false;
            }
            for (var F = null, k2 = e3._path, P = k2.length - 1; P >= 0; P--) {
              if ((L2 = k2[P]).shadowAdjustedTarget !== null) {
                F = L2;
                break;
              }
            }
            if (F !== null)
              if (u2.Guard.isNode(F.shadowAdjustedTarget) && u2.Guard.isShadowRoot(p.tree_rootNode(F.shadowAdjustedTarget, true)))
                h4 = true;
              else if (u2.Guard.isNode(F.relatedTarget) && u2.Guard.isShadowRoot(p.tree_rootNode(F.relatedTarget, true)))
                h4 = true;
              else
                for (var I2 = 0; I2 < F.touchTargetList.length; I2++) {
                  var L2 = F.touchTargetList[I2];
                  if (u2.Guard.isNode(L2) && u2.Guard.isShadowRoot(p.tree_rootNode(L2, true))) {
                    h4 = true;
                    break;
                  }
                }
            y4 !== null && y4._legacyPreActivationBehavior !== void 0 && y4._legacyPreActivationBehavior(e3);
            for (P = k2.length - 1; P >= 0; P--) {
              (L2 = k2[P]).shadowAdjustedTarget !== null ? e3._eventPhase = s3.EventPhase.AtTarget : e3._eventPhase = s3.EventPhase.Capturing, g(L2, e3, "capturing", i3);
            }
            for (P = 0; P < k2.length; P++) {
              if ((L2 = k2[P]).shadowAdjustedTarget !== null)
                e3._eventPhase = s3.EventPhase.AtTarget;
              else {
                if (!e3._bubbles)
                  continue;
                e3._eventPhase = s3.EventPhase.Bubbling;
              }
              g(L2, e3, "bubbling", i3);
            }
          }
          return e3._eventPhase = s3.EventPhase.None, e3._currentTarget = null, e3._path = [], e3._dispatchFlag = false, e3._stopPropagationFlag = false, e3._stopImmediatePropagationFlag = false, h4 && (e3._target = null, e3._relatedTarget = null, e3._touchTargetList = []), y4 !== null && (e3._canceledFlag || y4._activationBehavior === void 0 ? y4._legacyCanceledActivationBehavior !== void 0 && y4._legacyCanceledActivationBehavior(e3) : y4._activationBehavior(e3)), !e3._canceledFlag;
        }
        function _(e3, t3, r2, n2, i3, o2) {
          var a4 = false;
          u2.Guard.isNode(t3) && u2.Guard.isShadowRoot(p.tree_rootNode(t3)) && (a4 = true);
          var s4 = false;
          u2.Guard.isShadowRoot(t3) && t3._mode === "closed" && (s4 = true), e3._path.push({ invocationTarget: t3, invocationTargetInShadowTree: a4, shadowAdjustedTarget: r2, relatedTarget: n2, touchTargetList: i3, rootOfClosedTree: s4, slotInClosedTree: o2 });
        }
        function g(e3, t3, r2, n2) {
          n2 === void 0 && (n2 = { value: false });
          for (var i3 = t3._path, a4 = -1, s4 = 0; s4 < i3.length; s4++)
            if (i3[s4] === e3) {
              a4 = s4;
              break;
            }
          if (a4 !== -1) {
            var u3 = i3[a4];
            (u3.shadowAdjustedTarget !== null || a4 > 0 && (u3 = i3[a4 - 1]).shadowAdjustedTarget !== null) && (t3._target = u3.shadowAdjustedTarget);
          }
          if (t3._relatedTarget = e3.relatedTarget, t3._touchTargetList = e3.touchTargetList, !t3._stopPropagationFlag) {
            t3._currentTarget = e3.invocationTarget;
            var l2 = t3._currentTarget._eventListenerList, c3 = new (Array.bind.apply(Array, o([void 0], l2)))();
            if (!b2(t3, c3, r2, e3, n2) && t3._isTrusted) {
              var h4 = t3._type;
              h4 === "animationend" ? t3._type = "webkitAnimationEnd" : h4 === "animationiteration" ? t3._type = "webkitAnimationIteration" : h4 === "animationstart" ? t3._type = "webkitAnimationStart" : h4 === "transitionend" && (t3._type = "webkitTransitionEnd"), b2(t3, c3, r2, e3, n2), t3._type = h4;
            }
          }
        }
        function b2(e3, t3, r2, n2, i3) {
          i3 === void 0 && (i3 = { value: false });
          for (var o2 = false, a4 = 0; a4 < t3.length; a4++) {
            var s4 = t3[a4];
            if (!s4.removed) {
              if (e3._type !== s4.type)
                continue;
              if (o2 = true, r2 === "capturing" && !s4.capture)
                continue;
              if (r2 === "bubbling" && s4.capture)
                continue;
              if (s4.once && e3._currentTarget !== null) {
                for (var l2 = e3._currentTarget, c3 = -1, h4 = 0; h4 < l2._eventListenerList.length; h4++)
                  if (l2._eventListenerList[h4] === s4) {
                    c3 = h4;
                    break;
                  }
                c3 !== -1 && l2._eventListenerList.splice(c3, 1);
              }
              var p2 = void 0, f2 = void 0;
              u2.Guard.isWindow(p2) && (f2 = p2._currentEvent, n2.invocationTargetInShadowTree === false && (p2._currentEvent = e3)), s4.passive && (e3._inPassiveListenerFlag = true);
              try {
                s4.callback.handleEvent.call(e3._currentTarget, e3);
              } catch (e4) {
                i3.value = true;
              }
              if (s4.passive && (e3._inPassiveListenerFlag = false), u2.Guard.isWindow(p2) && (p2._currentEvent = f2), e3._stopImmediatePropagationFlag)
                return o2;
            }
          }
          return o2;
        }
        function x2(e3, t3) {
          return null;
        }
        function w2(e3, t3) {
          return null;
        }
        function E2(e3, t3) {
        }
        function D2(e3, t3) {
        }
        t2.event_setTheCanceledFlag = function(e3) {
          e3._cancelable && !e3._inPassiveListenerFlag && (e3._canceledFlag = true);
        }, t2.event_initialize = function(e3, t3, r2, n2) {
          e3._initializedFlag = true, e3._stopPropagationFlag = false, e3._stopImmediatePropagationFlag = false, e3._canceledFlag = false, e3._isTrusted = false, e3._target = null, e3._type = t3, e3._bubbles = r2, e3._cancelable = n2;
        }, t2.event_createAnEvent = m3, t2.event_innerEventCreationSteps = y3, t2.event_dispatch = v, t2.event_appendToAnEventPath = _, t2.event_invoke = g, t2.event_innerInvoke = b2, t2.event_fireAnEvent = function(e3, t3, r2, n2, i3) {
          r2 === void 0 && (r2 = c2.EventImpl);
          var o2 = m3(r2);
          if (o2._type = e3, n2)
            for (var a4 in n2) {
              o2[a4] = n2[a4];
            }
          return v(o2, t3, i3);
        }, t2.event_createLegacyEvent = function(e3) {
          var t3 = null;
          switch (e3.toLowerCase()) {
            case "beforeunloadevent":
            case "compositionevent":
              break;
            case "customevent":
              t3 = l.CustomEventImpl;
              break;
            case "devicemotionevent":
            case "deviceorientationevent":
            case "dragevent":
              break;
            case "event":
            case "events":
              t3 = c2.EventImpl;
          }
          if (t3 === null)
            throw new h3.NotSupportedError("Event constructor not found for interface " + e3 + ".");
          var r2 = new t3("");
          return r2._type = "", r2._timeStamp = new Date().getTime(), r2._isTrusted = false, r2._initializedFlag = false, r2;
        }, t2.event_getterEventHandlerIDLAttribute = function(e3, t3) {
          return null;
        }, t2.event_setterEventHandlerIDLAttribute = function(e3, t3, r2) {
        }, t2.event_determineTheTargetOfAnEventHandler = x2, t2.event_getTheCurrentValueOfAnEventHandler = w2, t2.event_activateAnEventHandler = E2, t2.event_deactivateAnEventHandler = D2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a3 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(6), u2 = r(2), l = r(9), c2 = r(34), h3 = r(3), p = r(1), f = r(7), d3 = r(152), m3 = r(0), y3 = r(12), v = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._children = /* @__PURE__ */ new Set(), t4._encoding = { name: "UTF-8", labels: ["unicode-1-1-utf-8", "utf-8", "utf8"] }, t4._contentType = "application/xml", t4._URL = { scheme: "about", username: "", password: "", host: null, port: null, path: ["blank"], query: null, fragment: null, _cannotBeABaseURLFlag: true, _blobURLEntry: null }, t4._origin = null, t4._type = "xml", t4._mode = "no-quirks", t4._documentElement = null, t4._hasNamespaces = false, t4._nodeDocumentOverwrite = null, t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverwrite || this;
          }, set: function(e4) {
            this._nodeDocumentOverwrite = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "implementation", { get: function() {
            return this._implementation || (this._implementation = m3.create_domImplementation(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "URL", { get: function() {
            return d3.urlSerializer(this._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "documentURI", { get: function() {
            return this.URL;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "origin", { get: function() {
            return "null";
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "compatMode", { get: function() {
            return this._mode === "quirks" ? "BackCompat" : "CSS1Compat";
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "characterSet", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "charset", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "inputEncoding", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "contentType", { get: function() {
            return this._contentType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "doctype", { get: function() {
            var e4, t4;
            try {
              for (var r2 = o(this._children), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                var i3 = n2.value;
                if (h3.Guard.isDocumentTypeNode(i3))
                  return i3;
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                n2 && !n2.done && (t4 = r2.return) && t4.call(r2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "documentElement", { get: function() {
            return this._documentElement;
          }, enumerable: true, configurable: true }), t3.prototype.getElementsByTagName = function(e4) {
            return m3.node_listOfElementsWithQualifiedName(e4, this);
          }, t3.prototype.getElementsByTagNameNS = function(e4, t4) {
            return m3.node_listOfElementsWithNamespace(e4, t4, this);
          }, t3.prototype.getElementsByClassName = function(e4) {
            return m3.node_listOfElementsWithClassNames(e4, this);
          }, t3.prototype.createElement = function(e4, t4) {
            if (!m3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            this._type === "html" && (e4 = e4.toLowerCase());
            var r2 = null;
            t4 !== void 0 && (r2 = p.isString(t4) ? t4 : t4.is);
            var n2 = this._type === "html" || this._contentType === "application/xhtml+xml" ? f.namespace.HTML : null;
            return m3.element_createAnElement(this, e4, n2, null, r2, true);
          }, t3.prototype.createElementNS = function(e4, t4, r2) {
            return m3.document_internalCreateElementNS(this, e4, t4, r2);
          }, t3.prototype.createDocumentFragment = function() {
            return m3.create_documentFragment(this);
          }, t3.prototype.createTextNode = function(e4) {
            return m3.create_text(this, e4);
          }, t3.prototype.createCDATASection = function(e4) {
            if (this._type === "html")
              throw new l.NotSupportedError();
            if (e4.indexOf("]]>") !== -1)
              throw new l.InvalidCharacterError();
            return m3.create_cdataSection(this, e4);
          }, t3.prototype.createComment = function(e4) {
            return m3.create_comment(this, e4);
          }, t3.prototype.createProcessingInstruction = function(e4, t4) {
            if (!m3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            if (t4.indexOf("?>") !== -1)
              throw new l.InvalidCharacterError();
            return m3.create_processingInstruction(this, e4, t4);
          }, t3.prototype.importNode = function(e4, t4) {
            if (t4 === void 0 && (t4 = false), h3.Guard.isDocumentNode(e4) || h3.Guard.isShadowRoot(e4))
              throw new l.NotSupportedError();
            return m3.node_clone(e4, this, t4);
          }, t3.prototype.adoptNode = function(e4) {
            if (h3.Guard.isDocumentNode(e4))
              throw new l.NotSupportedError();
            if (h3.Guard.isShadowRoot(e4))
              throw new l.HierarchyRequestError();
            return m3.document_adopt(e4, this), e4;
          }, t3.prototype.createAttribute = function(e4) {
            if (!m3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            return this._type === "html" && (e4 = e4.toLowerCase()), m3.create_attr(this, e4);
          }, t3.prototype.createAttributeNS = function(e4, t4) {
            var r2 = a3(m3.namespace_validateAndExtract(e4, t4), 3), n2 = r2[0], i3 = r2[1], o2 = r2[2], s4 = m3.create_attr(this, o2);
            return s4._namespace = n2, s4._namespacePrefix = i3, s4;
          }, t3.prototype.createEvent = function(e4) {
            return m3.event_createLegacyEvent(e4);
          }, t3.prototype.createRange = function() {
            var e4 = m3.create_range();
            return e4._start = [this, 0], e4._end = [this, 0], e4;
          }, t3.prototype.createNodeIterator = function(e4, t4, r2) {
            t4 === void 0 && (t4 = u2.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m3.create_nodeIterator(e4, e4, true);
            return n2._whatToShow = t4, n2._iteratorCollection = m3.create_nodeList(e4), p.isFunction(r2) ? (n2._filter = m3.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t3.prototype.createTreeWalker = function(e4, t4, r2) {
            t4 === void 0 && (t4 = u2.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m3.create_treeWalker(e4, e4);
            return n2._whatToShow = t4, p.isFunction(r2) ? (n2._filter = m3.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t3.prototype._getTheParent = function(e4) {
            return e4._type === "load" ? null : s3.dom.window;
          }, t3.prototype.getElementById = function(e4) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t3.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.prepend = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.append = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelector = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelectorAll = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3;
        }(c2.NodeImpl);
        t2.DocumentImpl = v, y3.idl_defineConst(v.prototype, "_nodeType", u2.NodeType.Document);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a3 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(2), u2 = r(34), l = r(9), c2 = r(7), h3 = r(0), p = r(12), f = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._children = /* @__PURE__ */ new Set(), t4._namespace = null, t4._namespacePrefix = null, t4._localName = "", t4._customElementState = "undefined", t4._customElementDefinition = null, t4._is = null, t4._shadowRoot = null, t4._attributeList = h3.create_namedNodeMap(t4), t4._attributeChangeSteps = [], t4._name = "", t4._assignedSlot = null, t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "tagName", { get: function() {
            return this._htmlUppercasedQualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "id", { get: function() {
            return h3.element_getAnAttributeValue(this, "id");
          }, set: function(e4) {
            h3.element_setAnAttributeValue(this, "id", e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "className", { get: function() {
            return h3.element_getAnAttributeValue(this, "class");
          }, set: function(e4) {
            h3.element_setAnAttributeValue(this, "class", e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "classList", { get: function() {
            var e4 = h3.element_getAnAttributeByName("class", this);
            return e4 === null && (e4 = h3.create_attr(this._nodeDocument, "class")), h3.create_domTokenList(this, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "slot", { get: function() {
            return h3.element_getAnAttributeValue(this, "slot");
          }, set: function(e4) {
            h3.element_setAnAttributeValue(this, "slot", e4);
          }, enumerable: true, configurable: true }), t3.prototype.hasAttributes = function() {
            return this._attributeList.length !== 0;
          }, Object.defineProperty(t3.prototype, "attributes", { get: function() {
            return this._attributeList;
          }, enumerable: true, configurable: true }), t3.prototype.getAttributeNames = function() {
            var e4, t4, r2 = [];
            try {
              for (var n2 = o(this._attributeList), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                var a4 = i3.value;
                r2.push(a4._qualifiedName);
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                i3 && !i3.done && (t4 = n2.return) && t4.call(n2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r2;
          }, t3.prototype.getAttribute = function(e4) {
            var t4 = h3.element_getAnAttributeByName(e4, this);
            return t4 ? t4._value : null;
          }, t3.prototype.getAttributeNS = function(e4, t4) {
            var r2 = h3.element_getAnAttributeByNamespaceAndLocalName(e4, t4, this);
            return r2 ? r2._value : null;
          }, t3.prototype.setAttribute = function(e4, t4) {
            if (!h3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i3 = this._attributeList[n2];
              if (i3._qualifiedName === e4) {
                r2 = i3;
                break;
              }
            }
            if (r2 === null)
              return (r2 = h3.create_attr(this._nodeDocument, e4))._value = t4, void h3.element_append(r2, this);
            h3.element_change(r2, this, t4);
          }, t3.prototype.setAttributeNS = function(e4, t4, r2) {
            var n2 = a3(h3.namespace_validateAndExtract(e4, t4), 3), i3 = n2[0], o2 = n2[1], s4 = n2[2];
            h3.element_setAnAttributeValue(this, s4, r2, o2, i3);
          }, t3.prototype.removeAttribute = function(e4) {
            h3.element_removeAnAttributeByName(e4, this);
          }, t3.prototype.removeAttributeNS = function(e4, t4) {
            h3.element_removeAnAttributeByNamespaceAndLocalName(e4, t4, this);
          }, t3.prototype.hasAttribute = function(e4) {
            this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toLowerCase());
            for (var t4 = 0; t4 < this._attributeList.length; t4++) {
              if (this._attributeList[t4]._qualifiedName === e4)
                return true;
            }
            return false;
          }, t3.prototype.toggleAttribute = function(e4, t4) {
            if (!h3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i3 = this._attributeList[n2];
              if (i3._qualifiedName === e4) {
                r2 = i3;
                break;
              }
            }
            return r2 === null ? (t4 === void 0 || t4 === true) && ((r2 = h3.create_attr(this._nodeDocument, e4))._value = "", h3.element_append(r2, this), true) : t4 !== void 0 && t4 !== false || (h3.element_removeAnAttributeByName(e4, this), false);
          }, t3.prototype.hasAttributeNS = function(e4, t4) {
            for (var r2 = e4 || null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i3 = this._attributeList[n2];
              if (i3._namespace === r2 && i3._localName === t4)
                return true;
            }
            return false;
          }, t3.prototype.getAttributeNode = function(e4) {
            return h3.element_getAnAttributeByName(e4, this);
          }, t3.prototype.getAttributeNodeNS = function(e4, t4) {
            return h3.element_getAnAttributeByNamespaceAndLocalName(e4, t4, this);
          }, t3.prototype.setAttributeNode = function(e4) {
            return h3.element_setAnAttribute(e4, this);
          }, t3.prototype.setAttributeNodeNS = function(e4) {
            return h3.element_setAnAttribute(e4, this);
          }, t3.prototype.removeAttributeNode = function(e4) {
            for (var t4 = false, r2 = 0; r2 < this._attributeList.length; r2++) {
              if (this._attributeList[r2] === e4) {
                t4 = true;
                break;
              }
            }
            if (!t4)
              throw new l.NotFoundError();
            return h3.element_remove(e4, this), e4;
          }, t3.prototype.attachShadow = function(e4) {
            if (this._namespace !== c2.namespace.HTML)
              throw new l.NotSupportedError();
            if (!h3.customElement_isValidCustomElementName(this._localName) && !h3.customElement_isValidShadowHostName(this._localName))
              throw new l.NotSupportedError();
            if (h3.customElement_isValidCustomElementName(this._localName) || this._is !== null) {
              var t4 = h3.customElement_lookUpACustomElementDefinition(this._nodeDocument, this._namespace, this._localName, this._is);
              if (t4 !== null && t4.disableShadow === true)
                throw new l.NotSupportedError();
            }
            if (this._shadowRoot !== null)
              throw new l.NotSupportedError();
            var r2 = h3.create_shadowRoot(this._nodeDocument, this);
            return r2._mode = e4.mode, this._shadowRoot = r2, r2;
          }, Object.defineProperty(t3.prototype, "shadowRoot", { get: function() {
            var e4 = this._shadowRoot;
            return e4 === null || e4.mode === "closed" ? null : e4;
          }, enumerable: true, configurable: true }), t3.prototype.closest = function(e4) {
            throw new l.NotImplementedError();
          }, t3.prototype.matches = function(e4) {
            throw new l.NotImplementedError();
          }, t3.prototype.webkitMatchesSelector = function(e4) {
            return this.matches(e4);
          }, t3.prototype.getElementsByTagName = function(e4) {
            return h3.node_listOfElementsWithQualifiedName(e4, this);
          }, t3.prototype.getElementsByTagNameNS = function(e4, t4) {
            return h3.node_listOfElementsWithNamespace(e4, t4, this);
          }, t3.prototype.getElementsByClassName = function(e4) {
            return h3.node_listOfElementsWithClassNames(e4, this);
          }, t3.prototype.insertAdjacentElement = function(e4, t4) {
            return h3.element_insertAdjacent(this, e4, t4);
          }, t3.prototype.insertAdjacentText = function(e4, t4) {
            var r2 = h3.create_text(this._nodeDocument, t4);
            h3.element_insertAdjacent(this, e4, r2);
          }, Object.defineProperty(t3.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_htmlUppercasedQualifiedName", { get: function() {
            var e4 = this._qualifiedName;
            return this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toUpperCase()), e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.prepend = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.append = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelector = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelectorAll = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, Object.defineProperty(t3.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.before = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.after = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.replaceWith = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, Object.defineProperty(t3.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2, n2, i3) {
            n2 === void 0 && (n2 = null), i3 === void 0 && (i3 = null);
            var o2 = new t3();
            return o2._localName = r2, o2._namespace = n2, o2._namespacePrefix = i3, o2._nodeDocument = e4, o2;
          }, t3;
        }(u2.NodeImpl);
        t2.ElementImpl = f, p.idl_defineConst(f.prototype, "_nodeType", s3.NodeType.Element);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(34), s3 = r(12), u2 = function(e3) {
          function t3(t4) {
            t4 === void 0 && (t4 = null);
            var r2 = e3.call(this) || this;
            return r2._children = /* @__PURE__ */ new Set(), r2._host = t4, r2;
          }
          return i2(t3, e3), t3.prototype.getElementById = function(e4) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t3.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.prepend = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.append = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelector = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelectorAll = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(a3.NodeImpl);
        t2.DocumentFragmentImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.DocumentFragment);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(2), s3 = r(71), u2 = r(0), l = r(12), c2 = function(e3) {
          function t3(t4) {
            t4 === void 0 && (t4 = "");
            var r2 = e3.call(this, t4) || this;
            return r2._name = "", r2._assignedSlot = null, r2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "wholeText", { get: function() {
            var e4, t4, r2 = "";
            try {
              for (var n2 = o(u2.text_contiguousTextNodes(this, true)), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                r2 += i3.value._data;
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                i3 && !i3.done && (t4 = n2.return) && t4.call(n2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), t3.prototype.splitText = function(e4) {
            return u2.text_split(this, e4);
          }, Object.defineProperty(t3.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(s3.CharacterDataImpl);
        t2.TextImpl = c2, l.idl_defineConst(c2.prototype, "_nodeType", a3.NodeType.Text);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "_startNode", { get: function() {
            return this._start[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_startOffset", { get: function() {
            return this._start[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_endNode", { get: function() {
            return this._end[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_endOffset", { get: function() {
            return this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_collapsed", { get: function() {
            return this._start[0] === this._end[0] && this._start[1] === this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "startContainer", { get: function() {
            return this._startNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "startOffset", { get: function() {
            return this._startOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "endContainer", { get: function() {
            return this._endNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "endOffset", { get: function() {
            return this._endOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "collapsed", { get: function() {
            return this._collapsed;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.AbstractRangeImpl = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = function() {
          function e3(e4) {
            this._activeFlag = false, this._root = e4, this._whatToShow = n.WhatToShow.All, this._filter = null;
          }
          return Object.defineProperty(e3.prototype, "root", { get: function() {
            return this._root;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "whatToShow", { get: function() {
            return this._whatToShow;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "filter", { get: function() {
            return this._filter;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.TraverserImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(0), o = r(12), a3 = function() {
          function e3(e4, t3) {
            this._target = null, this._relatedTarget = null, this._touchTargetList = [], this._path = [], this._currentTarget = null, this._eventPhase = n.EventPhase.None, this._stopPropagationFlag = false, this._stopImmediatePropagationFlag = false, this._canceledFlag = false, this._inPassiveListenerFlag = false, this._composedFlag = false, this._initializedFlag = false, this._dispatchFlag = false, this._isTrusted = false, this._bubbles = false, this._cancelable = false, this._type = e4, t3 && (this._bubbles = t3.bubbles || false, this._cancelable = t3.cancelable || false, this._composedFlag = t3.composed || false), this._initializedFlag = true, this._timeStamp = new Date().getTime();
          }
          return Object.defineProperty(e3.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "srcElement", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "currentTarget", { get: function() {
            return this._currentTarget;
          }, enumerable: true, configurable: true }), e3.prototype.composedPath = function() {
            var e4 = [], t3 = this._path;
            if (t3.length === 0)
              return e4;
            var r2 = this._currentTarget;
            if (r2 === null)
              throw new Error("Event currentTarget is null.");
            e4.push(r2);
            for (var n2 = 0, i3 = 0, o2 = t3.length - 1; o2 >= 0; ) {
              if (t3[o2].rootOfClosedTree && i3++, t3[o2].invocationTarget === r2) {
                n2 = o2;
                break;
              }
              t3[o2].slotInClosedTree && i3--, o2--;
            }
            var a4 = i3, s3 = i3;
            for (o2 = n2 - 1; o2 >= 0; )
              t3[o2].rootOfClosedTree && a4++, a4 <= s3 && e4.unshift(t3[o2].invocationTarget), t3[o2].slotInClosedTree && --a4 < s3 && (s3 = a4), o2--;
            for (a4 = i3, s3 = i3, o2 = n2 + 1; o2 < t3.length; )
              t3[o2].slotInClosedTree && a4++, a4 <= s3 && e4.push(t3[o2].invocationTarget), t3[o2].rootOfClosedTree && --a4 < s3 && (s3 = a4), o2++;
            return e4;
          }, Object.defineProperty(e3.prototype, "eventPhase", { get: function() {
            return this._eventPhase;
          }, enumerable: true, configurable: true }), e3.prototype.stopPropagation = function() {
            this._stopPropagationFlag = true;
          }, Object.defineProperty(e3.prototype, "cancelBubble", { get: function() {
            return this._stopPropagationFlag;
          }, set: function(e4) {
            e4 && this.stopPropagation();
          }, enumerable: true, configurable: true }), e3.prototype.stopImmediatePropagation = function() {
            this._stopPropagationFlag = true, this._stopImmediatePropagationFlag = true;
          }, Object.defineProperty(e3.prototype, "bubbles", { get: function() {
            return this._bubbles;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "cancelable", { get: function() {
            return this._cancelable;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "returnValue", { get: function() {
            return !this._canceledFlag;
          }, set: function(e4) {
            e4 || i2.event_setTheCanceledFlag(this);
          }, enumerable: true, configurable: true }), e3.prototype.preventDefault = function() {
            i2.event_setTheCanceledFlag(this);
          }, Object.defineProperty(e3.prototype, "defaultPrevented", { get: function() {
            return this._canceledFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "composed", { get: function() {
            return this._composedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "isTrusted", { get: function() {
            return this._isTrusted;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "timeStamp", { get: function() {
            return this._timeStamp;
          }, enumerable: true, configurable: true }), e3.prototype.initEvent = function(e4, t3, r2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), this._dispatchFlag || i2.event_initialize(this, e4, t3, r2);
          }, e3.NONE = 0, e3.CAPTURING_PHASE = 1, e3.AT_TARGET = 2, e3.BUBBLING_PHASE = 3, e3;
        }();
        t2.EventImpl = a3, o.idl_defineConst(a3.prototype, "NONE", 0), o.idl_defineConst(a3.prototype, "CAPTURING_PHASE", 1), o.idl_defineConst(a3.prototype, "AT_TARGET", 2), o.idl_defineConst(a3.prototype, "BUBBLING_PHASE", 3);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(9);
        t2.traversal_filter = function(e3, t3) {
          if (e3._activeFlag)
            throw new i2.InvalidStateError();
          var r2 = 1 << t3._nodeType - 1;
          if ((e3.whatToShow & r2) == 0)
            return n.FilterResult.Skip;
          if (!e3.filter)
            return n.FilterResult.Accept;
          e3._activeFlag = true;
          var o = n.FilterResult.Reject;
          try {
            o = e3.filter.acceptNode(t3);
          } catch (t4) {
            throw e3._activeFlag = false, t4;
          }
          return e3._activeFlag = false, o;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(6), a3 = r(3), s3 = r(1), u2 = r(99), l = r(73), c2 = r(17), h3 = r(173), p = r(30), f = r(52), d3 = r(37);
        t2.document_elementInterface = function(e3, t3) {
          return u2.ElementImpl;
        }, t2.document_internalCreateElementNS = function(e3, t3, r2, i3) {
          var o2 = n(h3.namespace_validateAndExtract(t3, r2), 3), a4 = o2[0], u3 = o2[1], l2 = o2[2], c3 = null;
          return i3 !== void 0 && (c3 = s3.isString(i3) ? i3 : i3.is), f.element_createAnElement(e3, l2, a4, u3, c3, true);
        }, t2.document_adopt = function(e3, t3) {
          var r2, n2;
          if (e3._nodeDocument !== t3 || e3._parent !== null) {
            var s4 = e3._nodeDocument;
            if (e3._parent && d3.mutation_remove(e3, e3._parent), t3 !== s4)
              for (var u3 = c2.tree_getFirstDescendantNode(e3, true, true); u3 !== null; ) {
                if (u3._nodeDocument = t3, a3.Guard.isElementNode(u3))
                  try {
                    for (var h4 = (r2 = void 0, i2(u3._attributeList._asArray())), f2 = h4.next(); !f2.done; f2 = h4.next()) {
                      f2.value._nodeDocument = t3;
                    }
                  } catch (e4) {
                    r2 = { error: e4 };
                  } finally {
                    try {
                      f2 && !f2.done && (n2 = h4.return) && n2.call(h4);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                o.dom.features.customElements && a3.Guard.isElementNode(u3) && u3._customElementState === "custom" && l.customElement_enqueueACustomElementCallbackReaction(u3, "adoptedCallback", [s4, t3]), o.dom.features.steps && p.dom_runAdoptingSteps(u3, s4), u3 = c2.tree_getNextDescendantNode(e3, u3, true, true);
              }
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(9), s3 = r(17), u2 = r(51), l = r(30);
        t2.characterData_replaceData = function(e3, t3, r2, c2) {
          var h3, p, f = s3.tree_nodeLength(e3);
          if (t3 > f)
            throw new a3.IndexSizeError("Offset exceeds character data length. Offset: " + t3 + ", Length: " + f + ", Node is " + e3.nodeName + ".");
          t3 + r2 > f && (r2 = f - t3), i2.dom.features.mutationObservers && u2.observer_queueMutationRecord("characterData", e3, null, null, e3._data, [], [], null, null);
          var d3 = e3._data.substring(0, t3) + c2 + e3._data.substring(t3 + r2);
          e3._data = d3;
          try {
            for (var m3 = n(i2.dom.rangeList), y3 = m3.next(); !y3.done; y3 = m3.next()) {
              var v = y3.value;
              v._start[0] === e3 && v._start[1] > t3 && v._start[1] <= t3 + r2 && (v._start[1] = t3), v._end[0] === e3 && v._end[1] > t3 && v._end[1] <= t3 + r2 && (v._end[1] = t3), v._start[0] === e3 && v._start[1] > t3 + r2 && (v._start[1] += c2.length - r2), v._end[0] === e3 && v._end[1] > t3 + r2 && (v._end[1] += c2.length - r2);
            }
          } catch (e4) {
            h3 = { error: e4 };
          } finally {
            try {
              y3 && !y3.done && (p = m3.return) && p.call(m3);
            } finally {
              if (h3)
                throw h3.error;
            }
          }
          i2.dom.features.steps && o.Guard.isTextNode(e3) && e3._parent !== null && l.dom_runChildTextContentChangeSteps(e3._parent);
        }, t2.characterData_substringData = function(e3, t3, r2) {
          var n2 = s3.tree_nodeLength(e3);
          if (t3 > n2)
            throw new a3.IndexSizeError("Offset exceeds character data length. Offset: " + t3 + ", Length: " + n2 + ", Node is " + e3.nodeName + ".");
          return t3 + r2 > n2 ? e3._data.substr(t3) : e3._data.substr(t3, r2);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(n(arguments[t3]));
          return e3;
        }, o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(7);
        function s3(e3) {
          var t3 = a3.string.splitAStringOnASCIIWhitespace(e3);
          return new Set(t3);
        }
        function u2(e3) {
          return i2(e3).join(" ");
        }
        t2.orderedSet_parse = s3, t2.orderedSet_serialize = u2, t2.orderedSet_sanitize = function(e3) {
          return u2(s3(e3));
        }, t2.orderedSet_contains = function(e3, t3, r2) {
          var n2, i3, a4, s4;
          try {
            for (var u3 = o(t3), l = u3.next(); !l.done; l = u3.next()) {
              var c2 = l.value, h3 = false;
              try {
                for (var p = (a4 = void 0, o(e3)), f = p.next(); !f.done; f = p.next()) {
                  var d3 = f.value;
                  if (r2) {
                    if (d3 === c2) {
                      h3 = true;
                      break;
                    }
                  } else if (d3.toUpperCase() === c2.toUpperCase()) {
                    h3 = true;
                    break;
                  }
                }
              } catch (e4) {
                a4 = { error: e4 };
              } finally {
                try {
                  f && !f.done && (s4 = p.return) && s4.call(p);
                } finally {
                  if (a4)
                    throw a4.error;
                }
              }
              if (!h3)
                return false;
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (i3 = u3.return) && i3.call(u3);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          return true;
        };
      }, function(e2, t2, r) {
        "use strict";
        r(179), Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(262), i2 = r(110), o = r(1);
        i2.dom.setFeatures(false), t2.createDocument = function() {
          var e3 = new n.DOMImplementation().createDocument(null, "root", null);
          return e3.documentElement && e3.removeChild(e3.documentElement), e3;
        }, t2.sanitizeInput = function(e3, t3) {
          if (e3 == null)
            return e3;
          if (t3 === void 0)
            return e3 + "";
          var r2 = "";
          e3 += "";
          for (var n2 = 0; n2 < e3.length; n2++) {
            var i3 = e3.charCodeAt(n2);
            if (i3 === 9 || i3 === 10 || i3 === 13 || i3 >= 32 && i3 <= 55295 || i3 >= 57344 && i3 <= 65533)
              r2 += e3.charAt(n2);
            else if (i3 >= 55296 && i3 <= 56319 && n2 < e3.length - 1) {
              var a3 = e3.charCodeAt(n2 + 1);
              a3 >= 56320 && a3 <= 57343 ? (i3 = 1024 * (i3 - 55296) + a3 - 56320 + 65536, r2 += String.fromCodePoint(i3), n2++) : r2 += o.isString(t3) ? t3 : t3(e3.charAt(n2), n2, e3);
            } else
              r2 += o.isString(t3) ? t3 : t3(e3.charAt(n2), n2, e3);
          }
          return r2;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(1), i2 = r(153);
        t2.AbortController = i2.AbortControllerImpl;
        var o = r(154);
        t2.AbortSignal = o.AbortSignalImpl;
        var a3 = r(102);
        t2.AbstractRange = a3.AbstractRangeImpl;
        var s3 = r(157);
        t2.Attr = s3.AttrImpl;
        var u2 = r(158);
        t2.CDATASection = u2.CDATASectionImpl;
        var l = r(71);
        t2.CharacterData = l.CharacterDataImpl;
        var c2 = r(263), h3 = r(159);
        t2.Comment = h3.CommentImpl;
        var p = r(171);
        t2.CustomEvent = p.CustomEventImpl;
        var f = r(100);
        t2.DocumentFragment = f.DocumentFragmentImpl;
        var d3 = r(98);
        t2.Document = d3.DocumentImpl;
        var m3 = r(264), y3 = r(155);
        t2.DocumentType = y3.DocumentTypeImpl;
        var v = r(6);
        t2.dom = v.dom;
        var _ = r(148);
        t2.DOMImplementation = _.DOMImplementationImpl;
        var g = r(170);
        t2.DOMTokenList = g.DOMTokenListImpl;
        var b2 = r(99);
        t2.Element = b2.ElementImpl;
        var x2 = r(104);
        t2.Event = x2.EventImpl;
        var w2 = r(70);
        t2.EventTarget = w2.EventTargetImpl;
        var E2 = r(161);
        t2.HTMLCollection = E2.HTMLCollectionImpl;
        var D2 = r(265);
        t2.MutationObserver = D2.MutationObserverImpl;
        var S3 = r(169);
        t2.MutationRecord = S3.MutationRecordImpl;
        var C = r(164);
        t2.NamedNodeMap = C.NamedNodeMapImpl;
        var A = r(168);
        t2.NodeFilter = A.NodeFilterImpl;
        var N = r(34);
        t2.Node = N.NodeImpl;
        var T2 = r(166);
        t2.NodeIterator = T2.NodeIteratorImpl;
        var O2 = r(162);
        t2.NodeList = O2.NodeListImpl;
        var F = r(163);
        t2.NodeListStatic = F.NodeListStaticImpl;
        var k2 = r(266), P = r(267), I2 = r(268), L2 = r(160);
        t2.ProcessingInstruction = L2.ProcessingInstructionImpl;
        var M3 = r(165);
        t2.Range = M3.RangeImpl;
        var B2 = r(156);
        t2.ShadowRoot = B2.ShadowRootImpl;
        var j = r(269), R2 = r(270);
        t2.StaticRange = R2.StaticRangeImpl;
        var z2 = r(101);
        t2.Text = z2.TextImpl;
        var U = r(103);
        t2.Traverser = U.TraverserImpl;
        var G2 = r(167);
        t2.TreeWalker = G2.TreeWalkerImpl;
        var X2 = r(149);
        t2.Window = X2.WindowImpl;
        var q2 = r(151);
        t2.XMLDocument = q2.XMLDocumentImpl, n.applyMixin(b2.ElementImpl, c2.ChildNodeImpl), n.applyMixin(l.CharacterDataImpl, c2.ChildNodeImpl), n.applyMixin(y3.DocumentTypeImpl, c2.ChildNodeImpl), n.applyMixin(d3.DocumentImpl, m3.DocumentOrShadowRootImpl), n.applyMixin(B2.ShadowRootImpl, m3.DocumentOrShadowRootImpl), n.applyMixin(b2.ElementImpl, k2.NonDocumentTypeChildNodeImpl), n.applyMixin(l.CharacterDataImpl, k2.NonDocumentTypeChildNodeImpl), n.applyMixin(d3.DocumentImpl, P.NonElementParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, P.NonElementParentNodeImpl), n.applyMixin(d3.DocumentImpl, I2.ParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, I2.ParentNodeImpl), n.applyMixin(b2.ElementImpl, I2.ParentNodeImpl), n.applyMixin(z2.TextImpl, j.SlotableImpl), n.applyMixin(b2.ElementImpl, j.SlotableImpl);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), function(e3) {
          e3[e3.EOF = 0] = "EOF", e3[e3.Declaration = 1] = "Declaration", e3[e3.DocType = 2] = "DocType", e3[e3.Element = 3] = "Element", e3[e3.Text = 4] = "Text", e3[e3.CDATA = 5] = "CDATA", e3[e3.PI = 6] = "PI", e3[e3.Comment = 7] = "Comment", e3[e3.ClosingTag = 8] = "ClosingTag";
        }(t2.TokenType || (t2.TokenType = {}));
      }, function(e2, t2, r) {
        "use strict";
        r(64), r(20), r(66);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(1), a3 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            var r2 = this, n2 = this._builderOptions, i3 = null;
            return o.isFunction(t4) ? i3 = this.parse(e4, t4.apply(this)) : o.isArray(t4) || o.isSet(t4) ? o.forEachArray(t4, function(t5) {
              return i3 = r2.parse(e4, t5);
            }, this) : o.isMap(t4) || o.isObject(t4) ? o.forEachObject(t4, function(t5, a4) {
              if (o.isFunction(a4) && (a4 = a4.apply(r2)), n2.ignoreConverters || t5.indexOf(n2.convert.att) !== 0)
                if (n2.ignoreConverters || t5.indexOf(n2.convert.text) !== 0)
                  if (n2.ignoreConverters || t5.indexOf(n2.convert.cdata) !== 0)
                    if (n2.ignoreConverters || t5.indexOf(n2.convert.comment) !== 0)
                      if (n2.ignoreConverters || t5.indexOf(n2.convert.ins) !== 0)
                        if ((o.isArray(a4) || o.isSet(a4)) && o.isEmpty(a4))
                          ;
                        else if ((o.isMap(a4) || o.isObject(a4)) && o.isEmpty(a4))
                          i3 = r2.element(e4, void 0, r2.sanitize(t5)) || i3;
                        else if (n2.keepNullNodes || a4 != null)
                          if (o.isArray(a4) || o.isSet(a4))
                            o.forEachArray(a4, function(n3) {
                              var o2 = {};
                              o2[t5] = n3, i3 = r2.parse(e4, o2);
                            }, r2);
                          else if (o.isMap(a4) || o.isObject(a4)) {
                            (s3 = r2.element(e4, void 0, r2.sanitize(t5))) && (i3 = s3, r2.parse(s3, a4));
                          } else if (a4 != null && a4 !== "") {
                            var s3;
                            (s3 = r2.element(e4, void 0, r2.sanitize(t5))) && (i3 = s3, r2.text(s3, r2._decodeText(r2.sanitize(a4))));
                          } else
                            i3 = r2.element(e4, void 0, r2.sanitize(t5)) || i3;
                        else
                          ;
                      else if (o.isString(a4)) {
                        var u2 = a4.indexOf(" "), l = u2 === -1 ? a4 : a4.substr(0, u2), c2 = u2 === -1 ? "" : a4.substr(u2 + 1);
                        i3 = r2.instruction(e4, r2.sanitize(l), r2.sanitize(c2)) || i3;
                      } else
                        o.isArray(a4) || o.isSet(a4) ? o.forEachArray(a4, function(t6) {
                          var n3 = t6.indexOf(" "), o2 = n3 === -1 ? t6 : t6.substr(0, n3), a5 = n3 === -1 ? "" : t6.substr(n3 + 1);
                          i3 = r2.instruction(e4, r2.sanitize(o2), r2.sanitize(a5)) || i3;
                        }, r2) : o.forEachObject(a4, function(t6, n3) {
                          return i3 = r2.instruction(e4, r2.sanitize(t6), r2.sanitize(n3)) || i3;
                        }, r2);
                    else
                      o.isArray(a4) || o.isSet(a4) ? o.forEachArray(a4, function(t6) {
                        return i3 = r2.comment(e4, r2.sanitize(t6)) || i3;
                      }, r2) : i3 = r2.comment(e4, r2.sanitize(a4)) || i3;
                  else
                    o.isArray(a4) || o.isSet(a4) ? o.forEachArray(a4, function(t6) {
                      return i3 = r2.cdata(e4, r2.sanitize(t6)) || i3;
                    }, r2) : i3 = r2.cdata(e4, r2.sanitize(a4)) || i3;
                else
                  i3 = o.isMap(a4) || o.isObject(a4) ? r2.parse(e4, a4) : r2.text(e4, r2._decodeText(r2.sanitize(a4))) || i3;
              else if (t5 === n2.convert.att) {
                if (o.isArray(a4) || o.isSet(a4))
                  throw new Error("Invalid attribute: " + a4.toString() + ". " + e4._debugInfo());
                o.forEachObject(a4, function(t6, n3) {
                  i3 = r2.attribute(e4, void 0, r2.sanitize(t6), r2._decodeAttributeValue(r2.sanitize(n3))) || i3;
                });
              } else
                i3 = r2.attribute(e4, void 0, r2.sanitize(t5.substr(n2.convert.att.length)), r2._decodeAttributeValue(r2.sanitize(a4))) || i3;
            }, this) : (n2.keepNullNodes || t4 != null) && (i3 = this.text(e4, this._decodeText(this.sanitize(t4))) || i3), i3 || e4;
          }, t3;
        }(r(75).BaseReader);
        t2.ObjectReader = a3;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ explicit: [r(286), r(287), r(288)] });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function(e3) {
          this.level = 0, this._builderOptions = e3, this._writerOptions = e3;
        };
        t2.BaseCBWriter = n;
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(8), o = r(116);
        e2.exports = !n && !i2(function() {
          return Object.defineProperty(o("div"), "a", { get: function() {
            return 7;
          } }).a != 7;
        });
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(13), o = n.document, a3 = i2(o) && i2(o.createElement);
        e2.exports = function(e3) {
          return a3 ? o.createElement(e3) : {};
        };
      }, function(e2, t2, r) {
        var n = r(118), i2 = Function.toString;
        typeof n.inspectSource != "function" && (n.inspectSource = function(e3) {
          return i2.call(e3);
        }), e2.exports = n.inspectSource;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(80), o = n["__core-js_shared__"] || i2("__core-js_shared__", {});
        e2.exports = o;
      }, function(e2, t2, r) {
        var n = r(14), i2 = r(187), o = r(55), a3 = r(15);
        e2.exports = function(e3, t3) {
          for (var r2 = i2(t3), s3 = a3.f, u2 = o.f, l = 0; l < r2.length; l++) {
            var c2 = r2[l];
            n(e3, c2) || s3(e3, c2, u2(t3, c2));
          }
        };
      }, function(e2, t2, r) {
        var n = r(11);
        e2.exports = n;
      }, function(e2, t2, r) {
        var n = r(14), i2 = r(24), o = r(122).indexOf, a3 = r(45);
        e2.exports = function(e3, t3) {
          var r2, s3 = i2(e3), u2 = 0, l = [];
          for (r2 in s3)
            !n(a3, r2) && n(s3, r2) && l.push(r2);
          for (; t3.length > u2; )
            n(s3, r2 = t3[u2++]) && (~o(l, r2) || l.push(r2));
          return l;
        };
      }, function(e2, t2, r) {
        var n = r(24), i2 = r(26), o = r(83), a3 = function(e3) {
          return function(t3, r2, a4) {
            var s3, u2 = n(t3), l = i2(u2.length), c2 = o(a4, l);
            if (e3 && r2 != r2) {
              for (; l > c2; )
                if ((s3 = u2[c2++]) != s3)
                  return true;
            } else
              for (; l > c2; c2++)
                if ((e3 || c2 in u2) && u2[c2] === r2)
                  return e3 || c2 || 0;
            return !e3 && -1;
          };
        };
        e2.exports = { includes: a3(true), indexOf: a3(false) };
      }, function(e2, t2, r) {
        var n = r(8), i2 = /#|\.prototype\./, o = function(e3, t3) {
          var r2 = s3[a3(e3)];
          return r2 == l || r2 != u2 && (typeof t3 == "function" ? n(t3) : !!t3);
        }, a3 = o.normalize = function(e3) {
          return String(e3).replace(i2, ".").toLowerCase();
        }, s3 = o.data = {}, u2 = o.NATIVE = "N", l = o.POLYFILL = "P";
        e2.exports = o;
      }, function(e2, t2, r) {
        var n = r(86);
        e2.exports = n && !Symbol.sham && typeof Symbol.iterator == "symbol";
      }, function(e2, t2, r) {
        var n = r(5);
        t2.f = n;
      }, function(e2, t2, r) {
        var n = r(120), i2 = r(14), o = r(125), a3 = r(15).f;
        e2.exports = function(e3) {
          var t3 = n.Symbol || (n.Symbol = {});
          i2(t3, e3) || a3(t3, e3, { value: o.f(e3) });
        };
      }, function(e2, t2) {
        e2.exports = function(e3) {
          if (typeof e3 != "function")
            throw TypeError(String(e3) + " is not a function");
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(13), i2 = r(59), o = r(5)("species");
        e2.exports = function(e3, t3) {
          var r2;
          return i2(e3) && (typeof (r2 = e3.constructor) != "function" || r2 !== Array && !i2(r2.prototype) ? n(r2) && (r2 = r2[o]) === null && (r2 = void 0) : r2 = void 0), new (r2 === void 0 ? Array : r2)(t3 === 0 ? 0 : t3);
        };
      }, function(e2, t2, r) {
        var n, i2, o = r(11), a3 = r(193), s3 = o.process, u2 = s3 && s3.versions, l = u2 && u2.v8;
        l ? i2 = (n = l.split("."))[0] + n[1] : a3 && (!(n = a3.match(/Edge\/(\d+)/)) || n[1] >= 74) && (n = a3.match(/Chrome\/(\d+)/)) && (i2 = n[1]), e2.exports = i2 && +i2;
      }, function(e2, t2, r) {
        var n = r(5), i2 = r(60), o = r(15), a3 = n("unscopables"), s3 = Array.prototype;
        s3[a3] == null && o.f(s3, a3, { configurable: true, value: i2(null) }), e2.exports = function(e3) {
          s3[a3][e3] = true;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n, i2, o, a3 = r(132), s3 = r(21), u2 = r(14), l = r(5), c2 = r(44), h3 = l("iterator"), p = false;
        [].keys && ("next" in (o = [].keys()) ? (i2 = a3(a3(o))) !== Object.prototype && (n = i2) : p = true), n == null && (n = {}), c2 || u2(n, h3) || s3(n, h3, function() {
          return this;
        }), e2.exports = { IteratorPrototype: n, BUGGY_SAFARI_ITERATORS: p };
      }, function(e2, t2, r) {
        var n = r(14), i2 = r(27), o = r(57), a3 = r(196), s3 = o("IE_PROTO"), u2 = Object.prototype;
        e2.exports = a3 ? Object.getPrototypeOf : function(e3) {
          return e3 = i2(e3), n(e3, s3) ? e3[s3] : typeof e3.constructor == "function" && e3 instanceof e3.constructor ? e3.constructor.prototype : e3 instanceof Object ? u2 : null;
        };
      }, function(e2, t2, r) {
        var n = r(18), i2 = r(197);
        e2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var e3, t3 = false, r2 = {};
          try {
            (e3 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r2, []), t3 = r2 instanceof Array;
          } catch (e4) {
          }
          return function(r3, o) {
            return n(r3), i2(o), t3 ? e3.call(r3, o) : r3.__proto__ = o, r3;
          };
        }() : void 0);
      }, function(e2, t2, r) {
        "use strict";
        var n = r(56), i2 = r(15), o = r(40);
        e2.exports = function(e3, t3, r2) {
          var a3 = n(t3);
          a3 in e3 ? i2.f(e3, a3, o(0, r2)) : e3[a3] = r2;
        };
      }, function(e2, t2, r) {
        var n = r(90), i2 = r(42), o = r(5)("toStringTag"), a3 = i2(function() {
          return arguments;
        }()) == "Arguments";
        e2.exports = n ? i2 : function(e3) {
          var t3, r2, n2;
          return e3 === void 0 ? "Undefined" : e3 === null ? "Null" : typeof (r2 = function(e4, t4) {
            try {
              return e4[t4];
            } catch (e5) {
            }
          }(t3 = Object(e3), o)) == "string" ? r2 : a3 ? i2(t3) : (n2 = i2(t3)) == "Object" && typeof t3.callee == "function" ? "Arguments" : n2;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(18);
        e2.exports = function() {
          var e3 = n(this), t3 = "";
          return e3.global && (t3 += "g"), e3.ignoreCase && (t3 += "i"), e3.multiline && (t3 += "m"), e3.dotAll && (t3 += "s"), e3.unicode && (t3 += "u"), e3.sticky && (t3 += "y"), t3;
        };
      }, function(e2, t2, r) {
        var n = r(47), i2 = r(35), o = function(e3) {
          return function(t3, r2) {
            var o2, a3, s3 = String(i2(t3)), u2 = n(r2), l = s3.length;
            return u2 < 0 || u2 >= l ? e3 ? "" : void 0 : (o2 = s3.charCodeAt(u2)) < 55296 || o2 > 56319 || u2 + 1 === l || (a3 = s3.charCodeAt(u2 + 1)) < 56320 || a3 > 57343 ? e3 ? s3.charAt(u2) : o2 : e3 ? s3.slice(u2, u2 + 2) : a3 - 56320 + (o2 - 55296 << 10) + 65536;
          };
        };
        e2.exports = { codeAt: o(false), charAt: o(true) };
      }, function(e2, t2, r) {
        var n = r(4), i2 = r(27), o = r(61);
        n({ target: "Object", stat: true, forced: r(8)(function() {
          o(1);
        }) }, { keys: function(e3) {
          return o(i2(e3));
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(11), o = r(123), a3 = r(25), s3 = r(140), u2 = r(141), l = r(142), c2 = r(13), h3 = r(8), p = r(208), f = r(62), d3 = r(209);
        e2.exports = function(e3, t3, r2) {
          var m3 = e3.indexOf("Map") !== -1, y3 = e3.indexOf("Weak") !== -1, v = m3 ? "set" : "add", _ = i2[e3], g = _ && _.prototype, b2 = _, x2 = {}, w2 = function(e4) {
            var t4 = g[e4];
            a3(g, e4, e4 == "add" ? function(e5) {
              return t4.call(this, e5 === 0 ? 0 : e5), this;
            } : e4 == "delete" ? function(e5) {
              return !(y3 && !c2(e5)) && t4.call(this, e5 === 0 ? 0 : e5);
            } : e4 == "get" ? function(e5) {
              return y3 && !c2(e5) ? void 0 : t4.call(this, e5 === 0 ? 0 : e5);
            } : e4 == "has" ? function(e5) {
              return !(y3 && !c2(e5)) && t4.call(this, e5 === 0 ? 0 : e5);
            } : function(e5, r3) {
              return t4.call(this, e5 === 0 ? 0 : e5, r3), this;
            });
          };
          if (o(e3, typeof _ != "function" || !(y3 || g.forEach && !h3(function() {
            new _().entries().next();
          }))))
            b2 = r2.getConstructor(t3, e3, m3, v), s3.REQUIRED = true;
          else if (o(e3, true)) {
            var E2 = new b2(), D2 = E2[v](y3 ? {} : -0, 1) != E2, S3 = h3(function() {
              E2.has(1);
            }), C = p(function(e4) {
              new _(e4);
            }), A = !y3 && h3(function() {
              for (var e4 = new _(), t4 = 5; t4--; )
                e4[v](t4, t4);
              return !e4.has(-0);
            });
            C || ((b2 = t3(function(t4, r3) {
              l(t4, b2, e3);
              var n2 = d3(new _(), t4, b2);
              return r3 != null && u2(r3, n2[v], n2, m3), n2;
            })).prototype = g, g.constructor = b2), (S3 || A) && (w2("delete"), w2("has"), m3 && w2("get")), (A || D2) && w2(v), y3 && g.clear && delete g.clear;
          }
          return x2[e3] = b2, n({ global: true, forced: b2 != _ }, x2), f(b2, e3), y3 || r2.setStrong(b2, e3, m3), b2;
        };
      }, function(e2, t2, r) {
        var n = r(45), i2 = r(13), o = r(14), a3 = r(15).f, s3 = r(58), u2 = r(204), l = s3("meta"), c2 = 0, h3 = Object.isExtensible || function() {
          return true;
        }, p = function(e3) {
          a3(e3, l, { value: { objectID: "O" + ++c2, weakData: {} } });
        }, f = e2.exports = { REQUIRED: false, fastKey: function(e3, t3) {
          if (!i2(e3))
            return typeof e3 == "symbol" ? e3 : (typeof e3 == "string" ? "S" : "P") + e3;
          if (!o(e3, l)) {
            if (!h3(e3))
              return "F";
            if (!t3)
              return "E";
            p(e3);
          }
          return e3[l].objectID;
        }, getWeakData: function(e3, t3) {
          if (!o(e3, l)) {
            if (!h3(e3))
              return true;
            if (!t3)
              return false;
            p(e3);
          }
          return e3[l].weakData;
        }, onFreeze: function(e3) {
          return u2 && f.REQUIRED && h3(e3) && !o(e3, l) && p(e3), e3;
        } };
        n[l] = true;
      }, function(e2, t2, r) {
        var n = r(18), i2 = r(205), o = r(26), a3 = r(87), s3 = r(206), u2 = r(207), l = function(e3, t3) {
          this.stopped = e3, this.result = t3;
        };
        (e2.exports = function(e3, t3, r2, c2, h3) {
          var p, f, d3, m3, y3, v, _, g = a3(t3, r2, c2 ? 2 : 1);
          if (h3)
            p = e3;
          else {
            if (typeof (f = s3(e3)) != "function")
              throw TypeError("Target is not iterable");
            if (i2(f)) {
              for (d3 = 0, m3 = o(e3.length); m3 > d3; d3++)
                if ((y3 = c2 ? g(n(_ = e3[d3])[0], _[1]) : g(e3[d3])) && y3 instanceof l)
                  return y3;
              return new l(false);
            }
            p = f.call(e3);
          }
          for (v = p.next; !(_ = v.call(p)).done; )
            if (typeof (y3 = u2(p, g, _.value, c2)) == "object" && y3 && y3 instanceof l)
              return y3;
          return new l(false);
        }).stop = function(e3) {
          return new l(true, e3);
        };
      }, function(e2, t2) {
        e2.exports = function(e3, t3, r) {
          if (!(e3 instanceof t3))
            throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(15).f, i2 = r(60), o = r(210), a3 = r(87), s3 = r(142), u2 = r(141), l = r(88), c2 = r(211), h3 = r(16), p = r(140).fastKey, f = r(43), d3 = f.set, m3 = f.getterFor;
        e2.exports = { getConstructor: function(e3, t3, r2, l2) {
          var c3 = e3(function(e4, n2) {
            s3(e4, c3, t3), d3(e4, { type: t3, index: i2(null), first: void 0, last: void 0, size: 0 }), h3 || (e4.size = 0), n2 != null && u2(n2, e4[l2], e4, r2);
          }), f2 = m3(t3), y3 = function(e4, t4, r3) {
            var n2, i3, o2 = f2(e4), a4 = v(e4, t4);
            return a4 ? a4.value = r3 : (o2.last = a4 = { index: i3 = p(t4, true), key: t4, value: r3, previous: n2 = o2.last, next: void 0, removed: false }, o2.first || (o2.first = a4), n2 && (n2.next = a4), h3 ? o2.size++ : e4.size++, i3 !== "F" && (o2.index[i3] = a4)), e4;
          }, v = function(e4, t4) {
            var r3, n2 = f2(e4), i3 = p(t4);
            if (i3 !== "F")
              return n2.index[i3];
            for (r3 = n2.first; r3; r3 = r3.next)
              if (r3.key == t4)
                return r3;
          };
          return o(c3.prototype, { clear: function() {
            for (var e4 = f2(this), t4 = e4.index, r3 = e4.first; r3; )
              r3.removed = true, r3.previous && (r3.previous = r3.previous.next = void 0), delete t4[r3.index], r3 = r3.next;
            e4.first = e4.last = void 0, h3 ? e4.size = 0 : this.size = 0;
          }, delete: function(e4) {
            var t4 = f2(this), r3 = v(this, e4);
            if (r3) {
              var n2 = r3.next, i3 = r3.previous;
              delete t4.index[r3.index], r3.removed = true, i3 && (i3.next = n2), n2 && (n2.previous = i3), t4.first == r3 && (t4.first = n2), t4.last == r3 && (t4.last = i3), h3 ? t4.size-- : this.size--;
            }
            return !!r3;
          }, forEach: function(e4) {
            for (var t4, r3 = f2(this), n2 = a3(e4, arguments.length > 1 ? arguments[1] : void 0, 3); t4 = t4 ? t4.next : r3.first; )
              for (n2(t4.value, t4.key, this); t4 && t4.removed; )
                t4 = t4.previous;
          }, has: function(e4) {
            return !!v(this, e4);
          } }), o(c3.prototype, r2 ? { get: function(e4) {
            var t4 = v(this, e4);
            return t4 && t4.value;
          }, set: function(e4, t4) {
            return y3(this, e4 === 0 ? 0 : e4, t4);
          } } : { add: function(e4) {
            return y3(this, e4 = e4 === 0 ? 0 : e4, e4);
          } }), h3 && n(c3.prototype, "size", { get: function() {
            return f2(this).size;
          } }), c3;
        }, setStrong: function(e3, t3, r2) {
          var n2 = t3 + " Iterator", i3 = m3(t3), o2 = m3(n2);
          l(e3, t3, function(e4, t4) {
            d3(this, { type: n2, target: e4, state: i3(e4), kind: t4, last: void 0 });
          }, function() {
            for (var e4 = o2(this), t4 = e4.kind, r3 = e4.last; r3 && r3.removed; )
              r3 = r3.previous;
            return e4.target && (e4.last = r3 = r3 ? r3.next : e4.state.first) ? t4 == "keys" ? { value: r3.key, done: false } : t4 == "values" ? { value: r3.value, done: false } : { value: [r3.key, r3.value], done: false } : (e4.target = void 0, { value: void 0, done: true });
          }, r2 ? "entries" : "values", !r2, true), c2(t3);
        } };
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = r(4), o = r(55).f, a3 = r(26), s3 = r(222), u2 = r(35), l = r(224), c2 = r(44), h3 = "".endsWith, p = Math.min, f = l("endsWith");
        i2({ target: "String", proto: true, forced: !!(c2 || f || (n = o(String.prototype, "endsWith"), !n || n.writable)) && !f }, { endsWith: function(e3) {
          var t3 = String(u2(this));
          s3(e3);
          var r2 = arguments.length > 1 ? arguments[1] : void 0, n2 = a3(t3.length), i3 = r2 === void 0 ? n2 : p(a3(r2), n2), o2 = String(e3);
          return h3 ? h3.call(t3, o2, i3) : t3.slice(i3 - o2.length, i3) === o2;
        } });
      }, function(e2, t2, r) {
        "use strict";
        (function(e3) {
          var n = r(229), i2 = r(230), o = r(231);
          function a3() {
            return u2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
          }
          function s3(e4, t3) {
            if (a3() < t3)
              throw new RangeError("Invalid typed array length");
            return u2.TYPED_ARRAY_SUPPORT ? (e4 = new Uint8Array(t3)).__proto__ = u2.prototype : (e4 === null && (e4 = new u2(t3)), e4.length = t3), e4;
          }
          function u2(e4, t3, r2) {
            if (!(u2.TYPED_ARRAY_SUPPORT || this instanceof u2))
              return new u2(e4, t3, r2);
            if (typeof e4 == "number") {
              if (typeof t3 == "string")
                throw new Error("If encoding is specified then the first argument must be a string");
              return h3(this, e4);
            }
            return l(this, e4, t3, r2);
          }
          function l(e4, t3, r2, n2) {
            if (typeof t3 == "number")
              throw new TypeError('"value" argument must not be a number');
            return typeof ArrayBuffer != "undefined" && t3 instanceof ArrayBuffer ? function(e5, t4, r3, n3) {
              if (t4.byteLength, r3 < 0 || t4.byteLength < r3)
                throw new RangeError("'offset' is out of bounds");
              if (t4.byteLength < r3 + (n3 || 0))
                throw new RangeError("'length' is out of bounds");
              t4 = r3 === void 0 && n3 === void 0 ? new Uint8Array(t4) : n3 === void 0 ? new Uint8Array(t4, r3) : new Uint8Array(t4, r3, n3);
              u2.TYPED_ARRAY_SUPPORT ? (e5 = t4).__proto__ = u2.prototype : e5 = p(e5, t4);
              return e5;
            }(e4, t3, r2, n2) : typeof t3 == "string" ? function(e5, t4, r3) {
              typeof r3 == "string" && r3 !== "" || (r3 = "utf8");
              if (!u2.isEncoding(r3))
                throw new TypeError('"encoding" must be a valid string encoding');
              var n3 = 0 | d3(t4, r3), i3 = (e5 = s3(e5, n3)).write(t4, r3);
              i3 !== n3 && (e5 = e5.slice(0, i3));
              return e5;
            }(e4, t3, r2) : function(e5, t4) {
              if (u2.isBuffer(t4)) {
                var r3 = 0 | f(t4.length);
                return (e5 = s3(e5, r3)).length === 0 || t4.copy(e5, 0, 0, r3), e5;
              }
              if (t4) {
                if (typeof ArrayBuffer != "undefined" && t4.buffer instanceof ArrayBuffer || "length" in t4)
                  return typeof t4.length != "number" || (n3 = t4.length) != n3 ? s3(e5, 0) : p(e5, t4);
                if (t4.type === "Buffer" && o(t4.data))
                  return p(e5, t4.data);
              }
              var n3;
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }(e4, t3);
          }
          function c2(e4) {
            if (typeof e4 != "number")
              throw new TypeError('"size" argument must be a number');
            if (e4 < 0)
              throw new RangeError('"size" argument must not be negative');
          }
          function h3(e4, t3) {
            if (c2(t3), e4 = s3(e4, t3 < 0 ? 0 : 0 | f(t3)), !u2.TYPED_ARRAY_SUPPORT)
              for (var r2 = 0; r2 < t3; ++r2)
                e4[r2] = 0;
            return e4;
          }
          function p(e4, t3) {
            var r2 = t3.length < 0 ? 0 : 0 | f(t3.length);
            e4 = s3(e4, r2);
            for (var n2 = 0; n2 < r2; n2 += 1)
              e4[n2] = 255 & t3[n2];
            return e4;
          }
          function f(e4) {
            if (e4 >= a3())
              throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a3().toString(16) + " bytes");
            return 0 | e4;
          }
          function d3(e4, t3) {
            if (u2.isBuffer(e4))
              return e4.length;
            if (typeof ArrayBuffer != "undefined" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(e4) || e4 instanceof ArrayBuffer))
              return e4.byteLength;
            typeof e4 != "string" && (e4 = "" + e4);
            var r2 = e4.length;
            if (r2 === 0)
              return 0;
            for (var n2 = false; ; )
              switch (t3) {
                case "ascii":
                case "latin1":
                case "binary":
                  return r2;
                case "utf8":
                case "utf-8":
                case void 0:
                  return z2(e4).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return 2 * r2;
                case "hex":
                  return r2 >>> 1;
                case "base64":
                  return U(e4).length;
                default:
                  if (n2)
                    return z2(e4).length;
                  t3 = ("" + t3).toLowerCase(), n2 = true;
              }
          }
          function m3(e4, t3, r2) {
            var n2 = false;
            if ((t3 === void 0 || t3 < 0) && (t3 = 0), t3 > this.length)
              return "";
            if ((r2 === void 0 || r2 > this.length) && (r2 = this.length), r2 <= 0)
              return "";
            if ((r2 >>>= 0) <= (t3 >>>= 0))
              return "";
            for (e4 || (e4 = "utf8"); ; )
              switch (e4) {
                case "hex":
                  return T2(this, t3, r2);
                case "utf8":
                case "utf-8":
                  return C(this, t3, r2);
                case "ascii":
                  return A(this, t3, r2);
                case "latin1":
                case "binary":
                  return N(this, t3, r2);
                case "base64":
                  return S3(this, t3, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return O2(this, t3, r2);
                default:
                  if (n2)
                    throw new TypeError("Unknown encoding: " + e4);
                  e4 = (e4 + "").toLowerCase(), n2 = true;
              }
          }
          function y3(e4, t3, r2) {
            var n2 = e4[t3];
            e4[t3] = e4[r2], e4[r2] = n2;
          }
          function v(e4, t3, r2, n2, i3) {
            if (e4.length === 0)
              return -1;
            if (typeof r2 == "string" ? (n2 = r2, r2 = 0) : r2 > 2147483647 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), r2 = +r2, isNaN(r2) && (r2 = i3 ? 0 : e4.length - 1), r2 < 0 && (r2 = e4.length + r2), r2 >= e4.length) {
              if (i3)
                return -1;
              r2 = e4.length - 1;
            } else if (r2 < 0) {
              if (!i3)
                return -1;
              r2 = 0;
            }
            if (typeof t3 == "string" && (t3 = u2.from(t3, n2)), u2.isBuffer(t3))
              return t3.length === 0 ? -1 : _(e4, t3, r2, n2, i3);
            if (typeof t3 == "number")
              return t3 &= 255, u2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? i3 ? Uint8Array.prototype.indexOf.call(e4, t3, r2) : Uint8Array.prototype.lastIndexOf.call(e4, t3, r2) : _(e4, [t3], r2, n2, i3);
            throw new TypeError("val must be string, number or Buffer");
          }
          function _(e4, t3, r2, n2, i3) {
            var o2, a4 = 1, s4 = e4.length, u3 = t3.length;
            if (n2 !== void 0 && ((n2 = String(n2).toLowerCase()) === "ucs2" || n2 === "ucs-2" || n2 === "utf16le" || n2 === "utf-16le")) {
              if (e4.length < 2 || t3.length < 2)
                return -1;
              a4 = 2, s4 /= 2, u3 /= 2, r2 /= 2;
            }
            function l2(e5, t4) {
              return a4 === 1 ? e5[t4] : e5.readUInt16BE(t4 * a4);
            }
            if (i3) {
              var c3 = -1;
              for (o2 = r2; o2 < s4; o2++)
                if (l2(e4, o2) === l2(t3, c3 === -1 ? 0 : o2 - c3)) {
                  if (c3 === -1 && (c3 = o2), o2 - c3 + 1 === u3)
                    return c3 * a4;
                } else
                  c3 !== -1 && (o2 -= o2 - c3), c3 = -1;
            } else
              for (r2 + u3 > s4 && (r2 = s4 - u3), o2 = r2; o2 >= 0; o2--) {
                for (var h4 = true, p2 = 0; p2 < u3; p2++)
                  if (l2(e4, o2 + p2) !== l2(t3, p2)) {
                    h4 = false;
                    break;
                  }
                if (h4)
                  return o2;
              }
            return -1;
          }
          function g(e4, t3, r2, n2) {
            r2 = Number(r2) || 0;
            var i3 = e4.length - r2;
            n2 ? (n2 = Number(n2)) > i3 && (n2 = i3) : n2 = i3;
            var o2 = t3.length;
            if (o2 % 2 != 0)
              throw new TypeError("Invalid hex string");
            n2 > o2 / 2 && (n2 = o2 / 2);
            for (var a4 = 0; a4 < n2; ++a4) {
              var s4 = parseInt(t3.substr(2 * a4, 2), 16);
              if (isNaN(s4))
                return a4;
              e4[r2 + a4] = s4;
            }
            return a4;
          }
          function b2(e4, t3, r2, n2) {
            return G2(z2(t3, e4.length - r2), e4, r2, n2);
          }
          function x2(e4, t3, r2, n2) {
            return G2(function(e5) {
              for (var t4 = [], r3 = 0; r3 < e5.length; ++r3)
                t4.push(255 & e5.charCodeAt(r3));
              return t4;
            }(t3), e4, r2, n2);
          }
          function w2(e4, t3, r2, n2) {
            return x2(e4, t3, r2, n2);
          }
          function E2(e4, t3, r2, n2) {
            return G2(U(t3), e4, r2, n2);
          }
          function D2(e4, t3, r2, n2) {
            return G2(function(e5, t4) {
              for (var r3, n3, i3, o2 = [], a4 = 0; a4 < e5.length && !((t4 -= 2) < 0); ++a4)
                r3 = e5.charCodeAt(a4), n3 = r3 >> 8, i3 = r3 % 256, o2.push(i3), o2.push(n3);
              return o2;
            }(t3, e4.length - r2), e4, r2, n2);
          }
          function S3(e4, t3, r2) {
            return t3 === 0 && r2 === e4.length ? n.fromByteArray(e4) : n.fromByteArray(e4.slice(t3, r2));
          }
          function C(e4, t3, r2) {
            r2 = Math.min(e4.length, r2);
            for (var n2 = [], i3 = t3; i3 < r2; ) {
              var o2, a4, s4, u3, l2 = e4[i3], c3 = null, h4 = l2 > 239 ? 4 : l2 > 223 ? 3 : l2 > 191 ? 2 : 1;
              if (i3 + h4 <= r2)
                switch (h4) {
                  case 1:
                    l2 < 128 && (c3 = l2);
                    break;
                  case 2:
                    (192 & (o2 = e4[i3 + 1])) == 128 && (u3 = (31 & l2) << 6 | 63 & o2) > 127 && (c3 = u3);
                    break;
                  case 3:
                    o2 = e4[i3 + 1], a4 = e4[i3 + 2], (192 & o2) == 128 && (192 & a4) == 128 && (u3 = (15 & l2) << 12 | (63 & o2) << 6 | 63 & a4) > 2047 && (u3 < 55296 || u3 > 57343) && (c3 = u3);
                    break;
                  case 4:
                    o2 = e4[i3 + 1], a4 = e4[i3 + 2], s4 = e4[i3 + 3], (192 & o2) == 128 && (192 & a4) == 128 && (192 & s4) == 128 && (u3 = (15 & l2) << 18 | (63 & o2) << 12 | (63 & a4) << 6 | 63 & s4) > 65535 && u3 < 1114112 && (c3 = u3);
                }
              c3 === null ? (c3 = 65533, h4 = 1) : c3 > 65535 && (c3 -= 65536, n2.push(c3 >>> 10 & 1023 | 55296), c3 = 56320 | 1023 & c3), n2.push(c3), i3 += h4;
            }
            return function(e5) {
              var t4 = e5.length;
              if (t4 <= 4096)
                return String.fromCharCode.apply(String, e5);
              var r3 = "", n3 = 0;
              for (; n3 < t4; )
                r3 += String.fromCharCode.apply(String, e5.slice(n3, n3 += 4096));
              return r3;
            }(n2);
          }
          t2.Buffer = u2, t2.SlowBuffer = function(e4) {
            +e4 != e4 && (e4 = 0);
            return u2.alloc(+e4);
          }, t2.INSPECT_MAX_BYTES = 50, u2.TYPED_ARRAY_SUPPORT = e3.TYPED_ARRAY_SUPPORT !== void 0 ? e3.TYPED_ARRAY_SUPPORT : function() {
            try {
              var e4 = new Uint8Array(1);
              return e4.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                return 42;
              } }, e4.foo() === 42 && typeof e4.subarray == "function" && e4.subarray(1, 1).byteLength === 0;
            } catch (e5) {
              return false;
            }
          }(), t2.kMaxLength = a3(), u2.poolSize = 8192, u2._augment = function(e4) {
            return e4.__proto__ = u2.prototype, e4;
          }, u2.from = function(e4, t3, r2) {
            return l(null, e4, t3, r2);
          }, u2.TYPED_ARRAY_SUPPORT && (u2.prototype.__proto__ = Uint8Array.prototype, u2.__proto__ = Uint8Array, typeof Symbol != "undefined" && Symbol.species && u2[Symbol.species] === u2 && Object.defineProperty(u2, Symbol.species, { value: null, configurable: true })), u2.alloc = function(e4, t3, r2) {
            return function(e5, t4, r3, n2) {
              return c2(t4), t4 <= 0 ? s3(e5, t4) : r3 !== void 0 ? typeof n2 == "string" ? s3(e5, t4).fill(r3, n2) : s3(e5, t4).fill(r3) : s3(e5, t4);
            }(null, e4, t3, r2);
          }, u2.allocUnsafe = function(e4) {
            return h3(null, e4);
          }, u2.allocUnsafeSlow = function(e4) {
            return h3(null, e4);
          }, u2.isBuffer = function(e4) {
            return !(e4 == null || !e4._isBuffer);
          }, u2.compare = function(e4, t3) {
            if (!u2.isBuffer(e4) || !u2.isBuffer(t3))
              throw new TypeError("Arguments must be Buffers");
            if (e4 === t3)
              return 0;
            for (var r2 = e4.length, n2 = t3.length, i3 = 0, o2 = Math.min(r2, n2); i3 < o2; ++i3)
              if (e4[i3] !== t3[i3]) {
                r2 = e4[i3], n2 = t3[i3];
                break;
              }
            return r2 < n2 ? -1 : n2 < r2 ? 1 : 0;
          }, u2.isEncoding = function(e4) {
            switch (String(e4).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, u2.concat = function(e4, t3) {
            if (!o(e4))
              throw new TypeError('"list" argument must be an Array of Buffers');
            if (e4.length === 0)
              return u2.alloc(0);
            var r2;
            if (t3 === void 0)
              for (t3 = 0, r2 = 0; r2 < e4.length; ++r2)
                t3 += e4[r2].length;
            var n2 = u2.allocUnsafe(t3), i3 = 0;
            for (r2 = 0; r2 < e4.length; ++r2) {
              var a4 = e4[r2];
              if (!u2.isBuffer(a4))
                throw new TypeError('"list" argument must be an Array of Buffers');
              a4.copy(n2, i3), i3 += a4.length;
            }
            return n2;
          }, u2.byteLength = d3, u2.prototype._isBuffer = true, u2.prototype.swap16 = function() {
            var e4 = this.length;
            if (e4 % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t3 = 0; t3 < e4; t3 += 2)
              y3(this, t3, t3 + 1);
            return this;
          }, u2.prototype.swap32 = function() {
            var e4 = this.length;
            if (e4 % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t3 = 0; t3 < e4; t3 += 4)
              y3(this, t3, t3 + 3), y3(this, t3 + 1, t3 + 2);
            return this;
          }, u2.prototype.swap64 = function() {
            var e4 = this.length;
            if (e4 % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t3 = 0; t3 < e4; t3 += 8)
              y3(this, t3, t3 + 7), y3(this, t3 + 1, t3 + 6), y3(this, t3 + 2, t3 + 5), y3(this, t3 + 3, t3 + 4);
            return this;
          }, u2.prototype.toString = function() {
            var e4 = 0 | this.length;
            return e4 === 0 ? "" : arguments.length === 0 ? C(this, 0, e4) : m3.apply(this, arguments);
          }, u2.prototype.equals = function(e4) {
            if (!u2.isBuffer(e4))
              throw new TypeError("Argument must be a Buffer");
            return this === e4 || u2.compare(this, e4) === 0;
          }, u2.prototype.inspect = function() {
            var e4 = "", r2 = t2.INSPECT_MAX_BYTES;
            return this.length > 0 && (e4 = this.toString("hex", 0, r2).match(/.{2}/g).join(" "), this.length > r2 && (e4 += " ... ")), "<Buffer " + e4 + ">";
          }, u2.prototype.compare = function(e4, t3, r2, n2, i3) {
            if (!u2.isBuffer(e4))
              throw new TypeError("Argument must be a Buffer");
            if (t3 === void 0 && (t3 = 0), r2 === void 0 && (r2 = e4 ? e4.length : 0), n2 === void 0 && (n2 = 0), i3 === void 0 && (i3 = this.length), t3 < 0 || r2 > e4.length || n2 < 0 || i3 > this.length)
              throw new RangeError("out of range index");
            if (n2 >= i3 && t3 >= r2)
              return 0;
            if (n2 >= i3)
              return -1;
            if (t3 >= r2)
              return 1;
            if (this === e4)
              return 0;
            for (var o2 = (i3 >>>= 0) - (n2 >>>= 0), a4 = (r2 >>>= 0) - (t3 >>>= 0), s4 = Math.min(o2, a4), l2 = this.slice(n2, i3), c3 = e4.slice(t3, r2), h4 = 0; h4 < s4; ++h4)
              if (l2[h4] !== c3[h4]) {
                o2 = l2[h4], a4 = c3[h4];
                break;
              }
            return o2 < a4 ? -1 : a4 < o2 ? 1 : 0;
          }, u2.prototype.includes = function(e4, t3, r2) {
            return this.indexOf(e4, t3, r2) !== -1;
          }, u2.prototype.indexOf = function(e4, t3, r2) {
            return v(this, e4, t3, r2, true);
          }, u2.prototype.lastIndexOf = function(e4, t3, r2) {
            return v(this, e4, t3, r2, false);
          }, u2.prototype.write = function(e4, t3, r2, n2) {
            if (t3 === void 0)
              n2 = "utf8", r2 = this.length, t3 = 0;
            else if (r2 === void 0 && typeof t3 == "string")
              n2 = t3, r2 = this.length, t3 = 0;
            else {
              if (!isFinite(t3))
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t3 |= 0, isFinite(r2) ? (r2 |= 0, n2 === void 0 && (n2 = "utf8")) : (n2 = r2, r2 = void 0);
            }
            var i3 = this.length - t3;
            if ((r2 === void 0 || r2 > i3) && (r2 = i3), e4.length > 0 && (r2 < 0 || t3 < 0) || t3 > this.length)
              throw new RangeError("Attempt to write outside buffer bounds");
            n2 || (n2 = "utf8");
            for (var o2 = false; ; )
              switch (n2) {
                case "hex":
                  return g(this, e4, t3, r2);
                case "utf8":
                case "utf-8":
                  return b2(this, e4, t3, r2);
                case "ascii":
                  return x2(this, e4, t3, r2);
                case "latin1":
                case "binary":
                  return w2(this, e4, t3, r2);
                case "base64":
                  return E2(this, e4, t3, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return D2(this, e4, t3, r2);
                default:
                  if (o2)
                    throw new TypeError("Unknown encoding: " + n2);
                  n2 = ("" + n2).toLowerCase(), o2 = true;
              }
          }, u2.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          };
          function A(e4, t3, r2) {
            var n2 = "";
            r2 = Math.min(e4.length, r2);
            for (var i3 = t3; i3 < r2; ++i3)
              n2 += String.fromCharCode(127 & e4[i3]);
            return n2;
          }
          function N(e4, t3, r2) {
            var n2 = "";
            r2 = Math.min(e4.length, r2);
            for (var i3 = t3; i3 < r2; ++i3)
              n2 += String.fromCharCode(e4[i3]);
            return n2;
          }
          function T2(e4, t3, r2) {
            var n2 = e4.length;
            (!t3 || t3 < 0) && (t3 = 0), (!r2 || r2 < 0 || r2 > n2) && (r2 = n2);
            for (var i3 = "", o2 = t3; o2 < r2; ++o2)
              i3 += R2(e4[o2]);
            return i3;
          }
          function O2(e4, t3, r2) {
            for (var n2 = e4.slice(t3, r2), i3 = "", o2 = 0; o2 < n2.length; o2 += 2)
              i3 += String.fromCharCode(n2[o2] + 256 * n2[o2 + 1]);
            return i3;
          }
          function F(e4, t3, r2) {
            if (e4 % 1 != 0 || e4 < 0)
              throw new RangeError("offset is not uint");
            if (e4 + t3 > r2)
              throw new RangeError("Trying to access beyond buffer length");
          }
          function k2(e4, t3, r2, n2, i3, o2) {
            if (!u2.isBuffer(e4))
              throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t3 > i3 || t3 < o2)
              throw new RangeError('"value" argument is out of bounds');
            if (r2 + n2 > e4.length)
              throw new RangeError("Index out of range");
          }
          function P(e4, t3, r2, n2) {
            t3 < 0 && (t3 = 65535 + t3 + 1);
            for (var i3 = 0, o2 = Math.min(e4.length - r2, 2); i3 < o2; ++i3)
              e4[r2 + i3] = (t3 & 255 << 8 * (n2 ? i3 : 1 - i3)) >>> 8 * (n2 ? i3 : 1 - i3);
          }
          function I2(e4, t3, r2, n2) {
            t3 < 0 && (t3 = 4294967295 + t3 + 1);
            for (var i3 = 0, o2 = Math.min(e4.length - r2, 4); i3 < o2; ++i3)
              e4[r2 + i3] = t3 >>> 8 * (n2 ? i3 : 3 - i3) & 255;
          }
          function L2(e4, t3, r2, n2, i3, o2) {
            if (r2 + n2 > e4.length)
              throw new RangeError("Index out of range");
            if (r2 < 0)
              throw new RangeError("Index out of range");
          }
          function M3(e4, t3, r2, n2, o2) {
            return o2 || L2(e4, 0, r2, 4), i2.write(e4, t3, r2, n2, 23, 4), r2 + 4;
          }
          function B2(e4, t3, r2, n2, o2) {
            return o2 || L2(e4, 0, r2, 8), i2.write(e4, t3, r2, n2, 52, 8), r2 + 8;
          }
          u2.prototype.slice = function(e4, t3) {
            var r2, n2 = this.length;
            if ((e4 = ~~e4) < 0 ? (e4 += n2) < 0 && (e4 = 0) : e4 > n2 && (e4 = n2), (t3 = t3 === void 0 ? n2 : ~~t3) < 0 ? (t3 += n2) < 0 && (t3 = 0) : t3 > n2 && (t3 = n2), t3 < e4 && (t3 = e4), u2.TYPED_ARRAY_SUPPORT)
              (r2 = this.subarray(e4, t3)).__proto__ = u2.prototype;
            else {
              var i3 = t3 - e4;
              r2 = new u2(i3, void 0);
              for (var o2 = 0; o2 < i3; ++o2)
                r2[o2] = this[o2 + e4];
            }
            return r2;
          }, u2.prototype.readUIntLE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = this[e4], i3 = 1, o2 = 0; ++o2 < t3 && (i3 *= 256); )
              n2 += this[e4 + o2] * i3;
            return n2;
          }, u2.prototype.readUIntBE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = this[e4 + --t3], i3 = 1; t3 > 0 && (i3 *= 256); )
              n2 += this[e4 + --t3] * i3;
            return n2;
          }, u2.prototype.readUInt8 = function(e4, t3) {
            return t3 || F(e4, 1, this.length), this[e4];
          }, u2.prototype.readUInt16LE = function(e4, t3) {
            return t3 || F(e4, 2, this.length), this[e4] | this[e4 + 1] << 8;
          }, u2.prototype.readUInt16BE = function(e4, t3) {
            return t3 || F(e4, 2, this.length), this[e4] << 8 | this[e4 + 1];
          }, u2.prototype.readUInt32LE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), (this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16) + 16777216 * this[e4 + 3];
          }, u2.prototype.readUInt32BE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), 16777216 * this[e4] + (this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3]);
          }, u2.prototype.readIntLE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = this[e4], i3 = 1, o2 = 0; ++o2 < t3 && (i3 *= 256); )
              n2 += this[e4 + o2] * i3;
            return n2 >= (i3 *= 128) && (n2 -= Math.pow(2, 8 * t3)), n2;
          }, u2.prototype.readIntBE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = t3, i3 = 1, o2 = this[e4 + --n2]; n2 > 0 && (i3 *= 256); )
              o2 += this[e4 + --n2] * i3;
            return o2 >= (i3 *= 128) && (o2 -= Math.pow(2, 8 * t3)), o2;
          }, u2.prototype.readInt8 = function(e4, t3) {
            return t3 || F(e4, 1, this.length), 128 & this[e4] ? -1 * (255 - this[e4] + 1) : this[e4];
          }, u2.prototype.readInt16LE = function(e4, t3) {
            t3 || F(e4, 2, this.length);
            var r2 = this[e4] | this[e4 + 1] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u2.prototype.readInt16BE = function(e4, t3) {
            t3 || F(e4, 2, this.length);
            var r2 = this[e4 + 1] | this[e4] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u2.prototype.readInt32LE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16 | this[e4 + 3] << 24;
          }, u2.prototype.readInt32BE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), this[e4] << 24 | this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3];
          }, u2.prototype.readFloatLE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), i2.read(this, e4, true, 23, 4);
          }, u2.prototype.readFloatBE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), i2.read(this, e4, false, 23, 4);
          }, u2.prototype.readDoubleLE = function(e4, t3) {
            return t3 || F(e4, 8, this.length), i2.read(this, e4, true, 52, 8);
          }, u2.prototype.readDoubleBE = function(e4, t3) {
            return t3 || F(e4, 8, this.length), i2.read(this, e4, false, 52, 8);
          }, u2.prototype.writeUIntLE = function(e4, t3, r2, n2) {
            (e4 = +e4, t3 |= 0, r2 |= 0, n2) || k2(this, e4, t3, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i3 = 1, o2 = 0;
            for (this[t3] = 255 & e4; ++o2 < r2 && (i3 *= 256); )
              this[t3 + o2] = e4 / i3 & 255;
            return t3 + r2;
          }, u2.prototype.writeUIntBE = function(e4, t3, r2, n2) {
            (e4 = +e4, t3 |= 0, r2 |= 0, n2) || k2(this, e4, t3, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i3 = r2 - 1, o2 = 1;
            for (this[t3 + i3] = 255 & e4; --i3 >= 0 && (o2 *= 256); )
              this[t3 + i3] = e4 / o2 & 255;
            return t3 + r2;
          }, u2.prototype.writeUInt8 = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 1, 255, 0), u2.TYPED_ARRAY_SUPPORT || (e4 = Math.floor(e4)), this[t3] = 255 & e4, t3 + 1;
          }, u2.prototype.writeUInt16LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 65535, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8) : P(this, e4, t3, true), t3 + 2;
          }, u2.prototype.writeUInt16BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 65535, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4) : P(this, e4, t3, false), t3 + 2;
          }, u2.prototype.writeUInt32LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 4294967295, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3 + 3] = e4 >>> 24, this[t3 + 2] = e4 >>> 16, this[t3 + 1] = e4 >>> 8, this[t3] = 255 & e4) : I2(this, e4, t3, true), t3 + 4;
          }, u2.prototype.writeUInt32BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 4294967295, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4) : I2(this, e4, t3, false), t3 + 4;
          }, u2.prototype.writeIntLE = function(e4, t3, r2, n2) {
            if (e4 = +e4, t3 |= 0, !n2) {
              var i3 = Math.pow(2, 8 * r2 - 1);
              k2(this, e4, t3, r2, i3 - 1, -i3);
            }
            var o2 = 0, a4 = 1, s4 = 0;
            for (this[t3] = 255 & e4; ++o2 < r2 && (a4 *= 256); )
              e4 < 0 && s4 === 0 && this[t3 + o2 - 1] !== 0 && (s4 = 1), this[t3 + o2] = (e4 / a4 >> 0) - s4 & 255;
            return t3 + r2;
          }, u2.prototype.writeIntBE = function(e4, t3, r2, n2) {
            if (e4 = +e4, t3 |= 0, !n2) {
              var i3 = Math.pow(2, 8 * r2 - 1);
              k2(this, e4, t3, r2, i3 - 1, -i3);
            }
            var o2 = r2 - 1, a4 = 1, s4 = 0;
            for (this[t3 + o2] = 255 & e4; --o2 >= 0 && (a4 *= 256); )
              e4 < 0 && s4 === 0 && this[t3 + o2 + 1] !== 0 && (s4 = 1), this[t3 + o2] = (e4 / a4 >> 0) - s4 & 255;
            return t3 + r2;
          }, u2.prototype.writeInt8 = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 1, 127, -128), u2.TYPED_ARRAY_SUPPORT || (e4 = Math.floor(e4)), e4 < 0 && (e4 = 255 + e4 + 1), this[t3] = 255 & e4, t3 + 1;
          }, u2.prototype.writeInt16LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 32767, -32768), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8) : P(this, e4, t3, true), t3 + 2;
          }, u2.prototype.writeInt16BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 32767, -32768), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4) : P(this, e4, t3, false), t3 + 2;
          }, u2.prototype.writeInt32LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 2147483647, -2147483648), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8, this[t3 + 2] = e4 >>> 16, this[t3 + 3] = e4 >>> 24) : I2(this, e4, t3, true), t3 + 4;
          }, u2.prototype.writeInt32BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 2147483647, -2147483648), e4 < 0 && (e4 = 4294967295 + e4 + 1), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4) : I2(this, e4, t3, false), t3 + 4;
          }, u2.prototype.writeFloatLE = function(e4, t3, r2) {
            return M3(this, e4, t3, true, r2);
          }, u2.prototype.writeFloatBE = function(e4, t3, r2) {
            return M3(this, e4, t3, false, r2);
          }, u2.prototype.writeDoubleLE = function(e4, t3, r2) {
            return B2(this, e4, t3, true, r2);
          }, u2.prototype.writeDoubleBE = function(e4, t3, r2) {
            return B2(this, e4, t3, false, r2);
          }, u2.prototype.copy = function(e4, t3, r2, n2) {
            if (r2 || (r2 = 0), n2 || n2 === 0 || (n2 = this.length), t3 >= e4.length && (t3 = e4.length), t3 || (t3 = 0), n2 > 0 && n2 < r2 && (n2 = r2), n2 === r2)
              return 0;
            if (e4.length === 0 || this.length === 0)
              return 0;
            if (t3 < 0)
              throw new RangeError("targetStart out of bounds");
            if (r2 < 0 || r2 >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (n2 < 0)
              throw new RangeError("sourceEnd out of bounds");
            n2 > this.length && (n2 = this.length), e4.length - t3 < n2 - r2 && (n2 = e4.length - t3 + r2);
            var i3, o2 = n2 - r2;
            if (this === e4 && r2 < t3 && t3 < n2)
              for (i3 = o2 - 1; i3 >= 0; --i3)
                e4[i3 + t3] = this[i3 + r2];
            else if (o2 < 1e3 || !u2.TYPED_ARRAY_SUPPORT)
              for (i3 = 0; i3 < o2; ++i3)
                e4[i3 + t3] = this[i3 + r2];
            else
              Uint8Array.prototype.set.call(e4, this.subarray(r2, r2 + o2), t3);
            return o2;
          }, u2.prototype.fill = function(e4, t3, r2, n2) {
            if (typeof e4 == "string") {
              if (typeof t3 == "string" ? (n2 = t3, t3 = 0, r2 = this.length) : typeof r2 == "string" && (n2 = r2, r2 = this.length), e4.length === 1) {
                var i3 = e4.charCodeAt(0);
                i3 < 256 && (e4 = i3);
              }
              if (n2 !== void 0 && typeof n2 != "string")
                throw new TypeError("encoding must be a string");
              if (typeof n2 == "string" && !u2.isEncoding(n2))
                throw new TypeError("Unknown encoding: " + n2);
            } else
              typeof e4 == "number" && (e4 &= 255);
            if (t3 < 0 || this.length < t3 || this.length < r2)
              throw new RangeError("Out of range index");
            if (r2 <= t3)
              return this;
            var o2;
            if (t3 >>>= 0, r2 = r2 === void 0 ? this.length : r2 >>> 0, e4 || (e4 = 0), typeof e4 == "number")
              for (o2 = t3; o2 < r2; ++o2)
                this[o2] = e4;
            else {
              var a4 = u2.isBuffer(e4) ? e4 : z2(new u2(e4, n2).toString()), s4 = a4.length;
              for (o2 = 0; o2 < r2 - t3; ++o2)
                this[o2 + t3] = a4[o2 % s4];
            }
            return this;
          };
          var j = /[^+\/0-9A-Za-z-_]/g;
          function R2(e4) {
            return e4 < 16 ? "0" + e4.toString(16) : e4.toString(16);
          }
          function z2(e4, t3) {
            var r2;
            t3 = t3 || 1 / 0;
            for (var n2 = e4.length, i3 = null, o2 = [], a4 = 0; a4 < n2; ++a4) {
              if ((r2 = e4.charCodeAt(a4)) > 55295 && r2 < 57344) {
                if (!i3) {
                  if (r2 > 56319) {
                    (t3 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  if (a4 + 1 === n2) {
                    (t3 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  i3 = r2;
                  continue;
                }
                if (r2 < 56320) {
                  (t3 -= 3) > -1 && o2.push(239, 191, 189), i3 = r2;
                  continue;
                }
                r2 = 65536 + (i3 - 55296 << 10 | r2 - 56320);
              } else
                i3 && (t3 -= 3) > -1 && o2.push(239, 191, 189);
              if (i3 = null, r2 < 128) {
                if ((t3 -= 1) < 0)
                  break;
                o2.push(r2);
              } else if (r2 < 2048) {
                if ((t3 -= 2) < 0)
                  break;
                o2.push(r2 >> 6 | 192, 63 & r2 | 128);
              } else if (r2 < 65536) {
                if ((t3 -= 3) < 0)
                  break;
                o2.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              } else {
                if (!(r2 < 1114112))
                  throw new Error("Invalid code point");
                if ((t3 -= 4) < 0)
                  break;
                o2.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              }
            }
            return o2;
          }
          function U(e4) {
            return n.toByteArray(function(e5) {
              if ((e5 = function(e6) {
                return e6.trim ? e6.trim() : e6.replace(/^\s+|\s+$/g, "");
              }(e5).replace(j, "")).length < 2)
                return "";
              for (; e5.length % 4 != 0; )
                e5 += "=";
              return e5;
            }(e4));
          }
          function G2(e4, t3, r2, n2) {
            for (var i3 = 0; i3 < n2 && !(i3 + r2 >= t3.length || i3 >= e4.length); ++i3)
              t3[i3 + r2] = e4[i3];
            return i3;
          }
        }).call(this, r(78));
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.isASCIIByte = function(e3) {
          return e3 >= 0 && e3 <= 127;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o = r2.call(e3), a3 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o.next()).done; )
              a3.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o.return) && r2.call(o);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a3;
        }, i2 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(n(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.length = function(e3) {
          return e3.length;
        }, t2.byteLowercase = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3[t3];
            r2 >= 65 && r2 <= 90 && (e3[t3] = r2 + 32);
          }
        }, t2.byteUppercase = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3[t3];
            r2 >= 97 && r2 <= 122 && (e3[t3] = r2 - 32);
          }
        }, t2.byteCaseInsensitiveMatch = function(e3, t3) {
          if (e3.length !== t3.length)
            return false;
          for (var r2 = 0; r2 < e3.length; r2++) {
            var n2 = e3[r2], i3 = t3[r2];
            if (n2 >= 65 && n2 <= 90 && (n2 += 32), i3 >= 65 && i3 <= 90 && (i3 += 32), n2 !== i3)
              return false;
          }
          return true;
        }, t2.startsWith = function(e3, t3) {
          for (var r2 = 0; ; ) {
            if (r2 >= e3.length)
              return false;
            if (r2 >= t3.length)
              return true;
            if (e3[r2] !== t3[r2])
              return false;
            r2++;
          }
        }, t2.byteLessThan = function(e3, t3) {
          for (var r2 = 0; ; ) {
            if (r2 >= e3.length)
              return false;
            if (r2 >= t3.length)
              return true;
            var n2 = e3[r2], i3 = t3[r2];
            if (n2 < i3)
              return true;
            if (n2 > i3)
              return false;
            r2++;
          }
        }, t2.isomorphicDecode = function(e3) {
          return String.fromCodePoint.apply(String, i2(e3));
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(6), i2 = r(7), o = r(0), a3 = r(12), s3 = function() {
          function e3(e4) {
            this._associatedDocument = e4 || n.dom.window.document;
          }
          return e3.prototype.createDocumentType = function(e4, t3, r2) {
            return o.namespace_validate(e4), o.create_documentType(this._associatedDocument, e4, t3, r2);
          }, e3.prototype.createDocument = function(e4, t3, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = o.create_xmlDocument(), a4 = null;
            return t3 && (a4 = o.document_internalCreateElementNS(n2, e4, t3)), r2 && n2.appendChild(r2), a4 && n2.appendChild(a4), n2._origin = this._associatedDocument._origin, e4 === i2.namespace.HTML ? n2._contentType = "application/xhtml+xml" : e4 === i2.namespace.SVG ? n2._contentType = "image/svg+xml" : n2._contentType = "application/xml", n2;
          }, e3.prototype.createHTMLDocument = function(e4) {
            var t3 = o.create_document();
            t3._type = "html", t3._contentType = "text/html", t3.appendChild(o.create_documentType(t3, "html", "", ""));
            var r2 = o.element_createAnElement(t3, "html", i2.namespace.HTML);
            t3.appendChild(r2);
            var n2 = o.element_createAnElement(t3, "head", i2.namespace.HTML);
            if (r2.appendChild(n2), e4 !== void 0) {
              var a4 = o.element_createAnElement(t3, "title", i2.namespace.HTML);
              n2.appendChild(a4);
              var s4 = o.create_text(t3, e4);
              a4.appendChild(s4);
            }
            var u2 = o.element_createAnElement(t3, "body", i2.namespace.HTML);
            return r2.appendChild(u2), t3._origin = this._associatedDocument._origin, t3;
          }, e3.prototype.hasFeature = function() {
            return true;
          }, e3._create = function(t3) {
            return new e3(t3);
          }, e3;
        }();
        t2.DOMImplementationImpl = s3, a3.idl_defineConst(s3.prototype, "_ID", "@oozcitak/dom");
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(70), a3 = r(1), s3 = r(0), u2 = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._signalSlots = /* @__PURE__ */ new Set(), t4._mutationObserverMicrotaskQueued = false, t4._mutationObservers = /* @__PURE__ */ new Set(), t4._iteratorList = new a3.FixedSizeSet(), t4._associatedDocument = s3.create_document(), t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "document", { get: function() {
            return this._associatedDocument;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "event", { get: function() {
            return this._currentEvent;
          }, enumerable: true, configurable: true }), t3._create = function() {
            return new t3();
          }, t3;
        }(o.EventTargetImpl);
        t2.WindowImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = function() {
          function e3() {
          }
          return e3.isNode = function(e4) {
            return !!e4 && e4._nodeType !== void 0;
          }, e3.isDocumentNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Document;
          }, e3.isDocumentTypeNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.DocumentType;
          }, e3.isDocumentFragmentNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.DocumentFragment;
          }, e3.isAttrNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Attribute;
          }, e3.isCharacterDataNode = function(t3) {
            if (!e3.isNode(t3))
              return false;
            var r2 = t3._nodeType;
            return r2 === n.NodeType.Text || r2 === n.NodeType.ProcessingInstruction || r2 === n.NodeType.Comment || r2 === n.NodeType.CData;
          }, e3.isTextNode = function(t3) {
            return e3.isNode(t3) && (t3._nodeType === n.NodeType.Text || t3._nodeType === n.NodeType.CData);
          }, e3.isExclusiveTextNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Text;
          }, e3.isCDATASectionNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.CData;
          }, e3.isCommentNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Comment;
          }, e3.isProcessingInstructionNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.ProcessingInstruction;
          }, e3.isElementNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Element;
          }, e3.isCustomElementNode = function(t3) {
            return e3.isElementNode(t3) && t3._customElementState === "custom";
          }, e3.isShadowRoot = function(e4) {
            return !!e4 && e4.host !== void 0;
          }, e3.isMouseEvent = function(e4) {
            return !!e4 && e4.screenX !== void 0 && e4.screenY != null;
          }, e3.isSlotable = function(t3) {
            return !!t3 && t3._name !== void 0 && t3._assignedSlot !== void 0 && (e3.isTextNode(t3) || e3.isElementNode(t3));
          }, e3.isSlot = function(t3) {
            return !!t3 && t3._name !== void 0 && t3._assignedNodes !== void 0 && e3.isElementNode(t3);
          }, e3.isWindow = function(e4) {
            return !!e4 && e4.navigator !== void 0;
          }, e3.isEventListener = function(e4) {
            return !!e4 && e4.handleEvent !== void 0;
          }, e3.isRegisteredObserver = function(e4) {
            return !!e4 && e4.observer !== void 0 && e4.options !== void 0;
          }, e3.isTransientRegisteredObserver = function(t3) {
            return !!t3 && t3.source !== void 0 && e3.isRegisteredObserver(t3);
          }, e3;
        }();
        t2.Guard = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3() {
            return e3.call(this) || this;
          }
          return i2(t3, e3), t3;
        }(r(98).DocumentImpl);
        t2.XMLDocumentImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o, a3 = r(1), s3 = r(243), u2 = r(7), l = r(244), c2 = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, h3 = /[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, p = /[ "<>`]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, f = /[ "<>`#?{}]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, d3 = /[ "<>`#?{}/:;=@\[\]\\\^\|]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, m3 = /[0-9A-Za-z!\$&-\/:;=\?@_~\xA0-\uD7FF\uE000-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDC00-\uDFFD]/, y3 = /[\0\t\f\r #%/:?@\[\\\]]/;
        function v(e3) {
          o !== void 0 && o.call(null, "Validation Error: " + e3);
        }
        function _() {
          return { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
        }
        function g(e3) {
          return e3 in c2;
        }
        function b2(e3) {
          return g(e3.scheme);
        }
        function x2(e3) {
          return c2[e3] || null;
        }
        function w2(e3) {
          return e3.username !== "" || e3.password !== "";
        }
        function E2(e3, t3) {
          var r2, i3;
          t3 === void 0 && (t3 = false);
          var o2 = e3.scheme + ":";
          if (e3.host !== null ? (o2 += "//", w2(e3) && (o2 += e3.username, e3.password !== "" && (o2 += ":" + e3.password), o2 += "@"), o2 += D2(e3.host), e3.port !== null && (o2 += ":" + e3.port)) : e3.host === null && e3.scheme === "file" && (o2 += "//"), e3._cannotBeABaseURLFlag)
            o2 += e3.path[0];
          else
            try {
              for (var a4 = n(e3.path), s4 = a4.next(); !s4.done; s4 = a4.next()) {
                o2 += "/" + s4.value;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          return e3.query !== null && (o2 += "?" + e3.query), t3 || e3.fragment === null || (o2 += "#" + e3.fragment), o2;
        }
        function D2(e3) {
          return a3.isNumber(e3) ? S3(e3) : a3.isArray(e3) ? "[" + C(e3) + "]" : e3;
        }
        function S3(e3) {
          for (var t3 = "", r2 = e3, n2 = 1; n2 <= 4; n2++)
            t3 = (r2 % 256).toString() + t3, n2 !== 4 && (t3 = "." + t3), r2 = Math.floor(r2 / 256);
          return t3;
        }
        function C(e3) {
          for (var t3 = "", r2 = null, n2 = -1, i3 = 0, o2 = 0, a4 = 0; a4 < 8; a4++)
            if (e3[a4] === 0) {
              i3 = 1;
              for (var s4 = a4 + 1; s4 < 8 && e3[s4] === 0; s4++)
                i3++;
              i3 > o2 && (o2 = i3, n2 = a4);
            }
          o2 > 1 && (r2 = n2);
          for (var u3 = false, l2 = 0; l2 < 8; l2++)
            u3 && e3[l2] === 0 || (u3 && (u3 = false), r2 !== l2 ? (t3 += e3[l2].toString(16), l2 !== 7 && (t3 += ":")) : (t3 += l2 === 0 ? "::" : ":", u3 = true));
          return t3;
        }
        function A(e3, t3, r2, i3, o2) {
          var l2, c3, y4, _2;
          if (i3 === void 0) {
            i3 = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
            var E3 = /^[\u0000-\u001F\u0020]+/, D3 = /[\u0000-\u001F\u0020]+$/;
            (E3.test(e3) || D3.test(e3)) && v("Input string contains leading or trailing control characters or space."), e3 = (e3 = e3.replace(E3, "")).replace(D3, "");
          }
          var S4 = /[\u0009\u000A\u000D]/g;
          S4.test(e3) && v("Input string contains tab or newline characters."), e3 = e3.replace(S4, "");
          var C2 = o2 === void 0 ? s3.ParserState.SchemeStart : o2;
          t3 === void 0 && (t3 = null);
          for (var A2 = r2 === void 0 || r2 === "replacement" || r2 === "UTF-16BE" || r2 === "UTF-16LE" ? "UTF-8" : r2, L3 = "", M4 = false, B3 = false, j2 = false, R3 = new a3.StringWalker(e3); ; ) {
            switch (C2) {
              case s3.ParserState.SchemeStart:
                if (u2.codePoint.ASCIIAlpha.test(R3.c()))
                  L3 += R3.c().toLowerCase(), C2 = s3.ParserState.Scheme;
                else {
                  if (o2 !== void 0)
                    return v("Invalid scheme start character."), null;
                  C2 = s3.ParserState.NoScheme, R3.pointer--;
                }
                break;
              case s3.ParserState.Scheme:
                if (u2.codePoint.ASCIIAlphanumeric.test(R3.c()) || R3.c() === "+" || R3.c() === "-" || R3.c() === ".")
                  L3 += R3.c().toLowerCase();
                else {
                  if (R3.c() !== ":") {
                    if (o2 === void 0) {
                      L3 = "", C2 = s3.ParserState.NoScheme, R3.pointer = 0;
                      continue;
                    }
                    return v("Invalid input string."), null;
                  }
                  if (o2 !== void 0) {
                    if (g(i3.scheme) && !g(L3))
                      return i3;
                    if (!g(i3.scheme) && g(L3))
                      return i3;
                    if ((w2(i3) || i3.port !== null) && L3 === "file")
                      return i3;
                    if (i3.scheme === "file" && (i3.host === "" || i3.host === null))
                      return i3;
                  }
                  if (i3.scheme = L3, o2 !== void 0)
                    return i3.port === x2(i3.scheme) && (i3.port = null), i3;
                  L3 = "", i3.scheme === "file" ? (R3.remaining().startsWith("//") || v("Invalid file URL scheme, '//' expected."), C2 = s3.ParserState.File) : b2(i3) && t3 !== null && t3.scheme === i3.scheme ? C2 = s3.ParserState.SpecialRelativeOrAuthority : b2(i3) ? C2 = s3.ParserState.SpecialAuthoritySlashes : R3.remaining().startsWith("/") ? (C2 = s3.ParserState.PathOrAuthority, R3.pointer++) : (i3._cannotBeABaseURLFlag = true, i3.path.push(""), C2 = s3.ParserState.CannotBeABaseURLPath);
                }
                break;
              case s3.ParserState.NoScheme:
                if (t3 === null || t3._cannotBeABaseURLFlag && R3.c() !== "#")
                  return v("Invalid input string."), null;
                t3._cannotBeABaseURLFlag && R3.c() === "#" ? (i3.scheme = t3.scheme, i3.path = u2.list.clone(t3.path), i3.query = t3.query, i3.fragment = "", i3._cannotBeABaseURLFlag = true, C2 = s3.ParserState.Fragment) : t3.scheme !== "file" ? (C2 = s3.ParserState.Relative, R3.pointer--) : (C2 = s3.ParserState.File, R3.pointer--);
                break;
              case s3.ParserState.SpecialRelativeOrAuthority:
                R3.c() === "/" && R3.remaining().startsWith("/") ? (C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes, R3.pointer++) : (v("Invalid input string."), C2 = s3.ParserState.Relative, R3.pointer--);
                break;
              case s3.ParserState.PathOrAuthority:
                R3.c() === "/" ? C2 = s3.ParserState.Authority : (C2 = s3.ParserState.Path, R3.pointer--);
                break;
              case s3.ParserState.Relative:
                if (t3 === null)
                  throw new Error("Invalid parser state. Base URL is null.");
                switch (i3.scheme = t3.scheme, R3.c()) {
                  case "":
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.query = t3.query;
                    break;
                  case "/":
                    C2 = s3.ParserState.RelativeSlash;
                    break;
                  case "?":
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.query = "", C2 = s3.ParserState.Query;
                    break;
                  case "#":
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.query = t3.query, i3.fragment = "", C2 = s3.ParserState.Fragment;
                    break;
                  default:
                    b2(i3) && R3.c() === "\\" ? (v("Invalid input string."), C2 = s3.ParserState.RelativeSlash) : (i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.path.length !== 0 && i3.path.splice(i3.path.length - 1, 1), C2 = s3.ParserState.Path, R3.pointer--);
                }
                break;
              case s3.ParserState.RelativeSlash:
                if (!b2(i3) || R3.c() !== "/" && R3.c() !== "\\")
                  if (R3.c() === "/")
                    C2 = s3.ParserState.Authority;
                  else {
                    if (t3 === null)
                      throw new Error("Invalid parser state. Base URL is null.");
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, C2 = s3.ParserState.Path, R3.pointer--;
                  }
                else
                  R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes;
                break;
              case s3.ParserState.SpecialAuthoritySlashes:
                R3.c() === "/" && R3.remaining().startsWith("/") ? (C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes, R3.pointer++) : (v("Expected '//'."), C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes, R3.pointer--);
                break;
              case s3.ParserState.SpecialAuthorityIgnoreSlashes:
                R3.c() !== "/" && R3.c() !== "\\" ? (C2 = s3.ParserState.Authority, R3.pointer--) : v("Unexpected '/' or '\\'.");
                break;
              case s3.ParserState.Authority:
                if (R3.c() === "@") {
                  v("Unexpected '@'."), M4 && (L3 = "%40" + L3), M4 = true;
                  try {
                    for (var U2 = (l2 = void 0, n(L3)), G3 = U2.next(); !G3.done; G3 = U2.next()) {
                      var q3 = G3.value;
                      if (q3 !== ":" || j2) {
                        var W2 = X2(q3, d3);
                        j2 ? i3.password += W2 : i3.username += W2;
                      } else
                        j2 = true;
                    }
                  } catch (e4) {
                    l2 = { error: e4 };
                  } finally {
                    try {
                      G3 && !G3.done && (c3 = U2.return) && c3.call(U2);
                    } finally {
                      if (l2)
                        throw l2.error;
                    }
                  }
                  L3 = "";
                } else if (R3.c() === "" || R3.c() === "/" || R3.c() === "?" || R3.c() === "#" || b2(i3) && R3.c() === "\\") {
                  if (M4 && L3 === "")
                    return v("Invalid input string."), null;
                  R3.pointer -= L3.length + 1, L3 = "", C2 = s3.ParserState.Host;
                } else
                  L3 += R3.c();
                break;
              case s3.ParserState.Host:
              case s3.ParserState.Hostname:
                if (o2 !== void 0 && i3.scheme === "file")
                  R3.pointer--, C2 = s3.ParserState.FileHost;
                else if (R3.c() !== ":" || B3)
                  if (R3.c() === "" || R3.c() === "/" || R3.c() === "?" || R3.c() === "#" || b2(i3) && R3.c() === "\\") {
                    if (R3.pointer--, b2(i3) && L3 === "")
                      return v("Invalid input string."), null;
                    if (o2 !== void 0 && L3 === "" && (w2(i3) || i3.port !== null))
                      return v("Invalid input string."), i3;
                    if ((J = I2(L3, !b2(i3))) === null)
                      return null;
                    if (i3.host = J, L3 = "", C2 = s3.ParserState.PathStart, o2 !== void 0)
                      return i3;
                  } else
                    R3.c() === "[" && (B3 = true), R3.c() === "]" && (B3 = false), L3 += R3.c();
                else {
                  if (L3 === "")
                    return v("Invalid input string."), null;
                  if ((J = I2(L3, !b2(i3))) === null)
                    return null;
                  if (i3.host = J, L3 = "", C2 = s3.ParserState.Port, o2 === s3.ParserState.Hostname)
                    return i3;
                }
                break;
              case s3.ParserState.Port:
                if (u2.codePoint.ASCIIDigit.test(R3.c()))
                  L3 += R3.c();
                else {
                  if (!(R3.c() === "" || R3.c() === "/" || R3.c() === "?" || R3.c() === "#" || b2(i3) && R3.c() === "\\" || o2))
                    return v("Invalid input string."), null;
                  if (L3 !== "" && L3 !== "") {
                    var H4 = parseInt(L3, 10);
                    if (H4 > Math.pow(2, 16) - 1)
                      return v("Invalid port number."), null;
                    i3.port = H4 === x2(i3.scheme) ? null : H4, L3 = "";
                  }
                  if (o2 !== void 0)
                    return i3;
                  C2 = s3.ParserState.PathStart, R3.pointer--;
                }
                break;
              case s3.ParserState.File:
                if (i3.scheme = "file", R3.c() === "/" || R3.c() === "\\")
                  R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.FileSlash;
                else if (t3 !== null && t3.scheme === "file")
                  switch (R3.c()) {
                    case "":
                      i3.host = t3.host, i3.path = u2.list.clone(t3.path), i3.query = t3.query;
                      break;
                    case "?":
                      i3.host = t3.host, i3.path = u2.list.clone(t3.path), i3.query = "", C2 = s3.ParserState.Query;
                      break;
                    case "#":
                      i3.host = t3.host, i3.path = u2.list.clone(t3.path), i3.query = t3.query, i3.fragment = "", C2 = s3.ParserState.Fragment;
                      break;
                    default:
                      P(R3.substring()) ? v("Unexpected windows drive letter in input string.") : (i3.host = t3.host, i3.path = u2.list.clone(t3.path), O2(i3)), C2 = s3.ParserState.Path, R3.pointer--;
                  }
                else
                  C2 = s3.ParserState.Path, R3.pointer--;
                break;
              case s3.ParserState.FileSlash:
                R3.c() === "/" || R3.c() === "\\" ? (R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.FileHost) : (t3 === null || t3.scheme !== "file" || P(R3.substring()) || (F(t3.path[0]) ? i3.path.push(t3.path[0]) : i3.host = t3.host), C2 = s3.ParserState.Path, R3.pointer--);
                break;
              case s3.ParserState.FileHost:
                if (R3.c() === "" || R3.c() === "/" || R3.c() === "\\" || R3.c() === "?" || R3.c() === "#")
                  if (R3.pointer--, o2 === void 0 && k2(L3))
                    v("Unexpected windows drive letter in input string."), C2 = s3.ParserState.Path;
                  else if (L3 === "") {
                    if (i3.host = "", o2 !== void 0)
                      return i3;
                    C2 = s3.ParserState.PathStart;
                  } else {
                    var J;
                    if ((J = I2(L3, !b2(i3))) === null)
                      return null;
                    if (J === "localhost" && (J = ""), i3.host = J, o2 !== void 0)
                      return i3;
                    L3 = "", C2 = s3.ParserState.PathStart;
                  }
                else
                  L3 += R3.c();
                break;
              case s3.ParserState.PathStart:
                b2(i3) ? (R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.Path, R3.c() !== "/" && R3.c() !== "\\" && R3.pointer--) : o2 === void 0 && R3.c() === "?" ? (i3.query = "", C2 = s3.ParserState.Query) : o2 === void 0 && R3.c() === "#" ? (i3.fragment = "", C2 = s3.ParserState.Fragment) : R3.c() !== "" && (C2 = s3.ParserState.Path, R3.c() !== "/" && R3.pointer--);
                break;
              case s3.ParserState.Path:
                if (R3.c() === "" || R3.c() === "/" || b2(i3) && R3.c() === "\\" || o2 === void 0 && (R3.c() === "?" || R3.c() === "#")) {
                  if (b2(i3) && R3.c() === "\\" && v("Invalid input string."), T2(L3))
                    O2(i3), R3.c() === "/" || b2(i3) && R3.c() === "\\" || i3.path.push("");
                  else if (!N(L3) || R3.c() === "/" || b2(i3) && R3.c() === "\\") {
                    if (!N(L3)) {
                      if (i3.scheme === "file" && i3.path.length === 0 && k2(L3)) {
                        i3.host !== null && i3.host !== "" && (v("Invalid input string."), i3.host = "");
                        var Y2 = Array.from(L3);
                        L3 = Y2.slice(0, 1) + ":" + Y2.slice(2);
                      }
                      i3.path.push(L3);
                    }
                  } else
                    i3.path.push("");
                  if (L3 = "", i3.scheme === "file" && (R3.c() === "" || R3.c() === "?" || R3.c() === "#"))
                    for (; i3.path.length > 1 && i3.path[0] === ""; )
                      v("Invalid input string."), i3.path.splice(0, 1);
                  R3.c() === "?" && (i3.query = "", C2 = s3.ParserState.Query), R3.c() === "#" && (i3.fragment = "", C2 = s3.ParserState.Fragment);
                } else
                  m3.test(R3.c()) || R3.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R3.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R3.remaining()) || v("Percent encoded character must be followed by two hex digits."), L3 += X2(R3.c(), f);
                break;
              case s3.ParserState.CannotBeABaseURLPath:
                R3.c() === "?" ? (i3.query = "", C2 = s3.ParserState.Query) : R3.c() === "#" ? (i3.fragment = "", C2 = s3.ParserState.Fragment) : (R3.c() === "" || m3.test(R3.c()) || R3.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R3.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R3.remaining()) || v("Percent encoded character must be followed by two hex digits."), R3.c() !== "" && (i3.path[0] += X2(R3.c(), h3)));
                break;
              case s3.ParserState.Query:
                if (A2 === "UTF-8" || b2(i3) && i3.scheme !== "ws" && i3.scheme !== "wss" || (A2 = "UTF-8"), o2 === void 0 && R3.c() === "#")
                  i3.fragment = "", C2 = s3.ParserState.Fragment;
                else if (R3.c() !== "") {
                  if (m3.test(R3.c()) || R3.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R3.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R3.remaining()) || v("Percent encoded character must be followed by two hex digits."), A2.toUpperCase() !== "UTF-8")
                    throw new Error("Only UTF-8 encoding is supported.");
                  var V = a3.utf8Encode(R3.c());
                  if (V.length >= 3 && V[0] === 38 && V[1] === 35 && V[V.length - 1] === 59)
                    V = V.subarray(2, V.length - 1), i3.query += "%26%23" + u2.byteSequence.isomorphicDecode(V) + "%3B";
                  else
                    try {
                      for (var K2 = (y4 = void 0, n(V)), $ = K2.next(); !$.done; $ = K2.next()) {
                        var Q2 = $.value;
                        Q2 < 33 || Q2 > 126 || Q2 === 34 || Q2 === 35 || Q2 === 60 || Q2 === 62 || Q2 === 39 && b2(i3) ? i3.query += z2(Q2) : i3.query += String.fromCharCode(Q2);
                      }
                    } catch (e4) {
                      y4 = { error: e4 };
                    } finally {
                      try {
                        $ && !$.done && (_2 = K2.return) && _2.call(K2);
                      } finally {
                        if (y4)
                          throw y4.error;
                      }
                    }
                }
                break;
              case s3.ParserState.Fragment:
                R3.c() === "" || (R3.c() === "\0" ? v("NULL character in input string.") : (m3.test(R3.c()) || R3.c() === "%" || v("Unexpected character in fragment string."), R3.c() !== "%" || /^[A-Za-z0-9][A-Za-z0-9]/.test(R3.remaining()) || v("Unexpected character in fragment string."), i3.fragment += X2(R3.c(), p)));
            }
            if (R3.eof)
              break;
            R3.pointer++;
          }
          return i3;
        }
        function N(e3) {
          return e3 === "." || e3.toLowerCase() === "%2e";
        }
        function T2(e3) {
          var t3 = e3.toLowerCase();
          return t3 === ".." || t3 === ".%2e" || t3 === "%2e." || t3 === "%2e%2e";
        }
        function O2(e3) {
          var t3 = e3.path;
          t3.length !== 0 && (e3.scheme === "file" && t3.length === 1 && F(t3[0]) || e3.path.splice(e3.path.length - 1, 1));
        }
        function F(e3) {
          return e3.length >= 2 && u2.codePoint.ASCIIAlpha.test(e3[0]) && e3[1] === ":";
        }
        function k2(e3) {
          return e3.length >= 2 && u2.codePoint.ASCIIAlpha.test(e3[0]) && (e3[1] === ":" || e3[1] === "|");
        }
        function P(e3) {
          return e3.length >= 2 && k2(e3) && (e3.length === 2 || e3[2] === "/" || e3[2] === "\\" || e3[2] === "?" || e3[2] === "#");
        }
        function I2(e3, t3) {
          if (t3 === void 0 && (t3 = false), e3.startsWith("["))
            return e3.endsWith("]") ? B2(e3.substring(1, e3.length - 1)) : (v("Expected ']' after '['."), null);
          if (t3)
            return j(e3);
          var r2 = H3(a3.utf8Decode(G2(e3)));
          if (r2 === null)
            return v("Invalid domain."), null;
          if (y3.test(r2))
            return v("Invalid domain."), null;
          var n2 = M3(r2);
          return n2 === null || a3.isNumber(n2) ? n2 : r2;
        }
        function L2(e3, t3) {
          t3 === void 0 && (t3 = { value: false });
          var r2 = 10;
          return e3.startsWith("0x") || e3.startsWith("0X") ? (t3.value = true, e3 = e3.substr(2), r2 = 16) : e3.length >= 2 && e3[0] === "0" && (t3.value = true, e3 = e3.substr(1), r2 = 8), e3 === "" ? 0 : (r2 === 10 ? /^[0-9]+$/ : r2 === 16 ? /^[0-9A-Fa-f]+$/ : /^[0-7]+$/).test(e3) ? parseInt(e3, r2) : null;
        }
        function M3(e3) {
          var t3, r2, i3, o2, a4 = { value: false }, s4 = e3.split(".");
          if (s4[s4.length - 1] === "" && (a4.value = true, s4.length > 1 && s4.pop()), s4.length > 4)
            return e3;
          var u3 = [];
          try {
            for (var l2 = n(s4), c3 = l2.next(); !c3.done; c3 = l2.next()) {
              var h4 = c3.value;
              if (h4 === "")
                return e3;
              if ((_2 = L2(h4, a4)) === null)
                return e3;
              u3.push(_2);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          a4.value && v("Invalid IP v4 address.");
          for (var p2 = 0; p2 < u3.length; p2++) {
            if (u3[p2] > 255 && (v("Invalid IP v4 address."), p2 < u3.length - 1))
              return null;
          }
          if (u3[u3.length - 1] >= Math.pow(256, 5 - u3.length))
            return v("Invalid IP v4 address."), null;
          var f2 = u3[u3.length - 1];
          u3.pop();
          var d4 = 0;
          try {
            for (var m4 = n(u3), y4 = m4.next(); !y4.done; y4 = m4.next()) {
              var _2;
              f2 += (_2 = y4.value) * Math.pow(256, 3 - d4), d4++;
            }
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              y4 && !y4.done && (o2 = m4.return) && o2.call(m4);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return f2;
        }
        function B2(e3) {
          var t3, r2 = [0, 0, 0, 0, 0, 0, 0, 0], n2 = 0, o2 = null, s4 = new a3.StringWalker(e3);
          if (s4.c() === ":") {
            if (!s4.remaining().startsWith(":"))
              return v("Invalid IP v6 address."), null;
            s4.pointer += 2, o2 = n2 += 1;
          }
          for (; s4.c() !== ""; ) {
            if (n2 === 8)
              return v("Invalid IP v6 address."), null;
            if (s4.c() !== ":") {
              for (var l2 = 0, c3 = 0; c3 < 4 && u2.codePoint.ASCIIHexDigit.test(s4.c()); )
                l2 = 16 * l2 + parseInt(s4.c(), 16), s4.pointer++, c3++;
              if (s4.c() === ".") {
                if (c3 === 0)
                  return v("Invalid IP v6 address."), null;
                if (s4.pointer -= c3, n2 > 6)
                  return v("Invalid IP v6 address."), null;
                for (var h4 = 0; s4.c() !== ""; ) {
                  var p2 = null;
                  if (h4 > 0) {
                    if (!(s4.c() === "." && h4 < 4))
                      return v("Invalid IP v6 address."), null;
                    s4.pointer++;
                  }
                  if (!u2.codePoint.ASCIIDigit.test(s4.c()))
                    return v("Invalid IP v6 address."), null;
                  for (; u2.codePoint.ASCIIDigit.test(s4.c()); ) {
                    var f2 = parseInt(s4.c(), 10);
                    if (p2 === null)
                      p2 = f2;
                    else {
                      if (p2 === 0)
                        return v("Invalid IP v6 address."), null;
                      p2 = 10 * p2 + f2;
                    }
                    if (p2 > 255)
                      return v("Invalid IP v6 address."), null;
                    s4.pointer++;
                  }
                  if (p2 === null)
                    return v("Invalid IP v6 address."), null;
                  r2[n2] = 256 * r2[n2] + p2, ++h4 !== 2 && h4 !== 4 || n2++;
                }
                if (h4 !== 4)
                  return v("Invalid IP v6 address."), null;
                break;
              }
              if (s4.c() === ":") {
                if (s4.pointer++, s4.c() === "")
                  return v("Invalid IP v6 address."), null;
              } else if (s4.c() !== "")
                return v("Invalid IP v6 address."), null;
              r2[n2] = l2, n2++;
            } else {
              if (o2 !== null)
                return v("Invalid IP v6 address."), null;
              s4.pointer++, o2 = ++n2;
            }
          }
          if (o2 !== null) {
            var d4 = n2 - o2;
            for (n2 = 7; n2 !== 0 && d4 > 0; )
              t3 = i2([r2[o2 + d4 - 1], r2[n2]], 2), r2[n2] = t3[0], r2[o2 + d4 - 1] = t3[1], n2--, d4--;
          } else if (o2 === null && n2 !== 8)
            return v("Invalid IP v6 address."), null;
          return r2;
        }
        function j(e3) {
          var t3, r2;
          if (/[\x00\t\f\r #/:?@\[\\\]]/.test(e3))
            return v("Invalid host string."), null;
          var i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              i3 += X2(a4.value, h3);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function R2(e3) {
          return null;
        }
        function z2(e3) {
          return "%" + ("00" + e3.toString(16).toUpperCase()).slice(-2);
        }
        function U(e3) {
          for (var t3 = function(e4) {
            return e4 >= 48 && e4 <= 57 || e4 >= 65 && e4 <= 70 || e4 >= 97 && e4 <= 102;
          }, r2 = new Uint8Array(e3.length), n2 = 0, i3 = 0; i3 < e3.length; i3++) {
            var o2 = e3[i3];
            if (o2 !== 37)
              r2[n2] = o2, n2++;
            else if (o2 === 37 && i3 >= e3.length - 2)
              r2[n2] = o2, n2++;
            else if (o2 !== 37 || t3(e3[i3 + 1]) && t3(e3[i3 + 2])) {
              var s4 = parseInt(a3.utf8Decode(Uint8Array.of(e3[i3 + 1], e3[i3 + 2])), 16);
              r2[n2] = s4, n2++, i3 += 2;
            } else
              r2[n2] = o2, n2++;
          }
          return r2.subarray(0, n2);
        }
        function G2(e3) {
          return U(a3.utf8Encode(e3));
        }
        function X2(e3, t3) {
          var r2, i3;
          if (!t3.test(e3))
            return e3;
          var o2 = a3.utf8Encode(e3), s4 = "";
          try {
            for (var u3 = n(o2), l2 = u3.next(); !l2.done; l2 = u3.next()) {
              s4 += z2(l2.value);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              l2 && !l2.done && (i3 = u3.return) && i3.call(u3);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return s4;
        }
        function q2(e3) {
          var t3, r2, i3, o2, s4 = [], u3 = [];
          try {
            for (var l2 = n(e3), c3 = l2.next(); !c3.done; c3 = l2.next()) {
              var h4 = c3.value;
              h4 === 38 ? (s4.push(Uint8Array.from(u3)), u3 = []) : u3.push(h4);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          u3.length !== 0 && s4.push(Uint8Array.from(u3));
          var p2 = [];
          try {
            for (var f2 = n(s4), d4 = f2.next(); !d4.done; d4 = f2.next()) {
              var m4 = d4.value;
              if (m4.length !== 0) {
                for (var y4 = m4.indexOf(61), v2 = y4 !== -1 ? m4.slice(0, y4) : m4, _2 = y4 !== -1 ? m4.slice(y4 + 1) : new Uint8Array(), g2 = 0; g2 < v2.length; g2++)
                  v2[g2] === 43 && (v2[g2] = 32);
                for (g2 = 0; g2 < _2.length; g2++)
                  _2[g2] === 43 && (_2[g2] = 32);
                var b3 = a3.utf8Decode(v2), x3 = a3.utf8Decode(_2);
                p2.push([b3, x3]);
              }
            }
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              d4 && !d4.done && (o2 = f2.return) && o2.call(f2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return p2;
        }
        function W(e3) {
          var t3, r2, i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value;
              i3 += s4 === 32 ? "+" : s4 === 42 || s4 === 45 || s4 === 46 || s4 >= 48 && s4 <= 57 || s4 >= 65 && s4 <= 90 || s4 === 95 || s4 >= 97 && s4 <= 122 ? String.fromCodePoint(s4) : z2(s4);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function H3(e3, t3) {
          t3 === void 0 && (t3 = false);
          var r2 = l.domainToASCII(e3);
          return r2 === "" ? (v("Invalid domain name."), null) : r2;
        }
        t2.setValidationErrorCallback = function(e3) {
          o = e3;
        }, t2.newURL = _, t2.isSpecialScheme = g, t2.isSpecial = b2, t2.defaultPort = x2, t2.includesCredentials = w2, t2.cannotHaveAUsernamePasswordPort = function(e3) {
          return e3.host === null || e3.host === "" || e3._cannotBeABaseURLFlag || e3.scheme === "file";
        }, t2.urlSerializer = E2, t2.hostSerializer = D2, t2.iPv4Serializer = S3, t2.iPv6Serializer = C, t2.urlParser = function(e3, t3, r2) {
          var n2 = A(e3, t3, r2);
          return n2 === null ? null : (n2.scheme !== "blob" || (n2._blobURLEntry = null), n2);
        }, t2.basicURLParser = A, t2.setTheUsername = function(e3, t3) {
          var r2, i3, o2 = "";
          try {
            for (var a4 = n(t3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              o2 += X2(s4.value, d3);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e3.username = o2;
        }, t2.setThePassword = function(e3, t3) {
          var r2, i3, o2 = "";
          try {
            for (var a4 = n(t3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              o2 += X2(s4.value, d3);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e3.password = o2;
        }, t2.isSingleDotPathSegment = N, t2.isDoubleDotPathSegment = T2, t2.shorten = O2, t2.isNormalizedWindowsDriveLetter = F, t2.isWindowsDriveLetter = k2, t2.startsWithAWindowsDriveLetter = P, t2.hostParser = I2, t2.iPv4NumberParser = L2, t2.iPv4Parser = M3, t2.iPv6Parser = B2, t2.opaqueHostParser = j, t2.resolveABlobURL = R2, t2.percentEncode = z2, t2.percentDecode = U, t2.stringPercentDecode = G2, t2.utf8PercentEncode = X2, t2.hostEquals = function(e3, t3) {
          return e3 === t3;
        }, t2.urlEquals = function(e3, t3, r2) {
          return r2 === void 0 && (r2 = false), E2(e3, r2) === E2(t3, r2);
        }, t2.urlEncodedStringParser = function(e3) {
          return q2(a3.utf8Encode(e3));
        }, t2.urlEncodedParser = q2, t2.urlEncodedByteSerializer = W, t2.urlEncodedSerializer = function(e3, t3) {
          var r2, i3;
          if ((t3 === void 0 || t3 === "replacement" || t3 === "UTF-16BE" || t3 === "UTF-16LE" ? "UTF-8" : t3).toUpperCase() !== "UTF-8")
            throw new Error("Only UTF-8 encoding is supported.");
          var o2 = "";
          try {
            for (var s4 = n(e3), u3 = s4.next(); !u3.done; u3 = s4.next()) {
              var l2 = u3.value, c3 = W(a3.utf8Encode(l2[0])), h4 = l2[1];
              h4 = W(a3.utf8Encode(h4)), o2 !== "" && (o2 += "&"), o2 += c3 + "=" + h4;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.origin = function e3(t3) {
          switch (t3.scheme) {
            case "blob":
              t3._blobURLEntry;
              var r2 = A(t3.path[0]);
              return r2 === null ? s3.OpaqueOrigin : e3(r2);
            case "ftp":
            case "http":
            case "https":
            case "ws":
            case "wss":
              return [t3.scheme, t3.host === null ? "" : t3.host, t3.port, null];
            case "file":
            default:
              return s3.OpaqueOrigin;
          }
        }, t2.domainToASCII = H3, t2.domainToUnicode = function(e3, t3) {
          t3 === void 0 && (t3 = false);
          var r2 = l.domainToUnicode(e3);
          return r2 === "" && v("Invalid domain name."), r2;
        }, t2.asciiSerializationOfAnOrigin = function(e3) {
          if (e3[0] === "" && e3[1] === "" && e3[2] === null && e3[3] === null)
            return "null";
          var t3 = e3[0] + "://" + D2(e3[1]);
          return e3[2] !== null && (t3 += ":" + e3[2].toString()), t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(0), i2 = function() {
          function e3() {
            this._signal = n.create_abortSignal();
          }
          return Object.defineProperty(e3.prototype, "signal", { get: function() {
            return this._signal;
          }, enumerable: true, configurable: true }), e3.prototype.abort = function() {
            n.abort_signalAbort(this._signal);
          }, e3;
        }();
        t2.AbortControllerImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(70), a3 = r(0), s3 = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._abortedFlag = false, t4._abortAlgorithms = /* @__PURE__ */ new Set(), t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "aborted", { get: function() {
            return this._abortedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "onabort", { get: function() {
            return a3.event_getterEventHandlerIDLAttribute(this, "onabort");
          }, set: function(e4) {
            a3.event_setterEventHandlerIDLAttribute(this, "onabort", e4);
          }, enumerable: true, configurable: true }), t3._create = function() {
            return new t3();
          }, t3;
        }(o.EventTargetImpl);
        t2.AbortSignalImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(34), s3 = r(12), u2 = function(e3) {
          function t3(t4, r2, n2) {
            var i3 = e3.call(this) || this;
            return i3._name = "", i3._publicId = "", i3._systemId = "", i3._name = t4, i3._publicId = r2, i3._systemId = n2, i3;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "name", { get: function() {
            return this._name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "publicId", { get: function() {
            return this._publicId;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "systemId", { get: function() {
            return this._systemId;
          }, enumerable: true, configurable: true }), t3.prototype.before = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.after = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.replaceWith = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3._create = function(e4, r2, n2, i3) {
            n2 === void 0 && (n2 = ""), i3 === void 0 && (i3 = "");
            var o2 = new t3(r2, n2, i3);
            return o2._nodeDocument = e4, o2;
          }, t3;
        }(a3.NodeImpl);
        t2.DocumentTypeImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.DocumentType);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(100), a3 = r(1), s3 = r(0), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this) || this;
            return n2._host = t4, n2._mode = r2, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "mode", { get: function() {
            return this._mode;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "host", { get: function() {
            return this._host;
          }, enumerable: true, configurable: true }), t3.prototype._getTheParent = function(e4) {
            return e4._composedFlag || a3.isEmpty(e4._path) || s3.tree_rootNode(e4._path[0].invocationTarget) !== this ? this._host : null;
          }, t3._create = function(e4, r2) {
            return new t3(r2, "closed");
          }, t3;
        }(o.DocumentFragmentImpl);
        t2.ShadowRootImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(34), s3 = r(0), u2 = r(12), l = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this) || this;
            return r2._namespace = null, r2._namespacePrefix = null, r2._element = null, r2._value = "", r2._localName = t4, r2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "ownerElement", { get: function() {
            return this._element;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "name", { get: function() {
            return this._qualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "value", { get: function() {
            return this._value;
          }, set: function(e4) {
            s3.attr_setAnExistingAttributeValue(this, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix !== null ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2) {
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(a3.NodeImpl);
        t2.AttrImpl = l, u2.idl_defineConst(l.prototype, "_nodeType", o.NodeType.Attribute), u2.idl_defineConst(l.prototype, "specified", true);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(101), a3 = r(2), s3 = r(12), u2 = function(e3) {
          function t3(t4) {
            return e3.call(this, t4) || this;
          }
          return i2(t3, e3), t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(o.TextImpl);
        t2.CDATASectionImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", a3.NodeType.CData);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(71), s3 = r(12), u2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, t4) || this;
          }
          return i2(t3, e3), t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(a3.CharacterDataImpl);
        t2.CommentImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.Comment);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(71), s3 = r(12), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, r2) || this;
            return n2._target = t4, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2, n2) {
            var i3 = new t3(r2, n2);
            return i3._nodeDocument = e4, i3;
          }, t3;
        }(a3.CharacterDataImpl);
        t2.ProcessingInstructionImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.ProcessingInstruction);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(7), i2 = r(0), o = r(3), a3 = r(1), s3 = function() {
          function e3(e4, t3) {
            return this._live = true, this._root = e4, this._filter = t3, new Proxy(this, this);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            for (var e4 = this, t3 = 0, r2 = i2.tree_getFirstDescendantNode(this._root, false, false, function(t4) {
              return o.Guard.isElementNode(t4) && e4._filter(t4);
            }); r2 !== null; )
              t3++, r2 = i2.tree_getNextDescendantNode(this._root, r2, false, false, function(t4) {
                return o.Guard.isElementNode(t4) && e4._filter(t4);
              });
            return t3;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            for (var t3 = this, r2 = 0, n2 = i2.tree_getFirstDescendantNode(this._root, false, false, function(e5) {
              return o.Guard.isElementNode(e5) && t3._filter(e5);
            }); n2 !== null; ) {
              if (r2 === e4)
                return n2;
              r2++, n2 = i2.tree_getNextDescendantNode(this._root, n2, false, false, function(e5) {
                return o.Guard.isElementNode(e5) && t3._filter(e5);
              });
            }
            return null;
          }, e3.prototype.namedItem = function(e4) {
            var t3 = this;
            if (e4 === "")
              return null;
            for (var r2 = i2.tree_getFirstDescendantNode(this._root, false, false, function(e5) {
              return o.Guard.isElementNode(e5) && t3._filter(e5);
            }); r2 != null; ) {
              if (r2._uniqueIdentifier === e4)
                return r2;
              if (r2._namespace === n.namespace.HTML)
                for (var a4 = 0; a4 < r2._attributeList.length; a4++) {
                  var s4 = r2._attributeList[a4];
                  if (s4._localName === "name" && s4._namespace === null && s4._namespacePrefix === null && s4._value === e4)
                    return r2;
                }
              r2 = i2.tree_getNextDescendantNode(this._root, r2, false, false, function(e5) {
                return o.Guard.isElementNode(e5) && t3._filter(e5);
              });
            }
            return null;
          }, e3.prototype[Symbol.iterator] = function() {
            var e4 = this._root, t3 = this._filter, r2 = i2.tree_getFirstDescendantNode(e4, false, false, function(e5) {
              return o.Guard.isElementNode(e5) && t3(e5);
            });
            return { next: function() {
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = i2.tree_getNextDescendantNode(e4, r2, false, false, function(e5) {
                return o.Guard.isElementNode(e5) && t3(e5);
              }), n2;
            } };
          }, e3.prototype.get = function(t3, r2, n2) {
            if (!a3.isString(r2) || e3.reservedNames.indexOf(r2) !== -1)
              return Reflect.get(t3, r2, n2);
            var i3 = Number(r2);
            return isNaN(i3) ? t3.namedItem(r2) || void 0 : t3.item(i3) || void 0;
          }, e3.prototype.set = function(t3, r2, n2, o2) {
            if (!a3.isString(r2) || e3.reservedNames.indexOf(r2) !== -1)
              return Reflect.set(t3, r2, n2, o2);
            var s4 = Number(r2), u2 = isNaN(s4) ? t3.namedItem(r2) || void 0 : t3.item(s4) || void 0;
            return !(!u2 || !u2._parent) && (i2.mutation_replace(u2, n2, u2._parent), true);
          }, e3._create = function(t3, r2) {
            return r2 === void 0 && (r2 = function() {
              return true;
            }), new e3(t3, r2);
          }, e3.reservedNames = ["_root", "_live", "_filter", "length", "item", "namedItem", "get", "set"], e3;
        }();
        t2.HTMLCollectionImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(1), a3 = r(0), s3 = function() {
          function e3(e4) {
            return this._live = true, this._filter = null, this._length = 0, this._root = e4, new Proxy(this, this);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._root._children.size;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            if (e4 < 0 || e4 > this.length - 1)
              return null;
            if (e4 < this.length / 2) {
              for (var t3 = 0, r2 = this._root._firstChild; r2 !== null && t3 !== e4; )
                r2 = r2._nextSibling, t3++;
              return r2;
            }
            for (t3 = this.length - 1, r2 = this._root._lastChild; r2 !== null && t3 !== e4; )
              r2 = r2._previousSibling, t3--;
            return r2;
          }, e3.prototype.keys = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = 0;
              return { next: function() {
                return e5 === this.length ? { done: true, value: null } : { done: false, value: e5++ };
              }.bind(this) };
            }.bind(this), e4;
          }, e3.prototype.values = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator]();
              return { next: function() {
                return e5.next();
              } };
            }.bind(this), e4;
          }, e3.prototype.entries = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator](), t3 = 0;
              return { next: function() {
                var r2 = e5.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t3++, r2.value] };
              } };
            }.bind(this), e4;
          }, e3.prototype[Symbol.iterator] = function() {
            return this._root._children[Symbol.iterator]();
          }, e3.prototype.forEach = function(e4, t3) {
            var r2, o2;
            t3 === void 0 && (t3 = i2.dom.window);
            var a4 = 0;
            try {
              for (var s4 = n(this._root._children), u2 = s4.next(); !u2.done; u2 = s4.next()) {
                var l = u2.value;
                e4.call(t3, l, a4++, this);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u2 && !u2.done && (o2 = s4.return) && o2.call(s4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype.get = function(e4, t3, r2) {
            if (!o.isString(t3))
              return Reflect.get(e4, t3, r2);
            var n2 = Number(t3);
            return isNaN(n2) ? Reflect.get(e4, t3, r2) : e4.item(n2) || void 0;
          }, e3.prototype.set = function(e4, t3, r2, n2) {
            if (!o.isString(t3))
              return Reflect.set(e4, t3, r2, n2);
            var i3 = Number(t3);
            if (isNaN(i3))
              return Reflect.set(e4, t3, r2, n2);
            var s4 = e4.item(i3) || void 0;
            return !!s4 && (!!s4._parent && (a3.mutation_replace(s4, r2, s4._parent), true));
          }, e3._create = function(t3) {
            return new e3(t3);
          }, e3;
        }();
        t2.NodeListImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(1), a3 = function() {
          function e3(e4) {
            return this._live = false, this._items = [], this._length = 0, this._root = e4, this._items = [], this._filter = function(e5) {
              return true;
            }, new Proxy(this, this);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._items.length;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            return e4 < 0 || e4 > this.length - 1 ? null : this._items[e4];
          }, e3.prototype.keys = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = 0;
              return { next: function() {
                return e5 === this.length ? { done: true, value: null } : { done: false, value: e5++ };
              }.bind(this) };
            }.bind(this), e4;
          }, e3.prototype.values = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator]();
              return { next: function() {
                return e5.next();
              } };
            }.bind(this), e4;
          }, e3.prototype.entries = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator](), t3 = 0;
              return { next: function() {
                var r2 = e5.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t3++, r2.value] };
              } };
            }.bind(this), e4;
          }, e3.prototype[Symbol.iterator] = function() {
            var e4 = this._items[Symbol.iterator]();
            return { next: function() {
              return e4.next();
            } };
          }, e3.prototype.forEach = function(e4, t3) {
            var r2, o2;
            t3 === void 0 && (t3 = i2.dom.window);
            var a4 = 0;
            try {
              for (var s3 = n(this._items), u2 = s3.next(); !u2.done; u2 = s3.next()) {
                var l = u2.value;
                e4.call(t3, l, a4++, this);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u2 && !u2.done && (o2 = s3.return) && o2.call(s3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype.get = function(e4, t3, r2) {
            if (!o.isString(t3))
              return Reflect.get(e4, t3, r2);
            var n2 = Number(t3);
            return isNaN(n2) ? Reflect.get(e4, t3, r2) : e4._items[n2] || void 0;
          }, e3.prototype.set = function(e4, t3, r2, n2) {
            if (!o.isString(t3))
              return Reflect.set(e4, t3, r2, n2);
            var i3 = Number(t3);
            return isNaN(i3) ? Reflect.set(e4, t3, r2, n2) : i3 >= 0 && i3 < e4._items.length && (e4._items[i3] = r2, true);
          }, e3._create = function(t3, r2) {
            var n2 = new e3(t3);
            return n2._items = r2, n2;
          }, e3;
        }();
        t2.NodeListStaticImpl = a3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(9), a3 = r(0), s3 = function(e3) {
          function t3(r2) {
            var n2 = e3.call(this) || this;
            return n2._element = r2, Object.setPrototypeOf(n2, t3.prototype), n2;
          }
          return i2(t3, e3), t3.prototype._asArray = function() {
            return this;
          }, t3.prototype.item = function(e4) {
            return this[e4] || null;
          }, t3.prototype.getNamedItem = function(e4) {
            return a3.element_getAnAttributeByName(e4, this._element);
          }, t3.prototype.getNamedItemNS = function(e4, t4) {
            return a3.element_getAnAttributeByNamespaceAndLocalName(e4 || "", t4, this._element);
          }, t3.prototype.setNamedItem = function(e4) {
            return a3.element_setAnAttribute(e4, this._element);
          }, t3.prototype.setNamedItemNS = function(e4) {
            return a3.element_setAnAttribute(e4, this._element);
          }, t3.prototype.removeNamedItem = function(e4) {
            var t4 = a3.element_removeAnAttributeByName(e4, this._element);
            if (t4 === null)
              throw new o.NotFoundError();
            return t4;
          }, t3.prototype.removeNamedItemNS = function(e4, t4) {
            var r2 = a3.element_removeAnAttributeByNamespaceAndLocalName(e4 || "", t4, this._element);
            if (r2 === null)
              throw new o.NotFoundError();
            return r2;
          }, t3._create = function(e4) {
            return new t3(e4);
          }, t3;
        }(Array);
        t2.NamedNodeMapImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(2), u2 = r(102), l = r(9), c2 = r(0), h3 = r(12), p = r(3), f = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this, r2 = a3.dom.window._associatedDocument;
            return t4._start = [r2, 0], t4._end = [r2, 0], a3.dom.rangeList.add(t4), t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "commonAncestorContainer", { get: function() {
            for (var e4 = this._start[0]; !c2.tree_isAncestorOf(this._end[0], e4, true); ) {
              if (e4._parent === null)
                throw new Error("Parent node  is null.");
              e4 = e4._parent;
            }
            return e4;
          }, enumerable: true, configurable: true }), t3.prototype.setStart = function(e4, t4) {
            c2.range_setTheStart(this, e4, t4);
          }, t3.prototype.setEnd = function(e4, t4) {
            c2.range_setTheEnd(this, e4, t4);
          }, t3.prototype.setStartBefore = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheStart(this, t4, c2.tree_index(e4));
          }, t3.prototype.setStartAfter = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheStart(this, t4, c2.tree_index(e4) + 1);
          }, t3.prototype.setEndBefore = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheEnd(this, t4, c2.tree_index(e4));
          }, t3.prototype.setEndAfter = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheEnd(this, t4, c2.tree_index(e4) + 1);
          }, t3.prototype.collapse = function(e4) {
            e4 ? this._end = this._start : this._start = this._end;
          }, t3.prototype.selectNode = function(e4) {
            c2.range_select(e4, this);
          }, t3.prototype.selectNodeContents = function(e4) {
            if (p.Guard.isDocumentTypeNode(e4))
              throw new l.InvalidNodeTypeError();
            var t4 = c2.tree_nodeLength(e4);
            this._start = [e4, 0], this._end = [e4, t4];
          }, t3.prototype.compareBoundaryPoints = function(e4, t4) {
            if (e4 !== s3.HowToCompare.StartToStart && e4 !== s3.HowToCompare.StartToEnd && e4 !== s3.HowToCompare.EndToEnd && e4 !== s3.HowToCompare.EndToStart)
              throw new l.NotSupportedError();
            if (c2.range_root(this) !== c2.range_root(t4))
              throw new l.WrongDocumentError();
            var r2, n2;
            switch (e4) {
              case s3.HowToCompare.StartToStart:
                r2 = this._start, n2 = t4._start;
                break;
              case s3.HowToCompare.StartToEnd:
                r2 = this._end, n2 = t4._start;
                break;
              case s3.HowToCompare.EndToEnd:
                r2 = this._end, n2 = t4._end;
                break;
              case s3.HowToCompare.EndToStart:
                r2 = this._start, n2 = t4._end;
                break;
              default:
                throw new l.NotSupportedError();
            }
            var i3 = c2.boundaryPoint_position(r2, n2);
            return i3 === s3.BoundaryPosition.Before ? -1 : i3 === s3.BoundaryPosition.After ? 1 : 0;
          }, t3.prototype.deleteContents = function() {
            var e4, t4, r2, n2;
            if (!c2.range_collapsed(this)) {
              var i3 = this._startNode, a4 = this._startOffset, s4 = this._endNode, u3 = this._endOffset;
              if (i3 === s4 && p.Guard.isCharacterDataNode(i3))
                c2.characterData_replaceData(i3, a4, u3 - a4, "");
              else {
                var l2, h4, f2 = [];
                try {
                  for (var d3 = o(c2.range_getContainedNodes(this)), m3 = d3.next(); !m3.done; m3 = d3.next()) {
                    var y3 = (b2 = m3.value)._parent;
                    y3 !== null && c2.range_isContained(y3, this) || f2.push(b2);
                  }
                } catch (t5) {
                  e4 = { error: t5 };
                } finally {
                  try {
                    m3 && !m3.done && (t4 = d3.return) && t4.call(d3);
                  } finally {
                    if (e4)
                      throw e4.error;
                  }
                }
                if (c2.tree_isAncestorOf(s4, i3, true))
                  l2 = i3, h4 = a4;
                else {
                  for (var v = i3; v._parent !== null && !c2.tree_isAncestorOf(s4, v._parent, true); )
                    v = v._parent;
                  if (v._parent === null)
                    throw new Error("Parent node is null.");
                  l2 = v._parent, h4 = c2.tree_index(v) + 1;
                }
                p.Guard.isCharacterDataNode(i3) && c2.characterData_replaceData(i3, a4, c2.tree_nodeLength(i3) - a4, "");
                try {
                  for (var _ = o(f2), g = _.next(); !g.done; g = _.next()) {
                    var b2;
                    (b2 = g.value)._parent && c2.mutation_remove(b2, b2._parent);
                  }
                } catch (e5) {
                  r2 = { error: e5 };
                } finally {
                  try {
                    g && !g.done && (n2 = _.return) && n2.call(_);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
                p.Guard.isCharacterDataNode(s4) && c2.characterData_replaceData(s4, 0, u3, ""), this._start = [l2, h4], this._end = [l2, h4];
              }
            }
          }, t3.prototype.extractContents = function() {
            return c2.range_extract(this);
          }, t3.prototype.cloneContents = function() {
            return c2.range_cloneTheContents(this);
          }, t3.prototype.insertNode = function(e4) {
            return c2.range_insert(e4, this);
          }, t3.prototype.surroundContents = function(e4) {
            var t4, r2;
            try {
              for (var n2 = o(c2.range_getPartiallyContainedNodes(this)), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                var a4 = i3.value;
                if (!p.Guard.isTextNode(a4))
                  throw new l.InvalidStateError();
              }
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                i3 && !i3.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            if (p.Guard.isDocumentNode(e4) || p.Guard.isDocumentTypeNode(e4) || p.Guard.isDocumentFragmentNode(e4))
              throw new l.InvalidNodeTypeError();
            var s4 = c2.range_extract(this);
            e4._children.size !== 0 && c2.mutation_replaceAll(null, e4), c2.range_insert(e4, this), c2.mutation_append(s4, e4), c2.range_select(e4, this);
          }, t3.prototype.cloneRange = function() {
            return c2.create_range(this._start, this._end);
          }, t3.prototype.detach = function() {
            a3.dom.rangeList.delete(this);
          }, t3.prototype.isPointInRange = function(e4, t4) {
            if (c2.tree_rootNode(e4) !== c2.range_root(this))
              return false;
            if (p.Guard.isDocumentTypeNode(e4))
              throw new l.InvalidNodeTypeError();
            if (t4 > c2.tree_nodeLength(e4))
              throw new l.IndexSizeError();
            var r2 = [e4, t4];
            return c2.boundaryPoint_position(r2, this._start) !== s3.BoundaryPosition.Before && c2.boundaryPoint_position(r2, this._end) !== s3.BoundaryPosition.After;
          }, t3.prototype.comparePoint = function(e4, t4) {
            if (c2.tree_rootNode(e4) !== c2.range_root(this))
              throw new l.WrongDocumentError();
            if (p.Guard.isDocumentTypeNode(e4))
              throw new l.InvalidNodeTypeError();
            if (t4 > c2.tree_nodeLength(e4))
              throw new l.IndexSizeError();
            var r2 = [e4, t4];
            return c2.boundaryPoint_position(r2, this._start) === s3.BoundaryPosition.Before ? -1 : c2.boundaryPoint_position(r2, this._end) === s3.BoundaryPosition.After ? 1 : 0;
          }, t3.prototype.intersectsNode = function(e4) {
            if (c2.tree_rootNode(e4) !== c2.range_root(this))
              return false;
            var t4 = e4._parent;
            if (t4 === null)
              return true;
            var r2 = c2.tree_index(e4);
            return c2.boundaryPoint_position([t4, r2], this._end) === s3.BoundaryPosition.Before && c2.boundaryPoint_position([t4, r2 + 1], this._start) === s3.BoundaryPosition.After;
          }, t3.prototype.toString = function() {
            var e4, t4, r2 = "";
            if (this._startNode === this._endNode && p.Guard.isTextNode(this._startNode))
              return this._startNode._data.substring(this._startOffset, this._endOffset);
            p.Guard.isTextNode(this._startNode) && (r2 += this._startNode._data.substring(this._startOffset));
            try {
              for (var n2 = o(c2.range_getContainedNodes(this)), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                var a4 = i3.value;
                p.Guard.isTextNode(a4) && (r2 += a4._data);
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                i3 && !i3.done && (t4 = n2.return) && t4.call(n2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return p.Guard.isTextNode(this._endNode) && (r2 += this._endNode._data.substring(0, this._endOffset)), r2;
          }, t3._create = function(e4, r2) {
            var n2 = new t3();
            return e4 && (n2._start = e4), r2 && (n2._end = r2), n2;
          }, t3.START_TO_START = 0, t3.START_TO_END = 1, t3.END_TO_END = 2, t3.END_TO_START = 3, t3;
        }(u2.AbstractRangeImpl);
        t2.RangeImpl = f, h3.idl_defineConst(f.prototype, "START_TO_START", 0), h3.idl_defineConst(f.prototype, "START_TO_END", 1), h3.idl_defineConst(f.prototype, "END_TO_END", 2), h3.idl_defineConst(f.prototype, "END_TO_START", 3);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(103), a3 = r(0), s3 = function(e3) {
          function t3(t4, r2, n2) {
            var i3 = e3.call(this, t4) || this;
            return i3._iteratorCollection = void 0, i3._reference = r2, i3._pointerBeforeReference = n2, a3.nodeIterator_iteratorList().add(i3), i3;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "referenceNode", { get: function() {
            return this._reference;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "pointerBeforeReferenceNode", { get: function() {
            return this._pointerBeforeReference;
          }, enumerable: true, configurable: true }), t3.prototype.nextNode = function() {
            return a3.nodeIterator_traverse(this, true);
          }, t3.prototype.previousNode = function() {
            return a3.nodeIterator_traverse(this, false);
          }, t3.prototype.detach = function() {
            a3.nodeIterator_iteratorList().delete(this);
          }, t3._create = function(e4, r2, n2) {
            return new t3(e4, r2, n2);
          }, t3;
        }(o.TraverserImpl);
        t2.NodeIteratorImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(103), s3 = r(0), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._current = r2, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "currentNode", { get: function() {
            return this._current;
          }, set: function(e4) {
            this._current = e4;
          }, enumerable: true, configurable: true }), t3.prototype.parentNode = function() {
            for (var e4 = this._current; e4 !== null && e4 !== this._root; )
              if ((e4 = e4._parent) !== null && s3.traversal_filter(this, e4) === o.FilterResult.Accept)
                return this._current = e4, e4;
            return null;
          }, t3.prototype.firstChild = function() {
            return s3.treeWalker_traverseChildren(this, true);
          }, t3.prototype.lastChild = function() {
            return s3.treeWalker_traverseChildren(this, false);
          }, t3.prototype.nextSibling = function() {
            return s3.treeWalker_traverseSiblings(this, true);
          }, t3.prototype.previousNode = function() {
            for (var e4 = this._current; e4 !== this._root; ) {
              for (var t4 = e4._previousSibling; t4; ) {
                e4 = t4;
                for (var r2 = s3.traversal_filter(this, e4); r2 !== o.FilterResult.Reject && e4._lastChild; )
                  e4 = e4._lastChild, r2 = s3.traversal_filter(this, e4);
                if (r2 === o.FilterResult.Accept)
                  return this._current = e4, e4;
                t4 = e4._previousSibling;
              }
              if (e4 === this._root || e4._parent === null)
                return null;
              if (e4 = e4._parent, s3.traversal_filter(this, e4) === o.FilterResult.Accept)
                return this._current = e4, e4;
            }
            return null;
          }, t3.prototype.previousSibling = function() {
            return s3.treeWalker_traverseSiblings(this, false);
          }, t3.prototype.nextNode = function() {
            for (var e4 = this._current, t4 = o.FilterResult.Accept; ; ) {
              for (; t4 !== o.FilterResult.Reject && e4._firstChild; )
                if (e4 = e4._firstChild, (t4 = s3.traversal_filter(this, e4)) === o.FilterResult.Accept)
                  return this._current = e4, e4;
              for (var r2 = null, n2 = e4; n2 !== null; ) {
                if (n2 === this._root)
                  return null;
                if ((r2 = n2._nextSibling) !== null) {
                  e4 = r2;
                  break;
                }
                n2 = n2._parent;
              }
              if ((t4 = s3.traversal_filter(this, e4)) === o.FilterResult.Accept)
                return this._current = e4, e4;
            }
          }, t3._create = function(e4, r2) {
            return new t3(e4, r2);
          }, t3;
        }(a3.TraverserImpl);
        t2.TreeWalkerImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(12), o = function() {
          function e3() {
          }
          return e3.prototype.acceptNode = function(e4) {
            return n.FilterResult.Accept;
          }, e3._create = function() {
            return new e3();
          }, e3.FILTER_ACCEPT = 1, e3.FILTER_REJECT = 2, e3.FILTER_SKIP = 3, e3.SHOW_ALL = 4294967295, e3.SHOW_ELEMENT = 1, e3.SHOW_ATTRIBUTE = 2, e3.SHOW_TEXT = 4, e3.SHOW_CDATA_SECTION = 8, e3.SHOW_ENTITY_REFERENCE = 16, e3.SHOW_ENTITY = 32, e3.SHOW_PROCESSING_INSTRUCTION = 64, e3.SHOW_COMMENT = 128, e3.SHOW_DOCUMENT = 256, e3.SHOW_DOCUMENT_TYPE = 512, e3.SHOW_DOCUMENT_FRAGMENT = 1024, e3.SHOW_NOTATION = 2048, e3;
        }();
        t2.NodeFilterImpl = o, i2.idl_defineConst(o.prototype, "FILTER_ACCEPT", 1), i2.idl_defineConst(o.prototype, "FILTER_REJECT", 2), i2.idl_defineConst(o.prototype, "FILTER_SKIP", 3), i2.idl_defineConst(o.prototype, "SHOW_ALL", 4294967295), i2.idl_defineConst(o.prototype, "SHOW_ELEMENT", 1), i2.idl_defineConst(o.prototype, "SHOW_ATTRIBUTE", 2), i2.idl_defineConst(o.prototype, "SHOW_TEXT", 4), i2.idl_defineConst(o.prototype, "SHOW_CDATA_SECTION", 8), i2.idl_defineConst(o.prototype, "SHOW_ENTITY_REFERENCE", 16), i2.idl_defineConst(o.prototype, "SHOW_ENTITY", 32), i2.idl_defineConst(o.prototype, "SHOW_PROCESSING_INSTRUCTION", 64), i2.idl_defineConst(o.prototype, "SHOW_COMMENT", 128), i2.idl_defineConst(o.prototype, "SHOW_DOCUMENT", 256), i2.idl_defineConst(o.prototype, "SHOW_DOCUMENT_TYPE", 512), i2.idl_defineConst(o.prototype, "SHOW_DOCUMENT_FRAGMENT", 1024), i2.idl_defineConst(o.prototype, "SHOW_NOTATION", 2048);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4, t3, r2, n2, i2, o, a3, s3, u2) {
            this._type = e4, this._target = t3, this._addedNodes = r2, this._removedNodes = n2, this._previousSibling = i2, this._nextSibling = o, this._attributeName = a3, this._attributeNamespace = s3, this._oldValue = u2;
          }
          return Object.defineProperty(e3.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "addedNodes", { get: function() {
            return this._addedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "removedNodes", { get: function() {
            return this._removedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "attributeName", { get: function() {
            return this._attributeName;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "attributeNamespace", { get: function() {
            return this._attributeNamespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "oldValue", { get: function() {
            return this._oldValue;
          }, enumerable: true, configurable: true }), e3._create = function(t3, r2, n2, i2, o, a3, s3, u2, l) {
            return new e3(t3, r2, n2, i2, o, a3, s3, u2, l);
          }, e3;
        }();
        t2.MutationRecordImpl = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(9), a3 = r(7), s3 = r(0), u2 = function() {
          function e3(e4, t3) {
            this._element = e4, this._attribute = t3, this._tokenSet = /* @__PURE__ */ new Set();
            var r2 = t3._localName, n2 = s3.element_getAnAttributeValue(e4, r2), o2 = this;
            this._element._attributeChangeSteps.push(function(e5, t4, r3, n3, i3) {
              t4 === o2._attribute._localName && i3 === null && (n3 ? o2._tokenSet = s3.orderedSet_parse(n3) : o2._tokenSet.clear());
            }), i2.dom.features.steps && s3.dom_runAttributeChangeSteps(e4, r2, n2, n2, null);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._tokenSet.size;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            var t3, r2, i3 = 0;
            try {
              for (var o2 = n(this._tokenSet), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                if (i3 === e4)
                  return s4;
                i3++;
              }
            } catch (e5) {
              t3 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return null;
          }, e3.prototype.contains = function(e4) {
            return this._tokenSet.has(e4);
          }, e3.prototype.add = function() {
            for (var e4, t3, r2 = [], i3 = 0; i3 < arguments.length; i3++)
              r2[i3] = arguments[i3];
            try {
              for (var u3 = n(r2), l = u3.next(); !l.done; l = u3.next()) {
                var c2 = l.value;
                if (c2 === "")
                  throw new o.SyntaxError("Cannot add an empty token.");
                if (a3.codePoint.ASCIIWhiteSpace.test(c2))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.add(c2);
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                l && !l.done && (t3 = u3.return) && t3.call(u3);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            s3.tokenList_updateSteps(this);
          }, e3.prototype.remove = function() {
            for (var e4, t3, r2 = [], i3 = 0; i3 < arguments.length; i3++)
              r2[i3] = arguments[i3];
            try {
              for (var u3 = n(r2), l = u3.next(); !l.done; l = u3.next()) {
                var c2 = l.value;
                if (c2 === "")
                  throw new o.SyntaxError("Cannot remove an empty token.");
                if (a3.codePoint.ASCIIWhiteSpace.test(c2))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.delete(c2);
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                l && !l.done && (t3 = u3.return) && t3.call(u3);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            s3.tokenList_updateSteps(this);
          }, e3.prototype.toggle = function(e4, t3) {
            if (t3 === void 0 && (t3 = void 0), e4 === "")
              throw new o.SyntaxError("Cannot toggle an empty token.");
            if (a3.codePoint.ASCIIWhiteSpace.test(e4))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return this._tokenSet.has(e4) ? t3 !== void 0 && t3 !== false || (this._tokenSet.delete(e4), s3.tokenList_updateSteps(this), false) : (t3 === void 0 || t3 === true) && (this._tokenSet.add(e4), s3.tokenList_updateSteps(this), true);
          }, e3.prototype.replace = function(e4, t3) {
            if (e4 === "" || t3 === "")
              throw new o.SyntaxError("Cannot replace an empty token.");
            if (a3.codePoint.ASCIIWhiteSpace.test(e4) || a3.codePoint.ASCIIWhiteSpace.test(t3))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return !!this._tokenSet.has(e4) && (a3.set.replace(this._tokenSet, e4, t3), s3.tokenList_updateSteps(this), true);
          }, e3.prototype.supports = function(e4) {
            return s3.tokenList_validationSteps(this, e4);
          }, Object.defineProperty(e3.prototype, "value", { get: function() {
            return s3.tokenList_serializeSteps(this);
          }, set: function(e4) {
            s3.element_setAnAttributeValue(this._element, this._attribute._localName, e4);
          }, enumerable: true, configurable: true }), e3.prototype[Symbol.iterator] = function() {
            var e4 = this._tokenSet[Symbol.iterator]();
            return { next: function() {
              return e4.next();
            } };
          }, e3._create = function(t3, r2) {
            return new e3(t3, r2);
          }, e3;
        }();
        t2.DOMTokenListImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(104), a3 = r(0), s3 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4, r2) || this;
            return n2._detail = null, n2._detail = r2 && r2.detail || null, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "detail", { get: function() {
            return this._detail;
          }, enumerable: true, configurable: true }), t3.prototype.initCustomEvent = function(e4, t4, r2, n2) {
            t4 === void 0 && (t4 = false), r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = null), this._dispatchFlag || (a3.event_initialize(this, e4, t4, r2), this._detail = n2);
          }, t3;
        }(o.EventImpl);
        t2.CustomEventImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(6), i2 = r(2), o = r(105), a3 = r(17);
        t2.nodeIterator_traverse = function(e3, t3) {
          for (var r2 = e3._reference, n2 = e3._pointerBeforeReference; ; ) {
            if (t3)
              if (n2)
                n2 = false;
              else {
                var s3 = a3.tree_getFollowingNode(e3._root, r2);
                if (!s3)
                  return null;
                r2 = s3;
              }
            else if (n2) {
              var u2 = a3.tree_getPrecedingNode(e3.root, r2);
              if (!u2)
                return null;
              r2 = u2;
            } else
              n2 = true;
            if (o.traversal_filter(e3, r2) === i2.FilterResult.Accept)
              break;
          }
          return e3._reference = r2, e3._pointerBeforeReference = n2, r2;
        }, t2.nodeIterator_iteratorList = function() {
          return n.dom.window._iteratorList;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(9), i2 = r(7), o = r(174);
        function a3(e3) {
          if (!o.xml_isName(e3))
            throw new n.InvalidCharacterError("Invalid XML name: " + e3);
          if (!o.xml_isQName(e3))
            throw new n.InvalidCharacterError("Invalid XML qualified name: " + e3 + ".");
        }
        t2.namespace_validate = a3, t2.namespace_validateAndExtract = function(e3, t3) {
          e3 || (e3 = null), a3(t3);
          var r2 = t3.split(":"), o2 = r2.length === 2 ? r2[0] : null, s3 = r2.length === 2 ? r2[1] : t3;
          if (o2 && e3 === null)
            throw new n.NamespaceError("Qualified name includes a prefix but the namespace is null.");
          if (o2 === "xml" && e3 !== i2.namespace.XML)
            throw new n.NamespaceError('Qualified name includes the "xml" prefix but the namespace is not the XML namespace.');
          if (e3 !== i2.namespace.XMLNS && (o2 === "xmlns" || t3 === "xmlns"))
            throw new n.NamespaceError('Qualified name includes the "xmlns" prefix but the namespace is not the XMLNS namespace.');
          if (e3 === i2.namespace.XMLNS && o2 !== "xmlns" && t3 !== "xmlns")
            throw new n.NamespaceError('Qualified name does not include the "xmlns" prefix but the namespace is the XMLNS namespace.');
          return [e3, o2, s3];
        }, t2.namespace_extractQName = function(e3) {
          a3(e3);
          var t3 = e3.split(":");
          return [t3.length === 2 ? t3[0] : null, t3.length === 2 ? t3[1] : e3];
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.xml_isName = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3.charCodeAt(t3);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 === 58 || r2 === 95 || r2 >= 192 && r2 <= 214 || r2 >= 216 && r2 <= 246 || r2 >= 248 && r2 <= 767 || r2 >= 880 && r2 <= 893 || r2 >= 895 && r2 <= 8191 || r2 >= 8204 && r2 <= 8205 || r2 >= 8304 && r2 <= 8591 || r2 >= 11264 && r2 <= 12271 || r2 >= 12289 && r2 <= 55295 || r2 >= 63744 && r2 <= 64975 || r2 >= 65008 && r2 <= 65533) && (t3 === 0 || !(r2 === 45 || r2 === 46 || r2 >= 48 && r2 <= 57 || r2 === 183 || r2 >= 768 && r2 <= 879 || r2 >= 8255 && r2 <= 8256))) {
              if (r2 >= 55296 && r2 <= 56319 && t3 < e3.length - 1) {
                var n = e3.charCodeAt(t3 + 1);
                if (n >= 56320 && n <= 57343 && (t3++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 983039))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t2.xml_isQName = function(e3) {
          for (var t3 = false, r2 = 0; r2 < e3.length; r2++) {
            var n = e3.charCodeAt(r2);
            if (!(n >= 97 && n <= 122 || n >= 65 && n <= 90 || n === 95 || n >= 192 && n <= 214 || n >= 216 && n <= 246 || n >= 248 && n <= 767 || n >= 880 && n <= 893 || n >= 895 && n <= 8191 || n >= 8204 && n <= 8205 || n >= 8304 && n <= 8591 || n >= 11264 && n <= 12271 || n >= 12289 && n <= 55295 || n >= 63744 && n <= 64975 || n >= 65008 && n <= 65533) && (r2 === 0 || !(n === 45 || n === 46 || n >= 48 && n <= 57 || n === 183 || n >= 768 && n <= 879 || n >= 8255 && n <= 8256))) {
              if (r2 === 0 || n !== 58) {
                if (n >= 55296 && n <= 56319 && r2 < e3.length - 1) {
                  var i2 = e3.charCodeAt(r2 + 1);
                  if (i2 >= 56320 && i2 <= 57343 && (r2++, (n = 1024 * (n - 55296) + i2 - 56320 + 65536) >= 65536 && n <= 983039))
                    continue;
                }
                return false;
              }
              if (t3)
                return false;
              if (r2 === e3.length - 1)
                return false;
              t3 = true;
            }
          }
          return true;
        }, t2.xml_isLegalChar = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3.charCodeAt(t3);
            if (!(r2 === 9 || r2 === 10 || r2 === 13 || r2 >= 32 && r2 <= 55295 || r2 >= 57344 && r2 <= 65533)) {
              if (r2 >= 55296 && r2 <= 56319 && t3 < e3.length - 1) {
                var n = e3.charCodeAt(t3 + 1);
                if (n >= 56320 && n <= 57343 && (t3++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 1114111))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t2.xml_isPubidChar = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3.charCodeAt(t3);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 >= 39 && r2 <= 59 || r2 === 32 || r2 === 13 || r2 === 10 || r2 >= 35 && r2 <= 37 || r2 === 33 || r2 === 61 || r2 === 63 || r2 === 64 || r2 === 95))
              return false;
          }
          return true;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(17);
        t2.boundaryPoint_position = function e3(t3, r2) {
          var o = t3[0], a3 = t3[1], s3 = r2[0], u2 = r2[1];
          if (console.assert(i2.tree_rootNode(o) === i2.tree_rootNode(s3), "Boundary points must share the same root node."), o === s3)
            return a3 === u2 ? n.BoundaryPosition.Equal : a3 < u2 ? n.BoundaryPosition.Before : n.BoundaryPosition.After;
          if (i2.tree_isFollowing(s3, o)) {
            var l = e3([s3, u2], [o, a3]);
            if (l === n.BoundaryPosition.Before)
              return n.BoundaryPosition.After;
            if (l === n.BoundaryPosition.After)
              return n.BoundaryPosition.Before;
          }
          if (i2.tree_isAncestorOf(s3, o)) {
            for (var c2 = s3; !i2.tree_isChildOf(o, c2); )
              c2._parent !== null && (c2 = c2._parent);
            if (i2.tree_index(c2) < a3)
              return n.BoundaryPosition.After;
          }
          return n.BoundaryPosition.Before;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(7), s3 = r(29), u2 = r(108), l = r(30), c2 = r(37), h3 = r(52);
        t2.node_stringReplaceAll = function(e3, t3) {
          var r2 = null;
          e3 !== "" && (r2 = s3.create_text(t3._nodeDocument, e3)), c2.mutation_replaceAll(r2, t3);
        }, t2.node_clone = function e3(t3, r2, a4) {
          var u3, p, f, d3, m3;
          if (r2 === void 0 && (r2 = null), a4 === void 0 && (a4 = false), r2 === null && (r2 = t3._nodeDocument), o.Guard.isElementNode(t3)) {
            m3 = h3.element_createAnElement(r2, t3._localName, t3._namespace, t3._namespacePrefix, t3._is, false);
            try {
              for (var y3 = n(t3._attributeList), v = y3.next(); !v.done; v = y3.next()) {
                var _ = e3(v.value, r2);
                h3.element_append(_, m3);
              }
            } catch (e4) {
              u3 = { error: e4 };
            } finally {
              try {
                v && !v.done && (p = y3.return) && p.call(y3);
              } finally {
                if (u3)
                  throw u3.error;
              }
            }
          } else if (o.Guard.isDocumentNode(t3)) {
            var g = s3.create_document();
            g._encoding = t3._encoding, g._contentType = t3._contentType, g._URL = t3._URL, g._origin = t3._origin, g._type = t3._type, g._mode = t3._mode, m3 = g;
          } else if (o.Guard.isDocumentTypeNode(t3)) {
            m3 = s3.create_documentType(r2, t3._name, t3._publicId, t3._systemId);
          } else if (o.Guard.isAttrNode(t3)) {
            var b2 = s3.create_attr(r2, t3.localName);
            b2._namespace = t3._namespace, b2._namespacePrefix = t3._namespacePrefix, b2._value = t3._value, m3 = b2;
          } else
            m3 = o.Guard.isExclusiveTextNode(t3) ? s3.create_text(r2, t3._data) : o.Guard.isCDATASectionNode(t3) ? s3.create_cdataSection(r2, t3._data) : o.Guard.isCommentNode(t3) ? s3.create_comment(r2, t3._data) : o.Guard.isProcessingInstructionNode(t3) ? s3.create_processingInstruction(r2, t3._target, t3._data) : o.Guard.isDocumentFragmentNode(t3) ? s3.create_documentFragment(r2) : Object.create(t3);
          if (o.Guard.isDocumentNode(m3) ? (m3._nodeDocument = m3, r2 = m3) : m3._nodeDocument = r2, i2.dom.features.steps && l.dom_runCloningSteps(m3, t3, r2, a4), a4)
            try {
              for (var x2 = n(t3._children), w2 = x2.next(); !w2.done; w2 = x2.next()) {
                var E2 = e3(w2.value, r2, true);
                c2.mutation_append(E2, m3);
              }
            } catch (e4) {
              f = { error: e4 };
            } finally {
              try {
                w2 && !w2.done && (d3 = x2.return) && d3.call(x2);
              } finally {
                if (f)
                  throw f.error;
              }
            }
          return m3;
        }, t2.node_equals = function e3(t3, r2) {
          var i3, a4, s4, u3;
          if (t3._nodeType !== r2._nodeType)
            return false;
          if (o.Guard.isDocumentTypeNode(t3) && o.Guard.isDocumentTypeNode(r2)) {
            if (t3._name !== r2._name || t3._publicId !== r2._publicId || t3._systemId !== r2._systemId)
              return false;
          } else if (o.Guard.isElementNode(t3) && o.Guard.isElementNode(r2)) {
            if (t3._namespace !== r2._namespace || t3._namespacePrefix !== r2._namespacePrefix || t3._localName !== r2._localName || t3._attributeList.length !== r2._attributeList.length)
              return false;
          } else if (o.Guard.isAttrNode(t3) && o.Guard.isAttrNode(r2)) {
            if (t3._namespace !== r2._namespace || t3._localName !== r2._localName || t3._value !== r2._value)
              return false;
          } else if (o.Guard.isProcessingInstructionNode(t3) && o.Guard.isProcessingInstructionNode(r2)) {
            if (t3._target !== r2._target || t3._data !== r2._data)
              return false;
          } else if (o.Guard.isCharacterDataNode(t3) && o.Guard.isCharacterDataNode(r2) && t3._data !== r2._data)
            return false;
          if (o.Guard.isElementNode(t3) && o.Guard.isElementNode(r2)) {
            var l2 = {};
            try {
              for (var c3 = n(t3._attributeList), h4 = c3.next(); !h4.done; h4 = c3.next()) {
                l2[(d3 = h4.value)._localName] = d3;
              }
            } catch (e4) {
              i3 = { error: e4 };
            } finally {
              try {
                h4 && !h4.done && (a4 = c3.return) && a4.call(c3);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            try {
              for (var p = n(r2._attributeList), f = p.next(); !f.done; f = p.next()) {
                var d3, m3 = f.value;
                if (!(d3 = l2[m3._localName]))
                  return false;
                if (!e3(d3, m3))
                  return false;
              }
            } catch (e4) {
              s4 = { error: e4 };
            } finally {
              try {
                f && !f.done && (u3 = p.return) && u3.call(p);
              } finally {
                if (s4)
                  throw s4.error;
              }
            }
          }
          if (t3._children.size !== r2._children.size)
            return false;
          for (var y3 = t3._children[Symbol.iterator](), v = r2._children[Symbol.iterator](), _ = y3.next(), g = v.next(); !_.done && !g.done; ) {
            if (!e3(_.value, g.value))
              return false;
            _ = y3.next(), g = v.next();
          }
          return true;
        }, t2.node_listOfElementsWithQualifiedName = function(e3, t3) {
          return e3 === "*" ? s3.create_htmlCollection(t3) : t3._nodeDocument._type === "html" ? s3.create_htmlCollection(t3, function(t4) {
            return t4._namespace === a3.namespace.HTML && t4._qualifiedName === e3.toLowerCase() || t4._namespace !== a3.namespace.HTML && t4._qualifiedName === e3;
          }) : s3.create_htmlCollection(t3, function(t4) {
            return t4._qualifiedName === e3;
          });
        }, t2.node_listOfElementsWithNamespace = function(e3, t3, r2) {
          return e3 === "" && (e3 = null), e3 === "*" && t3 === "*" ? s3.create_htmlCollection(r2) : e3 === "*" ? s3.create_htmlCollection(r2, function(e4) {
            return e4._localName === t3;
          }) : t3 === "*" ? s3.create_htmlCollection(r2, function(t4) {
            return t4._namespace === e3;
          }) : s3.create_htmlCollection(r2, function(r3) {
            return r3._localName === t3 && r3._namespace === e3;
          });
        }, t2.node_listOfElementsWithClassNames = function(e3, t3) {
          var r2 = u2.orderedSet_parse(e3);
          if (r2.size === 0)
            return s3.create_htmlCollection(t3, function() {
              return false;
            });
          var n2 = t3._nodeDocument._mode !== "quirks";
          return s3.create_htmlCollection(t3, function(e4) {
            var t4 = e4.classList;
            return u2.orderedSet_contains(t4._tokenSet, r2, n2);
          });
        }, t2.node_locateANamespacePrefix = function e3(t3, r2) {
          if (t3._namespace === r2 && t3._namespacePrefix !== null)
            return t3._namespacePrefix;
          for (var n2 = 0; n2 < t3._attributeList.length; n2++) {
            var i3 = t3._attributeList[n2];
            if (i3._namespacePrefix === "xmlns" && i3._value === r2)
              return i3._localName;
          }
          return t3._parent && o.Guard.isElementNode(t3._parent) ? e3(t3._parent, r2) : null;
        }, t2.node_locateANamespace = function e3(t3, r2) {
          if (o.Guard.isElementNode(t3)) {
            if (t3._namespace !== null && t3._namespacePrefix === r2)
              return t3._namespace;
            for (var n2 = 0; n2 < t3._attributeList.length; n2++) {
              var i3 = t3._attributeList[n2];
              if (i3._namespace === a3.namespace.XMLNS && i3._namespacePrefix === "xmlns" && i3._localName === r2)
                return i3._value || null;
              if (r2 === null && i3._namespace === a3.namespace.XMLNS && i3._namespacePrefix === null && i3._localName === "xmlns")
                return i3._value || null;
            }
            return t3.parentElement === null ? null : e3(t3.parentElement, r2);
          }
          return o.Guard.isDocumentNode(t3) ? t3.documentElement === null ? null : e3(t3.documentElement, r2) : o.Guard.isDocumentTypeNode(t3) || o.Guard.isDocumentFragmentNode(t3) ? null : o.Guard.isAttrNode(t3) ? t3._element === null ? null : e3(t3._element, r2) : t3._parent && o.Guard.isElementNode(t3._parent) ? e3(t3._parent, r2) : null;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(9), s3 = r(29), u2 = r(17), l = r(107), c2 = r(37);
        t2.text_contiguousTextNodes = function(e3, t3) {
          var r2;
          return t3 === void 0 && (t3 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e3; r3 && o.Guard.isTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t3 && r3 === e3 && (r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t2.text_contiguousExclusiveTextNodes = function(e3, t3) {
          var r2;
          return t3 === void 0 && (t3 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e3; r3 && o.Guard.isExclusiveTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t3 && r3 === e3 && (r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t2.text_descendantTextContent = function(e3) {
          for (var t3 = "", r2 = u2.tree_getFirstDescendantNode(e3, false, false, function(e4) {
            return o.Guard.isTextNode(e4);
          }); r2 !== null; )
            t3 += r2._data, r2 = u2.tree_getNextDescendantNode(e3, r2, false, false, function(e4) {
              return o.Guard.isTextNode(e4);
            });
          return t3;
        }, t2.text_split = function(e3, t3) {
          var r2, o2, h3 = e3._data.length;
          if (t3 > h3)
            throw new a3.IndexSizeError();
          var p = h3 - t3, f = l.characterData_substringData(e3, t3, p), d3 = s3.create_text(e3._nodeDocument, f), m3 = e3._parent;
          if (m3 !== null) {
            c2.mutation_insert(d3, m3, e3._nextSibling);
            try {
              for (var y3 = n(i2.dom.rangeList), v = y3.next(); !v.done; v = y3.next()) {
                var _ = v.value;
                _._start[0] === e3 && _._start[1] > t3 && (_._start[0] = d3, _._start[1] -= t3), _._end[0] === e3 && _._end[1] > t3 && (_._end[0] = d3, _._end[1] -= t3);
                var g = u2.tree_index(e3);
                _._start[0] === m3 && _._start[1] === g + 1 && _._start[1]++, _._end[0] === m3 && _._end[1] === g + 1 && _._end[1]++;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                v && !v.done && (o2 = y3.return) && o2.call(y3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return l.characterData_replaceData(e3, t3, p, ""), d3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(41), o = r(24), a3 = r(48), s3 = [].join, u2 = i2 != Object, l = a3("join", ",");
        n({ target: "Array", proto: true, forced: u2 || !l }, { join: function(e3) {
          return s3.call(o(this), e3 === void 0 ? "," : e3);
        } });
      }, function(e2, t2, r) {
        var n = r(4), i2 = r(83), o = String.fromCharCode, a3 = String.fromCodePoint;
        n({ target: "String", stat: true, forced: !!a3 && a3.length != 1 }, { fromCodePoint: function(e3) {
          for (var t3, r2 = [], n2 = arguments.length, a4 = 0; n2 > a4; ) {
            if (t3 = +arguments[a4++], i2(t3, 1114111) !== t3)
              throw RangeError(t3 + " is not a valid code point");
            r2.push(t3 < 65536 ? o(t3) : o(55296 + ((t3 -= 65536) >> 10), t3 % 1024 + 56320));
          }
          return r2.join("");
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a3 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a3.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(111), o = function() {
          function e3(e4, t3) {
            this._options = { skipWhitespaceOnlyText: false }, this.err = { line: -1, col: -1, index: -1, str: "" }, this._str = e4, this._index = 0, this._length = e4.length, t3 && (this._options.skipWhitespaceOnlyText = t3.skipWhitespaceOnlyText || false);
          }
          return e3.prototype.nextToken = function() {
            if (this.eof())
              return { type: i2.TokenType.EOF };
            var t3 = this.skipIfStartsWith("<") ? this.openBracket() : this.text();
            return this._options.skipWhitespaceOnlyText && t3.type === i2.TokenType.Text && e3.isWhiteSpaceToken(t3) && (t3 = this.nextToken()), t3;
          }, e3.prototype.openBracket = function() {
            return this.skipIfStartsWith("?") ? this.skipIfStartsWith("xml") ? e3.isSpace(this._str[this._index]) ? this.declaration() : (this.seek(-3), this.pi()) : this.pi() : this.skipIfStartsWith("!") ? this.skipIfStartsWith("--") ? this.comment() : this.skipIfStartsWith("[CDATA[") ? this.cdata() : this.skipIfStartsWith("DOCTYPE") ? this.doctype() : void this.throwError("Invalid '!' in opening tag.") : this.skipIfStartsWith("/") ? this.closeTag() : this.openTag();
          }, e3.prototype.declaration = function() {
            for (var e4 = "", t3 = "", r2 = ""; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith("?>"))
                return { type: i2.TokenType.Declaration, version: e4, encoding: t3, standalone: r2 };
              var o2 = n(this.attribute(), 2), a3 = o2[0], s3 = o2[1];
              a3 === "version" ? e4 = s3 : a3 === "encoding" ? t3 = s3 : a3 === "standalone" ? r2 = s3 : this.throwError("Invalid attribute name: " + a3);
            }
            this.throwError("Missing declaration end symbol `?>`");
          }, e3.prototype.doctype = function() {
            var e4 = "", t3 = "";
            this.skipSpace();
            var r2 = this.takeUntil2("[", ">", true);
            return this.skipSpace(), this.skipIfStartsWith("PUBLIC") ? (e4 = this.quotedString(), t3 = this.quotedString()) : this.skipIfStartsWith("SYSTEM") && (t3 = this.quotedString()), this.skipSpace(), this.skipIfStartsWith("[") && (this.skipUntil("]"), this.skipIfStartsWith("]") || this.throwError("Missing end bracket of DTD internal subset")), this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing doctype end symbol `>`"), { type: i2.TokenType.DocType, name: r2, pubId: e4, sysId: t3 };
          }, e3.prototype.pi = function() {
            var e4 = this.takeUntilStartsWith("?>", true);
            if (this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.skipSpace(), this.skipIfStartsWith("?>"))
              return { type: i2.TokenType.PI, target: e4, data: "" };
            var t3 = this.takeUntilStartsWith("?>");
            return this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.seek(2), { type: i2.TokenType.PI, target: e4, data: t3 };
          }, e3.prototype.text = function() {
            var e4 = this.takeUntil("<");
            return { type: i2.TokenType.Text, data: e4 };
          }, e3.prototype.comment = function() {
            var e4 = this.takeUntilStartsWith("-->");
            return this.eof() && this.throwError("Missing comment end symbol `-->`"), this.seek(3), { type: i2.TokenType.Comment, data: e4 };
          }, e3.prototype.cdata = function() {
            var e4 = this.takeUntilStartsWith("]]>");
            return this.eof() && this.throwError("Missing CDATA end symbol `]>`"), this.seek(3), { type: i2.TokenType.CDATA, data: e4 };
          }, e3.prototype.openTag = function() {
            this.skipSpace();
            var e4 = this.takeUntil2(">", "/", true);
            if (this.skipSpace(), this.skipIfStartsWith(">"))
              return { type: i2.TokenType.Element, name: e4, attributes: [], selfClosing: false };
            if (this.skipIfStartsWith("/>"))
              return { type: i2.TokenType.Element, name: e4, attributes: [], selfClosing: true };
            for (var t3 = []; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith(">"))
                return { type: i2.TokenType.Element, name: e4, attributes: t3, selfClosing: false };
              if (this.skipIfStartsWith("/>"))
                return { type: i2.TokenType.Element, name: e4, attributes: t3, selfClosing: true };
              var r2 = this.attribute();
              t3.push(r2);
            }
            this.throwError("Missing opening element tag end symbol `>`");
          }, e3.prototype.closeTag = function() {
            this.skipSpace();
            var e4 = this.takeUntil(">", true);
            return this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing closing element tag end symbol `>`"), { type: i2.TokenType.ClosingTag, name: e4 };
          }, e3.prototype.attribute = function() {
            this.skipSpace();
            var e4 = this.takeUntil("=", true);
            return this.skipSpace(), this.skipIfStartsWith("=") || this.throwError("Missing equals sign before attribute value"), [e4, this.quotedString()];
          }, e3.prototype.quotedString = function() {
            this.skipSpace();
            var t3 = this.take(1);
            e3.isQuote(t3) || this.throwError("Missing start quote character before quoted value");
            var r2 = this.takeUntil(t3);
            return this.skipIfStartsWith(t3) || this.throwError("Missing end quote character after quoted value"), r2;
          }, e3.prototype.eof = function() {
            return this._index >= this._length;
          }, e3.prototype.skipIfStartsWith = function(e4) {
            var t3 = e4.length;
            if (t3 === 1)
              return this._str[this._index] === e4 && (this._index++, true);
            for (var r2 = 0; r2 < t3; r2++)
              if (this._str[this._index + r2] !== e4[r2])
                return false;
            return this._index += t3, true;
          }, e3.prototype.seek = function(e4) {
            this._index += e4, this._index < 0 && (this._index = 0), this._index > this._length && (this._index = this._length);
          }, e3.prototype.skipSpace = function() {
            for (; !this.eof() && e3.isSpace(this._str[this._index]); )
              this._index++;
          }, e3.prototype.take = function(e4) {
            if (e4 === 1)
              return this._str[this._index++];
            var t3 = this._index;
            return this.seek(e4), this._str.slice(t3, this._index);
          }, e3.prototype.takeUntil = function(t3, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index; this._index < this._length; ) {
              var i3 = this._str[this._index];
              if (i3 === t3 || r2 && e3.isSpace(i3))
                break;
              this._index++;
            }
            return this._str.slice(n2, this._index);
          }, e3.prototype.takeUntil2 = function(t3, r2, n2) {
            n2 === void 0 && (n2 = false);
            for (var i3 = this._index; this._index < this._length; ) {
              var o2 = this._str[this._index];
              if (o2 === t3 || o2 === r2 || n2 && e3.isSpace(o2))
                break;
              this._index++;
            }
            return this._str.slice(i3, this._index);
          }, e3.prototype.takeUntilStartsWith = function(t3, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index, i3 = t3.length; this._index < this._length; ) {
              for (var o2 = true, a3 = 0; a3 < i3; a3++) {
                var s3 = this._str[this._index + a3], u2 = t3[a3];
                if (r2 && e3.isSpace(s3))
                  return this._str.slice(n2, this._index);
                if (s3 !== u2) {
                  this._index++, o2 = false;
                  break;
                }
              }
              if (o2)
                return this._str.slice(n2, this._index);
            }
            return this._index = this._length, this._str.slice(n2);
          }, e3.prototype.skipUntil = function(e4) {
            for (; this._index < this._length; ) {
              if (this._str[this._index] === e4)
                break;
              this._index++;
            }
          }, e3.isWhiteSpaceToken = function(e4) {
            for (var t3 = e4.data, r2 = 0; r2 < t3.length; r2++) {
              var n2 = t3[r2];
              if (n2 !== " " && n2 !== "\n" && n2 !== "\r" && n2 !== "	" && n2 !== "\f")
                return false;
            }
            return true;
          }, e3.isSpace = function(e4) {
            return e4 === " " || e4 === "\n" || e4 === "\r" || e4 === "	";
          }, e3.isQuote = function(e4) {
            return e4 === '"' || e4 === "'";
          }, e3.prototype.throwError = function(e4) {
            for (var t3 = /\r\n|\r|\n/g, r2 = null, n2 = 0, i3 = 0, o2 = this._str.length; (r2 = t3.exec(this._str)) !== null && r2 !== null; )
              if (n2++, r2.index < this._index && (i3 = t3.lastIndex), r2.index > this._index) {
                o2 = r2.index;
                break;
              }
            throw this.err = { line: n2, col: this._index - i3, index: this._index, str: this._str.substring(i3, o2) }, new Error(e4 + "\nIndex: " + this.err.index + "\nLn: " + this.err.line + ", Col: " + this.err.col + "\nInput: " + this.err.str);
          }, e3.prototype[Symbol.iterator] = function() {
            return this._index = 0, { next: function() {
              var e4 = this.nextToken();
              return e4.type === i2.TokenType.EOF ? { done: true, value: null } : { done: false, value: e4 };
            }.bind(this) };
          }, e3;
        }();
        t2.XMLStringLexer = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ include: [r(182)] });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ include: [r(113)], implicit: [r(289), r(290), r(291), r(292)] });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(91), i2 = r(1), o = r(3), a3 = r(77), s3 = r(109);
        function u2(e3, t3) {
          var r2 = c2(e3 === void 0 || l(e3) ? e3 : n.DefaultBuilderOptions), i3 = l(e3) ? t3 : e3, o2 = s3.createDocument();
          h3(o2, r2);
          var u3 = new a3.XMLBuilderImpl(o2);
          return i3 !== void 0 && u3.ele(i3), u3;
        }
        function l(e3) {
          if (!i2.isPlainObject(e3))
            return false;
          for (var t3 in e3)
            if (e3.hasOwnProperty(t3) && !n.XMLBuilderOptionKeys.has(t3))
              return false;
          return true;
        }
        function c2(e3) {
          e3 === void 0 && (e3 = {});
          var t3 = i2.applyDefaults(e3, n.DefaultBuilderOptions);
          if (t3.convert.att.length === 0 || t3.convert.ins.length === 0 || t3.convert.text.length === 0 || t3.convert.cdata.length === 0 || t3.convert.comment.length === 0)
            throw new Error("JS object converter strings cannot be zero length.");
          return t3;
        }
        function h3(e3, t3, r2) {
          var n2 = e3;
          n2._xmlBuilderOptions = t3, n2._isFragment = r2;
        }
        t2.builder = function(e3, t3) {
          var r2 = c2(l(e3) ? e3 : n.DefaultBuilderOptions), s4 = o.Guard.isNode(e3) || i2.isArray(e3) ? e3 : t3;
          if (s4 === void 0)
            throw new Error("Invalid arguments.");
          if (i2.isArray(s4)) {
            for (var u3 = [], h4 = 0; h4 < s4.length; h4++) {
              var p = new a3.XMLBuilderImpl(s4[h4]);
              p.set(r2), u3.push(p);
            }
            return u3;
          }
          var f = new a3.XMLBuilderImpl(s4);
          return f.set(r2), f;
        }, t2.create = u2, t2.fragment = function(e3, t3) {
          var r2 = c2(e3 === void 0 || l(e3) ? e3 : n.DefaultBuilderOptions), i3 = l(e3) ? t3 : e3, o2 = s3.createDocument();
          h3(o2, r2, true);
          var u3 = new a3.XMLBuilderImpl(o2.createDocumentFragment());
          return i3 !== void 0 && u3.ele(i3), u3;
        }, t2.convert = function(e3, t3, r2) {
          var i3, o2, a4;
          return l(e3) && t3 !== void 0 ? (i3 = e3, o2 = t3, a4 = r2) : (i3 = n.DefaultBuilderOptions, o2 = e3, a4 = t3 || void 0), u2(i3, o2).end(a4);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(77);
        t2.builder = n.builder, t2.create = n.create, t2.fragment = n.fragment, t2.convert = n.convert, t2.createCB = n.createCB, t2.fragmentCB = n.fragmentCB;
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(191), r(192), r(194), r(64), r(19), r(198), r(199), r(89), r(201), r(65), r(20), r(66), r(22), r(23);
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(91), a3 = r(1), s3 = r(217), u2 = r(2), l = r(3), c2 = r(0), h3 = r(109), p = r(7), f = r(276), d3 = function() {
          function e3(e4) {
            this._domNode = e4;
          }
          return Object.defineProperty(e3.prototype, "node", { get: function() {
            return this._domNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "options", { get: function() {
            return this._options;
          }, enumerable: true, configurable: true }), e3.prototype.set = function(e4) {
            return this._options = a3.applyDefaults(a3.applyDefaults(this._options, e4, true), o.DefaultBuilderOptions), this;
          }, e3.prototype.ele = function(t3, r2, i3) {
            var o2, s4, u3, l2, p2, d4;
            if (a3.isObject(t3))
              return new f.ObjectReader(this._options).parse(this, t3);
            if (t3 !== null && /^\s*</.test(t3))
              return new f.XMLReader(this._options).parse(this, t3);
            if (t3 !== null && /^\s*[\{\[]/.test(t3))
              return new f.JSONReader(this._options).parse(this, t3);
            if (t3 !== null && /^(\s*|(#.*)|(%.*))*---/.test(t3))
              return new f.YAMLReader(this._options).parse(this, t3);
            if ((t3 === null || a3.isString(t3)) && a3.isString(r2))
              l2 = (o2 = n([t3, r2, i3], 3))[0], p2 = o2[1], d4 = o2[2];
            else {
              if (t3 === null)
                throw new Error("Element name cannot be null. " + this._debugInfo());
              l2 = (s4 = n([void 0, t3, a3.isObject(r2) ? r2 : void 0], 3))[0], p2 = s4[1], d4 = s4[2];
            }
            if (d4 && (d4 = a3.getValue(d4)), l2 = (u3 = n(this._extractNamespace(h3.sanitizeInput(l2, this._options.invalidCharReplacement), h3.sanitizeInput(p2, this._options.invalidCharReplacement), true), 2))[0], p2 = u3[1], l2 === void 0) {
              var m3 = n(c2.namespace_extractQName(p2), 1)[0];
              l2 = this.node.lookupNamespaceURI(m3);
            }
            var y3 = l2 != null ? this._doc.createElementNS(l2, p2) : this._doc.createElement(p2);
            this.node.appendChild(y3);
            var v = new e3(y3), _ = this._doc.doctype;
            if (y3 === this._doc.documentElement && _ !== null) {
              var g = this._doc.implementation.createDocumentType(this._doc.documentElement.tagName, _.publicId, _.systemId);
              this._doc.replaceChild(g, _);
            }
            return d4 && !a3.isEmpty(d4) && v.att(d4), v;
          }, e3.prototype.remove = function() {
            var e4 = this.up();
            return e4.node.removeChild(this.node), e4;
          }, e3.prototype.att = function(e4, t3, r2) {
            var i3, o2, s4, u3, f2, d4, m3 = this;
            if (a3.isMap(e4) || a3.isObject(e4))
              return a3.forEachObject(e4, function(e5, t4) {
                return m3.att(e5, t4);
              }, this), this;
            if (e4 != null && (e4 = a3.getValue(e4 + "")), t3 != null && (t3 = a3.getValue(t3 + "")), r2 != null && (r2 = a3.getValue(r2 + "")), e4 !== null && !a3.isString(e4) || !a3.isString(t3) || r2 !== null && !a3.isString(r2)) {
              if (!a3.isString(e4) || t3 != null && !a3.isString(t3))
                throw new Error("Attribute name and value not specified. " + this._debugInfo());
              u3 = (o2 = n([void 0, e4, t3], 3))[0], f2 = o2[1], d4 = o2[2];
            } else
              u3 = (i3 = n([e4, t3, r2], 3))[0], f2 = i3[1], d4 = i3[2];
            if (this._options.keepNullAttributes && d4 == null)
              d4 = "";
            else if (d4 == null)
              return this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be assigned to an element node.");
            var y3 = this.node;
            u3 = (s4 = n(this._extractNamespace(u3, f2, false), 2))[0], f2 = s4[1], f2 = h3.sanitizeInput(f2, this._options.invalidCharReplacement), u3 = h3.sanitizeInput(u3, this._options.invalidCharReplacement), d4 = h3.sanitizeInput(d4, this._options.invalidCharReplacement);
            var v = n(c2.namespace_extractQName(f2), 2), _ = v[0], g = v[1], b2 = n(c2.namespace_extractQName(y3.prefix ? y3.prefix + ":" + y3.localName : y3.localName), 1)[0], x2 = null;
            return _ === "xmlns" ? (u3 = p.namespace.XMLNS, y3.namespaceURI === null && b2 === g && (x2 = d4)) : _ === null && g === "xmlns" && b2 === null && (u3 = p.namespace.XMLNS, x2 = d4), x2 !== null && (this._updateNamespace(x2), y3 = this.node), u3 !== void 0 ? y3.setAttributeNS(u3, f2, d4) : y3.setAttribute(f2, d4), this;
          }, e3.prototype.removeAtt = function(e4, t3) {
            var r2, n2, i3 = this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be removed from an element node.");
            if (e4 = a3.getValue(e4), t3 !== void 0 && (t3 = a3.getValue(t3)), e4 !== null && t3 === void 0)
              n2 = e4;
            else {
              if (e4 !== null && !a3.isString(e4) || t3 === void 0)
                throw new Error("Attribute namespace must be a string. " + this._debugInfo());
              r2 = e4, n2 = t3;
            }
            return a3.isArray(n2) || a3.isSet(n2) ? a3.forEachArray(n2, function(e5) {
              return r2 === void 0 ? i3.removeAtt(e5) : i3.removeAtt(r2, e5);
            }, this) : r2 !== void 0 ? (n2 = h3.sanitizeInput(n2, this._options.invalidCharReplacement), r2 = h3.sanitizeInput(r2, this._options.invalidCharReplacement), this.node.removeAttributeNS(r2, n2)) : (n2 = h3.sanitizeInput(n2, this._options.invalidCharReplacement), this.node.removeAttribute(n2)), this;
          }, e3.prototype.txt = function(e4) {
            if (e4 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e4 = "";
            }
            var t3 = this._doc.createTextNode(h3.sanitizeInput(e4, this._options.invalidCharReplacement));
            return this.node.appendChild(t3), this;
          }, e3.prototype.com = function(e4) {
            if (e4 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e4 = "";
            }
            var t3 = this._doc.createComment(h3.sanitizeInput(e4, this._options.invalidCharReplacement));
            return this.node.appendChild(t3), this;
          }, e3.prototype.dat = function(e4) {
            if (e4 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e4 = "";
            }
            var t3 = this._doc.createCDATASection(h3.sanitizeInput(e4, this._options.invalidCharReplacement));
            return this.node.appendChild(t3), this;
          }, e3.prototype.ins = function(e4, t3) {
            var r2 = this;
            if (t3 === void 0 && (t3 = ""), t3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              t3 = "";
            }
            if (a3.isArray(e4) || a3.isSet(e4))
              a3.forEachArray(e4, function(e5) {
                var t4 = (e5 += "").indexOf(" "), n3 = t4 === -1 ? e5 : e5.substr(0, t4), i3 = t4 === -1 ? "" : e5.substr(t4 + 1);
                r2.ins(n3, i3);
              }, this);
            else if (a3.isMap(e4) || a3.isObject(e4))
              a3.forEachObject(e4, function(e5, t4) {
                return r2.ins(e5, t4);
              }, this);
            else {
              var n2 = this._doc.createProcessingInstruction(h3.sanitizeInput(e4, this._options.invalidCharReplacement), h3.sanitizeInput(t3, this._options.invalidCharReplacement));
              this.node.appendChild(n2);
            }
            return this;
          }, e3.prototype.dec = function(e4) {
            return this._options.version = e4.version || "1.0", this._options.encoding = e4.encoding, this._options.standalone = e4.standalone, this;
          }, e3.prototype.dtd = function(e4) {
            var t3 = h3.sanitizeInput(e4 && e4.name || (this._doc.documentElement ? this._doc.documentElement.tagName : "ROOT"), this._options.invalidCharReplacement), r2 = h3.sanitizeInput(e4 && e4.pubID || "", this._options.invalidCharReplacement), n2 = h3.sanitizeInput(e4 && e4.sysID || "", this._options.invalidCharReplacement);
            if (this._doc.documentElement !== null && t3 !== this._doc.documentElement.tagName)
              throw new Error("DocType name does not match document element name.");
            var i3 = this._doc.implementation.createDocumentType(t3, r2, n2);
            return this._doc.doctype !== null ? this._doc.replaceChild(i3, this._doc.doctype) : this._doc.insertBefore(i3, this._doc.documentElement), this;
          }, e3.prototype.import = function(t3) {
            var r2, o2, a4 = this._domNode, s4 = this._doc, u3 = t3.node;
            if (l.Guard.isDocumentNode(u3)) {
              var h4 = u3.documentElement;
              if (h4 === null)
                throw new Error("Imported document has no document element node. " + this._debugInfo());
              var p2 = s4.importNode(h4, true);
              a4.appendChild(p2);
              var f2 = n(c2.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d4 = a4.lookupNamespaceURI(f2);
              new e3(p2)._updateNamespace(d4);
            } else if (l.Guard.isDocumentFragmentNode(u3))
              try {
                for (var m3 = i2(u3.childNodes), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                  var v = y3.value;
                  p2 = s4.importNode(v, true);
                  if (a4.appendChild(p2), l.Guard.isElementNode(p2)) {
                    f2 = n(c2.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d4 = a4.lookupNamespaceURI(f2);
                    new e3(p2)._updateNamespace(d4);
                  }
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  y3 && !y3.done && (o2 = m3.return) && o2.call(m3);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            else {
              p2 = s4.importNode(u3, true);
              if (a4.appendChild(p2), l.Guard.isElementNode(p2)) {
                f2 = n(c2.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d4 = a4.lookupNamespaceURI(f2);
                new e3(p2)._updateNamespace(d4);
              }
            }
            return this;
          }, e3.prototype.doc = function() {
            if (this._doc._isFragment) {
              for (var t3 = this.node; t3 && t3.nodeType !== u2.NodeType.DocumentFragment; )
                t3 = t3.parentNode;
              if (t3 === null)
                throw new Error("Node has no parent node while searching for document fragment ancestor. " + this._debugInfo());
              return new e3(t3);
            }
            return new e3(this._doc);
          }, e3.prototype.root = function() {
            var t3 = this._doc.documentElement;
            if (!t3)
              throw new Error("Document root element is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.up = function() {
            var t3 = this._domNode.parentNode;
            if (!t3)
              throw new Error("Parent node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.prev = function() {
            var t3 = this._domNode.previousSibling;
            if (!t3)
              throw new Error("Previous sibling node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.next = function() {
            var t3 = this._domNode.nextSibling;
            if (!t3)
              throw new Error("Next sibling node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.first = function() {
            var t3 = this._domNode.firstChild;
            if (!t3)
              throw new Error("First child node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.last = function() {
            var t3 = this._domNode.lastChild;
            if (!t3)
              throw new Error("Last child node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.each = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
              t3.call(i3, new e3(o2[0]), o2[1], o2[2]), o2 = a4;
            }
            return this;
          }, e3.prototype.map = function(e4, t3, r2, n2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false);
            var i3 = [];
            return this.each(function(t4, r3, o2) {
              return i3.push(e4.call(n2, t4, r3, o2));
            }, t3, r2), i3;
          }, e3.prototype.reduce = function(e4, t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            var o2 = t3;
            return this.each(function(t4, r3, n3) {
              return o2 = e4.call(i3, o2, t4, r3, n3);
            }, r2, n2), o2;
          }, e3.prototype.find = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = new e3(o2[0]);
              if (t3.call(i3, a4, o2[1], o2[2]))
                return a4;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
          }, e3.prototype.filter = function(e4, t3, r2, n2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false);
            var i3 = [];
            return this.each(function(t4, r3, o2) {
              e4.call(n2, t4, r3, o2) && i3.push(t4);
            }, t3, r2), i3;
          }, e3.prototype.every = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = new e3(o2[0]);
              if (!t3.call(i3, a4, o2[1], o2[2]))
                return false;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return true;
          }, e3.prototype.some = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = new e3(o2[0]);
              if (t3.call(i3, a4, o2[1], o2[2]))
                return true;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return false;
          }, e3.prototype.toArray = function(e4, t3) {
            e4 === void 0 && (e4 = false), t3 === void 0 && (t3 = false);
            var r2 = [];
            return this.each(function(e5) {
              return r2.push(e5);
            }, e4, t3), r2;
          }, e3.prototype.toString = function(e4) {
            return (e4 = e4 || {}).format === void 0 && (e4.format = "xml"), this._serialize(e4);
          }, e3.prototype.toObject = function(e4) {
            return (e4 = e4 || {}).format === void 0 && (e4.format = "object"), this._serialize(e4);
          }, e3.prototype.end = function(e4) {
            return (e4 = e4 || {}).format === void 0 && (e4.format = "xml"), this.doc()._serialize(e4);
          }, e3.prototype._getFirstDescendantNode = function(e4, t3, r2) {
            return t3 ? [this._domNode, 0, 0] : r2 ? this._getNextDescendantNode(e4, e4, r2, 0, 0) : [this._domNode.firstChild, 0, 1];
          }, e3.prototype._getNextDescendantNode = function(e4, t3, r2, n2, i3) {
            if (!r2)
              return e4 === t3 ? [t3.firstChild, 0, i3 + 1] : [t3.nextSibling, n2 + 1, i3];
            if (t3.firstChild)
              return [t3.firstChild, 0, i3 + 1];
            if (t3 === e4)
              return [null, -1, -1];
            if (t3.nextSibling)
              return [t3.nextSibling, n2 + 1, i3];
            for (var o2 = t3.parentNode; o2 && o2 !== e4; ) {
              if (o2.nextSibling)
                return [o2.nextSibling, c2.tree_index(o2.nextSibling), i3 - 1];
              o2 = o2.parentNode, i3--;
            }
            return [null, -1, -1];
          }, e3.prototype._serialize = function(e4) {
            if (e4.format === "xml")
              return new s3.XMLWriter(this._options, e4).serialize(this.node);
            if (e4.format === "map")
              return new s3.MapWriter(this._options, e4).serialize(this.node);
            if (e4.format === "object")
              return new s3.ObjectWriter(this._options, e4).serialize(this.node);
            if (e4.format === "json")
              return new s3.JSONWriter(this._options, e4).serialize(this.node);
            if (e4.format === "yaml")
              return new s3.YAMLWriter(this._options, e4).serialize(this.node);
            throw new Error("Invalid writer format: " + e4.format + ". " + this._debugInfo());
          }, e3.prototype._extractNamespace = function(e4, t3, r2) {
            var n2 = t3.indexOf("@");
            if (n2 > 0 && (e4 === void 0 && (e4 = t3.slice(n2 + 1)), t3 = t3.slice(0, n2)), e4 === void 0)
              e4 = r2 ? this._options.defaultNamespace.ele : this._options.defaultNamespace.att;
            else if (e4 !== null && e4[0] === "@") {
              var i3 = e4.slice(1);
              if ((e4 = this._options.namespaceAlias[i3]) === void 0)
                throw new Error("Namespace alias `" + i3 + "` is not defined. " + this._debugInfo());
            }
            return [e4, t3];
          }, e3.prototype._updateNamespace = function(t3) {
            var r2, o2, a4, s4, u3 = this._domNode;
            if (l.Guard.isElementNode(u3) && t3 !== null && u3.namespaceURI !== t3) {
              var h4 = n(c2.namespace_extractQName(u3.prefix ? u3.prefix + ":" + u3.localName : u3.localName), 2), p2 = h4[0], f2 = h4[1], d4 = c2.create_element(this._doc, f2, t3, p2);
              try {
                for (var m3 = i2(u3.attributes), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                  var v = y3.value, _ = v.prefix ? v.prefix + ":" + v.localName : v.localName, g = n(c2.namespace_extractQName(_), 1)[0], b2 = v.namespaceURI;
                  b2 === null && g !== null && (b2 = u3.lookupNamespaceURI(g)), b2 === null ? d4.setAttribute(_, v.value) : d4.setAttributeNS(b2, _, v.value);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  y3 && !y3.done && (o2 = m3.return) && o2.call(m3);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              var x2 = u3.parentNode;
              if (x2 === null)
                throw new Error("Parent node is null." + this._debugInfo());
              x2.replaceChild(d4, u3), this._domNode = d4;
              try {
                for (var w2 = i2(u3.childNodes), E2 = w2.next(); !E2.done; E2 = w2.next()) {
                  var D2 = E2.value.cloneNode(true);
                  if (d4.appendChild(D2), l.Guard.isElementNode(D2)) {
                    var S3 = n(c2.namespace_extractQName(D2.prefix ? D2.prefix + ":" + D2.localName : D2.localName), 1)[0], C = d4.lookupNamespaceURI(S3);
                    new e3(D2)._updateNamespace(C);
                  }
                }
              } catch (e4) {
                a4 = { error: e4 };
              } finally {
                try {
                  E2 && !E2.done && (s4 = w2.return) && s4.call(w2);
                } finally {
                  if (a4)
                    throw a4.error;
                }
              }
            }
          }, Object.defineProperty(e3.prototype, "_doc", { get: function() {
            var e4 = this.node;
            if (l.Guard.isDocumentNode(e4))
              return e4;
            var t3 = e4.ownerDocument;
            if (!t3)
              throw new Error("Owner document is null. " + this._debugInfo());
            return t3;
          }, enumerable: true, configurable: true }), e3.prototype._debugInfo = function(e4) {
            var t3 = this.node, r2 = t3.parentNode;
            e4 = e4 || t3.nodeName;
            var n2 = r2 ? r2.nodeName : "";
            return n2 ? "node: <" + e4 + ">, parent: <" + n2 + ">" : "node: <" + e4 + ">";
          }, Object.defineProperty(e3.prototype, "_options", { get: function() {
            var e4 = this._doc;
            if (e4._xmlBuilderOptions === void 0)
              throw new Error("Builder options is not set.");
            return e4._xmlBuilderOptions;
          }, set: function(e4) {
            this._doc._xmlBuilderOptions = e4;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.XMLBuilderImpl = d3;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(117), o = n.WeakMap;
        e2.exports = typeof o == "function" && /native code/.test(i2(o));
      }, function(e2, t2, r) {
        var n = r(46), i2 = r(82), o = r(85), a3 = r(18);
        e2.exports = n("Reflect", "ownKeys") || function(e3) {
          var t3 = i2.f(a3(e3)), r2 = o.f;
          return r2 ? t3.concat(r2(e3)) : t3;
        };
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(15), o = r(18), a3 = r(61);
        e2.exports = n ? Object.defineProperties : function(e3, t3) {
          o(e3);
          for (var r2, n2 = a3(t3), s3 = n2.length, u2 = 0; s3 > u2; )
            i2.f(e3, r2 = n2[u2++], t3[r2]);
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(46);
        e2.exports = n("document", "documentElement");
      }, function(e2, t2, r) {
        var n = r(24), i2 = r(82).f, o = {}.toString, a3 = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        e2.exports.f = function(e3) {
          return a3 && o.call(e3) == "[object Window]" ? function(e4) {
            try {
              return i2(e4);
            } catch (e5) {
              return a3.slice();
            }
          }(e3) : i2(n(e3));
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).every, o = r(48), a3 = r(28), s3 = o("every"), u2 = a3("every");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { every: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).filter, o = r(63), a3 = r(28), s3 = o("filter"), u2 = a3("filter");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { filter: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        var n = r(46);
        e2.exports = n("navigator", "userAgent") || "";
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).find, o = r(130), a3 = r(28), s3 = true, u2 = a3("find");
        "find" in [] && Array(1).find(function() {
          s3 = false;
        }), n({ target: "Array", proto: true, forced: s3 || !u2 }, { find: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } }), o("find");
      }, function(e2, t2, r) {
        "use strict";
        var n = r(131).IteratorPrototype, i2 = r(60), o = r(40), a3 = r(62), s3 = r(49), u2 = function() {
          return this;
        };
        e2.exports = function(e3, t3, r2) {
          var l = t3 + " Iterator";
          return e3.prototype = i2(n, { next: o(1, r2) }), a3(e3, l, false, true), s3[l] = u2, e3;
        };
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !n(function() {
          function e3() {
          }
          return e3.prototype.constructor = null, Object.getPrototypeOf(new e3()) !== e3.prototype;
        });
      }, function(e2, t2, r) {
        var n = r(13);
        e2.exports = function(e3) {
          if (!n(e3) && e3 !== null)
            throw TypeError("Can't set " + String(e3) + " as a prototype");
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).map, o = r(63), a3 = r(28), s3 = o("map"), u2 = a3("map");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { map: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(200).left, o = r(48), a3 = r(28), s3 = o("reduce"), u2 = a3("reduce", { 1: 0 });
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { reduce: function(e3) {
          return i2(this, e3, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        var n = r(127), i2 = r(27), o = r(41), a3 = r(26), s3 = function(e3) {
          return function(t3, r2, s4, u2) {
            n(r2);
            var l = i2(t3), c2 = o(l), h3 = a3(l.length), p = e3 ? h3 - 1 : 0, f = e3 ? -1 : 1;
            if (s4 < 2)
              for (; ; ) {
                if (p in c2) {
                  u2 = c2[p], p += f;
                  break;
                }
                if (p += f, e3 ? p < 0 : h3 <= p)
                  throw TypeError("Reduce of empty array with no initial value");
              }
            for (; e3 ? p >= 0 : h3 > p; p += f)
              p in c2 && (u2 = r2(u2, c2[p], p, l));
            return u2;
          };
        };
        e2.exports = { left: s3(false), right: s3(true) };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).some, o = r(48), a3 = r(28), s3 = o("some"), u2 = a3("some");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { some: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(90), i2 = r(135);
        e2.exports = n ? {}.toString : function() {
          return "[object " + i2(this) + "]";
        };
      }, function(e2, t2) {
        e2.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !n(function() {
          return Object.isExtensible(Object.preventExtensions({}));
        });
      }, function(e2, t2, r) {
        var n = r(5), i2 = r(49), o = n("iterator"), a3 = Array.prototype;
        e2.exports = function(e3) {
          return e3 !== void 0 && (i2.Array === e3 || a3[o] === e3);
        };
      }, function(e2, t2, r) {
        var n = r(135), i2 = r(49), o = r(5)("iterator");
        e2.exports = function(e3) {
          if (e3 != null)
            return e3[o] || e3["@@iterator"] || i2[n(e3)];
        };
      }, function(e2, t2, r) {
        var n = r(18);
        e2.exports = function(e3, t3, r2, i2) {
          try {
            return i2 ? t3(n(r2)[0], r2[1]) : t3(r2);
          } catch (t4) {
            var o = e3.return;
            throw o !== void 0 && n(o.call(e3)), t4;
          }
        };
      }, function(e2, t2, r) {
        var n = r(5)("iterator"), i2 = false;
        try {
          var o = 0, a3 = { next: function() {
            return { done: !!o++ };
          }, return: function() {
            i2 = true;
          } };
          a3[n] = function() {
            return this;
          }, Array.from(a3, function() {
            throw 2;
          });
        } catch (e3) {
        }
        e2.exports = function(e3, t3) {
          if (!t3 && !i2)
            return false;
          var r2 = false;
          try {
            var o2 = {};
            o2[n] = function() {
              return { next: function() {
                return { done: r2 = true };
              } };
            }, e3(o2);
          } catch (e4) {
          }
          return r2;
        };
      }, function(e2, t2, r) {
        var n = r(13), i2 = r(133);
        e2.exports = function(e3, t3, r2) {
          var o, a3;
          return i2 && typeof (o = t3.constructor) == "function" && o !== r2 && n(a3 = o.prototype) && a3 !== r2.prototype && i2(e3, a3), e3;
        };
      }, function(e2, t2, r) {
        var n = r(25);
        e2.exports = function(e3, t3, r2) {
          for (var i2 in t3)
            n(e3, i2, t3[i2], r2);
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(46), i2 = r(15), o = r(5), a3 = r(16), s3 = o("species");
        e2.exports = function(e3) {
          var t3 = n(e3), r2 = i2.f;
          a3 && t3 && !t3[s3] && r2(t3, s3, { configurable: true, get: function() {
            return this;
          } });
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a3 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s3(0), throw: s3(1), return: s3(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s3(o3) {
            return function(s4) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a3; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a3.label++, { value: o4[1], done: false };
                      case 5:
                        a3.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a3.ops.pop(), a3.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a3.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a3 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a3.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a3.label < i3[1]) {
                          a3.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a3.label < i3[2]) {
                          a3.label = i3[2], a3.ops.push(o4);
                          break;
                        }
                        i3[2] && a3.ops.pop(), a3.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a3);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s4]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function() {
          function e3(e4) {
            e4 === void 0 && (e4 = 1e3), this._items = /* @__PURE__ */ new Set(), this._limit = e4;
          }
          return e3.prototype.add = function(e4) {
            if (this._items.add(e4), this._items.size > this._limit) {
              var t3 = this._items.values().next();
              t3.done || this._items.delete(t3.value);
            }
            return this;
          }, e3.prototype.delete = function(e4) {
            return this._items.delete(e4);
          }, e3.prototype.has = function(e4) {
            return this._items.has(e4);
          }, e3.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e3.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e3.prototype.forEach = function(e4, t3) {
            var r2 = this;
            this._items.forEach(function(n2) {
              return e4.call(t3, n2, n2, r2);
            });
          }, e3.prototype.keys = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.keys())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.values = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.values())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.entries = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.entries())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype[Symbol.iterator] = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items)];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, Object.defineProperty(e3.prototype, Symbol.toStringTag, { get: function() {
            return "FixedSizeSet";
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.FixedSizeSet = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a3 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s3(0), throw: s3(1), return: s3(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s3(o3) {
            return function(s4) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a3; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a3.label++, { value: o4[1], done: false };
                      case 5:
                        a3.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a3.ops.pop(), a3.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a3.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a3 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a3.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a3.label < i3[1]) {
                          a3.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a3.label < i3[2]) {
                          a3.label = i3[2], a3.ops.push(o4);
                          break;
                        }
                        i3[2] && a3.ops.pop(), a3.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a3);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s4]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function() {
          function e3(e4) {
            e4 === void 0 && (e4 = 1e3), this._items = /* @__PURE__ */ new Map(), this._limit = e4;
          }
          return e3.prototype.get = function(e4) {
            return this._items.get(e4);
          }, e3.prototype.set = function(e4, t3) {
            if (this._items.set(e4, t3), this._items.size > this._limit) {
              var r2 = this._items.keys().next();
              r2.done || this._items.delete(r2.value);
            }
          }, e3.prototype.delete = function(e4) {
            return this._items.delete(e4);
          }, e3.prototype.has = function(e4) {
            return this._items.has(e4);
          }, e3.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e3.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e3.prototype.forEach = function(e4, t3) {
            this._items.forEach(function(r2, n2) {
              return e4.call(t3, n2, r2);
            });
          }, e3.prototype.keys = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.keys())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.values = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.values())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.entries = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.entries())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype[Symbol.iterator] = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items)];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, Object.defineProperty(e3.prototype, Symbol.toStringTag, { get: function() {
            return "ObjectCache";
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.ObjectCache = o;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4) {
            e4 === void 0 && (e4 = 1e3), this._items = /* @__PURE__ */ new Map(), this._limit = e4;
          }
          return e3.prototype.check = function(e4, t3) {
            if (this._items.get(e4) === t3)
              return true;
            if (this._items.get(t3) === e4)
              return false;
            var r2 = Math.random() < 0.5;
            if (r2 ? this._items.set(e4, t3) : this._items.set(t3, e4), this._items.size > this._limit) {
              var n2 = this._items.keys().next();
              n2.done || this._items.delete(n2.value);
            }
            return r2;
          }, e3;
        }();
        t2.CompareCache = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4) {
            this._initialized = false, this._value = void 0, this._initFunc = e4;
          }
          return Object.defineProperty(e3.prototype, "value", { get: function() {
            return this._initialized || (this._value = this._initFunc(), this._initialized = true), this._value;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.Lazy = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4) {
            this._pointer = 0, this._chars = Array.from(e4), this._length = this._chars.length;
          }
          return Object.defineProperty(e3.prototype, "eof", { get: function() {
            return this._pointer >= this._length;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._length;
          }, enumerable: true, configurable: true }), e3.prototype.codePoint = function() {
            if (this._codePoint === void 0)
              if (this.eof)
                this._codePoint = -1;
              else {
                var e4 = this._chars[this._pointer].codePointAt(0);
                this._codePoint = e4 !== void 0 ? e4 : -1;
              }
            return this._codePoint;
          }, e3.prototype.c = function() {
            return this._c === void 0 && (this._c = this.eof ? "" : this._chars[this._pointer]), this._c;
          }, e3.prototype.remaining = function() {
            return this._remaining === void 0 && (this._remaining = this.eof ? "" : this._chars.slice(this._pointer + 1).join("")), this._remaining;
          }, e3.prototype.substring = function() {
            return this._substring === void 0 && (this._substring = this.eof ? "" : this._chars.slice(this._pointer).join("")), this._substring;
          }, Object.defineProperty(e3.prototype, "pointer", { get: function() {
            return this._pointer;
          }, set: function(e4) {
            e4 !== this._pointer && (this._pointer = e4, this._codePoint = void 0, this._c = void 0, this._remaining = void 0, this._substring = void 0);
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.StringWalker = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(218);
        t2.MapWriter = n.MapWriter;
        var i2 = r(258);
        t2.XMLWriter = i2.XMLWriter;
        var o = r(67);
        t2.ObjectWriter = o.ObjectWriter;
        var a3 = r(260);
        t2.JSONWriter = a3.JSONWriter;
        var s3 = r(261);
        t2.YAMLWriter = s3.YAMLWriter;
      }, function(e2, t2, r) {
        "use strict";
        r(19), r(219), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(1), a3 = r(67), s3 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._writerOptions = o.applyDefaults(r2, { format: "map", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            var t4 = o.applyDefaults(this._writerOptions, { format: "object", wellFormed: false, verbose: false }), r2 = new a3.ObjectWriter(this._builderOptions, t4).serialize(e4);
            return this._convertObject(r2);
          }, t3.prototype._convertObject = function(e4) {
            if (o.isArray(e4)) {
              for (var t4 = 0; t4 < e4.length; t4++)
                e4[t4] = this._convertObject(e4[t4]);
              return e4;
            }
            if (o.isObject(e4)) {
              var r2 = /* @__PURE__ */ new Map();
              for (var n2 in e4)
                r2.set(n2, this._convertObject(e4[n2]));
              return r2;
            }
            return e4;
          }, t3;
        }(r(50).BaseWriter);
        t2.MapWriter = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(139), i2 = r(143);
        e2.exports = n("Map", function(e3) {
          return function() {
            return e3(this, arguments.length ? arguments[0] : void 0);
          };
        }, i2);
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(8), o = r(59), a3 = r(13), s3 = r(27), u2 = r(26), l = r(134), c2 = r(128), h3 = r(63), p = r(5), f = r(129), d3 = p("isConcatSpreadable"), m3 = f >= 51 || !i2(function() {
          var e3 = [];
          return e3[d3] = false, e3.concat()[0] !== e3;
        }), y3 = h3("concat"), v = function(e3) {
          if (!a3(e3))
            return false;
          var t3 = e3[d3];
          return t3 !== void 0 ? !!t3 : o(e3);
        };
        n({ target: "Array", proto: true, forced: !m3 || !y3 }, { concat: function(e3) {
          var t3, r2, n2, i3, o2, a4 = s3(this), h4 = c2(a4, 0), p2 = 0;
          for (t3 = -1, n2 = arguments.length; t3 < n2; t3++)
            if (v(o2 = t3 === -1 ? a4 : arguments[t3])) {
              if (p2 + (i3 = u2(o2.length)) > 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              for (r2 = 0; r2 < i3; r2++, p2++)
                r2 in o2 && l(h4, p2, o2[r2]);
            } else {
              if (p2 >= 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              l(h4, p2++, o2);
            }
          return h4.length = p2, h4;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(8);
        function i2(e3, t3) {
          return RegExp(e3, t3);
        }
        t2.UNSUPPORTED_Y = n(function() {
          var e3 = i2("a", "y");
          return e3.lastIndex = 2, e3.exec("abcd") != null;
        }), t2.BROKEN_CARET = n(function() {
          var e3 = i2("^r", "gy");
          return e3.lastIndex = 2, e3.exec("str") != null;
        });
      }, function(e2, t2, r) {
        var n = r(223);
        e2.exports = function(e3) {
          if (n(e3))
            throw TypeError("The method doesn't accept regular expressions");
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(13), i2 = r(42), o = r(5)("match");
        e2.exports = function(e3) {
          var t3;
          return n(e3) && ((t3 = e3[o]) !== void 0 ? !!t3 : i2(e3) == "RegExp");
        };
      }, function(e2, t2, r) {
        var n = r(5)("match");
        e2.exports = function(e3) {
          var t3 = /./;
          try {
            "/./"[e3](t3);
          } catch (r2) {
            try {
              return t3[n] = false, "/./"[e3](t3);
            } catch (e4) {
            }
          }
          return false;
        };
      }, function(e2, t2, r) {
        "use strict";
        r(68);
        var n = r(25), i2 = r(8), o = r(5), a3 = r(93), s3 = r(21), u2 = o("species"), l = !i2(function() {
          var e3 = /./;
          return e3.exec = function() {
            var e4 = [];
            return e4.groups = { a: "7" }, e4;
          }, "".replace(e3, "$<a>") !== "7";
        }), c2 = "a".replace(/./, "$0") === "$0", h3 = o("replace"), p = !!/./[h3] && /./[h3]("a", "$0") === "", f = !i2(function() {
          var e3 = /(?:)/, t3 = e3.exec;
          e3.exec = function() {
            return t3.apply(this, arguments);
          };
          var r2 = "ab".split(e3);
          return r2.length !== 2 || r2[0] !== "a" || r2[1] !== "b";
        });
        e2.exports = function(e3, t3, r2, h4) {
          var d3 = o(e3), m3 = !i2(function() {
            var t4 = {};
            return t4[d3] = function() {
              return 7;
            }, ""[e3](t4) != 7;
          }), y3 = m3 && !i2(function() {
            var t4 = false, r3 = /a/;
            return e3 === "split" && ((r3 = {}).constructor = {}, r3.constructor[u2] = function() {
              return r3;
            }, r3.flags = "", r3[d3] = /./[d3]), r3.exec = function() {
              return t4 = true, null;
            }, r3[d3](""), !t4;
          });
          if (!m3 || !y3 || e3 === "replace" && (!l || !c2 || p) || e3 === "split" && !f) {
            var v = /./[d3], _ = r2(d3, ""[e3], function(e4, t4, r3, n2, i3) {
              return t4.exec === a3 ? m3 && !i3 ? { done: true, value: v.call(t4, r3, n2) } : { done: true, value: e4.call(r3, t4, n2) } : { done: false };
            }, { REPLACE_KEEPS_$0: c2, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: p }), g = _[0], b2 = _[1];
            n(String.prototype, e3, g), n(RegExp.prototype, d3, t3 == 2 ? function(e4, t4) {
              return b2.call(e4, this, t4);
            } : function(e4) {
              return b2.call(e4, this);
            });
          }
          h4 && s3(RegExp.prototype[d3], "sham", true);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(137).charAt;
        e2.exports = function(e3, t3, r2) {
          return t3 + (r2 ? n(e3, t3).length : 1);
        };
      }, function(e2, t2, r) {
        var n = r(42), i2 = r(93);
        e2.exports = function(e3, t3) {
          var r2 = e3.exec;
          if (typeof r2 == "function") {
            var o = r2.call(e3, t3);
            if (typeof o != "object")
              throw TypeError("RegExp exec method returned something other than an Object or null");
            return o;
          }
          if (n(e3) !== "RegExp")
            throw TypeError("RegExp#exec called on incompatible receiver");
          return i2.call(e3, t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        (function(e3) {
          Object.defineProperty(t2, "__esModule", { value: true });
          var n = r(96);
          t2.forgivingBase64Encode = function(t3) {
            return e3.from(t3).toString("base64");
          }, t2.forgivingBase64Decode = function(t3) {
            return t3 === "" ? "" : ((t3 = t3.replace(n.ASCIIWhiteSpace, "")).length % 4 == 0 && (t3.endsWith("==") ? t3 = t3.substr(0, t3.length - 2) : t3.endsWith("=") && (t3 = t3.substr(0, t3.length - 1))), t3.length % 4 == 1 ? null : /[0-9A-Za-z+/]/.test(t3) ? e3.from(t3, "base64").toString("utf8") : null);
          };
        }).call(this, r(145).Buffer);
      }, function(e2, t2, r) {
        "use strict";
        t2.byteLength = function(e3) {
          var t3 = l(e3), r2 = t3[0], n2 = t3[1];
          return 3 * (r2 + n2) / 4 - n2;
        }, t2.toByteArray = function(e3) {
          var t3, r2, n2 = l(e3), a4 = n2[0], s4 = n2[1], u3 = new o(function(e4, t4, r3) {
            return 3 * (t4 + r3) / 4 - r3;
          }(0, a4, s4)), c3 = 0, h3 = s4 > 0 ? a4 - 4 : a4;
          for (r2 = 0; r2 < h3; r2 += 4)
            t3 = i2[e3.charCodeAt(r2)] << 18 | i2[e3.charCodeAt(r2 + 1)] << 12 | i2[e3.charCodeAt(r2 + 2)] << 6 | i2[e3.charCodeAt(r2 + 3)], u3[c3++] = t3 >> 16 & 255, u3[c3++] = t3 >> 8 & 255, u3[c3++] = 255 & t3;
          s4 === 2 && (t3 = i2[e3.charCodeAt(r2)] << 2 | i2[e3.charCodeAt(r2 + 1)] >> 4, u3[c3++] = 255 & t3);
          s4 === 1 && (t3 = i2[e3.charCodeAt(r2)] << 10 | i2[e3.charCodeAt(r2 + 1)] << 4 | i2[e3.charCodeAt(r2 + 2)] >> 2, u3[c3++] = t3 >> 8 & 255, u3[c3++] = 255 & t3);
          return u3;
        }, t2.fromByteArray = function(e3) {
          for (var t3, r2 = e3.length, i3 = r2 % 3, o2 = [], a4 = 0, s4 = r2 - i3; a4 < s4; a4 += 16383)
            o2.push(c2(e3, a4, a4 + 16383 > s4 ? s4 : a4 + 16383));
          i3 === 1 ? (t3 = e3[r2 - 1], o2.push(n[t3 >> 2] + n[t3 << 4 & 63] + "==")) : i3 === 2 && (t3 = (e3[r2 - 2] << 8) + e3[r2 - 1], o2.push(n[t3 >> 10] + n[t3 >> 4 & 63] + n[t3 << 2 & 63] + "="));
          return o2.join("");
        };
        for (var n = [], i2 = [], o = typeof Uint8Array != "undefined" ? Uint8Array : Array, a3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s3 = 0, u2 = a3.length; s3 < u2; ++s3)
          n[s3] = a3[s3], i2[a3.charCodeAt(s3)] = s3;
        function l(e3) {
          var t3 = e3.length;
          if (t3 % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
          var r2 = e3.indexOf("=");
          return r2 === -1 && (r2 = t3), [r2, r2 === t3 ? 0 : 4 - r2 % 4];
        }
        function c2(e3, t3, r2) {
          for (var i3, o2, a4 = [], s4 = t3; s4 < r2; s4 += 3)
            i3 = (e3[s4] << 16 & 16711680) + (e3[s4 + 1] << 8 & 65280) + (255 & e3[s4 + 2]), a4.push(n[(o2 = i3) >> 18 & 63] + n[o2 >> 12 & 63] + n[o2 >> 6 & 63] + n[63 & o2]);
          return a4.join("");
        }
        i2["-".charCodeAt(0)] = 62, i2["_".charCodeAt(0)] = 63;
      }, function(e2, t2) {
        t2.read = function(e3, t3, r, n, i2) {
          var o, a3, s3 = 8 * i2 - n - 1, u2 = (1 << s3) - 1, l = u2 >> 1, c2 = -7, h3 = r ? i2 - 1 : 0, p = r ? -1 : 1, f = e3[t3 + h3];
          for (h3 += p, o = f & (1 << -c2) - 1, f >>= -c2, c2 += s3; c2 > 0; o = 256 * o + e3[t3 + h3], h3 += p, c2 -= 8)
            ;
          for (a3 = o & (1 << -c2) - 1, o >>= -c2, c2 += n; c2 > 0; a3 = 256 * a3 + e3[t3 + h3], h3 += p, c2 -= 8)
            ;
          if (o === 0)
            o = 1 - l;
          else {
            if (o === u2)
              return a3 ? NaN : 1 / 0 * (f ? -1 : 1);
            a3 += Math.pow(2, n), o -= l;
          }
          return (f ? -1 : 1) * a3 * Math.pow(2, o - n);
        }, t2.write = function(e3, t3, r, n, i2, o) {
          var a3, s3, u2, l = 8 * o - i2 - 1, c2 = (1 << l) - 1, h3 = c2 >> 1, p = i2 === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = n ? 0 : o - 1, d3 = n ? 1 : -1, m3 = t3 < 0 || t3 === 0 && 1 / t3 < 0 ? 1 : 0;
          for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (s3 = isNaN(t3) ? 1 : 0, a3 = c2) : (a3 = Math.floor(Math.log(t3) / Math.LN2), t3 * (u2 = Math.pow(2, -a3)) < 1 && (a3--, u2 *= 2), (t3 += a3 + h3 >= 1 ? p / u2 : p * Math.pow(2, 1 - h3)) * u2 >= 2 && (a3++, u2 /= 2), a3 + h3 >= c2 ? (s3 = 0, a3 = c2) : a3 + h3 >= 1 ? (s3 = (t3 * u2 - 1) * Math.pow(2, i2), a3 += h3) : (s3 = t3 * Math.pow(2, h3 - 1) * Math.pow(2, i2), a3 = 0)); i2 >= 8; e3[r + f] = 255 & s3, f += d3, s3 /= 256, i2 -= 8)
            ;
          for (a3 = a3 << i2 | s3, l += i2; l > 0; e3[r + f] = 255 & a3, f += d3, a3 /= 256, l -= 8)
            ;
          e3[r + f - d3] |= 128 * m3;
        };
      }, function(e2, t2) {
        var r = {}.toString;
        e2.exports = Array.isArray || function(e3) {
          return r.call(e3) == "[object Array]";
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(1);
        function o(e3) {
          var t3, r2;
          if (e3 === null || i2.isString(e3) || i2.isNumber(e3))
            return e3;
          if (i2.isArray(e3)) {
            var a3 = new Array();
            try {
              for (var s3 = n(e3), u2 = s3.next(); !u2.done; u2 = s3.next()) {
                var l = u2.value;
                a3.push(o(l));
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (r2 = s3.return) && r2.call(s3);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return a3;
          }
          if (i2.isObject(e3)) {
            a3 = /* @__PURE__ */ new Map();
            for (var c2 in e3)
              if (e3.hasOwnProperty(c2)) {
                var h3 = e3[c2];
                a3.set(c2, o(h3));
              }
            return a3;
          }
          return e3;
        }
        t2.parseJSONFromBytes = function(e3) {
          var t3 = i2.utf8Decode(e3);
          return JSON.parse.call(void 0, t3);
        }, t2.serializeJSONToBytes = function(e3) {
          var t3 = JSON.stringify.call(void 0, e3);
          return i2.utf8Encode(t3);
        }, t2.parseJSONIntoInfraValues = function(e3) {
          return o(JSON.parse.call(void 0, e3));
        }, t2.convertAJSONDerivedJavaScriptValueToAnInfraValue = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a4 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s4(0), throw: s4(1), return: s4(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s4(o3) {
            return function(s5) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a4; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a4.label++, { value: o4[1], done: false };
                      case 5:
                        a4.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a4.ops.pop(), a4.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a4.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a4 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a4.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a4.label < i3[1]) {
                          a4.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a4.label < i3[2]) {
                          a4.label = i3[2], a4.ops.push(o4);
                          break;
                        }
                        i3[2] && a4.ops.pop(), a4.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a4);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s5]);
            };
          }
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        }, a3 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(1);
        t2.append = function(e3, t3) {
          e3.push(t3);
        }, t2.extend = function(e3, t3) {
          e3.push.apply(e3, o(t3));
        }, t2.prepend = function(e3, t3) {
          e3.unshift(t3);
        }, t2.replace = function(e3, t3, r2) {
          var n2, i3, o2 = 0;
          try {
            for (var u2 = a3(e3), l = u2.next(); !l.done; l = u2.next()) {
              var c2 = l.value;
              if (s3.isFunction(t3))
                t3.call(null, c2) && (e3[o2] = r2);
              else if (c2 === t3)
                return void (e3[o2] = r2);
              o2++;
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (i3 = u2.return) && i3.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
        }, t2.insert = function(e3, t3, r2) {
          e3.splice(r2, 0, t3);
        }, t2.remove = function(e3, t3) {
          for (var r2 = e3.length; r2--; ) {
            var n2 = e3[r2];
            if (s3.isFunction(t3))
              t3.call(null, n2) && e3.splice(r2, 1);
            else if (n2 === t3)
              return void e3.splice(r2, 1);
          }
        }, t2.empty = function(e3) {
          e3.length = 0;
        }, t2.contains = function(e3, t3) {
          var r2, n2;
          try {
            for (var i3 = a3(e3), o2 = i3.next(); !o2.done; o2 = i3.next()) {
              var u2 = o2.value;
              if (s3.isFunction(t3)) {
                if (t3.call(null, u2))
                  return true;
              } else if (u2 === t3)
                return true;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              o2 && !o2.done && (n2 = i3.return) && n2.call(i3);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t2.size = function(e3, t3) {
          var r2, n2;
          if (t3 === void 0)
            return e3.length;
          var i3 = 0;
          try {
            for (var o2 = a3(e3), s4 = o2.next(); !s4.done; s4 = o2.next()) {
              var u2 = s4.value;
              t3.call(null, u2) && i3++;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return i3;
        }, t2.isEmpty = function(e3) {
          return e3.length === 0;
        }, t2.forEach = function(e3, t3) {
          var r2, i3, o2, s4, u2, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t3 !== void 0 ? [3, 2] : [5, a3(e3)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = a3(e3), i3 = r2.next(), n2.label = 3;
              case 3:
                return i3.done ? [3, 6] : (o2 = i3.value, t3.call(null, o2) ? [4, o2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return i3 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s4 = n2.sent(), u2 = { error: s4 }, [3, 9];
              case 8:
                try {
                  i3 && !i3.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u2)
                    throw u2.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t2.clone = function(e3) {
          return new (Array.bind.apply(Array, o([void 0], e3)))();
        }, t2.sortInAscendingOrder = function(e3, t3) {
          return e3.sort(function(e4, r2) {
            return t3.call(null, e4, r2) ? -1 : 1;
          });
        }, t2.sortInDescendingOrder = function(e3, t3) {
          return e3.sort(function(e4, r2) {
            return t3.call(null, e4, r2) ? 1 : -1;
          });
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a4 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s4(0), throw: s4(1), return: s4(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s4(o3) {
            return function(s5) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a4; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a4.label++, { value: o4[1], done: false };
                      case 5:
                        a4.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a4.ops.pop(), a4.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a4.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a4 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a4.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a4.label < i3[1]) {
                          a4.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a4.label < i3[2]) {
                          a4.label = i3[2], a4.ops.push(o4);
                          break;
                        }
                        i3[2] && a4.ops.pop(), a4.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a4);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s5]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, a3 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(o(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(1);
        t2.get = function(e3, t3) {
          return e3.get(t3);
        }, t2.set = function(e3, t3, r2) {
          e3.set(t3, r2);
        }, t2.remove = function(e3, t3) {
          var r2, n2, o2, a4;
          if (s3.isFunction(t3)) {
            var u2 = [];
            try {
              for (var l = i2(e3), c2 = l.next(); !c2.done; c2 = l.next()) {
                var h3 = c2.value;
                t3.call(null, h3) && u2.push(h3[0]);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i2(u2), f = p.next(); !f.done; f = p.next()) {
                var d3 = f.value;
                e3.delete(d3);
              }
            } catch (e4) {
              o2 = { error: e4 };
            } finally {
              try {
                f && !f.done && (a4 = p.return) && a4.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e3.delete(t3);
        }, t2.contains = function(e3, t3) {
          var r2, n2;
          if (s3.isFunction(t3)) {
            try {
              for (var o2 = i2(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var u2 = a4.value;
                if (t3.call(null, u2))
                  return true;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                a4 && !a4.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return false;
          }
          return e3.has(t3);
        }, t2.keys = function(e3) {
          return new Set(e3.keys());
        }, t2.values = function(e3) {
          return a3(e3.values());
        }, t2.size = function(e3, t3) {
          var r2, n2;
          if (t3 === void 0)
            return e3.size;
          var o2 = 0;
          try {
            for (var a4 = i2(e3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              var u2 = s4.value;
              t3.call(null, u2) && o2++;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = a4.return) && n2.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.isEmpty = function(e3) {
          return e3.size === 0;
        }, t2.forEach = function(e3, t3) {
          var r2, o2, a4, s4, u2, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t3 !== void 0 ? [3, 2] : [5, i2(e3)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i2(e3), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a4 = o2.value, t3.call(null, a4) ? [4, a4] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s4 = n2.sent(), u2 = { error: s4 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u2)
                    throw u2.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t2.clone = function(e3) {
          return new Map(e3);
        }, t2.sortInAscendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? -1 : 1;
          }), new Map(r2);
        }, t2.sortInDescendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? 1 : -1;
          }), new Map(r2);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.HTML = "http://www.w3.org/1999/xhtml", t2.XML = "http://www.w3.org/XML/1998/namespace", t2.XMLNS = "http://www.w3.org/2000/xmlns/", t2.MathML = "http://www.w3.org/1998/Math/MathML", t2.SVG = "http://www.w3.org/2000/svg", t2.XLink = "http://www.w3.org/1999/xlink";
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.enqueue = function(e3, t3) {
          e3.push(t3);
        }, t2.dequeue = function(e3) {
          return e3.shift() || null;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a4 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s4(0), throw: s4(1), return: s4(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s4(o3) {
            return function(s5) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a4; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a4.label++, { value: o4[1], done: false };
                      case 5:
                        a4.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a4.ops.pop(), a4.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a4.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a4 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a4.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a4.label < i3[1]) {
                          a4.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a4.label < i3[2]) {
                          a4.label = i3[2], a4.ops.push(o4);
                          break;
                        }
                        i3[2] && a4.ops.pop(), a4.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a4);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s5]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, a3 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(o(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(1);
        function u2(e3, t3) {
          var r2, n2;
          try {
            for (var o2 = i2(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value;
              if (!t3.has(s4))
                return false;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return true;
        }
        t2.append = function(e3, t3) {
          e3.add(t3);
        }, t2.extend = function(e3, t3) {
          t3.forEach(e3.add, e3);
        }, t2.prepend = function(e3, t3) {
          var r2 = new Set(e3);
          e3.clear(), e3.add(t3), r2.forEach(e3.add, e3);
        }, t2.replace = function(e3, t3, r2) {
          var n2, o2, a4 = /* @__PURE__ */ new Set();
          try {
            for (var u3 = i2(e3), l = u3.next(); !l.done; l = u3.next()) {
              var c2 = l.value;
              s3.isFunction(t3) ? t3.call(null, c2) ? a4.add(r2) : a4.add(c2) : c2 === t3 ? a4.add(r2) : a4.add(c2);
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (o2 = u3.return) && o2.call(u3);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e3.clear(), a4.forEach(e3.add, e3);
        }, t2.insert = function(e3, t3, r2) {
          var n2, o2, a4 = /* @__PURE__ */ new Set(), s4 = 0;
          try {
            for (var u3 = i2(e3), l = u3.next(); !l.done; l = u3.next()) {
              var c2 = l.value;
              s4 === r2 && a4.add(t3), a4.add(c2), s4++;
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (o2 = u3.return) && o2.call(u3);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e3.clear(), a4.forEach(e3.add, e3);
        }, t2.remove = function(e3, t3) {
          var r2, n2, o2, a4;
          if (s3.isFunction(t3)) {
            var u3 = [];
            try {
              for (var l = i2(e3), c2 = l.next(); !c2.done; c2 = l.next()) {
                var h3 = c2.value;
                t3.call(null, h3) && u3.push(h3);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i2(u3), f = p.next(); !f.done; f = p.next()) {
                var d3 = f.value;
                e3.delete(d3);
              }
            } catch (e4) {
              o2 = { error: e4 };
            } finally {
              try {
                f && !f.done && (a4 = p.return) && a4.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e3.delete(t3);
        }, t2.empty = function(e3) {
          e3.clear();
        }, t2.contains = function(e3, t3) {
          var r2, n2;
          if (!s3.isFunction(t3))
            return e3.has(t3);
          try {
            for (var o2 = i2(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var u3 = a4.value;
              if (t3.call(null, u3))
                return true;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t2.size = function(e3, t3) {
          var r2, n2;
          if (t3 === void 0)
            return e3.size;
          var o2 = 0;
          try {
            for (var a4 = i2(e3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              var u3 = s4.value;
              t3.call(null, u3) && o2++;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = a4.return) && n2.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.isEmpty = function(e3) {
          return e3.size === 0;
        }, t2.forEach = function(e3, t3) {
          var r2, o2, a4, s4, u3, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t3 !== void 0 ? [3, 2] : [5, i2(e3)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i2(e3), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a4 = o2.value, t3.call(null, a4) ? [4, a4] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s4 = n2.sent(), u3 = { error: s4 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u3)
                    throw u3.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t2.clone = function(e3) {
          return new Set(e3);
        }, t2.sortInAscendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? -1 : 1;
          }), new Set(r2);
        }, t2.sortInDescendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? 1 : -1;
          }), new Set(r2);
        }, t2.isSubsetOf = u2, t2.isSupersetOf = function(e3, t3) {
          return u2(t3, e3);
        }, t2.intersection = function(e3, t3) {
          var r2, n2, o2 = /* @__PURE__ */ new Set();
          try {
            for (var a4 = i2(e3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              var u3 = s4.value;
              t3.has(u3) && o2.add(u3);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = a4.return) && n2.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.union = function(e3, t3) {
          var r2 = new Set(e3);
          return t3.forEach(r2.add, r2), r2;
        }, t2.range = function(e3, t3) {
          for (var r2 = /* @__PURE__ */ new Set(), n2 = e3; n2 <= t3; n2++)
            r2.add(n2);
          return r2;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.push = function(e3, t3) {
          e3.push(t3);
        }, t2.pop = function(e3) {
          return e3.pop() || null;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(96), o = r(147), a3 = r(146), s3 = r(1);
        function u2(e3, t3) {
          for (var r2 = 0; ; ) {
            var n2 = r2 < e3.length ? e3.charCodeAt(r2) : null, i3 = r2 < t3.length ? t3.charCodeAt(r2) : null;
            if (n2 === null)
              return true;
            if (n2 !== i3)
              return false;
            r2++;
          }
        }
        function l(e3) {
          var t3, r2, i3 = Array.from(e3), o2 = new Uint8Array(i3.length), a4 = 0;
          try {
            for (var s4 = n(e3), u3 = s4.next(); !u3.done; u3 = s4.next()) {
              var l2 = u3.value.codePointAt(0);
              console.assert(l2 !== void 0 && l2 <= 255, "isomorphicEncode requires string bytes to be less than or equal to 0x00FF."), l2 !== void 0 && l2 <= 255 && (o2[a4++] = l2);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              u3 && !u3.done && (r2 = s4.return) && r2.call(s4);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return o2;
        }
        function c2(e3) {
          return /^[\u0000-\u007F]*$/.test(e3);
        }
        function h3(e3) {
          var t3, r2, i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value, u3 = s4.codePointAt(0);
              i3 += u3 !== void 0 && u3 >= 65 && u3 <= 90 ? String.fromCodePoint(u3 + 32) : s4;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function p(e3) {
          return e3.replace(/^[\t\n\f\r ]+/, "").replace(/[\t\n\f\r ]+$/, "");
        }
        function f(e3, t3, r2) {
          if (!s3.isArray(t3))
            return f(e3, Array.from(t3), r2);
          for (var n2 = ""; r2.position < t3.length && e3.call(null, t3[r2.position]); )
            n2 += t3[r2.position], r2.position++;
          return n2;
        }
        function d3(e3, t3) {
          f(function(e4) {
            return i2.ASCIIWhiteSpace.test(e4);
          }, e3, t3);
        }
        t2.isCodeUnitPrefix = u2, t2.isCodeUnitLessThan = function(e3, t3) {
          if (u2(t3, e3))
            return false;
          if (u2(e3, t3))
            return true;
          for (var r2 = 0; r2 < Math.min(e3.length, t3.length); r2++) {
            var n2 = e3.charCodeAt(r2), i3 = t3.charCodeAt(r2);
            if (n2 !== i3)
              return n2 < i3;
          }
          return false;
        }, t2.isomorphicEncode = l, t2.isASCIIString = c2, t2.asciiLowercase = h3, t2.asciiUppercase = function(e3) {
          var t3, r2, i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value, u3 = s4.codePointAt(0);
              i3 += u3 !== void 0 && u3 >= 97 && u3 <= 122 ? String.fromCodePoint(u3 - 32) : s4;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }, t2.asciiCaseInsensitiveMatch = function(e3, t3) {
          return h3(e3) === h3(t3);
        }, t2.asciiEncode = function(e3) {
          return console.assert(c2(e3), "asciiEncode requires an ASCII string."), l(e3);
        }, t2.asciiDecode = function(e3) {
          var t3, r2;
          try {
            for (var i3 = n(e3), s4 = i3.next(); !s4.done; s4 = i3.next()) {
              var u3 = s4.value;
              console.assert(a3.isASCIIByte(u3), "asciiDecode requires an ASCII byte sequence.");
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (r2 = i3.return) && r2.call(i3);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return o.isomorphicDecode(e3);
        }, t2.stripNewlines = function(e3) {
          return e3.replace(/[\n\r]/g, "");
        }, t2.normalizeNewlines = function(e3) {
          return e3.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        }, t2.stripLeadingAndTrailingASCIIWhitespace = p, t2.stripAndCollapseASCIIWhitespace = function(e3) {
          return p(e3.replace(/[\t\n\f\r ]{2,}/g, " "));
        }, t2.collectASequenceOfCodePoints = f, t2.skipASCIIWhitespace = d3, t2.strictlySplit = function e3(t3, r2) {
          if (!s3.isArray(t3))
            return e3(Array.from(t3), r2);
          var n2 = { position: 0 }, i3 = [], o2 = f(function(e4) {
            return r2 !== e4;
          }, t3, n2);
          for (i3.push(o2); n2.position < t3.length; )
            console.assert(t3[n2.position] === r2, "strictlySplit found no delimiter in input string."), n2.position++, o2 = f(function(e4) {
              return r2 !== e4;
            }, t3, n2), i3.push(o2);
          return i3;
        }, t2.splitAStringOnASCIIWhitespace = function e3(t3) {
          if (!s3.isArray(t3))
            return e3(Array.from(t3));
          var r2 = { position: 0 }, n2 = [];
          for (d3(t3, r2); r2.position < t3.length; ) {
            var o2 = f(function(e4) {
              return !i2.ASCIIWhiteSpace.test(e4);
            }, t3, r2);
            n2.push(o2), d3(t3, r2);
          }
          return n2;
        }, t2.splitAStringOnCommas = function e3(t3) {
          if (!s3.isArray(t3))
            return e3(Array.from(t3));
          for (var r2 = { position: 0 }, n2 = []; r2.position < t3.length; ) {
            var i3 = f(function(e4) {
              return e4 !== ",";
            }, t3, r2);
            n2.push(p(i3)), r2.position < t3.length && (console.assert(t3[r2.position] === ",", "splitAStringOnCommas found no delimiter in input string."), r2.position++);
          }
          return n2;
        }, t2.concatenate = function(e3, t3) {
          return t3 === void 0 && (t3 = ""), e3.length === 0 ? "" : e3.join(t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(97);
        t2.abort_add = function(e3, t3) {
          t3._abortedFlag || t3._abortAlgorithms.add(e3);
        }, t2.abort_remove = function(e3, t3) {
          t3._abortAlgorithms.delete(e3);
        }, t2.abort_signalAbort = function(e3) {
          var t3, r2;
          if (!e3._abortedFlag) {
            e3._abortedFlag = true;
            try {
              for (var o = n(e3._abortAlgorithms), a3 = o.next(); !a3.done; a3 = o.next()) {
                a3.value.call(e3);
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                a3 && !a3.done && (r2 = o.return) && r2.call(o);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            e3._abortAlgorithms.clear(), i2.event_fireAnEvent("abort", e3);
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(150), i2 = function() {
          function e3() {
          }
          return e3.asNode = function(e4) {
            if (n.Guard.isNode(e4))
              return e4;
            throw new Error("Invalid object. Node expected.");
          }, e3;
        }();
        t2.Cast = i2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "size", { get: function() {
            return 0;
          }, enumerable: true, configurable: true }), e3.prototype.add = function(e4) {
            throw new Error("Cannot add to an empty set.");
          }, e3.prototype.clear = function() {
          }, e3.prototype.delete = function(e4) {
            return false;
          }, e3.prototype.forEach = function(e4, t3) {
          }, e3.prototype.has = function(e4) {
            return false;
          }, e3.prototype[Symbol.iterator] = function() {
            return new i2();
          }, e3.prototype.entries = function() {
            return new i2();
          }, e3.prototype.keys = function() {
            return new i2();
          }, e3.prototype.values = function() {
            return new i2();
          }, Object.defineProperty(e3.prototype, Symbol.toStringTag, { get: function() {
            return "EmptySet";
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.EmptySet = n;
        var i2 = function() {
          function e3() {
          }
          return e3.prototype[Symbol.iterator] = function() {
            return this;
          }, e3.prototype.next = function() {
            return { done: true, value: null };
          }, e3;
        }();
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), function(e3) {
          e3[e3.SchemeStart = 0] = "SchemeStart", e3[e3.Scheme = 1] = "Scheme", e3[e3.NoScheme = 2] = "NoScheme", e3[e3.SpecialRelativeOrAuthority = 3] = "SpecialRelativeOrAuthority", e3[e3.PathOrAuthority = 4] = "PathOrAuthority", e3[e3.Relative = 5] = "Relative", e3[e3.RelativeSlash = 6] = "RelativeSlash", e3[e3.SpecialAuthoritySlashes = 7] = "SpecialAuthoritySlashes", e3[e3.SpecialAuthorityIgnoreSlashes = 8] = "SpecialAuthorityIgnoreSlashes", e3[e3.Authority = 9] = "Authority", e3[e3.Host = 10] = "Host", e3[e3.Hostname = 11] = "Hostname", e3[e3.Port = 12] = "Port", e3[e3.File = 13] = "File", e3[e3.FileSlash = 14] = "FileSlash", e3[e3.FileHost = 15] = "FileHost", e3[e3.PathStart = 16] = "PathStart", e3[e3.Path = 17] = "Path", e3[e3.CannotBeABaseURLPath = 18] = "CannotBeABaseURLPath", e3[e3.Query = 19] = "Query", e3[e3.Fragment = 20] = "Fragment";
        }(t2.ParserState || (t2.ParserState = {})), t2.OpaqueOrigin = ["", "", null, null];
      }, function(e2, t2, r) {
        "use strict";
        var n = r(245), i2 = r(247);
        function o() {
          this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
        }
        t2.parse = g, t2.resolve = function(e3, t3) {
          return g(e3, false, true).resolve(t3);
        }, t2.resolveObject = function(e3, t3) {
          return e3 ? g(e3, false, true).resolveObject(t3) : t3;
        }, t2.format = function(e3) {
          i2.isString(e3) && (e3 = g(e3));
          return e3 instanceof o ? e3.format() : o.prototype.format.call(e3);
        }, t2.Url = o;
        var a3 = /^([a-z0-9.+-]+:)/i, s3 = /:[0-9]*$/, u2 = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]), c2 = ["'"].concat(l), h3 = ["%", "/", "?", ";", "#"].concat(c2), p = ["/", "?", "#"], f = /^[+a-z0-9A-Z_-]{0,63}$/, d3 = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, m3 = { javascript: true, "javascript:": true }, y3 = { javascript: true, "javascript:": true }, v = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, _ = r(248);
        function g(e3, t3, r2) {
          if (e3 && i2.isObject(e3) && e3 instanceof o)
            return e3;
          var n2 = new o();
          return n2.parse(e3, t3, r2), n2;
        }
        o.prototype.parse = function(e3, t3, r2) {
          if (!i2.isString(e3))
            throw new TypeError("Parameter 'url' must be a string, not " + typeof e3);
          var o2 = e3.indexOf("?"), s4 = o2 !== -1 && o2 < e3.indexOf("#") ? "?" : "#", l2 = e3.split(s4);
          l2[0] = l2[0].replace(/\\/g, "/");
          var g2 = e3 = l2.join(s4);
          if (g2 = g2.trim(), !r2 && e3.split("#").length === 1) {
            var b2 = u2.exec(g2);
            if (b2)
              return this.path = g2, this.href = g2, this.pathname = b2[1], b2[2] ? (this.search = b2[2], this.query = t3 ? _.parse(this.search.substr(1)) : this.search.substr(1)) : t3 && (this.search = "", this.query = {}), this;
          }
          var x2 = a3.exec(g2);
          if (x2) {
            var w2 = (x2 = x2[0]).toLowerCase();
            this.protocol = w2, g2 = g2.substr(x2.length);
          }
          if (r2 || x2 || g2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var E2 = g2.substr(0, 2) === "//";
            !E2 || x2 && y3[x2] || (g2 = g2.substr(2), this.slashes = true);
          }
          if (!y3[x2] && (E2 || x2 && !v[x2])) {
            for (var D2, S3, C = -1, A = 0; A < p.length; A++) {
              (N = g2.indexOf(p[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            (S3 = C === -1 ? g2.lastIndexOf("@") : g2.lastIndexOf("@", C)) !== -1 && (D2 = g2.slice(0, S3), g2 = g2.slice(S3 + 1), this.auth = decodeURIComponent(D2)), C = -1;
            for (A = 0; A < h3.length; A++) {
              var N;
              (N = g2.indexOf(h3[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            C === -1 && (C = g2.length), this.host = g2.slice(0, C), g2 = g2.slice(C), this.parseHost(), this.hostname = this.hostname || "";
            var T2 = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
            if (!T2)
              for (var O2 = this.hostname.split(/\./), F = (A = 0, O2.length); A < F; A++) {
                var k2 = O2[A];
                if (k2 && !k2.match(f)) {
                  for (var P = "", I2 = 0, L2 = k2.length; I2 < L2; I2++)
                    k2.charCodeAt(I2) > 127 ? P += "x" : P += k2[I2];
                  if (!P.match(f)) {
                    var M3 = O2.slice(0, A), B2 = O2.slice(A + 1), j = k2.match(d3);
                    j && (M3.push(j[1]), B2.unshift(j[2])), B2.length && (g2 = "/" + B2.join(".") + g2), this.hostname = M3.join(".");
                    break;
                  }
                }
              }
            this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T2 || (this.hostname = n.toASCII(this.hostname));
            var R2 = this.port ? ":" + this.port : "", z2 = this.hostname || "";
            this.host = z2 + R2, this.href += this.host, T2 && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), g2[0] !== "/" && (g2 = "/" + g2));
          }
          if (!m3[w2])
            for (A = 0, F = c2.length; A < F; A++) {
              var U = c2[A];
              if (g2.indexOf(U) !== -1) {
                var G2 = encodeURIComponent(U);
                G2 === U && (G2 = escape(U)), g2 = g2.split(U).join(G2);
              }
            }
          var X2 = g2.indexOf("#");
          X2 !== -1 && (this.hash = g2.substr(X2), g2 = g2.slice(0, X2));
          var q2 = g2.indexOf("?");
          if (q2 !== -1 ? (this.search = g2.substr(q2), this.query = g2.substr(q2 + 1), t3 && (this.query = _.parse(this.query)), g2 = g2.slice(0, q2)) : t3 && (this.search = "", this.query = {}), g2 && (this.pathname = g2), v[w2] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
            R2 = this.pathname || "";
            var W = this.search || "";
            this.path = R2 + W;
          }
          return this.href = this.format(), this;
        }, o.prototype.format = function() {
          var e3 = this.auth || "";
          e3 && (e3 = (e3 = encodeURIComponent(e3)).replace(/%3A/i, ":"), e3 += "@");
          var t3 = this.protocol || "", r2 = this.pathname || "", n2 = this.hash || "", o2 = false, a4 = "";
          this.host ? o2 = e3 + this.host : this.hostname && (o2 = e3 + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (o2 += ":" + this.port)), this.query && i2.isObject(this.query) && Object.keys(this.query).length && (a4 = _.stringify(this.query));
          var s4 = this.search || a4 && "?" + a4 || "";
          return t3 && t3.substr(-1) !== ":" && (t3 += ":"), this.slashes || (!t3 || v[t3]) && o2 !== false ? (o2 = "//" + (o2 || ""), r2 && r2.charAt(0) !== "/" && (r2 = "/" + r2)) : o2 || (o2 = ""), n2 && n2.charAt(0) !== "#" && (n2 = "#" + n2), s4 && s4.charAt(0) !== "?" && (s4 = "?" + s4), t3 + o2 + (r2 = r2.replace(/[?#]/g, function(e4) {
            return encodeURIComponent(e4);
          })) + (s4 = s4.replace("#", "%23")) + n2;
        }, o.prototype.resolve = function(e3) {
          return this.resolveObject(g(e3, false, true)).format();
        }, o.prototype.resolveObject = function(e3) {
          if (i2.isString(e3)) {
            var t3 = new o();
            t3.parse(e3, false, true), e3 = t3;
          }
          for (var r2 = new o(), n2 = Object.keys(this), a4 = 0; a4 < n2.length; a4++) {
            var s4 = n2[a4];
            r2[s4] = this[s4];
          }
          if (r2.hash = e3.hash, e3.href === "")
            return r2.href = r2.format(), r2;
          if (e3.slashes && !e3.protocol) {
            for (var u3 = Object.keys(e3), l2 = 0; l2 < u3.length; l2++) {
              var c3 = u3[l2];
              c3 !== "protocol" && (r2[c3] = e3[c3]);
            }
            return v[r2.protocol] && r2.hostname && !r2.pathname && (r2.path = r2.pathname = "/"), r2.href = r2.format(), r2;
          }
          if (e3.protocol && e3.protocol !== r2.protocol) {
            if (!v[e3.protocol]) {
              for (var h4 = Object.keys(e3), p2 = 0; p2 < h4.length; p2++) {
                var f2 = h4[p2];
                r2[f2] = e3[f2];
              }
              return r2.href = r2.format(), r2;
            }
            if (r2.protocol = e3.protocol, e3.host || y3[e3.protocol])
              r2.pathname = e3.pathname;
            else {
              for (var d4 = (e3.pathname || "").split("/"); d4.length && !(e3.host = d4.shift()); )
                ;
              e3.host || (e3.host = ""), e3.hostname || (e3.hostname = ""), d4[0] !== "" && d4.unshift(""), d4.length < 2 && d4.unshift(""), r2.pathname = d4.join("/");
            }
            if (r2.search = e3.search, r2.query = e3.query, r2.host = e3.host || "", r2.auth = e3.auth, r2.hostname = e3.hostname || e3.host, r2.port = e3.port, r2.pathname || r2.search) {
              var m4 = r2.pathname || "", _2 = r2.search || "";
              r2.path = m4 + _2;
            }
            return r2.slashes = r2.slashes || e3.slashes, r2.href = r2.format(), r2;
          }
          var g2 = r2.pathname && r2.pathname.charAt(0) === "/", b2 = e3.host || e3.pathname && e3.pathname.charAt(0) === "/", x2 = b2 || g2 || r2.host && e3.pathname, w2 = x2, E2 = r2.pathname && r2.pathname.split("/") || [], D2 = (d4 = e3.pathname && e3.pathname.split("/") || [], r2.protocol && !v[r2.protocol]);
          if (D2 && (r2.hostname = "", r2.port = null, r2.host && (E2[0] === "" ? E2[0] = r2.host : E2.unshift(r2.host)), r2.host = "", e3.protocol && (e3.hostname = null, e3.port = null, e3.host && (d4[0] === "" ? d4[0] = e3.host : d4.unshift(e3.host)), e3.host = null), x2 = x2 && (d4[0] === "" || E2[0] === "")), b2)
            r2.host = e3.host || e3.host === "" ? e3.host : r2.host, r2.hostname = e3.hostname || e3.hostname === "" ? e3.hostname : r2.hostname, r2.search = e3.search, r2.query = e3.query, E2 = d4;
          else if (d4.length)
            E2 || (E2 = []), E2.pop(), E2 = E2.concat(d4), r2.search = e3.search, r2.query = e3.query;
          else if (!i2.isNullOrUndefined(e3.search)) {
            if (D2)
              r2.hostname = r2.host = E2.shift(), (T2 = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T2.shift(), r2.host = r2.hostname = T2.shift());
            return r2.search = e3.search, r2.query = e3.query, i2.isNull(r2.pathname) && i2.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.href = r2.format(), r2;
          }
          if (!E2.length)
            return r2.pathname = null, r2.search ? r2.path = "/" + r2.search : r2.path = null, r2.href = r2.format(), r2;
          for (var S3 = E2.slice(-1)[0], C = (r2.host || e3.host || E2.length > 1) && (S3 === "." || S3 === "..") || S3 === "", A = 0, N = E2.length; N >= 0; N--)
            (S3 = E2[N]) === "." ? E2.splice(N, 1) : S3 === ".." ? (E2.splice(N, 1), A++) : A && (E2.splice(N, 1), A--);
          if (!x2 && !w2)
            for (; A--; A)
              E2.unshift("..");
          !x2 || E2[0] === "" || E2[0] && E2[0].charAt(0) === "/" || E2.unshift(""), C && E2.join("/").substr(-1) !== "/" && E2.push("");
          var T2, O2 = E2[0] === "" || E2[0] && E2[0].charAt(0) === "/";
          D2 && (r2.hostname = r2.host = O2 ? "" : E2.length ? E2.shift() : "", (T2 = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T2.shift(), r2.host = r2.hostname = T2.shift()));
          return (x2 = x2 || r2.host && E2.length) && !O2 && E2.unshift(""), E2.length ? r2.pathname = E2.join("/") : (r2.pathname = null, r2.path = null), i2.isNull(r2.pathname) && i2.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.auth = e3.auth || r2.auth, r2.slashes = r2.slashes || e3.slashes, r2.href = r2.format(), r2;
        }, o.prototype.parseHost = function() {
          var e3 = this.host, t3 = s3.exec(e3);
          t3 && ((t3 = t3[0]) !== ":" && (this.port = t3.substr(1)), e3 = e3.substr(0, e3.length - t3.length)), e3 && (this.hostname = e3);
        };
      }, function(e2, t2, r) {
        (function(e3, n) {
          var i2;
          !function(o) {
            t2 && t2.nodeType, e3 && e3.nodeType;
            var a3 = typeof n == "object" && n;
            a3.global !== a3 && a3.window !== a3 && a3.self;
            var s3, u2 = 2147483647, l = /^xn--/, c2 = /[^\x20-\x7E]/, h3 = /[\x2E\u3002\uFF0E\uFF61]/g, p = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, f = Math.floor, d3 = String.fromCharCode;
            function m3(e4) {
              throw new RangeError(p[e4]);
            }
            function y3(e4, t3) {
              for (var r2 = e4.length, n2 = []; r2--; )
                n2[r2] = t3(e4[r2]);
              return n2;
            }
            function v(e4, t3) {
              var r2 = e4.split("@"), n2 = "";
              return r2.length > 1 && (n2 = r2[0] + "@", e4 = r2[1]), n2 + y3((e4 = e4.replace(h3, ".")).split("."), t3).join(".");
            }
            function _(e4) {
              for (var t3, r2, n2 = [], i3 = 0, o2 = e4.length; i3 < o2; )
                (t3 = e4.charCodeAt(i3++)) >= 55296 && t3 <= 56319 && i3 < o2 ? (64512 & (r2 = e4.charCodeAt(i3++))) == 56320 ? n2.push(((1023 & t3) << 10) + (1023 & r2) + 65536) : (n2.push(t3), i3--) : n2.push(t3);
              return n2;
            }
            function g(e4) {
              return y3(e4, function(e5) {
                var t3 = "";
                return e5 > 65535 && (t3 += d3((e5 -= 65536) >>> 10 & 1023 | 55296), e5 = 56320 | 1023 & e5), t3 += d3(e5);
              }).join("");
            }
            function b2(e4, t3) {
              return e4 + 22 + 75 * (e4 < 26) - ((t3 != 0) << 5);
            }
            function x2(e4, t3, r2) {
              var n2 = 0;
              for (e4 = r2 ? f(e4 / 700) : e4 >> 1, e4 += f(e4 / t3); e4 > 455; n2 += 36)
                e4 = f(e4 / 35);
              return f(n2 + 36 * e4 / (e4 + 38));
            }
            function w2(e4) {
              var t3, r2, n2, i3, o2, a4, s4, l2, c3, h4, p2, d4 = [], y4 = e4.length, v2 = 0, _2 = 128, b3 = 72;
              for ((r2 = e4.lastIndexOf("-")) < 0 && (r2 = 0), n2 = 0; n2 < r2; ++n2)
                e4.charCodeAt(n2) >= 128 && m3("not-basic"), d4.push(e4.charCodeAt(n2));
              for (i3 = r2 > 0 ? r2 + 1 : 0; i3 < y4; ) {
                for (o2 = v2, a4 = 1, s4 = 36; i3 >= y4 && m3("invalid-input"), ((l2 = (p2 = e4.charCodeAt(i3++)) - 48 < 10 ? p2 - 22 : p2 - 65 < 26 ? p2 - 65 : p2 - 97 < 26 ? p2 - 97 : 36) >= 36 || l2 > f((u2 - v2) / a4)) && m3("overflow"), v2 += l2 * a4, !(l2 < (c3 = s4 <= b3 ? 1 : s4 >= b3 + 26 ? 26 : s4 - b3)); s4 += 36)
                  a4 > f(u2 / (h4 = 36 - c3)) && m3("overflow"), a4 *= h4;
                b3 = x2(v2 - o2, t3 = d4.length + 1, o2 == 0), f(v2 / t3) > u2 - _2 && m3("overflow"), _2 += f(v2 / t3), v2 %= t3, d4.splice(v2++, 0, _2);
              }
              return g(d4);
            }
            function E2(e4) {
              var t3, r2, n2, i3, o2, a4, s4, l2, c3, h4, p2, y4, v2, g2, w3, E3 = [];
              for (y4 = (e4 = _(e4)).length, t3 = 128, r2 = 0, o2 = 72, a4 = 0; a4 < y4; ++a4)
                (p2 = e4[a4]) < 128 && E3.push(d3(p2));
              for (n2 = i3 = E3.length, i3 && E3.push("-"); n2 < y4; ) {
                for (s4 = u2, a4 = 0; a4 < y4; ++a4)
                  (p2 = e4[a4]) >= t3 && p2 < s4 && (s4 = p2);
                for (s4 - t3 > f((u2 - r2) / (v2 = n2 + 1)) && m3("overflow"), r2 += (s4 - t3) * v2, t3 = s4, a4 = 0; a4 < y4; ++a4)
                  if ((p2 = e4[a4]) < t3 && ++r2 > u2 && m3("overflow"), p2 == t3) {
                    for (l2 = r2, c3 = 36; !(l2 < (h4 = c3 <= o2 ? 1 : c3 >= o2 + 26 ? 26 : c3 - o2)); c3 += 36)
                      w3 = l2 - h4, g2 = 36 - h4, E3.push(d3(b2(h4 + w3 % g2, 0))), l2 = f(w3 / g2);
                    E3.push(d3(b2(l2, 0))), o2 = x2(r2, v2, n2 == i3), r2 = 0, ++n2;
                  }
                ++r2, ++t3;
              }
              return E3.join("");
            }
            s3 = { version: "1.4.1", ucs2: { decode: _, encode: g }, decode: w2, encode: E2, toASCII: function(e4) {
              return v(e4, function(e5) {
                return c2.test(e5) ? "xn--" + E2(e5) : e5;
              });
            }, toUnicode: function(e4) {
              return v(e4, function(e5) {
                return l.test(e5) ? w2(e5.slice(4).toLowerCase()) : e5;
              });
            } }, (i2 = function() {
              return s3;
            }.call(t2, r, t2, e3)) === void 0 || (e3.exports = i2);
          }();
        }).call(this, r(246)(e2), r(78));
      }, function(e2, t2) {
        e2.exports = function(e3) {
          return e3.webpackPolyfill || (e3.deprecate = function() {
          }, e3.paths = [], e3.children || (e3.children = []), Object.defineProperty(e3, "loaded", { enumerable: true, get: function() {
            return e3.l;
          } }), Object.defineProperty(e3, "id", { enumerable: true, get: function() {
            return e3.i;
          } }), e3.webpackPolyfill = 1), e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        e2.exports = { isString: function(e3) {
          return typeof e3 == "string";
        }, isObject: function(e3) {
          return typeof e3 == "object" && e3 !== null;
        }, isNull: function(e3) {
          return e3 === null;
        }, isNullOrUndefined: function(e3) {
          return e3 == null;
        } };
      }, function(e2, t2, r) {
        "use strict";
        t2.decode = t2.parse = r(249), t2.encode = t2.stringify = r(250);
      }, function(e2, t2, r) {
        "use strict";
        function n(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }
        e2.exports = function(e3, t3, r2, o) {
          t3 = t3 || "&", r2 = r2 || "=";
          var a3 = {};
          if (typeof e3 != "string" || e3.length === 0)
            return a3;
          var s3 = /\+/g;
          e3 = e3.split(t3);
          var u2 = 1e3;
          o && typeof o.maxKeys == "number" && (u2 = o.maxKeys);
          var l = e3.length;
          u2 > 0 && l > u2 && (l = u2);
          for (var c2 = 0; c2 < l; ++c2) {
            var h3, p, f, d3, m3 = e3[c2].replace(s3, "%20"), y3 = m3.indexOf(r2);
            y3 >= 0 ? (h3 = m3.substr(0, y3), p = m3.substr(y3 + 1)) : (h3 = m3, p = ""), f = decodeURIComponent(h3), d3 = decodeURIComponent(p), n(a3, f) ? i2(a3[f]) ? a3[f].push(d3) : a3[f] = [a3[f], d3] : a3[f] = d3;
          }
          return a3;
        };
        var i2 = Array.isArray || function(e3) {
          return Object.prototype.toString.call(e3) === "[object Array]";
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = function(e3) {
          switch (typeof e3) {
            case "string":
              return e3;
            case "boolean":
              return e3 ? "true" : "false";
            case "number":
              return isFinite(e3) ? e3 : "";
            default:
              return "";
          }
        };
        e2.exports = function(e3, t3, r2, s3) {
          return t3 = t3 || "&", r2 = r2 || "=", e3 === null && (e3 = void 0), typeof e3 == "object" ? o(a3(e3), function(a4) {
            var s4 = encodeURIComponent(n(a4)) + r2;
            return i2(e3[a4]) ? o(e3[a4], function(e4) {
              return s4 + encodeURIComponent(n(e4));
            }).join(t3) : s4 + encodeURIComponent(n(e3[a4]));
          }).join(t3) : s3 ? encodeURIComponent(n(s3)) + r2 + encodeURIComponent(n(e3)) : "";
        };
        var i2 = Array.isArray || function(e3) {
          return Object.prototype.toString.call(e3) === "[object Array]";
        };
        function o(e3, t3) {
          if (e3.map)
            return e3.map(t3);
          for (var r2 = [], n2 = 0; n2 < e3.length; n2++)
            r2.push(t3(e3[n2], n2));
          return r2;
        }
        var a3 = Object.keys || function(e3) {
          var t3 = [];
          for (var r2 in e3)
            Object.prototype.hasOwnProperty.call(e3, r2) && t3.push(r2);
          return t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(52);
        t2.attr_setAnExistingAttributeValue = function(e3, t3) {
          e3._element === null ? e3._value = t3 : n.element_change(e3, e3._element, t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(108), i2 = r(30), o = r(52);
        t2.tokenList_validationSteps = function(e3, t3) {
          if (!i2.dom_hasSupportedTokens(e3._attribute._localName))
            throw new TypeError("There are no supported tokens defined for attribute name: '" + e3._attribute._localName + "'.");
          return i2.dom_getSupportedTokens(e3._attribute._localName).has(t3.toLowerCase());
        }, t2.tokenList_updateSteps = function(e3) {
          (e3._element.hasAttribute(e3._attribute._localName) || e3._tokenSet.size !== 0) && o.element_setAnAttributeValue(e3._element, e3._attribute._localName, n.orderedSet_serialize(e3._tokenSet));
        }, t2.tokenList_serializeSteps = function(e3) {
          return o.element_getAnAttributeValue(e3._element, e3._attribute._localName);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(1);
        function o(e3) {
          return i2.isBoolean(e3) ? e3 : e3.capture || false;
        }
        t2.eventTarget_flatten = o, t2.eventTarget_flattenMore = function(e3) {
          var t3 = o(e3), r2 = false, n2 = false;
          return i2.isBoolean(e3) || (r2 = e3.once || false, n2 = e3.passive || false), [t3, n2, r2];
        }, t2.eventTarget_addEventListener = function(e3, t3) {
          if (t3.callback !== null) {
            for (var r2 = 0; r2 < e3._eventListenerList.length; r2++) {
              var n2 = e3._eventListenerList[r2];
              if (n2.type === t3.type && n2.callback.handleEvent === t3.callback.handleEvent && n2.capture === t3.capture)
                return;
            }
            e3._eventListenerList.push(t3);
          }
        }, t2.eventTarget_removeEventListener = function(e3, t3, r2) {
          t3.removed = true, e3._eventListenerList.splice(r2, 1);
        }, t2.eventTarget_removeAllEventListeners = function(e3) {
          var t3, r2;
          try {
            for (var i3 = n(e3._eventListenerList), o2 = i3.next(); !o2.done; o2 = i3.next()) {
              o2.value.removed = true;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              o2 && !o2.done && (r2 = i3.return) && r2.call(i3);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          e3._eventListenerList.length = 0;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(1), o = r(29);
        t2.parentNode_convertNodesIntoANode = function(e3, t3) {
          for (var r2, a3, s3 = null, u2 = 0; u2 < e3.length; u2++) {
            var l = e3[u2];
            if (i2.isString(l)) {
              var c2 = o.create_text(t3, l);
              e3[u2] = c2;
            }
          }
          if (e3.length === 1)
            s3 = e3[0];
          else {
            var h3 = s3 = o.create_documentFragment(t3);
            try {
              for (var p = n(e3), f = p.next(); !f.done; f = p.next()) {
                l = f.value;
                h3.appendChild(l);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                f && !f.done && (a3 = p.return) && a3.call(p);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return s3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(2), s3 = r(9), u2 = r(3), l = r(29), c2 = r(17), h3 = r(175), p = r(107), f = r(176), d3 = r(37), m3 = r(177);
        function y3(e3) {
          return e3._startNode === e3._endNode && e3._startOffset === e3._endOffset;
        }
        function v(e3) {
          return c2.tree_rootNode(e3._startNode);
        }
        function _(e3, t3) {
          return c2.tree_rootNode(e3) === v(t3) && h3.boundaryPoint_position([e3, 0], t3._start) === a3.BoundaryPosition.After && h3.boundaryPoint_position([e3, c2.tree_nodeLength(e3)], t3._end) === a3.BoundaryPosition.Before;
        }
        function g(e3, t3) {
          var r2 = c2.tree_isAncestorOf(t3._startNode, e3, true), n2 = c2.tree_isAncestorOf(t3._endNode, e3, true);
          return r2 && !n2 || !r2 && n2;
        }
        function b2(e3) {
          var t3, r2, i3, a4, h4, m4, v2 = l.create_documentFragment(e3._startNode._nodeDocument);
          if (y3(e3))
            return v2;
          var x2 = e3._startNode, w2 = e3._startOffset, E2 = e3._endNode, D2 = e3._endOffset;
          if (x2 === E2 && u2.Guard.isCharacterDataNode(x2))
            return (R2 = f.node_clone(x2))._data = p.characterData_substringData(x2, w2, D2 - w2), d3.mutation_append(R2, v2), p.characterData_replaceData(x2, w2, D2 - w2, ""), v2;
          for (var S3 = x2; !c2.tree_isAncestorOf(E2, S3, true); ) {
            if (S3._parent === null)
              throw new Error("Parent node  is null.");
            S3 = S3._parent;
          }
          var C = null;
          if (!c2.tree_isAncestorOf(E2, x2, true))
            try {
              for (var A = n(S3._children), N = A.next(); !N.done; N = A.next()) {
                if (g(k2 = N.value, e3)) {
                  C = k2;
                  break;
                }
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                N && !N.done && (r2 = A.return) && r2.call(A);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          var T2 = null;
          if (!c2.tree_isAncestorOf(x2, E2, true))
            for (var O2 = o(S3._children), F = O2.length - 1; F > 0; F--) {
              var k2;
              if (g(k2 = O2[F], e3)) {
                T2 = k2;
                break;
              }
            }
          var P, I2, L2 = [];
          try {
            for (var M3 = n(S3._children), B2 = M3.next(); !B2.done; B2 = M3.next()) {
              if (_(X2 = B2.value, e3)) {
                if (u2.Guard.isDocumentTypeNode(X2))
                  throw new s3.HierarchyRequestError();
                L2.push(X2);
              }
            }
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              B2 && !B2.done && (a4 = M3.return) && a4.call(M3);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          if (c2.tree_isAncestorOf(E2, x2, true))
            P = x2, I2 = w2;
          else {
            for (var j = x2; j._parent !== null && !c2.tree_isAncestorOf(E2, j._parent); )
              j = j._parent;
            if (j._parent === null)
              throw new Error("Parent node is null.");
            P = j._parent, I2 = 1 + c2.tree_index(j);
          }
          if (u2.Guard.isCharacterDataNode(C))
            (R2 = f.node_clone(x2))._data = p.characterData_substringData(x2, w2, c2.tree_nodeLength(x2) - w2), d3.mutation_append(R2, v2), p.characterData_replaceData(x2, w2, c2.tree_nodeLength(x2) - w2, "");
          else if (C !== null) {
            var R2 = f.node_clone(C);
            d3.mutation_append(R2, v2);
            var z2 = b2(l.create_range([x2, w2], [C, c2.tree_nodeLength(C)]));
            d3.mutation_append(z2, R2);
          }
          try {
            for (var U = n(L2), G2 = U.next(); !G2.done; G2 = U.next()) {
              var X2 = G2.value;
              d3.mutation_append(X2, v2);
            }
          } catch (e4) {
            h4 = { error: e4 };
          } finally {
            try {
              G2 && !G2.done && (m4 = U.return) && m4.call(U);
            } finally {
              if (h4)
                throw h4.error;
            }
          }
          if (u2.Guard.isCharacterDataNode(T2))
            (R2 = f.node_clone(E2))._data = p.characterData_substringData(E2, 0, D2), d3.mutation_append(R2, v2), p.characterData_replaceData(E2, 0, D2, "");
          else if (T2 !== null) {
            R2 = f.node_clone(T2);
            d3.mutation_append(R2, v2);
            z2 = b2(l.create_range([T2, 0], [E2, D2]));
            d3.mutation_append(z2, R2);
          }
          return e3._start = [P, I2], e3._end = [P, I2], v2;
        }
        t2.range_collapsed = y3, t2.range_root = v, t2.range_isContained = _, t2.range_isPartiallyContained = g, t2.range_setTheStart = function(e3, t3, r2) {
          if (u2.Guard.isDocumentTypeNode(t3))
            throw new s3.InvalidNodeTypeError();
          if (r2 > c2.tree_nodeLength(t3))
            throw new s3.IndexSizeError();
          var n2 = [t3, r2];
          v(e3) === c2.tree_rootNode(t3) && h3.boundaryPoint_position(n2, e3._end) !== a3.BoundaryPosition.After || (e3._end = n2), e3._start = n2;
        }, t2.range_setTheEnd = function(e3, t3, r2) {
          if (u2.Guard.isDocumentTypeNode(t3))
            throw new s3.InvalidNodeTypeError();
          if (r2 > c2.tree_nodeLength(t3))
            throw new s3.IndexSizeError();
          var n2 = [t3, r2];
          v(e3) === c2.tree_rootNode(t3) && h3.boundaryPoint_position(n2, e3._start) !== a3.BoundaryPosition.Before || (e3._start = n2), e3._end = n2;
        }, t2.range_select = function(e3, t3) {
          var r2 = e3._parent;
          if (r2 === null)
            throw new s3.InvalidNodeTypeError();
          var n2 = c2.tree_index(e3);
          t3._start = [r2, n2], t3._end = [r2, n2 + 1];
        }, t2.range_extract = b2, t2.range_cloneTheContents = function e3(t3) {
          var r2, i3, a4, h4, m4, v2, x2 = l.create_documentFragment(t3._startNode._nodeDocument);
          if (y3(t3))
            return x2;
          var w2 = t3._startNode, E2 = t3._startOffset, D2 = t3._endNode, S3 = t3._endOffset;
          w2 === D2 && u2.Guard.isCharacterDataNode(w2) && ((B2 = f.node_clone(w2))._data = p.characterData_substringData(w2, E2, S3 - E2), d3.mutation_append(B2, x2));
          for (var C = w2; !c2.tree_isAncestorOf(D2, C, true); ) {
            if (C._parent === null)
              throw new Error("Parent node  is null.");
            C = C._parent;
          }
          var A = null;
          if (!c2.tree_isAncestorOf(D2, w2, true))
            try {
              for (var N = n(C._children), T2 = N.next(); !T2.done; T2 = N.next()) {
                if (g(P = T2.value, t3)) {
                  A = P;
                  break;
                }
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                T2 && !T2.done && (i3 = N.return) && i3.call(N);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          var O2 = null;
          if (!c2.tree_isAncestorOf(w2, D2, true))
            for (var F = o(C._children), k2 = F.length - 1; k2 > 0; k2--) {
              var P;
              if (g(P = F[k2], t3)) {
                O2 = P;
                break;
              }
            }
          var I2 = [];
          try {
            for (var L2 = n(C._children), M3 = L2.next(); !M3.done; M3 = L2.next()) {
              if (_(U = M3.value, t3)) {
                if (u2.Guard.isDocumentTypeNode(U))
                  throw new s3.HierarchyRequestError();
                I2.push(U);
              }
            }
          } catch (e4) {
            a4 = { error: e4 };
          } finally {
            try {
              M3 && !M3.done && (h4 = L2.return) && h4.call(L2);
            } finally {
              if (a4)
                throw a4.error;
            }
          }
          if (u2.Guard.isCharacterDataNode(A))
            (B2 = f.node_clone(w2))._data = p.characterData_substringData(w2, E2, c2.tree_nodeLength(w2) - E2), d3.mutation_append(B2, x2);
          else if (A !== null) {
            var B2 = f.node_clone(A);
            d3.mutation_append(B2, x2);
            var j = e3(l.create_range([w2, E2], [A, c2.tree_nodeLength(A)]));
            d3.mutation_append(j, B2);
          }
          try {
            for (var R2 = n(I2), z2 = R2.next(); !z2.done; z2 = R2.next()) {
              var U = z2.value, B2 = f.node_clone(U);
              d3.mutation_append(B2, x2);
            }
          } catch (e4) {
            m4 = { error: e4 };
          } finally {
            try {
              z2 && !z2.done && (v2 = R2.return) && v2.call(R2);
            } finally {
              if (m4)
                throw m4.error;
            }
          }
          if (u2.Guard.isCharacterDataNode(O2))
            (B2 = f.node_clone(D2))._data = p.characterData_substringData(D2, 0, S3), d3.mutation_append(B2, x2);
          else if (O2 !== null) {
            B2 = f.node_clone(O2);
            x2.append(B2);
            j = b2(l.create_range([O2, 0], [D2, S3]));
            d3.mutation_append(j, B2);
          }
          return x2;
        }, t2.range_insert = function(e3, t3) {
          var r2, i3;
          if (u2.Guard.isProcessingInstructionNode(t3._startNode) || u2.Guard.isCommentNode(t3._startNode) || u2.Guard.isTextNode(t3._startNode) && t3._startNode._parent === null || t3._startNode === e3)
            throw new s3.HierarchyRequestError();
          var o2, a4 = null;
          if (u2.Guard.isTextNode(t3._startNode))
            a4 = t3._startNode;
          else {
            var l2 = 0;
            try {
              for (var h4 = n(t3._startNode._children), p2 = h4.next(); !p2.done; p2 = h4.next()) {
                var f2 = p2.value;
                if (l2 === t3._startOffset) {
                  a4 = f2;
                  break;
                }
                l2++;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                p2 && !p2.done && (i3 = h4.return) && i3.call(h4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          if (a4 === null)
            o2 = t3._startNode;
          else {
            if (a4._parent === null)
              throw new Error("Parent node is null.");
            o2 = a4._parent;
          }
          d3.mutation_ensurePreInsertionValidity(e3, o2, a4), u2.Guard.isTextNode(t3._startNode) && (a4 = m3.text_split(t3._startNode, t3._startOffset)), e3 === a4 && (a4 = e3._nextSibling), e3._parent !== null && d3.mutation_remove(e3, e3._parent);
          var v2 = a4 === null ? c2.tree_nodeLength(o2) : c2.tree_index(a4);
          u2.Guard.isDocumentFragmentNode(e3) ? v2 += c2.tree_nodeLength(e3) : v2++, d3.mutation_preInsert(e3, o2, a4), y3(t3) && (t3._end = [o2, v2]);
        }, t2.range_getContainedNodes = function(e3) {
          var t3;
          return (t3 = {})[Symbol.iterator] = function() {
            var t4 = e3.commonAncestorContainer, r2 = c2.tree_getFirstDescendantNode(t4);
            return { next: function() {
              for (; r2 && !_(r2, e3); )
                r2 = c2.tree_getNextDescendantNode(t4, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c2.tree_getNextDescendantNode(t4, r2), n2;
            } };
          }, t3;
        }, t2.range_getPartiallyContainedNodes = function(e3) {
          var t3;
          return (t3 = {})[Symbol.iterator] = function() {
            var t4 = e3.commonAncestorContainer, r2 = c2.tree_getFirstDescendantNode(t4);
            return { next: function() {
              for (; r2 && !g(r2, e3); )
                r2 = c2.tree_getNextDescendantNode(t4, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c2.tree_getNextDescendantNode(t4, r2), n2;
            } };
          }, t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(9);
        t2.selectors_scopeMatchASelectorsString = function(e3, t3) {
          throw new n.NotSupportedError();
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(105);
        t2.treeWalker_traverseChildren = function(e3, t3) {
          for (var r2 = t3 ? e3._current._firstChild : e3._current._lastChild; r2 !== null; ) {
            var o = i2.traversal_filter(e3, r2);
            if (o === n.FilterResult.Accept)
              return e3._current = r2, r2;
            if (o === n.FilterResult.Skip) {
              var a3 = t3 ? r2._firstChild : r2._lastChild;
              if (a3 !== null) {
                r2 = a3;
                continue;
              }
            }
            for (; r2 !== null; ) {
              var s3 = t3 ? r2._nextSibling : r2._previousSibling;
              if (s3 !== null) {
                r2 = s3;
                break;
              }
              var u2 = r2._parent;
              if (u2 === null || u2 === e3._root || u2 === e3._current)
                return null;
              r2 = u2;
            }
          }
          return null;
        }, t2.treeWalker_traverseSiblings = function(e3, t3) {
          var r2 = e3._current;
          if (r2 === e3._root)
            return null;
          for (; ; ) {
            for (var o = t3 ? r2._nextSibling : r2._previousSibling; o !== null; ) {
              r2 = o;
              var a3 = i2.traversal_filter(e3, r2);
              if (a3 === n.FilterResult.Accept)
                return e3._current = r2, r2;
              o = t3 ? r2._firstChild : r2._lastChild, a3 !== n.FilterResult.Reject && o !== null || (o = t3 ? r2._nextSibling : r2._previousSibling);
            }
            if ((r2 = r2._parent) === null || r2 === e3._root)
              return null;
            if (i2.traversal_filter(e3, r2) === n.FilterResult.Accept)
              return null;
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        r(89), r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(1), a3 = r(2), s3 = r(50), u2 = r(3), l = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._indentation = {}, n2._lengthToLastNewline = 0, n2._writerOptions = o.applyDefaults(r2, { wellFormed: false, headless: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, indentTextOnlyNodes: false, spaceBeforeSlash: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            return this._refs = { suppressPretty: false, emptyNode: false, markup: "" }, e4.nodeType !== a3.NodeType.Document || this._writerOptions.headless || this.declaration(this._builderOptions.version, this._builderOptions.encoding, this._builderOptions.standalone), this.serializeNode(e4, this._writerOptions.wellFormed), this._writerOptions.prettyPrint && this._refs.markup.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (this._refs.markup = this._refs.markup.slice(0, -this._writerOptions.newline.length)), this._refs.markup;
          }, t3.prototype.declaration = function(e4, t4, r2) {
            this._beginLine(), this._refs.markup += '<?xml version="' + e4 + '"', t4 !== void 0 && (this._refs.markup += ' encoding="' + t4 + '"'), r2 !== void 0 && (this._refs.markup += ' standalone="' + (r2 ? "yes" : "no") + '"'), this._refs.markup += "?>", this._endLine();
          }, t3.prototype.docType = function(e4, t4, r2) {
            this._beginLine(), this._refs.markup += t4 && r2 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '" "' + r2 + '">' : t4 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '">' : r2 ? "<!DOCTYPE " + e4 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e4 + ">", this._endLine();
          }, t3.prototype.openTagBegin = function(e4) {
            this._beginLine(), this._refs.markup += "<" + e4;
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            if (this._refs.suppressPretty = false, this._refs.emptyNode = false, this._writerOptions.prettyPrint && !t4 && !r2) {
              for (var n2 = true, i3 = true, o2 = this.currentNode.firstChild, a4 = 0, s4 = 0; o2; ) {
                if (u2.Guard.isExclusiveTextNode(o2))
                  s4++;
                else {
                  if (!u2.Guard.isCDATASectionNode(o2)) {
                    n2 = false, i3 = false;
                    break;
                  }
                  a4++;
                }
                o2.data !== "" && (i3 = false), o2 = o2.nextSibling;
              }
              this._refs.suppressPretty = !this._writerOptions.indentTextOnlyNodes && n2 && (a4 <= 1 && s4 === 0 || a4 === 0), this._refs.emptyNode = i3;
            }
            (r2 || t4 || this._refs.emptyNode) && this._writerOptions.allowEmptyTags ? this._refs.markup += "></" + e4 + ">" : this._refs.markup += r2 ? " />" : t4 || this._refs.emptyNode ? this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">", this._endLine();
          }, t3.prototype.closeTag = function(e4) {
            this._refs.emptyNode || (this._beginLine(), this._refs.markup += "</" + e4 + ">"), this._refs.suppressPretty = false, this._refs.emptyNode = false, this._endLine();
          }, t3.prototype.attribute = function(e4, t4) {
            var r2 = e4 + '="' + t4 + '"';
            this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._refs.markup.length - this._lengthToLastNewline + 1 + r2.length > this._writerOptions.width ? (this._endLine(), this._beginLine(), this._refs.markup += this._indent(1) + r2) : this._refs.markup += " " + r2;
          }, t3.prototype.text = function(e4) {
            e4 !== "" && (this._beginLine(), this._refs.markup += e4, this._endLine());
          }, t3.prototype.cdata = function(e4) {
            e4 !== "" && (this._beginLine(), this._refs.markup += "<![CDATA[" + e4 + "]]>", this._endLine());
          }, t3.prototype.comment = function(e4) {
            this._beginLine(), this._refs.markup += "<!--" + e4 + "-->", this._endLine();
          }, t3.prototype.instruction = function(e4, t4) {
            this._beginLine(), this._refs.markup += "<?" + (t4 === "" ? e4 : e4 + " " + t4) + "?>", this._endLine();
          }, t3.prototype._beginLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._indent(this._writerOptions.offset + this.level));
          }, t3.prototype._endLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._writerOptions.newline, this._lengthToLastNewline = this._refs.markup.length);
          }, t3.prototype._indent = function(e4) {
            if (e4 <= 0)
              return "";
            if (this._indentation[e4] !== void 0)
              return this._indentation[e4];
            var t4 = this._writerOptions.indent.repeat(e4);
            return this._indentation[e4] = t4, t4;
          }, t3;
        }(s3.BaseWriter);
        t2.XMLWriter = l;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(47), i2 = r(35);
        e2.exports = "".repeat || function(e3) {
          var t3 = String(i2(this)), r2 = "", o = n(e3);
          if (o < 0 || o == 1 / 0)
            throw RangeError("Wrong number of repetitions");
          for (; o > 0; (o >>>= 1) && (t3 += t3))
            1 & o && (r2 += t3);
          return r2;
        };
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(67), s3 = r(1), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._writerOptions = s3.applyDefaults(r2, { wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            var t4 = s3.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a3.ObjectWriter(this._builderOptions, t4).serialize(e4);
            return this._beginLine(this._writerOptions, 0) + this._convertObject(r2, this._writerOptions);
          }, t3.prototype._convertObject = function(e4, t4, r2) {
            var n2, i3, a4 = this;
            r2 === void 0 && (r2 = 0);
            var u3 = "", l = this._isLeafNode(e4);
            if (s3.isArray(e4)) {
              u3 += "[";
              var c2 = e4.length, h3 = 0;
              try {
                for (var p = o(e4), f = p.next(); !f.done; f = p.next()) {
                  var d3 = f.value;
                  u3 += this._endLine(t4, r2 + 1) + this._beginLine(t4, r2 + 1) + this._convertObject(d3, t4, r2 + 1), h3 < c2 - 1 && (u3 += ","), h3++;
                }
              } catch (e5) {
                n2 = { error: e5 };
              } finally {
                try {
                  f && !f.done && (i3 = p.return) && i3.call(p);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              u3 += this._endLine(t4, r2) + this._beginLine(t4, r2), u3 += "]";
            } else if (s3.isObject(e4)) {
              u3 += "{";
              var m3 = s3.objectLength(e4), y3 = 0;
              s3.forEachObject(e4, function(e5, n3) {
                l && t4.prettyPrint ? u3 += " " : u3 += a4._endLine(t4, r2 + 1) + a4._beginLine(t4, r2 + 1), u3 += a4._key(e5), t4.prettyPrint && (u3 += " "), u3 += a4._convertObject(n3, t4, r2 + 1), y3 < m3 - 1 && (u3 += ","), y3++;
              }, this), l && t4.prettyPrint ? u3 += " " : u3 += this._endLine(t4, r2) + this._beginLine(t4, r2), u3 += "}";
            } else
              u3 += this._val(e4);
            return u3;
          }, t3.prototype._beginLine = function(e4, t4) {
            if (!e4.prettyPrint)
              return "";
            var r2 = e4.offset + t4 + 1;
            return r2 > 0 ? new Array(r2).join(e4.indent) : "";
          }, t3.prototype._endLine = function(e4, t4) {
            return e4.prettyPrint ? e4.newline : "";
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3.prototype._isLeafNode = function(e4) {
            return this._descendantCount(e4) <= 1;
          }, t3.prototype._descendantCount = function(e4, t4) {
            var r2 = this;
            return t4 === void 0 && (t4 = 0), s3.isArray(e4) ? s3.forEachArray(e4, function(e5) {
              return t4 += r2._descendantCount(e5, t4);
            }, this) : s3.isObject(e4) ? s3.forEachObject(e4, function(e5, n2) {
              return t4 += r2._descendantCount(n2, t4);
            }, this) : t4++, t4;
          }, t3;
        }(r(50).BaseWriter);
        t2.JSONWriter = u2;
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(89), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(67), s3 = r(1), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            if (n2._writerOptions = s3.applyDefaults(r2, { wellFormed: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2._writerOptions.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (n2._writerOptions.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            var t4 = s3.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a3.ObjectWriter(this._builderOptions, t4).serialize(e4), n2 = this._beginLine(this._writerOptions, 0) + "---" + this._endLine(this._writerOptions) + this._convertObject(r2, this._writerOptions, 0);
            return n2.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (n2 = n2.slice(0, -this._writerOptions.newline.length)), n2;
          }, t3.prototype._convertObject = function(e4, t4, r2, n2) {
            var i3, a4, u3 = this;
            n2 === void 0 && (n2 = false);
            var l = "";
            if (s3.isArray(e4))
              try {
                for (var c2 = o(e4), h3 = c2.next(); !h3.done; h3 = c2.next()) {
                  var p = h3.value;
                  l += this._beginLine(t4, r2, true), s3.isObject(p) ? s3.isEmpty(p) ? l += '""' + this._endLine(t4) : l += this._convertObject(p, t4, r2, true) : l += this._val(p) + this._endLine(t4);
                }
              } catch (e5) {
                i3 = { error: e5 };
              } finally {
                try {
                  h3 && !h3.done && (a4 = c2.return) && a4.call(c2);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
            else
              s3.forEachObject(e4, function(e5, i4) {
                n2 ? (l += u3._key(e5), n2 = false) : l += u3._beginLine(t4, r2) + u3._key(e5), s3.isObject(i4) ? s3.isEmpty(i4) ? l += ' ""' + u3._endLine(t4) : l += u3._endLine(t4) + u3._convertObject(i4, t4, r2 + 1) : l += " " + u3._val(i4) + u3._endLine(t4);
              }, this);
            return l;
          }, t3.prototype._beginLine = function(e4, t4, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e4.offset + t4 + 1, i3 = new Array(n2).join(e4.indent);
            return r2 ? i3.substr(0, i3.length - 2) + "-" + i3.substr(-1, 1) : i3;
          }, t3.prototype._endLine = function(e4) {
            return e4.newline;
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3;
        }(r(50).BaseWriter);
        t2.YAMLWriter = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), r(110).dom.setFeatures(true);
        var n = r(110);
        t2.DOMImplementation = n.DOMImplementation;
        var i2 = r(271);
        t2.DOMParser = i2.DOMParser;
        var o = r(274);
        t2.XMLSerializer = o.XMLSerializer;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(3), i2 = r(0), o = function() {
          function e3() {
          }
          return e3.prototype.before = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2 !== null) {
              for (var a3 = r2._previousSibling, s3 = true; s3 && a3; ) {
                s3 = false;
                for (var u2 = 0; u2 < e4.length; u2++) {
                  var l = e4[u2];
                  if (l === a3) {
                    a3 = a3._previousSibling, s3 = true;
                    break;
                  }
                }
              }
              var c2 = i2.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
              a3 = a3 === null ? o2._firstChild : a3._nextSibling, i2.mutation_preInsert(c2, o2, a3);
            }
          }, e3.prototype.after = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a3 = r2._nextSibling, s3 = true; s3 && a3; ) {
                s3 = false;
                for (var u2 = 0; u2 < e4.length; u2++) {
                  var l = e4[u2];
                  if (l === a3) {
                    a3 = a3._nextSibling, s3 = true;
                    break;
                  }
                }
              }
              var c2 = i2.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
              i2.mutation_preInsert(c2, o2, a3);
            }
          }, e3.prototype.replaceWith = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a3 = r2._nextSibling, s3 = true; s3 && a3; ) {
                s3 = false;
                for (var u2 = 0; u2 < e4.length; u2++) {
                  var l = e4[u2];
                  if (l === a3) {
                    a3 = a3._nextSibling, s3 = true;
                    break;
                  }
                }
              }
              var c2 = i2.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
              r2._parent === o2 ? i2.mutation_replace(r2, c2, o2) : i2.mutation_preInsert(c2, o2, a3);
            }
          }, e3.prototype.remove = function() {
            var e4 = n.Cast.asNode(this), t3 = e4._parent;
            t3 && i2.mutation_remove(e4, t3);
          }, e3;
        }();
        t2.ChildNodeImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
        };
        t2.DocumentOrShadowRootImpl = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(7), s3 = function() {
          function e3(e4) {
            this._nodeList = [], this._recordQueue = [], this._callback = e4;
            var t3 = i2.dom.window;
            a3.set.append(t3._mutationObservers, this);
          }
          return e3.prototype.observe = function(e4, t3) {
            var r2, i3;
            if ((t3 = t3 || { childList: false, subtree: false }).attributeOldValue === void 0 && t3.attributeFilter === void 0 || t3.attributes !== void 0 || (t3.attributes = true), t3.characterDataOldValue !== void 0 && t3.characterData === void 0 && (t3.characterData = true), !t3.childList && !t3.attributes && !t3.characterData)
              throw new TypeError();
            if (t3.attributeOldValue && !t3.attributes)
              throw new TypeError();
            if (t3.attributeFilter !== void 0 && !t3.attributes)
              throw new TypeError();
            if (t3.characterDataOldValue && !t3.characterData)
              throw new TypeError();
            var s4 = false, u2 = t3, l = function(e5) {
              var t4, r3;
              if (e5.observer === c2) {
                s4 = true;
                try {
                  for (var i4 = (t4 = void 0, n(c2._nodeList)), l2 = i4.next(); !l2.done; l2 = i4.next()) {
                    var h4 = l2.value;
                    a3.list.remove(h4._registeredObserverList, function(t5) {
                      return o.Guard.isTransientRegisteredObserver(t5) && t5.source === e5;
                    });
                  }
                } catch (e6) {
                  t4 = { error: e6 };
                } finally {
                  try {
                    l2 && !l2.done && (r3 = i4.return) && r3.call(i4);
                  } finally {
                    if (t4)
                      throw t4.error;
                  }
                }
                e5.options = u2;
              }
            }, c2 = this;
            try {
              for (var h3 = n(e4._registeredObserverList), p = h3.next(); !p.done; p = h3.next()) {
                l(p.value);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                p && !p.done && (i3 = h3.return) && i3.call(h3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            s4 || (e4._registeredObserverList.push({ observer: this, options: t3 }), this._nodeList.push(e4));
          }, e3.prototype.disconnect = function() {
            var e4, t3, r2 = this;
            try {
              for (var i3 = n(this._nodeList), o2 = i3.next(); !o2.done; o2 = i3.next()) {
                var s4 = o2.value;
                a3.list.remove(s4._registeredObserverList, function(e5) {
                  return e5.observer === r2;
                });
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (t3 = i3.return) && t3.call(i3);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            this._recordQueue = [];
          }, e3.prototype.takeRecords = function() {
            var e4 = this._recordQueue;
            return this._recordQueue = [], e4;
          }, e3;
        }();
        t2.MutationObserverImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(3), i2 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "previousElementSibling", { get: function() {
            for (var e4 = n.Cast.asNode(this)._previousSibling; e4; ) {
              if (n.Guard.isElementNode(e4))
                return e4;
              e4 = e4._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "nextElementSibling", { get: function() {
            for (var e4 = n.Cast.asNode(this)._nextSibling; e4; ) {
              if (n.Guard.isElementNode(e4))
                return e4;
              e4 = e4._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.NonDocumentTypeChildNodeImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(3), i2 = r(0), o = function() {
          function e3() {
          }
          return e3.prototype.getElementById = function(e4) {
            for (var t3 = i2.tree_getFirstDescendantNode(n.Cast.asNode(this), false, false, function(e5) {
              return n.Guard.isElementNode(e5);
            }); t3 !== null; ) {
              if (t3._uniqueIdentifier === e4)
                return t3;
              t3 = i2.tree_getNextDescendantNode(n.Cast.asNode(this), t3, false, false, function(e5) {
                return n.Guard.isElementNode(e5);
              });
            }
            return null;
          }, e3;
        }();
        t2.NonElementParentNodeImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(3), o = r(0), a3 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "children", { get: function() {
            return o.create_htmlCollection(i2.Cast.asNode(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "firstElementChild", { get: function() {
            for (var e4 = i2.Cast.asNode(this)._firstChild; e4; ) {
              if (i2.Guard.isElementNode(e4))
                return e4;
              e4 = e4._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "lastElementChild", { get: function() {
            for (var e4 = i2.Cast.asNode(this)._lastChild; e4; ) {
              if (i2.Guard.isElementNode(e4))
                return e4;
              e4 = e4._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "childElementCount", { get: function() {
            var e4, t3, r2 = 0;
            try {
              for (var o2 = n(i2.Cast.asNode(this)._children), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s3 = a4.value;
                i2.Guard.isElementNode(s3) && r2++;
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                a4 && !a4.done && (t3 = o2.return) && t3.call(o2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), e3.prototype.prepend = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = i2.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
            o.mutation_preInsert(n2, r2, r2._firstChild);
          }, e3.prototype.append = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = i2.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
            o.mutation_append(n2, r2);
          }, e3.prototype.querySelector = function(e4) {
            var t3 = i2.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e4, t3);
            return r2.length === 0 ? null : r2[0];
          }, e3.prototype.querySelectorAll = function(e4) {
            var t3 = i2.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e4, t3);
            return o.create_nodeListStatic(t3, r2);
          }, e3;
        }();
        t2.ParentNodeImpl = a3;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(0), i2 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "_name", { get: function() {
            return this.__name || "";
          }, set: function(e4) {
            this.__name = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_assignedSlot", { get: function() {
            return this.__assignedSlot || null;
          }, set: function(e4) {
            this.__assignedSlot = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "assignedSlot", { get: function() {
            return n.shadowTree_findASlot(this, true);
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.SlotableImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(102), a3 = r(9), s3 = r(3), u2 = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this) || this;
            if (s3.Guard.isDocumentTypeNode(t4.startContainer) || s3.Guard.isAttrNode(t4.startContainer) || s3.Guard.isDocumentTypeNode(t4.endContainer) || s3.Guard.isAttrNode(t4.endContainer))
              throw new a3.InvalidNodeTypeError();
            return r2._start = [t4.startContainer, t4.startOffset], r2._end = [t4.endContainer, t4.endOffset], r2;
          }
          return i2(t3, e3), t3;
        }(o.AbstractRangeImpl);
        t2.StaticRangeImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(272);
        t2.DOMParser = n.DOMParserImpl;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(0), i2 = r(273), o = function() {
          function e3() {
          }
          return e3.prototype.parseFromString = function(e4, t3) {
            if (t3 === "text/html")
              throw new Error("HTML parser not implemented.");
            try {
              return (r2 = new i2.XMLParserImpl().parse(e4))._contentType = t3, r2;
            } catch (e5) {
              var r2, o2 = "http://www.mozilla.org/newlayout/xml/parsererror.xml", a3 = (r2 = n.create_xmlDocument()).createElementNS(o2, "parsererror"), s3 = r2.createElementNS(o2, "error");
              return s3.setAttribute("message", e5.message), a3.appendChild(s3), r2.appendChild(a3), r2;
            }
          }, e3;
        }();
        t2.DOMParserImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(180), a3 = r(111), s3 = r(7), u2 = r(0), l = r(69), c2 = function() {
          function e3() {
          }
          return e3.prototype.parse = function(e4) {
            for (var t3, r2, c3, h3, p = new o.XMLStringLexer(e4, { skipWhitespaceOnlyText: true }), f = u2.create_document(), d3 = f, m3 = p.nextToken(); m3.type !== a3.TokenType.EOF; ) {
              switch (m3.type) {
                case a3.TokenType.Declaration:
                  var y3 = m3;
                  if (y3.version !== "1.0")
                    throw new Error("Invalid xml version: " + y3.version);
                  break;
                case a3.TokenType.DocType:
                  var v = m3;
                  if (!u2.xml_isPubidChar(v.pubId))
                    throw new Error("DocType public identifier does not match PubidChar construct.");
                  if (!u2.xml_isLegalChar(v.sysId) || v.sysId.indexOf('"') !== -1 && v.sysId.indexOf("'") !== -1)
                    throw new Error("DocType system identifier contains invalid characters.");
                  d3.appendChild(f.implementation.createDocumentType(v.name, v.pubId, v.sysId));
                  break;
                case a3.TokenType.CDATA:
                  var _ = m3;
                  if (!u2.xml_isLegalChar(_.data) || _.data.indexOf("]]>") !== -1)
                    throw new Error("CDATA contains invalid characters.");
                  d3.appendChild(f.createCDATASection(_.data));
                  break;
                case a3.TokenType.Comment:
                  var g = m3;
                  if (!u2.xml_isLegalChar(g.data) || g.data.indexOf("--") !== -1 || g.data.endsWith("-"))
                    throw new Error("Comment data contains invalid characters.");
                  d3.appendChild(f.createComment(g.data));
                  break;
                case a3.TokenType.PI:
                  var b2 = m3;
                  if (b2.target.indexOf(":") !== -1 || /^xml$/i.test(b2.target))
                    throw new Error("Processing instruction target contains invalid characters.");
                  if (!u2.xml_isLegalChar(b2.data) || b2.data.indexOf("?>") !== -1)
                    throw new Error("Processing instruction data contains invalid characters.");
                  d3.appendChild(f.createProcessingInstruction(b2.target, b2.data));
                  break;
                case a3.TokenType.Text:
                  var x2 = m3;
                  if (!u2.xml_isLegalChar(x2.data))
                    throw new Error("Text data contains invalid characters.");
                  d3.appendChild(f.createTextNode(this._decodeText(x2.data)));
                  break;
                case a3.TokenType.Element:
                  var w2 = m3, E2 = n(u2.namespace_extractQName(w2.name), 2), D2 = E2[0], S3 = E2[1];
                  if (S3.indexOf(":") !== -1 || !u2.xml_isName(S3))
                    throw new Error("Node local name contains invalid characters.");
                  if (D2 === "xmlns")
                    throw new Error("An element cannot have the 'xmlns' prefix.");
                  var C = d3.lookupNamespaceURI(D2), A = {};
                  try {
                    for (var N = (t3 = void 0, i2(w2.attributes)), T2 = N.next(); !T2.done; T2 = N.next()) {
                      var O2 = n(T2.value, 2), F = O2[0], k2 = O2[1];
                      if (F === "xmlns")
                        C = k2;
                      else {
                        var P = n(u2.namespace_extractQName(F), 2), I2 = P[0], L2 = P[1];
                        I2 === "xmlns" && (L2 === D2 && (C = k2), A[L2] = k2);
                      }
                    }
                  } catch (e5) {
                    t3 = { error: e5 };
                  } finally {
                    try {
                      T2 && !T2.done && (r2 = N.return) && r2.call(N);
                    } finally {
                      if (t3)
                        throw t3.error;
                    }
                  }
                  var M3 = C !== null ? f.createElementNS(C, w2.name) : f.createElement(w2.name);
                  d3.appendChild(M3);
                  var B2 = new l.LocalNameSet();
                  try {
                    for (var j = (c3 = void 0, i2(w2.attributes)), R2 = j.next(); !R2.done; R2 = j.next()) {
                      var z2 = n(R2.value, 2), U = (F = z2[0], k2 = z2[1], n(u2.namespace_extractQName(F), 2)), G2 = (I2 = U[0], L2 = U[1], null);
                      if (I2 === "xmlns" || I2 === null && L2 === "xmlns" ? G2 = s3.namespace.XMLNS : (G2 = M3.lookupNamespaceURI(I2)) !== null && M3.isDefaultNamespace(G2) ? G2 = null : G2 === null && I2 !== null && (G2 = A[I2] || null), B2.has(G2, L2))
                        throw new Error("Element contains duplicate attributes.");
                      if (B2.set(G2, L2), G2 === s3.namespace.XMLNS && k2 === s3.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved.");
                      if (L2.indexOf(":") !== -1 || !u2.xml_isName(L2))
                        throw new Error("Attribute local name contains invalid characters.");
                      if (I2 === "xmlns" && k2 === "")
                        throw new Error("Empty XML namespace is not allowed.");
                      G2 !== null ? M3.setAttributeNS(G2, F, this._decodeAttributeValue(k2)) : M3.setAttribute(F, this._decodeAttributeValue(k2));
                    }
                  } catch (e5) {
                    c3 = { error: e5 };
                  } finally {
                    try {
                      R2 && !R2.done && (h3 = j.return) && h3.call(j);
                    } finally {
                      if (c3)
                        throw c3.error;
                    }
                  }
                  w2.selfClosing || (d3 = M3);
                  break;
                case a3.TokenType.ClosingTag:
                  if (m3.name !== d3.nodeName)
                    throw new Error("Closing tag name does not match opening tag name.");
                  d3._parent && (d3 = d3._parent);
              }
              m3 = p.nextToken();
            }
            return f;
          }, e3.prototype._decodeText = function(e4) {
            return e4 == null ? e4 : e4.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e3.prototype._decodeAttributeValue = function(e4) {
            return e4 == null ? e4 : e4.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e3;
        }();
        t2.XMLParserImpl = c2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(275);
        t2.XMLSerializer = n.XMLSerializerImpl;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(2), o = r(69), a3 = r(95), s3 = r(9), u2 = r(7), l = r(0), c2 = function() {
          function e3() {
          }
          return e3.prototype.serializeToString = function(e4) {
            return this._xmlSerialization(e4, false);
          }, e3.prototype._xmlSerialization = function(e4, t3) {
            if (e4._nodeDocument === void 0 || e4._nodeDocument._hasNamespaces) {
              var r2 = new a3.NamespacePrefixMap();
              r2.set("xml", u2.namespace.XML);
              try {
                return this._serializeNodeNS(e4, null, r2, { value: 1 }, t3);
              } catch (e5) {
                throw new s3.InvalidStateError();
              }
            } else
              try {
                return this._serializeNode(e4, t3);
              } catch (e5) {
                throw new s3.InvalidStateError();
              }
          }, e3.prototype._serializeNodeNS = function(e4, t3, r2, n2, o2) {
            switch (e4.nodeType) {
              case i2.NodeType.Element:
                return this._serializeElementNS(e4, t3, r2, n2, o2);
              case i2.NodeType.Document:
                return this._serializeDocumentNS(e4, t3, r2, n2, o2);
              case i2.NodeType.Comment:
                return this._serializeComment(e4, o2);
              case i2.NodeType.Text:
                return this._serializeText(e4, o2);
              case i2.NodeType.DocumentFragment:
                return this._serializeDocumentFragmentNS(e4, t3, r2, n2, o2);
              case i2.NodeType.DocumentType:
                return this._serializeDocumentType(e4, o2);
              case i2.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e4, o2);
              case i2.NodeType.CData:
                return this._serializeCData(e4, o2);
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeNode = function(e4, t3) {
            switch (e4.nodeType) {
              case i2.NodeType.Element:
                return this._serializeElement(e4, t3);
              case i2.NodeType.Document:
                return this._serializeDocument(e4, t3);
              case i2.NodeType.Comment:
                return this._serializeComment(e4, t3);
              case i2.NodeType.Text:
                return this._serializeText(e4, t3);
              case i2.NodeType.DocumentFragment:
                return this._serializeDocumentFragment(e4, t3);
              case i2.NodeType.DocumentType:
                return this._serializeDocumentType(e4, t3);
              case i2.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e4, t3);
              case i2.NodeType.CData:
                return this._serializeCData(e4, t3);
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeElementNS = function(t3, r2, i3, o2, a4) {
            var s4, c3;
            if (a4 && (t3.localName.indexOf(":") !== -1 || !l.xml_isName(t3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var h3 = "<", p = "", f = false, d3 = false, m3 = i3.copy(), y3 = {}, v = this._recordNamespaceInformation(t3, m3, y3), _ = r2, g = t3.namespaceURI;
            if (_ === g)
              v !== null && (d3 = true), h3 += p = g === u2.namespace.XML ? "xml:" + t3.localName : t3.localName;
            else {
              var b2 = t3.prefix, x2 = null;
              if (b2 === null && g === v || (x2 = m3.get(b2, g)), b2 === "xmlns") {
                if (a4)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                x2 = b2;
              }
              x2 !== null ? (p = x2 + ":" + t3.localName, v !== null && v !== u2.namespace.XML && (_ = v || null), h3 += p) : b2 !== null ? (b2 in y3 && (b2 = this._generatePrefix(g, m3, o2)), m3.set(b2, g), h3 += p += b2 + ":" + t3.localName, h3 += " xmlns:" + b2 + '="' + this._serializeAttributeValue(g, a4) + '"', v !== null && (_ = v || null)) : v === null || v !== null && v !== g ? (d3 = true, _ = g, h3 += p += t3.localName, h3 += ' xmlns="' + this._serializeAttributeValue(g, a4) + '"') : (_ = g, h3 += p += t3.localName);
            }
            h3 += this._serializeAttributesNS(t3, m3, o2, y3, d3, a4);
            var w2 = g === u2.namespace.HTML;
            if (w2 && t3.childNodes.length === 0 && e3._VoidElementNames.has(t3.localName) ? (h3 += " /", f = true) : w2 || t3.childNodes.length !== 0 || (h3 += "/", f = true), h3 += ">", f)
              return h3;
            if (w2 && t3.localName === "template")
              ;
            else
              try {
                for (var E2 = n(t3._children || t3.childNodes), D2 = E2.next(); !D2.done; D2 = E2.next()) {
                  var S3 = D2.value;
                  h3 += this._serializeNodeNS(S3, _, m3, o2, a4);
                }
              } catch (e4) {
                s4 = { error: e4 };
              } finally {
                try {
                  D2 && !D2.done && (c3 = E2.return) && c3.call(E2);
                } finally {
                  if (s4)
                    throw s4.error;
                }
              }
            return h3 += "</" + p + ">";
          }, e3.prototype._serializeDocumentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4;
            if (o2 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var u3 = "";
            try {
              for (var l2 = n(e4._children || e4.childNodes), c3 = l2.next(); !c3.done; c3 = l2.next()) {
                var h3 = c3.value;
                u3 += this._serializeNodeNS(h3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                c3 && !c3.done && (s4 = l2.return) && s4.call(l2);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
            return u3;
          }, e3.prototype._serializeComment = function(e4, t3) {
            if (t3 && (!l.xml_isLegalChar(e4.data) || e4.data.indexOf("--") !== -1 || e4.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            return "<!--" + e4.data + "-->";
          }, e3.prototype._serializeText = function(e4, t3) {
            if (t3 && !l.xml_isLegalChar(e4.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            for (var r2 = "", n2 = 0; n2 < e4.data.length; n2++) {
              var i3 = e4.data[n2];
              r2 += i3 === "&" ? "&amp;" : i3 === "<" ? "&lt;" : i3 === ">" ? "&gt;" : i3;
            }
            return r2;
          }, e3.prototype._serializeDocumentFragmentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4, u3 = "";
            try {
              for (var l2 = n(e4._children || e4.childNodes), c3 = l2.next(); !c3.done; c3 = l2.next()) {
                var h3 = c3.value;
                u3 += this._serializeNodeNS(h3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                c3 && !c3.done && (s4 = l2.return) && s4.call(l2);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
            return u3;
          }, e3.prototype._serializeDocumentType = function(e4, t3) {
            if (t3 && !l.xml_isPubidChar(e4.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t3 && (!l.xml_isLegalChar(e4.systemId) || e4.systemId.indexOf('"') !== -1 && e4.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            return e4.publicId && e4.systemId ? "<!DOCTYPE " + e4.name + ' PUBLIC "' + e4.publicId + '" "' + e4.systemId + '">' : e4.publicId ? "<!DOCTYPE " + e4.name + ' PUBLIC "' + e4.publicId + '">' : e4.systemId ? "<!DOCTYPE " + e4.name + ' SYSTEM "' + e4.systemId + '">' : "<!DOCTYPE " + e4.name + ">";
          }, e3.prototype._serializeProcessingInstruction = function(e4, t3) {
            if (t3 && (e4.target.indexOf(":") !== -1 || /^xml$/i.test(e4.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t3 && (!l.xml_isLegalChar(e4.data) || e4.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            return "<?" + (e4.data === "" ? e4.target : e4.target + " " + e4.data) + "?>";
          }, e3.prototype._serializeCData = function(e4, t3) {
            if (t3 && e4.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            return "<![CDATA[" + e4.data + "]]>";
          }, e3.prototype._serializeAttributesNS = function(e4, t3, r2, i3, a4, s4) {
            var c3, h3, p = "", f = s4 ? new o.LocalNameSet() : void 0;
            try {
              for (var d3 = n(e4.attributes), m3 = d3.next(); !m3.done; m3 = d3.next()) {
                var y3 = m3.value;
                if (a4 || s4 || y3.namespaceURI !== null) {
                  if (s4 && f && f.has(y3.namespaceURI, y3.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  s4 && f && f.set(y3.namespaceURI, y3.localName);
                  var v = y3.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t3.get(y3.prefix, v), v === u2.namespace.XMLNS) {
                      if (y3.value === u2.namespace.XML || y3.prefix === null && a4 || y3.prefix !== null && (!(y3.localName in i3) || i3[y3.localName] !== y3.value) && t3.has(y3.localName, y3.value))
                        continue;
                      if (s4 && y3.value === u2.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (s4 && y3.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y3.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (p += " xmlns:" + (_ = y3.prefix === null || t3.hasPrefix(y3.prefix) && !t3.has(y3.prefix, v) ? this._generatePrefix(v, t3, r2) : y3.prefix) + '="' + this._serializeAttributeValue(v, s4) + '"');
                  if (p += " ", _ !== null && (p += _ + ":"), s4 && (y3.localName.indexOf(":") !== -1 || !l.xml_isName(y3.localName) || y3.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p += y3.localName + '="' + this._serializeAttributeValue(y3.value, s4) + '"';
                } else
                  p += " " + y3.localName + '="' + this._serializeAttributeValue(y3.value, s4) + '"';
              }
            } catch (e5) {
              c3 = { error: e5 };
            } finally {
              try {
                m3 && !m3.done && (h3 = d3.return) && h3.call(d3);
              } finally {
                if (c3)
                  throw c3.error;
              }
            }
            return p;
          }, e3.prototype._recordNamespaceInformation = function(e4, t3, r2) {
            var i3, o2, a4 = null;
            try {
              for (var s4 = n(e4.attributes), l2 = s4.next(); !l2.done; l2 = s4.next()) {
                var c3 = l2.value, h3 = c3.namespaceURI, p = c3.prefix;
                if (h3 === u2.namespace.XMLNS) {
                  if (p === null) {
                    a4 = c3.value;
                    continue;
                  }
                  var f = c3.localName, d3 = c3.value;
                  if (d3 === u2.namespace.XML)
                    continue;
                  if (d3 === "" && (d3 = null), t3.has(f, d3))
                    continue;
                  t3.set(f, d3), r2[f] = d3 || "";
                }
              }
            } catch (e5) {
              i3 = { error: e5 };
            } finally {
              try {
                l2 && !l2.done && (o2 = s4.return) && o2.call(s4);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            return a4;
          }, e3.prototype._generatePrefix = function(e4, t3, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t3.set(n2, e4), n2;
          }, e3.prototype._serializeAttributeValue = function(e4, t3) {
            if (t3 && e4 !== null && !l.xml_isLegalChar(e4))
              throw new Error("Invalid characters in attribute value.");
            if (e4 === null)
              return "";
            for (var r2 = "", n2 = 0; n2 < e4.length; n2++) {
              var i3 = e4[n2];
              r2 += i3 === '"' ? "&quot;" : i3 === "&" ? "&amp;" : i3 === "<" ? "&lt;" : i3 === ">" ? "&gt;" : i3;
            }
            return r2;
          }, e3.prototype._serializeElement = function(e4, t3) {
            var r2, i3;
            if (t3 && (e4.localName.indexOf(":") !== -1 || !l.xml_isName(e4.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a4 = e4.localName, s4 = "<" + a4;
            if (s4 += this._serializeAttributes(e4, t3), e4._children.size === 0 && (s4 += "/", o2 = true), s4 += ">", o2)
              return s4;
            try {
              for (var u3 = n(e4._children), c3 = u3.next(); !c3.done; c3 = u3.next()) {
                var h3 = c3.value;
                s4 += this._serializeNode(h3, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                c3 && !c3.done && (i3 = u3.return) && i3.call(u3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return s4 += "</" + a4 + ">";
          }, e3.prototype._serializeDocument = function(e4, t3) {
            var r2, i3;
            if (t3 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var o2 = "";
            try {
              for (var a4 = n(e4._children), s4 = a4.next(); !s4.done; s4 = a4.next()) {
                var u3 = s4.value;
                o2 += this._serializeNode(u3, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3.prototype._serializeDocumentFragment = function(e4, t3) {
            var r2, i3, o2 = "";
            try {
              for (var a4 = n(e4._children), s4 = a4.next(); !s4.done; s4 = a4.next()) {
                var u3 = s4.value;
                o2 += this._serializeNode(u3, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3.prototype._serializeAttributes = function(e4, t3) {
            var r2, i3, o2 = "", a4 = t3 ? {} : void 0;
            try {
              for (var s4 = n(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var c3 = u3.value;
                if (t3 && a4 && c3.localName in a4)
                  throw new Error("Element contains duplicate attributes (well-formed required).");
                if (t3 && a4 && (a4[c3.localName] = true), t3 && (c3.localName.indexOf(":") !== -1 || !l.xml_isName(c3.localName)))
                  throw new Error("Attribute local name contains invalid characters (well-formed required).");
                o2 += " " + c3.localName + '="' + this._serializeAttributeValue(c3.value, t3) + '"';
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e3;
        }();
        t2.XMLSerializerImpl = c2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(277);
        t2.XMLReader = n.XMLReader;
        var i2 = r(112);
        t2.ObjectReader = i2.ObjectReader;
        var o = r(280);
        t2.JSONReader = o.JSONReader;
        var a3 = r(281);
        t2.YAMLReader = a3.YAMLReader;
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(65), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, a3 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(180), u2 = r(111), l = r(7), c2 = r(0), h3 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            for (var r2, n2, i3, h4, p = new s3.XMLStringLexer(t4, { skipWhitespaceOnlyText: true }), f = e4, d3 = e4, m3 = p.nextToken(); m3.type !== u2.TokenType.EOF; ) {
              switch (m3.type) {
                case u2.TokenType.Declaration:
                  var y3 = m3, v = this.sanitize(y3.version);
                  if (v !== "1.0")
                    throw new Error("Invalid xml version: " + v);
                  var _ = { version: v };
                  y3.encoding && (_.encoding = this.sanitize(y3.encoding)), y3.standalone && (_.standalone = this.sanitize(y3.standalone) === "yes"), d3.set(_);
                  break;
                case u2.TokenType.DocType:
                  var g = m3;
                  d3 = this.docType(d3, this.sanitize(g.name), this.sanitize(g.pubId), this.sanitize(g.sysId)) || d3;
                  break;
                case u2.TokenType.CDATA:
                  var b2 = m3;
                  d3 = this.cdata(d3, this.sanitize(b2.data)) || d3;
                  break;
                case u2.TokenType.Comment:
                  var x2 = m3;
                  d3 = this.comment(d3, this.sanitize(x2.data)) || d3;
                  break;
                case u2.TokenType.PI:
                  var w2 = m3;
                  d3 = this.instruction(d3, this.sanitize(w2.target), this.sanitize(w2.data)) || d3;
                  break;
                case u2.TokenType.Text:
                  var E2 = m3;
                  d3 = this.text(d3, this._decodeText(this.sanitize(E2.data))) || d3;
                  break;
                case u2.TokenType.Element:
                  var D2 = m3, S3 = this.sanitize(D2.name), C = o(c2.namespace_extractQName(S3), 1)[0], A = d3.node.lookupNamespaceURI(C), N = {};
                  try {
                    for (var T2 = (r2 = void 0, a3(D2.attributes)), O2 = T2.next(); !O2.done; O2 = T2.next()) {
                      var F = o(O2.value, 2), k2 = F[0], P = F[1];
                      if (k2 = this.sanitize(k2), P = this.sanitize(P), k2 === "xmlns")
                        A = P;
                      else {
                        var I2 = o(c2.namespace_extractQName(k2), 2), L2 = I2[0], M3 = I2[1];
                        L2 === "xmlns" && (M3 === C && (A = P), N[M3] = P);
                      }
                    }
                  } catch (e5) {
                    r2 = { error: e5 };
                  } finally {
                    try {
                      O2 && !O2.done && (n2 = T2.return) && n2.call(T2);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                  var B2 = A !== null ? this.element(d3, A, S3) : this.element(d3, void 0, S3);
                  if (B2 === void 0)
                    break;
                  d3.node === e4.node && (f = B2);
                  try {
                    for (var j = (i3 = void 0, a3(D2.attributes)), R2 = j.next(); !R2.done; R2 = j.next()) {
                      var z2 = o(R2.value, 2);
                      k2 = z2[0], P = z2[1];
                      k2 = this.sanitize(k2), P = this.sanitize(P);
                      var U = o(c2.namespace_extractQName(k2), 2), G2 = (L2 = U[0], M3 = U[1], null);
                      L2 === "xmlns" || L2 === null && M3 === "xmlns" ? G2 = l.namespace.XMLNS : (G2 = B2.node.lookupNamespaceURI(L2)) !== null && B2.node.isDefaultNamespace(G2) ? G2 = null : G2 === null && L2 !== null && (G2 = N[L2] || null), G2 !== null ? this.attribute(B2, G2, k2, this._decodeAttributeValue(P)) : this.attribute(B2, void 0, k2, this._decodeAttributeValue(P));
                    }
                  } catch (e5) {
                    i3 = { error: e5 };
                  } finally {
                    try {
                      R2 && !R2.done && (h4 = j.return) && h4.call(j);
                    } finally {
                      if (i3)
                        throw i3.error;
                    }
                  }
                  D2.selfClosing || (d3 = B2);
                  break;
                case u2.TokenType.ClosingTag:
                  d3.node.parentNode && (d3 = d3.up());
              }
              m3 = p.nextToken();
            }
            return f;
          }, t3;
        }(r(75).BaseReader);
        t2.XMLReader = h3;
      }, function(e2, t2, r) {
        var n = r(4), i2 = r(279);
        n({ target: "Object", stat: true, forced: Object.assign !== i2 }, { assign: i2 });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(16), i2 = r(8), o = r(61), a3 = r(85), s3 = r(79), u2 = r(27), l = r(41), c2 = Object.assign, h3 = Object.defineProperty;
        e2.exports = !c2 || i2(function() {
          if (n && c2({ b: 1 }, c2(h3({}, "a", { enumerable: true, get: function() {
            h3(this, "b", { value: 3, enumerable: false });
          } }), { b: 2 })).b !== 1)
            return true;
          var e3 = {}, t3 = {}, r2 = Symbol();
          return e3[r2] = 7, "abcdefghijklmnopqrst".split("").forEach(function(e4) {
            t3[e4] = e4;
          }), c2({}, e3)[r2] != 7 || o(c2({}, t3)).join("") != "abcdefghijklmnopqrst";
        }) ? function(e3, t3) {
          for (var r2 = u2(e3), i3 = arguments.length, c3 = 1, h4 = a3.f, p = s3.f; i3 > c3; )
            for (var f, d3 = l(arguments[c3++]), m3 = h4 ? o(d3).concat(h4(d3)) : o(d3), y3 = m3.length, v = 0; y3 > v; )
              f = m3[v++], n && !p.call(d3, f) || (r2[f] = d3[f]);
          return r2;
        } : c2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(112), a3 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            return new o.ObjectReader(this._builderOptions).parse(e4, JSON.parse(t4));
          }, t3;
        }(r(75).BaseReader);
        t2.JSONReader = a3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(112), a3 = r(75), s3 = r(282), u2 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            var r2 = s3.safeLoad(t4);
            if (r2 === void 0)
              throw new Error("Unable to parse YAML document.");
            return new o.ObjectReader(this._builderOptions).parse(e4, r2);
          }, t3;
        }(a3.BaseReader);
        t2.YAMLReader = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(283);
        e2.exports = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(284), i2 = r(303);
        function o(e3) {
          return function() {
            throw new Error("Function " + e3 + " is deprecated and cannot be used.");
          };
        }
        e2.exports.Type = r(10), e2.exports.Schema = r(39), e2.exports.FAILSAFE_SCHEMA = r(113), e2.exports.JSON_SCHEMA = r(182), e2.exports.CORE_SCHEMA = r(181), e2.exports.DEFAULT_SAFE_SCHEMA = r(54), e2.exports.DEFAULT_FULL_SCHEMA = r(76), e2.exports.load = n.load, e2.exports.loadAll = n.loadAll, e2.exports.safeLoad = n.safeLoad, e2.exports.safeLoadAll = n.safeLoadAll, e2.exports.dump = i2.dump, e2.exports.safeDump = i2.safeDump, e2.exports.YAMLException = r(53), e2.exports.MINIMAL_SCHEMA = r(113), e2.exports.SAFE_SCHEMA = r(54), e2.exports.DEFAULT_SCHEMA = r(76), e2.exports.scan = o("scan"), e2.exports.parse = o("parse"), e2.exports.compose = o("compose"), e2.exports.addConstructor = o("addConstructor");
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(53), o = r(285), a3 = r(54), s3 = r(76), u2 = Object.prototype.hasOwnProperty, l = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, c2 = /[\x85\u2028\u2029]/, h3 = /[,\[\]\{\}]/, p = /^(?:!|!!|![a-z\-]+!)$/i, f = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
        function d3(e3) {
          return Object.prototype.toString.call(e3);
        }
        function m3(e3) {
          return e3 === 10 || e3 === 13;
        }
        function y3(e3) {
          return e3 === 9 || e3 === 32;
        }
        function v(e3) {
          return e3 === 9 || e3 === 32 || e3 === 10 || e3 === 13;
        }
        function _(e3) {
          return e3 === 44 || e3 === 91 || e3 === 93 || e3 === 123 || e3 === 125;
        }
        function g(e3) {
          var t3;
          return 48 <= e3 && e3 <= 57 ? e3 - 48 : 97 <= (t3 = 32 | e3) && t3 <= 102 ? t3 - 97 + 10 : -1;
        }
        function b2(e3) {
          return e3 === 48 ? "\0" : e3 === 97 ? "\x07" : e3 === 98 ? "\b" : e3 === 116 || e3 === 9 ? "	" : e3 === 110 ? "\n" : e3 === 118 ? "\v" : e3 === 102 ? "\f" : e3 === 114 ? "\r" : e3 === 101 ? "\x1B" : e3 === 32 ? " " : e3 === 34 ? '"' : e3 === 47 ? "/" : e3 === 92 ? "\\" : e3 === 78 ? "\x85" : e3 === 95 ? "\xA0" : e3 === 76 ? "\u2028" : e3 === 80 ? "\u2029" : "";
        }
        function x2(e3) {
          return e3 <= 65535 ? String.fromCharCode(e3) : String.fromCharCode(55296 + (e3 - 65536 >> 10), 56320 + (e3 - 65536 & 1023));
        }
        for (var w2 = new Array(256), E2 = new Array(256), D2 = 0; D2 < 256; D2++)
          w2[D2] = b2(D2) ? 1 : 0, E2[D2] = b2(D2);
        function S3(e3, t3) {
          this.input = e3, this.filename = t3.filename || null, this.schema = t3.schema || s3, this.onWarning = t3.onWarning || null, this.legacy = t3.legacy || false, this.json = t3.json || false, this.listener = t3.listener || null, this.implicitTypes = this.schema.compiledImplicit, this.typeMap = this.schema.compiledTypeMap, this.length = e3.length, this.position = 0, this.line = 0, this.lineStart = 0, this.lineIndent = 0, this.documents = [];
        }
        function C(e3, t3) {
          return new i2(t3, new o(e3.filename, e3.input, e3.position, e3.line, e3.position - e3.lineStart));
        }
        function A(e3, t3) {
          throw C(e3, t3);
        }
        function N(e3, t3) {
          e3.onWarning && e3.onWarning.call(null, C(e3, t3));
        }
        var T2 = { YAML: function(e3, t3, r2) {
          var n2, i3, o2;
          e3.version !== null && A(e3, "duplication of %YAML directive"), r2.length !== 1 && A(e3, "YAML directive accepts exactly one argument"), (n2 = /^([0-9]+)\.([0-9]+)$/.exec(r2[0])) === null && A(e3, "ill-formed argument of the YAML directive"), i3 = parseInt(n2[1], 10), o2 = parseInt(n2[2], 10), i3 !== 1 && A(e3, "unacceptable YAML version of the document"), e3.version = r2[0], e3.checkLineBreaks = o2 < 2, o2 !== 1 && o2 !== 2 && N(e3, "unsupported YAML version of the document");
        }, TAG: function(e3, t3, r2) {
          var n2, i3;
          r2.length !== 2 && A(e3, "TAG directive accepts exactly two arguments"), n2 = r2[0], i3 = r2[1], p.test(n2) || A(e3, "ill-formed tag handle (first argument) of the TAG directive"), u2.call(e3.tagMap, n2) && A(e3, 'there is a previously declared suffix for "' + n2 + '" tag handle'), f.test(i3) || A(e3, "ill-formed tag prefix (second argument) of the TAG directive"), e3.tagMap[n2] = i3;
        } };
        function O2(e3, t3, r2, n2) {
          var i3, o2, a4, s4;
          if (t3 < r2) {
            if (s4 = e3.input.slice(t3, r2), n2)
              for (i3 = 0, o2 = s4.length; i3 < o2; i3 += 1)
                (a4 = s4.charCodeAt(i3)) === 9 || 32 <= a4 && a4 <= 1114111 || A(e3, "expected valid JSON character");
            else
              l.test(s4) && A(e3, "the stream contains non-printable characters");
            e3.result += s4;
          }
        }
        function F(e3, t3, r2, i3) {
          var o2, a4, s4, l2;
          for (n.isObject(r2) || A(e3, "cannot merge mappings; the provided source object is unacceptable"), s4 = 0, l2 = (o2 = Object.keys(r2)).length; s4 < l2; s4 += 1)
            a4 = o2[s4], u2.call(t3, a4) || (t3[a4] = r2[a4], i3[a4] = true);
        }
        function k2(e3, t3, r2, n2, i3, o2, a4, s4) {
          var l2, c3;
          if (Array.isArray(i3))
            for (l2 = 0, c3 = (i3 = Array.prototype.slice.call(i3)).length; l2 < c3; l2 += 1)
              Array.isArray(i3[l2]) && A(e3, "nested arrays are not supported inside keys"), typeof i3 == "object" && d3(i3[l2]) === "[object Object]" && (i3[l2] = "[object Object]");
          if (typeof i3 == "object" && d3(i3) === "[object Object]" && (i3 = "[object Object]"), i3 = String(i3), t3 === null && (t3 = {}), n2 === "tag:yaml.org,2002:merge")
            if (Array.isArray(o2))
              for (l2 = 0, c3 = o2.length; l2 < c3; l2 += 1)
                F(e3, t3, o2[l2], r2);
            else
              F(e3, t3, o2, r2);
          else
            e3.json || u2.call(r2, i3) || !u2.call(t3, i3) || (e3.line = a4 || e3.line, e3.position = s4 || e3.position, A(e3, "duplicated mapping key")), t3[i3] = o2, delete r2[i3];
          return t3;
        }
        function P(e3) {
          var t3;
          (t3 = e3.input.charCodeAt(e3.position)) === 10 ? e3.position++ : t3 === 13 ? (e3.position++, e3.input.charCodeAt(e3.position) === 10 && e3.position++) : A(e3, "a line break is expected"), e3.line += 1, e3.lineStart = e3.position;
        }
        function I2(e3, t3, r2) {
          for (var n2 = 0, i3 = e3.input.charCodeAt(e3.position); i3 !== 0; ) {
            for (; y3(i3); )
              i3 = e3.input.charCodeAt(++e3.position);
            if (t3 && i3 === 35)
              do {
                i3 = e3.input.charCodeAt(++e3.position);
              } while (i3 !== 10 && i3 !== 13 && i3 !== 0);
            if (!m3(i3))
              break;
            for (P(e3), i3 = e3.input.charCodeAt(e3.position), n2++, e3.lineIndent = 0; i3 === 32; )
              e3.lineIndent++, i3 = e3.input.charCodeAt(++e3.position);
          }
          return r2 !== -1 && n2 !== 0 && e3.lineIndent < r2 && N(e3, "deficient indentation"), n2;
        }
        function L2(e3) {
          var t3, r2 = e3.position;
          return !((t3 = e3.input.charCodeAt(r2)) !== 45 && t3 !== 46 || t3 !== e3.input.charCodeAt(r2 + 1) || t3 !== e3.input.charCodeAt(r2 + 2) || (r2 += 3, (t3 = e3.input.charCodeAt(r2)) !== 0 && !v(t3)));
        }
        function M3(e3, t3) {
          t3 === 1 ? e3.result += " " : t3 > 1 && (e3.result += n.repeat("\n", t3 - 1));
        }
        function B2(e3, t3) {
          var r2, n2, i3 = e3.tag, o2 = e3.anchor, a4 = [], s4 = false;
          for (e3.anchor !== null && (e3.anchorMap[e3.anchor] = a4), n2 = e3.input.charCodeAt(e3.position); n2 !== 0 && n2 === 45 && v(e3.input.charCodeAt(e3.position + 1)); )
            if (s4 = true, e3.position++, I2(e3, true, -1) && e3.lineIndent <= t3)
              a4.push(null), n2 = e3.input.charCodeAt(e3.position);
            else if (r2 = e3.line, z2(e3, t3, 3, false, true), a4.push(e3.result), I2(e3, true, -1), n2 = e3.input.charCodeAt(e3.position), (e3.line === r2 || e3.lineIndent > t3) && n2 !== 0)
              A(e3, "bad indentation of a sequence entry");
            else if (e3.lineIndent < t3)
              break;
          return !!s4 && (e3.tag = i3, e3.anchor = o2, e3.kind = "sequence", e3.result = a4, true);
        }
        function j(e3) {
          var t3, r2, n2, i3, o2 = false, a4 = false;
          if ((i3 = e3.input.charCodeAt(e3.position)) !== 33)
            return false;
          if (e3.tag !== null && A(e3, "duplication of a tag property"), (i3 = e3.input.charCodeAt(++e3.position)) === 60 ? (o2 = true, i3 = e3.input.charCodeAt(++e3.position)) : i3 === 33 ? (a4 = true, r2 = "!!", i3 = e3.input.charCodeAt(++e3.position)) : r2 = "!", t3 = e3.position, o2) {
            do {
              i3 = e3.input.charCodeAt(++e3.position);
            } while (i3 !== 0 && i3 !== 62);
            e3.position < e3.length ? (n2 = e3.input.slice(t3, e3.position), i3 = e3.input.charCodeAt(++e3.position)) : A(e3, "unexpected end of the stream within a verbatim tag");
          } else {
            for (; i3 !== 0 && !v(i3); )
              i3 === 33 && (a4 ? A(e3, "tag suffix cannot contain exclamation marks") : (r2 = e3.input.slice(t3 - 1, e3.position + 1), p.test(r2) || A(e3, "named tag handle cannot contain such characters"), a4 = true, t3 = e3.position + 1)), i3 = e3.input.charCodeAt(++e3.position);
            n2 = e3.input.slice(t3, e3.position), h3.test(n2) && A(e3, "tag suffix cannot contain flow indicator characters");
          }
          return n2 && !f.test(n2) && A(e3, "tag name cannot contain such characters: " + n2), o2 ? e3.tag = n2 : u2.call(e3.tagMap, r2) ? e3.tag = e3.tagMap[r2] + n2 : r2 === "!" ? e3.tag = "!" + n2 : r2 === "!!" ? e3.tag = "tag:yaml.org,2002:" + n2 : A(e3, 'undeclared tag handle "' + r2 + '"'), true;
        }
        function R2(e3) {
          var t3, r2;
          if ((r2 = e3.input.charCodeAt(e3.position)) !== 38)
            return false;
          for (e3.anchor !== null && A(e3, "duplication of an anchor property"), r2 = e3.input.charCodeAt(++e3.position), t3 = e3.position; r2 !== 0 && !v(r2) && !_(r2); )
            r2 = e3.input.charCodeAt(++e3.position);
          return e3.position === t3 && A(e3, "name of an anchor node must contain at least one character"), e3.anchor = e3.input.slice(t3, e3.position), true;
        }
        function z2(e3, t3, r2, i3, o2) {
          var a4, s4, l2, c3, h4, p2, f2, d4, b3 = 1, D3 = false, S4 = false;
          if (e3.listener !== null && e3.listener("open", e3), e3.tag = null, e3.anchor = null, e3.kind = null, e3.result = null, a4 = s4 = l2 = r2 === 4 || r2 === 3, i3 && I2(e3, true, -1) && (D3 = true, e3.lineIndent > t3 ? b3 = 1 : e3.lineIndent === t3 ? b3 = 0 : e3.lineIndent < t3 && (b3 = -1)), b3 === 1)
            for (; j(e3) || R2(e3); )
              I2(e3, true, -1) ? (D3 = true, l2 = a4, e3.lineIndent > t3 ? b3 = 1 : e3.lineIndent === t3 ? b3 = 0 : e3.lineIndent < t3 && (b3 = -1)) : l2 = false;
          if (l2 && (l2 = D3 || o2), b3 !== 1 && r2 !== 4 || (f2 = r2 === 1 || r2 === 2 ? t3 : t3 + 1, d4 = e3.position - e3.lineStart, b3 === 1 ? l2 && (B2(e3, d4) || function(e4, t4, r3) {
            var n2, i4, o3, a5, s5, u3 = e4.tag, l3 = e4.anchor, c4 = {}, h5 = {}, p3 = null, f3 = null, d5 = null, m4 = false, _2 = false;
            for (e4.anchor !== null && (e4.anchorMap[e4.anchor] = c4), s5 = e4.input.charCodeAt(e4.position); s5 !== 0; ) {
              if (n2 = e4.input.charCodeAt(e4.position + 1), o3 = e4.line, a5 = e4.position, s5 !== 63 && s5 !== 58 || !v(n2)) {
                if (!z2(e4, r3, 2, false, true))
                  break;
                if (e4.line === o3) {
                  for (s5 = e4.input.charCodeAt(e4.position); y3(s5); )
                    s5 = e4.input.charCodeAt(++e4.position);
                  if (s5 === 58)
                    v(s5 = e4.input.charCodeAt(++e4.position)) || A(e4, "a whitespace character is expected after the key-value separator within a block mapping"), m4 && (k2(e4, c4, h5, p3, f3, null), p3 = f3 = d5 = null), _2 = true, m4 = false, i4 = false, p3 = e4.tag, f3 = e4.result;
                  else {
                    if (!_2)
                      return e4.tag = u3, e4.anchor = l3, true;
                    A(e4, "can not read an implicit mapping pair; a colon is missed");
                  }
                } else {
                  if (!_2)
                    return e4.tag = u3, e4.anchor = l3, true;
                  A(e4, "can not read a block mapping entry; a multiline key may not be an implicit key");
                }
              } else
                s5 === 63 ? (m4 && (k2(e4, c4, h5, p3, f3, null), p3 = f3 = d5 = null), _2 = true, m4 = true, i4 = true) : m4 ? (m4 = false, i4 = true) : A(e4, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"), e4.position += 1, s5 = n2;
              if ((e4.line === o3 || e4.lineIndent > t4) && (z2(e4, t4, 4, true, i4) && (m4 ? f3 = e4.result : d5 = e4.result), m4 || (k2(e4, c4, h5, p3, f3, d5, o3, a5), p3 = f3 = d5 = null), I2(e4, true, -1), s5 = e4.input.charCodeAt(e4.position)), e4.lineIndent > t4 && s5 !== 0)
                A(e4, "bad indentation of a mapping entry");
              else if (e4.lineIndent < t4)
                break;
            }
            return m4 && k2(e4, c4, h5, p3, f3, null), _2 && (e4.tag = u3, e4.anchor = l3, e4.kind = "mapping", e4.result = c4), _2;
          }(e3, d4, f2)) || function(e4, t4) {
            var r3, n2, i4, o3, a5, s5, u3, l3, c4, h5, p3 = true, f3 = e4.tag, d5 = e4.anchor, m4 = {};
            if ((h5 = e4.input.charCodeAt(e4.position)) === 91)
              i4 = 93, s5 = false, n2 = [];
            else {
              if (h5 !== 123)
                return false;
              i4 = 125, s5 = true, n2 = {};
            }
            for (e4.anchor !== null && (e4.anchorMap[e4.anchor] = n2), h5 = e4.input.charCodeAt(++e4.position); h5 !== 0; ) {
              if (I2(e4, true, t4), (h5 = e4.input.charCodeAt(e4.position)) === i4)
                return e4.position++, e4.tag = f3, e4.anchor = d5, e4.kind = s5 ? "mapping" : "sequence", e4.result = n2, true;
              p3 || A(e4, "missed comma between flow collection entries"), c4 = null, o3 = a5 = false, h5 === 63 && v(e4.input.charCodeAt(e4.position + 1)) && (o3 = a5 = true, e4.position++, I2(e4, true, t4)), r3 = e4.line, z2(e4, t4, 1, false, true), l3 = e4.tag, u3 = e4.result, I2(e4, true, t4), h5 = e4.input.charCodeAt(e4.position), !a5 && e4.line !== r3 || h5 !== 58 || (o3 = true, h5 = e4.input.charCodeAt(++e4.position), I2(e4, true, t4), z2(e4, t4, 1, false, true), c4 = e4.result), s5 ? k2(e4, n2, m4, l3, u3, c4) : o3 ? n2.push(k2(e4, null, m4, l3, u3, c4)) : n2.push(u3), I2(e4, true, t4), (h5 = e4.input.charCodeAt(e4.position)) === 44 ? (p3 = true, h5 = e4.input.charCodeAt(++e4.position)) : p3 = false;
            }
            A(e4, "unexpected end of the stream within a flow collection");
          }(e3, f2) ? S4 = true : (s4 && function(e4, t4) {
            var r3, i4, o3, a5, s5, u3 = 1, l3 = false, c4 = false, h5 = t4, p3 = 0, f3 = false;
            if ((a5 = e4.input.charCodeAt(e4.position)) === 124)
              i4 = false;
            else {
              if (a5 !== 62)
                return false;
              i4 = true;
            }
            for (e4.kind = "scalar", e4.result = ""; a5 !== 0; )
              if ((a5 = e4.input.charCodeAt(++e4.position)) === 43 || a5 === 45)
                u3 === 1 ? u3 = a5 === 43 ? 3 : 2 : A(e4, "repeat of a chomping mode identifier");
              else {
                if (!((o3 = 48 <= (s5 = a5) && s5 <= 57 ? s5 - 48 : -1) >= 0))
                  break;
                o3 === 0 ? A(e4, "bad explicit indentation width of a block scalar; it cannot be less than one") : c4 ? A(e4, "repeat of an indentation width identifier") : (h5 = t4 + o3 - 1, c4 = true);
              }
            if (y3(a5)) {
              do {
                a5 = e4.input.charCodeAt(++e4.position);
              } while (y3(a5));
              if (a5 === 35)
                do {
                  a5 = e4.input.charCodeAt(++e4.position);
                } while (!m3(a5) && a5 !== 0);
            }
            for (; a5 !== 0; ) {
              for (P(e4), e4.lineIndent = 0, a5 = e4.input.charCodeAt(e4.position); (!c4 || e4.lineIndent < h5) && a5 === 32; )
                e4.lineIndent++, a5 = e4.input.charCodeAt(++e4.position);
              if (!c4 && e4.lineIndent > h5 && (h5 = e4.lineIndent), m3(a5))
                p3++;
              else {
                if (e4.lineIndent < h5) {
                  u3 === 3 ? e4.result += n.repeat("\n", l3 ? 1 + p3 : p3) : u3 === 1 && l3 && (e4.result += "\n");
                  break;
                }
                for (i4 ? y3(a5) ? (f3 = true, e4.result += n.repeat("\n", l3 ? 1 + p3 : p3)) : f3 ? (f3 = false, e4.result += n.repeat("\n", p3 + 1)) : p3 === 0 ? l3 && (e4.result += " ") : e4.result += n.repeat("\n", p3) : e4.result += n.repeat("\n", l3 ? 1 + p3 : p3), l3 = true, c4 = true, p3 = 0, r3 = e4.position; !m3(a5) && a5 !== 0; )
                  a5 = e4.input.charCodeAt(++e4.position);
                O2(e4, r3, e4.position, false);
              }
            }
            return true;
          }(e3, f2) || function(e4, t4) {
            var r3, n2, i4;
            if ((r3 = e4.input.charCodeAt(e4.position)) !== 39)
              return false;
            for (e4.kind = "scalar", e4.result = "", e4.position++, n2 = i4 = e4.position; (r3 = e4.input.charCodeAt(e4.position)) !== 0; )
              if (r3 === 39) {
                if (O2(e4, n2, e4.position, true), (r3 = e4.input.charCodeAt(++e4.position)) !== 39)
                  return true;
                n2 = e4.position, e4.position++, i4 = e4.position;
              } else
                m3(r3) ? (O2(e4, n2, i4, true), M3(e4, I2(e4, false, t4)), n2 = i4 = e4.position) : e4.position === e4.lineStart && L2(e4) ? A(e4, "unexpected end of the document within a single quoted scalar") : (e4.position++, i4 = e4.position);
            A(e4, "unexpected end of the stream within a single quoted scalar");
          }(e3, f2) || function(e4, t4) {
            var r3, n2, i4, o3, a5, s5, u3;
            if ((s5 = e4.input.charCodeAt(e4.position)) !== 34)
              return false;
            for (e4.kind = "scalar", e4.result = "", e4.position++, r3 = n2 = e4.position; (s5 = e4.input.charCodeAt(e4.position)) !== 0; ) {
              if (s5 === 34)
                return O2(e4, r3, e4.position, true), e4.position++, true;
              if (s5 === 92) {
                if (O2(e4, r3, e4.position, true), m3(s5 = e4.input.charCodeAt(++e4.position)))
                  I2(e4, false, t4);
                else if (s5 < 256 && w2[s5])
                  e4.result += E2[s5], e4.position++;
                else if ((a5 = (u3 = s5) === 120 ? 2 : u3 === 117 ? 4 : u3 === 85 ? 8 : 0) > 0) {
                  for (i4 = a5, o3 = 0; i4 > 0; i4--)
                    (a5 = g(s5 = e4.input.charCodeAt(++e4.position))) >= 0 ? o3 = (o3 << 4) + a5 : A(e4, "expected hexadecimal character");
                  e4.result += x2(o3), e4.position++;
                } else
                  A(e4, "unknown escape sequence");
                r3 = n2 = e4.position;
              } else
                m3(s5) ? (O2(e4, r3, n2, true), M3(e4, I2(e4, false, t4)), r3 = n2 = e4.position) : e4.position === e4.lineStart && L2(e4) ? A(e4, "unexpected end of the document within a double quoted scalar") : (e4.position++, n2 = e4.position);
            }
            A(e4, "unexpected end of the stream within a double quoted scalar");
          }(e3, f2) ? S4 = true : !function(e4) {
            var t4, r3, n2;
            if ((n2 = e4.input.charCodeAt(e4.position)) !== 42)
              return false;
            for (n2 = e4.input.charCodeAt(++e4.position), t4 = e4.position; n2 !== 0 && !v(n2) && !_(n2); )
              n2 = e4.input.charCodeAt(++e4.position);
            return e4.position === t4 && A(e4, "name of an alias node must contain at least one character"), r3 = e4.input.slice(t4, e4.position), e4.anchorMap.hasOwnProperty(r3) || A(e4, 'unidentified alias "' + r3 + '"'), e4.result = e4.anchorMap[r3], I2(e4, true, -1), true;
          }(e3) ? function(e4, t4, r3) {
            var n2, i4, o3, a5, s5, u3, l3, c4, h5 = e4.kind, p3 = e4.result;
            if (v(c4 = e4.input.charCodeAt(e4.position)) || _(c4) || c4 === 35 || c4 === 38 || c4 === 42 || c4 === 33 || c4 === 124 || c4 === 62 || c4 === 39 || c4 === 34 || c4 === 37 || c4 === 64 || c4 === 96)
              return false;
            if ((c4 === 63 || c4 === 45) && (v(n2 = e4.input.charCodeAt(e4.position + 1)) || r3 && _(n2)))
              return false;
            for (e4.kind = "scalar", e4.result = "", i4 = o3 = e4.position, a5 = false; c4 !== 0; ) {
              if (c4 === 58) {
                if (v(n2 = e4.input.charCodeAt(e4.position + 1)) || r3 && _(n2))
                  break;
              } else if (c4 === 35) {
                if (v(e4.input.charCodeAt(e4.position - 1)))
                  break;
              } else {
                if (e4.position === e4.lineStart && L2(e4) || r3 && _(c4))
                  break;
                if (m3(c4)) {
                  if (s5 = e4.line, u3 = e4.lineStart, l3 = e4.lineIndent, I2(e4, false, -1), e4.lineIndent >= t4) {
                    a5 = true, c4 = e4.input.charCodeAt(e4.position);
                    continue;
                  }
                  e4.position = o3, e4.line = s5, e4.lineStart = u3, e4.lineIndent = l3;
                  break;
                }
              }
              a5 && (O2(e4, i4, o3, false), M3(e4, e4.line - s5), i4 = o3 = e4.position, a5 = false), y3(c4) || (o3 = e4.position + 1), c4 = e4.input.charCodeAt(++e4.position);
            }
            return O2(e4, i4, o3, false), !!e4.result || (e4.kind = h5, e4.result = p3, false);
          }(e3, f2, r2 === 1) && (S4 = true, e3.tag === null && (e3.tag = "?")) : (S4 = true, e3.tag === null && e3.anchor === null || A(e3, "alias node should not have any properties")), e3.anchor !== null && (e3.anchorMap[e3.anchor] = e3.result)) : b3 === 0 && (S4 = l2 && B2(e3, d4))), e3.tag !== null && e3.tag !== "!")
            if (e3.tag === "?") {
              for (e3.result !== null && e3.kind !== "scalar" && A(e3, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + e3.kind + '"'), c3 = 0, h4 = e3.implicitTypes.length; c3 < h4; c3 += 1)
                if ((p2 = e3.implicitTypes[c3]).resolve(e3.result)) {
                  e3.result = p2.construct(e3.result), e3.tag = p2.tag, e3.anchor !== null && (e3.anchorMap[e3.anchor] = e3.result);
                  break;
                }
            } else
              u2.call(e3.typeMap[e3.kind || "fallback"], e3.tag) ? (p2 = e3.typeMap[e3.kind || "fallback"][e3.tag], e3.result !== null && p2.kind !== e3.kind && A(e3, "unacceptable node kind for !<" + e3.tag + '> tag; it should be "' + p2.kind + '", not "' + e3.kind + '"'), p2.resolve(e3.result) ? (e3.result = p2.construct(e3.result), e3.anchor !== null && (e3.anchorMap[e3.anchor] = e3.result)) : A(e3, "cannot resolve a node with !<" + e3.tag + "> explicit tag")) : A(e3, "unknown tag !<" + e3.tag + ">");
          return e3.listener !== null && e3.listener("close", e3), e3.tag !== null || e3.anchor !== null || S4;
        }
        function U(e3) {
          var t3, r2, n2, i3, o2 = e3.position, a4 = false;
          for (e3.version = null, e3.checkLineBreaks = e3.legacy, e3.tagMap = {}, e3.anchorMap = {}; (i3 = e3.input.charCodeAt(e3.position)) !== 0 && (I2(e3, true, -1), i3 = e3.input.charCodeAt(e3.position), !(e3.lineIndent > 0 || i3 !== 37)); ) {
            for (a4 = true, i3 = e3.input.charCodeAt(++e3.position), t3 = e3.position; i3 !== 0 && !v(i3); )
              i3 = e3.input.charCodeAt(++e3.position);
            for (n2 = [], (r2 = e3.input.slice(t3, e3.position)).length < 1 && A(e3, "directive name must not be less than one character in length"); i3 !== 0; ) {
              for (; y3(i3); )
                i3 = e3.input.charCodeAt(++e3.position);
              if (i3 === 35) {
                do {
                  i3 = e3.input.charCodeAt(++e3.position);
                } while (i3 !== 0 && !m3(i3));
                break;
              }
              if (m3(i3))
                break;
              for (t3 = e3.position; i3 !== 0 && !v(i3); )
                i3 = e3.input.charCodeAt(++e3.position);
              n2.push(e3.input.slice(t3, e3.position));
            }
            i3 !== 0 && P(e3), u2.call(T2, r2) ? T2[r2](e3, r2, n2) : N(e3, 'unknown document directive "' + r2 + '"');
          }
          I2(e3, true, -1), e3.lineIndent === 0 && e3.input.charCodeAt(e3.position) === 45 && e3.input.charCodeAt(e3.position + 1) === 45 && e3.input.charCodeAt(e3.position + 2) === 45 ? (e3.position += 3, I2(e3, true, -1)) : a4 && A(e3, "directives end mark is expected"), z2(e3, e3.lineIndent - 1, 4, false, true), I2(e3, true, -1), e3.checkLineBreaks && c2.test(e3.input.slice(o2, e3.position)) && N(e3, "non-ASCII line breaks are interpreted as content"), e3.documents.push(e3.result), e3.position === e3.lineStart && L2(e3) ? e3.input.charCodeAt(e3.position) === 46 && (e3.position += 3, I2(e3, true, -1)) : e3.position < e3.length - 1 && A(e3, "end of the stream or a document separator is expected");
        }
        function G2(e3, t3) {
          t3 = t3 || {}, (e3 = String(e3)).length !== 0 && (e3.charCodeAt(e3.length - 1) !== 10 && e3.charCodeAt(e3.length - 1) !== 13 && (e3 += "\n"), e3.charCodeAt(0) === 65279 && (e3 = e3.slice(1)));
          var r2 = new S3(e3, t3), n2 = e3.indexOf("\0");
          for (n2 !== -1 && (r2.position = n2, A(r2, "null byte is not allowed in input")), r2.input += "\0"; r2.input.charCodeAt(r2.position) === 32; )
            r2.lineIndent += 1, r2.position += 1;
          for (; r2.position < r2.length - 1; )
            U(r2);
          return r2.documents;
        }
        function X2(e3, t3, r2) {
          t3 !== null && typeof t3 == "object" && r2 === void 0 && (r2 = t3, t3 = null);
          var n2 = G2(e3, r2);
          if (typeof t3 != "function")
            return n2;
          for (var i3 = 0, o2 = n2.length; i3 < o2; i3 += 1)
            t3(n2[i3]);
        }
        function q2(e3, t3) {
          var r2 = G2(e3, t3);
          if (r2.length !== 0) {
            if (r2.length === 1)
              return r2[0];
            throw new i2("expected a single document in the stream, but found more");
          }
        }
        e2.exports.loadAll = X2, e2.exports.load = q2, e2.exports.safeLoadAll = function(e3, t3, r2) {
          return typeof t3 == "object" && t3 !== null && r2 === void 0 && (r2 = t3, t3 = null), X2(e3, t3, n.extend({ schema: a3 }, r2));
        }, e2.exports.safeLoad = function(e3, t3) {
          return q2(e3, n.extend({ schema: a3 }, t3));
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38);
        function i2(e3, t3, r2, n2, i3) {
          this.name = e3, this.buffer = t3, this.position = r2, this.line = n2, this.column = i3;
        }
        i2.prototype.getSnippet = function(e3, t3) {
          var r2, i3, o, a3, s3;
          if (!this.buffer)
            return null;
          for (e3 = e3 || 4, t3 = t3 || 75, r2 = "", i3 = this.position; i3 > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(i3 - 1)) === -1; )
            if (i3 -= 1, this.position - i3 > t3 / 2 - 1) {
              r2 = " ... ", i3 += 5;
              break;
            }
          for (o = "", a3 = this.position; a3 < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(a3)) === -1; )
            if ((a3 += 1) - this.position > t3 / 2 - 1) {
              o = " ... ", a3 -= 5;
              break;
            }
          return s3 = this.buffer.slice(i3, a3), n.repeat(" ", e3) + r2 + s3 + o + "\n" + n.repeat(" ", e3 + this.position - i3 + r2.length) + "^";
        }, i2.prototype.toString = function(e3) {
          var t3, r2 = "";
          return this.name && (r2 += 'in "' + this.name + '" '), r2 += "at line " + (this.line + 1) + ", column " + (this.column + 1), e3 || (t3 = this.getSnippet()) && (r2 += ":\n" + t3), r2;
        }, e2.exports = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:str", { kind: "scalar", construct: function(e3) {
          return e3 !== null ? e3 : "";
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:seq", { kind: "sequence", construct: function(e3) {
          return e3 !== null ? e3 : [];
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:map", { kind: "mapping", construct: function(e3) {
          return e3 !== null ? e3 : {};
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:null", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3 = e3.length;
          return t3 === 1 && e3 === "~" || t3 === 4 && (e3 === "null" || e3 === "Null" || e3 === "NULL");
        }, construct: function() {
          return null;
        }, predicate: function(e3) {
          return e3 === null;
        }, represent: { canonical: function() {
          return "~";
        }, lowercase: function() {
          return "null";
        }, uppercase: function() {
          return "NULL";
        }, camelcase: function() {
          return "Null";
        } }, defaultStyle: "lowercase" });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:bool", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          var t3 = e3.length;
          return t3 === 4 && (e3 === "true" || e3 === "True" || e3 === "TRUE") || t3 === 5 && (e3 === "false" || e3 === "False" || e3 === "FALSE");
        }, construct: function(e3) {
          return e3 === "true" || e3 === "True" || e3 === "TRUE";
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Boolean]";
        }, represent: { lowercase: function(e3) {
          return e3 ? "true" : "false";
        }, uppercase: function(e3) {
          return e3 ? "TRUE" : "FALSE";
        }, camelcase: function(e3) {
          return e3 ? "True" : "False";
        } }, defaultStyle: "lowercase" });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(10);
        function o(e3) {
          return 48 <= e3 && e3 <= 55;
        }
        function a3(e3) {
          return 48 <= e3 && e3 <= 57;
        }
        e2.exports = new i2("tag:yaml.org,2002:int", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          var t3, r2, n2 = e3.length, i3 = 0, s3 = false;
          if (!n2)
            return false;
          if ((t3 = e3[i3]) !== "-" && t3 !== "+" || (t3 = e3[++i3]), t3 === "0") {
            if (i3 + 1 === n2)
              return true;
            if ((t3 = e3[++i3]) === "b") {
              for (i3++; i3 < n2; i3++)
                if ((t3 = e3[i3]) !== "_") {
                  if (t3 !== "0" && t3 !== "1")
                    return false;
                  s3 = true;
                }
              return s3 && t3 !== "_";
            }
            if (t3 === "x") {
              for (i3++; i3 < n2; i3++)
                if ((t3 = e3[i3]) !== "_") {
                  if (!(48 <= (r2 = e3.charCodeAt(i3)) && r2 <= 57 || 65 <= r2 && r2 <= 70 || 97 <= r2 && r2 <= 102))
                    return false;
                  s3 = true;
                }
              return s3 && t3 !== "_";
            }
            for (; i3 < n2; i3++)
              if ((t3 = e3[i3]) !== "_") {
                if (!o(e3.charCodeAt(i3)))
                  return false;
                s3 = true;
              }
            return s3 && t3 !== "_";
          }
          if (t3 === "_")
            return false;
          for (; i3 < n2; i3++)
            if ((t3 = e3[i3]) !== "_") {
              if (t3 === ":")
                break;
              if (!a3(e3.charCodeAt(i3)))
                return false;
              s3 = true;
            }
          return !(!s3 || t3 === "_") && (t3 !== ":" || /^(:[0-5]?[0-9])+$/.test(e3.slice(i3)));
        }, construct: function(e3) {
          var t3, r2, n2 = e3, i3 = 1, o2 = [];
          return n2.indexOf("_") !== -1 && (n2 = n2.replace(/_/g, "")), (t3 = n2[0]) !== "-" && t3 !== "+" || (t3 === "-" && (i3 = -1), t3 = (n2 = n2.slice(1))[0]), n2 === "0" ? 0 : t3 === "0" ? n2[1] === "b" ? i3 * parseInt(n2.slice(2), 2) : n2[1] === "x" ? i3 * parseInt(n2, 16) : i3 * parseInt(n2, 8) : n2.indexOf(":") !== -1 ? (n2.split(":").forEach(function(e4) {
            o2.unshift(parseInt(e4, 10));
          }), n2 = 0, r2 = 1, o2.forEach(function(e4) {
            n2 += e4 * r2, r2 *= 60;
          }), i3 * n2) : i3 * parseInt(n2, 10);
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Number]" && e3 % 1 == 0 && !n.isNegativeZero(e3);
        }, represent: { binary: function(e3) {
          return e3 >= 0 ? "0b" + e3.toString(2) : "-0b" + e3.toString(2).slice(1);
        }, octal: function(e3) {
          return e3 >= 0 ? "0" + e3.toString(8) : "-0" + e3.toString(8).slice(1);
        }, decimal: function(e3) {
          return e3.toString(10);
        }, hexadecimal: function(e3) {
          return e3 >= 0 ? "0x" + e3.toString(16).toUpperCase() : "-0x" + e3.toString(16).toUpperCase().slice(1);
        } }, defaultStyle: "decimal", styleAliases: { binary: [2, "bin"], octal: [8, "oct"], decimal: [10, "dec"], hexadecimal: [16, "hex"] } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(10), o = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
        var a3 = /^[-+]?[0-9]+e/;
        e2.exports = new i2("tag:yaml.org,2002:float", { kind: "scalar", resolve: function(e3) {
          return e3 !== null && !(!o.test(e3) || e3[e3.length - 1] === "_");
        }, construct: function(e3) {
          var t3, r2, n2, i3;
          return r2 = (t3 = e3.replace(/_/g, "").toLowerCase())[0] === "-" ? -1 : 1, i3 = [], "+-".indexOf(t3[0]) >= 0 && (t3 = t3.slice(1)), t3 === ".inf" ? r2 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : t3 === ".nan" ? NaN : t3.indexOf(":") >= 0 ? (t3.split(":").forEach(function(e4) {
            i3.unshift(parseFloat(e4, 10));
          }), t3 = 0, n2 = 1, i3.forEach(function(e4) {
            t3 += e4 * n2, n2 *= 60;
          }), r2 * t3) : r2 * parseFloat(t3, 10);
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Number]" && (e3 % 1 != 0 || n.isNegativeZero(e3));
        }, represent: function(e3, t3) {
          var r2;
          if (isNaN(e3))
            switch (t3) {
              case "lowercase":
                return ".nan";
              case "uppercase":
                return ".NAN";
              case "camelcase":
                return ".NaN";
            }
          else if (Number.POSITIVE_INFINITY === e3)
            switch (t3) {
              case "lowercase":
                return ".inf";
              case "uppercase":
                return ".INF";
              case "camelcase":
                return ".Inf";
            }
          else if (Number.NEGATIVE_INFINITY === e3)
            switch (t3) {
              case "lowercase":
                return "-.inf";
              case "uppercase":
                return "-.INF";
              case "camelcase":
                return "-.Inf";
            }
          else if (n.isNegativeZero(e3))
            return "-0.0";
          return r2 = e3.toString(10), a3.test(r2) ? r2.replace("e", ".e") : r2;
        }, defaultStyle: "lowercase" });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"), o = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
        e2.exports = new n("tag:yaml.org,2002:timestamp", { kind: "scalar", resolve: function(e3) {
          return e3 !== null && (i2.exec(e3) !== null || o.exec(e3) !== null);
        }, construct: function(e3) {
          var t3, r2, n2, a3, s3, u2, l, c2, h3 = 0, p = null;
          if ((t3 = i2.exec(e3)) === null && (t3 = o.exec(e3)), t3 === null)
            throw new Error("Date resolve error");
          if (r2 = +t3[1], n2 = +t3[2] - 1, a3 = +t3[3], !t3[4])
            return new Date(Date.UTC(r2, n2, a3));
          if (s3 = +t3[4], u2 = +t3[5], l = +t3[6], t3[7]) {
            for (h3 = t3[7].slice(0, 3); h3.length < 3; )
              h3 += "0";
            h3 = +h3;
          }
          return t3[9] && (p = 6e4 * (60 * +t3[10] + +(t3[11] || 0)), t3[9] === "-" && (p = -p)), c2 = new Date(Date.UTC(r2, n2, a3, s3, u2, l, h3)), p && c2.setTime(c2.getTime() - p), c2;
        }, instanceOf: Date, represent: function(e3) {
          return e3.toISOString();
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:merge", { kind: "scalar", resolve: function(e3) {
          return e3 === "<<" || e3 === null;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n;
        try {
          n = r(145).Buffer;
        } catch (e3) {
        }
        var i2 = r(10), o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
        e2.exports = new i2("tag:yaml.org,2002:binary", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          var t3, r2, n2 = 0, i3 = e3.length, a3 = o;
          for (r2 = 0; r2 < i3; r2++)
            if (!((t3 = a3.indexOf(e3.charAt(r2))) > 64)) {
              if (t3 < 0)
                return false;
              n2 += 6;
            }
          return n2 % 8 == 0;
        }, construct: function(e3) {
          var t3, r2, i3 = e3.replace(/[\r\n=]/g, ""), a3 = i3.length, s3 = o, u2 = 0, l = [];
          for (t3 = 0; t3 < a3; t3++)
            t3 % 4 == 0 && t3 && (l.push(u2 >> 16 & 255), l.push(u2 >> 8 & 255), l.push(255 & u2)), u2 = u2 << 6 | s3.indexOf(i3.charAt(t3));
          return (r2 = a3 % 4 * 6) === 0 ? (l.push(u2 >> 16 & 255), l.push(u2 >> 8 & 255), l.push(255 & u2)) : r2 === 18 ? (l.push(u2 >> 10 & 255), l.push(u2 >> 2 & 255)) : r2 === 12 && l.push(u2 >> 4 & 255), n ? n.from ? n.from(l) : new n(l) : l;
        }, predicate: function(e3) {
          return n && n.isBuffer(e3);
        }, represent: function(e3) {
          var t3, r2, n2 = "", i3 = 0, a3 = e3.length, s3 = o;
          for (t3 = 0; t3 < a3; t3++)
            t3 % 3 == 0 && t3 && (n2 += s3[i3 >> 18 & 63], n2 += s3[i3 >> 12 & 63], n2 += s3[i3 >> 6 & 63], n2 += s3[63 & i3]), i3 = (i3 << 8) + e3[t3];
          return (r2 = a3 % 3) === 0 ? (n2 += s3[i3 >> 18 & 63], n2 += s3[i3 >> 12 & 63], n2 += s3[i3 >> 6 & 63], n2 += s3[63 & i3]) : r2 === 2 ? (n2 += s3[i3 >> 10 & 63], n2 += s3[i3 >> 4 & 63], n2 += s3[i3 << 2 & 63], n2 += s3[64]) : r2 === 1 && (n2 += s3[i3 >> 2 & 63], n2 += s3[i3 << 4 & 63], n2 += s3[64], n2 += s3[64]), n2;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = Object.prototype.hasOwnProperty, o = Object.prototype.toString;
        e2.exports = new n("tag:yaml.org,2002:omap", { kind: "sequence", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3, r2, n2, a3, s3, u2 = [], l = e3;
          for (t3 = 0, r2 = l.length; t3 < r2; t3 += 1) {
            if (n2 = l[t3], s3 = false, o.call(n2) !== "[object Object]")
              return false;
            for (a3 in n2)
              if (i2.call(n2, a3)) {
                if (s3)
                  return false;
                s3 = true;
              }
            if (!s3)
              return false;
            if (u2.indexOf(a3) !== -1)
              return false;
            u2.push(a3);
          }
          return true;
        }, construct: function(e3) {
          return e3 !== null ? e3 : [];
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = Object.prototype.toString;
        e2.exports = new n("tag:yaml.org,2002:pairs", { kind: "sequence", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3, r2, n2, o, a3, s3 = e3;
          for (a3 = new Array(s3.length), t3 = 0, r2 = s3.length; t3 < r2; t3 += 1) {
            if (n2 = s3[t3], i2.call(n2) !== "[object Object]")
              return false;
            if ((o = Object.keys(n2)).length !== 1)
              return false;
            a3[t3] = [o[0], n2[o[0]]];
          }
          return true;
        }, construct: function(e3) {
          if (e3 === null)
            return [];
          var t3, r2, n2, i3, o, a3 = e3;
          for (o = new Array(a3.length), t3 = 0, r2 = a3.length; t3 < r2; t3 += 1)
            n2 = a3[t3], i3 = Object.keys(n2), o[t3] = [i3[0], n2[i3[0]]];
          return o;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = Object.prototype.hasOwnProperty;
        e2.exports = new n("tag:yaml.org,2002:set", { kind: "mapping", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3, r2 = e3;
          for (t3 in r2)
            if (i2.call(r2, t3) && r2[t3] !== null)
              return false;
          return true;
        }, construct: function(e3) {
          return e3 !== null ? e3 : {};
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:js/undefined", { kind: "scalar", resolve: function() {
          return true;
        }, construct: function() {
        }, predicate: function(e3) {
          return e3 === void 0;
        }, represent: function() {
          return "";
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:js/regexp", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          if (e3.length === 0)
            return false;
          var t3 = e3, r2 = /\/([gim]*)$/.exec(e3), n2 = "";
          if (t3[0] === "/") {
            if (r2 && (n2 = r2[1]), n2.length > 3)
              return false;
            if (t3[t3.length - n2.length - 1] !== "/")
              return false;
          }
          return true;
        }, construct: function(e3) {
          var t3 = e3, r2 = /\/([gim]*)$/.exec(e3), n2 = "";
          return t3[0] === "/" && (r2 && (n2 = r2[1]), t3 = t3.slice(1, t3.length - n2.length - 1)), new RegExp(t3, n2);
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object RegExp]";
        }, represent: function(e3) {
          var t3 = "/" + e3.source + "/";
          return e3.global && (t3 += "g"), e3.multiline && (t3 += "m"), e3.ignoreCase && (t3 += "i"), t3;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n;
        try {
          n = r(302);
        } catch (e3) {
          typeof window != "undefined" && (n = window.esprima);
        }
        var i2 = r(10);
        e2.exports = new i2("tag:yaml.org,2002:js/function", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          try {
            var t3 = "(" + e3 + ")", r2 = n.parse(t3, { range: true });
            return r2.type === "Program" && r2.body.length === 1 && r2.body[0].type === "ExpressionStatement" && (r2.body[0].expression.type === "ArrowFunctionExpression" || r2.body[0].expression.type === "FunctionExpression");
          } catch (e4) {
            return false;
          }
        }, construct: function(e3) {
          var t3, r2 = "(" + e3 + ")", i3 = n.parse(r2, { range: true }), o = [];
          if (i3.type !== "Program" || i3.body.length !== 1 || i3.body[0].type !== "ExpressionStatement" || i3.body[0].expression.type !== "ArrowFunctionExpression" && i3.body[0].expression.type !== "FunctionExpression")
            throw new Error("Failed to resolve function");
          return i3.body[0].expression.params.forEach(function(e4) {
            o.push(e4.name);
          }), t3 = i3.body[0].expression.body.range, i3.body[0].expression.body.type === "BlockStatement" ? new Function(o, r2.slice(t3[0] + 1, t3[1] - 1)) : new Function(o, "return " + r2.slice(t3[0], t3[1]));
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Function]";
        }, represent: function(e3) {
          return e3.toString();
        } });
      }, function(e2, t2, r) {
        var n;
        n = function() {
          return function(e3) {
            var t3 = {};
            function r2(n2) {
              if (t3[n2])
                return t3[n2].exports;
              var i2 = t3[n2] = { exports: {}, id: n2, loaded: false };
              return e3[n2].call(i2.exports, i2, i2.exports, r2), i2.loaded = true, i2.exports;
            }
            return r2.m = e3, r2.c = t3, r2.p = "", r2(0);
          }([function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(1), i2 = r2(3), o = r2(8), a3 = r2(15);
            function s3(e4, t4, r3) {
              var a4 = null, s4 = function(e5, t5) {
                r3 && r3(e5, t5), a4 && a4.visit(e5, t5);
              }, u3 = typeof r3 == "function" ? s4 : null, l = false;
              if (t4) {
                l = typeof t4.comment == "boolean" && t4.comment;
                var c2 = typeof t4.attachComment == "boolean" && t4.attachComment;
                (l || c2) && ((a4 = new n2.CommentHandler()).attach = c2, t4.comment = true, u3 = s4);
              }
              var h3, p = false;
              t4 && typeof t4.sourceType == "string" && (p = t4.sourceType === "module"), h3 = t4 && typeof t4.jsx == "boolean" && t4.jsx ? new i2.JSXParser(e4, t4, u3) : new o.Parser(e4, t4, u3);
              var f = p ? h3.parseModule() : h3.parseScript();
              return l && a4 && (f.comments = a4.comments), h3.config.tokens && (f.tokens = h3.tokens), h3.config.tolerant && (f.errors = h3.errorHandler.errors), f;
            }
            t3.parse = s3, t3.parseModule = function(e4, t4, r3) {
              var n3 = t4 || {};
              return n3.sourceType = "module", s3(e4, n3, r3);
            }, t3.parseScript = function(e4, t4, r3) {
              var n3 = t4 || {};
              return n3.sourceType = "script", s3(e4, n3, r3);
            }, t3.tokenize = function(e4, t4, r3) {
              var n3, i3 = new a3.Tokenizer(e4, t4);
              n3 = [];
              try {
                for (; ; ) {
                  var o2 = i3.getNextToken();
                  if (!o2)
                    break;
                  r3 && (o2 = r3(o2)), n3.push(o2);
                }
              } catch (e5) {
                i3.errorHandler.tolerate(e5);
              }
              return i3.errorHandler.tolerant && (n3.errors = i3.errors()), n3;
            };
            var u2 = r2(2);
            t3.Syntax = u2.Syntax, t3.version = "4.0.1";
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(2), i2 = function() {
              function e4() {
                this.attach = false, this.comments = [], this.stack = [], this.leading = [], this.trailing = [];
              }
              return e4.prototype.insertInnerComments = function(e5, t4) {
                if (e5.type === n2.Syntax.BlockStatement && e5.body.length === 0) {
                  for (var r3 = [], i3 = this.leading.length - 1; i3 >= 0; --i3) {
                    var o = this.leading[i3];
                    t4.end.offset >= o.start && (r3.unshift(o.comment), this.leading.splice(i3, 1), this.trailing.splice(i3, 1));
                  }
                  r3.length && (e5.innerComments = r3);
                }
              }, e4.prototype.findTrailingComments = function(e5) {
                var t4 = [];
                if (this.trailing.length > 0) {
                  for (var r3 = this.trailing.length - 1; r3 >= 0; --r3) {
                    var n3 = this.trailing[r3];
                    n3.start >= e5.end.offset && t4.unshift(n3.comment);
                  }
                  return this.trailing.length = 0, t4;
                }
                var i3 = this.stack[this.stack.length - 1];
                if (i3 && i3.node.trailingComments) {
                  var o = i3.node.trailingComments[0];
                  o && o.range[0] >= e5.end.offset && (t4 = i3.node.trailingComments, delete i3.node.trailingComments);
                }
                return t4;
              }, e4.prototype.findLeadingComments = function(e5) {
                for (var t4, r3 = []; this.stack.length > 0 && ((o = this.stack[this.stack.length - 1]) && o.start >= e5.start.offset); )
                  t4 = o.node, this.stack.pop();
                if (t4) {
                  for (var n3 = (t4.leadingComments ? t4.leadingComments.length : 0) - 1; n3 >= 0; --n3) {
                    var i3 = t4.leadingComments[n3];
                    i3.range[1] <= e5.start.offset && (r3.unshift(i3), t4.leadingComments.splice(n3, 1));
                  }
                  return t4.leadingComments && t4.leadingComments.length === 0 && delete t4.leadingComments, r3;
                }
                for (n3 = this.leading.length - 1; n3 >= 0; --n3) {
                  var o;
                  (o = this.leading[n3]).start <= e5.start.offset && (r3.unshift(o.comment), this.leading.splice(n3, 1));
                }
                return r3;
              }, e4.prototype.visitNode = function(e5, t4) {
                if (!(e5.type === n2.Syntax.Program && e5.body.length > 0)) {
                  this.insertInnerComments(e5, t4);
                  var r3 = this.findTrailingComments(t4), i3 = this.findLeadingComments(t4);
                  i3.length > 0 && (e5.leadingComments = i3), r3.length > 0 && (e5.trailingComments = r3), this.stack.push({ node: e5, start: t4.start.offset });
                }
              }, e4.prototype.visitComment = function(e5, t4) {
                var r3 = e5.type[0] === "L" ? "Line" : "Block", n3 = { type: r3, value: e5.value };
                if (e5.range && (n3.range = e5.range), e5.loc && (n3.loc = e5.loc), this.comments.push(n3), this.attach) {
                  var i3 = { comment: { type: r3, value: e5.value, range: [t4.start.offset, t4.end.offset] }, start: t4.start.offset };
                  e5.loc && (i3.comment.loc = e5.loc), e5.type = r3, this.leading.push(i3), this.trailing.push(i3);
                }
              }, e4.prototype.visit = function(e5, t4) {
                e5.type === "LineComment" || e5.type === "BlockComment" ? this.visitComment(e5, t4) : this.attach && this.visitNode(e5, t4);
              }, e4;
            }();
            t3.CommentHandler = i2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.Syntax = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DoWhileStatement: "DoWhileStatement", DebuggerStatement: "DebuggerStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForOfStatement: "ForOfStatement", ForInStatement: "ForInStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchCase: "SwitchCase", SwitchStatement: "SwitchStatement", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" };
          }, function(e3, t3, r2) {
            "use strict";
            var n2, i2 = this && this.__extends || (n2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
              e4.__proto__ = t4;
            } || function(e4, t4) {
              for (var r3 in t4)
                t4.hasOwnProperty(r3) && (e4[r3] = t4[r3]);
            }, function(e4, t4) {
              function r3() {
                this.constructor = e4;
              }
              n2(e4, t4), e4.prototype = t4 === null ? Object.create(t4) : (r3.prototype = t4.prototype, new r3());
            });
            Object.defineProperty(t3, "__esModule", { value: true });
            var o = r2(4), a3 = r2(5), s3 = r2(6), u2 = r2(7), l = r2(8), c2 = r2(13), h3 = r2(14);
            function p(e4) {
              var t4;
              switch (e4.type) {
                case s3.JSXSyntax.JSXIdentifier:
                  t4 = e4.name;
                  break;
                case s3.JSXSyntax.JSXNamespacedName:
                  var r3 = e4;
                  t4 = p(r3.namespace) + ":" + p(r3.name);
                  break;
                case s3.JSXSyntax.JSXMemberExpression:
                  var n3 = e4;
                  t4 = p(n3.object) + "." + p(n3.property);
              }
              return t4;
            }
            c2.TokenName[100] = "JSXIdentifier", c2.TokenName[101] = "JSXText";
            var f = function(e4) {
              function t4(t5, r3, n3) {
                return e4.call(this, t5, r3, n3) || this;
              }
              return i2(t4, e4), t4.prototype.parsePrimaryExpression = function() {
                return this.match("<") ? this.parseJSXRoot() : e4.prototype.parsePrimaryExpression.call(this);
              }, t4.prototype.startJSX = function() {
                this.scanner.index = this.startMarker.index, this.scanner.lineNumber = this.startMarker.line, this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
              }, t4.prototype.finishJSX = function() {
                this.nextToken();
              }, t4.prototype.reenterJSX = function() {
                this.startJSX(), this.expectJSX("}"), this.config.tokens && this.tokens.pop();
              }, t4.prototype.createJSXNode = function() {
                return this.collectComments(), { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t4.prototype.createJSXChildNode = function() {
                return { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t4.prototype.scanXHTMLEntity = function(e5) {
                for (var t5 = "&", r3 = true, n3 = false, i3 = false, a4 = false; !this.scanner.eof() && r3 && !n3; ) {
                  var s4 = this.scanner.source[this.scanner.index];
                  if (s4 === e5)
                    break;
                  if (n3 = s4 === ";", t5 += s4, ++this.scanner.index, !n3)
                    switch (t5.length) {
                      case 2:
                        i3 = s4 === "#";
                        break;
                      case 3:
                        i3 && (r3 = (a4 = s4 === "x") || o.Character.isDecimalDigit(s4.charCodeAt(0)), i3 = i3 && !a4);
                        break;
                      default:
                        r3 = (r3 = r3 && !(i3 && !o.Character.isDecimalDigit(s4.charCodeAt(0)))) && !(a4 && !o.Character.isHexDigit(s4.charCodeAt(0)));
                    }
                }
                if (r3 && n3 && t5.length > 2) {
                  var u3 = t5.substr(1, t5.length - 2);
                  i3 && u3.length > 1 ? t5 = String.fromCharCode(parseInt(u3.substr(1), 10)) : a4 && u3.length > 2 ? t5 = String.fromCharCode(parseInt("0" + u3.substr(1), 16)) : i3 || a4 || !h3.XHTMLEntities[u3] || (t5 = h3.XHTMLEntities[u3]);
                }
                return t5;
              }, t4.prototype.lexJSX = function() {
                var e5 = this.scanner.source.charCodeAt(this.scanner.index);
                if (e5 === 60 || e5 === 62 || e5 === 47 || e5 === 58 || e5 === 61 || e5 === 123 || e5 === 125)
                  return { type: 7, value: s4 = this.scanner.source[this.scanner.index++], lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index - 1, end: this.scanner.index };
                if (e5 === 34 || e5 === 39) {
                  for (var t5 = this.scanner.index, r3 = this.scanner.source[this.scanner.index++], n3 = ""; !this.scanner.eof() && (u3 = this.scanner.source[this.scanner.index++]) !== r3; )
                    n3 += u3 === "&" ? this.scanXHTMLEntity(r3) : u3;
                  return { type: 8, value: n3, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t5, end: this.scanner.index };
                }
                if (e5 === 46) {
                  var i3 = this.scanner.source.charCodeAt(this.scanner.index + 1), a4 = this.scanner.source.charCodeAt(this.scanner.index + 2), s4 = i3 === 46 && a4 === 46 ? "..." : ".";
                  return t5 = this.scanner.index, this.scanner.index += s4.length, { type: 7, value: s4, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t5, end: this.scanner.index };
                }
                if (e5 === 96)
                  return { type: 10, value: "", lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index, end: this.scanner.index };
                if (o.Character.isIdentifierStart(e5) && e5 !== 92) {
                  for (t5 = this.scanner.index, ++this.scanner.index; !this.scanner.eof(); ) {
                    var u3 = this.scanner.source.charCodeAt(this.scanner.index);
                    if (o.Character.isIdentifierPart(u3) && u3 !== 92)
                      ++this.scanner.index;
                    else {
                      if (u3 !== 45)
                        break;
                      ++this.scanner.index;
                    }
                  }
                  return { type: 100, value: this.scanner.source.slice(t5, this.scanner.index), lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t5, end: this.scanner.index };
                }
                return this.scanner.lex();
              }, t4.prototype.nextJSXToken = function() {
                this.collectComments(), this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                var e5 = this.lexJSX();
                return this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.config.tokens && this.tokens.push(this.convertToken(e5)), e5;
              }, t4.prototype.nextJSXText = function() {
                this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                for (var e5 = this.scanner.index, t5 = ""; !this.scanner.eof(); ) {
                  var r3 = this.scanner.source[this.scanner.index];
                  if (r3 === "{" || r3 === "<")
                    break;
                  ++this.scanner.index, t5 += r3, o.Character.isLineTerminator(r3.charCodeAt(0)) && (++this.scanner.lineNumber, r3 === "\r" && this.scanner.source[this.scanner.index] === "\n" && ++this.scanner.index, this.scanner.lineStart = this.scanner.index);
                }
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                var n3 = { type: 101, value: t5, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: e5, end: this.scanner.index };
                return t5.length > 0 && this.config.tokens && this.tokens.push(this.convertToken(n3)), n3;
              }, t4.prototype.peekJSXToken = function() {
                var e5 = this.scanner.saveState();
                this.scanner.scanComments();
                var t5 = this.lexJSX();
                return this.scanner.restoreState(e5), t5;
              }, t4.prototype.expectJSX = function(e5) {
                var t5 = this.nextJSXToken();
                t5.type === 7 && t5.value === e5 || this.throwUnexpectedToken(t5);
              }, t4.prototype.matchJSX = function(e5) {
                var t5 = this.peekJSXToken();
                return t5.type === 7 && t5.value === e5;
              }, t4.prototype.parseJSXIdentifier = function() {
                var e5 = this.createJSXNode(), t5 = this.nextJSXToken();
                return t5.type !== 100 && this.throwUnexpectedToken(t5), this.finalize(e5, new a3.JSXIdentifier(t5.value));
              }, t4.prototype.parseJSXElementName = function() {
                var e5 = this.createJSXNode(), t5 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var r3 = t5;
                  this.expectJSX(":");
                  var n3 = this.parseJSXIdentifier();
                  t5 = this.finalize(e5, new a3.JSXNamespacedName(r3, n3));
                } else if (this.matchJSX("."))
                  for (; this.matchJSX("."); ) {
                    var i3 = t5;
                    this.expectJSX(".");
                    var o2 = this.parseJSXIdentifier();
                    t5 = this.finalize(e5, new a3.JSXMemberExpression(i3, o2));
                  }
                return t5;
              }, t4.prototype.parseJSXAttributeName = function() {
                var e5, t5 = this.createJSXNode(), r3 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var n3 = r3;
                  this.expectJSX(":");
                  var i3 = this.parseJSXIdentifier();
                  e5 = this.finalize(t5, new a3.JSXNamespacedName(n3, i3));
                } else
                  e5 = r3;
                return e5;
              }, t4.prototype.parseJSXStringLiteralAttribute = function() {
                var e5 = this.createJSXNode(), t5 = this.nextJSXToken();
                t5.type !== 8 && this.throwUnexpectedToken(t5);
                var r3 = this.getTokenRaw(t5);
                return this.finalize(e5, new u2.Literal(t5.value, r3));
              }, t4.prototype.parseJSXExpressionAttribute = function() {
                var e5 = this.createJSXNode();
                this.expectJSX("{"), this.finishJSX(), this.match("}") && this.tolerateError("JSX attributes must only be assigned a non-empty expression");
                var t5 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e5, new a3.JSXExpressionContainer(t5));
              }, t4.prototype.parseJSXAttributeValue = function() {
                return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
              }, t4.prototype.parseJSXNameValueAttribute = function() {
                var e5 = this.createJSXNode(), t5 = this.parseJSXAttributeName(), r3 = null;
                return this.matchJSX("=") && (this.expectJSX("="), r3 = this.parseJSXAttributeValue()), this.finalize(e5, new a3.JSXAttribute(t5, r3));
              }, t4.prototype.parseJSXSpreadAttribute = function() {
                var e5 = this.createJSXNode();
                this.expectJSX("{"), this.expectJSX("..."), this.finishJSX();
                var t5 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e5, new a3.JSXSpreadAttribute(t5));
              }, t4.prototype.parseJSXAttributes = function() {
                for (var e5 = []; !this.matchJSX("/") && !this.matchJSX(">"); ) {
                  var t5 = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                  e5.push(t5);
                }
                return e5;
              }, t4.prototype.parseJSXOpeningElement = function() {
                var e5 = this.createJSXNode();
                this.expectJSX("<");
                var t5 = this.parseJSXElementName(), r3 = this.parseJSXAttributes(), n3 = this.matchJSX("/");
                return n3 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e5, new a3.JSXOpeningElement(t5, n3, r3));
              }, t4.prototype.parseJSXBoundaryElement = function() {
                var e5 = this.createJSXNode();
                if (this.expectJSX("<"), this.matchJSX("/")) {
                  this.expectJSX("/");
                  var t5 = this.parseJSXElementName();
                  return this.expectJSX(">"), this.finalize(e5, new a3.JSXClosingElement(t5));
                }
                var r3 = this.parseJSXElementName(), n3 = this.parseJSXAttributes(), i3 = this.matchJSX("/");
                return i3 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e5, new a3.JSXOpeningElement(r3, i3, n3));
              }, t4.prototype.parseJSXEmptyExpression = function() {
                var e5 = this.createJSXChildNode();
                return this.collectComments(), this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.finalize(e5, new a3.JSXEmptyExpression());
              }, t4.prototype.parseJSXExpressionContainer = function() {
                var e5, t5 = this.createJSXNode();
                return this.expectJSX("{"), this.matchJSX("}") ? (e5 = this.parseJSXEmptyExpression(), this.expectJSX("}")) : (this.finishJSX(), e5 = this.parseAssignmentExpression(), this.reenterJSX()), this.finalize(t5, new a3.JSXExpressionContainer(e5));
              }, t4.prototype.parseJSXChildren = function() {
                for (var e5 = []; !this.scanner.eof(); ) {
                  var t5 = this.createJSXChildNode(), r3 = this.nextJSXText();
                  if (r3.start < r3.end) {
                    var n3 = this.getTokenRaw(r3), i3 = this.finalize(t5, new a3.JSXText(r3.value, n3));
                    e5.push(i3);
                  }
                  if (this.scanner.source[this.scanner.index] !== "{")
                    break;
                  var o2 = this.parseJSXExpressionContainer();
                  e5.push(o2);
                }
                return e5;
              }, t4.prototype.parseComplexJSXElement = function(e5) {
                for (var t5 = []; !this.scanner.eof(); ) {
                  e5.children = e5.children.concat(this.parseJSXChildren());
                  var r3 = this.createJSXChildNode(), n3 = this.parseJSXBoundaryElement();
                  if (n3.type === s3.JSXSyntax.JSXOpeningElement) {
                    var i3 = n3;
                    if (i3.selfClosing) {
                      var o2 = this.finalize(r3, new a3.JSXElement(i3, [], null));
                      e5.children.push(o2);
                    } else
                      t5.push(e5), e5 = { node: r3, opening: i3, closing: null, children: [] };
                  }
                  if (n3.type === s3.JSXSyntax.JSXClosingElement) {
                    e5.closing = n3;
                    var u3 = p(e5.opening.name);
                    if (u3 !== p(e5.closing.name) && this.tolerateError("Expected corresponding JSX closing tag for %0", u3), !(t5.length > 0))
                      break;
                    o2 = this.finalize(e5.node, new a3.JSXElement(e5.opening, e5.children, e5.closing)), (e5 = t5[t5.length - 1]).children.push(o2), t5.pop();
                  }
                }
                return e5;
              }, t4.prototype.parseJSXElement = function() {
                var e5 = this.createJSXNode(), t5 = this.parseJSXOpeningElement(), r3 = [], n3 = null;
                if (!t5.selfClosing) {
                  var i3 = this.parseComplexJSXElement({ node: e5, opening: t5, closing: n3, children: r3 });
                  r3 = i3.children, n3 = i3.closing;
                }
                return this.finalize(e5, new a3.JSXElement(t5, r3, n3));
              }, t4.prototype.parseJSXRoot = function() {
                this.config.tokens && this.tokens.pop(), this.startJSX();
                var e5 = this.parseJSXElement();
                return this.finishJSX(), e5;
              }, t4.prototype.isStartOfExpression = function() {
                return e4.prototype.isStartOfExpression.call(this) || this.match("<");
              }, t4;
            }(l.Parser);
            t3.JSXParser = f;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var r2 = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ };
            t3.Character = { fromCodePoint: function(e4) {
              return e4 < 65536 ? String.fromCharCode(e4) : String.fromCharCode(55296 + (e4 - 65536 >> 10)) + String.fromCharCode(56320 + (e4 - 65536 & 1023));
            }, isWhiteSpace: function(e4) {
              return e4 === 32 || e4 === 9 || e4 === 11 || e4 === 12 || e4 === 160 || e4 >= 5760 && [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(e4) >= 0;
            }, isLineTerminator: function(e4) {
              return e4 === 10 || e4 === 13 || e4 === 8232 || e4 === 8233;
            }, isIdentifierStart: function(e4) {
              return e4 === 36 || e4 === 95 || e4 >= 65 && e4 <= 90 || e4 >= 97 && e4 <= 122 || e4 === 92 || e4 >= 128 && r2.NonAsciiIdentifierStart.test(t3.Character.fromCodePoint(e4));
            }, isIdentifierPart: function(e4) {
              return e4 === 36 || e4 === 95 || e4 >= 65 && e4 <= 90 || e4 >= 97 && e4 <= 122 || e4 >= 48 && e4 <= 57 || e4 === 92 || e4 >= 128 && r2.NonAsciiIdentifierPart.test(t3.Character.fromCodePoint(e4));
            }, isDecimalDigit: function(e4) {
              return e4 >= 48 && e4 <= 57;
            }, isHexDigit: function(e4) {
              return e4 >= 48 && e4 <= 57 || e4 >= 65 && e4 <= 70 || e4 >= 97 && e4 <= 102;
            }, isOctalDigit: function(e4) {
              return e4 >= 48 && e4 <= 55;
            } };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(6), i2 = function(e4) {
              this.type = n2.JSXSyntax.JSXClosingElement, this.name = e4;
            };
            t3.JSXClosingElement = i2;
            var o = function(e4, t4, r3) {
              this.type = n2.JSXSyntax.JSXElement, this.openingElement = e4, this.children = t4, this.closingElement = r3;
            };
            t3.JSXElement = o;
            var a3 = function() {
              this.type = n2.JSXSyntax.JSXEmptyExpression;
            };
            t3.JSXEmptyExpression = a3;
            var s3 = function(e4) {
              this.type = n2.JSXSyntax.JSXExpressionContainer, this.expression = e4;
            };
            t3.JSXExpressionContainer = s3;
            var u2 = function(e4) {
              this.type = n2.JSXSyntax.JSXIdentifier, this.name = e4;
            };
            t3.JSXIdentifier = u2;
            var l = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXMemberExpression, this.object = e4, this.property = t4;
            };
            t3.JSXMemberExpression = l;
            var c2 = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXAttribute, this.name = e4, this.value = t4;
            };
            t3.JSXAttribute = c2;
            var h3 = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXNamespacedName, this.namespace = e4, this.name = t4;
            };
            t3.JSXNamespacedName = h3;
            var p = function(e4, t4, r3) {
              this.type = n2.JSXSyntax.JSXOpeningElement, this.name = e4, this.selfClosing = t4, this.attributes = r3;
            };
            t3.JSXOpeningElement = p;
            var f = function(e4) {
              this.type = n2.JSXSyntax.JSXSpreadAttribute, this.argument = e4;
            };
            t3.JSXSpreadAttribute = f;
            var d3 = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXText, this.value = e4, this.raw = t4;
            };
            t3.JSXText = d3;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.JSXSyntax = { JSXAttribute: "JSXAttribute", JSXClosingElement: "JSXClosingElement", JSXElement: "JSXElement", JSXEmptyExpression: "JSXEmptyExpression", JSXExpressionContainer: "JSXExpressionContainer", JSXIdentifier: "JSXIdentifier", JSXMemberExpression: "JSXMemberExpression", JSXNamespacedName: "JSXNamespacedName", JSXOpeningElement: "JSXOpeningElement", JSXSpreadAttribute: "JSXSpreadAttribute", JSXText: "JSXText" };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(2), i2 = function(e4) {
              this.type = n2.Syntax.ArrayExpression, this.elements = e4;
            };
            t3.ArrayExpression = i2;
            var o = function(e4) {
              this.type = n2.Syntax.ArrayPattern, this.elements = e4;
            };
            t3.ArrayPattern = o;
            var a3 = function(e4, t4, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e4, this.body = t4, this.generator = false, this.expression = r3, this.async = false;
            };
            t3.ArrowFunctionExpression = a3;
            var s3 = function(e4, t4, r3) {
              this.type = n2.Syntax.AssignmentExpression, this.operator = e4, this.left = t4, this.right = r3;
            };
            t3.AssignmentExpression = s3;
            var u2 = function(e4, t4) {
              this.type = n2.Syntax.AssignmentPattern, this.left = e4, this.right = t4;
            };
            t3.AssignmentPattern = u2;
            var l = function(e4, t4, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e4, this.body = t4, this.generator = false, this.expression = r3, this.async = true;
            };
            t3.AsyncArrowFunctionExpression = l;
            var c2 = function(e4, t4, r3) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e4, this.params = t4, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t3.AsyncFunctionDeclaration = c2;
            var h3 = function(e4, t4, r3) {
              this.type = n2.Syntax.FunctionExpression, this.id = e4, this.params = t4, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t3.AsyncFunctionExpression = h3;
            var p = function(e4) {
              this.type = n2.Syntax.AwaitExpression, this.argument = e4;
            };
            t3.AwaitExpression = p;
            var f = function(e4, t4, r3) {
              var i3 = e4 === "||" || e4 === "&&";
              this.type = i3 ? n2.Syntax.LogicalExpression : n2.Syntax.BinaryExpression, this.operator = e4, this.left = t4, this.right = r3;
            };
            t3.BinaryExpression = f;
            var d3 = function(e4) {
              this.type = n2.Syntax.BlockStatement, this.body = e4;
            };
            t3.BlockStatement = d3;
            var m3 = function(e4) {
              this.type = n2.Syntax.BreakStatement, this.label = e4;
            };
            t3.BreakStatement = m3;
            var y3 = function(e4, t4) {
              this.type = n2.Syntax.CallExpression, this.callee = e4, this.arguments = t4;
            };
            t3.CallExpression = y3;
            var v = function(e4, t4) {
              this.type = n2.Syntax.CatchClause, this.param = e4, this.body = t4;
            };
            t3.CatchClause = v;
            var _ = function(e4) {
              this.type = n2.Syntax.ClassBody, this.body = e4;
            };
            t3.ClassBody = _;
            var g = function(e4, t4, r3) {
              this.type = n2.Syntax.ClassDeclaration, this.id = e4, this.superClass = t4, this.body = r3;
            };
            t3.ClassDeclaration = g;
            var b2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ClassExpression, this.id = e4, this.superClass = t4, this.body = r3;
            };
            t3.ClassExpression = b2;
            var x2 = function(e4, t4) {
              this.type = n2.Syntax.MemberExpression, this.computed = true, this.object = e4, this.property = t4;
            };
            t3.ComputedMemberExpression = x2;
            var w2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ConditionalExpression, this.test = e4, this.consequent = t4, this.alternate = r3;
            };
            t3.ConditionalExpression = w2;
            var E2 = function(e4) {
              this.type = n2.Syntax.ContinueStatement, this.label = e4;
            };
            t3.ContinueStatement = E2;
            var D2 = function() {
              this.type = n2.Syntax.DebuggerStatement;
            };
            t3.DebuggerStatement = D2;
            var S3 = function(e4, t4) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e4, this.directive = t4;
            };
            t3.Directive = S3;
            var C = function(e4, t4) {
              this.type = n2.Syntax.DoWhileStatement, this.body = e4, this.test = t4;
            };
            t3.DoWhileStatement = C;
            var A = function() {
              this.type = n2.Syntax.EmptyStatement;
            };
            t3.EmptyStatement = A;
            var N = function(e4) {
              this.type = n2.Syntax.ExportAllDeclaration, this.source = e4;
            };
            t3.ExportAllDeclaration = N;
            var T2 = function(e4) {
              this.type = n2.Syntax.ExportDefaultDeclaration, this.declaration = e4;
            };
            t3.ExportDefaultDeclaration = T2;
            var O2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ExportNamedDeclaration, this.declaration = e4, this.specifiers = t4, this.source = r3;
            };
            t3.ExportNamedDeclaration = O2;
            var F = function(e4, t4) {
              this.type = n2.Syntax.ExportSpecifier, this.exported = t4, this.local = e4;
            };
            t3.ExportSpecifier = F;
            var k2 = function(e4) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e4;
            };
            t3.ExpressionStatement = k2;
            var P = function(e4, t4, r3) {
              this.type = n2.Syntax.ForInStatement, this.left = e4, this.right = t4, this.body = r3, this.each = false;
            };
            t3.ForInStatement = P;
            var I2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ForOfStatement, this.left = e4, this.right = t4, this.body = r3;
            };
            t3.ForOfStatement = I2;
            var L2 = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.ForStatement, this.init = e4, this.test = t4, this.update = r3, this.body = i3;
            };
            t3.ForStatement = L2;
            var M3 = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e4, this.params = t4, this.body = r3, this.generator = i3, this.expression = false, this.async = false;
            };
            t3.FunctionDeclaration = M3;
            var B2 = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.FunctionExpression, this.id = e4, this.params = t4, this.body = r3, this.generator = i3, this.expression = false, this.async = false;
            };
            t3.FunctionExpression = B2;
            var j = function(e4) {
              this.type = n2.Syntax.Identifier, this.name = e4;
            };
            t3.Identifier = j;
            var R2 = function(e4, t4, r3) {
              this.type = n2.Syntax.IfStatement, this.test = e4, this.consequent = t4, this.alternate = r3;
            };
            t3.IfStatement = R2;
            var z2 = function(e4, t4) {
              this.type = n2.Syntax.ImportDeclaration, this.specifiers = e4, this.source = t4;
            };
            t3.ImportDeclaration = z2;
            var U = function(e4) {
              this.type = n2.Syntax.ImportDefaultSpecifier, this.local = e4;
            };
            t3.ImportDefaultSpecifier = U;
            var G2 = function(e4) {
              this.type = n2.Syntax.ImportNamespaceSpecifier, this.local = e4;
            };
            t3.ImportNamespaceSpecifier = G2;
            var X2 = function(e4, t4) {
              this.type = n2.Syntax.ImportSpecifier, this.local = e4, this.imported = t4;
            };
            t3.ImportSpecifier = X2;
            var q2 = function(e4, t4) {
              this.type = n2.Syntax.LabeledStatement, this.label = e4, this.body = t4;
            };
            t3.LabeledStatement = q2;
            var W = function(e4, t4) {
              this.type = n2.Syntax.Literal, this.value = e4, this.raw = t4;
            };
            t3.Literal = W;
            var H3 = function(e4, t4) {
              this.type = n2.Syntax.MetaProperty, this.meta = e4, this.property = t4;
            };
            t3.MetaProperty = H3;
            var J = function(e4, t4, r3, i3, o2) {
              this.type = n2.Syntax.MethodDefinition, this.key = e4, this.computed = t4, this.value = r3, this.kind = i3, this.static = o2;
            };
            t3.MethodDefinition = J;
            var Y2 = function(e4) {
              this.type = n2.Syntax.Program, this.body = e4, this.sourceType = "module";
            };
            t3.Module = Y2;
            var V = function(e4, t4) {
              this.type = n2.Syntax.NewExpression, this.callee = e4, this.arguments = t4;
            };
            t3.NewExpression = V;
            var K2 = function(e4) {
              this.type = n2.Syntax.ObjectExpression, this.properties = e4;
            };
            t3.ObjectExpression = K2;
            var $ = function(e4) {
              this.type = n2.Syntax.ObjectPattern, this.properties = e4;
            };
            t3.ObjectPattern = $;
            var Q2 = function(e4, t4, r3, i3, o2, a4) {
              this.type = n2.Syntax.Property, this.key = t4, this.computed = r3, this.value = i3, this.kind = e4, this.method = o2, this.shorthand = a4;
            };
            t3.Property = Q2;
            var Z = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.Literal, this.value = e4, this.raw = t4, this.regex = { pattern: r3, flags: i3 };
            };
            t3.RegexLiteral = Z;
            var ee = function(e4) {
              this.type = n2.Syntax.RestElement, this.argument = e4;
            };
            t3.RestElement = ee;
            var te = function(e4) {
              this.type = n2.Syntax.ReturnStatement, this.argument = e4;
            };
            t3.ReturnStatement = te;
            var re = function(e4) {
              this.type = n2.Syntax.Program, this.body = e4, this.sourceType = "script";
            };
            t3.Script = re;
            var ne = function(e4) {
              this.type = n2.Syntax.SequenceExpression, this.expressions = e4;
            };
            t3.SequenceExpression = ne;
            var ie = function(e4) {
              this.type = n2.Syntax.SpreadElement, this.argument = e4;
            };
            t3.SpreadElement = ie;
            var oe = function(e4, t4) {
              this.type = n2.Syntax.MemberExpression, this.computed = false, this.object = e4, this.property = t4;
            };
            t3.StaticMemberExpression = oe;
            var ae = function() {
              this.type = n2.Syntax.Super;
            };
            t3.Super = ae;
            var se = function(e4, t4) {
              this.type = n2.Syntax.SwitchCase, this.test = e4, this.consequent = t4;
            };
            t3.SwitchCase = se;
            var ue = function(e4, t4) {
              this.type = n2.Syntax.SwitchStatement, this.discriminant = e4, this.cases = t4;
            };
            t3.SwitchStatement = ue;
            var le = function(e4, t4) {
              this.type = n2.Syntax.TaggedTemplateExpression, this.tag = e4, this.quasi = t4;
            };
            t3.TaggedTemplateExpression = le;
            var ce = function(e4, t4) {
              this.type = n2.Syntax.TemplateElement, this.value = e4, this.tail = t4;
            };
            t3.TemplateElement = ce;
            var he = function(e4, t4) {
              this.type = n2.Syntax.TemplateLiteral, this.quasis = e4, this.expressions = t4;
            };
            t3.TemplateLiteral = he;
            var pe = function() {
              this.type = n2.Syntax.ThisExpression;
            };
            t3.ThisExpression = pe;
            var fe = function(e4) {
              this.type = n2.Syntax.ThrowStatement, this.argument = e4;
            };
            t3.ThrowStatement = fe;
            var de = function(e4, t4, r3) {
              this.type = n2.Syntax.TryStatement, this.block = e4, this.handler = t4, this.finalizer = r3;
            };
            t3.TryStatement = de;
            var me = function(e4, t4) {
              this.type = n2.Syntax.UnaryExpression, this.operator = e4, this.argument = t4, this.prefix = true;
            };
            t3.UnaryExpression = me;
            var ye = function(e4, t4, r3) {
              this.type = n2.Syntax.UpdateExpression, this.operator = e4, this.argument = t4, this.prefix = r3;
            };
            t3.UpdateExpression = ye;
            var ve = function(e4, t4) {
              this.type = n2.Syntax.VariableDeclaration, this.declarations = e4, this.kind = t4;
            };
            t3.VariableDeclaration = ve;
            var _e = function(e4, t4) {
              this.type = n2.Syntax.VariableDeclarator, this.id = e4, this.init = t4;
            };
            t3.VariableDeclarator = _e;
            var ge = function(e4, t4) {
              this.type = n2.Syntax.WhileStatement, this.test = e4, this.body = t4;
            };
            t3.WhileStatement = ge;
            var be = function(e4, t4) {
              this.type = n2.Syntax.WithStatement, this.object = e4, this.body = t4;
            };
            t3.WithStatement = be;
            var xe = function(e4, t4) {
              this.type = n2.Syntax.YieldExpression, this.argument = e4, this.delegate = t4;
            };
            t3.YieldExpression = xe;
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(9), i2 = r2(10), o = r2(11), a3 = r2(7), s3 = r2(12), u2 = r2(2), l = r2(13), c2 = function() {
              function e4(e5, t4, r3) {
                t4 === void 0 && (t4 = {}), this.config = { range: typeof t4.range == "boolean" && t4.range, loc: typeof t4.loc == "boolean" && t4.loc, source: null, tokens: typeof t4.tokens == "boolean" && t4.tokens, comment: typeof t4.comment == "boolean" && t4.comment, tolerant: typeof t4.tolerant == "boolean" && t4.tolerant }, this.config.loc && t4.source && t4.source !== null && (this.config.source = String(t4.source)), this.delegate = r3, this.errorHandler = new i2.ErrorHandler(), this.errorHandler.tolerant = this.config.tolerant, this.scanner = new s3.Scanner(e5, this.errorHandler), this.scanner.trackComment = this.config.comment, this.operatorPrecedence = { ")": 0, ";": 0, ",": 0, "=": 0, "]": 0, "||": 1, "&&": 2, "|": 3, "^": 4, "&": 5, "==": 6, "!=": 6, "===": 6, "!==": 6, "<": 7, ">": 7, "<=": 7, ">=": 7, "<<": 8, ">>": 8, ">>>": 8, "+": 9, "-": 9, "*": 11, "/": 11, "%": 11 }, this.lookahead = { type: 2, value: "", lineNumber: this.scanner.lineNumber, lineStart: 0, start: 0, end: 0 }, this.hasLineTerminator = false, this.context = { isModule: false, await: false, allowIn: true, allowStrictDirective: true, allowYield: true, firstCoverInitializedNameError: null, isAssignmentTarget: false, isBindingElement: false, inFunctionBody: false, inIteration: false, inSwitch: false, labelSet: {}, strict: false }, this.tokens = [], this.startMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.lastMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.nextToken(), this.lastMarker = { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }
              return e4.prototype.throwError = function(e5) {
                for (var t4 = [], r3 = 1; r3 < arguments.length; r3++)
                  t4[r3 - 1] = arguments[r3];
                var i3 = Array.prototype.slice.call(arguments, 1), o2 = e5.replace(/%(\d)/g, function(e6, t5) {
                  return n2.assert(t5 < i3.length, "Message reference must be in range"), i3[t5];
                }), a4 = this.lastMarker.index, s4 = this.lastMarker.line, u3 = this.lastMarker.column + 1;
                throw this.errorHandler.createError(a4, s4, u3, o2);
              }, e4.prototype.tolerateError = function(e5) {
                for (var t4 = [], r3 = 1; r3 < arguments.length; r3++)
                  t4[r3 - 1] = arguments[r3];
                var i3 = Array.prototype.slice.call(arguments, 1), o2 = e5.replace(/%(\d)/g, function(e6, t5) {
                  return n2.assert(t5 < i3.length, "Message reference must be in range"), i3[t5];
                }), a4 = this.lastMarker.index, s4 = this.scanner.lineNumber, u3 = this.lastMarker.column + 1;
                this.errorHandler.tolerateError(a4, s4, u3, o2);
              }, e4.prototype.unexpectedTokenError = function(e5, t4) {
                var r3, n3 = t4 || o.Messages.UnexpectedToken;
                if (e5 ? (t4 || (n3 = e5.type === 2 ? o.Messages.UnexpectedEOS : e5.type === 3 ? o.Messages.UnexpectedIdentifier : e5.type === 6 ? o.Messages.UnexpectedNumber : e5.type === 8 ? o.Messages.UnexpectedString : e5.type === 10 ? o.Messages.UnexpectedTemplate : o.Messages.UnexpectedToken, e5.type === 4 && (this.scanner.isFutureReservedWord(e5.value) ? n3 = o.Messages.UnexpectedReserved : this.context.strict && this.scanner.isStrictModeReservedWord(e5.value) && (n3 = o.Messages.StrictReservedWord))), r3 = e5.value) : r3 = "ILLEGAL", n3 = n3.replace("%0", r3), e5 && typeof e5.lineNumber == "number") {
                  var i3 = e5.start, a4 = e5.lineNumber, s4 = this.lastMarker.index - this.lastMarker.column, u3 = e5.start - s4 + 1;
                  return this.errorHandler.createError(i3, a4, u3, n3);
                }
                return i3 = this.lastMarker.index, a4 = this.lastMarker.line, u3 = this.lastMarker.column + 1, this.errorHandler.createError(i3, a4, u3, n3);
              }, e4.prototype.throwUnexpectedToken = function(e5, t4) {
                throw this.unexpectedTokenError(e5, t4);
              }, e4.prototype.tolerateUnexpectedToken = function(e5, t4) {
                this.errorHandler.tolerate(this.unexpectedTokenError(e5, t4));
              }, e4.prototype.collectComments = function() {
                if (this.config.comment) {
                  var e5 = this.scanner.scanComments();
                  if (e5.length > 0 && this.delegate)
                    for (var t4 = 0; t4 < e5.length; ++t4) {
                      var r3 = e5[t4], n3 = void 0;
                      n3 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: this.scanner.source.slice(r3.slice[0], r3.slice[1]) }, this.config.range && (n3.range = r3.range), this.config.loc && (n3.loc = r3.loc);
                      var i3 = { start: { line: r3.loc.start.line, column: r3.loc.start.column, offset: r3.range[0] }, end: { line: r3.loc.end.line, column: r3.loc.end.column, offset: r3.range[1] } };
                      this.delegate(n3, i3);
                    }
                } else
                  this.scanner.scanComments();
              }, e4.prototype.getTokenRaw = function(e5) {
                return this.scanner.source.slice(e5.start, e5.end);
              }, e4.prototype.convertToken = function(e5) {
                var t4 = { type: l.TokenName[e5.type], value: this.getTokenRaw(e5) };
                if (this.config.range && (t4.range = [e5.start, e5.end]), this.config.loc && (t4.loc = { start: { line: this.startMarker.line, column: this.startMarker.column }, end: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart } }), e5.type === 9) {
                  var r3 = e5.pattern, n3 = e5.flags;
                  t4.regex = { pattern: r3, flags: n3 };
                }
                return t4;
              }, e4.prototype.nextToken = function() {
                var e5 = this.lookahead;
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.collectComments(), this.scanner.index !== this.startMarker.index && (this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart);
                var t4 = this.scanner.lex();
                return this.hasLineTerminator = e5.lineNumber !== t4.lineNumber, t4 && this.context.strict && t4.type === 3 && this.scanner.isStrictModeReservedWord(t4.value) && (t4.type = 4), this.lookahead = t4, this.config.tokens && t4.type !== 2 && this.tokens.push(this.convertToken(t4)), e5;
              }, e4.prototype.nextRegexToken = function() {
                this.collectComments();
                var e5 = this.scanner.scanRegExp();
                return this.config.tokens && (this.tokens.pop(), this.tokens.push(this.convertToken(e5))), this.lookahead = e5, this.nextToken(), e5;
              }, e4.prototype.createNode = function() {
                return { index: this.startMarker.index, line: this.startMarker.line, column: this.startMarker.column };
              }, e4.prototype.startNode = function(e5, t4) {
                t4 === void 0 && (t4 = 0);
                var r3 = e5.start - e5.lineStart, n3 = e5.lineNumber;
                return r3 < 0 && (r3 += t4, n3--), { index: e5.start, line: n3, column: r3 };
              }, e4.prototype.finalize = function(e5, t4) {
                if (this.config.range && (t4.range = [e5.index, this.lastMarker.index]), this.config.loc && (t4.loc = { start: { line: e5.line, column: e5.column }, end: { line: this.lastMarker.line, column: this.lastMarker.column } }, this.config.source && (t4.loc.source = this.config.source)), this.delegate) {
                  var r3 = { start: { line: e5.line, column: e5.column, offset: e5.index }, end: { line: this.lastMarker.line, column: this.lastMarker.column, offset: this.lastMarker.index } };
                  this.delegate(t4, r3);
                }
                return t4;
              }, e4.prototype.expect = function(e5) {
                var t4 = this.nextToken();
                t4.type === 7 && t4.value === e5 || this.throwUnexpectedToken(t4);
              }, e4.prototype.expectCommaSeparator = function() {
                if (this.config.tolerant) {
                  var e5 = this.lookahead;
                  e5.type === 7 && e5.value === "," ? this.nextToken() : e5.type === 7 && e5.value === ";" ? (this.nextToken(), this.tolerateUnexpectedToken(e5)) : this.tolerateUnexpectedToken(e5, o.Messages.UnexpectedToken);
                } else
                  this.expect(",");
              }, e4.prototype.expectKeyword = function(e5) {
                var t4 = this.nextToken();
                t4.type === 4 && t4.value === e5 || this.throwUnexpectedToken(t4);
              }, e4.prototype.match = function(e5) {
                return this.lookahead.type === 7 && this.lookahead.value === e5;
              }, e4.prototype.matchKeyword = function(e5) {
                return this.lookahead.type === 4 && this.lookahead.value === e5;
              }, e4.prototype.matchContextualKeyword = function(e5) {
                return this.lookahead.type === 3 && this.lookahead.value === e5;
              }, e4.prototype.matchAssign = function() {
                if (this.lookahead.type !== 7)
                  return false;
                var e5 = this.lookahead.value;
                return e5 === "=" || e5 === "*=" || e5 === "**=" || e5 === "/=" || e5 === "%=" || e5 === "+=" || e5 === "-=" || e5 === "<<=" || e5 === ">>=" || e5 === ">>>=" || e5 === "&=" || e5 === "^=" || e5 === "|=";
              }, e4.prototype.isolateCoverGrammar = function(e5) {
                var t4 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i3 = e5.call(this);
                return this.context.firstCoverInitializedNameError !== null && this.throwUnexpectedToken(this.context.firstCoverInitializedNameError), this.context.isBindingElement = t4, this.context.isAssignmentTarget = r3, this.context.firstCoverInitializedNameError = n3, i3;
              }, e4.prototype.inheritCoverGrammar = function(e5) {
                var t4 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i3 = e5.call(this);
                return this.context.isBindingElement = this.context.isBindingElement && t4, this.context.isAssignmentTarget = this.context.isAssignmentTarget && r3, this.context.firstCoverInitializedNameError = n3 || this.context.firstCoverInitializedNameError, i3;
              }, e4.prototype.consumeSemicolon = function() {
                this.match(";") ? this.nextToken() : this.hasLineTerminator || (this.lookahead.type === 2 || this.match("}") || this.throwUnexpectedToken(this.lookahead), this.lastMarker.index = this.startMarker.index, this.lastMarker.line = this.startMarker.line, this.lastMarker.column = this.startMarker.column);
              }, e4.prototype.parsePrimaryExpression = function() {
                var e5, t4, r3, n3 = this.createNode();
                switch (this.lookahead.type) {
                  case 3:
                    (this.context.isModule || this.context.await) && this.lookahead.value === "await" && this.tolerateUnexpectedToken(this.lookahead), e5 = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(n3, new a3.Identifier(this.nextToken().value));
                    break;
                  case 6:
                  case 8:
                    this.context.strict && this.lookahead.octal && this.tolerateUnexpectedToken(this.lookahead, o.Messages.StrictOctalLiteral), this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t4 = this.nextToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.Literal(t4.value, r3));
                    break;
                  case 1:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t4 = this.nextToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.Literal(t4.value === "true", r3));
                    break;
                  case 5:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t4 = this.nextToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.Literal(null, r3));
                    break;
                  case 10:
                    e5 = this.parseTemplateLiteral();
                    break;
                  case 7:
                    switch (this.lookahead.value) {
                      case "(":
                        this.context.isBindingElement = false, e5 = this.inheritCoverGrammar(this.parseGroupExpression);
                        break;
                      case "[":
                        e5 = this.inheritCoverGrammar(this.parseArrayInitializer);
                        break;
                      case "{":
                        e5 = this.inheritCoverGrammar(this.parseObjectInitializer);
                        break;
                      case "/":
                      case "/=":
                        this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.scanner.index = this.startMarker.index, t4 = this.nextRegexToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.RegexLiteral(t4.regex, r3, t4.pattern, t4.flags));
                        break;
                      default:
                        e5 = this.throwUnexpectedToken(this.nextToken());
                    }
                    break;
                  case 4:
                    !this.context.strict && this.context.allowYield && this.matchKeyword("yield") ? e5 = this.parseIdentifierName() : !this.context.strict && this.matchKeyword("let") ? e5 = this.finalize(n3, new a3.Identifier(this.nextToken().value)) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.matchKeyword("function") ? e5 = this.parseFunctionExpression() : this.matchKeyword("this") ? (this.nextToken(), e5 = this.finalize(n3, new a3.ThisExpression())) : e5 = this.matchKeyword("class") ? this.parseClassExpression() : this.throwUnexpectedToken(this.nextToken()));
                    break;
                  default:
                    e5 = this.throwUnexpectedToken(this.nextToken());
                }
                return e5;
              }, e4.prototype.parseSpreadElement = function() {
                var e5 = this.createNode();
                this.expect("...");
                var t4 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                return this.finalize(e5, new a3.SpreadElement(t4));
              }, e4.prototype.parseArrayInitializer = function() {
                var e5 = this.createNode(), t4 = [];
                for (this.expect("["); !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), t4.push(null);
                  else if (this.match("...")) {
                    var r3 = this.parseSpreadElement();
                    this.match("]") || (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.expect(",")), t4.push(r3);
                  } else
                    t4.push(this.inheritCoverGrammar(this.parseAssignmentExpression)), this.match("]") || this.expect(",");
                return this.expect("]"), this.finalize(e5, new a3.ArrayExpression(t4));
              }, e4.prototype.parsePropertyMethod = function(e5) {
                this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                var t4 = this.context.strict, r3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = e5.simple;
                var n3 = this.isolateCoverGrammar(this.parseFunctionSourceElements);
                return this.context.strict && e5.firstRestricted && this.tolerateUnexpectedToken(e5.firstRestricted, e5.message), this.context.strict && e5.stricted && this.tolerateUnexpectedToken(e5.stricted, e5.message), this.context.strict = t4, this.context.allowStrictDirective = r3, n3;
              }, e4.prototype.parsePropertyMethodFunction = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters(), n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, false));
              }, e4.prototype.parsePropertyMethodAsyncFunction = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield, r3 = this.context.await;
                this.context.allowYield = false, this.context.await = true;
                var n3 = this.parseFormalParameters(), i3 = this.parsePropertyMethod(n3);
                return this.context.allowYield = t4, this.context.await = r3, this.finalize(e5, new a3.AsyncFunctionExpression(null, n3.params, i3));
              }, e4.prototype.parseObjectPropertyKey = function() {
                var e5, t4 = this.createNode(), r3 = this.nextToken();
                switch (r3.type) {
                  case 8:
                  case 6:
                    this.context.strict && r3.octal && this.tolerateUnexpectedToken(r3, o.Messages.StrictOctalLiteral);
                    var n3 = this.getTokenRaw(r3);
                    e5 = this.finalize(t4, new a3.Literal(r3.value, n3));
                    break;
                  case 3:
                  case 1:
                  case 5:
                  case 4:
                    e5 = this.finalize(t4, new a3.Identifier(r3.value));
                    break;
                  case 7:
                    r3.value === "[" ? (e5 = this.isolateCoverGrammar(this.parseAssignmentExpression), this.expect("]")) : e5 = this.throwUnexpectedToken(r3);
                    break;
                  default:
                    e5 = this.throwUnexpectedToken(r3);
                }
                return e5;
              }, e4.prototype.isPropertyKey = function(e5, t4) {
                return e5.type === u2.Syntax.Identifier && e5.name === t4 || e5.type === u2.Syntax.Literal && e5.value === t4;
              }, e4.prototype.parseObjectProperty = function(e5) {
                var t4, r3 = this.createNode(), n3 = this.lookahead, i3 = null, s4 = null, u3 = false, l2 = false, c3 = false, h3 = false;
                if (n3.type === 3) {
                  var p = n3.value;
                  this.nextToken(), u3 = this.match("["), i3 = (h3 = !(this.hasLineTerminator || p !== "async" || this.match(":") || this.match("(") || this.match("*") || this.match(","))) ? this.parseObjectPropertyKey() : this.finalize(r3, new a3.Identifier(p));
                } else
                  this.match("*") ? this.nextToken() : (u3 = this.match("["), i3 = this.parseObjectPropertyKey());
                var f = this.qualifiedPropertyName(this.lookahead);
                if (n3.type === 3 && !h3 && n3.value === "get" && f)
                  t4 = "get", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), this.context.allowYield = false, s4 = this.parseGetterMethod();
                else if (n3.type === 3 && !h3 && n3.value === "set" && f)
                  t4 = "set", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseSetterMethod();
                else if (n3.type === 7 && n3.value === "*" && f)
                  t4 = "init", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseGeneratorMethod(), l2 = true;
                else if (i3 || this.throwUnexpectedToken(this.lookahead), t4 = "init", this.match(":") && !h3)
                  !u3 && this.isPropertyKey(i3, "__proto__") && (e5.value && this.tolerateError(o.Messages.DuplicateProtoProperty), e5.value = true), this.nextToken(), s4 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                else if (this.match("("))
                  s4 = h3 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true;
                else if (n3.type === 3)
                  if (p = this.finalize(r3, new a3.Identifier(n3.value)), this.match("=")) {
                    this.context.firstCoverInitializedNameError = this.lookahead, this.nextToken(), c3 = true;
                    var d3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    s4 = this.finalize(r3, new a3.AssignmentPattern(p, d3));
                  } else
                    c3 = true, s4 = p;
                else
                  this.throwUnexpectedToken(this.nextToken());
                return this.finalize(r3, new a3.Property(t4, i3, u3, s4, l2, c3));
              }, e4.prototype.parseObjectInitializer = function() {
                var e5 = this.createNode();
                this.expect("{");
                for (var t4 = [], r3 = { value: false }; !this.match("}"); )
                  t4.push(this.parseObjectProperty(r3)), this.match("}") || this.expectCommaSeparator();
                return this.expect("}"), this.finalize(e5, new a3.ObjectExpression(t4));
              }, e4.prototype.parseTemplateHead = function() {
                n2.assert(this.lookahead.head, "Template literal must start with a template head");
                var e5 = this.createNode(), t4 = this.nextToken(), r3 = t4.value, i3 = t4.cooked;
                return this.finalize(e5, new a3.TemplateElement({ raw: r3, cooked: i3 }, t4.tail));
              }, e4.prototype.parseTemplateElement = function() {
                this.lookahead.type !== 10 && this.throwUnexpectedToken();
                var e5 = this.createNode(), t4 = this.nextToken(), r3 = t4.value, n3 = t4.cooked;
                return this.finalize(e5, new a3.TemplateElement({ raw: r3, cooked: n3 }, t4.tail));
              }, e4.prototype.parseTemplateLiteral = function() {
                var e5 = this.createNode(), t4 = [], r3 = [], n3 = this.parseTemplateHead();
                for (r3.push(n3); !n3.tail; )
                  t4.push(this.parseExpression()), n3 = this.parseTemplateElement(), r3.push(n3);
                return this.finalize(e5, new a3.TemplateLiteral(r3, t4));
              }, e4.prototype.reinterpretExpressionAsPattern = function(e5) {
                switch (e5.type) {
                  case u2.Syntax.Identifier:
                  case u2.Syntax.MemberExpression:
                  case u2.Syntax.RestElement:
                  case u2.Syntax.AssignmentPattern:
                    break;
                  case u2.Syntax.SpreadElement:
                    e5.type = u2.Syntax.RestElement, this.reinterpretExpressionAsPattern(e5.argument);
                    break;
                  case u2.Syntax.ArrayExpression:
                    e5.type = u2.Syntax.ArrayPattern;
                    for (var t4 = 0; t4 < e5.elements.length; t4++)
                      e5.elements[t4] !== null && this.reinterpretExpressionAsPattern(e5.elements[t4]);
                    break;
                  case u2.Syntax.ObjectExpression:
                    for (e5.type = u2.Syntax.ObjectPattern, t4 = 0; t4 < e5.properties.length; t4++)
                      this.reinterpretExpressionAsPattern(e5.properties[t4].value);
                    break;
                  case u2.Syntax.AssignmentExpression:
                    e5.type = u2.Syntax.AssignmentPattern, delete e5.operator, this.reinterpretExpressionAsPattern(e5.left);
                }
              }, e4.prototype.parseGroupExpression = function() {
                var e5;
                if (this.expect("("), this.match(")"))
                  this.nextToken(), this.match("=>") || this.expect("=>"), e5 = { type: "ArrowParameterPlaceHolder", params: [], async: false };
                else {
                  var t4 = this.lookahead, r3 = [];
                  if (this.match("..."))
                    e5 = this.parseRestElement(r3), this.expect(")"), this.match("=>") || this.expect("=>"), e5 = { type: "ArrowParameterPlaceHolder", params: [e5], async: false };
                  else {
                    var n3 = false;
                    if (this.context.isBindingElement = true, e5 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.match(",")) {
                      var i3 = [];
                      for (this.context.isAssignmentTarget = false, i3.push(e5); this.lookahead.type !== 2 && this.match(","); ) {
                        if (this.nextToken(), this.match(")")) {
                          this.nextToken();
                          for (var o2 = 0; o2 < i3.length; o2++)
                            this.reinterpretExpressionAsPattern(i3[o2]);
                          n3 = true, e5 = { type: "ArrowParameterPlaceHolder", params: i3, async: false };
                        } else if (this.match("...")) {
                          for (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), i3.push(this.parseRestElement(r3)), this.expect(")"), this.match("=>") || this.expect("=>"), this.context.isBindingElement = false, o2 = 0; o2 < i3.length; o2++)
                            this.reinterpretExpressionAsPattern(i3[o2]);
                          n3 = true, e5 = { type: "ArrowParameterPlaceHolder", params: i3, async: false };
                        } else
                          i3.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                        if (n3)
                          break;
                      }
                      n3 || (e5 = this.finalize(this.startNode(t4), new a3.SequenceExpression(i3)));
                    }
                    if (!n3) {
                      if (this.expect(")"), this.match("=>") && (e5.type === u2.Syntax.Identifier && e5.name === "yield" && (n3 = true, e5 = { type: "ArrowParameterPlaceHolder", params: [e5], async: false }), !n3)) {
                        if (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), e5.type === u2.Syntax.SequenceExpression)
                          for (o2 = 0; o2 < e5.expressions.length; o2++)
                            this.reinterpretExpressionAsPattern(e5.expressions[o2]);
                        else
                          this.reinterpretExpressionAsPattern(e5);
                        e5 = { type: "ArrowParameterPlaceHolder", params: e5.type === u2.Syntax.SequenceExpression ? e5.expressions : [e5], async: false };
                      }
                      this.context.isBindingElement = false;
                    }
                  }
                }
                return e5;
              }, e4.prototype.parseArguments = function() {
                this.expect("(");
                var e5 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t4 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                    if (e5.push(t4), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e5;
              }, e4.prototype.isIdentifierName = function(e5) {
                return e5.type === 3 || e5.type === 4 || e5.type === 1 || e5.type === 5;
              }, e4.prototype.parseIdentifierName = function() {
                var e5 = this.createNode(), t4 = this.nextToken();
                return this.isIdentifierName(t4) || this.throwUnexpectedToken(t4), this.finalize(e5, new a3.Identifier(t4.value));
              }, e4.prototype.parseNewExpression = function() {
                var e5, t4 = this.createNode(), r3 = this.parseIdentifierName();
                if (n2.assert(r3.name === "new", "New expression must start with `new`"), this.match("."))
                  if (this.nextToken(), this.lookahead.type === 3 && this.context.inFunctionBody && this.lookahead.value === "target") {
                    var i3 = this.parseIdentifierName();
                    e5 = new a3.MetaProperty(r3, i3);
                  } else
                    this.throwUnexpectedToken(this.lookahead);
                else {
                  var o2 = this.isolateCoverGrammar(this.parseLeftHandSideExpression), s4 = this.match("(") ? this.parseArguments() : [];
                  e5 = new a3.NewExpression(o2, s4), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return this.finalize(t4, e5);
              }, e4.prototype.parseAsyncArgument = function() {
                var e5 = this.parseAssignmentExpression();
                return this.context.firstCoverInitializedNameError = null, e5;
              }, e4.prototype.parseAsyncArguments = function() {
                this.expect("(");
                var e5 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t4 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                    if (e5.push(t4), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e5;
              }, e4.prototype.parseLeftHandSideExpressionAllowCall = function() {
                var e5, t4 = this.lookahead, r3 = this.matchContextualKeyword("async"), n3 = this.context.allowIn;
                for (this.context.allowIn = true, this.matchKeyword("super") && this.context.inFunctionBody ? (e5 = this.createNode(), this.nextToken(), e5 = this.finalize(e5, new a3.Super()), this.match("(") || this.match(".") || this.match("[") || this.throwUnexpectedToken(this.lookahead)) : e5 = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match(".")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect(".");
                    var i3 = this.parseIdentifierName();
                    e5 = this.finalize(this.startNode(t4), new a3.StaticMemberExpression(e5, i3));
                  } else if (this.match("(")) {
                    var o2 = r3 && t4.lineNumber === this.lookahead.lineNumber;
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = false;
                    var s4 = o2 ? this.parseAsyncArguments() : this.parseArguments();
                    if (e5 = this.finalize(this.startNode(t4), new a3.CallExpression(e5, s4)), o2 && this.match("=>")) {
                      for (var u3 = 0; u3 < s4.length; ++u3)
                        this.reinterpretExpressionAsPattern(s4[u3]);
                      e5 = { type: "ArrowParameterPlaceHolder", params: s4, async: true };
                    }
                  } else if (this.match("["))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("["), i3 = this.isolateCoverGrammar(this.parseExpression), this.expect("]"), e5 = this.finalize(this.startNode(t4), new a3.ComputedMemberExpression(e5, i3));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var l2 = this.parseTemplateLiteral();
                    e5 = this.finalize(this.startNode(t4), new a3.TaggedTemplateExpression(e5, l2));
                  }
                return this.context.allowIn = n3, e5;
              }, e4.prototype.parseSuper = function() {
                var e5 = this.createNode();
                return this.expectKeyword("super"), this.match("[") || this.match(".") || this.throwUnexpectedToken(this.lookahead), this.finalize(e5, new a3.Super());
              }, e4.prototype.parseLeftHandSideExpression = function() {
                n2.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
                for (var e5 = this.startNode(this.lookahead), t4 = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match("[")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("[");
                    var r3 = this.isolateCoverGrammar(this.parseExpression);
                    this.expect("]"), t4 = this.finalize(e5, new a3.ComputedMemberExpression(t4, r3));
                  } else if (this.match("."))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("."), r3 = this.parseIdentifierName(), t4 = this.finalize(e5, new a3.StaticMemberExpression(t4, r3));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var i3 = this.parseTemplateLiteral();
                    t4 = this.finalize(e5, new a3.TaggedTemplateExpression(t4, i3));
                  }
                return t4;
              }, e4.prototype.parseUpdateExpression = function() {
                var e5, t4 = this.lookahead;
                if (this.match("++") || this.match("--")) {
                  var r3 = this.startNode(t4), n3 = this.nextToken();
                  e5 = this.inheritCoverGrammar(this.parseUnaryExpression), this.context.strict && e5.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(e5.name) && this.tolerateError(o.Messages.StrictLHSPrefix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment);
                  var i3 = true;
                  e5 = this.finalize(r3, new a3.UpdateExpression(n3.value, e5, i3)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else if (e5 = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall), !this.hasLineTerminator && this.lookahead.type === 7 && (this.match("++") || this.match("--"))) {
                  this.context.strict && e5.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(e5.name) && this.tolerateError(o.Messages.StrictLHSPostfix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var s4 = this.nextToken().value;
                  i3 = false, e5 = this.finalize(this.startNode(t4), new a3.UpdateExpression(s4, e5, i3));
                }
                return e5;
              }, e4.prototype.parseAwaitExpression = function() {
                var e5 = this.createNode();
                this.nextToken();
                var t4 = this.parseUnaryExpression();
                return this.finalize(e5, new a3.AwaitExpression(t4));
              }, e4.prototype.parseUnaryExpression = function() {
                var e5;
                if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                  var t4 = this.startNode(this.lookahead), r3 = this.nextToken();
                  e5 = this.inheritCoverGrammar(this.parseUnaryExpression), e5 = this.finalize(t4, new a3.UnaryExpression(r3.value, e5)), this.context.strict && e5.operator === "delete" && e5.argument.type === u2.Syntax.Identifier && this.tolerateError(o.Messages.StrictDelete), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else
                  e5 = this.context.await && this.matchContextualKeyword("await") ? this.parseAwaitExpression() : this.parseUpdateExpression();
                return e5;
              }, e4.prototype.parseExponentiationExpression = function() {
                var e5 = this.lookahead, t4 = this.inheritCoverGrammar(this.parseUnaryExpression);
                if (t4.type !== u2.Syntax.UnaryExpression && this.match("**")) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var r3 = t4, n3 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                  t4 = this.finalize(this.startNode(e5), new a3.BinaryExpression("**", r3, n3));
                }
                return t4;
              }, e4.prototype.binaryPrecedence = function(e5) {
                var t4 = e5.value;
                return e5.type === 7 ? this.operatorPrecedence[t4] || 0 : e5.type === 4 && (t4 === "instanceof" || this.context.allowIn && t4 === "in") ? 7 : 0;
              }, e4.prototype.parseBinaryExpression = function() {
                var e5 = this.lookahead, t4 = this.inheritCoverGrammar(this.parseExponentiationExpression), r3 = this.lookahead, n3 = this.binaryPrecedence(r3);
                if (n3 > 0) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  for (var i3 = [e5, this.lookahead], o2 = t4, s4 = this.isolateCoverGrammar(this.parseExponentiationExpression), u3 = [o2, r3.value, s4], l2 = [n3]; !((n3 = this.binaryPrecedence(this.lookahead)) <= 0); ) {
                    for (; u3.length > 2 && n3 <= l2[l2.length - 1]; ) {
                      s4 = u3.pop();
                      var c3 = u3.pop();
                      l2.pop(), o2 = u3.pop(), i3.pop();
                      var h3 = this.startNode(i3[i3.length - 1]);
                      u3.push(this.finalize(h3, new a3.BinaryExpression(c3, o2, s4)));
                    }
                    u3.push(this.nextToken().value), l2.push(n3), i3.push(this.lookahead), u3.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                  }
                  var p = u3.length - 1;
                  t4 = u3[p];
                  for (var f = i3.pop(); p > 1; ) {
                    var d3 = i3.pop(), m3 = f && f.lineStart;
                    h3 = this.startNode(d3, m3), c3 = u3[p - 1], t4 = this.finalize(h3, new a3.BinaryExpression(c3, u3[p - 2], t4)), p -= 2, f = d3;
                  }
                }
                return t4;
              }, e4.prototype.parseConditionalExpression = function() {
                var e5 = this.lookahead, t4 = this.inheritCoverGrammar(this.parseBinaryExpression);
                if (this.match("?")) {
                  this.nextToken();
                  var r3 = this.context.allowIn;
                  this.context.allowIn = true;
                  var n3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowIn = r3, this.expect(":");
                  var i3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  t4 = this.finalize(this.startNode(e5), new a3.ConditionalExpression(t4, n3, i3)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return t4;
              }, e4.prototype.checkPatternParam = function(e5, t4) {
                switch (t4.type) {
                  case u2.Syntax.Identifier:
                    this.validateParam(e5, t4, t4.name);
                    break;
                  case u2.Syntax.RestElement:
                    this.checkPatternParam(e5, t4.argument);
                    break;
                  case u2.Syntax.AssignmentPattern:
                    this.checkPatternParam(e5, t4.left);
                    break;
                  case u2.Syntax.ArrayPattern:
                    for (var r3 = 0; r3 < t4.elements.length; r3++)
                      t4.elements[r3] !== null && this.checkPatternParam(e5, t4.elements[r3]);
                    break;
                  case u2.Syntax.ObjectPattern:
                    for (r3 = 0; r3 < t4.properties.length; r3++)
                      this.checkPatternParam(e5, t4.properties[r3].value);
                }
                e5.simple = e5.simple && t4 instanceof a3.Identifier;
              }, e4.prototype.reinterpretAsCoverFormalsList = function(e5) {
                var t4, r3 = [e5], n3 = false;
                switch (e5.type) {
                  case u2.Syntax.Identifier:
                    break;
                  case "ArrowParameterPlaceHolder":
                    r3 = e5.params, n3 = e5.async;
                    break;
                  default:
                    return null;
                }
                t4 = { simple: true, paramSet: {} };
                for (var i3 = 0; i3 < r3.length; ++i3)
                  (a4 = r3[i3]).type === u2.Syntax.AssignmentPattern ? a4.right.type === u2.Syntax.YieldExpression && (a4.right.argument && this.throwUnexpectedToken(this.lookahead), a4.right.type = u2.Syntax.Identifier, a4.right.name = "yield", delete a4.right.argument, delete a4.right.delegate) : n3 && a4.type === u2.Syntax.Identifier && a4.name === "await" && this.throwUnexpectedToken(this.lookahead), this.checkPatternParam(t4, a4), r3[i3] = a4;
                if (this.context.strict || !this.context.allowYield)
                  for (i3 = 0; i3 < r3.length; ++i3) {
                    var a4;
                    (a4 = r3[i3]).type === u2.Syntax.YieldExpression && this.throwUnexpectedToken(this.lookahead);
                  }
                if (t4.message === o.Messages.StrictParamDupe) {
                  var s4 = this.context.strict ? t4.stricted : t4.firstRestricted;
                  this.throwUnexpectedToken(s4, t4.message);
                }
                return { simple: t4.simple, params: r3, stricted: t4.stricted, firstRestricted: t4.firstRestricted, message: t4.message };
              }, e4.prototype.parseAssignmentExpression = function() {
                var e5;
                if (!this.context.allowYield && this.matchKeyword("yield"))
                  e5 = this.parseYieldExpression();
                else {
                  var t4 = this.lookahead, r3 = t4;
                  if (e5 = this.parseConditionalExpression(), r3.type === 3 && r3.lineNumber === this.lookahead.lineNumber && r3.value === "async" && (this.lookahead.type === 3 || this.matchKeyword("yield"))) {
                    var n3 = this.parsePrimaryExpression();
                    this.reinterpretExpressionAsPattern(n3), e5 = { type: "ArrowParameterPlaceHolder", params: [n3], async: true };
                  }
                  if (e5.type === "ArrowParameterPlaceHolder" || this.match("=>")) {
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                    var i3 = e5.async, s4 = this.reinterpretAsCoverFormalsList(e5);
                    if (s4) {
                      this.hasLineTerminator && this.tolerateUnexpectedToken(this.lookahead), this.context.firstCoverInitializedNameError = null;
                      var l2 = this.context.strict, c3 = this.context.allowStrictDirective;
                      this.context.allowStrictDirective = s4.simple;
                      var h3 = this.context.allowYield, p = this.context.await;
                      this.context.allowYield = true, this.context.await = i3;
                      var f = this.startNode(t4);
                      this.expect("=>");
                      var d3 = void 0;
                      if (this.match("{")) {
                        var m3 = this.context.allowIn;
                        this.context.allowIn = true, d3 = this.parseFunctionSourceElements(), this.context.allowIn = m3;
                      } else
                        d3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      var y3 = d3.type !== u2.Syntax.BlockStatement;
                      this.context.strict && s4.firstRestricted && this.throwUnexpectedToken(s4.firstRestricted, s4.message), this.context.strict && s4.stricted && this.tolerateUnexpectedToken(s4.stricted, s4.message), e5 = i3 ? this.finalize(f, new a3.AsyncArrowFunctionExpression(s4.params, d3, y3)) : this.finalize(f, new a3.ArrowFunctionExpression(s4.params, d3, y3)), this.context.strict = l2, this.context.allowStrictDirective = c3, this.context.allowYield = h3, this.context.await = p;
                    }
                  } else if (this.matchAssign()) {
                    if (this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.strict && e5.type === u2.Syntax.Identifier) {
                      var v = e5;
                      this.scanner.isRestrictedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictLHSAssignment), this.scanner.isStrictModeReservedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord);
                    }
                    this.match("=") ? this.reinterpretExpressionAsPattern(e5) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false);
                    var _ = (r3 = this.nextToken()).value, g = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    e5 = this.finalize(this.startNode(t4), new a3.AssignmentExpression(_, e5, g)), this.context.firstCoverInitializedNameError = null;
                  }
                }
                return e5;
              }, e4.prototype.parseExpression = function() {
                var e5 = this.lookahead, t4 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                if (this.match(",")) {
                  var r3 = [];
                  for (r3.push(t4); this.lookahead.type !== 2 && this.match(","); )
                    this.nextToken(), r3.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                  t4 = this.finalize(this.startNode(e5), new a3.SequenceExpression(r3));
                }
                return t4;
              }, e4.prototype.parseStatementListItem = function() {
                var e5;
                if (this.context.isAssignmentTarget = true, this.context.isBindingElement = true, this.lookahead.type === 4)
                  switch (this.lookahead.value) {
                    case "export":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalExportDeclaration), e5 = this.parseExportDeclaration();
                      break;
                    case "import":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalImportDeclaration), e5 = this.parseImportDeclaration();
                      break;
                    case "const":
                      e5 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "function":
                      e5 = this.parseFunctionDeclaration();
                      break;
                    case "class":
                      e5 = this.parseClassDeclaration();
                      break;
                    case "let":
                      e5 = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
                      break;
                    default:
                      e5 = this.parseStatement();
                  }
                else
                  e5 = this.parseStatement();
                return e5;
              }, e4.prototype.parseBlock = function() {
                var e5 = this.createNode();
                this.expect("{");
                for (var t4 = []; !this.match("}"); )
                  t4.push(this.parseStatementListItem());
                return this.expect("}"), this.finalize(e5, new a3.BlockStatement(t4));
              }, e4.prototype.parseLexicalBinding = function(e5, t4) {
                var r3 = this.createNode(), n3 = this.parsePattern([], e5);
                this.context.strict && n3.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(n3.name) && this.tolerateError(o.Messages.StrictVarName);
                var i3 = null;
                return e5 === "const" ? this.matchKeyword("in") || this.matchContextualKeyword("of") || (this.match("=") ? (this.nextToken(), i3 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : this.throwError(o.Messages.DeclarationMissingInitializer, "const")) : (!t4.inFor && n3.type !== u2.Syntax.Identifier || this.match("=")) && (this.expect("="), i3 = this.isolateCoverGrammar(this.parseAssignmentExpression)), this.finalize(r3, new a3.VariableDeclarator(n3, i3));
              }, e4.prototype.parseBindingList = function(e5, t4) {
                for (var r3 = [this.parseLexicalBinding(e5, t4)]; this.match(","); )
                  this.nextToken(), r3.push(this.parseLexicalBinding(e5, t4));
                return r3;
              }, e4.prototype.isLexicalDeclaration = function() {
                var e5 = this.scanner.saveState();
                this.scanner.scanComments();
                var t4 = this.scanner.lex();
                return this.scanner.restoreState(e5), t4.type === 3 || t4.type === 7 && t4.value === "[" || t4.type === 7 && t4.value === "{" || t4.type === 4 && t4.value === "let" || t4.type === 4 && t4.value === "yield";
              }, e4.prototype.parseLexicalDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.nextToken().value;
                n2.assert(r3 === "let" || r3 === "const", "Lexical declaration must be either let or const");
                var i3 = this.parseBindingList(r3, e5);
                return this.consumeSemicolon(), this.finalize(t4, new a3.VariableDeclaration(i3, r3));
              }, e4.prototype.parseBindingRestElement = function(e5, t4) {
                var r3 = this.createNode();
                this.expect("...");
                var n3 = this.parsePattern(e5, t4);
                return this.finalize(r3, new a3.RestElement(n3));
              }, e4.prototype.parseArrayPattern = function(e5, t4) {
                var r3 = this.createNode();
                this.expect("[");
                for (var n3 = []; !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), n3.push(null);
                  else {
                    if (this.match("...")) {
                      n3.push(this.parseBindingRestElement(e5, t4));
                      break;
                    }
                    n3.push(this.parsePatternWithDefault(e5, t4)), this.match("]") || this.expect(",");
                  }
                return this.expect("]"), this.finalize(r3, new a3.ArrayPattern(n3));
              }, e4.prototype.parsePropertyPattern = function(e5, t4) {
                var r3, n3, i3 = this.createNode(), o2 = false, s4 = false;
                if (this.lookahead.type === 3) {
                  var u3 = this.lookahead;
                  r3 = this.parseVariableIdentifier();
                  var l2 = this.finalize(i3, new a3.Identifier(u3.value));
                  if (this.match("=")) {
                    e5.push(u3), s4 = true, this.nextToken();
                    var c3 = this.parseAssignmentExpression();
                    n3 = this.finalize(this.startNode(u3), new a3.AssignmentPattern(l2, c3));
                  } else
                    this.match(":") ? (this.expect(":"), n3 = this.parsePatternWithDefault(e5, t4)) : (e5.push(u3), s4 = true, n3 = l2);
                } else
                  o2 = this.match("["), r3 = this.parseObjectPropertyKey(), this.expect(":"), n3 = this.parsePatternWithDefault(e5, t4);
                return this.finalize(i3, new a3.Property("init", r3, o2, n3, false, s4));
              }, e4.prototype.parseObjectPattern = function(e5, t4) {
                var r3 = this.createNode(), n3 = [];
                for (this.expect("{"); !this.match("}"); )
                  n3.push(this.parsePropertyPattern(e5, t4)), this.match("}") || this.expect(",");
                return this.expect("}"), this.finalize(r3, new a3.ObjectPattern(n3));
              }, e4.prototype.parsePattern = function(e5, t4) {
                var r3;
                return this.match("[") ? r3 = this.parseArrayPattern(e5, t4) : this.match("{") ? r3 = this.parseObjectPattern(e5, t4) : (!this.matchKeyword("let") || t4 !== "const" && t4 !== "let" || this.tolerateUnexpectedToken(this.lookahead, o.Messages.LetInLexicalBinding), e5.push(this.lookahead), r3 = this.parseVariableIdentifier(t4)), r3;
              }, e4.prototype.parsePatternWithDefault = function(e5, t4) {
                var r3 = this.lookahead, n3 = this.parsePattern(e5, t4);
                if (this.match("=")) {
                  this.nextToken();
                  var i3 = this.context.allowYield;
                  this.context.allowYield = true;
                  var o2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowYield = i3, n3 = this.finalize(this.startNode(r3), new a3.AssignmentPattern(n3, o2));
                }
                return n3;
              }, e4.prototype.parseVariableIdentifier = function(e5) {
                var t4 = this.createNode(), r3 = this.nextToken();
                return r3.type === 4 && r3.value === "yield" ? this.context.strict ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : this.context.allowYield || this.throwUnexpectedToken(r3) : r3.type !== 3 ? this.context.strict && r3.type === 4 && this.scanner.isStrictModeReservedWord(r3.value) ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : (this.context.strict || r3.value !== "let" || e5 !== "var") && this.throwUnexpectedToken(r3) : (this.context.isModule || this.context.await) && r3.type === 3 && r3.value === "await" && this.tolerateUnexpectedToken(r3), this.finalize(t4, new a3.Identifier(r3.value));
              }, e4.prototype.parseVariableDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.parsePattern([], "var");
                this.context.strict && r3.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictVarName);
                var n3 = null;
                return this.match("=") ? (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : r3.type === u2.Syntax.Identifier || e5.inFor || this.expect("="), this.finalize(t4, new a3.VariableDeclarator(r3, n3));
              }, e4.prototype.parseVariableDeclarationList = function(e5) {
                var t4 = { inFor: e5.inFor }, r3 = [];
                for (r3.push(this.parseVariableDeclaration(t4)); this.match(","); )
                  this.nextToken(), r3.push(this.parseVariableDeclaration(t4));
                return r3;
              }, e4.prototype.parseVariableStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("var");
                var t4 = this.parseVariableDeclarationList({ inFor: false });
                return this.consumeSemicolon(), this.finalize(e5, new a3.VariableDeclaration(t4, "var"));
              }, e4.prototype.parseEmptyStatement = function() {
                var e5 = this.createNode();
                return this.expect(";"), this.finalize(e5, new a3.EmptyStatement());
              }, e4.prototype.parseExpressionStatement = function() {
                var e5 = this.createNode(), t4 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e5, new a3.ExpressionStatement(t4));
              }, e4.prototype.parseIfClause = function() {
                return this.context.strict && this.matchKeyword("function") && this.tolerateError(o.Messages.StrictFunction), this.parseStatement();
              }, e4.prototype.parseIfStatement = function() {
                var e5, t4 = this.createNode(), r3 = null;
                this.expectKeyword("if"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e5 = this.finalize(this.createNode(), new a3.EmptyStatement())) : (this.expect(")"), e5 = this.parseIfClause(), this.matchKeyword("else") && (this.nextToken(), r3 = this.parseIfClause())), this.finalize(t4, new a3.IfStatement(n3, e5, r3));
              }, e4.prototype.parseDoWhileStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("do");
                var t4 = this.context.inIteration;
                this.context.inIteration = true;
                var r3 = this.parseStatement();
                this.context.inIteration = t4, this.expectKeyword("while"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? this.tolerateUnexpectedToken(this.nextToken()) : (this.expect(")"), this.match(";") && this.nextToken()), this.finalize(e5, new a3.DoWhileStatement(r3, n3));
              }, e4.prototype.parseWhileStatement = function() {
                var e5, t4 = this.createNode();
                this.expectKeyword("while"), this.expect("(");
                var r3 = this.parseExpression();
                if (!this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), e5 = this.finalize(this.createNode(), new a3.EmptyStatement());
                else {
                  this.expect(")");
                  var n3 = this.context.inIteration;
                  this.context.inIteration = true, e5 = this.parseStatement(), this.context.inIteration = n3;
                }
                return this.finalize(t4, new a3.WhileStatement(r3, e5));
              }, e4.prototype.parseForStatement = function() {
                var e5, t4, r3, n3 = null, i3 = null, s4 = null, l2 = true, c3 = this.createNode();
                if (this.expectKeyword("for"), this.expect("("), this.match(";"))
                  this.nextToken();
                else if (this.matchKeyword("var")) {
                  n3 = this.createNode(), this.nextToken();
                  var h3 = this.context.allowIn;
                  this.context.allowIn = false;
                  var p = this.parseVariableDeclarationList({ inFor: true });
                  if (this.context.allowIn = h3, p.length === 1 && this.matchKeyword("in")) {
                    var f = p[0];
                    f.init && (f.id.type === u2.Syntax.ArrayPattern || f.id.type === u2.Syntax.ObjectPattern || this.context.strict) && this.tolerateError(o.Messages.ForInOfLoopInitializer, "for-in"), n3 = this.finalize(n3, new a3.VariableDeclaration(p, "var")), this.nextToken(), e5 = n3, t4 = this.parseExpression(), n3 = null;
                  } else
                    p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a3.VariableDeclaration(p, "var")), this.nextToken(), e5 = n3, t4 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (n3 = this.finalize(n3, new a3.VariableDeclaration(p, "var")), this.expect(";"));
                } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                  n3 = this.createNode();
                  var d3 = this.nextToken().value;
                  this.context.strict || this.lookahead.value !== "in" ? (h3 = this.context.allowIn, this.context.allowIn = false, p = this.parseBindingList(d3, { inFor: true }), this.context.allowIn = h3, p.length === 1 && p[0].init === null && this.matchKeyword("in") ? (n3 = this.finalize(n3, new a3.VariableDeclaration(p, d3)), this.nextToken(), e5 = n3, t4 = this.parseExpression(), n3 = null) : p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a3.VariableDeclaration(p, d3)), this.nextToken(), e5 = n3, t4 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (this.consumeSemicolon(), n3 = this.finalize(n3, new a3.VariableDeclaration(p, d3)))) : (n3 = this.finalize(n3, new a3.Identifier(d3)), this.nextToken(), e5 = n3, t4 = this.parseExpression(), n3 = null);
                } else {
                  var m3 = this.lookahead;
                  if (h3 = this.context.allowIn, this.context.allowIn = false, n3 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.context.allowIn = h3, this.matchKeyword("in"))
                    this.context.isAssignmentTarget && n3.type !== u2.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForIn), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e5 = n3, t4 = this.parseExpression(), n3 = null;
                  else if (this.matchContextualKeyword("of"))
                    this.context.isAssignmentTarget && n3.type !== u2.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForLoop), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e5 = n3, t4 = this.parseAssignmentExpression(), n3 = null, l2 = false;
                  else {
                    if (this.match(",")) {
                      for (var y3 = [n3]; this.match(","); )
                        this.nextToken(), y3.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                      n3 = this.finalize(this.startNode(m3), new a3.SequenceExpression(y3));
                    }
                    this.expect(";");
                  }
                }
                if (e5 === void 0 && (this.match(";") || (i3 = this.parseExpression()), this.expect(";"), this.match(")") || (s4 = this.parseExpression())), !this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), r3 = this.finalize(this.createNode(), new a3.EmptyStatement());
                else {
                  this.expect(")");
                  var v = this.context.inIteration;
                  this.context.inIteration = true, r3 = this.isolateCoverGrammar(this.parseStatement), this.context.inIteration = v;
                }
                return e5 === void 0 ? this.finalize(c3, new a3.ForStatement(n3, i3, s4, r3)) : l2 ? this.finalize(c3, new a3.ForInStatement(e5, t4, r3)) : this.finalize(c3, new a3.ForOfStatement(e5, t4, r3));
              }, e4.prototype.parseContinueStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("continue");
                var t4 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier();
                  t4 = r3;
                  var n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name);
                }
                return this.consumeSemicolon(), t4 !== null || this.context.inIteration || this.throwError(o.Messages.IllegalContinue), this.finalize(e5, new a3.ContinueStatement(t4));
              }, e4.prototype.parseBreakStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("break");
                var t4 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier(), n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name), t4 = r3;
                }
                return this.consumeSemicolon(), t4 !== null || this.context.inIteration || this.context.inSwitch || this.throwError(o.Messages.IllegalBreak), this.finalize(e5, new a3.BreakStatement(t4));
              }, e4.prototype.parseReturnStatement = function() {
                this.context.inFunctionBody || this.tolerateError(o.Messages.IllegalReturn);
                var e5 = this.createNode();
                this.expectKeyword("return");
                var t4 = (this.match(";") || this.match("}") || this.hasLineTerminator || this.lookahead.type === 2) && this.lookahead.type !== 8 && this.lookahead.type !== 10 ? null : this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e5, new a3.ReturnStatement(t4));
              }, e4.prototype.parseWithStatement = function() {
                this.context.strict && this.tolerateError(o.Messages.StrictModeWith);
                var e5, t4 = this.createNode();
                this.expectKeyword("with"), this.expect("(");
                var r3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e5 = this.finalize(this.createNode(), new a3.EmptyStatement())) : (this.expect(")"), e5 = this.parseStatement()), this.finalize(t4, new a3.WithStatement(r3, e5));
              }, e4.prototype.parseSwitchCase = function() {
                var e5, t4 = this.createNode();
                this.matchKeyword("default") ? (this.nextToken(), e5 = null) : (this.expectKeyword("case"), e5 = this.parseExpression()), this.expect(":");
                for (var r3 = []; !(this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")); )
                  r3.push(this.parseStatementListItem());
                return this.finalize(t4, new a3.SwitchCase(e5, r3));
              }, e4.prototype.parseSwitchStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("switch"), this.expect("(");
                var t4 = this.parseExpression();
                this.expect(")");
                var r3 = this.context.inSwitch;
                this.context.inSwitch = true;
                var n3 = [], i3 = false;
                for (this.expect("{"); !this.match("}"); ) {
                  var s4 = this.parseSwitchCase();
                  s4.test === null && (i3 && this.throwError(o.Messages.MultipleDefaultsInSwitch), i3 = true), n3.push(s4);
                }
                return this.expect("}"), this.context.inSwitch = r3, this.finalize(e5, new a3.SwitchStatement(t4, n3));
              }, e4.prototype.parseLabelledStatement = function() {
                var e5, t4 = this.createNode(), r3 = this.parseExpression();
                if (r3.type === u2.Syntax.Identifier && this.match(":")) {
                  this.nextToken();
                  var n3 = r3, i3 = "$" + n3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, i3) && this.throwError(o.Messages.Redeclaration, "Label", n3.name), this.context.labelSet[i3] = true;
                  var s4 = void 0;
                  if (this.matchKeyword("class"))
                    this.tolerateUnexpectedToken(this.lookahead), s4 = this.parseClassDeclaration();
                  else if (this.matchKeyword("function")) {
                    var l2 = this.lookahead, c3 = this.parseFunctionDeclaration();
                    this.context.strict ? this.tolerateUnexpectedToken(l2, o.Messages.StrictFunction) : c3.generator && this.tolerateUnexpectedToken(l2, o.Messages.GeneratorInLegacyContext), s4 = c3;
                  } else
                    s4 = this.parseStatement();
                  delete this.context.labelSet[i3], e5 = new a3.LabeledStatement(n3, s4);
                } else
                  this.consumeSemicolon(), e5 = new a3.ExpressionStatement(r3);
                return this.finalize(t4, e5);
              }, e4.prototype.parseThrowStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("throw"), this.hasLineTerminator && this.throwError(o.Messages.NewlineAfterThrow);
                var t4 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e5, new a3.ThrowStatement(t4));
              }, e4.prototype.parseCatchClause = function() {
                var e5 = this.createNode();
                this.expectKeyword("catch"), this.expect("("), this.match(")") && this.throwUnexpectedToken(this.lookahead);
                for (var t4 = [], r3 = this.parsePattern(t4), n3 = {}, i3 = 0; i3 < t4.length; i3++) {
                  var s4 = "$" + t4[i3].value;
                  Object.prototype.hasOwnProperty.call(n3, s4) && this.tolerateError(o.Messages.DuplicateBinding, t4[i3].value), n3[s4] = true;
                }
                this.context.strict && r3.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictCatchVariable), this.expect(")");
                var l2 = this.parseBlock();
                return this.finalize(e5, new a3.CatchClause(r3, l2));
              }, e4.prototype.parseFinallyClause = function() {
                return this.expectKeyword("finally"), this.parseBlock();
              }, e4.prototype.parseTryStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("try");
                var t4 = this.parseBlock(), r3 = this.matchKeyword("catch") ? this.parseCatchClause() : null, n3 = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
                return r3 || n3 || this.throwError(o.Messages.NoCatchOrFinally), this.finalize(e5, new a3.TryStatement(t4, r3, n3));
              }, e4.prototype.parseDebuggerStatement = function() {
                var e5 = this.createNode();
                return this.expectKeyword("debugger"), this.consumeSemicolon(), this.finalize(e5, new a3.DebuggerStatement());
              }, e4.prototype.parseStatement = function() {
                var e5;
                switch (this.lookahead.type) {
                  case 1:
                  case 5:
                  case 6:
                  case 8:
                  case 10:
                  case 9:
                    e5 = this.parseExpressionStatement();
                    break;
                  case 7:
                    var t4 = this.lookahead.value;
                    e5 = t4 === "{" ? this.parseBlock() : t4 === "(" ? this.parseExpressionStatement() : t4 === ";" ? this.parseEmptyStatement() : this.parseExpressionStatement();
                    break;
                  case 3:
                    e5 = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                    break;
                  case 4:
                    switch (this.lookahead.value) {
                      case "break":
                        e5 = this.parseBreakStatement();
                        break;
                      case "continue":
                        e5 = this.parseContinueStatement();
                        break;
                      case "debugger":
                        e5 = this.parseDebuggerStatement();
                        break;
                      case "do":
                        e5 = this.parseDoWhileStatement();
                        break;
                      case "for":
                        e5 = this.parseForStatement();
                        break;
                      case "function":
                        e5 = this.parseFunctionDeclaration();
                        break;
                      case "if":
                        e5 = this.parseIfStatement();
                        break;
                      case "return":
                        e5 = this.parseReturnStatement();
                        break;
                      case "switch":
                        e5 = this.parseSwitchStatement();
                        break;
                      case "throw":
                        e5 = this.parseThrowStatement();
                        break;
                      case "try":
                        e5 = this.parseTryStatement();
                        break;
                      case "var":
                        e5 = this.parseVariableStatement();
                        break;
                      case "while":
                        e5 = this.parseWhileStatement();
                        break;
                      case "with":
                        e5 = this.parseWithStatement();
                        break;
                      default:
                        e5 = this.parseExpressionStatement();
                    }
                    break;
                  default:
                    e5 = this.throwUnexpectedToken(this.lookahead);
                }
                return e5;
              }, e4.prototype.parseFunctionSourceElements = function() {
                var e5 = this.createNode();
                this.expect("{");
                var t4 = this.parseDirectivePrologues(), r3 = this.context.labelSet, n3 = this.context.inIteration, i3 = this.context.inSwitch, o2 = this.context.inFunctionBody;
                for (this.context.labelSet = {}, this.context.inIteration = false, this.context.inSwitch = false, this.context.inFunctionBody = true; this.lookahead.type !== 2 && !this.match("}"); )
                  t4.push(this.parseStatementListItem());
                return this.expect("}"), this.context.labelSet = r3, this.context.inIteration = n3, this.context.inSwitch = i3, this.context.inFunctionBody = o2, this.finalize(e5, new a3.BlockStatement(t4));
              }, e4.prototype.validateParam = function(e5, t4, r3) {
                var n3 = "$" + r3;
                this.context.strict ? (this.scanner.isRestrictedWord(r3) && (e5.stricted = t4, e5.message = o.Messages.StrictParamName), Object.prototype.hasOwnProperty.call(e5.paramSet, n3) && (e5.stricted = t4, e5.message = o.Messages.StrictParamDupe)) : e5.firstRestricted || (this.scanner.isRestrictedWord(r3) ? (e5.firstRestricted = t4, e5.message = o.Messages.StrictParamName) : this.scanner.isStrictModeReservedWord(r3) ? (e5.firstRestricted = t4, e5.message = o.Messages.StrictReservedWord) : Object.prototype.hasOwnProperty.call(e5.paramSet, n3) && (e5.stricted = t4, e5.message = o.Messages.StrictParamDupe)), typeof Object.defineProperty == "function" ? Object.defineProperty(e5.paramSet, n3, { value: true, enumerable: true, writable: true, configurable: true }) : e5.paramSet[n3] = true;
              }, e4.prototype.parseRestElement = function(e5) {
                var t4 = this.createNode();
                this.expect("...");
                var r3 = this.parsePattern(e5);
                return this.match("=") && this.throwError(o.Messages.DefaultRestParameter), this.match(")") || this.throwError(o.Messages.ParameterAfterRestParameter), this.finalize(t4, new a3.RestElement(r3));
              }, e4.prototype.parseFormalParameter = function(e5) {
                for (var t4 = [], r3 = this.match("...") ? this.parseRestElement(t4) : this.parsePatternWithDefault(t4), n3 = 0; n3 < t4.length; n3++)
                  this.validateParam(e5, t4[n3], t4[n3].value);
                e5.simple = e5.simple && r3 instanceof a3.Identifier, e5.params.push(r3);
              }, e4.prototype.parseFormalParameters = function(e5) {
                var t4;
                if (t4 = { simple: true, params: [], firstRestricted: e5 }, this.expect("("), !this.match(")"))
                  for (t4.paramSet = {}; this.lookahead.type !== 2 && (this.parseFormalParameter(t4), !this.match(")")) && (this.expect(","), !this.match(")")); )
                    ;
                return this.expect(")"), { simple: t4.simple, params: t4.params, stricted: t4.stricted, firstRestricted: t4.firstRestricted, message: t4.message };
              }, e4.prototype.matchAsyncFunction = function() {
                var e5 = this.matchContextualKeyword("async");
                if (e5) {
                  var t4 = this.scanner.saveState();
                  this.scanner.scanComments();
                  var r3 = this.scanner.lex();
                  this.scanner.restoreState(t4), e5 = t4.lineNumber === r3.lineNumber && r3.type === 4 && r3.value === "function";
                }
                return e5;
              }, e4.prototype.parseFunctionDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.matchContextualKeyword("async");
                r3 && this.nextToken(), this.expectKeyword("function");
                var n3, i3 = !r3 && this.match("*");
                i3 && this.nextToken();
                var s4 = null, u3 = null;
                if (!e5 || !this.match("(")) {
                  var l2 = this.lookahead;
                  s4 = this.parseVariableIdentifier(), this.context.strict ? this.scanner.isRestrictedWord(l2.value) && this.tolerateUnexpectedToken(l2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(l2.value) ? (u3 = l2, n3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(l2.value) && (u3 = l2, n3 = o.Messages.StrictReservedWord);
                }
                var c3 = this.context.await, h3 = this.context.allowYield;
                this.context.await = r3, this.context.allowYield = !i3;
                var p = this.parseFormalParameters(u3), f = p.params, d3 = p.stricted;
                u3 = p.firstRestricted, p.message && (n3 = p.message);
                var m3 = this.context.strict, y3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = p.simple;
                var v = this.parseFunctionSourceElements();
                return this.context.strict && u3 && this.throwUnexpectedToken(u3, n3), this.context.strict && d3 && this.tolerateUnexpectedToken(d3, n3), this.context.strict = m3, this.context.allowStrictDirective = y3, this.context.await = c3, this.context.allowYield = h3, r3 ? this.finalize(t4, new a3.AsyncFunctionDeclaration(s4, f, v)) : this.finalize(t4, new a3.FunctionDeclaration(s4, f, v, i3));
              }, e4.prototype.parseFunctionExpression = function() {
                var e5 = this.createNode(), t4 = this.matchContextualKeyword("async");
                t4 && this.nextToken(), this.expectKeyword("function");
                var r3, n3 = !t4 && this.match("*");
                n3 && this.nextToken();
                var i3, s4 = null, u3 = this.context.await, l2 = this.context.allowYield;
                if (this.context.await = t4, this.context.allowYield = !n3, !this.match("(")) {
                  var c3 = this.lookahead;
                  s4 = this.context.strict || n3 || !this.matchKeyword("yield") ? this.parseVariableIdentifier() : this.parseIdentifierName(), this.context.strict ? this.scanner.isRestrictedWord(c3.value) && this.tolerateUnexpectedToken(c3, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(c3.value) ? (i3 = c3, r3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(c3.value) && (i3 = c3, r3 = o.Messages.StrictReservedWord);
                }
                var h3 = this.parseFormalParameters(i3), p = h3.params, f = h3.stricted;
                i3 = h3.firstRestricted, h3.message && (r3 = h3.message);
                var d3 = this.context.strict, m3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = h3.simple;
                var y3 = this.parseFunctionSourceElements();
                return this.context.strict && i3 && this.throwUnexpectedToken(i3, r3), this.context.strict && f && this.tolerateUnexpectedToken(f, r3), this.context.strict = d3, this.context.allowStrictDirective = m3, this.context.await = u3, this.context.allowYield = l2, t4 ? this.finalize(e5, new a3.AsyncFunctionExpression(s4, p, y3)) : this.finalize(e5, new a3.FunctionExpression(s4, p, y3, n3));
              }, e4.prototype.parseDirective = function() {
                var e5 = this.lookahead, t4 = this.createNode(), r3 = this.parseExpression(), n3 = r3.type === u2.Syntax.Literal ? this.getTokenRaw(e5).slice(1, -1) : null;
                return this.consumeSemicolon(), this.finalize(t4, n3 ? new a3.Directive(r3, n3) : new a3.ExpressionStatement(r3));
              }, e4.prototype.parseDirectivePrologues = function() {
                for (var e5 = null, t4 = []; ; ) {
                  var r3 = this.lookahead;
                  if (r3.type !== 8)
                    break;
                  var n3 = this.parseDirective();
                  t4.push(n3);
                  var i3 = n3.directive;
                  if (typeof i3 != "string")
                    break;
                  i3 === "use strict" ? (this.context.strict = true, e5 && this.tolerateUnexpectedToken(e5, o.Messages.StrictOctalLiteral), this.context.allowStrictDirective || this.tolerateUnexpectedToken(r3, o.Messages.IllegalLanguageModeDirective)) : !e5 && r3.octal && (e5 = r3);
                }
                return t4;
              }, e4.prototype.qualifiedPropertyName = function(e5) {
                switch (e5.type) {
                  case 3:
                  case 8:
                  case 1:
                  case 5:
                  case 6:
                  case 4:
                    return true;
                  case 7:
                    return e5.value === "[";
                }
                return false;
              }, e4.prototype.parseGetterMethod = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length > 0 && this.tolerateError(o.Messages.BadGetterArity);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, false));
              }, e4.prototype.parseSetterMethod = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length !== 1 ? this.tolerateError(o.Messages.BadSetterArity) : r3.params[0] instanceof a3.RestElement && this.tolerateError(o.Messages.BadSetterRestParameter);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, false));
              }, e4.prototype.parseGeneratorMethod = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                this.context.allowYield = false;
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, true));
              }, e4.prototype.isStartOfExpression = function() {
                var e5 = true, t4 = this.lookahead.value;
                switch (this.lookahead.type) {
                  case 7:
                    e5 = t4 === "[" || t4 === "(" || t4 === "{" || t4 === "+" || t4 === "-" || t4 === "!" || t4 === "~" || t4 === "++" || t4 === "--" || t4 === "/" || t4 === "/=";
                    break;
                  case 4:
                    e5 = t4 === "class" || t4 === "delete" || t4 === "function" || t4 === "let" || t4 === "new" || t4 === "super" || t4 === "this" || t4 === "typeof" || t4 === "void" || t4 === "yield";
                }
                return e5;
              }, e4.prototype.parseYieldExpression = function() {
                var e5 = this.createNode();
                this.expectKeyword("yield");
                var t4 = null, r3 = false;
                if (!this.hasLineTerminator) {
                  var n3 = this.context.allowYield;
                  this.context.allowYield = false, (r3 = this.match("*")) ? (this.nextToken(), t4 = this.parseAssignmentExpression()) : this.isStartOfExpression() && (t4 = this.parseAssignmentExpression()), this.context.allowYield = n3;
                }
                return this.finalize(e5, new a3.YieldExpression(t4, r3));
              }, e4.prototype.parseClassElement = function(e5) {
                var t4 = this.lookahead, r3 = this.createNode(), n3 = "", i3 = null, s4 = null, u3 = false, l2 = false, c3 = false, h3 = false;
                if (this.match("*"))
                  this.nextToken();
                else if (u3 = this.match("["), (i3 = this.parseObjectPropertyKey()).name === "static" && (this.qualifiedPropertyName(this.lookahead) || this.match("*")) && (t4 = this.lookahead, c3 = true, u3 = this.match("["), this.match("*") ? this.nextToken() : i3 = this.parseObjectPropertyKey()), t4.type === 3 && !this.hasLineTerminator && t4.value === "async") {
                  var p = this.lookahead.value;
                  p !== ":" && p !== "(" && p !== "*" && (h3 = true, t4 = this.lookahead, i3 = this.parseObjectPropertyKey(), t4.type === 3 && t4.value === "constructor" && this.tolerateUnexpectedToken(t4, o.Messages.ConstructorIsAsync));
                }
                var f = this.qualifiedPropertyName(this.lookahead);
                return t4.type === 3 ? t4.value === "get" && f ? (n3 = "get", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), this.context.allowYield = false, s4 = this.parseGetterMethod()) : t4.value === "set" && f && (n3 = "set", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseSetterMethod()) : t4.type === 7 && t4.value === "*" && f && (n3 = "init", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseGeneratorMethod(), l2 = true), !n3 && i3 && this.match("(") && (n3 = "init", s4 = h3 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true), n3 || this.throwUnexpectedToken(this.lookahead), n3 === "init" && (n3 = "method"), u3 || (c3 && this.isPropertyKey(i3, "prototype") && this.throwUnexpectedToken(t4, o.Messages.StaticPrototype), !c3 && this.isPropertyKey(i3, "constructor") && ((n3 !== "method" || !l2 || s4 && s4.generator) && this.throwUnexpectedToken(t4, o.Messages.ConstructorSpecialMethod), e5.value ? this.throwUnexpectedToken(t4, o.Messages.DuplicateConstructor) : e5.value = true, n3 = "constructor")), this.finalize(r3, new a3.MethodDefinition(i3, u3, s4, n3, c3));
              }, e4.prototype.parseClassElementList = function() {
                var e5 = [], t4 = { value: false };
                for (this.expect("{"); !this.match("}"); )
                  this.match(";") ? this.nextToken() : e5.push(this.parseClassElement(t4));
                return this.expect("}"), e5;
              }, e4.prototype.parseClassBody = function() {
                var e5 = this.createNode(), t4 = this.parseClassElementList();
                return this.finalize(e5, new a3.ClassBody(t4));
              }, e4.prototype.parseClassDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var n3 = e5 && this.lookahead.type !== 3 ? null : this.parseVariableIdentifier(), i3 = null;
                this.matchKeyword("extends") && (this.nextToken(), i3 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var o2 = this.parseClassBody();
                return this.context.strict = r3, this.finalize(t4, new a3.ClassDeclaration(n3, i3, o2));
              }, e4.prototype.parseClassExpression = function() {
                var e5 = this.createNode(), t4 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var r3 = this.lookahead.type === 3 ? this.parseVariableIdentifier() : null, n3 = null;
                this.matchKeyword("extends") && (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var i3 = this.parseClassBody();
                return this.context.strict = t4, this.finalize(e5, new a3.ClassExpression(r3, n3, i3));
              }, e4.prototype.parseModule = function() {
                this.context.strict = true, this.context.isModule = true, this.scanner.isModule = true;
                for (var e5 = this.createNode(), t4 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t4.push(this.parseStatementListItem());
                return this.finalize(e5, new a3.Module(t4));
              }, e4.prototype.parseScript = function() {
                for (var e5 = this.createNode(), t4 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t4.push(this.parseStatementListItem());
                return this.finalize(e5, new a3.Script(t4));
              }, e4.prototype.parseModuleSpecifier = function() {
                var e5 = this.createNode();
                this.lookahead.type !== 8 && this.throwError(o.Messages.InvalidModuleSpecifier);
                var t4 = this.nextToken(), r3 = this.getTokenRaw(t4);
                return this.finalize(e5, new a3.Literal(t4.value, r3));
              }, e4.prototype.parseImportSpecifier = function() {
                var e5, t4, r3 = this.createNode();
                return this.lookahead.type === 3 ? (t4 = e5 = this.parseVariableIdentifier(), this.matchContextualKeyword("as") && (this.nextToken(), t4 = this.parseVariableIdentifier())) : (t4 = e5 = this.parseIdentifierName(), this.matchContextualKeyword("as") ? (this.nextToken(), t4 = this.parseVariableIdentifier()) : this.throwUnexpectedToken(this.nextToken())), this.finalize(r3, new a3.ImportSpecifier(t4, e5));
              }, e4.prototype.parseNamedImports = function() {
                this.expect("{");
                for (var e5 = []; !this.match("}"); )
                  e5.push(this.parseImportSpecifier()), this.match("}") || this.expect(",");
                return this.expect("}"), e5;
              }, e4.prototype.parseImportDefaultSpecifier = function() {
                var e5 = this.createNode(), t4 = this.parseIdentifierName();
                return this.finalize(e5, new a3.ImportDefaultSpecifier(t4));
              }, e4.prototype.parseImportNamespaceSpecifier = function() {
                var e5 = this.createNode();
                this.expect("*"), this.matchContextualKeyword("as") || this.throwError(o.Messages.NoAsAfterImportNamespace), this.nextToken();
                var t4 = this.parseIdentifierName();
                return this.finalize(e5, new a3.ImportNamespaceSpecifier(t4));
              }, e4.prototype.parseImportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalImportDeclaration);
                var e5, t4 = this.createNode();
                this.expectKeyword("import");
                var r3 = [];
                if (this.lookahead.type === 8)
                  e5 = this.parseModuleSpecifier();
                else {
                  if (this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.isIdentifierName(this.lookahead) && !this.matchKeyword("default") ? (r3.push(this.parseImportDefaultSpecifier()), this.match(",") && (this.nextToken(), this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.throwUnexpectedToken(this.lookahead))) : this.throwUnexpectedToken(this.nextToken()), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken(), e5 = this.parseModuleSpecifier();
                }
                return this.consumeSemicolon(), this.finalize(t4, new a3.ImportDeclaration(r3, e5));
              }, e4.prototype.parseExportSpecifier = function() {
                var e5 = this.createNode(), t4 = this.parseIdentifierName(), r3 = t4;
                return this.matchContextualKeyword("as") && (this.nextToken(), r3 = this.parseIdentifierName()), this.finalize(e5, new a3.ExportSpecifier(t4, r3));
              }, e4.prototype.parseExportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalExportDeclaration);
                var e5, t4 = this.createNode();
                if (this.expectKeyword("export"), this.matchKeyword("default"))
                  if (this.nextToken(), this.matchKeyword("function")) {
                    var r3 = this.parseFunctionDeclaration(true);
                    e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3));
                  } else
                    this.matchKeyword("class") ? (r3 = this.parseClassDeclaration(true), e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3))) : this.matchContextualKeyword("async") ? (r3 = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression(), e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3))) : (this.matchContextualKeyword("from") && this.throwError(o.Messages.UnexpectedToken, this.lookahead.value), r3 = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression(), this.consumeSemicolon(), e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3)));
                else if (this.match("*")) {
                  if (this.nextToken(), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken();
                  var i3 = this.parseModuleSpecifier();
                  this.consumeSemicolon(), e5 = this.finalize(t4, new a3.ExportAllDeclaration(i3));
                } else if (this.lookahead.type === 4) {
                  switch (r3 = void 0, this.lookahead.value) {
                    case "let":
                    case "const":
                      r3 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "var":
                    case "class":
                    case "function":
                      r3 = this.parseStatementListItem();
                      break;
                    default:
                      this.throwUnexpectedToken(this.lookahead);
                  }
                  e5 = this.finalize(t4, new a3.ExportNamedDeclaration(r3, [], null));
                } else if (this.matchAsyncFunction())
                  r3 = this.parseFunctionDeclaration(), e5 = this.finalize(t4, new a3.ExportNamedDeclaration(r3, [], null));
                else {
                  var s4 = [], u3 = null, l2 = false;
                  for (this.expect("{"); !this.match("}"); )
                    l2 = l2 || this.matchKeyword("default"), s4.push(this.parseExportSpecifier()), this.match("}") || this.expect(",");
                  this.expect("}"), this.matchContextualKeyword("from") ? (this.nextToken(), u3 = this.parseModuleSpecifier(), this.consumeSemicolon()) : l2 ? (n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause, this.throwError(n3, this.lookahead.value)) : this.consumeSemicolon(), e5 = this.finalize(t4, new a3.ExportNamedDeclaration(null, s4, u3));
                }
                return e5;
              }, e4;
            }();
            t3.Parser = c2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.assert = function(e4, t4) {
              if (!e4)
                throw new Error("ASSERT: " + t4);
            };
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var r2 = function() {
              function e4() {
                this.errors = [], this.tolerant = false;
              }
              return e4.prototype.recordError = function(e5) {
                this.errors.push(e5);
              }, e4.prototype.tolerate = function(e5) {
                if (!this.tolerant)
                  throw e5;
                this.recordError(e5);
              }, e4.prototype.constructError = function(e5, t4) {
                var r3 = new Error(e5);
                try {
                  throw r3;
                } catch (e6) {
                  Object.create && Object.defineProperty && (r3 = Object.create(e6), Object.defineProperty(r3, "column", { value: t4 }));
                }
                return r3;
              }, e4.prototype.createError = function(e5, t4, r3, n2) {
                var i2 = "Line " + t4 + ": " + n2, o = this.constructError(i2, r3);
                return o.index = e5, o.lineNumber = t4, o.description = n2, o;
              }, e4.prototype.throwError = function(e5, t4, r3, n2) {
                throw this.createError(e5, t4, r3, n2);
              }, e4.prototype.tolerateError = function(e5, t4, r3, n2) {
                var i2 = this.createError(e5, t4, r3, n2);
                if (!this.tolerant)
                  throw i2;
                this.recordError(i2);
              }, e4;
            }();
            t3.ErrorHandler = r2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.Messages = { BadGetterArity: "Getter must not have any formal parameters", BadSetterArity: "Setter must have exactly one formal parameter", BadSetterRestParameter: "Setter function argument must not be a rest parameter", ConstructorIsAsync: "Class constructor may not be an async method", ConstructorSpecialMethod: "Class constructor may not be an accessor", DeclarationMissingInitializer: "Missing initializer in %0 declaration", DefaultRestParameter: "Unexpected token =", DuplicateBinding: "Duplicate binding %0", DuplicateConstructor: "A class may only have one constructor", DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals", ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer", GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts", IllegalBreak: "Illegal break statement", IllegalContinue: "Illegal continue statement", IllegalExportDeclaration: "Unexpected token", IllegalImportDeclaration: "Unexpected token", IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list", IllegalReturn: "Illegal return statement", InvalidEscapedReservedWord: "Keyword must not contain escaped characters", InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence", InvalidLHSInAssignment: "Invalid left-hand side in assignment", InvalidLHSInForIn: "Invalid left-hand side in for-in", InvalidLHSInForLoop: "Invalid left-hand side in for-loop", InvalidModuleSpecifier: "Unexpected token", InvalidRegExp: "Invalid regular expression", LetInLexicalBinding: "let is disallowed as a lexically bound name", MissingFromClause: "Unexpected token", MultipleDefaultsInSwitch: "More than one default clause in switch statement", NewlineAfterThrow: "Illegal newline after throw", NoAsAfterImportNamespace: "Unexpected token", NoCatchOrFinally: "Missing catch or finally after try", ParameterAfterRestParameter: "Rest parameter must be last formal parameter", Redeclaration: "%0 '%1' has already been declared", StaticPrototype: "Classes may not have static property named prototype", StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode", StrictDelete: "Delete of an unqualified identifier in strict mode.", StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block", StrictFunctionName: "Function name may not be eval or arguments in strict mode", StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictModeWith: "Strict mode code may not include a with statement", StrictOctalLiteral: "Octal literals are not allowed in strict mode.", StrictParamDupe: "Strict mode function may not have duplicate parameter names", StrictParamName: "Parameter name eval or arguments is not allowed in strict mode", StrictReservedWord: "Use of future reserved word in strict mode", StrictVarName: "Variable name may not be eval or arguments in strict mode", TemplateOctalLiteral: "Octal literals are not allowed in template strings.", UnexpectedEOS: "Unexpected end of input", UnexpectedIdentifier: "Unexpected identifier", UnexpectedNumber: "Unexpected number", UnexpectedReserved: "Unexpected reserved word", UnexpectedString: "Unexpected string", UnexpectedTemplate: "Unexpected quasi %0", UnexpectedToken: "Unexpected token %0", UnexpectedTokenIllegal: "Unexpected token ILLEGAL", UnknownLabel: "Undefined label '%0'", UnterminatedRegExp: "Invalid regular expression: missing /" };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(9), i2 = r2(4), o = r2(11);
            function a3(e4) {
              return "0123456789abcdef".indexOf(e4.toLowerCase());
            }
            function s3(e4) {
              return "01234567".indexOf(e4);
            }
            var u2 = function() {
              function e4(e5, t4) {
                this.source = e5, this.errorHandler = t4, this.trackComment = false, this.isModule = false, this.length = e5.length, this.index = 0, this.lineNumber = e5.length > 0 ? 1 : 0, this.lineStart = 0, this.curlyStack = [];
              }
              return e4.prototype.saveState = function() {
                return { index: this.index, lineNumber: this.lineNumber, lineStart: this.lineStart };
              }, e4.prototype.restoreState = function(e5) {
                this.index = e5.index, this.lineNumber = e5.lineNumber, this.lineStart = e5.lineStart;
              }, e4.prototype.eof = function() {
                return this.index >= this.length;
              }, e4.prototype.throwUnexpectedToken = function(e5) {
                return e5 === void 0 && (e5 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, e5);
              }, e4.prototype.tolerateUnexpectedToken = function(e5) {
                e5 === void 0 && (e5 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, e5);
              }, e4.prototype.skipSingleLineComment = function(e5) {
                var t4, r3, n3 = [];
                for (this.trackComment && (n3 = [], t4 = this.index - e5, r3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - e5 }, end: {} }); !this.eof(); ) {
                  var o2 = this.source.charCodeAt(this.index);
                  if (++this.index, i2.Character.isLineTerminator(o2)) {
                    if (this.trackComment) {
                      r3.end = { line: this.lineNumber, column: this.index - this.lineStart - 1 };
                      var a4 = { multiLine: false, slice: [t4 + e5, this.index - 1], range: [t4, this.index - 1], loc: r3 };
                      n3.push(a4);
                    }
                    return o2 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, n3;
                  }
                }
                return this.trackComment && (r3.end = { line: this.lineNumber, column: this.index - this.lineStart }, a4 = { multiLine: false, slice: [t4 + e5, this.index], range: [t4, this.index], loc: r3 }, n3.push(a4)), n3;
              }, e4.prototype.skipMultiLineComment = function() {
                var e5, t4, r3 = [];
                for (this.trackComment && (r3 = [], e5 = this.index - 2, t4 = { start: { line: this.lineNumber, column: this.index - this.lineStart - 2 }, end: {} }); !this.eof(); ) {
                  var n3 = this.source.charCodeAt(this.index);
                  if (i2.Character.isLineTerminator(n3))
                    n3 === 13 && this.source.charCodeAt(this.index + 1) === 10 && ++this.index, ++this.lineNumber, ++this.index, this.lineStart = this.index;
                  else if (n3 === 42) {
                    if (this.source.charCodeAt(this.index + 1) === 47) {
                      if (this.index += 2, this.trackComment) {
                        t4.end = { line: this.lineNumber, column: this.index - this.lineStart };
                        var o2 = { multiLine: true, slice: [e5 + 2, this.index - 2], range: [e5, this.index], loc: t4 };
                        r3.push(o2);
                      }
                      return r3;
                    }
                    ++this.index;
                  } else
                    ++this.index;
                }
                return this.trackComment && (t4.end = { line: this.lineNumber, column: this.index - this.lineStart }, o2 = { multiLine: true, slice: [e5 + 2, this.index], range: [e5, this.index], loc: t4 }, r3.push(o2)), this.tolerateUnexpectedToken(), r3;
              }, e4.prototype.scanComments = function() {
                var e5;
                this.trackComment && (e5 = []);
                for (var t4 = this.index === 0; !this.eof(); ) {
                  var r3 = this.source.charCodeAt(this.index);
                  if (i2.Character.isWhiteSpace(r3))
                    ++this.index;
                  else if (i2.Character.isLineTerminator(r3))
                    ++this.index, r3 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, t4 = true;
                  else if (r3 === 47)
                    if ((r3 = this.source.charCodeAt(this.index + 1)) === 47) {
                      this.index += 2;
                      var n3 = this.skipSingleLineComment(2);
                      this.trackComment && (e5 = e5.concat(n3)), t4 = true;
                    } else {
                      if (r3 !== 42)
                        break;
                      this.index += 2, n3 = this.skipMultiLineComment(), this.trackComment && (e5 = e5.concat(n3));
                    }
                  else if (t4 && r3 === 45) {
                    if (this.source.charCodeAt(this.index + 1) !== 45 || this.source.charCodeAt(this.index + 2) !== 62)
                      break;
                    this.index += 3, n3 = this.skipSingleLineComment(3), this.trackComment && (e5 = e5.concat(n3));
                  } else {
                    if (r3 !== 60 || this.isModule)
                      break;
                    if (this.source.slice(this.index + 1, this.index + 4) !== "!--")
                      break;
                    this.index += 4, n3 = this.skipSingleLineComment(4), this.trackComment && (e5 = e5.concat(n3));
                  }
                }
                return e5;
              }, e4.prototype.isFutureReservedWord = function(e5) {
                switch (e5) {
                  case "enum":
                  case "export":
                  case "import":
                  case "super":
                    return true;
                  default:
                    return false;
                }
              }, e4.prototype.isStrictModeReservedWord = function(e5) {
                switch (e5) {
                  case "implements":
                  case "interface":
                  case "package":
                  case "private":
                  case "protected":
                  case "public":
                  case "static":
                  case "yield":
                  case "let":
                    return true;
                  default:
                    return false;
                }
              }, e4.prototype.isRestrictedWord = function(e5) {
                return e5 === "eval" || e5 === "arguments";
              }, e4.prototype.isKeyword = function(e5) {
                switch (e5.length) {
                  case 2:
                    return e5 === "if" || e5 === "in" || e5 === "do";
                  case 3:
                    return e5 === "var" || e5 === "for" || e5 === "new" || e5 === "try" || e5 === "let";
                  case 4:
                    return e5 === "this" || e5 === "else" || e5 === "case" || e5 === "void" || e5 === "with" || e5 === "enum";
                  case 5:
                    return e5 === "while" || e5 === "break" || e5 === "catch" || e5 === "throw" || e5 === "const" || e5 === "yield" || e5 === "class" || e5 === "super";
                  case 6:
                    return e5 === "return" || e5 === "typeof" || e5 === "delete" || e5 === "switch" || e5 === "export" || e5 === "import";
                  case 7:
                    return e5 === "default" || e5 === "finally" || e5 === "extends";
                  case 8:
                    return e5 === "function" || e5 === "continue" || e5 === "debugger";
                  case 10:
                    return e5 === "instanceof";
                  default:
                    return false;
                }
              }, e4.prototype.codePointAt = function(e5) {
                var t4 = this.source.charCodeAt(e5);
                if (t4 >= 55296 && t4 <= 56319) {
                  var r3 = this.source.charCodeAt(e5 + 1);
                  r3 >= 56320 && r3 <= 57343 && (t4 = 1024 * (t4 - 55296) + r3 - 56320 + 65536);
                }
                return t4;
              }, e4.prototype.scanHexEscape = function(e5) {
                for (var t4 = e5 === "u" ? 4 : 2, r3 = 0, n3 = 0; n3 < t4; ++n3) {
                  if (this.eof() || !i2.Character.isHexDigit(this.source.charCodeAt(this.index)))
                    return null;
                  r3 = 16 * r3 + a3(this.source[this.index++]);
                }
                return String.fromCharCode(r3);
              }, e4.prototype.scanUnicodeCodePointEscape = function() {
                var e5 = this.source[this.index], t4 = 0;
                for (e5 === "}" && this.throwUnexpectedToken(); !this.eof() && (e5 = this.source[this.index++], i2.Character.isHexDigit(e5.charCodeAt(0))); )
                  t4 = 16 * t4 + a3(e5);
                return (t4 > 1114111 || e5 !== "}") && this.throwUnexpectedToken(), i2.Character.fromCodePoint(t4);
              }, e4.prototype.getIdentifier = function() {
                for (var e5 = this.index++; !this.eof(); ) {
                  var t4 = this.source.charCodeAt(this.index);
                  if (t4 === 92)
                    return this.index = e5, this.getComplexIdentifier();
                  if (t4 >= 55296 && t4 < 57343)
                    return this.index = e5, this.getComplexIdentifier();
                  if (!i2.Character.isIdentifierPart(t4))
                    break;
                  ++this.index;
                }
                return this.source.slice(e5, this.index);
              }, e4.prototype.getComplexIdentifier = function() {
                var e5, t4 = this.codePointAt(this.index), r3 = i2.Character.fromCodePoint(t4);
                for (this.index += r3.length, t4 === 92 && (this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e5 = this.scanUnicodeCodePointEscape()) : (e5 = this.scanHexEscape("u")) !== null && e5 !== "\\" && i2.Character.isIdentifierStart(e5.charCodeAt(0)) || this.throwUnexpectedToken(), r3 = e5); !this.eof() && (t4 = this.codePointAt(this.index), i2.Character.isIdentifierPart(t4)); )
                  r3 += e5 = i2.Character.fromCodePoint(t4), this.index += e5.length, t4 === 92 && (r3 = r3.substr(0, r3.length - 1), this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e5 = this.scanUnicodeCodePointEscape()) : (e5 = this.scanHexEscape("u")) !== null && e5 !== "\\" && i2.Character.isIdentifierPart(e5.charCodeAt(0)) || this.throwUnexpectedToken(), r3 += e5);
                return r3;
              }, e4.prototype.octalToDecimal = function(e5) {
                var t4 = e5 !== "0", r3 = s3(e5);
                return !this.eof() && i2.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (t4 = true, r3 = 8 * r3 + s3(this.source[this.index++]), "0123".indexOf(e5) >= 0 && !this.eof() && i2.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (r3 = 8 * r3 + s3(this.source[this.index++]))), { code: r3, octal: t4 };
              }, e4.prototype.scanIdentifier = function() {
                var e5, t4 = this.index, r3 = this.source.charCodeAt(t4) === 92 ? this.getComplexIdentifier() : this.getIdentifier();
                if ((e5 = r3.length === 1 ? 3 : this.isKeyword(r3) ? 4 : r3 === "null" ? 5 : r3 === "true" || r3 === "false" ? 1 : 3) != 3 && t4 + r3.length !== this.index) {
                  var n3 = this.index;
                  this.index = t4, this.tolerateUnexpectedToken(o.Messages.InvalidEscapedReservedWord), this.index = n3;
                }
                return { type: e5, value: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t4, end: this.index };
              }, e4.prototype.scanPunctuator = function() {
                var e5 = this.index, t4 = this.source[this.index];
                switch (t4) {
                  case "(":
                  case "{":
                    t4 === "{" && this.curlyStack.push("{"), ++this.index;
                    break;
                  case ".":
                    ++this.index, this.source[this.index] === "." && this.source[this.index + 1] === "." && (this.index += 2, t4 = "...");
                    break;
                  case "}":
                    ++this.index, this.curlyStack.pop();
                    break;
                  case ")":
                  case ";":
                  case ",":
                  case "[":
                  case "]":
                  case ":":
                  case "?":
                  case "~":
                    ++this.index;
                    break;
                  default:
                    (t4 = this.source.substr(this.index, 4)) === ">>>=" ? this.index += 4 : (t4 = t4.substr(0, 3)) === "===" || t4 === "!==" || t4 === ">>>" || t4 === "<<=" || t4 === ">>=" || t4 === "**=" ? this.index += 3 : (t4 = t4.substr(0, 2)) === "&&" || t4 === "||" || t4 === "==" || t4 === "!=" || t4 === "+=" || t4 === "-=" || t4 === "*=" || t4 === "/=" || t4 === "++" || t4 === "--" || t4 === "<<" || t4 === ">>" || t4 === "&=" || t4 === "|=" || t4 === "^=" || t4 === "%=" || t4 === "<=" || t4 === ">=" || t4 === "=>" || t4 === "**" ? this.index += 2 : (t4 = this.source[this.index], "<>=!+-*%&|^/".indexOf(t4) >= 0 && ++this.index);
                }
                return this.index === e5 && this.throwUnexpectedToken(), { type: 7, value: t4, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanHexLiteral = function(e5) {
                for (var t4 = ""; !this.eof() && i2.Character.isHexDigit(this.source.charCodeAt(this.index)); )
                  t4 += this.source[this.index++];
                return t4.length === 0 && this.throwUnexpectedToken(), i2.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseInt("0x" + t4, 16), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanBinaryLiteral = function(e5) {
                for (var t4, r3 = ""; !this.eof() && ((t4 = this.source[this.index]) === "0" || t4 === "1"); )
                  r3 += this.source[this.index++];
                return r3.length === 0 && this.throwUnexpectedToken(), this.eof() || (t4 = this.source.charCodeAt(this.index), (i2.Character.isIdentifierStart(t4) || i2.Character.isDecimalDigit(t4)) && this.throwUnexpectedToken()), { type: 6, value: parseInt(r3, 2), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanOctalLiteral = function(e5, t4) {
                var r3 = "", n3 = false;
                for (i2.Character.isOctalDigit(e5.charCodeAt(0)) ? (n3 = true, r3 = "0" + this.source[this.index++]) : ++this.index; !this.eof() && i2.Character.isOctalDigit(this.source.charCodeAt(this.index)); )
                  r3 += this.source[this.index++];
                return n3 || r3.length !== 0 || this.throwUnexpectedToken(), (i2.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || i2.Character.isDecimalDigit(this.source.charCodeAt(this.index))) && this.throwUnexpectedToken(), { type: 6, value: parseInt(r3, 8), octal: n3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t4, end: this.index };
              }, e4.prototype.isImplicitOctalLiteral = function() {
                for (var e5 = this.index + 1; e5 < this.length; ++e5) {
                  var t4 = this.source[e5];
                  if (t4 === "8" || t4 === "9")
                    return false;
                  if (!i2.Character.isOctalDigit(t4.charCodeAt(0)))
                    return true;
                }
                return true;
              }, e4.prototype.scanNumericLiteral = function() {
                var e5 = this.index, t4 = this.source[e5];
                n2.assert(i2.Character.isDecimalDigit(t4.charCodeAt(0)) || t4 === ".", "Numeric literal must start with a decimal digit or a decimal point");
                var r3 = "";
                if (t4 !== ".") {
                  if (r3 = this.source[this.index++], t4 = this.source[this.index], r3 === "0") {
                    if (t4 === "x" || t4 === "X")
                      return ++this.index, this.scanHexLiteral(e5);
                    if (t4 === "b" || t4 === "B")
                      return ++this.index, this.scanBinaryLiteral(e5);
                    if (t4 === "o" || t4 === "O")
                      return this.scanOctalLiteral(t4, e5);
                    if (t4 && i2.Character.isOctalDigit(t4.charCodeAt(0)) && this.isImplicitOctalLiteral())
                      return this.scanOctalLiteral(t4, e5);
                  }
                  for (; i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t4 = this.source[this.index];
                }
                if (t4 === ".") {
                  for (r3 += this.source[this.index++]; i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t4 = this.source[this.index];
                }
                if (t4 === "e" || t4 === "E")
                  if (r3 += this.source[this.index++], (t4 = this.source[this.index]) !== "+" && t4 !== "-" || (r3 += this.source[this.index++]), i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)))
                    for (; i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                      r3 += this.source[this.index++];
                  else
                    this.throwUnexpectedToken();
                return i2.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseFloat(r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanStringLiteral = function() {
                var e5 = this.index, t4 = this.source[e5];
                n2.assert(t4 === "'" || t4 === '"', "String literal must starts with a quote"), ++this.index;
                for (var r3 = false, a4 = ""; !this.eof(); ) {
                  var s4 = this.source[this.index++];
                  if (s4 === t4) {
                    t4 = "";
                    break;
                  }
                  if (s4 === "\\")
                    if ((s4 = this.source[this.index++]) && i2.Character.isLineTerminator(s4.charCodeAt(0)))
                      ++this.lineNumber, s4 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (s4) {
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, a4 += this.scanUnicodeCodePointEscape();
                          else {
                            var u3 = this.scanHexEscape(s4);
                            u3 === null && this.throwUnexpectedToken(), a4 += u3;
                          }
                          break;
                        case "x":
                          var l = this.scanHexEscape(s4);
                          l === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), a4 += l;
                          break;
                        case "n":
                          a4 += "\n";
                          break;
                        case "r":
                          a4 += "\r";
                          break;
                        case "t":
                          a4 += "	";
                          break;
                        case "b":
                          a4 += "\b";
                          break;
                        case "f":
                          a4 += "\f";
                          break;
                        case "v":
                          a4 += "\v";
                          break;
                        case "8":
                        case "9":
                          a4 += s4, this.tolerateUnexpectedToken();
                          break;
                        default:
                          if (s4 && i2.Character.isOctalDigit(s4.charCodeAt(0))) {
                            var c2 = this.octalToDecimal(s4);
                            r3 = c2.octal || r3, a4 += String.fromCharCode(c2.code);
                          } else
                            a4 += s4;
                      }
                  else {
                    if (i2.Character.isLineTerminator(s4.charCodeAt(0)))
                      break;
                    a4 += s4;
                  }
                }
                return t4 !== "" && (this.index = e5, this.throwUnexpectedToken()), { type: 8, value: a4, octal: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanTemplate = function() {
                var e5 = "", t4 = false, r3 = this.index, n3 = this.source[r3] === "`", a4 = false, s4 = 2;
                for (++this.index; !this.eof(); ) {
                  var u3 = this.source[this.index++];
                  if (u3 === "`") {
                    s4 = 1, a4 = true, t4 = true;
                    break;
                  }
                  if (u3 === "$") {
                    if (this.source[this.index] === "{") {
                      this.curlyStack.push("${"), ++this.index, t4 = true;
                      break;
                    }
                    e5 += u3;
                  } else if (u3 === "\\")
                    if (u3 = this.source[this.index++], i2.Character.isLineTerminator(u3.charCodeAt(0)))
                      ++this.lineNumber, u3 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (u3) {
                        case "n":
                          e5 += "\n";
                          break;
                        case "r":
                          e5 += "\r";
                          break;
                        case "t":
                          e5 += "	";
                          break;
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, e5 += this.scanUnicodeCodePointEscape();
                          else {
                            var l = this.index, c2 = this.scanHexEscape(u3);
                            c2 !== null ? e5 += c2 : (this.index = l, e5 += u3);
                          }
                          break;
                        case "x":
                          var h3 = this.scanHexEscape(u3);
                          h3 === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), e5 += h3;
                          break;
                        case "b":
                          e5 += "\b";
                          break;
                        case "f":
                          e5 += "\f";
                          break;
                        case "v":
                          e5 += "\v";
                          break;
                        default:
                          u3 === "0" ? (i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral), e5 += "\0") : i2.Character.isOctalDigit(u3.charCodeAt(0)) ? this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral) : e5 += u3;
                      }
                  else
                    i2.Character.isLineTerminator(u3.charCodeAt(0)) ? (++this.lineNumber, u3 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index, e5 += "\n") : e5 += u3;
                }
                return t4 || this.throwUnexpectedToken(), n3 || this.curlyStack.pop(), { type: 10, value: this.source.slice(r3 + 1, this.index - s4), cooked: e5, head: n3, tail: a4, lineNumber: this.lineNumber, lineStart: this.lineStart, start: r3, end: this.index };
              }, e4.prototype.testRegExp = function(e5, t4) {
                var r3 = e5, n3 = this;
                t4.indexOf("u") >= 0 && (r3 = r3.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function(e6, t5, r4) {
                  var i3 = parseInt(t5 || r4, 16);
                  return i3 > 1114111 && n3.throwUnexpectedToken(o.Messages.InvalidRegExp), i3 <= 65535 ? String.fromCharCode(i3) : "\uFFFF";
                }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "\uFFFF"));
                try {
                  RegExp(r3);
                } catch (e6) {
                  this.throwUnexpectedToken(o.Messages.InvalidRegExp);
                }
                try {
                  return new RegExp(e5, t4);
                } catch (e6) {
                  return null;
                }
              }, e4.prototype.scanRegExpBody = function() {
                var e5 = this.source[this.index];
                n2.assert(e5 === "/", "Regular expression literal must start with a slash");
                for (var t4 = this.source[this.index++], r3 = false, a4 = false; !this.eof(); )
                  if (t4 += e5 = this.source[this.index++], e5 === "\\")
                    e5 = this.source[this.index++], i2.Character.isLineTerminator(e5.charCodeAt(0)) && this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t4 += e5;
                  else if (i2.Character.isLineTerminator(e5.charCodeAt(0)))
                    this.throwUnexpectedToken(o.Messages.UnterminatedRegExp);
                  else if (r3)
                    e5 === "]" && (r3 = false);
                  else {
                    if (e5 === "/") {
                      a4 = true;
                      break;
                    }
                    e5 === "[" && (r3 = true);
                  }
                return a4 || this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t4.substr(1, t4.length - 2);
              }, e4.prototype.scanRegExpFlags = function() {
                for (var e5 = ""; !this.eof(); ) {
                  var t4 = this.source[this.index];
                  if (!i2.Character.isIdentifierPart(t4.charCodeAt(0)))
                    break;
                  if (++this.index, t4 !== "\\" || this.eof())
                    e5 += t4;
                  else if ((t4 = this.source[this.index]) === "u") {
                    ++this.index;
                    var r3 = this.index, n3 = this.scanHexEscape("u");
                    if (n3 !== null)
                      for (e5 += n3; r3 < this.index; ++r3)
                        this.source[r3];
                    else
                      this.index = r3, e5 += "u";
                    this.tolerateUnexpectedToken();
                  } else
                    this.tolerateUnexpectedToken();
                }
                return e5;
              }, e4.prototype.scanRegExp = function() {
                var e5 = this.index, t4 = this.scanRegExpBody(), r3 = this.scanRegExpFlags();
                return { type: 9, value: "", pattern: t4, flags: r3, regex: this.testRegExp(t4, r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.lex = function() {
                if (this.eof())
                  return { type: 2, value: "", lineNumber: this.lineNumber, lineStart: this.lineStart, start: this.index, end: this.index };
                var e5 = this.source.charCodeAt(this.index);
                return i2.Character.isIdentifierStart(e5) ? this.scanIdentifier() : e5 === 40 || e5 === 41 || e5 === 59 ? this.scanPunctuator() : e5 === 39 || e5 === 34 ? this.scanStringLiteral() : e5 === 46 ? i2.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1)) ? this.scanNumericLiteral() : this.scanPunctuator() : i2.Character.isDecimalDigit(e5) ? this.scanNumericLiteral() : e5 === 96 || e5 === 125 && this.curlyStack[this.curlyStack.length - 1] === "${" ? this.scanTemplate() : e5 >= 55296 && e5 < 57343 && i2.Character.isIdentifierStart(this.codePointAt(this.index)) ? this.scanIdentifier() : this.scanPunctuator();
              }, e4;
            }();
            t3.Scanner = u2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.TokenName = {}, t3.TokenName[1] = "Boolean", t3.TokenName[2] = "<end>", t3.TokenName[3] = "Identifier", t3.TokenName[4] = "Keyword", t3.TokenName[5] = "Null", t3.TokenName[6] = "Numeric", t3.TokenName[7] = "Punctuator", t3.TokenName[8] = "String", t3.TokenName[9] = "RegularExpression", t3.TokenName[10] = "Template";
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.XHTMLEntities = { quot: '"', amp: "&", apos: "'", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666", lang: "\u27E8", rang: "\u27E9" };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(10), i2 = r2(12), o = r2(13), a3 = function() {
              function e4() {
                this.values = [], this.curly = this.paren = -1;
              }
              return e4.prototype.beforeFunctionExpression = function(e5) {
                return ["(", "{", "[", "in", "typeof", "instanceof", "new", "return", "case", "delete", "throw", "void", "=", "+=", "-=", "*=", "**=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ",", "+", "-", "*", "**", "/", "%", "++", "--", "<<", ">>", ">>>", "&", "|", "^", "!", "~", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!=="].indexOf(e5) >= 0;
              }, e4.prototype.isRegexStart = function() {
                var e5 = this.values[this.values.length - 1], t4 = e5 !== null;
                switch (e5) {
                  case "this":
                  case "]":
                    t4 = false;
                    break;
                  case ")":
                    var r3 = this.values[this.paren - 1];
                    t4 = r3 === "if" || r3 === "while" || r3 === "for" || r3 === "with";
                    break;
                  case "}":
                    if (t4 = false, this.values[this.curly - 3] === "function")
                      t4 = !!(n3 = this.values[this.curly - 4]) && !this.beforeFunctionExpression(n3);
                    else if (this.values[this.curly - 4] === "function") {
                      var n3;
                      t4 = !(n3 = this.values[this.curly - 5]) || !this.beforeFunctionExpression(n3);
                    }
                }
                return t4;
              }, e4.prototype.push = function(e5) {
                e5.type === 7 || e5.type === 4 ? (e5.value === "{" ? this.curly = this.values.length : e5.value === "(" && (this.paren = this.values.length), this.values.push(e5.value)) : this.values.push(null);
              }, e4;
            }(), s3 = function() {
              function e4(e5, t4) {
                this.errorHandler = new n2.ErrorHandler(), this.errorHandler.tolerant = !!t4 && typeof t4.tolerant == "boolean" && t4.tolerant, this.scanner = new i2.Scanner(e5, this.errorHandler), this.scanner.trackComment = !!t4 && typeof t4.comment == "boolean" && t4.comment, this.trackRange = !!t4 && typeof t4.range == "boolean" && t4.range, this.trackLoc = !!t4 && typeof t4.loc == "boolean" && t4.loc, this.buffer = [], this.reader = new a3();
              }
              return e4.prototype.errors = function() {
                return this.errorHandler.errors;
              }, e4.prototype.getNextToken = function() {
                if (this.buffer.length === 0) {
                  var e5 = this.scanner.scanComments();
                  if (this.scanner.trackComment)
                    for (var t4 = 0; t4 < e5.length; ++t4) {
                      var r3 = e5[t4], n3 = this.scanner.source.slice(r3.slice[0], r3.slice[1]), i3 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: n3 };
                      this.trackRange && (i3.range = r3.range), this.trackLoc && (i3.loc = r3.loc), this.buffer.push(i3);
                    }
                  if (!this.scanner.eof()) {
                    var a4 = void 0;
                    this.trackLoc && (a4 = { start: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, end: {} });
                    var s4 = this.scanner.source[this.scanner.index] === "/" && this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.lex();
                    this.reader.push(s4);
                    var u2 = { type: o.TokenName[s4.type], value: this.scanner.source.slice(s4.start, s4.end) };
                    if (this.trackRange && (u2.range = [s4.start, s4.end]), this.trackLoc && (a4.end = { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, u2.loc = a4), s4.type === 9) {
                      var l = s4.pattern, c2 = s4.flags;
                      u2.regex = { pattern: l, flags: c2 };
                    }
                    this.buffer.push(u2);
                  }
                }
                return this.buffer.shift();
              }, e4;
            }();
            t3.Tokenizer = s3;
          }]);
        }, e2.exports = n();
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(53), o = r(76), a3 = r(54), s3 = Object.prototype.toString, u2 = Object.prototype.hasOwnProperty, l = { 0: "\\0", 7: "\\a", 8: "\\b", 9: "\\t", 10: "\\n", 11: "\\v", 12: "\\f", 13: "\\r", 27: "\\e", 34: '\\"', 92: "\\\\", 133: "\\N", 160: "\\_", 8232: "\\L", 8233: "\\P" }, c2 = ["y", "Y", "yes", "Yes", "YES", "on", "On", "ON", "n", "N", "no", "No", "NO", "off", "Off", "OFF"];
        function h3(e3) {
          var t3, r2, o2;
          if (t3 = e3.toString(16).toUpperCase(), e3 <= 255)
            r2 = "x", o2 = 2;
          else if (e3 <= 65535)
            r2 = "u", o2 = 4;
          else {
            if (!(e3 <= 4294967295))
              throw new i2("code point within a string may not be greater than 0xFFFFFFFF");
            r2 = "U", o2 = 8;
          }
          return "\\" + r2 + n.repeat("0", o2 - t3.length) + t3;
        }
        function p(e3) {
          this.schema = e3.schema || o, this.indent = Math.max(1, e3.indent || 2), this.noArrayIndent = e3.noArrayIndent || false, this.skipInvalid = e3.skipInvalid || false, this.flowLevel = n.isNothing(e3.flowLevel) ? -1 : e3.flowLevel, this.styleMap = function(e4, t3) {
            var r2, n2, i3, o2, a4, s4, l2;
            if (t3 === null)
              return {};
            for (r2 = {}, i3 = 0, o2 = (n2 = Object.keys(t3)).length; i3 < o2; i3 += 1)
              a4 = n2[i3], s4 = String(t3[a4]), a4.slice(0, 2) === "!!" && (a4 = "tag:yaml.org,2002:" + a4.slice(2)), (l2 = e4.compiledTypeMap.fallback[a4]) && u2.call(l2.styleAliases, s4) && (s4 = l2.styleAliases[s4]), r2[a4] = s4;
            return r2;
          }(this.schema, e3.styles || null), this.sortKeys = e3.sortKeys || false, this.lineWidth = e3.lineWidth || 80, this.noRefs = e3.noRefs || false, this.noCompatMode = e3.noCompatMode || false, this.condenseFlow = e3.condenseFlow || false, this.implicitTypes = this.schema.compiledImplicit, this.explicitTypes = this.schema.compiledExplicit, this.tag = null, this.result = "", this.duplicates = [], this.usedDuplicates = null;
        }
        function f(e3, t3) {
          for (var r2, i3 = n.repeat(" ", t3), o2 = 0, a4 = -1, s4 = "", u3 = e3.length; o2 < u3; )
            (a4 = e3.indexOf("\n", o2)) === -1 ? (r2 = e3.slice(o2), o2 = u3) : (r2 = e3.slice(o2, a4 + 1), o2 = a4 + 1), r2.length && r2 !== "\n" && (s4 += i3), s4 += r2;
          return s4;
        }
        function d3(e3, t3) {
          return "\n" + n.repeat(" ", e3.indent * t3);
        }
        function m3(e3) {
          return e3 === 32 || e3 === 9;
        }
        function y3(e3) {
          return 32 <= e3 && e3 <= 126 || 161 <= e3 && e3 <= 55295 && e3 !== 8232 && e3 !== 8233 || 57344 <= e3 && e3 <= 65533 && e3 !== 65279 || 65536 <= e3 && e3 <= 1114111;
        }
        function v(e3, t3) {
          return y3(e3) && e3 !== 65279 && e3 !== 44 && e3 !== 91 && e3 !== 93 && e3 !== 123 && e3 !== 125 && e3 !== 58 && (e3 !== 35 || t3 && function(e4) {
            return y3(e4) && !m3(e4) && e4 !== 65279 && e4 !== 13 && e4 !== 10;
          }(t3));
        }
        function _(e3) {
          return /^\n* /.test(e3);
        }
        function g(e3, t3, r2, n2, i3) {
          var o2, a4, s4, u3, l2 = false, c3 = false, h4 = n2 !== -1, p2 = -1, f2 = y3(u3 = e3.charCodeAt(0)) && u3 !== 65279 && !m3(u3) && u3 !== 45 && u3 !== 63 && u3 !== 58 && u3 !== 44 && u3 !== 91 && u3 !== 93 && u3 !== 123 && u3 !== 125 && u3 !== 35 && u3 !== 38 && u3 !== 42 && u3 !== 33 && u3 !== 124 && u3 !== 61 && u3 !== 62 && u3 !== 39 && u3 !== 34 && u3 !== 37 && u3 !== 64 && u3 !== 96 && !m3(e3.charCodeAt(e3.length - 1));
          if (t3)
            for (o2 = 0; o2 < e3.length; o2++) {
              if (!y3(a4 = e3.charCodeAt(o2)))
                return 5;
              s4 = o2 > 0 ? e3.charCodeAt(o2 - 1) : null, f2 = f2 && v(a4, s4);
            }
          else {
            for (o2 = 0; o2 < e3.length; o2++) {
              if ((a4 = e3.charCodeAt(o2)) === 10)
                l2 = true, h4 && (c3 = c3 || o2 - p2 - 1 > n2 && e3[p2 + 1] !== " ", p2 = o2);
              else if (!y3(a4))
                return 5;
              s4 = o2 > 0 ? e3.charCodeAt(o2 - 1) : null, f2 = f2 && v(a4, s4);
            }
            c3 = c3 || h4 && o2 - p2 - 1 > n2 && e3[p2 + 1] !== " ";
          }
          return l2 || c3 ? r2 > 9 && _(e3) ? 5 : c3 ? 4 : 3 : f2 && !i3(e3) ? 1 : 2;
        }
        function b2(e3, t3, r2, n2) {
          e3.dump = function() {
            if (t3.length === 0)
              return "''";
            if (!e3.noCompatMode && c2.indexOf(t3) !== -1)
              return "'" + t3 + "'";
            var o2 = e3.indent * Math.max(1, r2), a4 = e3.lineWidth === -1 ? -1 : Math.max(Math.min(e3.lineWidth, 40), e3.lineWidth - o2), s4 = n2 || e3.flowLevel > -1 && r2 >= e3.flowLevel;
            switch (g(t3, s4, e3.indent, a4, function(t4) {
              return function(e4, t5) {
                var r3, n3;
                for (r3 = 0, n3 = e4.implicitTypes.length; r3 < n3; r3 += 1)
                  if (e4.implicitTypes[r3].resolve(t5))
                    return true;
                return false;
              }(e3, t4);
            })) {
              case 1:
                return t3;
              case 2:
                return "'" + t3.replace(/'/g, "''") + "'";
              case 3:
                return "|" + x2(t3, e3.indent) + w2(f(t3, o2));
              case 4:
                return ">" + x2(t3, e3.indent) + w2(f(function(e4, t4) {
                  var r3, n3, i3 = /(\n+)([^\n]*)/g, o3 = (s5 = e4.indexOf("\n"), s5 = s5 !== -1 ? s5 : e4.length, i3.lastIndex = s5, E2(e4.slice(0, s5), t4)), a5 = e4[0] === "\n" || e4[0] === " ";
                  var s5;
                  for (; n3 = i3.exec(e4); ) {
                    var u3 = n3[1], l2 = n3[2];
                    r3 = l2[0] === " ", o3 += u3 + (a5 || r3 || l2 === "" ? "" : "\n") + E2(l2, t4), a5 = r3;
                  }
                  return o3;
                }(t3, a4), o2));
              case 5:
                return '"' + function(e4) {
                  for (var t4, r3, n3, i3 = "", o3 = 0; o3 < e4.length; o3++)
                    (t4 = e4.charCodeAt(o3)) >= 55296 && t4 <= 56319 && (r3 = e4.charCodeAt(o3 + 1)) >= 56320 && r3 <= 57343 ? (i3 += h3(1024 * (t4 - 55296) + r3 - 56320 + 65536), o3++) : (n3 = l[t4], i3 += !n3 && y3(t4) ? e4[o3] : n3 || h3(t4));
                  return i3;
                }(t3) + '"';
              default:
                throw new i2("impossible error: invalid scalar style");
            }
          }();
        }
        function x2(e3, t3) {
          var r2 = _(e3) ? String(t3) : "", n2 = e3[e3.length - 1] === "\n";
          return r2 + (n2 && (e3[e3.length - 2] === "\n" || e3 === "\n") ? "+" : n2 ? "" : "-") + "\n";
        }
        function w2(e3) {
          return e3[e3.length - 1] === "\n" ? e3.slice(0, -1) : e3;
        }
        function E2(e3, t3) {
          if (e3 === "" || e3[0] === " ")
            return e3;
          for (var r2, n2, i3 = / [^ ]/g, o2 = 0, a4 = 0, s4 = 0, u3 = ""; r2 = i3.exec(e3); )
            (s4 = r2.index) - o2 > t3 && (n2 = a4 > o2 ? a4 : s4, u3 += "\n" + e3.slice(o2, n2), o2 = n2 + 1), a4 = s4;
          return u3 += "\n", e3.length - o2 > t3 && a4 > o2 ? u3 += e3.slice(o2, a4) + "\n" + e3.slice(a4 + 1) : u3 += e3.slice(o2), u3.slice(1);
        }
        function D2(e3, t3, r2) {
          var n2, o2, a4, l2, c3, h4;
          for (a4 = 0, l2 = (o2 = r2 ? e3.explicitTypes : e3.implicitTypes).length; a4 < l2; a4 += 1)
            if (((c3 = o2[a4]).instanceOf || c3.predicate) && (!c3.instanceOf || typeof t3 == "object" && t3 instanceof c3.instanceOf) && (!c3.predicate || c3.predicate(t3))) {
              if (e3.tag = r2 ? c3.tag : "?", c3.represent) {
                if (h4 = e3.styleMap[c3.tag] || c3.defaultStyle, s3.call(c3.represent) === "[object Function]")
                  n2 = c3.represent(t3, h4);
                else {
                  if (!u2.call(c3.represent, h4))
                    throw new i2("!<" + c3.tag + '> tag resolver accepts not "' + h4 + '" style');
                  n2 = c3.represent[h4](t3, h4);
                }
                e3.dump = n2;
              }
              return true;
            }
          return false;
        }
        function S3(e3, t3, r2, n2, o2, a4) {
          e3.tag = null, e3.dump = r2, D2(e3, r2, false) || D2(e3, r2, true);
          var u3 = s3.call(e3.dump);
          n2 && (n2 = e3.flowLevel < 0 || e3.flowLevel > t3);
          var l2, c3, h4 = u3 === "[object Object]" || u3 === "[object Array]";
          if (h4 && (c3 = (l2 = e3.duplicates.indexOf(r2)) !== -1), (e3.tag !== null && e3.tag !== "?" || c3 || e3.indent !== 2 && t3 > 0) && (o2 = false), c3 && e3.usedDuplicates[l2])
            e3.dump = "*ref_" + l2;
          else {
            if (h4 && c3 && !e3.usedDuplicates[l2] && (e3.usedDuplicates[l2] = true), u3 === "[object Object]")
              n2 && Object.keys(e3.dump).length !== 0 ? (!function(e4, t4, r3, n3) {
                var o3, a5, s4, u4, l3, c4, h5 = "", p3 = e4.tag, f2 = Object.keys(r3);
                if (e4.sortKeys === true)
                  f2.sort();
                else if (typeof e4.sortKeys == "function")
                  f2.sort(e4.sortKeys);
                else if (e4.sortKeys)
                  throw new i2("sortKeys must be a boolean or a function");
                for (o3 = 0, a5 = f2.length; o3 < a5; o3 += 1)
                  c4 = "", n3 && o3 === 0 || (c4 += d3(e4, t4)), u4 = r3[s4 = f2[o3]], S3(e4, t4 + 1, s4, true, true, true) && ((l3 = e4.tag !== null && e4.tag !== "?" || e4.dump && e4.dump.length > 1024) && (e4.dump && e4.dump.charCodeAt(0) === 10 ? c4 += "?" : c4 += "? "), c4 += e4.dump, l3 && (c4 += d3(e4, t4)), S3(e4, t4 + 1, u4, true, l3) && (e4.dump && e4.dump.charCodeAt(0) === 10 ? c4 += ":" : c4 += ": ", h5 += c4 += e4.dump));
                e4.tag = p3, e4.dump = h5 || "{}";
              }(e3, t3, e3.dump, o2), c3 && (e3.dump = "&ref_" + l2 + e3.dump)) : (!function(e4, t4, r3) {
                var n3, i3, o3, a5, s4, u4 = "", l3 = e4.tag, c4 = Object.keys(r3);
                for (n3 = 0, i3 = c4.length; n3 < i3; n3 += 1)
                  s4 = "", n3 !== 0 && (s4 += ", "), e4.condenseFlow && (s4 += '"'), a5 = r3[o3 = c4[n3]], S3(e4, t4, o3, false, false) && (e4.dump.length > 1024 && (s4 += "? "), s4 += e4.dump + (e4.condenseFlow ? '"' : "") + ":" + (e4.condenseFlow ? "" : " "), S3(e4, t4, a5, false, false) && (u4 += s4 += e4.dump));
                e4.tag = l3, e4.dump = "{" + u4 + "}";
              }(e3, t3, e3.dump), c3 && (e3.dump = "&ref_" + l2 + " " + e3.dump));
            else if (u3 === "[object Array]") {
              var p2 = e3.noArrayIndent && t3 > 0 ? t3 - 1 : t3;
              n2 && e3.dump.length !== 0 ? (!function(e4, t4, r3, n3) {
                var i3, o3, a5 = "", s4 = e4.tag;
                for (i3 = 0, o3 = r3.length; i3 < o3; i3 += 1)
                  S3(e4, t4 + 1, r3[i3], true, true) && (n3 && i3 === 0 || (a5 += d3(e4, t4)), e4.dump && e4.dump.charCodeAt(0) === 10 ? a5 += "-" : a5 += "- ", a5 += e4.dump);
                e4.tag = s4, e4.dump = a5 || "[]";
              }(e3, p2, e3.dump, o2), c3 && (e3.dump = "&ref_" + l2 + e3.dump)) : (!function(e4, t4, r3) {
                var n3, i3, o3 = "", a5 = e4.tag;
                for (n3 = 0, i3 = r3.length; n3 < i3; n3 += 1)
                  S3(e4, t4, r3[n3], false, false) && (n3 !== 0 && (o3 += "," + (e4.condenseFlow ? "" : " ")), o3 += e4.dump);
                e4.tag = a5, e4.dump = "[" + o3 + "]";
              }(e3, p2, e3.dump), c3 && (e3.dump = "&ref_" + l2 + " " + e3.dump));
            } else {
              if (u3 !== "[object String]") {
                if (e3.skipInvalid)
                  return false;
                throw new i2("unacceptable kind of an object to dump " + u3);
              }
              e3.tag !== "?" && b2(e3, e3.dump, t3, a4);
            }
            e3.tag !== null && e3.tag !== "?" && (e3.dump = "!<" + e3.tag + "> " + e3.dump);
          }
          return true;
        }
        function C(e3, t3) {
          var r2, n2, i3 = [], o2 = [];
          for (function e4(t4, r3, n3) {
            var i4, o3, a4;
            if (t4 !== null && typeof t4 == "object")
              if ((o3 = r3.indexOf(t4)) !== -1)
                n3.indexOf(o3) === -1 && n3.push(o3);
              else if (r3.push(t4), Array.isArray(t4))
                for (o3 = 0, a4 = t4.length; o3 < a4; o3 += 1)
                  e4(t4[o3], r3, n3);
              else
                for (i4 = Object.keys(t4), o3 = 0, a4 = i4.length; o3 < a4; o3 += 1)
                  e4(t4[i4[o3]], r3, n3);
          }(e3, i3, o2), r2 = 0, n2 = o2.length; r2 < n2; r2 += 1)
            t3.duplicates.push(i3[o2[r2]]);
          t3.usedDuplicates = new Array(n2);
        }
        function A(e3, t3) {
          var r2 = new p(t3 = t3 || {});
          return r2.noRefs || C(e3, r2), S3(r2, 0, e3, true, true) ? r2.dump + "\n" : "";
        }
        e2.exports.dump = A, e2.exports.safeDump = function(e3, t3) {
          return A(e3, n.extend({ schema: a3 }, t3));
        };
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(64), r(19), r(65), r(20), r(68), r(92), r(144), r(22), r(94), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a3 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(91), u2 = r(1), l = r(183), c2 = r(0), h3 = r(7), p = r(95), f = r(69), d3 = r(3), m3 = r(305), y3 = r(306), v = r(307), _ = function(e3) {
          function t3(t4, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e3.call(this) || this;
            return n2._hasDeclaration = false, n2._docTypeName = "", n2._hasDocumentElement = false, n2._currentElementSerialized = false, n2._openTags = [], n2._ended = false, n2._fragment = r2, n2._options = u2.applyDefaults(t4 || {}, s3.DefaultXMLBuilderCBOptions), n2._builderOptions = { defaultNamespace: n2._options.defaultNamespace, namespaceAlias: n2._options.namespaceAlias }, n2._options.format === "json" ? n2._writer = new y3.JSONCBWriter(n2._options) : n2._options.format === "yaml" ? n2._writer = new v.YAMLCBWriter(n2._options) : n2._writer = new m3.XMLCBWriter(n2._options), n2._options.data !== void 0 && n2.on("data", n2._options.data), n2._options.end !== void 0 && n2.on("end", n2._options.end), n2._options.error !== void 0 && n2.on("error", n2._options.error), n2._prefixMap = new p.NamespacePrefixMap(), n2._prefixMap.set("xml", h3.namespace.XML), n2._prefixIndex = { value: 1 }, n2._push(n2._writer.frontMatter()), n2;
          }
          return i2(t3, e3), t3.prototype.ele = function(e4, t4, r2) {
            var n2, i3;
            if (u2.isObject(e4) || u2.isString(e4) && (/^\s*</.test(e4) || /^\s*[\{\[]/.test(e4) || /^(\s*|(#.*)|(%.*))*---/.test(e4))) {
              var a4 = l.fragment().set(this._options);
              try {
                a4.ele(e4);
              } catch (e5) {
                return this.emit("error", e5), this;
              }
              try {
                for (var s4 = o(a4.node.childNodes), c3 = s4.next(); !c3.done; c3 = s4.next()) {
                  var h4 = c3.value;
                  this._fromNode(h4);
                }
              } catch (e5) {
                n2 = { error: e5 };
              } finally {
                try {
                  c3 && !c3.done && (i3 = s4.return) && i3.call(s4);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              return this;
            }
            if (this._serializeOpenTag(true), !this._fragment && this._hasDocumentElement && this._writer.level === 0)
              return this.emit("error", new Error("Document cannot have multiple document element nodes.")), this;
            try {
              this._currentElement = l.fragment(this._builderOptions).ele(e4, t4, r2);
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._fragment || this._hasDocumentElement || this._docTypeName === "" || this._currentElement.node._qualifiedName === this._docTypeName ? (this._currentElementSerialized = false, this._fragment || (this._hasDocumentElement = true), this) : (this.emit("error", new Error("Document element name does not match DocType declaration name.")), this);
          }, t3.prototype.att = function(e4, t4, r2) {
            if (this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert an attribute node as child of a document node.")), this;
            try {
              this._currentElement.att(e4, t4, r2);
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this;
          }, t3.prototype.com = function(e4) {
            var t4;
            this._serializeOpenTag(true);
            try {
              t4 = l.fragment(this._builderOptions).com(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return !this._options.wellFormed || c2.xml_isLegalChar(t4.data) && t4.data.indexOf("--") === -1 && !t4.data.endsWith("-") ? (this._push(this._writer.comment(t4.data)), this) : (this.emit("error", new Error("Comment data contains invalid characters (well-formed required).")), this);
          }, t3.prototype.txt = function(e4) {
            if (!this._fragment && this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert a text node as child of a document node.")), this;
            var t4;
            this._serializeOpenTag(true);
            try {
              t4 = l.fragment(this._builderOptions).txt(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            if (this._options.wellFormed && !c2.xml_isLegalChar(t4.data))
              return this.emit("error", new Error("Text data contains invalid characters (well-formed required).")), this;
            var r2 = t4.data.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            return this._push(this._writer.text(r2)), this;
          }, t3.prototype.ins = function(e4, t4) {
            var r2;
            t4 === void 0 && (t4 = ""), this._serializeOpenTag(true);
            try {
              r2 = l.fragment(this._builderOptions).ins(e4, t4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._options.wellFormed && (r2.target.indexOf(":") !== -1 || /^xml$/i.test(r2.target)) ? (this.emit("error", new Error("Processing instruction target contains invalid characters (well-formed required).")), this) : this._options.wellFormed && !c2.xml_isLegalChar(r2.data) ? (this.emit("error", Error("Processing instruction data contains invalid characters (well-formed required).")), this) : (this._push(this._writer.instruction(r2.target, r2.data)), this);
          }, t3.prototype.dat = function(e4) {
            var t4;
            this._serializeOpenTag(true);
            try {
              t4 = l.fragment(this._builderOptions).dat(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._push(this._writer.cdata(t4.data)), this;
          }, t3.prototype.dec = function(e4) {
            return e4 === void 0 && (e4 = { version: "1.0" }), this._fragment ? (this.emit("error", Error("Cannot insert an XML declaration into a document fragment.")), this) : this._hasDeclaration ? (this.emit("error", Error("XML declaration is already inserted.")), this) : (this._push(this._writer.declaration(e4.version || "1.0", e4.encoding, e4.standalone)), this._hasDeclaration = true, this);
          }, t3.prototype.dtd = function(e4) {
            if (this._fragment)
              return this.emit("error", Error("Cannot insert a DocType declaration into a document fragment.")), this;
            if (this._docTypeName !== "")
              return this.emit("error", new Error("DocType declaration is already inserted.")), this;
            if (this._hasDocumentElement)
              return this.emit("error", new Error("Cannot insert DocType declaration after document element.")), this;
            var t4;
            try {
              t4 = l.create().dtd(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._options.wellFormed && !c2.xml_isPubidChar(t4.publicId) ? (this.emit("error", new Error("DocType public identifier does not match PubidChar construct (well-formed required).")), this) : this._options.wellFormed && (!c2.xml_isLegalChar(t4.systemId) || t4.systemId.indexOf('"') !== -1 && t4.systemId.indexOf("'") !== -1) ? (this.emit("error", new Error("DocType system identifier contains invalid characters (well-formed required).")), this) : (this._docTypeName = e4.name, this._push(this._writer.docType(e4.name, t4.publicId, t4.systemId)), this);
          }, t3.prototype.import = function(e4) {
            var t4, r2, n2 = l.fragment().set(this._options);
            try {
              n2.import(e4);
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            try {
              for (var i3 = o(n2.node.childNodes), a4 = i3.next(); !a4.done; a4 = i3.next()) {
                var s4 = a4.value;
                this._fromNode(s4);
              }
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (r2 = i3.return) && r2.call(i3);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            return this;
          }, t3.prototype.up = function() {
            return this._serializeOpenTag(false), this._serializeCloseTag(), this;
          }, t3.prototype.end = function() {
            for (this._serializeOpenTag(false); this._openTags.length > 0; )
              this._serializeCloseTag();
            return this._push(null), this;
          }, t3.prototype._serializeOpenTag = function(e4) {
            if (!this._currentElementSerialized && this._currentElement !== void 0) {
              var r2 = this._currentElement.node;
              if (!this._options.wellFormed || r2.localName.indexOf(":") === -1 && c2.xml_isName(r2.localName)) {
                var n2 = "", i3 = false, o2 = this._prefixMap.copy(), a4 = {}, s4 = this._recordNamespaceInformation(r2, o2, a4), u3 = this._openTags.length === 0 ? null : this._openTags[this._openTags.length - 1][1], l2 = r2.namespaceURI;
                if (l2 === null && (l2 = u3), u3 === l2)
                  s4 !== null && (i3 = true), n2 = l2 === h3.namespace.XML ? "xml:" + r2.localName : r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2));
                else {
                  var p2 = r2.prefix, f2 = null;
                  if (p2 === null && l2 === s4 || (f2 = o2.get(p2, l2)), p2 === "xmlns") {
                    if (this._options.wellFormed)
                      return void this.emit("error", new Error("An element cannot have the 'xmlns' prefix (well-formed required)."));
                    f2 = p2;
                  }
                  f2 !== null ? (n2 = f2 + ":" + r2.localName, s4 !== null && s4 !== h3.namespace.XML && (u3 = s4 || null), this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2))) : p2 !== null ? (p2 in a4 && (p2 = this._generatePrefix(l2, o2, this._prefixIndex)), o2.set(p2, l2), n2 += p2 + ":" + r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns:" + p2, this._serializeAttributeValue(l2, this._options.wellFormed))), s4 !== null && (u3 = s4 || null)) : s4 === null || s4 !== null && s4 !== l2 ? (i3 = true, n2 += r2.localName, u3 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns", this._serializeAttributeValue(l2, this._options.wellFormed)))) : (n2 += r2.localName, u3 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)));
                }
                this._serializeAttributes(r2, o2, this._prefixIndex, a4, i3, this._options.wellFormed);
                var d4 = l2 === h3.namespace.HTML;
                d4 && !e4 && t3._VoidElementNames.has(r2.localName) ? (this._push(this._writer.openTagEnd(n2, true, true)), this._writer.endElement(n2)) : d4 || e4 ? this._push(this._writer.openTagEnd(n2, false, false)) : (this._push(this._writer.openTagEnd(n2, true, false)), this._writer.endElement(n2)), this._currentElementSerialized = true, this._openTags.push([n2, u3, this._prefixMap, e4]), this._isPrefixMapModified(this._prefixMap, o2) && (this._prefixMap = o2), this._writer.level++;
              } else
                this.emit("error", new Error("Node local name contains invalid characters (well-formed required)."));
            }
          }, t3.prototype._serializeCloseTag = function() {
            this._writer.level--;
            var e4 = this._openTags.pop();
            if (e4 !== void 0) {
              var t4 = a3(e4, 4), r2 = t4[0], n2 = (t4[1], t4[2]), i3 = t4[3];
              this._prefixMap = n2, i3 && (this._push(this._writer.closeTag(r2)), this._writer.endElement(r2));
            } else
              this.emit("error", new Error("Last element is undefined."));
          }, t3.prototype._push = function(e4) {
            e4 === null ? (this._ended = true, this.emit("end")) : this._ended ? this.emit("error", new Error("Cannot push to ended stream.")) : e4.length !== 0 && (this._writer.hasData = true, this.emit("data", e4, this._writer.level));
          }, t3.prototype._fromNode = function(e4) {
            var t4, r2, n2, i3;
            if (d3.Guard.isElementNode(e4)) {
              var a4 = e4.prefix ? e4.prefix + ":" + e4.localName : e4.localName;
              e4.namespaceURI !== null ? this.ele(e4.namespaceURI, a4) : this.ele(a4);
              try {
                for (var s4 = o(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                  var l2 = u3.value, c3 = l2.prefix ? l2.prefix + ":" + l2.localName : l2.localName;
                  l2.namespaceURI !== null ? this.att(l2.namespaceURI, c3, l2.value) : this.att(c3, l2.value);
                }
              } catch (e5) {
                t4 = { error: e5 };
              } finally {
                try {
                  u3 && !u3.done && (r2 = s4.return) && r2.call(s4);
                } finally {
                  if (t4)
                    throw t4.error;
                }
              }
              try {
                for (var h4 = o(e4.childNodes), p2 = h4.next(); !p2.done; p2 = h4.next()) {
                  var f2 = p2.value;
                  this._fromNode(f2);
                }
              } catch (e5) {
                n2 = { error: e5 };
              } finally {
                try {
                  p2 && !p2.done && (i3 = h4.return) && i3.call(h4);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              this.up();
            } else
              d3.Guard.isExclusiveTextNode(e4) && e4.data ? this.txt(e4.data) : d3.Guard.isCommentNode(e4) ? this.com(e4.data) : d3.Guard.isCDATASectionNode(e4) ? this.dat(e4.data) : d3.Guard.isProcessingInstructionNode(e4) && this.ins(e4.target, e4.data);
          }, t3.prototype._serializeAttributes = function(e4, t4, r2, n2, i3, a4) {
            var s4, u3, l2 = a4 ? new f.LocalNameSet() : void 0;
            try {
              for (var p2 = o(e4.attributes), d4 = p2.next(); !d4.done; d4 = p2.next()) {
                var m4 = d4.value;
                if (a4 || i3 || m4.namespaceURI !== null) {
                  if (a4 && l2 && l2.has(m4.namespaceURI, m4.localName))
                    return void this.emit("error", new Error("Element contains duplicate attributes (well-formed required)."));
                  a4 && l2 && l2.set(m4.namespaceURI, m4.localName);
                  var y4 = m4.namespaceURI, v2 = null;
                  if (y4 !== null)
                    if (v2 = t4.get(m4.prefix, y4), y4 === h3.namespace.XMLNS) {
                      if (m4.value === h3.namespace.XML || m4.prefix === null && i3 || m4.prefix !== null && (!(m4.localName in n2) || n2[m4.localName] !== m4.value) && t4.has(m4.localName, m4.value))
                        continue;
                      if (a4 && m4.value === h3.namespace.XMLNS)
                        return void this.emit("error", new Error("XMLNS namespace is reserved (well-formed required)."));
                      if (a4 && m4.value === "")
                        return void this.emit("error", new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required)."));
                      m4.prefix === "xmlns" && (v2 = "xmlns");
                    } else
                      v2 === null && (v2 = m4.prefix === null || t4.hasPrefix(m4.prefix) && !t4.has(m4.prefix, y4) ? this._generatePrefix(y4, t4, r2) : m4.prefix, this._push(this._writer.attribute("xmlns:" + v2, this._serializeAttributeValue(y4, this._options.wellFormed))));
                  if (a4 && (m4.localName.indexOf(":") !== -1 || !c2.xml_isName(m4.localName) || m4.localName === "xmlns" && y4 === null))
                    return void this.emit("error", new Error("Attribute local name contains invalid characters (well-formed required)."));
                  this._push(this._writer.attribute((v2 !== null ? v2 + ":" : "") + m4.localName, this._serializeAttributeValue(m4.value, this._options.wellFormed)));
                } else
                  this._push(this._writer.attribute(m4.localName, this._serializeAttributeValue(m4.value, this._options.wellFormed)));
              }
            } catch (e5) {
              s4 = { error: e5 };
            } finally {
              try {
                d4 && !d4.done && (u3 = p2.return) && u3.call(p2);
              } finally {
                if (s4)
                  throw s4.error;
              }
            }
          }, t3.prototype._serializeAttributeValue = function(e4, t4) {
            return t4 && e4 !== null && !c2.xml_isLegalChar(e4) ? (this.emit("error", new Error("Invalid characters in attribute value.")), "") : e4 === null ? "" : e4.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, t3.prototype._recordNamespaceInformation = function(e4, t4, r2) {
            var n2, i3, a4 = null;
            try {
              for (var s4 = o(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var l2 = u3.value, c3 = l2.namespaceURI, p2 = l2.prefix;
                if (c3 === h3.namespace.XMLNS) {
                  if (p2 === null) {
                    a4 = l2.value;
                    continue;
                  }
                  var f2 = l2.localName, d4 = l2.value;
                  if (d4 === h3.namespace.XML)
                    continue;
                  if (d4 === "" && (d4 = null), t4.has(f2, d4))
                    continue;
                  t4.set(f2, d4), r2[f2] = d4 || "";
                }
              }
            } catch (e5) {
              n2 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return a4;
          }, t3.prototype._generatePrefix = function(e4, t4, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t4.set(n2, e4), n2;
          }, t3.prototype._isPrefixMapModified = function(e4, t4) {
            var r2 = e4._items, n2 = t4._items, i3 = e4._nullItems, o2 = t4._nullItems;
            for (var a4 in n2) {
              var s4 = r2[a4];
              if (s4 === void 0)
                return true;
              var u3 = n2[a4];
              if (s4.length !== u3.length)
                return true;
              for (var l2 = 0; l2 < s4.length; l2++)
                if (s4[l2] !== u3[l2])
                  return true;
            }
            if (i3.length !== o2.length)
              return true;
            for (l2 = 0; l2 < i3.length; l2++)
              if (i3[l2] !== o2[l2])
                return true;
            return false;
          }, t3._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), t3;
        }(r(308).EventEmitter);
        t2.XMLBuilderCBImpl = _;
      }, function(e2, t2, r) {
        "use strict";
        r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this, t4) || this;
            return r2._lineLength = 0, r2;
          }
          return i2(t3, e3), t3.prototype.frontMatter = function() {
            return "";
          }, t3.prototype.declaration = function(e4, t4, r2) {
            var n2 = this._beginLine() + "<?xml";
            return n2 += ' version="' + e4 + '"', t4 !== void 0 && (n2 += ' encoding="' + t4 + '"'), r2 !== void 0 && (n2 += ' standalone="' + (r2 ? "yes" : "no") + '"'), n2 += "?>";
          }, t3.prototype.docType = function(e4, t4, r2) {
            var n2 = this._beginLine();
            return n2 += t4 && r2 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '" "' + r2 + '">' : t4 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '">' : r2 ? "<!DOCTYPE " + e4 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e4 + ">";
          }, t3.prototype.comment = function(e4) {
            return this._beginLine() + "<!--" + e4 + "-->";
          }, t3.prototype.text = function(e4) {
            return this._beginLine() + e4;
          }, t3.prototype.instruction = function(e4, t4) {
            return t4 ? this._beginLine() + "<?" + e4 + " " + t4 + "?>" : this._beginLine() + "<?" + e4 + "?>";
          }, t3.prototype.cdata = function(e4) {
            return this._beginLine() + "<![CDATA[" + e4 + "]]>";
          }, t3.prototype.openTagBegin = function(e4) {
            return this._lineLength += 1 + e4.length, this._beginLine() + "<" + e4;
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            return r2 ? " />" : t4 ? this._writerOptions.allowEmptyTags ? "></" + e4 + ">" : this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">";
          }, t3.prototype.closeTag = function(e4) {
            return this._beginLine() + "</" + e4 + ">";
          }, t3.prototype.attribute = function(e4, t4) {
            var r2 = e4 + '="' + t4 + '"';
            return this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._lineLength + 1 + r2.length > this._writerOptions.width ? (r2 = this._beginLine() + this._indent(1) + r2, this._lineLength = r2.length, r2) : (this._lineLength += 1 + r2.length, " " + r2);
          }, t3.prototype.beginElement = function(e4) {
          }, t3.prototype.endElement = function(e4) {
          }, t3.prototype._beginLine = function() {
            if (this._writerOptions.prettyPrint) {
              var e4 = (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level);
              return this._lineLength = e4.length, e4;
            }
            return "";
          }, t3.prototype._indent = function(e4) {
            return e4 <= 0 ? "" : this._writerOptions.indent.repeat(e4);
          }, t3;
        }(r(114).BaseCBWriter);
        t2.XMLCBWriter = o;
      }, function(e2, t2, r) {
        "use strict";
        r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this, t4) || this;
            return r2._hasChildren = [], r2._additionalLevel = 0, r2;
          }
          return i2(t3, e3), t3.prototype.frontMatter = function() {
            return "";
          }, t3.prototype.declaration = function(e4, t4, r2) {
            return "";
          }, t3.prototype.docType = function(e4, t4, r2) {
            return "";
          }, t3.prototype.comment = function(e4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.comment) + this._sep() + this._val(e4) + this._sep() + "}";
          }, t3.prototype.text = function(e4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.text) + this._sep() + this._val(e4) + this._sep() + "}";
          }, t3.prototype.instruction = function(e4, t4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.ins) + this._sep() + this._val(t4 ? e4 + " " + t4 : e4) + this._sep() + "}";
          }, t3.prototype.cdata = function(e4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.cdata) + this._sep() + this._val(e4) + this._sep() + "}";
          }, t3.prototype.attribute = function(e4, t4) {
            return this._comma() + this._beginLine(1) + "{" + this._sep() + this._key(this._builderOptions.convert.att + e4) + this._sep() + this._val(t4) + this._sep() + "}";
          }, t3.prototype.openTagBegin = function(e4) {
            var t4 = this._comma() + this._beginLine() + "{" + this._sep() + this._key(e4) + this._sep() + "{";
            return this._additionalLevel++, this.hasData = true, t4 += this._beginLine() + this._key(this._builderOptions.convert.text) + this._sep() + "[", this._hasChildren.push(false), t4;
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            if (t4) {
              var n2 = this._sep() + "]";
              return this._additionalLevel--, n2 += this._beginLine() + "}" + this._sep() + "}";
            }
            return "";
          }, t3.prototype.closeTag = function(e4) {
            var t4 = this._beginLine() + "]";
            return this._additionalLevel--, t4 += this._beginLine() + "}" + this._sep() + "}";
          }, t3.prototype.beginElement = function(e4) {
          }, t3.prototype.endElement = function(e4) {
            this._hasChildren.pop();
          }, t3.prototype._beginLine = function(e4) {
            return e4 === void 0 && (e4 = 0), this._writerOptions.prettyPrint ? (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level + e4) : "";
          }, t3.prototype._indent = function(e4) {
            return e4 + this._additionalLevel <= 0 ? "" : this._writerOptions.indent.repeat(e4 + this._additionalLevel);
          }, t3.prototype._comma = function() {
            var e4 = this._hasChildren[this._hasChildren.length - 1] ? "," : "";
            return this._hasChildren.length > 0 && (this._hasChildren[this._hasChildren.length - 1] = true), e4;
          }, t3.prototype._sep = function() {
            return this._writerOptions.prettyPrint ? " " : "";
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3;
        }(r(114).BaseCBWriter);
        t2.JSONCBWriter = o;
      }, function(e2, t2, r) {
        "use strict";
        r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this, t4) || this;
            if (r2._rootWritten = false, r2._additionalLevel = 0, t4.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (t4.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return r2;
          }
          return i2(t3, e3), t3.prototype.frontMatter = function() {
            return this._beginLine() + "---";
          }, t3.prototype.declaration = function(e4, t4, r2) {
            return "";
          }, t3.prototype.docType = function(e4, t4, r2) {
            return "";
          }, t3.prototype.comment = function(e4) {
            return this._beginLine() + this._key(this._builderOptions.convert.comment) + " " + this._val(e4);
          }, t3.prototype.text = function(e4) {
            return this._beginLine() + this._key(this._builderOptions.convert.text) + " " + this._val(e4);
          }, t3.prototype.instruction = function(e4, t4) {
            return this._beginLine() + this._key(this._builderOptions.convert.ins) + " " + this._val(t4 ? e4 + " " + t4 : e4);
          }, t3.prototype.cdata = function(e4) {
            return this._beginLine() + this._key(this._builderOptions.convert.cdata) + " " + this._val(e4);
          }, t3.prototype.attribute = function(e4, t4) {
            this._additionalLevel++;
            var r2 = this._beginLine() + this._key(this._builderOptions.convert.att + e4) + " " + this._val(t4);
            return this._additionalLevel--, r2;
          }, t3.prototype.openTagBegin = function(e4) {
            var t4 = this._beginLine() + this._key(e4);
            return this._rootWritten || (this._rootWritten = true), this.hasData = true, this._additionalLevel++, t4 += this._beginLine(true) + this._key(this._builderOptions.convert.text);
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            return t4 ? " " + this._val("") : "";
          }, t3.prototype.closeTag = function(e4) {
            return this._additionalLevel--, "";
          }, t3.prototype.beginElement = function(e4) {
          }, t3.prototype.endElement = function(e4) {
          }, t3.prototype._beginLine = function(e4) {
            return e4 === void 0 && (e4 = false), (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level, e4);
          }, t3.prototype._indent = function(e4, t4) {
            if (e4 + this._additionalLevel <= 0)
              return "";
            var r2 = this._writerOptions.indent.repeat(e4 + this._additionalLevel);
            return !t4 && this._rootWritten ? r2.substr(0, r2.length - 2) + "-" + r2.substr(-1, 1) : r2;
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3;
        }(r(114).BaseCBWriter);
        t2.YAMLCBWriter = o;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = typeof Reflect == "object" ? Reflect : null, o = i2 && typeof i2.apply == "function" ? i2.apply : function(e3, t3, r2) {
          return Function.prototype.apply.call(e3, t3, r2);
        };
        n = i2 && typeof i2.ownKeys == "function" ? i2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
          return Object.getOwnPropertyNames(e3).concat(Object.getOwnPropertySymbols(e3));
        } : function(e3) {
          return Object.getOwnPropertyNames(e3);
        };
        var a3 = Number.isNaN || function(e3) {
          return e3 != e3;
        };
        function s3() {
          s3.init.call(this);
        }
        e2.exports = s3, s3.EventEmitter = s3, s3.prototype._events = void 0, s3.prototype._eventsCount = 0, s3.prototype._maxListeners = void 0;
        var u2 = 10;
        function l(e3) {
          if (typeof e3 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e3);
        }
        function c2(e3) {
          return e3._maxListeners === void 0 ? s3.defaultMaxListeners : e3._maxListeners;
        }
        function h3(e3, t3, r2, n2) {
          var i3, o2, a4, s4;
          if (l(r2), (o2 = e3._events) === void 0 ? (o2 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (o2.newListener !== void 0 && (e3.emit("newListener", t3, r2.listener ? r2.listener : r2), o2 = e3._events), a4 = o2[t3]), a4 === void 0)
            a4 = o2[t3] = r2, ++e3._eventsCount;
          else if (typeof a4 == "function" ? a4 = o2[t3] = n2 ? [r2, a4] : [a4, r2] : n2 ? a4.unshift(r2) : a4.push(r2), (i3 = c2(e3)) > 0 && a4.length > i3 && !a4.warned) {
            a4.warned = true;
            var u3 = new Error("Possible EventEmitter memory leak detected. " + a4.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u3.name = "MaxListenersExceededWarning", u3.emitter = e3, u3.type = t3, u3.count = a4.length, s4 = u3, console && console.warn && console.warn(s4);
          }
          return e3;
        }
        function p() {
          if (!this.fired)
            return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
        }
        function f(e3, t3, r2) {
          var n2 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: r2 }, i3 = p.bind(n2);
          return i3.listener = r2, n2.wrapFn = i3, i3;
        }
        function d3(e3, t3, r2) {
          var n2 = e3._events;
          if (n2 === void 0)
            return [];
          var i3 = n2[t3];
          return i3 === void 0 ? [] : typeof i3 == "function" ? r2 ? [i3.listener || i3] : [i3] : r2 ? function(e4) {
            for (var t4 = new Array(e4.length), r3 = 0; r3 < t4.length; ++r3)
              t4[r3] = e4[r3].listener || e4[r3];
            return t4;
          }(i3) : y3(i3, i3.length);
        }
        function m3(e3) {
          var t3 = this._events;
          if (t3 !== void 0) {
            var r2 = t3[e3];
            if (typeof r2 == "function")
              return 1;
            if (r2 !== void 0)
              return r2.length;
          }
          return 0;
        }
        function y3(e3, t3) {
          for (var r2 = new Array(t3), n2 = 0; n2 < t3; ++n2)
            r2[n2] = e3[n2];
          return r2;
        }
        Object.defineProperty(s3, "defaultMaxListeners", { enumerable: true, get: function() {
          return u2;
        }, set: function(e3) {
          if (typeof e3 != "number" || e3 < 0 || a3(e3))
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + ".");
          u2 = e3;
        } }), s3.init = function() {
          this._events !== void 0 && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }, s3.prototype.setMaxListeners = function(e3) {
          if (typeof e3 != "number" || e3 < 0 || a3(e3))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + ".");
          return this._maxListeners = e3, this;
        }, s3.prototype.getMaxListeners = function() {
          return c2(this);
        }, s3.prototype.emit = function(e3) {
          for (var t3 = [], r2 = 1; r2 < arguments.length; r2++)
            t3.push(arguments[r2]);
          var n2 = e3 === "error", i3 = this._events;
          if (i3 !== void 0)
            n2 = n2 && i3.error === void 0;
          else if (!n2)
            return false;
          if (n2) {
            var a4;
            if (t3.length > 0 && (a4 = t3[0]), a4 instanceof Error)
              throw a4;
            var s4 = new Error("Unhandled error." + (a4 ? " (" + a4.message + ")" : ""));
            throw s4.context = a4, s4;
          }
          var u3 = i3[e3];
          if (u3 === void 0)
            return false;
          if (typeof u3 == "function")
            o(u3, this, t3);
          else {
            var l2 = u3.length, c3 = y3(u3, l2);
            for (r2 = 0; r2 < l2; ++r2)
              o(c3[r2], this, t3);
          }
          return true;
        }, s3.prototype.addListener = function(e3, t3) {
          return h3(this, e3, t3, false);
        }, s3.prototype.on = s3.prototype.addListener, s3.prototype.prependListener = function(e3, t3) {
          return h3(this, e3, t3, true);
        }, s3.prototype.once = function(e3, t3) {
          return l(t3), this.on(e3, f(this, e3, t3)), this;
        }, s3.prototype.prependOnceListener = function(e3, t3) {
          return l(t3), this.prependListener(e3, f(this, e3, t3)), this;
        }, s3.prototype.removeListener = function(e3, t3) {
          var r2, n2, i3, o2, a4;
          if (l(t3), (n2 = this._events) === void 0)
            return this;
          if ((r2 = n2[e3]) === void 0)
            return this;
          if (r2 === t3 || r2.listener === t3)
            --this._eventsCount == 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete n2[e3], n2.removeListener && this.emit("removeListener", e3, r2.listener || t3));
          else if (typeof r2 != "function") {
            for (i3 = -1, o2 = r2.length - 1; o2 >= 0; o2--)
              if (r2[o2] === t3 || r2[o2].listener === t3) {
                a4 = r2[o2].listener, i3 = o2;
                break;
              }
            if (i3 < 0)
              return this;
            i3 === 0 ? r2.shift() : function(e4, t4) {
              for (; t4 + 1 < e4.length; t4++)
                e4[t4] = e4[t4 + 1];
              e4.pop();
            }(r2, i3), r2.length === 1 && (n2[e3] = r2[0]), n2.removeListener !== void 0 && this.emit("removeListener", e3, a4 || t3);
          }
          return this;
        }, s3.prototype.off = s3.prototype.removeListener, s3.prototype.removeAllListeners = function(e3) {
          var t3, r2, n2;
          if ((r2 = this._events) === void 0)
            return this;
          if (r2.removeListener === void 0)
            return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : r2[e3] !== void 0 && (--this._eventsCount == 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete r2[e3]), this;
          if (arguments.length === 0) {
            var i3, o2 = Object.keys(r2);
            for (n2 = 0; n2 < o2.length; ++n2)
              (i3 = o2[n2]) !== "removeListener" && this.removeAllListeners(i3);
            return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
          }
          if (typeof (t3 = r2[e3]) == "function")
            this.removeListener(e3, t3);
          else if (t3 !== void 0)
            for (n2 = t3.length - 1; n2 >= 0; n2--)
              this.removeListener(e3, t3[n2]);
          return this;
        }, s3.prototype.listeners = function(e3) {
          return d3(this, e3, true);
        }, s3.prototype.rawListeners = function(e3) {
          return d3(this, e3, false);
        }, s3.listenerCount = function(e3, t3) {
          return typeof e3.listenerCount == "function" ? e3.listenerCount(t3) : m3.call(e3, t3);
        }, s3.prototype.listenerCount = m3, s3.prototype.eventNames = function() {
          return this._eventsCount > 0 ? n(this._events) : [];
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(77);
        t2.createCB = function(e3) {
          return new n.XMLBuilderCBImpl(e3);
        }, t2.fragmentCB = function(e3) {
          return new n.XMLBuilderCBImpl(e3, true);
        };
      }]);
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WordpressPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiType: "xml-rpc" /* XML_RPC */,
  endpoint: "",
  saveUserName: false,
  savePassword: false,
  showRibbonIcon: false,
  defaultPostStatus: "draft" /* Draft */
};
var WordpressSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for WordPress plugin" });
    new import_obsidian.Setting(containerEl).setName("WordPress URL").setDesc("Full path of installed WordPress, for example, https://example.com/wordpress").addText((text) => text.setPlaceholder("https://example.com/wordpress").setValue(this.plugin.settings.endpoint).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.endpoint = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("API Type").setDesc("Select which API you want to use.").addDropdown((dropdown) => {
      dropdown.addOption("xml-rpc" /* XML_RPC */, "XML-RPC").addOption("miniOrange" /* RestAPI_miniOrange */, "REST API Authentication by miniOrange").setValue(this.plugin.settings.apiType).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.apiType = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show icon in sidebar").setDesc(`If enabled, a button which opens publish panel will be added to the Obsidian sidebar.
Changes only take effect on reload.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showRibbonIcon = value;
      yield this.plugin.saveSettings();
      this.display();
      this.plugin.updateRibbonIcon();
    })));
    new import_obsidian.Setting(containerEl).setName("Default Post Status").setDesc("Post status which will be published to WordPress.").addDropdown((dropdown) => {
      dropdown.addOption("draft" /* Draft */, "draft").addOption("publish" /* Publish */, "publish").setValue(this.plugin.settings.defaultPostStatus).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.defaultPostStatus = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
  }
};

// src/icons.ts
var import_obsidian2 = require("obsidian");
var icons = {
  "wp-logo": `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <g fill="currentColor">
    <path d="M 7.109375 50 C 7.109375 66.976562 16.976562 81.648438 31.28125 88.601562 L 10.820312 32.542969 C 8.441406 37.878906 7.109375 43.78125 7.109375 50 Z M 7.109375 50 "/>
    <path d="M 78.957031 47.835938 C 78.957031 42.535156 77.054688 38.863281 75.421875 36.003906 C 73.246094 32.472656 71.207031 29.480469 71.207031 25.945312 C 71.207031 22.003906 74.199219 18.332031 78.410156 18.332031 C 78.601562 18.332031 78.78125 18.355469 78.96875 18.367188 C 71.335938 11.375 61.167969 7.105469 50 7.105469 C 35.015625 7.105469 21.832031 14.796875 14.164062 26.441406 C 15.167969 26.472656 16.117188 26.492188 16.921875 26.492188 C 21.410156 26.492188 28.355469 25.949219 28.355469 25.949219 C 30.667969 25.8125 30.941406 29.207031 28.628906 29.480469 C 28.628906 29.480469 26.304688 29.753906 23.722656 29.890625 L 39.339844 76.351562 L 48.726562 48.199219 L 42.042969 29.886719 C 39.734375 29.753906 37.546875 29.480469 37.546875 29.480469 C 35.234375 29.34375 35.507812 25.808594 37.816406 25.945312 C 37.816406 25.945312 44.902344 26.492188 49.117188 26.492188 C 53.601562 26.492188 60.546875 25.945312 60.546875 25.945312 C 62.859375 25.808594 63.132812 29.207031 60.824219 29.480469 C 60.824219 29.480469 58.492188 29.753906 55.914062 29.886719 L 71.414062 75.996094 L 75.691406 61.699219 C 77.546875 55.765625 78.957031 51.507812 78.957031 47.835938 Z M 78.957031 47.835938 "/>
    <path d="M 50.753906 53.75 L 37.882812 91.148438 C 41.726562 92.277344 45.789062 92.894531 50 92.894531 C 54.996094 92.894531 59.785156 92.03125 64.246094 90.464844 C 64.128906 90.28125 64.027344 90.085938 63.941406 89.871094 Z M 50.753906 53.75 "/>
    <path d="M 87.636719 29.417969 C 87.824219 30.785156 87.925781 32.253906 87.925781 33.832031 C 87.925781 38.183594 87.113281 43.074219 84.667969 49.195312 L 71.5625 87.074219 C 84.316406 79.640625 92.894531 65.824219 92.894531 50 C 92.894531 42.542969 90.988281 35.53125 87.636719 29.417969 Z M 87.636719 29.417969 "/>
    <path d="M 50 0 C 22.433594 0 0 22.429688 0 50 C 0 77.570312 22.433594 100 50 100 C 77.570312 100 100.003906 77.570312 100.003906 50 C 100.003906 22.429688 77.570312 0 50 0 Z M 50 97.707031 C 23.695312 97.707031 2.292969 76.304688 2.292969 50 C 2.292969 23.695312 23.695312 2.292969 50 2.292969 C 76.304688 2.292969 97.707031 23.695312 97.707031 50 C 97.707031 76.304688 76.304688 97.707031 50 97.707031 Z M 50 97.707031 "/>
  </g>
</svg>`
};
var addIcons = () => {
  Object.keys(icons).forEach((key) => {
    (0, import_obsidian2.addIcon)(key, icons[key]);
  });
};

// src/xmlrpc-client.ts
var import_obsidian3 = require("obsidian");
var import_xmlbuilder2 = __toESM(require_xmlbuilder2_min());

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var arrayMap_default = arrayMap;

// node_modules/lodash-es/isArray.js
var isArray = Array.isArray;
var isArray_default = isArray;

// node_modules/lodash-es/_baseToString.js
var INFINITY = 1 / 0;
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_default(value)) {
    return arrayMap_default(value, baseToString) + "";
  }
  if (isSymbol_default(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
var baseToString_default = baseToString;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/toFinite.js
var INFINITY2 = 1 / 0;
var MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_default(value);
  if (value === INFINITY2 || value === -INFINITY2) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_default = toFinite;

// node_modules/lodash-es/toInteger.js
function toInteger(value) {
  var result = toFinite_default(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_default = toInteger;

// node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;

// node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e2) {
    }
    try {
      return func + "";
    } catch (e2) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto2 = Function.prototype;
var objectProto3 = Object.prototype;
var funcToString2 = funcProto2.toString;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value)) {
    return false;
  }
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/lodash-es/_nodeUtil.js
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var freeProcess = moduleExports && freeGlobal_default.process;
var nodeUtil = function() {
  try {
    var types = freeModule && freeModule.require && freeModule.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e2) {
  }
}();
var nodeUtil_default = nodeUtil;

// node_modules/lodash-es/_isKey.js
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
var reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_default(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var isKey_default = isKey;

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var hashDelete_default = hashDelete;

// node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto4 = Object.prototype;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty3.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/lodash-es/_hashHas.js
var objectProto5 = Object.prototype;
var hasOwnProperty4 = objectProto5.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
  return this;
}
var hashSet_default = hashSet;

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_default(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var listCacheSet_default = listCacheSet;

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/lodash-es/memoize.js
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
memoize.Cache = MapCache_default;
var memoize_default = memoize;

// node_modules/lodash-es/_memoizeCapped.js
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_default(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var memoizeCapped_default = memoizeCapped;

// node_modules/lodash-es/_stringToPath.js
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match2, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
  });
  return result;
});
var stringToPath_default = stringToPath;

// node_modules/lodash-es/toString.js
function toString(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString;

// node_modules/lodash-es/_castPath.js
function castPath(value, object) {
  if (isArray_default(value)) {
    return value;
  }
  return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
}
var castPath_default = castPath;

// node_modules/lodash-es/_toKey.js
var INFINITY3 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_default(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
}
var toKey_default = toKey;

// node_modules/lodash-es/_baseGet.js
function baseGet(object, path) {
  path = castPath_default(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey_default(path[index++])];
  }
  return index && index == length ? object : void 0;
}
var baseGet_default = baseGet;

// node_modules/lodash-es/get.js
function get(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet_default(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_default = get;

// node_modules/lodash-es/isBoolean.js
var boolTag = "[object Boolean]";
function isBoolean(value) {
  return value === true || value === false || isObjectLike_default(value) && baseGetTag_default(value) == boolTag;
}
var isBoolean_default = isBoolean;

// node_modules/lodash-es/_baseIsDate.js
var dateTag = "[object Date]";
function baseIsDate(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == dateTag;
}
var baseIsDate_default = baseIsDate;

// node_modules/lodash-es/isDate.js
var nodeIsDate = nodeUtil_default && nodeUtil_default.isDate;
var isDate = nodeIsDate ? baseUnary_default(nodeIsDate) : baseIsDate_default;
var isDate_default = isDate;

// node_modules/lodash-es/isInteger.js
function isInteger(value) {
  return typeof value == "number" && value == toInteger_default(value);
}
var isInteger_default = isInteger;

// node_modules/lodash-es/isNumber.js
var numberTag = "[object Number]";
function isNumber(value) {
  return typeof value == "number" || isObjectLike_default(value) && baseGetTag_default(value) == numberTag;
}
var isNumber_default = isNumber;

// node_modules/lodash-es/isSafeInteger.js
var MAX_SAFE_INTEGER = 9007199254740991;
function isSafeInteger(value) {
  return isInteger_default(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
}
var isSafeInteger_default = isSafeInteger;

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger2(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger2(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/isDate/index.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function isDate2(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof2(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate2(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger2(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options2) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger2((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options2) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger2((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options2);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options2);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options2) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger2((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options2);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options2);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options2) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options2).getTime() - startOfUTCWeekYear(date, options2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  Y: function Y(date, token, localize2, options2) {
    var signedWeekYear = getUTCWeekYear(date, options2);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function w(date, token, localize2, options2) {
    var week = getUTCWeek(date, options2);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function e(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function c(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  X: function X(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function x(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function O(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function z(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function t(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function T(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options2) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options2 !== null && options2 !== void 0 && options2.addSuffix) {
    if (options2.comparison && options2.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options2.width ? String(options2.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options2) {
    var context = options2 !== null && options2 !== void 0 && options2.context ? String(options2.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options2 !== null && options2 !== void 0 && options2.width ? String(options2.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options2 !== null && options2 !== void 0 && options2.width ? String(options2.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options2.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options2) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger2((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale2 = options2.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger2((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale3 = options2.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      ;
      target[property] = object[property];
    }
  }
  return target;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
function _typeof3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof3 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof3 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof3(obj);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof3(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options2) {
      return this.validateValue(utcDate, this.value, options2);
    }
  }, {
    key: "set",
    value: function set(utcDate, flags, options2) {
      return this.setValue(utcDate, flags, this.value, options2);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
var Parser = /* @__PURE__ */ function() {
  function Parser3() {
    _classCallCheck2(this, Parser3);
  }
  _createClass2(Parser3, [{
    key: "run",
    value: function run(dateString, token, match2, options2) {
      var result = this.parse(dateString, token, match2, options2);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser3;
}();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
function _typeof4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof4 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof4 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof4(obj);
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  return Constructor;
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _possibleConstructorReturn2(self2, call) {
  if (call && (_typeof4(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized2(self2);
}
function _assertThisInitialized2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf2(o);
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits2(EraParser2, _Parser);
  var _super = _createSuper2(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck3(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty2(_assertThisInitialized2(_this), "priority", 140);
    _defineProperty2(_assertThisInitialized2(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass3(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  date: /^(3[0-1]|[0-2]?\d)/,
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  week: /^(5[0-3]|[0-4]?\d)/,
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  hour11h: /^(1[0-1]|0?\d)/,
  hour12h: /^(1[0-2]|0?\d)/,
  minute: /^[0-5]?\d/,
  second: /^[0-5]?\d/,
  singleDigit: /^\d/,
  twoDigits: /^\d{1,2}/,
  threeDigits: /^\d{1,3}/,
  fourDigits: /^\d{1,4}/,
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  twoDigitsSigned: /^-?\d{1,2}/,
  threeDigitsSigned: /^-?\d{1,3}/,
  fourDigitsSigned: /^-?\d{1,4}/
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
function _typeof5(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof5 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof5 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof5(obj);
}
function _classCallCheck4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties4(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties4(Constructor, staticProps);
  return Constructor;
}
function _inherits3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf3(subClass, superClass);
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn3(this, result);
  };
}
function _possibleConstructorReturn3(self2, call) {
  if (call && (_typeof5(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized3(self2);
}
function _assertThisInitialized3(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf3(o) {
  _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf3(o);
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits3(YearParser2, _Parser);
  var _super = _createSuper3(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck4(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty3(_assertThisInitialized3(_this), "priority", 130);
    _defineProperty3(_assertThisInitialized3(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass4(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
function _typeof6(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof6 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof6 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof6(obj);
}
function _classCallCheck5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties5(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties5(Constructor, staticProps);
  return Constructor;
}
function _inherits4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf4(subClass, superClass);
}
function _setPrototypeOf4(o, p) {
  _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf4(o, p);
}
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf4(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf4(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn4(this, result);
  };
}
function _possibleConstructorReturn4(self2, call) {
  if (call && (_typeof6(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized4(self2);
}
function _assertThisInitialized4(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf4(o) {
  _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf4(o);
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits4(LocalWeekYearParser2, _Parser);
  var _super = _createSuper4(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck5(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty4(_assertThisInitialized4(_this), "priority", 130);
    _defineProperty4(_assertThisInitialized4(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass5(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value, options2) {
      var currentYear = getUTCWeekYear(date, options2);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options2.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options2);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options2.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options2);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
function _typeof7(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof7 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof7 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof7(obj);
}
function _classCallCheck6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties6(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties6(Constructor, staticProps);
  return Constructor;
}
function _inherits5(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf5(subClass, superClass);
}
function _setPrototypeOf5(o, p) {
  _setPrototypeOf5 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf5(o, p);
}
function _createSuper5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf5(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf5(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn5(this, result);
  };
}
function _possibleConstructorReturn5(self2, call) {
  if (call && (_typeof7(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized5(self2);
}
function _assertThisInitialized5(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf5(o) {
  _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf5(o);
}
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits5(ISOWeekYearParser2, _Parser);
  var _super = _createSuper5(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck6(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty5(_assertThisInitialized5(_this), "priority", 130);
    _defineProperty5(_assertThisInitialized5(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass6(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
function _typeof8(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof8 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof8 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof8(obj);
}
function _classCallCheck7(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties7(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass7(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties7(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties7(Constructor, staticProps);
  return Constructor;
}
function _inherits6(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf6(subClass, superClass);
}
function _setPrototypeOf6(o, p) {
  _setPrototypeOf6 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf6(o, p);
}
function _createSuper6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf6(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf6(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn6(this, result);
  };
}
function _possibleConstructorReturn6(self2, call) {
  if (call && (_typeof8(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized6(self2);
}
function _assertThisInitialized6(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct6() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf6(o) {
  _getPrototypeOf6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf6(o);
}
function _defineProperty6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits6(ExtendedYearParser2, _Parser);
  var _super = _createSuper6(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck7(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty6(_assertThisInitialized6(_this), "priority", 130);
    _defineProperty6(_assertThisInitialized6(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass7(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
function _typeof9(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof9 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof9 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof9(obj);
}
function _classCallCheck8(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties8(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass8(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties8(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties8(Constructor, staticProps);
  return Constructor;
}
function _inherits7(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf7(subClass, superClass);
}
function _setPrototypeOf7(o, p) {
  _setPrototypeOf7 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf7(o, p);
}
function _createSuper7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf7(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf7(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn7(this, result);
  };
}
function _possibleConstructorReturn7(self2, call) {
  if (call && (_typeof9(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized7(self2);
}
function _assertThisInitialized7(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct7() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf7(o) {
  _getPrototypeOf7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf7(o);
}
function _defineProperty7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits7(QuarterParser2, _Parser);
  var _super = _createSuper7(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck8(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty7(_assertThisInitialized7(_this), "priority", 120);
    _defineProperty7(_assertThisInitialized7(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass8(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
function _typeof10(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof10 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof10 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof10(obj);
}
function _classCallCheck9(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties9(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass9(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties9(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties9(Constructor, staticProps);
  return Constructor;
}
function _inherits8(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf8(subClass, superClass);
}
function _setPrototypeOf8(o, p) {
  _setPrototypeOf8 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf8(o, p);
}
function _createSuper8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf8(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf8(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn8(this, result);
  };
}
function _possibleConstructorReturn8(self2, call) {
  if (call && (_typeof10(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized8(self2);
}
function _assertThisInitialized8(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct8() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf8(o) {
  _getPrototypeOf8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf8(o);
}
function _defineProperty8(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits8(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper8(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck9(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty8(_assertThisInitialized8(_this), "priority", 120);
    _defineProperty8(_assertThisInitialized8(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass9(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
function _typeof11(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof11 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof11 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof11(obj);
}
function _classCallCheck10(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties10(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass10(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties10(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties10(Constructor, staticProps);
  return Constructor;
}
function _inherits9(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf9(subClass, superClass);
}
function _setPrototypeOf9(o, p) {
  _setPrototypeOf9 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf9(o, p);
}
function _createSuper9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf9(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf9(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn9(this, result);
  };
}
function _possibleConstructorReturn9(self2, call) {
  if (call && (_typeof11(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized9(self2);
}
function _assertThisInitialized9(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct9() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf9(o) {
  _getPrototypeOf9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf9(o);
}
function _defineProperty9(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits9(MonthParser2, _Parser);
  var _super = _createSuper9(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck10(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty9(_assertThisInitialized9(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty9(_assertThisInitialized9(_this), "priority", 110);
    return _this;
  }
  _createClass10(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
function _typeof12(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof12 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof12 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof12(obj);
}
function _classCallCheck11(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties11(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass11(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties11(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties11(Constructor, staticProps);
  return Constructor;
}
function _inherits10(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf10(subClass, superClass);
}
function _setPrototypeOf10(o, p) {
  _setPrototypeOf10 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf10(o, p);
}
function _createSuper10(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct10();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf10(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf10(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn10(this, result);
  };
}
function _possibleConstructorReturn10(self2, call) {
  if (call && (_typeof12(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized10(self2);
}
function _assertThisInitialized10(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct10() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf10(o) {
  _getPrototypeOf10 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf10(o);
}
function _defineProperty10(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits10(StandAloneMonthParser2, _Parser);
  var _super = _createSuper10(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck11(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty10(_assertThisInitialized10(_this), "priority", 110);
    _defineProperty10(_assertThisInitialized10(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass11(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options2) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger2(dirtyWeek);
  var diff = getUTCWeek(date, options2) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
function _typeof13(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof13 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof13 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof13(obj);
}
function _classCallCheck12(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties12(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass12(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties12(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties12(Constructor, staticProps);
  return Constructor;
}
function _inherits11(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf11(subClass, superClass);
}
function _setPrototypeOf11(o, p) {
  _setPrototypeOf11 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf11(o, p);
}
function _createSuper11(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct11();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf11(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf11(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn11(this, result);
  };
}
function _possibleConstructorReturn11(self2, call) {
  if (call && (_typeof13(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized11(self2);
}
function _assertThisInitialized11(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct11() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf11(o) {
  _getPrototypeOf11 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf11(o);
}
function _defineProperty11(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits11(LocalWeekParser2, _Parser);
  var _super = _createSuper11(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck12(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty11(_assertThisInitialized11(_this), "priority", 100);
    _defineProperty11(_assertThisInitialized11(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass12(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      return startOfUTCWeek(setUTCWeek(date, value, options2), options2);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger2(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
function _typeof14(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof14 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof14 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof14(obj);
}
function _classCallCheck13(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties13(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass13(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties13(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties13(Constructor, staticProps);
  return Constructor;
}
function _inherits12(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf12(subClass, superClass);
}
function _setPrototypeOf12(o, p) {
  _setPrototypeOf12 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf12(o, p);
}
function _createSuper12(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct12();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf12(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf12(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn12(this, result);
  };
}
function _possibleConstructorReturn12(self2, call) {
  if (call && (_typeof14(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized12(self2);
}
function _assertThisInitialized12(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct12() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf12(o) {
  _getPrototypeOf12 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf12(o);
}
function _defineProperty12(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits12(ISOWeekParser2, _Parser);
  var _super = _createSuper12(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck13(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty12(_assertThisInitialized12(_this), "priority", 100);
    _defineProperty12(_assertThisInitialized12(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass13(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
function _typeof15(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof15 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof15 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof15(obj);
}
function _classCallCheck14(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties14(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass14(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties14(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties14(Constructor, staticProps);
  return Constructor;
}
function _inherits13(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf13(subClass, superClass);
}
function _setPrototypeOf13(o, p) {
  _setPrototypeOf13 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf13(o, p);
}
function _createSuper13(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct13();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf13(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf13(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn13(this, result);
  };
}
function _possibleConstructorReturn13(self2, call) {
  if (call && (_typeof15(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized13(self2);
}
function _assertThisInitialized13(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct13() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf13(o) {
  _getPrototypeOf13 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf13(o);
}
function _defineProperty13(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits13(DateParser2, _Parser);
  var _super = _createSuper13(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck14(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty13(_assertThisInitialized13(_this), "priority", 90);
    _defineProperty13(_assertThisInitialized13(_this), "subPriority", 1);
    _defineProperty13(_assertThisInitialized13(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass14(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
function _typeof16(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof16 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof16 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof16(obj);
}
function _classCallCheck15(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties15(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass15(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties15(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties15(Constructor, staticProps);
  return Constructor;
}
function _inherits14(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf14(subClass, superClass);
}
function _setPrototypeOf14(o, p) {
  _setPrototypeOf14 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf14(o, p);
}
function _createSuper14(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct14();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf14(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf14(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn14(this, result);
  };
}
function _possibleConstructorReturn14(self2, call) {
  if (call && (_typeof16(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized14(self2);
}
function _assertThisInitialized14(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct14() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf14(o) {
  _getPrototypeOf14 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf14(o);
}
function _defineProperty14(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits14(DayOfYearParser2, _Parser);
  var _super = _createSuper14(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck15(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty14(_assertThisInitialized14(_this), "priority", 90);
    _defineProperty14(_assertThisInitialized14(_this), "subpriority", 1);
    _defineProperty14(_assertThisInitialized14(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass15(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options2) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger2((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger2(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
function _typeof17(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof17 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof17 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof17(obj);
}
function _classCallCheck16(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties16(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass16(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties16(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties16(Constructor, staticProps);
  return Constructor;
}
function _inherits15(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf15(subClass, superClass);
}
function _setPrototypeOf15(o, p) {
  _setPrototypeOf15 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf15(o, p);
}
function _createSuper15(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct15();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf15(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf15(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn15(this, result);
  };
}
function _possibleConstructorReturn15(self2, call) {
  if (call && (_typeof17(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized15(self2);
}
function _assertThisInitialized15(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct15() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf15(o) {
  _getPrototypeOf15 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf15(o);
}
function _defineProperty15(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits15(DayParser2, _Parser);
  var _super = _createSuper15(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck16(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty15(_assertThisInitialized15(_this), "priority", 90);
    _defineProperty15(_assertThisInitialized15(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass16(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
function _typeof18(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof18 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof18 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof18(obj);
}
function _classCallCheck17(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties17(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass17(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties17(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties17(Constructor, staticProps);
  return Constructor;
}
function _inherits16(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf16(subClass, superClass);
}
function _setPrototypeOf16(o, p) {
  _setPrototypeOf16 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf16(o, p);
}
function _createSuper16(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct16();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf16(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf16(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn16(this, result);
  };
}
function _possibleConstructorReturn16(self2, call) {
  if (call && (_typeof18(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized16(self2);
}
function _assertThisInitialized16(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct16() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf16(o) {
  _getPrototypeOf16 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf16(o);
}
function _defineProperty16(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits16(LocalDayParser2, _Parser);
  var _super = _createSuper16(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck17(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty16(_assertThisInitialized16(_this), "priority", 90);
    _defineProperty16(_assertThisInitialized16(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass17(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options2) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
function _typeof19(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof19 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof19 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof19(obj);
}
function _classCallCheck18(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties18(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass18(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties18(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties18(Constructor, staticProps);
  return Constructor;
}
function _inherits17(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf17(subClass, superClass);
}
function _setPrototypeOf17(o, p) {
  _setPrototypeOf17 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf17(o, p);
}
function _createSuper17(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct17();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf17(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf17(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn17(this, result);
  };
}
function _possibleConstructorReturn17(self2, call) {
  if (call && (_typeof19(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized17(self2);
}
function _assertThisInitialized17(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct17() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf17(o) {
  _getPrototypeOf17 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf17(o);
}
function _defineProperty17(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits17(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper17(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck18(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty17(_assertThisInitialized17(_this), "priority", 90);
    _defineProperty17(_assertThisInitialized17(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass18(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options2) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger2(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
function _typeof20(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof20 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof20 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof20(obj);
}
function _classCallCheck19(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties19(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass19(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties19(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties19(Constructor, staticProps);
  return Constructor;
}
function _inherits18(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf18(subClass, superClass);
}
function _setPrototypeOf18(o, p) {
  _setPrototypeOf18 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf18(o, p);
}
function _createSuper18(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct18();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf18(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf18(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn18(this, result);
  };
}
function _possibleConstructorReturn18(self2, call) {
  if (call && (_typeof20(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized18(self2);
}
function _assertThisInitialized18(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct18() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf18(o) {
  _getPrototypeOf18 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf18(o);
}
function _defineProperty18(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits18(ISODayParser2, _Parser);
  var _super = _createSuper18(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck19(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty18(_assertThisInitialized18(_this), "priority", 90);
    _defineProperty18(_assertThisInitialized18(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass19(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
function _typeof21(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof21 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof21 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof21(obj);
}
function _classCallCheck20(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties20(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass20(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties20(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties20(Constructor, staticProps);
  return Constructor;
}
function _inherits19(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf19(subClass, superClass);
}
function _setPrototypeOf19(o, p) {
  _setPrototypeOf19 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf19(o, p);
}
function _createSuper19(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct19();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf19(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf19(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn19(this, result);
  };
}
function _possibleConstructorReturn19(self2, call) {
  if (call && (_typeof21(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized19(self2);
}
function _assertThisInitialized19(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct19() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf19(o) {
  _getPrototypeOf19 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf19(o);
}
function _defineProperty19(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits19(AMPMParser2, _Parser);
  var _super = _createSuper19(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck20(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty19(_assertThisInitialized19(_this), "priority", 80);
    _defineProperty19(_assertThisInitialized19(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass20(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
function _typeof22(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof22 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof22 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof22(obj);
}
function _classCallCheck21(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties21(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass21(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties21(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties21(Constructor, staticProps);
  return Constructor;
}
function _inherits20(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf20(subClass, superClass);
}
function _setPrototypeOf20(o, p) {
  _setPrototypeOf20 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf20(o, p);
}
function _createSuper20(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct20();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf20(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf20(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn20(this, result);
  };
}
function _possibleConstructorReturn20(self2, call) {
  if (call && (_typeof22(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized20(self2);
}
function _assertThisInitialized20(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct20() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf20(o) {
  _getPrototypeOf20 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf20(o);
}
function _defineProperty20(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits20(AMPMMidnightParser2, _Parser);
  var _super = _createSuper20(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck21(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty20(_assertThisInitialized20(_this), "priority", 80);
    _defineProperty20(_assertThisInitialized20(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass21(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
function _typeof23(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof23 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof23 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof23(obj);
}
function _classCallCheck22(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties22(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass22(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties22(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties22(Constructor, staticProps);
  return Constructor;
}
function _inherits21(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf21(subClass, superClass);
}
function _setPrototypeOf21(o, p) {
  _setPrototypeOf21 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf21(o, p);
}
function _createSuper21(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct21();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf21(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf21(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn21(this, result);
  };
}
function _possibleConstructorReturn21(self2, call) {
  if (call && (_typeof23(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized21(self2);
}
function _assertThisInitialized21(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct21() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf21(o) {
  _getPrototypeOf21 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf21(o);
}
function _defineProperty21(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits21(DayPeriodParser2, _Parser);
  var _super = _createSuper21(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck22(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty21(_assertThisInitialized21(_this), "priority", 80);
    _defineProperty21(_assertThisInitialized21(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass22(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
function _typeof24(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof24 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof24 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof24(obj);
}
function _classCallCheck23(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties23(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass23(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties23(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties23(Constructor, staticProps);
  return Constructor;
}
function _inherits22(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf22(subClass, superClass);
}
function _setPrototypeOf22(o, p) {
  _setPrototypeOf22 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf22(o, p);
}
function _createSuper22(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct22();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf22(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf22(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn22(this, result);
  };
}
function _possibleConstructorReturn22(self2, call) {
  if (call && (_typeof24(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized22(self2);
}
function _assertThisInitialized22(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct22() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf22(o) {
  _getPrototypeOf22 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf22(o);
}
function _defineProperty22(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits22(Hour1to12Parser2, _Parser);
  var _super = _createSuper22(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck23(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty22(_assertThisInitialized22(_this), "priority", 70);
    _defineProperty22(_assertThisInitialized22(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass23(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
function _typeof25(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof25 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof25 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof25(obj);
}
function _classCallCheck24(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties24(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass24(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties24(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties24(Constructor, staticProps);
  return Constructor;
}
function _inherits23(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf23(subClass, superClass);
}
function _setPrototypeOf23(o, p) {
  _setPrototypeOf23 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf23(o, p);
}
function _createSuper23(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct23();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf23(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf23(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn23(this, result);
  };
}
function _possibleConstructorReturn23(self2, call) {
  if (call && (_typeof25(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized23(self2);
}
function _assertThisInitialized23(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct23() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf23(o) {
  _getPrototypeOf23 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf23(o);
}
function _defineProperty23(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits23(Hour0to23Parser2, _Parser);
  var _super = _createSuper23(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck24(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty23(_assertThisInitialized23(_this), "priority", 70);
    _defineProperty23(_assertThisInitialized23(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass24(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
function _typeof26(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof26 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof26 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof26(obj);
}
function _classCallCheck25(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties25(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass25(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties25(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties25(Constructor, staticProps);
  return Constructor;
}
function _inherits24(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf24(subClass, superClass);
}
function _setPrototypeOf24(o, p) {
  _setPrototypeOf24 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf24(o, p);
}
function _createSuper24(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct24();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf24(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf24(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn24(this, result);
  };
}
function _possibleConstructorReturn24(self2, call) {
  if (call && (_typeof26(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized24(self2);
}
function _assertThisInitialized24(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct24() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf24(o) {
  _getPrototypeOf24 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf24(o);
}
function _defineProperty24(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits24(Hour0To11Parser2, _Parser);
  var _super = _createSuper24(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck25(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty24(_assertThisInitialized24(_this), "priority", 70);
    _defineProperty24(_assertThisInitialized24(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass25(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
function _typeof27(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof27 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof27 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof27(obj);
}
function _classCallCheck26(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties26(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass26(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties26(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties26(Constructor, staticProps);
  return Constructor;
}
function _inherits25(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf25(subClass, superClass);
}
function _setPrototypeOf25(o, p) {
  _setPrototypeOf25 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf25(o, p);
}
function _createSuper25(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct25();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf25(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf25(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn25(this, result);
  };
}
function _possibleConstructorReturn25(self2, call) {
  if (call && (_typeof27(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized25(self2);
}
function _assertThisInitialized25(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct25() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf25(o) {
  _getPrototypeOf25 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf25(o);
}
function _defineProperty25(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits25(Hour1To24Parser2, _Parser);
  var _super = _createSuper25(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck26(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty25(_assertThisInitialized25(_this), "priority", 70);
    _defineProperty25(_assertThisInitialized25(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass26(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
function _typeof28(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof28 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof28 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof28(obj);
}
function _classCallCheck27(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties27(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass27(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties27(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties27(Constructor, staticProps);
  return Constructor;
}
function _inherits26(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf26(subClass, superClass);
}
function _setPrototypeOf26(o, p) {
  _setPrototypeOf26 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf26(o, p);
}
function _createSuper26(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct26();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf26(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf26(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn26(this, result);
  };
}
function _possibleConstructorReturn26(self2, call) {
  if (call && (_typeof28(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized26(self2);
}
function _assertThisInitialized26(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct26() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf26(o) {
  _getPrototypeOf26 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf26(o);
}
function _defineProperty26(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits26(MinuteParser2, _Parser);
  var _super = _createSuper26(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck27(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty26(_assertThisInitialized26(_this), "priority", 60);
    _defineProperty26(_assertThisInitialized26(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass27(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
function _typeof29(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof29 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof29 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof29(obj);
}
function _classCallCheck28(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties28(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass28(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties28(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties28(Constructor, staticProps);
  return Constructor;
}
function _inherits27(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf27(subClass, superClass);
}
function _setPrototypeOf27(o, p) {
  _setPrototypeOf27 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf27(o, p);
}
function _createSuper27(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct27();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf27(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf27(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn27(this, result);
  };
}
function _possibleConstructorReturn27(self2, call) {
  if (call && (_typeof29(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized27(self2);
}
function _assertThisInitialized27(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct27() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf27(o) {
  _getPrototypeOf27 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf27(o);
}
function _defineProperty27(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits27(SecondParser2, _Parser);
  var _super = _createSuper27(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck28(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty27(_assertThisInitialized27(_this), "priority", 50);
    _defineProperty27(_assertThisInitialized27(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass28(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
function _typeof30(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof30 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof30 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof30(obj);
}
function _classCallCheck29(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties29(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass29(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties29(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties29(Constructor, staticProps);
  return Constructor;
}
function _inherits28(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf28(subClass, superClass);
}
function _setPrototypeOf28(o, p) {
  _setPrototypeOf28 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf28(o, p);
}
function _createSuper28(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct28();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf28(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf28(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn28(this, result);
  };
}
function _possibleConstructorReturn28(self2, call) {
  if (call && (_typeof30(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized28(self2);
}
function _assertThisInitialized28(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct28() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf28(o) {
  _getPrototypeOf28 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf28(o);
}
function _defineProperty28(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits28(FractionOfSecondParser2, _Parser);
  var _super = _createSuper28(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck29(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty28(_assertThisInitialized28(_this), "priority", 30);
    _defineProperty28(_assertThisInitialized28(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass29(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
function _typeof31(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof31 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof31 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof31(obj);
}
function _classCallCheck30(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties30(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass30(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties30(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties30(Constructor, staticProps);
  return Constructor;
}
function _inherits29(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf29(subClass, superClass);
}
function _setPrototypeOf29(o, p) {
  _setPrototypeOf29 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf29(o, p);
}
function _createSuper29(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct29();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf29(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf29(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn29(this, result);
  };
}
function _possibleConstructorReturn29(self2, call) {
  if (call && (_typeof31(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized29(self2);
}
function _assertThisInitialized29(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct29() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf29(o) {
  _getPrototypeOf29 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf29(o);
}
function _defineProperty29(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits29(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper29(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck30(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty29(_assertThisInitialized29(_this), "priority", 10);
    _defineProperty29(_assertThisInitialized29(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass30(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
function _typeof32(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof32 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof32 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof32(obj);
}
function _classCallCheck31(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties31(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass31(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties31(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties31(Constructor, staticProps);
  return Constructor;
}
function _inherits30(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf30(subClass, superClass);
}
function _setPrototypeOf30(o, p) {
  _setPrototypeOf30 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf30(o, p);
}
function _createSuper30(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct30();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf30(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf30(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn30(this, result);
  };
}
function _possibleConstructorReturn30(self2, call) {
  if (call && (_typeof32(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized30(self2);
}
function _assertThisInitialized30(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct30() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf30(o) {
  _getPrototypeOf30 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf30(o);
}
function _defineProperty30(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits30(ISOTimezoneParser2, _Parser);
  var _super = _createSuper30(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck31(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty30(_assertThisInitialized30(_this), "priority", 10);
    _defineProperty30(_assertThisInitialized30(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass31(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
function _typeof33(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof33 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof33 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof33(obj);
}
function _classCallCheck32(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties32(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass32(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties32(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties32(Constructor, staticProps);
  return Constructor;
}
function _inherits31(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf31(subClass, superClass);
}
function _setPrototypeOf31(o, p) {
  _setPrototypeOf31 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf31(o, p);
}
function _createSuper31(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct31();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf31(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf31(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn31(this, result);
  };
}
function _possibleConstructorReturn31(self2, call) {
  if (call && (_typeof33(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized31(self2);
}
function _assertThisInitialized31(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct31() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf31(o) {
  _getPrototypeOf31 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf31(o);
}
function _defineProperty31(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits31(TimestampSecondsParser2, _Parser);
  var _super = _createSuper31(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck32(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty31(_assertThisInitialized31(_this), "priority", 40);
    _defineProperty31(_assertThisInitialized31(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass32(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
function _typeof34(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof34 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof34 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof34(obj);
}
function _classCallCheck33(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties33(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass33(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties33(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties33(Constructor, staticProps);
  return Constructor;
}
function _inherits32(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf32(subClass, superClass);
}
function _setPrototypeOf32(o, p) {
  _setPrototypeOf32 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf32(o, p);
}
function _createSuper32(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct32();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf32(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf32(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn32(this, result);
  };
}
function _possibleConstructorReturn32(self2, call) {
  if (call && (_typeof34(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized32(self2);
}
function _assertThisInitialized32(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct32() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf32(o) {
  _getPrototypeOf32 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf32(o);
}
function _defineProperty32(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits32(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper32(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck33(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty32(_assertThisInitialized32(_this), "priority", 20);
    _defineProperty32(_assertThisInitialized32(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass33(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/date-fns/esm/parse/index.js
function _typeof35(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof35 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof35 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof35(obj);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i2 >= o.length)
          return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s3() {
    it = o[Symbol.iterator]();
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options2) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger2((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale2 = options2.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger2((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale3 = options2.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters_default) {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser2 = parsers[firstCharacter];
      if (parser2) {
        var incompatibleTokens = parser2.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser2.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser2.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString2(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof35(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// src/xmlrpc-client.ts
var XmlRpcClient = class {
  constructor(options2) {
    this.options = options2;
    console.log(options2);
  }
  methodCall(method, params) {
    console.log(`Endpoint: ${this.options.url.href}xmlrpc.php`);
    const xml = this.objectToXml(method, params).end({ prettyPrint: true });
    console.log(xml);
    return (0, import_obsidian3.request)({
      url: `${this.options.url.href}xmlrpc.php`,
      method: "POST",
      headers: {
        "Content-Type": "text/xml",
        "User-Agent": "obsidian.md"
      },
      body: xml
    }).then((res) => {
      console.log(res);
      return this.responseToObject(res);
    });
  }
  objectToXml(method, ...obj) {
    const xml = (0, import_xmlbuilder2.create)({ version: "1.0" }).ele("methodCall").ele("methodName").txt(method).up().ele("params");
    obj.forEach((it) => this.createParam(it, xml));
    return xml;
  }
  createParam(obj, xml) {
    const param = xml.ele("param");
    this.createValue(obj, param);
  }
  createValue(data, param) {
    const value = param.ele("value");
    if (isSafeInteger_default(data)) {
      value.ele("i4").txt(data.toString());
    } else if (isNumber_default(data)) {
      value.ele("double").txt(data.toString());
    } else if (isBoolean_default(data)) {
      value.ele("boolean").txt(data ? "1" : "0");
    } else if (isDate_default(data)) {
      value.ele("dateTime.iso8601").txt(format(data, "yyyyMMddTHH:mm:ss"));
    } else if (isArray_default(data)) {
      const array = value.ele("array").ele("data");
      data.forEach((it) => this.createValue(it, array));
    } else if (isObject_default(data)) {
      const struct = value.ele("struct");
      for (const [prop, value2] of Object.entries(data)) {
        const member = struct.ele("member").ele("name").txt(prop).up();
        this.createValue(value2, member);
      }
    } else {
      value.ele("string").dat(data.toString());
    }
  }
  responseToObject(response) {
    const res = (0, import_xmlbuilder2.create)(response).end({ format: "object" });
    if (get_default(res, "methodResponse.params")) {
      return this.fromValue(get_default(res, "methodResponse.params.param.value"));
    } else if (get_default(res, "methodResponse.fault")) {
      return this.fromValue(get_default(res, "methodResponse.fault.value"));
    }
    throw new Error("Invalid XML-RPC response.");
  }
  fromValue(value) {
    if (get_default(value, "i4") || get_default(value, "int")) {
      return get_default(value, "i4") || get_default(value, "int");
    } else if (get_default(value, "double")) {
      return get_default(value, "double");
    } else if (get_default(value, "boolean")) {
      return get_default(value, "boolean") === "1";
    } else if (get_default(value, "dateTime.iso8601")) {
      return parse(get_default(value, "dateTime.iso8601"), "yyyyMMddTHH:mm:ss", new Date());
    } else if (get_default(value, "array")) {
      const array = [];
      const data = get_default(value, "array.data.value");
      if (isArray_default(data)) {
        data.forEach((it) => {
          array.push(this.fromValue(it));
        });
      } else {
        array.push(this.fromValue(data));
      }
      return array;
    } else if (get_default(value, "struct")) {
      const struct = {};
      const members = get_default(value, "struct.member");
      if (isArray_default(members)) {
        members.forEach((member) => {
          const name = get_default(member, "name");
          if (name) {
            struct[name] = this.fromValue(get_default(member, "value"));
          }
        });
      } else {
        const name = get_default(members, "name");
        if (name) {
          struct[name] = this.fromValue(get_default(members, "value"));
        }
      }
      return struct;
    } else {
      return get_default(value, "string");
    }
  }
};

// src/abstract-wp-client.ts
var import_obsidian6 = require("obsidian");

// src/wp-login-modal.ts
var import_obsidian4 = require("obsidian");
var WpLoginModal = class extends import_obsidian4.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "WordPress Login" });
    new import_obsidian4.Setting(contentEl).setName("User Name").setDesc(`User name for ${this.plugin.settings.endpoint}`).addText((text) => {
      var _a;
      return text.setValue((_a = this.plugin.settings.userName) != null ? _a : "").onChange((value) => __async(this, null, function* () {
        if (this.plugin.settings.saveUserName) {
          this.plugin.settings.userName = value;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian4.Setting(contentEl).setName("Password").setDesc(`Password for ${this.plugin.settings.endpoint}`).addText((text) => {
      var _a;
      return text.setValue((_a = this.plugin.settings.password) != null ? _a : "").onChange((value) => __async(this, null, function* () {
        if (this.plugin.settings.savePassword) {
          this.plugin.settings.password = value;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian4.Setting(contentEl).setName("Remember User Name").setDesc(`If enabled, the WordPress user name you typed will be saved in local data.
This might be disclosure in synchronize services.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.saveUserName).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.saveUserName = value;
      if (!this.plugin.settings.saveUserName) {
        delete this.plugin.settings.userName;
      }
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(contentEl).setName("Remember Password").setDesc(`If enabled, the WordPress password you typed will be saved in local data.
This might be disclosure in synchronize services.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.savePassword).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.savePassword = value;
      if (!this.plugin.settings.savePassword) {
        delete this.plugin.settings.password;
      }
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(contentEl).addButton((button) => button.setButtonText("Login").setCta().onClick(() => {
      this.onSubmit(this.plugin.settings.userName, this.plugin.settings.password, this);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// node_modules/marked/lib/marked.esm.js
function getDefaults() {
  return {
    async: false,
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: "",
    highlight: null,
    langPrefix: "language-",
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
var defaults = getDefaults();
function changeDefaults(newDefaults) {
  defaults = newDefaults;
}
var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, "g");
var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape2(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
var caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = typeof regex === "string" ? regex : regex.source;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
var nonWordAndColonTest = /[^\w:]/g;
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    let prot;
    try {
      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, "").toLowerCase();
    } catch (e2) {
      return null;
    }
    if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, "%");
  } catch (e2) {
    return null;
  }
  return href;
}
var baseUrls = {};
var justDomain = /^[^:]+:\/*[^/]*$/;
var protocol = /^([^:]+:)[\s\S]*$/;
var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(base, href) {
  if (!baseUrls[" " + base]) {
    if (justDomain.test(base)) {
      baseUrls[" " + base] = base + "/";
    } else {
      baseUrls[" " + base] = rtrim(base, "/", true);
    }
  }
  base = baseUrls[" " + base];
  const relativeBase = base.indexOf(":") === -1;
  if (href.substring(0, 2) === "//") {
    if (relativeBase) {
      return href;
    }
    return base.replace(protocol, "$1") + href;
  } else if (href.charAt(0) === "/") {
    if (relativeBase) {
      return href;
    }
    return base.replace(domain, "$1") + href;
  } else {
    return base + href;
  }
}
var noopTest = { exec: function noopTest2() {
} };
function merge(obj) {
  let i2 = 1, target, key;
  for (; i2 < arguments.length; i2++) {
    target = arguments[i2];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }
  return obj;
}
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match2, offset, str) => {
    let escaped = false, curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i2 = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count)
      cells.push("");
  }
  for (; i2 < cells.length; i2++) {
    cells[i2] = cells[i2].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c2, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c2 && !invert) {
      suffLen++;
    } else if (currChar !== c2 && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b2) {
  if (str.indexOf(b2[1]) === -1) {
    return -1;
  }
  const l = str.length;
  let level = 0, i2 = 0;
  for (; i2 < l; i2++) {
    if (str[i2] === "\\") {
      i2++;
    } else if (str[i2] === b2[0]) {
      level++;
    } else if (str[i2] === b2[1]) {
      level--;
      if (level < 0) {
        return i2;
      }
    }
  }
  return -1;
}
function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
  }
}
function repeatString(pattern, count) {
  if (count < 1) {
    return "";
  }
  let result = "";
  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }
    count >>= 1;
    pattern += pattern;
  }
  return result + pattern;
}
function outputLink(cap, link, raw, lexer2) {
  const href = link.href;
  const title = link.title ? escape2(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer2.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href,
      title,
      text,
      tokens: lexer2.inlineTokens(text)
    };
    lexer2.state.inLink = false;
    return token;
  }
  return {
    type: "image",
    raw,
    href,
    title,
    text: escape2(text)
  };
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return text.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var Tokenizer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text, "\n") : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, "#");
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ *>[ \t]?/gm, "");
      const top = this.lexer.state.top;
      this.lexer.state.top = true;
      const tokens = this.lexer.blockTokens(text);
      this.lexer.state.top = top;
      return {
        type: "blockquote",
        raw: cap[0],
        tokens,
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let raw, istask, ischecked, indent, i2, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
      while (src) {
        endEarly = false;
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split("\n", 1)[0];
        nextLine = src.split("\n", 1)[0];
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))`);
          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
          while (src) {
            rawLine = src.split("\n", 1)[0];
            line = rawLine;
            if (this.options.pedantic) {
              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (fencesBeginRegex.test(line)) {
              break;
            }
            if (headingBeginRegex.test(line)) {
              break;
            }
            if (nextBulletRegex.test(line)) {
              break;
            }
            if (hrRegex.test(src)) {
              break;
            }
            if (line.search(/[^ ]/) >= indent || !line.trim()) {
              itemContents += "\n" + line.slice(indent);
            } else if (!blankLine) {
              itemContents += "\n" + line;
            } else {
              break;
            }
            if (!blankLine && !line.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      const l = list.items.length;
      for (i2 = 0; i2 < l; i2++) {
        this.lexer.state.top = false;
        list.items[i2].tokens = this.lexer.blockTokens(list.items[i2].text, []);
        if (!list.loose) {
          const spacers = list.items[i2].tokens.filter((t2) => t2.type === "space");
          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t2) => /\n.*\n/.test(t2.raw));
          list.loose = hasMultipleLineBreaks;
        }
      }
      if (list.loose) {
        for (i2 = 0; i2 < l; i2++) {
          list.items[i2].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
        text: cap[0]
      };
      if (this.options.sanitize) {
        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]);
        token.type = "paragraph";
        token.text = text;
        token.tokens = this.lexer.inline(text);
      }
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
      return {
        type: "def",
        tag,
        raw: cap[0],
        href,
        title
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      const item = {
        type: "table",
        header: splitCells(cap[1]).map((c2) => {
          return { text: c2 };
        }),
        align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        let l = item.align.length;
        let i2, j, k2, row;
        for (i2 = 0; i2 < l; i2++) {
          if (/^ *-+: *$/.test(item.align[i2])) {
            item.align[i2] = "right";
          } else if (/^ *:-+: *$/.test(item.align[i2])) {
            item.align[i2] = "center";
          } else if (/^ *:-+ *$/.test(item.align[i2])) {
            item.align[i2] = "left";
          } else {
            item.align[i2] = null;
          }
        }
        l = item.rows.length;
        for (i2 = 0; i2 < l; i2++) {
          item.rows[i2] = splitCells(item.rows[i2], item.header.length).map((c2) => {
            return { text: c2 };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = this.lexer.inline(item.header[j].text);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k2 = 0; k2 < row.length; k2++) {
            row[k2].tokens = this.lexer.inline(row[k2].text);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: this.lexer.inline(cap[1])
      };
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
      return {
        type: "paragraph",
        raw: cap[0],
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      return {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: this.lexer.inline(cap[0])
      };
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape2(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: this.options.sanitize ? "text" : "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]) : cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link) {
        const text = cap[0].charAt(0);
        return {
          type: "text",
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match2 = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match2)
      return;
    if (match2[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match2[1] || match2[2] || "";
    if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
      const lLength = match2[0].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match2[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match2 = endReg.exec(maskedSrc)) != null) {
        rDelim = match2[1] || match2[2] || match2[3] || match2[4] || match2[5] || match2[6];
        if (!rDelim)
          continue;
        rLength = rDelim.length;
        if (match2[3] || match2[4]) {
          delimTotal += rLength;
          continue;
        } else if (match2[5] || match2[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        const raw = src.slice(0, lLength + match2.index + (match2[0].length - rDelim.length) + rLength);
        if (Math.min(lLength, rLength) % 2) {
          const text2 = raw.slice(1, -1);
          return {
            type: "em",
            raw,
            text: text2,
            tokens: this.lexer.inlineTokens(text2)
          };
        }
        const text = raw.slice(2, -2);
        return {
          type: "strong",
          raw,
          text,
          tokens: this.lexer.inlineTokens(text)
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape2(text, true);
      return {
        type: "codespan",
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2])
      };
    }
  }
  autolink(src, mangle2) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href;
      if (cap[2] === "@") {
        text = escape2(this.options.mangle ? mangle2(cap[1]) : cap[1]);
        href = "mailto:" + text;
      } else {
        text = escape2(cap[1]);
        href = text;
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src, mangle2) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href;
      if (cap[2] === "@") {
        text = escape2(this.options.mangle ? mangle2(cap[0]) : cap[0]);
        href = "mailto:" + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape2(cap[0]);
        if (cap[1] === "www.") {
          href = "http://" + cap[0];
        } else {
          href = cap[0];
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src, smartypants2) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]) : cap[0];
      } else {
        text = escape2(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text
      };
    }
  }
};
var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = merge({}, block);
block.gfm = merge({}, block.normal, {
  table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
});
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = merge({}, block.normal, {
  html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
});
var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    rDelimAst: /^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline.escapedEmSt = /(?:^|[^\\])(?:\\\\)*\\[*_]/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = merge({}, inline);
inline.pedantic = merge({}, inline.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
});
inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
});
function smartypants(text) {
  return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
}
function mangle(text) {
  let out = "", i2, ch;
  const l = text.length;
  for (i2 = 0; i2 < l; i2++) {
    ch = text.charCodeAt(i2);
    if (Math.random() > 0.5) {
      ch = "x" + ch.toString(16);
    }
    out += "&#" + ch + ";";
  }
  return out;
}
var Lexer = class {
  constructor(options2) {
    this.tokens = [];
    this.tokens.links = /* @__PURE__ */ Object.create(null);
    this.options = options2 || defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  static get rules() {
    return {
      block,
      inline
    };
  }
  static lex(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.lex(src);
  }
  static lexInline(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n");
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
    } else {
      src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
        return leading + "    ".repeat(tabs.length);
      });
    }
    let token, lastToken, cutSrc, lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) {
          tokens[tokens.length - 1].raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens = []) {
    this.inlineQueue.push({ src, tokens });
    return tokens;
  }
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match2;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match2 = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match2[0].slice(match2[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match2 = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match2 = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index + match2[0].length - 2) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var Renderer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  code(code, infostring, escaped) {
    const lang = (infostring || "").match(/\S*/)[0];
    if (this.options.highlight) {
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="' + this.options.langPrefix + escape2(lang) + '">' + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
  }
  blockquote(quote) {
    return `<blockquote>
${quote}</blockquote>
`;
  }
  html(html) {
    return html;
  }
  heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      const id = this.options.headerPrefix + slugger.slug(raw);
      return `<h${level} id="${id}">${text}</h${level}>
`;
    }
    return `<h${level}>${text}</h${level}>
`;
  }
  hr() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  }
  list(body, ordered, start) {
    const type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
  }
  listitem(text) {
    return `<li>${text}</li>
`;
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
  }
  paragraph(text) {
    return `<p>${text}</p>
`;
  }
  table(header, body) {
    if (body)
      body = `<tbody>${body}</tbody>`;
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow(content) {
    return `<tr>
${content}</tr>
`;
  }
  tablecell(content, flags) {
    const type = flags.header ? "th" : "td";
    const tag = flags.align ? `<${type} align="${flags.align}">` : `<${type}>`;
    return tag + content + `</${type}>
`;
  }
  strong(text) {
    return `<strong>${text}</strong>`;
  }
  em(text) {
    return `<em>${text}</em>`;
  }
  codespan(text) {
    return `<code>${text}</code>`;
  }
  br() {
    return this.options.xhtml ? "<br/>" : "<br>";
  }
  del(text) {
    return `<del>${text}</del>`;
  }
  link(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<a href="' + href + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text + "</a>";
    return out;
  }
  image(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = `<img src="${href}" alt="${text}"`;
    if (title) {
      out += ` title="${title}"`;
    }
    out += this.options.xhtml ? "/>" : ">";
    return out;
  }
  text(text) {
    return text;
  }
};
var TextRenderer = class {
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href, title, text) {
    return "" + text;
  }
  image(href, title, text) {
    return "" + text;
  }
  br() {
    return "";
  }
};
var Slugger = class {
  constructor() {
    this.seen = {};
  }
  serialize(value) {
    return value.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
  }
  getNextSafeSlug(originalSlug, isDryRun) {
    let slug = originalSlug;
    let occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];
      do {
        occurenceAccumulator++;
        slug = originalSlug + "-" + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }
    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }
    return slug;
  }
  slug(value, options2 = {}) {
    const slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options2.dryrun);
  }
};
var Parser2 = class {
  constructor(options2) {
    this.options = options2 || defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
  }
  static parse(tokens, options2) {
    const parser2 = new Parser2(options2);
    return parser2.parse(tokens);
  }
  static parseInline(tokens, options2) {
    const parser2 = new Parser2(options2);
    return parser2.parseInline(tokens);
  }
  parse(tokens, top = true) {
    let out = "", i2, j, k2, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
    const l = tokens.length;
    for (i2 = 0; i2 < l; i2++) {
      token = tokens[i2];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
          continue;
        }
        case "code": {
          out += this.renderer.code(token.text, token.lang, token.escaped);
          continue;
        }
        case "table": {
          header = "";
          cell = "";
          l2 = token.header.length;
          for (j = 0; j < l2; j++) {
            cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), { header: true, align: token.align[j] });
          }
          header += this.renderer.tablerow(cell);
          body = "";
          l2 = token.rows.length;
          for (j = 0; j < l2; j++) {
            row = token.rows[j];
            cell = "";
            l3 = row.length;
            for (k2 = 0; k2 < l3; k2++) {
              cell += this.renderer.tablecell(this.parseInline(row[k2].tokens), { header: false, align: token.align[k2] });
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          body = this.parse(token.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          ordered = token.ordered;
          start = token.start;
          loose = token.loose;
          l2 = token.items.length;
          body = "";
          for (j = 0; j < l2; j++) {
            item = token.items[j];
            checked = item.checked;
            task = item.task;
            itemBody = "";
            if (item.task) {
              checkbox = this.renderer.checkbox(checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox
                  });
                }
              } else {
                itemBody += checkbox;
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          out += this.renderer.html(token.text);
          continue;
        }
        case "paragraph": {
          out += this.renderer.paragraph(this.parseInline(token.tokens));
          continue;
        }
        case "text": {
          body = token.tokens ? this.parseInline(token.tokens) : token.text;
          while (i2 + 1 < l && tokens[i2 + 1].type === "text") {
            token = tokens[++i2];
            body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    let out = "", i2, token, ret;
    const l = tokens.length;
    for (i2 = 0; i2 < l; i2++) {
      token = tokens[i2];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          out += renderer.text(token.text);
          break;
        }
        case "html": {
          out += renderer.html(token.text);
          break;
        }
        case "link": {
          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
          break;
        }
        case "image": {
          out += renderer.image(token.href, token.title, token.text);
          break;
        }
        case "strong": {
          out += renderer.strong(this.parseInline(token.tokens, renderer));
          break;
        }
        case "em": {
          out += renderer.em(this.parseInline(token.tokens, renderer));
          break;
        }
        case "codespan": {
          out += renderer.codespan(token.text);
          break;
        }
        case "br": {
          out += renderer.br();
          break;
        }
        case "del": {
          out += renderer.del(this.parseInline(token.tokens, renderer));
          break;
        }
        case "text": {
          out += renderer.text(token.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
function marked(src, opt, callback) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  if (typeof opt === "function") {
    callback = opt;
    opt = null;
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  if (callback) {
    const highlight = opt.highlight;
    let tokens;
    try {
      tokens = Lexer.lex(src, opt);
    } catch (e2) {
      return callback(e2);
    }
    const done = function(err) {
      let out;
      if (!err) {
        try {
          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }
          out = Parser2.parse(tokens, opt);
        } catch (e2) {
          err = e2;
        }
      }
      opt.highlight = highlight;
      return err ? callback(err) : callback(null, out);
    };
    if (!highlight || highlight.length < 3) {
      return done();
    }
    delete opt.highlight;
    if (!tokens.length)
      return done();
    let pending = 0;
    marked.walkTokens(tokens, function(token) {
      if (token.type === "code") {
        pending++;
        setTimeout(() => {
          highlight(token.text, token.lang, function(err, code) {
            if (err) {
              return done(err);
            }
            if (code != null && code !== token.text) {
              token.text = code;
              token.escaped = true;
            }
            pending--;
            if (pending === 0) {
              done();
            }
          });
        }, 0);
      }
    });
    if (pending === 0) {
      done();
    }
    return;
  }
  function onError(e2) {
    e2.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape2(e2.message + "", true) + "</pre>";
    }
    throw e2;
  }
  try {
    const tokens = Lexer.lex(src, opt);
    if (opt.walkTokens) {
      if (opt.async) {
        return Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => {
          return Parser2.parse(tokens, opt);
        }).catch(onError);
      }
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser2.parse(tokens, opt);
  } catch (e2) {
    onError(e2);
  }
}
marked.options = marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = defaults;
marked.use = function(...args) {
  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
  args.forEach((pack) => {
    const opts = merge({}, pack);
    opts.async = marked.defaults.async || opts.async;
    if (pack.extensions) {
      pack.extensions.forEach((ext) => {
        if (!ext.name) {
          throw new Error("extension name required");
        }
        if (ext.renderer) {
          const prevRenderer = extensions.renderers[ext.name];
          if (prevRenderer) {
            extensions.renderers[ext.name] = function(...args2) {
              let ret = ext.renderer.apply(this, args2);
              if (ret === false) {
                ret = prevRenderer.apply(this, args2);
              }
              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }
        if (ext.tokenizer) {
          if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
            throw new Error("extension level must be 'block' or 'inline'");
          }
          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }
          if (ext.start) {
            if (ext.level === "block") {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === "inline") {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }
        if (ext.childTokens) {
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
      opts.extensions = extensions;
    }
    if (pack.renderer) {
      const renderer = marked.defaults.renderer || new Renderer();
      for (const prop in pack.renderer) {
        const prevRenderer = renderer[prop];
        renderer[prop] = (...args2) => {
          let ret = pack.renderer[prop].apply(renderer, args2);
          if (ret === false) {
            ret = prevRenderer.apply(renderer, args2);
          }
          return ret;
        };
      }
      opts.renderer = renderer;
    }
    if (pack.tokenizer) {
      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
      for (const prop in pack.tokenizer) {
        const prevTokenizer = tokenizer[prop];
        tokenizer[prop] = (...args2) => {
          let ret = pack.tokenizer[prop].apply(tokenizer, args2);
          if (ret === false) {
            ret = prevTokenizer.apply(tokenizer, args2);
          }
          return ret;
        };
      }
      opts.tokenizer = tokenizer;
    }
    if (pack.walkTokens) {
      const walkTokens2 = marked.defaults.walkTokens;
      opts.walkTokens = function(token) {
        let values = [];
        values.push(pack.walkTokens.call(this, token));
        if (walkTokens2) {
          values = values.concat(walkTokens2.call(this, token));
        }
        return values;
      };
    }
    marked.setOptions(opts);
  });
};
marked.walkTokens = function(tokens, callback) {
  let values = [];
  for (const token of tokens) {
    values = values.concat(callback.call(marked, token));
    switch (token.type) {
      case "table": {
        for (const cell of token.header) {
          values = values.concat(marked.walkTokens(cell.tokens, callback));
        }
        for (const row of token.rows) {
          for (const cell of row) {
            values = values.concat(marked.walkTokens(cell.tokens, callback));
          }
        }
        break;
      }
      case "list": {
        values = values.concat(marked.walkTokens(token.items, callback));
        break;
      }
      default: {
        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
            values = values.concat(marked.walkTokens(token[childTokens], callback));
          });
        } else if (token.tokens) {
          values = values.concat(marked.walkTokens(token.tokens, callback));
        }
      }
    }
  }
  return values;
};
marked.parseInline = function(src, opt) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked.parseInline(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  try {
    const tokens = Lexer.lexInline(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser2.parseInline(tokens, opt);
  } catch (e2) {
    e2.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape2(e2.message + "", true) + "</pre>";
    }
    throw e2;
  }
};
marked.Parser = Parser2;
marked.parser = Parser2.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parser = Parser2.parse;
var lexer = Lexer.lex;

// src/wp-publish-modal.ts
var import_obsidian5 = require("obsidian");
var WpPublishModal = class extends import_obsidian5.Modal {
  constructor(app, plugin, categories, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.categories = categories;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const params = {
      status: this.plugin.settings.defaultPostStatus,
      categories: [1]
    };
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Publish to WordPress" });
    new import_obsidian5.Setting(contentEl).setName("Post Status").addDropdown((dropdown) => {
      dropdown.addOption("draft" /* Draft */, "draft").addOption("publish" /* Publish */, "publish").setValue(this.plugin.settings.defaultPostStatus).onChange((value) => __async(this, null, function* () {
        params.status = value;
      }));
    });
    if (this.categories.length > 0) {
      new import_obsidian5.Setting(contentEl).setName("Category").addDropdown((dropdown) => {
        this.categories.forEach((it) => {
          dropdown.addOption(it.id, it.name);
        });
        dropdown.setValue("1").onChange((value) => __async(this, null, function* () {
          params.categories = [toNumber_default(value)];
        }));
      });
    }
    new import_obsidian5.Setting(contentEl).addButton((button) => button.setButtonText("Publish").setCta().onClick(() => {
      this.onSubmit(params, this);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/abstract-wp-client.ts
var AbstractWordPressClient = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  newPost(defaultPostParams) {
    return new Promise((resolve, reject) => {
      const { workspace } = this.app;
      const activeView = workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (activeView) {
        new WpLoginModal(this.app, this.plugin, (userName, password, loginModal) => __async(this, null, function* () {
          const content = yield this.app.vault.read(activeView.file);
          const title = activeView.file.basename;
          if (defaultPostParams) {
            yield this.doPublish({
              title,
              content,
              userName,
              password,
              postParams: defaultPostParams
            }, loginModal);
          } else {
            const categories = yield this.getCategories({
              userName,
              password
            });
            new WpPublishModal(this.app, this.plugin, categories, (postParams, publishModal) => __async(this, null, function* () {
              yield this.doPublish({
                title,
                content,
                userName,
                password,
                postParams
              }, loginModal, publishModal);
            })).open();
          }
        })).open();
      } else {
        const error = "There is no editor found. Nothing will be published.";
        console.warn(error);
        reject(new Error(error));
      }
    });
  }
  doPublish(wpParams, loginModal, publishModal) {
    return __async(this, null, function* () {
      var _a;
      const { title, content, userName, password, postParams } = wpParams;
      try {
        const result = yield this.publish(title != null ? title : "A post from Obsidian!", (_a = marked.parse(content)) != null ? _a : "", postParams, {
          userName,
          password
        });
        console.log("newPost", result);
        if (result.code === 1 /* Error */) {
          const data = result.data;
          new import_obsidian6.Notice(`Post published failed!
${data.code}: ${data.message}`);
        } else {
          new import_obsidian6.Notice("Post published successfully!");
          if (publishModal) {
            publishModal.close();
          }
          loginModal.close();
        }
        return result;
      } catch (error) {
        console.log("Reading file content for 'newPost' failed: ", error);
        new import_obsidian6.Notice(error.toString());
      }
    });
  }
};

// src/wp-xml-rpc-client.ts
var WpXmlRpcClient = class extends AbstractWordPressClient {
  constructor(app, plugin) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
    this.client = new XmlRpcClient({
      url: new URL(plugin.settings.endpoint)
    });
  }
  publish(title, content, postParams, wp) {
    return this.client.methodCall("wp.newPost", [
      0,
      wp.userName,
      wp.password,
      {
        post_type: "post",
        post_status: postParams.status,
        post_title: title,
        post_content: content,
        terms: {
          "category": postParams.categories
        }
      }
    ]).then((response) => {
      if (response.faultCode && response.faultString) {
        return {
          code: 1 /* Error */,
          data: {
            code: response.faultCode,
            message: response.faultString
          }
        };
      } else {
        return {
          code: 0 /* OK */,
          data: response
        };
      }
    });
  }
  getCategories(wp) {
    return this.client.methodCall("wp.getTerms", [
      0,
      wp.userName,
      wp.password,
      "category"
    ]).then((data) => {
      var _a;
      return (_a = data.map((it) => __spreadProps(__spreadValues({}, it), {
        id: it.term_id
      }))) != null ? _a : [];
    });
  }
};

// src/wp-rest-client.ts
var import_obsidian7 = require("obsidian");
var WpRestClient = class extends AbstractWordPressClient {
  constructor(app, plugin, context) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
    this.context = context;
    this.options = {
      url: new URL(plugin.settings.endpoint)
    };
  }
  publish(title, content, postParams, wp) {
    return this.httpPost("wp-json/wp/v2/posts", {
      title,
      content,
      status: postParams.status,
      categories: postParams.categories
    }, {
      headers: this.context.getHeaders(wp)
    }).then((resp) => {
      console.log("WpRestClient response", resp);
      if (resp.code && resp.message) {
        return {
          code: 1 /* Error */,
          data: {
            code: resp.code,
            message: resp.message
          }
        };
      } else if (resp.id) {
        return {
          code: 0 /* OK */,
          data: resp
        };
      } else {
        return {
          code: 1 /* Error */,
          data: {
            code: 500,
            message: "Cannot parse WordPress REST API response."
          }
        };
      }
    });
  }
  getCategories(wp) {
    return this.httpGet("wp-json/wp/v2/categories", {
      headers: this.context.getHeaders(wp)
    }).then((data) => data != null ? data : []);
  }
  httpGet(path, options2) {
    const opts = __spreadValues({
      headers: {}
    }, options2);
    console.log("REST GET", `${this.options.url.toString()}${path}`, opts);
    return (0, import_obsidian7.requestUrl)({
      url: `${this.options.url.toString()}${path}`,
      method: "GET",
      headers: __spreadValues({
        "Content-Type": "application/json",
        "User-Agent": "obsidian.md"
      }, opts.headers)
    }).then((response) => {
      console.log("GET response", response);
      return response.json;
    });
  }
  httpPost(path, body, options2) {
    const opts = __spreadValues({
      headers: {}
    }, options2);
    console.log("REST POST", `${this.options.url.toString()}${path}`, opts);
    return (0, import_obsidian7.requestUrl)({
      url: `${this.options.url.toString()}${path}`,
      method: "POST",
      headers: __spreadValues({
        "Content-Type": "application/json",
        "User-Agent": "obsidian.md"
      }, opts.headers),
      body: JSON.stringify(body)
    }).then((response) => {
      console.log("POST response", response);
      return response.json;
    });
  }
};
var WpRestClientMiniOrangeContext = class {
  getHeaders(wp) {
    return {
      "Authorization": `Basic ${Buffer.from(`${wp.userName}:${wp.password}`).toString("base64")}`
    };
  }
};

// src/wp-clients.ts
var wpClientsCache = /* @__PURE__ */ new Map();
function getWordPressClient(app, plugin) {
  const cached = wpClientsCache.get(plugin.settings.apiType);
  if (cached) {
    return cached;
  } else {
    let newClient;
    switch (plugin.settings.apiType) {
      case "xml-rpc" /* XML_RPC */:
        newClient = new WpXmlRpcClient(app, plugin);
        break;
      case "miniOrange" /* RestAPI_miniOrange */:
        newClient = new WpRestClient(app, plugin, new WpRestClientMiniOrangeContext());
        break;
      default:
        newClient = null;
        break;
    }
    if (newClient) {
      wpClientsCache.set(plugin.settings.apiType, newClient);
    }
    return newClient;
  }
}

// src/main.ts
var WordpressPlugin = class extends import_obsidian8.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading obsidian-wordpress plugin");
      yield this.loadSettings();
      addIcons();
      this.updateRibbonIcon();
      this.addCommand({
        id: "defaultPublish",
        name: "Publish current document with default options",
        editorCallback: (editor, view) => {
          const params = {
            status: this.settings.defaultPostStatus,
            categories: []
          };
          this.publishPost(params);
        }
      });
      this.addCommand({
        id: "publish",
        name: "Publish current document",
        editorCallback: (editor, view) => {
          this.publishPost();
        }
      });
      this.addSettingTab(new WordpressSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateRibbonIcon() {
    const ribbonIconTitle = "WordPress Publish";
    if (this.settings.showRibbonIcon) {
      this.addRibbonIcon("wp-logo", ribbonIconTitle, () => {
        this.publishPost();
      });
    } else {
      const leftRibbon = this.app.workspace.leftRibbon;
      const children = leftRibbon.ribbonActionsEl.children;
      for (let i2 = 0; i2 < children.length; i2++) {
        if (children.item(i2).getAttribute("aria-label") === ribbonIconTitle) {
          children.item(i2).style.display = "none";
        }
      }
    }
  }
  publishPost(defaultPostParams) {
    const client = getWordPressClient(this.app, this);
    if (client) {
      client.newPost(defaultPostParams).then();
    }
  }
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/*! https://mths.be/punycode v1.4.1 by @mathias */
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//# sourceMappingURL=data:application/json;base64,
