/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/xmlbuilder/lib/Utility.js
var require_Utility = __commonJS({
  "node_modules/xmlbuilder/lib/Utility.js"(exports, module2) {
    (function() {
      var assign, camelCase, capitalize, isArray, isEmpty, isFunction, isObject, isPlainObject, kebabCase, snakeCase, titleCase, words, slice = [].slice, hasProp = {}.hasOwnProperty;
      assign = function() {
        var i, key, len, source, sources, target;
        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (isFunction(Object.assign)) {
          Object.assign.apply(null, arguments);
        } else {
          for (i = 0, len = sources.length; i < len; i++) {
            source = sources[i];
            if (source != null) {
              for (key in source) {
                if (!hasProp.call(source, key))
                  continue;
                target[key] = source[key];
              }
            }
          }
        }
        return target;
      };
      isFunction = function(val) {
        return !!val && Object.prototype.toString.call(val) === "[object Function]";
      };
      isObject = function(val) {
        var ref;
        return !!val && ((ref = typeof val) === "function" || ref === "object");
      };
      isArray = function(val) {
        if (isFunction(Array.isArray)) {
          return Array.isArray(val);
        } else {
          return Object.prototype.toString.call(val) === "[object Array]";
        }
      };
      isEmpty = function(val) {
        var key;
        if (isArray(val)) {
          return !val.length;
        } else {
          for (key in val) {
            if (!hasProp.call(val, key))
              continue;
            return false;
          }
          return true;
        }
      };
      isPlainObject = function(val) {
        var ctor, proto;
        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
      };
      words = function(val) {
        return (val.split(/[-_\s]+|(?=[A-Z][a-z])/) || []).filter(function(n) {
          return !!n;
        });
      };
      camelCase = function(val) {
        var i, index, len, r, ref, word;
        r = "";
        ref = words(val);
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          word = ref[index];
          r += index ? capitalize(word.toLowerCase()) : word.toLowerCase();
        }
        return r;
      };
      titleCase = function(val) {
        var i, index, len, r, ref, word;
        r = "";
        ref = words(val);
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          word = ref[index];
          r += capitalize(word.toLowerCase());
        }
        return r;
      };
      kebabCase = function(val) {
        var i, index, len, r, ref, word;
        r = "";
        ref = words(val);
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          word = ref[index];
          r += (index ? "-" : "") + word.toLowerCase();
        }
        return r;
      };
      snakeCase = function(val) {
        var i, index, len, r, ref, word;
        r = "";
        ref = words(val);
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          word = ref[index];
          r += (index ? "_" : "") + word.toLowerCase();
        }
        return r;
      };
      capitalize = function(val) {
        return val.charAt(0).toUpperCase() + val.slice(1);
      };
      module2.exports.assign = assign;
      module2.exports.isFunction = isFunction;
      module2.exports.isObject = isObject;
      module2.exports.isArray = isArray;
      module2.exports.isEmpty = isEmpty;
      module2.exports.isPlainObject = isPlainObject;
      module2.exports.camelCase = camelCase;
      module2.exports.titleCase = titleCase;
      module2.exports.kebabCase = kebabCase;
      module2.exports.snakeCase = snakeCase;
      module2.exports.capitalize = capitalize;
      module2.exports.words = words;
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLAttribute.js
var require_XMLAttribute = __commonJS({
  "node_modules/xmlbuilder/lib/XMLAttribute.js"(exports, module2) {
    (function() {
      var XMLAttribute;
      module2.exports = XMLAttribute = function() {
        function XMLAttribute2(parent, name, value) {
          this.options = parent.options;
          this.stringify = parent.stringify;
          if (name == null) {
            throw new Error("Missing attribute name of element " + parent.name);
          }
          if (value == null) {
            throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
          }
          this.name = this.stringify.attName(name);
          this.value = this.stringify.attValue(value);
        }
        XMLAttribute2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLAttribute2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).attribute(this);
        };
        return XMLAttribute2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLElement.js
var require_XMLElement = __commonJS({
  "node_modules/xmlbuilder/lib/XMLElement.js"(exports, module2) {
    (function() {
      var XMLAttribute, XMLElement, XMLNode, isFunction, isObject, ref, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction;
      XMLNode = require_XMLNode();
      XMLAttribute = require_XMLAttribute();
      module2.exports = XMLElement = function(superClass) {
        extend(XMLElement2, superClass);
        function XMLElement2(parent, name, attributes) {
          XMLElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing element name");
          }
          this.name = this.stringify.eleName(name);
          this.attributes = {};
          if (attributes != null) {
            this.attribute(attributes);
          }
          if (parent.isDocument) {
            this.isRoot = true;
            this.documentObject = parent;
            parent.rootObject = this;
          }
        }
        XMLElement2.prototype.clone = function() {
          var att, attName, clonedSelf, ref1;
          clonedSelf = Object.create(this);
          if (clonedSelf.isRoot) {
            clonedSelf.documentObject = null;
          }
          clonedSelf.attributes = {};
          ref1 = this.attributes;
          for (attName in ref1) {
            if (!hasProp.call(ref1, attName))
              continue;
            att = ref1[attName];
            clonedSelf.attributes[attName] = att.clone();
          }
          clonedSelf.children = [];
          this.children.forEach(function(child) {
            var clonedChild;
            clonedChild = child.clone();
            clonedChild.parent = clonedSelf;
            return clonedSelf.children.push(clonedChild);
          });
          return clonedSelf;
        };
        XMLElement2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (name != null) {
            name = name.valueOf();
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (!this.options.skipNullAttributes || value != null) {
              this.attributes[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLElement2.prototype.removeAttribute = function(name) {
          var attName, i, len;
          if (name == null) {
            throw new Error("Missing attribute name");
          }
          name = name.valueOf();
          if (Array.isArray(name)) {
            for (i = 0, len = name.length; i < len; i++) {
              attName = name[i];
              delete this.attributes[attName];
            }
          } else {
            delete this.attributes[name];
          }
          return this;
        };
        XMLElement2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).element(this);
        };
        XMLElement2.prototype.att = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.a = function(name, value) {
          return this.attribute(name, value);
        };
        return XMLElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLCData.js
var require_XMLCData = __commonJS({
  "node_modules/xmlbuilder/lib/XMLCData.js"(exports, module2) {
    (function() {
      var XMLCData, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLCData = function(superClass) {
        extend(XMLCData2, superClass);
        function XMLCData2(parent, text) {
          XMLCData2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing CDATA text");
          }
          this.text = this.stringify.cdata(text);
        }
        XMLCData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCData2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).cdata(this);
        };
        return XMLCData2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLComment.js
var require_XMLComment = __commonJS({
  "node_modules/xmlbuilder/lib/XMLComment.js"(exports, module2) {
    (function() {
      var XMLComment, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLComment = function(superClass) {
        extend(XMLComment2, superClass);
        function XMLComment2(parent, text) {
          XMLComment2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing comment text");
          }
          this.text = this.stringify.comment(text);
        }
        XMLComment2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLComment2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).comment(this);
        };
        return XMLComment2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDeclaration.js
var require_XMLDeclaration = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDeclaration.js"(exports, module2) {
    (function() {
      var XMLDeclaration, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      module2.exports = XMLDeclaration = function(superClass) {
        extend(XMLDeclaration2, superClass);
        function XMLDeclaration2(parent, version, encoding, standalone) {
          var ref;
          XMLDeclaration2.__super__.constructor.call(this, parent);
          if (isObject(version)) {
            ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
          }
          if (!version) {
            version = "1.0";
          }
          this.version = this.stringify.xmlVersion(version);
          if (encoding != null) {
            this.encoding = this.stringify.xmlEncoding(encoding);
          }
          if (standalone != null) {
            this.standalone = this.stringify.xmlStandalone(standalone);
          }
        }
        XMLDeclaration2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).declaration(this);
        };
        return XMLDeclaration2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDAttList.js
var require_XMLDTDAttList = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDAttList.js"(exports, module2) {
    (function() {
      var XMLDTDAttList, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLDTDAttList = function(superClass) {
        extend(XMLDTDAttList2, superClass);
        function XMLDTDAttList2(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          XMLDTDAttList2.__super__.constructor.call(this, parent);
          if (elementName == null) {
            throw new Error("Missing DTD element name");
          }
          if (attributeName == null) {
            throw new Error("Missing DTD attribute name");
          }
          if (!attributeType) {
            throw new Error("Missing DTD attribute type");
          }
          if (!defaultValueType) {
            throw new Error("Missing DTD attribute default");
          }
          if (defaultValueType.indexOf("#") !== 0) {
            defaultValueType = "#" + defaultValueType;
          }
          if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
            throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
          }
          if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
            throw new Error("Default value only applies to #FIXED or #DEFAULT");
          }
          this.elementName = this.stringify.eleName(elementName);
          this.attributeName = this.stringify.attName(attributeName);
          this.attributeType = this.stringify.dtdAttType(attributeType);
          this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
          this.defaultValueType = defaultValueType;
        }
        XMLDTDAttList2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).dtdAttList(this);
        };
        return XMLDTDAttList2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDEntity.js
var require_XMLDTDEntity = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDEntity.js"(exports, module2) {
    (function() {
      var XMLDTDEntity, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      module2.exports = XMLDTDEntity = function(superClass) {
        extend(XMLDTDEntity2, superClass);
        function XMLDTDEntity2(parent, pe, name, value) {
          XMLDTDEntity2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing entity name");
          }
          if (value == null) {
            throw new Error("Missing entity value");
          }
          this.pe = !!pe;
          this.name = this.stringify.eleName(name);
          if (!isObject(value)) {
            this.value = this.stringify.dtdEntityValue(value);
          } else {
            if (!value.pubID && !value.sysID) {
              throw new Error("Public and/or system identifiers are required for an external entity");
            }
            if (value.pubID && !value.sysID) {
              throw new Error("System identifier is required for a public external entity");
            }
            if (value.pubID != null) {
              this.pubID = this.stringify.dtdPubID(value.pubID);
            }
            if (value.sysID != null) {
              this.sysID = this.stringify.dtdSysID(value.sysID);
            }
            if (value.nData != null) {
              this.nData = this.stringify.dtdNData(value.nData);
            }
            if (this.pe && this.nData) {
              throw new Error("Notation declaration is not allowed in a parameter entity");
            }
          }
        }
        XMLDTDEntity2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).dtdEntity(this);
        };
        return XMLDTDEntity2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDElement.js
var require_XMLDTDElement = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDElement.js"(exports, module2) {
    (function() {
      var XMLDTDElement, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLDTDElement = function(superClass) {
        extend(XMLDTDElement2, superClass);
        function XMLDTDElement2(parent, name, value) {
          XMLDTDElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD element name");
          }
          if (!value) {
            value = "(#PCDATA)";
          }
          if (Array.isArray(value)) {
            value = "(" + value.join(",") + ")";
          }
          this.name = this.stringify.eleName(name);
          this.value = this.stringify.dtdElementValue(value);
        }
        XMLDTDElement2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).dtdElement(this);
        };
        return XMLDTDElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDTDNotation.js
var require_XMLDTDNotation = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDTDNotation.js"(exports, module2) {
    (function() {
      var XMLDTDNotation, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLDTDNotation = function(superClass) {
        extend(XMLDTDNotation2, superClass);
        function XMLDTDNotation2(parent, name, value) {
          XMLDTDNotation2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing notation name");
          }
          if (!value.pubID && !value.sysID) {
            throw new Error("Public or system identifiers are required for an external entity");
          }
          this.name = this.stringify.eleName(name);
          if (value.pubID != null) {
            this.pubID = this.stringify.dtdPubID(value.pubID);
          }
          if (value.sysID != null) {
            this.sysID = this.stringify.dtdSysID(value.sysID);
          }
        }
        XMLDTDNotation2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).dtdNotation(this);
        };
        return XMLDTDNotation2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDocType.js
var require_XMLDocType = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDocType.js"(exports, module2) {
    (function() {
      var XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNode, isObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject = require_Utility().isObject;
      XMLNode = require_XMLNode();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      module2.exports = XMLDocType = function(superClass) {
        extend(XMLDocType2, superClass);
        function XMLDocType2(parent, pubID, sysID) {
          var ref, ref1;
          XMLDocType2.__super__.constructor.call(this, parent);
          this.documentObject = parent;
          if (isObject(pubID)) {
            ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
          }
          if (sysID == null) {
            ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
          }
          if (pubID != null) {
            this.pubID = this.stringify.dtdPubID(pubID);
          }
          if (sysID != null) {
            this.sysID = this.stringify.dtdSysID(sysID);
          }
        }
        XMLDocType2.prototype.element = function(name, value) {
          var child;
          child = new XMLDTDElement(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var child;
          child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.entity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, false, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.pEntity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, true, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.notation = function(name, value) {
          var child;
          child = new XMLDTDNotation(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).docType(this);
        };
        XMLDocType2.prototype.ele = function(name, value) {
          return this.element(name, value);
        };
        XMLDocType2.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
        };
        XMLDocType2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocType2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocType2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        XMLDocType2.prototype.up = function() {
          return this.root() || this.documentObject;
        };
        return XMLDocType2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLRaw.js
var require_XMLRaw = __commonJS({
  "node_modules/xmlbuilder/lib/XMLRaw.js"(exports, module2) {
    (function() {
      var XMLNode, XMLRaw, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLRaw = function(superClass) {
        extend(XMLRaw2, superClass);
        function XMLRaw2(parent, text) {
          XMLRaw2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing raw text");
          }
          this.value = this.stringify.raw(text);
        }
        XMLRaw2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLRaw2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).raw(this);
        };
        return XMLRaw2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLText.js
var require_XMLText = __commonJS({
  "node_modules/xmlbuilder/lib/XMLText.js"(exports, module2) {
    (function() {
      var XMLNode, XMLText, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLText = function(superClass) {
        extend(XMLText2, superClass);
        function XMLText2(parent, text) {
          XMLText2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing element text");
          }
          this.value = this.stringify.eleText(text);
        }
        XMLText2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLText2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).text(this);
        };
        return XMLText2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLProcessingInstruction.js
var require_XMLProcessingInstruction = __commonJS({
  "node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"(exports, module2) {
    (function() {
      var XMLNode, XMLProcessingInstruction, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module2.exports = XMLProcessingInstruction = function(superClass) {
        extend(XMLProcessingInstruction2, superClass);
        function XMLProcessingInstruction2(parent, target, value) {
          XMLProcessingInstruction2.__super__.constructor.call(this, parent);
          if (target == null) {
            throw new Error("Missing instruction target");
          }
          this.target = this.stringify.insTarget(target);
          if (value) {
            this.value = this.stringify.insValue(value);
          }
        }
        XMLProcessingInstruction2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLProcessingInstruction2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).processingInstruction(this);
        };
        return XMLProcessingInstruction2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLNode.js
var require_XMLNode = __commonJS({
  "node_modules/xmlbuilder/lib/XMLNode.js"(exports, module2) {
    (function() {
      var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLProcessingInstruction, XMLRaw, XMLText, isEmpty, isFunction, isObject, ref, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, isEmpty = ref.isEmpty;
      XMLElement = null;
      XMLCData = null;
      XMLComment = null;
      XMLDeclaration = null;
      XMLDocType = null;
      XMLRaw = null;
      XMLText = null;
      XMLProcessingInstruction = null;
      module2.exports = XMLNode = function() {
        function XMLNode2(parent) {
          this.parent = parent;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          this.children = [];
          if (!XMLElement) {
            XMLElement = require_XMLElement();
            XMLCData = require_XMLCData();
            XMLComment = require_XMLComment();
            XMLDeclaration = require_XMLDeclaration();
            XMLDocType = require_XMLDocType();
            XMLRaw = require_XMLRaw();
            XMLText = require_XMLText();
            XMLProcessingInstruction = require_XMLProcessingInstruction();
          }
        }
        XMLNode2.prototype.element = function(name, attributes, text) {
          var childNode, item, j, k, key, lastChild, len, len1, ref1, val;
          lastChild = null;
          if (attributes == null) {
            attributes = {};
          }
          attributes = attributes.valueOf();
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          if (name != null) {
            name = name.valueOf();
          }
          if (Array.isArray(name)) {
            for (j = 0, len = name.length; j < len; j++) {
              item = name[j];
              lastChild = this.element(item);
            }
          } else if (isFunction(name)) {
            lastChild = this.element(name.apply());
          } else if (isObject(name)) {
            for (key in name) {
              if (!hasProp.call(name, key))
                continue;
              val = name[key];
              if (isFunction(val)) {
                val = val.apply();
              }
              if (isObject(val) && isEmpty(val)) {
                val = null;
              }
              if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
              } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                for (k = 0, len1 = val.length; k < len1; k++) {
                  item = val[k];
                  childNode = {};
                  childNode[key] = item;
                  lastChild = this.element(childNode);
                }
              } else if (isObject(val)) {
                lastChild = this.element(key);
                lastChild.element(val);
              } else {
                lastChild = this.element(key, val);
              }
            }
          } else {
            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
              lastChild = this.text(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
              lastChild = this.cdata(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
              lastChild = this.comment(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
              lastChild = this.raw(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
              lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
            } else {
              lastChild = this.node(name, attributes, text);
            }
          }
          if (lastChild == null) {
            throw new Error("Could not create any elements with: " + name);
          }
          return lastChild;
        };
        XMLNode2.prototype.insertBefore = function(name, attributes, text) {
          var child, i, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level");
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode2.prototype.insertAfter = function(name, attributes, text) {
          var child, i, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level");
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode2.prototype.remove = function() {
          var i, ref1;
          if (this.isRoot) {
            throw new Error("Cannot remove the root element");
          }
          i = this.parent.children.indexOf(this);
          [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref1 = [])), ref1;
          return this.parent;
        };
        XMLNode2.prototype.node = function(name, attributes, text) {
          var child, ref1;
          if (name != null) {
            name = name.valueOf();
          }
          attributes || (attributes = {});
          attributes = attributes.valueOf();
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          child = new XMLElement(this, name, attributes);
          if (text != null) {
            child.text(text);
          }
          this.children.push(child);
          return child;
        };
        XMLNode2.prototype.text = function(value) {
          var child;
          child = new XMLText(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.cdata = function(value) {
          var child;
          child = new XMLCData(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.comment = function(value) {
          var child;
          child = new XMLComment(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.commentBefore = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.commentAfter = function(value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.raw = function(value) {
          var child;
          child = new XMLRaw(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.instruction = function(target, value) {
          var insTarget, insValue, instruction, j, len;
          if (target != null) {
            target = target.valueOf();
          }
          if (value != null) {
            value = value.valueOf();
          }
          if (Array.isArray(target)) {
            for (j = 0, len = target.length; j < len; j++) {
              insTarget = target[j];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            instruction = new XMLProcessingInstruction(this, target, value);
            this.children.push(instruction);
          }
          return this;
        };
        XMLNode2.prototype.instructionBefore = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.instructionAfter = function(target, value) {
          var child, i, removed;
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i + 1);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.declaration = function(version, encoding, standalone) {
          var doc, xmldec;
          doc = this.document();
          xmldec = new XMLDeclaration(doc, version, encoding, standalone);
          if (doc.children[0] instanceof XMLDeclaration) {
            doc.children[0] = xmldec;
          } else {
            doc.children.unshift(xmldec);
          }
          return doc.root() || doc;
        };
        XMLNode2.prototype.doctype = function(pubID, sysID) {
          var child, doc, doctype, i, j, k, len, len1, ref1, ref2;
          doc = this.document();
          doctype = new XMLDocType(doc, pubID, sysID);
          ref1 = doc.children;
          for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            child = ref1[i];
            if (child instanceof XMLDocType) {
              doc.children[i] = doctype;
              return doctype;
            }
          }
          ref2 = doc.children;
          for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
            child = ref2[i];
            if (child.isRoot) {
              doc.children.splice(i, 0, doctype);
              return doctype;
            }
          }
          doc.children.push(doctype);
          return doctype;
        };
        XMLNode2.prototype.up = function() {
          if (this.isRoot) {
            throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
          }
          return this.parent;
        };
        XMLNode2.prototype.root = function() {
          var node;
          node = this;
          while (node) {
            if (node.isDocument) {
              return node.rootObject;
            } else if (node.isRoot) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.document = function() {
          var node;
          node = this;
          while (node) {
            if (node.isDocument) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.end = function(options2) {
          return this.document().end(options2);
        };
        XMLNode2.prototype.prev = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i < 1) {
            throw new Error("Already at the first node");
          }
          return this.parent.children[i - 1];
        };
        XMLNode2.prototype.next = function() {
          var i;
          i = this.parent.children.indexOf(this);
          if (i === -1 || i === this.parent.children.length - 1) {
            throw new Error("Already at the last node");
          }
          return this.parent.children[i + 1];
        };
        XMLNode2.prototype.importDocument = function(doc) {
          var clonedRoot;
          clonedRoot = doc.root().clone();
          clonedRoot.parent = this;
          clonedRoot.isRoot = false;
          this.children.push(clonedRoot);
          return this;
        };
        XMLNode2.prototype.ele = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.doc = function() {
          return this.document();
        };
        XMLNode2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLNode2.prototype.dtd = function(pubID, sysID) {
          return this.doctype(pubID, sysID);
        };
        XMLNode2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLNode2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.u = function() {
          return this.up();
        };
        XMLNode2.prototype.importXMLBuilder = function(doc) {
          return this.importDocument(doc);
        };
        return XMLNode2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLStringifier.js
var require_XMLStringifier = __commonJS({
  "node_modules/xmlbuilder/lib/XMLStringifier.js"(exports, module2) {
    (function() {
      var XMLStringifier, camelCase, kebabCase, ref, snakeCase, titleCase, bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      }, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), camelCase = ref.camelCase, titleCase = ref.titleCase, kebabCase = ref.kebabCase, snakeCase = ref.snakeCase;
      module2.exports = XMLStringifier = function() {
        function XMLStringifier2(options2) {
          this.assertLegalChar = bind(this.assertLegalChar, this);
          var key, ref1, value;
          options2 || (options2 = {});
          this.allowSurrogateChars = options2.allowSurrogateChars;
          this.noDoubleEncoding = options2.noDoubleEncoding;
          this.textCase = options2.textCase;
          ref1 = options2.stringify || {};
          for (key in ref1) {
            if (!hasProp.call(ref1, key))
              continue;
            value = ref1[key];
            this[key] = value;
          }
        }
        XMLStringifier2.prototype.eleName = function(val) {
          val = "" + val || "";
          val = this.applyCase(val);
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.eleText = function(val) {
          val = "" + val || "";
          return this.assertLegalChar(this.elEscape(val));
        };
        XMLStringifier2.prototype.cdata = function(val) {
          val = "" + val || "";
          val = val.replace("]]>", "]]]]><![CDATA[>");
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.comment = function(val) {
          val = "" + val || "";
          if (val.match(/--/)) {
            throw new Error("Comment text cannot contain double-hypen: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.raw = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.attName = function(val) {
          val = "" + val || "";
          return val = this.applyCase(val);
        };
        XMLStringifier2.prototype.attValue = function(val) {
          val = "" + val || "";
          return this.attEscape(val);
        };
        XMLStringifier2.prototype.insTarget = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.insValue = function(val) {
          val = "" + val || "";
          if (val.match(/\?>/)) {
            throw new Error("Invalid processing instruction value: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlVersion = function(val) {
          val = "" + val || "";
          if (!val.match(/1\.[0-9]+/)) {
            throw new Error("Invalid version number: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlEncoding = function(val) {
          val = "" + val || "";
          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
            throw new Error("Invalid encoding: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlStandalone = function(val) {
          if (val) {
            return "yes";
          } else {
            return "no";
          }
        };
        XMLStringifier2.prototype.dtdPubID = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdSysID = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdElementValue = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdAttType = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdAttDefault = function(val) {
          if (val != null) {
            return "" + val || "";
          } else {
            return val;
          }
        };
        XMLStringifier2.prototype.dtdEntityValue = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.dtdNData = function(val) {
          return "" + val || "";
        };
        XMLStringifier2.prototype.convertAttKey = "@";
        XMLStringifier2.prototype.convertPIKey = "?";
        XMLStringifier2.prototype.convertTextKey = "#text";
        XMLStringifier2.prototype.convertCDataKey = "#cdata";
        XMLStringifier2.prototype.convertCommentKey = "#comment";
        XMLStringifier2.prototype.convertRawKey = "#raw";
        XMLStringifier2.prototype.assertLegalChar = function(str) {
          var chars, chr;
          if (this.allowSurrogateChars) {
            chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
          } else {
            chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
          }
          chr = str.match(chars);
          if (chr) {
            throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
          }
          return str;
        };
        XMLStringifier2.prototype.applyCase = function(str) {
          switch (this.textCase) {
            case "camel":
              return camelCase(str);
            case "title":
              return titleCase(str);
            case "kebab":
            case "lower":
              return kebabCase(str);
            case "snake":
              return snakeCase(str);
            case "upper":
              return kebabCase(str).toUpperCase();
            default:
              return str;
          }
        };
        XMLStringifier2.prototype.elEscape = function(str) {
          var ampregex;
          ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
        };
        XMLStringifier2.prototype.attEscape = function(str) {
          var ampregex;
          ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
        };
        return XMLStringifier2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLWriterBase.js
var require_XMLWriterBase = __commonJS({
  "node_modules/xmlbuilder/lib/XMLWriterBase.js"(exports, module2) {
    (function() {
      var XMLWriterBase, hasProp = {}.hasOwnProperty;
      module2.exports = XMLWriterBase = function() {
        function XMLWriterBase2(options2) {
          var key, ref, ref1, ref2, ref3, ref4, value;
          options2 || (options2 = {});
          this.pretty = options2.pretty || false;
          this.allowEmpty = (ref = options2.allowEmpty) != null ? ref : false;
          if (this.pretty) {
            this.indent = (ref1 = options2.indent) != null ? ref1 : "  ";
            this.newline = (ref2 = options2.newline) != null ? ref2 : "\n";
            this.offset = (ref3 = options2.offset) != null ? ref3 : 0;
          } else {
            this.indent = "";
            this.newline = "";
            this.offset = 0;
          }
          ref4 = options2.writer || {};
          for (key in ref4) {
            if (!hasProp.call(ref4, key))
              continue;
            value = ref4[key];
            this[key] = value;
          }
        }
        XMLWriterBase2.prototype.set = function(options2) {
          var key, ref, value;
          options2 || (options2 = {});
          if ("pretty" in options2) {
            this.pretty = options2.pretty;
          }
          if ("allowEmpty" in options2) {
            this.allowEmpty = options2.allowEmpty;
          }
          if (this.pretty) {
            this.indent = "indent" in options2 ? options2.indent : "  ";
            this.newline = "newline" in options2 ? options2.newline : "\n";
            this.offset = "offset" in options2 ? options2.offset : 0;
          } else {
            this.indent = "";
            this.newline = "";
            this.offset = 0;
          }
          ref = options2.writer || {};
          for (key in ref) {
            if (!hasProp.call(ref, key))
              continue;
            value = ref[key];
            this[key] = value;
          }
          return this;
        };
        XMLWriterBase2.prototype.space = function(level) {
          if (this.pretty) {
            return new Array((level || 0) + this.offset + 1).join(this.indent);
          } else {
            return "";
          }
        };
        return XMLWriterBase2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLStringWriter.js
var require_XMLStringWriter = __commonJS({
  "node_modules/xmlbuilder/lib/XMLStringWriter.js"(exports, module2) {
    (function() {
      var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLElement = require_XMLElement();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLWriterBase = require_XMLWriterBase();
      module2.exports = XMLStringWriter = function(superClass) {
        extend(XMLStringWriter2, superClass);
        function XMLStringWriter2(options2) {
          XMLStringWriter2.__super__.constructor.call(this, options2);
        }
        XMLStringWriter2.prototype.document = function(doc) {
          var child, i, len, r, ref;
          r = "";
          ref = doc.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            r += function() {
              switch (false) {
                case !(child instanceof XMLDeclaration):
                  return this.declaration(child);
                case !(child instanceof XMLDocType):
                  return this.docType(child);
                case !(child instanceof XMLComment):
                  return this.comment(child);
                case !(child instanceof XMLProcessingInstruction):
                  return this.processingInstruction(child);
                default:
                  return this.element(child, 0);
              }
            }.call(this);
          }
          if (this.pretty && r.slice(-this.newline.length) === this.newline) {
            r = r.slice(0, -this.newline.length);
          }
          return r;
        };
        XMLStringWriter2.prototype.attribute = function(att) {
          return " " + att.name + '="' + att.value + '"';
        };
        XMLStringWriter2.prototype.cdata = function(node, level) {
          return this.space(level) + "<![CDATA[" + node.text + "]]>" + this.newline;
        };
        XMLStringWriter2.prototype.comment = function(node, level) {
          return this.space(level) + "<!-- " + node.text + " -->" + this.newline;
        };
        XMLStringWriter2.prototype.declaration = function(node, level) {
          var r;
          r = this.space(level);
          r += '<?xml version="' + node.version + '"';
          if (node.encoding != null) {
            r += ' encoding="' + node.encoding + '"';
          }
          if (node.standalone != null) {
            r += ' standalone="' + node.standalone + '"';
          }
          r += "?>";
          r += this.newline;
          return r;
        };
        XMLStringWriter2.prototype.docType = function(node, level) {
          var child, i, len, r, ref;
          level || (level = 0);
          r = this.space(level);
          r += "<!DOCTYPE " + node.root().name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          if (node.children.length > 0) {
            r += " [";
            r += this.newline;
            ref = node.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              r += function() {
                switch (false) {
                  case !(child instanceof XMLDTDAttList):
                    return this.dtdAttList(child, level + 1);
                  case !(child instanceof XMLDTDElement):
                    return this.dtdElement(child, level + 1);
                  case !(child instanceof XMLDTDEntity):
                    return this.dtdEntity(child, level + 1);
                  case !(child instanceof XMLDTDNotation):
                    return this.dtdNotation(child, level + 1);
                  case !(child instanceof XMLCData):
                    return this.cdata(child, level + 1);
                  case !(child instanceof XMLComment):
                    return this.comment(child, level + 1);
                  case !(child instanceof XMLProcessingInstruction):
                    return this.processingInstruction(child, level + 1);
                  default:
                    throw new Error("Unknown DTD node type: " + child.constructor.name);
                }
              }.call(this);
            }
            r += "]";
          }
          r += ">";
          r += this.newline;
          return r;
        };
        XMLStringWriter2.prototype.element = function(node, level) {
          var att, child, i, len, name, r, ref, ref1, space;
          level || (level = 0);
          space = this.space(level);
          r = "";
          r += space + "<" + node.name;
          ref = node.attributes;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            r += this.attribute(att);
          }
          if (node.children.length === 0 || node.children.every(function(e) {
            return e.value === "";
          })) {
            if (this.allowEmpty) {
              r += "></" + node.name + ">" + this.newline;
            } else {
              r += "/>" + this.newline;
            }
          } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
            r += ">";
            r += node.children[0].value;
            r += "</" + node.name + ">" + this.newline;
          } else {
            r += ">" + this.newline;
            ref1 = node.children;
            for (i = 0, len = ref1.length; i < len; i++) {
              child = ref1[i];
              r += function() {
                switch (false) {
                  case !(child instanceof XMLCData):
                    return this.cdata(child, level + 1);
                  case !(child instanceof XMLComment):
                    return this.comment(child, level + 1);
                  case !(child instanceof XMLElement):
                    return this.element(child, level + 1);
                  case !(child instanceof XMLRaw):
                    return this.raw(child, level + 1);
                  case !(child instanceof XMLText):
                    return this.text(child, level + 1);
                  case !(child instanceof XMLProcessingInstruction):
                    return this.processingInstruction(child, level + 1);
                  default:
                    throw new Error("Unknown XML node type: " + child.constructor.name);
                }
              }.call(this);
            }
            r += space + "</" + node.name + ">" + this.newline;
          }
          return r;
        };
        XMLStringWriter2.prototype.processingInstruction = function(node, level) {
          var r;
          r = this.space(level) + "<?" + node.target;
          if (node.value) {
            r += " " + node.value;
          }
          r += "?>" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.raw = function(node, level) {
          return this.space(level) + node.value + this.newline;
        };
        XMLStringWriter2.prototype.text = function(node, level) {
          return this.space(level) + node.value + this.newline;
        };
        XMLStringWriter2.prototype.dtdAttList = function(node, level) {
          var r;
          r = this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType;
          if (node.defaultValueType !== "#DEFAULT") {
            r += " " + node.defaultValueType;
          }
          if (node.defaultValue) {
            r += ' "' + node.defaultValue + '"';
          }
          r += ">" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.dtdElement = function(node, level) {
          return this.space(level) + "<!ELEMENT " + node.name + " " + node.value + ">" + this.newline;
        };
        XMLStringWriter2.prototype.dtdEntity = function(node, level) {
          var r;
          r = this.space(level) + "<!ENTITY";
          if (node.pe) {
            r += " %";
          }
          r += " " + node.name;
          if (node.value) {
            r += ' "' + node.value + '"';
          } else {
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.nData) {
              r += " NDATA " + node.nData;
            }
          }
          r += ">" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.dtdNotation = function(node, level) {
          var r;
          r = this.space(level) + "<!NOTATION " + node.name;
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.pubID) {
            r += ' PUBLIC "' + node.pubID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          r += ">" + this.newline;
          return r;
        };
        XMLStringWriter2.prototype.openNode = function(node, level) {
          var att, name, r, ref;
          level || (level = 0);
          if (node instanceof XMLElement) {
            r = this.space(level) + "<" + node.name;
            ref = node.attributes;
            for (name in ref) {
              if (!hasProp.call(ref, name))
                continue;
              att = ref[name];
              r += this.attribute(att);
            }
            r += (node.children ? ">" : "/>") + this.newline;
            return r;
          } else {
            r = this.space(level) + "<!DOCTYPE " + node.rootNodeName;
            if (node.pubID && node.sysID) {
              r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r += ' SYSTEM "' + node.sysID + '"';
            }
            r += (node.children ? " [" : ">") + this.newline;
            return r;
          }
        };
        XMLStringWriter2.prototype.closeNode = function(node, level) {
          level || (level = 0);
          switch (false) {
            case !(node instanceof XMLElement):
              return this.space(level) + "</" + node.name + ">" + this.newline;
            case !(node instanceof XMLDocType):
              return this.space(level) + "]>" + this.newline;
          }
        };
        return XMLStringWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDocument.js
var require_XMLDocument = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDocument.js"(exports, module2) {
    (function() {
      var XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isPlainObject = require_Utility().isPlainObject;
      XMLNode = require_XMLNode();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      module2.exports = XMLDocument = function(superClass) {
        extend(XMLDocument2, superClass);
        function XMLDocument2(options2) {
          XMLDocument2.__super__.constructor.call(this, null);
          options2 || (options2 = {});
          if (!options2.writer) {
            options2.writer = new XMLStringWriter();
          }
          this.options = options2;
          this.stringify = new XMLStringifier(options2);
          this.isDocument = true;
        }
        XMLDocument2.prototype.end = function(writer) {
          var writerOptions;
          if (!writer) {
            writer = this.options.writer;
          } else if (isPlainObject(writer)) {
            writerOptions = writer;
            writer = this.options.writer.set(writerOptions);
          }
          return writer.document(this);
        };
        XMLDocument2.prototype.toString = function(options2) {
          return this.options.writer.set(options2).document(this);
        };
        return XMLDocument2;
      }(XMLNode);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLDocumentCB.js
var require_XMLDocumentCB = __commonJS({
  "node_modules/xmlbuilder/lib/XMLDocumentCB.js"(exports, module2) {
    (function() {
      var XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject;
      XMLElement = require_XMLElement();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLAttribute = require_XMLAttribute();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      module2.exports = XMLDocumentCB = function() {
        function XMLDocumentCB2(options2, onData, onEnd) {
          var writerOptions;
          options2 || (options2 = {});
          if (!options2.writer) {
            options2.writer = new XMLStringWriter(options2);
          } else if (isPlainObject(options2.writer)) {
            writerOptions = options2.writer;
            options2.writer = new XMLStringWriter(writerOptions);
          }
          this.options = options2;
          this.writer = options2.writer;
          this.stringify = new XMLStringifier(options2);
          this.onDataCallback = onData || function() {
          };
          this.onEndCallback = onEnd || function() {
          };
          this.currentNode = null;
          this.currentLevel = -1;
          this.openTags = {};
          this.documentStarted = false;
          this.documentCompleted = false;
          this.root = null;
        }
        XMLDocumentCB2.prototype.node = function(name, attributes, text) {
          var ref1;
          if (name == null) {
            throw new Error("Missing node name");
          }
          if (this.root && this.currentLevel === -1) {
            throw new Error("Document can only have one root node");
          }
          this.openCurrent();
          name = name.valueOf();
          if (attributes == null) {
            attributes = {};
          }
          attributes = attributes.valueOf();
          if (!isObject(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          this.currentNode = new XMLElement(this, name, attributes);
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          if (text != null) {
            this.text(text);
          }
          return this;
        };
        XMLDocumentCB2.prototype.element = function(name, attributes, text) {
          if (this.currentNode && this.currentNode instanceof XMLDocType) {
            return this.dtdElement.apply(this, arguments);
          } else {
            return this.node(name, attributes, text);
          }
        };
        XMLDocumentCB2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (!this.currentNode || this.currentNode.children) {
            throw new Error("att() can only be used immediately after an ele() call in callback mode");
          }
          if (name != null) {
            name = name.valueOf();
          }
          if (isObject(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName))
                continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            if (!this.options.skipNullAttributes || value != null) {
              this.currentNode.attributes[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.text = function(value) {
          var node;
          this.openCurrent();
          node = new XMLText(this, value);
          this.onData(this.writer.text(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.cdata = function(value) {
          var node;
          this.openCurrent();
          node = new XMLCData(this, value);
          this.onData(this.writer.cdata(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.comment = function(value) {
          var node;
          this.openCurrent();
          node = new XMLComment(this, value);
          this.onData(this.writer.comment(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.raw = function(value) {
          var node;
          this.openCurrent();
          node = new XMLRaw(this, value);
          this.onData(this.writer.raw(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.instruction = function(target, value) {
          var i, insTarget, insValue, len, node;
          this.openCurrent();
          if (target != null) {
            target = target.valueOf();
          }
          if (value != null) {
            value = value.valueOf();
          }
          if (Array.isArray(target)) {
            for (i = 0, len = target.length; i < len; i++) {
              insTarget = target[i];
              this.instruction(insTarget);
            }
          } else if (isObject(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget))
                continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction(value)) {
              value = value.apply();
            }
            node = new XMLProcessingInstruction(this, target, value);
            this.onData(this.writer.processingInstruction(node, this.currentLevel + 1));
          }
          return this;
        };
        XMLDocumentCB2.prototype.declaration = function(version, encoding, standalone) {
          var node;
          this.openCurrent();
          if (this.documentStarted) {
            throw new Error("declaration() must be the first node");
          }
          node = new XMLDeclaration(this, version, encoding, standalone);
          this.onData(this.writer.declaration(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.doctype = function(root, pubID, sysID) {
          this.openCurrent();
          if (root == null) {
            throw new Error("Missing root node name");
          }
          if (this.root) {
            throw new Error("dtd() must come before the root node");
          }
          this.currentNode = new XMLDocType(this, pubID, sysID);
          this.currentNode.rootNodeName = root;
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          return this;
        };
        XMLDocumentCB2.prototype.dtdElement = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDElement(this, name, value);
          this.onData(this.writer.dtdElement(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var node;
          this.openCurrent();
          node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.onData(this.writer.dtdAttList(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.entity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, false, name, value);
          this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.pEntity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, true, name, value);
          this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.notation = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDNotation(this, name, value);
          this.onData(this.writer.dtdNotation(node, this.currentLevel + 1));
          return this;
        };
        XMLDocumentCB2.prototype.up = function() {
          if (this.currentLevel < 0) {
            throw new Error("The document node has no parent");
          }
          if (this.currentNode) {
            if (this.currentNode.children) {
              this.closeNode(this.currentNode);
            } else {
              this.openNode(this.currentNode);
            }
            this.currentNode = null;
          } else {
            this.closeNode(this.openTags[this.currentLevel]);
          }
          delete this.openTags[this.currentLevel];
          this.currentLevel--;
          return this;
        };
        XMLDocumentCB2.prototype.end = function() {
          while (this.currentLevel >= 0) {
            this.up();
          }
          return this.onEnd();
        };
        XMLDocumentCB2.prototype.openCurrent = function() {
          if (this.currentNode) {
            this.currentNode.children = true;
            return this.openNode(this.currentNode);
          }
        };
        XMLDocumentCB2.prototype.openNode = function(node) {
          if (!node.isOpen) {
            if (!this.root && this.currentLevel === 0 && node instanceof XMLElement) {
              this.root = node;
            }
            this.onData(this.writer.openNode(node, this.currentLevel));
            return node.isOpen = true;
          }
        };
        XMLDocumentCB2.prototype.closeNode = function(node) {
          if (!node.isClosed) {
            this.onData(this.writer.closeNode(node, this.currentLevel));
            return node.isClosed = true;
          }
        };
        XMLDocumentCB2.prototype.onData = function(chunk) {
          this.documentStarted = true;
          return this.onDataCallback(chunk);
        };
        XMLDocumentCB2.prototype.onEnd = function() {
          this.documentCompleted = true;
          return this.onEndCallback();
        };
        XMLDocumentCB2.prototype.ele = function() {
          return this.element.apply(this, arguments);
        };
        XMLDocumentCB2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLDocumentCB2.prototype.dtd = function(root, pubID, sysID) {
          return this.doctype(root, pubID, sysID);
        };
        XMLDocumentCB2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLDocumentCB2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLDocumentCB2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.att = function() {
          if (this.currentNode && this.currentNode instanceof XMLDocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.a = function() {
          if (this.currentNode && this.currentNode instanceof XMLDocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocumentCB2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocumentCB2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        return XMLDocumentCB2;
      }();
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/XMLStreamWriter.js
var require_XMLStreamWriter = __commonJS({
  "node_modules/xmlbuilder/lib/XMLStreamWriter.js"(exports, module2) {
    (function() {
      var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLElement = require_XMLElement();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLWriterBase = require_XMLWriterBase();
      module2.exports = XMLStreamWriter = function(superClass) {
        extend(XMLStreamWriter2, superClass);
        function XMLStreamWriter2(stream, options2) {
          this.stream = stream;
          XMLStreamWriter2.__super__.constructor.call(this, options2);
        }
        XMLStreamWriter2.prototype.document = function(doc) {
          var child, i, j, len, len1, ref, ref1, results;
          ref = doc.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            child.isLastRootNode = false;
          }
          doc.children[doc.children.length - 1].isLastRootNode = true;
          ref1 = doc.children;
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            child = ref1[j];
            switch (false) {
              case !(child instanceof XMLDeclaration):
                results.push(this.declaration(child));
                break;
              case !(child instanceof XMLDocType):
                results.push(this.docType(child));
                break;
              case !(child instanceof XMLComment):
                results.push(this.comment(child));
                break;
              case !(child instanceof XMLProcessingInstruction):
                results.push(this.processingInstruction(child));
                break;
              default:
                results.push(this.element(child));
            }
          }
          return results;
        };
        XMLStreamWriter2.prototype.attribute = function(att) {
          return this.stream.write(" " + att.name + '="' + att.value + '"');
        };
        XMLStreamWriter2.prototype.cdata = function(node, level) {
          return this.stream.write(this.space(level) + "<![CDATA[" + node.text + "]]>" + this.endline(node));
        };
        XMLStreamWriter2.prototype.comment = function(node, level) {
          return this.stream.write(this.space(level) + "<!-- " + node.text + " -->" + this.endline(node));
        };
        XMLStreamWriter2.prototype.declaration = function(node, level) {
          this.stream.write(this.space(level));
          this.stream.write('<?xml version="' + node.version + '"');
          if (node.encoding != null) {
            this.stream.write(' encoding="' + node.encoding + '"');
          }
          if (node.standalone != null) {
            this.stream.write(' standalone="' + node.standalone + '"');
          }
          this.stream.write("?>");
          return this.stream.write(this.endline(node));
        };
        XMLStreamWriter2.prototype.docType = function(node, level) {
          var child, i, len, ref;
          level || (level = 0);
          this.stream.write(this.space(level));
          this.stream.write("<!DOCTYPE " + node.root().name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          if (node.children.length > 0) {
            this.stream.write(" [");
            this.stream.write(this.endline(node));
            ref = node.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              switch (false) {
                case !(child instanceof XMLDTDAttList):
                  this.dtdAttList(child, level + 1);
                  break;
                case !(child instanceof XMLDTDElement):
                  this.dtdElement(child, level + 1);
                  break;
                case !(child instanceof XMLDTDEntity):
                  this.dtdEntity(child, level + 1);
                  break;
                case !(child instanceof XMLDTDNotation):
                  this.dtdNotation(child, level + 1);
                  break;
                case !(child instanceof XMLCData):
                  this.cdata(child, level + 1);
                  break;
                case !(child instanceof XMLComment):
                  this.comment(child, level + 1);
                  break;
                case !(child instanceof XMLProcessingInstruction):
                  this.processingInstruction(child, level + 1);
                  break;
                default:
                  throw new Error("Unknown DTD node type: " + child.constructor.name);
              }
            }
            this.stream.write("]");
          }
          this.stream.write(">");
          return this.stream.write(this.endline(node));
        };
        XMLStreamWriter2.prototype.element = function(node, level) {
          var att, child, i, len, name, ref, ref1, space;
          level || (level = 0);
          space = this.space(level);
          this.stream.write(space + "<" + node.name);
          ref = node.attributes;
          for (name in ref) {
            if (!hasProp.call(ref, name))
              continue;
            att = ref[name];
            this.attribute(att);
          }
          if (node.children.length === 0 || node.children.every(function(e) {
            return e.value === "";
          })) {
            if (this.allowEmpty) {
              this.stream.write("></" + node.name + ">");
            } else {
              this.stream.write("/>");
            }
          } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {
            this.stream.write(">");
            this.stream.write(node.children[0].value);
            this.stream.write("</" + node.name + ">");
          } else {
            this.stream.write(">" + this.newline);
            ref1 = node.children;
            for (i = 0, len = ref1.length; i < len; i++) {
              child = ref1[i];
              switch (false) {
                case !(child instanceof XMLCData):
                  this.cdata(child, level + 1);
                  break;
                case !(child instanceof XMLComment):
                  this.comment(child, level + 1);
                  break;
                case !(child instanceof XMLElement):
                  this.element(child, level + 1);
                  break;
                case !(child instanceof XMLRaw):
                  this.raw(child, level + 1);
                  break;
                case !(child instanceof XMLText):
                  this.text(child, level + 1);
                  break;
                case !(child instanceof XMLProcessingInstruction):
                  this.processingInstruction(child, level + 1);
                  break;
                default:
                  throw new Error("Unknown XML node type: " + child.constructor.name);
              }
            }
            this.stream.write(space + "</" + node.name + ">");
          }
          return this.stream.write(this.endline(node));
        };
        XMLStreamWriter2.prototype.processingInstruction = function(node, level) {
          this.stream.write(this.space(level) + "<?" + node.target);
          if (node.value) {
            this.stream.write(" " + node.value);
          }
          return this.stream.write("?>" + this.endline(node));
        };
        XMLStreamWriter2.prototype.raw = function(node, level) {
          return this.stream.write(this.space(level) + node.value + this.endline(node));
        };
        XMLStreamWriter2.prototype.text = function(node, level) {
          return this.stream.write(this.space(level) + node.value + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdAttList = function(node, level) {
          this.stream.write(this.space(level) + "<!ATTLIST " + node.elementName + " " + node.attributeName + " " + node.attributeType);
          if (node.defaultValueType !== "#DEFAULT") {
            this.stream.write(" " + node.defaultValueType);
          }
          if (node.defaultValue) {
            this.stream.write(' "' + node.defaultValue + '"');
          }
          return this.stream.write(">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdElement = function(node, level) {
          return this.stream.write(this.space(level) + "<!ELEMENT " + node.name + " " + node.value + ">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdEntity = function(node, level) {
          this.stream.write(this.space(level) + "<!ENTITY");
          if (node.pe) {
            this.stream.write(" %");
          }
          this.stream.write(" " + node.name);
          if (node.value) {
            this.stream.write(' "' + node.value + '"');
          } else {
            if (node.pubID && node.sysID) {
              this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
            } else if (node.sysID) {
              this.stream.write(' SYSTEM "' + node.sysID + '"');
            }
            if (node.nData) {
              this.stream.write(" NDATA " + node.nData);
            }
          }
          return this.stream.write(">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.dtdNotation = function(node, level) {
          this.stream.write(this.space(level) + "<!NOTATION " + node.name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.pubID) {
            this.stream.write(' PUBLIC "' + node.pubID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          return this.stream.write(">" + this.endline(node));
        };
        XMLStreamWriter2.prototype.endline = function(node) {
          if (!node.isLastRootNode) {
            return this.newline;
          } else {
            return "";
          }
        };
        return XMLStreamWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// node_modules/xmlbuilder/lib/index.js
var require_lib = __commonJS({
  "node_modules/xmlbuilder/lib/index.js"(exports, module2) {
    (function() {
      var XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;
      ref = require_Utility(), assign = ref.assign, isFunction = ref.isFunction;
      XMLDocument = require_XMLDocument();
      XMLDocumentCB = require_XMLDocumentCB();
      XMLStringWriter = require_XMLStringWriter();
      XMLStreamWriter = require_XMLStreamWriter();
      module2.exports.create = function(name, xmldec, doctype, options2) {
        var doc, root;
        if (name == null) {
          throw new Error("Root element needs a name");
        }
        options2 = assign({}, xmldec, doctype, options2);
        doc = new XMLDocument(options2);
        root = doc.element(name);
        if (!options2.headless) {
          doc.declaration(options2);
          if (options2.pubID != null || options2.sysID != null) {
            doc.doctype(options2);
          }
        }
        return root;
      };
      module2.exports.begin = function(options2, onData, onEnd) {
        var ref1;
        if (isFunction(options2)) {
          ref1 = [options2, onData], onData = ref1[0], onEnd = ref1[1];
          options2 = {};
        }
        if (onData) {
          return new XMLDocumentCB(options2, onData, onEnd);
        } else {
          return new XMLDocument(options2);
        }
      };
      module2.exports.stringWriter = function(options2) {
        return new XMLStringWriter(options2);
      };
      module2.exports.streamWriter = function(stream, options2) {
        return new XMLStreamWriter(stream, options2);
      };
    }).call(exports);
  }
});

// node_modules/xmlrpc/lib/date_formatter.js
var require_date_formatter = __commonJS({
  "node_modules/xmlrpc/lib/date_formatter.js"(exports, module2) {
    var DateFormatter = function(opts) {
      this.opts = {};
      this.setOpts(opts);
    };
    DateFormatter.DEFAULT_OPTIONS = {
      colons: true,
      hyphens: false,
      local: true,
      ms: false,
      offset: false
    };
    DateFormatter.ISO8601 = new RegExp("([0-9]{4})([-]?([0-9]{2}))([-]?([0-9]{2}))(T([0-9]{2})(((:?([0-9]{2}))?((:?([0-9]{2}))?(.([0-9]+))?))?)(Z|([+-]([0-9]{2}(:?([0-9]{2}))?)))?)?");
    DateFormatter.prototype.setOpts = function(opts) {
      if (!opts)
        opts = DateFormatter.DEFAULT_OPTIONS;
      var ctx = this;
      Object.keys(DateFormatter.DEFAULT_OPTIONS).forEach(function(k) {
        ctx.opts[k] = opts.hasOwnProperty(k) ? opts[k] : DateFormatter.DEFAULT_OPTIONS[k];
      });
    };
    DateFormatter.prototype.decodeIso8601 = function(time) {
      var dateParts = time.toString().match(DateFormatter.ISO8601);
      if (!dateParts) {
        throw new Error("Expected a ISO8601 datetime but got '" + time + "'");
      }
      var date = [
        [dateParts[1], dateParts[3] || "01", dateParts[5] || "01"].join("-"),
        "T",
        [
          dateParts[7] || "00",
          dateParts[11] || "00",
          dateParts[14] || "00"
        ].join(":"),
        ".",
        dateParts[16] || "000"
      ].join("");
      date += dateParts[17] !== void 0 ? dateParts[17] + (dateParts[19] && dateParts[20] === void 0 ? "00" : "") : DateFormatter.formatCurrentOffset(new Date(date));
      return new Date(date);
    };
    DateFormatter.prototype.encodeIso8601 = function(date) {
      var parts = this.opts.local ? DateFormatter.getLocalDateParts(date) : DateFormatter.getUTCDateParts(date);
      return [
        [parts[0], parts[1], parts[2]].join(this.opts.hyphens ? "-" : ""),
        "T",
        [parts[3], parts[4], parts[5]].join(this.opts.colons ? ":" : ""),
        this.opts.ms ? "." + parts[6] : "",
        this.opts.local ? this.opts.offset ? DateFormatter.formatCurrentOffset(date) : "" : "Z"
      ].join("");
    };
    DateFormatter.getUTCDateParts = function(date) {
      return [
        date.getUTCFullYear(),
        DateFormatter.zeroPad(date.getUTCMonth() + 1, 2),
        DateFormatter.zeroPad(date.getUTCDate(), 2),
        DateFormatter.zeroPad(date.getUTCHours(), 2),
        DateFormatter.zeroPad(date.getUTCMinutes(), 2),
        DateFormatter.zeroPad(date.getUTCSeconds(), 2),
        DateFormatter.zeroPad(date.getUTCMilliseconds(), 3)
      ];
    };
    DateFormatter.getLocalDateParts = function(date) {
      return [
        date.getFullYear(),
        DateFormatter.zeroPad(date.getMonth() + 1, 2),
        DateFormatter.zeroPad(date.getDate(), 2),
        DateFormatter.zeroPad(date.getHours(), 2),
        DateFormatter.zeroPad(date.getMinutes(), 2),
        DateFormatter.zeroPad(date.getSeconds(), 2),
        DateFormatter.zeroPad(date.getMilliseconds(), 3)
      ];
    };
    DateFormatter.zeroPad = function(digit, length) {
      var padded = "" + digit;
      while (padded.length < length) {
        padded = "0" + padded;
      }
      return padded;
    };
    DateFormatter.formatCurrentOffset = function(d) {
      var offset = (d || new Date()).getTimezoneOffset();
      return offset === 0 ? "Z" : [
        offset < 0 ? "+" : "-",
        DateFormatter.zeroPad(Math.abs(Math.floor(offset / 60)), 2),
        ":",
        DateFormatter.zeroPad(Math.abs(offset % 60), 2)
      ].join("");
    };
    module2.exports = new DateFormatter();
  }
});

// node_modules/xmlrpc/lib/customtype.js
var require_customtype = __commonJS({
  "node_modules/xmlrpc/lib/customtype.js"(exports, module2) {
    var CustomType = module2.exports = function(raw) {
      this.raw = raw;
    };
    CustomType.prototype.serialize = function(xml) {
      return xml.ele(this.tagName).txt(this.raw);
    };
    CustomType.prototype.tagName = "customType";
  }
});

// node_modules/xmlrpc/lib/serializer.js
var require_serializer = __commonJS({
  "node_modules/xmlrpc/lib/serializer.js"(exports) {
    var xmlBuilder = require_lib();
    var dateFormatter = require_date_formatter();
    var CustomType = require_customtype();
    exports.serializeMethodCall = function(method, params, encoding) {
      var params = params || [];
      var options2 = { version: "1.0", allowSurrogateChars: true };
      if (encoding) {
        options2.encoding = encoding;
      }
      var xml = xmlBuilder.create("methodCall", options2).ele("methodName").txt(method).up().ele("params");
      params.forEach(function(param) {
        serializeValue(param, xml.ele("param"));
      });
      return xml.doc().toString();
    };
    exports.serializeMethodResponse = function(result) {
      var xml = xmlBuilder.create("methodResponse", { version: "1.0", allowSurrogateChars: true }).ele("params").ele("param");
      serializeValue(result, xml);
      return xml.doc().toString();
    };
    exports.serializeFault = function(fault) {
      var xml = xmlBuilder.create("methodResponse", { version: "1.0", allowSurrogateChars: true }).ele("fault");
      serializeValue(fault, xml);
      return xml.doc().toString();
    };
    function serializeValue(value, xml) {
      var stack = [{ value, xml }], current = null, valueNode = null, next = null;
      while (stack.length > 0) {
        current = stack[stack.length - 1];
        if (current.index !== void 0) {
          next = getNextItemsFrame(current);
          if (next) {
            stack.push(next);
          } else {
            stack.pop();
          }
        } else {
          valueNode = current.xml.ele("value");
          switch (typeof current.value) {
            case "boolean":
              appendBoolean(current.value, valueNode);
              stack.pop();
              break;
            case "string":
              appendString(current.value, valueNode);
              stack.pop();
              break;
            case "number":
              appendNumber(current.value, valueNode);
              stack.pop();
              break;
            case "object":
              if (current.value === null) {
                valueNode.ele("nil");
                stack.pop();
              } else if (current.value instanceof Date) {
                appendDatetime(current.value, valueNode);
                stack.pop();
              } else if (Buffer.isBuffer(current.value)) {
                appendBuffer(current.value, valueNode);
                stack.pop();
              } else if (current.value instanceof CustomType) {
                current.value.serialize(valueNode);
                stack.pop();
              } else {
                if (Array.isArray(current.value)) {
                  current.xml = valueNode.ele("array").ele("data");
                } else {
                  current.xml = valueNode.ele("struct");
                  current.keys = Object.keys(current.value);
                }
                current.index = 0;
                next = getNextItemsFrame(current);
                if (next) {
                  stack.push(next);
                } else {
                  stack.pop();
                }
              }
              break;
            default:
              stack.pop();
              break;
          }
        }
      }
    }
    function getNextItemsFrame(frame) {
      var nextFrame = null;
      if (frame.keys) {
        if (frame.index < frame.keys.length) {
          var key = frame.keys[frame.index++], member = frame.xml.ele("member").ele("name").text(key).up();
          nextFrame = {
            value: frame.value[key],
            xml: member
          };
        }
      } else if (frame.index < frame.value.length) {
        nextFrame = {
          value: frame.value[frame.index],
          xml: frame.xml
        };
        frame.index++;
      }
      return nextFrame;
    }
    function appendBoolean(value, xml) {
      xml.ele("boolean").txt(value ? 1 : 0);
    }
    var illegalChars = /^(?![^<&]*]]>[^<&]*)[^<&]*$/;
    function appendString(value, xml) {
      if (value.length === 0) {
        xml.ele("string");
      } else if (!illegalChars.test(value)) {
        xml.ele("string").d(value);
      } else {
        xml.ele("string").txt(value);
      }
    }
    function appendNumber(value, xml) {
      if (value % 1 == 0) {
        xml.ele("int").txt(value);
      } else {
        xml.ele("double").txt(value);
      }
    }
    function appendDatetime(value, xml) {
      xml.ele("dateTime.iso8601").txt(dateFormatter.encodeIso8601(value));
    }
    function appendBuffer(value, xml) {
      xml.ele("base64").txt(value.toString("base64"));
    }
  }
});

// node_modules/sax/lib/sax.js
var require_sax = __commonJS({
  "node_modules/sax/lib/sax.js"(exports) {
    (function(sax) {
      sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
      };
      sax.SAXParser = SAXParser;
      sax.SAXStream = SAXStream;
      sax.createStream = createStream;
      sax.MAX_BUFFER_LENGTH = 64 * 1024;
      var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ];
      function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt);
        }
        var parser2 = this;
        clearBuffers(parser2);
        parser2.q = parser2.c = "";
        parser2.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser2.opt = opt || {};
        parser2.opt.lowercase = parser2.opt.lowercase || parser2.opt.lowercasetags;
        parser2.looseCase = parser2.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser2.tags = [];
        parser2.closed = parser2.closedRoot = parser2.sawRoot = false;
        parser2.tag = parser2.error = null;
        parser2.strict = !!strict;
        parser2.noscript = !!(strict || parser2.opt.noscript);
        parser2.state = S.BEGIN;
        parser2.strictEntities = parser2.opt.strictEntities;
        parser2.ENTITIES = parser2.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser2.attribList = [];
        if (parser2.opt.xmlns) {
          parser2.ns = Object.create(rootNS);
        }
        parser2.trackPosition = parser2.opt.position !== false;
        if (parser2.trackPosition) {
          parser2.position = parser2.line = parser2.column = 0;
        }
        emit(parser2, "onready");
      }
      if (!Object.create) {
        Object.create = function(o) {
          function F() {
          }
          F.prototype = o;
          var newf = new F();
          return newf;
        };
      }
      if (!Object.keys) {
        Object.keys = function(o) {
          var a = [];
          for (var i in o)
            if (o.hasOwnProperty(i))
              a.push(i);
          return a;
        };
      }
      function checkBufferLength(parser2) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i = 0, l = buffers.length; i < l; i++) {
          var len = parser2[buffers[i]].length;
          if (len > maxAllowed) {
            switch (buffers[i]) {
              case "textNode":
                closeText(parser2);
                break;
              case "cdata":
                emitNode(parser2, "oncdata", parser2.cdata);
                parser2.cdata = "";
                break;
              case "script":
                emitNode(parser2, "onscript", parser2.script);
                parser2.script = "";
                break;
              default:
                error(parser2, "Max buffer length exceeded: " + buffers[i]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser2.bufferCheckPosition = m + parser2.position;
      }
      function clearBuffers(parser2) {
        for (var i = 0, l = buffers.length; i < l; i++) {
          parser2[buffers[i]] = "";
        }
      }
      function flushBuffers(parser2) {
        closeText(parser2);
        if (parser2.cdata !== "") {
          emitNode(parser2, "oncdata", parser2.cdata);
          parser2.cdata = "";
        }
        if (parser2.script !== "") {
          emitNode(parser2, "onscript", parser2.script);
          parser2.script = "";
        }
      }
      SAXParser.prototype = {
        end: function() {
          end(this);
        },
        write,
        resume: function() {
          this.error = null;
          return this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          flushBuffers(this);
        }
      };
      var Stream;
      try {
        Stream = require("stream").Stream;
      } catch (ex) {
        Stream = function() {
        };
      }
      var streamWraps = sax.EVENTS.filter(function(ev) {
        return ev !== "error" && ev !== "end";
      });
      function createStream(strict, opt) {
        return new SAXStream(strict, opt);
      }
      function SAXStream(strict, opt) {
        if (!(this instanceof SAXStream)) {
          return new SAXStream(strict, opt);
        }
        Stream.apply(this);
        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;
        var me = this;
        this._parser.onend = function() {
          me.emit("end");
        };
        this._parser.onerror = function(er) {
          me.emit("error", er);
          me._parser.error = null;
        };
        this._decoder = null;
        streamWraps.forEach(function(ev) {
          Object.defineProperty(me, "on" + ev, {
            get: function() {
              return me._parser["on" + ev];
            },
            set: function(h) {
              if (!h) {
                me.removeAllListeners(ev);
                me._parser["on" + ev] = h;
                return h;
              }
              me.on(ev, h);
            },
            enumerable: true,
            configurable: false
          });
        });
      }
      SAXStream.prototype = Object.create(Stream.prototype, {
        constructor: {
          value: SAXStream
        }
      });
      SAXStream.prototype.write = function(data) {
        if (typeof Buffer === "function" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(data)) {
          if (!this._decoder) {
            var SD = require("string_decoder").StringDecoder;
            this._decoder = new SD("utf8");
          }
          data = this._decoder.write(data);
        }
        this._parser.write(data.toString());
        this.emit("data", data);
        return true;
      };
      SAXStream.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
          this.write(chunk);
        }
        this._parser.end();
        return true;
      };
      SAXStream.prototype.on = function(ev, handler) {
        var me = this;
        if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
          me._parser["on" + ev] = function() {
            var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me.emit.apply(me, args);
          };
        }
        return Stream.prototype.on.call(me, ev, handler);
      };
      var CDATA = "[CDATA[";
      var DOCTYPE = "DOCTYPE";
      var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
      var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function isWhitespace(c) {
        return c === " " || c === "\n" || c === "\r" || c === "	";
      }
      function isQuote(c) {
        return c === '"' || c === "'";
      }
      function isAttribEnd(c) {
        return c === ">" || isWhitespace(c);
      }
      function isMatch(regex, c) {
        return regex.test(c);
      }
      function notMatch(regex, c) {
        return !isMatch(regex, c);
      }
      var S = 0;
      sax.STATE = {
        BEGIN: S++,
        BEGIN_WHITESPACE: S++,
        TEXT: S++,
        TEXT_ENTITY: S++,
        OPEN_WAKA: S++,
        SGML_DECL: S++,
        SGML_DECL_QUOTED: S++,
        DOCTYPE: S++,
        DOCTYPE_QUOTED: S++,
        DOCTYPE_DTD: S++,
        DOCTYPE_DTD_QUOTED: S++,
        COMMENT_STARTING: S++,
        COMMENT: S++,
        COMMENT_ENDING: S++,
        COMMENT_ENDED: S++,
        CDATA: S++,
        CDATA_ENDING: S++,
        CDATA_ENDING_2: S++,
        PROC_INST: S++,
        PROC_INST_BODY: S++,
        PROC_INST_ENDING: S++,
        OPEN_TAG: S++,
        OPEN_TAG_SLASH: S++,
        ATTRIB: S++,
        ATTRIB_NAME: S++,
        ATTRIB_NAME_SAW_WHITE: S++,
        ATTRIB_VALUE: S++,
        ATTRIB_VALUE_QUOTED: S++,
        ATTRIB_VALUE_CLOSED: S++,
        ATTRIB_VALUE_UNQUOTED: S++,
        ATTRIB_VALUE_ENTITY_Q: S++,
        ATTRIB_VALUE_ENTITY_U: S++,
        CLOSE_TAG: S++,
        CLOSE_TAG_SAW_WHITE: S++,
        SCRIPT: S++,
        SCRIPT_ENDING: S++
      };
      sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
      };
      sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
      };
      Object.keys(sax.ENTITIES).forEach(function(key) {
        var e = sax.ENTITIES[key];
        var s2 = typeof e === "number" ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s2;
      });
      for (var s in sax.STATE) {
        sax.STATE[sax.STATE[s]] = s;
      }
      S = sax.STATE;
      function emit(parser2, event, data) {
        parser2[event] && parser2[event](data);
      }
      function emitNode(parser2, nodeType, data) {
        if (parser2.textNode)
          closeText(parser2);
        emit(parser2, nodeType, data);
      }
      function closeText(parser2) {
        parser2.textNode = textopts(parser2.opt, parser2.textNode);
        if (parser2.textNode)
          emit(parser2, "ontext", parser2.textNode);
        parser2.textNode = "";
      }
      function textopts(opt, text) {
        if (opt.trim)
          text = text.trim();
        if (opt.normalize)
          text = text.replace(/\s+/g, " ");
        return text;
      }
      function error(parser2, er) {
        closeText(parser2);
        if (parser2.trackPosition) {
          er += "\nLine: " + parser2.line + "\nColumn: " + parser2.column + "\nChar: " + parser2.c;
        }
        er = new Error(er);
        parser2.error = er;
        emit(parser2, "onerror", er);
        return parser2;
      }
      function end(parser2) {
        if (parser2.sawRoot && !parser2.closedRoot)
          strictFail(parser2, "Unclosed root tag");
        if (parser2.state !== S.BEGIN && parser2.state !== S.BEGIN_WHITESPACE && parser2.state !== S.TEXT) {
          error(parser2, "Unexpected end");
        }
        closeText(parser2);
        parser2.c = "";
        parser2.closed = true;
        emit(parser2, "onend");
        SAXParser.call(parser2, parser2.strict, parser2.opt);
        return parser2;
      }
      function strictFail(parser2, message) {
        if (typeof parser2 !== "object" || !(parser2 instanceof SAXParser)) {
          throw new Error("bad call to strictFail");
        }
        if (parser2.strict) {
          error(parser2, message);
        }
      }
      function newTag(parser2) {
        if (!parser2.strict)
          parser2.tagName = parser2.tagName[parser2.looseCase]();
        var parent = parser2.tags[parser2.tags.length - 1] || parser2;
        var tag = parser2.tag = { name: parser2.tagName, attributes: {} };
        if (parser2.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser2.attribList.length = 0;
        emitNode(parser2, "onopentagstart", tag);
      }
      function qname(name, attribute) {
        var i = name.indexOf(":");
        var qualName = i < 0 ? ["", name] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        if (attribute && name === "xmlns") {
          prefix = "xmlns";
          local = "";
        }
        return { prefix, local };
      }
      function attrib(parser2) {
        if (!parser2.strict) {
          parser2.attribName = parser2.attribName[parser2.looseCase]();
        }
        if (parser2.attribList.indexOf(parser2.attribName) !== -1 || parser2.tag.attributes.hasOwnProperty(parser2.attribName)) {
          parser2.attribName = parser2.attribValue = "";
          return;
        }
        if (parser2.opt.xmlns) {
          var qn = qname(parser2.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;
          if (prefix === "xmlns") {
            if (local === "xml" && parser2.attribValue !== XML_NAMESPACE) {
              strictFail(parser2, "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser2.attribValue);
            } else if (local === "xmlns" && parser2.attribValue !== XMLNS_NAMESPACE) {
              strictFail(parser2, "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser2.attribValue);
            } else {
              var tag = parser2.tag;
              var parent = parser2.tags[parser2.tags.length - 1] || parser2;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser2.attribValue;
            }
          }
          parser2.attribList.push([parser2.attribName, parser2.attribValue]);
        } else {
          parser2.tag.attributes[parser2.attribName] = parser2.attribValue;
          emitNode(parser2, "onattribute", {
            name: parser2.attribName,
            value: parser2.attribValue
          });
        }
        parser2.attribName = parser2.attribValue = "";
      }
      function openTag(parser2, selfClosing) {
        if (parser2.opt.xmlns) {
          var tag = parser2.tag;
          var qn = qname(parser2.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || "";
          if (tag.prefix && !tag.uri) {
            strictFail(parser2, "Unbound namespace prefix: " + JSON.stringify(parser2.tagName));
            tag.uri = qn.prefix;
          }
          var parent = parser2.tags[parser2.tags.length - 1] || parser2;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              emitNode(parser2, "onopennamespace", {
                prefix: p,
                uri: tag.ns[p]
              });
            });
          }
          for (var i = 0, l = parser2.attribList.length; i < l; i++) {
            var nv = parser2.attribList[i];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
            var a = {
              name,
              value,
              prefix,
              local,
              uri
            };
            if (prefix && prefix !== "xmlns" && !uri) {
              strictFail(parser2, "Unbound namespace prefix: " + JSON.stringify(prefix));
              a.uri = prefix;
            }
            parser2.tag.attributes[name] = a;
            emitNode(parser2, "onattribute", a);
          }
          parser2.attribList.length = 0;
        }
        parser2.tag.isSelfClosing = !!selfClosing;
        parser2.sawRoot = true;
        parser2.tags.push(parser2.tag);
        emitNode(parser2, "onopentag", parser2.tag);
        if (!selfClosing) {
          if (!parser2.noscript && parser2.tagName.toLowerCase() === "script") {
            parser2.state = S.SCRIPT;
          } else {
            parser2.state = S.TEXT;
          }
          parser2.tag = null;
          parser2.tagName = "";
        }
        parser2.attribName = parser2.attribValue = "";
        parser2.attribList.length = 0;
      }
      function closeTag(parser2) {
        if (!parser2.tagName) {
          strictFail(parser2, "Weird empty close tag.");
          parser2.textNode += "</>";
          parser2.state = S.TEXT;
          return;
        }
        if (parser2.script) {
          if (parser2.tagName !== "script") {
            parser2.script += "</" + parser2.tagName + ">";
            parser2.tagName = "";
            parser2.state = S.SCRIPT;
            return;
          }
          emitNode(parser2, "onscript", parser2.script);
          parser2.script = "";
        }
        var t = parser2.tags.length;
        var tagName = parser2.tagName;
        if (!parser2.strict) {
          tagName = tagName[parser2.looseCase]();
        }
        var closeTo = tagName;
        while (t--) {
          var close = parser2.tags[t];
          if (close.name !== closeTo) {
            strictFail(parser2, "Unexpected close tag");
          } else {
            break;
          }
        }
        if (t < 0) {
          strictFail(parser2, "Unmatched closing tag: " + parser2.tagName);
          parser2.textNode += "</" + parser2.tagName + ">";
          parser2.state = S.TEXT;
          return;
        }
        parser2.tagName = tagName;
        var s2 = parser2.tags.length;
        while (s2-- > t) {
          var tag = parser2.tag = parser2.tags.pop();
          parser2.tagName = parser2.tag.name;
          emitNode(parser2, "onclosetag", parser2.tagName);
          var x = {};
          for (var i in tag.ns) {
            x[i] = tag.ns[i];
          }
          var parent = parser2.tags[parser2.tags.length - 1] || parser2;
          if (parser2.opt.xmlns && tag.ns !== parent.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              var n = tag.ns[p];
              emitNode(parser2, "onclosenamespace", { prefix: p, uri: n });
            });
          }
        }
        if (t === 0)
          parser2.closedRoot = true;
        parser2.tagName = parser2.attribValue = parser2.attribName = "";
        parser2.attribList.length = 0;
        parser2.state = S.TEXT;
      }
      function parseEntity(parser2) {
        var entity = parser2.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser2.ENTITIES[entity]) {
          return parser2.ENTITIES[entity];
        }
        if (parser2.ENTITIES[entityLC]) {
          return parser2.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === "#") {
          if (entity.charAt(1) === "x") {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser2, "Invalid character entity");
          return "&" + parser2.entity + ";";
        }
        return String.fromCodePoint(num);
      }
      function beginWhiteSpace(parser2, c) {
        if (c === "<") {
          parser2.state = S.OPEN_WAKA;
          parser2.startTagPosition = parser2.position;
        } else if (!isWhitespace(c)) {
          strictFail(parser2, "Non-whitespace before first tag.");
          parser2.textNode = c;
          parser2.state = S.TEXT;
        }
      }
      function charAt(chunk, i) {
        var result = "";
        if (i < chunk.length) {
          result = chunk.charAt(i);
        }
        return result;
      }
      function write(chunk) {
        var parser2 = this;
        if (this.error) {
          throw this.error;
        }
        if (parser2.closed) {
          return error(parser2, "Cannot write after close. Assign an onready handler.");
        }
        if (chunk === null) {
          return end(parser2);
        }
        if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        var i = 0;
        var c = "";
        while (true) {
          c = charAt(chunk, i++);
          parser2.c = c;
          if (!c) {
            break;
          }
          if (parser2.trackPosition) {
            parser2.position++;
            if (c === "\n") {
              parser2.line++;
              parser2.column = 0;
            } else {
              parser2.column++;
            }
          }
          switch (parser2.state) {
            case S.BEGIN:
              parser2.state = S.BEGIN_WHITESPACE;
              if (c === "\uFEFF") {
                continue;
              }
              beginWhiteSpace(parser2, c);
              continue;
            case S.BEGIN_WHITESPACE:
              beginWhiteSpace(parser2, c);
              continue;
            case S.TEXT:
              if (parser2.sawRoot && !parser2.closedRoot) {
                var starti = i - 1;
                while (c && c !== "<" && c !== "&") {
                  c = charAt(chunk, i++);
                  if (c && parser2.trackPosition) {
                    parser2.position++;
                    if (c === "\n") {
                      parser2.line++;
                      parser2.column = 0;
                    } else {
                      parser2.column++;
                    }
                  }
                }
                parser2.textNode += chunk.substring(starti, i - 1);
              }
              if (c === "<" && !(parser2.sawRoot && parser2.closedRoot && !parser2.strict)) {
                parser2.state = S.OPEN_WAKA;
                parser2.startTagPosition = parser2.position;
              } else {
                if (!isWhitespace(c) && (!parser2.sawRoot || parser2.closedRoot)) {
                  strictFail(parser2, "Text data outside of root node.");
                }
                if (c === "&") {
                  parser2.state = S.TEXT_ENTITY;
                } else {
                  parser2.textNode += c;
                }
              }
              continue;
            case S.SCRIPT:
              if (c === "<") {
                parser2.state = S.SCRIPT_ENDING;
              } else {
                parser2.script += c;
              }
              continue;
            case S.SCRIPT_ENDING:
              if (c === "/") {
                parser2.state = S.CLOSE_TAG;
              } else {
                parser2.script += "<" + c;
                parser2.state = S.SCRIPT;
              }
              continue;
            case S.OPEN_WAKA:
              if (c === "!") {
                parser2.state = S.SGML_DECL;
                parser2.sgmlDecl = "";
              } else if (isWhitespace(c)) {
              } else if (isMatch(nameStart, c)) {
                parser2.state = S.OPEN_TAG;
                parser2.tagName = c;
              } else if (c === "/") {
                parser2.state = S.CLOSE_TAG;
                parser2.tagName = "";
              } else if (c === "?") {
                parser2.state = S.PROC_INST;
                parser2.procInstName = parser2.procInstBody = "";
              } else {
                strictFail(parser2, "Unencoded <");
                if (parser2.startTagPosition + 1 < parser2.position) {
                  var pad = parser2.position - parser2.startTagPosition;
                  c = new Array(pad).join(" ") + c;
                }
                parser2.textNode += "<" + c;
                parser2.state = S.TEXT;
              }
              continue;
            case S.SGML_DECL:
              if ((parser2.sgmlDecl + c).toUpperCase() === CDATA) {
                emitNode(parser2, "onopencdata");
                parser2.state = S.CDATA;
                parser2.sgmlDecl = "";
                parser2.cdata = "";
              } else if (parser2.sgmlDecl + c === "--") {
                parser2.state = S.COMMENT;
                parser2.comment = "";
                parser2.sgmlDecl = "";
              } else if ((parser2.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                parser2.state = S.DOCTYPE;
                if (parser2.doctype || parser2.sawRoot) {
                  strictFail(parser2, "Inappropriately located doctype declaration");
                }
                parser2.doctype = "";
                parser2.sgmlDecl = "";
              } else if (c === ">") {
                emitNode(parser2, "onsgmldeclaration", parser2.sgmlDecl);
                parser2.sgmlDecl = "";
                parser2.state = S.TEXT;
              } else if (isQuote(c)) {
                parser2.state = S.SGML_DECL_QUOTED;
                parser2.sgmlDecl += c;
              } else {
                parser2.sgmlDecl += c;
              }
              continue;
            case S.SGML_DECL_QUOTED:
              if (c === parser2.q) {
                parser2.state = S.SGML_DECL;
                parser2.q = "";
              }
              parser2.sgmlDecl += c;
              continue;
            case S.DOCTYPE:
              if (c === ">") {
                parser2.state = S.TEXT;
                emitNode(parser2, "ondoctype", parser2.doctype);
                parser2.doctype = true;
              } else {
                parser2.doctype += c;
                if (c === "[") {
                  parser2.state = S.DOCTYPE_DTD;
                } else if (isQuote(c)) {
                  parser2.state = S.DOCTYPE_QUOTED;
                  parser2.q = c;
                }
              }
              continue;
            case S.DOCTYPE_QUOTED:
              parser2.doctype += c;
              if (c === parser2.q) {
                parser2.q = "";
                parser2.state = S.DOCTYPE;
              }
              continue;
            case S.DOCTYPE_DTD:
              parser2.doctype += c;
              if (c === "]") {
                parser2.state = S.DOCTYPE;
              } else if (isQuote(c)) {
                parser2.state = S.DOCTYPE_DTD_QUOTED;
                parser2.q = c;
              }
              continue;
            case S.DOCTYPE_DTD_QUOTED:
              parser2.doctype += c;
              if (c === parser2.q) {
                parser2.state = S.DOCTYPE_DTD;
                parser2.q = "";
              }
              continue;
            case S.COMMENT:
              if (c === "-") {
                parser2.state = S.COMMENT_ENDING;
              } else {
                parser2.comment += c;
              }
              continue;
            case S.COMMENT_ENDING:
              if (c === "-") {
                parser2.state = S.COMMENT_ENDED;
                parser2.comment = textopts(parser2.opt, parser2.comment);
                if (parser2.comment) {
                  emitNode(parser2, "oncomment", parser2.comment);
                }
                parser2.comment = "";
              } else {
                parser2.comment += "-" + c;
                parser2.state = S.COMMENT;
              }
              continue;
            case S.COMMENT_ENDED:
              if (c !== ">") {
                strictFail(parser2, "Malformed comment");
                parser2.comment += "--" + c;
                parser2.state = S.COMMENT;
              } else {
                parser2.state = S.TEXT;
              }
              continue;
            case S.CDATA:
              if (c === "]") {
                parser2.state = S.CDATA_ENDING;
              } else {
                parser2.cdata += c;
              }
              continue;
            case S.CDATA_ENDING:
              if (c === "]") {
                parser2.state = S.CDATA_ENDING_2;
              } else {
                parser2.cdata += "]" + c;
                parser2.state = S.CDATA;
              }
              continue;
            case S.CDATA_ENDING_2:
              if (c === ">") {
                if (parser2.cdata) {
                  emitNode(parser2, "oncdata", parser2.cdata);
                }
                emitNode(parser2, "onclosecdata");
                parser2.cdata = "";
                parser2.state = S.TEXT;
              } else if (c === "]") {
                parser2.cdata += "]";
              } else {
                parser2.cdata += "]]" + c;
                parser2.state = S.CDATA;
              }
              continue;
            case S.PROC_INST:
              if (c === "?") {
                parser2.state = S.PROC_INST_ENDING;
              } else if (isWhitespace(c)) {
                parser2.state = S.PROC_INST_BODY;
              } else {
                parser2.procInstName += c;
              }
              continue;
            case S.PROC_INST_BODY:
              if (!parser2.procInstBody && isWhitespace(c)) {
                continue;
              } else if (c === "?") {
                parser2.state = S.PROC_INST_ENDING;
              } else {
                parser2.procInstBody += c;
              }
              continue;
            case S.PROC_INST_ENDING:
              if (c === ">") {
                emitNode(parser2, "onprocessinginstruction", {
                  name: parser2.procInstName,
                  body: parser2.procInstBody
                });
                parser2.procInstName = parser2.procInstBody = "";
                parser2.state = S.TEXT;
              } else {
                parser2.procInstBody += "?" + c;
                parser2.state = S.PROC_INST_BODY;
              }
              continue;
            case S.OPEN_TAG:
              if (isMatch(nameBody, c)) {
                parser2.tagName += c;
              } else {
                newTag(parser2);
                if (c === ">") {
                  openTag(parser2);
                } else if (c === "/") {
                  parser2.state = S.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c)) {
                    strictFail(parser2, "Invalid character in tag name");
                  }
                  parser2.state = S.ATTRIB;
                }
              }
              continue;
            case S.OPEN_TAG_SLASH:
              if (c === ">") {
                openTag(parser2, true);
                closeTag(parser2);
              } else {
                strictFail(parser2, "Forward-slash in opening tag not followed by >");
                parser2.state = S.ATTRIB;
              }
              continue;
            case S.ATTRIB:
              if (isWhitespace(c)) {
                continue;
              } else if (c === ">") {
                openTag(parser2);
              } else if (c === "/") {
                parser2.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                parser2.attribName = c;
                parser2.attribValue = "";
                parser2.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser2, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME:
              if (c === "=") {
                parser2.state = S.ATTRIB_VALUE;
              } else if (c === ">") {
                strictFail(parser2, "Attribute without value");
                parser2.attribValue = parser2.attribName;
                attrib(parser2);
                openTag(parser2);
              } else if (isWhitespace(c)) {
                parser2.state = S.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c)) {
                parser2.attribName += c;
              } else {
                strictFail(parser2, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME_SAW_WHITE:
              if (c === "=") {
                parser2.state = S.ATTRIB_VALUE;
              } else if (isWhitespace(c)) {
                continue;
              } else {
                strictFail(parser2, "Attribute without value");
                parser2.tag.attributes[parser2.attribName] = "";
                parser2.attribValue = "";
                emitNode(parser2, "onattribute", {
                  name: parser2.attribName,
                  value: ""
                });
                parser2.attribName = "";
                if (c === ">") {
                  openTag(parser2);
                } else if (isMatch(nameStart, c)) {
                  parser2.attribName = c;
                  parser2.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser2, "Invalid attribute name");
                  parser2.state = S.ATTRIB;
                }
              }
              continue;
            case S.ATTRIB_VALUE:
              if (isWhitespace(c)) {
                continue;
              } else if (isQuote(c)) {
                parser2.q = c;
                parser2.state = S.ATTRIB_VALUE_QUOTED;
              } else {
                strictFail(parser2, "Unquoted attribute value");
                parser2.state = S.ATTRIB_VALUE_UNQUOTED;
                parser2.attribValue = c;
              }
              continue;
            case S.ATTRIB_VALUE_QUOTED:
              if (c !== parser2.q) {
                if (c === "&") {
                  parser2.state = S.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser2.attribValue += c;
                }
                continue;
              }
              attrib(parser2);
              parser2.q = "";
              parser2.state = S.ATTRIB_VALUE_CLOSED;
              continue;
            case S.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c)) {
                parser2.state = S.ATTRIB;
              } else if (c === ">") {
                openTag(parser2);
              } else if (c === "/") {
                parser2.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                strictFail(parser2, "No whitespace between attributes");
                parser2.attribName = c;
                parser2.attribValue = "";
                parser2.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser2, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c)) {
                if (c === "&") {
                  parser2.state = S.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser2.attribValue += c;
                }
                continue;
              }
              attrib(parser2);
              if (c === ">") {
                openTag(parser2);
              } else {
                parser2.state = S.ATTRIB;
              }
              continue;
            case S.CLOSE_TAG:
              if (!parser2.tagName) {
                if (isWhitespace(c)) {
                  continue;
                } else if (notMatch(nameStart, c)) {
                  if (parser2.script) {
                    parser2.script += "</" + c;
                    parser2.state = S.SCRIPT;
                  } else {
                    strictFail(parser2, "Invalid tagname in closing tag.");
                  }
                } else {
                  parser2.tagName = c;
                }
              } else if (c === ">") {
                closeTag(parser2);
              } else if (isMatch(nameBody, c)) {
                parser2.tagName += c;
              } else if (parser2.script) {
                parser2.script += "</" + parser2.tagName;
                parser2.tagName = "";
                parser2.state = S.SCRIPT;
              } else {
                if (!isWhitespace(c)) {
                  strictFail(parser2, "Invalid tagname in closing tag");
                }
                parser2.state = S.CLOSE_TAG_SAW_WHITE;
              }
              continue;
            case S.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c)) {
                continue;
              }
              if (c === ">") {
                closeTag(parser2);
              } else {
                strictFail(parser2, "Invalid characters in closing tag");
              }
              continue;
            case S.TEXT_ENTITY:
            case S.ATTRIB_VALUE_ENTITY_Q:
            case S.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser2.state) {
                case S.TEXT_ENTITY:
                  returnState = S.TEXT;
                  buffer = "textNode";
                  break;
                case S.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S.ATTRIB_VALUE_QUOTED;
                  buffer = "attribValue";
                  break;
                case S.ATTRIB_VALUE_ENTITY_U:
                  returnState = S.ATTRIB_VALUE_UNQUOTED;
                  buffer = "attribValue";
                  break;
              }
              if (c === ";") {
                parser2[buffer] += parseEntity(parser2);
                parser2.entity = "";
                parser2.state = returnState;
              } else if (isMatch(parser2.entity.length ? entityBody : entityStart, c)) {
                parser2.entity += c;
              } else {
                strictFail(parser2, "Invalid character in entity name");
                parser2[buffer] += "&" + parser2.entity + c;
                parser2.entity = "";
                parser2.state = returnState;
              }
              continue;
            default:
              throw new Error(parser2, "Unknown state: " + parser2.state);
          }
        }
        if (parser2.position >= parser2.bufferCheckPosition) {
          checkBufferLength(parser2);
        }
        return parser2;
      }
      if (!String.fromCodePoint) {
        (function() {
          var stringFromCharCode = String.fromCharCode;
          var floor = Math.floor;
          var fromCodePoint = function() {
            var MAX_SIZE = 16384;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return "";
            }
            var result = "";
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor(codePoint) !== codePoint) {
                throw RangeError("Invalid code point: " + codePoint);
              }
              if (codePoint <= 65535) {
                codeUnits.push(codePoint);
              } else {
                codePoint -= 65536;
                highSurrogate = (codePoint >> 10) + 55296;
                lowSurrogate = codePoint % 1024 + 56320;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                result += stringFromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result;
          };
          if (Object.defineProperty) {
            Object.defineProperty(String, "fromCodePoint", {
              value: fromCodePoint,
              configurable: true,
              writable: true
            });
          } else {
            String.fromCodePoint = fromCodePoint;
          }
        })();
      }
    })(typeof exports === "undefined" ? exports.sax = {} : exports);
  }
});

// node_modules/xmlrpc/lib/deserializer.js
var require_deserializer = __commonJS({
  "node_modules/xmlrpc/lib/deserializer.js"(exports, module2) {
    var sax = require_sax();
    var dateFormatter = require_date_formatter();
    var Deserializer = function(encoding) {
      this.type = null;
      this.responseType = null;
      this.stack = [];
      this.marks = [];
      this.data = [];
      this.methodname = null;
      this.encoding = encoding || "utf8";
      this.value = false;
      this.callback = null;
      this.error = null;
      this.parser = sax.createStream();
      this.parser.on("opentag", this.onOpentag.bind(this));
      this.parser.on("closetag", this.onClosetag.bind(this));
      this.parser.on("text", this.onText.bind(this));
      this.parser.on("cdata", this.onCDATA.bind(this));
      this.parser.on("end", this.onDone.bind(this));
      this.parser.on("error", this.onError.bind(this));
    };
    Deserializer.prototype.deserializeMethodResponse = function(stream, callback) {
      var that = this;
      this.callback = function(error, result) {
        if (error) {
          callback(error);
        } else if (result.length > 1) {
          callback(new Error("Response has more than one param"));
        } else if (that.type !== "methodresponse") {
          callback(new Error("Not a method response"));
        } else if (!that.responseType) {
          callback(new Error("Invalid method response"));
        } else {
          callback(null, result[0]);
        }
      };
      stream.setEncoding(this.encoding);
      stream.on("error", this.onError.bind(this));
      stream.pipe(this.parser);
    };
    Deserializer.prototype.deserializeMethodCall = function(stream, callback) {
      var that = this;
      this.callback = function(error, result) {
        if (error) {
          callback(error);
        } else if (that.type !== "methodcall") {
          callback(new Error("Not a method call"));
        } else if (!that.methodname) {
          callback(new Error("Method call did not contain a method name"));
        } else {
          callback(null, that.methodname, result);
        }
      };
      stream.setEncoding(this.encoding);
      stream.on("error", this.onError.bind(this));
      stream.pipe(this.parser);
    };
    Deserializer.prototype.onDone = function() {
      var that = this;
      if (!this.error) {
        if (this.type === null || this.marks.length) {
          this.callback(new Error("Invalid XML-RPC message"));
        } else if (this.responseType === "fault") {
          var createFault = function(fault) {
            var error = new Error("XML-RPC fault" + (fault.faultString ? ": " + fault.faultString : ""));
            error.code = fault.faultCode;
            error.faultCode = fault.faultCode;
            error.faultString = fault.faultString;
            return error;
          };
          this.callback(createFault(this.stack[0]));
        } else {
          this.callback(void 0, this.stack);
        }
      }
    };
    Deserializer.prototype.onError = function(msg) {
      if (!this.error) {
        if (typeof msg === "string") {
          this.error = new Error(msg);
        } else {
          this.error = msg;
        }
        this.callback(this.error);
      }
    };
    Deserializer.prototype.push = function(value) {
      this.stack.push(value);
    };
    Deserializer.prototype.onOpentag = function(node) {
      if (node.name === "ARRAY" || node.name === "STRUCT") {
        this.marks.push(this.stack.length);
      }
      this.data = [];
      this.value = node.name === "VALUE";
    };
    Deserializer.prototype.onText = function(text) {
      this.data.push(text);
    };
    Deserializer.prototype.onCDATA = function(cdata) {
      this.data.push(cdata);
    };
    Deserializer.prototype.onClosetag = function(el) {
      var data = this.data.join("");
      try {
        switch (el) {
          case "BOOLEAN":
            this.endBoolean(data);
            break;
          case "INT":
          case "I4":
            this.endInt(data);
            break;
          case "I8":
            this.endI8(data);
            break;
          case "DOUBLE":
            this.endDouble(data);
            break;
          case "STRING":
          case "NAME":
            this.endString(data);
            break;
          case "ARRAY":
            this.endArray(data);
            break;
          case "STRUCT":
            this.endStruct(data);
            break;
          case "BASE64":
            this.endBase64(data);
            break;
          case "DATETIME.ISO8601":
            this.endDateTime(data);
            break;
          case "VALUE":
            this.endValue(data);
            break;
          case "PARAMS":
            this.endParams(data);
            break;
          case "FAULT":
            this.endFault(data);
            break;
          case "METHODRESPONSE":
            this.endMethodResponse(data);
            break;
          case "METHODNAME":
            this.endMethodName(data);
            break;
          case "METHODCALL":
            this.endMethodCall(data);
            break;
          case "NIL":
            this.endNil(data);
            break;
          case "DATA":
          case "PARAM":
          case "MEMBER":
            break;
          default:
            this.onError("Unknown XML-RPC tag '" + el + "'");
            break;
        }
      } catch (e) {
        this.onError(e);
      }
    };
    Deserializer.prototype.endNil = function(data) {
      this.push(null);
      this.value = false;
    };
    Deserializer.prototype.endBoolean = function(data) {
      if (data === "1") {
        this.push(true);
      } else if (data === "0") {
        this.push(false);
      } else {
        throw new Error("Illegal boolean value '" + data + "'");
      }
      this.value = false;
    };
    Deserializer.prototype.endInt = function(data) {
      var value = parseInt(data, 10);
      if (isNaN(value)) {
        throw new Error("Expected an integer but got '" + data + "'");
      } else {
        this.push(value);
        this.value = false;
      }
    };
    Deserializer.prototype.endDouble = function(data) {
      var value = parseFloat(data);
      if (isNaN(value)) {
        throw new Error("Expected a double but got '" + data + "'");
      } else {
        this.push(value);
        this.value = false;
      }
    };
    Deserializer.prototype.endString = function(data) {
      this.push(data);
      this.value = false;
    };
    Deserializer.prototype.endArray = function(data) {
      var mark = this.marks.pop();
      this.stack.splice(mark, this.stack.length - mark, this.stack.slice(mark));
      this.value = false;
    };
    Deserializer.prototype.endStruct = function(data) {
      var mark = this.marks.pop(), struct = {}, items = this.stack.slice(mark), i = 0;
      for (; i < items.length; i += 2) {
        struct[items[i]] = items[i + 1];
      }
      this.stack.splice(mark, this.stack.length - mark, struct);
      this.value = false;
    };
    Deserializer.prototype.endBase64 = function(data) {
      var buffer = new Buffer(data, "base64");
      this.push(buffer);
      this.value = false;
    };
    Deserializer.prototype.endDateTime = function(data) {
      var date = dateFormatter.decodeIso8601(data);
      this.push(date);
      this.value = false;
    };
    var isInteger = /^-?\d+$/;
    Deserializer.prototype.endI8 = function(data) {
      if (!isInteger.test(data)) {
        throw new Error("Expected integer (I8) value but got '" + data + "'");
      } else {
        this.endString(data);
      }
    };
    Deserializer.prototype.endValue = function(data) {
      if (this.value) {
        this.endString(data);
      }
    };
    Deserializer.prototype.endParams = function(data) {
      this.responseType = "params";
    };
    Deserializer.prototype.endFault = function(data) {
      this.responseType = "fault";
    };
    Deserializer.prototype.endMethodResponse = function(data) {
      this.type = "methodresponse";
    };
    Deserializer.prototype.endMethodName = function(data) {
      this.methodname = data;
    };
    Deserializer.prototype.endMethodCall = function(data) {
      this.type = "methodcall";
    };
    module2.exports = Deserializer;
  }
});

// node_modules/xmlrpc/lib/cookies.js
var require_cookies = __commonJS({
  "node_modules/xmlrpc/lib/cookies.js"(exports, module2) {
    function Cookies() {
      this.cookies = {};
    }
    Cookies.prototype = {
      get: function(name) {
        var cookie = this.cookies[name];
        if (cookie && this.checkNotExpired(name)) {
          return this.cookies[name].value;
        }
        return null;
      },
      set: function(name, value, options2) {
        var cookie = typeof options2 == "object" ? { value, expires: options2.expires, secure: options2.secure || false, new: options2.new || false } : { value };
        if (this.checkNotExpired(name, cookie)) {
          this.cookies[name] = cookie;
        }
      },
      getExpirationDate: function(name) {
        return this.cookies[name] ? this.cookies[name].expires : null;
      },
      checkNotExpired: function(name, cookie) {
        if (typeof cookie === "undefined") {
          cookie = this.cookies[name];
        }
        var now = new Date();
        if (cookie && cookie.expires && now > cookie.expires) {
          delete this.cookies[name];
          return false;
        }
        return true;
      },
      parseResponse: function(headers) {
        var cookies = headers["set-cookie"];
        if (cookies) {
          cookies.forEach(function(c) {
            var cookiesParams = c.split(";");
            var cookiePair = cookiesParams.shift().split("=");
            var options2 = {};
            cookiesParams.forEach(function(param) {
              param = param.trim();
              if (param.toLowerCase().indexOf("expires") == 0) {
                var date = param.split("=")[1].trim();
                options2.expires = new Date(date);
              }
            });
            this.set(cookiePair[0].trim(), cookiePair[1].trim(), options2);
          }.bind(this));
        }
      },
      composeRequest: function(headers) {
        if (Object.keys(this.cookies).length == 0) {
          return;
        }
        headers["Cookie"] = this.toString();
      },
      toString: function() {
        return Object.keys(this.cookies).filter(this.checkNotExpired.bind(this)).map(function(name) {
          return name + "=" + this.cookies[name].value;
        }.bind(this)).join(";");
      }
    };
    module2.exports = Cookies;
  }
});

// node_modules/xmlrpc/lib/client.js
var require_client = __commonJS({
  "node_modules/xmlrpc/lib/client.js"(exports, module2) {
    var http = require("http");
    var https = require("https");
    var url = require("url");
    var Serializer = require_serializer();
    var Deserializer = require_deserializer();
    var Cookies = require_cookies();
    function Client2(options2, isSecure) {
      if (this instanceof Client2 === false) {
        return new Client2(options2, isSecure);
      }
      if (typeof options2 === "string") {
        options2 = url.parse(options2);
        options2.host = options2.hostname;
        options2.path = options2.pathname;
      }
      if (typeof options2.url !== "undefined") {
        var parsedUrl = url.parse(options2.url);
        options2.host = parsedUrl.hostname;
        options2.path = parsedUrl.pathname;
        options2.port = parsedUrl.port;
      }
      var headers = {
        "User-Agent": "NodeJS XML-RPC Client",
        "Content-Type": "text/xml",
        "Accept": "text/xml",
        "Accept-Charset": "UTF8",
        "Connection": "Keep-Alive"
      };
      options2.headers = options2.headers || {};
      if (options2.headers.Authorization == null && options2.basic_auth != null && options2.basic_auth.user != null && options2.basic_auth.pass != null) {
        var auth = options2.basic_auth.user + ":" + options2.basic_auth.pass;
        options2.headers["Authorization"] = "Basic " + new Buffer(auth).toString("base64");
      }
      for (var attribute in headers) {
        if (options2.headers[attribute] === void 0) {
          options2.headers[attribute] = headers[attribute];
        }
      }
      options2.method = "POST";
      this.options = options2;
      this.isSecure = isSecure;
      this.headersProcessors = {
        processors: [],
        composeRequest: function(headers2) {
          this.processors.forEach(function(p) {
            p.composeRequest(headers2);
          });
        },
        parseResponse: function(headers2) {
          this.processors.forEach(function(p) {
            p.parseResponse(headers2);
          });
        }
      };
      if (options2.cookies) {
        this.cookies = new Cookies();
        this.headersProcessors.processors.unshift(this.cookies);
      }
    }
    Client2.prototype.methodCall = function methodCall(method, params, callback) {
      var options2 = this.options;
      var xml = Serializer.serializeMethodCall(method, params, options2.encoding);
      var transport = this.isSecure ? https : http;
      options2.headers["Content-Length"] = Buffer.byteLength(xml, "utf8");
      this.headersProcessors.composeRequest(options2.headers);
      var request = transport.request(options2, function(response) {
        var body = [];
        response.on("data", function(chunk) {
          body.push(chunk);
        });
        function __enrichError(err) {
          Object.defineProperty(err, "req", { value: request });
          Object.defineProperty(err, "res", { value: response });
          Object.defineProperty(err, "body", { value: body.join("") });
          return err;
        }
        if (response.statusCode == 404) {
          callback(__enrichError(new Error("Not Found")));
        } else {
          this.headersProcessors.parseResponse(response.headers);
          var deserializer = new Deserializer(options2.responseEncoding);
          deserializer.deserializeMethodResponse(response, function(err, result) {
            if (err) {
              err = __enrichError(err);
            }
            callback(err, result);
          });
        }
      }.bind(this));
      request.on("error", callback);
      request.write(xml, "utf8");
      request.end();
    };
    Client2.prototype.getCookie = function getCookie(name) {
      if (!this.cookies) {
        throw "Cookies support is not turned on for this client instance";
      }
      return this.cookies.get(name);
    };
    Client2.prototype.setCookie = function setCookie(name, value) {
      if (!this.cookies) {
        throw "Cookies support is not turned on for this client instance";
      }
      this.cookies.set(name, value);
      return this;
    };
    module2.exports = Client2;
  }
});

// node_modules/xmlrpc/lib/server.js
var require_server = __commonJS({
  "node_modules/xmlrpc/lib/server.js"(exports, module2) {
    var http = require("http");
    var https = require("https");
    var url = require("url");
    var EventEmitter = require("events").EventEmitter;
    var Serializer = require_serializer();
    var Deserializer = require_deserializer();
    function Server(options2, isSecure, onListening) {
      if (this instanceof Server === false) {
        return new Server(options2, isSecure);
      }
      onListening = onListening || function() {
      };
      var that = this;
      if (typeof options2 === "string") {
        options2 = url.parse(options2);
        options2.host = options2.hostname;
        options2.path = options2.pathname;
      }
      function handleMethodCall(request, response) {
        var deserializer = new Deserializer();
        deserializer.deserializeMethodCall(request, function(error, methodName, params) {
          if (Object.prototype.hasOwnProperty.call(that._events, methodName)) {
            that.emit(methodName, null, params, function(error2, value) {
              var xml = null;
              if (error2 !== null) {
                xml = Serializer.serializeFault(error2);
              } else {
                xml = Serializer.serializeMethodResponse(value);
              }
              response.writeHead(200, { "Content-Type": "text/xml" });
              response.end(xml);
            });
          } else {
            that.emit("NotFound", methodName, params);
            response.writeHead(404);
            response.end();
          }
        });
      }
      this.httpServer = isSecure ? https.createServer(options2, handleMethodCall) : http.createServer(handleMethodCall);
      process.nextTick(function() {
        this.httpServer.listen(options2.port, options2.host, onListening);
      }.bind(this));
      this.close = function(callback) {
        this.httpServer.once("close", callback);
        this.httpServer.close();
      }.bind(this);
    }
    Server.prototype.__proto__ = EventEmitter.prototype;
    module2.exports = Server;
  }
});

// node_modules/xmlrpc/lib/xmlrpc.js
var require_xmlrpc = __commonJS({
  "node_modules/xmlrpc/lib/xmlrpc.js"(exports) {
    var Client2 = require_client();
    var Server = require_server();
    var CustomType = require_customtype();
    var dateFormatter = require_date_formatter();
    var xmlrpc = exports;
    xmlrpc.createClient = function(options2) {
      return new Client2(options2, false);
    };
    xmlrpc.createSecureClient = function(options2) {
      return new Client2(options2, true);
    };
    xmlrpc.createServer = function(options2, callback) {
      return new Server(options2, false, callback);
    };
    xmlrpc.createSecureServer = function(options2, callback) {
      return new Server(options2, true, callback);
    };
    xmlrpc.CustomType = CustomType;
    xmlrpc.dateFormatter = dateFormatter;
  }
});

// src/main.ts
__export(exports, {
  default: () => WordpressPlugin
});
var import_obsidian7 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var ApiType;
(function(ApiType2) {
  ApiType2["XML_RPC"] = "xml-rpc";
  ApiType2["RestAPI_Jetpack"] = "restapi-jetpack";
})(ApiType || (ApiType = {}));
var DEFAULT_SETTINGS = {
  apiType: ApiType.XML_RPC,
  endpoint: "",
  saveUserName: false,
  showRibbonIcon: false
};
var WordpressSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for WordPress Publish plugin" });
    new import_obsidian.Setting(containerEl).setName("WordPress URL").setDesc("Full path of installed WordPress, for example, https://example.com/wordpress").addText((text) => text.setPlaceholder("https://example.com/wordpress").setValue(this.plugin.settings.endpoint).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.endpoint = value;
      yield this.plugin.saveSettings();
      this.display();
    })));
    new import_obsidian.Setting(containerEl).setName("API Type").setDesc(`Select which API you want to use.
- XML-RPC: Enabled by default but some host may disable it
- RESTful API with Jetpack`).addDropdown((dropdown) => {
      dropdown.addOption(ApiType.XML_RPC, "XML-RPC").addOption(ApiType.RestAPI_Jetpack, "RESTful API with Jetpack").setValue(this.plugin.settings.apiType).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.apiType = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    if (this.plugin.settings.apiType === ApiType.XML_RPC) {
      new import_obsidian.Setting(containerEl).setName("Save User Name").setDesc(`If enabled, the WordPress user name you typed will be saved in local data.
This might be user name disclosure in synchronize services.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.saveUserName).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.saveUserName = value;
        yield this.plugin.saveSettings();
        this.display();
      })));
      if (this.plugin.settings.saveUserName) {
        new import_obsidian.Setting(containerEl).setName("WordPress User Name").setDesc("User name of WordPress").addText((text) => text.setPlaceholder("User name").setValue(this.plugin.settings.userName).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.userName = value;
          yield this.plugin.saveSettings();
          this.display();
        })));
      } else {
        delete this.plugin.settings.userName;
      }
    }
    new import_obsidian.Setting(containerEl).setName("Show icon in sidebar").setDesc(`If enabled, a button which opens publish panel will be added to the Obsidian sidebar.
Changes only take effect on reload.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showRibbonIcon = value;
      yield this.plugin.saveSettings();
      this.display();
    })));
  }
};

// src/icons.ts
var import_obsidian2 = __toModule(require("obsidian"));
var icons = {
  "wp-logo": `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <g fill="currentColor">
    <path d="M 7.109375 50 C 7.109375 66.976562 16.976562 81.648438 31.28125 88.601562 L 10.820312 32.542969 C 8.441406 37.878906 7.109375 43.78125 7.109375 50 Z M 7.109375 50 "/>
    <path d="M 78.957031 47.835938 C 78.957031 42.535156 77.054688 38.863281 75.421875 36.003906 C 73.246094 32.472656 71.207031 29.480469 71.207031 25.945312 C 71.207031 22.003906 74.199219 18.332031 78.410156 18.332031 C 78.601562 18.332031 78.78125 18.355469 78.96875 18.367188 C 71.335938 11.375 61.167969 7.105469 50 7.105469 C 35.015625 7.105469 21.832031 14.796875 14.164062 26.441406 C 15.167969 26.472656 16.117188 26.492188 16.921875 26.492188 C 21.410156 26.492188 28.355469 25.949219 28.355469 25.949219 C 30.667969 25.8125 30.941406 29.207031 28.628906 29.480469 C 28.628906 29.480469 26.304688 29.753906 23.722656 29.890625 L 39.339844 76.351562 L 48.726562 48.199219 L 42.042969 29.886719 C 39.734375 29.753906 37.546875 29.480469 37.546875 29.480469 C 35.234375 29.34375 35.507812 25.808594 37.816406 25.945312 C 37.816406 25.945312 44.902344 26.492188 49.117188 26.492188 C 53.601562 26.492188 60.546875 25.945312 60.546875 25.945312 C 62.859375 25.808594 63.132812 29.207031 60.824219 29.480469 C 60.824219 29.480469 58.492188 29.753906 55.914062 29.886719 L 71.414062 75.996094 L 75.691406 61.699219 C 77.546875 55.765625 78.957031 51.507812 78.957031 47.835938 Z M 78.957031 47.835938 "/>
    <path d="M 50.753906 53.75 L 37.882812 91.148438 C 41.726562 92.277344 45.789062 92.894531 50 92.894531 C 54.996094 92.894531 59.785156 92.03125 64.246094 90.464844 C 64.128906 90.28125 64.027344 90.085938 63.941406 89.871094 Z M 50.753906 53.75 "/>
    <path d="M 87.636719 29.417969 C 87.824219 30.785156 87.925781 32.253906 87.925781 33.832031 C 87.925781 38.183594 87.113281 43.074219 84.667969 49.195312 L 71.5625 87.074219 C 84.316406 79.640625 92.894531 65.824219 92.894531 50 C 92.894531 42.542969 90.988281 35.53125 87.636719 29.417969 Z M 87.636719 29.417969 "/>
    <path d="M 50 0 C 22.433594 0 0 22.429688 0 50 C 0 77.570312 22.433594 100 50 100 C 77.570312 100 100.003906 77.570312 100.003906 50 C 100.003906 22.429688 77.570312 0 50 0 Z M 50 97.707031 C 23.695312 97.707031 2.292969 76.304688 2.292969 50 C 2.292969 23.695312 23.695312 2.292969 50 2.292969 C 76.304688 2.292969 97.707031 23.695312 97.707031 50 C 97.707031 76.304688 76.304688 97.707031 50 97.707031 Z M 50 97.707031 "/>
  </g>
</svg>`
};
var addIcons = () => {
  Object.keys(icons).forEach((key) => {
    (0, import_obsidian2.addIcon)(key, icons[key]);
  });
};

// src/wp-publish-view.ts
var import_obsidian6 = __toModule(require("obsidian"));

// src/wp-client.ts
var import_obsidian5 = __toModule(require("obsidian"));

// src/wp-xml-rpc-client.ts
var import_xmlrpc = __toModule(require_xmlrpc());
var import_obsidian3 = __toModule(require("obsidian"));

// node_modules/marked/lib/marked.esm.js
function getDefaults() {
  return {
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: "",
    highlight: null,
    langPrefix: "language-",
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
var defaults = getDefaults();
function changeDefaults(newDefaults) {
  defaults = newDefaults;
}
var escapeTest = /[&<>"']/;
var escapeReplace = /[&<>"']/g;
var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
var caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = regex.source || regex;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
var nonWordAndColonTest = /[^\w:]/g;
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    let prot;
    try {
      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, "").toLowerCase();
    } catch (e) {
      return null;
    }
    if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, "%");
  } catch (e) {
    return null;
  }
  return href;
}
var baseUrls = {};
var justDomain = /^[^:]+:\/*[^/]*$/;
var protocol = /^([^:]+:)[\s\S]*$/;
var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(base, href) {
  if (!baseUrls[" " + base]) {
    if (justDomain.test(base)) {
      baseUrls[" " + base] = base + "/";
    } else {
      baseUrls[" " + base] = rtrim(base, "/", true);
    }
  }
  base = baseUrls[" " + base];
  const relativeBase = base.indexOf(":") === -1;
  if (href.substring(0, 2) === "//") {
    if (relativeBase) {
      return href;
    }
    return base.replace(protocol, "$1") + href;
  } else if (href.charAt(0) === "/") {
    if (relativeBase) {
      return href;
    }
    return base.replace(domain, "$1") + href;
  } else {
    return base + href;
  }
}
var noopTest = { exec: function noopTest2() {
} };
function merge(obj) {
  let i = 1, target, key;
  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }
  return obj;
}
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match, offset, str) => {
    let escaped = false, curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (!cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count)
      cells.push("");
  }
  for (; i < cells.length; i++) {
    cells[i] = cells[i].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.substr(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  const l = str.length;
  let level = 0, i = 0;
  for (; i < l; i++) {
    if (str[i] === "\\") {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  return -1;
}
function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
  }
}
function repeatString(pattern, count) {
  if (count < 1) {
    return "";
  }
  let result = "";
  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }
    count >>= 1;
    pattern += pattern;
  }
  return result + pattern;
}
function outputLink(cap, link, raw, lexer2) {
  const href = link.href;
  const title = link.title ? escape(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer2.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href,
      title,
      text,
      tokens: lexer2.inlineTokens(text, [])
    };
    lexer2.state.inLink = false;
    return token;
  } else {
    return {
      type: "image",
      raw,
      href,
      title,
      text: escape(text)
    };
  }
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return text.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var Tokenizer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap) {
      if (cap[0].length > 1) {
        return {
          type: "space",
          raw: cap[0]
        };
      }
      return { raw: "\n" };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text, "\n") : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim() : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, "#");
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      const token = {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text,
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ *> ?/gm, "");
      return {
        type: "blockquote",
        raw: cap[0],
        tokens: this.lexer.blockTokens(text, []),
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents;
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\n]*)?(?:\\n|$))`);
      while (src) {
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split("\n", 1)[0];
        nextLine = src.split("\n", 1)[0];
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          list.loose = true;
        }
        const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])`);
        while (src && !list.loose) {
          rawLine = src.split("\n", 1)[0];
          line = rawLine;
          if (this.options.pedantic) {
            line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
          }
          if (nextBulletRegex.test(line)) {
            break;
          }
          if (line.search(/[^ ]/) >= indent || !line.trim()) {
            itemContents += "\n" + line.slice(indent);
          } else if (!blankLine) {
            itemContents += "\n" + line;
          } else {
            break;
          }
          if (!blankLine && !line.trim()) {
            blankLine = true;
          }
          raw += rawLine + "\n";
          src = src.substring(rawLine.length + 1);
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      const l = list.items.length;
      for (i = 0; i < l; i++) {
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        if (!list.loose && list.items[i].tokens.some((t) => t.type === "space")) {
          list.loose = true;
          list.items[i].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
        text: cap[0]
      };
      if (this.options.sanitize) {
        token.type = "paragraph";
        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);
        token.tokens = [];
        this.lexer.inline(token.text, token.tokens);
      }
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      if (cap[3])
        cap[3] = cap[3].substring(1, cap[3].length - 1);
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      return {
        type: "def",
        tag,
        raw: cap[0],
        href: cap[2],
        title: cap[3]
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      const item = {
        type: "table",
        header: splitCells(cap[1]).map((c) => {
          return { text: c };
        }),
        align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
        rows: cap[3] ? cap[3].replace(/\n$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        let l = item.align.length;
        let i, j, k, row;
        for (i = 0; i < l; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = "right";
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = "center";
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = "left";
          } else {
            item.align[i] = null;
          }
        }
        l = item.rows.length;
        for (i = 0; i < l; i++) {
          item.rows[i] = splitCells(item.rows[i], item.header.length).map((c) => {
            return { text: c };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = [];
          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k = 0; k < row.length; k++) {
            row[k].tokens = [];
            this.lexer.inlineTokens(row[k].text, row[k].tokens);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      const token = {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const token = {
        type: "paragraph",
        raw: cap[0],
        text: cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      const token = {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: this.options.sanitize ? "text" : "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link || !link.href) {
        const text = cap[0].charAt(0);
        return {
          type: "text",
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match)
      return;
    if (match[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match[1] || match[2] || "";
    if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
      const lLength = match[0].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match = endReg.exec(maskedSrc)) != null) {
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim)
          continue;
        rLength = rDelim.length;
        if (match[3] || match[4]) {
          delimTotal += rLength;
          continue;
        } else if (match[5] || match[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        if (Math.min(lLength, rLength) % 2) {
          const text2 = src.slice(1, lLength + match.index + rLength);
          return {
            type: "em",
            raw: src.slice(0, lLength + match.index + rLength + 1),
            text: text2,
            tokens: this.lexer.inlineTokens(text2, [])
          };
        }
        const text = src.slice(2, lLength + match.index + rLength - 1);
        return {
          type: "strong",
          raw: src.slice(0, lLength + match.index + rLength + 1),
          text,
          tokens: this.lexer.inlineTokens(text, [])
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape(text, true);
      return {
        type: "codespan",
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2], [])
      };
    }
  }
  autolink(src, mangle2) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href;
      if (cap[2] === "@") {
        text = escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);
        href = "mailto:" + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src, mangle2) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href;
      if (cap[2] === "@") {
        text = escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);
        href = "mailto:" + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape(cap[0]);
        if (cap[1] === "www.") {
          href = "http://" + text;
        } else {
          href = text;
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src, smartypants2) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
      } else {
        text = escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text
      };
    }
  }
};
var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = merge({}, block);
block.gfm = merge({}, block.normal, {
  table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
});
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = merge({}, block.normal, {
  html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
});
var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
  nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline.escapedEmSt = /\\\*|\\_/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = merge({}, inline);
inline.pedantic = merge({}, inline.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
});
inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
});
function smartypants(text) {
  return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
}
function mangle(text) {
  let out = "", i, ch;
  const l = text.length;
  for (i = 0; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = "x" + ch.toString(16);
    }
    out += "&#" + ch + ";";
  }
  return out;
}
var Lexer = class {
  constructor(options2) {
    this.tokens = [];
    this.tokens.links = Object.create(null);
    this.options = options2 || defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  static get rules() {
    return {
      block,
      inline
    };
  }
  static lex(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.lex(src);
  }
  static lexInline(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ");
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/^ +$/gm, "");
    }
    let token, lastToken, cutSrc, lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.type) {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens) {
    this.inlineQueue.push({ src, tokens });
  }
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var Renderer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  code(code, infostring, escaped) {
    const lang = (infostring || "").match(/\S*/)[0];
    if (this.options.highlight) {
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="' + this.options.langPrefix + escape(lang, true) + '">' + (escaped ? code : escape(code, true)) + "</code></pre>\n";
  }
  blockquote(quote) {
    return "<blockquote>\n" + quote + "</blockquote>\n";
  }
  html(html) {
    return html;
  }
  heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      return "<h" + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + "</h" + level + ">\n";
    }
    return "<h" + level + ">" + text + "</h" + level + ">\n";
  }
  hr() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  }
  list(body, ordered, start) {
    const type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
  }
  listitem(text) {
    return "<li>" + text + "</li>\n";
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
  }
  paragraph(text) {
    return "<p>" + text + "</p>\n";
  }
  table(header, body) {
    if (body)
      body = "<tbody>" + body + "</tbody>";
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow(content) {
    return "<tr>\n" + content + "</tr>\n";
  }
  tablecell(content, flags) {
    const type = flags.header ? "th" : "td";
    const tag = flags.align ? "<" + type + ' align="' + flags.align + '">' : "<" + type + ">";
    return tag + content + "</" + type + ">\n";
  }
  strong(text) {
    return "<strong>" + text + "</strong>";
  }
  em(text) {
    return "<em>" + text + "</em>";
  }
  codespan(text) {
    return "<code>" + text + "</code>";
  }
  br() {
    return this.options.xhtml ? "<br/>" : "<br>";
  }
  del(text) {
    return "<del>" + text + "</del>";
  }
  link(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<a href="' + escape(href) + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text + "</a>";
    return out;
  }
  image(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<img src="' + href + '" alt="' + text + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += this.options.xhtml ? "/>" : ">";
    return out;
  }
  text(text) {
    return text;
  }
};
var TextRenderer = class {
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href, title, text) {
    return "" + text;
  }
  image(href, title, text) {
    return "" + text;
  }
  br() {
    return "";
  }
};
var Slugger = class {
  constructor() {
    this.seen = {};
  }
  serialize(value) {
    return value.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
  }
  getNextSafeSlug(originalSlug, isDryRun) {
    let slug = originalSlug;
    let occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];
      do {
        occurenceAccumulator++;
        slug = originalSlug + "-" + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }
    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }
    return slug;
  }
  slug(value, options2 = {}) {
    const slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options2.dryrun);
  }
};
var Parser = class {
  constructor(options2) {
    this.options = options2 || defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
  }
  static parse(tokens, options2) {
    const parser2 = new Parser(options2);
    return parser2.parse(tokens);
  }
  static parseInline(tokens, options2) {
    const parser2 = new Parser(options2);
    return parser2.parseInline(tokens);
  }
  parse(tokens, top = true) {
    let out = "", i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
          continue;
        }
        case "code": {
          out += this.renderer.code(token.text, token.lang, token.escaped);
          continue;
        }
        case "table": {
          header = "";
          cell = "";
          l2 = token.header.length;
          for (j = 0; j < l2; j++) {
            cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), { header: true, align: token.align[j] });
          }
          header += this.renderer.tablerow(cell);
          body = "";
          l2 = token.rows.length;
          for (j = 0; j < l2; j++) {
            row = token.rows[j];
            cell = "";
            l3 = row.length;
            for (k = 0; k < l3; k++) {
              cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: token.align[k] });
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          body = this.parse(token.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          ordered = token.ordered;
          start = token.start;
          loose = token.loose;
          l2 = token.items.length;
          body = "";
          for (j = 0; j < l2; j++) {
            item = token.items[j];
            checked = item.checked;
            task = item.task;
            itemBody = "";
            if (item.task) {
              checkbox = this.renderer.checkbox(checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox
                  });
                }
              } else {
                itemBody += checkbox;
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          out += this.renderer.html(token.text);
          continue;
        }
        case "paragraph": {
          out += this.renderer.paragraph(this.parseInline(token.tokens));
          continue;
        }
        case "text": {
          body = token.tokens ? this.parseInline(token.tokens) : token.text;
          while (i + 1 < l && tokens[i + 1].type === "text") {
            token = tokens[++i];
            body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    let out = "", i, token, ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          out += renderer.text(token.text);
          break;
        }
        case "html": {
          out += renderer.html(token.text);
          break;
        }
        case "link": {
          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
          break;
        }
        case "image": {
          out += renderer.image(token.href, token.title, token.text);
          break;
        }
        case "strong": {
          out += renderer.strong(this.parseInline(token.tokens, renderer));
          break;
        }
        case "em": {
          out += renderer.em(this.parseInline(token.tokens, renderer));
          break;
        }
        case "codespan": {
          out += renderer.codespan(token.text);
          break;
        }
        case "br": {
          out += renderer.br();
          break;
        }
        case "del": {
          out += renderer.del(this.parseInline(token.tokens, renderer));
          break;
        }
        case "text": {
          out += renderer.text(token.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
function marked(src, opt, callback) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  if (typeof opt === "function") {
    callback = opt;
    opt = null;
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  if (callback) {
    const highlight = opt.highlight;
    let tokens;
    try {
      tokens = Lexer.lex(src, opt);
    } catch (e) {
      return callback(e);
    }
    const done = function(err) {
      let out;
      if (!err) {
        try {
          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }
          out = Parser.parse(tokens, opt);
        } catch (e) {
          err = e;
        }
      }
      opt.highlight = highlight;
      return err ? callback(err) : callback(null, out);
    };
    if (!highlight || highlight.length < 3) {
      return done();
    }
    delete opt.highlight;
    if (!tokens.length)
      return done();
    let pending = 0;
    marked.walkTokens(tokens, function(token) {
      if (token.type === "code") {
        pending++;
        setTimeout(() => {
          highlight(token.text, token.lang, function(err, code) {
            if (err) {
              return done(err);
            }
            if (code != null && code !== token.text) {
              token.text = code;
              token.escaped = true;
            }
            pending--;
            if (pending === 0) {
              done();
            }
          });
        }, 0);
      }
    });
    if (pending === 0) {
      done();
    }
    return;
  }
  try {
    const tokens = Lexer.lex(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parse(tokens, opt);
  } catch (e) {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
    }
    throw e;
  }
}
marked.options = marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = defaults;
marked.use = function(...args) {
  const opts = merge({}, ...args);
  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
  let hasExtensions;
  args.forEach((pack) => {
    if (pack.extensions) {
      hasExtensions = true;
      pack.extensions.forEach((ext) => {
        if (!ext.name) {
          throw new Error("extension name required");
        }
        if (ext.renderer) {
          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
          if (prevRenderer) {
            extensions.renderers[ext.name] = function(...args2) {
              let ret = ext.renderer.apply(this, args2);
              if (ret === false) {
                ret = prevRenderer.apply(this, args2);
              }
              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }
        if (ext.tokenizer) {
          if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
            throw new Error("extension level must be 'block' or 'inline'");
          }
          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }
          if (ext.start) {
            if (ext.level === "block") {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === "inline") {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }
        if (ext.childTokens) {
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
    }
    if (pack.renderer) {
      const renderer = marked.defaults.renderer || new Renderer();
      for (const prop in pack.renderer) {
        const prevRenderer = renderer[prop];
        renderer[prop] = (...args2) => {
          let ret = pack.renderer[prop].apply(renderer, args2);
          if (ret === false) {
            ret = prevRenderer.apply(renderer, args2);
          }
          return ret;
        };
      }
      opts.renderer = renderer;
    }
    if (pack.tokenizer) {
      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
      for (const prop in pack.tokenizer) {
        const prevTokenizer = tokenizer[prop];
        tokenizer[prop] = (...args2) => {
          let ret = pack.tokenizer[prop].apply(tokenizer, args2);
          if (ret === false) {
            ret = prevTokenizer.apply(tokenizer, args2);
          }
          return ret;
        };
      }
      opts.tokenizer = tokenizer;
    }
    if (pack.walkTokens) {
      const walkTokens2 = marked.defaults.walkTokens;
      opts.walkTokens = function(token) {
        pack.walkTokens.call(this, token);
        if (walkTokens2) {
          walkTokens2.call(this, token);
        }
      };
    }
    if (hasExtensions) {
      opts.extensions = extensions;
    }
    marked.setOptions(opts);
  });
};
marked.walkTokens = function(tokens, callback) {
  for (const token of tokens) {
    callback.call(marked, token);
    switch (token.type) {
      case "table": {
        for (const cell of token.header) {
          marked.walkTokens(cell.tokens, callback);
        }
        for (const row of token.rows) {
          for (const cell of row) {
            marked.walkTokens(cell.tokens, callback);
          }
        }
        break;
      }
      case "list": {
        marked.walkTokens(token.items, callback);
        break;
      }
      default: {
        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
            marked.walkTokens(token[childTokens], callback);
          });
        } else if (token.tokens) {
          marked.walkTokens(token.tokens, callback);
        }
      }
    }
  }
};
marked.parseInline = function(src, opt) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked.parseInline(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  try {
    const tokens = Lexer.lexInline(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parseInline(tokens, opt);
  } catch (e) {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
    }
    throw e;
  }
};
marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parser = Parser.parse;
var lexer = Lexer.lex;

// src/wp-xml-rpc-client.ts
var WpXmlRpcClient = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
    const url = new URL(plugin.settings.endpoint);
    console.log(url);
    if (url.protocol === "https:") {
      this.client = (0, import_xmlrpc.createSecureClient)({
        host: url.hostname,
        port: 443,
        path: `${url.pathname}xmlrpc.php`
      });
    } else {
      this.client = (0, import_xmlrpc.createClient)({
        host: url.hostname,
        port: 80,
        path: `${url.pathname}xmlrpc.php`
      });
    }
  }
  newPost() {
    return new Promise((resolve, reject) => {
      const { workspace } = this.app;
      const activeView = workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
      if (activeView) {
        new WpLoginModal(this.app, this.plugin, (userName, password) => {
          var _a;
          const title = activeView.file.basename;
          const content = activeView.getViewData();
          this.client.methodCall("wp.newPost", [
            0,
            userName,
            password,
            {
              post_type: "post",
              post_status: "draft",
              post_title: title != null ? title : "A post from Obsidian!",
              post_content: (_a = marked.parse(content)) != null ? _a : ""
            }
          ], (error, value) => {
            console.log("Method response for 'wp.newPost': ", value, error);
            if (error) {
              new import_obsidian3.Notice(`[Error] ${error.message}`);
              reject(error);
            } else {
              new import_obsidian3.Notice("Post published successfully!");
              resolve({
                code: WordPressClientReturnCode.OK,
                data: value
              });
            }
          });
        }).open();
      } else {
        const error = "There is no editor found. Nothing will be published.";
        console.warn(error);
        reject(new Error(error));
      }
    });
  }
};
var WpLoginModal = class extends import_obsidian3.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "WordPress Login" });
    let password = "";
    new import_obsidian3.Setting(contentEl).setName("User Name").addText((text) => {
      var _a;
      return text.setValue((_a = this.plugin.settings.userName) != null ? _a : "").onChange((value) => __async(this, null, function* () {
        if (this.plugin.settings.saveUserName) {
          this.plugin.settings.userName = value;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian3.Setting(contentEl).setName("Password").addText((text) => text.onChange((value) => __async(this, null, function* () {
      password = value;
    })));
    new import_obsidian3.Setting(contentEl).addButton((button) => button.setButtonText("Publish").setClass("mod-cta").onClick(() => {
      this.onSubmit(this.plugin.settings.userName, password);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/wp-rest-jetpack-client.ts
var import_obsidian4 = __toModule(require("obsidian"));
var WpRestJetpackClient = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
    const url = new URL(plugin.settings.endpoint);
    console.log(url);
  }
  newPost() {
    return new Promise((resolve, reject) => {
      const { workspace } = this.app;
      const activeView = workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      if (activeView) {
        resolve({
          code: WordPressClientReturnCode.OK,
          data: ""
        });
      } else {
        const error = "There is no editor found. Nothing will be published.";
        console.warn(error);
        reject(new Error(error));
      }
    });
  }
};

// src/wp-client.ts
var WordPressClientReturnCode;
(function(WordPressClientReturnCode2) {
  WordPressClientReturnCode2[WordPressClientReturnCode2["OK"] = 0] = "OK";
  WordPressClientReturnCode2[WordPressClientReturnCode2["Error"] = 1] = "Error";
})(WordPressClientReturnCode || (WordPressClientReturnCode = {}));
function createWordPressClient(app, plugin) {
  const type = plugin.settings.apiType;
  switch (type) {
    case ApiType.XML_RPC:
      return new WpXmlRpcClient(app, plugin);
    case ApiType.RestAPI_Jetpack:
      return new WpRestJetpackClient(app, plugin);
    default:
      new import_obsidian5.Notice("No approved WordPress API.\nPlease check it in settings.");
      return null;
  }
}

// src/wp-publish-view.ts
var WordPressPublishViewType = "wp-publish-options";
var WordPressPublishView = class extends import_obsidian6.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getDisplayText() {
    return "WordPress Publish";
  }
  getViewType() {
    return WordPressPublishViewType;
  }
  getIcon() {
    return "wp-logo";
  }
  load() {
    super.load();
    this.draw();
  }
  draw() {
    const actionButtonsControlDiv = this.contentEl.createEl("div");
    new import_obsidian6.ButtonComponent(actionButtonsControlDiv).setButtonText("Publish").setClass("mod-cta").onClick(() => {
      const client = createWordPressClient(this.app, this.plugin);
      if (client) {
        client.newPost().then();
      }
    });
  }
};

// src/main.ts
var WordpressPlugin = class extends import_obsidian7.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading obsidian-wordpress plugin");
      yield this.loadSettings();
      this.registerView(WordPressPublishViewType, (leaf) => new WordPressPublishView(leaf, this));
      addIcons();
      if (this.settings.showRibbonIcon) {
        this.addRibbonIcon("wp-logo", "WordPress Publish", () => {
          this.toggleWordPressPublishView();
        });
      }
      this.addCommand({
        id: "publish",
        name: "Publish current document",
        editorCallback: (editor, view) => {
          const client = createWordPressClient(this.app, this);
          if (client) {
            client.newPost().then();
          }
        }
      });
      this.addSettingTab(new WordpressSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  toggleWordPressPublishView() {
    return __async(this, null, function* () {
      const existing = this.app.workspace.getLeavesOfType(WordPressPublishViewType);
      if (existing.length) {
        this.app.workspace.revealLeaf(existing[0]);
        return;
      }
      yield this.app.workspace.getRightLeaf(false).setViewState({
        type: WordPressPublishViewType,
        active: true
      });
      this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(WordPressPublishViewType)[0]);
    });
  }
};
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1V0aWxpdHkuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTEF0dHJpYnV0ZS5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRWxlbWVudC5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ0RhdGEuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENvbW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERlY2xhcmF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERBdHRMaXN0LmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERFbnRpdHkuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVsZW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERURE5vdGF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEb2NUeXBlLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxSYXcuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFRleHQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MTm9kZS5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MU3RyaW5naWZpZXIuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFdyaXRlckJhc2UuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmluZ1dyaXRlci5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRG9jdW1lbnQuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERvY3VtZW50Q0IuanMiLCAibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFN0cmVhbVdyaXRlci5qcyIsICJub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL3htbHJwYy9saWIvZGF0ZV9mb3JtYXR0ZXIuanMiLCAibm9kZV9tb2R1bGVzL3htbHJwYy9saWIvY3VzdG9tdHlwZS5qcyIsICJub2RlX21vZHVsZXMveG1scnBjL2xpYi9zZXJpYWxpemVyLmpzIiwgIm5vZGVfbW9kdWxlcy9zYXgvbGliL3NheC5qcyIsICJub2RlX21vZHVsZXMveG1scnBjL2xpYi9kZXNlcmlhbGl6ZXIuanMiLCAibm9kZV9tb2R1bGVzL3htbHJwYy9saWIvY29va2llcy5qcyIsICJub2RlX21vZHVsZXMveG1scnBjL2xpYi9jbGllbnQuanMiLCAibm9kZV9tb2R1bGVzL3htbHJwYy9saWIvc2VydmVyLmpzIiwgIm5vZGVfbW9kdWxlcy94bWxycGMvbGliL3htbHJwYy5qcyIsICJzcmMvbWFpbi50cyIsICJzcmMvc2V0dGluZ3MudHMiLCAic3JjL2ljb25zLnRzIiwgInNyYy93cC1wdWJsaXNoLXZpZXcudHMiLCAic3JjL3dwLWNsaWVudC50cyIsICJzcmMvd3AteG1sLXJwYy1jbGllbnQudHMiLCAibm9kZV9tb2R1bGVzL21hcmtlZC9saWIvbWFya2VkLmVzbS5qcyIsICJzcmMvd3AtcmVzdC1qZXRwYWNrLWNsaWVudC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIGFzc2lnbiwgY2FtZWxDYXNlLCBjYXBpdGFsaXplLCBpc0FycmF5LCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgaXNQbGFpbk9iamVjdCwga2ViYWJDYXNlLCBzbmFrZUNhc2UsIHRpdGxlQ2FzZSwgd29yZHMsXG4gICAgc2xpY2UgPSBbXS5zbGljZSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGtleSwgbGVuLCBzb3VyY2UsIHNvdXJjZXMsIHRhcmdldDtcbiAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0sIHNvdXJjZXMgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICBpZiAoaXNGdW5jdGlvbihPYmplY3QuYXNzaWduKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAhIXZhbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcblxuICBpc09iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciByZWY7XG4gICAgcmV0dXJuICEhdmFsICYmICgocmVmID0gdHlwZW9mIHZhbCkgPT09ICdmdW5jdGlvbicgfHwgcmVmID09PSAnb2JqZWN0Jyk7XG4gIH07XG5cbiAgaXNBcnJheSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKEFycmF5LmlzQXJyYXkpKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuICB9O1xuXG4gIGlzRW1wdHkgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIga2V5O1xuICAgIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJldHVybiAhdmFsLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChrZXkgaW4gdmFsKSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHZhbCwga2V5KSkgY29udGludWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIGN0b3IsIHByb3RvO1xuICAgIHJldHVybiBpc09iamVjdCh2YWwpICYmIChwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpKSAmJiAoY3RvciA9IHByb3RvLmNvbnN0cnVjdG9yKSAmJiAodHlwZW9mIGN0b3IgPT09ICdmdW5jdGlvbicpICYmIChjdG9yIGluc3RhbmNlb2YgY3RvcikgJiYgKEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGN0b3IpID09PSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChPYmplY3QpKTtcbiAgfTtcblxuICB3b3JkcyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAodmFsLnNwbGl0KC9bLV9cXHNdK3woPz1bQS1aXVthLXpdKS8pIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24obikge1xuICAgICAgcmV0dXJuICEhbjtcbiAgICB9KTtcbiAgfTtcblxuICBjYW1lbENhc2UgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgaSwgaW5kZXgsIGxlbiwgciwgcmVmLCB3b3JkO1xuICAgIHIgPSAnJztcbiAgICByZWYgPSB3b3Jkcyh2YWwpO1xuICAgIGZvciAoaW5kZXggPSBpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaW5kZXggPSArK2kpIHtcbiAgICAgIHdvcmQgPSByZWZbaW5kZXhdO1xuICAgICAgciArPSBpbmRleCA/IGNhcGl0YWxpemUod29yZC50b0xvd2VyQ2FzZSgpKSA6IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgdGl0bGVDYXNlID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIGksIGluZGV4LCBsZW4sIHIsIHJlZiwgd29yZDtcbiAgICByID0gJyc7XG4gICAgcmVmID0gd29yZHModmFsKTtcbiAgICBmb3IgKGluZGV4ID0gaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGluZGV4ID0gKytpKSB7XG4gICAgICB3b3JkID0gcmVmW2luZGV4XTtcbiAgICAgIHIgKz0gY2FwaXRhbGl6ZSh3b3JkLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBrZWJhYkNhc2UgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgaSwgaW5kZXgsIGxlbiwgciwgcmVmLCB3b3JkO1xuICAgIHIgPSAnJztcbiAgICByZWYgPSB3b3Jkcyh2YWwpO1xuICAgIGZvciAoaW5kZXggPSBpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaW5kZXggPSArK2kpIHtcbiAgICAgIHdvcmQgPSByZWZbaW5kZXhdO1xuICAgICAgciArPSAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIHNuYWtlQ2FzZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBpLCBpbmRleCwgbGVuLCByLCByZWYsIHdvcmQ7XG4gICAgciA9ICcnO1xuICAgIHJlZiA9IHdvcmRzKHZhbCk7XG4gICAgZm9yIChpbmRleCA9IGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpbmRleCA9ICsraSkge1xuICAgICAgd29yZCA9IHJlZltpbmRleF07XG4gICAgICByICs9IChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiB2YWwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWwuc2xpY2UoMSk7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuYXNzaWduID0gYXNzaWduO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG5cbiAgbW9kdWxlLmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG5cbiAgbW9kdWxlLmV4cG9ydHMuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuXG4gIG1vZHVsZS5leHBvcnRzLnRpdGxlQ2FzZSA9IHRpdGxlQ2FzZTtcblxuICBtb2R1bGUuZXhwb3J0cy5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG5cbiAgbW9kdWxlLmV4cG9ydHMuc25ha2VDYXNlID0gc25ha2VDYXNlO1xuXG4gIG1vZHVsZS5leHBvcnRzLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuXG4gIG1vZHVsZS5leHBvcnRzLndvcmRzID0gd29yZHM7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTEF0dHJpYnV0ZTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTEF0dHJpYnV0ZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxBdHRyaWJ1dGUocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgdGhpcy5vcHRpb25zID0gcGFyZW50Lm9wdGlvbnM7XG4gICAgICB0aGlzLnN0cmluZ2lmeSA9IHBhcmVudC5zdHJpbmdpZnk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYXR0cmlidXRlIG5hbWUgb2YgZWxlbWVudCBcIiArIHBhcmVudC5uYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYXR0cmlidXRlIHZhbHVlIGZvciBhdHRyaWJ1dGUgXCIgKyBuYW1lICsgXCIgb2YgZWxlbWVudCBcIiArIHBhcmVudC5uYW1lKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5LmF0dE5hbWUobmFtZSk7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuYXR0VmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmF0dHJpYnV0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTEF0dHJpYnV0ZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxBdHRyaWJ1dGUsIFhNTEVsZW1lbnQsIFhNTE5vZGUsIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCByZWYsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICByZWYgPSByZXF1aXJlKCcuL1V0aWxpdHknKSwgaXNPYmplY3QgPSByZWYuaXNPYmplY3QsIGlzRnVuY3Rpb24gPSByZWYuaXNGdW5jdGlvbjtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgWE1MQXR0cmlidXRlID0gcmVxdWlyZSgnLi9YTUxBdHRyaWJ1dGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTEVsZW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxFbGVtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTEVsZW1lbnQocGFyZW50LCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgICBYTUxFbGVtZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZWxlbWVudCBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5uYW1lID0gdGhpcy5zdHJpbmdpZnkuZWxlTmFtZShuYW1lKTtcbiAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgaWYgKGF0dHJpYnV0ZXMgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZShhdHRyaWJ1dGVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQuaXNEb2N1bWVudCkge1xuICAgICAgICB0aGlzLmlzUm9vdCA9IHRydWU7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRPYmplY3QgPSBwYXJlbnQ7XG4gICAgICAgIHBhcmVudC5yb290T2JqZWN0ID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGF0dCwgYXR0TmFtZSwgY2xvbmVkU2VsZiwgcmVmMTtcbiAgICAgIGNsb25lZFNlbGYgPSBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgICAgaWYgKGNsb25lZFNlbGYuaXNSb290KSB7XG4gICAgICAgIGNsb25lZFNlbGYuZG9jdW1lbnRPYmplY3QgPSBudWxsO1xuICAgICAgfVxuICAgICAgY2xvbmVkU2VsZi5hdHRyaWJ1dGVzID0ge307XG4gICAgICByZWYxID0gdGhpcy5hdHRyaWJ1dGVzO1xuICAgICAgZm9yIChhdHROYW1lIGluIHJlZjEpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmMSwgYXR0TmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBhdHQgPSByZWYxW2F0dE5hbWVdO1xuICAgICAgICBjbG9uZWRTZWxmLmF0dHJpYnV0ZXNbYXR0TmFtZV0gPSBhdHQuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIGNsb25lZFNlbGYuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICB2YXIgY2xvbmVkQ2hpbGQ7XG4gICAgICAgIGNsb25lZENoaWxkID0gY2hpbGQuY2xvbmUoKTtcbiAgICAgICAgY2xvbmVkQ2hpbGQucGFyZW50ID0gY2xvbmVkU2VsZjtcbiAgICAgICAgcmV0dXJuIGNsb25lZFNlbGYuY2hpbGRyZW4ucHVzaChjbG9uZWRDaGlsZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjbG9uZWRTZWxmO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5hdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIGF0dE5hbWUsIGF0dFZhbHVlO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gbmFtZS52YWx1ZU9mKCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgZm9yIChhdHROYW1lIGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgICAgYXR0VmFsdWUgPSBuYW1lW2F0dE5hbWVdO1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlKGF0dE5hbWUsIGF0dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNraXBOdWxsQXR0cmlidXRlcyB8fCAodmFsdWUgIT0gbnVsbCkpIHtcbiAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXNbbmFtZV0gPSBuZXcgWE1MQXR0cmlidXRlKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBhdHROYW1lLCBpLCBsZW47XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYXR0cmlidXRlIG5hbWVcIik7XG4gICAgICB9XG4gICAgICBuYW1lID0gbmFtZS52YWx1ZU9mKCk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBuYW1lLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYXR0TmFtZSA9IG5hbWVbaV07XG4gICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1thdHROYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnNldChvcHRpb25zKS5lbGVtZW50KHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxFbGVtZW50LnByb3RvdHlwZS5hdHQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRWxlbWVudC5wcm90b3R5cGUuYSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRWxlbWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MQ0RhdGEsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxDRGF0YSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENEYXRhLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTENEYXRhKHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MQ0RhdGEuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBDREFUQSB0ZXh0XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy50ZXh0ID0gdGhpcy5zdHJpbmdpZnkuY2RhdGEodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmNkYXRhKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQ0RhdGE7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTENvbW1lbnQsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxDb21tZW50ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MQ29tbWVudCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxDb21tZW50KHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MQ29tbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNvbW1lbnQgdGV4dFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RyaW5naWZ5LmNvbW1lbnQodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ29tbWVudC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDb21tZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnNldChvcHRpb25zKS5jb21tZW50KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQ29tbWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRGVjbGFyYXRpb24sIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEZWNsYXJhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERlY2xhcmF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERlY2xhcmF0aW9uKHBhcmVudCwgdmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBYTUxEZWNsYXJhdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKGlzT2JqZWN0KHZlcnNpb24pKSB7XG4gICAgICAgIHJlZiA9IHZlcnNpb24sIHZlcnNpb24gPSByZWYudmVyc2lvbiwgZW5jb2RpbmcgPSByZWYuZW5jb2RpbmcsIHN0YW5kYWxvbmUgPSByZWYuc3RhbmRhbG9uZTtcbiAgICAgIH1cbiAgICAgIGlmICghdmVyc2lvbikge1xuICAgICAgICB2ZXJzaW9uID0gJzEuMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnZlcnNpb24gPSB0aGlzLnN0cmluZ2lmeS54bWxWZXJzaW9uKHZlcnNpb24pO1xuICAgICAgaWYgKGVuY29kaW5nICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5lbmNvZGluZyA9IHRoaXMuc3RyaW5naWZ5LnhtbEVuY29kaW5nKGVuY29kaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFuZGFsb25lICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGFuZGFsb25lID0gdGhpcy5zdHJpbmdpZnkueG1sU3RhbmRhbG9uZShzdGFuZGFsb25lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxEZWNsYXJhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykuZGVjbGFyYXRpb24odGhpcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEZWNsYXJhdGlvbjtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRFREQXR0TGlzdCwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREF0dExpc3QgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERBdHRMaXN0LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREF0dExpc3QocGFyZW50LCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBYTUxEVERBdHRMaXN0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAoZWxlbWVudE5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbGVtZW50IG5hbWVcIik7XG4gICAgICB9XG4gICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRyaWJ1dGVUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSB0eXBlXCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFkZWZhdWx0VmFsdWVUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSBkZWZhdWx0XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZVR5cGUuaW5kZXhPZignIycpICE9PSAwKSB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZVR5cGUgPSAnIycgKyBkZWZhdWx0VmFsdWVUeXBlO1xuICAgICAgfVxuICAgICAgaWYgKCFkZWZhdWx0VmFsdWVUeXBlLm1hdGNoKC9eKCNSRVFVSVJFRHwjSU1QTElFRHwjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGVmYXVsdCB2YWx1ZSB0eXBlOyBleHBlY3RlZDogI1JFUVVJUkVELCAjSU1QTElFRCwgI0ZJWEVEIG9yICNERUZBVUxUXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAmJiAhZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlZmF1bHQgdmFsdWUgb25seSBhcHBsaWVzIHRvICNGSVhFRCBvciAjREVGQVVMVFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZWxlbWVudE5hbWUgPSB0aGlzLnN0cmluZ2lmeS5lbGVOYW1lKGVsZW1lbnROYW1lKTtcbiAgICAgIHRoaXMuYXR0cmlidXRlTmFtZSA9IHRoaXMuc3RyaW5naWZ5LmF0dE5hbWUoYXR0cmlidXRlTmFtZSk7XG4gICAgICB0aGlzLmF0dHJpYnV0ZVR5cGUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHRUeXBlKGF0dHJpYnV0ZVR5cGUpO1xuICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHREZWZhdWx0KGRlZmF1bHRWYWx1ZSk7XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZVR5cGUgPSBkZWZhdWx0VmFsdWVUeXBlO1xuICAgIH1cblxuICAgIFhNTERUREF0dExpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmR0ZEF0dExpc3QodGhpcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVERBdHRMaXN0O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxEVERFbnRpdHksIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVERFbnRpdHkgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERFbnRpdHksIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRFRERW50aXR5KHBhcmVudCwgcGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBYTUxEVERFbnRpdHkuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBlbnRpdHkgbmFtZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZW50aXR5IHZhbHVlXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wZSA9ICEhcGU7XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5lbGVOYW1lKG5hbWUpO1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEVudGl0eVZhbHVlKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdmFsdWUucHViSUQgJiYgIXZhbHVlLnN5c0lEKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHVibGljIGFuZC9vciBzeXN0ZW0gaWRlbnRpZmllcnMgYXJlIHJlcXVpcmVkIGZvciBhbiBleHRlcm5hbCBlbnRpdHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnB1YklEICYmICF2YWx1ZS5zeXNJRCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5c3RlbSBpZGVudGlmaWVyIGlzIHJlcXVpcmVkIGZvciBhIHB1YmxpYyBleHRlcm5hbCBlbnRpdHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnB1YklEICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnB1YklEID0gdGhpcy5zdHJpbmdpZnkuZHRkUHViSUQodmFsdWUucHViSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5zeXNJRCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zeXNJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFN5c0lEKHZhbHVlLnN5c0lEKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUubkRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMubkRhdGEgPSB0aGlzLnN0cmluZ2lmeS5kdGRORGF0YSh2YWx1ZS5uRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGUgJiYgdGhpcy5uRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdGF0aW9uIGRlY2xhcmF0aW9uIGlzIG5vdCBhbGxvd2VkIGluIGEgcGFyYW1ldGVyIGVudGl0eVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIFhNTERUREVudGl0eS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykuZHRkRW50aXR5KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRERW50aXR5O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxEVERFbGVtZW50LCBYTUxOb2RlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFRERWxlbWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERUREVsZW1lbnQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRFRERWxlbWVudChwYXJlbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBYTUxEVERFbGVtZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVsZW1lbnQgbmFtZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSAnKCNQQ0RBVEEpJztcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9ICcoJyArIHZhbHVlLmpvaW4oJywnKSArICcpJztcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5LmVsZU5hbWUobmFtZSk7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZHRkRWxlbWVudFZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBYTUxEVERFbGVtZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnNldChvcHRpb25zKS5kdGRFbGVtZW50KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRERWxlbWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRFRETm90YXRpb24sIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVEROb3RhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERURE5vdGF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERURE5vdGF0aW9uKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERURE5vdGF0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgbm90YXRpb24gbmFtZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWUucHViSUQgJiYgIXZhbHVlLnN5c0lEKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlB1YmxpYyBvciBzeXN0ZW0gaWRlbnRpZmllcnMgYXJlIHJlcXVpcmVkIGZvciBhbiBleHRlcm5hbCBlbnRpdHlcIik7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5lbGVOYW1lKG5hbWUpO1xuICAgICAgaWYgKHZhbHVlLnB1YklEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wdWJJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFB1YklEKHZhbHVlLnB1YklEKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5zeXNJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRTeXNJRCh2YWx1ZS5zeXNJRCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MRFRETm90YXRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmR0ZE5vdGF0aW9uKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRETm90YXRpb247XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERUREF0dExpc3QsIFhNTERUREVsZW1lbnQsIFhNTERUREVudGl0eSwgWE1MRFRETm90YXRpb24sIFhNTERvY1R5cGUsIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgWE1MRFREQXR0TGlzdCA9IHJlcXVpcmUoJy4vWE1MRFREQXR0TGlzdCcpO1xuXG4gIFhNTERUREVudGl0eSA9IHJlcXVpcmUoJy4vWE1MRFRERW50aXR5Jyk7XG5cbiAgWE1MRFRERWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRFRERWxlbWVudCcpO1xuXG4gIFhNTERURE5vdGF0aW9uID0gcmVxdWlyZSgnLi9YTUxEVEROb3RhdGlvbicpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRG9jVHlwZSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERvY1R5cGUsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MRG9jVHlwZShwYXJlbnQsIHB1YklELCBzeXNJRCkge1xuICAgICAgdmFyIHJlZiwgcmVmMTtcbiAgICAgIFhNTERvY1R5cGUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIHRoaXMuZG9jdW1lbnRPYmplY3QgPSBwYXJlbnQ7XG4gICAgICBpZiAoaXNPYmplY3QocHViSUQpKSB7XG4gICAgICAgIHJlZiA9IHB1YklELCBwdWJJRCA9IHJlZi5wdWJJRCwgc3lzSUQgPSByZWYuc3lzSUQ7XG4gICAgICB9XG4gICAgICBpZiAoc3lzSUQgPT0gbnVsbCkge1xuICAgICAgICByZWYxID0gW3B1YklELCBzeXNJRF0sIHN5c0lEID0gcmVmMVswXSwgcHViSUQgPSByZWYxWzFdO1xuICAgICAgfVxuICAgICAgaWYgKHB1YklEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wdWJJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFB1YklEKHB1YklEKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeXNJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRTeXNJRChzeXNJRCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEVERFbGVtZW50KHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuYXR0TGlzdCA9IGZ1bmN0aW9uKGVsZW1lbnROYW1lLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVUeXBlLCBkZWZhdWx0VmFsdWVUeXBlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTERUREF0dExpc3QodGhpcywgZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLmVudGl0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEVERFbnRpdHkodGhpcywgZmFsc2UsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUucEVudGl0eSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEVERFbnRpdHkodGhpcywgdHJ1ZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2NUeXBlLnByb3RvdHlwZS5ub3RhdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxEVEROb3RhdGlvbih0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmRvY1R5cGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLmVsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50KG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuYXR0ID0gZnVuY3Rpb24oZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0TGlzdChlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jVHlwZS5wcm90b3R5cGUuZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmVudGl0eShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLnBlbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucEVudGl0eShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RhdGlvbihuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY1R5cGUucHJvdG90eXBlLnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb290KCkgfHwgdGhpcy5kb2N1bWVudE9iamVjdDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERvY1R5cGU7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTE5vZGUsIFhNTFJhdyxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFJhdyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFJhdywgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxSYXcocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxSYXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyByYXcgdGV4dFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5yYXcodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MUmF3LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFJhdy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykucmF3KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MUmF3O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOb2RlLCBYTUxUZXh0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MVGV4dCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFRleHQsIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MVGV4dChwYXJlbnQsIHRleHQpIHtcbiAgICAgIFhNTFRleHQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBlbGVtZW50IHRleHRcIik7XG4gICAgICB9XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZWxlVGV4dCh0ZXh0KTtcbiAgICB9XG5cbiAgICBYTUxUZXh0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFRleHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLnRleHQodGhpcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxUZXh0O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxOb2RlLCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sIHN1cGVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uKHBhcmVudCwgdGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBpbnN0cnVjdGlvbiB0YXJnZXRcIik7XG4gICAgICB9XG4gICAgICB0aGlzLnRhcmdldCA9IHRoaXMuc3RyaW5naWZ5Lmluc1RhcmdldCh0YXJnZXQpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5pbnNWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykucHJvY2Vzc2luZ0luc3RydWN0aW9uKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxDRGF0YSwgWE1MQ29tbWVudCwgWE1MRGVjbGFyYXRpb24sIFhNTERvY1R5cGUsIFhNTEVsZW1lbnQsIFhNTE5vZGUsIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiwgWE1MUmF3LCBYTUxUZXh0LCBpc0VtcHR5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgcmVmLFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICByZWYgPSByZXF1aXJlKCcuL1V0aWxpdHknKSwgaXNPYmplY3QgPSByZWYuaXNPYmplY3QsIGlzRnVuY3Rpb24gPSByZWYuaXNGdW5jdGlvbiwgaXNFbXB0eSA9IHJlZi5pc0VtcHR5O1xuXG4gIFhNTEVsZW1lbnQgPSBudWxsO1xuXG4gIFhNTENEYXRhID0gbnVsbDtcblxuICBYTUxDb21tZW50ID0gbnVsbDtcblxuICBYTUxEZWNsYXJhdGlvbiA9IG51bGw7XG5cbiAgWE1MRG9jVHlwZSA9IG51bGw7XG5cbiAgWE1MUmF3ID0gbnVsbDtcblxuICBYTUxUZXh0ID0gbnVsbDtcblxuICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBudWxsO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTm9kZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxOb2RlKHBhcmVudCkge1xuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5wYXJlbnQub3B0aW9ucztcbiAgICAgICAgdGhpcy5zdHJpbmdpZnkgPSB0aGlzLnBhcmVudC5zdHJpbmdpZnk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICBpZiAoIVhNTEVsZW1lbnQpIHtcbiAgICAgICAgWE1MRWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRWxlbWVudCcpO1xuICAgICAgICBYTUxDRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ0RhdGEnKTtcbiAgICAgICAgWE1MQ29tbWVudCA9IHJlcXVpcmUoJy4vWE1MQ29tbWVudCcpO1xuICAgICAgICBYTUxEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRGVjbGFyYXRpb24nKTtcbiAgICAgICAgWE1MRG9jVHlwZSA9IHJlcXVpcmUoJy4vWE1MRG9jVHlwZScpO1xuICAgICAgICBYTUxSYXcgPSByZXF1aXJlKCcuL1hNTFJhdycpO1xuICAgICAgICBYTUxUZXh0ID0gcmVxdWlyZSgnLi9YTUxUZXh0Jyk7XG4gICAgICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IHJlcXVpcmUoJy4vWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHZhciBjaGlsZE5vZGUsIGl0ZW0sIGosIGssIGtleSwgbGFzdENoaWxkLCBsZW4sIGxlbjEsIHJlZjEsIHZhbDtcbiAgICAgIGxhc3RDaGlsZCA9IG51bGw7XG4gICAgICBpZiAoYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzLnZhbHVlT2YoKTtcbiAgICAgIGlmICghaXNPYmplY3QoYXR0cmlidXRlcykpIHtcbiAgICAgICAgcmVmMSA9IFthdHRyaWJ1dGVzLCB0ZXh0XSwgdGV4dCA9IHJlZjFbMF0sIGF0dHJpYnV0ZXMgPSByZWYxWzFdO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gbmFtZS52YWx1ZU9mKCk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBuYW1lLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgaXRlbSA9IG5hbWVbal07XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KG5hbWUuYXBwbHkoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICAgIGZvciAoa2V5IGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICB2YWwgPSBuYW1lW2tleV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgICAgICAgdmFsID0gdmFsLmFwcGx5KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoaXNPYmplY3QodmFsKSkgJiYgKGlzRW1wdHkodmFsKSkpIHtcbiAgICAgICAgICAgIHZhbCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZURlY29yYXRvcnMgJiYgdGhpcy5zdHJpbmdpZnkuY29udmVydEF0dEtleSAmJiBrZXkuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0QXR0S2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5hdHRyaWJ1dGUoa2V5LnN1YnN0cih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0QXR0S2V5Lmxlbmd0aCksIHZhbCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5vcHRpb25zLnNlcGFyYXRlQXJyYXlJdGVtcyAmJiBBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgIGZvciAoayA9IDAsIGxlbjEgPSB2YWwubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgICAgIGl0ZW0gPSB2YWxba107XG4gICAgICAgICAgICAgIGNoaWxkTm9kZSA9IHt9O1xuICAgICAgICAgICAgICBjaGlsZE5vZGVba2V5XSA9IGl0ZW07XG4gICAgICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMuZWxlbWVudChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5lbGVtZW50KGtleSk7XG4gICAgICAgICAgICBsYXN0Q2hpbGQuZWxlbWVudCh2YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmVsZW1lbnQoa2V5LCB2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRGVjb3JhdG9ycyAmJiB0aGlzLnN0cmluZ2lmeS5jb252ZXJ0VGV4dEtleSAmJiBuYW1lLmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydFRleHRLZXkpID09PSAwKSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy50ZXh0KHRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRGVjb3JhdG9ycyAmJiB0aGlzLnN0cmluZ2lmeS5jb252ZXJ0Q0RhdGFLZXkgJiYgbmFtZS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRDRGF0YUtleSkgPT09IDApIHtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmNkYXRhKHRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRGVjb3JhdG9ycyAmJiB0aGlzLnN0cmluZ2lmeS5jb252ZXJ0Q29tbWVudEtleSAmJiBuYW1lLmluZGV4T2YodGhpcy5zdHJpbmdpZnkuY29udmVydENvbW1lbnRLZXkpID09PSAwKSB7XG4gICAgICAgICAgbGFzdENoaWxkID0gdGhpcy5jb21tZW50KHRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRGVjb3JhdG9ycyAmJiB0aGlzLnN0cmluZ2lmeS5jb252ZXJ0UmF3S2V5ICYmIG5hbWUuaW5kZXhPZih0aGlzLnN0cmluZ2lmeS5jb252ZXJ0UmF3S2V5KSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RDaGlsZCA9IHRoaXMucmF3KHRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuaWdub3JlRGVjb3JhdG9ycyAmJiB0aGlzLnN0cmluZ2lmeS5jb252ZXJ0UElLZXkgJiYgbmFtZS5pbmRleE9mKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRQSUtleSkgPT09IDApIHtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLmluc3RydWN0aW9uKG5hbWUuc3Vic3RyKHRoaXMuc3RyaW5naWZ5LmNvbnZlcnRQSUtleS5sZW5ndGgpLCB0ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsYXN0Q2hpbGQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgY3JlYXRlIGFueSBlbGVtZW50cyB3aXRoOiBcIiArIG5hbWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxhc3RDaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaWYgKHRoaXMuaXNSb290KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgZWxlbWVudHMgYXQgcm9vdCBsZXZlbFwiKTtcbiAgICAgIH1cbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuZWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zZXJ0QWZ0ZXIgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICB2YXIgY2hpbGQsIGksIHJlbW92ZWQ7XG4gICAgICBpZiAodGhpcy5pc1Jvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGluc2VydCBlbGVtZW50cyBhdCByb290IGxldmVsXCIpO1xuICAgICAgfVxuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkgKyAxKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuZWxlbWVudChuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVmMTtcbiAgICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVtb3ZlIHRoZSByb290IGVsZW1lbnRcIik7XG4gICAgICB9XG4gICAgICBpID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgIFtdLnNwbGljZS5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgW2ksIGkgLSBpICsgMV0uY29uY2F0KHJlZjEgPSBbXSkpLCByZWYxO1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIGNoaWxkLCByZWYxO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gbmFtZS52YWx1ZU9mKCk7XG4gICAgICB9XG4gICAgICBhdHRyaWJ1dGVzIHx8IChhdHRyaWJ1dGVzID0ge30pO1xuICAgICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMudmFsdWVPZigpO1xuICAgICAgaWYgKCFpc09iamVjdChhdHRyaWJ1dGVzKSkge1xuICAgICAgICByZWYxID0gW2F0dHJpYnV0ZXMsIHRleHRdLCB0ZXh0ID0gcmVmMVswXSwgYXR0cmlidXRlcyA9IHJlZjFbMV07XG4gICAgICB9XG4gICAgICBjaGlsZCA9IG5ldyBYTUxFbGVtZW50KHRoaXMsIG5hbWUsIGF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgICBjaGlsZC50ZXh0KHRleHQpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxUZXh0KHRoaXMsIHZhbHVlKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY2RhdGEgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgY2hpbGQgPSBuZXcgWE1MQ0RhdGEodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIGNoaWxkID0gbmV3IFhNTENvbW1lbnQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5jb21tZW50QmVmb3JlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuY29tbWVudCh2YWx1ZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgcmVtb3ZlZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuY29tbWVudEFmdGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgcmVtb3ZlZDtcbiAgICAgIGkgPSB0aGlzLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuICAgICAgcmVtb3ZlZCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpICsgMSk7XG4gICAgICBjaGlsZCA9IHRoaXMucGFyZW50LmNvbW1lbnQodmFsdWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5wYXJlbnQuY2hpbGRyZW4sIHJlbW92ZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgY2hpbGQ7XG4gICAgICBjaGlsZCA9IG5ldyBYTUxSYXcodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBpbnNUYXJnZXQsIGluc1ZhbHVlLCBpbnN0cnVjdGlvbiwgaiwgbGVuO1xuICAgICAgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC52YWx1ZU9mKCk7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gdGFyZ2V0Lmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgaW5zVGFyZ2V0ID0gdGFyZ2V0W2pdO1xuICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb24oaW5zVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIGZvciAoaW5zVGFyZ2V0IGluIHRhcmdldCkge1xuICAgICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHRhcmdldCwgaW5zVGFyZ2V0KSkgY29udGludWU7XG4gICAgICAgICAgaW5zVmFsdWUgPSB0YXJnZXRbaW5zVGFyZ2V0XTtcbiAgICAgICAgICB0aGlzLmluc3RydWN0aW9uKGluc1RhcmdldCwgaW5zVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdHJ1Y3Rpb24gPSBuZXcgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uKHRoaXMsIHRhcmdldCwgdmFsdWUpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goaW5zdHJ1Y3Rpb24pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmluc3RydWN0aW9uQmVmb3JlID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkpO1xuICAgICAgY2hpbGQgPSB0aGlzLnBhcmVudC5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMucGFyZW50LmNoaWxkcmVuLCByZW1vdmVkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbnN0cnVjdGlvbkFmdGVyID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgdmFyIGNoaWxkLCBpLCByZW1vdmVkO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICByZW1vdmVkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGkgKyAxKTtcbiAgICAgIGNoaWxkID0gdGhpcy5wYXJlbnQuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnBhcmVudC5jaGlsZHJlbiwgcmVtb3ZlZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZGVjbGFyYXRpb24gPSBmdW5jdGlvbih2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgdmFyIGRvYywgeG1sZGVjO1xuICAgICAgZG9jID0gdGhpcy5kb2N1bWVudCgpO1xuICAgICAgeG1sZGVjID0gbmV3IFhNTERlY2xhcmF0aW9uKGRvYywgdmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpO1xuICAgICAgaWYgKGRvYy5jaGlsZHJlblswXSBpbnN0YW5jZW9mIFhNTERlY2xhcmF0aW9uKSB7XG4gICAgICAgIGRvYy5jaGlsZHJlblswXSA9IHhtbGRlYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvYy5jaGlsZHJlbi51bnNoaWZ0KHhtbGRlYyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9jLnJvb3QoKSB8fCBkb2M7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRvY3R5cGUgPSBmdW5jdGlvbihwdWJJRCwgc3lzSUQpIHtcbiAgICAgIHZhciBjaGlsZCwgZG9jLCBkb2N0eXBlLCBpLCBqLCBrLCBsZW4sIGxlbjEsIHJlZjEsIHJlZjI7XG4gICAgICBkb2MgPSB0aGlzLmRvY3VtZW50KCk7XG4gICAgICBkb2N0eXBlID0gbmV3IFhNTERvY1R5cGUoZG9jLCBwdWJJRCwgc3lzSUQpO1xuICAgICAgcmVmMSA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBjaGlsZCA9IHJlZjFbaV07XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFhNTERvY1R5cGUpIHtcbiAgICAgICAgICBkb2MuY2hpbGRyZW5baV0gPSBkb2N0eXBlO1xuICAgICAgICAgIHJldHVybiBkb2N0eXBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWYyID0gZG9jLmNoaWxkcmVuO1xuICAgICAgZm9yIChpID0gayA9IDAsIGxlbjEgPSByZWYyLmxlbmd0aDsgayA8IGxlbjE7IGkgPSArK2spIHtcbiAgICAgICAgY2hpbGQgPSByZWYyW2ldO1xuICAgICAgICBpZiAoY2hpbGQuaXNSb290KSB7XG4gICAgICAgICAgZG9jLmNoaWxkcmVuLnNwbGljZShpLCAwLCBkb2N0eXBlKTtcbiAgICAgICAgICByZXR1cm4gZG9jdHlwZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZG9jLmNoaWxkcmVuLnB1c2goZG9jdHlwZSk7XG4gICAgICByZXR1cm4gZG9jdHlwZTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUudXAgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmlzUm9vdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcm9vdCBub2RlIGhhcyBubyBwYXJlbnQuIFVzZSBkb2MoKSBpZiB5b3UgbmVlZCB0byBnZXQgdGhlIGRvY3VtZW50IG9iamVjdC5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnJvb3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgbm9kZSA9IHRoaXM7XG4gICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5pc0RvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUucm9vdE9iamVjdDtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmlzUm9vdCkge1xuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5kb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICBub2RlID0gdGhpcztcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlLmlzRG9jdW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQoKS5lbmQob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICBpZiAoaSA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWxyZWFkeSBhdCB0aGUgZmlyc3Qgbm9kZVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZHJlbltpIC0gMV07XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaSA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICBpZiAoaSA9PT0gLTEgfHwgaSA9PT0gdGhpcy5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbHJlYWR5IGF0IHRoZSBsYXN0IG5vZGVcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2hpbGRyZW5baSArIDFdO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbXBvcnREb2N1bWVudCA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgdmFyIGNsb25lZFJvb3Q7XG4gICAgICBjbG9uZWRSb290ID0gZG9jLnJvb3QoKS5jbG9uZSgpO1xuICAgICAgY2xvbmVkUm9vdC5wYXJlbnQgPSB0aGlzO1xuICAgICAgY2xvbmVkUm9vdC5pc1Jvb3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjbG9uZWRSb290KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5lbGUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5ub2QgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS50eHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRhdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jZGF0YSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmNvbSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21tZW50KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaW5zID0gZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb24odGFyZ2V0LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmRvYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQoKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZGVjID0gZnVuY3Rpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlY2xhcmF0aW9uKHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZHRkID0gZnVuY3Rpb24ocHViSUQsIHN5c0lEKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N0eXBlKHB1YklELCBzeXNJRCk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5uID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZShuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jZGF0YSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLmMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tbWVudCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTE5vZGUucHJvdG90eXBlLnIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmF3KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MTm9kZS5wcm90b3R5cGUuaSA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS51ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy51cCgpO1xuICAgIH07XG5cbiAgICBYTUxOb2RlLnByb3RvdHlwZS5pbXBvcnRYTUxCdWlsZGVyID0gZnVuY3Rpb24oZG9jKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbXBvcnREb2N1bWVudChkb2MpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MTm9kZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxTdHJpbmdpZmllciwgY2FtZWxDYXNlLCBrZWJhYkNhc2UsIHJlZiwgc25ha2VDYXNlLCB0aXRsZUNhc2UsXG4gICAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIHJlZiA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLCBjYW1lbENhc2UgPSByZWYuY2FtZWxDYXNlLCB0aXRsZUNhc2UgPSByZWYudGl0bGVDYXNlLCBrZWJhYkNhc2UgPSByZWYua2ViYWJDYXNlLCBzbmFrZUNhc2UgPSByZWYuc25ha2VDYXNlO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MU3RyaW5naWZpZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MU3RyaW5naWZpZXIob3B0aW9ucykge1xuICAgICAgdGhpcy5hc3NlcnRMZWdhbENoYXIgPSBiaW5kKHRoaXMuYXNzZXJ0TGVnYWxDaGFyLCB0aGlzKTtcbiAgICAgIHZhciBrZXksIHJlZjEsIHZhbHVlO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIHRoaXMuYWxsb3dTdXJyb2dhdGVDaGFycyA9IG9wdGlvbnMuYWxsb3dTdXJyb2dhdGVDaGFycztcbiAgICAgIHRoaXMubm9Eb3VibGVFbmNvZGluZyA9IG9wdGlvbnMubm9Eb3VibGVFbmNvZGluZztcbiAgICAgIHRoaXMudGV4dENhc2UgPSBvcHRpb25zLnRleHRDYXNlO1xuICAgICAgcmVmMSA9IG9wdGlvbnMuc3RyaW5naWZ5IHx8IHt9O1xuICAgICAgZm9yIChrZXkgaW4gcmVmMSkge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYxLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSByZWYxW2tleV07XG4gICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5lbGVOYW1lID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIHZhbCA9IHRoaXMuYXBwbHlDYXNlKHZhbCk7XG4gICAgICByZXR1cm4gdGhpcy5hc3NlcnRMZWdhbENoYXIodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmVsZVRleHQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHZhbCA9ICcnICsgdmFsIHx8ICcnO1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHRoaXMuZWxFc2NhcGUodmFsKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSgnXV0+JywgJ11dXV0+PCFbQ0RBVEFbPicpO1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YWwgPSAnJyArIHZhbCB8fCAnJztcbiAgICAgIGlmICh2YWwubWF0Y2goLy0tLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWVudCB0ZXh0IGNhbm5vdCBjb250YWluIGRvdWJsZS1oeXBlbjogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0TGVnYWxDaGFyKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHJldHVybiAnJyArIHZhbCB8fCAnJztcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmF0dE5hbWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHZhbCA9ICcnICsgdmFsIHx8ICcnO1xuICAgICAgcmV0dXJuIHZhbCA9IHRoaXMuYXBwbHlDYXNlKHZhbCk7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hdHRWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgdmFsID0gJycgKyB2YWwgfHwgJyc7XG4gICAgICByZXR1cm4gdGhpcy5hdHRFc2NhcGUodmFsKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmluc1RhcmdldCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgcmV0dXJuICcnICsgdmFsIHx8ICcnO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuaW5zVmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHZhbCA9ICcnICsgdmFsIHx8ICcnO1xuICAgICAgaWYgKHZhbC5tYXRjaCgvXFw/Pi8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiB2YWx1ZTogXCIgKyB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLnhtbFZlcnNpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHZhbCA9ICcnICsgdmFsIHx8ICcnO1xuICAgICAgaWYgKCF2YWwubWF0Y2goLzFcXC5bMC05XSsvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZlcnNpb24gbnVtYmVyOiBcIiArIHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUueG1sRW5jb2RpbmcgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHZhbCA9ICcnICsgdmFsIHx8ICcnO1xuICAgICAgaWYgKCF2YWwubWF0Y2goL15bQS1aYS16XSg/OltBLVphLXowLTkuXy1dfC0pKiQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGVuY29kaW5nOiBcIiArIHZhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUueG1sU3RhbmRhbG9uZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICByZXR1cm4gXCJ5ZXNcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm5vXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRQdWJJRCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgcmV0dXJuICcnICsgdmFsIHx8ICcnO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkU3lzSUQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHJldHVybiAnJyArIHZhbCB8fCAnJztcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmR0ZEVsZW1lbnRWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgcmV0dXJuICcnICsgdmFsIHx8ICcnO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkQXR0VHlwZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgcmV0dXJuICcnICsgdmFsIHx8ICcnO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkQXR0RGVmYXVsdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJyArIHZhbCB8fCAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5kdGRFbnRpdHlWYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgcmV0dXJuICcnICsgdmFsIHx8ICcnO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZHRkTkRhdGEgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHJldHVybiAnJyArIHZhbCB8fCAnJztcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRBdHRLZXkgPSAnQCc7XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydFBJS2V5ID0gJz8nO1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmNvbnZlcnRUZXh0S2V5ID0gJyN0ZXh0JztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0Q0RhdGFLZXkgPSAnI2NkYXRhJztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5jb252ZXJ0Q29tbWVudEtleSA9ICcjY29tbWVudCc7XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuY29udmVydFJhd0tleSA9ICcjcmF3JztcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hc3NlcnRMZWdhbENoYXIgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHZhciBjaGFycywgY2hyO1xuICAgICAgaWYgKHRoaXMuYWxsb3dTdXJyb2dhdGVDaGFycykge1xuICAgICAgICBjaGFycyA9IC9bXFx1MDAwMC1cXHUwMDA4XFx1MDAwQi1cXHUwMDBDXFx1MDAwRS1cXHUwMDFGXFx1RkZGRS1cXHVGRkZGXS87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFycyA9IC9bXFx1MDAwMC1cXHUwMDA4XFx1MDAwQi1cXHUwMDBDXFx1MDAwRS1cXHUwMDFGXFx1RDgwMC1cXHVERkZGXFx1RkZGRS1cXHVGRkZGXS87XG4gICAgICB9XG4gICAgICBjaHIgPSBzdHIubWF0Y2goY2hhcnMpO1xuICAgICAgaWYgKGNocikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlciAoXCIgKyBjaHIgKyBcIikgaW4gc3RyaW5nOiBcIiArIHN0ciArIFwiIGF0IGluZGV4IFwiICsgY2hyLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ2lmaWVyLnByb3RvdHlwZS5hcHBseUNhc2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHN3aXRjaCAodGhpcy50ZXh0Q2FzZSkge1xuICAgICAgICBjYXNlIFwiY2FtZWxcIjpcbiAgICAgICAgICByZXR1cm4gY2FtZWxDYXNlKHN0cik7XG4gICAgICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgICAgIHJldHVybiB0aXRsZUNhc2Uoc3RyKTtcbiAgICAgICAgY2FzZSBcImtlYmFiXCI6XG4gICAgICAgIGNhc2UgXCJsb3dlclwiOlxuICAgICAgICAgIHJldHVybiBrZWJhYkNhc2Uoc3RyKTtcbiAgICAgICAgY2FzZSBcInNuYWtlXCI6XG4gICAgICAgICAgcmV0dXJuIHNuYWtlQ2FzZShzdHIpO1xuICAgICAgICBjYXNlIFwidXBwZXJcIjpcbiAgICAgICAgICByZXR1cm4ga2ViYWJDYXNlKHN0cikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxTdHJpbmdpZmllci5wcm90b3R5cGUuZWxFc2NhcGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICAgIHZhciBhbXByZWdleDtcbiAgICAgIGFtcHJlZ2V4ID0gdGhpcy5ub0RvdWJsZUVuY29kaW5nID8gLyg/ISZcXFMrOykmL2cgOiAvJi9nO1xuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKGFtcHJlZ2V4LCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpLnJlcGxhY2UoL1xcci9nLCAnJiN4RDsnKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5naWZpZXIucHJvdG90eXBlLmF0dEVzY2FwZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIGFtcHJlZ2V4O1xuICAgICAgYW1wcmVnZXggPSB0aGlzLm5vRG91YmxlRW5jb2RpbmcgPyAvKD8hJlxcUys7KSYvZyA6IC8mL2c7XG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoYW1wcmVnZXgsICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykucmVwbGFjZSgvXFx0L2csICcmI3g5OycpLnJlcGxhY2UoL1xcbi9nLCAnJiN4QTsnKS5yZXBsYWNlKC9cXHIvZywgJyYjeEQ7Jyk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxTdHJpbmdpZmllcjtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwgIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBYTUxXcml0ZXJCYXNlLFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFdyaXRlckJhc2UgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWE1MV3JpdGVyQmFzZShvcHRpb25zKSB7XG4gICAgICB2YXIga2V5LCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHZhbHVlO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIHRoaXMucHJldHR5ID0gb3B0aW9ucy5wcmV0dHkgfHwgZmFsc2U7XG4gICAgICB0aGlzLmFsbG93RW1wdHkgPSAocmVmID0gb3B0aW9ucy5hbGxvd0VtcHR5KSAhPSBudWxsID8gcmVmIDogZmFsc2U7XG4gICAgICBpZiAodGhpcy5wcmV0dHkpIHtcbiAgICAgICAgdGhpcy5pbmRlbnQgPSAocmVmMSA9IG9wdGlvbnMuaW5kZW50KSAhPSBudWxsID8gcmVmMSA6ICcgICc7XG4gICAgICAgIHRoaXMubmV3bGluZSA9IChyZWYyID0gb3B0aW9ucy5uZXdsaW5lKSAhPSBudWxsID8gcmVmMiA6ICdcXG4nO1xuICAgICAgICB0aGlzLm9mZnNldCA9IChyZWYzID0gb3B0aW9ucy5vZmZzZXQpICE9IG51bGwgPyByZWYzIDogMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5kZW50ID0gJyc7XG4gICAgICAgIHRoaXMubmV3bGluZSA9ICcnO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICB9XG4gICAgICByZWY0ID0gb3B0aW9ucy53cml0ZXIgfHwge307XG4gICAgICBmb3IgKGtleSBpbiByZWY0KSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHJlZjQsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZjRba2V5XTtcbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGtleSwgcmVmLCB2YWx1ZTtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICBpZiAoXCJwcmV0dHlcIiBpbiBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMucHJldHR5ID0gb3B0aW9ucy5wcmV0dHk7XG4gICAgICB9XG4gICAgICBpZiAoXCJhbGxvd0VtcHR5XCIgaW4gb3B0aW9ucykge1xuICAgICAgICB0aGlzLmFsbG93RW1wdHkgPSBvcHRpb25zLmFsbG93RW1wdHk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcmV0dHkpIHtcbiAgICAgICAgdGhpcy5pbmRlbnQgPSBcImluZGVudFwiIGluIG9wdGlvbnMgPyBvcHRpb25zLmluZGVudCA6ICcgICc7XG4gICAgICAgIHRoaXMubmV3bGluZSA9IFwibmV3bGluZVwiIGluIG9wdGlvbnMgPyBvcHRpb25zLm5ld2xpbmUgOiAnXFxuJztcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBcIm9mZnNldFwiIGluIG9wdGlvbnMgPyBvcHRpb25zLm9mZnNldCA6IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluZGVudCA9ICcnO1xuICAgICAgICB0aGlzLm5ld2xpbmUgPSAnJztcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgfVxuICAgICAgcmVmID0gb3B0aW9ucy53cml0ZXIgfHwge307XG4gICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MV3JpdGVyQmFzZS5wcm90b3R5cGUuc3BhY2UgPSBmdW5jdGlvbihsZXZlbCkge1xuICAgICAgaWYgKHRoaXMucHJldHR5KSB7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkoKGxldmVsIHx8IDApICsgdGhpcy5vZmZzZXQgKyAxKS5qb2luKHRoaXMuaW5kZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFdyaXRlckJhc2U7XG5cbiAgfSkoKTtcblxufSkuY2FsbCh0aGlzKTtcbiIsICIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MQ0RhdGEsIFhNTENvbW1lbnQsIFhNTERUREF0dExpc3QsIFhNTERUREVsZW1lbnQsIFhNTERUREVudGl0eSwgWE1MRFRETm90YXRpb24sIFhNTERlY2xhcmF0aW9uLCBYTUxEb2NUeXBlLCBYTUxFbGVtZW50LCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sIFhNTFJhdywgWE1MU3RyaW5nV3JpdGVyLCBYTUxUZXh0LCBYTUxXcml0ZXJCYXNlLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL1hNTERlY2xhcmF0aW9uJyk7XG5cbiAgWE1MRG9jVHlwZSA9IHJlcXVpcmUoJy4vWE1MRG9jVHlwZScpO1xuXG4gIFhNTENEYXRhID0gcmVxdWlyZSgnLi9YTUxDRGF0YScpO1xuXG4gIFhNTENvbW1lbnQgPSByZXF1aXJlKCcuL1hNTENvbW1lbnQnKTtcblxuICBYTUxFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxFbGVtZW50Jyk7XG5cbiAgWE1MUmF3ID0gcmVxdWlyZSgnLi9YTUxSYXcnKTtcblxuICBYTUxUZXh0ID0gcmVxdWlyZSgnLi9YTUxUZXh0Jyk7XG5cbiAgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gcmVxdWlyZSgnLi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24nKTtcblxuICBYTUxEVERBdHRMaXN0ID0gcmVxdWlyZSgnLi9YTUxEVERBdHRMaXN0Jyk7XG5cbiAgWE1MRFRERWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRFRERWxlbWVudCcpO1xuXG4gIFhNTERUREVudGl0eSA9IHJlcXVpcmUoJy4vWE1MRFRERW50aXR5Jyk7XG5cbiAgWE1MRFRETm90YXRpb24gPSByZXF1aXJlKCcuL1hNTERURE5vdGF0aW9uJyk7XG5cbiAgWE1MV3JpdGVyQmFzZSA9IHJlcXVpcmUoJy4vWE1MV3JpdGVyQmFzZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MU3RyaW5nV3JpdGVyID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MU3RyaW5nV3JpdGVyLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFN0cmluZ1dyaXRlcihvcHRpb25zKSB7XG4gICAgICBYTUxTdHJpbmdXcml0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS5kb2N1bWVudCA9IGZ1bmN0aW9uKGRvYykge1xuICAgICAgdmFyIGNoaWxkLCBpLCBsZW4sIHIsIHJlZjtcbiAgICAgIHIgPSAnJztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgciArPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MRGVjbGFyYXRpb24pOlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNsYXJhdGlvbihjaGlsZCk7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxEb2NUeXBlKTpcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jVHlwZShjaGlsZCk7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxDb21tZW50KTpcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tbWVudChjaGlsZCk7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24pOlxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oY2hpbGQpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudChjaGlsZCwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJldHR5ICYmIHIuc2xpY2UoLXRoaXMubmV3bGluZS5sZW5ndGgpID09PSB0aGlzLm5ld2xpbmUpIHtcbiAgICAgICAgciA9IHIuc2xpY2UoMCwgLXRoaXMubmV3bGluZS5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ1dyaXRlci5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24oYXR0KSB7XG4gICAgICByZXR1cm4gJyAnICsgYXR0Lm5hbWUgKyAnPVwiJyArIGF0dC52YWx1ZSArICdcIic7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ1dyaXRlci5wcm90b3R5cGUuY2RhdGEgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3BhY2UobGV2ZWwpICsgJzwhW0NEQVRBWycgKyBub2RlLnRleHQgKyAnXV0+JyArIHRoaXMubmV3bGluZTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS5jb21tZW50ID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYWNlKGxldmVsKSArICc8IS0tICcgKyBub2RlLnRleHQgKyAnIC0tPicgKyB0aGlzLm5ld2xpbmU7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ1dyaXRlci5wcm90b3R5cGUuZGVjbGFyYXRpb24gPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICByID0gdGhpcy5zcGFjZShsZXZlbCk7XG4gICAgICByICs9ICc8P3htbCB2ZXJzaW9uPVwiJyArIG5vZGUudmVyc2lvbiArICdcIic7XG4gICAgICBpZiAobm9kZS5lbmNvZGluZyAhPSBudWxsKSB7XG4gICAgICAgIHIgKz0gJyBlbmNvZGluZz1cIicgKyBub2RlLmVuY29kaW5nICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnN0YW5kYWxvbmUgIT0gbnVsbCkge1xuICAgICAgICByICs9ICcgc3RhbmRhbG9uZT1cIicgKyBub2RlLnN0YW5kYWxvbmUgKyAnXCInO1xuICAgICAgfVxuICAgICAgciArPSAnPz4nO1xuICAgICAgciArPSB0aGlzLm5ld2xpbmU7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS5kb2NUeXBlID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByLCByZWY7XG4gICAgICBsZXZlbCB8fCAobGV2ZWwgPSAwKTtcbiAgICAgIHIgPSB0aGlzLnNwYWNlKGxldmVsKTtcbiAgICAgIHIgKz0gJzwhRE9DVFlQRSAnICsgbm9kZS5yb290KCkubmFtZTtcbiAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgciArPSAnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgIHIgKz0gJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIic7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHIgKz0gJyBbJztcbiAgICAgICAgciArPSB0aGlzLm5ld2xpbmU7XG4gICAgICAgIHJlZiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICAgIHIgKz0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxEVERBdHRMaXN0KTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kdGRBdHRMaXN0KGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxEVERFbGVtZW50KTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kdGRFbGVtZW50KGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxEVERFbnRpdHkpOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmR0ZEVudGl0eShjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MRFRETm90YXRpb24pOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmR0ZE5vdGF0aW9uKGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxDRGF0YSk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2RhdGEoY2hpbGQsIGxldmVsICsgMSk7XG4gICAgICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTENvbW1lbnQpOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQoY2hpbGQsIGxldmVsICsgMSk7XG4gICAgICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbik6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc2luZ0luc3RydWN0aW9uKGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gRFREIG5vZGUgdHlwZTogXCIgKyBjaGlsZC5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHIgKz0gJ10nO1xuICAgICAgfVxuICAgICAgciArPSAnPic7XG4gICAgICByICs9IHRoaXMubmV3bGluZTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdXcml0ZXIucHJvdG90eXBlLmVsZW1lbnQgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgdmFyIGF0dCwgY2hpbGQsIGksIGxlbiwgbmFtZSwgciwgcmVmLCByZWYxLCBzcGFjZTtcbiAgICAgIGxldmVsIHx8IChsZXZlbCA9IDApO1xuICAgICAgc3BhY2UgPSB0aGlzLnNwYWNlKGxldmVsKTtcbiAgICAgIHIgPSAnJztcbiAgICAgIHIgKz0gc3BhY2UgKyAnPCcgKyBub2RlLm5hbWU7XG4gICAgICByZWYgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgIGlmICghaGFzUHJvcC5jYWxsKHJlZiwgbmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBhdHQgPSByZWZbbmFtZV07XG4gICAgICAgIHIgKz0gdGhpcy5hdHRyaWJ1dGUoYXR0KTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCB8fCBub2RlLmNoaWxkcmVuLmV2ZXJ5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGUudmFsdWUgPT09ICcnO1xuICAgICAgfSkpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxsb3dFbXB0eSkge1xuICAgICAgICAgIHIgKz0gJz48LycgKyBub2RlLm5hbWUgKyAnPicgKyB0aGlzLm5ld2xpbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgciArPSAnLz4nICsgdGhpcy5uZXdsaW5lO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJldHR5ICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIChub2RlLmNoaWxkcmVuWzBdLnZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgIHIgKz0gJz4nO1xuICAgICAgICByICs9IG5vZGUuY2hpbGRyZW5bMF0udmFsdWU7XG4gICAgICAgIHIgKz0gJzwvJyArIG5vZGUubmFtZSArICc+JyArIHRoaXMubmV3bGluZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gJz4nICsgdGhpcy5uZXdsaW5lO1xuICAgICAgICByZWYxID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmMVtpXTtcbiAgICAgICAgICByICs9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZmFsc2UpIHtcbiAgICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MQ0RhdGEpOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNkYXRhKGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxDb21tZW50KTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21tZW50KGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxFbGVtZW50KTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50KGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxSYXcpOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJhdyhjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MVGV4dCk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dChjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oY2hpbGQsIGxldmVsICsgMSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBYTUwgbm9kZSB0eXBlOiBcIiArIGNoaWxkLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgciArPSBzcGFjZSArICc8LycgKyBub2RlLm5hbWUgKyAnPicgKyB0aGlzLm5ld2xpbmU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICByID0gdGhpcy5zcGFjZShsZXZlbCkgKyAnPD8nICsgbm9kZS50YXJnZXQ7XG4gICAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgICByICs9ICcgJyArIG5vZGUudmFsdWU7XG4gICAgICB9XG4gICAgICByICs9ICc/PicgKyB0aGlzLm5ld2xpbmU7XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3BhY2UobGV2ZWwpICsgbm9kZS52YWx1ZSArIHRoaXMubmV3bGluZTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwYWNlKGxldmVsKSArIG5vZGUudmFsdWUgKyB0aGlzLm5ld2xpbmU7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ1dyaXRlci5wcm90b3R5cGUuZHRkQXR0TGlzdCA9IGZ1bmN0aW9uKG5vZGUsIGxldmVsKSB7XG4gICAgICB2YXIgcjtcbiAgICAgIHIgPSB0aGlzLnNwYWNlKGxldmVsKSArICc8IUFUVExJU1QgJyArIG5vZGUuZWxlbWVudE5hbWUgKyAnICcgKyBub2RlLmF0dHJpYnV0ZU5hbWUgKyAnICcgKyBub2RlLmF0dHJpYnV0ZVR5cGU7XG4gICAgICBpZiAobm9kZS5kZWZhdWx0VmFsdWVUeXBlICE9PSAnI0RFRkFVTFQnKSB7XG4gICAgICAgIHIgKz0gJyAnICsgbm9kZS5kZWZhdWx0VmFsdWVUeXBlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHIgKz0gJyBcIicgKyBub2RlLmRlZmF1bHRWYWx1ZSArICdcIic7XG4gICAgICB9XG4gICAgICByICs9ICc+JyArIHRoaXMubmV3bGluZTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdXcml0ZXIucHJvdG90eXBlLmR0ZEVsZW1lbnQgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3BhY2UobGV2ZWwpICsgJzwhRUxFTUVOVCAnICsgbm9kZS5uYW1lICsgJyAnICsgbm9kZS52YWx1ZSArICc+JyArIHRoaXMubmV3bGluZTtcbiAgICB9O1xuXG4gICAgWE1MU3RyaW5nV3JpdGVyLnByb3RvdHlwZS5kdGRFbnRpdHkgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgdmFyIHI7XG4gICAgICByID0gdGhpcy5zcGFjZShsZXZlbCkgKyAnPCFFTlRJVFknO1xuICAgICAgaWYgKG5vZGUucGUpIHtcbiAgICAgICAgciArPSAnICUnO1xuICAgICAgfVxuICAgICAgciArPSAnICcgKyBub2RlLm5hbWU7XG4gICAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgICByICs9ICcgXCInICsgbm9kZS52YWx1ZSArICdcIic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5wdWJJRCAmJiBub2RlLnN5c0lEKSB7XG4gICAgICAgICAgciArPSAnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICByICs9ICcgU1lTVEVNIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLm5EYXRhKSB7XG4gICAgICAgICAgciArPSAnIE5EQVRBICcgKyBub2RlLm5EYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByICs9ICc+JyArIHRoaXMubmV3bGluZTtcbiAgICAgIHJldHVybiByO1xuICAgIH07XG5cbiAgICBYTUxTdHJpbmdXcml0ZXIucHJvdG90eXBlLmR0ZE5vdGF0aW9uID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHZhciByO1xuICAgICAgciA9IHRoaXMuc3BhY2UobGV2ZWwpICsgJzwhTk9UQVRJT04gJyArIG5vZGUubmFtZTtcbiAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgciArPSAnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnB1YklEKSB7XG4gICAgICAgIHIgKz0gJyBQVUJMSUMgXCInICsgbm9kZS5wdWJJRCArICdcIic7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgciArPSAnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIHIgKz0gJz4nICsgdGhpcy5uZXdsaW5lO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfTtcblxuICAgIFhNTFN0cmluZ1dyaXRlci5wcm90b3R5cGUub3Blbk5vZGUgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgdmFyIGF0dCwgbmFtZSwgciwgcmVmO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFhNTEVsZW1lbnQpIHtcbiAgICAgICAgciA9IHRoaXMuc3BhY2UobGV2ZWwpICsgJzwnICsgbm9kZS5uYW1lO1xuICAgICAgICByZWYgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICAgIGZvciAobmFtZSBpbiByZWYpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIG5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgICBhdHQgPSByZWZbbmFtZV07XG4gICAgICAgICAgciArPSB0aGlzLmF0dHJpYnV0ZShhdHQpO1xuICAgICAgICB9XG4gICAgICAgIHIgKz0gKG5vZGUuY2hpbGRyZW4gPyAnPicgOiAnLz4nKSArIHRoaXMubmV3bGluZTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByID0gdGhpcy5zcGFjZShsZXZlbCkgKyAnPCFET0NUWVBFICcgKyBub2RlLnJvb3ROb2RlTmFtZTtcbiAgICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICAgIHIgKz0gJyBQVUJMSUMgXCInICsgbm9kZS5wdWJJRCArICdcIiBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgICAgciArPSAnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJztcbiAgICAgICAgfVxuICAgICAgICByICs9IChub2RlLmNoaWxkcmVuID8gJyBbJyA6ICc+JykgKyB0aGlzLm5ld2xpbmU7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxTdHJpbmdXcml0ZXIucHJvdG90eXBlLmNsb3NlTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIGxldmVsKSB7XG4gICAgICBsZXZlbCB8fCAobGV2ZWwgPSAwKTtcbiAgICAgIHN3aXRjaCAoZmFsc2UpIHtcbiAgICAgICAgY2FzZSAhKG5vZGUgaW5zdGFuY2VvZiBYTUxFbGVtZW50KTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5zcGFjZShsZXZlbCkgKyAnPC8nICsgbm9kZS5uYW1lICsgJz4nICsgdGhpcy5uZXdsaW5lO1xuICAgICAgICBjYXNlICEobm9kZSBpbnN0YW5jZW9mIFhNTERvY1R5cGUpOlxuICAgICAgICAgIHJldHVybiB0aGlzLnNwYWNlKGxldmVsKSArICddPicgKyB0aGlzLm5ld2xpbmU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxTdHJpbmdXcml0ZXI7XG5cbiAgfSkoWE1MV3JpdGVyQmFzZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERvY3VtZW50LCBYTUxOb2RlLCBYTUxTdHJpbmdXcml0ZXIsIFhNTFN0cmluZ2lmaWVyLCBpc1BsYWluT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzUGxhaW5PYmplY3Q7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIFhNTFN0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdpZmllcicpO1xuXG4gIFhNTFN0cmluZ1dyaXRlciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5nV3JpdGVyJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEb2N1bWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERvY3VtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERvY3VtZW50KG9wdGlvbnMpIHtcbiAgICAgIFhNTERvY3VtZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG51bGwpO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIGlmICghb3B0aW9ucy53cml0ZXIpIHtcbiAgICAgICAgb3B0aW9ucy53cml0ZXIgPSBuZXcgWE1MU3RyaW5nV3JpdGVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgdGhpcy5zdHJpbmdpZnkgPSBuZXcgWE1MU3RyaW5naWZpZXIob3B0aW9ucyk7XG4gICAgICB0aGlzLmlzRG9jdW1lbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbih3cml0ZXIpIHtcbiAgICAgIHZhciB3cml0ZXJPcHRpb25zO1xuICAgICAgaWYgKCF3cml0ZXIpIHtcbiAgICAgICAgd3JpdGVyID0gdGhpcy5vcHRpb25zLndyaXRlcjtcbiAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh3cml0ZXIpKSB7XG4gICAgICAgIHdyaXRlck9wdGlvbnMgPSB3cml0ZXI7XG4gICAgICAgIHdyaXRlciA9IHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KHdyaXRlck9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyaXRlci5kb2N1bWVudCh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmRvY3VtZW50KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRG9jdW1lbnQ7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTEF0dHJpYnV0ZSwgWE1MQ0RhdGEsIFhNTENvbW1lbnQsIFhNTERUREF0dExpc3QsIFhNTERUREVsZW1lbnQsIFhNTERUREVudGl0eSwgWE1MRFRETm90YXRpb24sIFhNTERlY2xhcmF0aW9uLCBYTUxEb2NUeXBlLCBYTUxEb2N1bWVudENCLCBYTUxFbGVtZW50LCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24sIFhNTFJhdywgWE1MU3RyaW5nV3JpdGVyLCBYTUxTdHJpbmdpZmllciwgWE1MVGV4dCwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzUGxhaW5PYmplY3QsIHJlZixcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgcmVmID0gcmVxdWlyZSgnLi9VdGlsaXR5JyksIGlzT2JqZWN0ID0gcmVmLmlzT2JqZWN0LCBpc0Z1bmN0aW9uID0gcmVmLmlzRnVuY3Rpb24sIGlzUGxhaW5PYmplY3QgPSByZWYuaXNQbGFpbk9iamVjdDtcblxuICBYTUxFbGVtZW50ID0gcmVxdWlyZSgnLi9YTUxFbGVtZW50Jyk7XG5cbiAgWE1MQ0RhdGEgPSByZXF1aXJlKCcuL1hNTENEYXRhJyk7XG5cbiAgWE1MQ29tbWVudCA9IHJlcXVpcmUoJy4vWE1MQ29tbWVudCcpO1xuXG4gIFhNTFJhdyA9IHJlcXVpcmUoJy4vWE1MUmF3Jyk7XG5cbiAgWE1MVGV4dCA9IHJlcXVpcmUoJy4vWE1MVGV4dCcpO1xuXG4gIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IHJlcXVpcmUoJy4vWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uJyk7XG5cbiAgWE1MRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL1hNTERlY2xhcmF0aW9uJyk7XG5cbiAgWE1MRG9jVHlwZSA9IHJlcXVpcmUoJy4vWE1MRG9jVHlwZScpO1xuXG4gIFhNTERUREF0dExpc3QgPSByZXF1aXJlKCcuL1hNTERUREF0dExpc3QnKTtcblxuICBYTUxEVERFbnRpdHkgPSByZXF1aXJlKCcuL1hNTERUREVudGl0eScpO1xuXG4gIFhNTERUREVsZW1lbnQgPSByZXF1aXJlKCcuL1hNTERUREVsZW1lbnQnKTtcblxuICBYTUxEVEROb3RhdGlvbiA9IHJlcXVpcmUoJy4vWE1MRFRETm90YXRpb24nKTtcblxuICBYTUxBdHRyaWJ1dGUgPSByZXF1aXJlKCcuL1hNTEF0dHJpYnV0ZScpO1xuXG4gIFhNTFN0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdpZmllcicpO1xuXG4gIFhNTFN0cmluZ1dyaXRlciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5nV3JpdGVyJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEb2N1bWVudENCID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFhNTERvY3VtZW50Q0Iob3B0aW9ucywgb25EYXRhLCBvbkVuZCkge1xuICAgICAgdmFyIHdyaXRlck9wdGlvbnM7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgaWYgKCFvcHRpb25zLndyaXRlcikge1xuICAgICAgICBvcHRpb25zLndyaXRlciA9IG5ldyBYTUxTdHJpbmdXcml0ZXIob3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qob3B0aW9ucy53cml0ZXIpKSB7XG4gICAgICAgIHdyaXRlck9wdGlvbnMgPSBvcHRpb25zLndyaXRlcjtcbiAgICAgICAgb3B0aW9ucy53cml0ZXIgPSBuZXcgWE1MU3RyaW5nV3JpdGVyKHdyaXRlck9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHRoaXMud3JpdGVyID0gb3B0aW9ucy53cml0ZXI7XG4gICAgICB0aGlzLnN0cmluZ2lmeSA9IG5ldyBYTUxTdHJpbmdpZmllcihvcHRpb25zKTtcbiAgICAgIHRoaXMub25EYXRhQ2FsbGJhY2sgPSBvbkRhdGEgfHwgZnVuY3Rpb24oKSB7fTtcbiAgICAgIHRoaXMub25FbmRDYWxsYmFjayA9IG9uRW5kIHx8IGZ1bmN0aW9uKCkge307XG4gICAgICB0aGlzLmN1cnJlbnROb2RlID0gbnVsbDtcbiAgICAgIHRoaXMuY3VycmVudExldmVsID0gLTE7XG4gICAgICB0aGlzLm9wZW5UYWdzID0ge307XG4gICAgICB0aGlzLmRvY3VtZW50U3RhcnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5kb2N1bWVudENvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5yb290ID0gbnVsbDtcbiAgICB9XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgdmFyIHJlZjE7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgbm9kZSBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucm9vdCAmJiB0aGlzLmN1cnJlbnRMZXZlbCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRG9jdW1lbnQgY2FuIG9ubHkgaGF2ZSBvbmUgcm9vdCBub2RlXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbmFtZSA9IG5hbWUudmFsdWVPZigpO1xuICAgICAgaWYgKGF0dHJpYnV0ZXMgPT0gbnVsbCkge1xuICAgICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgICB9XG4gICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy52YWx1ZU9mKCk7XG4gICAgICBpZiAoIWlzT2JqZWN0KGF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHJlZjEgPSBbYXR0cmlidXRlcywgdGV4dF0sIHRleHQgPSByZWYxWzBdLCBhdHRyaWJ1dGVzID0gcmVmMVsxXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBuZXcgWE1MRWxlbWVudCh0aGlzLCBuYW1lLCBhdHRyaWJ1dGVzKTtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMuY3VycmVudExldmVsKys7XG4gICAgICB0aGlzLm9wZW5UYWdzW3RoaXMuY3VycmVudExldmVsXSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMudGV4dCh0ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5lbGVtZW50ID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUgJiYgdGhpcy5jdXJyZW50Tm9kZSBpbnN0YW5jZW9mIFhNTERvY1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHRkRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZShuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBhdHROYW1lLCBhdHRWYWx1ZTtcbiAgICAgIGlmICghdGhpcy5jdXJyZW50Tm9kZSB8fCB0aGlzLmN1cnJlbnROb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImF0dCgpIGNhbiBvbmx5IGJlIHVzZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgYW4gZWxlKCkgY2FsbCBpbiBjYWxsYmFjayBtb2RlXCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgICBuYW1lID0gbmFtZS52YWx1ZU9mKCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgICAgZm9yIChhdHROYW1lIGluIG5hbWUpIHtcbiAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChuYW1lLCBhdHROYW1lKSkgY29udGludWU7XG4gICAgICAgICAgYXR0VmFsdWUgPSBuYW1lW2F0dE5hbWVdO1xuICAgICAgICAgIHRoaXMuYXR0cmlidXRlKGF0dE5hbWUsIGF0dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5hcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNraXBOdWxsQXR0cmlidXRlcyB8fCAodmFsdWUgIT0gbnVsbCkpIHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlLmF0dHJpYnV0ZXNbbmFtZV0gPSBuZXcgWE1MQXR0cmlidXRlKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBub2RlID0gbmV3IFhNTFRleHQodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIudGV4dChub2RlLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5jZGF0YSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MQ0RhdGEodGhpcywgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuY2RhdGEobm9kZSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY29tbWVudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MQ29tbWVudCh0aGlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5jb21tZW50KG5vZGUsIHRoaXMuY3VycmVudExldmVsICsgMSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MUmF3KHRoaXMsIHZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLnJhdyhub2RlLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5pbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBpLCBpbnNUYXJnZXQsIGluc1ZhbHVlLCBsZW4sIG5vZGU7XG4gICAgICB0aGlzLm9wZW5DdXJyZW50KCk7XG4gICAgICBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnZhbHVlT2YoKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0YXJnZXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpbnNUYXJnZXQgPSB0YXJnZXRbaV07XG4gICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbihpbnNUYXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgZm9yIChpbnNUYXJnZXQgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwodGFyZ2V0LCBpbnNUYXJnZXQpKSBjb250aW51ZTtcbiAgICAgICAgICBpbnNWYWx1ZSA9IHRhcmdldFtpbnNUYXJnZXRdO1xuICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb24oaW5zVGFyZ2V0LCBpbnNWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUuYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbmV3IFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzLCB0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIucHJvY2Vzc2luZ0luc3RydWN0aW9uKG5vZGUsIHRoaXMuY3VycmVudExldmVsICsgMSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmRlY2xhcmF0aW9uID0gZnVuY3Rpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgaWYgKHRoaXMuZG9jdW1lbnRTdGFydGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImRlY2xhcmF0aW9uKCkgbXVzdCBiZSB0aGUgZmlyc3Qgbm9kZVwiKTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBuZXcgWE1MRGVjbGFyYXRpb24odGhpcywgdmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuZGVjbGFyYXRpb24obm9kZSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZG9jdHlwZSA9IGZ1bmN0aW9uKHJvb3QsIHB1YklELCBzeXNJRCkge1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgaWYgKHJvb3QgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJvb3Qgbm9kZSBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkdGQoKSBtdXN0IGNvbWUgYmVmb3JlIHRoZSByb290IG5vZGVcIik7XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnJlbnROb2RlID0gbmV3IFhNTERvY1R5cGUodGhpcywgcHViSUQsIHN5c0lEKTtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUucm9vdE5vZGVOYW1lID0gcm9vdDtcbiAgICAgIHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMuY3VycmVudExldmVsKys7XG4gICAgICB0aGlzLm9wZW5UYWdzW3RoaXMuY3VycmVudExldmVsXSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZHRkRWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFRERWxlbWVudCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGRFbGVtZW50KG5vZGUsIHRoaXMuY3VycmVudExldmVsICsgMSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmF0dExpc3QgPSBmdW5jdGlvbihlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHRoaXMub3BlbkN1cnJlbnQoKTtcbiAgICAgIG5vZGUgPSBuZXcgWE1MRFREQXR0TGlzdCh0aGlzLCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmR0ZEF0dExpc3Qobm9kZSwgdGhpcy5jdXJyZW50TGV2ZWwgKyAxKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZW50aXR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVERFbnRpdHkodGhpcywgZmFsc2UsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmR0ZEVudGl0eShub2RlLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5wRW50aXR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVERFbnRpdHkodGhpcywgdHJ1ZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIuZHRkRW50aXR5KG5vZGUsIHRoaXMuY3VycmVudExldmVsICsgMSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vdGF0aW9uID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBub2RlO1xuICAgICAgdGhpcy5vcGVuQ3VycmVudCgpO1xuICAgICAgbm9kZSA9IG5ldyBYTUxEVEROb3RhdGlvbih0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9uRGF0YSh0aGlzLndyaXRlci5kdGROb3RhdGlvbihub2RlLCB0aGlzLmN1cnJlbnRMZXZlbCArIDEpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudExldmVsIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZG9jdW1lbnQgbm9kZSBoYXMgbm8gcGFyZW50XCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICB0aGlzLmNsb3NlTm9kZSh0aGlzLmN1cnJlbnROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9wZW5Ob2RlKHRoaXMuY3VycmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jbG9zZU5vZGUodGhpcy5vcGVuVGFnc1t0aGlzLmN1cnJlbnRMZXZlbF0pO1xuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMub3BlblRhZ3NbdGhpcy5jdXJyZW50TGV2ZWxdO1xuICAgICAgdGhpcy5jdXJyZW50TGV2ZWwtLTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHdoaWxlICh0aGlzLmN1cnJlbnRMZXZlbCA+PSAwKSB7XG4gICAgICAgIHRoaXMudXAoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm9uRW5kKCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9wZW5DdXJyZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlLmNoaWxkcmVuID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3Blbk5vZGUodGhpcy5jdXJyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9wZW5Ob2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFub2RlLmlzT3Blbikge1xuICAgICAgICBpZiAoIXRoaXMucm9vdCAmJiB0aGlzLmN1cnJlbnRMZXZlbCA9PT0gMCAmJiBub2RlIGluc3RhbmNlb2YgWE1MRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMucm9vdCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkRhdGEodGhpcy53cml0ZXIub3Blbk5vZGUobm9kZSwgdGhpcy5jdXJyZW50TGV2ZWwpKTtcbiAgICAgICAgcmV0dXJuIG5vZGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY2xvc2VOb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFub2RlLmlzQ2xvc2VkKSB7XG4gICAgICAgIHRoaXMub25EYXRhKHRoaXMud3JpdGVyLmNsb3NlTm9kZShub2RlLCB0aGlzLmN1cnJlbnRMZXZlbCkpO1xuICAgICAgICByZXR1cm4gbm9kZS5pc0Nsb3NlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICB0aGlzLmRvY3VtZW50U3RhcnRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5vbkRhdGFDYWxsYmFjayhjaHVuayk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvY3VtZW50Q29tcGxldGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLm9uRW5kQ2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vZCA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUobmFtZSwgYXR0cmlidXRlcywgdGV4dCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnR4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZGF0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNkYXRhKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuY29tID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbW1lbnQodmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5pbnMgPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbih0YXJnZXQsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZGVjID0gZnVuY3Rpb24odmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlY2xhcmF0aW9uKHZlcnNpb24sIGVuY29kaW5nLCBzdGFuZGFsb25lKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZHRkID0gZnVuY3Rpb24ocm9vdCwgcHViSUQsIHN5c0lEKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N0eXBlKHJvb3QsIHB1YklELCBzeXNJRCk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmUgPSBmdW5jdGlvbihuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIHRleHQpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5uID0gZnVuY3Rpb24obmFtZSwgYXR0cmlidXRlcywgdGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZShuYW1lLCBhdHRyaWJ1dGVzLCB0ZXh0KTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jZGF0YSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLmMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tbWVudCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmF3KHZhbHVlKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuaSA9IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9uKHRhcmdldCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hdHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnROb2RlICYmIHRoaXMuY3VycmVudE5vZGUgaW5zdGFuY2VvZiBYTUxEb2NUeXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dExpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBYTUxEb2N1bWVudENCLnByb3RvdHlwZS5hID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSAmJiB0aGlzLmN1cnJlbnROb2RlIGluc3RhbmNlb2YgWE1MRG9jVHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRMaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnRDQi5wcm90b3R5cGUuZW50ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmVudGl0eShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLnBlbnQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucEVudGl0eShuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFhNTERvY3VtZW50Q0IucHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RhdGlvbihuYW1lLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEb2N1bWVudENCO1xuXG4gIH0pKCk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTENEYXRhLCBYTUxDb21tZW50LCBYTUxEVERBdHRMaXN0LCBYTUxEVERFbGVtZW50LCBYTUxEVERFbnRpdHksIFhNTERURE5vdGF0aW9uLCBYTUxEZWNsYXJhdGlvbiwgWE1MRG9jVHlwZSwgWE1MRWxlbWVudCwgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBYTUxSYXcsIFhNTFN0cmVhbVdyaXRlciwgWE1MVGV4dCwgWE1MV3JpdGVyQmFzZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9YTUxEZWNsYXJhdGlvbicpO1xuXG4gIFhNTERvY1R5cGUgPSByZXF1aXJlKCcuL1hNTERvY1R5cGUnKTtcblxuICBYTUxDRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ0RhdGEnKTtcblxuICBYTUxDb21tZW50ID0gcmVxdWlyZSgnLi9YTUxDb21tZW50Jyk7XG5cbiAgWE1MRWxlbWVudCA9IHJlcXVpcmUoJy4vWE1MRWxlbWVudCcpO1xuXG4gIFhNTFJhdyA9IHJlcXVpcmUoJy4vWE1MUmF3Jyk7XG5cbiAgWE1MVGV4dCA9IHJlcXVpcmUoJy4vWE1MVGV4dCcpO1xuXG4gIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IHJlcXVpcmUoJy4vWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uJyk7XG5cbiAgWE1MRFREQXR0TGlzdCA9IHJlcXVpcmUoJy4vWE1MRFREQXR0TGlzdCcpO1xuXG4gIFhNTERUREVsZW1lbnQgPSByZXF1aXJlKCcuL1hNTERUREVsZW1lbnQnKTtcblxuICBYTUxEVERFbnRpdHkgPSByZXF1aXJlKCcuL1hNTERUREVudGl0eScpO1xuXG4gIFhNTERURE5vdGF0aW9uID0gcmVxdWlyZSgnLi9YTUxEVEROb3RhdGlvbicpO1xuXG4gIFhNTFdyaXRlckJhc2UgPSByZXF1aXJlKCcuL1hNTFdyaXRlckJhc2UnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFN0cmVhbVdyaXRlciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFN0cmVhbVdyaXRlciwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxTdHJlYW1Xcml0ZXIoc3RyZWFtLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgIFhNTFN0cmVhbVdyaXRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmRvY3VtZW50ID0gZnVuY3Rpb24oZG9jKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGosIGxlbiwgbGVuMSwgcmVmLCByZWYxLCByZXN1bHRzO1xuICAgICAgcmVmID0gZG9jLmNoaWxkcmVuO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICBjaGlsZC5pc0xhc3RSb290Tm9kZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZG9jLmNoaWxkcmVuW2RvYy5jaGlsZHJlbi5sZW5ndGggLSAxXS5pc0xhc3RSb290Tm9kZSA9IHRydWU7XG4gICAgICByZWYxID0gZG9jLmNoaWxkcmVuO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgIGNoaWxkID0gcmVmMVtqXTtcbiAgICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTERlY2xhcmF0aW9uKTpcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLmRlY2xhcmF0aW9uKGNoaWxkKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxEb2NUeXBlKTpcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLmRvY1R5cGUoY2hpbGQpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTENvbW1lbnQpOlxuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuY29tbWVudChjaGlsZCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uKTpcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnByb2Nlc3NpbmdJbnN0cnVjdGlvbihjaGlsZCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLmVsZW1lbnQoY2hpbGQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuYXR0cmlidXRlID0gZnVuY3Rpb24oYXR0KSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoJyAnICsgYXR0Lm5hbWUgKyAnPVwiJyArIGF0dC52YWx1ZSArICdcIicpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmNkYXRhID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLnNwYWNlKGxldmVsKSArICc8IVtDREFUQVsnICsgbm9kZS50ZXh0ICsgJ11dPicgKyB0aGlzLmVuZGxpbmUobm9kZSkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmNvbW1lbnQgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuc3BhY2UobGV2ZWwpICsgJzwhLS0gJyArIG5vZGUudGV4dCArICcgLS0+JyArIHRoaXMuZW5kbGluZShub2RlKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZGVjbGFyYXRpb24gPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5zcGFjZShsZXZlbCkpO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJzw/eG1sIHZlcnNpb249XCInICsgbm9kZS52ZXJzaW9uICsgJ1wiJyk7XG4gICAgICBpZiAobm9kZS5lbmNvZGluZyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgZW5jb2Rpbmc9XCInICsgbm9kZS5lbmNvZGluZyArICdcIicpO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuc3RhbmRhbG9uZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgc3RhbmRhbG9uZT1cIicgKyBub2RlLnN0YW5kYWxvbmUgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc/PicpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuZW5kbGluZShub2RlKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZG9jVHlwZSA9IGZ1bmN0aW9uKG5vZGUsIGxldmVsKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgcmVmO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLnNwYWNlKGxldmVsKSk7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPCFET0NUWVBFICcgKyBub2RlLnJvb3QoKS5uYW1lKTtcbiAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyBQVUJMSUMgXCInICsgbm9kZS5wdWJJRCArICdcIiBcIicgKyBub2RlLnN5c0lEICsgJ1wiJyk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuc3lzSUQpIHtcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIicpO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFsnKTtcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5lbmRsaW5lKG5vZGUpKTtcbiAgICAgICAgcmVmID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSByZWZbaV07XG4gICAgICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MRFREQXR0TGlzdCk6XG4gICAgICAgICAgICAgIHRoaXMuZHRkQXR0TGlzdChjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxEVERFbGVtZW50KTpcbiAgICAgICAgICAgICAgdGhpcy5kdGRFbGVtZW50KGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTERUREVudGl0eSk6XG4gICAgICAgICAgICAgIHRoaXMuZHRkRW50aXR5KGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTERURE5vdGF0aW9uKTpcbiAgICAgICAgICAgICAgdGhpcy5kdGROb3RhdGlvbihjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxDRGF0YSk6XG4gICAgICAgICAgICAgIHRoaXMuY2RhdGEoY2hpbGQsIGxldmVsICsgMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MQ29tbWVudCk6XG4gICAgICAgICAgICAgIHRoaXMuY29tbWVudChjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24pOlxuICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NpbmdJbnN0cnVjdGlvbihjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIERURCBub2RlIHR5cGU6IFwiICsgY2hpbGQuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCddJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPicpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuZW5kbGluZShub2RlKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZWxlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIGxldmVsKSB7XG4gICAgICB2YXIgYXR0LCBjaGlsZCwgaSwgbGVuLCBuYW1lLCByZWYsIHJlZjEsIHNwYWNlO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICBzcGFjZSA9IHRoaXMuc3BhY2UobGV2ZWwpO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoc3BhY2UgKyAnPCcgKyBub2RlLm5hbWUpO1xuICAgICAgcmVmID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgZm9yIChuYW1lIGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIG5hbWUpKSBjb250aW51ZTtcbiAgICAgICAgYXR0ID0gcmVmW25hbWVdO1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZShhdHQpO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwIHx8IG5vZGUuY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gZS52YWx1ZSA9PT0gJyc7XG4gICAgICB9KSkge1xuICAgICAgICBpZiAodGhpcy5hbGxvd0VtcHR5KSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJz48LycgKyBub2RlLm5hbWUgKyAnPicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcvPicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJldHR5ICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIChub2RlLmNoaWxkcmVuWzBdLnZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+Jyk7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKG5vZGUuY2hpbGRyZW5bMF0udmFsdWUpO1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPC8nICsgbm9kZS5uYW1lICsgJz4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+JyArIHRoaXMubmV3bGluZSk7XG4gICAgICAgIHJlZjEgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSByZWYxW2ldO1xuICAgICAgICAgIHN3aXRjaCAoZmFsc2UpIHtcbiAgICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTENEYXRhKTpcbiAgICAgICAgICAgICAgdGhpcy5jZGF0YShjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxDb21tZW50KTpcbiAgICAgICAgICAgICAgdGhpcy5jb21tZW50KGNoaWxkLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgIShjaGlsZCBpbnN0YW5jZW9mIFhNTEVsZW1lbnQpOlxuICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQoY2hpbGQsIGxldmVsICsgMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MUmF3KTpcbiAgICAgICAgICAgICAgdGhpcy5yYXcoY2hpbGQsIGxldmVsICsgMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAhKGNoaWxkIGluc3RhbmNlb2YgWE1MVGV4dCk6XG4gICAgICAgICAgICAgIHRoaXMudGV4dChjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICEoY2hpbGQgaW5zdGFuY2VvZiBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24pOlxuICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NpbmdJbnN0cnVjdGlvbihjaGlsZCwgbGV2ZWwgKyAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIFhNTCBub2RlIHR5cGU6IFwiICsgY2hpbGQuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHNwYWNlICsgJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5lbmRsaW5lKG5vZGUpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5zcGFjZShsZXZlbCkgKyAnPD8nICsgbm9kZS50YXJnZXQpO1xuICAgICAgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyAnICsgbm9kZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoJz8+JyArIHRoaXMuZW5kbGluZShub2RlKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLnNwYWNlKGxldmVsKSArIG5vZGUudmFsdWUgKyB0aGlzLmVuZGxpbmUobm9kZSkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuc3BhY2UobGV2ZWwpICsgbm9kZS52YWx1ZSArIHRoaXMuZW5kbGluZShub2RlKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZHRkQXR0TGlzdCA9IGZ1bmN0aW9uKG5vZGUsIGxldmVsKSB7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLnNwYWNlKGxldmVsKSArICc8IUFUVExJU1QgJyArIG5vZGUuZWxlbWVudE5hbWUgKyAnICcgKyBub2RlLmF0dHJpYnV0ZU5hbWUgKyAnICcgKyBub2RlLmF0dHJpYnV0ZVR5cGUpO1xuICAgICAgaWYgKG5vZGUuZGVmYXVsdFZhbHVlVHlwZSAhPT0gJyNERUZBVUxUJykge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnICcgKyBub2RlLmRlZmF1bHRWYWx1ZVR5cGUpO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgXCInICsgbm9kZS5kZWZhdWx0VmFsdWUgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZSgnPicgKyB0aGlzLmVuZGxpbmUobm9kZSkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmR0ZEVsZW1lbnQgPSBmdW5jdGlvbihub2RlLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuc3BhY2UobGV2ZWwpICsgJzwhRUxFTUVOVCAnICsgbm9kZS5uYW1lICsgJyAnICsgbm9kZS52YWx1ZSArICc+JyArIHRoaXMuZW5kbGluZShub2RlKSk7XG4gICAgfTtcblxuICAgIFhNTFN0cmVhbVdyaXRlci5wcm90b3R5cGUuZHRkRW50aXR5ID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuc3BhY2UobGV2ZWwpICsgJzwhRU5USVRZJyk7XG4gICAgICBpZiAobm9kZS5wZSkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnICUnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgJyArIG5vZGUubmFtZSk7XG4gICAgICBpZiAobm9kZS52YWx1ZSkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFwiJyArIG5vZGUudmFsdWUgKyAnXCInKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2RlLnB1YklEICYmIG5vZGUuc3lzSUQpIHtcbiAgICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLnN5c0lEKSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyBTWVNURU0gXCInICsgbm9kZS5zeXNJRCArICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLm5EYXRhKSB7XG4gICAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyBOREFUQSAnICsgbm9kZS5uRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZSgnPicgKyB0aGlzLmVuZGxpbmUobm9kZSkpO1xuICAgIH07XG5cbiAgICBYTUxTdHJlYW1Xcml0ZXIucHJvdG90eXBlLmR0ZE5vdGF0aW9uID0gZnVuY3Rpb24obm9kZSwgbGV2ZWwpIHtcbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuc3BhY2UobGV2ZWwpICsgJzwhTk9UQVRJT04gJyArIG5vZGUubmFtZSk7XG4gICAgICBpZiAobm9kZS5wdWJJRCAmJiBub2RlLnN5c0lEKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCIgXCInICsgbm9kZS5zeXNJRCArICdcIicpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnB1YklEKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCcgUFVCTElDIFwiJyArIG5vZGUucHViSUQgKyAnXCInKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5zeXNJRCkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoJz4nICsgdGhpcy5lbmRsaW5lKG5vZGUpKTtcbiAgICB9O1xuXG4gICAgWE1MU3RyZWFtV3JpdGVyLnByb3RvdHlwZS5lbmRsaW5lID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKCFub2RlLmlzTGFzdFJvb3ROb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ld2xpbmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxTdHJlYW1Xcml0ZXI7XG5cbiAgfSkoWE1MV3JpdGVyQmFzZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERvY3VtZW50LCBYTUxEb2N1bWVudENCLCBYTUxTdHJlYW1Xcml0ZXIsIFhNTFN0cmluZ1dyaXRlciwgYXNzaWduLCBpc0Z1bmN0aW9uLCByZWY7XG5cbiAgcmVmID0gcmVxdWlyZSgnLi9VdGlsaXR5JyksIGFzc2lnbiA9IHJlZi5hc3NpZ24sIGlzRnVuY3Rpb24gPSByZWYuaXNGdW5jdGlvbjtcblxuICBYTUxEb2N1bWVudCA9IHJlcXVpcmUoJy4vWE1MRG9jdW1lbnQnKTtcblxuICBYTUxEb2N1bWVudENCID0gcmVxdWlyZSgnLi9YTUxEb2N1bWVudENCJyk7XG5cbiAgWE1MU3RyaW5nV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdXcml0ZXInKTtcblxuICBYTUxTdHJlYW1Xcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmVhbVdyaXRlcicpO1xuXG4gIG1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uKG5hbWUsIHhtbGRlYywgZG9jdHlwZSwgb3B0aW9ucykge1xuICAgIHZhciBkb2MsIHJvb3Q7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBlbGVtZW50IG5lZWRzIGEgbmFtZVwiKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IGFzc2lnbih7fSwgeG1sZGVjLCBkb2N0eXBlLCBvcHRpb25zKTtcbiAgICBkb2MgPSBuZXcgWE1MRG9jdW1lbnQob3B0aW9ucyk7XG4gICAgcm9vdCA9IGRvYy5lbGVtZW50KG5hbWUpO1xuICAgIGlmICghb3B0aW9ucy5oZWFkbGVzcykge1xuICAgICAgZG9jLmRlY2xhcmF0aW9uKG9wdGlvbnMpO1xuICAgICAgaWYgKChvcHRpb25zLnB1YklEICE9IG51bGwpIHx8IChvcHRpb25zLnN5c0lEICE9IG51bGwpKSB7XG4gICAgICAgIGRvYy5kb2N0eXBlKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcm9vdDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5iZWdpbiA9IGZ1bmN0aW9uKG9wdGlvbnMsIG9uRGF0YSwgb25FbmQpIHtcbiAgICB2YXIgcmVmMTtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgcmVmMSA9IFtvcHRpb25zLCBvbkRhdGFdLCBvbkRhdGEgPSByZWYxWzBdLCBvbkVuZCA9IHJlZjFbMV07XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvbkRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MRG9jdW1lbnRDQihvcHRpb25zLCBvbkRhdGEsIG9uRW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBYTUxEb2N1bWVudChvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuc3RyaW5nV3JpdGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyaW5nV3JpdGVyKG9wdGlvbnMpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLnN0cmVhbVdyaXRlciA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyZWFtV3JpdGVyKHN0cmVhbSwgb3B0aW9ucyk7XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCAiLyoqXG4gKiBAY2xhc3MgRGF0ZUZvcm1hdHRlclxuICogVGhlIERhdGVGb3JtYXR0ZXIgc3VwcG9ydHMgZGVjb2RpbmcgZnJvbSBhbmQgZW5jb2RpbmcgdG9cbiAqIElTTzg2MDEgZm9ybWF0dGVkIHN0cmluZ3MuIEFjY2VwdHMgZm9ybWF0cyB3aXRoIGFuZCB3aXRob3V0XG4gKiBoeXBoZW4vY29sb24gc2VwYXJhdG9ycyBhbmQgY29ycmVjdGx5IHBhcnNlcyB6b25pbmcgaW5mby5cbiAqL1xudmFyIERhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAob3B0cykge1xuICB0aGlzLm9wdHMgPSB7fVxuICB0aGlzLnNldE9wdHMob3B0cylcbn1cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgZm9yIERhdGVGb3JtYXR0ZXJcbiAqIEBzdGF0aWNcbiAqIEBzZWUgRGF0ZUZvcm1hdHRlciNzZXRPcHRzXG4gKi9cbkRhdGVGb3JtYXR0ZXIuREVGQVVMVF9PUFRJT05TID0ge1xuICBjb2xvbnM6IHRydWVcbiwgaHlwaGVuczogZmFsc2VcbiwgbG9jYWw6IHRydWVcbiwgbXM6IGZhbHNlXG4sIG9mZnNldDogZmFsc2Vcbn1cblxuLyoqXG4gKiBSZWd1bGFyIEV4cHJlc3Npb24gdGhhdCBkaXNlY3RzIElTTyA4NjAxIGZvcm1hdHRlZCBzdHJpbmdzIGludG9cbiAqIGFuIGFycmF5IG9mIHBhcnRzLlxuICogQHN0YXRpY1xuICovXG5EYXRlRm9ybWF0dGVyLklTTzg2MDEgPSBuZXcgUmVnRXhwKFxuICAnKFswLTldezR9KShbLV0/KFswLTldezJ9KSkoWy1dPyhbMC05XXsyfSkpJ1xuKyAnKFQoWzAtOV17Mn0pKCgoOj8oWzAtOV17Mn0pKT8oKDo/KFswLTldezJ9KSk/KFxcLihbMC05XSspKT8pKT8pJ1xuKyAnKFp8KFsrLV0oWzAtOV17Mn0oOj8oWzAtOV17Mn0pKT8pKSk/KT8nXG4pXG5cbi8qKlxuICogU2V0cyBvcHRpb25zIGZvciBlbmNvZGluZyBEYXRlIG9iamVjdHMgdG8gSVNPODYwMSBzdHJpbmdzLlxuICogICAgT21pdHRpbmcgdGhlICdvcHRzJyBhcmd1bWVudCB3aWxsIHJlc2V0IGFsbCBvcHRpb25zIHRvIHRoZSBkZWZhdWx0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gT3B0aW9ucyAob3B0aW9uYWwpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wdHMuY29sb25zICAtIEVuYWJsZS9kaXNhYmxlIGZvcm1hdHRpbmcgdGhlIHRpbWUgcG9ydGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGEgY29sb24gYXMgc2VwYXJhdG9yIChkZWZhdWx0OiB0cnVlKVxuICogQHBhcmFtIHtCb29sZWFufSBvcHRzLmh5cGhlbnMgLSBFbmFibGUvZGlzYWJsZSBmb3JtYXR0aW5nIHRoZSBkYXRlIHBvcnRpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGh5cGhlbiBhcyBzZXBhcmF0b3IgKGRlZmF1bHQ6IGZhbHNlKVxuICogQHBhcmFtIHtCb29sZWFufSBvcHRzLmxvY2FsICAgLSBFbmNvZGUgYXMgbG9jYWwgdGltZSBpbnN0ZWFkIG9mIFVUQ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdDogdHJ1ZSlcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0cy5tcyAgICAgIC0gRW5hYmxlL0Rpc2FibGUgb3V0cHV0IG9mIG1pbGxpc2Vjb25kc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdDogZmFsc2UpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wdHMub2Zmc2V0ICAtIEVuYWJsZS9EaXNhYmxlIG91dHB1dCBvZiBVVEMgb2Zmc2V0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0OiBmYWxzZSlcbiAqL1xuRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUuc2V0T3B0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IERhdGVGb3JtYXR0ZXIuREVGQVVMVF9PUFRJT05TXG5cbiAgdmFyIGN0eCA9IHRoaXNcbiAgT2JqZWN0LmtleXMoRGF0ZUZvcm1hdHRlci5ERUZBVUxUX09QVElPTlMpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICBjdHgub3B0c1trXSA9IG9wdHMuaGFzT3duUHJvcGVydHkoaykgP1xuICAgICAgb3B0c1trXSA6IERhdGVGb3JtYXR0ZXIuREVGQVVMVF9PUFRJT05TW2tdXG4gIH0pXG59XG5cbi8qKlxuICogQ29udmVydHMgYSBkYXRlIHRpbWUgc3RhbXAgZm9sbG93aW5nIHRoZSBJU084NjAxIGZvcm1hdCB0byBhIEphdmFTY3JpcHQgRGF0ZVxuICogb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0aW1lIC0gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRpbWVzdGFtcC5cbiAqIEByZXR1cm4ge0RhdGV9ICAgICAgIC0gRGF0ZSBvYmplY3QgZnJvbSB0aW1lc3RhbXAuXG4gKi9cbkRhdGVGb3JtYXR0ZXIucHJvdG90eXBlLmRlY29kZUlzbzg2MDEgPSBmdW5jdGlvbih0aW1lKSB7XG4gIHZhciBkYXRlUGFydHMgPSB0aW1lLnRvU3RyaW5nKCkubWF0Y2goRGF0ZUZvcm1hdHRlci5JU084NjAxKVxuICBpZiAoIWRhdGVQYXJ0cykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYSBJU084NjAxIGRhdGV0aW1lIGJ1dCBnb3QgXFwnJyArIHRpbWUgKyAnXFwnJylcbiAgfVxuXG4gIHZhciBkYXRlID0gW1xuICAgIFtkYXRlUGFydHNbMV0sIGRhdGVQYXJ0c1szXSB8fCAnMDEnLCBkYXRlUGFydHNbNV0gfHwgJzAxJ10uam9pbignLScpXG4gICAgLCAnVCdcbiAgICAsIFtcbiAgICAgICAgZGF0ZVBhcnRzWzddIHx8ICcwMCdcbiAgICAgICwgZGF0ZVBhcnRzWzExXSB8fCAnMDAnXG4gICAgICAsIGRhdGVQYXJ0c1sxNF0gfHwgJzAwJ1xuICAgICAgXS5qb2luKCc6JylcbiAgICAsICcuJ1xuICAgICwgZGF0ZVBhcnRzWzE2XSB8fCAnMDAwJ1xuICBdLmpvaW4oJycpXG5cbiAgZGF0ZSArPSAoZGF0ZVBhcnRzWzE3XSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgZGF0ZVBhcnRzWzE3XSArXG4gICAgICAoKGRhdGVQYXJ0c1sxOV0gJiYgZGF0ZVBhcnRzWzIwXSA9PT0gdW5kZWZpbmVkKSA/ICcwMCcgOiAnJykgOlxuICAgIERhdGVGb3JtYXR0ZXIuZm9ybWF0Q3VycmVudE9mZnNldChuZXcgRGF0ZShkYXRlKSlcblxuICByZXR1cm4gbmV3IERhdGUoZGF0ZSlcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIEphdmFTY3JpcHQgRGF0ZSBvYmplY3QgdG8gYW4gSVNPODYwMSB0aW1lc3RhbXAuXG4gKlxuICogQHBhcmFtIHtEYXRlfSBkYXRlIC0gRGF0ZSBvYmplY3QuXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgLSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGltZXN0YW1wLlxuICovXG5EYXRlRm9ybWF0dGVyLnByb3RvdHlwZS5lbmNvZGVJc284NjAxID0gZnVuY3Rpb24oZGF0ZSkge1xuICB2YXIgcGFydHMgPSB0aGlzLm9wdHMubG9jYWwgP1xuICAgIERhdGVGb3JtYXR0ZXIuZ2V0TG9jYWxEYXRlUGFydHMoZGF0ZSkgOlxuICAgIERhdGVGb3JtYXR0ZXIuZ2V0VVRDRGF0ZVBhcnRzKGRhdGUpXG5cbiAgcmV0dXJuIFtcbiAgICBbcGFydHNbMF0scGFydHNbMV0scGFydHNbMl1dLmpvaW4odGhpcy5vcHRzLmh5cGhlbnMgPyAnLScgOiAnJylcbiAgLCAnVCdcbiAgLCBbcGFydHNbM10scGFydHNbNF0scGFydHNbNV1dLmpvaW4odGhpcy5vcHRzLmNvbG9ucyA/ICc6JyA6ICcnKVxuICAsICh0aGlzLm9wdHMubXMpID8gJy4nICsgcGFydHNbNl0gOiAnJ1xuICAsICh0aGlzLm9wdHMubG9jYWwpID8gKCh0aGlzLm9wdHMub2Zmc2V0KSA/XG4gICAgICBEYXRlRm9ybWF0dGVyLmZvcm1hdEN1cnJlbnRPZmZzZXQoZGF0ZSkgOiAnJykgOiAnWidcbiAgXS5qb2luKCcnKVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgYW4gYXJyYXkgb2YgemVyby1wYWRkZWQgZGF0ZSBwYXJ0cyxcbiAqIGluIFVUQ1xuICpcbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSAtIERhdGUgT2JqZWN0XG4gKiBAcmV0dXJuIHtTdHJpbmdbXX1cbiAqL1xuRGF0ZUZvcm1hdHRlci5nZXRVVENEYXRlUGFydHMgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICByZXR1cm4gW1xuICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKVxuICAsIERhdGVGb3JtYXR0ZXIuemVyb1BhZChkYXRlLmdldFVUQ01vbnRoKCkrMSwyKVxuICAsIERhdGVGb3JtYXR0ZXIuemVyb1BhZChkYXRlLmdldFVUQ0RhdGUoKSwyKVxuICAsIERhdGVGb3JtYXR0ZXIuemVyb1BhZChkYXRlLmdldFVUQ0hvdXJzKCksIDIpXG4gICwgRGF0ZUZvcm1hdHRlci56ZXJvUGFkKGRhdGUuZ2V0VVRDTWludXRlcygpLCAyKVxuICAsIERhdGVGb3JtYXR0ZXIuemVyb1BhZChkYXRlLmdldFVUQ1NlY29uZHMoKSwgMilcbiAgLCBEYXRlRm9ybWF0dGVyLnplcm9QYWQoZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSwgMyldXG59XG5cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGFuIGFycmF5IG9mIHplcm8tcGFkZGVkIGRhdGUgcGFydHMsXG4gKiBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKlxuICogQHBhcmFtIHtEYXRlfSBkYXRlIC0gRGF0ZSBPYmplY3RcbiAqIEByZXR1cm4ge1N0cmluZ1tdfVxuICovXG5EYXRlRm9ybWF0dGVyLmdldExvY2FsRGF0ZVBhcnRzID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgcmV0dXJuIFtcbiAgICBkYXRlLmdldEZ1bGxZZWFyKClcbiAgLCBEYXRlRm9ybWF0dGVyLnplcm9QYWQoZGF0ZS5nZXRNb250aCgpKzEsMilcbiAgLCBEYXRlRm9ybWF0dGVyLnplcm9QYWQoZGF0ZS5nZXREYXRlKCksMilcbiAgLCBEYXRlRm9ybWF0dGVyLnplcm9QYWQoZGF0ZS5nZXRIb3VycygpLCAyKVxuICAsIERhdGVGb3JtYXR0ZXIuemVyb1BhZChkYXRlLmdldE1pbnV0ZXMoKSwgMilcbiAgLCBEYXRlRm9ybWF0dGVyLnplcm9QYWQoZGF0ZS5nZXRTZWNvbmRzKCksIDIpXG4gICwgRGF0ZUZvcm1hdHRlci56ZXJvUGFkKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksIDMpXVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBwYWQgdGhlIGRpZ2l0cyB3aXRoIDBzIHRvIG1lZXQgZGF0ZSBmb3JtYXR0aW5nXG4gKiByZXF1aXJlbWVudHMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0ICAtIFRoZSBudW1iZXIgdG8gcGFkLlxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIExlbmd0aCBvZiBkaWdpdCBzdHJpbmcsIHByZWZpeCB3aXRoIDBzIGlmIG5vdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHkgbGVuZ3RoLlxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAtIFN0cmluZyB3aXRoIHRoZSBwYWRkZWQgZGlnaXRcbiAqL1xuRGF0ZUZvcm1hdHRlci56ZXJvUGFkID0gZnVuY3Rpb24gKGRpZ2l0LCBsZW5ndGgpIHtcbiAgdmFyIHBhZGRlZCA9ICcnICsgZGlnaXRcbiAgd2hpbGUgKHBhZGRlZC5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICBwYWRkZWQgPSAnMCcgKyBwYWRkZWRcbiAgfVxuXG4gIHJldHVybiBwYWRkZWRcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBjdXJyZW50IHRpbWV6b25lIHRvIGRlZmF1bHQgZGVjb2RpbmcgdG9cbiAqIHJhdGhlciB0aGFuIFVUQy4gKGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gLSBpbiB0aGUgZm9ybWF0IC9afFsrLV1cXGR7Mn06XFxkezJ9L1xuICovXG5EYXRlRm9ybWF0dGVyLmZvcm1hdEN1cnJlbnRPZmZzZXQgPSBmdW5jdGlvbiAoZCkge1xuICB2YXIgb2Zmc2V0ID0gKGQgfHwgbmV3IERhdGUoKSkuZ2V0VGltZXpvbmVPZmZzZXQoKVxuICByZXR1cm4gKG9mZnNldCA9PT0gMCkgPyAnWicgOiBbXG4gICAgICAob2Zmc2V0IDwgMCkgPyAnKycgOiAnLSdcbiAgICAsIERhdGVGb3JtYXR0ZXIuemVyb1BhZChNYXRoLmFicyhNYXRoLmZsb29yKG9mZnNldC82MCkpLDIpXG4gICAgLCAnOidcbiAgICAsIERhdGVGb3JtYXR0ZXIuemVyb1BhZChNYXRoLmFicyhvZmZzZXQlNjApLDIpXG4gIF0uam9pbignJylcbn1cblxuLy8gZXhwb3J0IGFuIGluc3RhbmNlIG9mIERhdGVGb3JtYXR0ZXIgb25seS5cbm1vZHVsZS5leHBvcnRzID0gbmV3IERhdGVGb3JtYXR0ZXIoKVxuIiwgInZhciBDdXN0b21UeXBlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyYXcpIHtcbiAgdGhpcy5yYXcgPSByYXdcbn1cblxuQ3VzdG9tVHlwZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24oeG1sKSB7XG4gIHJldHVybiB4bWwuZWxlKHRoaXMudGFnTmFtZSkudHh0KHRoaXMucmF3KVxufVxuXG5DdXN0b21UeXBlLnByb3RvdHlwZS50YWdOYW1lID0gJ2N1c3RvbVR5cGUnXG5cbiIsICJ2YXIgeG1sQnVpbGRlciAgICA9IHJlcXVpcmUoJ3htbGJ1aWxkZXInKVxuICAsIGRhdGVGb3JtYXR0ZXIgPSByZXF1aXJlKCcuL2RhdGVfZm9ybWF0dGVyJylcbiAgLCBDdXN0b21UeXBlICAgID0gcmVxdWlyZSgnLi9jdXN0b210eXBlJylcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYTUwgZm9yIGFuIFhNTC1SUEMgbWV0aG9kIGNhbGwuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCAgICAgLSBUaGUgbWV0aG9kIG5hbWUuXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMgICAgICAtIFBhcmFtcyB0byBwYXNzIGluIHRoZSBjYWxsLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiAoZXJyb3IsIHhtbCkgeyAuLi4gfVxuICogICAtIHtPYmplY3R8bnVsbH0gZXJyb3IgICAgLSBBbnkgZXJyb3JzIHRoYXQgb2NjdXJyZWQgd2hpbGUgYnVpbGRpbmcgdGhlIFhNTCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIG51bGwuXG4gKiAgIC0ge1N0cmluZ30geG1sICAgICAgICAgICAtIFRoZSBtZXRob2QgY2FsbCBYTUwuXG4gKi9cbmV4cG9ydHMuc2VyaWFsaXplTWV0aG9kQ2FsbCA9IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zLCBlbmNvZGluZykge1xuICB2YXIgcGFyYW1zID0gcGFyYW1zIHx8IFtdXG5cbiAgdmFyIG9wdGlvbnMgPSB7IHZlcnNpb246ICcxLjAnLCBhbGxvd1N1cnJvZ2F0ZUNoYXJzOiB0cnVlIH1cblxuICBpZiAoZW5jb2RpbmcpIHtcbiAgICBvcHRpb25zLmVuY29kaW5nID0gZW5jb2RpbmdcbiAgfVxuXG4gIHZhciB4bWwgPSB4bWxCdWlsZGVyLmNyZWF0ZSgnbWV0aG9kQ2FsbCcsIG9wdGlvbnMpXG4gICAgLmVsZSgnbWV0aG9kTmFtZScpXG4gICAgICAudHh0KG1ldGhvZClcbiAgICAudXAoKVxuICAgIC5lbGUoJ3BhcmFtcycpXG5cbiAgcGFyYW1zLmZvckVhY2goZnVuY3Rpb24ocGFyYW0pIHtcbiAgICBzZXJpYWxpemVWYWx1ZShwYXJhbSwgeG1sLmVsZSgncGFyYW0nKSlcbiAgfSlcblxuICAvLyBJbmNsdWRlcyB0aGUgPD94bWwgLi4uPiBkZWNsYXJhdGlvblxuICByZXR1cm4geG1sLmRvYygpLnRvU3RyaW5nKClcbn1cblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYTUwgZm9yIGFuIFhNTC1SUEMgbWV0aG9kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7bWl4ZWR9IHZhbHVlICAgICAgIC0gVGhlIHZhbHVlIHRvIHBhc3MgaW4gdGhlIHJlc3BvbnNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiAoZXJyb3IsIHhtbCkgeyAuLi4gfVxuICogICAtIHtPYmplY3R8bnVsbH0gZXJyb3IgICAgLSBBbnkgZXJyb3JzIHRoYXQgb2NjdXJyZWQgd2hpbGUgYnVpbGRpbmcgdGhlIFhNTCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIG51bGwuXG4gKiAgIC0ge1N0cmluZ30geG1sICAgICAgICAgICAtIFRoZSBtZXRob2QgcmVzcG9uc2UgWE1MLlxuICovXG5leHBvcnRzLnNlcmlhbGl6ZU1ldGhvZFJlc3BvbnNlID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gIHZhciB4bWwgPSB4bWxCdWlsZGVyLmNyZWF0ZSgnbWV0aG9kUmVzcG9uc2UnLCB7IHZlcnNpb246ICcxLjAnLCBhbGxvd1N1cnJvZ2F0ZUNoYXJzOiB0cnVlIH0pXG4gICAgLmVsZSgncGFyYW1zJylcbiAgICAgIC5lbGUoJ3BhcmFtJylcblxuICBzZXJpYWxpemVWYWx1ZShyZXN1bHQsIHhtbClcblxuICAvLyBJbmNsdWRlcyB0aGUgPD94bWwgLi4uPiBkZWNsYXJhdGlvblxuICByZXR1cm4geG1sLmRvYygpLnRvU3RyaW5nKClcbn1cblxuZXhwb3J0cy5zZXJpYWxpemVGYXVsdCA9IGZ1bmN0aW9uKGZhdWx0KSB7XG4gIHZhciB4bWwgPSB4bWxCdWlsZGVyLmNyZWF0ZSgnbWV0aG9kUmVzcG9uc2UnLCB7IHZlcnNpb246ICcxLjAnLCBhbGxvd1N1cnJvZ2F0ZUNoYXJzOiB0cnVlIH0pXG4gICAgLmVsZSgnZmF1bHQnKVxuXG4gIHNlcmlhbGl6ZVZhbHVlKGZhdWx0LCB4bWwpXG5cbiAgLy8gSW5jbHVkZXMgdGhlIDw/eG1sIC4uLj4gZGVjbGFyYXRpb25cbiAgcmV0dXJuIHhtbC5kb2MoKS50b1N0cmluZygpXG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVZhbHVlKHZhbHVlLCB4bWwpIHtcbiAgdmFyIHN0YWNrICAgICA9IFsgeyB2YWx1ZTogdmFsdWUsIHhtbDogeG1sIH0gXVxuICAgICwgY3VycmVudCAgID0gbnVsbFxuICAgICwgdmFsdWVOb2RlID0gbnVsbFxuICAgICwgbmV4dCAgICAgID0gbnVsbFxuXG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgY3VycmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdXG5cbiAgICBpZiAoY3VycmVudC5pbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJdGVyYXRpbmcgYSBjb21wb3VuZFxuICAgICAgbmV4dCA9IGdldE5leHRJdGVtc0ZyYW1lKGN1cnJlbnQpXG4gICAgICBpZiAobmV4dCkge1xuICAgICAgICBzdGFjay5wdXNoKG5leHQpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhY2sucG9wKClcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyB3ZSdyZSBhYm91dCB0byBhZGQgYSBuZXcgdmFsdWUgKGNvbXBvdW5kIG9yIHNpbXBsZSlcbiAgICAgIHZhbHVlTm9kZSA9IGN1cnJlbnQueG1sLmVsZSgndmFsdWUnKVxuICAgICAgc3dpdGNoKHR5cGVvZiBjdXJyZW50LnZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgIGFwcGVuZEJvb2xlYW4oY3VycmVudC52YWx1ZSwgdmFsdWVOb2RlKVxuICAgICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBhcHBlbmRTdHJpbmcoY3VycmVudC52YWx1ZSwgdmFsdWVOb2RlKVxuICAgICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICBhcHBlbmROdW1iZXIoY3VycmVudC52YWx1ZSwgdmFsdWVOb2RlKVxuICAgICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBpZiAoY3VycmVudC52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVOb2RlLmVsZSgnbmlsJylcbiAgICAgICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnQudmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBhcHBlbmREYXRldGltZShjdXJyZW50LnZhbHVlLCB2YWx1ZU5vZGUpXG4gICAgICAgICAgICBzdGFjay5wb3AoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoY3VycmVudC52YWx1ZSkpIHtcbiAgICAgICAgICAgIGFwcGVuZEJ1ZmZlcihjdXJyZW50LnZhbHVlLCB2YWx1ZU5vZGUpXG4gICAgICAgICAgICBzdGFjay5wb3AoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChjdXJyZW50LnZhbHVlIGluc3RhbmNlb2YgQ3VzdG9tVHlwZSkge1xuICAgICAgICAgICAgY3VycmVudC52YWx1ZS5zZXJpYWxpemUodmFsdWVOb2RlKVxuICAgICAgICAgICAgc3RhY2sucG9wKClcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50LnZhbHVlKSkge1xuICAgICAgICAgICAgICBjdXJyZW50LnhtbCA9IHZhbHVlTm9kZS5lbGUoJ2FycmF5JykuZWxlKCdkYXRhJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBjdXJyZW50LnhtbCA9IHZhbHVlTm9kZS5lbGUoJ3N0cnVjdCcpXG4gICAgICAgICAgICAgIGN1cnJlbnQua2V5cyA9IE9iamVjdC5rZXlzKGN1cnJlbnQudmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50LmluZGV4ID0gMFxuICAgICAgICAgICAgbmV4dCA9IGdldE5leHRJdGVtc0ZyYW1lKGN1cnJlbnQpXG4gICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICBzdGFjay5wdXNoKG5leHQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgc3RhY2sucG9wKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzdGFjay5wb3AoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldE5leHRJdGVtc0ZyYW1lKGZyYW1lKSB7XG4gIHZhciBuZXh0RnJhbWUgPSBudWxsXG5cbiAgaWYgKGZyYW1lLmtleXMpIHtcbiAgICBpZiAoZnJhbWUuaW5kZXggPCBmcmFtZS5rZXlzLmxlbmd0aCkge1xuICAgICAgdmFyIGtleSAgICA9IGZyYW1lLmtleXNbZnJhbWUuaW5kZXgrK11cbiAgICAgICAgLCBtZW1iZXIgPSBmcmFtZS54bWwuZWxlKCdtZW1iZXInKS5lbGUoJ25hbWUnKS50ZXh0KGtleSkudXAoKVxuICAgICAgbmV4dEZyYW1lID0ge1xuICAgICAgICB2YWx1ZTogZnJhbWUudmFsdWVba2V5XVxuICAgICAgLCB4bWw6IG1lbWJlclxuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIGlmIChmcmFtZS5pbmRleCA8IGZyYW1lLnZhbHVlLmxlbmd0aCkge1xuICAgIG5leHRGcmFtZSA9IHtcbiAgICAgIHZhbHVlOiBmcmFtZS52YWx1ZVtmcmFtZS5pbmRleF1cbiAgICAsIHhtbDogZnJhbWUueG1sXG4gICAgfVxuICAgIGZyYW1lLmluZGV4KytcbiAgfVxuXG4gIHJldHVybiBuZXh0RnJhbWVcbn1cblxuZnVuY3Rpb24gYXBwZW5kQm9vbGVhbih2YWx1ZSwgeG1sKSB7XG4gIHhtbC5lbGUoJ2Jvb2xlYW4nKS50eHQodmFsdWUgPyAxIDogMClcbn1cblxudmFyIGlsbGVnYWxDaGFycyA9IC9eKD8hW148Jl0qXV0+W148Jl0qKVtePCZdKiQvXG5mdW5jdGlvbiBhcHBlbmRTdHJpbmcodmFsdWUsIHhtbCkge1xuICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgeG1sLmVsZSgnc3RyaW5nJylcbiAgfVxuICBlbHNlIGlmICghaWxsZWdhbENoYXJzLnRlc3QodmFsdWUpKSB7XG4gICAgeG1sLmVsZSgnc3RyaW5nJykuZCh2YWx1ZSlcbiAgfVxuICBlbHNlIHtcbiAgICB4bWwuZWxlKCdzdHJpbmcnKS50eHQodmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwZW5kTnVtYmVyKHZhbHVlLCB4bWwpIHtcbiAgaWYgKHZhbHVlICUgMSA9PSAwKSB7XG4gICAgeG1sLmVsZSgnaW50JykudHh0KHZhbHVlKVxuICB9XG4gIGVsc2Uge1xuICAgIHhtbC5lbGUoJ2RvdWJsZScpLnR4dCh2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBlbmREYXRldGltZSh2YWx1ZSwgeG1sKSB7XG4gIHhtbC5lbGUoJ2RhdGVUaW1lLmlzbzg2MDEnKS50eHQoZGF0ZUZvcm1hdHRlci5lbmNvZGVJc284NjAxKHZhbHVlKSlcbn1cblxuZnVuY3Rpb24gYXBwZW5kQnVmZmVyKHZhbHVlLCB4bWwpIHtcbiAgeG1sLmVsZSgnYmFzZTY0JykudHh0KHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSlcbn1cbiIsICI7KGZ1bmN0aW9uIChzYXgpIHsgLy8gd3JhcHBlciBmb3Igbm9uLW5vZGUgZW52c1xuICBzYXgucGFyc2VyID0gZnVuY3Rpb24gKHN0cmljdCwgb3B0KSB7IHJldHVybiBuZXcgU0FYUGFyc2VyKHN0cmljdCwgb3B0KSB9XG4gIHNheC5TQVhQYXJzZXIgPSBTQVhQYXJzZXJcbiAgc2F4LlNBWFN0cmVhbSA9IFNBWFN0cmVhbVxuICBzYXguY3JlYXRlU3RyZWFtID0gY3JlYXRlU3RyZWFtXG5cbiAgLy8gV2hlbiB3ZSBwYXNzIHRoZSBNQVhfQlVGRkVSX0xFTkdUSCBwb3NpdGlvbiwgc3RhcnQgY2hlY2tpbmcgZm9yIGJ1ZmZlciBvdmVycnVucy5cbiAgLy8gV2hlbiB3ZSBjaGVjaywgc2NoZWR1bGUgdGhlIG5leHQgY2hlY2sgZm9yIE1BWF9CVUZGRVJfTEVOR1RIIC0gKG1heChidWZmZXIgbGVuZ3RocykpLFxuICAvLyBzaW5jZSB0aGF0J3MgdGhlIGVhcmxpZXN0IHRoYXQgYSBidWZmZXIgb3ZlcnJ1biBjb3VsZCBvY2N1ci4gIFRoaXMgd2F5LCBjaGVja3MgYXJlXG4gIC8vIGFzIHJhcmUgYXMgcmVxdWlyZWQsIGJ1dCBhcyBvZnRlbiBhcyBuZWNlc3NhcnkgdG8gZW5zdXJlIG5ldmVyIGNyb3NzaW5nIHRoaXMgYm91bmQuXG4gIC8vIEZ1cnRoZXJtb3JlLCBidWZmZXJzIGFyZSBvbmx5IHRlc3RlZCBhdCBtb3N0IG9uY2UgcGVyIHdyaXRlKCksIHNvIHBhc3NpbmcgYSB2ZXJ5XG4gIC8vIGxhcmdlIHN0cmluZyBpbnRvIHdyaXRlKCkgbWlnaHQgaGF2ZSB1bmRlc2lyYWJsZSBlZmZlY3RzLCBidXQgdGhpcyBpcyBtYW5hZ2VhYmxlIGJ5XG4gIC8vIHRoZSBjYWxsZXIsIHNvIGl0IGlzIGFzc3VtZWQgdG8gYmUgc2FmZS4gIFRodXMsIGEgY2FsbCB0byB3cml0ZSgpIG1heSwgaW4gdGhlIGV4dHJlbWVcbiAgLy8gZWRnZSBjYXNlLCByZXN1bHQgaW4gY3JlYXRpbmcgYXQgbW9zdCBvbmUgY29tcGxldGUgY29weSBvZiB0aGUgc3RyaW5nIHBhc3NlZCBpbi5cbiAgLy8gU2V0IHRvIEluZmluaXR5IHRvIGhhdmUgdW5saW1pdGVkIGJ1ZmZlcnMuXG4gIHNheC5NQVhfQlVGRkVSX0xFTkdUSCA9IDY0ICogMTAyNFxuXG4gIHZhciBidWZmZXJzID0gW1xuICAgICdjb21tZW50JywgJ3NnbWxEZWNsJywgJ3RleHROb2RlJywgJ3RhZ05hbWUnLCAnZG9jdHlwZScsXG4gICAgJ3Byb2NJbnN0TmFtZScsICdwcm9jSW5zdEJvZHknLCAnZW50aXR5JywgJ2F0dHJpYk5hbWUnLFxuICAgICdhdHRyaWJWYWx1ZScsICdjZGF0YScsICdzY3JpcHQnXG4gIF1cblxuICBzYXguRVZFTlRTID0gW1xuICAgICd0ZXh0JyxcbiAgICAncHJvY2Vzc2luZ2luc3RydWN0aW9uJyxcbiAgICAnc2dtbGRlY2xhcmF0aW9uJyxcbiAgICAnZG9jdHlwZScsXG4gICAgJ2NvbW1lbnQnLFxuICAgICdvcGVudGFnc3RhcnQnLFxuICAgICdhdHRyaWJ1dGUnLFxuICAgICdvcGVudGFnJyxcbiAgICAnY2xvc2V0YWcnLFxuICAgICdvcGVuY2RhdGEnLFxuICAgICdjZGF0YScsXG4gICAgJ2Nsb3NlY2RhdGEnLFxuICAgICdlcnJvcicsXG4gICAgJ2VuZCcsXG4gICAgJ3JlYWR5JyxcbiAgICAnc2NyaXB0JyxcbiAgICAnb3Blbm5hbWVzcGFjZScsXG4gICAgJ2Nsb3NlbmFtZXNwYWNlJ1xuICBdXG5cbiAgZnVuY3Rpb24gU0FYUGFyc2VyIChzdHJpY3QsIG9wdCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTQVhQYXJzZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IFNBWFBhcnNlcihzdHJpY3QsIG9wdClcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VyID0gdGhpc1xuICAgIGNsZWFyQnVmZmVycyhwYXJzZXIpXG4gICAgcGFyc2VyLnEgPSBwYXJzZXIuYyA9ICcnXG4gICAgcGFyc2VyLmJ1ZmZlckNoZWNrUG9zaXRpb24gPSBzYXguTUFYX0JVRkZFUl9MRU5HVEhcbiAgICBwYXJzZXIub3B0ID0gb3B0IHx8IHt9XG4gICAgcGFyc2VyLm9wdC5sb3dlcmNhc2UgPSBwYXJzZXIub3B0Lmxvd2VyY2FzZSB8fCBwYXJzZXIub3B0Lmxvd2VyY2FzZXRhZ3NcbiAgICBwYXJzZXIubG9vc2VDYXNlID0gcGFyc2VyLm9wdC5sb3dlcmNhc2UgPyAndG9Mb3dlckNhc2UnIDogJ3RvVXBwZXJDYXNlJ1xuICAgIHBhcnNlci50YWdzID0gW11cbiAgICBwYXJzZXIuY2xvc2VkID0gcGFyc2VyLmNsb3NlZFJvb3QgPSBwYXJzZXIuc2F3Um9vdCA9IGZhbHNlXG4gICAgcGFyc2VyLnRhZyA9IHBhcnNlci5lcnJvciA9IG51bGxcbiAgICBwYXJzZXIuc3RyaWN0ID0gISFzdHJpY3RcbiAgICBwYXJzZXIubm9zY3JpcHQgPSAhIShzdHJpY3QgfHwgcGFyc2VyLm9wdC5ub3NjcmlwdClcbiAgICBwYXJzZXIuc3RhdGUgPSBTLkJFR0lOXG4gICAgcGFyc2VyLnN0cmljdEVudGl0aWVzID0gcGFyc2VyLm9wdC5zdHJpY3RFbnRpdGllc1xuICAgIHBhcnNlci5FTlRJVElFUyA9IHBhcnNlci5zdHJpY3RFbnRpdGllcyA/IE9iamVjdC5jcmVhdGUoc2F4LlhNTF9FTlRJVElFUykgOiBPYmplY3QuY3JlYXRlKHNheC5FTlRJVElFUylcbiAgICBwYXJzZXIuYXR0cmliTGlzdCA9IFtdXG5cbiAgICAvLyBuYW1lc3BhY2VzIGZvcm0gYSBwcm90b3R5cGUgY2hhaW4uXG4gICAgLy8gaXQgYWx3YXlzIHBvaW50cyBhdCB0aGUgY3VycmVudCB0YWcsXG4gICAgLy8gd2hpY2ggcHJvdG9zIHRvIGl0cyBwYXJlbnQgdGFnLlxuICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICBwYXJzZXIubnMgPSBPYmplY3QuY3JlYXRlKHJvb3ROUylcbiAgICB9XG5cbiAgICAvLyBtb3N0bHkganVzdCBmb3IgZXJyb3IgcmVwb3J0aW5nXG4gICAgcGFyc2VyLnRyYWNrUG9zaXRpb24gPSBwYXJzZXIub3B0LnBvc2l0aW9uICE9PSBmYWxzZVxuICAgIGlmIChwYXJzZXIudHJhY2tQb3NpdGlvbikge1xuICAgICAgcGFyc2VyLnBvc2l0aW9uID0gcGFyc2VyLmxpbmUgPSBwYXJzZXIuY29sdW1uID0gMFxuICAgIH1cbiAgICBlbWl0KHBhcnNlciwgJ29ucmVhZHknKVxuICB9XG5cbiAgaWYgKCFPYmplY3QuY3JlYXRlKSB7XG4gICAgT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICBmdW5jdGlvbiBGICgpIHt9XG4gICAgICBGLnByb3RvdHlwZSA9IG9cbiAgICAgIHZhciBuZXdmID0gbmV3IEYoKVxuICAgICAgcmV0dXJuIG5ld2ZcbiAgICB9XG4gIH1cblxuICBpZiAoIU9iamVjdC5rZXlzKSB7XG4gICAgT2JqZWN0LmtleXMgPSBmdW5jdGlvbiAobykge1xuICAgICAgdmFyIGEgPSBbXVxuICAgICAgZm9yICh2YXIgaSBpbiBvKSBpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkgYS5wdXNoKGkpXG4gICAgICByZXR1cm4gYVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrQnVmZmVyTGVuZ3RoIChwYXJzZXIpIHtcbiAgICB2YXIgbWF4QWxsb3dlZCA9IE1hdGgubWF4KHNheC5NQVhfQlVGRkVSX0xFTkdUSCwgMTApXG4gICAgdmFyIG1heEFjdHVhbCA9IDBcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJ1ZmZlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgbGVuID0gcGFyc2VyW2J1ZmZlcnNbaV1dLmxlbmd0aFxuICAgICAgaWYgKGxlbiA+IG1heEFsbG93ZWQpIHtcbiAgICAgICAgLy8gVGV4dC9jZGF0YSBub2RlcyBjYW4gZ2V0IGJpZywgYW5kIHNpbmNlIHRoZXkncmUgYnVmZmVyZWQsXG4gICAgICAgIC8vIHdlIGNhbiBnZXQgaGVyZSB1bmRlciBub3JtYWwgY29uZGl0aW9ucy5cbiAgICAgICAgLy8gQXZvaWQgaXNzdWVzIGJ5IGVtaXR0aW5nIHRoZSB0ZXh0IG5vZGUgbm93LFxuICAgICAgICAvLyBzbyBhdCBsZWFzdCBpdCB3b24ndCBnZXQgYW55IGJpZ2dlci5cbiAgICAgICAgc3dpdGNoIChidWZmZXJzW2ldKSB7XG4gICAgICAgICAgY2FzZSAndGV4dE5vZGUnOlxuICAgICAgICAgICAgY2xvc2VUZXh0KHBhcnNlcilcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdjZGF0YSc6XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNkYXRhJywgcGFyc2VyLmNkYXRhKVxuICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdzY3JpcHQnOlxuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25zY3JpcHQnLCBwYXJzZXIuc2NyaXB0KVxuICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCA9ICcnXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGVycm9yKHBhcnNlciwgJ01heCBidWZmZXIgbGVuZ3RoIGV4Y2VlZGVkOiAnICsgYnVmZmVyc1tpXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbWF4QWN0dWFsID0gTWF0aC5tYXgobWF4QWN0dWFsLCBsZW4pXG4gICAgfVxuICAgIC8vIHNjaGVkdWxlIHRoZSBuZXh0IGNoZWNrIGZvciB0aGUgZWFybGllc3QgcG9zc2libGUgYnVmZmVyIG92ZXJydW4uXG4gICAgdmFyIG0gPSBzYXguTUFYX0JVRkZFUl9MRU5HVEggLSBtYXhBY3R1YWxcbiAgICBwYXJzZXIuYnVmZmVyQ2hlY2tQb3NpdGlvbiA9IG0gKyBwYXJzZXIucG9zaXRpb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyQnVmZmVycyAocGFyc2VyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBidWZmZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyc2VyW2J1ZmZlcnNbaV1dID0gJydcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaEJ1ZmZlcnMgKHBhcnNlcikge1xuICAgIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgaWYgKHBhcnNlci5jZGF0YSAhPT0gJycpIHtcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2RhdGEnLCBwYXJzZXIuY2RhdGEpXG4gICAgICBwYXJzZXIuY2RhdGEgPSAnJ1xuICAgIH1cbiAgICBpZiAocGFyc2VyLnNjcmlwdCAhPT0gJycpIHtcbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2NyaXB0JywgcGFyc2VyLnNjcmlwdClcbiAgICAgIHBhcnNlci5zY3JpcHQgPSAnJ1xuICAgIH1cbiAgfVxuXG4gIFNBWFBhcnNlci5wcm90b3R5cGUgPSB7XG4gICAgZW5kOiBmdW5jdGlvbiAoKSB7IGVuZCh0aGlzKSB9LFxuICAgIHdyaXRlOiB3cml0ZSxcbiAgICByZXN1bWU6IGZ1bmN0aW9uICgpIHsgdGhpcy5lcnJvciA9IG51bGw7IHJldHVybiB0aGlzIH0sXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMud3JpdGUobnVsbCkgfSxcbiAgICBmbHVzaDogZnVuY3Rpb24gKCkgeyBmbHVzaEJ1ZmZlcnModGhpcykgfVxuICB9XG5cbiAgdmFyIFN0cmVhbVxuICB0cnkge1xuICAgIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLlN0cmVhbVxuICB9IGNhdGNoIChleCkge1xuICAgIFN0cmVhbSA9IGZ1bmN0aW9uICgpIHt9XG4gIH1cblxuICB2YXIgc3RyZWFtV3JhcHMgPSBzYXguRVZFTlRTLmZpbHRlcihmdW5jdGlvbiAoZXYpIHtcbiAgICByZXR1cm4gZXYgIT09ICdlcnJvcicgJiYgZXYgIT09ICdlbmQnXG4gIH0pXG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyZWFtIChzdHJpY3QsIG9wdCkge1xuICAgIHJldHVybiBuZXcgU0FYU3RyZWFtKHN0cmljdCwgb3B0KVxuICB9XG5cbiAgZnVuY3Rpb24gU0FYU3RyZWFtIChzdHJpY3QsIG9wdCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTQVhTdHJlYW0pKSB7XG4gICAgICByZXR1cm4gbmV3IFNBWFN0cmVhbShzdHJpY3QsIG9wdClcbiAgICB9XG5cbiAgICBTdHJlYW0uYXBwbHkodGhpcylcblxuICAgIHRoaXMuX3BhcnNlciA9IG5ldyBTQVhQYXJzZXIoc3RyaWN0LCBvcHQpXG4gICAgdGhpcy53cml0YWJsZSA9IHRydWVcbiAgICB0aGlzLnJlYWRhYmxlID0gdHJ1ZVxuXG4gICAgdmFyIG1lID0gdGhpc1xuXG4gICAgdGhpcy5fcGFyc2VyLm9uZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgbWUuZW1pdCgnZW5kJylcbiAgICB9XG5cbiAgICB0aGlzLl9wYXJzZXIub25lcnJvciA9IGZ1bmN0aW9uIChlcikge1xuICAgICAgbWUuZW1pdCgnZXJyb3InLCBlcilcblxuICAgICAgLy8gaWYgZGlkbid0IHRocm93LCB0aGVuIG1lYW5zIGVycm9yIHdhcyBoYW5kbGVkLlxuICAgICAgLy8gZ28gYWhlYWQgYW5kIGNsZWFyIGVycm9yLCBzbyB3ZSBjYW4gd3JpdGUgYWdhaW4uXG4gICAgICBtZS5fcGFyc2VyLmVycm9yID0gbnVsbFxuICAgIH1cblxuICAgIHRoaXMuX2RlY29kZXIgPSBudWxsXG5cbiAgICBzdHJlYW1XcmFwcy5mb3JFYWNoKGZ1bmN0aW9uIChldikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1lLCAnb24nICsgZXYsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG1lLl9wYXJzZXJbJ29uJyArIGV2XVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChoKSB7XG4gICAgICAgICAgaWYgKCFoKSB7XG4gICAgICAgICAgICBtZS5yZW1vdmVBbGxMaXN0ZW5lcnMoZXYpXG4gICAgICAgICAgICBtZS5fcGFyc2VyWydvbicgKyBldl0gPSBoXG4gICAgICAgICAgICByZXR1cm4gaFxuICAgICAgICAgIH1cbiAgICAgICAgICBtZS5vbihldiwgaClcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgU0FYU3RyZWFtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3RyZWFtLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogU0FYU3RyZWFtXG4gICAgfVxuICB9KVxuXG4gIFNBWFN0cmVhbS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICBCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGlmICghdGhpcy5fZGVjb2Rlcikge1xuICAgICAgICB2YXIgU0QgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbiAgICAgICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTRCgndXRmOCcpXG4gICAgICB9XG4gICAgICBkYXRhID0gdGhpcy5fZGVjb2Rlci53cml0ZShkYXRhKVxuICAgIH1cblxuICAgIHRoaXMuX3BhcnNlci53cml0ZShkYXRhLnRvU3RyaW5nKCkpXG4gICAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSlcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgU0FYU3RyZWFtLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICB0aGlzLndyaXRlKGNodW5rKVxuICAgIH1cbiAgICB0aGlzLl9wYXJzZXIuZW5kKClcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgU0FYU3RyZWFtLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgaGFuZGxlcikge1xuICAgIHZhciBtZSA9IHRoaXNcbiAgICBpZiAoIW1lLl9wYXJzZXJbJ29uJyArIGV2XSAmJiBzdHJlYW1XcmFwcy5pbmRleE9mKGV2KSAhPT0gLTEpIHtcbiAgICAgIG1lLl9wYXJzZXJbJ29uJyArIGV2XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gW2FyZ3VtZW50c1swXV0gOiBBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgICAgIGFyZ3Muc3BsaWNlKDAsIDAsIGV2KVxuICAgICAgICBtZS5lbWl0LmFwcGx5KG1lLCBhcmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwobWUsIGV2LCBoYW5kbGVyKVxuICB9XG5cbiAgLy8gdGhpcyByZWFsbHkgbmVlZHMgdG8gYmUgcmVwbGFjZWQgd2l0aCBjaGFyYWN0ZXIgY2xhc3Nlcy5cbiAgLy8gWE1MIGFsbG93cyBhbGwgbWFubmVyIG9mIHJpZGljdWxvdXMgbnVtYmVycyBhbmQgZGlnaXRzLlxuICB2YXIgQ0RBVEEgPSAnW0NEQVRBWydcbiAgdmFyIERPQ1RZUEUgPSAnRE9DVFlQRSdcbiAgdmFyIFhNTF9OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xuICB2YXIgWE1MTlNfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvJ1xuICB2YXIgcm9vdE5TID0geyB4bWw6IFhNTF9OQU1FU1BBQ0UsIHhtbG5zOiBYTUxOU19OQU1FU1BBQ0UgfVxuXG4gIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVTdGFydENoYXJcbiAgLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiB3b3JrcyBvbiBzdHJpbmdzLCBhIHNpbmdsZSBjaGFyYWN0ZXIgYXQgYSB0aW1lXG4gIC8vIGFzIHN1Y2gsIGl0IGNhbm5vdCBldmVyIHN1cHBvcnQgYXN0cmFsLXBsYW5lIGNoYXJhY3RlcnMgKDEwMDAwLUVGRkZGKVxuICAvLyB3aXRob3V0IGEgc2lnbmlmaWNhbnQgYnJlYWtpbmcgY2hhbmdlIHRvIGVpdGhlciB0aGlzICBwYXJzZXIsIG9yIHRoZVxuICAvLyBKYXZhU2NyaXB0IGxhbmd1YWdlLiAgSW1wbGVtZW50YXRpb24gb2YgYW4gZW1vamktY2FwYWJsZSB4bWwgcGFyc2VyXG4gIC8vIGlzIGxlZnQgYXMgYW4gZXhlcmNpc2UgZm9yIHRoZSByZWFkZXIuXG4gIHZhciBuYW1lU3RhcnQgPSAvWzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXS9cblxuICB2YXIgbmFtZUJvZHkgPSAvWzpfQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MC5cXGQtXS9cblxuICB2YXIgZW50aXR5U3RhcnQgPSAvWyM6X0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF0vXG4gIHZhciBlbnRpdHlCb2R5ID0gL1sjOl9BLVphLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwLlxcZC1dL1xuXG4gIGZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAoYykge1xuICAgIHJldHVybiBjID09PSAnICcgfHwgYyA9PT0gJ1xcbicgfHwgYyA9PT0gJ1xccicgfHwgYyA9PT0gJ1xcdCdcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUXVvdGUgKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gJ1wiJyB8fCBjID09PSAnXFwnJ1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBdHRyaWJFbmQgKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gJz4nIHx8IGlzV2hpdGVzcGFjZShjKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNNYXRjaCAocmVnZXgsIGMpIHtcbiAgICByZXR1cm4gcmVnZXgudGVzdChjKVxuICB9XG5cbiAgZnVuY3Rpb24gbm90TWF0Y2ggKHJlZ2V4LCBjKSB7XG4gICAgcmV0dXJuICFpc01hdGNoKHJlZ2V4LCBjKVxuICB9XG5cbiAgdmFyIFMgPSAwXG4gIHNheC5TVEFURSA9IHtcbiAgICBCRUdJTjogUysrLCAvLyBsZWFkaW5nIGJ5dGUgb3JkZXIgbWFyayBvciB3aGl0ZXNwYWNlXG4gICAgQkVHSU5fV0hJVEVTUEFDRTogUysrLCAvLyBsZWFkaW5nIHdoaXRlc3BhY2VcbiAgICBURVhUOiBTKyssIC8vIGdlbmVyYWwgc3R1ZmZcbiAgICBURVhUX0VOVElUWTogUysrLCAvLyAmYW1wIGFuZCBzdWNoLlxuICAgIE9QRU5fV0FLQTogUysrLCAvLyA8XG4gICAgU0dNTF9ERUNMOiBTKyssIC8vIDwhQkxBUkdcbiAgICBTR01MX0RFQ0xfUVVPVEVEOiBTKyssIC8vIDwhQkxBUkcgZm9vIFwiYmFyXG4gICAgRE9DVFlQRTogUysrLCAvLyA8IURPQ1RZUEVcbiAgICBET0NUWVBFX1FVT1RFRDogUysrLCAvLyA8IURPQ1RZUEUgXCIvL2JsYWhcbiAgICBET0NUWVBFX0RURDogUysrLCAvLyA8IURPQ1RZUEUgXCIvL2JsYWhcIiBbIC4uLlxuICAgIERPQ1RZUEVfRFREX1FVT1RFRDogUysrLCAvLyA8IURPQ1RZUEUgXCIvL2JsYWhcIiBbIFwiZm9vXG4gICAgQ09NTUVOVF9TVEFSVElORzogUysrLCAvLyA8IS1cbiAgICBDT01NRU5UOiBTKyssIC8vIDwhLS1cbiAgICBDT01NRU5UX0VORElORzogUysrLCAvLyA8IS0tIGJsYWggLVxuICAgIENPTU1FTlRfRU5ERUQ6IFMrKywgLy8gPCEtLSBibGFoIC0tXG4gICAgQ0RBVEE6IFMrKywgLy8gPCFbQ0RBVEFbIHNvbWV0aGluZ1xuICAgIENEQVRBX0VORElORzogUysrLCAvLyBdXG4gICAgQ0RBVEFfRU5ESU5HXzI6IFMrKywgLy8gXV1cbiAgICBQUk9DX0lOU1Q6IFMrKywgLy8gPD9oaVxuICAgIFBST0NfSU5TVF9CT0RZOiBTKyssIC8vIDw/aGkgdGhlcmVcbiAgICBQUk9DX0lOU1RfRU5ESU5HOiBTKyssIC8vIDw/aGkgXCJ0aGVyZVwiID9cbiAgICBPUEVOX1RBRzogUysrLCAvLyA8c3Ryb25nXG4gICAgT1BFTl9UQUdfU0xBU0g6IFMrKywgLy8gPHN0cm9uZyAvXG4gICAgQVRUUklCOiBTKyssIC8vIDxhXG4gICAgQVRUUklCX05BTUU6IFMrKywgLy8gPGEgZm9vXG4gICAgQVRUUklCX05BTUVfU0FXX1dISVRFOiBTKyssIC8vIDxhIGZvbyBfXG4gICAgQVRUUklCX1ZBTFVFOiBTKyssIC8vIDxhIGZvbz1cbiAgICBBVFRSSUJfVkFMVUVfUVVPVEVEOiBTKyssIC8vIDxhIGZvbz1cImJhclxuICAgIEFUVFJJQl9WQUxVRV9DTE9TRUQ6IFMrKywgLy8gPGEgZm9vPVwiYmFyXCJcbiAgICBBVFRSSUJfVkFMVUVfVU5RVU9URUQ6IFMrKywgLy8gPGEgZm9vPWJhclxuICAgIEFUVFJJQl9WQUxVRV9FTlRJVFlfUTogUysrLCAvLyA8Zm9vIGJhcj1cIiZxdW90O1wiXG4gICAgQVRUUklCX1ZBTFVFX0VOVElUWV9VOiBTKyssIC8vIDxmb28gYmFyPSZxdW90XG4gICAgQ0xPU0VfVEFHOiBTKyssIC8vIDwvYVxuICAgIENMT1NFX1RBR19TQVdfV0hJVEU6IFMrKywgLy8gPC9hICAgPlxuICAgIFNDUklQVDogUysrLCAvLyA8c2NyaXB0PiAuLi5cbiAgICBTQ1JJUFRfRU5ESU5HOiBTKysgLy8gPHNjcmlwdD4gLi4uIDxcbiAgfVxuXG4gIHNheC5YTUxfRU5USVRJRVMgPSB7XG4gICAgJ2FtcCc6ICcmJyxcbiAgICAnZ3QnOiAnPicsXG4gICAgJ2x0JzogJzwnLFxuICAgICdxdW90JzogJ1wiJyxcbiAgICAnYXBvcyc6IFwiJ1wiXG4gIH1cblxuICBzYXguRU5USVRJRVMgPSB7XG4gICAgJ2FtcCc6ICcmJyxcbiAgICAnZ3QnOiAnPicsXG4gICAgJ2x0JzogJzwnLFxuICAgICdxdW90JzogJ1wiJyxcbiAgICAnYXBvcyc6IFwiJ1wiLFxuICAgICdBRWxpZyc6IDE5OCxcbiAgICAnQWFjdXRlJzogMTkzLFxuICAgICdBY2lyYyc6IDE5NCxcbiAgICAnQWdyYXZlJzogMTkyLFxuICAgICdBcmluZyc6IDE5NyxcbiAgICAnQXRpbGRlJzogMTk1LFxuICAgICdBdW1sJzogMTk2LFxuICAgICdDY2VkaWwnOiAxOTksXG4gICAgJ0VUSCc6IDIwOCxcbiAgICAnRWFjdXRlJzogMjAxLFxuICAgICdFY2lyYyc6IDIwMixcbiAgICAnRWdyYXZlJzogMjAwLFxuICAgICdFdW1sJzogMjAzLFxuICAgICdJYWN1dGUnOiAyMDUsXG4gICAgJ0ljaXJjJzogMjA2LFxuICAgICdJZ3JhdmUnOiAyMDQsXG4gICAgJ0l1bWwnOiAyMDcsXG4gICAgJ050aWxkZSc6IDIwOSxcbiAgICAnT2FjdXRlJzogMjExLFxuICAgICdPY2lyYyc6IDIxMixcbiAgICAnT2dyYXZlJzogMjEwLFxuICAgICdPc2xhc2gnOiAyMTYsXG4gICAgJ090aWxkZSc6IDIxMyxcbiAgICAnT3VtbCc6IDIxNCxcbiAgICAnVEhPUk4nOiAyMjIsXG4gICAgJ1VhY3V0ZSc6IDIxOCxcbiAgICAnVWNpcmMnOiAyMTksXG4gICAgJ1VncmF2ZSc6IDIxNyxcbiAgICAnVXVtbCc6IDIyMCxcbiAgICAnWWFjdXRlJzogMjIxLFxuICAgICdhYWN1dGUnOiAyMjUsXG4gICAgJ2FjaXJjJzogMjI2LFxuICAgICdhZWxpZyc6IDIzMCxcbiAgICAnYWdyYXZlJzogMjI0LFxuICAgICdhcmluZyc6IDIyOSxcbiAgICAnYXRpbGRlJzogMjI3LFxuICAgICdhdW1sJzogMjI4LFxuICAgICdjY2VkaWwnOiAyMzEsXG4gICAgJ2VhY3V0ZSc6IDIzMyxcbiAgICAnZWNpcmMnOiAyMzQsXG4gICAgJ2VncmF2ZSc6IDIzMixcbiAgICAnZXRoJzogMjQwLFxuICAgICdldW1sJzogMjM1LFxuICAgICdpYWN1dGUnOiAyMzcsXG4gICAgJ2ljaXJjJzogMjM4LFxuICAgICdpZ3JhdmUnOiAyMzYsXG4gICAgJ2l1bWwnOiAyMzksXG4gICAgJ250aWxkZSc6IDI0MSxcbiAgICAnb2FjdXRlJzogMjQzLFxuICAgICdvY2lyYyc6IDI0NCxcbiAgICAnb2dyYXZlJzogMjQyLFxuICAgICdvc2xhc2gnOiAyNDgsXG4gICAgJ290aWxkZSc6IDI0NSxcbiAgICAnb3VtbCc6IDI0NixcbiAgICAnc3psaWcnOiAyMjMsXG4gICAgJ3Rob3JuJzogMjU0LFxuICAgICd1YWN1dGUnOiAyNTAsXG4gICAgJ3VjaXJjJzogMjUxLFxuICAgICd1Z3JhdmUnOiAyNDksXG4gICAgJ3V1bWwnOiAyNTIsXG4gICAgJ3lhY3V0ZSc6IDI1MyxcbiAgICAneXVtbCc6IDI1NSxcbiAgICAnY29weSc6IDE2OSxcbiAgICAncmVnJzogMTc0LFxuICAgICduYnNwJzogMTYwLFxuICAgICdpZXhjbCc6IDE2MSxcbiAgICAnY2VudCc6IDE2MixcbiAgICAncG91bmQnOiAxNjMsXG4gICAgJ2N1cnJlbic6IDE2NCxcbiAgICAneWVuJzogMTY1LFxuICAgICdicnZiYXInOiAxNjYsXG4gICAgJ3NlY3QnOiAxNjcsXG4gICAgJ3VtbCc6IDE2OCxcbiAgICAnb3JkZic6IDE3MCxcbiAgICAnbGFxdW8nOiAxNzEsXG4gICAgJ25vdCc6IDE3MixcbiAgICAnc2h5JzogMTczLFxuICAgICdtYWNyJzogMTc1LFxuICAgICdkZWcnOiAxNzYsXG4gICAgJ3BsdXNtbic6IDE3NyxcbiAgICAnc3VwMSc6IDE4NSxcbiAgICAnc3VwMic6IDE3OCxcbiAgICAnc3VwMyc6IDE3OSxcbiAgICAnYWN1dGUnOiAxODAsXG4gICAgJ21pY3JvJzogMTgxLFxuICAgICdwYXJhJzogMTgyLFxuICAgICdtaWRkb3QnOiAxODMsXG4gICAgJ2NlZGlsJzogMTg0LFxuICAgICdvcmRtJzogMTg2LFxuICAgICdyYXF1byc6IDE4NyxcbiAgICAnZnJhYzE0JzogMTg4LFxuICAgICdmcmFjMTInOiAxODksXG4gICAgJ2ZyYWMzNCc6IDE5MCxcbiAgICAnaXF1ZXN0JzogMTkxLFxuICAgICd0aW1lcyc6IDIxNSxcbiAgICAnZGl2aWRlJzogMjQ3LFxuICAgICdPRWxpZyc6IDMzOCxcbiAgICAnb2VsaWcnOiAzMzksXG4gICAgJ1NjYXJvbic6IDM1MixcbiAgICAnc2Nhcm9uJzogMzUzLFxuICAgICdZdW1sJzogMzc2LFxuICAgICdmbm9mJzogNDAyLFxuICAgICdjaXJjJzogNzEwLFxuICAgICd0aWxkZSc6IDczMixcbiAgICAnQWxwaGEnOiA5MTMsXG4gICAgJ0JldGEnOiA5MTQsXG4gICAgJ0dhbW1hJzogOTE1LFxuICAgICdEZWx0YSc6IDkxNixcbiAgICAnRXBzaWxvbic6IDkxNyxcbiAgICAnWmV0YSc6IDkxOCxcbiAgICAnRXRhJzogOTE5LFxuICAgICdUaGV0YSc6IDkyMCxcbiAgICAnSW90YSc6IDkyMSxcbiAgICAnS2FwcGEnOiA5MjIsXG4gICAgJ0xhbWJkYSc6IDkyMyxcbiAgICAnTXUnOiA5MjQsXG4gICAgJ051JzogOTI1LFxuICAgICdYaSc6IDkyNixcbiAgICAnT21pY3Jvbic6IDkyNyxcbiAgICAnUGknOiA5MjgsXG4gICAgJ1Jobyc6IDkyOSxcbiAgICAnU2lnbWEnOiA5MzEsXG4gICAgJ1RhdSc6IDkzMixcbiAgICAnVXBzaWxvbic6IDkzMyxcbiAgICAnUGhpJzogOTM0LFxuICAgICdDaGknOiA5MzUsXG4gICAgJ1BzaSc6IDkzNixcbiAgICAnT21lZ2EnOiA5MzcsXG4gICAgJ2FscGhhJzogOTQ1LFxuICAgICdiZXRhJzogOTQ2LFxuICAgICdnYW1tYSc6IDk0NyxcbiAgICAnZGVsdGEnOiA5NDgsXG4gICAgJ2Vwc2lsb24nOiA5NDksXG4gICAgJ3pldGEnOiA5NTAsXG4gICAgJ2V0YSc6IDk1MSxcbiAgICAndGhldGEnOiA5NTIsXG4gICAgJ2lvdGEnOiA5NTMsXG4gICAgJ2thcHBhJzogOTU0LFxuICAgICdsYW1iZGEnOiA5NTUsXG4gICAgJ211JzogOTU2LFxuICAgICdudSc6IDk1NyxcbiAgICAneGknOiA5NTgsXG4gICAgJ29taWNyb24nOiA5NTksXG4gICAgJ3BpJzogOTYwLFxuICAgICdyaG8nOiA5NjEsXG4gICAgJ3NpZ21hZic6IDk2MixcbiAgICAnc2lnbWEnOiA5NjMsXG4gICAgJ3RhdSc6IDk2NCxcbiAgICAndXBzaWxvbic6IDk2NSxcbiAgICAncGhpJzogOTY2LFxuICAgICdjaGknOiA5NjcsXG4gICAgJ3BzaSc6IDk2OCxcbiAgICAnb21lZ2EnOiA5NjksXG4gICAgJ3RoZXRhc3ltJzogOTc3LFxuICAgICd1cHNpaCc6IDk3OCxcbiAgICAncGl2JzogOTgyLFxuICAgICdlbnNwJzogODE5NCxcbiAgICAnZW1zcCc6IDgxOTUsXG4gICAgJ3RoaW5zcCc6IDgyMDEsXG4gICAgJ3p3bmonOiA4MjA0LFxuICAgICd6d2onOiA4MjA1LFxuICAgICdscm0nOiA4MjA2LFxuICAgICdybG0nOiA4MjA3LFxuICAgICduZGFzaCc6IDgyMTEsXG4gICAgJ21kYXNoJzogODIxMixcbiAgICAnbHNxdW8nOiA4MjE2LFxuICAgICdyc3F1byc6IDgyMTcsXG4gICAgJ3NicXVvJzogODIxOCxcbiAgICAnbGRxdW8nOiA4MjIwLFxuICAgICdyZHF1byc6IDgyMjEsXG4gICAgJ2JkcXVvJzogODIyMixcbiAgICAnZGFnZ2VyJzogODIyNCxcbiAgICAnRGFnZ2VyJzogODIyNSxcbiAgICAnYnVsbCc6IDgyMjYsXG4gICAgJ2hlbGxpcCc6IDgyMzAsXG4gICAgJ3Blcm1pbCc6IDgyNDAsXG4gICAgJ3ByaW1lJzogODI0MixcbiAgICAnUHJpbWUnOiA4MjQzLFxuICAgICdsc2FxdW8nOiA4MjQ5LFxuICAgICdyc2FxdW8nOiA4MjUwLFxuICAgICdvbGluZSc6IDgyNTQsXG4gICAgJ2ZyYXNsJzogODI2MCxcbiAgICAnZXVybyc6IDgzNjQsXG4gICAgJ2ltYWdlJzogODQ2NSxcbiAgICAnd2VpZXJwJzogODQ3MixcbiAgICAncmVhbCc6IDg0NzYsXG4gICAgJ3RyYWRlJzogODQ4MixcbiAgICAnYWxlZnN5bSc6IDg1MDEsXG4gICAgJ2xhcnInOiA4NTkyLFxuICAgICd1YXJyJzogODU5MyxcbiAgICAncmFycic6IDg1OTQsXG4gICAgJ2RhcnInOiA4NTk1LFxuICAgICdoYXJyJzogODU5NixcbiAgICAnY3JhcnInOiA4NjI5LFxuICAgICdsQXJyJzogODY1NixcbiAgICAndUFycic6IDg2NTcsXG4gICAgJ3JBcnInOiA4NjU4LFxuICAgICdkQXJyJzogODY1OSxcbiAgICAnaEFycic6IDg2NjAsXG4gICAgJ2ZvcmFsbCc6IDg3MDQsXG4gICAgJ3BhcnQnOiA4NzA2LFxuICAgICdleGlzdCc6IDg3MDcsXG4gICAgJ2VtcHR5JzogODcwOSxcbiAgICAnbmFibGEnOiA4NzExLFxuICAgICdpc2luJzogODcxMixcbiAgICAnbm90aW4nOiA4NzEzLFxuICAgICduaSc6IDg3MTUsXG4gICAgJ3Byb2QnOiA4NzE5LFxuICAgICdzdW0nOiA4NzIxLFxuICAgICdtaW51cyc6IDg3MjIsXG4gICAgJ2xvd2FzdCc6IDg3MjcsXG4gICAgJ3JhZGljJzogODczMCxcbiAgICAncHJvcCc6IDg3MzMsXG4gICAgJ2luZmluJzogODczNCxcbiAgICAnYW5nJzogODczNixcbiAgICAnYW5kJzogODc0MyxcbiAgICAnb3InOiA4NzQ0LFxuICAgICdjYXAnOiA4NzQ1LFxuICAgICdjdXAnOiA4NzQ2LFxuICAgICdpbnQnOiA4NzQ3LFxuICAgICd0aGVyZTQnOiA4NzU2LFxuICAgICdzaW0nOiA4NzY0LFxuICAgICdjb25nJzogODc3MyxcbiAgICAnYXN5bXAnOiA4Nzc2LFxuICAgICduZSc6IDg4MDAsXG4gICAgJ2VxdWl2JzogODgwMSxcbiAgICAnbGUnOiA4ODA0LFxuICAgICdnZSc6IDg4MDUsXG4gICAgJ3N1Yic6IDg4MzQsXG4gICAgJ3N1cCc6IDg4MzUsXG4gICAgJ25zdWInOiA4ODM2LFxuICAgICdzdWJlJzogODgzOCxcbiAgICAnc3VwZSc6IDg4MzksXG4gICAgJ29wbHVzJzogODg1MyxcbiAgICAnb3RpbWVzJzogODg1NSxcbiAgICAncGVycCc6IDg4NjksXG4gICAgJ3Nkb3QnOiA4OTAxLFxuICAgICdsY2VpbCc6IDg5NjgsXG4gICAgJ3JjZWlsJzogODk2OSxcbiAgICAnbGZsb29yJzogODk3MCxcbiAgICAncmZsb29yJzogODk3MSxcbiAgICAnbGFuZyc6IDkwMDEsXG4gICAgJ3JhbmcnOiA5MDAyLFxuICAgICdsb3onOiA5Njc0LFxuICAgICdzcGFkZXMnOiA5ODI0LFxuICAgICdjbHVicyc6IDk4MjcsXG4gICAgJ2hlYXJ0cyc6IDk4MjksXG4gICAgJ2RpYW1zJzogOTgzMFxuICB9XG5cbiAgT2JqZWN0LmtleXMoc2F4LkVOVElUSUVTKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZSA9IHNheC5FTlRJVElFU1trZXldXG4gICAgdmFyIHMgPSB0eXBlb2YgZSA9PT0gJ251bWJlcicgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpIDogZVxuICAgIHNheC5FTlRJVElFU1trZXldID0gc1xuICB9KVxuXG4gIGZvciAodmFyIHMgaW4gc2F4LlNUQVRFKSB7XG4gICAgc2F4LlNUQVRFW3NheC5TVEFURVtzXV0gPSBzXG4gIH1cblxuICAvLyBzaG9ydGhhbmRcbiAgUyA9IHNheC5TVEFURVxuXG4gIGZ1bmN0aW9uIGVtaXQgKHBhcnNlciwgZXZlbnQsIGRhdGEpIHtcbiAgICBwYXJzZXJbZXZlbnRdICYmIHBhcnNlcltldmVudF0oZGF0YSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXROb2RlIChwYXJzZXIsIG5vZGVUeXBlLCBkYXRhKSB7XG4gICAgaWYgKHBhcnNlci50ZXh0Tm9kZSkgY2xvc2VUZXh0KHBhcnNlcilcbiAgICBlbWl0KHBhcnNlciwgbm9kZVR5cGUsIGRhdGEpXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZVRleHQgKHBhcnNlcikge1xuICAgIHBhcnNlci50ZXh0Tm9kZSA9IHRleHRvcHRzKHBhcnNlci5vcHQsIHBhcnNlci50ZXh0Tm9kZSlcbiAgICBpZiAocGFyc2VyLnRleHROb2RlKSBlbWl0KHBhcnNlciwgJ29udGV4dCcsIHBhcnNlci50ZXh0Tm9kZSlcbiAgICBwYXJzZXIudGV4dE5vZGUgPSAnJ1xuICB9XG5cbiAgZnVuY3Rpb24gdGV4dG9wdHMgKG9wdCwgdGV4dCkge1xuICAgIGlmIChvcHQudHJpbSkgdGV4dCA9IHRleHQudHJpbSgpXG4gICAgaWYgKG9wdC5ub3JtYWxpemUpIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xccysvZywgJyAnKVxuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICBmdW5jdGlvbiBlcnJvciAocGFyc2VyLCBlcikge1xuICAgIGNsb3NlVGV4dChwYXJzZXIpXG4gICAgaWYgKHBhcnNlci50cmFja1Bvc2l0aW9uKSB7XG4gICAgICBlciArPSAnXFxuTGluZTogJyArIHBhcnNlci5saW5lICtcbiAgICAgICAgJ1xcbkNvbHVtbjogJyArIHBhcnNlci5jb2x1bW4gK1xuICAgICAgICAnXFxuQ2hhcjogJyArIHBhcnNlci5jXG4gICAgfVxuICAgIGVyID0gbmV3IEVycm9yKGVyKVxuICAgIHBhcnNlci5lcnJvciA9IGVyXG4gICAgZW1pdChwYXJzZXIsICdvbmVycm9yJywgZXIpXG4gICAgcmV0dXJuIHBhcnNlclxuICB9XG5cbiAgZnVuY3Rpb24gZW5kIChwYXJzZXIpIHtcbiAgICBpZiAocGFyc2VyLnNhd1Jvb3QgJiYgIXBhcnNlci5jbG9zZWRSb290KSBzdHJpY3RGYWlsKHBhcnNlciwgJ1VuY2xvc2VkIHJvb3QgdGFnJylcbiAgICBpZiAoKHBhcnNlci5zdGF0ZSAhPT0gUy5CRUdJTikgJiZcbiAgICAgIChwYXJzZXIuc3RhdGUgIT09IFMuQkVHSU5fV0hJVEVTUEFDRSkgJiZcbiAgICAgIChwYXJzZXIuc3RhdGUgIT09IFMuVEVYVCkpIHtcbiAgICAgIGVycm9yKHBhcnNlciwgJ1VuZXhwZWN0ZWQgZW5kJylcbiAgICB9XG4gICAgY2xvc2VUZXh0KHBhcnNlcilcbiAgICBwYXJzZXIuYyA9ICcnXG4gICAgcGFyc2VyLmNsb3NlZCA9IHRydWVcbiAgICBlbWl0KHBhcnNlciwgJ29uZW5kJylcbiAgICBTQVhQYXJzZXIuY2FsbChwYXJzZXIsIHBhcnNlci5zdHJpY3QsIHBhcnNlci5vcHQpXG4gICAgcmV0dXJuIHBhcnNlclxuICB9XG5cbiAgZnVuY3Rpb24gc3RyaWN0RmFpbCAocGFyc2VyLCBtZXNzYWdlKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJzZXIgIT09ICdvYmplY3QnIHx8ICEocGFyc2VyIGluc3RhbmNlb2YgU0FYUGFyc2VyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgY2FsbCB0byBzdHJpY3RGYWlsJylcbiAgICB9XG4gICAgaWYgKHBhcnNlci5zdHJpY3QpIHtcbiAgICAgIGVycm9yKHBhcnNlciwgbWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBuZXdUYWcgKHBhcnNlcikge1xuICAgIGlmICghcGFyc2VyLnN0cmljdCkgcGFyc2VyLnRhZ05hbWUgPSBwYXJzZXIudGFnTmFtZVtwYXJzZXIubG9vc2VDYXNlXSgpXG4gICAgdmFyIHBhcmVudCA9IHBhcnNlci50YWdzW3BhcnNlci50YWdzLmxlbmd0aCAtIDFdIHx8IHBhcnNlclxuICAgIHZhciB0YWcgPSBwYXJzZXIudGFnID0geyBuYW1lOiBwYXJzZXIudGFnTmFtZSwgYXR0cmlidXRlczoge30gfVxuXG4gICAgLy8gd2lsbCBiZSBvdmVycmlkZGVuIGlmIHRhZyBjb250YWlscyBhbiB4bWxucz1cImZvb1wiIG9yIHhtbG5zOmZvbz1cImJhclwiXG4gICAgaWYgKHBhcnNlci5vcHQueG1sbnMpIHtcbiAgICAgIHRhZy5ucyA9IHBhcmVudC5uc1xuICAgIH1cbiAgICBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGggPSAwXG4gICAgZW1pdE5vZGUocGFyc2VyLCAnb25vcGVudGFnc3RhcnQnLCB0YWcpXG4gIH1cblxuICBmdW5jdGlvbiBxbmFtZSAobmFtZSwgYXR0cmlidXRlKSB7XG4gICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoJzonKVxuICAgIHZhciBxdWFsTmFtZSA9IGkgPCAwID8gWyAnJywgbmFtZSBdIDogbmFtZS5zcGxpdCgnOicpXG4gICAgdmFyIHByZWZpeCA9IHF1YWxOYW1lWzBdXG4gICAgdmFyIGxvY2FsID0gcXVhbE5hbWVbMV1cblxuICAgIC8vIDx4IFwieG1sbnNcIj1cImh0dHA6Ly9mb29cIj5cbiAgICBpZiAoYXR0cmlidXRlICYmIG5hbWUgPT09ICd4bWxucycpIHtcbiAgICAgIHByZWZpeCA9ICd4bWxucydcbiAgICAgIGxvY2FsID0gJydcbiAgICB9XG5cbiAgICByZXR1cm4geyBwcmVmaXg6IHByZWZpeCwgbG9jYWw6IGxvY2FsIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJpYiAocGFyc2VyKSB7XG4gICAgaWYgKCFwYXJzZXIuc3RyaWN0KSB7XG4gICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJOYW1lW3BhcnNlci5sb29zZUNhc2VdKClcbiAgICB9XG5cbiAgICBpZiAocGFyc2VyLmF0dHJpYkxpc3QuaW5kZXhPZihwYXJzZXIuYXR0cmliTmFtZSkgIT09IC0xIHx8XG4gICAgICBwYXJzZXIudGFnLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkocGFyc2VyLmF0dHJpYk5hbWUpKSB7XG4gICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9ICcnXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAocGFyc2VyLm9wdC54bWxucykge1xuICAgICAgdmFyIHFuID0gcW5hbWUocGFyc2VyLmF0dHJpYk5hbWUsIHRydWUpXG4gICAgICB2YXIgcHJlZml4ID0gcW4ucHJlZml4XG4gICAgICB2YXIgbG9jYWwgPSBxbi5sb2NhbFxuXG4gICAgICBpZiAocHJlZml4ID09PSAneG1sbnMnKSB7XG4gICAgICAgIC8vIG5hbWVzcGFjZSBiaW5kaW5nIGF0dHJpYnV0ZS4gcHVzaCB0aGUgYmluZGluZyBpbnRvIHNjb3BlXG4gICAgICAgIGlmIChsb2NhbCA9PT0gJ3htbCcgJiYgcGFyc2VyLmF0dHJpYlZhbHVlICE9PSBYTUxfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsXG4gICAgICAgICAgICAneG1sOiBwcmVmaXggbXVzdCBiZSBib3VuZCB0byAnICsgWE1MX05BTUVTUEFDRSArICdcXG4nICtcbiAgICAgICAgICAgICdBY3R1YWw6ICcgKyBwYXJzZXIuYXR0cmliVmFsdWUpXG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWwgPT09ICd4bWxucycgJiYgcGFyc2VyLmF0dHJpYlZhbHVlICE9PSBYTUxOU19OQU1FU1BBQ0UpIHtcbiAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlcixcbiAgICAgICAgICAgICd4bWxuczogcHJlZml4IG11c3QgYmUgYm91bmQgdG8gJyArIFhNTE5TX05BTUVTUEFDRSArICdcXG4nICtcbiAgICAgICAgICAgICdBY3R1YWw6ICcgKyBwYXJzZXIuYXR0cmliVmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHRhZyA9IHBhcnNlci50YWdcbiAgICAgICAgICB2YXIgcGFyZW50ID0gcGFyc2VyLnRhZ3NbcGFyc2VyLnRhZ3MubGVuZ3RoIC0gMV0gfHwgcGFyc2VyXG4gICAgICAgICAgaWYgKHRhZy5ucyA9PT0gcGFyZW50Lm5zKSB7XG4gICAgICAgICAgICB0YWcubnMgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5ucylcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFnLm5zW2xvY2FsXSA9IHBhcnNlci5hdHRyaWJWYWx1ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGRlZmVyIG9uYXR0cmlidXRlIGV2ZW50cyB1bnRpbCBhbGwgYXR0cmlidXRlcyBoYXZlIGJlZW4gc2VlblxuICAgICAgLy8gc28gYW55IG5ldyBiaW5kaW5ncyBjYW4gdGFrZSBlZmZlY3QuIHByZXNlcnZlIGF0dHJpYnV0ZSBvcmRlclxuICAgICAgLy8gc28gZGVmZXJyZWQgZXZlbnRzIGNhbiBiZSBlbWl0dGVkIGluIGRvY3VtZW50IG9yZGVyXG4gICAgICBwYXJzZXIuYXR0cmliTGlzdC5wdXNoKFtwYXJzZXIuYXR0cmliTmFtZSwgcGFyc2VyLmF0dHJpYlZhbHVlXSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW4gbm9uLXhtbG5zIG1vZGUsIHdlIGNhbiBlbWl0IHRoZSBldmVudCByaWdodCBhd2F5XG4gICAgICBwYXJzZXIudGFnLmF0dHJpYnV0ZXNbcGFyc2VyLmF0dHJpYk5hbWVdID0gcGFyc2VyLmF0dHJpYlZhbHVlXG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmF0dHJpYnV0ZScsIHtcbiAgICAgICAgbmFtZTogcGFyc2VyLmF0dHJpYk5hbWUsXG4gICAgICAgIHZhbHVlOiBwYXJzZXIuYXR0cmliVmFsdWVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcGFyc2VyLmF0dHJpYk5hbWUgPSBwYXJzZXIuYXR0cmliVmFsdWUgPSAnJ1xuICB9XG5cbiAgZnVuY3Rpb24gb3BlblRhZyAocGFyc2VyLCBzZWxmQ2xvc2luZykge1xuICAgIGlmIChwYXJzZXIub3B0LnhtbG5zKSB7XG4gICAgICAvLyBlbWl0IG5hbWVzcGFjZSBiaW5kaW5nIGV2ZW50c1xuICAgICAgdmFyIHRhZyA9IHBhcnNlci50YWdcblxuICAgICAgLy8gYWRkIG5hbWVzcGFjZSBpbmZvIHRvIHRhZ1xuICAgICAgdmFyIHFuID0gcW5hbWUocGFyc2VyLnRhZ05hbWUpXG4gICAgICB0YWcucHJlZml4ID0gcW4ucHJlZml4XG4gICAgICB0YWcubG9jYWwgPSBxbi5sb2NhbFxuICAgICAgdGFnLnVyaSA9IHRhZy5uc1txbi5wcmVmaXhdIHx8ICcnXG5cbiAgICAgIGlmICh0YWcucHJlZml4ICYmICF0YWcudXJpKSB7XG4gICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5ib3VuZCBuYW1lc3BhY2UgcHJlZml4OiAnICtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeShwYXJzZXIudGFnTmFtZSkpXG4gICAgICAgIHRhZy51cmkgPSBxbi5wcmVmaXhcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmVudCA9IHBhcnNlci50YWdzW3BhcnNlci50YWdzLmxlbmd0aCAtIDFdIHx8IHBhcnNlclxuICAgICAgaWYgKHRhZy5ucyAmJiBwYXJlbnQubnMgIT09IHRhZy5ucykge1xuICAgICAgICBPYmplY3Qua2V5cyh0YWcubnMpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbm9wZW5uYW1lc3BhY2UnLCB7XG4gICAgICAgICAgICBwcmVmaXg6IHAsXG4gICAgICAgICAgICB1cmk6IHRhZy5uc1twXVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIGhhbmRsZSBkZWZlcnJlZCBvbmF0dHJpYnV0ZSBldmVudHNcbiAgICAgIC8vIE5vdGU6IGRvIG5vdCBhcHBseSBkZWZhdWx0IG5zIHRvIGF0dHJpYnV0ZXM6XG4gICAgICAvLyAgIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwtbmFtZXMvI2RlZmF1bHRpbmdcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBudiA9IHBhcnNlci5hdHRyaWJMaXN0W2ldXG4gICAgICAgIHZhciBuYW1lID0gbnZbMF1cbiAgICAgICAgdmFyIHZhbHVlID0gbnZbMV1cbiAgICAgICAgdmFyIHF1YWxOYW1lID0gcW5hbWUobmFtZSwgdHJ1ZSlcbiAgICAgICAgdmFyIHByZWZpeCA9IHF1YWxOYW1lLnByZWZpeFxuICAgICAgICB2YXIgbG9jYWwgPSBxdWFsTmFtZS5sb2NhbFxuICAgICAgICB2YXIgdXJpID0gcHJlZml4ID09PSAnJyA/ICcnIDogKHRhZy5uc1twcmVmaXhdIHx8ICcnKVxuICAgICAgICB2YXIgYSA9IHtcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICBsb2NhbDogbG9jYWwsXG4gICAgICAgICAgdXJpOiB1cmlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZXJlJ3MgYW55IGF0dHJpYnV0ZXMgd2l0aCBhbiB1bmRlZmluZWQgbmFtZXNwYWNlLFxuICAgICAgICAvLyB0aGVuIGZhaWwgb24gdGhlbSBub3cuXG4gICAgICAgIGlmIChwcmVmaXggJiYgcHJlZml4ICE9PSAneG1sbnMnICYmICF1cmkpIHtcbiAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VuYm91bmQgbmFtZXNwYWNlIHByZWZpeDogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcmVmaXgpKVxuICAgICAgICAgIGEudXJpID0gcHJlZml4XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VyLnRhZy5hdHRyaWJ1dGVzW25hbWVdID0gYVxuICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmF0dHJpYnV0ZScsIGEpXG4gICAgICB9XG4gICAgICBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGggPSAwXG4gICAgfVxuXG4gICAgcGFyc2VyLnRhZy5pc1NlbGZDbG9zaW5nID0gISFzZWxmQ2xvc2luZ1xuXG4gICAgLy8gcHJvY2VzcyB0aGUgdGFnXG4gICAgcGFyc2VyLnNhd1Jvb3QgPSB0cnVlXG4gICAgcGFyc2VyLnRhZ3MucHVzaChwYXJzZXIudGFnKVxuICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3BlbnRhZycsIHBhcnNlci50YWcpXG4gICAgaWYgKCFzZWxmQ2xvc2luZykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciA8c2NyaXB0PiBpbiBub24tc3RyaWN0IG1vZGUuXG4gICAgICBpZiAoIXBhcnNlci5ub3NjcmlwdCAmJiBwYXJzZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2NyaXB0Jykge1xuICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gICAgICB9XG4gICAgICBwYXJzZXIudGFnID0gbnVsbFxuICAgICAgcGFyc2VyLnRhZ05hbWUgPSAnJ1xuICAgIH1cbiAgICBwYXJzZXIuYXR0cmliTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9ICcnXG4gICAgcGFyc2VyLmF0dHJpYkxpc3QubGVuZ3RoID0gMFxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VUYWcgKHBhcnNlcikge1xuICAgIGlmICghcGFyc2VyLnRhZ05hbWUpIHtcbiAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnV2VpcmQgZW1wdHkgY2xvc2UgdGFnLicpXG4gICAgICBwYXJzZXIudGV4dE5vZGUgKz0gJzwvPidcbiAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHBhcnNlci5zY3JpcHQpIHtcbiAgICAgIGlmIChwYXJzZXIudGFnTmFtZSAhPT0gJ3NjcmlwdCcpIHtcbiAgICAgICAgcGFyc2VyLnNjcmlwdCArPSAnPC8nICsgcGFyc2VyLnRhZ05hbWUgKyAnPidcbiAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSAnJ1xuICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlNDUklQVFxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2NyaXB0JywgcGFyc2VyLnNjcmlwdClcbiAgICAgIHBhcnNlci5zY3JpcHQgPSAnJ1xuICAgIH1cblxuICAgIC8vIGZpcnN0IG1ha2Ugc3VyZSB0aGF0IHRoZSBjbG9zaW5nIHRhZyBhY3R1YWxseSBleGlzdHMuXG4gICAgLy8gPGE+PGI+PC9jPjwvYj48L2E+IHdpbGwgY2xvc2UgZXZlcnl0aGluZywgb3RoZXJ3aXNlLlxuICAgIHZhciB0ID0gcGFyc2VyLnRhZ3MubGVuZ3RoXG4gICAgdmFyIHRhZ05hbWUgPSBwYXJzZXIudGFnTmFtZVxuICAgIGlmICghcGFyc2VyLnN0cmljdCkge1xuICAgICAgdGFnTmFtZSA9IHRhZ05hbWVbcGFyc2VyLmxvb3NlQ2FzZV0oKVxuICAgIH1cbiAgICB2YXIgY2xvc2VUbyA9IHRhZ05hbWVcbiAgICB3aGlsZSAodC0tKSB7XG4gICAgICB2YXIgY2xvc2UgPSBwYXJzZXIudGFnc1t0XVxuICAgICAgaWYgKGNsb3NlLm5hbWUgIT09IGNsb3NlVG8pIHtcbiAgICAgICAgLy8gZmFpbCB0aGUgZmlyc3QgdGltZSBpbiBzdHJpY3QgbW9kZVxuICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ1VuZXhwZWN0ZWQgY2xvc2UgdGFnJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGlkbid0IGZpbmQgaXQuICB3ZSBhbHJlYWR5IGZhaWxlZCBmb3Igc3RyaWN0LCBzbyBqdXN0IGFib3J0LlxuICAgIGlmICh0IDwgMCkge1xuICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbm1hdGNoZWQgY2xvc2luZyB0YWc6ICcgKyBwYXJzZXIudGFnTmFtZSlcbiAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSAnPC8nICsgcGFyc2VyLnRhZ05hbWUgKyAnPidcbiAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHBhcnNlci50YWdOYW1lID0gdGFnTmFtZVxuICAgIHZhciBzID0gcGFyc2VyLnRhZ3MubGVuZ3RoXG4gICAgd2hpbGUgKHMtLSA+IHQpIHtcbiAgICAgIHZhciB0YWcgPSBwYXJzZXIudGFnID0gcGFyc2VyLnRhZ3MucG9wKClcbiAgICAgIHBhcnNlci50YWdOYW1lID0gcGFyc2VyLnRhZy5uYW1lXG4gICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNsb3NldGFnJywgcGFyc2VyLnRhZ05hbWUpXG5cbiAgICAgIHZhciB4ID0ge31cbiAgICAgIGZvciAodmFyIGkgaW4gdGFnLm5zKSB7XG4gICAgICAgIHhbaV0gPSB0YWcubnNbaV1cbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmVudCA9IHBhcnNlci50YWdzW3BhcnNlci50YWdzLmxlbmd0aCAtIDFdIHx8IHBhcnNlclxuICAgICAgaWYgKHBhcnNlci5vcHQueG1sbnMgJiYgdGFnLm5zICE9PSBwYXJlbnQubnMpIHtcbiAgICAgICAgLy8gcmVtb3ZlIG5hbWVzcGFjZSBiaW5kaW5ncyBpbnRyb2R1Y2VkIGJ5IHRhZ1xuICAgICAgICBPYmplY3Qua2V5cyh0YWcubnMpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICB2YXIgbiA9IHRhZy5uc1twXVxuICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2xvc2VuYW1lc3BhY2UnLCB7IHByZWZpeDogcCwgdXJpOiBuIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0ID09PSAwKSBwYXJzZXIuY2xvc2VkUm9vdCA9IHRydWVcbiAgICBwYXJzZXIudGFnTmFtZSA9IHBhcnNlci5hdHRyaWJWYWx1ZSA9IHBhcnNlci5hdHRyaWJOYW1lID0gJydcbiAgICBwYXJzZXIuYXR0cmliTGlzdC5sZW5ndGggPSAwXG4gICAgcGFyc2VyLnN0YXRlID0gUy5URVhUXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVudGl0eSAocGFyc2VyKSB7XG4gICAgdmFyIGVudGl0eSA9IHBhcnNlci5lbnRpdHlcbiAgICB2YXIgZW50aXR5TEMgPSBlbnRpdHkudG9Mb3dlckNhc2UoKVxuICAgIHZhciBudW1cbiAgICB2YXIgbnVtU3RyID0gJydcblxuICAgIGlmIChwYXJzZXIuRU5USVRJRVNbZW50aXR5XSkge1xuICAgICAgcmV0dXJuIHBhcnNlci5FTlRJVElFU1tlbnRpdHldXG4gICAgfVxuICAgIGlmIChwYXJzZXIuRU5USVRJRVNbZW50aXR5TENdKSB7XG4gICAgICByZXR1cm4gcGFyc2VyLkVOVElUSUVTW2VudGl0eUxDXVxuICAgIH1cbiAgICBlbnRpdHkgPSBlbnRpdHlMQ1xuICAgIGlmIChlbnRpdHkuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgIGlmIChlbnRpdHkuY2hhckF0KDEpID09PSAneCcpIHtcbiAgICAgICAgZW50aXR5ID0gZW50aXR5LnNsaWNlKDIpXG4gICAgICAgIG51bSA9IHBhcnNlSW50KGVudGl0eSwgMTYpXG4gICAgICAgIG51bVN0ciA9IG51bS50b1N0cmluZygxNilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgxKVxuICAgICAgICBudW0gPSBwYXJzZUludChlbnRpdHksIDEwKVxuICAgICAgICBudW1TdHIgPSBudW0udG9TdHJpbmcoMTApXG4gICAgICB9XG4gICAgfVxuICAgIGVudGl0eSA9IGVudGl0eS5yZXBsYWNlKC9eMCsvLCAnJylcbiAgICBpZiAoaXNOYU4obnVtKSB8fCBudW1TdHIudG9Mb3dlckNhc2UoKSAhPT0gZW50aXR5KSB7XG4gICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVyIGVudGl0eScpXG4gICAgICByZXR1cm4gJyYnICsgcGFyc2VyLmVudGl0eSArICc7J1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChudW0pXG4gIH1cblxuICBmdW5jdGlvbiBiZWdpbldoaXRlU3BhY2UgKHBhcnNlciwgYykge1xuICAgIGlmIChjID09PSAnPCcpIHtcbiAgICAgIHBhcnNlci5zdGF0ZSA9IFMuT1BFTl9XQUtBXG4gICAgICBwYXJzZXIuc3RhcnRUYWdQb3NpdGlvbiA9IHBhcnNlci5wb3NpdGlvblxuICAgIH0gZWxzZSBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgLy8gaGF2ZSB0byBwcm9jZXNzIHRoaXMgYXMgYSB0ZXh0IG5vZGUuXG4gICAgICAvLyB3ZWlyZCwgYnV0IGhhcHBlbnMuXG4gICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ05vbi13aGl0ZXNwYWNlIGJlZm9yZSBmaXJzdCB0YWcuJylcbiAgICAgIHBhcnNlci50ZXh0Tm9kZSA9IGNcbiAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoYXJBdCAoY2h1bmssIGkpIHtcbiAgICB2YXIgcmVzdWx0ID0gJydcbiAgICBpZiAoaSA8IGNodW5rLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gY2h1bmsuY2hhckF0KGkpXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyaXRlIChjaHVuaykge1xuICAgIHZhciBwYXJzZXIgPSB0aGlzXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRocm93IHRoaXMuZXJyb3JcbiAgICB9XG4gICAgaWYgKHBhcnNlci5jbG9zZWQpIHtcbiAgICAgIHJldHVybiBlcnJvcihwYXJzZXIsXG4gICAgICAgICdDYW5ub3Qgd3JpdGUgYWZ0ZXIgY2xvc2UuIEFzc2lnbiBhbiBvbnJlYWR5IGhhbmRsZXIuJylcbiAgICB9XG4gICAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZW5kKHBhcnNlcilcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNodW5rID0gY2h1bmsudG9TdHJpbmcoKVxuICAgIH1cbiAgICB2YXIgaSA9IDBcbiAgICB2YXIgYyA9ICcnXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGMgPSBjaGFyQXQoY2h1bmssIGkrKylcbiAgICAgIHBhcnNlci5jID0gY1xuXG4gICAgICBpZiAoIWMpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnNlci50cmFja1Bvc2l0aW9uKSB7XG4gICAgICAgIHBhcnNlci5wb3NpdGlvbisrXG4gICAgICAgIGlmIChjID09PSAnXFxuJykge1xuICAgICAgICAgIHBhcnNlci5saW5lKytcbiAgICAgICAgICBwYXJzZXIuY29sdW1uID0gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnNlci5jb2x1bW4rK1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAocGFyc2VyLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgUy5CRUdJTjpcbiAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkJFR0lOX1dISVRFU1BBQ0VcbiAgICAgICAgICBpZiAoYyA9PT0gJ1xcdUZFRkYnKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBiZWdpbldoaXRlU3BhY2UocGFyc2VyLCBjKVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkJFR0lOX1dISVRFU1BBQ0U6XG4gICAgICAgICAgYmVnaW5XaGl0ZVNwYWNlKHBhcnNlciwgYylcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5URVhUOlxuICAgICAgICAgIGlmIChwYXJzZXIuc2F3Um9vdCAmJiAhcGFyc2VyLmNsb3NlZFJvb3QpIHtcbiAgICAgICAgICAgIHZhciBzdGFydGkgPSBpIC0gMVxuICAgICAgICAgICAgd2hpbGUgKGMgJiYgYyAhPT0gJzwnICYmIGMgIT09ICcmJykge1xuICAgICAgICAgICAgICBjID0gY2hhckF0KGNodW5rLCBpKyspXG4gICAgICAgICAgICAgIGlmIChjICYmIHBhcnNlci50cmFja1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnBvc2l0aW9uKytcbiAgICAgICAgICAgICAgICBpZiAoYyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNlci5saW5lKytcbiAgICAgICAgICAgICAgICAgIHBhcnNlci5jb2x1bW4gPSAwXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBhcnNlci5jb2x1bW4rK1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IGNodW5rLnN1YnN0cmluZyhzdGFydGksIGkgLSAxKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYyA9PT0gJzwnICYmICEocGFyc2VyLnNhd1Jvb3QgJiYgcGFyc2VyLmNsb3NlZFJvb3QgJiYgIXBhcnNlci5zdHJpY3QpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fV0FLQVxuICAgICAgICAgICAgcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb24gPSBwYXJzZXIucG9zaXRpb25cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykgJiYgKCFwYXJzZXIuc2F3Um9vdCB8fCBwYXJzZXIuY2xvc2VkUm9vdCkpIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdUZXh0IGRhdGEgb3V0c2lkZSBvZiByb290IG5vZGUuJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID09PSAnJicpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5URVhUX0VOVElUWVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnRleHROb2RlICs9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuU0NSSVBUOlxuICAgICAgICAgIC8vIG9ubHkgbm9uLXN0cmljdFxuICAgICAgICAgIGlmIChjID09PSAnPCcpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUX0VORElOR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuU0NSSVBUX0VORElORzpcbiAgICAgICAgICBpZiAoYyA9PT0gJy8nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNMT1NFX1RBR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8JyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLk9QRU5fV0FLQTpcbiAgICAgICAgICAvLyBlaXRoZXIgYSAvLCA/LCAhLCBvciB0ZXh0IGlzIGNvbWluZyBuZXh0LlxuICAgICAgICAgIGlmIChjID09PSAnIScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0dNTF9ERUNMXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAvLyB3YWl0IGZvciBpdC4uLlxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLk9QRU5fVEFHXG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSA9IGNcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUdcbiAgICAgICAgICAgIHBhcnNlci50YWdOYW1lID0gJydcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc/Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RcbiAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdE5hbWUgPSBwYXJzZXIucHJvY0luc3RCb2R5ID0gJydcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdVbmVuY29kZWQgPCcpXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSB3YXMgc29tZSB3aGl0ZXNwYWNlLCB0aGVuIGFkZCB0aGF0IGluLlxuICAgICAgICAgICAgaWYgKHBhcnNlci5zdGFydFRhZ1Bvc2l0aW9uICsgMSA8IHBhcnNlci5wb3NpdGlvbikge1xuICAgICAgICAgICAgICB2YXIgcGFkID0gcGFyc2VyLnBvc2l0aW9uIC0gcGFyc2VyLnN0YXJ0VGFnUG9zaXRpb25cbiAgICAgICAgICAgICAgYyA9IG5ldyBBcnJheShwYWQpLmpvaW4oJyAnKSArIGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci50ZXh0Tm9kZSArPSAnPCcgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLlRFWFRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuU0dNTF9ERUNMOlxuICAgICAgICAgIGlmICgocGFyc2VyLnNnbWxEZWNsICsgYykudG9VcHBlckNhc2UoKSA9PT0gQ0RBVEEpIHtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29ub3BlbmNkYXRhJylcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQ0RBVEFcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VyLnNnbWxEZWNsICsgYyA9PT0gJy0tJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgPSAnJ1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHBhcnNlci5zZ21sRGVjbCArIGMpLnRvVXBwZXJDYXNlKCkgPT09IERPQ1RZUEUpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRVxuICAgICAgICAgICAgaWYgKHBhcnNlci5kb2N0eXBlIHx8IHBhcnNlci5zYXdSb290KSB7XG4gICAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLFxuICAgICAgICAgICAgICAgICdJbmFwcHJvcHJpYXRlbHkgbG9jYXRlZCBkb2N0eXBlIGRlY2xhcmF0aW9uJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnNlci5kb2N0eXBlID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zZ21sRGVjbCA9ICcnXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uc2dtbGRlY2xhcmF0aW9uJywgcGFyc2VyLnNnbWxEZWNsKVxuICAgICAgICAgICAgcGFyc2VyLnNnbWxEZWNsID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNRdW90ZShjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0xfUVVPVEVEXG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gY1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc2dtbERlY2wgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5TR01MX0RFQ0xfUVVPVEVEOlxuICAgICAgICAgIGlmIChjID09PSBwYXJzZXIucSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TR01MX0RFQ0xcbiAgICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyc2VyLnNnbWxEZWNsICs9IGNcbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5ET0NUWVBFOlxuICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgICAgZW1pdE5vZGUocGFyc2VyLCAnb25kb2N0eXBlJywgcGFyc2VyLmRvY3R5cGUpXG4gICAgICAgICAgICBwYXJzZXIuZG9jdHlwZSA9IHRydWUgLy8ganVzdCByZW1lbWJlciB0aGF0IHdlIHNhdyBpdC5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgICAgaWYgKGMgPT09ICdbJykge1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVfRFREXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFX1FVT1RFRFxuICAgICAgICAgICAgICBwYXJzZXIucSA9IGNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuRE9DVFlQRV9RVU9URUQ6XG4gICAgICAgICAgcGFyc2VyLmRvY3R5cGUgKz0gY1xuICAgICAgICAgIGlmIChjID09PSBwYXJzZXIucSkge1xuICAgICAgICAgICAgcGFyc2VyLnEgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5ET0NUWVBFXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkRPQ1RZUEVfRFREOlxuICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkRPQ1RZUEVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERfUVVPVEVEXG4gICAgICAgICAgICBwYXJzZXIucSA9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuRE9DVFlQRV9EVERfUVVPVEVEOlxuICAgICAgICAgIHBhcnNlci5kb2N0eXBlICs9IGNcbiAgICAgICAgICBpZiAoYyA9PT0gcGFyc2VyLnEpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuRE9DVFlQRV9EVERcbiAgICAgICAgICAgIHBhcnNlci5xID0gJydcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVDpcbiAgICAgICAgICBpZiAoYyA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jb21tZW50ICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICctJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UX0VOREVEXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCA9IHRleHRvcHRzKHBhcnNlci5vcHQsIHBhcnNlci5jb21tZW50KVxuICAgICAgICAgICAgaWYgKHBhcnNlci5jb21tZW50KSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY29tbWVudCcsIHBhcnNlci5jb21tZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLmNvbW1lbnQgPSAnJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCArPSAnLScgKyBjXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNPTU1FTlRcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQ09NTUVOVF9FTkRFRDpcbiAgICAgICAgICBpZiAoYyAhPT0gJz4nKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ01hbGZvcm1lZCBjb21tZW50JylcbiAgICAgICAgICAgIC8vIGFsbG93IDwhLS0gYmxhaCAtLSBibG9vIC0tPiBpbiBub24tc3RyaWN0IG1vZGUsXG4gICAgICAgICAgICAvLyB3aGljaCBpcyBhIGNvbW1lbnQgb2YgXCIgYmxhaCAtLSBibG9vIFwiXG4gICAgICAgICAgICBwYXJzZXIuY29tbWVudCArPSAnLS0nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DT01NRU5UXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQTpcbiAgICAgICAgICBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkNEQVRBX0VORElOR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gY1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQV9FTkRJTkc6XG4gICAgICAgICAgaWYgKGMgPT09ICddJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQV9FTkRJTkdfMlxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gJ10nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DREFUQV9FTkRJTkdfMjpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VyLmNkYXRhKSB7XG4gICAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uY2RhdGEnLCBwYXJzZXIuY2RhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbmNsb3NlY2RhdGEnKVxuICAgICAgICAgICAgcGFyc2VyLmNkYXRhID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ10nKSB7XG4gICAgICAgICAgICBwYXJzZXIuY2RhdGEgKz0gJ10nXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlci5jZGF0YSArPSAnXV0nICsgY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DREFUQVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5QUk9DX0lOU1Q6XG4gICAgICAgICAgaWYgKGMgPT09ICc/Jykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5QUk9DX0lOU1RfRU5ESU5HXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0JPRFlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VyLnByb2NJbnN0TmFtZSArPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlBST0NfSU5TVF9CT0RZOlxuICAgICAgICAgIGlmICghcGFyc2VyLnByb2NJbnN0Qm9keSAmJiBpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPycpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0VORElOR1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3RCb2R5ICs9IGNcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuUFJPQ19JTlNUX0VORElORzpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBlbWl0Tm9kZShwYXJzZXIsICdvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbicsIHtcbiAgICAgICAgICAgICAgbmFtZTogcGFyc2VyLnByb2NJbnN0TmFtZSxcbiAgICAgICAgICAgICAgYm9keTogcGFyc2VyLnByb2NJbnN0Qm9keVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHBhcnNlci5wcm9jSW5zdE5hbWUgPSBwYXJzZXIucHJvY0luc3RCb2R5ID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIucHJvY0luc3RCb2R5ICs9ICc/JyArIGNcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuUFJPQ19JTlNUX0JPRFlcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuT1BFTl9UQUc6XG4gICAgICAgICAgaWYgKGlzTWF0Y2gobmFtZUJvZHksIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RhZyhwYXJzZXIpXG4gICAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLycpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVyIGluIHRhZyBuYW1lJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5PUEVOX1RBR19TTEFTSDpcbiAgICAgICAgICBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlciwgdHJ1ZSlcbiAgICAgICAgICAgIGNsb3NlVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdGb3J3YXJkLXNsYXNoIGluIG9wZW5pbmcgdGFnIG5vdCBmb2xsb3dlZCBieSA+JylcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQjpcbiAgICAgICAgICAvLyBoYXZlbid0IHJlYWQgdGhlIGF0dHJpYnV0ZSBuYW1lIHlldC5cbiAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSA9IGNcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9OQU1FXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBhdHRyaWJ1dGUgbmFtZScpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQl9OQU1FOlxuICAgICAgICAgIGlmIChjID09PSAnPScpIHtcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFXG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnQXR0cmlidXRlIHdpdGhvdXQgdmFsdWUnKVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gcGFyc2VyLmF0dHJpYk5hbWVcbiAgICAgICAgICAgIGF0dHJpYihwYXJzZXIpXG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfTkFNRV9TQVdfV0hJVEVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZUJvZHksIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliTmFtZSArPSBjXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnSW52YWxpZCBhdHRyaWJ1dGUgbmFtZScpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQl9OQU1FX1NBV19XSElURTpcbiAgICAgICAgICBpZiAoYyA9PT0gJz0nKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9WQUxVRVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0F0dHJpYnV0ZSB3aXRob3V0IHZhbHVlJylcbiAgICAgICAgICAgIHBhcnNlci50YWcuYXR0cmlidXRlc1twYXJzZXIuYXR0cmliTmFtZV0gPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgICAgICAgIGVtaXROb2RlKHBhcnNlciwgJ29uYXR0cmlidXRlJywge1xuICAgICAgICAgICAgICBuYW1lOiBwYXJzZXIuYXR0cmliTmFtZSxcbiAgICAgICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYk5hbWUgPSAnJ1xuICAgICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gY1xuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQl9OQU1FXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWUnKVxuICAgICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUU6XG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUXVvdGUoYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5xID0gY1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfUVVPVEVEXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmljdEZhaWwocGFyc2VyLCAnVW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlJylcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEXG4gICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgPSBjXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9RVU9URUQ6XG4gICAgICAgICAgaWYgKGMgIT09IHBhcnNlci5xKSB7XG4gICAgICAgICAgICBpZiAoYyA9PT0gJyYnKSB7XG4gICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX1ZBTFVFX0VOVElUWV9RXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXJzZXIuYXR0cmliVmFsdWUgKz0gY1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgYXR0cmliKHBhcnNlcilcbiAgICAgICAgICBwYXJzZXIucSA9ICcnXG4gICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfQ0xPU0VEXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0NMT1NFRDpcbiAgICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJz4nKSB7XG4gICAgICAgICAgICBvcGVuVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICcvJykge1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5PUEVOX1RBR19TTEFTSFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ05vIHdoaXRlc3BhY2UgYmV0d2VlbiBhdHRyaWJ1dGVzJylcbiAgICAgICAgICAgIHBhcnNlci5hdHRyaWJOYW1lID0gY1xuICAgICAgICAgICAgcGFyc2VyLmF0dHJpYlZhbHVlID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuQVRUUklCX05BTUVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lJylcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX1VOUVVPVEVEOlxuICAgICAgICAgIGlmICghaXNBdHRyaWJFbmQoYykpIHtcbiAgICAgICAgICAgIGlmIChjID09PSAnJicpIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5BVFRSSUJfVkFMVUVfRU5USVRZX1VcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcnNlci5hdHRyaWJWYWx1ZSArPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyaWIocGFyc2VyKVxuICAgICAgICAgIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIG9wZW5UYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSBTLkFUVFJJQlxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgIGNhc2UgUy5DTE9TRV9UQUc6XG4gICAgICAgICAgaWYgKCFwYXJzZXIudGFnTmFtZSkge1xuICAgICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChub3RNYXRjaChuYW1lU3RhcnQsIGMpKSB7XG4gICAgICAgICAgICAgIGlmIChwYXJzZXIuc2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnNjcmlwdCArPSAnPC8nICsgY1xuICAgICAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IFMuU0NSSVBUXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIHRhZ25hbWUgaW4gY2xvc2luZyB0YWcuJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSBjXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicpIHtcbiAgICAgICAgICAgIGNsb3NlVGFnKHBhcnNlcilcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzTWF0Y2gobmFtZUJvZHksIGMpKSB7XG4gICAgICAgICAgICBwYXJzZXIudGFnTmFtZSArPSBjXG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJzZXIuc2NyaXB0KSB7XG4gICAgICAgICAgICBwYXJzZXIuc2NyaXB0ICs9ICc8LycgKyBwYXJzZXIudGFnTmFtZVxuICAgICAgICAgICAgcGFyc2VyLnRhZ05hbWUgPSAnJ1xuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5TQ1JJUFRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgICAgc3RyaWN0RmFpbChwYXJzZXIsICdJbnZhbGlkIHRhZ25hbWUgaW4gY2xvc2luZyB0YWcnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyc2VyLnN0YXRlID0gUy5DTE9TRV9UQUdfU0FXX1dISVRFXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLkNMT1NFX1RBR19TQVdfV0hJVEU6XG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGMgPT09ICc+Jykge1xuICAgICAgICAgICAgY2xvc2VUYWcocGFyc2VyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVycyBpbiBjbG9zaW5nIHRhZycpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG5cbiAgICAgICAgY2FzZSBTLlRFWFRfRU5USVRZOlxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9ROlxuICAgICAgICBjYXNlIFMuQVRUUklCX1ZBTFVFX0VOVElUWV9VOlxuICAgICAgICAgIHZhciByZXR1cm5TdGF0ZVxuICAgICAgICAgIHZhciBidWZmZXJcbiAgICAgICAgICBzd2l0Y2ggKHBhcnNlci5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTLlRFWFRfRU5USVRZOlxuICAgICAgICAgICAgICByZXR1cm5TdGF0ZSA9IFMuVEVYVFxuICAgICAgICAgICAgICBidWZmZXIgPSAndGV4dE5vZGUnXG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgIGNhc2UgUy5BVFRSSUJfVkFMVUVfRU5USVRZX1E6XG4gICAgICAgICAgICAgIHJldHVyblN0YXRlID0gUy5BVFRSSUJfVkFMVUVfUVVPVEVEXG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICdhdHRyaWJWYWx1ZSdcbiAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSBTLkFUVFJJQl9WQUxVRV9FTlRJVFlfVTpcbiAgICAgICAgICAgICAgcmV0dXJuU3RhdGUgPSBTLkFUVFJJQl9WQUxVRV9VTlFVT1RFRFxuICAgICAgICAgICAgICBidWZmZXIgPSAnYXR0cmliVmFsdWUnXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGMgPT09ICc7Jykge1xuICAgICAgICAgICAgcGFyc2VyW2J1ZmZlcl0gKz0gcGFyc2VFbnRpdHkocGFyc2VyKVxuICAgICAgICAgICAgcGFyc2VyLmVudGl0eSA9ICcnXG4gICAgICAgICAgICBwYXJzZXIuc3RhdGUgPSByZXR1cm5TdGF0ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNNYXRjaChwYXJzZXIuZW50aXR5Lmxlbmd0aCA/IGVudGl0eUJvZHkgOiBlbnRpdHlTdGFydCwgYykpIHtcbiAgICAgICAgICAgIHBhcnNlci5lbnRpdHkgKz0gY1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJpY3RGYWlsKHBhcnNlciwgJ0ludmFsaWQgY2hhcmFjdGVyIGluIGVudGl0eSBuYW1lJylcbiAgICAgICAgICAgIHBhcnNlcltidWZmZXJdICs9ICcmJyArIHBhcnNlci5lbnRpdHkgKyBjXG4gICAgICAgICAgICBwYXJzZXIuZW50aXR5ID0gJydcbiAgICAgICAgICAgIHBhcnNlci5zdGF0ZSA9IHJldHVyblN0YXRlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwYXJzZXIsICdVbmtub3duIHN0YXRlOiAnICsgcGFyc2VyLnN0YXRlKVxuICAgICAgfVxuICAgIH0gLy8gd2hpbGVcblxuICAgIGlmIChwYXJzZXIucG9zaXRpb24gPj0gcGFyc2VyLmJ1ZmZlckNoZWNrUG9zaXRpb24pIHtcbiAgICAgIGNoZWNrQnVmZmVyTGVuZ3RoKHBhcnNlcilcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlclxuICB9XG5cbiAgLyohIGh0dHA6Ly9tdGhzLmJlL2Zyb21jb2RlcG9pbnQgdjAuMS4wIGJ5IEBtYXRoaWFzICovXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICghU3RyaW5nLmZyb21Db2RlUG9pbnQpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3JcbiAgICAgIHZhciBmcm9tQ29kZVBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgTUFYX1NJWkUgPSAweDQwMDBcbiAgICAgICAgdmFyIGNvZGVVbml0cyA9IFtdXG4gICAgICAgIHZhciBoaWdoU3Vycm9nYXRlXG4gICAgICAgIHZhciBsb3dTdXJyb2dhdGVcbiAgICAgICAgdmFyIGluZGV4ID0gLTFcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gJydcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgY29kZVBvaW50ID0gTnVtYmVyKGFyZ3VtZW50c1tpbmRleF0pXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWlzRmluaXRlKGNvZGVQb2ludCkgfHwgLy8gYE5hTmAsIGArSW5maW5pdHlgLCBvciBgLUluZmluaXR5YFxuICAgICAgICAgICAgY29kZVBvaW50IDwgMCB8fCAvLyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRcbiAgICAgICAgICAgIGNvZGVQb2ludCA+IDB4MTBGRkZGIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuICAgICAgICAgICAgZmxvb3IoY29kZVBvaW50KSAhPT0gY29kZVBvaW50IC8vIG5vdCBhbiBpbnRlZ2VyXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQ6ICcgKyBjb2RlUG9pbnQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb2RlUG9pbnQgPD0gMHhGRkZGKSB7IC8vIEJNUCBjb2RlIHBvaW50XG4gICAgICAgICAgICBjb2RlVW5pdHMucHVzaChjb2RlUG9pbnQpXG4gICAgICAgICAgfSBlbHNlIHsgLy8gQXN0cmFsIGNvZGUgcG9pbnQ7IHNwbGl0IGluIHN1cnJvZ2F0ZSBoYWx2ZXNcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG4gICAgICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgICAgICAgaGlnaFN1cnJvZ2F0ZSA9IChjb2RlUG9pbnQgPj4gMTApICsgMHhEODAwXG4gICAgICAgICAgICBsb3dTdXJyb2dhdGUgPSAoY29kZVBvaW50ICUgMHg0MDApICsgMHhEQzAwXG4gICAgICAgICAgICBjb2RlVW5pdHMucHVzaChoaWdoU3Vycm9nYXRlLCBsb3dTdXJyb2dhdGUpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbmRleCArIDEgPT09IGxlbmd0aCB8fCBjb2RlVW5pdHMubGVuZ3RoID4gTUFYX1NJWkUpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmdGcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY29kZVVuaXRzKVxuICAgICAgICAgICAgY29kZVVuaXRzLmxlbmd0aCA9IDBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZywgJ2Zyb21Db2RlUG9pbnQnLCB7XG4gICAgICAgICAgdmFsdWU6IGZyb21Db2RlUG9pbnQsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBTdHJpbmcuZnJvbUNvZGVQb2ludCA9IGZyb21Db2RlUG9pbnRcbiAgICAgIH1cbiAgICB9KCkpXG4gIH1cbn0pKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc2F4ID0ge30gOiBleHBvcnRzKVxuIiwgInZhciBzYXggICAgICAgICAgID0gcmVxdWlyZSgnc2F4JylcbiAgLCBkYXRlRm9ybWF0dGVyID0gcmVxdWlyZSgnLi9kYXRlX2Zvcm1hdHRlcicpXG5cbnZhciBEZXNlcmlhbGl6ZXIgPSBmdW5jdGlvbihlbmNvZGluZykge1xuICB0aGlzLnR5cGUgPSBudWxsXG4gIHRoaXMucmVzcG9uc2VUeXBlID0gbnVsbFxuICB0aGlzLnN0YWNrID0gW11cbiAgdGhpcy5tYXJrcyA9IFtdXG4gIHRoaXMuZGF0YSA9IFtdXG4gIHRoaXMubWV0aG9kbmFtZSA9IG51bGxcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nIHx8ICd1dGY4J1xuICB0aGlzLnZhbHVlID0gZmFsc2VcbiAgdGhpcy5jYWxsYmFjayA9IG51bGxcbiAgdGhpcy5lcnJvciA9IG51bGxcblxuICB0aGlzLnBhcnNlciA9IHNheC5jcmVhdGVTdHJlYW0oKVxuICB0aGlzLnBhcnNlci5vbignb3BlbnRhZycsICB0aGlzLm9uT3BlbnRhZy5iaW5kKHRoaXMpKVxuICB0aGlzLnBhcnNlci5vbignY2xvc2V0YWcnLCB0aGlzLm9uQ2xvc2V0YWcuYmluZCh0aGlzKSlcbiAgdGhpcy5wYXJzZXIub24oJ3RleHQnLCAgICAgdGhpcy5vblRleHQuYmluZCh0aGlzKSlcbiAgdGhpcy5wYXJzZXIub24oJ2NkYXRhJywgICAgdGhpcy5vbkNEQVRBLmJpbmQodGhpcykpXG4gIHRoaXMucGFyc2VyLm9uKCdlbmQnLCAgICAgIHRoaXMub25Eb25lLmJpbmQodGhpcykpXG4gIHRoaXMucGFyc2VyLm9uKCdlcnJvcicsICAgIHRoaXMub25FcnJvci5iaW5kKHRoaXMpKVxufVxuXG5EZXNlcmlhbGl6ZXIucHJvdG90eXBlLmRlc2VyaWFsaXplTWV0aG9kUmVzcG9uc2UgPSBmdW5jdGlvbihzdHJlYW0sIGNhbGxiYWNrKSB7XG4gIHZhciB0aGF0ID0gdGhpc1xuXG4gIHRoaXMuY2FsbGJhY2sgPSBmdW5jdGlvbihlcnJvciwgcmVzdWx0KSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBjYWxsYmFjayhlcnJvcilcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignUmVzcG9uc2UgaGFzIG1vcmUgdGhhbiBvbmUgcGFyYW0nKSlcbiAgICB9XG4gICAgZWxzZSBpZiAodGhhdC50eXBlICE9PSAnbWV0aG9kcmVzcG9uc2UnKSB7XG4gICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ05vdCBhIG1ldGhvZCByZXNwb25zZScpKVxuICAgIH1cbiAgICBlbHNlIGlmICghdGhhdC5yZXNwb25zZVR5cGUpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignSW52YWxpZCBtZXRob2QgcmVzcG9uc2UnKSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRbMF0pXG4gICAgfVxuICB9XG5cbiAgc3RyZWFtLnNldEVuY29kaW5nKHRoaXMuZW5jb2RpbmcpXG4gIHN0cmVhbS5vbignZXJyb3InLCB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKSlcbiAgc3RyZWFtLnBpcGUodGhpcy5wYXJzZXIpXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZGVzZXJpYWxpemVNZXRob2RDYWxsID0gZnVuY3Rpb24oc3RyZWFtLCBjYWxsYmFjaykge1xuICB2YXIgdGhhdCA9IHRoaXNcblxuICB0aGlzLmNhbGxiYWNrID0gZnVuY3Rpb24oZXJyb3IsIHJlc3VsdCkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgY2FsbGJhY2soZXJyb3IpXG4gICAgfVxuICAgIGVsc2UgaWYgKHRoYXQudHlwZSAhPT0gJ21ldGhvZGNhbGwnKSB7XG4gICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ05vdCBhIG1ldGhvZCBjYWxsJykpXG4gICAgfVxuICAgIGVsc2UgaWYgKCF0aGF0Lm1ldGhvZG5hbWUpIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignTWV0aG9kIGNhbGwgZGlkIG5vdCBjb250YWluIGEgbWV0aG9kIG5hbWUnKSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYWxsYmFjayhudWxsLCB0aGF0Lm1ldGhvZG5hbWUsIHJlc3VsdClcbiAgICB9XG4gIH1cblxuICBzdHJlYW0uc2V0RW5jb2RpbmcodGhpcy5lbmNvZGluZylcbiAgc3RyZWFtLm9uKCdlcnJvcicsIHRoaXMub25FcnJvci5iaW5kKHRoaXMpKVxuICBzdHJlYW0ucGlwZSh0aGlzLnBhcnNlcilcbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5vbkRvbmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoYXQgPSB0aGlzXG5cbiAgaWYgKCF0aGlzLmVycm9yKSB7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gbnVsbCB8fCB0aGlzLm1hcmtzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jYWxsYmFjayhuZXcgRXJyb3IoJ0ludmFsaWQgWE1MLVJQQyBtZXNzYWdlJykpXG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMucmVzcG9uc2VUeXBlID09PSAnZmF1bHQnKSB7XG4gICAgICB2YXIgY3JlYXRlRmF1bHQgPSBmdW5jdGlvbihmYXVsdCkge1xuICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ1hNTC1SUEMgZmF1bHQnICsgKGZhdWx0LmZhdWx0U3RyaW5nID8gJzogJyArIGZhdWx0LmZhdWx0U3RyaW5nIDogJycpKVxuICAgICAgICBlcnJvci5jb2RlID0gZmF1bHQuZmF1bHRDb2RlXG4gICAgICAgIGVycm9yLmZhdWx0Q29kZSA9IGZhdWx0LmZhdWx0Q29kZVxuICAgICAgICBlcnJvci5mYXVsdFN0cmluZyA9IGZhdWx0LmZhdWx0U3RyaW5nXG4gICAgICAgIHJldHVybiBlcnJvclxuICAgICAgfVxuICAgICAgdGhpcy5jYWxsYmFjayhjcmVhdGVGYXVsdCh0aGlzLnN0YWNrWzBdKSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmNhbGxiYWNrKHVuZGVmaW5lZCwgdGhpcy5zdGFjaylcbiAgICB9XG4gIH1cbn1cblxuLy8gVE9ETzpcbi8vIEVycm9yIGhhbmRsaW5nIG5lZWRzIGEgbGl0dGxlIHRoaW5raW5nLiBUaGVyZSBhcmUgdHdvIGRpZmZlcmVudCBraW5kcyBvZlxuLy8gZXJyb3JzOiBcbi8vICAgMS4gTG93IGxldmVsIGVycm9ycyBsaWtlIG5ldHdvcmssIHN0cmVhbSBvciB4bWwgZXJyb3JzLiBUaGVzZSBkb24ndFxuLy8gICAgICByZXF1aXJlIHNwZWNpYWwgdHJlYXRtZW50LiBUaGV5IG9ubHkgbmVlZCB0byBiZSBmb3J3YXJkZWQuIFRoZSBJT1xuLy8gICAgICBpcyBhbHJlYWR5IHN0b3BwZWQgaW4gdGhlc2UgY2FzZXMuIFxuLy8gICAyLiBQcm90b2NvbCBlcnJvcnM6IEludmFsaWQgdGFncywgaW52YWxpZCB2YWx1ZXMgJmMuIFRoZXNlIGhhcHBlbiBpblxuLy8gICAgICBvdXIgY29kZSBhbmQgd2Ugc2hvdWxkIHRlYXIgZG93biB0aGUgSU8gYW5kIHN0b3AgcGFyc2luZy5cbi8vIEN1cnJlbnRseSBhbGwgZXJyb3JzIGVuZCBoZXJlLiBHdWVzcyBJJ2xsIHNwbGl0IGl0IHVwLiBcbkRlc2VyaWFsaXplci5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uKG1zZykge1xuICBpZiAoIXRoaXMuZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBuZXcgRXJyb3IobXNnKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBtc2dcbiAgICB9XG4gICAgdGhpcy5jYWxsYmFjayh0aGlzLmVycm9yKVxuICB9XG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHRoaXMuc3RhY2sucHVzaCh2YWx1ZSlcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFNBWCBIYW5kbGVyc1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5vbk9wZW50YWcgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmIChub2RlLm5hbWUgPT09ICdBUlJBWScgfHwgbm9kZS5uYW1lID09PSAnU1RSVUNUJykge1xuICAgIHRoaXMubWFya3MucHVzaCh0aGlzLnN0YWNrLmxlbmd0aClcbiAgfVxuICB0aGlzLmRhdGEgPSBbXVxuICB0aGlzLnZhbHVlID0gKG5vZGUubmFtZSA9PT0gJ1ZBTFVFJylcbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5vblRleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRoaXMuZGF0YS5wdXNoKHRleHQpXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUub25DREFUQSA9IGZ1bmN0aW9uKGNkYXRhKSB7XG4gIHRoaXMuZGF0YS5wdXNoKGNkYXRhKVxufVxuXG5EZXNlcmlhbGl6ZXIucHJvdG90eXBlLm9uQ2xvc2V0YWcgPSBmdW5jdGlvbihlbCkge1xuICB2YXIgZGF0YSA9IHRoaXMuZGF0YS5qb2luKCcnKVxuICB0cnkge1xuICAgIHN3aXRjaChlbCkge1xuICAgICAgY2FzZSAnQk9PTEVBTic6XG4gICAgICAgIHRoaXMuZW5kQm9vbGVhbihkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnSU5UJzpcbiAgICAgIGNhc2UgJ0k0JzpcbiAgICAgICAgdGhpcy5lbmRJbnQoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ0k4JzpcbiAgICAgICAgdGhpcy5lbmRJOChkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnRE9VQkxFJzpcbiAgICAgICAgdGhpcy5lbmREb3VibGUoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ1NUUklORyc6XG4gICAgICBjYXNlICdOQU1FJzpcbiAgICAgICAgdGhpcy5lbmRTdHJpbmcoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ0FSUkFZJzpcbiAgICAgICAgdGhpcy5lbmRBcnJheShkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnU1RSVUNUJzpcbiAgICAgICAgdGhpcy5lbmRTdHJ1Y3QoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ0JBU0U2NCc6XG4gICAgICAgIHRoaXMuZW5kQmFzZTY0KGRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdEQVRFVElNRS5JU084NjAxJzpcbiAgICAgICAgdGhpcy5lbmREYXRlVGltZShkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnVkFMVUUnOlxuICAgICAgICB0aGlzLmVuZFZhbHVlKGRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdQQVJBTVMnOlxuICAgICAgICB0aGlzLmVuZFBhcmFtcyhkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnRkFVTFQnOlxuICAgICAgICB0aGlzLmVuZEZhdWx0KGRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdNRVRIT0RSRVNQT05TRSc6XG4gICAgICAgIHRoaXMuZW5kTWV0aG9kUmVzcG9uc2UoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ01FVEhPRE5BTUUnOlxuICAgICAgICB0aGlzLmVuZE1ldGhvZE5hbWUoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ01FVEhPRENBTEwnOlxuICAgICAgICB0aGlzLmVuZE1ldGhvZENhbGwoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ05JTCc6XG4gICAgICAgIHRoaXMuZW5kTmlsKGRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdEQVRBJzpcbiAgICAgIGNhc2UgJ1BBUkFNJzpcbiAgICAgIGNhc2UgJ01FTUJFUic6XG4gICAgICAgIC8vIElnbm9yZWQgYnkgZGVzaWduXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLm9uRXJyb3IoJ1Vua25vd24gWE1MLVJQQyB0YWcgXFwnJyArIGVsICsgJ1xcJycpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgdGhpcy5vbkVycm9yKGUpXG4gIH1cbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5lbmROaWwgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMucHVzaChudWxsKVxuICB0aGlzLnZhbHVlID0gZmFsc2Vcbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5lbmRCb29sZWFuID0gZnVuY3Rpb24oZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gJzEnKSB7XG4gICAgdGhpcy5wdXNoKHRydWUpXG4gIH1cbiAgZWxzZSBpZiAoZGF0YSA9PT0gJzAnKSB7XG4gICAgdGhpcy5wdXNoKGZhbHNlKVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBib29sZWFuIHZhbHVlIFxcJycgKyBkYXRhICsgJ1xcJycpXG4gIH1cbiAgdGhpcy52YWx1ZSA9IGZhbHNlXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kSW50ID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgdmFsdWUgPSBwYXJzZUludChkYXRhLCAxMClcbiAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYW4gaW50ZWdlciBidXQgZ290IFxcJycgKyBkYXRhICsgJ1xcJycpXG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5wdXNoKHZhbHVlKVxuICAgIHRoaXMudmFsdWUgPSBmYWxzZVxuICB9XG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kRG91YmxlID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KGRhdGEpXG4gIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgZG91YmxlIGJ1dCBnb3QgXFwnJyArIGRhdGEgKyAnXFwnJylcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLnB1c2godmFsdWUpXG4gICAgdGhpcy52YWx1ZSA9IGZhbHNlXG4gIH1cbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5lbmRTdHJpbmcgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMucHVzaChkYXRhKVxuICB0aGlzLnZhbHVlID0gZmFsc2Vcbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5lbmRBcnJheSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdmFyIG1hcmsgPSB0aGlzLm1hcmtzLnBvcCgpXG4gIHRoaXMuc3RhY2suc3BsaWNlKG1hcmssIHRoaXMuc3RhY2subGVuZ3RoIC0gbWFyaywgdGhpcy5zdGFjay5zbGljZShtYXJrKSlcbiAgdGhpcy52YWx1ZSA9IGZhbHNlXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kU3RydWN0ID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgbWFyayA9IHRoaXMubWFya3MucG9wKClcbiAgICAsIHN0cnVjdCA9IHt9XG4gICAgLCBpdGVtcyA9IHRoaXMuc3RhY2suc2xpY2UobWFyaylcbiAgICAsIGkgPSAwXG5cbiAgZm9yICg7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHN0cnVjdFtpdGVtc1tpXV0gPSBpdGVtc1tpICsgMV1cbiAgfVxuICB0aGlzLnN0YWNrLnNwbGljZShtYXJrLCB0aGlzLnN0YWNrLmxlbmd0aCAtIG1hcmssIHN0cnVjdClcbiAgdGhpcy52YWx1ZSA9IGZhbHNlXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kQmFzZTY0ID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihkYXRhLCAnYmFzZTY0JylcbiAgdGhpcy5wdXNoKGJ1ZmZlcilcbiAgdGhpcy52YWx1ZSA9IGZhbHNlXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kRGF0ZVRpbWUgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHZhciBkYXRlID0gZGF0ZUZvcm1hdHRlci5kZWNvZGVJc284NjAxKGRhdGEpXG4gIHRoaXMucHVzaChkYXRlKVxuICB0aGlzLnZhbHVlID0gZmFsc2Vcbn1cblxudmFyIGlzSW50ZWdlciA9IC9eLT9cXGQrJC9cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kSTggPSBmdW5jdGlvbihkYXRhKSB7XG4gIGlmICghaXNJbnRlZ2VyLnRlc3QoZGF0YSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGludGVnZXIgKEk4KSB2YWx1ZSBidXQgZ290IFxcJycgKyBkYXRhICsgJ1xcJycpXG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5lbmRTdHJpbmcoZGF0YSlcbiAgfVxufVxuXG5EZXNlcmlhbGl6ZXIucHJvdG90eXBlLmVuZFZhbHVlID0gZnVuY3Rpb24oZGF0YSkge1xuICBpZiAodGhpcy52YWx1ZSkge1xuICAgIHRoaXMuZW5kU3RyaW5nKGRhdGEpXG4gIH1cbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5lbmRQYXJhbXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMucmVzcG9uc2VUeXBlID0gJ3BhcmFtcydcbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5lbmRGYXVsdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5yZXNwb25zZVR5cGUgPSAnZmF1bHQnXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kTWV0aG9kUmVzcG9uc2UgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMudHlwZSA9ICdtZXRob2RyZXNwb25zZSdcbn1cblxuRGVzZXJpYWxpemVyLnByb3RvdHlwZS5lbmRNZXRob2ROYW1lID0gZnVuY3Rpb24oZGF0YSkge1xuICB0aGlzLm1ldGhvZG5hbWUgPSBkYXRhXG59XG5cbkRlc2VyaWFsaXplci5wcm90b3R5cGUuZW5kTWV0aG9kQ2FsbCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy50eXBlID0gJ21ldGhvZGNhbGwnXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVzZXJpYWxpemVyXG5cbiIsICIvKipcbiAqIENyZWF0ZXMgb2JqZWN0IGZvciBjb29raWVzIG1hbmlwdWxhdGlvbiBvbiBjbGllbnQgc2lkZS5cbiAqIEFsbG93cyB0byBwYXJzZSBzZXJ2ZXIncyByZXNwb25zZSBpbiBvcmRlciB0byBnZXQgY29va2llcyBhbmQgY29tcG9zZSBodHRwIHJlcXVlc3QgdG8gdHJhbnNmZXIgY29va2llcyB0byB0aGUgc2VydmVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29va2llcygpIHtcbiAgdGhpcy5jb29raWVzID0ge31cbn1cblxuQ29va2llcy5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiBPYnRhaW5zIHZhbHVlIG9mIHRoZSBjb29raWUgd2l0aCBzcGVjaWZpZWQgbmFtZS5cbiAgICogVGhpcyBjYWxsIGNoZWNrcyBleHBpcmF0aW9uIGRhdGVzIGFuZCBkb2VzIG5vdCByZXR1cm4gZXhwaXJlZCBjb29raWVzLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBjb29raWUgbmFtZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGNvb2tpZSB2YWx1ZSBvciBudWxsXG4gICAqL1xuICBnZXQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgY29va2llID0gdGhpcy5jb29raWVzW25hbWVdXG4gICAgaWYgKGNvb2tpZSAmJiB0aGlzLmNoZWNrTm90RXhwaXJlZChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29va2llc1tuYW1lXS52YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGNvb2tpZSdzIHZhbHVlIGFuZCBvcHRpb25hbCBvcHRpb25zXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIGNvb2tpZSdzIG5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIHZhbHVlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHdpdGggdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gICAqICAtIHtCb29sZWFufSBzZWN1cmUgLSBpcyBjb29raWUgc2VjdXJlIG9yIG5vdCAoZG9lcyBub3QgbWVhbiBhbnl0aGluZyBmb3Igbm93KVxuICAgKiAgLSB7RGF0ZX0gZXhwaXJlcyAtIGNvb2tpZSdzIGV4cGlyYXRpb24gZGF0ZS4gSWYgc3BlY2lmaWVkIHRoZW4gY29va2llIHdpbGwgZGlzYXBwZWFyIGFmdGVyIHRoYXQgZGF0ZVxuICAgKi9cbiAgc2V0OiBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBjb29raWUgPSB0eXBlb2Ygb3B0aW9ucyA9PSAnb2JqZWN0J1xuICAgICAgICA/IHt2YWx1ZTogdmFsdWUsIGV4cGlyZXM6IG9wdGlvbnMuZXhwaXJlcywgc2VjdXJlOiBvcHRpb25zLnNlY3VyZSB8fCBmYWxzZSwgbmV3OiBvcHRpb25zLm5ldyB8fCBmYWxzZX1cbiAgICAgICAgOiB7dmFsdWU6IHZhbHVlfVxuICAgIGlmICh0aGlzLmNoZWNrTm90RXhwaXJlZChuYW1lLCBjb29raWUpKSB7XG4gICAgICB0aGlzLmNvb2tpZXNbbmFtZV0gPSBjb29raWVcbiAgICB9XG4gIH0sXG5cbiAgLy8gRm9yIHRlc3RpbmcgcHVycG9zZXNcbiAgZ2V0RXhwaXJhdGlvbkRhdGU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb29raWVzW25hbWVdID8gdGhpcy5jb29raWVzW25hbWVdLmV4cGlyZXMgOiBudWxsXG4gIH0sXG5cbiAgLy8gSW50ZXJuYWwgZnVuY3Rpb25cbiAgY2hlY2tOb3RFeHBpcmVkOiBmdW5jdGlvbihuYW1lLCBjb29raWUpIHtcbiAgICBpZiAodHlwZW9mIGNvb2tpZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvb2tpZSA9IHRoaXMuY29va2llc1tuYW1lXVxuICAgIH1cbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKVxuICAgIGlmIChjb29raWUgJiYgY29va2llLmV4cGlyZXMgJiYgbm93ID4gY29va2llLmV4cGlyZXMpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmNvb2tpZXNbbmFtZV1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuXG5cbiAgLyoqXG4gICAqIFBhcnNlcyBoZWFkZXJzIGZyb20gc2VydmVyJ3MgcmVzcG9uc2UgZm9yICdzZXQtY29va2llJyBoZWFkZXIgYW5kIHN0b3JlIGNvb2tpZSdzIHZhbHVlcy5cbiAgICogQWxzbyBwYXJzZXMgZXhwaXJhdGlvbiBkYXRlXG4gICAqIEBwYXJhbSBoZWFkZXJzXG4gICAqL1xuICBwYXJzZVJlc3BvbnNlOiBmdW5jdGlvbihoZWFkZXJzKSB7XG4gICAgdmFyIGNvb2tpZXMgPSBoZWFkZXJzWydzZXQtY29va2llJ11cbiAgICBpZiAoY29va2llcykge1xuICAgICAgY29va2llcy5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIGNvb2tpZXNQYXJhbXMgPSBjLnNwbGl0KCc7JylcbiAgICAgICAgdmFyIGNvb2tpZVBhaXIgPSBjb29raWVzUGFyYW1zLnNoaWZ0KCkuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHt9XG4gICAgICAgIGNvb2tpZXNQYXJhbXMuZm9yRWFjaChmdW5jdGlvbihwYXJhbSkge1xuICAgICAgICAgIHBhcmFtID0gcGFyYW0udHJpbSgpXG4gICAgICAgICAgaWYgKHBhcmFtLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZXhwaXJlcycpID09IDApIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gcGFyYW0uc3BsaXQoJz0nKVsxXS50cmltKClcbiAgICAgICAgICAgIG9wdGlvbnMuZXhwaXJlcyA9IG5ldyBEYXRlKGRhdGUpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnNldChjb29raWVQYWlyWzBdLnRyaW0oKSwgY29va2llUGFpclsxXS50cmltKCksIG9wdGlvbnMpXG4gICAgICB9LmJpbmQodGhpcykpXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGNvb2tpZXMgdG8gdGhlIHByb3ZpZGVkIGhlYWRlcnMgYXMgYXJyYXkuIERvZXMgbm90aGluZyBpZiB0aGVyZSBhcmUgbm8gY29va2llcyBzdG9yZWQuXG4gICAqIFRoaXMgY2FsbCBjaGVja3MgZXhwaXJhdGlvbiBkYXRlcyBhbmQgZG9lcyBub3QgYWRkIGV4cGlyZWQgY29va2llcy5cbiAgICogQHBhcmFtIGhlYWRlcnNcbiAgICovXG4gIGNvbXBvc2VSZXF1ZXN0OiBmdW5jdGlvbihoZWFkZXJzKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuY29va2llcykubGVuZ3RoID09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBoZWFkZXJzWydDb29raWUnXSA9IHRoaXMudG9TdHJpbmcoKVxuICB9LFxuXG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30gY29va2llcyBhcyAnbmFtZT12YWx1ZScgcGFpcnMgam9pbmVkIGJ5IHNlbWljb2xvblxuICAgKi9cbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmNvb2tpZXMpXG4gICAgICAuZmlsdGVyKHRoaXMuY2hlY2tOb3RFeHBpcmVkLmJpbmQodGhpcykpXG4gICAgICAubWFwKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiBuYW1lICsgJz0nICsgdGhpcy5jb29raWVzW25hbWVdLnZhbHVlXG4gICAgfS5iaW5kKHRoaXMpKS5qb2luKCc7JylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvb2tpZXNcbiIsICJ2YXIgaHR0cCAgICAgICAgID0gcmVxdWlyZSgnaHR0cCcpXG4gICwgaHR0cHMgICAgICAgID0gcmVxdWlyZSgnaHR0cHMnKVxuICAsIHVybCAgICAgICAgICA9IHJlcXVpcmUoJ3VybCcpXG4gICwgU2VyaWFsaXplciAgID0gcmVxdWlyZSgnLi9zZXJpYWxpemVyJylcbiAgLCBEZXNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL2Rlc2VyaWFsaXplcicpXG4gICwgQ29va2llcyAgICAgID0gcmVxdWlyZSgnLi9jb29raWVzJylcblxuLyoqXG4gKiBDcmVhdGVzIGEgQ2xpZW50IG9iamVjdCBmb3IgbWFraW5nIFhNTC1SUEMgbWV0aG9kIGNhbGxzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBvcHRpb25zIC0gU2VydmVyIG9wdGlvbnMgdG8gbWFrZSB0aGUgSFRUUCByZXF1ZXN0IHRvLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWl0aGVyIGEgVVJJIHN0cmluZ1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGUuZy4gJ2h0dHA6Ly9sb2NhbGhvc3Q6OTA5MCcpIG9yIGFuIG9iamVjdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBmaWVsZHM6XG4gKiAgIC0ge1N0cmluZ30gaG9zdCAgICAgICAgICAgICAgLSAob3B0aW9uYWwpXG4gKiAgIC0ge051bWJlcn0gcG9ydFxuICogICAtIHtTdHJpbmd9IHVybCAgICAgICAgICAgICAgIC0gKG9wdGlvbmFsKSAtIG1heSBiZSB1c2VkIGluc3RlYWQgb2YgaG9zdC9wb3J0IHBhaXJcbiAqICAgLSB7Qm9vbGVhbn0gY29va2llcyAgICAgICAgICAtIChvcHRpb25hbCkgLSBpZiB0cnVlIHRoZW4gY29va2llcyByZXR1cm5lZCBieSBzZXJ2ZXIgd2lsbCBiZSBzdG9yZWQgYW5kIHNlbnQgYmFjayBvbiB0aGUgbmV4dCBjYWxscy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsc28gaXQgd2lsbCBiZSBwb3NzaWJsZSB0byBhY2Nlc3MvbWFuaXB1bGF0ZSBjb29raWVzIHZpYSAjc2V0Q29va2llLyNnZXRDb29raWUgbWV0aG9kc1xuICogQHBhcmFtIHtCb29sZWFufSBpc1NlY3VyZSAgICAgIC0gVHJ1ZSBpZiB1c2luZyBodHRwcyBmb3IgbWFraW5nIGNhbGxzLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIGZhbHNlLlxuICogQHJldHVybiB7Q2xpZW50fVxuICovXG5mdW5jdGlvbiBDbGllbnQob3B0aW9ucywgaXNTZWN1cmUpIHtcblxuICAvLyBJbnZva2VzIHdpdGggbmV3IGlmIGNhbGxlZCB3aXRob3V0XG4gIGlmIChmYWxzZSA9PT0gKHRoaXMgaW5zdGFuY2VvZiBDbGllbnQpKSB7XG4gICAgcmV0dXJuIG5ldyBDbGllbnQob3B0aW9ucywgaXNTZWN1cmUpXG4gIH1cblxuICAvLyBJZiBhIHN0cmluZyBVUkkgaXMgcGFzc2VkIGluLCBjb252ZXJ0cyB0byBVUkkgZmllbGRzXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0gdXJsLnBhcnNlKG9wdGlvbnMpXG4gICAgb3B0aW9ucy5ob3N0ID0gb3B0aW9ucy5ob3N0bmFtZVxuICAgIG9wdGlvbnMucGF0aCA9IG9wdGlvbnMucGF0aG5hbWVcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy51cmwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHBhcnNlZFVybCA9IHVybC5wYXJzZShvcHRpb25zLnVybCk7XG4gICAgb3B0aW9ucy5ob3N0ID0gcGFyc2VkVXJsLmhvc3RuYW1lO1xuICAgIG9wdGlvbnMucGF0aCA9IHBhcnNlZFVybC5wYXRobmFtZTtcbiAgICBvcHRpb25zLnBvcnQgPSBwYXJzZWRVcmwucG9ydDtcbiAgfVxuXG4gIC8vIFNldCB0aGUgSFRUUCByZXF1ZXN0IGhlYWRlcnNcbiAgdmFyIGhlYWRlcnMgPSB7XG4gICAgJ1VzZXItQWdlbnQnICAgICA6ICdOb2RlSlMgWE1MLVJQQyBDbGllbnQnXG4gICwgJ0NvbnRlbnQtVHlwZScgICA6ICd0ZXh0L3htbCdcbiAgLCAnQWNjZXB0JyAgICAgICAgIDogJ3RleHQveG1sJ1xuICAsICdBY2NlcHQtQ2hhcnNldCcgOiAnVVRGOCdcbiAgLCAnQ29ubmVjdGlvbicgICAgIDogJ0tlZXAtQWxpdmUnXG4gIH1cbiAgb3B0aW9ucy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9XG5cbiAgaWYgKG9wdGlvbnMuaGVhZGVycy5BdXRob3JpemF0aW9uID09IG51bGwgJiZcbiAgICAgIG9wdGlvbnMuYmFzaWNfYXV0aCAhPSBudWxsICYmXG4gICAgICBvcHRpb25zLmJhc2ljX2F1dGgudXNlciAhPSBudWxsICYmXG4gICAgICBvcHRpb25zLmJhc2ljX2F1dGgucGFzcyAhPSBudWxsKVxuICB7XG4gICAgdmFyIGF1dGggPSBvcHRpb25zLmJhc2ljX2F1dGgudXNlciArICc6JyArIG9wdGlvbnMuYmFzaWNfYXV0aC5wYXNzXG4gICAgb3B0aW9ucy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSAnQmFzaWMgJyArIG5ldyBCdWZmZXIoYXV0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gIH1cblxuICBmb3IgKHZhciBhdHRyaWJ1dGUgaW4gaGVhZGVycykge1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnNbYXR0cmlidXRlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLmhlYWRlcnNbYXR0cmlidXRlXSA9IGhlYWRlcnNbYXR0cmlidXRlXVxuICAgIH1cbiAgfVxuXG4gIG9wdGlvbnMubWV0aG9kID0gJ1BPU1QnXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcblxuICB0aGlzLmlzU2VjdXJlID0gaXNTZWN1cmVcbiAgdGhpcy5oZWFkZXJzUHJvY2Vzc29ycyA9IHtcbiAgICBwcm9jZXNzb3JzOiBbXSxcbiAgICBjb21wb3NlUmVxdWVzdDogZnVuY3Rpb24oaGVhZGVycykge1xuICAgICAgdGhpcy5wcm9jZXNzb3JzLmZvckVhY2goZnVuY3Rpb24ocCkge3AuY29tcG9zZVJlcXVlc3QoaGVhZGVycyk7fSlcbiAgICB9LFxuICAgIHBhcnNlUmVzcG9uc2U6IGZ1bmN0aW9uKGhlYWRlcnMpIHtcbiAgICAgIHRoaXMucHJvY2Vzc29ycy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtwLnBhcnNlUmVzcG9uc2UoaGVhZGVycyk7fSlcbiAgICB9XG4gIH07XG4gIGlmIChvcHRpb25zLmNvb2tpZXMpIHtcbiAgICB0aGlzLmNvb2tpZXMgPSBuZXcgQ29va2llcygpO1xuICAgIHRoaXMuaGVhZGVyc1Byb2Nlc3NvcnMucHJvY2Vzc29ycy51bnNoaWZ0KHRoaXMuY29va2llcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBNYWtlcyBhbiBYTUwtUlBDIGNhbGwgdG8gdGhlIHNlcnZlciBzcGVjaWZpZWQgYnkgdGhlIGNvbnN0cnVjdG9yJ3Mgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kICAgICAtIFRoZSBtZXRob2QgbmFtZS5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcyAgICAgIC0gUGFyYW1zIHRvIHNlbmQgaW4gdGhlIGNhbGwuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uKGVycm9yLCB2YWx1ZSkgeyAuLi4gfVxuICogICAtIHtPYmplY3R8bnVsbH0gZXJyb3IgICAgLSBBbnkgZXJyb3JzIHdoZW4gbWFraW5nIHRoZSBjYWxsLCBvdGhlcndpc2UgbnVsbC5cbiAqICAgLSB7bWl4ZWR9IHZhbHVlICAgICAgICAgIC0gVGhlIHZhbHVlIHJldHVybmVkIGluIHRoZSBtZXRob2QgcmVzcG9uc2UuXG4gKi9cbkNsaWVudC5wcm90b3R5cGUubWV0aG9kQ2FsbCA9IGZ1bmN0aW9uIG1ldGhvZENhbGwobWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIHZhciBvcHRpb25zICAgPSB0aGlzLm9wdGlvbnNcbiAgdmFyIHhtbCAgICAgICA9IFNlcmlhbGl6ZXIuc2VyaWFsaXplTWV0aG9kQ2FsbChtZXRob2QsIHBhcmFtcywgb3B0aW9ucy5lbmNvZGluZylcbiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuaXNTZWN1cmUgPyBodHRwcyA6IGh0dHBcblxuICBvcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSBCdWZmZXIuYnl0ZUxlbmd0aCh4bWwsICd1dGY4JylcbiAgdGhpcy5oZWFkZXJzUHJvY2Vzc29ycy5jb21wb3NlUmVxdWVzdChvcHRpb25zLmhlYWRlcnMpXG4gIHZhciByZXF1ZXN0ID0gdHJhbnNwb3J0LnJlcXVlc3Qob3B0aW9ucywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcblxuICAgIHZhciBib2R5ID0gW11cbiAgICByZXNwb25zZS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykgeyBib2R5LnB1c2goY2h1bmspIH0pXG5cbiAgICBmdW5jdGlvbiBfX2VucmljaEVycm9yIChlcnIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICdyZXEnLCB7IHZhbHVlOiByZXF1ZXN0IH0pXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyLCAncmVzJywgeyB2YWx1ZTogcmVzcG9uc2UgfSlcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnIsICdib2R5JywgeyB2YWx1ZTogYm9keS5qb2luKCcnKSB9KVxuICAgICAgcmV0dXJuIGVyclxuICAgIH1cblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09IDQwNCkge1xuICAgICAgY2FsbGJhY2soX19lbnJpY2hFcnJvcihuZXcgRXJyb3IoJ05vdCBGb3VuZCcpKSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmhlYWRlcnNQcm9jZXNzb3JzLnBhcnNlUmVzcG9uc2UocmVzcG9uc2UuaGVhZGVycylcblxuICAgICAgdmFyIGRlc2VyaWFsaXplciA9IG5ldyBEZXNlcmlhbGl6ZXIob3B0aW9ucy5yZXNwb25zZUVuY29kaW5nKVxuXG4gICAgICBkZXNlcmlhbGl6ZXIuZGVzZXJpYWxpemVNZXRob2RSZXNwb25zZShyZXNwb25zZSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGVyciA9IF9fZW5yaWNoRXJyb3IoZXJyKVxuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0KVxuICAgICAgfSlcbiAgICB9XG4gIH0uYmluZCh0aGlzKSlcblxuICByZXF1ZXN0Lm9uKCdlcnJvcicsIGNhbGxiYWNrKVxuICByZXF1ZXN0LndyaXRlKHhtbCwgJ3V0ZjgnKVxuICByZXF1ZXN0LmVuZCgpXG59XG5cbi8qKlxuICogR2V0cyB0aGUgY29va2llIHZhbHVlIGJ5IGl0cyBuYW1lLiBUaGUgbGF0ZXN0IHZhbHVlIHJlY2VpdmVkIGZyb20gc2VydnIgd2l0aCAnU2V0LUNvb2tpZScgaGVhZGVyIGlzIHJldHVybmVkXG4gKiBOb3RlIHRoYXQgbWV0aG9kIHRocm93cyBhbiBlcnJvciBpZiBjb29raWVzIHdlcmUgbm90IHR1cm5lZCBvbiBkdXJpbmcgY2xpZW50IGNyZWF0aW9uIChzZWUgY29tbWVudHMgZm9yIGNvbnN0cnVjdG9yKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGNvb2tpZSB0byBiZSBvYnRhaW5lZCBvciBjaGFuZ2VkXG4gKiBAcmV0dXJuIHsqfSBjb29raWUncyB2YWx1ZVxuICovXG5DbGllbnQucHJvdG90eXBlLmdldENvb2tpZSA9IGZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7XG4gIGlmICghdGhpcy5jb29raWVzKSB7XG4gICAgdGhyb3cgJ0Nvb2tpZXMgc3VwcG9ydCBpcyBub3QgdHVybmVkIG9uIGZvciB0aGlzIGNsaWVudCBpbnN0YW5jZSc7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY29va2llcy5nZXQobmFtZSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgY29va2llIHZhbHVlIGJ5IGl0cyBuYW1lLiBUaGUgY29va2llIHdpbGwgYmUgc2VudCB0byB0aGUgc2VydmVyIGR1cmluZyB0aGUgbmV4dCB4bWwtcnBjIGNhbGwuXG4gKiBUaGUgbWV0aG9kIHJldHVybnMgY2xpZW50IGl0c2VsZiwgc28gaXQgaXMgcG9zc2libGUgdG8gY2hhaW4gY2FsbHMgbGlrZSB0aGUgZm9sbG93aW5nOlxuICpcbiAqIDxjb2RlPlxuICogICBjbGllbnQuY29va2llKCdsb2dpbicsICdhbGV4JykuY29va2llKCdwYXNzd29yZCcsICcxMjMnKTtcbiAqIDwvY29kZT5cbiAqXG4gKiBOb3RlIHRoYXQgbWV0aG9kIHRocm93cyBhbiBlcnJvciBpZiBjb29raWVzIHdlcmUgbm90IHR1cm5lZCBvbiBkdXJpbmcgY2xpZW50IGNyZWF0aW9uIChzZWUgY29tbWVudHMgZm9yIGNvbnN0cnVjdG9yKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGNvb2tpZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgdmFsdWUgdG8gYmUgc2V0LlxuICogQHJldHVybiB7Kn0gY2xpZW50IG9iamVjdCBpdHNlbGZcbiAqL1xuQ2xpZW50LnByb3RvdHlwZS5zZXRDb29raWUgPSBmdW5jdGlvbiBzZXRDb29raWUobmFtZSwgdmFsdWUpIHtcbiAgaWYgKCF0aGlzLmNvb2tpZXMpIHtcbiAgICB0aHJvdyAnQ29va2llcyBzdXBwb3J0IGlzIG5vdCB0dXJuZWQgb24gZm9yIHRoaXMgY2xpZW50IGluc3RhbmNlJztcbiAgfVxuICB0aGlzLmNvb2tpZXMuc2V0KG5hbWUsIHZhbHVlKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpZW50XG5cbiIsICJ2YXIgaHR0cCAgICAgICAgICAgICA9IHJlcXVpcmUoJ2h0dHAnKVxuICAsIGh0dHBzICAgICAgICAgICAgPSByZXF1aXJlKCdodHRwcycpXG4gICwgdXJsICAgICAgICAgICAgICA9IHJlcXVpcmUoJ3VybCcpXG4gICwgRXZlbnRFbWl0dGVyICAgICA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIFNlcmlhbGl6ZXIgICAgICAgPSByZXF1aXJlKCcuL3NlcmlhbGl6ZXInKVxuICAsIERlc2VyaWFsaXplciAgICAgPSByZXF1aXJlKCcuL2Rlc2VyaWFsaXplcicpXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTZXJ2ZXIgb2JqZWN0LiBBbHNvIGNyZWF0ZXMgYW4gSFRUUCBzZXJ2ZXIgdG8gc3RhcnQgbGlzdGVuaW5nXG4gKiBmb3IgWE1MLVJQQyBtZXRob2QgY2FsbHMuIFdpbGwgZW1pdCBhbiBldmVudCB3aXRoIHRoZSBYTUwtUlBDIGNhbGwncyBtZXRob2RcbiAqIG5hbWUgd2hlbiByZWNlaXZpbmcgYSBtZXRob2QgY2FsbC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gb3B0aW9ucyAtIFRoZSBIVFRQIHNlcnZlciBvcHRpb25zLiBFaXRoZXIgYSBVUkkgc3RyaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZS5nLiAnaHR0cDovL2xvY2FsaG9zdDo5MDkwJykgb3IgYW4gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGZpZWxkczpcbiAqICAgLSB7U3RyaW5nfSBob3N0ICAgICAgICAgICAgICAtIChvcHRpb25hbClcbiAqICAgLSB7TnVtYmVyfSBwb3J0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzU2VjdXJlICAgICAgLSBUcnVlIGlmIHVzaW5nIGh0dHBzIGZvciBtYWtpbmcgY2FsbHMsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgZmFsc2UuXG4gKiBAcmV0dXJuIHtTZXJ2ZXJ9XG4gKi9cbmZ1bmN0aW9uIFNlcnZlcihvcHRpb25zLCBpc1NlY3VyZSwgb25MaXN0ZW5pbmcpIHtcblxuICBpZiAoZmFsc2UgPT09ICh0aGlzIGluc3RhbmNlb2YgU2VydmVyKSkge1xuICAgIHJldHVybiBuZXcgU2VydmVyKG9wdGlvbnMsIGlzU2VjdXJlKVxuICB9XG4gIG9uTGlzdGVuaW5nID0gb25MaXN0ZW5pbmcgfHwgZnVuY3Rpb24oKSB7fVxuICB2YXIgdGhhdCA9IHRoaXNcblxuICAvLyBJZiBhIHN0cmluZyBVUkkgaXMgcGFzc2VkIGluLCBjb252ZXJ0cyB0byBVUkkgZmllbGRzXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0gdXJsLnBhcnNlKG9wdGlvbnMpXG4gICAgb3B0aW9ucy5ob3N0ID0gb3B0aW9ucy5ob3N0bmFtZVxuICAgIG9wdGlvbnMucGF0aCA9IG9wdGlvbnMucGF0aG5hbWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU1ldGhvZENhbGwocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgICB2YXIgZGVzZXJpYWxpemVyID0gbmV3IERlc2VyaWFsaXplcigpXG4gICAgZGVzZXJpYWxpemVyLmRlc2VyaWFsaXplTWV0aG9kQ2FsbChyZXF1ZXN0LCBmdW5jdGlvbihlcnJvciwgbWV0aG9kTmFtZSwgcGFyYW1zKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoYXQuX2V2ZW50cywgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgdGhhdC5lbWl0KG1ldGhvZE5hbWUsIG51bGwsIHBhcmFtcywgZnVuY3Rpb24oZXJyb3IsIHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHhtbCA9IG51bGxcbiAgICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHhtbCA9IFNlcmlhbGl6ZXIuc2VyaWFsaXplRmF1bHQoZXJyb3IpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeG1sID0gU2VyaWFsaXplci5zZXJpYWxpemVNZXRob2RSZXNwb25zZSh2YWx1ZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcG9uc2Uud3JpdGVIZWFkKDIwMCwgeydDb250ZW50LVR5cGUnOiAndGV4dC94bWwnfSlcbiAgICAgICAgICByZXNwb25zZS5lbmQoeG1sKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoYXQuZW1pdCgnTm90Rm91bmQnLCBtZXRob2ROYW1lLCBwYXJhbXMpXG4gICAgICAgIHJlc3BvbnNlLndyaXRlSGVhZCg0MDQpXG4gICAgICAgIHJlc3BvbnNlLmVuZCgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuaHR0cFNlcnZlciA9IGlzU2VjdXJlID8gaHR0cHMuY3JlYXRlU2VydmVyKG9wdGlvbnMsIGhhbmRsZU1ldGhvZENhbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBodHRwLmNyZWF0ZVNlcnZlcihoYW5kbGVNZXRob2RDYWxsKVxuXG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5odHRwU2VydmVyLmxpc3RlbihvcHRpb25zLnBvcnQsIG9wdGlvbnMuaG9zdCwgb25MaXN0ZW5pbmcpXG4gIH0uYmluZCh0aGlzKSlcbiAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5odHRwU2VydmVyLm9uY2UoJ2Nsb3NlJywgY2FsbGJhY2spXG4gICAgdGhpcy5odHRwU2VydmVyLmNsb3NlKClcbiAgfS5iaW5kKHRoaXMpXG59XG5cbi8vIEluaGVyaXQgZnJvbSBFdmVudEVtaXR0ZXIgdG8gZW1pdCBhbmQgbGlzdGVuXG5TZXJ2ZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGVcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2ZXJcblxuIiwgInZhciBDbGllbnQgPSByZXF1aXJlKCcuL2NsaWVudCcpXG4gICwgU2VydmVyID0gcmVxdWlyZSgnLi9zZXJ2ZXInKVxuICAsIEN1c3RvbVR5cGUgPSByZXF1aXJlKCcuL2N1c3RvbXR5cGUnKVxuICAsIGRhdGVGb3JtYXR0ZXIgPSByZXF1aXJlKCcuL2RhdGVfZm9ybWF0dGVyJylcblxudmFyIHhtbHJwYyA9IGV4cG9ydHNcblxuLyoqXG4gKiBDcmVhdGVzIGFuIFhNTC1SUEMgY2xpZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gc2VydmVyIG9wdGlvbnMgdG8gbWFrZSB0aGUgSFRUUCByZXF1ZXN0IHRvXG4gKiAgIC0ge1N0cmluZ30gaG9zdFxuICogICAtIHtOdW1iZXJ9IHBvcnRcbiAqICAgLSB7U3RyaW5nfSB1cmxcbiAqICAgLSB7Qm9vbGVhbn0gY29va2llc1xuICogQHJldHVybiB7Q2xpZW50fVxuICogQHNlZSBDbGllbnRcbiAqL1xueG1scnBjLmNyZWF0ZUNsaWVudCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBDbGllbnQob3B0aW9ucywgZmFsc2UpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBYTUwtUlBDIGNsaWVudCB0aGF0IG1ha2VzIGNhbGxzIHVzaW5nIEhUVFBTLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gc2VydmVyIG9wdGlvbnMgdG8gbWFrZSB0aGUgSFRUUCByZXF1ZXN0IHRvXG4gKiAgIC0ge1N0cmluZ30gaG9zdFxuICogICAtIHtOdW1iZXJ9IHBvcnRcbiAqICAgLSB7U3RyaW5nfSB1cmxcbiAqICAgLSB7Qm9vbGVhbn0gY29va2llc1xuICogQHJldHVybiB7Q2xpZW50fVxuICogQHNlZSBDbGllbnRcbiAqL1xueG1scnBjLmNyZWF0ZVNlY3VyZUNsaWVudCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBDbGllbnQob3B0aW9ucywgdHJ1ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIFhNTC1SUEMgc2VydmVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fW9wdGlvbnMgLSB0aGUgSFRUUCBzZXJ2ZXIgb3B0aW9uc1xuICogICAtIHtTdHJpbmd9IGhvc3RcbiAqICAgLSB7TnVtYmVyfSBwb3J0XG4gKiBAcmV0dXJuIHtTZXJ2ZXJ9XG4gKiBAc2VlIFNlcnZlclxuICovXG54bWxycGMuY3JlYXRlU2VydmVyID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIG5ldyBTZXJ2ZXIob3B0aW9ucywgZmFsc2UsIGNhbGxiYWNrKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gWE1MLVJQQyBzZXJ2ZXIgdGhhdCB1c2VzIEhUVFBTLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fW9wdGlvbnMgLSB0aGUgSFRUUCBzZXJ2ZXIgb3B0aW9uc1xuICogICAtIHtTdHJpbmd9IGhvc3RcbiAqICAgLSB7TnVtYmVyfSBwb3J0XG4gKiBAcmV0dXJuIHtTZXJ2ZXJ9XG4gKiBAc2VlIFNlcnZlclxuICovXG54bWxycGMuY3JlYXRlU2VjdXJlU2VydmVyID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIG5ldyBTZXJ2ZXIob3B0aW9ucywgdHJ1ZSwgY2FsbGJhY2spXG59XG5cbnhtbHJwYy5DdXN0b21UeXBlID0gQ3VzdG9tVHlwZVxueG1scnBjLmRhdGVGb3JtYXR0ZXIgPSBkYXRlRm9ybWF0dGVyXG4iLCAiaW1wb3J0IHsgRWRpdG9yLCBNYXJrZG93blZpZXcsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUywgV29yZHByZXNzUGx1Z2luU2V0dGluZ3MsIFdvcmRwcmVzc1NldHRpbmdUYWIgfSBmcm9tICcuL3NldHRpbmdzJztcclxuaW1wb3J0IHsgYWRkSWNvbnMgfSBmcm9tICcuL2ljb25zJztcclxuaW1wb3J0IHsgV29yZFByZXNzUHVibGlzaFZpZXcsIFdvcmRQcmVzc1B1Ymxpc2hWaWV3VHlwZSB9IGZyb20gJy4vd3AtcHVibGlzaC12aWV3JztcclxuaW1wb3J0IHsgY3JlYXRlV29yZFByZXNzQ2xpZW50IH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29yZHByZXNzUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHJcblx0c2V0dGluZ3M6IFdvcmRwcmVzc1BsdWdpblNldHRpbmdzO1xyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnbG9hZGluZyBvYnNpZGlhbi13b3JkcHJlc3MgcGx1Z2luJyk7XHJcblxyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICB0aGlzLnJlZ2lzdGVyVmlldyhcclxuICAgICAgV29yZFByZXNzUHVibGlzaFZpZXdUeXBlLFxyXG4gICAgICBsZWFmID0+IG5ldyBXb3JkUHJlc3NQdWJsaXNoVmlldyhsZWFmLCB0aGlzKVxyXG4gICAgKTtcclxuXHJcbiAgICBhZGRJY29ucygpO1xyXG5cclxuICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dSaWJib25JY29uKSB7XHJcbiAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignd3AtbG9nbycsICdXb3JkUHJlc3MgUHVibGlzaCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLnRvZ2dsZVdvcmRQcmVzc1B1Ymxpc2hWaWV3KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAncHVibGlzaCcsXHJcblx0XHRcdG5hbWU6ICdQdWJsaXNoIGN1cnJlbnQgZG9jdW1lbnQnLFxyXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcclxuICAgICAgICBjb25zdCBjbGllbnQgPSBjcmVhdGVXb3JkUHJlc3NDbGllbnQodGhpcy5hcHAsIHRoaXMpO1xyXG4gICAgICAgIGlmIChjbGllbnQpIHtcclxuICAgICAgICAgIGNsaWVudC5uZXdQb3N0KCkudGhlbigpO1xyXG4gICAgICAgIH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBXb3JkcHJlc3NTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHR9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgdG9nZ2xlV29yZFByZXNzUHVibGlzaFZpZXcoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoV29yZFByZXNzUHVibGlzaFZpZXdUeXBlKTtcclxuICAgIGlmIChleGlzdGluZy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYoZXhpc3RpbmdbMF0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldFJpZ2h0TGVhZihmYWxzZSkuc2V0Vmlld1N0YXRlKHtcclxuICAgICAgdHlwZTogV29yZFByZXNzUHVibGlzaFZpZXdUeXBlLFxyXG4gICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZih0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFdvcmRQcmVzc1B1Ymxpc2hWaWV3VHlwZSlbMF0pO1xyXG4gIH1cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IFdvcmRwcmVzc1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gQXBpVHlwZSB7XHJcbiAgWE1MX1JQQyA9ICd4bWwtcnBjJyxcclxuICBSZXN0QVBJX0pldHBhY2sgPSAncmVzdGFwaS1qZXRwYWNrJ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvcmRwcmVzc1BsdWdpblNldHRpbmdzIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQVBJIHR5cGUuXHJcbiAgICovXHJcbiAgYXBpVHlwZTogQXBpVHlwZTtcclxuXHJcbiAgLyoqXHJcbiAgICogRW5kcG9pbnQuXHJcbiAgICovXHJcbiAgZW5kcG9pbnQ6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogV29yZFByZXNzIHVzZXIgbmFtZS5cclxuICAgKi9cclxuICB1c2VyTmFtZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZSB1c2VyIG5hbWUgdG8gbG9jYWwgZGF0YS5cclxuICAgKi9cclxuICBzYXZlVXNlck5hbWU6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgcGx1Z2luIGljb24gaW4gc2lkZS5cclxuICAgKi9cclxuICBzaG93UmliYm9uSWNvbjogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFdvcmRwcmVzc1BsdWdpblNldHRpbmdzID0ge1xyXG4gIGFwaVR5cGU6IEFwaVR5cGUuWE1MX1JQQyxcclxuICBlbmRwb2ludDogJycsXHJcbiAgc2F2ZVVzZXJOYW1lOiBmYWxzZSxcclxuICBzaG93UmliYm9uSWNvbjogZmFsc2VcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdvcmRwcmVzc1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHJcblx0Y29uc3RydWN0b3IoXHJcbiAgICBhcHA6IEFwcCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuICApIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnU2V0dGluZ3MgZm9yIFdvcmRQcmVzcyBQdWJsaXNoIHBsdWdpbid9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1dvcmRQcmVzcyBVUkwnKVxyXG5cdFx0XHQuc2V0RGVzYygnRnVsbCBwYXRoIG9mIGluc3RhbGxlZCBXb3JkUHJlc3MsIGZvciBleGFtcGxlLCBodHRwczovL2V4YW1wbGUuY29tL3dvcmRwcmVzcycpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignaHR0cHM6Ly9leGFtcGxlLmNvbS93b3JkcHJlc3MnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRwb2ludClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRwb2ludCA9IHZhbHVlO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0XHR9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ0FQSSBUeXBlJylcclxuICAgICAgLnNldERlc2MoYFNlbGVjdCB3aGljaCBBUEkgeW91IHdhbnQgdG8gdXNlLlxyXG4tIFhNTC1SUEM6IEVuYWJsZWQgYnkgZGVmYXVsdCBidXQgc29tZSBob3N0IG1heSBkaXNhYmxlIGl0XHJcbi0gUkVTVGZ1bCBBUEkgd2l0aCBKZXRwYWNrYClcclxuICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAuYWRkT3B0aW9uKEFwaVR5cGUuWE1MX1JQQywgJ1hNTC1SUEMnKVxyXG4gICAgICAgICAgLmFkZE9wdGlvbihBcGlUeXBlLlJlc3RBUElfSmV0cGFjaywgJ1JFU1RmdWwgQVBJIHdpdGggSmV0cGFjaycpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpVHlwZSlcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IEFwaVR5cGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpVHlwZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpVHlwZSA9PT0gQXBpVHlwZS5YTUxfUlBDKSB7XHJcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdTYXZlIFVzZXIgTmFtZScpXHJcbiAgICAgICAgLnNldERlc2MoYElmIGVuYWJsZWQsIHRoZSBXb3JkUHJlc3MgdXNlciBuYW1lIHlvdSB0eXBlZCB3aWxsIGJlIHNhdmVkIGluIGxvY2FsIGRhdGEuXHJcblRoaXMgbWlnaHQgYmUgdXNlciBuYW1lIGRpc2Nsb3N1cmUgaW4gc3luY2hyb25pemUgc2VydmljZXMuYClcclxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVVc2VyTmFtZSlcclxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVVc2VyTmFtZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICApO1xyXG4gICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZVVzZXJOYW1lKSB7XHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAuc2V0TmFtZSgnV29yZFByZXNzIFVzZXIgTmFtZScpXHJcbiAgICAgICAgICAuc2V0RGVzYygnVXNlciBuYW1lIG9mIFdvcmRQcmVzcycpXHJcbiAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdVc2VyIG5hbWUnKVxyXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlck5hbWUpXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VyTmFtZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZXJOYW1lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ1Nob3cgaWNvbiBpbiBzaWRlYmFyJylcclxuICAgICAgLnNldERlc2MoYElmIGVuYWJsZWQsIGEgYnV0dG9uIHdoaWNoIG9wZW5zIHB1Ymxpc2ggcGFuZWwgd2lsbCBiZSBhZGRlZCB0byB0aGUgT2JzaWRpYW4gc2lkZWJhci5cclxuQ2hhbmdlcyBvbmx5IHRha2UgZWZmZWN0IG9uIHJlbG9hZC5gKVxyXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd1JpYmJvbkljb24pXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dSaWJib25JY29uID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgIH0pLFxyXG4gICAgICApO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgYWRkSWNvbiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmV4cG9ydCBjb25zdCBpY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcclxuICAnd3AtbG9nbyc6IGBcclxuPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+XHJcbiAgPGcgZmlsbD1cImN1cnJlbnRDb2xvclwiPlxyXG4gICAgPHBhdGggZD1cIk0gNy4xMDkzNzUgNTAgQyA3LjEwOTM3NSA2Ni45NzY1NjIgMTYuOTc2NTYyIDgxLjY0ODQzOCAzMS4yODEyNSA4OC42MDE1NjIgTCAxMC44MjAzMTIgMzIuNTQyOTY5IEMgOC40NDE0MDYgMzcuODc4OTA2IDcuMTA5Mzc1IDQzLjc4MTI1IDcuMTA5Mzc1IDUwIFogTSA3LjEwOTM3NSA1MCBcIi8+XHJcbiAgICA8cGF0aCBkPVwiTSA3OC45NTcwMzEgNDcuODM1OTM4IEMgNzguOTU3MDMxIDQyLjUzNTE1NiA3Ny4wNTQ2ODggMzguODYzMjgxIDc1LjQyMTg3NSAzNi4wMDM5MDYgQyA3My4yNDYwOTQgMzIuNDcyNjU2IDcxLjIwNzAzMSAyOS40ODA0NjkgNzEuMjA3MDMxIDI1Ljk0NTMxMiBDIDcxLjIwNzAzMSAyMi4wMDM5MDYgNzQuMTk5MjE5IDE4LjMzMjAzMSA3OC40MTAxNTYgMTguMzMyMDMxIEMgNzguNjAxNTYyIDE4LjMzMjAzMSA3OC43ODEyNSAxOC4zNTU0NjkgNzguOTY4NzUgMTguMzY3MTg4IEMgNzEuMzM1OTM4IDExLjM3NSA2MS4xNjc5NjkgNy4xMDU0NjkgNTAgNy4xMDU0NjkgQyAzNS4wMTU2MjUgNy4xMDU0NjkgMjEuODMyMDMxIDE0Ljc5Njg3NSAxNC4xNjQwNjIgMjYuNDQxNDA2IEMgMTUuMTY3OTY5IDI2LjQ3MjY1NiAxNi4xMTcxODggMjYuNDkyMTg4IDE2LjkyMTg3NSAyNi40OTIxODggQyAyMS40MTAxNTYgMjYuNDkyMTg4IDI4LjM1NTQ2OSAyNS45NDkyMTkgMjguMzU1NDY5IDI1Ljk0OTIxOSBDIDMwLjY2Nzk2OSAyNS44MTI1IDMwLjk0MTQwNiAyOS4yMDcwMzEgMjguNjI4OTA2IDI5LjQ4MDQ2OSBDIDI4LjYyODkwNiAyOS40ODA0NjkgMjYuMzA0Njg4IDI5Ljc1MzkwNiAyMy43MjI2NTYgMjkuODkwNjI1IEwgMzkuMzM5ODQ0IDc2LjM1MTU2MiBMIDQ4LjcyNjU2MiA0OC4xOTkyMTkgTCA0Mi4wNDI5NjkgMjkuODg2NzE5IEMgMzkuNzM0Mzc1IDI5Ljc1MzkwNiAzNy41NDY4NzUgMjkuNDgwNDY5IDM3LjU0Njg3NSAyOS40ODA0NjkgQyAzNS4yMzQzNzUgMjkuMzQzNzUgMzUuNTA3ODEyIDI1LjgwODU5NCAzNy44MTY0MDYgMjUuOTQ1MzEyIEMgMzcuODE2NDA2IDI1Ljk0NTMxMiA0NC45MDIzNDQgMjYuNDkyMTg4IDQ5LjExNzE4OCAyNi40OTIxODggQyA1My42MDE1NjIgMjYuNDkyMTg4IDYwLjU0Njg3NSAyNS45NDUzMTIgNjAuNTQ2ODc1IDI1Ljk0NTMxMiBDIDYyLjg1OTM3NSAyNS44MDg1OTQgNjMuMTMyODEyIDI5LjIwNzAzMSA2MC44MjQyMTkgMjkuNDgwNDY5IEMgNjAuODI0MjE5IDI5LjQ4MDQ2OSA1OC40OTIxODggMjkuNzUzOTA2IDU1LjkxNDA2MiAyOS44ODY3MTkgTCA3MS40MTQwNjIgNzUuOTk2MDk0IEwgNzUuNjkxNDA2IDYxLjY5OTIxOSBDIDc3LjU0Njg3NSA1NS43NjU2MjUgNzguOTU3MDMxIDUxLjUwNzgxMiA3OC45NTcwMzEgNDcuODM1OTM4IFogTSA3OC45NTcwMzEgNDcuODM1OTM4IFwiLz5cclxuICAgIDxwYXRoIGQ9XCJNIDUwLjc1MzkwNiA1My43NSBMIDM3Ljg4MjgxMiA5MS4xNDg0MzggQyA0MS43MjY1NjIgOTIuMjc3MzQ0IDQ1Ljc4OTA2MiA5Mi44OTQ1MzEgNTAgOTIuODk0NTMxIEMgNTQuOTk2MDk0IDkyLjg5NDUzMSA1OS43ODUxNTYgOTIuMDMxMjUgNjQuMjQ2MDk0IDkwLjQ2NDg0NCBDIDY0LjEyODkwNiA5MC4yODEyNSA2NC4wMjczNDQgOTAuMDg1OTM4IDYzLjk0MTQwNiA4OS44NzEwOTQgWiBNIDUwLjc1MzkwNiA1My43NSBcIi8+XHJcbiAgICA8cGF0aCBkPVwiTSA4Ny42MzY3MTkgMjkuNDE3OTY5IEMgODcuODI0MjE5IDMwLjc4NTE1NiA4Ny45MjU3ODEgMzIuMjUzOTA2IDg3LjkyNTc4MSAzMy44MzIwMzEgQyA4Ny45MjU3ODEgMzguMTgzNTk0IDg3LjExMzI4MSA0My4wNzQyMTkgODQuNjY3OTY5IDQ5LjE5NTMxMiBMIDcxLjU2MjUgODcuMDc0MjE5IEMgODQuMzE2NDA2IDc5LjY0MDYyNSA5Mi44OTQ1MzEgNjUuODI0MjE5IDkyLjg5NDUzMSA1MCBDIDkyLjg5NDUzMSA0Mi41NDI5NjkgOTAuOTg4MjgxIDM1LjUzMTI1IDg3LjYzNjcxOSAyOS40MTc5NjkgWiBNIDg3LjYzNjcxOSAyOS40MTc5NjkgXCIvPlxyXG4gICAgPHBhdGggZD1cIk0gNTAgMCBDIDIyLjQzMzU5NCAwIDAgMjIuNDI5Njg4IDAgNTAgQyAwIDc3LjU3MDMxMiAyMi40MzM1OTQgMTAwIDUwIDEwMCBDIDc3LjU3MDMxMiAxMDAgMTAwLjAwMzkwNiA3Ny41NzAzMTIgMTAwLjAwMzkwNiA1MCBDIDEwMC4wMDM5MDYgMjIuNDI5Njg4IDc3LjU3MDMxMiAwIDUwIDAgWiBNIDUwIDk3LjcwNzAzMSBDIDIzLjY5NTMxMiA5Ny43MDcwMzEgMi4yOTI5NjkgNzYuMzA0Njg4IDIuMjkyOTY5IDUwIEMgMi4yOTI5NjkgMjMuNjk1MzEyIDIzLjY5NTMxMiAyLjI5Mjk2OSA1MCAyLjI5Mjk2OSBDIDc2LjMwNDY4OCAyLjI5Mjk2OSA5Ny43MDcwMzEgMjMuNjk1MzEyIDk3LjcwNzAzMSA1MCBDIDk3LjcwNzAzMSA3Ni4zMDQ2ODggNzYuMzA0Njg4IDk3LjcwNzAzMSA1MCA5Ny43MDcwMzEgWiBNIDUwIDk3LjcwNzAzMSBcIi8+XHJcbiAgPC9nPlxyXG48L3N2Zz5gXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZGRJY29ucyA9ICgpOiB2b2lkID0+IHtcclxuICBPYmplY3Qua2V5cyhpY29ucykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICBhZGRJY29uKGtleSwgaWNvbnNba2V5XSk7XHJcbiAgfSk7XHJcbn07XHJcbiIsICJpbXBvcnQgeyBCdXR0b25Db21wb25lbnQsIEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgV29yZHByZXNzUGx1Z2luIGZyb20gJy4vbWFpbic7XHJcbmltcG9ydCB7IGNyZWF0ZVdvcmRQcmVzc0NsaWVudCB9IGZyb20gJy4vd3AtY2xpZW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBXb3JkUHJlc3NQdWJsaXNoVmlld1R5cGUgPSAnd3AtcHVibGlzaC1vcHRpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBXb3JkUHJlc3NQdWJsaXNoVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBsZWFmOiBXb3Jrc3BhY2VMZWFmLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwbHVnaW46IFdvcmRwcmVzc1BsdWdpblxyXG4gICkge1xyXG4gICAgc3VwZXIobGVhZik7XHJcbiAgfVxyXG5cclxuICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdXb3JkUHJlc3MgUHVibGlzaCc7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFdvcmRQcmVzc1B1Ymxpc2hWaWV3VHlwZTtcclxuICB9XHJcblxyXG4gIGdldEljb24oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAnd3AtbG9nbyc7XHJcbiAgfVxyXG5cclxuICBsb2FkKCk6IHZvaWQge1xyXG4gICAgc3VwZXIubG9hZCgpO1xyXG4gICAgdGhpcy5kcmF3KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRyYXcoKTogdm9pZCB7XHJcbiAgICBjb25zdCBhY3Rpb25CdXR0b25zQ29udHJvbERpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnKTtcclxuICAgIG5ldyBCdXR0b25Db21wb25lbnQoYWN0aW9uQnV0dG9uc0NvbnRyb2xEaXYpXHJcbiAgICAgIC5zZXRCdXR0b25UZXh0KCdQdWJsaXNoJylcclxuICAgICAgLnNldENsYXNzKCdtb2QtY3RhJylcclxuICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGNyZWF0ZVdvcmRQcmVzc0NsaWVudCh0aGlzLmFwcCwgdGhpcy5wbHVnaW4pO1xyXG4gICAgICAgIGlmIChjbGllbnQpIHtcclxuICAgICAgICAgIGNsaWVudC5uZXdQb3N0KCkudGhlbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBXb3JkcHJlc3NQbHVnaW4gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgQXBpVHlwZSB9IGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBXcFhtbFJwY0NsaWVudCB9IGZyb20gJy4vd3AteG1sLXJwYy1jbGllbnQnO1xyXG5pbXBvcnQgeyBXcFJlc3RKZXRwYWNrQ2xpZW50IH0gZnJvbSAnLi93cC1yZXN0LWpldHBhY2stY2xpZW50JztcclxuXHJcbmV4cG9ydCBlbnVtIFdvcmRQcmVzc0NsaWVudFJldHVybkNvZGUge1xyXG4gIE9LLFxyXG4gIEVycm9yXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29yZFByZXNzQ2xpZW50UmVzdWx0IHtcclxuICBjb2RlOiBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlO1xyXG4gIGRhdGE6IGFueTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvcmRQcmVzc0NsaWVudCB7XHJcbiAgbmV3UG9zdCgpOiBQcm9taXNlPFdvcmRQcmVzc0NsaWVudFJlc3VsdD47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVXb3JkUHJlc3NDbGllbnQoXHJcbiAgYXBwOiBBcHAsXHJcbiAgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuKTogV29yZFByZXNzQ2xpZW50IHwgbnVsbCB7XHJcbiAgY29uc3QgdHlwZSA9IHBsdWdpbi5zZXR0aW5ncy5hcGlUeXBlO1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSBBcGlUeXBlLlhNTF9SUEM6XHJcbiAgICAgIHJldHVybiBuZXcgV3BYbWxScGNDbGllbnQoYXBwLCBwbHVnaW4pO1xyXG4gICAgY2FzZSBBcGlUeXBlLlJlc3RBUElfSmV0cGFjazpcclxuICAgICAgcmV0dXJuIG5ldyBXcFJlc3RKZXRwYWNrQ2xpZW50KGFwcCwgcGx1Z2luKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBoYXBwZW4hXHJcbiAgICAgIG5ldyBOb3RpY2UoJ05vIGFwcHJvdmVkIFdvcmRQcmVzcyBBUEkuXFxuUGxlYXNlIGNoZWNrIGl0IGluIHNldHRpbmdzLicpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7IFdvcmRQcmVzc0NsaWVudCwgV29yZFByZXNzQ2xpZW50UmVzdWx0LCBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlIH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5pbXBvcnQgeyBDbGllbnQsIGNyZWF0ZUNsaWVudCwgY3JlYXRlU2VjdXJlQ2xpZW50IH0gZnJvbSAneG1scnBjJztcclxuaW1wb3J0IHsgQXBwLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBXb3JkcHJlc3NQbHVnaW4gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgbWFya2VkIH0gZnJvbSAnbWFya2VkJztcclxuXHJcbmV4cG9ydCBjbGFzcyBXcFhtbFJwY0NsaWVudCBpbXBsZW1lbnRzIFdvcmRQcmVzc0NsaWVudCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50OiBDbGllbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBhcHA6IEFwcCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuICApIHtcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocGx1Z2luLnNldHRpbmdzLmVuZHBvaW50KTtcclxuICAgIGNvbnNvbGUubG9nKHVybCk7XHJcbiAgICBpZiAodXJsLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xyXG4gICAgICB0aGlzLmNsaWVudCA9IGNyZWF0ZVNlY3VyZUNsaWVudCh7XHJcbiAgICAgICAgaG9zdDogdXJsLmhvc3RuYW1lLFxyXG4gICAgICAgIHBvcnQ6IDQ0MyxcclxuICAgICAgICBwYXRoOiBgJHt1cmwucGF0aG5hbWV9eG1scnBjLnBocGBcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsaWVudCA9IGNyZWF0ZUNsaWVudCh7XHJcbiAgICAgICAgaG9zdDogdXJsLmhvc3RuYW1lLFxyXG4gICAgICAgIHBvcnQ6IDgwLFxyXG4gICAgICAgIHBhdGg6IGAke3VybC5wYXRobmFtZX14bWxycGMucGhwYFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5ld1Bvc3QoKTogUHJvbWlzZTxXb3JkUHJlc3NDbGllbnRSZXN1bHQ+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgd29ya3NwYWNlIH0gPSB0aGlzLmFwcDtcclxuICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHdvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcbiAgICAgIGlmIChhY3RpdmVWaWV3KSB7XHJcbiAgICAgICAgbmV3IFdwTG9naW5Nb2RhbChcclxuICAgICAgICAgIHRoaXMuYXBwLFxyXG4gICAgICAgICAgdGhpcy5wbHVnaW4sXHJcbiAgICAgICAgICAodXNlck5hbWUsIHBhc3N3b3JkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gYWN0aXZlVmlldy5maWxlLmJhc2VuYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYWN0aXZlVmlldy5nZXRWaWV3RGF0YSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNsaWVudC5tZXRob2RDYWxsKCd3cC5uZXdQb3N0JywgW1xyXG4gICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgdXNlck5hbWUsXHJcbiAgICAgICAgICAgICAgcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcG9zdF90eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICBwb3N0X3N0YXR1czogJ2RyYWZ0JyxcclxuICAgICAgICAgICAgICAgIHBvc3RfdGl0bGU6IHRpdGxlID8/ICdBIHBvc3QgZnJvbSBPYnNpZGlhbiEnLFxyXG4gICAgICAgICAgICAgICAgcG9zdF9jb250ZW50OiBtYXJrZWQucGFyc2UoY29udGVudCkgPz8gJycsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLCAoZXJyb3I6IEVycm9yLCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNZXRob2QgcmVzcG9uc2UgZm9yIFxcJ3dwLm5ld1Bvc3RcXCc6ICcsIHZhbHVlLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBbRXJyb3JdICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1Bvc3QgcHVibGlzaGVkIHN1Y2Nlc3NmdWxseSEnKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgICBjb2RlOiBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlLk9LLFxyXG4gICAgICAgICAgICAgICAgICBkYXRhOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApLm9wZW4oKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBlcnJvciA9ICdUaGVyZSBpcyBubyBlZGl0b3IgZm91bmQuIE5vdGhpbmcgd2lsbCBiZSBwdWJsaXNoZWQuJztcclxuICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyb3IpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuY2xhc3MgV3BMb2dpbk1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGFwcDogQXBwLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwbHVnaW46IFdvcmRwcmVzc1BsdWdpbixcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgb25TdWJtaXQ6ICh1c2VyTmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB2b2lkXHJcbiAgKSB7XHJcbiAgICBzdXBlcihhcHApO1xyXG4gIH1cclxuXHJcbiAgb25PcGVuKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblxyXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogJ1dvcmRQcmVzcyBMb2dpbicgfSk7XHJcblxyXG4gICAgbGV0IHBhc3N3b3JkID0gJyc7XHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdVc2VyIE5hbWUnKVxyXG4gICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlck5hbWUgPz8gJycpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVVc2VyTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VyTmFtZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdQYXNzd29yZCcpXHJcbiAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHBhc3N3b3JkID0gdmFsdWU7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cclxuICAgICAgICAuc2V0QnV0dG9uVGV4dCgnUHVibGlzaCcpXHJcbiAgICAgICAgLnNldENsYXNzKCdtb2QtY3RhJylcclxuICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9uU3VibWl0KHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZXJOYW1lLCBwYXNzd29yZCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIG9uQ2xvc2UoKSB7XHJcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gIH1cclxufVxyXG4iLCAiLyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMjEsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkXG4gKi9cblxuLyoqXG4gKiBETyBOT1QgRURJVCBUSElTIEZJTEVcbiAqIFRoZSBjb2RlIGluIHRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBmaWxlcyBpbiAuL3NyYy9cbiAqL1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0cygpIHtcbiAgcmV0dXJuIHtcbiAgICBiYXNlVXJsOiBudWxsLFxuICAgIGJyZWFrczogZmFsc2UsXG4gICAgZXh0ZW5zaW9uczogbnVsbCxcbiAgICBnZm06IHRydWUsXG4gICAgaGVhZGVySWRzOiB0cnVlLFxuICAgIGhlYWRlclByZWZpeDogJycsXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuICAgIGxhbmdQcmVmaXg6ICdsYW5ndWFnZS0nLFxuICAgIG1hbmdsZTogdHJ1ZSxcbiAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgcmVuZGVyZXI6IG51bGwsXG4gICAgc2FuaXRpemU6IGZhbHNlLFxuICAgIHNhbml0aXplcjogbnVsbCxcbiAgICBzaWxlbnQ6IGZhbHNlLFxuICAgIHNtYXJ0TGlzdHM6IGZhbHNlLFxuICAgIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgICB0b2tlbml6ZXI6IG51bGwsXG4gICAgd2Fsa1Rva2VuczogbnVsbCxcbiAgICB4aHRtbDogZmFsc2VcbiAgfTtcbn1cblxubGV0IGRlZmF1bHRzID0gZ2V0RGVmYXVsdHMoKTtcblxuZnVuY3Rpb24gY2hhbmdlRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgZGVmYXVsdHMgPSBuZXdEZWZhdWx0cztcbn1cblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cbmNvbnN0IGVzY2FwZVRlc3QgPSAvWyY8PlwiJ10vO1xuY29uc3QgZXNjYXBlUmVwbGFjZSA9IC9bJjw+XCInXS9nO1xuY29uc3QgZXNjYXBlVGVzdE5vRW5jb2RlID0gL1s8PlwiJ118Jig/ISM/XFx3KzspLztcbmNvbnN0IGVzY2FwZVJlcGxhY2VOb0VuY29kZSA9IC9bPD5cIiddfCYoPyEjP1xcdys7KS9nO1xuY29uc3QgZXNjYXBlUmVwbGFjZW1lbnRzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnXG59O1xuY29uc3QgZ2V0RXNjYXBlUmVwbGFjZW1lbnQgPSAoY2gpID0+IGVzY2FwZVJlcGxhY2VtZW50c1tjaF07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCwgZW5jb2RlKSB7XG4gIGlmIChlbmNvZGUpIHtcbiAgICBpZiAoZXNjYXBlVGVzdC50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2UsIGdldEVzY2FwZVJlcGxhY2VtZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVzY2FwZVRlc3ROb0VuY29kZS50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2VOb0VuY29kZSwgZ2V0RXNjYXBlUmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBodG1sO1xufVxuXG5jb25zdCB1bmVzY2FwZVRlc3QgPSAvJigjKD86XFxkKyl8KD86I3hbMC05QS1GYS1mXSspfCg/OlxcdyspKTs/L2lnO1xuXG5mdW5jdGlvbiB1bmVzY2FwZShodG1sKSB7XG4gIC8vIGV4cGxpY2l0bHkgbWF0Y2ggZGVjaW1hbCwgaGV4LCBhbmQgbmFtZWQgSFRNTCBlbnRpdGllc1xuICByZXR1cm4gaHRtbC5yZXBsYWNlKHVuZXNjYXBlVGVzdCwgKF8sIG4pID0+IHtcbiAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChuID09PSAnY29sb24nKSByZXR1cm4gJzonO1xuICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICByZXR1cm4gbi5jaGFyQXQoMSkgPT09ICd4J1xuICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSlcbiAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKCtuLnN1YnN0cmluZygxKSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSk7XG59XG5cbmNvbnN0IGNhcmV0ID0gLyhefFteXFxbXSlcXF4vZztcbmZ1bmN0aW9uIGVkaXQocmVnZXgsIG9wdCkge1xuICByZWdleCA9IHJlZ2V4LnNvdXJjZSB8fCByZWdleDtcbiAgb3B0ID0gb3B0IHx8ICcnO1xuICBjb25zdCBvYmogPSB7XG4gICAgcmVwbGFjZTogKG5hbWUsIHZhbCkgPT4ge1xuICAgICAgdmFsID0gdmFsLnNvdXJjZSB8fCB2YWw7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZShjYXJldCwgJyQxJyk7XG4gICAgICByZWdleCA9IHJlZ2V4LnJlcGxhY2UobmFtZSwgdmFsKTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBnZXRSZWdleDogKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgsIG9wdCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub25Xb3JkQW5kQ29sb25UZXN0ID0gL1teXFx3Ol0vZztcbmNvbnN0IG9yaWdpbkluZGVwZW5kZW50VXJsID0gL14kfF5bYS16XVthLXowLTkrLi1dKjp8Xls/I10vaTtcbmZ1bmN0aW9uIGNsZWFuVXJsKHNhbml0aXplLCBiYXNlLCBocmVmKSB7XG4gIGlmIChzYW5pdGl6ZSkge1xuICAgIGxldCBwcm90O1xuICAgIHRyeSB7XG4gICAgICBwcm90ID0gZGVjb2RlVVJJQ29tcG9uZW50KHVuZXNjYXBlKGhyZWYpKVxuICAgICAgICAucmVwbGFjZShub25Xb3JkQW5kQ29sb25UZXN0LCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm90LmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCd2YnNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ2RhdGE6JykgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoYmFzZSAmJiAhb3JpZ2luSW5kZXBlbmRlbnRVcmwudGVzdChocmVmKSkge1xuICAgIGhyZWYgPSByZXNvbHZlVXJsKGJhc2UsIGhyZWYpO1xuICB9XG4gIHRyeSB7XG4gICAgaHJlZiA9IGVuY29kZVVSSShocmVmKS5yZXBsYWNlKC8lMjUvZywgJyUnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBocmVmO1xufVxuXG5jb25zdCBiYXNlVXJscyA9IHt9O1xuY29uc3QganVzdERvbWFpbiA9IC9eW146XSs6XFwvKlteL10qJC87XG5jb25zdCBwcm90b2NvbCA9IC9eKFteOl0rOilbXFxzXFxTXSokLztcbmNvbnN0IGRvbWFpbiA9IC9eKFteOl0rOlxcLypbXi9dKilbXFxzXFxTXSokLztcblxuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gIGlmICghYmFzZVVybHNbJyAnICsgYmFzZV0pIHtcbiAgICAvLyB3ZSBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgaW4gYmFzZSBhZnRlciB0aGUgbGFzdCBzbGFzaCBvZiBpdHMgcGF0aCBjb21wb25lbnQsXG4gICAgLy8gYnV0IHdlIG1pZ2h0IG5lZWQgdG8gYWRkIF90aGF0X1xuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tM1xuICAgIGlmIChqdXN0RG9tYWluLnRlc3QoYmFzZSkpIHtcbiAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVVybHNbJyAnICsgYmFzZV0gPSBydHJpbShiYXNlLCAnLycsIHRydWUpO1xuICAgIH1cbiAgfVxuICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG4gIGNvbnN0IHJlbGF0aXZlQmFzZSA9IGJhc2UuaW5kZXhPZignOicpID09PSAtMTtcblxuICBpZiAoaHJlZi5zdWJzdHJpbmcoMCwgMikgPT09ICcvLycpIHtcbiAgICBpZiAocmVsYXRpdmVCYXNlKSB7XG4gICAgICByZXR1cm4gaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShwcm90b2NvbCwgJyQxJykgKyBocmVmO1xuICB9IGVsc2UgaWYgKGhyZWYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICBpZiAocmVsYXRpdmVCYXNlKSB7XG4gICAgICByZXR1cm4gaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShkb21haW4sICckMScpICsgaHJlZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZSArIGhyZWY7XG4gIH1cbn1cblxuY29uc3Qgbm9vcFRlc3QgPSB7IGV4ZWM6IGZ1bmN0aW9uIG5vb3BUZXN0KCkge30gfTtcblxuZnVuY3Rpb24gbWVyZ2Uob2JqKSB7XG4gIGxldCBpID0gMSxcbiAgICB0YXJnZXQsXG4gICAga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBzcGxpdENlbGxzKHRhYmxlUm93LCBjb3VudCkge1xuICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAvLyBiZWZvcmUgaXQgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbSBhbiBlc2NhcGVkIHBpcGVcbiAgY29uc3Qgcm93ID0gdGFibGVSb3cucmVwbGFjZSgvXFx8L2csIChtYXRjaCwgb2Zmc2V0LCBzdHIpID0+IHtcbiAgICAgIGxldCBlc2NhcGVkID0gZmFsc2UsXG4gICAgICAgIGN1cnIgPSBvZmZzZXQ7XG4gICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICAgIC8vIG9kZCBudW1iZXIgb2Ygc2xhc2hlcyBtZWFucyB8IGlzIGVzY2FwZWRcbiAgICAgICAgLy8gc28gd2UgbGVhdmUgaXQgYWxvbmVcbiAgICAgICAgcmV0dXJuICd8JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFkZCBzcGFjZSBiZWZvcmUgdW5lc2NhcGVkIHxcbiAgICAgICAgcmV0dXJuICcgfCc7XG4gICAgICB9XG4gICAgfSksXG4gICAgY2VsbHMgPSByb3cuc3BsaXQoLyBcXHwvKTtcbiAgbGV0IGkgPSAwO1xuXG4gIC8vIEZpcnN0L2xhc3QgY2VsbCBpbiBhIHJvdyBjYW5ub3QgYmUgZW1wdHkgaWYgaXQgaGFzIG5vIGxlYWRpbmcvdHJhaWxpbmcgcGlwZVxuICBpZiAoIWNlbGxzWzBdLnRyaW0oKSkgeyBjZWxscy5zaGlmdCgpOyB9XG4gIGlmICghY2VsbHNbY2VsbHMubGVuZ3RoIC0gMV0udHJpbSgpKSB7IGNlbGxzLnBvcCgpOyB9XG5cbiAgaWYgKGNlbGxzLmxlbmd0aCA+IGNvdW50KSB7XG4gICAgY2VsbHMuc3BsaWNlKGNvdW50KTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2VsbHMubGVuZ3RoIDwgY291bnQpIGNlbGxzLnB1c2goJycpO1xuICB9XG5cbiAgZm9yICg7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBpcyBpZ25vcmVkIHBlciB0aGUgZ2ZtIHNwZWNcbiAgICBjZWxsc1tpXSA9IGNlbGxzW2ldLnRyaW0oKS5yZXBsYWNlKC9cXFxcXFx8L2csICd8Jyk7XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufVxuXG4vLyBSZW1vdmUgdHJhaWxpbmcgJ2Mncy4gRXF1aXZhbGVudCB0byBzdHIucmVwbGFjZSgvYyokLywgJycpLlxuLy8gL2MqJC8gaXMgdnVsbmVyYWJsZSB0byBSRURPUy5cbi8vIGludmVydDogUmVtb3ZlIHN1ZmZpeCBvZiBub24tYyBjaGFycyBpbnN0ZWFkLiBEZWZhdWx0IGZhbHNleS5cbmZ1bmN0aW9uIHJ0cmltKHN0ciwgYywgaW52ZXJ0KSB7XG4gIGNvbnN0IGwgPSBzdHIubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8vIExlbmd0aCBvZiBzdWZmaXggbWF0Y2hpbmcgdGhlIGludmVydCBjb25kaXRpb24uXG4gIGxldCBzdWZmTGVuID0gMDtcblxuICAvLyBTdGVwIGxlZnQgdW50aWwgd2UgZmFpbCB0byBtYXRjaCB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgd2hpbGUgKHN1ZmZMZW4gPCBsKSB7XG4gICAgY29uc3QgY3VyckNoYXIgPSBzdHIuY2hhckF0KGwgLSBzdWZmTGVuIC0gMSk7XG4gICAgaWYgKGN1cnJDaGFyID09PSBjICYmICFpbnZlcnQpIHtcbiAgICAgIHN1ZmZMZW4rKztcbiAgICB9IGVsc2UgaWYgKGN1cnJDaGFyICE9PSBjICYmIGludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cigwLCBsIC0gc3VmZkxlbik7XG59XG5cbmZ1bmN0aW9uIGZpbmRDbG9zaW5nQnJhY2tldChzdHIsIGIpIHtcbiAgaWYgKHN0ci5pbmRleE9mKGJbMV0pID09PSAtMSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBjb25zdCBsID0gc3RyLmxlbmd0aDtcbiAgbGV0IGxldmVsID0gMCxcbiAgICBpID0gMDtcbiAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoc3RyW2ldID09PSAnXFxcXCcpIHtcbiAgICAgIGkrKztcbiAgICB9IGVsc2UgaWYgKHN0cltpXSA9PT0gYlswXSkge1xuICAgICAgbGV2ZWwrKztcbiAgICB9IGVsc2UgaWYgKHN0cltpXSA9PT0gYlsxXSkge1xuICAgICAgbGV2ZWwtLTtcbiAgICAgIGlmIChsZXZlbCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gY2hlY2tTYW5pdGl6ZURlcHJlY2F0aW9uKG9wdCkge1xuICBpZiAob3B0ICYmIG9wdC5zYW5pdGl6ZSAmJiAhb3B0LnNpbGVudCkge1xuICAgIGNvbnNvbGUud2FybignbWFya2VkKCk6IHNhbml0aXplIGFuZCBzYW5pdGl6ZXIgcGFyYW1ldGVycyBhcmUgZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDAuNy4wLCBzaG91bGQgbm90IGJlIHVzZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLiBSZWFkIG1vcmUgaGVyZTogaHR0cHM6Ly9tYXJrZWQuanMub3JnLyMvVVNJTkdfQURWQU5DRUQubWQjb3B0aW9ucycpO1xuICB9XG59XG5cbi8vIGNvcGllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NDUwMTEzLzgwNjc3N1xuZnVuY3Rpb24gcmVwZWF0U3RyaW5nKHBhdHRlcm4sIGNvdW50KSB7XG4gIGlmIChjb3VudCA8IDEpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgbGV0IHJlc3VsdCA9ICcnO1xuICB3aGlsZSAoY291bnQgPiAxKSB7XG4gICAgaWYgKGNvdW50ICYgMSkge1xuICAgICAgcmVzdWx0ICs9IHBhdHRlcm47XG4gICAgfVxuICAgIGNvdW50ID4+PSAxO1xuICAgIHBhdHRlcm4gKz0gcGF0dGVybjtcbiAgfVxuICByZXR1cm4gcmVzdWx0ICsgcGF0dGVybjtcbn1cblxuZnVuY3Rpb24gb3V0cHV0TGluayhjYXAsIGxpbmssIHJhdywgbGV4ZXIpIHtcbiAgY29uc3QgaHJlZiA9IGxpbmsuaHJlZjtcbiAgY29uc3QgdGl0bGUgPSBsaW5rLnRpdGxlID8gZXNjYXBlKGxpbmsudGl0bGUpIDogbnVsbDtcbiAgY29uc3QgdGV4dCA9IGNhcFsxXS5yZXBsYWNlKC9cXFxcKFtcXFtcXF1dKS9nLCAnJDEnKTtcblxuICBpZiAoY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnKSB7XG4gICAgbGV4ZXIuc3RhdGUuaW5MaW5rID0gdHJ1ZTtcbiAgICBjb25zdCB0b2tlbiA9IHtcbiAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgIHJhdyxcbiAgICAgIGhyZWYsXG4gICAgICB0aXRsZSxcbiAgICAgIHRleHQsXG4gICAgICB0b2tlbnM6IGxleGVyLmlubGluZVRva2Vucyh0ZXh0LCBbXSlcbiAgICB9O1xuICAgIGxleGVyLnN0YXRlLmluTGluayA9IGZhbHNlO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2ltYWdlJyxcbiAgICAgIHJhdyxcbiAgICAgIGhyZWYsXG4gICAgICB0aXRsZSxcbiAgICAgIHRleHQ6IGVzY2FwZSh0ZXh0KVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZW50Q29kZUNvbXBlbnNhdGlvbihyYXcsIHRleHQpIHtcbiAgY29uc3QgbWF0Y2hJbmRlbnRUb0NvZGUgPSByYXcubWF0Y2goL14oXFxzKykoPzpgYGApLyk7XG5cbiAgaWYgKG1hdGNoSW5kZW50VG9Db2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBjb25zdCBpbmRlbnRUb0NvZGUgPSBtYXRjaEluZGVudFRvQ29kZVsxXTtcblxuICByZXR1cm4gdGV4dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAubWFwKG5vZGUgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hJbmRlbnRJbk5vZGUgPSBub2RlLm1hdGNoKC9eXFxzKy8pO1xuICAgICAgaWYgKG1hdGNoSW5kZW50SW5Ob2RlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbaW5kZW50SW5Ob2RlXSA9IG1hdGNoSW5kZW50SW5Ob2RlO1xuXG4gICAgICBpZiAoaW5kZW50SW5Ob2RlLmxlbmd0aCA+PSBpbmRlbnRUb0NvZGUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBub2RlLnNsaWNlKGluZGVudFRvQ29kZS5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9KVxuICAgIC5qb2luKCdcXG4nKTtcbn1cblxuLyoqXG4gKiBUb2tlbml6ZXJcbiAqL1xuY2xhc3MgVG9rZW5pemVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7XG4gIH1cblxuICBzcGFjZShzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLm5ld2xpbmUuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGlmIChjYXBbMF0ubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdzcGFjZScsXG4gICAgICAgICAgcmF3OiBjYXBbMF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IHJhdzogJ1xcbicgfTtcbiAgICB9XG4gIH1cblxuICBjb2RlKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suY29kZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eIHsxLDR9L2dtLCAnJyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBjb2RlQmxvY2tTdHlsZTogJ2luZGVudGVkJyxcbiAgICAgICAgdGV4dDogIXRoaXMub3B0aW9ucy5wZWRhbnRpY1xuICAgICAgICAgID8gcnRyaW0odGV4dCwgJ1xcbicpXG4gICAgICAgICAgOiB0ZXh0XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGZlbmNlcyhzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmZlbmNlcy5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgcmF3ID0gY2FwWzBdO1xuICAgICAgY29uc3QgdGV4dCA9IGluZGVudENvZGVDb21wZW5zYXRpb24ocmF3LCBjYXBbM10gfHwgJycpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnY29kZScsXG4gICAgICAgIHJhdyxcbiAgICAgICAgbGFuZzogY2FwWzJdID8gY2FwWzJdLnRyaW0oKSA6IGNhcFsyXSxcbiAgICAgICAgdGV4dFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBoZWFkaW5nKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suaGVhZGluZy5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgbGV0IHRleHQgPSBjYXBbMl0udHJpbSgpO1xuXG4gICAgICAvLyByZW1vdmUgdHJhaWxpbmcgI3NcbiAgICAgIGlmICgvIyQvLnRlc3QodGV4dCkpIHtcbiAgICAgICAgY29uc3QgdHJpbW1lZCA9IHJ0cmltKHRleHQsICcjJyk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICB0ZXh0ID0gdHJpbW1lZC50cmltKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRyaW1tZWQgfHwgLyAkLy50ZXN0KHRyaW1tZWQpKSB7XG4gICAgICAgICAgLy8gQ29tbW9uTWFyayByZXF1aXJlcyBzcGFjZSBiZWZvcmUgdHJhaWxpbmcgI3NcbiAgICAgICAgICB0ZXh0ID0gdHJpbW1lZC50cmltKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIGRlcHRoOiBjYXBbMV0ubGVuZ3RoLFxuICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICB0b2tlbnM6IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5sZXhlci5pbmxpbmUodG9rZW4udGV4dCwgdG9rZW4udG9rZW5zKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gIH1cblxuICBocihzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmhyLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnaHInLFxuICAgICAgICByYXc6IGNhcFswXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBibG9ja3F1b3RlKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suYmxvY2txdW90ZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eICo+ID8vZ20sICcnKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2Jsb2NrcXVvdGUnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmJsb2NrVG9rZW5zKHRleHQsIFtdKSxcbiAgICAgICAgdGV4dFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBsaXN0KHNyYykge1xuICAgIGxldCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmxpc3QuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGxldCByYXcsIGlzdGFzaywgaXNjaGVja2VkLCBpbmRlbnQsIGksIGJsYW5rTGluZSwgZW5kc1dpdGhCbGFua0xpbmUsXG4gICAgICAgIGxpbmUsIG5leHRMaW5lLCByYXdMaW5lLCBpdGVtQ29udGVudHM7XG5cbiAgICAgIGxldCBidWxsID0gY2FwWzFdLnRyaW0oKTtcbiAgICAgIGNvbnN0IGlzb3JkZXJlZCA9IGJ1bGwubGVuZ3RoID4gMTtcblxuICAgICAgY29uc3QgbGlzdCA9IHtcbiAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICByYXc6ICcnLFxuICAgICAgICBvcmRlcmVkOiBpc29yZGVyZWQsXG4gICAgICAgIHN0YXJ0OiBpc29yZGVyZWQgPyArYnVsbC5zbGljZSgwLCAtMSkgOiAnJyxcbiAgICAgICAgbG9vc2U6IGZhbHNlLFxuICAgICAgICBpdGVtczogW11cbiAgICAgIH07XG5cbiAgICAgIGJ1bGwgPSBpc29yZGVyZWQgPyBgXFxcXGR7MSw5fVxcXFwke2J1bGwuc2xpY2UoLTEpfWAgOiBgXFxcXCR7YnVsbH1gO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgIGJ1bGwgPSBpc29yZGVyZWQgPyBidWxsIDogJ1sqKy1dJztcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IG5leHQgbGlzdCBpdGVtXG4gICAgICBjb25zdCBpdGVtUmVnZXggPSBuZXcgUmVnRXhwKGBeKCB7MCwzfSR7YnVsbH0pKCg/OiBbXlxcXFxuXSopPyg/OlxcXFxufCQpKWApO1xuXG4gICAgICAvLyBDaGVjayBpZiBjdXJyZW50IGJ1bGxldCBwb2ludCBjYW4gc3RhcnQgYSBuZXcgTGlzdCBJdGVtXG4gICAgICB3aGlsZSAoc3JjKSB7XG4gICAgICAgIGlmICghKGNhcCA9IGl0ZW1SZWdleC5leGVjKHNyYykpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ydWxlcy5ibG9jay5oci50ZXN0KHNyYykpIHsgLy8gRW5kIGxpc3QgaWYgYnVsbGV0IHdhcyBhY3R1YWxseSBIUiAocG9zc2libHkgbW92ZSBpbnRvIGl0ZW1SZWdleD8pXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByYXcgPSBjYXBbMF07XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcocmF3Lmxlbmd0aCk7XG5cbiAgICAgICAgbGluZSA9IGNhcFsyXS5zcGxpdCgnXFxuJywgMSlbMF07XG4gICAgICAgIG5leHRMaW5lID0gc3JjLnNwbGl0KCdcXG4nLCAxKVswXTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgaW5kZW50ID0gMjtcbiAgICAgICAgICBpdGVtQ29udGVudHMgPSBsaW5lLnRyaW1MZWZ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZW50ID0gY2FwWzJdLnNlYXJjaCgvW14gXS8pOyAvLyBGaW5kIGZpcnN0IG5vbi1zcGFjZSBjaGFyXG4gICAgICAgICAgaW5kZW50ID0gaW5kZW50ID4gNCA/IDEgOiBpbmRlbnQ7IC8vIFRyZWF0IGluZGVudGVkIGNvZGUgYmxvY2tzICg+IDQgc3BhY2VzKSBhcyBoYXZpbmcgb25seSAxIGluZGVudFxuICAgICAgICAgIGl0ZW1Db250ZW50cyA9IGxpbmUuc2xpY2UoaW5kZW50KTtcbiAgICAgICAgICBpbmRlbnQgKz0gY2FwWzFdLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJsYW5rTGluZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICghbGluZSAmJiAvXiAqJC8udGVzdChuZXh0TGluZSkpIHsgLy8gSXRlbXMgYmVnaW4gd2l0aCBhdCBtb3N0IG9uZSBibGFuayBsaW5lXG4gICAgICAgICAgcmF3ICs9IG5leHRMaW5lICsgJ1xcbic7XG4gICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhuZXh0TGluZS5sZW5ndGggKyAxKTtcbiAgICAgICAgICBsaXN0Lmxvb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5leHRCdWxsZXRSZWdleCA9IG5ldyBSZWdFeHAoYF4gezAsJHtNYXRoLm1pbigzLCBpbmRlbnQgLSAxKX19KD86WyorLV18XFxcXGR7MSw5fVsuKV0pYCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgZm9sbG93aW5nIGxpbmVzIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBMaXN0IEl0ZW1cbiAgICAgICAgd2hpbGUgKHNyYyAmJiAhbGlzdC5sb29zZSkge1xuICAgICAgICAgIHJhd0xpbmUgPSBzcmMuc3BsaXQoJ1xcbicsIDEpWzBdO1xuICAgICAgICAgIGxpbmUgPSByYXdMaW5lO1xuXG4gICAgICAgICAgLy8gUmUtYWxpZ24gdG8gZm9sbG93IGNvbW1vbm1hcmsgbmVzdGluZyBydWxlc1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoL14gezEsNH0oPz0oIHs0fSkqW14gXSkvZywgJyAgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRW5kIGxpc3QgaXRlbSBpZiBmb3VuZCBzdGFydCBvZiBuZXcgYnVsbGV0XG4gICAgICAgICAgaWYgKG5leHRCdWxsZXRSZWdleC50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGluZS5zZWFyY2goL1teIF0vKSA+PSBpbmRlbnQgfHwgIWxpbmUudHJpbSgpKSB7IC8vIERlZGVudCBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgaXRlbUNvbnRlbnRzICs9ICdcXG4nICsgbGluZS5zbGljZShpbmRlbnQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWJsYW5rTGluZSkgeyAvLyBVbnRpbCBibGFuayBsaW5lLCBpdGVtIGRvZXNuJ3QgbmVlZCBpbmRlbnRhdGlvblxuICAgICAgICAgICAgaXRlbUNvbnRlbnRzICs9ICdcXG4nICsgbGluZTtcbiAgICAgICAgICB9IGVsc2UgeyAvLyBPdGhlcndpc2UsIGltcHJvcGVyIGluZGVudGF0aW9uIGVuZHMgdGhpcyBpdGVtXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWJsYW5rTGluZSAmJiAhbGluZS50cmltKCkpIHsgLy8gQ2hlY2sgaWYgY3VycmVudCBsaW5lIGlzIGJsYW5rXG4gICAgICAgICAgICBibGFua0xpbmUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJhdyArPSByYXdMaW5lICsgJ1xcbic7XG4gICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhyYXdMaW5lLmxlbmd0aCArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsaXN0Lmxvb3NlKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHByZXZpb3VzIGl0ZW0gZW5kZWQgd2l0aCBhIGJsYW5rIGxpbmUsIHRoZSBsaXN0IGlzIGxvb3NlXG4gICAgICAgICAgaWYgKGVuZHNXaXRoQmxhbmtMaW5lKSB7XG4gICAgICAgICAgICBsaXN0Lmxvb3NlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKC9cXG4gKlxcbiAqJC8udGVzdChyYXcpKSB7XG4gICAgICAgICAgICBlbmRzV2l0aEJsYW5rTGluZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIHRhc2sgbGlzdCBpdGVtc1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmdmbSkge1xuICAgICAgICAgIGlzdGFzayA9IC9eXFxbWyB4WF1cXF0gLy5leGVjKGl0ZW1Db250ZW50cyk7XG4gICAgICAgICAgaWYgKGlzdGFzaykge1xuICAgICAgICAgICAgaXNjaGVja2VkID0gaXN0YXNrWzBdICE9PSAnWyBdICc7XG4gICAgICAgICAgICBpdGVtQ29udGVudHMgPSBpdGVtQ29udGVudHMucmVwbGFjZSgvXlxcW1sgeFhdXFxdICsvLCAnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5pdGVtcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbGlzdF9pdGVtJyxcbiAgICAgICAgICByYXc6IHJhdyxcbiAgICAgICAgICB0YXNrOiAhIWlzdGFzayxcbiAgICAgICAgICBjaGVja2VkOiBpc2NoZWNrZWQsXG4gICAgICAgICAgbG9vc2U6IGZhbHNlLFxuICAgICAgICAgIHRleHQ6IGl0ZW1Db250ZW50c1xuICAgICAgICB9KTtcblxuICAgICAgICBsaXN0LnJhdyArPSByYXc7XG4gICAgICB9XG5cbiAgICAgIC8vIERvIG5vdCBjb25zdW1lIG5ld2xpbmVzIGF0IGVuZCBvZiBmaW5hbCBpdGVtLiBBbHRlcm5hdGl2ZWx5LCBtYWtlIGl0ZW1SZWdleCAqc3RhcnQqIHdpdGggYW55IG5ld2xpbmVzIHRvIHNpbXBsaWZ5L3NwZWVkIHVwIGVuZHNXaXRoQmxhbmtMaW5lIGxvZ2ljXG4gICAgICBsaXN0Lml0ZW1zW2xpc3QuaXRlbXMubGVuZ3RoIC0gMV0ucmF3ID0gcmF3LnRyaW1SaWdodCgpO1xuICAgICAgbGlzdC5pdGVtc1tsaXN0Lml0ZW1zLmxlbmd0aCAtIDFdLnRleHQgPSBpdGVtQ29udGVudHMudHJpbVJpZ2h0KCk7XG4gICAgICBsaXN0LnJhdyA9IGxpc3QucmF3LnRyaW1SaWdodCgpO1xuXG4gICAgICBjb25zdCBsID0gbGlzdC5pdGVtcy5sZW5ndGg7XG5cbiAgICAgIC8vIEl0ZW0gY2hpbGQgdG9rZW5zIGhhbmRsZWQgaGVyZSBhdCBlbmQgYmVjYXVzZSB3ZSBuZWVkZWQgdG8gaGF2ZSB0aGUgZmluYWwgaXRlbSB0byB0cmltIGl0IGZpcnN0XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMubGV4ZXIuc3RhdGUudG9wID0gZmFsc2U7XG4gICAgICAgIGxpc3QuaXRlbXNbaV0udG9rZW5zID0gdGhpcy5sZXhlci5ibG9ja1Rva2VucyhsaXN0Lml0ZW1zW2ldLnRleHQsIFtdKTtcbiAgICAgICAgaWYgKCFsaXN0Lmxvb3NlICYmIGxpc3QuaXRlbXNbaV0udG9rZW5zLnNvbWUodCA9PiB0LnR5cGUgPT09ICdzcGFjZScpKSB7XG4gICAgICAgICAgbGlzdC5sb29zZSA9IHRydWU7XG4gICAgICAgICAgbGlzdC5pdGVtc1tpXS5sb29zZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuICB9XG5cbiAgaHRtbChzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmh0bWwuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBwcmU6ICF0aGlzLm9wdGlvbnMuc2FuaXRpemVyXG4gICAgICAgICAgJiYgKGNhcFsxXSA9PT0gJ3ByZScgfHwgY2FwWzFdID09PSAnc2NyaXB0JyB8fCBjYXBbMV0gPT09ICdzdHlsZScpLFxuICAgICAgICB0ZXh0OiBjYXBbMF1cbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNhbml0aXplKSB7XG4gICAgICAgIHRva2VuLnR5cGUgPSAncGFyYWdyYXBoJztcbiAgICAgICAgdG9rZW4udGV4dCA9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSkgOiBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgdG9rZW4udG9rZW5zID0gW107XG4gICAgICAgIHRoaXMubGV4ZXIuaW5saW5lKHRva2VuLnRleHQsIHRva2VuLnRva2Vucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgZGVmKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suZGVmLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBpZiAoY2FwWzNdKSBjYXBbM10gPSBjYXBbM10uc3Vic3RyaW5nKDEsIGNhcFszXS5sZW5ndGggLSAxKTtcbiAgICAgIGNvbnN0IHRhZyA9IGNhcFsxXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkZWYnLFxuICAgICAgICB0YWcsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBocmVmOiBjYXBbMl0sXG4gICAgICAgIHRpdGxlOiBjYXBbM11cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdGFibGUoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay50YWJsZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXSkubWFwKGMgPT4geyByZXR1cm4geyB0ZXh0OiBjIH07IH0pLFxuICAgICAgICBhbGlnbjogY2FwWzJdLnJlcGxhY2UoL14gKnxcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIHJvd3M6IGNhcFszXSA/IGNhcFszXS5yZXBsYWNlKC9cXG4kLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoaXRlbS5oZWFkZXIubGVuZ3RoID09PSBpdGVtLmFsaWduLmxlbmd0aCkge1xuICAgICAgICBpdGVtLnJhdyA9IGNhcFswXTtcblxuICAgICAgICBsZXQgbCA9IGl0ZW0uYWxpZ24ubGVuZ3RoO1xuICAgICAgICBsZXQgaSwgaiwgaywgcm93O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGwgPSBpdGVtLnJvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaXRlbS5yb3dzW2ldID0gc3BsaXRDZWxscyhpdGVtLnJvd3NbaV0sIGl0ZW0uaGVhZGVyLmxlbmd0aCkubWFwKGMgPT4geyByZXR1cm4geyB0ZXh0OiBjIH07IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFyc2UgY2hpbGQgdG9rZW5zIGluc2lkZSBoZWFkZXJzIGFuZCBjZWxsc1xuXG4gICAgICAgIC8vIGhlYWRlciBjaGlsZCB0b2tlbnNcbiAgICAgICAgbCA9IGl0ZW0uaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICAgIGl0ZW0uaGVhZGVyW2pdLnRva2VucyA9IFtdO1xuICAgICAgICAgIHRoaXMubGV4ZXIuaW5saW5lVG9rZW5zKGl0ZW0uaGVhZGVyW2pdLnRleHQsIGl0ZW0uaGVhZGVyW2pdLnRva2Vucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjZWxsIGNoaWxkIHRva2Vuc1xuICAgICAgICBsID0gaXRlbS5yb3dzLmxlbmd0aDtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICAgIHJvdyA9IGl0ZW0ucm93c1tqXTtcbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcm93Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICByb3dba10udG9rZW5zID0gW107XG4gICAgICAgICAgICB0aGlzLmxleGVyLmlubGluZVRva2Vucyhyb3dba10udGV4dCwgcm93W2tdLnRva2Vucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGhlYWRpbmcoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5saGVhZGluZy5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIGRlcHRoOiBjYXBbMl0uY2hhckF0KDApID09PSAnPScgPyAxIDogMixcbiAgICAgICAgdGV4dDogY2FwWzFdLFxuICAgICAgICB0b2tlbnM6IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5sZXhlci5pbmxpbmUodG9rZW4udGV4dCwgdG9rZW4udG9rZW5zKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gIH1cblxuICBwYXJhZ3JhcGgoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5wYXJhZ3JhcGguZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQ6IGNhcFsxXS5jaGFyQXQoY2FwWzFdLmxlbmd0aCAtIDEpID09PSAnXFxuJ1xuICAgICAgICAgID8gY2FwWzFdLnNsaWNlKDAsIC0xKVxuICAgICAgICAgIDogY2FwWzFdLFxuICAgICAgICB0b2tlbnM6IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5sZXhlci5pbmxpbmUodG9rZW4udGV4dCwgdG9rZW4udG9rZW5zKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gIH1cblxuICB0ZXh0KHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2sudGV4dC5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQ6IGNhcFswXSxcbiAgICAgICAgdG9rZW5zOiBbXVxuICAgICAgfTtcbiAgICAgIHRoaXMubGV4ZXIuaW5saW5lKHRva2VuLnRleHQsIHRva2VuLnRva2Vucyk7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgZXNjYXBlKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmVzY2FwZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2VzY2FwZScsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICB0ZXh0OiBlc2NhcGUoY2FwWzFdKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB0YWcoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUudGFnLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBpZiAoIXRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rICYmIC9ePGEgL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5sZXhlci5zdGF0ZS5pbkxpbmsgJiYgL148XFwvYT4vaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrICYmIC9ePChwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrICYmIC9ePFxcLyhwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gJ3RleHQnXG4gICAgICAgICAgOiAnaHRtbCcsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBpbkxpbms6IHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rLFxuICAgICAgICBpblJhd0Jsb2NrOiB0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2ssXG4gICAgICAgIHRleHQ6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gKHRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pXG4gICAgICAgICAgICA6IGVzY2FwZShjYXBbMF0pKVxuICAgICAgICAgIDogY2FwWzBdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGxpbmsoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUubGluay5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdHJpbW1lZFVybCA9IGNhcFsyXS50cmltKCk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5wZWRhbnRpYyAmJiAvXjwvLnRlc3QodHJpbW1lZFVybCkpIHtcbiAgICAgICAgLy8gY29tbW9ubWFyayByZXF1aXJlcyBtYXRjaGluZyBhbmdsZSBicmFja2V0c1xuICAgICAgICBpZiAoISgvPiQvLnRlc3QodHJpbW1lZFVybCkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5kaW5nIGFuZ2xlIGJyYWNrZXQgY2Fubm90IGJlIGVzY2FwZWRcbiAgICAgICAgY29uc3QgcnRyaW1TbGFzaCA9IHJ0cmltKHRyaW1tZWRVcmwuc2xpY2UoMCwgLTEpLCAnXFxcXCcpO1xuICAgICAgICBpZiAoKHRyaW1tZWRVcmwubGVuZ3RoIC0gcnRyaW1TbGFzaC5sZW5ndGgpICUgMiA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZmluZCBjbG9zaW5nIHBhcmVudGhlc2lzXG4gICAgICAgIGNvbnN0IGxhc3RQYXJlbkluZGV4ID0gZmluZENsb3NpbmdCcmFja2V0KGNhcFsyXSwgJygpJyk7XG4gICAgICAgIGlmIChsYXN0UGFyZW5JbmRleCA+IC0xKSB7XG4gICAgICAgICAgY29uc3Qgc3RhcnQgPSBjYXBbMF0uaW5kZXhPZignIScpID09PSAwID8gNSA6IDQ7XG4gICAgICAgICAgY29uc3QgbGlua0xlbiA9IHN0YXJ0ICsgY2FwWzFdLmxlbmd0aCArIGxhc3RQYXJlbkluZGV4O1xuICAgICAgICAgIGNhcFsyXSA9IGNhcFsyXS5zdWJzdHJpbmcoMCwgbGFzdFBhcmVuSW5kZXgpO1xuICAgICAgICAgIGNhcFswXSA9IGNhcFswXS5zdWJzdHJpbmcoMCwgbGlua0xlbikudHJpbSgpO1xuICAgICAgICAgIGNhcFszXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgaHJlZiA9IGNhcFsyXTtcbiAgICAgIGxldCB0aXRsZSA9ICcnO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAvLyBzcGxpdCBwZWRhbnRpYyBocmVmIGFuZCB0aXRsZVxuICAgICAgICBjb25zdCBsaW5rID0gL14oW14nXCJdKlteXFxzXSlcXHMrKFsnXCJdKSguKilcXDIvLmV4ZWMoaHJlZik7XG5cbiAgICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgICBocmVmID0gbGlua1sxXTtcbiAgICAgICAgICB0aXRsZSA9IGxpbmtbM107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnNsaWNlKDEsIC0xKSA6ICcnO1xuICAgICAgfVxuXG4gICAgICBocmVmID0gaHJlZi50cmltKCk7XG4gICAgICBpZiAoL148Ly50ZXN0KGhyZWYpKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMgJiYgISgvPiQvLnRlc3QodHJpbW1lZFVybCkpKSB7XG4gICAgICAgICAgLy8gcGVkYW50aWMgYWxsb3dzIHN0YXJ0aW5nIGFuZ2xlIGJyYWNrZXQgd2l0aG91dCBlbmRpbmcgYW5nbGUgYnJhY2tldFxuICAgICAgICAgIGhyZWYgPSBocmVmLnNsaWNlKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhyZWYgPSBocmVmLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dExpbmsoY2FwLCB7XG4gICAgICAgIGhyZWY6IGhyZWYgPyBocmVmLnJlcGxhY2UodGhpcy5ydWxlcy5pbmxpbmUuX2VzY2FwZXMsICckMScpIDogaHJlZixcbiAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5fZXNjYXBlcywgJyQxJykgOiB0aXRsZVxuICAgICAgfSwgY2FwWzBdLCB0aGlzLmxleGVyKTtcbiAgICB9XG4gIH1cblxuICByZWZsaW5rKHNyYywgbGlua3MpIHtcbiAgICBsZXQgY2FwO1xuICAgIGlmICgoY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUucmVmbGluay5leGVjKHNyYykpXG4gICAgICAgIHx8IChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5ub2xpbmsuZXhlYyhzcmMpKSkge1xuICAgICAgbGV0IGxpbmsgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgbGluayA9IGxpbmtzW2xpbmsudG9Mb3dlckNhc2UoKV07XG4gICAgICBpZiAoIWxpbmsgfHwgIWxpbmsuaHJlZikge1xuICAgICAgICBjb25zdCB0ZXh0ID0gY2FwWzBdLmNoYXJBdCgwKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXRMaW5rKGNhcCwgbGluaywgY2FwWzBdLCB0aGlzLmxleGVyKTtcbiAgICB9XG4gIH1cblxuICBlbVN0cm9uZyhzcmMsIG1hc2tlZFNyYywgcHJldkNoYXIgPSAnJykge1xuICAgIGxldCBtYXRjaCA9IHRoaXMucnVsZXMuaW5saW5lLmVtU3Ryb25nLmxEZWxpbS5leGVjKHNyYyk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuO1xuXG4gICAgLy8gXyBjYW4ndCBiZSBiZXR3ZWVuIHR3byBhbHBoYW51bWVyaWNzLiBcXHB7TH1cXHB7Tn0gaW5jbHVkZXMgbm9uLWVuZ2xpc2ggYWxwaGFiZXQvbnVtYmVycyBhcyB3ZWxsXG4gICAgaWYgKG1hdGNoWzNdICYmIHByZXZDaGFyLm1hdGNoKC9bXFxwe0x9XFxwe059XS91KSkgcmV0dXJuO1xuXG4gICAgY29uc3QgbmV4dENoYXIgPSBtYXRjaFsxXSB8fCBtYXRjaFsyXSB8fCAnJztcblxuICAgIGlmICghbmV4dENoYXIgfHwgKG5leHRDaGFyICYmIChwcmV2Q2hhciA9PT0gJycgfHwgdGhpcy5ydWxlcy5pbmxpbmUucHVuY3R1YXRpb24uZXhlYyhwcmV2Q2hhcikpKSkge1xuICAgICAgY29uc3QgbExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aCAtIDE7XG4gICAgICBsZXQgckRlbGltLCByTGVuZ3RoLCBkZWxpbVRvdGFsID0gbExlbmd0aCwgbWlkRGVsaW1Ub3RhbCA9IDA7XG5cbiAgICAgIGNvbnN0IGVuZFJlZyA9IG1hdGNoWzBdWzBdID09PSAnKicgPyB0aGlzLnJ1bGVzLmlubGluZS5lbVN0cm9uZy5yRGVsaW1Bc3QgOiB0aGlzLnJ1bGVzLmlubGluZS5lbVN0cm9uZy5yRGVsaW1VbmQ7XG4gICAgICBlbmRSZWcubGFzdEluZGV4ID0gMDtcblxuICAgICAgLy8gQ2xpcCBtYXNrZWRTcmMgdG8gc2FtZSBzZWN0aW9uIG9mIHN0cmluZyBhcyBzcmMgKG1vdmUgdG8gbGV4ZXI/KVxuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKC0xICogc3JjLmxlbmd0aCArIGxMZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKG1hdGNoID0gZW5kUmVnLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICByRGVsaW0gPSBtYXRjaFsxXSB8fCBtYXRjaFsyXSB8fCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBtYXRjaFs2XTtcblxuICAgICAgICBpZiAoIXJEZWxpbSkgY29udGludWU7IC8vIHNraXAgc2luZ2xlICogaW4gX19hYmMqYWJjX19cblxuICAgICAgICByTGVuZ3RoID0gckRlbGltLmxlbmd0aDtcblxuICAgICAgICBpZiAobWF0Y2hbM10gfHwgbWF0Y2hbNF0pIHsgLy8gZm91bmQgYW5vdGhlciBMZWZ0IERlbGltXG4gICAgICAgICAgZGVsaW1Ub3RhbCArPSByTGVuZ3RoO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoWzVdIHx8IG1hdGNoWzZdKSB7IC8vIGVpdGhlciBMZWZ0IG9yIFJpZ2h0IERlbGltXG4gICAgICAgICAgaWYgKGxMZW5ndGggJSAzICYmICEoKGxMZW5ndGggKyByTGVuZ3RoKSAlIDMpKSB7XG4gICAgICAgICAgICBtaWREZWxpbVRvdGFsICs9IHJMZW5ndGg7XG4gICAgICAgICAgICBjb250aW51ZTsgLy8gQ29tbW9uTWFyayBFbXBoYXNpcyBSdWxlcyA5LTEwXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsaW1Ub3RhbCAtPSByTGVuZ3RoO1xuXG4gICAgICAgIGlmIChkZWxpbVRvdGFsID4gMCkgY29udGludWU7IC8vIEhhdmVuJ3QgZm91bmQgZW5vdWdoIGNsb3NpbmcgZGVsaW1pdGVyc1xuXG4gICAgICAgIC8vIFJlbW92ZSBleHRyYSBjaGFyYWN0ZXJzLiAqYSoqKiAtPiAqYSpcbiAgICAgICAgckxlbmd0aCA9IE1hdGgubWluKHJMZW5ndGgsIHJMZW5ndGggKyBkZWxpbVRvdGFsICsgbWlkRGVsaW1Ub3RhbCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGBlbWAgaWYgc21hbGxlc3QgZGVsaW1pdGVyIGhhcyBvZGQgY2hhciBjb3VudC4gKmEqKipcbiAgICAgICAgaWYgKE1hdGgubWluKGxMZW5ndGgsIHJMZW5ndGgpICUgMikge1xuICAgICAgICAgIGNvbnN0IHRleHQgPSBzcmMuc2xpY2UoMSwgbExlbmd0aCArIG1hdGNoLmluZGV4ICsgckxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdlbScsXG4gICAgICAgICAgICByYXc6IHNyYy5zbGljZSgwLCBsTGVuZ3RoICsgbWF0Y2guaW5kZXggKyByTGVuZ3RoICsgMSksXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2Vucyh0ZXh0LCBbXSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlICdzdHJvbmcnIGlmIHNtYWxsZXN0IGRlbGltaXRlciBoYXMgZXZlbiBjaGFyIGNvdW50LiAqKmEqKipcbiAgICAgICAgY29uc3QgdGV4dCA9IHNyYy5zbGljZSgyLCBsTGVuZ3RoICsgbWF0Y2guaW5kZXggKyByTGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ3N0cm9uZycsXG4gICAgICAgICAgcmF3OiBzcmMuc2xpY2UoMCwgbExlbmd0aCArIG1hdGNoLmluZGV4ICsgckxlbmd0aCArIDEpLFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2Vucyh0ZXh0LCBbXSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb2Rlc3BhbihzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5jb2RlLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgdGV4dCA9IGNhcFsyXS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcbiAgICAgIGNvbnN0IGhhc05vblNwYWNlQ2hhcnMgPSAvW14gXS8udGVzdCh0ZXh0KTtcbiAgICAgIGNvbnN0IGhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzID0gL14gLy50ZXN0KHRleHQpICYmIC8gJC8udGVzdCh0ZXh0KTtcbiAgICAgIGlmIChoYXNOb25TcGFjZUNoYXJzICYmIGhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygxLCB0ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgdGV4dCA9IGVzY2FwZSh0ZXh0LCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdjb2Rlc3BhbicsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICB0ZXh0XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGJyKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmJyLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnYnInLFxuICAgICAgICByYXc6IGNhcFswXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBkZWwoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUuZGVsLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZGVsJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQ6IGNhcFsyXSxcbiAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2VucyhjYXBbMl0sIFtdKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBhdXRvbGluayhzcmMsIG1hbmdsZSkge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmF1dG9saW5rLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgdGV4dCwgaHJlZjtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMub3B0aW9ucy5tYW5nbGUgPyBtYW5nbGUoY2FwWzFdKSA6IGNhcFsxXSk7XG4gICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgaHJlZixcbiAgICAgICAgdG9rZW5zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB1cmwoc3JjLCBtYW5nbGUpIHtcbiAgICBsZXQgY2FwO1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS51cmwuZXhlYyhzcmMpKSB7XG4gICAgICBsZXQgdGV4dCwgaHJlZjtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMub3B0aW9ucy5tYW5nbGUgPyBtYW5nbGUoY2FwWzBdKSA6IGNhcFswXSk7XG4gICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG8gZXh0ZW5kZWQgYXV0b2xpbmsgcGF0aCB2YWxpZGF0aW9uXG4gICAgICAgIGxldCBwcmV2Q2FwWmVybztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHByZXZDYXBaZXJvID0gY2FwWzBdO1xuICAgICAgICAgIGNhcFswXSA9IHRoaXMucnVsZXMuaW5saW5lLl9iYWNrcGVkYWwuZXhlYyhjYXBbMF0pWzBdO1xuICAgICAgICB9IHdoaWxlIChwcmV2Q2FwWmVybyAhPT0gY2FwWzBdKTtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMF0pO1xuICAgICAgICBpZiAoY2FwWzFdID09PSAnd3d3LicpIHtcbiAgICAgICAgICBocmVmID0gJ2h0dHA6Ly8nICsgdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgaHJlZixcbiAgICAgICAgdG9rZW5zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBpbmxpbmVUZXh0KHNyYywgc21hcnR5cGFudHMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS50ZXh0LmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgdGV4dDtcbiAgICAgIGlmICh0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2spIHtcbiAgICAgICAgdGV4dCA9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZSA/ICh0aGlzLm9wdGlvbnMuc2FuaXRpemVyID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pIDogZXNjYXBlKGNhcFswXSkpIDogY2FwWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZSh0aGlzLm9wdGlvbnMuc21hcnR5cGFudHMgPyBzbWFydHlwYW50cyhjYXBbMF0pIDogY2FwWzBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQmxvY2stTGV2ZWwgR3JhbW1hclxuICovXG5jb25zdCBibG9jayA9IHtcbiAgbmV3bGluZTogL14oPzogKig/OlxcbnwkKSkrLyxcbiAgY29kZTogL14oIHs0fVteXFxuXSsoPzpcXG4oPzogKig/OlxcbnwkKSkqKT8pKy8sXG4gIGZlbmNlczogL14gezAsM30oYHszLH0oPz1bXmBcXG5dKlxcbil8fnszLH0pKFteXFxuXSopXFxuKD86fChbXFxzXFxTXSo/KVxcbikoPzogezAsM31cXDFbfmBdKiAqKD89XFxufCQpfCQpLyxcbiAgaHI6IC9eIHswLDN9KCg/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcKiAqKXszLH0pKD86XFxuK3wkKS8sXG4gIGhlYWRpbmc6IC9eIHswLDN9KCN7MSw2fSkoPz1cXHN8JCkoLiopKD86XFxuK3wkKS8sXG4gIGJsb2NrcXVvdGU6IC9eKCB7MCwzfT4gPyhwYXJhZ3JhcGh8W15cXG5dKikoPzpcXG58JCkpKy8sXG4gIGxpc3Q6IC9eKCB7MCwzfWJ1bGwpKCBbXlxcbl0rPyk/KD86XFxufCQpLyxcbiAgaHRtbDogJ14gezAsM30oPzonIC8vIG9wdGlvbmFsIGluZGVudGF0aW9uXG4gICAgKyAnPChzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKVtcXFxccz5dW1xcXFxzXFxcXFNdKj8oPzo8L1xcXFwxPlteXFxcXG5dKlxcXFxuK3wkKScgLy8gKDEpXG4gICAgKyAnfGNvbW1lbnRbXlxcXFxuXSooXFxcXG4rfCQpJyAvLyAoMilcbiAgICArICd8PFxcXFw/W1xcXFxzXFxcXFNdKj8oPzpcXFxcPz5cXFxcbip8JCknIC8vICgzKVxuICAgICsgJ3w8IVtBLVpdW1xcXFxzXFxcXFNdKj8oPzo+XFxcXG4qfCQpJyAvLyAoNClcbiAgICArICd8PCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qPyg/OlxcXFxdXFxcXF0+XFxcXG4qfCQpJyAvLyAoNSlcbiAgICArICd8PC8/KHRhZykoPzogK3xcXFxcbnwvPz4pW1xcXFxzXFxcXFNdKj8oPzooPzpcXFxcbiAqKStcXFxcbnwkKScgLy8gKDYpXG4gICAgKyAnfDwoPyFzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKShbYS16XVtcXFxcdy1dKikoPzphdHRyaWJ1dGUpKj8gKi8/Pig/PVsgXFxcXHRdKig/OlxcXFxufCQpKVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg3KSBvcGVuIHRhZ1xuICAgICsgJ3w8Lyg/IXNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWEpW2Etel1bXFxcXHctXSpcXFxccyo+KD89WyBcXFxcdF0qKD86XFxcXG58JCkpW1xcXFxzXFxcXFNdKj8oPzooPzpcXFxcbiAqKStcXFxcbnwkKScgLy8gKDcpIGNsb3NpbmcgdGFnXG4gICAgKyAnKScsXG4gIGRlZjogL14gezAsM31cXFsobGFiZWwpXFxdOiAqXFxuPyAqPD8oW15cXHM+XSspPj8oPzooPzogK1xcbj8gKnwgKlxcbiAqKSh0aXRsZSkpPyAqKD86XFxuK3wkKS8sXG4gIHRhYmxlOiBub29wVGVzdCxcbiAgbGhlYWRpbmc6IC9eKFteXFxuXSspXFxuIHswLDN9KD0rfC0rKSAqKD86XFxuK3wkKS8sXG4gIC8vIHJlZ2V4IHRlbXBsYXRlLCBwbGFjZWhvbGRlcnMgd2lsbCBiZSByZXBsYWNlZCBhY2NvcmRpbmcgdG8gZGlmZmVyZW50IHBhcmFncmFwaFxuICAvLyBpbnRlcnJ1cHRpb24gcnVsZXMgb2YgY29tbW9ubWFyayBhbmQgdGhlIG9yaWdpbmFsIG1hcmtkb3duIHNwZWM6XG4gIF9wYXJhZ3JhcGg6IC9eKFteXFxuXSsoPzpcXG4oPyFocnxoZWFkaW5nfGxoZWFkaW5nfGJsb2NrcXVvdGV8ZmVuY2VzfGxpc3R8aHRtbHx0YWJsZXwgK1xcbilbXlxcbl0rKSopLyxcbiAgdGV4dDogL15bXlxcbl0rL1xufTtcblxuYmxvY2suX2xhYmVsID0gLyg/IVxccypcXF0pKD86XFxcXFtcXFtcXF1dfFteXFxbXFxdXSkrLztcbmJsb2NrLl90aXRsZSA9IC8oPzpcIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnW14nXFxuXSooPzpcXG5bXidcXG5dKykqXFxuPyd8XFwoW14oKV0qXFwpKS87XG5ibG9jay5kZWYgPSBlZGl0KGJsb2NrLmRlZilcbiAgLnJlcGxhY2UoJ2xhYmVsJywgYmxvY2suX2xhYmVsKVxuICAucmVwbGFjZSgndGl0bGUnLCBibG9jay5fdGl0bGUpXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5idWxsZXQgPSAvKD86WyorLV18XFxkezEsOX1bLildKS87XG5ibG9jay5saXN0SXRlbVN0YXJ0ID0gZWRpdCgvXiggKikoYnVsbCkgKi8pXG4gIC5yZXBsYWNlKCdidWxsJywgYmxvY2suYnVsbGV0KVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2subGlzdCA9IGVkaXQoYmxvY2subGlzdClcbiAgLnJlcGxhY2UoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAucmVwbGFjZSgnaHInLCAnXFxcXG4rKD89XFxcXDE/KD86KD86LSAqKXszLH18KD86XyAqKXszLH18KD86XFxcXCogKil7Myx9KSg/OlxcXFxuK3wkKSknKVxuICAucmVwbGFjZSgnZGVmJywgJ1xcXFxuKyg/PScgKyBibG9jay5kZWYuc291cmNlICsgJyknKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suX3RhZyA9ICdhZGRyZXNzfGFydGljbGV8YXNpZGV8YmFzZXxiYXNlZm9udHxibG9ja3F1b3RlfGJvZHl8Y2FwdGlvbidcbiAgKyAnfGNlbnRlcnxjb2x8Y29sZ3JvdXB8ZGR8ZGV0YWlsc3xkaWFsb2d8ZGlyfGRpdnxkbHxkdHxmaWVsZHNldHxmaWdjYXB0aW9uJ1xuICArICd8ZmlndXJlfGZvb3Rlcnxmb3JtfGZyYW1lfGZyYW1lc2V0fGhbMS02XXxoZWFkfGhlYWRlcnxocnxodG1sfGlmcmFtZSdcbiAgKyAnfGxlZ2VuZHxsaXxsaW5rfG1haW58bWVudXxtZW51aXRlbXxtZXRhfG5hdnxub2ZyYW1lc3xvbHxvcHRncm91cHxvcHRpb24nXG4gICsgJ3xwfHBhcmFtfHNlY3Rpb258c291cmNlfHN1bW1hcnl8dGFibGV8dGJvZHl8dGR8dGZvb3R8dGh8dGhlYWR8dGl0bGV8dHInXG4gICsgJ3x0cmFja3x1bCc7XG5ibG9jay5fY29tbWVudCA9IC88IS0tKD8hLT8+KVtcXHNcXFNdKj8oPzotLT58JCkvO1xuYmxvY2suaHRtbCA9IGVkaXQoYmxvY2suaHRtbCwgJ2knKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZylcbiAgLnJlcGxhY2UoJ2F0dHJpYnV0ZScsIC8gK1thLXpBLVo6X11bXFx3LjotXSooPzogKj0gKlwiW15cIlxcbl0qXCJ8ICo9IConW14nXFxuXSonfCAqPSAqW15cXHNcIic9PD5gXSspPy8pXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5wYXJhZ3JhcGggPSBlZGl0KGJsb2NrLl9wYXJhZ3JhcGgpXG4gIC5yZXBsYWNlKCdocicsIGJsb2NrLmhyKVxuICAucmVwbGFjZSgnaGVhZGluZycsICcgezAsM30jezEsNn0gJylcbiAgLnJlcGxhY2UoJ3xsaGVhZGluZycsICcnKSAvLyBzZXRleCBoZWFkaW5ncyBkb24ndCBpbnRlcnJ1cHQgY29tbW9ubWFyayBwYXJhZ3JhcGhzXG4gIC5yZXBsYWNlKCd8dGFibGUnLCAnJylcbiAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gIC5yZXBsYWNlKCdmZW5jZXMnLCAnIHswLDN9KD86YHszLH0oPz1bXmBcXFxcbl0qXFxcXG4pfH57Myx9KVteXFxcXG5dKlxcXFxuJylcbiAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgLnJlcGxhY2UoJ2h0bWwnLCAnPC8/KD86dGFnKSg/OiArfFxcXFxufC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWF8IS0tKScpXG4gIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKSAvLyBwYXJzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suYmxvY2txdW90ZSA9IGVkaXQoYmxvY2suYmxvY2txdW90ZSlcbiAgLnJlcGxhY2UoJ3BhcmFncmFwaCcsIGJsb2NrLnBhcmFncmFwaClcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogTm9ybWFsIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5ub3JtYWwgPSBtZXJnZSh7fSwgYmxvY2spO1xuXG4vKipcbiAqIEdGTSBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2suZ2ZtID0gbWVyZ2Uoe30sIGJsb2NrLm5vcm1hbCwge1xuICB0YWJsZTogJ14gKihbXlxcXFxuIF0uKlxcXFx8LiopXFxcXG4nIC8vIEhlYWRlclxuICAgICsgJyB7MCwzfSg/OlxcXFx8ICopPyg6Py0rOj8gKig/OlxcXFx8ICo6Py0rOj8gKikqKSg/OlxcXFx8ICopPycgLy8gQWxpZ25cbiAgICArICcoPzpcXFxcbigoPzooPyEgKlxcXFxufGhyfGhlYWRpbmd8YmxvY2txdW90ZXxjb2RlfGZlbmNlc3xsaXN0fGh0bWwpLiooPzpcXFxcbnwkKSkqKVxcXFxuKnwkKScgLy8gQ2VsbHNcbn0pO1xuXG5ibG9jay5nZm0udGFibGUgPSBlZGl0KGJsb2NrLmdmbS50YWJsZSlcbiAgLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpXG4gIC5yZXBsYWNlKCdoZWFkaW5nJywgJyB7MCwzfSN7MSw2fSAnKVxuICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgLnJlcGxhY2UoJ2NvZGUnLCAnIHs0fVteXFxcXG5dJylcbiAgLnJlcGxhY2UoJ2ZlbmNlcycsICcgezAsM30oPzpgezMsfSg/PVteYFxcXFxuXSpcXFxcbil8fnszLH0pW15cXFxcbl0qXFxcXG4nKVxuICAucmVwbGFjZSgnbGlzdCcsICcgezAsM30oPzpbKistXXwxWy4pXSkgJykgLy8gb25seSBsaXN0cyBzdGFydGluZyBmcm9tIDEgY2FuIGludGVycnVwdFxuICAucmVwbGFjZSgnaHRtbCcsICc8Lz8oPzp0YWcpKD86ICt8XFxcXG58Lz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYXwhLS0pJylcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpIC8vIHRhYmxlcyBjYW4gYmUgaW50ZXJydXB0ZWQgYnkgdHlwZSAoNikgaHRtbCBibG9ja3NcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmdmbS5wYXJhZ3JhcGggPSBlZGl0KGJsb2NrLl9wYXJhZ3JhcGgpXG4gIC5yZXBsYWNlKCdocicsIGJsb2NrLmhyKVxuICAucmVwbGFjZSgnaGVhZGluZycsICcgezAsM30jezEsNn0gJylcbiAgLnJlcGxhY2UoJ3xsaGVhZGluZycsICcnKSAvLyBzZXRleCBoZWFkaW5ncyBkb24ndCBpbnRlcnJ1cHQgY29tbW9ubWFyayBwYXJhZ3JhcGhzXG4gIC5yZXBsYWNlKCd0YWJsZScsIGJsb2NrLmdmbS50YWJsZSkgLy8gaW50ZXJydXB0IHBhcmFncmFwaHMgd2l0aCB0YWJsZVxuICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgLnJlcGxhY2UoJ2ZlbmNlcycsICcgezAsM30oPzpgezMsfSg/PVteYFxcXFxuXSpcXFxcbil8fnszLH0pW15cXFxcbl0qXFxcXG4nKVxuICAucmVwbGFjZSgnbGlzdCcsICcgezAsM30oPzpbKistXXwxWy4pXSkgJykgLy8gb25seSBsaXN0cyBzdGFydGluZyBmcm9tIDEgY2FuIGludGVycnVwdFxuICAucmVwbGFjZSgnaHRtbCcsICc8Lz8oPzp0YWcpKD86ICt8XFxcXG58Lz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYXwhLS0pJylcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpIC8vIHBhcnMgY2FuIGJlIGludGVycnVwdGVkIGJ5IHR5cGUgKDYpIGh0bWwgYmxvY2tzXG4gIC5nZXRSZWdleCgpO1xuLyoqXG4gKiBQZWRhbnRpYyBncmFtbWFyIChvcmlnaW5hbCBKb2huIEdydWJlcidzIGxvb3NlIG1hcmtkb3duIHNwZWNpZmljYXRpb24pXG4gKi9cblxuYmxvY2sucGVkYW50aWMgPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7XG4gIGh0bWw6IGVkaXQoXG4gICAgJ14gKig/OmNvbW1lbnQgKig/OlxcXFxufFxcXFxzKiQpJ1xuICAgICsgJ3w8KHRhZylbXFxcXHNcXFxcU10rPzwvXFxcXDE+ICooPzpcXFxcbnsyLH18XFxcXHMqJCknIC8vIGNsb3NlZCB0YWdcbiAgICArICd8PHRhZyg/OlwiW15cIl0qXCJ8XFwnW15cXCddKlxcJ3xcXFxcc1teXFwnXCIvPlxcXFxzXSopKj8vPz4gKig/OlxcXFxuezIsfXxcXFxccyokKSknKVxuICAgIC5yZXBsYWNlKCdjb21tZW50JywgYmxvY2suX2NvbW1lbnQpXG4gICAgLnJlcGxhY2UoL3RhZy9nLCAnKD8hKD86J1xuICAgICAgKyAnYXxlbXxzdHJvbmd8c21hbGx8c3xjaXRlfHF8ZGZufGFiYnJ8ZGF0YXx0aW1lfGNvZGV8dmFyfHNhbXB8a2JkfHN1YidcbiAgICAgICsgJ3xzdXB8aXxifHV8bWFya3xydWJ5fHJ0fHJwfGJkaXxiZG98c3Bhbnxicnx3YnJ8aW5zfGRlbHxpbWcpJ1xuICAgICAgKyAnXFxcXGIpXFxcXHcrKD8hOnxbXlxcXFx3XFxcXHNAXSpAKVxcXFxiJylcbiAgICAuZ2V0UmVnZXgoKSxcbiAgZGVmOiAvXiAqXFxbKFteXFxdXSspXFxdOiAqPD8oW15cXHM+XSspPj8oPzogKyhbXCIoXVteXFxuXStbXCIpXSkpPyAqKD86XFxuK3wkKS8sXG4gIGhlYWRpbmc6IC9eKCN7MSw2fSkoLiopKD86XFxuK3wkKS8sXG4gIGZlbmNlczogbm9vcFRlc3QsIC8vIGZlbmNlcyBub3Qgc3VwcG9ydGVkXG4gIHBhcmFncmFwaDogZWRpdChibG9jay5ub3JtYWwuX3BhcmFncmFwaClcbiAgICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgICAucmVwbGFjZSgnaGVhZGluZycsICcgKiN7MSw2fSAqW15cXG5dJylcbiAgICAucmVwbGFjZSgnbGhlYWRpbmcnLCBibG9jay5saGVhZGluZylcbiAgICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgICAucmVwbGFjZSgnfGZlbmNlcycsICcnKVxuICAgIC5yZXBsYWNlKCd8bGlzdCcsICcnKVxuICAgIC5yZXBsYWNlKCd8aHRtbCcsICcnKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBJbmxpbmUtTGV2ZWwgR3JhbW1hclxuICovXG5jb25zdCBpbmxpbmUgPSB7XG4gIGVzY2FwZTogL15cXFxcKFshXCIjJCUmJygpKissXFwtLi86Ozw9Pj9AXFxbXFxdXFxcXF5fYHt8fX5dKS8sXG4gIGF1dG9saW5rOiAvXjwoc2NoZW1lOlteXFxzXFx4MDAtXFx4MWY8Pl0qfGVtYWlsKT4vLFxuICB1cmw6IG5vb3BUZXN0LFxuICB0YWc6ICdeY29tbWVudCdcbiAgICArICd8XjwvW2EtekEtWl1bXFxcXHc6LV0qXFxcXHMqPicgLy8gc2VsZi1jbG9zaW5nIHRhZ1xuICAgICsgJ3xePFthLXpBLVpdW1xcXFx3LV0qKD86YXR0cmlidXRlKSo/XFxcXHMqLz8+JyAvLyBvcGVuIHRhZ1xuICAgICsgJ3xePFxcXFw/W1xcXFxzXFxcXFNdKj9cXFxcPz4nIC8vIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24sIGUuZy4gPD9waHAgPz5cbiAgICArICd8XjwhW2EtekEtWl0rXFxcXHNbXFxcXHNcXFxcU10qPz4nIC8vIGRlY2xhcmF0aW9uLCBlLmcuIDwhRE9DVFlQRSBodG1sPlxuICAgICsgJ3xePCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+JywgLy8gQ0RBVEEgc2VjdGlvblxuICBsaW5rOiAvXiE/XFxbKGxhYmVsKVxcXVxcKFxccyooaHJlZikoPzpcXHMrKHRpdGxlKSk/XFxzKlxcKS8sXG4gIHJlZmxpbms6IC9eIT9cXFsobGFiZWwpXFxdXFxbKD8hXFxzKlxcXSkoKD86XFxcXFtcXFtcXF1dP3xbXlxcW1xcXVxcXFxdKSspXFxdLyxcbiAgbm9saW5rOiAvXiE/XFxbKD8hXFxzKlxcXSkoKD86XFxbW15cXFtcXF1dKlxcXXxcXFxcW1xcW1xcXV18W15cXFtcXF1dKSopXFxdKD86XFxbXFxdKT8vLFxuICByZWZsaW5rU2VhcmNoOiAncmVmbGlua3xub2xpbmsoPyFcXFxcKCknLFxuICBlbVN0cm9uZzoge1xuICAgIGxEZWxpbTogL14oPzpcXCorKD86KFtwdW5jdF9dKXxbXlxccypdKSl8Xl8rKD86KFtwdW5jdCpdKXwoW15cXHNfXSkpLyxcbiAgICAvLyAgICAgICAgKDEpIGFuZCAoMikgY2FuIG9ubHkgYmUgYSBSaWdodCBEZWxpbWl0ZXIuICgzKSBhbmQgKDQpIGNhbiBvbmx5IGJlIExlZnQuICAoNSkgYW5kICg2KSBjYW4gYmUgZWl0aGVyIExlZnQgb3IgUmlnaHQuXG4gICAgLy8gICAgICAgICgpIFNraXAgb3JwaGFuIGRlbGltIGluc2lkZSBzdHJvbmcgICAgKDEpICMqKiogICAgICAgICAgICAgICAgKDIpIGEqKiojLCBhKioqICAgICAgICAgICAgICAgICAgICgzKSAjKioqYSwgKioqYSAgICAgICAgICAgICAgICAgKDQpICoqKiMgICAgICAgICAgICAgICg1KSAjKioqIyAgICAgICAgICAgICAgICAgKDYpIGEqKiphXG4gICAgckRlbGltQXN0OiAvXlteXypdKj9cXF9cXF9bXl8qXSo/XFwqW15fKl0qPyg/PVxcX1xcXyl8W3B1bmN0X10oXFwqKykoPz1bXFxzXXwkKXxbXnB1bmN0Kl9cXHNdKFxcKispKD89W3B1bmN0X1xcc118JCl8W3B1bmN0X1xcc10oXFwqKykoPz1bXnB1bmN0Kl9cXHNdKXxbXFxzXShcXCorKSg/PVtwdW5jdF9dKXxbcHVuY3RfXShcXCorKSg/PVtwdW5jdF9dKXxbXnB1bmN0Kl9cXHNdKFxcKispKD89W15wdW5jdCpfXFxzXSkvLFxuICAgIHJEZWxpbVVuZDogL15bXl8qXSo/XFwqXFwqW15fKl0qP1xcX1teXypdKj8oPz1cXCpcXCopfFtwdW5jdCpdKFxcXyspKD89W1xcc118JCl8W15wdW5jdCpfXFxzXShcXF8rKSg/PVtwdW5jdCpcXHNdfCQpfFtwdW5jdCpcXHNdKFxcXyspKD89W15wdW5jdCpfXFxzXSl8W1xcc10oXFxfKykoPz1bcHVuY3QqXSl8W3B1bmN0Kl0oXFxfKykoPz1bcHVuY3QqXSkvIC8vIF4tIE5vdCBhbGxvd2VkIGZvciBfXG4gIH0sXG4gIGNvZGU6IC9eKGArKShbXmBdfFteYF1bXFxzXFxTXSo/W15gXSlcXDEoPyFgKS8sXG4gIGJyOiAvXiggezIsfXxcXFxcKVxcbig/IVxccyokKS8sXG4gIGRlbDogbm9vcFRlc3QsXG4gIHRleHQ6IC9eKGArfFteYF0pKD86KD89IHsyLH1cXG4pfFtcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCpfXXxcXGJffCQpfFteIF0oPz0gezIsfVxcbikpKS8sXG4gIHB1bmN0dWF0aW9uOiAvXihbXFxzcHVuY3R1YXRpb25dKS9cbn07XG5cbi8vIGxpc3Qgb2YgcHVuY3R1YXRpb24gbWFya3MgZnJvbSBDb21tb25NYXJrIHNwZWNcbi8vIHdpdGhvdXQgKiBhbmQgXyB0byBoYW5kbGUgdGhlIGRpZmZlcmVudCBlbXBoYXNpcyBtYXJrZXJzICogYW5kIF9cbmlubGluZS5fcHVuY3R1YXRpb24gPSAnIVwiIyQlJlxcJygpK1xcXFwtLiwvOjs8PT4/QFxcXFxbXFxcXF1gXnt8fX4nO1xuaW5saW5lLnB1bmN0dWF0aW9uID0gZWRpdChpbmxpbmUucHVuY3R1YXRpb24pLnJlcGxhY2UoL3B1bmN0dWF0aW9uL2csIGlubGluZS5fcHVuY3R1YXRpb24pLmdldFJlZ2V4KCk7XG5cbi8vIHNlcXVlbmNlcyBlbSBzaG91bGQgc2tpcCBvdmVyIFt0aXRsZV0obGluayksIGBjb2RlYCwgPGh0bWw+XG5pbmxpbmUuYmxvY2tTa2lwID0gL1xcW1teXFxdXSo/XFxdXFwoW15cXCldKj9cXCl8YFteYF0qP2B8PFtePl0qPz4vZztcbmlubGluZS5lc2NhcGVkRW1TdCA9IC9cXFxcXFwqfFxcXFxfL2c7XG5cbmlubGluZS5fY29tbWVudCA9IGVkaXQoYmxvY2suX2NvbW1lbnQpLnJlcGxhY2UoJyg/Oi0tPnwkKScsICctLT4nKS5nZXRSZWdleCgpO1xuXG5pbmxpbmUuZW1TdHJvbmcubERlbGltID0gZWRpdChpbmxpbmUuZW1TdHJvbmcubERlbGltKVxuICAucmVwbGFjZSgvcHVuY3QvZywgaW5saW5lLl9wdW5jdHVhdGlvbilcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5lbVN0cm9uZy5yRGVsaW1Bc3QgPSBlZGl0KGlubGluZS5lbVN0cm9uZy5yRGVsaW1Bc3QsICdnJylcbiAgLnJlcGxhY2UoL3B1bmN0L2csIGlubGluZS5fcHVuY3R1YXRpb24pXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuZW1TdHJvbmcuckRlbGltVW5kID0gZWRpdChpbmxpbmUuZW1TdHJvbmcuckRlbGltVW5kLCAnZycpXG4gIC5yZXBsYWNlKC9wdW5jdC9nLCBpbmxpbmUuX3B1bmN0dWF0aW9uKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9lc2NhcGVzID0gL1xcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pL2c7XG5cbmlubGluZS5fc2NoZW1lID0gL1thLXpBLVpdW2EtekEtWjAtOSsuLV17MSwzMX0vO1xuaW5saW5lLl9lbWFpbCA9IC9bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dKyhAKVthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrKD8hWy1fXSkvO1xuaW5saW5lLmF1dG9saW5rID0gZWRpdChpbmxpbmUuYXV0b2xpbmspXG4gIC5yZXBsYWNlKCdzY2hlbWUnLCBpbmxpbmUuX3NjaGVtZSlcbiAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLl9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5fYXR0cmlidXRlID0gL1xccytbYS16QS1aOl9dW1xcdy46LV0qKD86XFxzKj1cXHMqXCJbXlwiXSpcInxcXHMqPVxccyonW14nXSonfFxccyo9XFxzKlteXFxzXCInPTw+YF0rKT8vO1xuXG5pbmxpbmUudGFnID0gZWRpdChpbmxpbmUudGFnKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGlubGluZS5fY29tbWVudClcbiAgLnJlcGxhY2UoJ2F0dHJpYnV0ZScsIGlubGluZS5fYXR0cmlidXRlKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9sYWJlbCA9IC8oPzpcXFsoPzpcXFxcLnxbXlxcW1xcXVxcXFxdKSpcXF18XFxcXC58YFteYF0qYHxbXlxcW1xcXVxcXFxgXSkqPy87XG5pbmxpbmUuX2hyZWYgPSAvPCg/OlxcXFwufFteXFxuPD5cXFxcXSkrPnxbXlxcc1xceDAwLVxceDFmXSovO1xuaW5saW5lLl90aXRsZSA9IC9cIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnKD86XFxcXCc/fFteJ1xcXFxdKSonfFxcKCg/OlxcXFxcXCk/fFteKVxcXFxdKSpcXCkvO1xuXG5pbmxpbmUubGluayA9IGVkaXQoaW5saW5lLmxpbmspXG4gIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gIC5yZXBsYWNlKCdocmVmJywgaW5saW5lLl9ocmVmKVxuICAucmVwbGFjZSgndGl0bGUnLCBpbmxpbmUuX3RpdGxlKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLnJlZmxpbmsgPSBlZGl0KGlubGluZS5yZWZsaW5rKVxuICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLnJlZmxpbmtTZWFyY2ggPSBlZGl0KGlubGluZS5yZWZsaW5rU2VhcmNoLCAnZycpXG4gIC5yZXBsYWNlKCdyZWZsaW5rJywgaW5saW5lLnJlZmxpbmspXG4gIC5yZXBsYWNlKCdub2xpbmsnLCBpbmxpbmUubm9saW5rKVxuICAuZ2V0UmVnZXgoKTtcblxuLyoqXG4gKiBOb3JtYWwgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUubm9ybWFsID0gbWVyZ2Uoe30sIGlubGluZSk7XG5cbi8qKlxuICogUGVkYW50aWMgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUucGVkYW50aWMgPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwge1xuICBzdHJvbmc6IHtcbiAgICBzdGFydDogL15fX3xcXCpcXCovLFxuICAgIG1pZGRsZTogL15fXyg/PVxcUykoW1xcc1xcU10qP1xcUylfXyg/IV8pfF5cXCpcXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqXFwqKD8hXFwqKS8sXG4gICAgZW5kQXN0OiAvXFwqXFwqKD8hXFwqKS9nLFxuICAgIGVuZFVuZDogL19fKD8hXykvZ1xuICB9LFxuICBlbToge1xuICAgIHN0YXJ0OiAvXl98XFwqLyxcbiAgICBtaWRkbGU6IC9eKClcXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqKD8hXFwqKXxeXyg/PVxcUykoW1xcc1xcU10qP1xcUylfKD8hXykvLFxuICAgIGVuZEFzdDogL1xcKig/IVxcKikvZyxcbiAgICBlbmRVbmQ6IC9fKD8hXykvZ1xuICB9LFxuICBsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFwoKC4qPylcXCkvKVxuICAgIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gICAgLmdldFJlZ2V4KCksXG4gIHJlZmxpbms6IGVkaXQoL14hP1xcWyhsYWJlbClcXF1cXHMqXFxbKFteXFxdXSopXFxdLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBHRk0gSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuZ2ZtID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgZXNjYXBlOiBlZGl0KGlubGluZS5lc2NhcGUpLnJlcGxhY2UoJ10pJywgJ358XSknKS5nZXRSZWdleCgpLFxuICBfZXh0ZW5kZWRfZW1haWw6IC9bQS1aYS16MC05Ll8rLV0rKEApW2EtekEtWjAtOS1fXSsoPzpcXC5bYS16QS1aMC05LV9dKlthLXpBLVowLTldKSsoPyFbLV9dKS8sXG4gIHVybDogL14oKD86ZnRwfGh0dHBzPyk6XFwvXFwvfHd3d1xcLikoPzpbYS16QS1aMC05XFwtXStcXC4/KStbXlxcczxdKnxeZW1haWwvLFxuICBfYmFja3BlZGFsOiAvKD86W14/IS4sOjsqX34oKSZdK3xcXChbXildKlxcKXwmKD8hW2EtekEtWjAtOV0rOyQpfFs/IS4sOjsqX34pXSsoPyEkKSkrLyxcbiAgZGVsOiAvXih+fj8pKD89W15cXHN+XSkoW1xcc1xcU10qP1teXFxzfl0pXFwxKD89W15+XXwkKS8sXG4gIHRleHQ6IC9eKFtgfl0rfFteYH5dKSg/Oig/PSB7Mix9XFxuKXwoPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApfFtcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCp+X118XFxiX3xodHRwcz86XFwvXFwvfGZ0cDpcXC9cXC98d3d3XFwufCQpfFteIF0oPz0gezIsfVxcbil8W15hLXpBLVowLTkuISMkJSYnKitcXC89P19ge1xcfH1+LV0oPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApKSkvXG59KTtcblxuaW5saW5lLmdmbS51cmwgPSBlZGl0KGlubGluZS5nZm0udXJsLCAnaScpXG4gIC5yZXBsYWNlKCdlbWFpbCcsIGlubGluZS5nZm0uX2V4dGVuZGVkX2VtYWlsKVxuICAuZ2V0UmVnZXgoKTtcbi8qKlxuICogR0ZNICsgTGluZSBCcmVha3MgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuYnJlYWtzID0gbWVyZ2Uoe30sIGlubGluZS5nZm0sIHtcbiAgYnI6IGVkaXQoaW5saW5lLmJyKS5yZXBsYWNlKCd7Mix9JywgJyonKS5nZXRSZWdleCgpLFxuICB0ZXh0OiBlZGl0KGlubGluZS5nZm0udGV4dClcbiAgICAucmVwbGFjZSgnXFxcXGJfJywgJ1xcXFxiX3wgezIsfVxcXFxuJylcbiAgICAucmVwbGFjZSgvXFx7MixcXH0vZywgJyonKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBzbWFydHlwYW50cyB0ZXh0IHJlcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIHNtYXJ0eXBhbnRzKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAvLyBlbS1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0tL2csICdcXHUyMDE0JylcbiAgICAvLyBlbi1kYXNoZXNcbiAgICAucmVwbGFjZSgvLS0vZywgJ1xcdTIwMTMnKVxuICAgIC8vIG9wZW5pbmcgc2luZ2xlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcIlxcc10pJy9nLCAnJDFcXHUyMDE4JylcbiAgICAvLyBjbG9zaW5nIHNpbmdsZXMgJiBhcG9zdHJvcGhlc1xuICAgIC5yZXBsYWNlKC8nL2csICdcXHUyMDE5JylcbiAgICAvLyBvcGVuaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XFx1MjAxOFxcc10pXCIvZywgJyQxXFx1MjAxYycpXG4gICAgLy8gY2xvc2luZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoL1wiL2csICdcXHUyMDFkJylcbiAgICAvLyBlbGxpcHNlc1xuICAgIC5yZXBsYWNlKC9cXC57M30vZywgJ1xcdTIwMjYnKTtcbn1cblxuLyoqXG4gKiBtYW5nbGUgZW1haWwgYWRkcmVzc2VzXG4gKi9cbmZ1bmN0aW9uIG1hbmdsZSh0ZXh0KSB7XG4gIGxldCBvdXQgPSAnJyxcbiAgICBpLFxuICAgIGNoO1xuXG4gIGNvbnN0IGwgPSB0ZXh0Lmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIGNoID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICBjaCA9ICd4JyArIGNoLnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gICAgb3V0ICs9ICcmIycgKyBjaCArICc7JztcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQmxvY2sgTGV4ZXJcbiAqL1xuY2xhc3MgTGV4ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy50b2tlbnMgPSBbXTtcbiAgICB0aGlzLnRva2Vucy5saW5rcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBkZWZhdWx0cztcbiAgICB0aGlzLm9wdGlvbnMudG9rZW5pemVyID0gdGhpcy5vcHRpb25zLnRva2VuaXplciB8fCBuZXcgVG9rZW5pemVyKCk7XG4gICAgdGhpcy50b2tlbml6ZXIgPSB0aGlzLm9wdGlvbnMudG9rZW5pemVyO1xuICAgIHRoaXMudG9rZW5pemVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdGhpcy50b2tlbml6ZXIubGV4ZXIgPSB0aGlzO1xuICAgIHRoaXMuaW5saW5lUXVldWUgPSBbXTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaW5MaW5rOiBmYWxzZSxcbiAgICAgIGluUmF3QmxvY2s6IGZhbHNlLFxuICAgICAgdG9wOiB0cnVlXG4gICAgfTtcblxuICAgIGNvbnN0IHJ1bGVzID0ge1xuICAgICAgYmxvY2s6IGJsb2NrLm5vcm1hbCxcbiAgICAgIGlubGluZTogaW5saW5lLm5vcm1hbFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICBydWxlcy5ibG9jayA9IGJsb2NrLnBlZGFudGljO1xuICAgICAgcnVsZXMuaW5saW5lID0gaW5saW5lLnBlZGFudGljO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmdmbSkge1xuICAgICAgcnVsZXMuYmxvY2sgPSBibG9jay5nZm07XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJyZWFrcykge1xuICAgICAgICBydWxlcy5pbmxpbmUgPSBpbmxpbmUuYnJlYWtzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnVsZXMuaW5saW5lID0gaW5saW5lLmdmbTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50b2tlbml6ZXIucnVsZXMgPSBydWxlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvc2UgUnVsZXNcbiAgICovXG4gIHN0YXRpYyBnZXQgcnVsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrLFxuICAgICAgaW5saW5lXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgTGV4IE1ldGhvZFxuICAgKi9cbiAgc3RhdGljIGxleChzcmMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihvcHRpb25zKTtcbiAgICByZXR1cm4gbGV4ZXIubGV4KHNyYyk7XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIExleCBJbmxpbmUgTWV0aG9kXG4gICAqL1xuICBzdGF0aWMgbGV4SW5saW5lKHNyYywgb3B0aW9ucykge1xuICAgIGNvbnN0IGxleGVyID0gbmV3IExleGVyKG9wdGlvbnMpO1xuICAgIHJldHVybiBsZXhlci5pbmxpbmVUb2tlbnMoc3JjKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwcm9jZXNzaW5nXG4gICAqL1xuICBsZXgoc3JjKSB7XG4gICAgc3JjID0gc3JjXG4gICAgICAucmVwbGFjZSgvXFxyXFxufFxcci9nLCAnXFxuJylcbiAgICAgIC5yZXBsYWNlKC9cXHQvZywgJyAgICAnKTtcblxuICAgIHRoaXMuYmxvY2tUb2tlbnMoc3JjLCB0aGlzLnRva2Vucyk7XG5cbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAobmV4dCA9IHRoaXMuaW5saW5lUXVldWUuc2hpZnQoKSkge1xuICAgICAgdGhpcy5pbmxpbmVUb2tlbnMobmV4dC5zcmMsIG5leHQudG9rZW5zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50b2tlbnM7XG4gIH1cblxuICAvKipcbiAgICogTGV4aW5nXG4gICAqL1xuICBibG9ja1Rva2VucyhzcmMsIHRva2VucyA9IFtdKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgc3JjID0gc3JjLnJlcGxhY2UoL14gKyQvZ20sICcnKTtcbiAgICB9XG4gICAgbGV0IHRva2VuLCBsYXN0VG9rZW4sIGN1dFNyYywgbGFzdFBhcmFncmFwaENsaXBwZWQ7XG5cbiAgICB3aGlsZSAoc3JjKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnNcbiAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuYmxvY2tcbiAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuYmxvY2suc29tZSgoZXh0VG9rZW5pemVyKSA9PiB7XG4gICAgICAgICAgaWYgKHRva2VuID0gZXh0VG9rZW5pemVyLmNhbGwoeyBsZXhlcjogdGhpcyB9LCBzcmMsIHRva2VucykpIHtcbiAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gbmV3bGluZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuc3BhY2Uoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICBpZiAodG9rZW4udHlwZSkge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gY29kZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuY29kZShzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIC8vIEFuIGluZGVudGVkIGNvZGUgYmxvY2sgY2Fubm90IGludGVycnVwdCBhIHBhcmFncmFwaC5cbiAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiAobGFzdFRva2VuLnR5cGUgPT09ICdwYXJhZ3JhcGgnIHx8IGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZmVuY2VzXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5mZW5jZXMoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBoZWFkaW5nXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5oZWFkaW5nKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaHJcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmhyKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gYmxvY2txdW90ZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYmxvY2txdW90ZShzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGxpc3RcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxpc3Qoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBodG1sXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5odG1sKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVmXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5kZWYoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdFRva2VuICYmIChsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcgfHwgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0JykpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy50b2tlbnMubGlua3NbdG9rZW4udGFnXSkge1xuICAgICAgICAgIHRoaXMudG9rZW5zLmxpbmtzW3Rva2VuLnRhZ10gPSB7XG4gICAgICAgICAgICBocmVmOiB0b2tlbi5ocmVmLFxuICAgICAgICAgICAgdGl0bGU6IHRva2VuLnRpdGxlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdGFibGUgKGdmbSlcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnRhYmxlKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gbGhlYWRpbmdcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxoZWFkaW5nKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdG9wLWxldmVsIHBhcmFncmFwaFxuICAgICAgLy8gcHJldmVudCBwYXJhZ3JhcGggY29uc3VtaW5nIGV4dGVuc2lvbnMgYnkgY2xpcHBpbmcgJ3NyYycgdG8gZXh0ZW5zaW9uIHN0YXJ0XG4gICAgICBjdXRTcmMgPSBzcmM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRCbG9jaykge1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IEluZmluaXR5O1xuICAgICAgICBjb25zdCB0ZW1wU3JjID0gc3JjLnNsaWNlKDEpO1xuICAgICAgICBsZXQgdGVtcFN0YXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydEJsb2NrLmZvckVhY2goZnVuY3Rpb24oZ2V0U3RhcnRJbmRleCkge1xuICAgICAgICAgIHRlbXBTdGFydCA9IGdldFN0YXJ0SW5kZXguY2FsbCh7IGxleGVyOiB0aGlzIH0sIHRlbXBTcmMpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdGVtcFN0YXJ0ID09PSAnbnVtYmVyJyAmJiB0ZW1wU3RhcnQgPj0gMCkgeyBzdGFydEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCwgdGVtcFN0YXJ0KTsgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHN0YXJ0SW5kZXggPCBJbmZpbml0eSAmJiBzdGFydEluZGV4ID49IDApIHtcbiAgICAgICAgICBjdXRTcmMgPSBzcmMuc3Vic3RyaW5nKDAsIHN0YXJ0SW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUudG9wICYmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnBhcmFncmFwaChjdXRTcmMpKSkge1xuICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdFBhcmFncmFwaENsaXBwZWQgJiYgbGFzdFRva2VuLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZS5wb3AoKTtcbiAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlW3RoaXMuaW5saW5lUXVldWUubGVuZ3RoIC0gMV0uc3JjID0gbGFzdFRva2VuLnRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQYXJhZ3JhcGhDbGlwcGVkID0gKGN1dFNyYy5sZW5ndGggIT09IHNyYy5sZW5ndGgpO1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdGV4dFxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGV4dChzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0VG9rZW4gJiYgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gJ1xcbicgKyB0b2tlbi50ZXh0O1xuICAgICAgICAgIHRoaXMuaW5saW5lUXVldWUucG9wKCk7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBjb25zdCBlcnJNc2cgPSAnSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS50b3AgPSB0cnVlO1xuICAgIHJldHVybiB0b2tlbnM7XG4gIH1cblxuICBpbmxpbmUoc3JjLCB0b2tlbnMpIHtcbiAgICB0aGlzLmlubGluZVF1ZXVlLnB1c2goeyBzcmMsIHRva2VucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMZXhpbmcvQ29tcGlsaW5nXG4gICAqL1xuICBpbmxpbmVUb2tlbnMoc3JjLCB0b2tlbnMgPSBbXSkge1xuICAgIGxldCB0b2tlbiwgbGFzdFRva2VuLCBjdXRTcmM7XG5cbiAgICAvLyBTdHJpbmcgd2l0aCBsaW5rcyBtYXNrZWQgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIHdpdGggZW0gYW5kIHN0cm9uZ1xuICAgIGxldCBtYXNrZWRTcmMgPSBzcmM7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCBrZWVwUHJldkNoYXIsIHByZXZDaGFyO1xuXG4gICAgLy8gTWFzayBvdXQgcmVmbGlua3NcbiAgICBpZiAodGhpcy50b2tlbnMubGlua3MpIHtcbiAgICAgIGNvbnN0IGxpbmtzID0gT2JqZWN0LmtleXModGhpcy50b2tlbnMubGlua3MpO1xuICAgICAgaWYgKGxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChsaW5rcy5pbmNsdWRlcyhtYXRjaFswXS5zbGljZShtYXRjaFswXS5sYXN0SW5kZXhPZignWycpICsgMSwgLTEpKSkge1xuICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArIHJlcGVhdFN0cmluZygnYScsIG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmxhc3RJbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE1hc2sgb3V0IG90aGVyIGJsb2Nrc1xuICAgIHdoaWxlICgobWF0Y2ggPSB0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUuYmxvY2tTa2lwLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArIHJlcGVhdFN0cmluZygnYScsIG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5ibG9ja1NraXAubGFzdEluZGV4KTtcbiAgICB9XG5cbiAgICAvLyBNYXNrIG91dCBlc2NhcGVkIGVtICYgc3Ryb25nIGRlbGltaXRlcnNcbiAgICB3aGlsZSAoKG1hdGNoID0gdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmVzY2FwZWRFbVN0LmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICcrKycgKyBtYXNrZWRTcmMuc2xpY2UodGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmVzY2FwZWRFbVN0Lmxhc3RJbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHNyYykge1xuICAgICAgaWYgKCFrZWVwUHJldkNoYXIpIHtcbiAgICAgICAgcHJldkNoYXIgPSAnJztcbiAgICAgIH1cbiAgICAgIGtlZXBQcmV2Q2hhciA9IGZhbHNlO1xuXG4gICAgICAvLyBleHRlbnNpb25zXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnNcbiAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuaW5saW5lXG4gICAgICAgICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLmlubGluZS5zb21lKChleHRUb2tlbml6ZXIpID0+IHtcbiAgICAgICAgICBpZiAodG9rZW4gPSBleHRUb2tlbml6ZXIuY2FsbCh7IGxleGVyOiB0aGlzIH0sIHNyYywgdG9rZW5zKSkge1xuICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2NhcGVcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmVzY2FwZShzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHRhZ1xuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGFnKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiB0b2tlbi50eXBlID09PSAndGV4dCcgJiYgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gdG9rZW4ucmF3O1xuICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBsaW5rXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5saW5rKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVmbGluaywgbm9saW5rXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5yZWZsaW5rKHNyYywgdGhpcy50b2tlbnMubGlua3MpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0VG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gJ3RleHQnICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZW0gJiBzdHJvbmdcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmVtU3Ryb25nKHNyYywgbWFza2VkU3JjLCBwcmV2Q2hhcikpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gY29kZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuY29kZXNwYW4oc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBiclxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYnIoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBkZWwgKGdmbSlcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmRlbChzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGF1dG9saW5rXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5hdXRvbGluayhzcmMsIG1hbmdsZSkpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdXJsIChnZm0pXG4gICAgICBpZiAoIXRoaXMuc3RhdGUuaW5MaW5rICYmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnVybChzcmMsIG1hbmdsZSkpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHRleHRcbiAgICAgIC8vIHByZXZlbnQgaW5saW5lVGV4dCBjb25zdW1pbmcgZXh0ZW5zaW9ucyBieSBjbGlwcGluZyAnc3JjJyB0byBleHRlbnNpb24gc3RhcnRcbiAgICAgIGN1dFNyYyA9IHNyYztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydElubGluZSkge1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IEluZmluaXR5O1xuICAgICAgICBjb25zdCB0ZW1wU3JjID0gc3JjLnNsaWNlKDEpO1xuICAgICAgICBsZXQgdGVtcFN0YXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydElubGluZS5mb3JFYWNoKGZ1bmN0aW9uKGdldFN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICB0ZW1wU3RhcnQgPSBnZXRTdGFydEluZGV4LmNhbGwoeyBsZXhlcjogdGhpcyB9LCB0ZW1wU3JjKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRlbXBTdGFydCA9PT0gJ251bWJlcicgJiYgdGVtcFN0YXJ0ID49IDApIHsgc3RhcnRJbmRleCA9IE1hdGgubWluKHN0YXJ0SW5kZXgsIHRlbXBTdGFydCk7IH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdGFydEluZGV4IDwgSW5maW5pdHkgJiYgc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgY3V0U3JjID0gc3JjLnN1YnN0cmluZygwLCBzdGFydEluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmlubGluZVRleHQoY3V0U3JjLCBzbWFydHlwYW50cykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgaWYgKHRva2VuLnJhdy5zbGljZSgtMSkgIT09ICdfJykgeyAvLyBUcmFjayBwcmV2Q2hhciBiZWZvcmUgc3RyaW5nIG9mIF9fX18gc3RhcnRlZFxuICAgICAgICAgIHByZXZDaGFyID0gdG9rZW4ucmF3LnNsaWNlKC0xKTtcbiAgICAgICAgfVxuICAgICAgICBrZWVwUHJldkNoYXIgPSB0cnVlO1xuICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdFRva2VuICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBjb25zdCBlcnJNc2cgPSAnSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxufVxuXG4vKipcbiAqIFJlbmRlcmVyXG4gKi9cbmNsYXNzIFJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7XG4gIH1cblxuICBjb2RlKGNvZGUsIGluZm9zdHJpbmcsIGVzY2FwZWQpIHtcbiAgICBjb25zdCBsYW5nID0gKGluZm9zdHJpbmcgfHwgJycpLm1hdGNoKC9cXFMqLylbMF07XG4gICAgaWYgKHRoaXMub3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICAgIGNvbnN0IG91dCA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHQoY29kZSwgbGFuZyk7XG4gICAgICBpZiAob3V0ICE9IG51bGwgJiYgb3V0ICE9PSBjb2RlKSB7XG4gICAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgICBjb2RlID0gb3V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UoL1xcbiQvLCAnJykgKyAnXFxuJztcblxuICAgIGlmICghbGFuZykge1xuICAgICAgcmV0dXJuICc8cHJlPjxjb2RlPidcbiAgICAgICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xuICAgIH1cblxuICAgIHJldHVybiAnPHByZT48Y29kZSBjbGFzcz1cIidcbiAgICAgICsgdGhpcy5vcHRpb25zLmxhbmdQcmVmaXhcbiAgICAgICsgZXNjYXBlKGxhbmcsIHRydWUpXG4gICAgICArICdcIj4nXG4gICAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZShjb2RlLCB0cnVlKSlcbiAgICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xuICB9XG5cbiAgYmxvY2txdW90ZShxdW90ZSkge1xuICAgIHJldHVybiAnPGJsb2NrcXVvdGU+XFxuJyArIHF1b3RlICsgJzwvYmxvY2txdW90ZT5cXG4nO1xuICB9XG5cbiAgaHRtbChodG1sKSB7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cblxuICBoZWFkaW5nKHRleHQsIGxldmVsLCByYXcsIHNsdWdnZXIpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcklkcykge1xuICAgICAgcmV0dXJuICc8aCdcbiAgICAgICAgKyBsZXZlbFxuICAgICAgICArICcgaWQ9XCInXG4gICAgICAgICsgdGhpcy5vcHRpb25zLmhlYWRlclByZWZpeFxuICAgICAgICArIHNsdWdnZXIuc2x1ZyhyYXcpXG4gICAgICAgICsgJ1wiPidcbiAgICAgICAgKyB0ZXh0XG4gICAgICAgICsgJzwvaCdcbiAgICAgICAgKyBsZXZlbFxuICAgICAgICArICc+XFxuJztcbiAgICB9XG4gICAgLy8gaWdub3JlIElEc1xuICAgIHJldHVybiAnPGgnICsgbGV2ZWwgKyAnPicgKyB0ZXh0ICsgJzwvaCcgKyBsZXZlbCArICc+XFxuJztcbiAgfVxuXG4gIGhyKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGhyLz5cXG4nIDogJzxocj5cXG4nO1xuICB9XG5cbiAgbGlzdChib2R5LCBvcmRlcmVkLCBzdGFydCkge1xuICAgIGNvbnN0IHR5cGUgPSBvcmRlcmVkID8gJ29sJyA6ICd1bCcsXG4gICAgICBzdGFydGF0dCA9IChvcmRlcmVkICYmIHN0YXJ0ICE9PSAxKSA/ICgnIHN0YXJ0PVwiJyArIHN0YXJ0ICsgJ1wiJykgOiAnJztcbiAgICByZXR1cm4gJzwnICsgdHlwZSArIHN0YXJ0YXR0ICsgJz5cXG4nICsgYm9keSArICc8LycgKyB0eXBlICsgJz5cXG4nO1xuICB9XG5cbiAgbGlzdGl0ZW0odGV4dCkge1xuICAgIHJldHVybiAnPGxpPicgKyB0ZXh0ICsgJzwvbGk+XFxuJztcbiAgfVxuXG4gIGNoZWNrYm94KGNoZWNrZWQpIHtcbiAgICByZXR1cm4gJzxpbnB1dCAnXG4gICAgICArIChjaGVja2VkID8gJ2NoZWNrZWQ9XCJcIiAnIDogJycpXG4gICAgICArICdkaXNhYmxlZD1cIlwiIHR5cGU9XCJjaGVja2JveFwiJ1xuICAgICAgKyAodGhpcy5vcHRpb25zLnhodG1sID8gJyAvJyA6ICcnKVxuICAgICAgKyAnPiAnO1xuICB9XG5cbiAgcGFyYWdyYXBoKHRleHQpIHtcbiAgICByZXR1cm4gJzxwPicgKyB0ZXh0ICsgJzwvcD5cXG4nO1xuICB9XG5cbiAgdGFibGUoaGVhZGVyLCBib2R5KSB7XG4gICAgaWYgKGJvZHkpIGJvZHkgPSAnPHRib2R5PicgKyBib2R5ICsgJzwvdGJvZHk+JztcblxuICAgIHJldHVybiAnPHRhYmxlPlxcbidcbiAgICAgICsgJzx0aGVhZD5cXG4nXG4gICAgICArIGhlYWRlclxuICAgICAgKyAnPC90aGVhZD5cXG4nXG4gICAgICArIGJvZHlcbiAgICAgICsgJzwvdGFibGU+XFxuJztcbiAgfVxuXG4gIHRhYmxlcm93KGNvbnRlbnQpIHtcbiAgICByZXR1cm4gJzx0cj5cXG4nICsgY29udGVudCArICc8L3RyPlxcbic7XG4gIH1cblxuICB0YWJsZWNlbGwoY29udGVudCwgZmxhZ3MpIHtcbiAgICBjb25zdCB0eXBlID0gZmxhZ3MuaGVhZGVyID8gJ3RoJyA6ICd0ZCc7XG4gICAgY29uc3QgdGFnID0gZmxhZ3MuYWxpZ25cbiAgICAgID8gJzwnICsgdHlwZSArICcgYWxpZ249XCInICsgZmxhZ3MuYWxpZ24gKyAnXCI+J1xuICAgICAgOiAnPCcgKyB0eXBlICsgJz4nO1xuICAgIHJldHVybiB0YWcgKyBjb250ZW50ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG4gIH1cblxuICAvLyBzcGFuIGxldmVsIHJlbmRlcmVyXG4gIHN0cm9uZyh0ZXh0KSB7XG4gICAgcmV0dXJuICc8c3Ryb25nPicgKyB0ZXh0ICsgJzwvc3Ryb25nPic7XG4gIH1cblxuICBlbSh0ZXh0KSB7XG4gICAgcmV0dXJuICc8ZW0+JyArIHRleHQgKyAnPC9lbT4nO1xuICB9XG5cbiAgY29kZXNwYW4odGV4dCkge1xuICAgIHJldHVybiAnPGNvZGU+JyArIHRleHQgKyAnPC9jb2RlPic7XG4gIH1cblxuICBicigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+JztcbiAgfVxuXG4gIGRlbCh0ZXh0KSB7XG4gICAgcmV0dXJuICc8ZGVsPicgKyB0ZXh0ICsgJzwvZGVsPic7XG4gIH1cblxuICBsaW5rKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgaHJlZiA9IGNsZWFuVXJsKHRoaXMub3B0aW9ucy5zYW5pdGl6ZSwgdGhpcy5vcHRpb25zLmJhc2VVcmwsIGhyZWYpO1xuICAgIGlmIChocmVmID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgbGV0IG91dCA9ICc8YSBocmVmPVwiJyArIGVzY2FwZShocmVmKSArICdcIic7XG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBvdXQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuICAgIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgIGhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgICBpZiAoaHJlZiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgbGV0IG91dCA9ICc8aW1nIHNyYz1cIicgKyBocmVmICsgJ1wiIGFsdD1cIicgKyB0ZXh0ICsgJ1wiJztcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgICB9XG4gICAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHRleHQodGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG59XG5cbi8qKlxuICogVGV4dFJlbmRlcmVyXG4gKiByZXR1cm5zIG9ubHkgdGhlIHRleHR1YWwgcGFydCBvZiB0aGUgdG9rZW5cbiAqL1xuY2xhc3MgVGV4dFJlbmRlcmVyIHtcbiAgLy8gbm8gbmVlZCBmb3IgYmxvY2sgbGV2ZWwgcmVuZGVyZXJzXG4gIHN0cm9uZyh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBlbSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBjb2Rlc3Bhbih0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBkZWwodGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgaHRtbCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0KHRleHQpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIGxpbmsoaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG5cbiAgaW1hZ2UoaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG5cbiAgYnIoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogU2x1Z2dlciBnZW5lcmF0ZXMgaGVhZGVyIGlkXG4gKi9cbmNsYXNzIFNsdWdnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNlZW4gPSB7fTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC50cmltKClcbiAgICAgIC8vIHJlbW92ZSBodG1sIHRhZ3NcbiAgICAgIC5yZXBsYWNlKC88WyFcXC9hLXpdLio/Pi9pZywgJycpXG4gICAgICAvLyByZW1vdmUgdW53YW50ZWQgY2hhcnNcbiAgICAgIC5yZXBsYWNlKC9bXFx1MjAwMC1cXHUyMDZGXFx1MkUwMC1cXHUyRTdGXFxcXCchXCIjJCUmKCkqKywuLzo7PD0+P0BbXFxdXmB7fH1+XS9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHMvZywgJy0nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgbmV4dCBzYWZlICh1bmlxdWUpIHNsdWcgdG8gdXNlXG4gICAqL1xuICBnZXROZXh0U2FmZVNsdWcob3JpZ2luYWxTbHVnLCBpc0RyeVJ1bikge1xuICAgIGxldCBzbHVnID0gb3JpZ2luYWxTbHVnO1xuICAgIGxldCBvY2N1cmVuY2VBY2N1bXVsYXRvciA9IDA7XG4gICAgaWYgKHRoaXMuc2Vlbi5oYXNPd25Qcm9wZXJ0eShzbHVnKSkge1xuICAgICAgb2NjdXJlbmNlQWNjdW11bGF0b3IgPSB0aGlzLnNlZW5bb3JpZ2luYWxTbHVnXTtcbiAgICAgIGRvIHtcbiAgICAgICAgb2NjdXJlbmNlQWNjdW11bGF0b3IrKztcbiAgICAgICAgc2x1ZyA9IG9yaWdpbmFsU2x1ZyArICctJyArIG9jY3VyZW5jZUFjY3VtdWxhdG9yO1xuICAgICAgfSB3aGlsZSAodGhpcy5zZWVuLmhhc093blByb3BlcnR5KHNsdWcpKTtcbiAgICB9XG4gICAgaWYgKCFpc0RyeVJ1bikge1xuICAgICAgdGhpcy5zZWVuW29yaWdpbmFsU2x1Z10gPSBvY2N1cmVuY2VBY2N1bXVsYXRvcjtcbiAgICAgIHRoaXMuc2VlbltzbHVnXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiBzbHVnO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgc3RyaW5nIHRvIHVuaXF1ZSBpZFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuZHJ5cnVuIEdlbmVyYXRlcyB0aGUgbmV4dCB1bmlxdWUgc2x1ZyB3aXRob3V0IHVwZGF0aW5nIHRoZSBpbnRlcm5hbCBhY2N1bXVsYXRvci5cbiAgICovXG4gIHNsdWcodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHNsdWcgPSB0aGlzLnNlcmlhbGl6ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dFNhZmVTbHVnKHNsdWcsIG9wdGlvbnMuZHJ5cnVuKTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNpbmcgJiBDb21waWxpbmdcbiAqL1xuY2xhc3MgUGFyc2VyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7XG4gICAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICAgIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXI7XG4gICAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIHRoaXMudGV4dFJlbmRlcmVyID0gbmV3IFRleHRSZW5kZXJlcigpO1xuICAgIHRoaXMuc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIFBhcnNlIE1ldGhvZFxuICAgKi9cbiAgc3RhdGljIHBhcnNlKHRva2Vucywgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIHBhcnNlci5wYXJzZSh0b2tlbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBQYXJzZSBJbmxpbmUgTWV0aG9kXG4gICAqL1xuICBzdGF0aWMgcGFyc2VJbmxpbmUodG9rZW5zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKTtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlSW5saW5lKHRva2Vucyk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgTG9vcFxuICAgKi9cbiAgcGFyc2UodG9rZW5zLCB0b3AgPSB0cnVlKSB7XG4gICAgbGV0IG91dCA9ICcnLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICBrLFxuICAgICAgbDIsXG4gICAgICBsMyxcbiAgICAgIHJvdyxcbiAgICAgIGNlbGwsXG4gICAgICBoZWFkZXIsXG4gICAgICBib2R5LFxuICAgICAgdG9rZW4sXG4gICAgICBvcmRlcmVkLFxuICAgICAgc3RhcnQsXG4gICAgICBsb29zZSxcbiAgICAgIGl0ZW1Cb2R5LFxuICAgICAgaXRlbSxcbiAgICAgIGNoZWNrZWQsXG4gICAgICB0YXNrLFxuICAgICAgY2hlY2tib3gsXG4gICAgICByZXQ7XG5cbiAgICBjb25zdCBsID0gdG9rZW5zLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgLy8gUnVuIGFueSByZW5kZXJlciBleHRlbnNpb25zXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXSkge1xuICAgICAgICByZXQgPSB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnNbdG9rZW4udHlwZV0uY2FsbCh7IHBhcnNlcjogdGhpcyB9LCB0b2tlbik7XG4gICAgICAgIGlmIChyZXQgIT09IGZhbHNlIHx8ICFbJ3NwYWNlJywgJ2hyJywgJ2hlYWRpbmcnLCAnY29kZScsICd0YWJsZScsICdibG9ja3F1b3RlJywgJ2xpc3QnLCAnaHRtbCcsICdwYXJhZ3JhcGgnLCAndGV4dCddLmluY2x1ZGVzKHRva2VuLnR5cGUpKSB7XG4gICAgICAgICAgb3V0ICs9IHJldCB8fCAnJztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3BhY2UnOiB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnaHInOiB7XG4gICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuaHIoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdoZWFkaW5nJzoge1xuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmhlYWRpbmcoXG4gICAgICAgICAgICB0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucyksXG4gICAgICAgICAgICB0b2tlbi5kZXB0aCxcbiAgICAgICAgICAgIHVuZXNjYXBlKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCB0aGlzLnRleHRSZW5kZXJlcikpLFxuICAgICAgICAgICAgdGhpcy5zbHVnZ2VyKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdjb2RlJzoge1xuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmNvZGUodG9rZW4udGV4dCxcbiAgICAgICAgICAgIHRva2VuLmxhbmcsXG4gICAgICAgICAgICB0b2tlbi5lc2NhcGVkKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0YWJsZSc6IHtcbiAgICAgICAgICBoZWFkZXIgPSAnJztcblxuICAgICAgICAgIC8vIGhlYWRlclxuICAgICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgICBsMiA9IHRva2VuLmhlYWRlci5sZW5ndGg7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGwyOyBqKyspIHtcbiAgICAgICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwoXG4gICAgICAgICAgICAgIHRoaXMucGFyc2VJbmxpbmUodG9rZW4uaGVhZGVyW2pdLnRva2VucyksXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdG9rZW4uYWxpZ25bal0gfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGVhZGVyICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG5cbiAgICAgICAgICBib2R5ID0gJyc7XG4gICAgICAgICAgbDIgPSB0b2tlbi5yb3dzLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbDI7IGorKykge1xuICAgICAgICAgICAgcm93ID0gdG9rZW4ucm93c1tqXTtcblxuICAgICAgICAgICAgY2VsbCA9ICcnO1xuICAgICAgICAgICAgbDMgPSByb3cubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGwzOyBrKyspIHtcbiAgICAgICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlSW5saW5lKHJvd1trXS50b2tlbnMpLFxuICAgICAgICAgICAgICAgIHsgaGVhZGVyOiBmYWxzZSwgYWxpZ246IHRva2VuLmFsaWduW2tdIH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci50YWJsZShoZWFkZXIsIGJvZHkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOiB7XG4gICAgICAgICAgYm9keSA9IHRoaXMucGFyc2UodG9rZW4udG9rZW5zKTtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5ibG9ja3F1b3RlKGJvZHkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2xpc3QnOiB7XG4gICAgICAgICAgb3JkZXJlZCA9IHRva2VuLm9yZGVyZWQ7XG4gICAgICAgICAgc3RhcnQgPSB0b2tlbi5zdGFydDtcbiAgICAgICAgICBsb29zZSA9IHRva2VuLmxvb3NlO1xuICAgICAgICAgIGwyID0gdG9rZW4uaXRlbXMubGVuZ3RoO1xuXG4gICAgICAgICAgYm9keSA9ICcnO1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsMjsgaisrKSB7XG4gICAgICAgICAgICBpdGVtID0gdG9rZW4uaXRlbXNbal07XG4gICAgICAgICAgICBjaGVja2VkID0gaXRlbS5jaGVja2VkO1xuICAgICAgICAgICAgdGFzayA9IGl0ZW0udGFzaztcblxuICAgICAgICAgICAgaXRlbUJvZHkgPSAnJztcbiAgICAgICAgICAgIGlmIChpdGVtLnRhc2spIHtcbiAgICAgICAgICAgICAgY2hlY2tib3ggPSB0aGlzLnJlbmRlcmVyLmNoZWNrYm94KGNoZWNrZWQpO1xuICAgICAgICAgICAgICBpZiAobG9vc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50b2tlbnMubGVuZ3RoID4gMCAmJiBpdGVtLnRva2Vuc1swXS50eXBlID09PSAncGFyYWdyYXBoJykge1xuICAgICAgICAgICAgICAgICAgaXRlbS50b2tlbnNbMF0udGV4dCA9IGNoZWNrYm94ICsgJyAnICsgaXRlbS50b2tlbnNbMF0udGV4dDtcbiAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRva2Vuc1swXS50b2tlbnMgJiYgaXRlbS50b2tlbnNbMF0udG9rZW5zLmxlbmd0aCA+IDAgJiYgaXRlbS50b2tlbnNbMF0udG9rZW5zWzBdLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnRva2Vuc1swXS50b2tlbnNbMF0udGV4dCA9IGNoZWNrYm94ICsgJyAnICsgaXRlbS50b2tlbnNbMF0udG9rZW5zWzBdLnRleHQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGl0ZW0udG9rZW5zLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGNoZWNrYm94XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbUJvZHkgKz0gY2hlY2tib3g7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbUJvZHkgKz0gdGhpcy5wYXJzZShpdGVtLnRva2VucywgbG9vc2UpO1xuICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGl0ZW1Cb2R5LCB0YXNrLCBjaGVja2VkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saXN0KGJvZHksIG9yZGVyZWQsIHN0YXJ0KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdodG1sJzoge1xuICAgICAgICAgIC8vIFRPRE8gcGFyc2UgaW5saW5lIGNvbnRlbnQgaWYgcGFyYW1ldGVyIG1hcmtkb3duPTFcbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5odG1sKHRva2VuLnRleHQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3BhcmFncmFwaCc6IHtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgIGJvZHkgPSB0b2tlbi50b2tlbnMgPyB0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucykgOiB0b2tlbi50ZXh0O1xuICAgICAgICAgIHdoaWxlIChpICsgMSA8IGwgJiYgdG9rZW5zW2kgKyAxXS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zWysraV07XG4gICAgICAgICAgICBib2R5ICs9ICdcXG4nICsgKHRva2VuLnRva2VucyA/IHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zKSA6IHRva2VuLnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gdG9wID8gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgoYm9keSkgOiBib2R5O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGNvbnN0IGVyck1zZyA9ICdUb2tlbiB3aXRoIFwiJyArIHRva2VuLnR5cGUgKyAnXCIgdHlwZSB3YXMgbm90IGZvdW5kLic7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBJbmxpbmUgVG9rZW5zXG4gICAqL1xuICBwYXJzZUlubGluZSh0b2tlbnMsIHJlbmRlcmVyKSB7XG4gICAgcmVuZGVyZXIgPSByZW5kZXJlciB8fCB0aGlzLnJlbmRlcmVyO1xuICAgIGxldCBvdXQgPSAnJyxcbiAgICAgIGksXG4gICAgICB0b2tlbixcbiAgICAgIHJldDtcblxuICAgIGNvbnN0IGwgPSB0b2tlbnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICAvLyBSdW4gYW55IHJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdKSB7XG4gICAgICAgIHJldCA9IHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXS5jYWxsKHsgcGFyc2VyOiB0aGlzIH0sIHRva2VuKTtcbiAgICAgICAgaWYgKHJldCAhPT0gZmFsc2UgfHwgIVsnZXNjYXBlJywgJ2h0bWwnLCAnbGluaycsICdpbWFnZScsICdzdHJvbmcnLCAnZW0nLCAnY29kZXNwYW4nLCAnYnInLCAnZGVsJywgJ3RleHQnXS5pbmNsdWRlcyh0b2tlbi50eXBlKSkge1xuICAgICAgICAgIG91dCArPSByZXQgfHwgJyc7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2VzY2FwZSc6IHtcbiAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIudGV4dCh0b2tlbi50ZXh0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdodG1sJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5odG1sKHRva2VuLnRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2xpbmsnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmxpbmsodG9rZW4uaHJlZiwgdG9rZW4udGl0bGUsIHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2ltYWdlJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5pbWFnZSh0b2tlbi5ocmVmLCB0b2tlbi50aXRsZSwgdG9rZW4udGV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnc3Ryb25nJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5zdHJvbmcodGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMsIHJlbmRlcmVyKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZW0nOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmVtKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2NvZGVzcGFuJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5jb2Rlc3Bhbih0b2tlbi50ZXh0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdicic6IHtcbiAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuYnIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdkZWwnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmRlbCh0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucywgcmVuZGVyZXIpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci50ZXh0KHRva2VuLnRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBjb25zdCBlcnJNc2cgPSAnVG9rZW4gd2l0aCBcIicgKyB0b2tlbi50eXBlICsgJ1wiIHR5cGUgd2FzIG5vdCBmb3VuZC4nO1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG5cbi8qKlxuICogTWFya2VkXG4gKi9cbmZ1bmN0aW9uIG1hcmtlZChzcmMsIG9wdCwgY2FsbGJhY2spIHtcbiAgLy8gdGhyb3cgZXJyb3IgaW4gY2FzZSBvZiBub24gc3RyaW5nIGlucHV0XG4gIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgfVxuICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSAnXG4gICAgICArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0O1xuICAgIG9wdCA9IG51bGw7XG4gIH1cblxuICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuICBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KTtcblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBjb25zdCBoaWdobGlnaHQgPSBvcHQuaGlnaGxpZ2h0O1xuICAgIGxldCB0b2tlbnM7XG5cbiAgICB0cnkge1xuICAgICAgdG9rZW5zID0gTGV4ZXIubGV4KHNyYywgb3B0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZG9uZSA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgbGV0IG91dDtcblxuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAob3B0LndhbGtUb2tlbnMpIHtcbiAgICAgICAgICAgIG1hcmtlZC53YWxrVG9rZW5zKHRva2Vucywgb3B0LndhbGtUb2tlbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgPSBQYXJzZXIucGFyc2UodG9rZW5zLCBvcHQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuXG4gICAgICByZXR1cm4gZXJyXG4gICAgICAgID8gY2FsbGJhY2soZXJyKVxuICAgICAgICA6IGNhbGxiYWNrKG51bGwsIG91dCk7XG4gICAgfTtcblxuICAgIGlmICghaGlnaGxpZ2h0IHx8IGhpZ2hsaWdodC5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSBvcHQuaGlnaGxpZ2h0O1xuXG4gICAgaWYgKCF0b2tlbnMubGVuZ3RoKSByZXR1cm4gZG9uZSgpO1xuXG4gICAgbGV0IHBlbmRpbmcgPSAwO1xuICAgIG1hcmtlZC53YWxrVG9rZW5zKHRva2VucywgZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgIGlmICh0b2tlbi50eXBlID09PSAnY29kZScpIHtcbiAgICAgICAgcGVuZGluZysrO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBoaWdobGlnaHQodG9rZW4udGV4dCwgdG9rZW4ubGFuZywgZnVuY3Rpb24oZXJyLCBjb2RlKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZSAhPSBudWxsICYmIGNvZGUgIT09IHRva2VuLnRleHQpIHtcbiAgICAgICAgICAgICAgdG9rZW4udGV4dCA9IGNvZGU7XG4gICAgICAgICAgICAgIHRva2VuLmVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwZW5kaW5nLS07XG4gICAgICAgICAgICBpZiAocGVuZGluZyA9PT0gMCkge1xuICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHBlbmRpbmcgPT09IDApIHtcbiAgICAgIGRvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHRva2VucyA9IExleGVyLmxleChzcmMsIG9wdCk7XG4gICAgaWYgKG9wdC53YWxrVG9rZW5zKSB7XG4gICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICB9XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkLic7XG4gICAgaWYgKG9wdC5zaWxlbnQpIHtcbiAgICAgIHJldHVybiAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnNcbiAqL1xuXG5tYXJrZWQub3B0aW9ucyA9XG5tYXJrZWQuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdCkge1xuICBtZXJnZShtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gIGNoYW5nZURlZmF1bHRzKG1hcmtlZC5kZWZhdWx0cyk7XG4gIHJldHVybiBtYXJrZWQ7XG59O1xuXG5tYXJrZWQuZ2V0RGVmYXVsdHMgPSBnZXREZWZhdWx0cztcblxubWFya2VkLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cbi8qKlxuICogVXNlIEV4dGVuc2lvblxuICovXG5cbm1hcmtlZC51c2UgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gIGNvbnN0IG9wdHMgPSBtZXJnZSh7fSwgLi4uYXJncyk7XG4gIGNvbnN0IGV4dGVuc2lvbnMgPSBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucyB8fCB7IHJlbmRlcmVyczoge30sIGNoaWxkVG9rZW5zOiB7fSB9O1xuICBsZXQgaGFzRXh0ZW5zaW9ucztcblxuICBhcmdzLmZvckVhY2goKHBhY2spID0+IHtcbiAgICAvLyA9PS0tIFBhcnNlIFwiYWRkb25cIiBleHRlbnNpb25zIC0tPT0gLy9cbiAgICBpZiAocGFjay5leHRlbnNpb25zKSB7XG4gICAgICBoYXNFeHRlbnNpb25zID0gdHJ1ZTtcbiAgICAgIHBhY2suZXh0ZW5zaW9ucy5mb3JFYWNoKChleHQpID0+IHtcbiAgICAgICAgaWYgKCFleHQubmFtZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXh0ZW5zaW9uIG5hbWUgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0LnJlbmRlcmVyKSB7IC8vIFJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgICAgICBjb25zdCBwcmV2UmVuZGVyZXIgPSBleHRlbnNpb25zLnJlbmRlcmVycyA/IGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA6IG51bGw7XG4gICAgICAgICAgaWYgKHByZXZSZW5kZXJlcikge1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBleHRlbnNpb24gd2l0aCBmdW5jIHRvIHJ1biBuZXcgZXh0ZW5zaW9uIGJ1dCBmYWxsIGJhY2sgaWYgZmFsc2VcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgbGV0IHJldCA9IGV4dC5yZW5kZXJlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGV4dC5yZW5kZXJlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dC50b2tlbml6ZXIpIHsgLy8gVG9rZW5pemVyIEV4dGVuc2lvbnNcbiAgICAgICAgICBpZiAoIWV4dC5sZXZlbCB8fCAoZXh0LmxldmVsICE9PSAnYmxvY2snICYmIGV4dC5sZXZlbCAhPT0gJ2lubGluZScpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHRlbnNpb24gbGV2ZWwgbXVzdCBiZSAnYmxvY2snIG9yICdpbmxpbmUnXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uc1tleHQubGV2ZWxdKSB7XG4gICAgICAgICAgICBleHRlbnNpb25zW2V4dC5sZXZlbF0udW5zaGlmdChleHQudG9rZW5pemVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHQubGV2ZWxdID0gW2V4dC50b2tlbml6ZXJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXh0LnN0YXJ0KSB7IC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGZvciBzdGFydCBvZiB0b2tlblxuICAgICAgICAgICAgaWYgKGV4dC5sZXZlbCA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9ucy5zdGFydEJsb2NrKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydEJsb2NrLnB1c2goZXh0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0QmxvY2sgPSBbZXh0LnN0YXJ0XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChleHQubGV2ZWwgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydElubGluZS5wdXNoKGV4dC5zdGFydCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydElubGluZSA9IFtleHQuc3RhcnRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHQuY2hpbGRUb2tlbnMpIHsgLy8gQ2hpbGQgdG9rZW5zIHRvIGJlIHZpc2l0ZWQgYnkgd2Fsa1Rva2Vuc1xuICAgICAgICAgIGV4dGVuc2lvbnMuY2hpbGRUb2tlbnNbZXh0Lm5hbWVdID0gZXh0LmNoaWxkVG9rZW5zO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyA9PS0tIFBhcnNlIFwib3ZlcndyaXRlXCIgZXh0ZW5zaW9ucyAtLT09IC8vXG4gICAgaWYgKHBhY2sucmVuZGVyZXIpIHtcbiAgICAgIGNvbnN0IHJlbmRlcmVyID0gbWFya2VkLmRlZmF1bHRzLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhY2sucmVuZGVyZXIpIHtcbiAgICAgICAgY29uc3QgcHJldlJlbmRlcmVyID0gcmVuZGVyZXJbcHJvcF07XG4gICAgICAgIC8vIFJlcGxhY2UgcmVuZGVyZXIgd2l0aCBmdW5jIHRvIHJ1biBleHRlbnNpb24sIGJ1dCBmYWxsIGJhY2sgaWYgZmFsc2VcbiAgICAgICAgcmVuZGVyZXJbcHJvcF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGxldCByZXQgPSBwYWNrLnJlbmRlcmVyW3Byb3BdLmFwcGx5KHJlbmRlcmVyLCBhcmdzKTtcbiAgICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0ID0gcHJldlJlbmRlcmVyLmFwcGx5KHJlbmRlcmVyLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG9wdHMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB9XG4gICAgaWYgKHBhY2sudG9rZW5pemVyKSB7XG4gICAgICBjb25zdCB0b2tlbml6ZXIgPSBtYXJrZWQuZGVmYXVsdHMudG9rZW5pemVyIHx8IG5ldyBUb2tlbml6ZXIoKTtcbiAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBwYWNrLnRva2VuaXplcikge1xuICAgICAgICBjb25zdCBwcmV2VG9rZW5pemVyID0gdG9rZW5pemVyW3Byb3BdO1xuICAgICAgICAvLyBSZXBsYWNlIHRva2VuaXplciB3aXRoIGZ1bmMgdG8gcnVuIGV4dGVuc2lvbiwgYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuICAgICAgICB0b2tlbml6ZXJbcHJvcF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGxldCByZXQgPSBwYWNrLnRva2VuaXplcltwcm9wXS5hcHBseSh0b2tlbml6ZXIsIGFyZ3MpO1xuICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXQgPSBwcmV2VG9rZW5pemVyLmFwcGx5KHRva2VuaXplciwgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBvcHRzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICB9XG5cbiAgICAvLyA9PS0tIFBhcnNlIFdhbGtUb2tlbnMgZXh0ZW5zaW9ucyAtLT09IC8vXG4gICAgaWYgKHBhY2sud2Fsa1Rva2Vucykge1xuICAgICAgY29uc3Qgd2Fsa1Rva2VucyA9IG1hcmtlZC5kZWZhdWx0cy53YWxrVG9rZW5zO1xuICAgICAgb3B0cy53YWxrVG9rZW5zID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgcGFjay53YWxrVG9rZW5zLmNhbGwodGhpcywgdG9rZW4pO1xuICAgICAgICBpZiAod2Fsa1Rva2Vucykge1xuICAgICAgICAgIHdhbGtUb2tlbnMuY2FsbCh0aGlzLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGhhc0V4dGVuc2lvbnMpIHtcbiAgICAgIG9wdHMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gICAgfVxuXG4gICAgbWFya2VkLnNldE9wdGlvbnMob3B0cyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBSdW4gY2FsbGJhY2sgZm9yIGV2ZXJ5IHRva2VuXG4gKi9cblxubWFya2VkLndhbGtUb2tlbnMgPSBmdW5jdGlvbih0b2tlbnMsIGNhbGxiYWNrKSB7XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgY2FsbGJhY2suY2FsbChtYXJrZWQsIHRva2VuKTtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RhYmxlJzoge1xuICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdG9rZW4uaGVhZGVyKSB7XG4gICAgICAgICAgbWFya2VkLndhbGtUb2tlbnMoY2VsbC50b2tlbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0b2tlbi5yb3dzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIHJvdykge1xuICAgICAgICAgICAgbWFya2VkLndhbGtUb2tlbnMoY2VsbC50b2tlbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdsaXN0Jzoge1xuICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbi5pdGVtcywgY2FsbGJhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zICYmIG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zLmNoaWxkVG9rZW5zICYmIG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zLmNoaWxkVG9rZW5zW3Rva2VuLnR5cGVdKSB7IC8vIFdhbGsgYW55IGV4dGVuc2lvbnNcbiAgICAgICAgICBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucy5jaGlsZFRva2Vuc1t0b2tlbi50eXBlXS5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkVG9rZW5zKSB7XG4gICAgICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbltjaGlsZFRva2Vuc10sIGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2tlbi50b2tlbnMpIHtcbiAgICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbi50b2tlbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBQYXJzZSBJbmxpbmVcbiAqL1xubWFya2VkLnBhcnNlSW5saW5lID0gZnVuY3Rpb24oc3JjLCBvcHQpIHtcbiAgLy8gdGhyb3cgZXJyb3IgaW4gY2FzZSBvZiBub24gc3RyaW5nIGlucHV0XG4gIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZC5wYXJzZUlubGluZSgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgfVxuICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZC5wYXJzZUlubGluZSgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSAnXG4gICAgICArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJyk7XG4gIH1cblxuICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuICBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KTtcblxuICB0cnkge1xuICAgIGNvbnN0IHRva2VucyA9IExleGVyLmxleElubGluZShzcmMsIG9wdCk7XG4gICAgaWYgKG9wdC53YWxrVG9rZW5zKSB7XG4gICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICB9XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZUlubGluZSh0b2tlbnMsIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkLic7XG4gICAgaWYgKG9wdC5zaWxlbnQpIHtcbiAgICAgIHJldHVybiAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHBvc2VcbiAqL1xubWFya2VkLlBhcnNlciA9IFBhcnNlcjtcbm1hcmtlZC5wYXJzZXIgPSBQYXJzZXIucGFyc2U7XG5tYXJrZWQuUmVuZGVyZXIgPSBSZW5kZXJlcjtcbm1hcmtlZC5UZXh0UmVuZGVyZXIgPSBUZXh0UmVuZGVyZXI7XG5tYXJrZWQuTGV4ZXIgPSBMZXhlcjtcbm1hcmtlZC5sZXhlciA9IExleGVyLmxleDtcbm1hcmtlZC5Ub2tlbml6ZXIgPSBUb2tlbml6ZXI7XG5tYXJrZWQuU2x1Z2dlciA9IFNsdWdnZXI7XG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5cbmNvbnN0IG9wdGlvbnMgPSBtYXJrZWQub3B0aW9ucztcbmNvbnN0IHNldE9wdGlvbnMgPSBtYXJrZWQuc2V0T3B0aW9ucztcbmNvbnN0IHVzZSA9IG1hcmtlZC51c2U7XG5jb25zdCB3YWxrVG9rZW5zID0gbWFya2VkLndhbGtUb2tlbnM7XG5jb25zdCBwYXJzZUlubGluZSA9IG1hcmtlZC5wYXJzZUlubGluZTtcbmNvbnN0IHBhcnNlID0gbWFya2VkO1xuY29uc3QgcGFyc2VyID0gUGFyc2VyLnBhcnNlO1xuY29uc3QgbGV4ZXIgPSBMZXhlci5sZXg7XG5cbmV4cG9ydCB7IExleGVyLCBQYXJzZXIsIFJlbmRlcmVyLCBTbHVnZ2VyLCBUZXh0UmVuZGVyZXIsIFRva2VuaXplciwgZGVmYXVsdHMsIGdldERlZmF1bHRzLCBsZXhlciwgbWFya2VkLCBvcHRpb25zLCBwYXJzZSwgcGFyc2VJbmxpbmUsIHBhcnNlciwgc2V0T3B0aW9ucywgdXNlLCB3YWxrVG9rZW5zIH07XG4iLCAiaW1wb3J0IHsgV29yZFByZXNzQ2xpZW50LCBXb3JkUHJlc3NDbGllbnRSZXN1bHQsIFdvcmRQcmVzc0NsaWVudFJldHVybkNvZGUgfSBmcm9tICcuL3dwLWNsaWVudCc7XHJcbmltcG9ydCB7IENsaWVudCB9IGZyb20gJ3htbHJwYyc7XHJcbmltcG9ydCB7IEFwcCwgTWFya2Rvd25WaWV3IH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgV29yZHByZXNzUGx1Z2luIGZyb20gJy4vbWFpbic7XHJcblxyXG5leHBvcnQgY2xhc3MgV3BSZXN0SmV0cGFja0NsaWVudCBpbXBsZW1lbnRzIFdvcmRQcmVzc0NsaWVudCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50OiBDbGllbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBhcHA6IEFwcCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuICApIHtcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocGx1Z2luLnNldHRpbmdzLmVuZHBvaW50KTtcclxuICAgIGNvbnNvbGUubG9nKHVybCk7XHJcbiAgfVxyXG5cclxuICBuZXdQb3N0KCk6IFByb21pc2U8V29yZFByZXNzQ2xpZW50UmVzdWx0PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCB7IHdvcmtzcGFjZSB9ID0gdGhpcy5hcHA7XHJcbiAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB3b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgICBpZiAoYWN0aXZlVmlldykge1xyXG4gICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgY29kZTogV29yZFByZXNzQ2xpZW50UmV0dXJuQ29kZS5PSyxcclxuICAgICAgICAgIGRhdGE6ICcnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSAnVGhlcmUgaXMgbm8gZWRpdG9yIGZvdW5kLiBOb3RoaW5nIHdpbGwgYmUgcHVibGlzaGVkLic7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcclxuICAgICAgICByZWplY3QobmV3IEVycm9yKGVycm9yKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQ0EsSUFBQyxZQUFXO0FBQ1YsVUFBSSxRQUFRLFdBQVcsWUFBWSxTQUFTLFNBQVMsWUFBWSxVQUFVLGVBQWUsV0FBVyxXQUFXLFdBQVcsT0FDekgsUUFBUSxHQUFHLE9BQ1gsVUFBVSxHQUFHO0FBRWYsZUFBUyxXQUFXO0FBQ2xCLFlBQUksR0FBRyxLQUFLLEtBQUssUUFBUSxTQUFTO0FBQ2xDLGlCQUFTLFVBQVUsSUFBSSxVQUFVLEtBQUssVUFBVSxTQUFTLE1BQU0sS0FBSyxXQUFXLEtBQUs7QUFDcEYsWUFBSSxXQUFXLE9BQU8sU0FBUztBQUM3QixpQkFBTyxPQUFPLE1BQU0sTUFBTTtBQUFBLGVBQ3JCO0FBQ0wsZUFBSyxJQUFJLEdBQUcsTUFBTSxRQUFRLFFBQVEsSUFBSSxLQUFLLEtBQUs7QUFDOUMscUJBQVMsUUFBUTtBQUNqQixnQkFBSSxVQUFVLE1BQU07QUFDbEIsbUJBQUssT0FBTyxRQUFRO0FBQ2xCLG9CQUFJLENBQUMsUUFBUSxLQUFLLFFBQVE7QUFBTTtBQUNoQyx1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VUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsV0FBVztBQUFBLFFBQ1gsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sV0FBVztBQUFBLFFBQ1gsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsV0FBVztBQUFBLFFBQ1gsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsV0FBVztBQUFBLFFBQ1gsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sV0FBVztBQUFBLFFBQ1gsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsV0FBVztBQUFBLFFBQ1gsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsWUFBWTtBQUFBLFFBQ1osU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsV0FBVztBQUFBLFFBQ1gsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBLFFBQ1IsT0FBTztBQUFBLFFBQ1AsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsU0FBUztBQUFBLFFBQ1QsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsVUFBVTtBQUFBLFFBQ1YsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsTUFBTTtBQUFBLFFBQ04sU0FBUztBQUFBLFFBQ1QsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsUUFBUTtBQUFBLFFBQ1IsU0FBUztBQUFBLFFBQ1QsU0FBUztBQUFBLFFBQ1QsVUFBVTtBQUFBLFFBQ1YsVUFBVTtBQUFBLFFBQ1Ys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QUE7QUFBQSxFQUdULE9BQWE7QUFDWCxVQUFNO0FBQ04sU0FBSztBQUFBO0FBQUEsRUFHQyxPQUFhO0FBQ25CLFVBQU0sMEJBQTBCLEtBQUssVUFBVSxTQUFTO0FBQ3hELFFBQUksaUNBQWdCLHlCQUNqQixjQUFjLFdBQ2QsU0FBUyxXQUNULFFBQVEsTUFBTTtBQUNiLFlBQU0sU0FBUyxzQkFBc0IsS0FBSyxLQUFLLEtBQUs7QUFDcEQsVUFBSSxRQUFRO0FBQ1YsZUFBTyxVQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBSGxDM0Isb0NBQTZDLHdCQUFPO0FBQUEsRUFJN0MsU0FBUztBQUFBO0FBQ1osY0FBUSxJQUFJO0FBRWQsWUFBTSxLQUFLO0FBRVQsV0FBSyxhQUNILDBCQUNBLFVBQVEsSUFBSSxxQkFBcUIsTUFBTTtBQUd6QztBQUVBLFVBQUksS0FBSyxTQUFTLGdCQUFnQjtBQUNoQyxhQUFLLGNBQWMsV0FBVyxxQkFBcUIsTUFBTTtBQUN2RCxlQUFLO0FBQUE7QUFBQTtBQUlYLFdBQUssV0FBVztBQUFBLFFBQ2YsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUI7QUFDbkQsZ0JBQU0sU0FBUyxzQkFBc0IsS0FBSyxLQUFLO0FBQy9DLGNBQUksUUFBUTtBQUNWLG1CQUFPLFVBQVU7QUFBQTtBQUFBO0FBQUE7QUFLekIsV0FBSyxjQUFjLElBQUksb0JBQW9CLEtBQUssS0FBSztBQUFBO0FBQUE7QUFBQSxFQUd0RCxXQUFXO0FBQUE7QUFBQSxFQUdMLGVBQWU7QUFBQTtBQUNwQixXQUFLLFdBQVcsT0FBTyxPQUFPLElBQUksa0JBQWtCLE1BQU0sS0FBSztBQUFBO0FBQUE7QUFBQSxFQUcxRCxlQUFlO0FBQUE7QUFDcEIsWUFBTSxLQUFLLFNBQVMsS0FBSztBQUFBO0FBQUE7QUFBQSxFQUdYLDZCQUE0QztBQUFBO0FBQ3hELFlBQU0sV0FBVyxLQUFLLElBQUksVUFBVSxnQkFBZ0I7QUFDcEQsVUFBSSxTQUFTLFFBQVE7QUFDbkIsYUFBSyxJQUFJLFVBQVUsV0FBVyxTQUFTO0FBQ3ZDO0FBQUE7QUFHRixZQUFNLEtBQUssSUFBSSxVQUFVLGFBQWEsT0FBTyxhQUFhO0FBQUEsUUFDeEQsTUFBTTtBQUFBLFFBQ04sUUFBUTtBQUFBO0FBR1YsV0FBSyxJQUFJLFVBQVUsV0FBVyxLQUFLLElBQUksVUFBVSxnQkFBZ0IsMEJBQTBCO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
