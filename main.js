/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/xmlbuilder2/lib/xmlbuilder2.min.js
var require_xmlbuilder2_min = __commonJS({
  "node_modules/xmlbuilder2/lib/xmlbuilder2.min.js"(exports2, module2) {
    !function(e, t) {
      typeof exports2 == "object" && typeof module2 == "object" ? module2.exports = t() : typeof define == "function" && define.amd ? define([], t) : typeof exports2 == "object" ? exports2.xmlbuilder2 = t() : e.xmlbuilder2 = t();
    }(exports2, function() {
      return function(e) {
        var t = {};
        function r(n) {
          if (t[n])
            return t[n].exports;
          var i = t[n] = { i: n, l: false, exports: {} };
          return e[n].call(i.exports, i, i.exports, r), i.l = true, i.exports;
        }
        return r.m = e, r.c = t, r.d = function(e2, t2, n) {
          r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
        }, r.r = function(e2) {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, r.t = function(e2, t2) {
          if (1 & t2 && (e2 = r(e2)), 8 & t2)
            return e2;
          if (4 & t2 && typeof e2 == "object" && e2 && e2.__esModule)
            return e2;
          var n = Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && typeof e2 != "string")
            for (var i in e2)
              r.d(n, i, function(t3) {
                return e2[t3];
              }.bind(null, i));
          return n;
        }, r.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return r.d(t2, "a", t2), t2;
        }, r.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, r.p = "", r(r.s = 184);
      }([function(e, t, r) {
        "use strict";
        function n(e2) {
          for (var r2 in e2)
            t.hasOwnProperty(r2) || (t[r2] = e2[r2]);
        }
        Object.defineProperty(t, "__esModule", { value: true }), n(r(240)), n(r(251)), n(r(175)), n(r(107)), n(r(29)), n(r(73)), n(r(106)), n(r(30)), n(r(252)), n(r(52)), n(r(97)), n(r(253)), n(r(37)), n(r(51)), n(r(173)), n(r(176)), n(r(172)), n(r(108)), n(r(254)), n(r(255)), n(r(256)), n(r(72)), n(r(177)), n(r(105)), n(r(17)), n(r(257)), n(r(12)), n(r(174));
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(212);
        t.FixedSizeSet = i.FixedSizeSet;
        var o = r(213);
        t.ObjectCache = o.ObjectCache;
        var a = r(214);
        t.CompareCache = a.CompareCache;
        var s = r(215);
        t.Lazy = s.Lazy;
        var u = r(216);
        function l(e2, t2, r2) {
          if (m(e2))
            e2.forEach(function(e3, n3) {
              return t2.call(r2, n3, e3);
            });
          else
            for (var n2 in e2)
              e2.hasOwnProperty(n2) && t2.call(r2, n2, e2[n2]);
        }
        function c(e2) {
          var t2, r2;
          if (h(e2))
            return e2;
          if (f(e2)) {
            var i2 = [];
            try {
              for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                i2.push(c(s2));
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return i2;
          }
          if (p(e2)) {
            i2 = {};
            for (var u2 in e2)
              if (e2.hasOwnProperty(u2)) {
                var l2 = e2[u2];
                i2[u2] = c(l2);
              }
            return i2;
          }
          return e2;
        }
        function h(e2) {
          return !!e2 && Object.prototype.toString.call(e2) === "[object Function]";
        }
        function p(e2) {
          var t2 = typeof e2;
          return !!e2 && (t2 === "function" || t2 === "object");
        }
        function f(e2) {
          return Array.isArray(e2);
        }
        function d(e2) {
          return e2 instanceof Set;
        }
        function m(e2) {
          return e2 instanceof Map;
        }
        function y(e2) {
          if (p(e2)) {
            var t2 = Object.getPrototypeOf(e2), r2 = t2.constructor;
            return t2 && r2 && typeof r2 == "function" && r2 instanceof r2 && Function.prototype.toString.call(r2) === Function.prototype.toString.call(Object);
          }
          return false;
        }
        t.StringWalker = u.StringWalker, t.applyMixin = function(e2, t2) {
          for (var r2 = [], n2 = 2; n2 < arguments.length; n2++)
            r2[n2 - 2] = arguments[n2];
          Object.getOwnPropertyNames(t2.prototype).forEach(function(n3) {
            if (n3 !== "constructor") {
              if (r2.indexOf(n3) !== -1) {
                var i2 = Object.getOwnPropertyDescriptor(e2.prototype, n3);
                i2 && Object.defineProperty(e2.prototype, "_" + n3, i2);
              }
              var o2 = Object.getOwnPropertyDescriptor(t2.prototype, n3);
              o2 && Object.defineProperty(e2.prototype, n3, o2);
            }
          });
        }, t.applyDefaults = function e2(t2, r2, n2) {
          n2 === void 0 && (n2 = false);
          var i2 = c(t2 || {});
          return l(r2, function(t3, r3) {
            y(r3) ? i2[t3] = e2(i2[t3], r3, n2) : (n2 || i2[t3] === void 0) && (i2[t3] = r3);
          }), i2;
        }, t.forEachArray = function(e2, t2, r2) {
          e2.forEach(t2, r2);
        }, t.forEachObject = l, t.arrayLength = function(e2) {
          return d(e2) ? e2.size : e2.length;
        }, t.objectLength = function(e2) {
          return m(e2) ? e2.size : Object.keys(e2).length;
        }, t.getObjectValue = function(e2, t2) {
          return m(e2) ? e2.get(t2) : e2[t2];
        }, t.removeObjectValue = function(e2, t2) {
          m(e2) ? e2.delete(t2) : delete e2[t2];
        }, t.clone = c, t.isBoolean = function(e2) {
          return typeof e2 == "boolean";
        }, t.isNumber = function(e2) {
          return typeof e2 == "number";
        }, t.isString = function(e2) {
          return typeof e2 == "string";
        }, t.isFunction = h, t.isObject = p, t.isArray = f, t.isSet = d, t.isMap = m, t.isEmpty = function(e2) {
          if (f(e2))
            return !e2.length;
          if (d(e2))
            return !e2.size;
          if (m(e2))
            return !e2.size;
          if (p(e2)) {
            for (var t2 in e2)
              if (e2.hasOwnProperty(t2))
                return false;
            return true;
          }
          return false;
        }, t.isPlainObject = y, t.isIterable = function(e2) {
          return e2 && typeof e2[Symbol.iterator] == "function";
        }, t.getValue = function(e2) {
          return h(e2.valueOf) ? e2.valueOf() : e2;
        }, t.utf8Encode = function(e2) {
          for (var t2 = new Uint8Array(4 * e2.length), r2 = 0, n2 = 0; n2 < e2.length; n2++) {
            var i2 = e2.charCodeAt(n2);
            if (i2 < 128)
              t2[r2++] = i2;
            else {
              if (i2 < 2048)
                t2[r2++] = i2 >> 6 | 192;
              else {
                if (i2 > 55295 && i2 < 56320) {
                  if (++n2 >= e2.length)
                    throw new Error("Incomplete surrogate pair.");
                  var o2 = e2.charCodeAt(n2);
                  if (o2 < 56320 || o2 > 57343)
                    throw new Error("Invalid surrogate character.");
                  i2 = 65536 + ((1023 & i2) << 10) + (1023 & o2), t2[r2++] = i2 >> 18 | 240, t2[r2++] = i2 >> 12 & 63 | 128;
                } else
                  t2[r2++] = i2 >> 12 | 224;
                t2[r2++] = i2 >> 6 & 63 | 128;
              }
              t2[r2++] = 63 & i2 | 128;
            }
          }
          return t2.subarray(0, r2);
        }, t.utf8Decode = function(e2) {
          for (var t2 = "", r2 = 0; r2 < e2.length; ) {
            var n2 = e2[r2++];
            if (n2 > 127)
              if (n2 > 191 && n2 < 224) {
                if (r2 >= e2.length)
                  throw new Error("Incomplete 2-byte sequence.");
                n2 = (31 & n2) << 6 | 63 & e2[r2++];
              } else if (n2 > 223 && n2 < 240) {
                if (r2 + 1 >= e2.length)
                  throw new Error("Incomplete 3-byte sequence.");
                n2 = (15 & n2) << 12 | (63 & e2[r2++]) << 6 | 63 & e2[r2++];
              } else {
                if (!(n2 > 239 && n2 < 248))
                  throw new Error("Unknown multi-byte start.");
                if (r2 + 2 >= e2.length)
                  throw new Error("Incomplete 4-byte sequence.");
                n2 = (7 & n2) << 18 | (63 & e2[r2++]) << 12 | (63 & e2[r2++]) << 6 | 63 & e2[r2++];
              }
            if (n2 <= 65535)
              t2 += String.fromCharCode(n2);
            else {
              if (!(n2 <= 1114111))
                throw new Error("Code point exceeds UTF-16 limit.");
              n2 -= 65536, t2 += String.fromCharCode(n2 >> 10 | 55296), t2 += String.fromCharCode(1023 & n2 | 56320);
            }
          }
          return t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
          e2[e2.Before = 0] = "Before", e2[e2.Equal = 1] = "Equal", e2[e2.After = 2] = "After";
        }(t.BoundaryPosition || (t.BoundaryPosition = {})), function(e2) {
          e2[e2.None = 0] = "None", e2[e2.Capturing = 1] = "Capturing", e2[e2.AtTarget = 2] = "AtTarget", e2[e2.Bubbling = 3] = "Bubbling";
        }(t.EventPhase || (t.EventPhase = {})), function(e2) {
          e2[e2.Element = 1] = "Element", e2[e2.Attribute = 2] = "Attribute", e2[e2.Text = 3] = "Text", e2[e2.CData = 4] = "CData", e2[e2.EntityReference = 5] = "EntityReference", e2[e2.Entity = 6] = "Entity", e2[e2.ProcessingInstruction = 7] = "ProcessingInstruction", e2[e2.Comment = 8] = "Comment", e2[e2.Document = 9] = "Document", e2[e2.DocumentType = 10] = "DocumentType", e2[e2.DocumentFragment = 11] = "DocumentFragment", e2[e2.Notation = 12] = "Notation";
        }(t.NodeType || (t.NodeType = {})), function(e2) {
          e2[e2.Disconnected = 1] = "Disconnected", e2[e2.Preceding = 2] = "Preceding", e2[e2.Following = 4] = "Following", e2[e2.Contains = 8] = "Contains", e2[e2.ContainedBy = 16] = "ContainedBy", e2[e2.ImplementationSpecific = 32] = "ImplementationSpecific";
        }(t.Position || (t.Position = {})), function(e2) {
          e2[e2.Accept = 1] = "Accept", e2[e2.Reject = 2] = "Reject", e2[e2.Skip = 3] = "Skip";
        }(t.FilterResult || (t.FilterResult = {})), function(e2) {
          e2[e2.All = 4294967295] = "All", e2[e2.Element = 1] = "Element", e2[e2.Attribute = 2] = "Attribute", e2[e2.Text = 4] = "Text", e2[e2.CDataSection = 8] = "CDataSection", e2[e2.EntityReference = 16] = "EntityReference", e2[e2.Entity = 32] = "Entity", e2[e2.ProcessingInstruction = 64] = "ProcessingInstruction", e2[e2.Comment = 128] = "Comment", e2[e2.Document = 256] = "Document", e2[e2.DocumentType = 512] = "DocumentType", e2[e2.DocumentFragment = 1024] = "DocumentFragment", e2[e2.Notation = 2048] = "Notation";
        }(t.WhatToShow || (t.WhatToShow = {})), function(e2) {
          e2[e2.StartToStart = 0] = "StartToStart", e2[e2.StartToEnd = 1] = "StartToEnd", e2[e2.EndToEnd = 2] = "EndToEnd", e2[e2.EndToStart = 3] = "EndToStart";
        }(t.HowToCompare || (t.HowToCompare = {}));
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(241);
        t.Cast = n.Cast;
        var i = r(150);
        t.Guard = i.Guard;
        var o = r(242);
        t.EmptySet = o.EmptySet;
      }, function(e, t, r) {
        var n = r(11), i = r(55).f, o = r(21), a = r(25), s = r(80), u = r(119), l = r(123);
        e.exports = function(e2, t2) {
          var r2, c, h, p, f, d = e2.target, m = e2.global, y = e2.stat;
          if (r2 = m ? n : y ? n[d] || s(d, {}) : (n[d] || {}).prototype)
            for (c in t2) {
              if (p = t2[c], h = e2.noTargetGet ? (f = i(r2, c)) && f.value : r2[c], !l(m ? c : d + (y ? "." : "#") + c, e2.forced) && h !== void 0) {
                if (typeof p == typeof h)
                  continue;
                u(p, h);
              }
              (e2.sham || h && h.sham) && o(p, "sham", true), a(r2, c, p, e2);
            }
        };
      }, function(e, t, r) {
        var n = r(11), i = r(81), o = r(14), a = r(58), s = r(86), u = r(124), l = i("wks"), c = n.Symbol, h = u ? c : c && c.withoutSetter || a;
        e.exports = function(e2) {
          return o(l, e2) || (s && o(c, e2) ? l[e2] = c[e2] : l[e2] = h("Symbol." + e2)), l[e2];
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(1), i = r(29), o = function() {
          function e2() {
            this._features = { mutationObservers: true, customElements: true, slots: true, steps: true }, this._window = null, this._compareCache = new n.CompareCache(), this._rangeList = new n.FixedSizeSet();
          }
          return e2.prototype.setFeatures = function(e3) {
            if (e3 === void 0 && (e3 = true), n.isObject(e3))
              for (var t2 in e3)
                this._features[t2] = e3[t2] || false;
            else
              for (var t2 in this._features)
                this._features[t2] = e3;
          }, Object.defineProperty(e2.prototype, "features", { get: function() {
            return this._features;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "window", { get: function() {
            return this._window === null && (this._window = i.create_window()), this._window;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "compareCache", { get: function() {
            return this._compareCache;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "rangeList", { get: function() {
            return this._rangeList;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2, "instance", { get: function() {
            return e2._instance || (e2._instance = new e2()), e2._instance;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.dom = o.instance;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = n(r(228));
        t.base64 = i;
        var o = n(r(146));
        t.byte = o;
        var a = n(r(147));
        t.byteSequence = a;
        var s = n(r(96));
        t.codePoint = s;
        var u = n(r(232));
        t.json = u;
        var l = n(r(233));
        t.list = l;
        var c = n(r(234));
        t.map = c;
        var h = n(r(235));
        t.namespace = h;
        var p = n(r(236));
        t.queue = p;
        var f = n(r(237));
        t.set = f;
        var d = n(r(238));
        t.stack = d;
        var m = n(r(239));
        t.string = m;
      }, function(e, t) {
        e.exports = function(e2) {
          try {
            return !!e2();
          } catch (e3) {
            return true;
          }
        };
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = e2.call(this, r2) || this;
            return n2.name = t3, n2;
          }
          return i(t2, e2), t2;
        }(Error);
        t.DOMException = o;
        var a = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "DOMStringSizeError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.DOMStringSizeError = a;
        var s = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "WrongDocumentError", "The object is in the wrong document. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.WrongDocumentError = s;
        var u = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NoDataAllowedError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NoDataAllowedError = u;
        var l = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NoModificationAllowedError", "The object can not be modified. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NoModificationAllowedError = l;
        var c = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NotSupportedError", "The operation is not supported. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NotSupportedError = c;
        var h = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InUseAttributeError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InUseAttributeError = h;
        var p = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidStateError", "The object is in an invalid state. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidStateError = p;
        var f = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidModificationError", "The object can not be modified in this way. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidModificationError = f;
        var d = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NamespaceError", "The operation is not allowed by Namespaces in XML. [XMLNS] " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NamespaceError = d;
        var m = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidAccessError", "The object does not support the operation or argument. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidAccessError = m;
        var y = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "ValidationError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.ValidationError = y;
        var v = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "TypeMismatchError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.TypeMismatchError = v;
        var _ = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "SecurityError", "The operation is insecure. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.SecurityError = _;
        var g = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NetworkError", "A network error occurred. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NetworkError = g;
        var b = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "AbortError", "The operation was aborted. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.AbortError = b;
        var x = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "URLMismatchError", "The given URL does not match another URL. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.URLMismatchError = x;
        var w = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "QuotaExceededError", "The quota has been exceeded. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.QuotaExceededError = w;
        var E = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "TimeoutError", "The operation timed out. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.TimeoutError = E;
        var D = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidNodeTypeError", "The supplied node is incorrect or has an incorrect ancestor for this operation. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidNodeTypeError = D;
        var S = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "DataCloneError", "The object can not be cloned. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.DataCloneError = S;
        var C = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NotImplementedError", "The DOM method is not implemented by this module. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NotImplementedError = C;
        var A = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "HierarchyRequestError", "The operation would yield an incorrect node tree. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.HierarchyRequestError = A;
        var N = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NotFoundError", "The object can not be found here. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NotFoundError = N;
        var T = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "IndexSizeError", "The index is not in the allowed range. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.IndexSizeError = T;
        var O = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "SyntaxError", "The string did not match the expected pattern. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.SyntaxError = O;
        var F = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidCharacterError", "The string contains invalid characters. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidCharacterError = F;
      }, function(e, t, r) {
        "use strict";
        var n = r(53), i = ["kind", "resolve", "construct", "instanceOf", "predicate", "represent", "defaultStyle", "styleAliases"], o = ["scalar", "sequence", "mapping"];
        e.exports = function(e2, t2) {
          var r2, a;
          if (t2 = t2 || {}, Object.keys(t2).forEach(function(t3) {
            if (i.indexOf(t3) === -1)
              throw new n('Unknown option "' + t3 + '" is met in definition of "' + e2 + '" YAML type.');
          }), this.tag = e2, this.kind = t2.kind || null, this.resolve = t2.resolve || function() {
            return true;
          }, this.construct = t2.construct || function(e3) {
            return e3;
          }, this.instanceOf = t2.instanceOf || null, this.predicate = t2.predicate || null, this.represent = t2.represent || null, this.defaultStyle = t2.defaultStyle || null, this.styleAliases = (r2 = t2.styleAliases || null, a = {}, r2 !== null && Object.keys(r2).forEach(function(e3) {
            r2[e3].forEach(function(t3) {
              a[String(t3)] = e3;
            });
          }), a), o.indexOf(this.kind) === -1)
            throw new n('Unknown kind "' + this.kind + '" is specified for "' + e2 + '" YAML type.');
        };
      }, function(e, t, r) {
        (function(t2) {
          var r2 = function(e2) {
            return e2 && e2.Math == Math && e2;
          };
          e.exports = r2(typeof globalThis == "object" && globalThis) || r2(typeof window == "object" && window) || r2(typeof self == "object" && self) || r2(typeof t2 == "object" && t2) || Function("return this")();
        }).call(this, r(78));
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.idl_defineConst = function(e2, t2, r2) {
          Object.defineProperty(e2, t2, { writable: false, enumerable: true, configurable: false, value: r2 });
        };
      }, function(e, t) {
        e.exports = function(e2) {
          return typeof e2 == "object" ? e2 !== null : typeof e2 == "function";
        };
      }, function(e, t) {
        var r = {}.hasOwnProperty;
        e.exports = function(e2, t2) {
          return r.call(e2, t2);
        };
      }, function(e, t, r) {
        var n = r(16), i = r(115), o = r(18), a = r(56), s = Object.defineProperty;
        t.f = n ? s : function(e2, t2, r2) {
          if (o(e2), t2 = a(t2, true), o(r2), i)
            try {
              return s(e2, t2, r2);
            } catch (e3) {
            }
          if ("get" in r2 || "set" in r2)
            throw TypeError("Accessors not supported");
          return "value" in r2 && (e2[t2] = r2.value), e2;
        };
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !n(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(3), o = r(2);
        function a(e2, t2, r2) {
          if (r2 === void 0 && (r2 = false), r2 && i.Guard.isElementNode(t2) && i.Guard.isShadowRoot(t2.shadowRoot) && t2.shadowRoot._firstChild)
            return t2.shadowRoot._firstChild;
          if (t2._firstChild)
            return t2._firstChild;
          if (t2 === e2)
            return null;
          if (t2._nextSibling)
            return t2._nextSibling;
          for (var n2 = t2._parent; n2 && n2 !== e2; ) {
            if (n2._nextSibling)
              return n2._nextSibling;
            n2 = n2._parent;
          }
          return null;
        }
        function s() {
          var e2;
          return (e2 = {})[Symbol.iterator] = function() {
            return { next: function() {
              return { done: true, value: null };
            } };
          }, e2;
        }
        function u(e2, t2, r2, n2) {
          t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false);
          for (var i2 = t2 ? e2 : a(e2, e2, r2); i2 && n2 && !n2(i2); )
            i2 = a(e2, i2, r2);
          return i2;
        }
        function l(e2, t2, r2, n2, i2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = a(e2, t2, n2); o2 && i2 && !i2(o2); )
            o2 = a(e2, o2, n2);
          return o2;
        }
        function c(e2, t2, r2, n2) {
          var i2;
          return t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false), t2 || e2._children.size !== 0 ? ((i2 = {})[Symbol.iterator] = function() {
            var i3 = t2 ? e2 : a(e2, e2, r2);
            return { next: function() {
              for (; i3 && n2 && !n2(i3); )
                i3 = a(e2, i3, r2);
              if (i3 === null)
                return { done: true, value: null };
              var t3 = { done: false, value: i3 };
              return i3 = a(e2, i3, r2), t3;
            } };
          }, i2) : s();
        }
        function h(e2, t2, r2) {
          t2 === void 0 && (t2 = false);
          for (var n2 = t2 ? e2 : e2._parent; n2 && r2 && !r2(n2); )
            n2 = n2._parent;
          return n2;
        }
        function p(e2, t2, r2, n2) {
          r2 === void 0 && (r2 = false);
          for (var i2 = t2._parent; i2 && n2 && !n2(i2); )
            i2 = i2._parent;
          return i2;
        }
        function f(e2) {
          return i.Guard.isDocumentTypeNode(e2) ? 0 : i.Guard.isCharacterDataNode(e2) ? e2._data.length : e2._children.size;
        }
        function d(e2, t2) {
          if (t2 === void 0 && (t2 = false), t2) {
            var r2 = d(e2, false);
            return i.Guard.isShadowRoot(r2) ? d(r2._host, true) : r2;
          }
          return e2._parent ? d(e2._parent) : e2;
        }
        function m(e2, t2, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = r2 ? e2 : n2 && i.Guard.isShadowRoot(e2) ? e2._host : e2._parent; o2 !== null; ) {
            if (o2 === t2)
              return true;
            o2 = n2 && i.Guard.isShadowRoot(o2) ? o2._host : o2._parent;
          }
          return false;
        }
        function y(e2) {
          for (var t2 = d(e2), r2 = 0, n2 = u(t2); n2 !== null; ) {
            if (r2++, n2 === e2)
              return r2;
            n2 = l(t2, n2);
          }
          return -1;
        }
        t.tree_getFirstDescendantNode = u, t.tree_getNextDescendantNode = l, t.tree_getDescendantNodes = c, t.tree_getDescendantElements = function(e2, t2, r2, n2) {
          var o2;
          return t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false), t2 || e2._children.size !== 0 ? ((o2 = {})[Symbol.iterator] = function() {
            var o3 = c(e2, t2, r2, function(e3) {
              return i.Guard.isElementNode(e3);
            })[Symbol.iterator](), a2 = o3.next().value;
            return { next: function() {
              for (; a2 && n2 && !n2(a2); )
                a2 = o3.next().value;
              if (a2 === null)
                return { done: true, value: null };
              var e3 = { done: false, value: a2 };
              return a2 = o3.next().value, e3;
            } };
          }, o2) : s();
        }, t.tree_getSiblingNodes = function(e2, t2, r2) {
          var n2;
          return t2 === void 0 && (t2 = false), e2._parent && e2._parent._children.size !== 0 ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = e2._parent ? e2._parent._firstChild : null;
            return { next: function() {
              for (; n3 && (r2 && !r2(n3) || !t2 && n3 === e2); )
                n3 = n3._nextSibling;
              if (n3 === null)
                return { done: true, value: null };
              var i2 = { done: false, value: n3 };
              return n3 = n3._nextSibling, i2;
            } };
          }, n2) : s();
        }, t.tree_getFirstAncestorNode = h, t.tree_getNextAncestorNode = p, t.tree_getAncestorNodes = function(e2, t2, r2) {
          var n2;
          return t2 === void 0 && (t2 = false), t2 || e2._parent ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = h(e2, t2, r2);
            return { next: function() {
              if (n3 === null)
                return { done: true, value: null };
              var e3 = { done: false, value: n3 };
              return n3 = p(0, n3, t2, r2), e3;
            } };
          }, n2) : s();
        }, t.tree_getCommonAncestor = function(e2, t2) {
          if (e2 === t2)
            return e2._parent;
          for (var r2 = [], n2 = [], i2 = h(e2, true); i2 !== null; )
            r2.push(i2), i2 = p(0, i2, true);
          for (var o2 = h(t2, true); o2 !== null; )
            n2.push(o2), o2 = p(0, o2, true);
          for (var a2 = r2.length, s2 = n2.length, u2 = null, l2 = Math.min(a2, s2); l2 > 0; l2--) {
            var c2 = r2[--a2];
            if (c2 !== n2[--s2])
              break;
            u2 = c2;
          }
          return u2;
        }, t.tree_getFollowingNode = function(e2, t2) {
          if (t2._firstChild)
            return t2._firstChild;
          if (t2._nextSibling)
            return t2._nextSibling;
          for (; ; ) {
            var r2 = t2._parent;
            if (r2 === null || r2 === e2)
              return null;
            if (r2._nextSibling)
              return r2._nextSibling;
            t2 = r2;
          }
        }, t.tree_getPrecedingNode = function(e2, t2) {
          return t2 === e2 ? null : t2._previousSibling ? (t2 = t2._previousSibling)._lastChild ? t2._lastChild : t2 : t2._parent;
        }, t.tree_isConstrained = function e2(t2) {
          var r2, i2, a2, s2, u2, l2;
          switch (t2._nodeType) {
            case o.NodeType.Document:
              var c2 = false, h2 = false;
              try {
                for (var p2 = n(t2._children), f2 = p2.next(); !f2.done; f2 = p2.next()) {
                  switch (f2.value._nodeType) {
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.Comment:
                      break;
                    case o.NodeType.DocumentType:
                      if (c2 || h2)
                        return false;
                      c2 = true;
                      break;
                    case o.NodeType.Element:
                      if (h2)
                        return false;
                      h2 = true;
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  f2 && !f2.done && (i2 = p2.return) && i2.call(p2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              break;
            case o.NodeType.DocumentFragment:
            case o.NodeType.Element:
              try {
                for (var d2 = n(t2._children), m2 = d2.next(); !m2.done; m2 = d2.next()) {
                  switch (m2.value._nodeType) {
                    case o.NodeType.Element:
                    case o.NodeType.Text:
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.CData:
                    case o.NodeType.Comment:
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e3) {
                a2 = { error: e3 };
              } finally {
                try {
                  m2 && !m2.done && (s2 = d2.return) && s2.call(d2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              break;
            case o.NodeType.DocumentType:
            case o.NodeType.Text:
            case o.NodeType.ProcessingInstruction:
            case o.NodeType.CData:
            case o.NodeType.Comment:
              return !t2.hasChildNodes();
          }
          try {
            for (var y2 = n(t2._children), v = y2.next(); !v.done; v = y2.next()) {
              if (!e2(v.value))
                return false;
            }
          } catch (e3) {
            u2 = { error: e3 };
          } finally {
            try {
              v && !v.done && (l2 = y2.return) && l2.call(y2);
            } finally {
              if (u2)
                throw u2.error;
            }
          }
          return true;
        }, t.tree_nodeLength = f, t.tree_isEmpty = function(e2) {
          return f(e2) === 0;
        }, t.tree_rootNode = d, t.tree_isDescendantOf = function(e2, t2, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var i2 = u(e2, r2, n2); i2 !== null; ) {
            if (i2 === t2)
              return true;
            i2 = l(e2, i2, r2, n2);
          }
          return false;
        }, t.tree_isAncestorOf = m, t.tree_isHostIncludingAncestorOf = function e2(t2, r2, n2) {
          if (n2 === void 0 && (n2 = false), m(t2, r2, n2))
            return true;
          var o2 = d(t2);
          return !(!i.Guard.isDocumentFragmentNode(o2) || o2._host === null || !e2(o2._host, r2, n2));
        }, t.tree_isSiblingOf = function(e2, t2, r2) {
          return r2 === void 0 && (r2 = false), e2 !== t2 ? e2._parent !== null && e2._parent === t2._parent : !!r2;
        }, t.tree_isPreceding = function(e2, t2) {
          var r2 = y(e2), n2 = y(t2);
          return r2 !== -1 && n2 !== -1 && (d(e2) === d(t2) && n2 < r2);
        }, t.tree_isFollowing = function(e2, t2) {
          var r2 = y(e2), n2 = y(t2);
          return r2 !== -1 && n2 !== -1 && (d(e2) === d(t2) && n2 > r2);
        }, t.tree_isParentOf = function(e2, t2) {
          return e2._parent === t2;
        }, t.tree_isChildOf = function(e2, t2) {
          return t2._parent === e2;
        }, t.tree_previousSibling = function(e2) {
          return e2._previousSibling;
        }, t.tree_nextSibling = function(e2) {
          return e2._nextSibling;
        }, t.tree_firstChild = function(e2) {
          return e2._firstChild;
        }, t.tree_lastChild = function(e2) {
          return e2._lastChild;
        }, t.tree_treePosition = y, t.tree_index = function(e2) {
          for (var t2 = 0; e2._previousSibling !== null; )
            t2++, e2 = e2._previousSibling;
          return t2;
        }, t.tree_retarget = function(e2, t2) {
          for (; ; ) {
            if (!e2 || !i.Guard.isNode(e2))
              return e2;
            var r2 = d(e2);
            if (!i.Guard.isShadowRoot(r2))
              return e2;
            if (t2 && i.Guard.isNode(t2) && m(r2, t2, true, true))
              return e2;
            e2 = r2.host;
          }
        };
      }, function(e, t, r) {
        var n = r(13);
        e.exports = function(e2) {
          if (!n(e2))
            throw TypeError(String(e2) + " is not an object");
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(24), i = r(130), o = r(49), a = r(43), s = r(88), u = a.set, l = a.getterFor("Array Iterator");
        e.exports = s(Array, "Array", function(e2, t2) {
          u(this, { type: "Array Iterator", target: n(e2), index: 0, kind: t2 });
        }, function() {
          var e2 = l(this), t2 = e2.target, r2 = e2.kind, n2 = e2.index++;
          return !t2 || n2 >= t2.length ? (e2.target = void 0, { value: void 0, done: true }) : r2 == "keys" ? { value: n2, done: false } : r2 == "values" ? { value: t2[n2], done: false } : { value: [n2, t2[n2]], done: false };
        }, "values"), o.Arguments = o.Array, i("keys"), i("values"), i("entries");
      }, function(e, t, r) {
        var n = r(90), i = r(25), o = r(202);
        n || i(Object.prototype, "toString", o, { unsafe: true });
      }, function(e, t, r) {
        var n = r(16), i = r(15), o = r(40);
        e.exports = n ? function(e2, t2, r2) {
          return i.f(e2, t2, o(1, r2));
        } : function(e2, t2, r2) {
          return e2[t2] = r2, e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(137).charAt, i = r(43), o = r(88), a = i.set, s = i.getterFor("String Iterator");
        o(String, "String", function(e2) {
          a(this, { type: "String Iterator", string: String(e2), index: 0 });
        }, function() {
          var e2, t2 = s(this), r2 = t2.string, i2 = t2.index;
          return i2 >= r2.length ? { value: void 0, done: true } : (e2 = n(r2, i2), t2.index += e2.length, { value: e2, done: false });
        });
      }, function(e, t, r) {
        var n = r(11), i = r(203), o = r(19), a = r(21), s = r(5), u = s("iterator"), l = s("toStringTag"), c = o.values;
        for (var h in i) {
          var p = n[h], f = p && p.prototype;
          if (f) {
            if (f[u] !== c)
              try {
                a(f, u, c);
              } catch (e2) {
                f[u] = c;
              }
            if (f[l] || a(f, l, h), i[h]) {
              for (var d in o)
                if (f[d] !== o[d])
                  try {
                    a(f, d, o[d]);
                  } catch (e2) {
                    f[d] = o[d];
                  }
            }
          }
        }
      }, function(e, t, r) {
        var n = r(41), i = r(35);
        e.exports = function(e2) {
          return n(i(e2));
        };
      }, function(e, t, r) {
        var n = r(11), i = r(21), o = r(14), a = r(80), s = r(117), u = r(43), l = u.get, c = u.enforce, h = String(String).split("String");
        (e.exports = function(e2, t2, r2, s2) {
          var u2 = !!s2 && !!s2.unsafe, l2 = !!s2 && !!s2.enumerable, p = !!s2 && !!s2.noTargetGet;
          typeof r2 == "function" && (typeof t2 != "string" || o(r2, "name") || i(r2, "name", t2), c(r2).source = h.join(typeof t2 == "string" ? t2 : "")), e2 !== n ? (u2 ? !p && e2[t2] && (l2 = true) : delete e2[t2], l2 ? e2[t2] = r2 : i(e2, t2, r2)) : l2 ? e2[t2] = r2 : a(t2, r2);
        })(Function.prototype, "toString", function() {
          return typeof this == "function" && l(this).source || s(this);
        });
      }, function(e, t, r) {
        var n = r(47), i = Math.min;
        e.exports = function(e2) {
          return e2 > 0 ? i(n(e2), 9007199254740991) : 0;
        };
      }, function(e, t, r) {
        var n = r(35);
        e.exports = function(e2) {
          return Object(n(e2));
        };
      }, function(e, t, r) {
        var n = r(16), i = r(8), o = r(14), a = Object.defineProperty, s = {}, u = function(e2) {
          throw e2;
        };
        e.exports = function(e2, t2) {
          if (o(s, e2))
            return s[e2];
          t2 || (t2 = {});
          var r2 = [][e2], l = !!o(t2, "ACCESSORS") && t2.ACCESSORS, c = o(t2, 0) ? t2[0] : u, h = o(t2, 1) ? t2[1] : void 0;
          return s[e2] = !!r2 && !i(function() {
            if (l && !n)
              return true;
            var e3 = { length: -1 };
            l ? a(e3, 1, { enumerable: true, get: u }) : e3[1] = 1, r2.call(e3, c, h);
          });
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(148), i = r(149), o = r(151), a = r(98), s = r(153), u = r(154), l = r(155), c = r(99), h = r(100), p = r(156), f = r(157), d = r(101), m = r(158), y = r(159), v = r(160), _ = r(161), g = r(162), b = r(163), x = r(164), w = r(165), E = r(166), D = r(167), S = r(168), C = r(169), A = r(170);
        t.create_domImplementation = function(e2) {
          return n.DOMImplementationImpl._create(e2);
        }, t.create_window = function() {
          return i.WindowImpl._create();
        }, t.create_xmlDocument = function() {
          return new o.XMLDocumentImpl();
        }, t.create_document = function() {
          return new a.DocumentImpl();
        }, t.create_abortController = function() {
          return new s.AbortControllerImpl();
        }, t.create_abortSignal = function() {
          return u.AbortSignalImpl._create();
        }, t.create_documentType = function(e2, t2, r2, n2) {
          return l.DocumentTypeImpl._create(e2, t2, r2, n2);
        }, t.create_element = function(e2, t2, r2, n2) {
          return c.ElementImpl._create(e2, t2, r2, n2);
        }, t.create_htmlElement = function(e2, t2, r2, n2) {
          return c.ElementImpl._create(e2, t2, r2, n2);
        }, t.create_htmlUnknownElement = function(e2, t2, r2, n2) {
          return c.ElementImpl._create(e2, t2, r2, n2);
        }, t.create_documentFragment = function(e2) {
          return h.DocumentFragmentImpl._create(e2);
        }, t.create_shadowRoot = function(e2, t2) {
          return p.ShadowRootImpl._create(e2, t2);
        }, t.create_attr = function(e2, t2) {
          return f.AttrImpl._create(e2, t2);
        }, t.create_text = function(e2, t2) {
          return d.TextImpl._create(e2, t2);
        }, t.create_cdataSection = function(e2, t2) {
          return m.CDATASectionImpl._create(e2, t2);
        }, t.create_comment = function(e2, t2) {
          return y.CommentImpl._create(e2, t2);
        }, t.create_processingInstruction = function(e2, t2, r2) {
          return v.ProcessingInstructionImpl._create(e2, t2, r2);
        }, t.create_htmlCollection = function(e2, t2) {
          return t2 === void 0 && (t2 = function() {
            return true;
          }), _.HTMLCollectionImpl._create(e2, t2);
        }, t.create_nodeList = function(e2) {
          return g.NodeListImpl._create(e2);
        }, t.create_nodeListStatic = function(e2, t2) {
          return b.NodeListStaticImpl._create(e2, t2);
        }, t.create_namedNodeMap = function(e2) {
          return x.NamedNodeMapImpl._create(e2);
        }, t.create_range = function(e2, t2) {
          return w.RangeImpl._create(e2, t2);
        }, t.create_nodeIterator = function(e2, t2, r2) {
          return E.NodeIteratorImpl._create(e2, t2, r2);
        }, t.create_treeWalker = function(e2, t2) {
          return D.TreeWalkerImpl._create(e2, t2);
        }, t.create_nodeFilter = function() {
          return S.NodeFilterImpl._create();
        }, t.create_mutationRecord = function(e2, t2, r2, n2, i2, o2, a2, s2, u2) {
          return C.MutationRecordImpl._create(e2, t2, r2, n2, i2, o2, a2, s2, u2);
        }, t.create_domTokenList = function(e2, t2) {
          return A.DOMTokenListImpl._create(e2, t2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(17), a = r(3), s = r(72), u = new Map();
        function l(e2, t2) {
          if (t2 !== e2._root && o.tree_isAncestorOf(e2._reference, t2, true)) {
            if (e2._pointerBeforeReference)
              for (; ; ) {
                var r2 = o.tree_getFollowingNode(e2._root, t2);
                if (r2 !== null && o.tree_isDescendantOf(e2._root, r2, true) && !o.tree_isDescendantOf(t2, r2, true))
                  return void (e2._reference = r2);
                if (r2 === null)
                  return void (e2._pointerBeforeReference = false);
              }
            if (t2._previousSibling === null)
              t2._parent !== null && (e2._reference = t2._parent);
            else {
              for (var n2 = t2._previousSibling, i2 = o.tree_getFirstDescendantNode(t2._previousSibling, true, false); i2 !== null; )
                i2 !== null && (n2 = i2), i2 = o.tree_getNextDescendantNode(t2._previousSibling, i2, true, false);
              e2._reference = n2;
            }
          }
        }
        function c(e2, t2, r2, n2, i2) {
          if (a.Guard.isSlot(e2) && t2 === "name" && i2 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e2._name = n2 === null || n2 === "" ? "" : n2, s.shadowTree_assignSlotablesForATree(o.tree_rootNode(e2));
          }
        }
        function h(e2, t2, r2, n2, i2) {
          if (a.Guard.isSlotable(e2) && t2 === "slot" && i2 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e2._name = n2 === null || n2 === "" ? "" : n2, s.shadowTree_isAssigned(e2) && s.shadowTree_assignSlotables(e2._assignedSlot), s.shadowTree_assignASlot(e2);
          }
        }
        function p(e2, t2, r2, n2) {
          t2 === "id" && n2 === null && (e2._uniqueIdentifier = r2 || void 0);
        }
        t.dom_runRemovingSteps = function(e2, t2) {
        }, t.dom_runCloningSteps = function(e2, t2, r2, n2) {
        }, t.dom_runAdoptingSteps = function(e2, t2) {
        }, t.dom_runAttributeChangeSteps = function(e2, t2, r2, o2, a2) {
          var s2, u2;
          i.dom.features.slots && (h.call(e2, e2, t2, r2, o2, a2), c.call(e2, e2, t2, r2, o2, a2)), p.call(e2, e2, t2, o2, a2);
          try {
            for (var l2 = n(e2._attributeChangeSteps), f = l2.next(); !f.done; f = l2.next()) {
              f.value.call(e2, e2, t2, r2, o2, a2);
            }
          } catch (e3) {
            s2 = { error: e3 };
          } finally {
            try {
              f && !f.done && (u2 = l2.return) && u2.call(l2);
            } finally {
              if (s2)
                throw s2.error;
            }
          }
        }, t.dom_runInsertionSteps = function(e2) {
        }, t.dom_runNodeIteratorPreRemovingSteps = function(e2, t2) {
          l.call(e2, e2, t2);
        }, t.dom_hasSupportedTokens = function(e2) {
          return u.has(e2);
        }, t.dom_getSupportedTokens = function(e2) {
          return u.get(e2) || new Set();
        }, t.dom_runEventConstructingSteps = function(e2) {
        }, t.dom_runChildTextContentChangeSteps = function(e2) {
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(11), o = r(46), a = r(44), s = r(16), u = r(86), l = r(124), c = r(8), h = r(14), p = r(59), f = r(13), d = r(18), m = r(27), y = r(24), v = r(56), _ = r(40), g = r(60), b = r(61), x = r(82), w = r(190), E = r(85), D = r(55), S = r(15), C = r(79), A = r(21), N = r(25), T = r(81), O = r(57), F = r(45), k = r(58), P = r(5), I = r(125), L = r(126), M = r(62), B = r(43), j = r(36).forEach, R = O("hidden"), z = P("toPrimitive"), U = B.set, G = B.getterFor("Symbol"), X = Object.prototype, q = i.Symbol, W = o("JSON", "stringify"), H = D.f, J = S.f, Y = w.f, V = C.f, K = T("symbols"), $ = T("op-symbols"), Q = T("string-to-symbol-registry"), Z = T("symbol-to-string-registry"), ee = T("wks"), te = i.QObject, re = !te || !te.prototype || !te.prototype.findChild, ne = s && c(function() {
          return g(J({}, "a", { get: function() {
            return J(this, "a", { value: 7 }).a;
          } })).a != 7;
        }) ? function(e2, t2, r2) {
          var n2 = H(X, t2);
          n2 && delete X[t2], J(e2, t2, r2), n2 && e2 !== X && J(X, t2, n2);
        } : J, ie = function(e2, t2) {
          var r2 = K[e2] = g(q.prototype);
          return U(r2, { type: "Symbol", tag: e2, description: t2 }), s || (r2.description = t2), r2;
        }, oe = l ? function(e2) {
          return typeof e2 == "symbol";
        } : function(e2) {
          return Object(e2) instanceof q;
        }, ae = function(e2, t2, r2) {
          e2 === X && ae($, t2, r2), d(e2);
          var n2 = v(t2, true);
          return d(r2), h(K, n2) ? (r2.enumerable ? (h(e2, R) && e2[R][n2] && (e2[R][n2] = false), r2 = g(r2, { enumerable: _(0, false) })) : (h(e2, R) || J(e2, R, _(1, {})), e2[R][n2] = true), ne(e2, n2, r2)) : J(e2, n2, r2);
        }, se = function(e2, t2) {
          d(e2);
          var r2 = y(t2), n2 = b(r2).concat(he(r2));
          return j(n2, function(t3) {
            s && !ue.call(r2, t3) || ae(e2, t3, r2[t3]);
          }), e2;
        }, ue = function(e2) {
          var t2 = v(e2, true), r2 = V.call(this, t2);
          return !(this === X && h(K, t2) && !h($, t2)) && (!(r2 || !h(this, t2) || !h(K, t2) || h(this, R) && this[R][t2]) || r2);
        }, le = function(e2, t2) {
          var r2 = y(e2), n2 = v(t2, true);
          if (r2 !== X || !h(K, n2) || h($, n2)) {
            var i2 = H(r2, n2);
            return !i2 || !h(K, n2) || h(r2, R) && r2[R][n2] || (i2.enumerable = true), i2;
          }
        }, ce = function(e2) {
          var t2 = Y(y(e2)), r2 = [];
          return j(t2, function(e3) {
            h(K, e3) || h(F, e3) || r2.push(e3);
          }), r2;
        }, he = function(e2) {
          var t2 = e2 === X, r2 = Y(t2 ? $ : y(e2)), n2 = [];
          return j(r2, function(e3) {
            !h(K, e3) || t2 && !h(X, e3) || n2.push(K[e3]);
          }), n2;
        };
        (u || (N((q = function() {
          if (this instanceof q)
            throw TypeError("Symbol is not a constructor");
          var e2 = arguments.length && arguments[0] !== void 0 ? String(arguments[0]) : void 0, t2 = k(e2), r2 = function(e3) {
            this === X && r2.call($, e3), h(this, R) && h(this[R], t2) && (this[R][t2] = false), ne(this, t2, _(1, e3));
          };
          return s && re && ne(X, t2, { configurable: true, set: r2 }), ie(t2, e2);
        }).prototype, "toString", function() {
          return G(this).tag;
        }), N(q, "withoutSetter", function(e2) {
          return ie(k(e2), e2);
        }), C.f = ue, S.f = ae, D.f = le, x.f = w.f = ce, E.f = he, I.f = function(e2) {
          return ie(P(e2), e2);
        }, s && (J(q.prototype, "description", { configurable: true, get: function() {
          return G(this).description;
        } }), a || N(X, "propertyIsEnumerable", ue, { unsafe: true }))), n({ global: true, wrap: true, forced: !u, sham: !u }, { Symbol: q }), j(b(ee), function(e2) {
          L(e2);
        }), n({ target: "Symbol", stat: true, forced: !u }, { for: function(e2) {
          var t2 = String(e2);
          if (h(Q, t2))
            return Q[t2];
          var r2 = q(t2);
          return Q[t2] = r2, Z[r2] = t2, r2;
        }, keyFor: function(e2) {
          if (!oe(e2))
            throw TypeError(e2 + " is not a symbol");
          if (h(Z, e2))
            return Z[e2];
        }, useSetter: function() {
          re = true;
        }, useSimple: function() {
          re = false;
        } }), n({ target: "Object", stat: true, forced: !u, sham: !s }, { create: function(e2, t2) {
          return t2 === void 0 ? g(e2) : se(g(e2), t2);
        }, defineProperty: ae, defineProperties: se, getOwnPropertyDescriptor: le }), n({ target: "Object", stat: true, forced: !u }, { getOwnPropertyNames: ce, getOwnPropertySymbols: he }), n({ target: "Object", stat: true, forced: c(function() {
          E.f(1);
        }) }, { getOwnPropertySymbols: function(e2) {
          return E.f(m(e2));
        } }), W) && n({ target: "JSON", stat: true, forced: !u || c(function() {
          var e2 = q();
          return W([e2]) != "[null]" || W({ a: e2 }) != "{}" || W(Object(e2)) != "{}";
        }) }, { stringify: function(e2, t2, r2) {
          for (var n2, i2 = [e2], o2 = 1; arguments.length > o2; )
            i2.push(arguments[o2++]);
          if (n2 = t2, (f(t2) || e2 !== void 0) && !oe(e2))
            return p(t2) || (t2 = function(e3, t3) {
              if (typeof n2 == "function" && (t3 = n2.call(this, e3, t3)), !oe(t3))
                return t3;
            }), i2[1] = t2, W.apply(null, i2);
        } });
        q.prototype[z] || A(q.prototype, z, q.prototype.valueOf), M(q, "Symbol"), F[R] = true;
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(16), o = r(11), a = r(14), s = r(13), u = r(15).f, l = r(119), c = o.Symbol;
        if (i && typeof c == "function" && (!("description" in c.prototype) || c().description !== void 0)) {
          var h = {}, p = function() {
            var e2 = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]), t2 = this instanceof p ? new c(e2) : e2 === void 0 ? c() : c(e2);
            return e2 === "" && (h[t2] = true), t2;
          };
          l(p, c);
          var f = p.prototype = c.prototype;
          f.constructor = p;
          var d = f.toString, m = String(c("test")) == "Symbol(test)", y = /^Symbol\((.*)\)[^)]+$/;
          u(f, "description", { configurable: true, get: function() {
            var e2 = s(this) ? this.valueOf() : this, t2 = d.call(e2);
            if (a(h, e2))
              return "";
            var r2 = m ? t2.slice(7, -1) : t2.replace(y, "$1");
            return r2 === "" ? void 0 : r2;
          } }), n({ global: true, forced: true }, { Symbol: p });
        }
      }, function(e, t, r) {
        r(126)("iterator");
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(2), u = r(70), l = r(3), c = r(9), h = r(0), p = r(152), f = r(12), d = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._parent = null, t3._firstChild = null, t3._lastChild = null, t3._previousSibling = null, t3._nextSibling = null, t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "_childNodes", { get: function() {
            return this.__childNodes || (this.__childNodes = h.create_nodeList(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverride || a.dom.window._associatedDocument;
          }, set: function(e3) {
            this._nodeDocumentOverride = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_registeredObserverList", { get: function() {
            return this.__registeredObserverList || (this.__registeredObserverList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeType", { get: function() {
            return this._nodeType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeName", { get: function() {
            return l.Guard.isElementNode(this) ? this._htmlUppercasedQualifiedName : l.Guard.isAttrNode(this) ? this._qualifiedName : l.Guard.isExclusiveTextNode(this) ? "#text" : l.Guard.isCDATASectionNode(this) ? "#cdata-section" : l.Guard.isProcessingInstructionNode(this) ? this._target : l.Guard.isCommentNode(this) ? "#comment" : l.Guard.isDocumentNode(this) ? "#document" : l.Guard.isDocumentTypeNode(this) ? this._name : l.Guard.isDocumentFragmentNode(this) ? "#document-fragment" : "";
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "baseURI", { get: function() {
            return p.urlSerializer(this._nodeDocument._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "isConnected", { get: function() {
            return l.Guard.isElementNode(this) && h.shadowTree_isConnected(this);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "ownerDocument", { get: function() {
            return this._nodeType === s.NodeType.Document ? null : this._nodeDocument;
          }, enumerable: true, configurable: true }), t2.prototype.getRootNode = function(e3) {
            return h.tree_rootNode(this, !!e3 && e3.composed);
          }, Object.defineProperty(t2.prototype, "parentNode", { get: function() {
            return this._nodeType === s.NodeType.Attribute ? null : this._parent;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "parentElement", { get: function() {
            return this._parent && l.Guard.isElementNode(this._parent) ? this._parent : null;
          }, enumerable: true, configurable: true }), t2.prototype.hasChildNodes = function() {
            return this._firstChild !== null;
          }, Object.defineProperty(t2.prototype, "childNodes", { get: function() {
            return this._childNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstChild", { get: function() {
            return this._firstChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastChild", { get: function() {
            return this._lastChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeValue", { get: function() {
            return l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e3) {
            e3 === null && (e3 = ""), l.Guard.isAttrNode(this) ? h.attr_setAnExistingAttributeValue(this, e3) : l.Guard.isCharacterDataNode(this) && h.characterData_replaceData(this, 0, this._data.length, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "textContent", { get: function() {
            return l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h.text_descendantTextContent(this) : l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e3) {
            e3 === null && (e3 = ""), l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h.node_stringReplaceAll(e3, this) : l.Guard.isAttrNode(this) ? h.attr_setAnExistingAttributeValue(this, e3) : l.Guard.isCharacterDataNode(this) && h.characterData_replaceData(this, 0, h.tree_nodeLength(this), e3);
          }, enumerable: true, configurable: true }), t2.prototype.normalize = function() {
            for (var e3, t3, r2, n2, i2 = [], s2 = h.tree_getFirstDescendantNode(this, false, false, function(e4) {
              return l.Guard.isExclusiveTextNode(e4);
            }); s2 !== null; )
              i2.push(s2), s2 = h.tree_getNextDescendantNode(this, s2, false, false, function(e4) {
                return l.Guard.isExclusiveTextNode(e4);
              });
            for (var u2 = 0; u2 < i2.length; u2++) {
              var c2 = i2[u2];
              if (c2._parent !== null) {
                var p2 = h.tree_nodeLength(c2);
                if (p2 !== 0) {
                  var f2 = [], d2 = "";
                  try {
                    for (var m = (e3 = void 0, o(h.text_contiguousExclusiveTextNodes(c2))), y = m.next(); !y.done; y = m.next()) {
                      var v = y.value;
                      f2.push(v), d2 += v._data;
                    }
                  } catch (t4) {
                    e3 = { error: t4 };
                  } finally {
                    try {
                      y && !y.done && (t3 = m.return) && t3.call(m);
                    } finally {
                      if (e3)
                        throw e3.error;
                    }
                  }
                  if (h.characterData_replaceData(c2, p2, 0, d2), a.dom.rangeList.size !== 0)
                    for (var _ = c2._nextSibling; _ !== null && l.Guard.isExclusiveTextNode(_); ) {
                      var g = _, b = h.tree_index(g);
                      try {
                        for (var x = (r2 = void 0, o(a.dom.rangeList)), w = x.next(); !w.done; w = x.next()) {
                          var E = w.value;
                          E._start[0] === g && (E._start[0] = c2, E._start[1] += p2), E._end[0] === g && (E._end[0] = c2, E._end[1] += p2), E._start[0] === g._parent && E._start[1] === b && (E._start[0] = c2, E._start[1] = p2), E._end[0] === g._parent && E._end[1] === b && (E._end[0] = c2, E._end[1] = p2);
                        }
                      } catch (e4) {
                        r2 = { error: e4 };
                      } finally {
                        try {
                          w && !w.done && (n2 = x.return) && n2.call(x);
                        } finally {
                          if (r2)
                            throw r2.error;
                        }
                      }
                      p2 += h.tree_nodeLength(_), _ = _._nextSibling;
                    }
                  for (var D = 0; D < f2.length; D++) {
                    (v = f2[D])._parent !== null && h.mutation_remove(v, v._parent);
                  }
                } else
                  h.mutation_remove(c2, c2._parent);
              }
            }
          }, t2.prototype.cloneNode = function(e3) {
            if (e3 === void 0 && (e3 = false), l.Guard.isShadowRoot(this))
              throw new c.NotSupportedError();
            return h.node_clone(this, null, e3);
          }, t2.prototype.isEqualNode = function(e3) {
            return e3 === void 0 && (e3 = null), e3 !== null && h.node_equals(this, e3);
          }, t2.prototype.isSameNode = function(e3) {
            return e3 === void 0 && (e3 = null), this === e3;
          }, t2.prototype.compareDocumentPosition = function(e3) {
            if (e3 === this)
              return 0;
            var t3 = e3, r2 = this, n2 = null, i2 = null;
            if (l.Guard.isAttrNode(t3) && (t3 = (n2 = t3)._element), l.Guard.isAttrNode(r2) && (r2 = (i2 = r2)._element, n2 && t3 && t3 === r2))
              for (var o2 = 0; o2 < r2._attributeList.length; o2++) {
                var u2 = r2._attributeList[o2];
                if (h.node_equals(u2, n2))
                  return s.Position.ImplementationSpecific | s.Position.Preceding;
                if (h.node_equals(u2, i2))
                  return s.Position.ImplementationSpecific | s.Position.Following;
              }
            return t3 === null || r2 === null || h.tree_rootNode(t3) !== h.tree_rootNode(r2) ? s.Position.Disconnected | s.Position.ImplementationSpecific | (a.dom.compareCache.check(this, e3) ? s.Position.Preceding : s.Position.Following) : !n2 && h.tree_isAncestorOf(r2, t3) || i2 && t3 === r2 ? s.Position.Contains | s.Position.Preceding : !i2 && h.tree_isDescendantOf(r2, t3) || n2 && t3 === r2 ? s.Position.ContainedBy | s.Position.Following : h.tree_isPreceding(r2, t3) ? s.Position.Preceding : s.Position.Following;
          }, t2.prototype.contains = function(e3) {
            return e3 !== null && h.tree_isDescendantOf(this, e3, true);
          }, t2.prototype.lookupPrefix = function(e3) {
            return e3 ? l.Guard.isElementNode(this) ? h.node_locateANamespacePrefix(this, e3) : l.Guard.isDocumentNode(this) ? this.documentElement === null ? null : h.node_locateANamespacePrefix(this.documentElement, e3) : l.Guard.isDocumentTypeNode(this) || l.Guard.isDocumentFragmentNode(this) ? null : l.Guard.isAttrNode(this) ? this._element === null ? null : h.node_locateANamespacePrefix(this._element, e3) : this._parent !== null && l.Guard.isElementNode(this._parent) ? h.node_locateANamespacePrefix(this._parent, e3) : null : null;
          }, t2.prototype.lookupNamespaceURI = function(e3) {
            return h.node_locateANamespace(this, e3 || null);
          }, t2.prototype.isDefaultNamespace = function(e3) {
            return e3 || (e3 = null), h.node_locateANamespace(this, null) === e3;
          }, t2.prototype.insertBefore = function(e3, t3) {
            return h.mutation_preInsert(e3, this, t3);
          }, t2.prototype.appendChild = function(e3) {
            return h.mutation_append(e3, this);
          }, t2.prototype.replaceChild = function(e3, t3) {
            return h.mutation_replace(t3, e3, this);
          }, t2.prototype.removeChild = function(e3) {
            return h.mutation_preRemove(e3, this);
          }, t2.prototype._getTheParent = function(e3) {
            return l.Guard.isSlotable(this) && h.shadowTree_isAssigned(this) ? this._assignedSlot : this._parent;
          }, t2.ELEMENT_NODE = 1, t2.ATTRIBUTE_NODE = 2, t2.TEXT_NODE = 3, t2.CDATA_SECTION_NODE = 4, t2.ENTITY_REFERENCE_NODE = 5, t2.ENTITY_NODE = 6, t2.PROCESSING_INSTRUCTION_NODE = 7, t2.COMMENT_NODE = 8, t2.DOCUMENT_NODE = 9, t2.DOCUMENT_TYPE_NODE = 10, t2.DOCUMENT_FRAGMENT_NODE = 11, t2.NOTATION_NODE = 12, t2.DOCUMENT_POSITION_DISCONNECTED = 1, t2.DOCUMENT_POSITION_PRECEDING = 2, t2.DOCUMENT_POSITION_FOLLOWING = 4, t2.DOCUMENT_POSITION_CONTAINS = 8, t2.DOCUMENT_POSITION_CONTAINED_BY = 16, t2.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32, t2;
        }(u.EventTargetImpl);
        t.NodeImpl = d, d.prototype._children = new l.EmptySet(), f.idl_defineConst(d.prototype, "ELEMENT_NODE", 1), f.idl_defineConst(d.prototype, "ATTRIBUTE_NODE", 2), f.idl_defineConst(d.prototype, "TEXT_NODE", 3), f.idl_defineConst(d.prototype, "CDATA_SECTION_NODE", 4), f.idl_defineConst(d.prototype, "ENTITY_REFERENCE_NODE", 5), f.idl_defineConst(d.prototype, "ENTITY_NODE", 6), f.idl_defineConst(d.prototype, "PROCESSING_INSTRUCTION_NODE", 7), f.idl_defineConst(d.prototype, "COMMENT_NODE", 8), f.idl_defineConst(d.prototype, "DOCUMENT_NODE", 9), f.idl_defineConst(d.prototype, "DOCUMENT_TYPE_NODE", 10), f.idl_defineConst(d.prototype, "DOCUMENT_FRAGMENT_NODE", 11), f.idl_defineConst(d.prototype, "NOTATION_NODE", 12), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_DISCONNECTED", 1), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_PRECEDING", 2), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_FOLLOWING", 4), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_CONTAINS", 8), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_CONTAINED_BY", 16), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", 32);
      }, function(e, t) {
        e.exports = function(e2) {
          if (e2 == null)
            throw TypeError("Can't call method on " + e2);
          return e2;
        };
      }, function(e, t, r) {
        var n = r(87), i = r(41), o = r(27), a = r(26), s = r(128), u = [].push, l = function(e2) {
          var t2 = e2 == 1, r2 = e2 == 2, l2 = e2 == 3, c = e2 == 4, h = e2 == 6, p = e2 == 5 || h;
          return function(f, d, m, y) {
            for (var v, _, g = o(f), b = i(g), x = n(d, m, 3), w = a(b.length), E = 0, D = y || s, S = t2 ? D(f, w) : r2 ? D(f, 0) : void 0; w > E; E++)
              if ((p || E in b) && (_ = x(v = b[E], E, g), e2)) {
                if (t2)
                  S[E] = _;
                else if (_)
                  switch (e2) {
                    case 3:
                      return true;
                    case 5:
                      return v;
                    case 6:
                      return E;
                    case 2:
                      u.call(S, v);
                  }
                else if (c)
                  return false;
              }
            return h ? -1 : l2 || c ? c : S;
          };
        };
        e.exports = { forEach: l(0), map: l(1), filter: l(2), some: l(3), every: l(4), find: l(5), findIndex: l(6) };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(9), u = r(2), l = r(3), c = r(1), h = r(7), p = r(73), f = r(17), d = r(172), m = r(72), y = r(51), v = r(30), _ = r(106);
        function g(e2, t2, r2) {
          var i2, o2, a2, l2, c2, h2, p2, d2, m2 = t2._nodeType, y2 = e2._nodeType, v2 = r2 ? r2._nodeType : null;
          if (m2 !== u.NodeType.Document && m2 !== u.NodeType.DocumentFragment && m2 !== u.NodeType.Element)
            throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + t2.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(t2, e2, true))
            throw new s.HierarchyRequestError("The node to be inserted cannot be an inclusive ancestor of parent node. Node is " + e2.nodeName + ", parent node is " + t2.nodeName + ".");
          if (r2 !== null && r2._parent !== t2)
            throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is " + r2.nodeName + ", parent node is " + t2.nodeName + ".");
          if (y2 !== u.NodeType.DocumentFragment && y2 !== u.NodeType.DocumentType && y2 !== u.NodeType.Element && y2 !== u.NodeType.Text && y2 !== u.NodeType.ProcessingInstruction && y2 !== u.NodeType.CData && y2 !== u.NodeType.Comment)
            throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + e2.nodeName + ".");
          if (y2 === u.NodeType.Text && m2 === u.NodeType.Document)
            throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + e2.nodeName + ".");
          if (y2 === u.NodeType.DocumentType && m2 !== u.NodeType.Document)
            throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + t2.nodeName + ".");
          if (m2 === u.NodeType.Document) {
            if (y2 === u.NodeType.DocumentFragment) {
              var _2 = 0;
              try {
                for (var g2 = n(e2._children), b2 = g2.next(); !b2.done; b2 = g2.next()) {
                  var x2 = b2.value;
                  if (x2._nodeType === u.NodeType.Element)
                    _2++;
                  else if (x2._nodeType === u.NodeType.Text)
                    throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + x2.nodeName + ".");
                }
              } catch (e3) {
                i2 = { error: e3 };
              } finally {
                try {
                  b2 && !b2.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              if (_2 > 1)
                throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + _2 + " element nodes.");
              if (_2 === 1) {
                try {
                  for (var w2 = n(t2._children), E = w2.next(); !E.done; E = w2.next()) {
                    if (E.value._nodeType === u.NodeType.Element)
                      throw new s.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e3) {
                  a2 = { error: e3 };
                } finally {
                  try {
                    E && !E.done && (l2 = w2.return) && l2.call(w2);
                  } finally {
                    if (a2)
                      throw a2.error;
                  }
                }
                if (r2) {
                  if (v2 === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  for (var D = r2._nextSibling; D; ) {
                    if (D._nodeType === u.NodeType.DocumentType)
                      throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                    D = D._nextSibling;
                  }
                }
              }
            } else if (y2 === u.NodeType.Element) {
              try {
                for (var S = n(t2._children), C = S.next(); !C.done; C = S.next()) {
                  if (C.value._nodeType === u.NodeType.Element)
                    throw new s.HierarchyRequestError("Document already has a document element node. Node is " + e2.nodeName + ".");
                }
              } catch (e3) {
                c2 = { error: e3 };
              } finally {
                try {
                  C && !C.done && (h2 = S.return) && h2.call(S);
                } finally {
                  if (c2)
                    throw c2.error;
                }
              }
              if (r2) {
                if (v2 === u.NodeType.DocumentType)
                  throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e2.nodeName + ".");
                for (D = r2._nextSibling; D; ) {
                  if (D._nodeType === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e2.nodeName + ".");
                  D = D._nextSibling;
                }
              }
            } else if (y2 === u.NodeType.DocumentType) {
              try {
                for (var A = n(t2._children), N = A.next(); !N.done; N = A.next()) {
                  if (N.value._nodeType === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Document already has a document type node. Node is " + e2.nodeName + ".");
                }
              } catch (e3) {
                p2 = { error: e3 };
              } finally {
                try {
                  N && !N.done && (d2 = A.return) && d2.call(A);
                } finally {
                  if (p2)
                    throw p2.error;
                }
              }
              if (r2)
                for (var T = r2._previousSibling; T; ) {
                  if (T._nodeType === u.NodeType.Element)
                    throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e2.nodeName + ".");
                  T = T._previousSibling;
                }
              else
                for (T = t2._firstChild; T; ) {
                  if (T._nodeType === u.NodeType.Element)
                    throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e2.nodeName + ".");
                  T = T._nextSibling;
                }
            }
          }
        }
        function b(e2, t2, r2) {
          g(e2, t2, r2);
          var n2 = r2;
          return n2 === e2 && (n2 = e2._nextSibling), _.document_adopt(e2, t2._nodeDocument), x(e2, t2, n2), e2;
        }
        function x(e2, t2, r2, i2) {
          var s2, d2;
          if (r2 !== null || e2._nodeType === u.NodeType.DocumentFragment) {
            var _2 = e2._nodeType === u.NodeType.DocumentFragment ? e2._children.size : 1;
            if (r2 !== null && a.dom.rangeList.size !== 0) {
              var g2 = f.tree_index(r2);
              try {
                for (var b2 = n(a.dom.rangeList), x2 = b2.next(); !x2.done; x2 = b2.next()) {
                  var E = x2.value;
                  E._start[0] === t2 && E._start[1] > g2 && (E._start[1] += _2), E._end[0] === t2 && E._end[1] > g2 && (E._end[1] += _2);
                }
              } catch (e3) {
                s2 = { error: e3 };
              } finally {
                try {
                  x2 && !x2.done && (d2 = b2.return) && d2.call(b2);
                } finally {
                  if (s2)
                    throw s2.error;
                }
              }
            }
            var D = e2._nodeType === u.NodeType.DocumentFragment ? new (Array.bind.apply(Array, o([void 0], e2._children)))() : [e2];
            if (e2._nodeType === u.NodeType.DocumentFragment)
              for (; e2._firstChild; )
                w(e2._firstChild, e2, true);
            a.dom.features.mutationObservers && e2._nodeType === u.NodeType.DocumentFragment && y.observer_queueTreeMutationRecord(e2, [], D, null, null);
            for (var S = r2 ? r2._previousSibling : t2._lastChild, C = r2 === null ? -1 : f.tree_index(r2), A = 0; A < D.length; A++) {
              var N = D[A];
              if (l.Guard.isElementNode(N) && (l.Guard.isDocumentNode(t2) && (t2._documentElement = N), N._nodeDocument._hasNamespaces || N._namespace === null && N._namespacePrefix === null || (N._nodeDocument._hasNamespaces = true)), N._parent = t2, r2 === null ? h.set.append(t2._children, N) : (h.set.insert(t2._children, N, C), C++), t2._firstChild === null)
                N._previousSibling = null, N._nextSibling = null, t2._firstChild = N, t2._lastChild = N;
              else {
                var T = r2 ? r2._previousSibling : t2._lastChild, O = r2 || null;
                N._previousSibling = T, N._nextSibling = O, T && (T._nextSibling = N), O && (O._previousSibling = N), T || (t2._firstChild = N), O || (t2._lastChild = N);
              }
              a.dom.features.slots && t2._shadowRoot !== null && l.Guard.isSlotable(N) && m.shadowTree_assignASlot(N), a.dom.features.steps && l.Guard.isTextNode(N) && v.dom_runChildTextContentChangeSteps(t2), a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t2)) && l.Guard.isSlot(t2) && c.isEmpty(t2._assignedNodes) && m.shadowTree_signalASlotChange(t2), a.dom.features.slots && m.shadowTree_assignSlotablesForATree(f.tree_rootNode(N));
              for (var F = f.tree_getFirstDescendantNode(N, true, true); F !== null; )
                a.dom.features.steps && v.dom_runInsertionSteps(F), a.dom.features.customElements && l.Guard.isElementNode(F) && m.shadowTree_isConnected(F) && (l.Guard.isCustomElementNode(F) ? p.customElement_enqueueACustomElementCallbackReaction(F, "connectedCallback", []) : p.customElement_tryToUpgrade(F)), F = f.tree_getNextDescendantNode(N, F, true, true);
            }
            a.dom.features.mutationObservers && (i2 || y.observer_queueTreeMutationRecord(t2, D, [], S, r2));
          } else
            !function(e3, t3, r3) {
              var n2 = t3._lastChild;
              l.Guard.isElementNode(e3) && (l.Guard.isDocumentNode(t3) && (t3._documentElement = e3), e3._nodeDocument._hasNamespaces || e3._namespace === null && e3._namespacePrefix === null || (e3._nodeDocument._hasNamespaces = true));
              if (e3._parent = t3, t3._children.add(e3), t3._firstChild === null)
                e3._previousSibling = null, e3._nextSibling = null, t3._firstChild = e3, t3._lastChild = e3;
              else {
                var i3 = t3._lastChild;
                e3._previousSibling = i3, e3._nextSibling = null, i3 && (i3._nextSibling = e3), i3 || (t3._firstChild = e3), t3._lastChild = e3;
              }
              a.dom.features.slots && t3._shadowRoot !== null && l.Guard.isSlotable(e3) && m.shadowTree_assignASlot(e3);
              a.dom.features.steps && l.Guard.isTextNode(e3) && v.dom_runChildTextContentChangeSteps(t3);
              a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t3)) && l.Guard.isSlot(t3) && c.isEmpty(t3._assignedNodes) && m.shadowTree_signalASlotChange(t3);
              a.dom.features.slots && m.shadowTree_assignSlotablesForATree(f.tree_rootNode(e3));
              a.dom.features.steps && v.dom_runInsertionSteps(e3);
              a.dom.features.customElements && l.Guard.isElementNode(e3) && m.shadowTree_isConnected(e3) && (l.Guard.isCustomElementNode(e3) ? p.customElement_enqueueACustomElementCallbackReaction(e3, "connectedCallback", []) : p.customElement_tryToUpgrade(e3));
              a.dom.features.mutationObservers && (r3 || y.observer_queueTreeMutationRecord(t3, [e3], [], n2, null));
            }(e2, t2, i2);
        }
        function w(e2, t2, r2) {
          var i2, o2, s2, u2, h2, _2, g2, b2;
          if (a.dom.rangeList.size !== 0) {
            var x2 = f.tree_index(e2);
            try {
              for (var w2 = n(a.dom.rangeList), E = w2.next(); !E.done; E = w2.next()) {
                var D = E.value;
                f.tree_isDescendantOf(e2, D._start[0], true) && (D._start = [t2, x2]), f.tree_isDescendantOf(e2, D._end[0], true) && (D._end = [t2, x2]), D._start[0] === t2 && D._start[1] > x2 && D._start[1]--, D._end[0] === t2 && D._end[1] > x2 && D._end[1]--;
              }
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                E && !E.done && (o2 = w2.return) && o2.call(w2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            try {
              for (var S = n(a.dom.rangeList), C = S.next(); !C.done; C = S.next()) {
                (D = C.value)._start[0] === t2 && D._start[1] > x2 && (D._start[1] -= 1), D._end[0] === t2 && D._end[1] > x2 && (D._end[1] -= 1);
              }
            } catch (e3) {
              s2 = { error: e3 };
            } finally {
              try {
                C && !C.done && (u2 = S.return) && u2.call(S);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }
          if (a.dom.features.steps)
            try {
              for (var A = n(d.nodeIterator_iteratorList()), N = A.next(); !N.done; N = A.next()) {
                var T = N.value;
                T._root._nodeDocument === e2._nodeDocument && v.dom_runNodeIteratorPreRemovingSteps(T, e2);
              }
            } catch (e3) {
              h2 = { error: e3 };
            } finally {
              try {
                N && !N.done && (_2 = A.return) && _2.call(A);
              } finally {
                if (h2)
                  throw h2.error;
              }
            }
          var O = e2._previousSibling, F = e2._nextSibling;
          l.Guard.isDocumentNode(t2) && l.Guard.isElementNode(e2) && (t2._documentElement = null), e2._parent = null, t2._children.delete(e2);
          var k = e2._previousSibling, P = e2._nextSibling;
          (e2._previousSibling = null, e2._nextSibling = null, k && (k._nextSibling = P), P && (P._previousSibling = k), k || (t2._firstChild = P), P || (t2._lastChild = k), a.dom.features.slots && l.Guard.isSlotable(e2) && e2._assignedSlot !== null && m.shadowTree_isAssigned(e2) && m.shadowTree_assignSlotables(e2._assignedSlot), a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t2)) && l.Guard.isSlot(t2) && c.isEmpty(t2._assignedNodes) && m.shadowTree_signalASlotChange(t2), a.dom.features.slots) && (f.tree_getFirstDescendantNode(e2, true, false, function(e3) {
            return l.Guard.isSlot(e3);
          }) !== null && (m.shadowTree_assignSlotablesForATree(f.tree_rootNode(t2)), m.shadowTree_assignSlotablesForATree(e2)));
          a.dom.features.steps && v.dom_runRemovingSteps(e2, t2), a.dom.features.customElements && l.Guard.isCustomElementNode(e2) && p.customElement_enqueueACustomElementCallbackReaction(e2, "disconnectedCallback", []);
          for (var I = f.tree_getFirstDescendantNode(e2, false, true); I !== null; )
            a.dom.features.steps && v.dom_runRemovingSteps(I, e2), a.dom.features.customElements && l.Guard.isCustomElementNode(I) && p.customElement_enqueueACustomElementCallbackReaction(I, "disconnectedCallback", []), I = f.tree_getNextDescendantNode(e2, I, false, true);
          if (a.dom.features.mutationObservers)
            for (var L = f.tree_getFirstAncestorNode(t2, true); L !== null; ) {
              try {
                for (var M = (g2 = void 0, n(L._registeredObserverList)), B = M.next(); !B.done; B = M.next()) {
                  var j = B.value;
                  j.options.subtree && e2._registeredObserverList.push({ observer: j.observer, options: j.options, source: j });
                }
              } catch (e3) {
                g2 = { error: e3 };
              } finally {
                try {
                  B && !B.done && (b2 = M.return) && b2.call(M);
                } finally {
                  if (g2)
                    throw g2.error;
                }
              }
              L = f.tree_getNextAncestorNode(t2, L, true);
            }
          a.dom.features.mutationObservers && (r2 || y.observer_queueTreeMutationRecord(t2, [], [e2], O, F)), a.dom.features.steps && l.Guard.isTextNode(e2) && v.dom_runChildTextContentChangeSteps(t2);
        }
        t.mutation_ensurePreInsertionValidity = g, t.mutation_preInsert = b, t.mutation_insert = x, t.mutation_append = function(e2, t2) {
          return b(e2, t2, null);
        }, t.mutation_replace = function(e2, t2, r2) {
          var i2, o2, l2, c2, h2, p2, d2, m2;
          if (r2._nodeType !== u.NodeType.Document && r2._nodeType !== u.NodeType.DocumentFragment && r2._nodeType !== u.NodeType.Element)
            throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + r2.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(r2, t2, true))
            throw new s.HierarchyRequestError("The node to be inserted cannot be an ancestor of parent node. Node is " + t2.nodeName + ", parent node is " + r2.nodeName + ".");
          if (e2._parent !== r2)
            throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is " + e2.nodeName + ", parent node is " + r2.nodeName + ".");
          if (t2._nodeType !== u.NodeType.DocumentFragment && t2._nodeType !== u.NodeType.DocumentType && t2._nodeType !== u.NodeType.Element && t2._nodeType !== u.NodeType.Text && t2._nodeType !== u.NodeType.ProcessingInstruction && t2._nodeType !== u.NodeType.CData && t2._nodeType !== u.NodeType.Comment)
            throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + t2.nodeName + ".");
          if (t2._nodeType === u.NodeType.Text && r2._nodeType === u.NodeType.Document)
            throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + t2.nodeName + ".");
          if (t2._nodeType === u.NodeType.DocumentType && r2._nodeType !== u.NodeType.Document)
            throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + r2.nodeName + ".");
          if (r2._nodeType === u.NodeType.Document) {
            if (t2._nodeType === u.NodeType.DocumentFragment) {
              var v2 = 0;
              try {
                for (var g2 = n(t2._children), b2 = g2.next(); !b2.done; b2 = g2.next()) {
                  var E = b2.value;
                  if (E._nodeType === u.NodeType.Element)
                    v2++;
                  else if (E._nodeType === u.NodeType.Text)
                    throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + E.nodeName + ".");
                }
              } catch (e3) {
                i2 = { error: e3 };
              } finally {
                try {
                  b2 && !b2.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              if (v2 > 1)
                throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + v2 + " element nodes.");
              if (v2 === 1) {
                try {
                  for (var D = n(r2._children), S = D.next(); !S.done; S = D.next()) {
                    if ((F = S.value)._nodeType === u.NodeType.Element && F !== e2)
                      throw new s.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e3) {
                  l2 = { error: e3 };
                } finally {
                  try {
                    S && !S.done && (c2 = D.return) && c2.call(D);
                  } finally {
                    if (l2)
                      throw l2.error;
                  }
                }
                for (var C = e2._nextSibling; C; ) {
                  if (C._nodeType === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  C = C._nextSibling;
                }
              }
            } else if (t2._nodeType === u.NodeType.Element) {
              try {
                for (var A = n(r2._children), N = A.next(); !N.done; N = A.next()) {
                  if ((F = N.value)._nodeType === u.NodeType.Element && F !== e2)
                    throw new s.HierarchyRequestError("Document already has a document element node. Node is " + t2.nodeName + ".");
                }
              } catch (e3) {
                h2 = { error: e3 };
              } finally {
                try {
                  N && !N.done && (p2 = A.return) && p2.call(A);
                } finally {
                  if (h2)
                    throw h2.error;
                }
              }
              for (C = e2._nextSibling; C; ) {
                if (C._nodeType === u.NodeType.DocumentType)
                  throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + t2.nodeName + ".");
                C = C._nextSibling;
              }
            } else if (t2._nodeType === u.NodeType.DocumentType) {
              try {
                for (var T = n(r2._children), O = T.next(); !O.done; O = T.next()) {
                  var F;
                  if ((F = O.value)._nodeType === u.NodeType.DocumentType && F !== e2)
                    throw new s.HierarchyRequestError("Document already has a document type node. Node is " + t2.nodeName + ".");
                }
              } catch (e3) {
                d2 = { error: e3 };
              } finally {
                try {
                  O && !O.done && (m2 = T.return) && m2.call(T);
                } finally {
                  if (d2)
                    throw d2.error;
                }
              }
              for (var k = e2._previousSibling; k; ) {
                if (k._nodeType === u.NodeType.Element)
                  throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + t2.nodeName + ".");
                k = k._previousSibling;
              }
            }
          }
          var P = e2._nextSibling;
          P === t2 && (P = t2._nextSibling);
          var I = e2._previousSibling;
          _.document_adopt(t2, r2._nodeDocument);
          var L = [];
          e2._parent !== null && (L.push(e2), w(e2, e2._parent, true));
          var M = [];
          return t2._nodeType === u.NodeType.DocumentFragment ? M = Array.from(t2._children) : M.push(t2), x(t2, r2, P, true), a.dom.features.mutationObservers && y.observer_queueTreeMutationRecord(r2, M, L, I, P), e2;
        }, t.mutation_replaceAll = function(e2, t2) {
          var r2, i2;
          e2 !== null && _.document_adopt(e2, t2._nodeDocument);
          var o2 = Array.from(t2._children), s2 = [];
          e2 && e2._nodeType === u.NodeType.DocumentFragment ? s2 = Array.from(e2._children) : e2 !== null && s2.push(e2);
          try {
            for (var l2 = n(o2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              w(c2.value, t2, true);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (i2 = l2.return) && i2.call(l2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e2 !== null && x(e2, t2, null, true), a.dom.features.mutationObservers && y.observer_queueTreeMutationRecord(t2, s2, o2, null, null);
        }, t.mutation_preRemove = function(e2, t2) {
          if (e2._parent !== t2)
            throw new s.NotFoundError("The child node cannot be found under parent node. Child node is " + e2.nodeName + ", parent node is " + t2.nodeName + ".");
          return w(e2, t2), e2;
        }, t.mutation_remove = w;
      }, function(e, t, r) {
        "use strict";
        function n(e2) {
          return e2 == null;
        }
        e.exports.isNothing = n, e.exports.isObject = function(e2) {
          return typeof e2 == "object" && e2 !== null;
        }, e.exports.toArray = function(e2) {
          return Array.isArray(e2) ? e2 : n(e2) ? [] : [e2];
        }, e.exports.repeat = function(e2, t2) {
          var r2, n2 = "";
          for (r2 = 0; r2 < t2; r2 += 1)
            n2 += e2;
          return n2;
        }, e.exports.isNegativeZero = function(e2) {
          return e2 === 0 && Number.NEGATIVE_INFINITY === 1 / e2;
        }, e.exports.extend = function(e2, t2) {
          var r2, n2, i, o;
          if (t2)
            for (r2 = 0, n2 = (o = Object.keys(t2)).length; r2 < n2; r2 += 1)
              e2[i = o[r2]] = t2[i];
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(53), o = r(10);
        function a(e2, t2, r2) {
          var n2 = [];
          return e2.include.forEach(function(e3) {
            r2 = a(e3, t2, r2);
          }), e2[t2].forEach(function(e3) {
            r2.forEach(function(t3, r3) {
              t3.tag === e3.tag && t3.kind === e3.kind && n2.push(r3);
            }), r2.push(e3);
          }), r2.filter(function(e3, t3) {
            return n2.indexOf(t3) === -1;
          });
        }
        function s(e2) {
          this.include = e2.include || [], this.implicit = e2.implicit || [], this.explicit = e2.explicit || [], this.implicit.forEach(function(e3) {
            if (e3.loadKind && e3.loadKind !== "scalar")
              throw new i("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }), this.compiledImplicit = a(this, "implicit", []), this.compiledExplicit = a(this, "explicit", []), this.compiledTypeMap = function() {
            var e3, t2, r2 = { scalar: {}, sequence: {}, mapping: {}, fallback: {} };
            function n2(e4) {
              r2[e4.kind][e4.tag] = r2.fallback[e4.tag] = e4;
            }
            for (e3 = 0, t2 = arguments.length; e3 < t2; e3 += 1)
              arguments[e3].forEach(n2);
            return r2;
          }(this.compiledImplicit, this.compiledExplicit);
        }
        s.DEFAULT = null, s.create = function() {
          var e2, t2;
          switch (arguments.length) {
            case 1:
              e2 = s.DEFAULT, t2 = arguments[0];
              break;
            case 2:
              e2 = arguments[0], t2 = arguments[1];
              break;
            default:
              throw new i("Wrong number of arguments for Schema.create function");
          }
          if (e2 = n.toArray(e2), t2 = n.toArray(t2), !e2.every(function(e3) {
            return e3 instanceof s;
          }))
            throw new i("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
          if (!t2.every(function(e3) {
            return e3 instanceof o;
          }))
            throw new i("Specified list of YAML types (or a single Type object) contains a non-Type object.");
          return new s({ include: e2, explicit: t2 });
        }, e.exports = s;
      }, function(e, t) {
        e.exports = function(e2, t2) {
          return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
        };
      }, function(e, t, r) {
        var n = r(8), i = r(42), o = "".split;
        e.exports = n(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(e2) {
          return i(e2) == "String" ? o.call(e2, "") : Object(e2);
        } : Object;
      }, function(e, t) {
        var r = {}.toString;
        e.exports = function(e2) {
          return r.call(e2).slice(8, -1);
        };
      }, function(e, t, r) {
        var n, i, o, a = r(186), s = r(11), u = r(13), l = r(21), c = r(14), h = r(57), p = r(45), f = s.WeakMap;
        if (a) {
          var d = new f(), m = d.get, y = d.has, v = d.set;
          n = function(e2, t2) {
            return v.call(d, e2, t2), t2;
          }, i = function(e2) {
            return m.call(d, e2) || {};
          }, o = function(e2) {
            return y.call(d, e2);
          };
        } else {
          var _ = h("state");
          p[_] = true, n = function(e2, t2) {
            return l(e2, _, t2), t2;
          }, i = function(e2) {
            return c(e2, _) ? e2[_] : {};
          }, o = function(e2) {
            return c(e2, _);
          };
        }
        e.exports = { set: n, get: i, has: o, enforce: function(e2) {
          return o(e2) ? i(e2) : n(e2, {});
        }, getterFor: function(e2) {
          return function(t2) {
            var r2;
            if (!u(t2) || (r2 = i(t2)).type !== e2)
              throw TypeError("Incompatible receiver, " + e2 + " required");
            return r2;
          };
        } };
      }, function(e, t) {
        e.exports = false;
      }, function(e, t) {
        e.exports = {};
      }, function(e, t, r) {
        var n = r(120), i = r(11), o = function(e2) {
          return typeof e2 == "function" ? e2 : void 0;
        };
        e.exports = function(e2, t2) {
          return arguments.length < 2 ? o(n[e2]) || o(i[e2]) : n[e2] && n[e2][t2] || i[e2] && i[e2][t2];
        };
      }, function(e, t) {
        var r = Math.ceil, n = Math.floor;
        e.exports = function(e2) {
          return isNaN(e2 = +e2) ? 0 : (e2 > 0 ? n : r)(e2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(8);
        e.exports = function(e2, t2) {
          var r2 = [][e2];
          return !!r2 && n(function() {
            r2.call(null, t2 || function() {
              throw 1;
            }, 1);
          });
        };
      }, function(e, t) {
        e.exports = {};
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(220), r(64), r(19), r(65), r(20), r(68), r(66), r(92), r(144), r(22), r(94), r(23);
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(2), s = r(69), u = r(95), l = r(7), c = r(0), h = function() {
          function e2(e3) {
            this.level = 0, this._builderOptions = e3;
          }
          return e2.prototype.declaration = function(e3, t2, r2) {
          }, e2.prototype.docType = function(e3, t2, r2) {
          }, e2.prototype.comment = function(e3) {
          }, e2.prototype.text = function(e3) {
          }, e2.prototype.instruction = function(e3, t2) {
          }, e2.prototype.cdata = function(e3) {
          }, e2.prototype.openTagBegin = function(e3) {
          }, e2.prototype.openTagEnd = function(e3, t2, r2) {
          }, e2.prototype.closeTag = function(e3) {
          }, e2.prototype.attributes = function(e3) {
            var t2, r2;
            try {
              for (var i2 = n(e3), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var a2 = o2.value;
                this.attribute(a2[1] === null ? a2[2] : a2[1] + ":" + a2[2], a2[3]);
              }
            } catch (e4) {
              t2 = { error: e4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
          }, e2.prototype.attribute = function(e3, t2) {
          }, e2.prototype.beginElement = function(e3) {
          }, e2.prototype.endElement = function(e3) {
          }, e2.prototype.serializeNode = function(e3, t2) {
            var r2 = e3._nodeDocument !== void 0 && e3._nodeDocument._hasNamespaces;
            if (this.level = 0, this.currentNode = e3, r2) {
              var n2 = new u.NamespacePrefixMap();
              n2.set("xml", l.namespace.XML);
              this._serializeNodeNS(e3, null, n2, { value: 1 }, t2);
            } else
              this._serializeNode(e3, t2);
          }, e2.prototype._serializeNodeNS = function(e3, t2, r2, n2, i2) {
            switch (this.currentNode = e3, e3.nodeType) {
              case a.NodeType.Element:
                this._serializeElementNS(e3, t2, r2, n2, i2);
                break;
              case a.NodeType.Document:
                this._serializeDocumentNS(e3, t2, r2, n2, i2);
                break;
              case a.NodeType.Comment:
                this._serializeComment(e3, i2);
                break;
              case a.NodeType.Text:
                this._serializeText(e3, i2);
                break;
              case a.NodeType.DocumentFragment:
                this._serializeDocumentFragmentNS(e3, t2, r2, n2, i2);
                break;
              case a.NodeType.DocumentType:
                this._serializeDocumentType(e3, i2);
                break;
              case a.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e3, i2);
                break;
              case a.NodeType.CData:
                this._serializeCData(e3, i2);
                break;
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeNode = function(e3, t2) {
            switch (this.currentNode = e3, e3.nodeType) {
              case a.NodeType.Element:
                this._serializeElement(e3, t2);
                break;
              case a.NodeType.Document:
                this._serializeDocument(e3, t2);
                break;
              case a.NodeType.Comment:
                this._serializeComment(e3, t2);
                break;
              case a.NodeType.Text:
                this._serializeText(e3, t2);
                break;
              case a.NodeType.DocumentFragment:
                this._serializeDocumentFragment(e3, t2);
                break;
              case a.NodeType.DocumentType:
                this._serializeDocumentType(e3, t2);
                break;
              case a.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e3, t2);
                break;
              case a.NodeType.CData:
                this._serializeCData(e3, t2);
                break;
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeElementNS = function(t2, r2, i2, a2, s2) {
            var u2, h2, p = [];
            if (s2 && (t2.localName.indexOf(":") !== -1 || !c.xml_isName(t2.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var f = "", d = false, m = false, y = i2.copy(), v = {}, _ = this._recordNamespaceInformation(t2, y, v), g = r2, b = t2.namespaceURI;
            if (g === b)
              _ !== null && (m = true), f = b === l.namespace.XML ? "xml:" + t2.localName : t2.localName, this.beginElement(f), this.openTagBegin(f);
            else {
              var x = t2.prefix, w = null;
              if (x === null && b === _ || (w = y.get(x, b)), x === "xmlns") {
                if (s2)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                w = x;
              }
              w !== null ? (f = w + ":" + t2.localName, _ !== null && _ !== l.namespace.XML && (g = _ || null), this.beginElement(f), this.openTagBegin(f)) : x !== null ? (x in v && (x = this._generatePrefix(b, y, a2)), y.set(x, b), f += x + ":" + t2.localName, this.beginElement(f), this.openTagBegin(f), p.push([null, "xmlns", x, this._serializeAttributeValue(b, s2)]), _ !== null && (g = _ || null)) : _ === null || _ !== null && _ !== b ? (m = true, f += t2.localName, g = b, this.beginElement(f), this.openTagBegin(f), p.push([null, null, "xmlns", this._serializeAttributeValue(b, s2)])) : (f += t2.localName, g = b, this.beginElement(f), this.openTagBegin(f));
            }
            p.push.apply(p, o(this._serializeAttributesNS(t2, y, a2, v, m, s2))), this.attributes(p);
            var E = b === l.namespace.HTML;
            if (E && t2.childNodes.length === 0 && e2._VoidElementNames.has(t2.localName) ? (this.openTagEnd(f, true, true), this.endElement(f), d = true) : E || t2.childNodes.length !== 0 ? this.openTagEnd(f, false, false) : (this.openTagEnd(f, true, false), this.endElement(f), d = true), !d) {
              if (E && t2.localName === "template")
                ;
              else
                try {
                  for (var D = n(t2.childNodes), S = D.next(); !S.done; S = D.next()) {
                    var C = S.value;
                    this.level++, this._serializeNodeNS(C, g, y, a2, s2), this.level--;
                  }
                } catch (e3) {
                  u2 = { error: e3 };
                } finally {
                  try {
                    S && !S.done && (h2 = D.return) && h2.call(D);
                  } finally {
                    if (u2)
                      throw u2.error;
                  }
                }
              this.closeTag(f), this.endElement(f);
            }
          }, e2.prototype._serializeElement = function(e3, t2) {
            var r2, i2;
            if (t2 && (e3.localName.indexOf(":") !== -1 || !c.xml_isName(e3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a2 = e3.localName;
            this.beginElement(a2), this.openTagBegin(a2);
            var s2 = this._serializeAttributes(e3, t2);
            if (this.attributes(s2), e3.hasChildNodes() ? this.openTagEnd(a2, false, false) : (this.openTagEnd(a2, true, false), this.endElement(a2), o2 = true), !o2) {
              try {
                for (var u2 = n(e3._children), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                  var h2 = l2.value;
                  this.level++, this._serializeNode(h2, t2), this.level--;
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  l2 && !l2.done && (i2 = u2.return) && i2.call(u2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              this.closeTag(a2), this.endElement(a2);
            }
          }, e2.prototype._serializeDocumentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2;
            if (o2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var u2 = n(e3.childNodes), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                var c2 = l2.value;
                this._serializeNodeNS(c2, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                l2 && !l2.done && (s2 = u2.return) && s2.call(u2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
          }, e2.prototype._serializeDocument = function(e3, t2) {
            var r2, i2;
            if (t2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var o2 = n(e3._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                this._serializeNode(s2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (i2 = o2.return) && i2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype._serializeComment = function(e3, t2) {
            if (t2 && (!c.xml_isLegalChar(e3.data) || e3.data.indexOf("--") !== -1 || e3.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            this.comment(e3.data);
          }, e2.prototype._serializeText = function(e3, t2) {
            if (t2 && !c.xml_isLegalChar(e3.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            var r2 = e3.data.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            this.text(r2);
          }, e2.prototype._serializeDocumentFragmentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2;
            try {
              for (var u2 = n(e3.childNodes), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                var c2 = l2.value;
                this._serializeNodeNS(c2, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                l2 && !l2.done && (s2 = u2.return) && s2.call(u2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
          }, e2.prototype._serializeDocumentFragment = function(e3, t2) {
            var r2, i2;
            try {
              for (var o2 = n(e3._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                this._serializeNode(s2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (i2 = o2.return) && i2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype._serializeDocumentType = function(e3, t2) {
            if (t2 && !c.xml_isPubidChar(e3.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t2 && (!c.xml_isLegalChar(e3.systemId) || e3.systemId.indexOf('"') !== -1 && e3.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            this.docType(e3.name, e3.publicId, e3.systemId);
          }, e2.prototype._serializeProcessingInstruction = function(e3, t2) {
            if (t2 && (e3.target.indexOf(":") !== -1 || /^xml$/i.test(e3.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t2 && (!c.xml_isLegalChar(e3.data) || e3.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            this.instruction(e3.target, e3.data);
          }, e2.prototype._serializeCData = function(e3, t2) {
            if (t2 && e3.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            this.cdata(e3.data);
          }, e2.prototype._serializeAttributesNS = function(e3, t2, r2, i2, o2, a2) {
            var u2, h2, p = [], f = a2 ? new s.LocalNameSet() : void 0;
            try {
              for (var d = n(e3.attributes), m = d.next(); !m.done; m = d.next()) {
                var y = m.value;
                if (a2 || o2 || y.namespaceURI !== null) {
                  if (a2 && f && f.has(y.namespaceURI, y.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  a2 && f && f.set(y.namespaceURI, y.localName);
                  var v = y.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t2.get(y.prefix, v), v === l.namespace.XMLNS) {
                      if (y.value === l.namespace.XML || y.prefix === null && o2 || y.prefix !== null && (!(y.localName in i2) || i2[y.localName] !== y.value) && t2.has(y.localName, y.value))
                        continue;
                      if (a2 && y.value === l.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (a2 && y.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (_ = y.prefix === null || t2.hasPrefix(y.prefix) && !t2.has(y.prefix, v) ? this._generatePrefix(v, t2, r2) : y.prefix, p.push([null, "xmlns", _, this._serializeAttributeValue(v, a2)]));
                  if (_ !== null && _, a2 && (y.localName.indexOf(":") !== -1 || !c.xml_isName(y.localName) || y.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p.push([v, _, y.localName, this._serializeAttributeValue(y.value, a2)]);
                } else
                  p.push([null, null, y.localName, this._serializeAttributeValue(y.value, a2)]);
              }
            } catch (e4) {
              u2 = { error: e4 };
            } finally {
              try {
                m && !m.done && (h2 = d.return) && h2.call(d);
              } finally {
                if (u2)
                  throw u2.error;
              }
            }
            return p;
          }, e2.prototype._serializeAttributes = function(e3, t2) {
            var r2, i2, o2 = [], a2 = t2 ? {} : void 0;
            try {
              for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var l2 = u2.value;
                if (t2) {
                  if (t2 && a2 && l2.localName in a2)
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  if (t2 && a2 && (a2[l2.localName] = true), t2 && (l2.localName.indexOf(":") !== -1 || !c.xml_isName(l2.localName)))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t2)]);
                } else
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t2)]);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype._recordNamespaceInformation = function(e3, t2, r2) {
            var i2, o2, a2 = null;
            try {
              for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var c2 = u2.value, h2 = c2.namespaceURI, p = c2.prefix;
                if (h2 === l.namespace.XMLNS) {
                  if (p === null) {
                    a2 = c2.value;
                    continue;
                  }
                  var f = c2.localName, d = c2.value;
                  if (d === l.namespace.XML)
                    continue;
                  if (d === "" && (d = null), t2.has(f, d))
                    continue;
                  t2.set(f, d), r2[f] = d || "";
                }
              }
            } catch (e4) {
              i2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, e2.prototype._generatePrefix = function(e3, t2, r2) {
            var n2 = "ns" + r2.value.toString();
            return r2.value++, t2.set(n2, e3), n2;
          }, e2.prototype._serializeAttributeValue = function(e3, t2) {
            if (t2 && e3 !== null && !c.xml_isLegalChar(e3))
              throw new Error("Invalid characters in attribute value.");
            return e3 === null ? "" : e3.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, e2._VoidElementNames = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e2;
        }();
        t.BaseWriter = h;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(6), a = r(3), s = r(7), u = r(29), l = r(17), c = r(97);
        function h() {
          var e2 = o.dom.window;
          e2._mutationObserverMicrotaskQueued || (e2._mutationObserverMicrotaskQueued = true, Promise.resolve().then(function() {
            p();
          }));
        }
        function p() {
          var e2, t2, r2, i2, u2 = o.dom.window;
          u2._mutationObserverMicrotaskQueued = false;
          var l2 = s.set.clone(u2._mutationObservers), h2 = s.set.clone(u2._signalSlots);
          s.set.empty(u2._signalSlots);
          var p2 = function(e3) {
            var t3 = s.list.clone(e3._recordQueue);
            s.list.empty(e3._recordQueue);
            for (var r3 = 0; r3 < e3._nodeList.length; r3++) {
              var n2 = e3._nodeList[r3];
              s.list.remove(n2._registeredObserverList, function(t4) {
                return a.Guard.isTransientRegisteredObserver(t4) && t4.observer === e3;
              });
            }
            if (!s.list.isEmpty(t3))
              try {
                e3._callback.call(e3, t3, e3);
              } catch (e4) {
              }
          };
          try {
            for (var f2 = n(l2), d = f2.next(); !d.done; d = f2.next()) {
              p2(d.value);
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              d && !d.done && (t2 = f2.return) && t2.call(f2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          if (o.dom.features.slots)
            try {
              for (var m = n(h2), y = m.next(); !y.done; y = m.next()) {
                var v = y.value;
                c.event_fireAnEvent("slotchange", v, void 0, { bubbles: true });
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                y && !y.done && (i2 = m.return) && i2.call(m);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
        }
        function f(e2, t2, r2, o2, a2, s2, c2, p2, f2) {
          for (var d, m, y = new Map(), v = l.tree_getFirstAncestorNode(t2, true); v !== null; ) {
            for (var _ = 0; _ < v._registeredObserverList.length; _++) {
              var g = v._registeredObserverList[_], b = g.options;
              if ((v === t2 || b.subtree) && ((e2 !== "attributes" || b.attributes) && (e2 !== "attributes" || !b.attributeFilter || b.attributeFilter.indexOf(r2 || "") && o2 === null) && (e2 !== "characterData" || b.characterData) && (e2 !== "childList" || b.childList))) {
                var x = g.observer;
                y.has(x) || y.set(x, null), (e2 === "attributes" && b.attributeOldValue || e2 === "characterData" && b.characterDataOldValue) && y.set(x, a2);
              }
            }
            v = l.tree_getNextAncestorNode(t2, v, true);
          }
          try {
            for (var w = n(y), E = w.next(); !E.done; E = w.next()) {
              var D = i(E.value, 2), S = D[0], C = D[1], A = u.create_mutationRecord(e2, t2, u.create_nodeListStatic(t2, s2), u.create_nodeListStatic(t2, c2), p2, f2, r2, o2, C);
              S._recordQueue.push(A);
            }
          } catch (e3) {
            d = { error: e3 };
          } finally {
            try {
              E && !E.done && (m = w.return) && m.call(w);
            } finally {
              if (d)
                throw d.error;
            }
          }
          h();
        }
        t.observer_queueAMutationObserverMicrotask = h, t.observer_notifyMutationObservers = p, t.observer_queueMutationRecord = f, t.observer_queueTreeMutationRecord = function(e2, t2, r2, n2, i2) {
          f("childList", e2, null, null, null, t2, r2, n2, i2);
        }, t.observer_queueAttributeMutationRecord = function(e2, t2, r2, n2) {
          f("attributes", e2, t2, r2, n2, [], [], null, null);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(6), i = r(7), o = r(3), a = r(9), s = r(29), u = r(73), l = r(51), c = r(30), h = r(37), p = r(106);
        function f(e2, t2, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, e2._value, r2, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, e2._value, r2, e2._namespace), e2._value = r2;
        }
        function d(e2, t2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, null), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, null, e2._value, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, null, e2._value, e2._namespace), t2._attributeList._asArray().push(e2), e2._element = t2, t2._nodeDocument._hasNamespaces || e2._namespace === null && e2._namespacePrefix === null && e2._localName !== "xmlns" || (t2._nodeDocument._hasNamespaces = true);
        }
        function m(e2, t2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, e2._value, null, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, e2._value, null, e2._namespace);
          var r2 = t2._attributeList._asArray().indexOf(e2);
          t2._attributeList._asArray().splice(r2, 1), e2._element = null;
        }
        function y(e2, t2, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(r2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(r2) && u.customElement_enqueueACustomElementCallbackReaction(r2, "attributeChangedCallback", [e2._localName, e2._value, t2._value, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(r2, e2._localName, e2._value, t2._value, e2._namespace);
          var i2 = r2._attributeList._asArray().indexOf(e2);
          i2 !== -1 && (r2._attributeList._asArray()[i2] = t2), e2._element = null, t2._element = r2, r2._nodeDocument._hasNamespaces || t2._namespace === null && t2._namespacePrefix === null && t2._localName !== "xmlns" || (r2._nodeDocument._hasNamespaces = true);
        }
        function v(e2, t2) {
          return t2._namespace === i.namespace.HTML && t2._nodeDocument._type === "html" && (e2 = e2.toLowerCase()), t2._attributeList._asArray().find(function(t3) {
            return t3._qualifiedName === e2;
          }) || null;
        }
        function _(e2, t2, r2) {
          var n2 = e2 || null;
          return r2._attributeList._asArray().find(function(e3) {
            return e3._namespace === n2 && e3._localName === t2;
          }) || null;
        }
        t.element_has = function(e2, t2) {
          return t2._attributeList._asArray().indexOf(e2) !== -1;
        }, t.element_change = f, t.element_append = d, t.element_remove = m, t.element_replace = y, t.element_getAnAttributeByName = v, t.element_getAnAttributeByNamespaceAndLocalName = _, t.element_getAnAttributeValue = function(e2, t2, r2) {
          r2 === void 0 && (r2 = "");
          var n2 = _(r2, t2, e2);
          return n2 === null ? "" : n2._value;
        }, t.element_setAnAttribute = function(e2, t2) {
          if (e2._element !== null && e2._element !== t2)
            throw new a.InUseAttributeError("This attribute already exists in the document: " + e2._qualifiedName + " as a child of " + e2._element._qualifiedName + ".");
          var r2 = _(e2._namespace || "", e2._localName, t2);
          return r2 === e2 ? e2 : (r2 !== null ? y(r2, e2, t2) : d(e2, t2), r2);
        }, t.element_setAnAttributeValue = function(e2, t2, r2, n2, i2) {
          n2 === void 0 && (n2 = null), i2 === void 0 && (i2 = null);
          var o2 = _(i2 || "", t2, e2);
          if (o2 === null) {
            var a2 = s.create_attr(e2._nodeDocument, t2);
            return a2._namespace = i2, a2._namespacePrefix = n2, a2._value = r2, void d(a2, e2);
          }
          f(o2, e2, r2);
        }, t.element_removeAnAttributeByName = function(e2, t2) {
          var r2 = v(e2, t2);
          return r2 !== null && m(r2, t2), r2;
        }, t.element_removeAnAttributeByNamespaceAndLocalName = function(e2, t2, r2) {
          var n2 = _(e2, t2, r2);
          return n2 !== null && m(n2, r2), n2;
        }, t.element_createAnElement = function(e2, t2, r2, o2, l2, c2) {
          o2 === void 0 && (o2 = null), l2 === void 0 && (l2 = null), c2 === void 0 && (c2 = false);
          var h2 = null;
          if (!n.dom.features.customElements)
            return (h2 = s.create_element(e2, t2, r2, o2))._customElementState = "uncustomized", h2._customElementDefinition = null, h2._is = l2, h2;
          var f2 = u.customElement_lookUpACustomElementDefinition(e2, r2, t2, l2);
          if (f2 !== null && f2.name !== f2.localName)
            (h2 = new (p.document_elementInterface(t2, i.namespace.HTML))())._localName = t2, h2._namespace = i.namespace.HTML, h2._namespacePrefix = o2, h2._customElementState = "undefined", h2._customElementDefinition = null, h2._is = l2, h2._nodeDocument = e2, c2 ? u.customElement_upgrade(f2, h2) : u.customElement_enqueueACustomElementUpgradeReaction(h2, f2);
          else if (f2 !== null)
            if (c2)
              try {
                var d2 = new (0, f2.constructor)();
                if (console.assert(d2._customElementState !== void 0), console.assert(d2._customElementDefinition !== void 0), console.assert(d2._namespace === i.namespace.HTML), d2._attributeList.length !== 0)
                  throw new a.NotSupportedError("Custom element already has attributes.");
                if (d2._children.size !== 0)
                  throw new a.NotSupportedError("Custom element already has child nodes.");
                if (d2._parent !== null)
                  throw new a.NotSupportedError("Custom element already has a parent node.");
                if (d2._nodeDocument !== e2)
                  throw new a.NotSupportedError("Custom element is already in a document.");
                if (d2._localName !== t2)
                  throw new a.NotSupportedError("Custom element has a different local name.");
                d2._namespacePrefix = o2, d2._is = null;
              } catch (r3) {
                (h2 = s.create_htmlUnknownElement(e2, t2, i.namespace.HTML, o2))._customElementState = "failed", h2._customElementDefinition = null, h2._is = null;
              }
            else
              (h2 = s.create_htmlElement(e2, t2, i.namespace.HTML, o2))._customElementState = "undefined", h2._customElementDefinition = null, h2._is = null, u.customElement_enqueueACustomElementUpgradeReaction(h2, f2);
          else {
            (h2 = new (p.document_elementInterface(t2, r2))())._localName = t2, h2._namespace = r2, h2._namespacePrefix = o2, h2._customElementState = "uncustomized", h2._customElementDefinition = null, h2._is = l2, h2._nodeDocument = e2, r2 !== i.namespace.HTML || l2 === null && !u.customElement_isValidCustomElementName(t2) || (h2._customElementState = "undefined");
          }
          if (h2 === null)
            throw new Error("Unable to create element.");
          return h2;
        }, t.element_insertAdjacent = function(e2, t2, r2) {
          switch (t2.toLowerCase()) {
            case "beforebegin":
              return e2._parent === null ? null : h.mutation_preInsert(r2, e2._parent, e2);
            case "afterbegin":
              return h.mutation_preInsert(r2, e2, e2._firstChild);
            case "beforeend":
              return h.mutation_preInsert(r2, e2, null);
            case "afterend":
              return e2._parent === null ? null : h.mutation_preInsert(r2, e2._parent, e2._nextSibling);
            default:
              throw new a.SyntaxError(`Invalid 'where' argument. "beforebegin", "afterbegin", "beforeend" or "afterend" expected`);
          }
        };
      }, function(e, t, r) {
        "use strict";
        function n(e2, t2) {
          Error.call(this), this.name = "YAMLException", this.reason = e2, this.mark = t2, this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : ""), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack || "";
        }
        n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n.prototype.toString = function(e2) {
          var t2 = this.name + ": ";
          return t2 += this.reason || "(unknown reason)", !e2 && this.mark && (t2 += " " + this.mark.toString()), t2;
        }, e.exports = n;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ include: [r(181)], implicit: [r(293), r(294)], explicit: [r(295), r(296), r(297), r(298)] });
      }, function(e, t, r) {
        var n = r(16), i = r(79), o = r(40), a = r(24), s = r(56), u = r(14), l = r(115), c = Object.getOwnPropertyDescriptor;
        t.f = n ? c : function(e2, t2) {
          if (e2 = a(e2), t2 = s(t2, true), l)
            try {
              return c(e2, t2);
            } catch (e3) {
            }
          if (u(e2, t2))
            return o(!i.f.call(e2, t2), e2[t2]);
        };
      }, function(e, t, r) {
        var n = r(13);
        e.exports = function(e2, t2) {
          if (!n(e2))
            return e2;
          var r2, i;
          if (t2 && typeof (r2 = e2.toString) == "function" && !n(i = r2.call(e2)))
            return i;
          if (typeof (r2 = e2.valueOf) == "function" && !n(i = r2.call(e2)))
            return i;
          if (!t2 && typeof (r2 = e2.toString) == "function" && !n(i = r2.call(e2)))
            return i;
          throw TypeError("Can't convert object to primitive value");
        };
      }, function(e, t, r) {
        var n = r(81), i = r(58), o = n("keys");
        e.exports = function(e2) {
          return o[e2] || (o[e2] = i(e2));
        };
      }, function(e, t) {
        var r = 0, n = Math.random();
        e.exports = function(e2) {
          return "Symbol(" + String(e2 === void 0 ? "" : e2) + ")_" + (++r + n).toString(36);
        };
      }, function(e, t, r) {
        var n = r(42);
        e.exports = Array.isArray || function(e2) {
          return n(e2) == "Array";
        };
      }, function(e, t, r) {
        var n, i = r(18), o = r(188), a = r(84), s = r(45), u = r(189), l = r(116), c = r(57), h = c("IE_PROTO"), p = function() {
        }, f = function(e2) {
          return "<script>" + e2 + "<\/script>";
        }, d = function() {
          try {
            n = document.domain && new ActiveXObject("htmlfile");
          } catch (e3) {
          }
          var e2, t2;
          d = n ? function(e3) {
            e3.write(f("")), e3.close();
            var t3 = e3.parentWindow.Object;
            return e3 = null, t3;
          }(n) : ((t2 = l("iframe")).style.display = "none", u.appendChild(t2), t2.src = String("javascript:"), (e2 = t2.contentWindow.document).open(), e2.write(f("document.F=Object")), e2.close(), e2.F);
          for (var r2 = a.length; r2--; )
            delete d.prototype[a[r2]];
          return d();
        };
        s[h] = true, e.exports = Object.create || function(e2, t2) {
          var r2;
          return e2 !== null ? (p.prototype = i(e2), r2 = new p(), p.prototype = null, r2[h] = e2) : r2 = d(), t2 === void 0 ? r2 : o(r2, t2);
        };
      }, function(e, t, r) {
        var n = r(121), i = r(84);
        e.exports = Object.keys || function(e2) {
          return n(e2, i);
        };
      }, function(e, t, r) {
        var n = r(15).f, i = r(14), o = r(5)("toStringTag");
        e.exports = function(e2, t2, r2) {
          e2 && !i(e2 = r2 ? e2 : e2.prototype, o) && n(e2, o, { configurable: true, value: t2 });
        };
      }, function(e, t, r) {
        var n = r(8), i = r(5), o = r(129), a = i("species");
        e.exports = function(e2) {
          return o >= 51 || !n(function() {
            var t2 = [];
            return (t2.constructor = {})[a] = function() {
              return { foo: 1 };
            }, t2[e2](Boolean).foo !== 1;
          });
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(122).indexOf, o = r(48), a = r(28), s = [].indexOf, u = !!s && 1 / [1].indexOf(1, -0) < 0, l = o("indexOf"), c = a("indexOf", { ACCESSORS: true, 1: 0 });
        n({ target: "Array", proto: true, forced: u || !l || !c }, { indexOf: function(e2) {
          return u ? s.apply(this, arguments) || 0 : i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        var n = r(16), i = r(15).f, o = Function.prototype, a = o.toString, s = /^\s*function ([^ (]*)/;
        n && !("name" in o) && i(o, "name", { configurable: true, get: function() {
          try {
            return a.call(this).match(s)[1];
          } catch (e2) {
            return "";
          }
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(25), i = r(18), o = r(8), a = r(136), s = RegExp.prototype, u = s.toString, l = o(function() {
          return u.call({ source: "a", flags: "b" }) != "/a/b";
        }), c = u.name != "toString";
        (l || c) && n(RegExp.prototype, "toString", function() {
          var e2 = i(this), t2 = String(e2.source), r2 = e2.flags;
          return "/" + t2 + "/" + String(r2 === void 0 && e2 instanceof RegExp && !("flags" in s) ? a.call(e2) : r2);
        }, { unsafe: true });
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(138), r(20), r(66), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(1), s = r(2), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._writerOptions = a.applyDefaults(r2, { format: "object", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            return this._currentList = [], this._currentIndex = 0, this._listRegister = [this._currentList], this.serializeNode(e3, this._writerOptions.wellFormed), this._process(this._currentList, this._writerOptions);
          }, t2.prototype._process = function(e3, t3) {
            var r2, n2, i2, o2, u2, l, c;
            if (e3.length === 0)
              return {};
            for (var h = {}, p = false, f = 0, d = 0, m = 0, y = 0, v = 0; v < e3.length; v++) {
              var _ = e3[v];
              switch (I = Object.keys(_)[0]) {
                case "@":
                  continue;
                case "#":
                  f++;
                  break;
                case "!":
                  d++;
                  break;
                case "?":
                  m++;
                  break;
                case "$":
                  y++;
                  break;
                default:
                  h[I] ? p = true : h[I] = true;
              }
            }
            var g = this._getAttrKey(), b = this._getNodeKey(s.NodeType.Text), x = this._getNodeKey(s.NodeType.Comment), w = this._getNodeKey(s.NodeType.ProcessingInstruction), E = this._getNodeKey(s.NodeType.CData);
            if (f === 1 && e3.length === 1 && a.isString(e3[0]["#"]))
              return e3[0]["#"];
            if (p) {
              var D = {};
              for (v = 0; v < e3.length; v++) {
                _ = e3[v];
                if ((I = Object.keys(_)[0]) === "@") {
                  var S = _["@"];
                  (L = Object.keys(S)).length === 1 ? D[g + L[0]] = S[L[0]] : D[g] = _["@"];
                }
              }
              var C = [];
              for (v = 0; v < e3.length; v++) {
                _ = e3[v];
                switch (I = Object.keys(_)[0]) {
                  case "@":
                    break;
                  case "#":
                    C.push(((r2 = {})[b] = _["#"], r2));
                    break;
                  case "!":
                    C.push(((n2 = {})[x] = _["!"], n2));
                    break;
                  case "?":
                    C.push(((i2 = {})[w] = _["?"], i2));
                    break;
                  case "$":
                    C.push(((o2 = {})[E] = _.$, o2));
                    break;
                  default:
                    if ((B = _)[I].length !== 0 && a.isArray(B[I][0])) {
                      for (var A = [], N = B[I], T = 0; T < N.length; T++)
                        A.push(this._process(N[T], t3));
                      C.push(((u2 = {})[I] = A, u2));
                    } else
                      t3.verbose ? C.push(((l = {})[I] = [this._process(B[I], t3)], l)) : C.push(((c = {})[I] = this._process(B[I], t3), c));
                }
              }
              return D[b] = C, D;
            }
            var O = 1, F = 1, k = 1, P = 1;
            for (D = {}, v = 0; v < e3.length; v++) {
              var I;
              _ = e3[v];
              switch (I = Object.keys(_)[0]) {
                case "@":
                  S = _["@"];
                  var L = Object.keys(S);
                  if (t3.group && L.length !== 1)
                    D[g] = S;
                  else
                    for (var M in S)
                      D[g + M] = S[M];
                  break;
                case "#":
                  O = this._processSpecItem(_["#"], D, t3.group, b, f, O);
                  break;
                case "!":
                  F = this._processSpecItem(_["!"], D, t3.group, x, d, F);
                  break;
                case "?":
                  k = this._processSpecItem(_["?"], D, t3.group, w, m, k);
                  break;
                case "$":
                  P = this._processSpecItem(_.$, D, t3.group, E, y, P);
                  break;
                default:
                  var B;
                  if ((B = _)[I].length !== 0 && a.isArray(B[I][0])) {
                    A = [], N = B[I];
                    for (var j = 0; j < N.length; j++)
                      A.push(this._process(N[j], t3));
                    D[I] = A;
                  } else
                    t3.verbose ? D[I] = [this._process(B[I], t3)] : D[I] = this._process(B[I], t3);
              }
            }
            return D;
          }, t2.prototype._processSpecItem = function(e3, t3, r2, n2, i2, s2) {
            var u2, l;
            if (!r2 && a.isArray(e3) && i2 + e3.length > 2)
              try {
                for (var c = o(e3), h = c.next(); !h.done; h = c.next()) {
                  var p = h.value;
                  t3[n2 + (s2++).toString()] = p;
                }
              } catch (e4) {
                u2 = { error: e4 };
              } finally {
                try {
                  h && !h.done && (l = c.return) && l.call(c);
                } finally {
                  if (u2)
                    throw u2.error;
                }
              }
            else
              t3[i2 > 1 ? n2 + (s2++).toString() : n2] = e3;
            return s2;
          }, t2.prototype.beginElement = function(e3) {
            var t3, r2, n2 = [];
            if (this._currentList.length === 0)
              this._currentList.push(((t3 = {})[e3] = n2, t3));
            else {
              var i2 = this._currentList[this._currentList.length - 1];
              if (this._isElementNode(i2, e3))
                if (i2[e3].length !== 0 && a.isArray(i2[e3][0]))
                  i2[e3].push(n2);
                else
                  i2[e3] = [i2[e3], n2];
              else
                this._currentList.push(((r2 = {})[e3] = n2, r2));
            }
            this._currentIndex++, this._listRegister.length > this._currentIndex ? this._listRegister[this._currentIndex] = n2 : this._listRegister.push(n2), this._currentList = n2;
          }, t2.prototype.endElement = function() {
            this._currentList = this._listRegister[--this._currentIndex];
          }, t2.prototype.attribute = function(e3, t3) {
            var r2, n2;
            if (this._currentList.length === 0)
              this._currentList.push({ "@": (r2 = {}, r2[e3] = t3, r2) });
            else {
              var i2 = this._currentList[this._currentList.length - 1];
              this._isAttrNode(i2) ? i2["@"][e3] = t3 : this._currentList.push({ "@": (n2 = {}, n2[e3] = t3, n2) });
            }
          }, t2.prototype.comment = function(e3) {
            if (this._currentList.length === 0)
              this._currentList.push({ "!": e3 });
            else {
              var t3 = this._currentList[this._currentList.length - 1];
              this._isCommentNode(t3) ? a.isArray(t3["!"]) ? t3["!"].push(e3) : t3["!"] = [t3["!"], e3] : this._currentList.push({ "!": e3 });
            }
          }, t2.prototype.text = function(e3) {
            if (this._currentList.length === 0)
              this._currentList.push({ "#": e3 });
            else {
              var t3 = this._currentList[this._currentList.length - 1];
              this._isTextNode(t3) ? a.isArray(t3["#"]) ? t3["#"].push(e3) : t3["#"] = [t3["#"], e3] : this._currentList.push({ "#": e3 });
            }
          }, t2.prototype.instruction = function(e3, t3) {
            var r2 = t3 === "" ? e3 : e3 + " " + t3;
            if (this._currentList.length === 0)
              this._currentList.push({ "?": r2 });
            else {
              var n2 = this._currentList[this._currentList.length - 1];
              this._isInstructionNode(n2) ? a.isArray(n2["?"]) ? n2["?"].push(r2) : n2["?"] = [n2["?"], r2] : this._currentList.push({ "?": r2 });
            }
          }, t2.prototype.cdata = function(e3) {
            if (this._currentList.length === 0)
              this._currentList.push({ $: e3 });
            else {
              var t3 = this._currentList[this._currentList.length - 1];
              this._isCDATANode(t3) ? a.isArray(t3.$) ? t3.$.push(e3) : t3.$ = [t3.$, e3] : this._currentList.push({ $: e3 });
            }
          }, t2.prototype._isAttrNode = function(e3) {
            return "@" in e3;
          }, t2.prototype._isTextNode = function(e3) {
            return "#" in e3;
          }, t2.prototype._isCommentNode = function(e3) {
            return "!" in e3;
          }, t2.prototype._isInstructionNode = function(e3) {
            return "?" in e3;
          }, t2.prototype._isCDATANode = function(e3) {
            return "$" in e3;
          }, t2.prototype._isElementNode = function(e3, t3) {
            return t3 in e3;
          }, t2.prototype._getAttrKey = function() {
            return this._builderOptions.convert.att;
          }, t2.prototype._getNodeKey = function(e3) {
            switch (e3) {
              case s.NodeType.Comment:
                return this._builderOptions.convert.comment;
              case s.NodeType.Text:
                return this._builderOptions.convert.text;
              case s.NodeType.ProcessingInstruction:
                return this._builderOptions.convert.ins;
              case s.NodeType.CData:
                return this._builderOptions.convert.cdata;
              default:
                throw new Error("Invalid node type.");
            }
          }, t2;
        }(r(50).BaseWriter);
        t.ObjectWriter = u;
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(93);
        n({ target: "RegExp", proto: true, forced: /./.exec !== i }, { exec: i });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
            this._items = {}, this._nullItems = {};
          }
          return e2.prototype.set = function(e3, t2) {
            e3 === null ? this._nullItems[t2] = true : (this._items[e3] || (this._items[e3] = {}), this._items[e3][t2] = true);
          }, e2.prototype.has = function(e3, t2) {
            return e3 === null ? this._nullItems[t2] === true : !!this._items[e3] && this._items[e3][t2] === true;
          }, e2;
        }();
        t.LocalNameSet = n;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(9), o = r(3), a = r(0), s = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "_eventListenerList", { get: function() {
            return this.__eventListenerList || (this.__eventListenerList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_eventHandlerMap", { get: function() {
            return this.__eventHandlerMap || (this.__eventHandlerMap = {});
          }, enumerable: true, configurable: true }), e2.prototype.addEventListener = function(e3, t2, r2) {
            r2 === void 0 && (r2 = { passive: false, once: false, capture: false });
            var i2, s2 = n(a.eventTarget_flattenMore(r2), 3), u = s2[0], l = s2[1], c = s2[2];
            t2 && (i2 = o.Guard.isEventListener(t2) ? t2 : { handleEvent: t2 }, a.eventTarget_addEventListener(this, { type: e3, callback: i2, capture: u, passive: l, once: c, removed: false }));
          }, e2.prototype.removeEventListener = function(e3, t2, r2) {
            r2 === void 0 && (r2 = { capture: false });
            var n2 = a.eventTarget_flatten(r2);
            if (t2)
              for (var i2 = 0; i2 < this._eventListenerList.length; i2++) {
                var s2 = this._eventListenerList[i2];
                if (s2.type === e3 && s2.capture === n2) {
                  if (o.Guard.isEventListener(t2) && s2.callback === t2) {
                    a.eventTarget_removeEventListener(this, s2, i2);
                    break;
                  }
                  if (t2 && s2.callback.handleEvent === t2) {
                    a.eventTarget_removeEventListener(this, s2, i2);
                    break;
                  }
                }
              }
          }, e2.prototype.dispatchEvent = function(e3) {
            if (e3._dispatchFlag || !e3._initializedFlag)
              throw new i.InvalidStateError();
            return e3._isTrusted = false, a.event_dispatch(e3, this);
          }, e2.prototype._getTheParent = function(e3) {
            return null;
          }, e2;
        }();
        t.EventTargetImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(34), a = r(0), s = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this) || this;
            return r2._data = t3, r2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "data", { get: function() {
            return this._data;
          }, set: function(e3) {
            a.characterData_replaceData(this, 0, this._data.length, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "length", { get: function() {
            return this._data.length;
          }, enumerable: true, configurable: true }), t2.prototype.substringData = function(e3, t3) {
            return a.characterData_substringData(this, e3, t3);
          }, t2.prototype.appendData = function(e3) {
            return a.characterData_replaceData(this, this._data.length, 0, e3);
          }, t2.prototype.insertData = function(e3, t3) {
            a.characterData_replaceData(this, e3, 0, t3);
          }, t2.prototype.deleteData = function(e3, t3) {
            a.characterData_replaceData(this, e3, t3, "");
          }, t2.prototype.replaceData = function(e3, t3, r2) {
            a.characterData_replaceData(this, e3, t3, r2);
          }, Object.defineProperty(t2.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.before = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.after = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.replaceWith = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2;
        }(o.NodeImpl);
        t.CharacterDataImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(3), u = r(1), l = r(17), c = r(51);
        function h(e2) {
          a.dom.window._signalSlots.add(e2), c.observer_queueAMutationObserverMicrotask();
        }
        function p(e2, t2) {
          t2 === void 0 && (t2 = false);
          var r2 = s.Cast.asNode(e2)._parent;
          if (r2 === null)
            return null;
          var n2 = r2._shadowRoot || null;
          if (n2 === null)
            return null;
          if (t2 && n2._mode !== "open")
            return null;
          for (var i2 = l.tree_getFirstDescendantNode(n2, false, true, function(e3) {
            return s.Guard.isSlot(e3);
          }); i2 !== null; ) {
            if (i2._name === e2._name)
              return i2;
            i2 = l.tree_getNextDescendantNode(n2, i2, false, true, function(e3) {
              return s.Guard.isSlot(e3);
            });
          }
          return null;
        }
        function f(e2) {
          var t2, r2, i2 = [], o2 = l.tree_rootNode(e2);
          if (!s.Guard.isShadowRoot(o2))
            return i2;
          var a2 = o2._host;
          try {
            for (var u2 = n(a2._children), c2 = u2.next(); !c2.done; c2 = u2.next()) {
              var h2 = c2.value;
              if (s.Guard.isSlotable(h2))
                p(h2) === e2 && i2.push(h2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (r2 = u2.return) && r2.call(u2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function d(e2) {
          var t2, r2, i2 = f(e2);
          if (i2.length === e2._assignedNodes.length) {
            for (var o2 = true, a2 = 0; a2 < i2.length; a2++)
              if (i2[a2] !== e2._assignedNodes[a2]) {
                o2 = false;
                break;
              }
            o2 || h(e2);
          }
          e2._assignedNodes = i2;
          try {
            for (var s2 = n(i2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
              u2.value._assignedSlot = e2;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
        }
        t.shadowTree_signalASlotChange = h, t.shadowTree_isConnected = function(e2) {
          return s.Guard.isDocumentNode(l.tree_rootNode(e2, true));
        }, t.shadowTree_isAssigned = function(e2) {
          return e2._assignedSlot !== null;
        }, t.shadowTree_findASlot = p, t.shadowTree_findSlotables = f, t.shadowTree_findFlattenedSlotables = function e2(t2) {
          var r2, i2, a2, c2, h2 = [], p2 = l.tree_rootNode(t2);
          if (!s.Guard.isShadowRoot(p2))
            return h2;
          var d2 = f(t2);
          if (u.isEmpty(d2))
            try {
              for (var m = n(t2._children), y = m.next(); !y.done; y = m.next()) {
                var v = y.value;
                s.Guard.isSlotable(v) && d2.push(v);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                y && !y.done && (i2 = m.return) && i2.call(m);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          try {
            for (var _ = n(d2), g = _.next(); !g.done; g = _.next()) {
              var b = g.value;
              if (s.Guard.isSlot(b) && s.Guard.isShadowRoot(l.tree_rootNode(b))) {
                var x = e2(b);
                h2.push.apply(h2, o(x));
              } else
                h2.push(b);
            }
          } catch (e3) {
            a2 = { error: e3 };
          } finally {
            try {
              g && !g.done && (c2 = _.return) && c2.call(_);
            } finally {
              if (a2)
                throw a2.error;
            }
          }
          return h2;
        }, t.shadowTree_assignSlotables = d, t.shadowTree_assignSlotablesForATree = function(e2) {
          for (var t2 = l.tree_getFirstDescendantNode(e2, true, false, function(e3) {
            return s.Guard.isSlot(e3);
          }); t2 !== null; )
            d(t2), t2 = l.tree_getNextDescendantNode(e2, t2, true, false, function(e3) {
              return s.Guard.isSlot(e3);
            });
        }, t.shadowTree_assignASlot = function(e2) {
          var t2 = p(e2);
          t2 !== null && d(t2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = /[a-z]([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*-([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*/, i = new Set(["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"]), o = new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]), a = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), s = new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]);
        t.customElement_isValidCustomElementName = function(e2) {
          return !!n.test(e2) && !i.has(e2);
        }, t.customElement_isValidElementName = function(e2) {
          return o.has(e2);
        }, t.customElement_isVoidElementName = function(e2) {
          return a.has(e2);
        }, t.customElement_isValidShadowHostName = function(e2) {
          return s.has(e2);
        }, t.customElement_enqueueACustomElementUpgradeReaction = function(e2, t2) {
        }, t.customElement_enqueueACustomElementCallbackReaction = function(e2, t2, r2) {
        }, t.customElement_upgrade = function(e2, t2) {
        }, t.customElement_tryToUpgrade = function(e2) {
        }, t.customElement_lookUpACustomElementDefinition = function(e2, t2, r2, n2) {
          return null;
        };
      }, function(e, t, r) {
        r(4)({ target: "String", proto: true }, { repeat: r(259) });
      }, function(e, t, r) {
        "use strict";
        r(278), r(68), r(179), r(94), Object.defineProperty(t, "__esModule", { value: true });
        var n = r(109), i = function() {
          function e2(e3) {
            this._builderOptions = e3, e3.parser && Object.assign(this, e3.parser);
          }
          return e2.prototype._docType = function(e3, t2, r2, n2) {
            return e3.dtd({ name: t2, pubID: r2, sysID: n2 });
          }, e2.prototype._comment = function(e3, t2) {
            return e3.com(t2);
          }, e2.prototype._text = function(e3, t2) {
            return e3.txt(t2);
          }, e2.prototype._instruction = function(e3, t2, r2) {
            return e3.ins(t2, r2);
          }, e2.prototype._cdata = function(e3, t2) {
            return e3.dat(t2);
          }, e2.prototype._element = function(e3, t2, r2) {
            return t2 === void 0 ? e3.ele(r2) : e3.ele(t2, r2);
          }, e2.prototype._attribute = function(e3, t2, r2, n2) {
            return t2 === void 0 ? e3.att(r2, n2) : e3.att(t2, r2, n2);
          }, e2.prototype._sanitize = function(e3) {
            return n.sanitizeInput(e3, this._builderOptions.invalidCharReplacement);
          }, e2.prototype._decodeText = function(t2) {
            return t2 == null ? t2 : t2.replace(/&(quot|amp|apos|lt|gt);/g, function(t3, r2) {
              return e2._entityTable[r2];
            }).replace(/&#(?:x([a-fA-F0-9]+)|([0-9]+));/g, function(e3, t3, r2) {
              return String.fromCodePoint(parseInt(t3 || r2, t3 ? 16 : 10));
            });
          }, e2.prototype._decodeAttributeValue = function(e3) {
            return this._decodeText(e3);
          }, e2.prototype.parse = function(e3, t2) {
            return this._parse(e3, t2);
          }, e2.prototype.docType = function(e3, t2, r2, n2) {
            return this._docType(e3, t2, r2, n2);
          }, e2.prototype.comment = function(e3, t2) {
            return this._comment(e3, t2);
          }, e2.prototype.text = function(e3, t2) {
            return this._text(e3, t2);
          }, e2.prototype.instruction = function(e3, t2, r2) {
            return this._instruction(e3, t2, r2);
          }, e2.prototype.cdata = function(e3, t2) {
            return this._cdata(e3, t2);
          }, e2.prototype.element = function(e3, t2, r2) {
            return this._element(e3, t2, r2);
          }, e2.prototype.attribute = function(e3, t2, r2, n2) {
            return this._attribute(e3, t2, r2, n2);
          }, e2.prototype.sanitize = function(e3) {
            return this._sanitize(e3);
          }, e2._entityTable = { lt: "<", gt: ">", amp: "&", quot: '"', apos: "'" }, e2;
        }();
        t.BaseReader = i;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = n.DEFAULT = new n({ include: [r(54)], explicit: [r(299), r(300), r(301)] });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(185);
        t.XMLBuilderImpl = n.XMLBuilderImpl;
        var i = r(304);
        t.XMLBuilderCBImpl = i.XMLBuilderCBImpl;
        var o = r(183);
        t.builder = o.builder, t.create = o.create, t.fragment = o.fragment, t.convert = o.convert;
        var a = r(309);
        t.createCB = a.createCB, t.fragmentCB = a.fragmentCB;
      }, function(e, t) {
        var r;
        r = function() {
          return this;
        }();
        try {
          r = r || new Function("return this")();
        } catch (e2) {
          typeof window == "object" && (r = window);
        }
        e.exports = r;
      }, function(e, t, r) {
        "use strict";
        var n = {}.propertyIsEnumerable, i = Object.getOwnPropertyDescriptor, o = i && !n.call({ 1: 2 }, 1);
        t.f = o ? function(e2) {
          var t2 = i(this, e2);
          return !!t2 && t2.enumerable;
        } : n;
      }, function(e, t, r) {
        var n = r(11), i = r(21);
        e.exports = function(e2, t2) {
          try {
            i(n, e2, t2);
          } catch (r2) {
            n[e2] = t2;
          }
          return t2;
        };
      }, function(e, t, r) {
        var n = r(44), i = r(118);
        (e.exports = function(e2, t2) {
          return i[e2] || (i[e2] = t2 !== void 0 ? t2 : {});
        })("versions", []).push({ version: "3.6.5", mode: n ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
      }, function(e, t, r) {
        var n = r(121), i = r(84).concat("length", "prototype");
        t.f = Object.getOwnPropertyNames || function(e2) {
          return n(e2, i);
        };
      }, function(e, t, r) {
        var n = r(47), i = Math.max, o = Math.min;
        e.exports = function(e2, t2) {
          var r2 = n(e2);
          return r2 < 0 ? i(r2 + t2, 0) : o(r2, t2);
        };
      }, function(e, t) {
        e.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      }, function(e, t) {
        t.f = Object.getOwnPropertySymbols;
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !!Object.getOwnPropertySymbols && !n(function() {
          return !String(Symbol());
        });
      }, function(e, t, r) {
        var n = r(127);
        e.exports = function(e2, t2, r2) {
          if (n(e2), t2 === void 0)
            return e2;
          switch (r2) {
            case 0:
              return function() {
                return e2.call(t2);
              };
            case 1:
              return function(r3) {
                return e2.call(t2, r3);
              };
            case 2:
              return function(r3, n2) {
                return e2.call(t2, r3, n2);
              };
            case 3:
              return function(r3, n2, i) {
                return e2.call(t2, r3, n2, i);
              };
          }
          return function() {
            return e2.apply(t2, arguments);
          };
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(195), o = r(132), a = r(133), s = r(62), u = r(21), l = r(25), c = r(5), h = r(44), p = r(49), f = r(131), d = f.IteratorPrototype, m = f.BUGGY_SAFARI_ITERATORS, y = c("iterator"), v = function() {
          return this;
        };
        e.exports = function(e2, t2, r2, c2, f2, _, g) {
          i(r2, t2, c2);
          var b, x, w, E = function(e3) {
            if (e3 === f2 && N)
              return N;
            if (!m && e3 in C)
              return C[e3];
            switch (e3) {
              case "keys":
              case "values":
              case "entries":
                return function() {
                  return new r2(this, e3);
                };
            }
            return function() {
              return new r2(this);
            };
          }, D = t2 + " Iterator", S = false, C = e2.prototype, A = C[y] || C["@@iterator"] || f2 && C[f2], N = !m && A || E(f2), T = t2 == "Array" && C.entries || A;
          if (T && (b = o(T.call(new e2())), d !== Object.prototype && b.next && (h || o(b) === d || (a ? a(b, d) : typeof b[y] != "function" && u(b, y, v)), s(b, D, true, true), h && (p[D] = v))), f2 == "values" && A && A.name !== "values" && (S = true, N = function() {
            return A.call(this);
          }), h && !g || C[y] === N || u(C, y, N), p[t2] = N, f2)
            if (x = { values: E("values"), keys: _ ? N : E("keys"), entries: E("entries") }, g)
              for (w in x)
                (m || S || !(w in C)) && l(C, w, x[w]);
            else
              n({ target: t2, proto: true, forced: m || S }, x);
          return x;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(13), o = r(59), a = r(83), s = r(26), u = r(24), l = r(134), c = r(5), h = r(63), p = r(28), f = h("slice"), d = p("slice", { ACCESSORS: true, 0: 0, 1: 2 }), m = c("species"), y = [].slice, v = Math.max;
        n({ target: "Array", proto: true, forced: !f || !d }, { slice: function(e2, t2) {
          var r2, n2, c2, h2 = u(this), p2 = s(h2.length), f2 = a(e2, p2), d2 = a(t2 === void 0 ? p2 : t2, p2);
          if (o(h2) && (typeof (r2 = h2.constructor) != "function" || r2 !== Array && !o(r2.prototype) ? i(r2) && (r2 = r2[m]) === null && (r2 = void 0) : r2 = void 0, r2 === Array || r2 === void 0))
            return y.call(h2, f2, d2);
          for (n2 = new (r2 === void 0 ? Array : r2)(v(d2 - f2, 0)), c2 = 0; f2 < d2; f2++, c2++)
            f2 in h2 && l(n2, c2, h2[f2]);
          return n2.length = c2, n2;
        } });
      }, function(e, t, r) {
        var n = {};
        n[r(5)("toStringTag")] = "z", e.exports = String(n) === "[object z]";
      }, function(e, t, r) {
        "use strict";
        r(19), r(138), r(20), r(92), r(22), r(23), Object.defineProperty(t, "__esModule", { value: true }), t.DefaultBuilderOptions = { version: "1.0", encoding: void 0, standalone: void 0, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" }, invalidCharReplacement: void 0, parser: void 0 }, t.XMLBuilderOptionKeys = new Set(Object.keys(t.DefaultBuilderOptions)), t.DefaultXMLBuilderCBOptions = { format: "xml", wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, spaceBeforeSlash: false, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" } };
      }, function(e, t, r) {
        "use strict";
        var n = r(139), i = r(143);
        e.exports = n("Set", function(e2) {
          return function() {
            return e2(this, arguments.length ? arguments[0] : void 0);
          };
        }, i);
      }, function(e, t, r) {
        "use strict";
        var n, i, o = r(136), a = r(221), s = RegExp.prototype.exec, u = String.prototype.replace, l = s, c = (n = /a/, i = /b*/g, s.call(n, "a"), s.call(i, "a"), n.lastIndex !== 0 || i.lastIndex !== 0), h = a.UNSUPPORTED_Y || a.BROKEN_CARET, p = /()??/.exec("")[1] !== void 0;
        (c || p || h) && (l = function(e2) {
          var t2, r2, n2, i2, a2 = this, l2 = h && a2.sticky, f = o.call(a2), d = a2.source, m = 0, y = e2;
          return l2 && ((f = f.replace("y", "")).indexOf("g") === -1 && (f += "g"), y = String(e2).slice(a2.lastIndex), a2.lastIndex > 0 && (!a2.multiline || a2.multiline && e2[a2.lastIndex - 1] !== "\n") && (d = "(?: " + d + ")", y = " " + y, m++), r2 = new RegExp("^(?:" + d + ")", f)), p && (r2 = new RegExp("^" + d + "$(?!\\s)", f)), c && (t2 = a2.lastIndex), n2 = s.call(l2 ? r2 : a2, y), l2 ? n2 ? (n2.input = n2.input.slice(m), n2[0] = n2[0].slice(m), n2.index = a2.lastIndex, a2.lastIndex += n2[0].length) : a2.lastIndex = 0 : c && n2 && (a2.lastIndex = a2.global ? n2.index + n2[0].length : t2), p && n2 && n2.length > 1 && u.call(n2[0], r2, function() {
            for (i2 = 1; i2 < arguments.length - 2; i2++)
              arguments[i2] === void 0 && (n2[i2] = void 0);
          }), n2;
        }), e.exports = l;
      }, function(e, t, r) {
        "use strict";
        var n = r(225), i = r(18), o = r(27), a = r(26), s = r(47), u = r(35), l = r(226), c = r(227), h = Math.max, p = Math.min, f = Math.floor, d = /\$([$&'`]|\d\d?|<[^>]*>)/g, m = /\$([$&'`]|\d\d?)/g;
        n("replace", 2, function(e2, t2, r2, n2) {
          var y = n2.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, v = n2.REPLACE_KEEPS_$0, _ = y ? "$" : "$0";
          return [function(r3, n3) {
            var i2 = u(this), o2 = r3 == null ? void 0 : r3[e2];
            return o2 !== void 0 ? o2.call(r3, i2, n3) : t2.call(String(i2), r3, n3);
          }, function(e3, n3) {
            if (!y && v || typeof n3 == "string" && n3.indexOf(_) === -1) {
              var o2 = r2(t2, e3, this, n3);
              if (o2.done)
                return o2.value;
            }
            var u2 = i(e3), f2 = String(this), d2 = typeof n3 == "function";
            d2 || (n3 = String(n3));
            var m2 = u2.global;
            if (m2) {
              var b = u2.unicode;
              u2.lastIndex = 0;
            }
            for (var x = []; ; ) {
              var w = c(u2, f2);
              if (w === null)
                break;
              if (x.push(w), !m2)
                break;
              String(w[0]) === "" && (u2.lastIndex = l(f2, a(u2.lastIndex), b));
            }
            for (var E, D = "", S = 0, C = 0; C < x.length; C++) {
              w = x[C];
              for (var A = String(w[0]), N = h(p(s(w.index), f2.length), 0), T = [], O = 1; O < w.length; O++)
                T.push((E = w[O]) === void 0 ? E : String(E));
              var F = w.groups;
              if (d2) {
                var k = [A].concat(T, N, f2);
                F !== void 0 && k.push(F);
                var P = String(n3.apply(void 0, k));
              } else
                P = g(A, f2, N, T, F, n3);
              N >= S && (D += f2.slice(S, N) + P, S = N + A.length);
            }
            return D + f2.slice(S);
          }];
          function g(e3, r3, n3, i2, a2, s2) {
            var u2 = n3 + e3.length, l2 = i2.length, c2 = m;
            return a2 !== void 0 && (a2 = o(a2), c2 = d), t2.call(s2, c2, function(t3, o2) {
              var s3;
              switch (o2.charAt(0)) {
                case "$":
                  return "$";
                case "&":
                  return e3;
                case "`":
                  return r3.slice(0, n3);
                case "'":
                  return r3.slice(u2);
                case "<":
                  s3 = a2[o2.slice(1, -1)];
                  break;
                default:
                  var c3 = +o2;
                  if (c3 === 0)
                    return t3;
                  if (c3 > l2) {
                    var h2 = f(c3 / 10);
                    return h2 === 0 ? t3 : h2 <= l2 ? i2[h2 - 1] === void 0 ? o2.charAt(1) : i2[h2 - 1] + o2.charAt(1) : t3;
                  }
                  s3 = i2[c3 - 1];
              }
              return s3 === void 0 ? "" : s3;
            });
          }
        });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
            this._items = {}, this._nullItems = [];
          }
          return e2.prototype.copy = function() {
            var t2 = new e2();
            for (var r2 in this._items)
              t2._items[r2] = this._items[r2].slice(0);
            return t2._nullItems = this._nullItems.slice(0), t2;
          }, e2.prototype.get = function(e3, t2) {
            var r2 = t2 === null ? this._nullItems : this._items[t2] || null;
            if (r2 === null)
              return null;
            for (var n2 = null, i = 0; i < r2.length; i++)
              if ((n2 = r2[i]) === e3)
                return n2;
            return n2;
          }, e2.prototype.has = function(e3, t2) {
            var r2 = t2 === null ? this._nullItems : this._items[t2] || null;
            return r2 !== null && r2.indexOf(e3) !== -1;
          }, e2.prototype.hasPrefix = function(e3) {
            if (this._nullItems.indexOf(e3) !== -1)
              return true;
            for (var t2 in this._items)
              if (this._items[t2].indexOf(e3) !== -1)
                return true;
            return false;
          }, e2.prototype.set = function(e3, t2) {
            var r2 = t2 === null ? this._nullItems : this._items[t2] || null;
            t2 !== null && r2 === null ? this._items[t2] = [e3] : r2.push(e3);
          }, e2;
        }();
        t.NamespacePrefixMap = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.Surrogate = /[\uD800-\uDFFF]/, t.ScalarValue = /[\uD800-\uDFFF]/, t.NonCharacter = /[\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]/, t.ASCIICodePoint = /[\u0000-\u007F]/, t.ASCIITabOrNewLine = /[\t\n\r]/, t.ASCIIWhiteSpace = /[\t\n\f\r ]/, t.C0Control = /[\u0000-\u001F]/, t.C0ControlOrSpace = /[\u0000-\u001F ]/, t.Control = /[\u0000-\u001F\u007F-\u009F]/, t.ASCIIDigit = /[0-9]/, t.ASCIIUpperHexDigit = /[0-9A-F]/, t.ASCIILowerHexDigit = /[0-9a-f]/, t.ASCIIHexDigit = /[0-9A-Fa-f]/, t.ASCIIUpperAlpha = /[A-Z]/, t.ASCIILowerAlpha = /[a-z]/, t.ASCIIAlpha = /[A-Za-z]/, t.ASCIIAlphanumeric = /[0-9A-Za-z]/;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(2), u = r(3), l = r(171), c = r(104), h = r(9), p = r(17), f = r(72), d = r(30);
        function m(e2, t2) {
          t2 === void 0 && (t2 = void 0), t2 === void 0 && (t2 = null);
          var r2 = y(e2, t2, new Date(), {});
          return r2._isTrusted = true, r2;
        }
        function y(e2, t2, r2, n2) {
          var i2 = new e2("");
          return i2._initializedFlag = true, i2._timeStamp = r2.getTime(), Object.assign(i2, n2), a.dom.features.steps && d.dom_runEventConstructingSteps(i2), i2;
        }
        function v(e2, t2, r2, i2) {
          var o2, a2, l2, c2;
          r2 === void 0 && (r2 = false), i2 === void 0 && (i2 = { value: false });
          var h2 = false;
          e2._dispatchFlag = true;
          var d2 = t2;
          if (r2) {
            var m2 = t2._associatedDocument;
            u.Guard.isDocumentNode(m2) && (d2 = m2);
          }
          var y2 = null, v2 = p.tree_retarget(e2._relatedTarget, t2);
          if (t2 !== v2 || t2 === e2._relatedTarget) {
            var b2 = [];
            try {
              for (var x2 = n(e2._touchTargetList), w2 = x2.next(); !w2.done; w2 = x2.next()) {
                var E2 = w2.value;
                b2.push(p.tree_retarget(E2, t2));
              }
            } catch (e3) {
              o2 = { error: e3 };
            } finally {
              try {
                w2 && !w2.done && (a2 = x2.return) && a2.call(x2);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
            _(e2, t2, d2, v2, b2, false);
            var D2 = u.Guard.isMouseEvent(e2) && e2._type === "click";
            D2 && t2._activationBehavior !== void 0 && (y2 = t2);
            for (var S = u.Guard.isSlotable(t2) && f.shadowTree_isAssigned(t2) ? t2 : null, C = false, A = t2._getTheParent(e2); A !== null && u.Guard.isNode(A); ) {
              if (S !== null) {
                if (!u.Guard.isSlot(A))
                  throw new Error("Parent node of a slotable should be a slot.");
                S = null;
                var N = p.tree_rootNode(A, true);
                u.Guard.isShadowRoot(N) && N._mode === "closed" && (C = true);
              }
              u.Guard.isSlotable(A) && f.shadowTree_isAssigned(A) && (S = A), v2 = p.tree_retarget(e2._relatedTarget, A), b2 = [];
              try {
                for (var T = (l2 = void 0, n(e2._touchTargetList)), O = T.next(); !O.done; O = T.next()) {
                  E2 = O.value;
                  b2.push(p.tree_retarget(E2, A));
                }
              } catch (e3) {
                l2 = { error: e3 };
              } finally {
                try {
                  O && !O.done && (c2 = T.return) && c2.call(T);
                } finally {
                  if (l2)
                    throw l2.error;
                }
              }
              u.Guard.isWindow(A) || u.Guard.isNode(A) && u.Guard.isNode(t2) && p.tree_isAncestorOf(p.tree_rootNode(t2, true), A, true, true) ? (D2 && e2._bubbles && y2 === null && A._activationBehavior && (y2 = A), _(e2, A, null, v2, b2, C)) : A === v2 ? A = null : (t2 = A, D2 && y2 === null && t2._activationBehavior && (y2 = t2), _(e2, A, t2, v2, b2, C)), A !== null && (A = A._getTheParent(e2)), C = false;
            }
            for (var F = null, k = e2._path, P = k.length - 1; P >= 0; P--) {
              if ((L = k[P]).shadowAdjustedTarget !== null) {
                F = L;
                break;
              }
            }
            if (F !== null)
              if (u.Guard.isNode(F.shadowAdjustedTarget) && u.Guard.isShadowRoot(p.tree_rootNode(F.shadowAdjustedTarget, true)))
                h2 = true;
              else if (u.Guard.isNode(F.relatedTarget) && u.Guard.isShadowRoot(p.tree_rootNode(F.relatedTarget, true)))
                h2 = true;
              else
                for (var I = 0; I < F.touchTargetList.length; I++) {
                  var L = F.touchTargetList[I];
                  if (u.Guard.isNode(L) && u.Guard.isShadowRoot(p.tree_rootNode(L, true))) {
                    h2 = true;
                    break;
                  }
                }
            y2 !== null && y2._legacyPreActivationBehavior !== void 0 && y2._legacyPreActivationBehavior(e2);
            for (P = k.length - 1; P >= 0; P--) {
              (L = k[P]).shadowAdjustedTarget !== null ? e2._eventPhase = s.EventPhase.AtTarget : e2._eventPhase = s.EventPhase.Capturing, g(L, e2, "capturing", i2);
            }
            for (P = 0; P < k.length; P++) {
              if ((L = k[P]).shadowAdjustedTarget !== null)
                e2._eventPhase = s.EventPhase.AtTarget;
              else {
                if (!e2._bubbles)
                  continue;
                e2._eventPhase = s.EventPhase.Bubbling;
              }
              g(L, e2, "bubbling", i2);
            }
          }
          return e2._eventPhase = s.EventPhase.None, e2._currentTarget = null, e2._path = [], e2._dispatchFlag = false, e2._stopPropagationFlag = false, e2._stopImmediatePropagationFlag = false, h2 && (e2._target = null, e2._relatedTarget = null, e2._touchTargetList = []), y2 !== null && (e2._canceledFlag || y2._activationBehavior === void 0 ? y2._legacyCanceledActivationBehavior !== void 0 && y2._legacyCanceledActivationBehavior(e2) : y2._activationBehavior(e2)), !e2._canceledFlag;
        }
        function _(e2, t2, r2, n2, i2, o2) {
          var a2 = false;
          u.Guard.isNode(t2) && u.Guard.isShadowRoot(p.tree_rootNode(t2)) && (a2 = true);
          var s2 = false;
          u.Guard.isShadowRoot(t2) && t2._mode === "closed" && (s2 = true), e2._path.push({ invocationTarget: t2, invocationTargetInShadowTree: a2, shadowAdjustedTarget: r2, relatedTarget: n2, touchTargetList: i2, rootOfClosedTree: s2, slotInClosedTree: o2 });
        }
        function g(e2, t2, r2, n2) {
          n2 === void 0 && (n2 = { value: false });
          for (var i2 = t2._path, a2 = -1, s2 = 0; s2 < i2.length; s2++)
            if (i2[s2] === e2) {
              a2 = s2;
              break;
            }
          if (a2 !== -1) {
            var u2 = i2[a2];
            (u2.shadowAdjustedTarget !== null || a2 > 0 && (u2 = i2[a2 - 1]).shadowAdjustedTarget !== null) && (t2._target = u2.shadowAdjustedTarget);
          }
          if (t2._relatedTarget = e2.relatedTarget, t2._touchTargetList = e2.touchTargetList, !t2._stopPropagationFlag) {
            t2._currentTarget = e2.invocationTarget;
            var l2 = t2._currentTarget._eventListenerList, c2 = new (Array.bind.apply(Array, o([void 0], l2)))();
            if (!b(t2, c2, r2, e2, n2) && t2._isTrusted) {
              var h2 = t2._type;
              h2 === "animationend" ? t2._type = "webkitAnimationEnd" : h2 === "animationiteration" ? t2._type = "webkitAnimationIteration" : h2 === "animationstart" ? t2._type = "webkitAnimationStart" : h2 === "transitionend" && (t2._type = "webkitTransitionEnd"), b(t2, c2, r2, e2, n2), t2._type = h2;
            }
          }
        }
        function b(e2, t2, r2, n2, i2) {
          i2 === void 0 && (i2 = { value: false });
          for (var o2 = false, a2 = 0; a2 < t2.length; a2++) {
            var s2 = t2[a2];
            if (!s2.removed) {
              if (e2._type !== s2.type)
                continue;
              if (o2 = true, r2 === "capturing" && !s2.capture)
                continue;
              if (r2 === "bubbling" && s2.capture)
                continue;
              if (s2.once && e2._currentTarget !== null) {
                for (var l2 = e2._currentTarget, c2 = -1, h2 = 0; h2 < l2._eventListenerList.length; h2++)
                  if (l2._eventListenerList[h2] === s2) {
                    c2 = h2;
                    break;
                  }
                c2 !== -1 && l2._eventListenerList.splice(c2, 1);
              }
              var p2 = void 0, f2 = void 0;
              u.Guard.isWindow(p2) && (f2 = p2._currentEvent, n2.invocationTargetInShadowTree === false && (p2._currentEvent = e2)), s2.passive && (e2._inPassiveListenerFlag = true);
              try {
                s2.callback.handleEvent.call(e2._currentTarget, e2);
              } catch (e3) {
                i2.value = true;
              }
              if (s2.passive && (e2._inPassiveListenerFlag = false), u.Guard.isWindow(p2) && (p2._currentEvent = f2), e2._stopImmediatePropagationFlag)
                return o2;
            }
          }
          return o2;
        }
        function x(e2, t2) {
          return null;
        }
        function w(e2, t2) {
          return null;
        }
        function E(e2, t2) {
        }
        function D(e2, t2) {
        }
        t.event_setTheCanceledFlag = function(e2) {
          e2._cancelable && !e2._inPassiveListenerFlag && (e2._canceledFlag = true);
        }, t.event_initialize = function(e2, t2, r2, n2) {
          e2._initializedFlag = true, e2._stopPropagationFlag = false, e2._stopImmediatePropagationFlag = false, e2._canceledFlag = false, e2._isTrusted = false, e2._target = null, e2._type = t2, e2._bubbles = r2, e2._cancelable = n2;
        }, t.event_createAnEvent = m, t.event_innerEventCreationSteps = y, t.event_dispatch = v, t.event_appendToAnEventPath = _, t.event_invoke = g, t.event_innerInvoke = b, t.event_fireAnEvent = function(e2, t2, r2, n2, i2) {
          r2 === void 0 && (r2 = c.EventImpl);
          var o2 = m(r2);
          if (o2._type = e2, n2)
            for (var a2 in n2) {
              o2[a2] = n2[a2];
            }
          return v(o2, t2, i2);
        }, t.event_createLegacyEvent = function(e2) {
          var t2 = null;
          switch (e2.toLowerCase()) {
            case "beforeunloadevent":
            case "compositionevent":
              break;
            case "customevent":
              t2 = l.CustomEventImpl;
              break;
            case "devicemotionevent":
            case "deviceorientationevent":
            case "dragevent":
              break;
            case "event":
            case "events":
              t2 = c.EventImpl;
          }
          if (t2 === null)
            throw new h.NotSupportedError("Event constructor not found for interface " + e2 + ".");
          var r2 = new t2("");
          return r2._type = "", r2._timeStamp = new Date().getTime(), r2._isTrusted = false, r2._initializedFlag = false, r2;
        }, t.event_getterEventHandlerIDLAttribute = function(e2, t2) {
          return null;
        }, t.event_setterEventHandlerIDLAttribute = function(e2, t2, r2) {
        }, t.event_determineTheTargetOfAnEventHandler = x, t.event_getTheCurrentValueOfAnEventHandler = w, t.event_activateAnEventHandler = E, t.event_deactivateAnEventHandler = D;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(6), u = r(2), l = r(9), c = r(34), h = r(3), p = r(1), f = r(7), d = r(152), m = r(0), y = r(12), v = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._children = new Set(), t3._encoding = { name: "UTF-8", labels: ["unicode-1-1-utf-8", "utf-8", "utf8"] }, t3._contentType = "application/xml", t3._URL = { scheme: "about", username: "", password: "", host: null, port: null, path: ["blank"], query: null, fragment: null, _cannotBeABaseURLFlag: true, _blobURLEntry: null }, t3._origin = null, t3._type = "xml", t3._mode = "no-quirks", t3._documentElement = null, t3._hasNamespaces = false, t3._nodeDocumentOverwrite = null, t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverwrite || this;
          }, set: function(e3) {
            this._nodeDocumentOverwrite = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "implementation", { get: function() {
            return this._implementation || (this._implementation = m.create_domImplementation(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "URL", { get: function() {
            return d.urlSerializer(this._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "documentURI", { get: function() {
            return this.URL;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "origin", { get: function() {
            return "null";
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "compatMode", { get: function() {
            return this._mode === "quirks" ? "BackCompat" : "CSS1Compat";
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "characterSet", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "charset", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "inputEncoding", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "contentType", { get: function() {
            return this._contentType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "doctype", { get: function() {
            var e3, t3;
            try {
              for (var r2 = o(this._children), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                var i2 = n2.value;
                if (h.Guard.isDocumentTypeNode(i2))
                  return i2;
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                n2 && !n2.done && (t3 = r2.return) && t3.call(r2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "documentElement", { get: function() {
            return this._documentElement;
          }, enumerable: true, configurable: true }), t2.prototype.getElementsByTagName = function(e3) {
            return m.node_listOfElementsWithQualifiedName(e3, this);
          }, t2.prototype.getElementsByTagNameNS = function(e3, t3) {
            return m.node_listOfElementsWithNamespace(e3, t3, this);
          }, t2.prototype.getElementsByClassName = function(e3) {
            return m.node_listOfElementsWithClassNames(e3, this);
          }, t2.prototype.createElement = function(e3, t3) {
            if (!m.xml_isName(e3))
              throw new l.InvalidCharacterError();
            this._type === "html" && (e3 = e3.toLowerCase());
            var r2 = null;
            t3 !== void 0 && (r2 = p.isString(t3) ? t3 : t3.is);
            var n2 = this._type === "html" || this._contentType === "application/xhtml+xml" ? f.namespace.HTML : null;
            return m.element_createAnElement(this, e3, n2, null, r2, true);
          }, t2.prototype.createElementNS = function(e3, t3, r2) {
            return m.document_internalCreateElementNS(this, e3, t3, r2);
          }, t2.prototype.createDocumentFragment = function() {
            return m.create_documentFragment(this);
          }, t2.prototype.createTextNode = function(e3) {
            return m.create_text(this, e3);
          }, t2.prototype.createCDATASection = function(e3) {
            if (this._type === "html")
              throw new l.NotSupportedError();
            if (e3.indexOf("]]>") !== -1)
              throw new l.InvalidCharacterError();
            return m.create_cdataSection(this, e3);
          }, t2.prototype.createComment = function(e3) {
            return m.create_comment(this, e3);
          }, t2.prototype.createProcessingInstruction = function(e3, t3) {
            if (!m.xml_isName(e3))
              throw new l.InvalidCharacterError();
            if (t3.indexOf("?>") !== -1)
              throw new l.InvalidCharacterError();
            return m.create_processingInstruction(this, e3, t3);
          }, t2.prototype.importNode = function(e3, t3) {
            if (t3 === void 0 && (t3 = false), h.Guard.isDocumentNode(e3) || h.Guard.isShadowRoot(e3))
              throw new l.NotSupportedError();
            return m.node_clone(e3, this, t3);
          }, t2.prototype.adoptNode = function(e3) {
            if (h.Guard.isDocumentNode(e3))
              throw new l.NotSupportedError();
            if (h.Guard.isShadowRoot(e3))
              throw new l.HierarchyRequestError();
            return m.document_adopt(e3, this), e3;
          }, t2.prototype.createAttribute = function(e3) {
            if (!m.xml_isName(e3))
              throw new l.InvalidCharacterError();
            return this._type === "html" && (e3 = e3.toLowerCase()), m.create_attr(this, e3);
          }, t2.prototype.createAttributeNS = function(e3, t3) {
            var r2 = a(m.namespace_validateAndExtract(e3, t3), 3), n2 = r2[0], i2 = r2[1], o2 = r2[2], s2 = m.create_attr(this, o2);
            return s2._namespace = n2, s2._namespacePrefix = i2, s2;
          }, t2.prototype.createEvent = function(e3) {
            return m.event_createLegacyEvent(e3);
          }, t2.prototype.createRange = function() {
            var e3 = m.create_range();
            return e3._start = [this, 0], e3._end = [this, 0], e3;
          }, t2.prototype.createNodeIterator = function(e3, t3, r2) {
            t3 === void 0 && (t3 = u.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m.create_nodeIterator(e3, e3, true);
            return n2._whatToShow = t3, n2._iteratorCollection = m.create_nodeList(e3), p.isFunction(r2) ? (n2._filter = m.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t2.prototype.createTreeWalker = function(e3, t3, r2) {
            t3 === void 0 && (t3 = u.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m.create_treeWalker(e3, e3);
            return n2._whatToShow = t3, p.isFunction(r2) ? (n2._filter = m.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t2.prototype._getTheParent = function(e3) {
            return e3._type === "load" ? null : s.dom.window;
          }, t2.prototype.getElementById = function(e3) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t2.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.append = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelector = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelectorAll = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2;
        }(c.NodeImpl);
        t.DocumentImpl = v, y.idl_defineConst(v.prototype, "_nodeType", u.NodeType.Document);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(2), u = r(34), l = r(9), c = r(7), h = r(0), p = r(12), f = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._children = new Set(), t3._namespace = null, t3._namespacePrefix = null, t3._localName = "", t3._customElementState = "undefined", t3._customElementDefinition = null, t3._is = null, t3._shadowRoot = null, t3._attributeList = h.create_namedNodeMap(t3), t3._attributeChangeSteps = [], t3._name = "", t3._assignedSlot = null, t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "tagName", { get: function() {
            return this._htmlUppercasedQualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "id", { get: function() {
            return h.element_getAnAttributeValue(this, "id");
          }, set: function(e3) {
            h.element_setAnAttributeValue(this, "id", e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "className", { get: function() {
            return h.element_getAnAttributeValue(this, "class");
          }, set: function(e3) {
            h.element_setAnAttributeValue(this, "class", e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "classList", { get: function() {
            var e3 = h.element_getAnAttributeByName("class", this);
            return e3 === null && (e3 = h.create_attr(this._nodeDocument, "class")), h.create_domTokenList(this, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "slot", { get: function() {
            return h.element_getAnAttributeValue(this, "slot");
          }, set: function(e3) {
            h.element_setAnAttributeValue(this, "slot", e3);
          }, enumerable: true, configurable: true }), t2.prototype.hasAttributes = function() {
            return this._attributeList.length !== 0;
          }, Object.defineProperty(t2.prototype, "attributes", { get: function() {
            return this._attributeList;
          }, enumerable: true, configurable: true }), t2.prototype.getAttributeNames = function() {
            var e3, t3, r2 = [];
            try {
              for (var n2 = o(this._attributeList), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                var a2 = i2.value;
                r2.push(a2._qualifiedName);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return r2;
          }, t2.prototype.getAttribute = function(e3) {
            var t3 = h.element_getAnAttributeByName(e3, this);
            return t3 ? t3._value : null;
          }, t2.prototype.getAttributeNS = function(e3, t3) {
            var r2 = h.element_getAnAttributeByNamespaceAndLocalName(e3, t3, this);
            return r2 ? r2._value : null;
          }, t2.prototype.setAttribute = function(e3, t3) {
            if (!h.xml_isName(e3))
              throw new l.InvalidCharacterError();
            this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i2 = this._attributeList[n2];
              if (i2._qualifiedName === e3) {
                r2 = i2;
                break;
              }
            }
            if (r2 === null)
              return (r2 = h.create_attr(this._nodeDocument, e3))._value = t3, void h.element_append(r2, this);
            h.element_change(r2, this, t3);
          }, t2.prototype.setAttributeNS = function(e3, t3, r2) {
            var n2 = a(h.namespace_validateAndExtract(e3, t3), 3), i2 = n2[0], o2 = n2[1], s2 = n2[2];
            h.element_setAnAttributeValue(this, s2, r2, o2, i2);
          }, t2.prototype.removeAttribute = function(e3) {
            h.element_removeAnAttributeByName(e3, this);
          }, t2.prototype.removeAttributeNS = function(e3, t3) {
            h.element_removeAnAttributeByNamespaceAndLocalName(e3, t3, this);
          }, t2.prototype.hasAttribute = function(e3) {
            this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toLowerCase());
            for (var t3 = 0; t3 < this._attributeList.length; t3++) {
              if (this._attributeList[t3]._qualifiedName === e3)
                return true;
            }
            return false;
          }, t2.prototype.toggleAttribute = function(e3, t3) {
            if (!h.xml_isName(e3))
              throw new l.InvalidCharacterError();
            this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i2 = this._attributeList[n2];
              if (i2._qualifiedName === e3) {
                r2 = i2;
                break;
              }
            }
            return r2 === null ? (t3 === void 0 || t3 === true) && ((r2 = h.create_attr(this._nodeDocument, e3))._value = "", h.element_append(r2, this), true) : t3 !== void 0 && t3 !== false || (h.element_removeAnAttributeByName(e3, this), false);
          }, t2.prototype.hasAttributeNS = function(e3, t3) {
            for (var r2 = e3 || null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i2 = this._attributeList[n2];
              if (i2._namespace === r2 && i2._localName === t3)
                return true;
            }
            return false;
          }, t2.prototype.getAttributeNode = function(e3) {
            return h.element_getAnAttributeByName(e3, this);
          }, t2.prototype.getAttributeNodeNS = function(e3, t3) {
            return h.element_getAnAttributeByNamespaceAndLocalName(e3, t3, this);
          }, t2.prototype.setAttributeNode = function(e3) {
            return h.element_setAnAttribute(e3, this);
          }, t2.prototype.setAttributeNodeNS = function(e3) {
            return h.element_setAnAttribute(e3, this);
          }, t2.prototype.removeAttributeNode = function(e3) {
            for (var t3 = false, r2 = 0; r2 < this._attributeList.length; r2++) {
              if (this._attributeList[r2] === e3) {
                t3 = true;
                break;
              }
            }
            if (!t3)
              throw new l.NotFoundError();
            return h.element_remove(e3, this), e3;
          }, t2.prototype.attachShadow = function(e3) {
            if (this._namespace !== c.namespace.HTML)
              throw new l.NotSupportedError();
            if (!h.customElement_isValidCustomElementName(this._localName) && !h.customElement_isValidShadowHostName(this._localName))
              throw new l.NotSupportedError();
            if (h.customElement_isValidCustomElementName(this._localName) || this._is !== null) {
              var t3 = h.customElement_lookUpACustomElementDefinition(this._nodeDocument, this._namespace, this._localName, this._is);
              if (t3 !== null && t3.disableShadow === true)
                throw new l.NotSupportedError();
            }
            if (this._shadowRoot !== null)
              throw new l.NotSupportedError();
            var r2 = h.create_shadowRoot(this._nodeDocument, this);
            return r2._mode = e3.mode, this._shadowRoot = r2, r2;
          }, Object.defineProperty(t2.prototype, "shadowRoot", { get: function() {
            var e3 = this._shadowRoot;
            return e3 === null || e3.mode === "closed" ? null : e3;
          }, enumerable: true, configurable: true }), t2.prototype.closest = function(e3) {
            throw new l.NotImplementedError();
          }, t2.prototype.matches = function(e3) {
            throw new l.NotImplementedError();
          }, t2.prototype.webkitMatchesSelector = function(e3) {
            return this.matches(e3);
          }, t2.prototype.getElementsByTagName = function(e3) {
            return h.node_listOfElementsWithQualifiedName(e3, this);
          }, t2.prototype.getElementsByTagNameNS = function(e3, t3) {
            return h.node_listOfElementsWithNamespace(e3, t3, this);
          }, t2.prototype.getElementsByClassName = function(e3) {
            return h.node_listOfElementsWithClassNames(e3, this);
          }, t2.prototype.insertAdjacentElement = function(e3, t3) {
            return h.element_insertAdjacent(this, e3, t3);
          }, t2.prototype.insertAdjacentText = function(e3, t3) {
            var r2 = h.create_text(this._nodeDocument, t3);
            h.element_insertAdjacent(this, e3, r2);
          }, Object.defineProperty(t2.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_htmlUppercasedQualifiedName", { get: function() {
            var e3 = this._qualifiedName;
            return this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toUpperCase()), e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.append = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelector = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelectorAll = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, Object.defineProperty(t2.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.before = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.after = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.replaceWith = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, Object.defineProperty(t2.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2, n2, i2) {
            n2 === void 0 && (n2 = null), i2 === void 0 && (i2 = null);
            var o2 = new t2();
            return o2._localName = r2, o2._namespace = n2, o2._namespacePrefix = i2, o2._nodeDocument = e3, o2;
          }, t2;
        }(u.NodeImpl);
        t.ElementImpl = f, p.idl_defineConst(f.prototype, "_nodeType", s.NodeType.Element);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(34), s = r(12), u = function(e2) {
          function t2(t3) {
            t3 === void 0 && (t3 = null);
            var r2 = e2.call(this) || this;
            return r2._children = new Set(), r2._host = t3, r2;
          }
          return i(t2, e2), t2.prototype.getElementById = function(e3) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t2.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.append = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelector = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelectorAll = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(a.NodeImpl);
        t.DocumentFragmentImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.DocumentFragment);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(2), s = r(71), u = r(0), l = r(12), c = function(e2) {
          function t2(t3) {
            t3 === void 0 && (t3 = "");
            var r2 = e2.call(this, t3) || this;
            return r2._name = "", r2._assignedSlot = null, r2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "wholeText", { get: function() {
            var e3, t3, r2 = "";
            try {
              for (var n2 = o(u.text_contiguousTextNodes(this, true)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                r2 += i2.value._data;
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), t2.prototype.splitText = function(e3) {
            return u.text_split(this, e3);
          }, Object.defineProperty(t2.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(s.CharacterDataImpl);
        t.TextImpl = c, l.idl_defineConst(c.prototype, "_nodeType", a.NodeType.Text);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "_startNode", { get: function() {
            return this._start[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_startOffset", { get: function() {
            return this._start[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_endNode", { get: function() {
            return this._end[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_endOffset", { get: function() {
            return this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_collapsed", { get: function() {
            return this._start[0] === this._end[0] && this._start[1] === this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "startContainer", { get: function() {
            return this._startNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "startOffset", { get: function() {
            return this._startOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "endContainer", { get: function() {
            return this._endNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "endOffset", { get: function() {
            return this._endOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "collapsed", { get: function() {
            return this._collapsed;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.AbstractRangeImpl = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = function() {
          function e2(e3) {
            this._activeFlag = false, this._root = e3, this._whatToShow = n.WhatToShow.All, this._filter = null;
          }
          return Object.defineProperty(e2.prototype, "root", { get: function() {
            return this._root;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "whatToShow", { get: function() {
            return this._whatToShow;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "filter", { get: function() {
            return this._filter;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.TraverserImpl = i;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(0), o = r(12), a = function() {
          function e2(e3, t2) {
            this._target = null, this._relatedTarget = null, this._touchTargetList = [], this._path = [], this._currentTarget = null, this._eventPhase = n.EventPhase.None, this._stopPropagationFlag = false, this._stopImmediatePropagationFlag = false, this._canceledFlag = false, this._inPassiveListenerFlag = false, this._composedFlag = false, this._initializedFlag = false, this._dispatchFlag = false, this._isTrusted = false, this._bubbles = false, this._cancelable = false, this._type = e3, t2 && (this._bubbles = t2.bubbles || false, this._cancelable = t2.cancelable || false, this._composedFlag = t2.composed || false), this._initializedFlag = true, this._timeStamp = new Date().getTime();
          }
          return Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "srcElement", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "currentTarget", { get: function() {
            return this._currentTarget;
          }, enumerable: true, configurable: true }), e2.prototype.composedPath = function() {
            var e3 = [], t2 = this._path;
            if (t2.length === 0)
              return e3;
            var r2 = this._currentTarget;
            if (r2 === null)
              throw new Error("Event currentTarget is null.");
            e3.push(r2);
            for (var n2 = 0, i2 = 0, o2 = t2.length - 1; o2 >= 0; ) {
              if (t2[o2].rootOfClosedTree && i2++, t2[o2].invocationTarget === r2) {
                n2 = o2;
                break;
              }
              t2[o2].slotInClosedTree && i2--, o2--;
            }
            var a2 = i2, s = i2;
            for (o2 = n2 - 1; o2 >= 0; )
              t2[o2].rootOfClosedTree && a2++, a2 <= s && e3.unshift(t2[o2].invocationTarget), t2[o2].slotInClosedTree && --a2 < s && (s = a2), o2--;
            for (a2 = i2, s = i2, o2 = n2 + 1; o2 < t2.length; )
              t2[o2].slotInClosedTree && a2++, a2 <= s && e3.push(t2[o2].invocationTarget), t2[o2].rootOfClosedTree && --a2 < s && (s = a2), o2++;
            return e3;
          }, Object.defineProperty(e2.prototype, "eventPhase", { get: function() {
            return this._eventPhase;
          }, enumerable: true, configurable: true }), e2.prototype.stopPropagation = function() {
            this._stopPropagationFlag = true;
          }, Object.defineProperty(e2.prototype, "cancelBubble", { get: function() {
            return this._stopPropagationFlag;
          }, set: function(e3) {
            e3 && this.stopPropagation();
          }, enumerable: true, configurable: true }), e2.prototype.stopImmediatePropagation = function() {
            this._stopPropagationFlag = true, this._stopImmediatePropagationFlag = true;
          }, Object.defineProperty(e2.prototype, "bubbles", { get: function() {
            return this._bubbles;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "cancelable", { get: function() {
            return this._cancelable;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "returnValue", { get: function() {
            return !this._canceledFlag;
          }, set: function(e3) {
            e3 || i.event_setTheCanceledFlag(this);
          }, enumerable: true, configurable: true }), e2.prototype.preventDefault = function() {
            i.event_setTheCanceledFlag(this);
          }, Object.defineProperty(e2.prototype, "defaultPrevented", { get: function() {
            return this._canceledFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "composed", { get: function() {
            return this._composedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "isTrusted", { get: function() {
            return this._isTrusted;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "timeStamp", { get: function() {
            return this._timeStamp;
          }, enumerable: true, configurable: true }), e2.prototype.initEvent = function(e3, t2, r2) {
            t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false), this._dispatchFlag || i.event_initialize(this, e3, t2, r2);
          }, e2.NONE = 0, e2.CAPTURING_PHASE = 1, e2.AT_TARGET = 2, e2.BUBBLING_PHASE = 3, e2;
        }();
        t.EventImpl = a, o.idl_defineConst(a.prototype, "NONE", 0), o.idl_defineConst(a.prototype, "CAPTURING_PHASE", 1), o.idl_defineConst(a.prototype, "AT_TARGET", 2), o.idl_defineConst(a.prototype, "BUBBLING_PHASE", 3);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(9);
        t.traversal_filter = function(e2, t2) {
          if (e2._activeFlag)
            throw new i.InvalidStateError();
          var r2 = 1 << t2._nodeType - 1;
          if ((e2.whatToShow & r2) == 0)
            return n.FilterResult.Skip;
          if (!e2.filter)
            return n.FilterResult.Accept;
          e2._activeFlag = true;
          var o = n.FilterResult.Reject;
          try {
            o = e2.filter.acceptNode(t2);
          } catch (t3) {
            throw e2._activeFlag = false, t3;
          }
          return e2._activeFlag = false, o;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(6), a = r(3), s = r(1), u = r(99), l = r(73), c = r(17), h = r(173), p = r(30), f = r(52), d = r(37);
        t.document_elementInterface = function(e2, t2) {
          return u.ElementImpl;
        }, t.document_internalCreateElementNS = function(e2, t2, r2, i2) {
          var o2 = n(h.namespace_validateAndExtract(t2, r2), 3), a2 = o2[0], u2 = o2[1], l2 = o2[2], c2 = null;
          return i2 !== void 0 && (c2 = s.isString(i2) ? i2 : i2.is), f.element_createAnElement(e2, l2, a2, u2, c2, true);
        }, t.document_adopt = function(e2, t2) {
          var r2, n2;
          if (e2._nodeDocument !== t2 || e2._parent !== null) {
            var s2 = e2._nodeDocument;
            if (e2._parent && d.mutation_remove(e2, e2._parent), t2 !== s2)
              for (var u2 = c.tree_getFirstDescendantNode(e2, true, true); u2 !== null; ) {
                if (u2._nodeDocument = t2, a.Guard.isElementNode(u2))
                  try {
                    for (var h2 = (r2 = void 0, i(u2._attributeList._asArray())), f2 = h2.next(); !f2.done; f2 = h2.next()) {
                      f2.value._nodeDocument = t2;
                    }
                  } catch (e3) {
                    r2 = { error: e3 };
                  } finally {
                    try {
                      f2 && !f2.done && (n2 = h2.return) && n2.call(h2);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                o.dom.features.customElements && a.Guard.isElementNode(u2) && u2._customElementState === "custom" && l.customElement_enqueueACustomElementCallbackReaction(u2, "adoptedCallback", [s2, t2]), o.dom.features.steps && p.dom_runAdoptingSteps(u2, s2), u2 = c.tree_getNextDescendantNode(e2, u2, true, true);
              }
          }
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(9), s = r(17), u = r(51), l = r(30);
        t.characterData_replaceData = function(e2, t2, r2, c) {
          var h, p, f = s.tree_nodeLength(e2);
          if (t2 > f)
            throw new a.IndexSizeError("Offset exceeds character data length. Offset: " + t2 + ", Length: " + f + ", Node is " + e2.nodeName + ".");
          t2 + r2 > f && (r2 = f - t2), i.dom.features.mutationObservers && u.observer_queueMutationRecord("characterData", e2, null, null, e2._data, [], [], null, null);
          var d = e2._data.substring(0, t2) + c + e2._data.substring(t2 + r2);
          e2._data = d;
          try {
            for (var m = n(i.dom.rangeList), y = m.next(); !y.done; y = m.next()) {
              var v = y.value;
              v._start[0] === e2 && v._start[1] > t2 && v._start[1] <= t2 + r2 && (v._start[1] = t2), v._end[0] === e2 && v._end[1] > t2 && v._end[1] <= t2 + r2 && (v._end[1] = t2), v._start[0] === e2 && v._start[1] > t2 + r2 && (v._start[1] += c.length - r2), v._end[0] === e2 && v._end[1] > t2 + r2 && (v._end[1] += c.length - r2);
            }
          } catch (e3) {
            h = { error: e3 };
          } finally {
            try {
              y && !y.done && (p = m.return) && p.call(m);
            } finally {
              if (h)
                throw h.error;
            }
          }
          i.dom.features.steps && o.Guard.isTextNode(e2) && e2._parent !== null && l.dom_runChildTextContentChangeSteps(e2._parent);
        }, t.characterData_substringData = function(e2, t2, r2) {
          var n2 = s.tree_nodeLength(e2);
          if (t2 > n2)
            throw new a.IndexSizeError("Offset exceeds character data length. Offset: " + t2 + ", Length: " + n2 + ", Node is " + e2.nodeName + ".");
          return t2 + r2 > n2 ? e2._data.substr(t2) : e2._data.substr(t2, r2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(n(arguments[t2]));
          return e2;
        }, o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(7);
        function s(e2) {
          var t2 = a.string.splitAStringOnASCIIWhitespace(e2);
          return new Set(t2);
        }
        function u(e2) {
          return i(e2).join(" ");
        }
        t.orderedSet_parse = s, t.orderedSet_serialize = u, t.orderedSet_sanitize = function(e2) {
          return u(s(e2));
        }, t.orderedSet_contains = function(e2, t2, r2) {
          var n2, i2, a2, s2;
          try {
            for (var u2 = o(t2), l = u2.next(); !l.done; l = u2.next()) {
              var c = l.value, h = false;
              try {
                for (var p = (a2 = void 0, o(e2)), f = p.next(); !f.done; f = p.next()) {
                  var d = f.value;
                  if (r2) {
                    if (d === c) {
                      h = true;
                      break;
                    }
                  } else if (d.toUpperCase() === c.toUpperCase()) {
                    h = true;
                    break;
                  }
                }
              } catch (e3) {
                a2 = { error: e3 };
              } finally {
                try {
                  f && !f.done && (s2 = p.return) && s2.call(p);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              if (!h)
                return false;
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (i2 = u2.return) && i2.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          return true;
        };
      }, function(e, t, r) {
        "use strict";
        r(179), Object.defineProperty(t, "__esModule", { value: true });
        var n = r(262), i = r(110), o = r(1);
        i.dom.setFeatures(false), t.createDocument = function() {
          var e2 = new n.DOMImplementation().createDocument(null, "root", null);
          return e2.documentElement && e2.removeChild(e2.documentElement), e2;
        }, t.sanitizeInput = function(e2, t2) {
          if (e2 == null)
            return e2;
          if (t2 === void 0)
            return e2 + "";
          var r2 = "";
          e2 += "";
          for (var n2 = 0; n2 < e2.length; n2++) {
            var i2 = e2.charCodeAt(n2);
            if (i2 === 9 || i2 === 10 || i2 === 13 || i2 >= 32 && i2 <= 55295 || i2 >= 57344 && i2 <= 65533)
              r2 += e2.charAt(n2);
            else if (i2 >= 55296 && i2 <= 56319 && n2 < e2.length - 1) {
              var a = e2.charCodeAt(n2 + 1);
              a >= 56320 && a <= 57343 ? (i2 = 1024 * (i2 - 55296) + a - 56320 + 65536, r2 += String.fromCodePoint(i2), n2++) : r2 += o.isString(t2) ? t2 : t2(e2.charAt(n2), n2, e2);
            } else
              r2 += o.isString(t2) ? t2 : t2(e2.charAt(n2), n2, e2);
          }
          return r2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(1), i = r(153);
        t.AbortController = i.AbortControllerImpl;
        var o = r(154);
        t.AbortSignal = o.AbortSignalImpl;
        var a = r(102);
        t.AbstractRange = a.AbstractRangeImpl;
        var s = r(157);
        t.Attr = s.AttrImpl;
        var u = r(158);
        t.CDATASection = u.CDATASectionImpl;
        var l = r(71);
        t.CharacterData = l.CharacterDataImpl;
        var c = r(263), h = r(159);
        t.Comment = h.CommentImpl;
        var p = r(171);
        t.CustomEvent = p.CustomEventImpl;
        var f = r(100);
        t.DocumentFragment = f.DocumentFragmentImpl;
        var d = r(98);
        t.Document = d.DocumentImpl;
        var m = r(264), y = r(155);
        t.DocumentType = y.DocumentTypeImpl;
        var v = r(6);
        t.dom = v.dom;
        var _ = r(148);
        t.DOMImplementation = _.DOMImplementationImpl;
        var g = r(170);
        t.DOMTokenList = g.DOMTokenListImpl;
        var b = r(99);
        t.Element = b.ElementImpl;
        var x = r(104);
        t.Event = x.EventImpl;
        var w = r(70);
        t.EventTarget = w.EventTargetImpl;
        var E = r(161);
        t.HTMLCollection = E.HTMLCollectionImpl;
        var D = r(265);
        t.MutationObserver = D.MutationObserverImpl;
        var S = r(169);
        t.MutationRecord = S.MutationRecordImpl;
        var C = r(164);
        t.NamedNodeMap = C.NamedNodeMapImpl;
        var A = r(168);
        t.NodeFilter = A.NodeFilterImpl;
        var N = r(34);
        t.Node = N.NodeImpl;
        var T = r(166);
        t.NodeIterator = T.NodeIteratorImpl;
        var O = r(162);
        t.NodeList = O.NodeListImpl;
        var F = r(163);
        t.NodeListStatic = F.NodeListStaticImpl;
        var k = r(266), P = r(267), I = r(268), L = r(160);
        t.ProcessingInstruction = L.ProcessingInstructionImpl;
        var M = r(165);
        t.Range = M.RangeImpl;
        var B = r(156);
        t.ShadowRoot = B.ShadowRootImpl;
        var j = r(269), R = r(270);
        t.StaticRange = R.StaticRangeImpl;
        var z = r(101);
        t.Text = z.TextImpl;
        var U = r(103);
        t.Traverser = U.TraverserImpl;
        var G = r(167);
        t.TreeWalker = G.TreeWalkerImpl;
        var X = r(149);
        t.Window = X.WindowImpl;
        var q = r(151);
        t.XMLDocument = q.XMLDocumentImpl, n.applyMixin(b.ElementImpl, c.ChildNodeImpl), n.applyMixin(l.CharacterDataImpl, c.ChildNodeImpl), n.applyMixin(y.DocumentTypeImpl, c.ChildNodeImpl), n.applyMixin(d.DocumentImpl, m.DocumentOrShadowRootImpl), n.applyMixin(B.ShadowRootImpl, m.DocumentOrShadowRootImpl), n.applyMixin(b.ElementImpl, k.NonDocumentTypeChildNodeImpl), n.applyMixin(l.CharacterDataImpl, k.NonDocumentTypeChildNodeImpl), n.applyMixin(d.DocumentImpl, P.NonElementParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, P.NonElementParentNodeImpl), n.applyMixin(d.DocumentImpl, I.ParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, I.ParentNodeImpl), n.applyMixin(b.ElementImpl, I.ParentNodeImpl), n.applyMixin(z.TextImpl, j.SlotableImpl), n.applyMixin(b.ElementImpl, j.SlotableImpl);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
          e2[e2.EOF = 0] = "EOF", e2[e2.Declaration = 1] = "Declaration", e2[e2.DocType = 2] = "DocType", e2[e2.Element = 3] = "Element", e2[e2.Text = 4] = "Text", e2[e2.CDATA = 5] = "CDATA", e2[e2.PI = 6] = "PI", e2[e2.Comment = 7] = "Comment", e2[e2.ClosingTag = 8] = "ClosingTag";
        }(t.TokenType || (t.TokenType = {}));
      }, function(e, t, r) {
        "use strict";
        r(64), r(20), r(66);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(1), a = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            var r2 = this, n2 = this._builderOptions, i2 = null;
            return o.isFunction(t3) ? i2 = this.parse(e3, t3.apply(this)) : o.isArray(t3) || o.isSet(t3) ? o.forEachArray(t3, function(t4) {
              return i2 = r2.parse(e3, t4);
            }, this) : o.isMap(t3) || o.isObject(t3) ? o.forEachObject(t3, function(t4, a2) {
              if (o.isFunction(a2) && (a2 = a2.apply(r2)), n2.ignoreConverters || t4.indexOf(n2.convert.att) !== 0)
                if (n2.ignoreConverters || t4.indexOf(n2.convert.text) !== 0)
                  if (n2.ignoreConverters || t4.indexOf(n2.convert.cdata) !== 0)
                    if (n2.ignoreConverters || t4.indexOf(n2.convert.comment) !== 0)
                      if (n2.ignoreConverters || t4.indexOf(n2.convert.ins) !== 0)
                        if ((o.isArray(a2) || o.isSet(a2)) && o.isEmpty(a2))
                          ;
                        else if ((o.isMap(a2) || o.isObject(a2)) && o.isEmpty(a2))
                          i2 = r2.element(e3, void 0, r2.sanitize(t4)) || i2;
                        else if (n2.keepNullNodes || a2 != null)
                          if (o.isArray(a2) || o.isSet(a2))
                            o.forEachArray(a2, function(n3) {
                              var o2 = {};
                              o2[t4] = n3, i2 = r2.parse(e3, o2);
                            }, r2);
                          else if (o.isMap(a2) || o.isObject(a2)) {
                            (s = r2.element(e3, void 0, r2.sanitize(t4))) && (i2 = s, r2.parse(s, a2));
                          } else if (a2 != null && a2 !== "") {
                            var s;
                            (s = r2.element(e3, void 0, r2.sanitize(t4))) && (i2 = s, r2.text(s, r2._decodeText(r2.sanitize(a2))));
                          } else
                            i2 = r2.element(e3, void 0, r2.sanitize(t4)) || i2;
                        else
                          ;
                      else if (o.isString(a2)) {
                        var u = a2.indexOf(" "), l = u === -1 ? a2 : a2.substr(0, u), c = u === -1 ? "" : a2.substr(u + 1);
                        i2 = r2.instruction(e3, r2.sanitize(l), r2.sanitize(c)) || i2;
                      } else
                        o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                          var n3 = t5.indexOf(" "), o2 = n3 === -1 ? t5 : t5.substr(0, n3), a3 = n3 === -1 ? "" : t5.substr(n3 + 1);
                          i2 = r2.instruction(e3, r2.sanitize(o2), r2.sanitize(a3)) || i2;
                        }, r2) : o.forEachObject(a2, function(t5, n3) {
                          return i2 = r2.instruction(e3, r2.sanitize(t5), r2.sanitize(n3)) || i2;
                        }, r2);
                    else
                      o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                        return i2 = r2.comment(e3, r2.sanitize(t5)) || i2;
                      }, r2) : i2 = r2.comment(e3, r2.sanitize(a2)) || i2;
                  else
                    o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                      return i2 = r2.cdata(e3, r2.sanitize(t5)) || i2;
                    }, r2) : i2 = r2.cdata(e3, r2.sanitize(a2)) || i2;
                else
                  i2 = o.isMap(a2) || o.isObject(a2) ? r2.parse(e3, a2) : r2.text(e3, r2._decodeText(r2.sanitize(a2))) || i2;
              else if (t4 === n2.convert.att) {
                if (o.isArray(a2) || o.isSet(a2))
                  throw new Error("Invalid attribute: " + a2.toString() + ". " + e3._debugInfo());
                o.forEachObject(a2, function(t5, n3) {
                  i2 = r2.attribute(e3, void 0, r2.sanitize(t5), r2._decodeAttributeValue(r2.sanitize(n3))) || i2;
                });
              } else
                i2 = r2.attribute(e3, void 0, r2.sanitize(t4.substr(n2.convert.att.length)), r2._decodeAttributeValue(r2.sanitize(a2))) || i2;
            }, this) : (n2.keepNullNodes || t3 != null) && (i2 = this.text(e3, this._decodeText(this.sanitize(t3))) || i2), i2 || e3;
          }, t2;
        }(r(75).BaseReader);
        t.ObjectReader = a;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ explicit: [r(286), r(287), r(288)] });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function(e2) {
          this.level = 0, this._builderOptions = e2, this._writerOptions = e2;
        };
        t.BaseCBWriter = n;
      }, function(e, t, r) {
        var n = r(16), i = r(8), o = r(116);
        e.exports = !n && !i(function() {
          return Object.defineProperty(o("div"), "a", { get: function() {
            return 7;
          } }).a != 7;
        });
      }, function(e, t, r) {
        var n = r(11), i = r(13), o = n.document, a = i(o) && i(o.createElement);
        e.exports = function(e2) {
          return a ? o.createElement(e2) : {};
        };
      }, function(e, t, r) {
        var n = r(118), i = Function.toString;
        typeof n.inspectSource != "function" && (n.inspectSource = function(e2) {
          return i.call(e2);
        }), e.exports = n.inspectSource;
      }, function(e, t, r) {
        var n = r(11), i = r(80), o = n["__core-js_shared__"] || i("__core-js_shared__", {});
        e.exports = o;
      }, function(e, t, r) {
        var n = r(14), i = r(187), o = r(55), a = r(15);
        e.exports = function(e2, t2) {
          for (var r2 = i(t2), s = a.f, u = o.f, l = 0; l < r2.length; l++) {
            var c = r2[l];
            n(e2, c) || s(e2, c, u(t2, c));
          }
        };
      }, function(e, t, r) {
        var n = r(11);
        e.exports = n;
      }, function(e, t, r) {
        var n = r(14), i = r(24), o = r(122).indexOf, a = r(45);
        e.exports = function(e2, t2) {
          var r2, s = i(e2), u = 0, l = [];
          for (r2 in s)
            !n(a, r2) && n(s, r2) && l.push(r2);
          for (; t2.length > u; )
            n(s, r2 = t2[u++]) && (~o(l, r2) || l.push(r2));
          return l;
        };
      }, function(e, t, r) {
        var n = r(24), i = r(26), o = r(83), a = function(e2) {
          return function(t2, r2, a2) {
            var s, u = n(t2), l = i(u.length), c = o(a2, l);
            if (e2 && r2 != r2) {
              for (; l > c; )
                if ((s = u[c++]) != s)
                  return true;
            } else
              for (; l > c; c++)
                if ((e2 || c in u) && u[c] === r2)
                  return e2 || c || 0;
            return !e2 && -1;
          };
        };
        e.exports = { includes: a(true), indexOf: a(false) };
      }, function(e, t, r) {
        var n = r(8), i = /#|\.prototype\./, o = function(e2, t2) {
          var r2 = s[a(e2)];
          return r2 == l || r2 != u && (typeof t2 == "function" ? n(t2) : !!t2);
        }, a = o.normalize = function(e2) {
          return String(e2).replace(i, ".").toLowerCase();
        }, s = o.data = {}, u = o.NATIVE = "N", l = o.POLYFILL = "P";
        e.exports = o;
      }, function(e, t, r) {
        var n = r(86);
        e.exports = n && !Symbol.sham && typeof Symbol.iterator == "symbol";
      }, function(e, t, r) {
        var n = r(5);
        t.f = n;
      }, function(e, t, r) {
        var n = r(120), i = r(14), o = r(125), a = r(15).f;
        e.exports = function(e2) {
          var t2 = n.Symbol || (n.Symbol = {});
          i(t2, e2) || a(t2, e2, { value: o.f(e2) });
        };
      }, function(e, t) {
        e.exports = function(e2) {
          if (typeof e2 != "function")
            throw TypeError(String(e2) + " is not a function");
          return e2;
        };
      }, function(e, t, r) {
        var n = r(13), i = r(59), o = r(5)("species");
        e.exports = function(e2, t2) {
          var r2;
          return i(e2) && (typeof (r2 = e2.constructor) != "function" || r2 !== Array && !i(r2.prototype) ? n(r2) && (r2 = r2[o]) === null && (r2 = void 0) : r2 = void 0), new (r2 === void 0 ? Array : r2)(t2 === 0 ? 0 : t2);
        };
      }, function(e, t, r) {
        var n, i, o = r(11), a = r(193), s = o.process, u = s && s.versions, l = u && u.v8;
        l ? i = (n = l.split("."))[0] + n[1] : a && (!(n = a.match(/Edge\/(\d+)/)) || n[1] >= 74) && (n = a.match(/Chrome\/(\d+)/)) && (i = n[1]), e.exports = i && +i;
      }, function(e, t, r) {
        var n = r(5), i = r(60), o = r(15), a = n("unscopables"), s = Array.prototype;
        s[a] == null && o.f(s, a, { configurable: true, value: i(null) }), e.exports = function(e2) {
          s[a][e2] = true;
        };
      }, function(e, t, r) {
        "use strict";
        var n, i, o, a = r(132), s = r(21), u = r(14), l = r(5), c = r(44), h = l("iterator"), p = false;
        [].keys && ("next" in (o = [].keys()) ? (i = a(a(o))) !== Object.prototype && (n = i) : p = true), n == null && (n = {}), c || u(n, h) || s(n, h, function() {
          return this;
        }), e.exports = { IteratorPrototype: n, BUGGY_SAFARI_ITERATORS: p };
      }, function(e, t, r) {
        var n = r(14), i = r(27), o = r(57), a = r(196), s = o("IE_PROTO"), u = Object.prototype;
        e.exports = a ? Object.getPrototypeOf : function(e2) {
          return e2 = i(e2), n(e2, s) ? e2[s] : typeof e2.constructor == "function" && e2 instanceof e2.constructor ? e2.constructor.prototype : e2 instanceof Object ? u : null;
        };
      }, function(e, t, r) {
        var n = r(18), i = r(197);
        e.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var e2, t2 = false, r2 = {};
          try {
            (e2 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r2, []), t2 = r2 instanceof Array;
          } catch (e3) {
          }
          return function(r3, o) {
            return n(r3), i(o), t2 ? e2.call(r3, o) : r3.__proto__ = o, r3;
          };
        }() : void 0);
      }, function(e, t, r) {
        "use strict";
        var n = r(56), i = r(15), o = r(40);
        e.exports = function(e2, t2, r2) {
          var a = n(t2);
          a in e2 ? i.f(e2, a, o(0, r2)) : e2[a] = r2;
        };
      }, function(e, t, r) {
        var n = r(90), i = r(42), o = r(5)("toStringTag"), a = i(function() {
          return arguments;
        }()) == "Arguments";
        e.exports = n ? i : function(e2) {
          var t2, r2, n2;
          return e2 === void 0 ? "Undefined" : e2 === null ? "Null" : typeof (r2 = function(e3, t3) {
            try {
              return e3[t3];
            } catch (e4) {
            }
          }(t2 = Object(e2), o)) == "string" ? r2 : a ? i(t2) : (n2 = i(t2)) == "Object" && typeof t2.callee == "function" ? "Arguments" : n2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(18);
        e.exports = function() {
          var e2 = n(this), t2 = "";
          return e2.global && (t2 += "g"), e2.ignoreCase && (t2 += "i"), e2.multiline && (t2 += "m"), e2.dotAll && (t2 += "s"), e2.unicode && (t2 += "u"), e2.sticky && (t2 += "y"), t2;
        };
      }, function(e, t, r) {
        var n = r(47), i = r(35), o = function(e2) {
          return function(t2, r2) {
            var o2, a, s = String(i(t2)), u = n(r2), l = s.length;
            return u < 0 || u >= l ? e2 ? "" : void 0 : (o2 = s.charCodeAt(u)) < 55296 || o2 > 56319 || u + 1 === l || (a = s.charCodeAt(u + 1)) < 56320 || a > 57343 ? e2 ? s.charAt(u) : o2 : e2 ? s.slice(u, u + 2) : a - 56320 + (o2 - 55296 << 10) + 65536;
          };
        };
        e.exports = { codeAt: o(false), charAt: o(true) };
      }, function(e, t, r) {
        var n = r(4), i = r(27), o = r(61);
        n({ target: "Object", stat: true, forced: r(8)(function() {
          o(1);
        }) }, { keys: function(e2) {
          return o(i(e2));
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(11), o = r(123), a = r(25), s = r(140), u = r(141), l = r(142), c = r(13), h = r(8), p = r(208), f = r(62), d = r(209);
        e.exports = function(e2, t2, r2) {
          var m = e2.indexOf("Map") !== -1, y = e2.indexOf("Weak") !== -1, v = m ? "set" : "add", _ = i[e2], g = _ && _.prototype, b = _, x = {}, w = function(e3) {
            var t3 = g[e3];
            a(g, e3, e3 == "add" ? function(e4) {
              return t3.call(this, e4 === 0 ? 0 : e4), this;
            } : e3 == "delete" ? function(e4) {
              return !(y && !c(e4)) && t3.call(this, e4 === 0 ? 0 : e4);
            } : e3 == "get" ? function(e4) {
              return y && !c(e4) ? void 0 : t3.call(this, e4 === 0 ? 0 : e4);
            } : e3 == "has" ? function(e4) {
              return !(y && !c(e4)) && t3.call(this, e4 === 0 ? 0 : e4);
            } : function(e4, r3) {
              return t3.call(this, e4 === 0 ? 0 : e4, r3), this;
            });
          };
          if (o(e2, typeof _ != "function" || !(y || g.forEach && !h(function() {
            new _().entries().next();
          }))))
            b = r2.getConstructor(t2, e2, m, v), s.REQUIRED = true;
          else if (o(e2, true)) {
            var E = new b(), D = E[v](y ? {} : -0, 1) != E, S = h(function() {
              E.has(1);
            }), C = p(function(e3) {
              new _(e3);
            }), A = !y && h(function() {
              for (var e3 = new _(), t3 = 5; t3--; )
                e3[v](t3, t3);
              return !e3.has(-0);
            });
            C || ((b = t2(function(t3, r3) {
              l(t3, b, e2);
              var n2 = d(new _(), t3, b);
              return r3 != null && u(r3, n2[v], n2, m), n2;
            })).prototype = g, g.constructor = b), (S || A) && (w("delete"), w("has"), m && w("get")), (A || D) && w(v), y && g.clear && delete g.clear;
          }
          return x[e2] = b, n({ global: true, forced: b != _ }, x), f(b, e2), y || r2.setStrong(b, e2, m), b;
        };
      }, function(e, t, r) {
        var n = r(45), i = r(13), o = r(14), a = r(15).f, s = r(58), u = r(204), l = s("meta"), c = 0, h = Object.isExtensible || function() {
          return true;
        }, p = function(e2) {
          a(e2, l, { value: { objectID: "O" + ++c, weakData: {} } });
        }, f = e.exports = { REQUIRED: false, fastKey: function(e2, t2) {
          if (!i(e2))
            return typeof e2 == "symbol" ? e2 : (typeof e2 == "string" ? "S" : "P") + e2;
          if (!o(e2, l)) {
            if (!h(e2))
              return "F";
            if (!t2)
              return "E";
            p(e2);
          }
          return e2[l].objectID;
        }, getWeakData: function(e2, t2) {
          if (!o(e2, l)) {
            if (!h(e2))
              return true;
            if (!t2)
              return false;
            p(e2);
          }
          return e2[l].weakData;
        }, onFreeze: function(e2) {
          return u && f.REQUIRED && h(e2) && !o(e2, l) && p(e2), e2;
        } };
        n[l] = true;
      }, function(e, t, r) {
        var n = r(18), i = r(205), o = r(26), a = r(87), s = r(206), u = r(207), l = function(e2, t2) {
          this.stopped = e2, this.result = t2;
        };
        (e.exports = function(e2, t2, r2, c, h) {
          var p, f, d, m, y, v, _, g = a(t2, r2, c ? 2 : 1);
          if (h)
            p = e2;
          else {
            if (typeof (f = s(e2)) != "function")
              throw TypeError("Target is not iterable");
            if (i(f)) {
              for (d = 0, m = o(e2.length); m > d; d++)
                if ((y = c ? g(n(_ = e2[d])[0], _[1]) : g(e2[d])) && y instanceof l)
                  return y;
              return new l(false);
            }
            p = f.call(e2);
          }
          for (v = p.next; !(_ = v.call(p)).done; )
            if (typeof (y = u(p, g, _.value, c)) == "object" && y && y instanceof l)
              return y;
          return new l(false);
        }).stop = function(e2) {
          return new l(true, e2);
        };
      }, function(e, t) {
        e.exports = function(e2, t2, r) {
          if (!(e2 instanceof t2))
            throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(15).f, i = r(60), o = r(210), a = r(87), s = r(142), u = r(141), l = r(88), c = r(211), h = r(16), p = r(140).fastKey, f = r(43), d = f.set, m = f.getterFor;
        e.exports = { getConstructor: function(e2, t2, r2, l2) {
          var c2 = e2(function(e3, n2) {
            s(e3, c2, t2), d(e3, { type: t2, index: i(null), first: void 0, last: void 0, size: 0 }), h || (e3.size = 0), n2 != null && u(n2, e3[l2], e3, r2);
          }), f2 = m(t2), y = function(e3, t3, r3) {
            var n2, i2, o2 = f2(e3), a2 = v(e3, t3);
            return a2 ? a2.value = r3 : (o2.last = a2 = { index: i2 = p(t3, true), key: t3, value: r3, previous: n2 = o2.last, next: void 0, removed: false }, o2.first || (o2.first = a2), n2 && (n2.next = a2), h ? o2.size++ : e3.size++, i2 !== "F" && (o2.index[i2] = a2)), e3;
          }, v = function(e3, t3) {
            var r3, n2 = f2(e3), i2 = p(t3);
            if (i2 !== "F")
              return n2.index[i2];
            for (r3 = n2.first; r3; r3 = r3.next)
              if (r3.key == t3)
                return r3;
          };
          return o(c2.prototype, { clear: function() {
            for (var e3 = f2(this), t3 = e3.index, r3 = e3.first; r3; )
              r3.removed = true, r3.previous && (r3.previous = r3.previous.next = void 0), delete t3[r3.index], r3 = r3.next;
            e3.first = e3.last = void 0, h ? e3.size = 0 : this.size = 0;
          }, delete: function(e3) {
            var t3 = f2(this), r3 = v(this, e3);
            if (r3) {
              var n2 = r3.next, i2 = r3.previous;
              delete t3.index[r3.index], r3.removed = true, i2 && (i2.next = n2), n2 && (n2.previous = i2), t3.first == r3 && (t3.first = n2), t3.last == r3 && (t3.last = i2), h ? t3.size-- : this.size--;
            }
            return !!r3;
          }, forEach: function(e3) {
            for (var t3, r3 = f2(this), n2 = a(e3, arguments.length > 1 ? arguments[1] : void 0, 3); t3 = t3 ? t3.next : r3.first; )
              for (n2(t3.value, t3.key, this); t3 && t3.removed; )
                t3 = t3.previous;
          }, has: function(e3) {
            return !!v(this, e3);
          } }), o(c2.prototype, r2 ? { get: function(e3) {
            var t3 = v(this, e3);
            return t3 && t3.value;
          }, set: function(e3, t3) {
            return y(this, e3 === 0 ? 0 : e3, t3);
          } } : { add: function(e3) {
            return y(this, e3 = e3 === 0 ? 0 : e3, e3);
          } }), h && n(c2.prototype, "size", { get: function() {
            return f2(this).size;
          } }), c2;
        }, setStrong: function(e2, t2, r2) {
          var n2 = t2 + " Iterator", i2 = m(t2), o2 = m(n2);
          l(e2, t2, function(e3, t3) {
            d(this, { type: n2, target: e3, state: i2(e3), kind: t3, last: void 0 });
          }, function() {
            for (var e3 = o2(this), t3 = e3.kind, r3 = e3.last; r3 && r3.removed; )
              r3 = r3.previous;
            return e3.target && (e3.last = r3 = r3 ? r3.next : e3.state.first) ? t3 == "keys" ? { value: r3.key, done: false } : t3 == "values" ? { value: r3.value, done: false } : { value: [r3.key, r3.value], done: false } : (e3.target = void 0, { value: void 0, done: true });
          }, r2 ? "entries" : "values", !r2, true), c(t2);
        } };
      }, function(e, t, r) {
        "use strict";
        var n, i = r(4), o = r(55).f, a = r(26), s = r(222), u = r(35), l = r(224), c = r(44), h = "".endsWith, p = Math.min, f = l("endsWith");
        i({ target: "String", proto: true, forced: !!(c || f || (n = o(String.prototype, "endsWith"), !n || n.writable)) && !f }, { endsWith: function(e2) {
          var t2 = String(u(this));
          s(e2);
          var r2 = arguments.length > 1 ? arguments[1] : void 0, n2 = a(t2.length), i2 = r2 === void 0 ? n2 : p(a(r2), n2), o2 = String(e2);
          return h ? h.call(t2, o2, i2) : t2.slice(i2 - o2.length, i2) === o2;
        } });
      }, function(e, t, r) {
        "use strict";
        (function(e2) {
          var n = r(229), i = r(230), o = r(231);
          function a() {
            return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
          }
          function s(e3, t2) {
            if (a() < t2)
              throw new RangeError("Invalid typed array length");
            return u.TYPED_ARRAY_SUPPORT ? (e3 = new Uint8Array(t2)).__proto__ = u.prototype : (e3 === null && (e3 = new u(t2)), e3.length = t2), e3;
          }
          function u(e3, t2, r2) {
            if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u))
              return new u(e3, t2, r2);
            if (typeof e3 == "number") {
              if (typeof t2 == "string")
                throw new Error("If encoding is specified then the first argument must be a string");
              return h(this, e3);
            }
            return l(this, e3, t2, r2);
          }
          function l(e3, t2, r2, n2) {
            if (typeof t2 == "number")
              throw new TypeError('"value" argument must not be a number');
            return typeof ArrayBuffer != "undefined" && t2 instanceof ArrayBuffer ? function(e4, t3, r3, n3) {
              if (t3.byteLength, r3 < 0 || t3.byteLength < r3)
                throw new RangeError("'offset' is out of bounds");
              if (t3.byteLength < r3 + (n3 || 0))
                throw new RangeError("'length' is out of bounds");
              t3 = r3 === void 0 && n3 === void 0 ? new Uint8Array(t3) : n3 === void 0 ? new Uint8Array(t3, r3) : new Uint8Array(t3, r3, n3);
              u.TYPED_ARRAY_SUPPORT ? (e4 = t3).__proto__ = u.prototype : e4 = p(e4, t3);
              return e4;
            }(e3, t2, r2, n2) : typeof t2 == "string" ? function(e4, t3, r3) {
              typeof r3 == "string" && r3 !== "" || (r3 = "utf8");
              if (!u.isEncoding(r3))
                throw new TypeError('"encoding" must be a valid string encoding');
              var n3 = 0 | d(t3, r3), i2 = (e4 = s(e4, n3)).write(t3, r3);
              i2 !== n3 && (e4 = e4.slice(0, i2));
              return e4;
            }(e3, t2, r2) : function(e4, t3) {
              if (u.isBuffer(t3)) {
                var r3 = 0 | f(t3.length);
                return (e4 = s(e4, r3)).length === 0 || t3.copy(e4, 0, 0, r3), e4;
              }
              if (t3) {
                if (typeof ArrayBuffer != "undefined" && t3.buffer instanceof ArrayBuffer || "length" in t3)
                  return typeof t3.length != "number" || (n3 = t3.length) != n3 ? s(e4, 0) : p(e4, t3);
                if (t3.type === "Buffer" && o(t3.data))
                  return p(e4, t3.data);
              }
              var n3;
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }(e3, t2);
          }
          function c(e3) {
            if (typeof e3 != "number")
              throw new TypeError('"size" argument must be a number');
            if (e3 < 0)
              throw new RangeError('"size" argument must not be negative');
          }
          function h(e3, t2) {
            if (c(t2), e3 = s(e3, t2 < 0 ? 0 : 0 | f(t2)), !u.TYPED_ARRAY_SUPPORT)
              for (var r2 = 0; r2 < t2; ++r2)
                e3[r2] = 0;
            return e3;
          }
          function p(e3, t2) {
            var r2 = t2.length < 0 ? 0 : 0 | f(t2.length);
            e3 = s(e3, r2);
            for (var n2 = 0; n2 < r2; n2 += 1)
              e3[n2] = 255 & t2[n2];
            return e3;
          }
          function f(e3) {
            if (e3 >= a())
              throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a().toString(16) + " bytes");
            return 0 | e3;
          }
          function d(e3, t2) {
            if (u.isBuffer(e3))
              return e3.length;
            if (typeof ArrayBuffer != "undefined" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(e3) || e3 instanceof ArrayBuffer))
              return e3.byteLength;
            typeof e3 != "string" && (e3 = "" + e3);
            var r2 = e3.length;
            if (r2 === 0)
              return 0;
            for (var n2 = false; ; )
              switch (t2) {
                case "ascii":
                case "latin1":
                case "binary":
                  return r2;
                case "utf8":
                case "utf-8":
                case void 0:
                  return z(e3).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return 2 * r2;
                case "hex":
                  return r2 >>> 1;
                case "base64":
                  return U(e3).length;
                default:
                  if (n2)
                    return z(e3).length;
                  t2 = ("" + t2).toLowerCase(), n2 = true;
              }
          }
          function m(e3, t2, r2) {
            var n2 = false;
            if ((t2 === void 0 || t2 < 0) && (t2 = 0), t2 > this.length)
              return "";
            if ((r2 === void 0 || r2 > this.length) && (r2 = this.length), r2 <= 0)
              return "";
            if ((r2 >>>= 0) <= (t2 >>>= 0))
              return "";
            for (e3 || (e3 = "utf8"); ; )
              switch (e3) {
                case "hex":
                  return T(this, t2, r2);
                case "utf8":
                case "utf-8":
                  return C(this, t2, r2);
                case "ascii":
                  return A(this, t2, r2);
                case "latin1":
                case "binary":
                  return N(this, t2, r2);
                case "base64":
                  return S(this, t2, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return O(this, t2, r2);
                default:
                  if (n2)
                    throw new TypeError("Unknown encoding: " + e3);
                  e3 = (e3 + "").toLowerCase(), n2 = true;
              }
          }
          function y(e3, t2, r2) {
            var n2 = e3[t2];
            e3[t2] = e3[r2], e3[r2] = n2;
          }
          function v(e3, t2, r2, n2, i2) {
            if (e3.length === 0)
              return -1;
            if (typeof r2 == "string" ? (n2 = r2, r2 = 0) : r2 > 2147483647 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), r2 = +r2, isNaN(r2) && (r2 = i2 ? 0 : e3.length - 1), r2 < 0 && (r2 = e3.length + r2), r2 >= e3.length) {
              if (i2)
                return -1;
              r2 = e3.length - 1;
            } else if (r2 < 0) {
              if (!i2)
                return -1;
              r2 = 0;
            }
            if (typeof t2 == "string" && (t2 = u.from(t2, n2)), u.isBuffer(t2))
              return t2.length === 0 ? -1 : _(e3, t2, r2, n2, i2);
            if (typeof t2 == "number")
              return t2 &= 255, u.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? i2 ? Uint8Array.prototype.indexOf.call(e3, t2, r2) : Uint8Array.prototype.lastIndexOf.call(e3, t2, r2) : _(e3, [t2], r2, n2, i2);
            throw new TypeError("val must be string, number or Buffer");
          }
          function _(e3, t2, r2, n2, i2) {
            var o2, a2 = 1, s2 = e3.length, u2 = t2.length;
            if (n2 !== void 0 && ((n2 = String(n2).toLowerCase()) === "ucs2" || n2 === "ucs-2" || n2 === "utf16le" || n2 === "utf-16le")) {
              if (e3.length < 2 || t2.length < 2)
                return -1;
              a2 = 2, s2 /= 2, u2 /= 2, r2 /= 2;
            }
            function l2(e4, t3) {
              return a2 === 1 ? e4[t3] : e4.readUInt16BE(t3 * a2);
            }
            if (i2) {
              var c2 = -1;
              for (o2 = r2; o2 < s2; o2++)
                if (l2(e3, o2) === l2(t2, c2 === -1 ? 0 : o2 - c2)) {
                  if (c2 === -1 && (c2 = o2), o2 - c2 + 1 === u2)
                    return c2 * a2;
                } else
                  c2 !== -1 && (o2 -= o2 - c2), c2 = -1;
            } else
              for (r2 + u2 > s2 && (r2 = s2 - u2), o2 = r2; o2 >= 0; o2--) {
                for (var h2 = true, p2 = 0; p2 < u2; p2++)
                  if (l2(e3, o2 + p2) !== l2(t2, p2)) {
                    h2 = false;
                    break;
                  }
                if (h2)
                  return o2;
              }
            return -1;
          }
          function g(e3, t2, r2, n2) {
            r2 = Number(r2) || 0;
            var i2 = e3.length - r2;
            n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : n2 = i2;
            var o2 = t2.length;
            if (o2 % 2 != 0)
              throw new TypeError("Invalid hex string");
            n2 > o2 / 2 && (n2 = o2 / 2);
            for (var a2 = 0; a2 < n2; ++a2) {
              var s2 = parseInt(t2.substr(2 * a2, 2), 16);
              if (isNaN(s2))
                return a2;
              e3[r2 + a2] = s2;
            }
            return a2;
          }
          function b(e3, t2, r2, n2) {
            return G(z(t2, e3.length - r2), e3, r2, n2);
          }
          function x(e3, t2, r2, n2) {
            return G(function(e4) {
              for (var t3 = [], r3 = 0; r3 < e4.length; ++r3)
                t3.push(255 & e4.charCodeAt(r3));
              return t3;
            }(t2), e3, r2, n2);
          }
          function w(e3, t2, r2, n2) {
            return x(e3, t2, r2, n2);
          }
          function E(e3, t2, r2, n2) {
            return G(U(t2), e3, r2, n2);
          }
          function D(e3, t2, r2, n2) {
            return G(function(e4, t3) {
              for (var r3, n3, i2, o2 = [], a2 = 0; a2 < e4.length && !((t3 -= 2) < 0); ++a2)
                r3 = e4.charCodeAt(a2), n3 = r3 >> 8, i2 = r3 % 256, o2.push(i2), o2.push(n3);
              return o2;
            }(t2, e3.length - r2), e3, r2, n2);
          }
          function S(e3, t2, r2) {
            return t2 === 0 && r2 === e3.length ? n.fromByteArray(e3) : n.fromByteArray(e3.slice(t2, r2));
          }
          function C(e3, t2, r2) {
            r2 = Math.min(e3.length, r2);
            for (var n2 = [], i2 = t2; i2 < r2; ) {
              var o2, a2, s2, u2, l2 = e3[i2], c2 = null, h2 = l2 > 239 ? 4 : l2 > 223 ? 3 : l2 > 191 ? 2 : 1;
              if (i2 + h2 <= r2)
                switch (h2) {
                  case 1:
                    l2 < 128 && (c2 = l2);
                    break;
                  case 2:
                    (192 & (o2 = e3[i2 + 1])) == 128 && (u2 = (31 & l2) << 6 | 63 & o2) > 127 && (c2 = u2);
                    break;
                  case 3:
                    o2 = e3[i2 + 1], a2 = e3[i2 + 2], (192 & o2) == 128 && (192 & a2) == 128 && (u2 = (15 & l2) << 12 | (63 & o2) << 6 | 63 & a2) > 2047 && (u2 < 55296 || u2 > 57343) && (c2 = u2);
                    break;
                  case 4:
                    o2 = e3[i2 + 1], a2 = e3[i2 + 2], s2 = e3[i2 + 3], (192 & o2) == 128 && (192 & a2) == 128 && (192 & s2) == 128 && (u2 = (15 & l2) << 18 | (63 & o2) << 12 | (63 & a2) << 6 | 63 & s2) > 65535 && u2 < 1114112 && (c2 = u2);
                }
              c2 === null ? (c2 = 65533, h2 = 1) : c2 > 65535 && (c2 -= 65536, n2.push(c2 >>> 10 & 1023 | 55296), c2 = 56320 | 1023 & c2), n2.push(c2), i2 += h2;
            }
            return function(e4) {
              var t3 = e4.length;
              if (t3 <= 4096)
                return String.fromCharCode.apply(String, e4);
              var r3 = "", n3 = 0;
              for (; n3 < t3; )
                r3 += String.fromCharCode.apply(String, e4.slice(n3, n3 += 4096));
              return r3;
            }(n2);
          }
          t.Buffer = u, t.SlowBuffer = function(e3) {
            +e3 != e3 && (e3 = 0);
            return u.alloc(+e3);
          }, t.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = e2.TYPED_ARRAY_SUPPORT !== void 0 ? e2.TYPED_ARRAY_SUPPORT : function() {
            try {
              var e3 = new Uint8Array(1);
              return e3.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                return 42;
              } }, e3.foo() === 42 && typeof e3.subarray == "function" && e3.subarray(1, 1).byteLength === 0;
            } catch (e4) {
              return false;
            }
          }(), t.kMaxLength = a(), u.poolSize = 8192, u._augment = function(e3) {
            return e3.__proto__ = u.prototype, e3;
          }, u.from = function(e3, t2, r2) {
            return l(null, e3, t2, r2);
          }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, typeof Symbol != "undefined" && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, { value: null, configurable: true })), u.alloc = function(e3, t2, r2) {
            return function(e4, t3, r3, n2) {
              return c(t3), t3 <= 0 ? s(e4, t3) : r3 !== void 0 ? typeof n2 == "string" ? s(e4, t3).fill(r3, n2) : s(e4, t3).fill(r3) : s(e4, t3);
            }(null, e3, t2, r2);
          }, u.allocUnsafe = function(e3) {
            return h(null, e3);
          }, u.allocUnsafeSlow = function(e3) {
            return h(null, e3);
          }, u.isBuffer = function(e3) {
            return !(e3 == null || !e3._isBuffer);
          }, u.compare = function(e3, t2) {
            if (!u.isBuffer(e3) || !u.isBuffer(t2))
              throw new TypeError("Arguments must be Buffers");
            if (e3 === t2)
              return 0;
            for (var r2 = e3.length, n2 = t2.length, i2 = 0, o2 = Math.min(r2, n2); i2 < o2; ++i2)
              if (e3[i2] !== t2[i2]) {
                r2 = e3[i2], n2 = t2[i2];
                break;
              }
            return r2 < n2 ? -1 : n2 < r2 ? 1 : 0;
          }, u.isEncoding = function(e3) {
            switch (String(e3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, u.concat = function(e3, t2) {
            if (!o(e3))
              throw new TypeError('"list" argument must be an Array of Buffers');
            if (e3.length === 0)
              return u.alloc(0);
            var r2;
            if (t2 === void 0)
              for (t2 = 0, r2 = 0; r2 < e3.length; ++r2)
                t2 += e3[r2].length;
            var n2 = u.allocUnsafe(t2), i2 = 0;
            for (r2 = 0; r2 < e3.length; ++r2) {
              var a2 = e3[r2];
              if (!u.isBuffer(a2))
                throw new TypeError('"list" argument must be an Array of Buffers');
              a2.copy(n2, i2), i2 += a2.length;
            }
            return n2;
          }, u.byteLength = d, u.prototype._isBuffer = true, u.prototype.swap16 = function() {
            var e3 = this.length;
            if (e3 % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t2 = 0; t2 < e3; t2 += 2)
              y(this, t2, t2 + 1);
            return this;
          }, u.prototype.swap32 = function() {
            var e3 = this.length;
            if (e3 % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t2 = 0; t2 < e3; t2 += 4)
              y(this, t2, t2 + 3), y(this, t2 + 1, t2 + 2);
            return this;
          }, u.prototype.swap64 = function() {
            var e3 = this.length;
            if (e3 % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t2 = 0; t2 < e3; t2 += 8)
              y(this, t2, t2 + 7), y(this, t2 + 1, t2 + 6), y(this, t2 + 2, t2 + 5), y(this, t2 + 3, t2 + 4);
            return this;
          }, u.prototype.toString = function() {
            var e3 = 0 | this.length;
            return e3 === 0 ? "" : arguments.length === 0 ? C(this, 0, e3) : m.apply(this, arguments);
          }, u.prototype.equals = function(e3) {
            if (!u.isBuffer(e3))
              throw new TypeError("Argument must be a Buffer");
            return this === e3 || u.compare(this, e3) === 0;
          }, u.prototype.inspect = function() {
            var e3 = "", r2 = t.INSPECT_MAX_BYTES;
            return this.length > 0 && (e3 = this.toString("hex", 0, r2).match(/.{2}/g).join(" "), this.length > r2 && (e3 += " ... ")), "<Buffer " + e3 + ">";
          }, u.prototype.compare = function(e3, t2, r2, n2, i2) {
            if (!u.isBuffer(e3))
              throw new TypeError("Argument must be a Buffer");
            if (t2 === void 0 && (t2 = 0), r2 === void 0 && (r2 = e3 ? e3.length : 0), n2 === void 0 && (n2 = 0), i2 === void 0 && (i2 = this.length), t2 < 0 || r2 > e3.length || n2 < 0 || i2 > this.length)
              throw new RangeError("out of range index");
            if (n2 >= i2 && t2 >= r2)
              return 0;
            if (n2 >= i2)
              return -1;
            if (t2 >= r2)
              return 1;
            if (this === e3)
              return 0;
            for (var o2 = (i2 >>>= 0) - (n2 >>>= 0), a2 = (r2 >>>= 0) - (t2 >>>= 0), s2 = Math.min(o2, a2), l2 = this.slice(n2, i2), c2 = e3.slice(t2, r2), h2 = 0; h2 < s2; ++h2)
              if (l2[h2] !== c2[h2]) {
                o2 = l2[h2], a2 = c2[h2];
                break;
              }
            return o2 < a2 ? -1 : a2 < o2 ? 1 : 0;
          }, u.prototype.includes = function(e3, t2, r2) {
            return this.indexOf(e3, t2, r2) !== -1;
          }, u.prototype.indexOf = function(e3, t2, r2) {
            return v(this, e3, t2, r2, true);
          }, u.prototype.lastIndexOf = function(e3, t2, r2) {
            return v(this, e3, t2, r2, false);
          }, u.prototype.write = function(e3, t2, r2, n2) {
            if (t2 === void 0)
              n2 = "utf8", r2 = this.length, t2 = 0;
            else if (r2 === void 0 && typeof t2 == "string")
              n2 = t2, r2 = this.length, t2 = 0;
            else {
              if (!isFinite(t2))
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t2 |= 0, isFinite(r2) ? (r2 |= 0, n2 === void 0 && (n2 = "utf8")) : (n2 = r2, r2 = void 0);
            }
            var i2 = this.length - t2;
            if ((r2 === void 0 || r2 > i2) && (r2 = i2), e3.length > 0 && (r2 < 0 || t2 < 0) || t2 > this.length)
              throw new RangeError("Attempt to write outside buffer bounds");
            n2 || (n2 = "utf8");
            for (var o2 = false; ; )
              switch (n2) {
                case "hex":
                  return g(this, e3, t2, r2);
                case "utf8":
                case "utf-8":
                  return b(this, e3, t2, r2);
                case "ascii":
                  return x(this, e3, t2, r2);
                case "latin1":
                case "binary":
                  return w(this, e3, t2, r2);
                case "base64":
                  return E(this, e3, t2, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return D(this, e3, t2, r2);
                default:
                  if (o2)
                    throw new TypeError("Unknown encoding: " + n2);
                  n2 = ("" + n2).toLowerCase(), o2 = true;
              }
          }, u.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          };
          function A(e3, t2, r2) {
            var n2 = "";
            r2 = Math.min(e3.length, r2);
            for (var i2 = t2; i2 < r2; ++i2)
              n2 += String.fromCharCode(127 & e3[i2]);
            return n2;
          }
          function N(e3, t2, r2) {
            var n2 = "";
            r2 = Math.min(e3.length, r2);
            for (var i2 = t2; i2 < r2; ++i2)
              n2 += String.fromCharCode(e3[i2]);
            return n2;
          }
          function T(e3, t2, r2) {
            var n2 = e3.length;
            (!t2 || t2 < 0) && (t2 = 0), (!r2 || r2 < 0 || r2 > n2) && (r2 = n2);
            for (var i2 = "", o2 = t2; o2 < r2; ++o2)
              i2 += R(e3[o2]);
            return i2;
          }
          function O(e3, t2, r2) {
            for (var n2 = e3.slice(t2, r2), i2 = "", o2 = 0; o2 < n2.length; o2 += 2)
              i2 += String.fromCharCode(n2[o2] + 256 * n2[o2 + 1]);
            return i2;
          }
          function F(e3, t2, r2) {
            if (e3 % 1 != 0 || e3 < 0)
              throw new RangeError("offset is not uint");
            if (e3 + t2 > r2)
              throw new RangeError("Trying to access beyond buffer length");
          }
          function k(e3, t2, r2, n2, i2, o2) {
            if (!u.isBuffer(e3))
              throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t2 > i2 || t2 < o2)
              throw new RangeError('"value" argument is out of bounds');
            if (r2 + n2 > e3.length)
              throw new RangeError("Index out of range");
          }
          function P(e3, t2, r2, n2) {
            t2 < 0 && (t2 = 65535 + t2 + 1);
            for (var i2 = 0, o2 = Math.min(e3.length - r2, 2); i2 < o2; ++i2)
              e3[r2 + i2] = (t2 & 255 << 8 * (n2 ? i2 : 1 - i2)) >>> 8 * (n2 ? i2 : 1 - i2);
          }
          function I(e3, t2, r2, n2) {
            t2 < 0 && (t2 = 4294967295 + t2 + 1);
            for (var i2 = 0, o2 = Math.min(e3.length - r2, 4); i2 < o2; ++i2)
              e3[r2 + i2] = t2 >>> 8 * (n2 ? i2 : 3 - i2) & 255;
          }
          function L(e3, t2, r2, n2, i2, o2) {
            if (r2 + n2 > e3.length)
              throw new RangeError("Index out of range");
            if (r2 < 0)
              throw new RangeError("Index out of range");
          }
          function M(e3, t2, r2, n2, o2) {
            return o2 || L(e3, 0, r2, 4), i.write(e3, t2, r2, n2, 23, 4), r2 + 4;
          }
          function B(e3, t2, r2, n2, o2) {
            return o2 || L(e3, 0, r2, 8), i.write(e3, t2, r2, n2, 52, 8), r2 + 8;
          }
          u.prototype.slice = function(e3, t2) {
            var r2, n2 = this.length;
            if ((e3 = ~~e3) < 0 ? (e3 += n2) < 0 && (e3 = 0) : e3 > n2 && (e3 = n2), (t2 = t2 === void 0 ? n2 : ~~t2) < 0 ? (t2 += n2) < 0 && (t2 = 0) : t2 > n2 && (t2 = n2), t2 < e3 && (t2 = e3), u.TYPED_ARRAY_SUPPORT)
              (r2 = this.subarray(e3, t2)).__proto__ = u.prototype;
            else {
              var i2 = t2 - e3;
              r2 = new u(i2, void 0);
              for (var o2 = 0; o2 < i2; ++o2)
                r2[o2] = this[o2 + e3];
            }
            return r2;
          }, u.prototype.readUIntLE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t2 && (i2 *= 256); )
              n2 += this[e3 + o2] * i2;
            return n2;
          }, u.prototype.readUIntBE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = this[e3 + --t2], i2 = 1; t2 > 0 && (i2 *= 256); )
              n2 += this[e3 + --t2] * i2;
            return n2;
          }, u.prototype.readUInt8 = function(e3, t2) {
            return t2 || F(e3, 1, this.length), this[e3];
          }, u.prototype.readUInt16LE = function(e3, t2) {
            return t2 || F(e3, 2, this.length), this[e3] | this[e3 + 1] << 8;
          }, u.prototype.readUInt16BE = function(e3, t2) {
            return t2 || F(e3, 2, this.length), this[e3] << 8 | this[e3 + 1];
          }, u.prototype.readUInt32LE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), (this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16) + 16777216 * this[e3 + 3];
          }, u.prototype.readUInt32BE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), 16777216 * this[e3] + (this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3]);
          }, u.prototype.readIntLE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t2 && (i2 *= 256); )
              n2 += this[e3 + o2] * i2;
            return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * t2)), n2;
          }, u.prototype.readIntBE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = t2, i2 = 1, o2 = this[e3 + --n2]; n2 > 0 && (i2 *= 256); )
              o2 += this[e3 + --n2] * i2;
            return o2 >= (i2 *= 128) && (o2 -= Math.pow(2, 8 * t2)), o2;
          }, u.prototype.readInt8 = function(e3, t2) {
            return t2 || F(e3, 1, this.length), 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
          }, u.prototype.readInt16LE = function(e3, t2) {
            t2 || F(e3, 2, this.length);
            var r2 = this[e3] | this[e3 + 1] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u.prototype.readInt16BE = function(e3, t2) {
            t2 || F(e3, 2, this.length);
            var r2 = this[e3 + 1] | this[e3] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u.prototype.readInt32LE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16 | this[e3 + 3] << 24;
          }, u.prototype.readInt32BE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), this[e3] << 24 | this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3];
          }, u.prototype.readFloatLE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), i.read(this, e3, true, 23, 4);
          }, u.prototype.readFloatBE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), i.read(this, e3, false, 23, 4);
          }, u.prototype.readDoubleLE = function(e3, t2) {
            return t2 || F(e3, 8, this.length), i.read(this, e3, true, 52, 8);
          }, u.prototype.readDoubleBE = function(e3, t2) {
            return t2 || F(e3, 8, this.length), i.read(this, e3, false, 52, 8);
          }, u.prototype.writeUIntLE = function(e3, t2, r2, n2) {
            (e3 = +e3, t2 |= 0, r2 |= 0, n2) || k(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i2 = 1, o2 = 0;
            for (this[t2] = 255 & e3; ++o2 < r2 && (i2 *= 256); )
              this[t2 + o2] = e3 / i2 & 255;
            return t2 + r2;
          }, u.prototype.writeUIntBE = function(e3, t2, r2, n2) {
            (e3 = +e3, t2 |= 0, r2 |= 0, n2) || k(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i2 = r2 - 1, o2 = 1;
            for (this[t2 + i2] = 255 & e3; --i2 >= 0 && (o2 *= 256); )
              this[t2 + i2] = e3 / o2 & 255;
            return t2 + r2;
          }, u.prototype.writeUInt8 = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), this[t2] = 255 & e3, t2 + 1;
          }, u.prototype.writeUInt16LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8) : P(this, e3, t2, true), t2 + 2;
          }, u.prototype.writeUInt16BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3) : P(this, e3, t2, false), t2 + 2;
          }, u.prototype.writeUInt32LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2 + 3] = e3 >>> 24, this[t2 + 2] = e3 >>> 16, this[t2 + 1] = e3 >>> 8, this[t2] = 255 & e3) : I(this, e3, t2, true), t2 + 4;
          }, u.prototype.writeUInt32BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3) : I(this, e3, t2, false), t2 + 4;
          }, u.prototype.writeIntLE = function(e3, t2, r2, n2) {
            if (e3 = +e3, t2 |= 0, !n2) {
              var i2 = Math.pow(2, 8 * r2 - 1);
              k(this, e3, t2, r2, i2 - 1, -i2);
            }
            var o2 = 0, a2 = 1, s2 = 0;
            for (this[t2] = 255 & e3; ++o2 < r2 && (a2 *= 256); )
              e3 < 0 && s2 === 0 && this[t2 + o2 - 1] !== 0 && (s2 = 1), this[t2 + o2] = (e3 / a2 >> 0) - s2 & 255;
            return t2 + r2;
          }, u.prototype.writeIntBE = function(e3, t2, r2, n2) {
            if (e3 = +e3, t2 |= 0, !n2) {
              var i2 = Math.pow(2, 8 * r2 - 1);
              k(this, e3, t2, r2, i2 - 1, -i2);
            }
            var o2 = r2 - 1, a2 = 1, s2 = 0;
            for (this[t2 + o2] = 255 & e3; --o2 >= 0 && (a2 *= 256); )
              e3 < 0 && s2 === 0 && this[t2 + o2 + 1] !== 0 && (s2 = 1), this[t2 + o2] = (e3 / a2 >> 0) - s2 & 255;
            return t2 + r2;
          }, u.prototype.writeInt8 = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), e3 < 0 && (e3 = 255 + e3 + 1), this[t2] = 255 & e3, t2 + 1;
          }, u.prototype.writeInt16LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8) : P(this, e3, t2, true), t2 + 2;
          }, u.prototype.writeInt16BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3) : P(this, e3, t2, false), t2 + 2;
          }, u.prototype.writeInt32LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8, this[t2 + 2] = e3 >>> 16, this[t2 + 3] = e3 >>> 24) : I(this, e3, t2, true), t2 + 4;
          }, u.prototype.writeInt32BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 2147483647, -2147483648), e3 < 0 && (e3 = 4294967295 + e3 + 1), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3) : I(this, e3, t2, false), t2 + 4;
          }, u.prototype.writeFloatLE = function(e3, t2, r2) {
            return M(this, e3, t2, true, r2);
          }, u.prototype.writeFloatBE = function(e3, t2, r2) {
            return M(this, e3, t2, false, r2);
          }, u.prototype.writeDoubleLE = function(e3, t2, r2) {
            return B(this, e3, t2, true, r2);
          }, u.prototype.writeDoubleBE = function(e3, t2, r2) {
            return B(this, e3, t2, false, r2);
          }, u.prototype.copy = function(e3, t2, r2, n2) {
            if (r2 || (r2 = 0), n2 || n2 === 0 || (n2 = this.length), t2 >= e3.length && (t2 = e3.length), t2 || (t2 = 0), n2 > 0 && n2 < r2 && (n2 = r2), n2 === r2)
              return 0;
            if (e3.length === 0 || this.length === 0)
              return 0;
            if (t2 < 0)
              throw new RangeError("targetStart out of bounds");
            if (r2 < 0 || r2 >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (n2 < 0)
              throw new RangeError("sourceEnd out of bounds");
            n2 > this.length && (n2 = this.length), e3.length - t2 < n2 - r2 && (n2 = e3.length - t2 + r2);
            var i2, o2 = n2 - r2;
            if (this === e3 && r2 < t2 && t2 < n2)
              for (i2 = o2 - 1; i2 >= 0; --i2)
                e3[i2 + t2] = this[i2 + r2];
            else if (o2 < 1e3 || !u.TYPED_ARRAY_SUPPORT)
              for (i2 = 0; i2 < o2; ++i2)
                e3[i2 + t2] = this[i2 + r2];
            else
              Uint8Array.prototype.set.call(e3, this.subarray(r2, r2 + o2), t2);
            return o2;
          }, u.prototype.fill = function(e3, t2, r2, n2) {
            if (typeof e3 == "string") {
              if (typeof t2 == "string" ? (n2 = t2, t2 = 0, r2 = this.length) : typeof r2 == "string" && (n2 = r2, r2 = this.length), e3.length === 1) {
                var i2 = e3.charCodeAt(0);
                i2 < 256 && (e3 = i2);
              }
              if (n2 !== void 0 && typeof n2 != "string")
                throw new TypeError("encoding must be a string");
              if (typeof n2 == "string" && !u.isEncoding(n2))
                throw new TypeError("Unknown encoding: " + n2);
            } else
              typeof e3 == "number" && (e3 &= 255);
            if (t2 < 0 || this.length < t2 || this.length < r2)
              throw new RangeError("Out of range index");
            if (r2 <= t2)
              return this;
            var o2;
            if (t2 >>>= 0, r2 = r2 === void 0 ? this.length : r2 >>> 0, e3 || (e3 = 0), typeof e3 == "number")
              for (o2 = t2; o2 < r2; ++o2)
                this[o2] = e3;
            else {
              var a2 = u.isBuffer(e3) ? e3 : z(new u(e3, n2).toString()), s2 = a2.length;
              for (o2 = 0; o2 < r2 - t2; ++o2)
                this[o2 + t2] = a2[o2 % s2];
            }
            return this;
          };
          var j = /[^+\/0-9A-Za-z-_]/g;
          function R(e3) {
            return e3 < 16 ? "0" + e3.toString(16) : e3.toString(16);
          }
          function z(e3, t2) {
            var r2;
            t2 = t2 || 1 / 0;
            for (var n2 = e3.length, i2 = null, o2 = [], a2 = 0; a2 < n2; ++a2) {
              if ((r2 = e3.charCodeAt(a2)) > 55295 && r2 < 57344) {
                if (!i2) {
                  if (r2 > 56319) {
                    (t2 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  if (a2 + 1 === n2) {
                    (t2 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  i2 = r2;
                  continue;
                }
                if (r2 < 56320) {
                  (t2 -= 3) > -1 && o2.push(239, 191, 189), i2 = r2;
                  continue;
                }
                r2 = 65536 + (i2 - 55296 << 10 | r2 - 56320);
              } else
                i2 && (t2 -= 3) > -1 && o2.push(239, 191, 189);
              if (i2 = null, r2 < 128) {
                if ((t2 -= 1) < 0)
                  break;
                o2.push(r2);
              } else if (r2 < 2048) {
                if ((t2 -= 2) < 0)
                  break;
                o2.push(r2 >> 6 | 192, 63 & r2 | 128);
              } else if (r2 < 65536) {
                if ((t2 -= 3) < 0)
                  break;
                o2.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              } else {
                if (!(r2 < 1114112))
                  throw new Error("Invalid code point");
                if ((t2 -= 4) < 0)
                  break;
                o2.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              }
            }
            return o2;
          }
          function U(e3) {
            return n.toByteArray(function(e4) {
              if ((e4 = function(e5) {
                return e5.trim ? e5.trim() : e5.replace(/^\s+|\s+$/g, "");
              }(e4).replace(j, "")).length < 2)
                return "";
              for (; e4.length % 4 != 0; )
                e4 += "=";
              return e4;
            }(e3));
          }
          function G(e3, t2, r2, n2) {
            for (var i2 = 0; i2 < n2 && !(i2 + r2 >= t2.length || i2 >= e3.length); ++i2)
              t2[i2 + r2] = e3[i2];
            return i2;
          }
        }).call(this, r(78));
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.isASCIIByte = function(e2) {
          return e2 >= 0 && e2 <= 127;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o = r2.call(e2), a = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o.next()).done; )
              a.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o.return) && r2.call(o);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a;
        }, i = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(n(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true }), t.length = function(e2) {
          return e2.length;
        }, t.byteLowercase = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2[t2];
            r2 >= 65 && r2 <= 90 && (e2[t2] = r2 + 32);
          }
        }, t.byteUppercase = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2[t2];
            r2 >= 97 && r2 <= 122 && (e2[t2] = r2 - 32);
          }
        }, t.byteCaseInsensitiveMatch = function(e2, t2) {
          if (e2.length !== t2.length)
            return false;
          for (var r2 = 0; r2 < e2.length; r2++) {
            var n2 = e2[r2], i2 = t2[r2];
            if (n2 >= 65 && n2 <= 90 && (n2 += 32), i2 >= 65 && i2 <= 90 && (i2 += 32), n2 !== i2)
              return false;
          }
          return true;
        }, t.startsWith = function(e2, t2) {
          for (var r2 = 0; ; ) {
            if (r2 >= e2.length)
              return false;
            if (r2 >= t2.length)
              return true;
            if (e2[r2] !== t2[r2])
              return false;
            r2++;
          }
        }, t.byteLessThan = function(e2, t2) {
          for (var r2 = 0; ; ) {
            if (r2 >= e2.length)
              return false;
            if (r2 >= t2.length)
              return true;
            var n2 = e2[r2], i2 = t2[r2];
            if (n2 < i2)
              return true;
            if (n2 > i2)
              return false;
            r2++;
          }
        }, t.isomorphicDecode = function(e2) {
          return String.fromCodePoint.apply(String, i(e2));
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(6), i = r(7), o = r(0), a = r(12), s = function() {
          function e2(e3) {
            this._associatedDocument = e3 || n.dom.window.document;
          }
          return e2.prototype.createDocumentType = function(e3, t2, r2) {
            return o.namespace_validate(e3), o.create_documentType(this._associatedDocument, e3, t2, r2);
          }, e2.prototype.createDocument = function(e3, t2, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = o.create_xmlDocument(), a2 = null;
            return t2 && (a2 = o.document_internalCreateElementNS(n2, e3, t2)), r2 && n2.appendChild(r2), a2 && n2.appendChild(a2), n2._origin = this._associatedDocument._origin, e3 === i.namespace.HTML ? n2._contentType = "application/xhtml+xml" : e3 === i.namespace.SVG ? n2._contentType = "image/svg+xml" : n2._contentType = "application/xml", n2;
          }, e2.prototype.createHTMLDocument = function(e3) {
            var t2 = o.create_document();
            t2._type = "html", t2._contentType = "text/html", t2.appendChild(o.create_documentType(t2, "html", "", ""));
            var r2 = o.element_createAnElement(t2, "html", i.namespace.HTML);
            t2.appendChild(r2);
            var n2 = o.element_createAnElement(t2, "head", i.namespace.HTML);
            if (r2.appendChild(n2), e3 !== void 0) {
              var a2 = o.element_createAnElement(t2, "title", i.namespace.HTML);
              n2.appendChild(a2);
              var s2 = o.create_text(t2, e3);
              a2.appendChild(s2);
            }
            var u = o.element_createAnElement(t2, "body", i.namespace.HTML);
            return r2.appendChild(u), t2._origin = this._associatedDocument._origin, t2;
          }, e2.prototype.hasFeature = function() {
            return true;
          }, e2._create = function(t2) {
            return new e2(t2);
          }, e2;
        }();
        t.DOMImplementationImpl = s, a.idl_defineConst(s.prototype, "_ID", "@oozcitak/dom");
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(70), a = r(1), s = r(0), u = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._signalSlots = new Set(), t3._mutationObserverMicrotaskQueued = false, t3._mutationObservers = new Set(), t3._iteratorList = new a.FixedSizeSet(), t3._associatedDocument = s.create_document(), t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "document", { get: function() {
            return this._associatedDocument;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "event", { get: function() {
            return this._currentEvent;
          }, enumerable: true, configurable: true }), t2._create = function() {
            return new t2();
          }, t2;
        }(o.EventTargetImpl);
        t.WindowImpl = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = function() {
          function e2() {
          }
          return e2.isNode = function(e3) {
            return !!e3 && e3._nodeType !== void 0;
          }, e2.isDocumentNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Document;
          }, e2.isDocumentTypeNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.DocumentType;
          }, e2.isDocumentFragmentNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.DocumentFragment;
          }, e2.isAttrNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Attribute;
          }, e2.isCharacterDataNode = function(t2) {
            if (!e2.isNode(t2))
              return false;
            var r2 = t2._nodeType;
            return r2 === n.NodeType.Text || r2 === n.NodeType.ProcessingInstruction || r2 === n.NodeType.Comment || r2 === n.NodeType.CData;
          }, e2.isTextNode = function(t2) {
            return e2.isNode(t2) && (t2._nodeType === n.NodeType.Text || t2._nodeType === n.NodeType.CData);
          }, e2.isExclusiveTextNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Text;
          }, e2.isCDATASectionNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.CData;
          }, e2.isCommentNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Comment;
          }, e2.isProcessingInstructionNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.ProcessingInstruction;
          }, e2.isElementNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Element;
          }, e2.isCustomElementNode = function(t2) {
            return e2.isElementNode(t2) && t2._customElementState === "custom";
          }, e2.isShadowRoot = function(e3) {
            return !!e3 && e3.host !== void 0;
          }, e2.isMouseEvent = function(e3) {
            return !!e3 && e3.screenX !== void 0 && e3.screenY != null;
          }, e2.isSlotable = function(t2) {
            return !!t2 && t2._name !== void 0 && t2._assignedSlot !== void 0 && (e2.isTextNode(t2) || e2.isElementNode(t2));
          }, e2.isSlot = function(t2) {
            return !!t2 && t2._name !== void 0 && t2._assignedNodes !== void 0 && e2.isElementNode(t2);
          }, e2.isWindow = function(e3) {
            return !!e3 && e3.navigator !== void 0;
          }, e2.isEventListener = function(e3) {
            return !!e3 && e3.handleEvent !== void 0;
          }, e2.isRegisteredObserver = function(e3) {
            return !!e3 && e3.observer !== void 0 && e3.options !== void 0;
          }, e2.isTransientRegisteredObserver = function(t2) {
            return !!t2 && t2.source !== void 0 && e2.isRegisteredObserver(t2);
          }, e2;
        }();
        t.Guard = i;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2() {
            return e2.call(this) || this;
          }
          return i(t2, e2), t2;
        }(r(98).DocumentImpl);
        t.XMLDocumentImpl = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o, a = r(1), s = r(243), u = r(7), l = r(244), c = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, h = /[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, p = /[ "<>`]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, f = /[ "<>`#?{}]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, d = /[ "<>`#?{}/:;=@\[\]\\\^\|]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, m = /[0-9A-Za-z!\$&-\/:;=\?@_~\xA0-\uD7FF\uE000-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDC00-\uDFFD]/, y = /[\0\t\f\r #%/:?@\[\\\]]/;
        function v(e2) {
          o !== void 0 && o.call(null, "Validation Error: " + e2);
        }
        function _() {
          return { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
        }
        function g(e2) {
          return e2 in c;
        }
        function b(e2) {
          return g(e2.scheme);
        }
        function x(e2) {
          return c[e2] || null;
        }
        function w(e2) {
          return e2.username !== "" || e2.password !== "";
        }
        function E(e2, t2) {
          var r2, i2;
          t2 === void 0 && (t2 = false);
          var o2 = e2.scheme + ":";
          if (e2.host !== null ? (o2 += "//", w(e2) && (o2 += e2.username, e2.password !== "" && (o2 += ":" + e2.password), o2 += "@"), o2 += D(e2.host), e2.port !== null && (o2 += ":" + e2.port)) : e2.host === null && e2.scheme === "file" && (o2 += "//"), e2._cannotBeABaseURLFlag)
            o2 += e2.path[0];
          else
            try {
              for (var a2 = n(e2.path), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                o2 += "/" + s2.value;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          return e2.query !== null && (o2 += "?" + e2.query), t2 || e2.fragment === null || (o2 += "#" + e2.fragment), o2;
        }
        function D(e2) {
          return a.isNumber(e2) ? S(e2) : a.isArray(e2) ? "[" + C(e2) + "]" : e2;
        }
        function S(e2) {
          for (var t2 = "", r2 = e2, n2 = 1; n2 <= 4; n2++)
            t2 = (r2 % 256).toString() + t2, n2 !== 4 && (t2 = "." + t2), r2 = Math.floor(r2 / 256);
          return t2;
        }
        function C(e2) {
          for (var t2 = "", r2 = null, n2 = -1, i2 = 0, o2 = 0, a2 = 0; a2 < 8; a2++)
            if (e2[a2] === 0) {
              i2 = 1;
              for (var s2 = a2 + 1; s2 < 8 && e2[s2] === 0; s2++)
                i2++;
              i2 > o2 && (o2 = i2, n2 = a2);
            }
          o2 > 1 && (r2 = n2);
          for (var u2 = false, l2 = 0; l2 < 8; l2++)
            u2 && e2[l2] === 0 || (u2 && (u2 = false), r2 !== l2 ? (t2 += e2[l2].toString(16), l2 !== 7 && (t2 += ":")) : (t2 += l2 === 0 ? "::" : ":", u2 = true));
          return t2;
        }
        function A(e2, t2, r2, i2, o2) {
          var l2, c2, y2, _2;
          if (i2 === void 0) {
            i2 = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
            var E2 = /^[\u0000-\u001F\u0020]+/, D2 = /[\u0000-\u001F\u0020]+$/;
            (E2.test(e2) || D2.test(e2)) && v("Input string contains leading or trailing control characters or space."), e2 = (e2 = e2.replace(E2, "")).replace(D2, "");
          }
          var S2 = /[\u0009\u000A\u000D]/g;
          S2.test(e2) && v("Input string contains tab or newline characters."), e2 = e2.replace(S2, "");
          var C2 = o2 === void 0 ? s.ParserState.SchemeStart : o2;
          t2 === void 0 && (t2 = null);
          for (var A2 = r2 === void 0 || r2 === "replacement" || r2 === "UTF-16BE" || r2 === "UTF-16LE" ? "UTF-8" : r2, L2 = "", M2 = false, B2 = false, j2 = false, R2 = new a.StringWalker(e2); ; ) {
            switch (C2) {
              case s.ParserState.SchemeStart:
                if (u.codePoint.ASCIIAlpha.test(R2.c()))
                  L2 += R2.c().toLowerCase(), C2 = s.ParserState.Scheme;
                else {
                  if (o2 !== void 0)
                    return v("Invalid scheme start character."), null;
                  C2 = s.ParserState.NoScheme, R2.pointer--;
                }
                break;
              case s.ParserState.Scheme:
                if (u.codePoint.ASCIIAlphanumeric.test(R2.c()) || R2.c() === "+" || R2.c() === "-" || R2.c() === ".")
                  L2 += R2.c().toLowerCase();
                else {
                  if (R2.c() !== ":") {
                    if (o2 === void 0) {
                      L2 = "", C2 = s.ParserState.NoScheme, R2.pointer = 0;
                      continue;
                    }
                    return v("Invalid input string."), null;
                  }
                  if (o2 !== void 0) {
                    if (g(i2.scheme) && !g(L2))
                      return i2;
                    if (!g(i2.scheme) && g(L2))
                      return i2;
                    if ((w(i2) || i2.port !== null) && L2 === "file")
                      return i2;
                    if (i2.scheme === "file" && (i2.host === "" || i2.host === null))
                      return i2;
                  }
                  if (i2.scheme = L2, o2 !== void 0)
                    return i2.port === x(i2.scheme) && (i2.port = null), i2;
                  L2 = "", i2.scheme === "file" ? (R2.remaining().startsWith("//") || v("Invalid file URL scheme, '//' expected."), C2 = s.ParserState.File) : b(i2) && t2 !== null && t2.scheme === i2.scheme ? C2 = s.ParserState.SpecialRelativeOrAuthority : b(i2) ? C2 = s.ParserState.SpecialAuthoritySlashes : R2.remaining().startsWith("/") ? (C2 = s.ParserState.PathOrAuthority, R2.pointer++) : (i2._cannotBeABaseURLFlag = true, i2.path.push(""), C2 = s.ParserState.CannotBeABaseURLPath);
                }
                break;
              case s.ParserState.NoScheme:
                if (t2 === null || t2._cannotBeABaseURLFlag && R2.c() !== "#")
                  return v("Invalid input string."), null;
                t2._cannotBeABaseURLFlag && R2.c() === "#" ? (i2.scheme = t2.scheme, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", i2._cannotBeABaseURLFlag = true, C2 = s.ParserState.Fragment) : t2.scheme !== "file" ? (C2 = s.ParserState.Relative, R2.pointer--) : (C2 = s.ParserState.File, R2.pointer--);
                break;
              case s.ParserState.SpecialRelativeOrAuthority:
                R2.c() === "/" && R2.remaining().startsWith("/") ? (C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer++) : (v("Invalid input string."), C2 = s.ParserState.Relative, R2.pointer--);
                break;
              case s.ParserState.PathOrAuthority:
                R2.c() === "/" ? C2 = s.ParserState.Authority : (C2 = s.ParserState.Path, R2.pointer--);
                break;
              case s.ParserState.Relative:
                if (t2 === null)
                  throw new Error("Invalid parser state. Base URL is null.");
                switch (i2.scheme = t2.scheme, R2.c()) {
                  case "":
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = t2.query;
                    break;
                  case "/":
                    C2 = s.ParserState.RelativeSlash;
                    break;
                  case "?":
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = "", C2 = s.ParserState.Query;
                    break;
                  case "#":
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", C2 = s.ParserState.Fragment;
                    break;
                  default:
                    b(i2) && R2.c() === "\\" ? (v("Invalid input string."), C2 = s.ParserState.RelativeSlash) : (i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.path.length !== 0 && i2.path.splice(i2.path.length - 1, 1), C2 = s.ParserState.Path, R2.pointer--);
                }
                break;
              case s.ParserState.RelativeSlash:
                if (!b(i2) || R2.c() !== "/" && R2.c() !== "\\")
                  if (R2.c() === "/")
                    C2 = s.ParserState.Authority;
                  else {
                    if (t2 === null)
                      throw new Error("Invalid parser state. Base URL is null.");
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, C2 = s.ParserState.Path, R2.pointer--;
                  }
                else
                  R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.SpecialAuthorityIgnoreSlashes;
                break;
              case s.ParserState.SpecialAuthoritySlashes:
                R2.c() === "/" && R2.remaining().startsWith("/") ? (C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer++) : (v("Expected '//'."), C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer--);
                break;
              case s.ParserState.SpecialAuthorityIgnoreSlashes:
                R2.c() !== "/" && R2.c() !== "\\" ? (C2 = s.ParserState.Authority, R2.pointer--) : v("Unexpected '/' or '\\'.");
                break;
              case s.ParserState.Authority:
                if (R2.c() === "@") {
                  v("Unexpected '@'."), M2 && (L2 = "%40" + L2), M2 = true;
                  try {
                    for (var U2 = (l2 = void 0, n(L2)), G2 = U2.next(); !G2.done; G2 = U2.next()) {
                      var q2 = G2.value;
                      if (q2 !== ":" || j2) {
                        var W2 = X(q2, d);
                        j2 ? i2.password += W2 : i2.username += W2;
                      } else
                        j2 = true;
                    }
                  } catch (e3) {
                    l2 = { error: e3 };
                  } finally {
                    try {
                      G2 && !G2.done && (c2 = U2.return) && c2.call(U2);
                    } finally {
                      if (l2)
                        throw l2.error;
                    }
                  }
                  L2 = "";
                } else if (R2.c() === "" || R2.c() === "/" || R2.c() === "?" || R2.c() === "#" || b(i2) && R2.c() === "\\") {
                  if (M2 && L2 === "")
                    return v("Invalid input string."), null;
                  R2.pointer -= L2.length + 1, L2 = "", C2 = s.ParserState.Host;
                } else
                  L2 += R2.c();
                break;
              case s.ParserState.Host:
              case s.ParserState.Hostname:
                if (o2 !== void 0 && i2.scheme === "file")
                  R2.pointer--, C2 = s.ParserState.FileHost;
                else if (R2.c() !== ":" || B2)
                  if (R2.c() === "" || R2.c() === "/" || R2.c() === "?" || R2.c() === "#" || b(i2) && R2.c() === "\\") {
                    if (R2.pointer--, b(i2) && L2 === "")
                      return v("Invalid input string."), null;
                    if (o2 !== void 0 && L2 === "" && (w(i2) || i2.port !== null))
                      return v("Invalid input string."), i2;
                    if ((J = I(L2, !b(i2))) === null)
                      return null;
                    if (i2.host = J, L2 = "", C2 = s.ParserState.PathStart, o2 !== void 0)
                      return i2;
                  } else
                    R2.c() === "[" && (B2 = true), R2.c() === "]" && (B2 = false), L2 += R2.c();
                else {
                  if (L2 === "")
                    return v("Invalid input string."), null;
                  if ((J = I(L2, !b(i2))) === null)
                    return null;
                  if (i2.host = J, L2 = "", C2 = s.ParserState.Port, o2 === s.ParserState.Hostname)
                    return i2;
                }
                break;
              case s.ParserState.Port:
                if (u.codePoint.ASCIIDigit.test(R2.c()))
                  L2 += R2.c();
                else {
                  if (!(R2.c() === "" || R2.c() === "/" || R2.c() === "?" || R2.c() === "#" || b(i2) && R2.c() === "\\" || o2))
                    return v("Invalid input string."), null;
                  if (L2 !== "" && L2 !== "") {
                    var H2 = parseInt(L2, 10);
                    if (H2 > Math.pow(2, 16) - 1)
                      return v("Invalid port number."), null;
                    i2.port = H2 === x(i2.scheme) ? null : H2, L2 = "";
                  }
                  if (o2 !== void 0)
                    return i2;
                  C2 = s.ParserState.PathStart, R2.pointer--;
                }
                break;
              case s.ParserState.File:
                if (i2.scheme = "file", R2.c() === "/" || R2.c() === "\\")
                  R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.FileSlash;
                else if (t2 !== null && t2.scheme === "file")
                  switch (R2.c()) {
                    case "":
                      i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = t2.query;
                      break;
                    case "?":
                      i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = "", C2 = s.ParserState.Query;
                      break;
                    case "#":
                      i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", C2 = s.ParserState.Fragment;
                      break;
                    default:
                      P(R2.substring()) ? v("Unexpected windows drive letter in input string.") : (i2.host = t2.host, i2.path = u.list.clone(t2.path), O(i2)), C2 = s.ParserState.Path, R2.pointer--;
                  }
                else
                  C2 = s.ParserState.Path, R2.pointer--;
                break;
              case s.ParserState.FileSlash:
                R2.c() === "/" || R2.c() === "\\" ? (R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.FileHost) : (t2 === null || t2.scheme !== "file" || P(R2.substring()) || (F(t2.path[0]) ? i2.path.push(t2.path[0]) : i2.host = t2.host), C2 = s.ParserState.Path, R2.pointer--);
                break;
              case s.ParserState.FileHost:
                if (R2.c() === "" || R2.c() === "/" || R2.c() === "\\" || R2.c() === "?" || R2.c() === "#")
                  if (R2.pointer--, o2 === void 0 && k(L2))
                    v("Unexpected windows drive letter in input string."), C2 = s.ParserState.Path;
                  else if (L2 === "") {
                    if (i2.host = "", o2 !== void 0)
                      return i2;
                    C2 = s.ParserState.PathStart;
                  } else {
                    var J;
                    if ((J = I(L2, !b(i2))) === null)
                      return null;
                    if (J === "localhost" && (J = ""), i2.host = J, o2 !== void 0)
                      return i2;
                    L2 = "", C2 = s.ParserState.PathStart;
                  }
                else
                  L2 += R2.c();
                break;
              case s.ParserState.PathStart:
                b(i2) ? (R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.Path, R2.c() !== "/" && R2.c() !== "\\" && R2.pointer--) : o2 === void 0 && R2.c() === "?" ? (i2.query = "", C2 = s.ParserState.Query) : o2 === void 0 && R2.c() === "#" ? (i2.fragment = "", C2 = s.ParserState.Fragment) : R2.c() !== "" && (C2 = s.ParserState.Path, R2.c() !== "/" && R2.pointer--);
                break;
              case s.ParserState.Path:
                if (R2.c() === "" || R2.c() === "/" || b(i2) && R2.c() === "\\" || o2 === void 0 && (R2.c() === "?" || R2.c() === "#")) {
                  if (b(i2) && R2.c() === "\\" && v("Invalid input string."), T(L2))
                    O(i2), R2.c() === "/" || b(i2) && R2.c() === "\\" || i2.path.push("");
                  else if (!N(L2) || R2.c() === "/" || b(i2) && R2.c() === "\\") {
                    if (!N(L2)) {
                      if (i2.scheme === "file" && i2.path.length === 0 && k(L2)) {
                        i2.host !== null && i2.host !== "" && (v("Invalid input string."), i2.host = "");
                        var Y = Array.from(L2);
                        L2 = Y.slice(0, 1) + ":" + Y.slice(2);
                      }
                      i2.path.push(L2);
                    }
                  } else
                    i2.path.push("");
                  if (L2 = "", i2.scheme === "file" && (R2.c() === "" || R2.c() === "?" || R2.c() === "#"))
                    for (; i2.path.length > 1 && i2.path[0] === ""; )
                      v("Invalid input string."), i2.path.splice(0, 1);
                  R2.c() === "?" && (i2.query = "", C2 = s.ParserState.Query), R2.c() === "#" && (i2.fragment = "", C2 = s.ParserState.Fragment);
                } else
                  m.test(R2.c()) || R2.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R2.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), L2 += X(R2.c(), f);
                break;
              case s.ParserState.CannotBeABaseURLPath:
                R2.c() === "?" ? (i2.query = "", C2 = s.ParserState.Query) : R2.c() === "#" ? (i2.fragment = "", C2 = s.ParserState.Fragment) : (R2.c() === "" || m.test(R2.c()) || R2.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R2.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), R2.c() !== "" && (i2.path[0] += X(R2.c(), h)));
                break;
              case s.ParserState.Query:
                if (A2 === "UTF-8" || b(i2) && i2.scheme !== "ws" && i2.scheme !== "wss" || (A2 = "UTF-8"), o2 === void 0 && R2.c() === "#")
                  i2.fragment = "", C2 = s.ParserState.Fragment;
                else if (R2.c() !== "") {
                  if (m.test(R2.c()) || R2.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R2.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), A2.toUpperCase() !== "UTF-8")
                    throw new Error("Only UTF-8 encoding is supported.");
                  var V = a.utf8Encode(R2.c());
                  if (V.length >= 3 && V[0] === 38 && V[1] === 35 && V[V.length - 1] === 59)
                    V = V.subarray(2, V.length - 1), i2.query += "%26%23" + u.byteSequence.isomorphicDecode(V) + "%3B";
                  else
                    try {
                      for (var K = (y2 = void 0, n(V)), $ = K.next(); !$.done; $ = K.next()) {
                        var Q = $.value;
                        Q < 33 || Q > 126 || Q === 34 || Q === 35 || Q === 60 || Q === 62 || Q === 39 && b(i2) ? i2.query += z(Q) : i2.query += String.fromCharCode(Q);
                      }
                    } catch (e3) {
                      y2 = { error: e3 };
                    } finally {
                      try {
                        $ && !$.done && (_2 = K.return) && _2.call(K);
                      } finally {
                        if (y2)
                          throw y2.error;
                      }
                    }
                }
                break;
              case s.ParserState.Fragment:
                R2.c() === "" || (R2.c() === "\0" ? v("NULL character in input string.") : (m.test(R2.c()) || R2.c() === "%" || v("Unexpected character in fragment string."), R2.c() !== "%" || /^[A-Za-z0-9][A-Za-z0-9]/.test(R2.remaining()) || v("Unexpected character in fragment string."), i2.fragment += X(R2.c(), p)));
            }
            if (R2.eof)
              break;
            R2.pointer++;
          }
          return i2;
        }
        function N(e2) {
          return e2 === "." || e2.toLowerCase() === "%2e";
        }
        function T(e2) {
          var t2 = e2.toLowerCase();
          return t2 === ".." || t2 === ".%2e" || t2 === "%2e." || t2 === "%2e%2e";
        }
        function O(e2) {
          var t2 = e2.path;
          t2.length !== 0 && (e2.scheme === "file" && t2.length === 1 && F(t2[0]) || e2.path.splice(e2.path.length - 1, 1));
        }
        function F(e2) {
          return e2.length >= 2 && u.codePoint.ASCIIAlpha.test(e2[0]) && e2[1] === ":";
        }
        function k(e2) {
          return e2.length >= 2 && u.codePoint.ASCIIAlpha.test(e2[0]) && (e2[1] === ":" || e2[1] === "|");
        }
        function P(e2) {
          return e2.length >= 2 && k(e2) && (e2.length === 2 || e2[2] === "/" || e2[2] === "\\" || e2[2] === "?" || e2[2] === "#");
        }
        function I(e2, t2) {
          if (t2 === void 0 && (t2 = false), e2.startsWith("["))
            return e2.endsWith("]") ? B(e2.substring(1, e2.length - 1)) : (v("Expected ']' after '['."), null);
          if (t2)
            return j(e2);
          var r2 = H(a.utf8Decode(G(e2)));
          if (r2 === null)
            return v("Invalid domain."), null;
          if (y.test(r2))
            return v("Invalid domain."), null;
          var n2 = M(r2);
          return n2 === null || a.isNumber(n2) ? n2 : r2;
        }
        function L(e2, t2) {
          t2 === void 0 && (t2 = { value: false });
          var r2 = 10;
          return e2.startsWith("0x") || e2.startsWith("0X") ? (t2.value = true, e2 = e2.substr(2), r2 = 16) : e2.length >= 2 && e2[0] === "0" && (t2.value = true, e2 = e2.substr(1), r2 = 8), e2 === "" ? 0 : (r2 === 10 ? /^[0-9]+$/ : r2 === 16 ? /^[0-9A-Fa-f]+$/ : /^[0-7]+$/).test(e2) ? parseInt(e2, r2) : null;
        }
        function M(e2) {
          var t2, r2, i2, o2, a2 = { value: false }, s2 = e2.split(".");
          if (s2[s2.length - 1] === "" && (a2.value = true, s2.length > 1 && s2.pop()), s2.length > 4)
            return e2;
          var u2 = [];
          try {
            for (var l2 = n(s2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              var h2 = c2.value;
              if (h2 === "")
                return e2;
              if ((_2 = L(h2, a2)) === null)
                return e2;
              u2.push(_2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          a2.value && v("Invalid IP v4 address.");
          for (var p2 = 0; p2 < u2.length; p2++) {
            if (u2[p2] > 255 && (v("Invalid IP v4 address."), p2 < u2.length - 1))
              return null;
          }
          if (u2[u2.length - 1] >= Math.pow(256, 5 - u2.length))
            return v("Invalid IP v4 address."), null;
          var f2 = u2[u2.length - 1];
          u2.pop();
          var d2 = 0;
          try {
            for (var m2 = n(u2), y2 = m2.next(); !y2.done; y2 = m2.next()) {
              var _2;
              f2 += (_2 = y2.value) * Math.pow(256, 3 - d2), d2++;
            }
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              y2 && !y2.done && (o2 = m2.return) && o2.call(m2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return f2;
        }
        function B(e2) {
          var t2, r2 = [0, 0, 0, 0, 0, 0, 0, 0], n2 = 0, o2 = null, s2 = new a.StringWalker(e2);
          if (s2.c() === ":") {
            if (!s2.remaining().startsWith(":"))
              return v("Invalid IP v6 address."), null;
            s2.pointer += 2, o2 = n2 += 1;
          }
          for (; s2.c() !== ""; ) {
            if (n2 === 8)
              return v("Invalid IP v6 address."), null;
            if (s2.c() !== ":") {
              for (var l2 = 0, c2 = 0; c2 < 4 && u.codePoint.ASCIIHexDigit.test(s2.c()); )
                l2 = 16 * l2 + parseInt(s2.c(), 16), s2.pointer++, c2++;
              if (s2.c() === ".") {
                if (c2 === 0)
                  return v("Invalid IP v6 address."), null;
                if (s2.pointer -= c2, n2 > 6)
                  return v("Invalid IP v6 address."), null;
                for (var h2 = 0; s2.c() !== ""; ) {
                  var p2 = null;
                  if (h2 > 0) {
                    if (!(s2.c() === "." && h2 < 4))
                      return v("Invalid IP v6 address."), null;
                    s2.pointer++;
                  }
                  if (!u.codePoint.ASCIIDigit.test(s2.c()))
                    return v("Invalid IP v6 address."), null;
                  for (; u.codePoint.ASCIIDigit.test(s2.c()); ) {
                    var f2 = parseInt(s2.c(), 10);
                    if (p2 === null)
                      p2 = f2;
                    else {
                      if (p2 === 0)
                        return v("Invalid IP v6 address."), null;
                      p2 = 10 * p2 + f2;
                    }
                    if (p2 > 255)
                      return v("Invalid IP v6 address."), null;
                    s2.pointer++;
                  }
                  if (p2 === null)
                    return v("Invalid IP v6 address."), null;
                  r2[n2] = 256 * r2[n2] + p2, ++h2 !== 2 && h2 !== 4 || n2++;
                }
                if (h2 !== 4)
                  return v("Invalid IP v6 address."), null;
                break;
              }
              if (s2.c() === ":") {
                if (s2.pointer++, s2.c() === "")
                  return v("Invalid IP v6 address."), null;
              } else if (s2.c() !== "")
                return v("Invalid IP v6 address."), null;
              r2[n2] = l2, n2++;
            } else {
              if (o2 !== null)
                return v("Invalid IP v6 address."), null;
              s2.pointer++, o2 = ++n2;
            }
          }
          if (o2 !== null) {
            var d2 = n2 - o2;
            for (n2 = 7; n2 !== 0 && d2 > 0; )
              t2 = i([r2[o2 + d2 - 1], r2[n2]], 2), r2[n2] = t2[0], r2[o2 + d2 - 1] = t2[1], n2--, d2--;
          } else if (o2 === null && n2 !== 8)
            return v("Invalid IP v6 address."), null;
          return r2;
        }
        function j(e2) {
          var t2, r2;
          if (/[\x00\t\f\r #/:?@\[\\\]]/.test(e2))
            return v("Invalid host string."), null;
          var i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              i2 += X(a2.value, h);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function R(e2) {
          return null;
        }
        function z(e2) {
          return "%" + ("00" + e2.toString(16).toUpperCase()).slice(-2);
        }
        function U(e2) {
          for (var t2 = function(e3) {
            return e3 >= 48 && e3 <= 57 || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
          }, r2 = new Uint8Array(e2.length), n2 = 0, i2 = 0; i2 < e2.length; i2++) {
            var o2 = e2[i2];
            if (o2 !== 37)
              r2[n2] = o2, n2++;
            else if (o2 === 37 && i2 >= e2.length - 2)
              r2[n2] = o2, n2++;
            else if (o2 !== 37 || t2(e2[i2 + 1]) && t2(e2[i2 + 2])) {
              var s2 = parseInt(a.utf8Decode(Uint8Array.of(e2[i2 + 1], e2[i2 + 2])), 16);
              r2[n2] = s2, n2++, i2 += 2;
            } else
              r2[n2] = o2, n2++;
          }
          return r2.subarray(0, n2);
        }
        function G(e2) {
          return U(a.utf8Encode(e2));
        }
        function X(e2, t2) {
          var r2, i2;
          if (!t2.test(e2))
            return e2;
          var o2 = a.utf8Encode(e2), s2 = "";
          try {
            for (var u2 = n(o2), l2 = u2.next(); !l2.done; l2 = u2.next()) {
              s2 += z(l2.value);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              l2 && !l2.done && (i2 = u2.return) && i2.call(u2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return s2;
        }
        function q(e2) {
          var t2, r2, i2, o2, s2 = [], u2 = [];
          try {
            for (var l2 = n(e2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              var h2 = c2.value;
              h2 === 38 ? (s2.push(Uint8Array.from(u2)), u2 = []) : u2.push(h2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          u2.length !== 0 && s2.push(Uint8Array.from(u2));
          var p2 = [];
          try {
            for (var f2 = n(s2), d2 = f2.next(); !d2.done; d2 = f2.next()) {
              var m2 = d2.value;
              if (m2.length !== 0) {
                for (var y2 = m2.indexOf(61), v2 = y2 !== -1 ? m2.slice(0, y2) : m2, _2 = y2 !== -1 ? m2.slice(y2 + 1) : new Uint8Array(), g2 = 0; g2 < v2.length; g2++)
                  v2[g2] === 43 && (v2[g2] = 32);
                for (g2 = 0; g2 < _2.length; g2++)
                  _2[g2] === 43 && (_2[g2] = 32);
                var b2 = a.utf8Decode(v2), x2 = a.utf8Decode(_2);
                p2.push([b2, x2]);
              }
            }
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              d2 && !d2.done && (o2 = f2.return) && o2.call(f2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return p2;
        }
        function W(e2) {
          var t2, r2, i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value;
              i2 += s2 === 32 ? "+" : s2 === 42 || s2 === 45 || s2 === 46 || s2 >= 48 && s2 <= 57 || s2 >= 65 && s2 <= 90 || s2 === 95 || s2 >= 97 && s2 <= 122 ? String.fromCodePoint(s2) : z(s2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function H(e2, t2) {
          t2 === void 0 && (t2 = false);
          var r2 = l.domainToASCII(e2);
          return r2 === "" ? (v("Invalid domain name."), null) : r2;
        }
        t.setValidationErrorCallback = function(e2) {
          o = e2;
        }, t.newURL = _, t.isSpecialScheme = g, t.isSpecial = b, t.defaultPort = x, t.includesCredentials = w, t.cannotHaveAUsernamePasswordPort = function(e2) {
          return e2.host === null || e2.host === "" || e2._cannotBeABaseURLFlag || e2.scheme === "file";
        }, t.urlSerializer = E, t.hostSerializer = D, t.iPv4Serializer = S, t.iPv6Serializer = C, t.urlParser = function(e2, t2, r2) {
          var n2 = A(e2, t2, r2);
          return n2 === null ? null : (n2.scheme !== "blob" || (n2._blobURLEntry = null), n2);
        }, t.basicURLParser = A, t.setTheUsername = function(e2, t2) {
          var r2, i2, o2 = "";
          try {
            for (var a2 = n(t2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              o2 += X(s2.value, d);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e2.username = o2;
        }, t.setThePassword = function(e2, t2) {
          var r2, i2, o2 = "";
          try {
            for (var a2 = n(t2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              o2 += X(s2.value, d);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e2.password = o2;
        }, t.isSingleDotPathSegment = N, t.isDoubleDotPathSegment = T, t.shorten = O, t.isNormalizedWindowsDriveLetter = F, t.isWindowsDriveLetter = k, t.startsWithAWindowsDriveLetter = P, t.hostParser = I, t.iPv4NumberParser = L, t.iPv4Parser = M, t.iPv6Parser = B, t.opaqueHostParser = j, t.resolveABlobURL = R, t.percentEncode = z, t.percentDecode = U, t.stringPercentDecode = G, t.utf8PercentEncode = X, t.hostEquals = function(e2, t2) {
          return e2 === t2;
        }, t.urlEquals = function(e2, t2, r2) {
          return r2 === void 0 && (r2 = false), E(e2, r2) === E(t2, r2);
        }, t.urlEncodedStringParser = function(e2) {
          return q(a.utf8Encode(e2));
        }, t.urlEncodedParser = q, t.urlEncodedByteSerializer = W, t.urlEncodedSerializer = function(e2, t2) {
          var r2, i2;
          if ((t2 === void 0 || t2 === "replacement" || t2 === "UTF-16BE" || t2 === "UTF-16LE" ? "UTF-8" : t2).toUpperCase() !== "UTF-8")
            throw new Error("Only UTF-8 encoding is supported.");
          var o2 = "";
          try {
            for (var s2 = n(e2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
              var l2 = u2.value, c2 = W(a.utf8Encode(l2[0])), h2 = l2[1];
              h2 = W(a.utf8Encode(h2)), o2 !== "" && (o2 += "&"), o2 += c2 + "=" + h2;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.origin = function e2(t2) {
          switch (t2.scheme) {
            case "blob":
              t2._blobURLEntry;
              var r2 = A(t2.path[0]);
              return r2 === null ? s.OpaqueOrigin : e2(r2);
            case "ftp":
            case "http":
            case "https":
            case "ws":
            case "wss":
              return [t2.scheme, t2.host === null ? "" : t2.host, t2.port, null];
            case "file":
            default:
              return s.OpaqueOrigin;
          }
        }, t.domainToASCII = H, t.domainToUnicode = function(e2, t2) {
          t2 === void 0 && (t2 = false);
          var r2 = l.domainToUnicode(e2);
          return r2 === "" && v("Invalid domain name."), r2;
        }, t.asciiSerializationOfAnOrigin = function(e2) {
          if (e2[0] === "" && e2[1] === "" && e2[2] === null && e2[3] === null)
            return "null";
          var t2 = e2[0] + "://" + D(e2[1]);
          return e2[2] !== null && (t2 += ":" + e2[2].toString()), t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(0), i = function() {
          function e2() {
            this._signal = n.create_abortSignal();
          }
          return Object.defineProperty(e2.prototype, "signal", { get: function() {
            return this._signal;
          }, enumerable: true, configurable: true }), e2.prototype.abort = function() {
            n.abort_signalAbort(this._signal);
          }, e2;
        }();
        t.AbortControllerImpl = i;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(70), a = r(0), s = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._abortedFlag = false, t3._abortAlgorithms = new Set(), t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "aborted", { get: function() {
            return this._abortedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "onabort", { get: function() {
            return a.event_getterEventHandlerIDLAttribute(this, "onabort");
          }, set: function(e3) {
            a.event_setterEventHandlerIDLAttribute(this, "onabort", e3);
          }, enumerable: true, configurable: true }), t2._create = function() {
            return new t2();
          }, t2;
        }(o.EventTargetImpl);
        t.AbortSignalImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(34), s = r(12), u = function(e2) {
          function t2(t3, r2, n2) {
            var i2 = e2.call(this) || this;
            return i2._name = "", i2._publicId = "", i2._systemId = "", i2._name = t3, i2._publicId = r2, i2._systemId = n2, i2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "name", { get: function() {
            return this._name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "publicId", { get: function() {
            return this._publicId;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "systemId", { get: function() {
            return this._systemId;
          }, enumerable: true, configurable: true }), t2.prototype.before = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.after = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.replaceWith = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2._create = function(e3, r2, n2, i2) {
            n2 === void 0 && (n2 = ""), i2 === void 0 && (i2 = "");
            var o2 = new t2(r2, n2, i2);
            return o2._nodeDocument = e3, o2;
          }, t2;
        }(a.NodeImpl);
        t.DocumentTypeImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.DocumentType);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(100), a = r(1), s = r(0), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this) || this;
            return n2._host = t3, n2._mode = r2, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "mode", { get: function() {
            return this._mode;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "host", { get: function() {
            return this._host;
          }, enumerable: true, configurable: true }), t2.prototype._getTheParent = function(e3) {
            return e3._composedFlag || a.isEmpty(e3._path) || s.tree_rootNode(e3._path[0].invocationTarget) !== this ? this._host : null;
          }, t2._create = function(e3, r2) {
            return new t2(r2, "closed");
          }, t2;
        }(o.DocumentFragmentImpl);
        t.ShadowRootImpl = u;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(34), s = r(0), u = r(12), l = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this) || this;
            return r2._namespace = null, r2._namespacePrefix = null, r2._element = null, r2._value = "", r2._localName = t3, r2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "ownerElement", { get: function() {
            return this._element;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "name", { get: function() {
            return this._qualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "value", { get: function() {
            return this._value;
          }, set: function(e3) {
            s.attr_setAnExistingAttributeValue(this, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix !== null ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2) {
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(a.NodeImpl);
        t.AttrImpl = l, u.idl_defineConst(l.prototype, "_nodeType", o.NodeType.Attribute), u.idl_defineConst(l.prototype, "specified", true);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(101), a = r(2), s = r(12), u = function(e2) {
          function t2(t3) {
            return e2.call(this, t3) || this;
          }
          return i(t2, e2), t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(o.TextImpl);
        t.CDATASectionImpl = u, s.idl_defineConst(u.prototype, "_nodeType", a.NodeType.CData);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(71), s = r(12), u = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, t3) || this;
          }
          return i(t2, e2), t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(a.CharacterDataImpl);
        t.CommentImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.Comment);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(71), s = r(12), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, r2) || this;
            return n2._target = t3, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2, n2) {
            var i2 = new t2(r2, n2);
            return i2._nodeDocument = e3, i2;
          }, t2;
        }(a.CharacterDataImpl);
        t.ProcessingInstructionImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.ProcessingInstruction);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(7), i = r(0), o = r(3), a = r(1), s = function() {
          function e2(e3, t2) {
            return this._live = true, this._root = e3, this._filter = t2, new Proxy(this, this);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            for (var e3 = this, t2 = 0, r2 = i.tree_getFirstDescendantNode(this._root, false, false, function(t3) {
              return o.Guard.isElementNode(t3) && e3._filter(t3);
            }); r2 !== null; )
              t2++, r2 = i.tree_getNextDescendantNode(this._root, r2, false, false, function(t3) {
                return o.Guard.isElementNode(t3) && e3._filter(t3);
              });
            return t2;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            for (var t2 = this, r2 = 0, n2 = i.tree_getFirstDescendantNode(this._root, false, false, function(e4) {
              return o.Guard.isElementNode(e4) && t2._filter(e4);
            }); n2 !== null; ) {
              if (r2 === e3)
                return n2;
              r2++, n2 = i.tree_getNextDescendantNode(this._root, n2, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2._filter(e4);
              });
            }
            return null;
          }, e2.prototype.namedItem = function(e3) {
            var t2 = this;
            if (e3 === "")
              return null;
            for (var r2 = i.tree_getFirstDescendantNode(this._root, false, false, function(e4) {
              return o.Guard.isElementNode(e4) && t2._filter(e4);
            }); r2 != null; ) {
              if (r2._uniqueIdentifier === e3)
                return r2;
              if (r2._namespace === n.namespace.HTML)
                for (var a2 = 0; a2 < r2._attributeList.length; a2++) {
                  var s2 = r2._attributeList[a2];
                  if (s2._localName === "name" && s2._namespace === null && s2._namespacePrefix === null && s2._value === e3)
                    return r2;
                }
              r2 = i.tree_getNextDescendantNode(this._root, r2, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2._filter(e4);
              });
            }
            return null;
          }, e2.prototype[Symbol.iterator] = function() {
            var e3 = this._root, t2 = this._filter, r2 = i.tree_getFirstDescendantNode(e3, false, false, function(e4) {
              return o.Guard.isElementNode(e4) && t2(e4);
            });
            return { next: function() {
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = i.tree_getNextDescendantNode(e3, r2, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2(e4);
              }), n2;
            } };
          }, e2.prototype.get = function(t2, r2, n2) {
            if (!a.isString(r2) || e2.reservedNames.indexOf(r2) !== -1)
              return Reflect.get(t2, r2, n2);
            var i2 = Number(r2);
            return isNaN(i2) ? t2.namedItem(r2) || void 0 : t2.item(i2) || void 0;
          }, e2.prototype.set = function(t2, r2, n2, o2) {
            if (!a.isString(r2) || e2.reservedNames.indexOf(r2) !== -1)
              return Reflect.set(t2, r2, n2, o2);
            var s2 = Number(r2), u = isNaN(s2) ? t2.namedItem(r2) || void 0 : t2.item(s2) || void 0;
            return !(!u || !u._parent) && (i.mutation_replace(u, n2, u._parent), true);
          }, e2._create = function(t2, r2) {
            return r2 === void 0 && (r2 = function() {
              return true;
            }), new e2(t2, r2);
          }, e2.reservedNames = ["_root", "_live", "_filter", "length", "item", "namedItem", "get", "set"], e2;
        }();
        t.HTMLCollectionImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(1), a = r(0), s = function() {
          function e2(e3) {
            return this._live = true, this._filter = null, this._length = 0, this._root = e3, new Proxy(this, this);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._root._children.size;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            if (e3 < 0 || e3 > this.length - 1)
              return null;
            if (e3 < this.length / 2) {
              for (var t2 = 0, r2 = this._root._firstChild; r2 !== null && t2 !== e3; )
                r2 = r2._nextSibling, t2++;
              return r2;
            }
            for (t2 = this.length - 1, r2 = this._root._lastChild; r2 !== null && t2 !== e3; )
              r2 = r2._previousSibling, t2--;
            return r2;
          }, e2.prototype.keys = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = 0;
              return { next: function() {
                return e4 === this.length ? { done: true, value: null } : { done: false, value: e4++ };
              }.bind(this) };
            }.bind(this), e3;
          }, e2.prototype.values = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator]();
              return { next: function() {
                return e4.next();
              } };
            }.bind(this), e3;
          }, e2.prototype.entries = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator](), t2 = 0;
              return { next: function() {
                var r2 = e4.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t2++, r2.value] };
              } };
            }.bind(this), e3;
          }, e2.prototype[Symbol.iterator] = function() {
            return this._root._children[Symbol.iterator]();
          }, e2.prototype.forEach = function(e3, t2) {
            var r2, o2;
            t2 === void 0 && (t2 = i.dom.window);
            var a2 = 0;
            try {
              for (var s2 = n(this._root._children), u = s2.next(); !u.done; u = s2.next()) {
                var l = u.value;
                e3.call(t2, l, a2++, this);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u && !u.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype.get = function(e3, t2, r2) {
            if (!o.isString(t2))
              return Reflect.get(e3, t2, r2);
            var n2 = Number(t2);
            return isNaN(n2) ? Reflect.get(e3, t2, r2) : e3.item(n2) || void 0;
          }, e2.prototype.set = function(e3, t2, r2, n2) {
            if (!o.isString(t2))
              return Reflect.set(e3, t2, r2, n2);
            var i2 = Number(t2);
            if (isNaN(i2))
              return Reflect.set(e3, t2, r2, n2);
            var s2 = e3.item(i2) || void 0;
            return !!s2 && (!!s2._parent && (a.mutation_replace(s2, r2, s2._parent), true));
          }, e2._create = function(t2) {
            return new e2(t2);
          }, e2;
        }();
        t.NodeListImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(1), a = function() {
          function e2(e3) {
            return this._live = false, this._items = [], this._length = 0, this._root = e3, this._items = [], this._filter = function(e4) {
              return true;
            }, new Proxy(this, this);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._items.length;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            return e3 < 0 || e3 > this.length - 1 ? null : this._items[e3];
          }, e2.prototype.keys = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = 0;
              return { next: function() {
                return e4 === this.length ? { done: true, value: null } : { done: false, value: e4++ };
              }.bind(this) };
            }.bind(this), e3;
          }, e2.prototype.values = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator]();
              return { next: function() {
                return e4.next();
              } };
            }.bind(this), e3;
          }, e2.prototype.entries = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator](), t2 = 0;
              return { next: function() {
                var r2 = e4.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t2++, r2.value] };
              } };
            }.bind(this), e3;
          }, e2.prototype[Symbol.iterator] = function() {
            var e3 = this._items[Symbol.iterator]();
            return { next: function() {
              return e3.next();
            } };
          }, e2.prototype.forEach = function(e3, t2) {
            var r2, o2;
            t2 === void 0 && (t2 = i.dom.window);
            var a2 = 0;
            try {
              for (var s = n(this._items), u = s.next(); !u.done; u = s.next()) {
                var l = u.value;
                e3.call(t2, l, a2++, this);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u && !u.done && (o2 = s.return) && o2.call(s);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype.get = function(e3, t2, r2) {
            if (!o.isString(t2))
              return Reflect.get(e3, t2, r2);
            var n2 = Number(t2);
            return isNaN(n2) ? Reflect.get(e3, t2, r2) : e3._items[n2] || void 0;
          }, e2.prototype.set = function(e3, t2, r2, n2) {
            if (!o.isString(t2))
              return Reflect.set(e3, t2, r2, n2);
            var i2 = Number(t2);
            return isNaN(i2) ? Reflect.set(e3, t2, r2, n2) : i2 >= 0 && i2 < e3._items.length && (e3._items[i2] = r2, true);
          }, e2._create = function(t2, r2) {
            var n2 = new e2(t2);
            return n2._items = r2, n2;
          }, e2;
        }();
        t.NodeListStaticImpl = a;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(9), a = r(0), s = function(e2) {
          function t2(r2) {
            var n2 = e2.call(this) || this;
            return n2._element = r2, Object.setPrototypeOf(n2, t2.prototype), n2;
          }
          return i(t2, e2), t2.prototype._asArray = function() {
            return this;
          }, t2.prototype.item = function(e3) {
            return this[e3] || null;
          }, t2.prototype.getNamedItem = function(e3) {
            return a.element_getAnAttributeByName(e3, this._element);
          }, t2.prototype.getNamedItemNS = function(e3, t3) {
            return a.element_getAnAttributeByNamespaceAndLocalName(e3 || "", t3, this._element);
          }, t2.prototype.setNamedItem = function(e3) {
            return a.element_setAnAttribute(e3, this._element);
          }, t2.prototype.setNamedItemNS = function(e3) {
            return a.element_setAnAttribute(e3, this._element);
          }, t2.prototype.removeNamedItem = function(e3) {
            var t3 = a.element_removeAnAttributeByName(e3, this._element);
            if (t3 === null)
              throw new o.NotFoundError();
            return t3;
          }, t2.prototype.removeNamedItemNS = function(e3, t3) {
            var r2 = a.element_removeAnAttributeByNamespaceAndLocalName(e3 || "", t3, this._element);
            if (r2 === null)
              throw new o.NotFoundError();
            return r2;
          }, t2._create = function(e3) {
            return new t2(e3);
          }, t2;
        }(Array);
        t.NamedNodeMapImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(2), u = r(102), l = r(9), c = r(0), h = r(12), p = r(3), f = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this, r2 = a.dom.window._associatedDocument;
            return t3._start = [r2, 0], t3._end = [r2, 0], a.dom.rangeList.add(t3), t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "commonAncestorContainer", { get: function() {
            for (var e3 = this._start[0]; !c.tree_isAncestorOf(this._end[0], e3, true); ) {
              if (e3._parent === null)
                throw new Error("Parent node  is null.");
              e3 = e3._parent;
            }
            return e3;
          }, enumerable: true, configurable: true }), t2.prototype.setStart = function(e3, t3) {
            c.range_setTheStart(this, e3, t3);
          }, t2.prototype.setEnd = function(e3, t3) {
            c.range_setTheEnd(this, e3, t3);
          }, t2.prototype.setStartBefore = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheStart(this, t3, c.tree_index(e3));
          }, t2.prototype.setStartAfter = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheStart(this, t3, c.tree_index(e3) + 1);
          }, t2.prototype.setEndBefore = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheEnd(this, t3, c.tree_index(e3));
          }, t2.prototype.setEndAfter = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheEnd(this, t3, c.tree_index(e3) + 1);
          }, t2.prototype.collapse = function(e3) {
            e3 ? this._end = this._start : this._start = this._end;
          }, t2.prototype.selectNode = function(e3) {
            c.range_select(e3, this);
          }, t2.prototype.selectNodeContents = function(e3) {
            if (p.Guard.isDocumentTypeNode(e3))
              throw new l.InvalidNodeTypeError();
            var t3 = c.tree_nodeLength(e3);
            this._start = [e3, 0], this._end = [e3, t3];
          }, t2.prototype.compareBoundaryPoints = function(e3, t3) {
            if (e3 !== s.HowToCompare.StartToStart && e3 !== s.HowToCompare.StartToEnd && e3 !== s.HowToCompare.EndToEnd && e3 !== s.HowToCompare.EndToStart)
              throw new l.NotSupportedError();
            if (c.range_root(this) !== c.range_root(t3))
              throw new l.WrongDocumentError();
            var r2, n2;
            switch (e3) {
              case s.HowToCompare.StartToStart:
                r2 = this._start, n2 = t3._start;
                break;
              case s.HowToCompare.StartToEnd:
                r2 = this._end, n2 = t3._start;
                break;
              case s.HowToCompare.EndToEnd:
                r2 = this._end, n2 = t3._end;
                break;
              case s.HowToCompare.EndToStart:
                r2 = this._start, n2 = t3._end;
                break;
              default:
                throw new l.NotSupportedError();
            }
            var i2 = c.boundaryPoint_position(r2, n2);
            return i2 === s.BoundaryPosition.Before ? -1 : i2 === s.BoundaryPosition.After ? 1 : 0;
          }, t2.prototype.deleteContents = function() {
            var e3, t3, r2, n2;
            if (!c.range_collapsed(this)) {
              var i2 = this._startNode, a2 = this._startOffset, s2 = this._endNode, u2 = this._endOffset;
              if (i2 === s2 && p.Guard.isCharacterDataNode(i2))
                c.characterData_replaceData(i2, a2, u2 - a2, "");
              else {
                var l2, h2, f2 = [];
                try {
                  for (var d = o(c.range_getContainedNodes(this)), m = d.next(); !m.done; m = d.next()) {
                    var y = (b = m.value)._parent;
                    y !== null && c.range_isContained(y, this) || f2.push(b);
                  }
                } catch (t4) {
                  e3 = { error: t4 };
                } finally {
                  try {
                    m && !m.done && (t3 = d.return) && t3.call(d);
                  } finally {
                    if (e3)
                      throw e3.error;
                  }
                }
                if (c.tree_isAncestorOf(s2, i2, true))
                  l2 = i2, h2 = a2;
                else {
                  for (var v = i2; v._parent !== null && !c.tree_isAncestorOf(s2, v._parent, true); )
                    v = v._parent;
                  if (v._parent === null)
                    throw new Error("Parent node is null.");
                  l2 = v._parent, h2 = c.tree_index(v) + 1;
                }
                p.Guard.isCharacterDataNode(i2) && c.characterData_replaceData(i2, a2, c.tree_nodeLength(i2) - a2, "");
                try {
                  for (var _ = o(f2), g = _.next(); !g.done; g = _.next()) {
                    var b;
                    (b = g.value)._parent && c.mutation_remove(b, b._parent);
                  }
                } catch (e4) {
                  r2 = { error: e4 };
                } finally {
                  try {
                    g && !g.done && (n2 = _.return) && n2.call(_);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
                p.Guard.isCharacterDataNode(s2) && c.characterData_replaceData(s2, 0, u2, ""), this._start = [l2, h2], this._end = [l2, h2];
              }
            }
          }, t2.prototype.extractContents = function() {
            return c.range_extract(this);
          }, t2.prototype.cloneContents = function() {
            return c.range_cloneTheContents(this);
          }, t2.prototype.insertNode = function(e3) {
            return c.range_insert(e3, this);
          }, t2.prototype.surroundContents = function(e3) {
            var t3, r2;
            try {
              for (var n2 = o(c.range_getPartiallyContainedNodes(this)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                var a2 = i2.value;
                if (!p.Guard.isTextNode(a2))
                  throw new l.InvalidStateError();
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                i2 && !i2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            if (p.Guard.isDocumentNode(e3) || p.Guard.isDocumentTypeNode(e3) || p.Guard.isDocumentFragmentNode(e3))
              throw new l.InvalidNodeTypeError();
            var s2 = c.range_extract(this);
            e3._children.size !== 0 && c.mutation_replaceAll(null, e3), c.range_insert(e3, this), c.mutation_append(s2, e3), c.range_select(e3, this);
          }, t2.prototype.cloneRange = function() {
            return c.create_range(this._start, this._end);
          }, t2.prototype.detach = function() {
            a.dom.rangeList.delete(this);
          }, t2.prototype.isPointInRange = function(e3, t3) {
            if (c.tree_rootNode(e3) !== c.range_root(this))
              return false;
            if (p.Guard.isDocumentTypeNode(e3))
              throw new l.InvalidNodeTypeError();
            if (t3 > c.tree_nodeLength(e3))
              throw new l.IndexSizeError();
            var r2 = [e3, t3];
            return c.boundaryPoint_position(r2, this._start) !== s.BoundaryPosition.Before && c.boundaryPoint_position(r2, this._end) !== s.BoundaryPosition.After;
          }, t2.prototype.comparePoint = function(e3, t3) {
            if (c.tree_rootNode(e3) !== c.range_root(this))
              throw new l.WrongDocumentError();
            if (p.Guard.isDocumentTypeNode(e3))
              throw new l.InvalidNodeTypeError();
            if (t3 > c.tree_nodeLength(e3))
              throw new l.IndexSizeError();
            var r2 = [e3, t3];
            return c.boundaryPoint_position(r2, this._start) === s.BoundaryPosition.Before ? -1 : c.boundaryPoint_position(r2, this._end) === s.BoundaryPosition.After ? 1 : 0;
          }, t2.prototype.intersectsNode = function(e3) {
            if (c.tree_rootNode(e3) !== c.range_root(this))
              return false;
            var t3 = e3._parent;
            if (t3 === null)
              return true;
            var r2 = c.tree_index(e3);
            return c.boundaryPoint_position([t3, r2], this._end) === s.BoundaryPosition.Before && c.boundaryPoint_position([t3, r2 + 1], this._start) === s.BoundaryPosition.After;
          }, t2.prototype.toString = function() {
            var e3, t3, r2 = "";
            if (this._startNode === this._endNode && p.Guard.isTextNode(this._startNode))
              return this._startNode._data.substring(this._startOffset, this._endOffset);
            p.Guard.isTextNode(this._startNode) && (r2 += this._startNode._data.substring(this._startOffset));
            try {
              for (var n2 = o(c.range_getContainedNodes(this)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                var a2 = i2.value;
                p.Guard.isTextNode(a2) && (r2 += a2._data);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return p.Guard.isTextNode(this._endNode) && (r2 += this._endNode._data.substring(0, this._endOffset)), r2;
          }, t2._create = function(e3, r2) {
            var n2 = new t2();
            return e3 && (n2._start = e3), r2 && (n2._end = r2), n2;
          }, t2.START_TO_START = 0, t2.START_TO_END = 1, t2.END_TO_END = 2, t2.END_TO_START = 3, t2;
        }(u.AbstractRangeImpl);
        t.RangeImpl = f, h.idl_defineConst(f.prototype, "START_TO_START", 0), h.idl_defineConst(f.prototype, "START_TO_END", 1), h.idl_defineConst(f.prototype, "END_TO_END", 2), h.idl_defineConst(f.prototype, "END_TO_START", 3);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(103), a = r(0), s = function(e2) {
          function t2(t3, r2, n2) {
            var i2 = e2.call(this, t3) || this;
            return i2._iteratorCollection = void 0, i2._reference = r2, i2._pointerBeforeReference = n2, a.nodeIterator_iteratorList().add(i2), i2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "referenceNode", { get: function() {
            return this._reference;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "pointerBeforeReferenceNode", { get: function() {
            return this._pointerBeforeReference;
          }, enumerable: true, configurable: true }), t2.prototype.nextNode = function() {
            return a.nodeIterator_traverse(this, true);
          }, t2.prototype.previousNode = function() {
            return a.nodeIterator_traverse(this, false);
          }, t2.prototype.detach = function() {
            a.nodeIterator_iteratorList().delete(this);
          }, t2._create = function(e3, r2, n2) {
            return new t2(e3, r2, n2);
          }, t2;
        }(o.TraverserImpl);
        t.NodeIteratorImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(103), s = r(0), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._current = r2, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "currentNode", { get: function() {
            return this._current;
          }, set: function(e3) {
            this._current = e3;
          }, enumerable: true, configurable: true }), t2.prototype.parentNode = function() {
            for (var e3 = this._current; e3 !== null && e3 !== this._root; )
              if ((e3 = e3._parent) !== null && s.traversal_filter(this, e3) === o.FilterResult.Accept)
                return this._current = e3, e3;
            return null;
          }, t2.prototype.firstChild = function() {
            return s.treeWalker_traverseChildren(this, true);
          }, t2.prototype.lastChild = function() {
            return s.treeWalker_traverseChildren(this, false);
          }, t2.prototype.nextSibling = function() {
            return s.treeWalker_traverseSiblings(this, true);
          }, t2.prototype.previousNode = function() {
            for (var e3 = this._current; e3 !== this._root; ) {
              for (var t3 = e3._previousSibling; t3; ) {
                e3 = t3;
                for (var r2 = s.traversal_filter(this, e3); r2 !== o.FilterResult.Reject && e3._lastChild; )
                  e3 = e3._lastChild, r2 = s.traversal_filter(this, e3);
                if (r2 === o.FilterResult.Accept)
                  return this._current = e3, e3;
                t3 = e3._previousSibling;
              }
              if (e3 === this._root || e3._parent === null)
                return null;
              if (e3 = e3._parent, s.traversal_filter(this, e3) === o.FilterResult.Accept)
                return this._current = e3, e3;
            }
            return null;
          }, t2.prototype.previousSibling = function() {
            return s.treeWalker_traverseSiblings(this, false);
          }, t2.prototype.nextNode = function() {
            for (var e3 = this._current, t3 = o.FilterResult.Accept; ; ) {
              for (; t3 !== o.FilterResult.Reject && e3._firstChild; )
                if (e3 = e3._firstChild, (t3 = s.traversal_filter(this, e3)) === o.FilterResult.Accept)
                  return this._current = e3, e3;
              for (var r2 = null, n2 = e3; n2 !== null; ) {
                if (n2 === this._root)
                  return null;
                if ((r2 = n2._nextSibling) !== null) {
                  e3 = r2;
                  break;
                }
                n2 = n2._parent;
              }
              if ((t3 = s.traversal_filter(this, e3)) === o.FilterResult.Accept)
                return this._current = e3, e3;
            }
          }, t2._create = function(e3, r2) {
            return new t2(e3, r2);
          }, t2;
        }(a.TraverserImpl);
        t.TreeWalkerImpl = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(12), o = function() {
          function e2() {
          }
          return e2.prototype.acceptNode = function(e3) {
            return n.FilterResult.Accept;
          }, e2._create = function() {
            return new e2();
          }, e2.FILTER_ACCEPT = 1, e2.FILTER_REJECT = 2, e2.FILTER_SKIP = 3, e2.SHOW_ALL = 4294967295, e2.SHOW_ELEMENT = 1, e2.SHOW_ATTRIBUTE = 2, e2.SHOW_TEXT = 4, e2.SHOW_CDATA_SECTION = 8, e2.SHOW_ENTITY_REFERENCE = 16, e2.SHOW_ENTITY = 32, e2.SHOW_PROCESSING_INSTRUCTION = 64, e2.SHOW_COMMENT = 128, e2.SHOW_DOCUMENT = 256, e2.SHOW_DOCUMENT_TYPE = 512, e2.SHOW_DOCUMENT_FRAGMENT = 1024, e2.SHOW_NOTATION = 2048, e2;
        }();
        t.NodeFilterImpl = o, i.idl_defineConst(o.prototype, "FILTER_ACCEPT", 1), i.idl_defineConst(o.prototype, "FILTER_REJECT", 2), i.idl_defineConst(o.prototype, "FILTER_SKIP", 3), i.idl_defineConst(o.prototype, "SHOW_ALL", 4294967295), i.idl_defineConst(o.prototype, "SHOW_ELEMENT", 1), i.idl_defineConst(o.prototype, "SHOW_ATTRIBUTE", 2), i.idl_defineConst(o.prototype, "SHOW_TEXT", 4), i.idl_defineConst(o.prototype, "SHOW_CDATA_SECTION", 8), i.idl_defineConst(o.prototype, "SHOW_ENTITY_REFERENCE", 16), i.idl_defineConst(o.prototype, "SHOW_ENTITY", 32), i.idl_defineConst(o.prototype, "SHOW_PROCESSING_INSTRUCTION", 64), i.idl_defineConst(o.prototype, "SHOW_COMMENT", 128), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT", 256), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT_TYPE", 512), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT_FRAGMENT", 1024), i.idl_defineConst(o.prototype, "SHOW_NOTATION", 2048);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3, t2, r2, n2, i, o, a, s, u) {
            this._type = e3, this._target = t2, this._addedNodes = r2, this._removedNodes = n2, this._previousSibling = i, this._nextSibling = o, this._attributeName = a, this._attributeNamespace = s, this._oldValue = u;
          }
          return Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "addedNodes", { get: function() {
            return this._addedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "removedNodes", { get: function() {
            return this._removedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "attributeName", { get: function() {
            return this._attributeName;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "attributeNamespace", { get: function() {
            return this._attributeNamespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "oldValue", { get: function() {
            return this._oldValue;
          }, enumerable: true, configurable: true }), e2._create = function(t2, r2, n2, i, o, a, s, u, l) {
            return new e2(t2, r2, n2, i, o, a, s, u, l);
          }, e2;
        }();
        t.MutationRecordImpl = n;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(9), a = r(7), s = r(0), u = function() {
          function e2(e3, t2) {
            this._element = e3, this._attribute = t2, this._tokenSet = new Set();
            var r2 = t2._localName, n2 = s.element_getAnAttributeValue(e3, r2), o2 = this;
            this._element._attributeChangeSteps.push(function(e4, t3, r3, n3, i2) {
              t3 === o2._attribute._localName && i2 === null && (n3 ? o2._tokenSet = s.orderedSet_parse(n3) : o2._tokenSet.clear());
            }), i.dom.features.steps && s.dom_runAttributeChangeSteps(e3, r2, n2, n2, null);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._tokenSet.size;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            var t2, r2, i2 = 0;
            try {
              for (var o2 = n(this._tokenSet), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                if (i2 === e3)
                  return s2;
                i2++;
              }
            } catch (e4) {
              t2 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return null;
          }, e2.prototype.contains = function(e3) {
            return this._tokenSet.has(e3);
          }, e2.prototype.add = function() {
            for (var e3, t2, r2 = [], i2 = 0; i2 < arguments.length; i2++)
              r2[i2] = arguments[i2];
            try {
              for (var u2 = n(r2), l = u2.next(); !l.done; l = u2.next()) {
                var c = l.value;
                if (c === "")
                  throw new o.SyntaxError("Cannot add an empty token.");
                if (a.codePoint.ASCIIWhiteSpace.test(c))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.add(c);
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                l && !l.done && (t2 = u2.return) && t2.call(u2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            s.tokenList_updateSteps(this);
          }, e2.prototype.remove = function() {
            for (var e3, t2, r2 = [], i2 = 0; i2 < arguments.length; i2++)
              r2[i2] = arguments[i2];
            try {
              for (var u2 = n(r2), l = u2.next(); !l.done; l = u2.next()) {
                var c = l.value;
                if (c === "")
                  throw new o.SyntaxError("Cannot remove an empty token.");
                if (a.codePoint.ASCIIWhiteSpace.test(c))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.delete(c);
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                l && !l.done && (t2 = u2.return) && t2.call(u2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            s.tokenList_updateSteps(this);
          }, e2.prototype.toggle = function(e3, t2) {
            if (t2 === void 0 && (t2 = void 0), e3 === "")
              throw new o.SyntaxError("Cannot toggle an empty token.");
            if (a.codePoint.ASCIIWhiteSpace.test(e3))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return this._tokenSet.has(e3) ? t2 !== void 0 && t2 !== false || (this._tokenSet.delete(e3), s.tokenList_updateSteps(this), false) : (t2 === void 0 || t2 === true) && (this._tokenSet.add(e3), s.tokenList_updateSteps(this), true);
          }, e2.prototype.replace = function(e3, t2) {
            if (e3 === "" || t2 === "")
              throw new o.SyntaxError("Cannot replace an empty token.");
            if (a.codePoint.ASCIIWhiteSpace.test(e3) || a.codePoint.ASCIIWhiteSpace.test(t2))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return !!this._tokenSet.has(e3) && (a.set.replace(this._tokenSet, e3, t2), s.tokenList_updateSteps(this), true);
          }, e2.prototype.supports = function(e3) {
            return s.tokenList_validationSteps(this, e3);
          }, Object.defineProperty(e2.prototype, "value", { get: function() {
            return s.tokenList_serializeSteps(this);
          }, set: function(e3) {
            s.element_setAnAttributeValue(this._element, this._attribute._localName, e3);
          }, enumerable: true, configurable: true }), e2.prototype[Symbol.iterator] = function() {
            var e3 = this._tokenSet[Symbol.iterator]();
            return { next: function() {
              return e3.next();
            } };
          }, e2._create = function(t2, r2) {
            return new e2(t2, r2);
          }, e2;
        }();
        t.DOMTokenListImpl = u;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(104), a = r(0), s = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3, r2) || this;
            return n2._detail = null, n2._detail = r2 && r2.detail || null, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "detail", { get: function() {
            return this._detail;
          }, enumerable: true, configurable: true }), t2.prototype.initCustomEvent = function(e3, t3, r2, n2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = null), this._dispatchFlag || (a.event_initialize(this, e3, t3, r2), this._detail = n2);
          }, t2;
        }(o.EventImpl);
        t.CustomEventImpl = s;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(6), i = r(2), o = r(105), a = r(17);
        t.nodeIterator_traverse = function(e2, t2) {
          for (var r2 = e2._reference, n2 = e2._pointerBeforeReference; ; ) {
            if (t2)
              if (n2)
                n2 = false;
              else {
                var s = a.tree_getFollowingNode(e2._root, r2);
                if (!s)
                  return null;
                r2 = s;
              }
            else if (n2) {
              var u = a.tree_getPrecedingNode(e2.root, r2);
              if (!u)
                return null;
              r2 = u;
            } else
              n2 = true;
            if (o.traversal_filter(e2, r2) === i.FilterResult.Accept)
              break;
          }
          return e2._reference = r2, e2._pointerBeforeReference = n2, r2;
        }, t.nodeIterator_iteratorList = function() {
          return n.dom.window._iteratorList;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(9), i = r(7), o = r(174);
        function a(e2) {
          if (!o.xml_isName(e2))
            throw new n.InvalidCharacterError("Invalid XML name: " + e2);
          if (!o.xml_isQName(e2))
            throw new n.InvalidCharacterError("Invalid XML qualified name: " + e2 + ".");
        }
        t.namespace_validate = a, t.namespace_validateAndExtract = function(e2, t2) {
          e2 || (e2 = null), a(t2);
          var r2 = t2.split(":"), o2 = r2.length === 2 ? r2[0] : null, s = r2.length === 2 ? r2[1] : t2;
          if (o2 && e2 === null)
            throw new n.NamespaceError("Qualified name includes a prefix but the namespace is null.");
          if (o2 === "xml" && e2 !== i.namespace.XML)
            throw new n.NamespaceError('Qualified name includes the "xml" prefix but the namespace is not the XML namespace.');
          if (e2 !== i.namespace.XMLNS && (o2 === "xmlns" || t2 === "xmlns"))
            throw new n.NamespaceError('Qualified name includes the "xmlns" prefix but the namespace is not the XMLNS namespace.');
          if (e2 === i.namespace.XMLNS && o2 !== "xmlns" && t2 !== "xmlns")
            throw new n.NamespaceError('Qualified name does not include the "xmlns" prefix but the namespace is the XMLNS namespace.');
          return [e2, o2, s];
        }, t.namespace_extractQName = function(e2) {
          a(e2);
          var t2 = e2.split(":");
          return [t2.length === 2 ? t2[0] : null, t2.length === 2 ? t2[1] : e2];
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.xml_isName = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2.charCodeAt(t2);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 === 58 || r2 === 95 || r2 >= 192 && r2 <= 214 || r2 >= 216 && r2 <= 246 || r2 >= 248 && r2 <= 767 || r2 >= 880 && r2 <= 893 || r2 >= 895 && r2 <= 8191 || r2 >= 8204 && r2 <= 8205 || r2 >= 8304 && r2 <= 8591 || r2 >= 11264 && r2 <= 12271 || r2 >= 12289 && r2 <= 55295 || r2 >= 63744 && r2 <= 64975 || r2 >= 65008 && r2 <= 65533) && (t2 === 0 || !(r2 === 45 || r2 === 46 || r2 >= 48 && r2 <= 57 || r2 === 183 || r2 >= 768 && r2 <= 879 || r2 >= 8255 && r2 <= 8256))) {
              if (r2 >= 55296 && r2 <= 56319 && t2 < e2.length - 1) {
                var n = e2.charCodeAt(t2 + 1);
                if (n >= 56320 && n <= 57343 && (t2++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 983039))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t.xml_isQName = function(e2) {
          for (var t2 = false, r2 = 0; r2 < e2.length; r2++) {
            var n = e2.charCodeAt(r2);
            if (!(n >= 97 && n <= 122 || n >= 65 && n <= 90 || n === 95 || n >= 192 && n <= 214 || n >= 216 && n <= 246 || n >= 248 && n <= 767 || n >= 880 && n <= 893 || n >= 895 && n <= 8191 || n >= 8204 && n <= 8205 || n >= 8304 && n <= 8591 || n >= 11264 && n <= 12271 || n >= 12289 && n <= 55295 || n >= 63744 && n <= 64975 || n >= 65008 && n <= 65533) && (r2 === 0 || !(n === 45 || n === 46 || n >= 48 && n <= 57 || n === 183 || n >= 768 && n <= 879 || n >= 8255 && n <= 8256))) {
              if (r2 === 0 || n !== 58) {
                if (n >= 55296 && n <= 56319 && r2 < e2.length - 1) {
                  var i = e2.charCodeAt(r2 + 1);
                  if (i >= 56320 && i <= 57343 && (r2++, (n = 1024 * (n - 55296) + i - 56320 + 65536) >= 65536 && n <= 983039))
                    continue;
                }
                return false;
              }
              if (t2)
                return false;
              if (r2 === e2.length - 1)
                return false;
              t2 = true;
            }
          }
          return true;
        }, t.xml_isLegalChar = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2.charCodeAt(t2);
            if (!(r2 === 9 || r2 === 10 || r2 === 13 || r2 >= 32 && r2 <= 55295 || r2 >= 57344 && r2 <= 65533)) {
              if (r2 >= 55296 && r2 <= 56319 && t2 < e2.length - 1) {
                var n = e2.charCodeAt(t2 + 1);
                if (n >= 56320 && n <= 57343 && (t2++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 1114111))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t.xml_isPubidChar = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2.charCodeAt(t2);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 >= 39 && r2 <= 59 || r2 === 32 || r2 === 13 || r2 === 10 || r2 >= 35 && r2 <= 37 || r2 === 33 || r2 === 61 || r2 === 63 || r2 === 64 || r2 === 95))
              return false;
          }
          return true;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(17);
        t.boundaryPoint_position = function e2(t2, r2) {
          var o = t2[0], a = t2[1], s = r2[0], u = r2[1];
          if (console.assert(i.tree_rootNode(o) === i.tree_rootNode(s), "Boundary points must share the same root node."), o === s)
            return a === u ? n.BoundaryPosition.Equal : a < u ? n.BoundaryPosition.Before : n.BoundaryPosition.After;
          if (i.tree_isFollowing(s, o)) {
            var l = e2([s, u], [o, a]);
            if (l === n.BoundaryPosition.Before)
              return n.BoundaryPosition.After;
            if (l === n.BoundaryPosition.After)
              return n.BoundaryPosition.Before;
          }
          if (i.tree_isAncestorOf(s, o)) {
            for (var c = s; !i.tree_isChildOf(o, c); )
              c._parent !== null && (c = c._parent);
            if (i.tree_index(c) < a)
              return n.BoundaryPosition.After;
          }
          return n.BoundaryPosition.Before;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(7), s = r(29), u = r(108), l = r(30), c = r(37), h = r(52);
        t.node_stringReplaceAll = function(e2, t2) {
          var r2 = null;
          e2 !== "" && (r2 = s.create_text(t2._nodeDocument, e2)), c.mutation_replaceAll(r2, t2);
        }, t.node_clone = function e2(t2, r2, a2) {
          var u2, p, f, d, m;
          if (r2 === void 0 && (r2 = null), a2 === void 0 && (a2 = false), r2 === null && (r2 = t2._nodeDocument), o.Guard.isElementNode(t2)) {
            m = h.element_createAnElement(r2, t2._localName, t2._namespace, t2._namespacePrefix, t2._is, false);
            try {
              for (var y = n(t2._attributeList), v = y.next(); !v.done; v = y.next()) {
                var _ = e2(v.value, r2);
                h.element_append(_, m);
              }
            } catch (e3) {
              u2 = { error: e3 };
            } finally {
              try {
                v && !v.done && (p = y.return) && p.call(y);
              } finally {
                if (u2)
                  throw u2.error;
              }
            }
          } else if (o.Guard.isDocumentNode(t2)) {
            var g = s.create_document();
            g._encoding = t2._encoding, g._contentType = t2._contentType, g._URL = t2._URL, g._origin = t2._origin, g._type = t2._type, g._mode = t2._mode, m = g;
          } else if (o.Guard.isDocumentTypeNode(t2)) {
            m = s.create_documentType(r2, t2._name, t2._publicId, t2._systemId);
          } else if (o.Guard.isAttrNode(t2)) {
            var b = s.create_attr(r2, t2.localName);
            b._namespace = t2._namespace, b._namespacePrefix = t2._namespacePrefix, b._value = t2._value, m = b;
          } else
            m = o.Guard.isExclusiveTextNode(t2) ? s.create_text(r2, t2._data) : o.Guard.isCDATASectionNode(t2) ? s.create_cdataSection(r2, t2._data) : o.Guard.isCommentNode(t2) ? s.create_comment(r2, t2._data) : o.Guard.isProcessingInstructionNode(t2) ? s.create_processingInstruction(r2, t2._target, t2._data) : o.Guard.isDocumentFragmentNode(t2) ? s.create_documentFragment(r2) : Object.create(t2);
          if (o.Guard.isDocumentNode(m) ? (m._nodeDocument = m, r2 = m) : m._nodeDocument = r2, i.dom.features.steps && l.dom_runCloningSteps(m, t2, r2, a2), a2)
            try {
              for (var x = n(t2._children), w = x.next(); !w.done; w = x.next()) {
                var E = e2(w.value, r2, true);
                c.mutation_append(E, m);
              }
            } catch (e3) {
              f = { error: e3 };
            } finally {
              try {
                w && !w.done && (d = x.return) && d.call(x);
              } finally {
                if (f)
                  throw f.error;
              }
            }
          return m;
        }, t.node_equals = function e2(t2, r2) {
          var i2, a2, s2, u2;
          if (t2._nodeType !== r2._nodeType)
            return false;
          if (o.Guard.isDocumentTypeNode(t2) && o.Guard.isDocumentTypeNode(r2)) {
            if (t2._name !== r2._name || t2._publicId !== r2._publicId || t2._systemId !== r2._systemId)
              return false;
          } else if (o.Guard.isElementNode(t2) && o.Guard.isElementNode(r2)) {
            if (t2._namespace !== r2._namespace || t2._namespacePrefix !== r2._namespacePrefix || t2._localName !== r2._localName || t2._attributeList.length !== r2._attributeList.length)
              return false;
          } else if (o.Guard.isAttrNode(t2) && o.Guard.isAttrNode(r2)) {
            if (t2._namespace !== r2._namespace || t2._localName !== r2._localName || t2._value !== r2._value)
              return false;
          } else if (o.Guard.isProcessingInstructionNode(t2) && o.Guard.isProcessingInstructionNode(r2)) {
            if (t2._target !== r2._target || t2._data !== r2._data)
              return false;
          } else if (o.Guard.isCharacterDataNode(t2) && o.Guard.isCharacterDataNode(r2) && t2._data !== r2._data)
            return false;
          if (o.Guard.isElementNode(t2) && o.Guard.isElementNode(r2)) {
            var l2 = {};
            try {
              for (var c2 = n(t2._attributeList), h2 = c2.next(); !h2.done; h2 = c2.next()) {
                l2[(d = h2.value)._localName] = d;
              }
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                h2 && !h2.done && (a2 = c2.return) && a2.call(c2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            try {
              for (var p = n(r2._attributeList), f = p.next(); !f.done; f = p.next()) {
                var d, m = f.value;
                if (!(d = l2[m._localName]))
                  return false;
                if (!e2(d, m))
                  return false;
              }
            } catch (e3) {
              s2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (u2 = p.return) && u2.call(p);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }
          if (t2._children.size !== r2._children.size)
            return false;
          for (var y = t2._children[Symbol.iterator](), v = r2._children[Symbol.iterator](), _ = y.next(), g = v.next(); !_.done && !g.done; ) {
            if (!e2(_.value, g.value))
              return false;
            _ = y.next(), g = v.next();
          }
          return true;
        }, t.node_listOfElementsWithQualifiedName = function(e2, t2) {
          return e2 === "*" ? s.create_htmlCollection(t2) : t2._nodeDocument._type === "html" ? s.create_htmlCollection(t2, function(t3) {
            return t3._namespace === a.namespace.HTML && t3._qualifiedName === e2.toLowerCase() || t3._namespace !== a.namespace.HTML && t3._qualifiedName === e2;
          }) : s.create_htmlCollection(t2, function(t3) {
            return t3._qualifiedName === e2;
          });
        }, t.node_listOfElementsWithNamespace = function(e2, t2, r2) {
          return e2 === "" && (e2 = null), e2 === "*" && t2 === "*" ? s.create_htmlCollection(r2) : e2 === "*" ? s.create_htmlCollection(r2, function(e3) {
            return e3._localName === t2;
          }) : t2 === "*" ? s.create_htmlCollection(r2, function(t3) {
            return t3._namespace === e2;
          }) : s.create_htmlCollection(r2, function(r3) {
            return r3._localName === t2 && r3._namespace === e2;
          });
        }, t.node_listOfElementsWithClassNames = function(e2, t2) {
          var r2 = u.orderedSet_parse(e2);
          if (r2.size === 0)
            return s.create_htmlCollection(t2, function() {
              return false;
            });
          var n2 = t2._nodeDocument._mode !== "quirks";
          return s.create_htmlCollection(t2, function(e3) {
            var t3 = e3.classList;
            return u.orderedSet_contains(t3._tokenSet, r2, n2);
          });
        }, t.node_locateANamespacePrefix = function e2(t2, r2) {
          if (t2._namespace === r2 && t2._namespacePrefix !== null)
            return t2._namespacePrefix;
          for (var n2 = 0; n2 < t2._attributeList.length; n2++) {
            var i2 = t2._attributeList[n2];
            if (i2._namespacePrefix === "xmlns" && i2._value === r2)
              return i2._localName;
          }
          return t2._parent && o.Guard.isElementNode(t2._parent) ? e2(t2._parent, r2) : null;
        }, t.node_locateANamespace = function e2(t2, r2) {
          if (o.Guard.isElementNode(t2)) {
            if (t2._namespace !== null && t2._namespacePrefix === r2)
              return t2._namespace;
            for (var n2 = 0; n2 < t2._attributeList.length; n2++) {
              var i2 = t2._attributeList[n2];
              if (i2._namespace === a.namespace.XMLNS && i2._namespacePrefix === "xmlns" && i2._localName === r2)
                return i2._value || null;
              if (r2 === null && i2._namespace === a.namespace.XMLNS && i2._namespacePrefix === null && i2._localName === "xmlns")
                return i2._value || null;
            }
            return t2.parentElement === null ? null : e2(t2.parentElement, r2);
          }
          return o.Guard.isDocumentNode(t2) ? t2.documentElement === null ? null : e2(t2.documentElement, r2) : o.Guard.isDocumentTypeNode(t2) || o.Guard.isDocumentFragmentNode(t2) ? null : o.Guard.isAttrNode(t2) ? t2._element === null ? null : e2(t2._element, r2) : t2._parent && o.Guard.isElementNode(t2._parent) ? e2(t2._parent, r2) : null;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(9), s = r(29), u = r(17), l = r(107), c = r(37);
        t.text_contiguousTextNodes = function(e2, t2) {
          var r2;
          return t2 === void 0 && (t2 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e2; r3 && o.Guard.isTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t2 && r3 === e2 && (r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t.text_contiguousExclusiveTextNodes = function(e2, t2) {
          var r2;
          return t2 === void 0 && (t2 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e2; r3 && o.Guard.isExclusiveTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t2 && r3 === e2 && (r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t.text_descendantTextContent = function(e2) {
          for (var t2 = "", r2 = u.tree_getFirstDescendantNode(e2, false, false, function(e3) {
            return o.Guard.isTextNode(e3);
          }); r2 !== null; )
            t2 += r2._data, r2 = u.tree_getNextDescendantNode(e2, r2, false, false, function(e3) {
              return o.Guard.isTextNode(e3);
            });
          return t2;
        }, t.text_split = function(e2, t2) {
          var r2, o2, h = e2._data.length;
          if (t2 > h)
            throw new a.IndexSizeError();
          var p = h - t2, f = l.characterData_substringData(e2, t2, p), d = s.create_text(e2._nodeDocument, f), m = e2._parent;
          if (m !== null) {
            c.mutation_insert(d, m, e2._nextSibling);
            try {
              for (var y = n(i.dom.rangeList), v = y.next(); !v.done; v = y.next()) {
                var _ = v.value;
                _._start[0] === e2 && _._start[1] > t2 && (_._start[0] = d, _._start[1] -= t2), _._end[0] === e2 && _._end[1] > t2 && (_._end[0] = d, _._end[1] -= t2);
                var g = u.tree_index(e2);
                _._start[0] === m && _._start[1] === g + 1 && _._start[1]++, _._end[0] === m && _._end[1] === g + 1 && _._end[1]++;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                v && !v.done && (o2 = y.return) && o2.call(y);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return l.characterData_replaceData(e2, t2, p, ""), d;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(41), o = r(24), a = r(48), s = [].join, u = i != Object, l = a("join", ",");
        n({ target: "Array", proto: true, forced: u || !l }, { join: function(e2) {
          return s.call(o(this), e2 === void 0 ? "," : e2);
        } });
      }, function(e, t, r) {
        var n = r(4), i = r(83), o = String.fromCharCode, a = String.fromCodePoint;
        n({ target: "String", stat: true, forced: !!a && a.length != 1 }, { fromCodePoint: function(e2) {
          for (var t2, r2 = [], n2 = arguments.length, a2 = 0; n2 > a2; ) {
            if (t2 = +arguments[a2++], i(t2, 1114111) !== t2)
              throw RangeError(t2 + " is not a valid code point");
            r2.push(t2 < 65536 ? o(t2) : o(55296 + ((t2 -= 65536) >> 10), t2 % 1024 + 56320));
          }
          return r2.join("");
        } });
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(111), o = function() {
          function e2(e3, t2) {
            this._options = { skipWhitespaceOnlyText: false }, this.err = { line: -1, col: -1, index: -1, str: "" }, this._str = e3, this._index = 0, this._length = e3.length, t2 && (this._options.skipWhitespaceOnlyText = t2.skipWhitespaceOnlyText || false);
          }
          return e2.prototype.nextToken = function() {
            if (this.eof())
              return { type: i.TokenType.EOF };
            var t2 = this.skipIfStartsWith("<") ? this.openBracket() : this.text();
            return this._options.skipWhitespaceOnlyText && t2.type === i.TokenType.Text && e2.isWhiteSpaceToken(t2) && (t2 = this.nextToken()), t2;
          }, e2.prototype.openBracket = function() {
            return this.skipIfStartsWith("?") ? this.skipIfStartsWith("xml") ? e2.isSpace(this._str[this._index]) ? this.declaration() : (this.seek(-3), this.pi()) : this.pi() : this.skipIfStartsWith("!") ? this.skipIfStartsWith("--") ? this.comment() : this.skipIfStartsWith("[CDATA[") ? this.cdata() : this.skipIfStartsWith("DOCTYPE") ? this.doctype() : void this.throwError("Invalid '!' in opening tag.") : this.skipIfStartsWith("/") ? this.closeTag() : this.openTag();
          }, e2.prototype.declaration = function() {
            for (var e3 = "", t2 = "", r2 = ""; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith("?>"))
                return { type: i.TokenType.Declaration, version: e3, encoding: t2, standalone: r2 };
              var o2 = n(this.attribute(), 2), a = o2[0], s = o2[1];
              a === "version" ? e3 = s : a === "encoding" ? t2 = s : a === "standalone" ? r2 = s : this.throwError("Invalid attribute name: " + a);
            }
            this.throwError("Missing declaration end symbol `?>`");
          }, e2.prototype.doctype = function() {
            var e3 = "", t2 = "";
            this.skipSpace();
            var r2 = this.takeUntil2("[", ">", true);
            return this.skipSpace(), this.skipIfStartsWith("PUBLIC") ? (e3 = this.quotedString(), t2 = this.quotedString()) : this.skipIfStartsWith("SYSTEM") && (t2 = this.quotedString()), this.skipSpace(), this.skipIfStartsWith("[") && (this.skipUntil("]"), this.skipIfStartsWith("]") || this.throwError("Missing end bracket of DTD internal subset")), this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing doctype end symbol `>`"), { type: i.TokenType.DocType, name: r2, pubId: e3, sysId: t2 };
          }, e2.prototype.pi = function() {
            var e3 = this.takeUntilStartsWith("?>", true);
            if (this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.skipSpace(), this.skipIfStartsWith("?>"))
              return { type: i.TokenType.PI, target: e3, data: "" };
            var t2 = this.takeUntilStartsWith("?>");
            return this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.seek(2), { type: i.TokenType.PI, target: e3, data: t2 };
          }, e2.prototype.text = function() {
            var e3 = this.takeUntil("<");
            return { type: i.TokenType.Text, data: e3 };
          }, e2.prototype.comment = function() {
            var e3 = this.takeUntilStartsWith("-->");
            return this.eof() && this.throwError("Missing comment end symbol `-->`"), this.seek(3), { type: i.TokenType.Comment, data: e3 };
          }, e2.prototype.cdata = function() {
            var e3 = this.takeUntilStartsWith("]]>");
            return this.eof() && this.throwError("Missing CDATA end symbol `]>`"), this.seek(3), { type: i.TokenType.CDATA, data: e3 };
          }, e2.prototype.openTag = function() {
            this.skipSpace();
            var e3 = this.takeUntil2(">", "/", true);
            if (this.skipSpace(), this.skipIfStartsWith(">"))
              return { type: i.TokenType.Element, name: e3, attributes: [], selfClosing: false };
            if (this.skipIfStartsWith("/>"))
              return { type: i.TokenType.Element, name: e3, attributes: [], selfClosing: true };
            for (var t2 = []; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith(">"))
                return { type: i.TokenType.Element, name: e3, attributes: t2, selfClosing: false };
              if (this.skipIfStartsWith("/>"))
                return { type: i.TokenType.Element, name: e3, attributes: t2, selfClosing: true };
              var r2 = this.attribute();
              t2.push(r2);
            }
            this.throwError("Missing opening element tag end symbol `>`");
          }, e2.prototype.closeTag = function() {
            this.skipSpace();
            var e3 = this.takeUntil(">", true);
            return this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing closing element tag end symbol `>`"), { type: i.TokenType.ClosingTag, name: e3 };
          }, e2.prototype.attribute = function() {
            this.skipSpace();
            var e3 = this.takeUntil("=", true);
            return this.skipSpace(), this.skipIfStartsWith("=") || this.throwError("Missing equals sign before attribute value"), [e3, this.quotedString()];
          }, e2.prototype.quotedString = function() {
            this.skipSpace();
            var t2 = this.take(1);
            e2.isQuote(t2) || this.throwError("Missing start quote character before quoted value");
            var r2 = this.takeUntil(t2);
            return this.skipIfStartsWith(t2) || this.throwError("Missing end quote character after quoted value"), r2;
          }, e2.prototype.eof = function() {
            return this._index >= this._length;
          }, e2.prototype.skipIfStartsWith = function(e3) {
            var t2 = e3.length;
            if (t2 === 1)
              return this._str[this._index] === e3 && (this._index++, true);
            for (var r2 = 0; r2 < t2; r2++)
              if (this._str[this._index + r2] !== e3[r2])
                return false;
            return this._index += t2, true;
          }, e2.prototype.seek = function(e3) {
            this._index += e3, this._index < 0 && (this._index = 0), this._index > this._length && (this._index = this._length);
          }, e2.prototype.skipSpace = function() {
            for (; !this.eof() && e2.isSpace(this._str[this._index]); )
              this._index++;
          }, e2.prototype.take = function(e3) {
            if (e3 === 1)
              return this._str[this._index++];
            var t2 = this._index;
            return this.seek(e3), this._str.slice(t2, this._index);
          }, e2.prototype.takeUntil = function(t2, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index; this._index < this._length; ) {
              var i2 = this._str[this._index];
              if (i2 === t2 || r2 && e2.isSpace(i2))
                break;
              this._index++;
            }
            return this._str.slice(n2, this._index);
          }, e2.prototype.takeUntil2 = function(t2, r2, n2) {
            n2 === void 0 && (n2 = false);
            for (var i2 = this._index; this._index < this._length; ) {
              var o2 = this._str[this._index];
              if (o2 === t2 || o2 === r2 || n2 && e2.isSpace(o2))
                break;
              this._index++;
            }
            return this._str.slice(i2, this._index);
          }, e2.prototype.takeUntilStartsWith = function(t2, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index, i2 = t2.length; this._index < this._length; ) {
              for (var o2 = true, a = 0; a < i2; a++) {
                var s = this._str[this._index + a], u = t2[a];
                if (r2 && e2.isSpace(s))
                  return this._str.slice(n2, this._index);
                if (s !== u) {
                  this._index++, o2 = false;
                  break;
                }
              }
              if (o2)
                return this._str.slice(n2, this._index);
            }
            return this._index = this._length, this._str.slice(n2);
          }, e2.prototype.skipUntil = function(e3) {
            for (; this._index < this._length; ) {
              if (this._str[this._index] === e3)
                break;
              this._index++;
            }
          }, e2.isWhiteSpaceToken = function(e3) {
            for (var t2 = e3.data, r2 = 0; r2 < t2.length; r2++) {
              var n2 = t2[r2];
              if (n2 !== " " && n2 !== "\n" && n2 !== "\r" && n2 !== "	" && n2 !== "\f")
                return false;
            }
            return true;
          }, e2.isSpace = function(e3) {
            return e3 === " " || e3 === "\n" || e3 === "\r" || e3 === "	";
          }, e2.isQuote = function(e3) {
            return e3 === '"' || e3 === "'";
          }, e2.prototype.throwError = function(e3) {
            for (var t2 = /\r\n|\r|\n/g, r2 = null, n2 = 0, i2 = 0, o2 = this._str.length; (r2 = t2.exec(this._str)) !== null && r2 !== null; )
              if (n2++, r2.index < this._index && (i2 = t2.lastIndex), r2.index > this._index) {
                o2 = r2.index;
                break;
              }
            throw this.err = { line: n2, col: this._index - i2, index: this._index, str: this._str.substring(i2, o2) }, new Error(e3 + "\nIndex: " + this.err.index + "\nLn: " + this.err.line + ", Col: " + this.err.col + "\nInput: " + this.err.str);
          }, e2.prototype[Symbol.iterator] = function() {
            return this._index = 0, { next: function() {
              var e3 = this.nextToken();
              return e3.type === i.TokenType.EOF ? { done: true, value: null } : { done: false, value: e3 };
            }.bind(this) };
          }, e2;
        }();
        t.XMLStringLexer = o;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ include: [r(182)] });
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ include: [r(113)], implicit: [r(289), r(290), r(291), r(292)] });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(91), i = r(1), o = r(3), a = r(77), s = r(109);
        function u(e2, t2) {
          var r2 = c(e2 === void 0 || l(e2) ? e2 : n.DefaultBuilderOptions), i2 = l(e2) ? t2 : e2, o2 = s.createDocument();
          h(o2, r2);
          var u2 = new a.XMLBuilderImpl(o2);
          return i2 !== void 0 && u2.ele(i2), u2;
        }
        function l(e2) {
          if (!i.isPlainObject(e2))
            return false;
          for (var t2 in e2)
            if (e2.hasOwnProperty(t2) && !n.XMLBuilderOptionKeys.has(t2))
              return false;
          return true;
        }
        function c(e2) {
          e2 === void 0 && (e2 = {});
          var t2 = i.applyDefaults(e2, n.DefaultBuilderOptions);
          if (t2.convert.att.length === 0 || t2.convert.ins.length === 0 || t2.convert.text.length === 0 || t2.convert.cdata.length === 0 || t2.convert.comment.length === 0)
            throw new Error("JS object converter strings cannot be zero length.");
          return t2;
        }
        function h(e2, t2, r2) {
          var n2 = e2;
          n2._xmlBuilderOptions = t2, n2._isFragment = r2;
        }
        t.builder = function(e2, t2) {
          var r2 = c(l(e2) ? e2 : n.DefaultBuilderOptions), s2 = o.Guard.isNode(e2) || i.isArray(e2) ? e2 : t2;
          if (s2 === void 0)
            throw new Error("Invalid arguments.");
          if (i.isArray(s2)) {
            for (var u2 = [], h2 = 0; h2 < s2.length; h2++) {
              var p = new a.XMLBuilderImpl(s2[h2]);
              p.set(r2), u2.push(p);
            }
            return u2;
          }
          var f = new a.XMLBuilderImpl(s2);
          return f.set(r2), f;
        }, t.create = u, t.fragment = function(e2, t2) {
          var r2 = c(e2 === void 0 || l(e2) ? e2 : n.DefaultBuilderOptions), i2 = l(e2) ? t2 : e2, o2 = s.createDocument();
          h(o2, r2, true);
          var u2 = new a.XMLBuilderImpl(o2.createDocumentFragment());
          return i2 !== void 0 && u2.ele(i2), u2;
        }, t.convert = function(e2, t2, r2) {
          var i2, o2, a2;
          return l(e2) && t2 !== void 0 ? (i2 = e2, o2 = t2, a2 = r2) : (i2 = n.DefaultBuilderOptions, o2 = e2, a2 = t2 || void 0), u(i2, o2).end(a2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(77);
        t.builder = n.builder, t.create = n.create, t.fragment = n.fragment, t.convert = n.convert, t.createCB = n.createCB, t.fragmentCB = n.fragmentCB;
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(191), r(192), r(194), r(64), r(19), r(198), r(199), r(89), r(201), r(65), r(20), r(66), r(22), r(23);
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(91), a = r(1), s = r(217), u = r(2), l = r(3), c = r(0), h = r(109), p = r(7), f = r(276), d = function() {
          function e2(e3) {
            this._domNode = e3;
          }
          return Object.defineProperty(e2.prototype, "node", { get: function() {
            return this._domNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "options", { get: function() {
            return this._options;
          }, enumerable: true, configurable: true }), e2.prototype.set = function(e3) {
            return this._options = a.applyDefaults(a.applyDefaults(this._options, e3, true), o.DefaultBuilderOptions), this;
          }, e2.prototype.ele = function(t2, r2, i2) {
            var o2, s2, u2, l2, p2, d2;
            if (a.isObject(t2))
              return new f.ObjectReader(this._options).parse(this, t2);
            if (t2 !== null && /^\s*</.test(t2))
              return new f.XMLReader(this._options).parse(this, t2);
            if (t2 !== null && /^\s*[\{\[]/.test(t2))
              return new f.JSONReader(this._options).parse(this, t2);
            if (t2 !== null && /^(\s*|(#.*)|(%.*))*---/.test(t2))
              return new f.YAMLReader(this._options).parse(this, t2);
            if ((t2 === null || a.isString(t2)) && a.isString(r2))
              l2 = (o2 = n([t2, r2, i2], 3))[0], p2 = o2[1], d2 = o2[2];
            else {
              if (t2 === null)
                throw new Error("Element name cannot be null. " + this._debugInfo());
              l2 = (s2 = n([void 0, t2, a.isObject(r2) ? r2 : void 0], 3))[0], p2 = s2[1], d2 = s2[2];
            }
            if (d2 && (d2 = a.getValue(d2)), l2 = (u2 = n(this._extractNamespace(h.sanitizeInput(l2, this._options.invalidCharReplacement), h.sanitizeInput(p2, this._options.invalidCharReplacement), true), 2))[0], p2 = u2[1], l2 === void 0) {
              var m = n(c.namespace_extractQName(p2), 1)[0];
              l2 = this.node.lookupNamespaceURI(m);
            }
            var y = l2 != null ? this._doc.createElementNS(l2, p2) : this._doc.createElement(p2);
            this.node.appendChild(y);
            var v = new e2(y), _ = this._doc.doctype;
            if (y === this._doc.documentElement && _ !== null) {
              var g = this._doc.implementation.createDocumentType(this._doc.documentElement.tagName, _.publicId, _.systemId);
              this._doc.replaceChild(g, _);
            }
            return d2 && !a.isEmpty(d2) && v.att(d2), v;
          }, e2.prototype.remove = function() {
            var e3 = this.up();
            return e3.node.removeChild(this.node), e3;
          }, e2.prototype.att = function(e3, t2, r2) {
            var i2, o2, s2, u2, f2, d2, m = this;
            if (a.isMap(e3) || a.isObject(e3))
              return a.forEachObject(e3, function(e4, t3) {
                return m.att(e4, t3);
              }, this), this;
            if (e3 != null && (e3 = a.getValue(e3 + "")), t2 != null && (t2 = a.getValue(t2 + "")), r2 != null && (r2 = a.getValue(r2 + "")), e3 !== null && !a.isString(e3) || !a.isString(t2) || r2 !== null && !a.isString(r2)) {
              if (!a.isString(e3) || t2 != null && !a.isString(t2))
                throw new Error("Attribute name and value not specified. " + this._debugInfo());
              u2 = (o2 = n([void 0, e3, t2], 3))[0], f2 = o2[1], d2 = o2[2];
            } else
              u2 = (i2 = n([e3, t2, r2], 3))[0], f2 = i2[1], d2 = i2[2];
            if (this._options.keepNullAttributes && d2 == null)
              d2 = "";
            else if (d2 == null)
              return this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be assigned to an element node.");
            var y = this.node;
            u2 = (s2 = n(this._extractNamespace(u2, f2, false), 2))[0], f2 = s2[1], f2 = h.sanitizeInput(f2, this._options.invalidCharReplacement), u2 = h.sanitizeInput(u2, this._options.invalidCharReplacement), d2 = h.sanitizeInput(d2, this._options.invalidCharReplacement);
            var v = n(c.namespace_extractQName(f2), 2), _ = v[0], g = v[1], b = n(c.namespace_extractQName(y.prefix ? y.prefix + ":" + y.localName : y.localName), 1)[0], x = null;
            return _ === "xmlns" ? (u2 = p.namespace.XMLNS, y.namespaceURI === null && b === g && (x = d2)) : _ === null && g === "xmlns" && b === null && (u2 = p.namespace.XMLNS, x = d2), x !== null && (this._updateNamespace(x), y = this.node), u2 !== void 0 ? y.setAttributeNS(u2, f2, d2) : y.setAttribute(f2, d2), this;
          }, e2.prototype.removeAtt = function(e3, t2) {
            var r2, n2, i2 = this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be removed from an element node.");
            if (e3 = a.getValue(e3), t2 !== void 0 && (t2 = a.getValue(t2)), e3 !== null && t2 === void 0)
              n2 = e3;
            else {
              if (e3 !== null && !a.isString(e3) || t2 === void 0)
                throw new Error("Attribute namespace must be a string. " + this._debugInfo());
              r2 = e3, n2 = t2;
            }
            return a.isArray(n2) || a.isSet(n2) ? a.forEachArray(n2, function(e4) {
              return r2 === void 0 ? i2.removeAtt(e4) : i2.removeAtt(r2, e4);
            }, this) : r2 !== void 0 ? (n2 = h.sanitizeInput(n2, this._options.invalidCharReplacement), r2 = h.sanitizeInput(r2, this._options.invalidCharReplacement), this.node.removeAttributeNS(r2, n2)) : (n2 = h.sanitizeInput(n2, this._options.invalidCharReplacement), this.node.removeAttribute(n2)), this;
          }, e2.prototype.txt = function(e3) {
            if (e3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e3 = "";
            }
            var t2 = this._doc.createTextNode(h.sanitizeInput(e3, this._options.invalidCharReplacement));
            return this.node.appendChild(t2), this;
          }, e2.prototype.com = function(e3) {
            if (e3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e3 = "";
            }
            var t2 = this._doc.createComment(h.sanitizeInput(e3, this._options.invalidCharReplacement));
            return this.node.appendChild(t2), this;
          }, e2.prototype.dat = function(e3) {
            if (e3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e3 = "";
            }
            var t2 = this._doc.createCDATASection(h.sanitizeInput(e3, this._options.invalidCharReplacement));
            return this.node.appendChild(t2), this;
          }, e2.prototype.ins = function(e3, t2) {
            var r2 = this;
            if (t2 === void 0 && (t2 = ""), t2 == null) {
              if (!this._options.keepNullNodes)
                return this;
              t2 = "";
            }
            if (a.isArray(e3) || a.isSet(e3))
              a.forEachArray(e3, function(e4) {
                var t3 = (e4 += "").indexOf(" "), n3 = t3 === -1 ? e4 : e4.substr(0, t3), i2 = t3 === -1 ? "" : e4.substr(t3 + 1);
                r2.ins(n3, i2);
              }, this);
            else if (a.isMap(e3) || a.isObject(e3))
              a.forEachObject(e3, function(e4, t3) {
                return r2.ins(e4, t3);
              }, this);
            else {
              var n2 = this._doc.createProcessingInstruction(h.sanitizeInput(e3, this._options.invalidCharReplacement), h.sanitizeInput(t2, this._options.invalidCharReplacement));
              this.node.appendChild(n2);
            }
            return this;
          }, e2.prototype.dec = function(e3) {
            return this._options.version = e3.version || "1.0", this._options.encoding = e3.encoding, this._options.standalone = e3.standalone, this;
          }, e2.prototype.dtd = function(e3) {
            var t2 = h.sanitizeInput(e3 && e3.name || (this._doc.documentElement ? this._doc.documentElement.tagName : "ROOT"), this._options.invalidCharReplacement), r2 = h.sanitizeInput(e3 && e3.pubID || "", this._options.invalidCharReplacement), n2 = h.sanitizeInput(e3 && e3.sysID || "", this._options.invalidCharReplacement);
            if (this._doc.documentElement !== null && t2 !== this._doc.documentElement.tagName)
              throw new Error("DocType name does not match document element name.");
            var i2 = this._doc.implementation.createDocumentType(t2, r2, n2);
            return this._doc.doctype !== null ? this._doc.replaceChild(i2, this._doc.doctype) : this._doc.insertBefore(i2, this._doc.documentElement), this;
          }, e2.prototype.import = function(t2) {
            var r2, o2, a2 = this._domNode, s2 = this._doc, u2 = t2.node;
            if (l.Guard.isDocumentNode(u2)) {
              var h2 = u2.documentElement;
              if (h2 === null)
                throw new Error("Imported document has no document element node. " + this._debugInfo());
              var p2 = s2.importNode(h2, true);
              a2.appendChild(p2);
              var f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
              new e2(p2)._updateNamespace(d2);
            } else if (l.Guard.isDocumentFragmentNode(u2))
              try {
                for (var m = i(u2.childNodes), y = m.next(); !y.done; y = m.next()) {
                  var v = y.value;
                  p2 = s2.importNode(v, true);
                  if (a2.appendChild(p2), l.Guard.isElementNode(p2)) {
                    f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
                    new e2(p2)._updateNamespace(d2);
                  }
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  y && !y.done && (o2 = m.return) && o2.call(m);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            else {
              p2 = s2.importNode(u2, true);
              if (a2.appendChild(p2), l.Guard.isElementNode(p2)) {
                f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
                new e2(p2)._updateNamespace(d2);
              }
            }
            return this;
          }, e2.prototype.doc = function() {
            if (this._doc._isFragment) {
              for (var t2 = this.node; t2 && t2.nodeType !== u.NodeType.DocumentFragment; )
                t2 = t2.parentNode;
              if (t2 === null)
                throw new Error("Node has no parent node while searching for document fragment ancestor. " + this._debugInfo());
              return new e2(t2);
            }
            return new e2(this._doc);
          }, e2.prototype.root = function() {
            var t2 = this._doc.documentElement;
            if (!t2)
              throw new Error("Document root element is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.up = function() {
            var t2 = this._domNode.parentNode;
            if (!t2)
              throw new Error("Parent node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.prev = function() {
            var t2 = this._domNode.previousSibling;
            if (!t2)
              throw new Error("Previous sibling node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.next = function() {
            var t2 = this._domNode.nextSibling;
            if (!t2)
              throw new Error("Next sibling node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.first = function() {
            var t2 = this._domNode.firstChild;
            if (!t2)
              throw new Error("First child node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.last = function() {
            var t2 = this._domNode.lastChild;
            if (!t2)
              throw new Error("Last child node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.each = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
              t2.call(i2, new e2(o2[0]), o2[1], o2[2]), o2 = a2;
            }
            return this;
          }, e2.prototype.map = function(e3, t2, r2, n2) {
            t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false);
            var i2 = [];
            return this.each(function(t3, r3, o2) {
              return i2.push(e3.call(n2, t3, r3, o2));
            }, t2, r2), i2;
          }, e2.prototype.reduce = function(e3, t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            var o2 = t2;
            return this.each(function(t3, r3, n3) {
              return o2 = e3.call(i2, o2, t3, r3, n3);
            }, r2, n2), o2;
          }, e2.prototype.find = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = new e2(o2[0]);
              if (t2.call(i2, a2, o2[1], o2[2]))
                return a2;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
          }, e2.prototype.filter = function(e3, t2, r2, n2) {
            t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false);
            var i2 = [];
            return this.each(function(t3, r3, o2) {
              e3.call(n2, t3, r3, o2) && i2.push(t3);
            }, t2, r2), i2;
          }, e2.prototype.every = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = new e2(o2[0]);
              if (!t2.call(i2, a2, o2[1], o2[2]))
                return false;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return true;
          }, e2.prototype.some = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = new e2(o2[0]);
              if (t2.call(i2, a2, o2[1], o2[2]))
                return true;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return false;
          }, e2.prototype.toArray = function(e3, t2) {
            e3 === void 0 && (e3 = false), t2 === void 0 && (t2 = false);
            var r2 = [];
            return this.each(function(e4) {
              return r2.push(e4);
            }, e3, t2), r2;
          }, e2.prototype.toString = function(e3) {
            return (e3 = e3 || {}).format === void 0 && (e3.format = "xml"), this._serialize(e3);
          }, e2.prototype.toObject = function(e3) {
            return (e3 = e3 || {}).format === void 0 && (e3.format = "object"), this._serialize(e3);
          }, e2.prototype.end = function(e3) {
            return (e3 = e3 || {}).format === void 0 && (e3.format = "xml"), this.doc()._serialize(e3);
          }, e2.prototype._getFirstDescendantNode = function(e3, t2, r2) {
            return t2 ? [this._domNode, 0, 0] : r2 ? this._getNextDescendantNode(e3, e3, r2, 0, 0) : [this._domNode.firstChild, 0, 1];
          }, e2.prototype._getNextDescendantNode = function(e3, t2, r2, n2, i2) {
            if (!r2)
              return e3 === t2 ? [t2.firstChild, 0, i2 + 1] : [t2.nextSibling, n2 + 1, i2];
            if (t2.firstChild)
              return [t2.firstChild, 0, i2 + 1];
            if (t2 === e3)
              return [null, -1, -1];
            if (t2.nextSibling)
              return [t2.nextSibling, n2 + 1, i2];
            for (var o2 = t2.parentNode; o2 && o2 !== e3; ) {
              if (o2.nextSibling)
                return [o2.nextSibling, c.tree_index(o2.nextSibling), i2 - 1];
              o2 = o2.parentNode, i2--;
            }
            return [null, -1, -1];
          }, e2.prototype._serialize = function(e3) {
            if (e3.format === "xml")
              return new s.XMLWriter(this._options, e3).serialize(this.node);
            if (e3.format === "map")
              return new s.MapWriter(this._options, e3).serialize(this.node);
            if (e3.format === "object")
              return new s.ObjectWriter(this._options, e3).serialize(this.node);
            if (e3.format === "json")
              return new s.JSONWriter(this._options, e3).serialize(this.node);
            if (e3.format === "yaml")
              return new s.YAMLWriter(this._options, e3).serialize(this.node);
            throw new Error("Invalid writer format: " + e3.format + ". " + this._debugInfo());
          }, e2.prototype._extractNamespace = function(e3, t2, r2) {
            var n2 = t2.indexOf("@");
            if (n2 > 0 && (e3 === void 0 && (e3 = t2.slice(n2 + 1)), t2 = t2.slice(0, n2)), e3 === void 0)
              e3 = r2 ? this._options.defaultNamespace.ele : this._options.defaultNamespace.att;
            else if (e3 !== null && e3[0] === "@") {
              var i2 = e3.slice(1);
              if ((e3 = this._options.namespaceAlias[i2]) === void 0)
                throw new Error("Namespace alias `" + i2 + "` is not defined. " + this._debugInfo());
            }
            return [e3, t2];
          }, e2.prototype._updateNamespace = function(t2) {
            var r2, o2, a2, s2, u2 = this._domNode;
            if (l.Guard.isElementNode(u2) && t2 !== null && u2.namespaceURI !== t2) {
              var h2 = n(c.namespace_extractQName(u2.prefix ? u2.prefix + ":" + u2.localName : u2.localName), 2), p2 = h2[0], f2 = h2[1], d2 = c.create_element(this._doc, f2, t2, p2);
              try {
                for (var m = i(u2.attributes), y = m.next(); !y.done; y = m.next()) {
                  var v = y.value, _ = v.prefix ? v.prefix + ":" + v.localName : v.localName, g = n(c.namespace_extractQName(_), 1)[0], b = v.namespaceURI;
                  b === null && g !== null && (b = u2.lookupNamespaceURI(g)), b === null ? d2.setAttribute(_, v.value) : d2.setAttributeNS(b, _, v.value);
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  y && !y.done && (o2 = m.return) && o2.call(m);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              var x = u2.parentNode;
              if (x === null)
                throw new Error("Parent node is null." + this._debugInfo());
              x.replaceChild(d2, u2), this._domNode = d2;
              try {
                for (var w = i(u2.childNodes), E = w.next(); !E.done; E = w.next()) {
                  var D = E.value.cloneNode(true);
                  if (d2.appendChild(D), l.Guard.isElementNode(D)) {
                    var S = n(c.namespace_extractQName(D.prefix ? D.prefix + ":" + D.localName : D.localName), 1)[0], C = d2.lookupNamespaceURI(S);
                    new e2(D)._updateNamespace(C);
                  }
                }
              } catch (e3) {
                a2 = { error: e3 };
              } finally {
                try {
                  E && !E.done && (s2 = w.return) && s2.call(w);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
            }
          }, Object.defineProperty(e2.prototype, "_doc", { get: function() {
            var e3 = this.node;
            if (l.Guard.isDocumentNode(e3))
              return e3;
            var t2 = e3.ownerDocument;
            if (!t2)
              throw new Error("Owner document is null. " + this._debugInfo());
            return t2;
          }, enumerable: true, configurable: true }), e2.prototype._debugInfo = function(e3) {
            var t2 = this.node, r2 = t2.parentNode;
            e3 = e3 || t2.nodeName;
            var n2 = r2 ? r2.nodeName : "";
            return n2 ? "node: <" + e3 + ">, parent: <" + n2 + ">" : "node: <" + e3 + ">";
          }, Object.defineProperty(e2.prototype, "_options", { get: function() {
            var e3 = this._doc;
            if (e3._xmlBuilderOptions === void 0)
              throw new Error("Builder options is not set.");
            return e3._xmlBuilderOptions;
          }, set: function(e3) {
            this._doc._xmlBuilderOptions = e3;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.XMLBuilderImpl = d;
      }, function(e, t, r) {
        var n = r(11), i = r(117), o = n.WeakMap;
        e.exports = typeof o == "function" && /native code/.test(i(o));
      }, function(e, t, r) {
        var n = r(46), i = r(82), o = r(85), a = r(18);
        e.exports = n("Reflect", "ownKeys") || function(e2) {
          var t2 = i.f(a(e2)), r2 = o.f;
          return r2 ? t2.concat(r2(e2)) : t2;
        };
      }, function(e, t, r) {
        var n = r(16), i = r(15), o = r(18), a = r(61);
        e.exports = n ? Object.defineProperties : function(e2, t2) {
          o(e2);
          for (var r2, n2 = a(t2), s = n2.length, u = 0; s > u; )
            i.f(e2, r2 = n2[u++], t2[r2]);
          return e2;
        };
      }, function(e, t, r) {
        var n = r(46);
        e.exports = n("document", "documentElement");
      }, function(e, t, r) {
        var n = r(24), i = r(82).f, o = {}.toString, a = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        e.exports.f = function(e2) {
          return a && o.call(e2) == "[object Window]" ? function(e3) {
            try {
              return i(e3);
            } catch (e4) {
              return a.slice();
            }
          }(e2) : i(n(e2));
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).every, o = r(48), a = r(28), s = o("every"), u = a("every");
        n({ target: "Array", proto: true, forced: !s || !u }, { every: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).filter, o = r(63), a = r(28), s = o("filter"), u = a("filter");
        n({ target: "Array", proto: true, forced: !s || !u }, { filter: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        var n = r(46);
        e.exports = n("navigator", "userAgent") || "";
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).find, o = r(130), a = r(28), s = true, u = a("find");
        "find" in [] && Array(1).find(function() {
          s = false;
        }), n({ target: "Array", proto: true, forced: s || !u }, { find: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } }), o("find");
      }, function(e, t, r) {
        "use strict";
        var n = r(131).IteratorPrototype, i = r(60), o = r(40), a = r(62), s = r(49), u = function() {
          return this;
        };
        e.exports = function(e2, t2, r2) {
          var l = t2 + " Iterator";
          return e2.prototype = i(n, { next: o(1, r2) }), a(e2, l, false, true), s[l] = u, e2;
        };
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !n(function() {
          function e2() {
          }
          return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
        });
      }, function(e, t, r) {
        var n = r(13);
        e.exports = function(e2) {
          if (!n(e2) && e2 !== null)
            throw TypeError("Can't set " + String(e2) + " as a prototype");
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).map, o = r(63), a = r(28), s = o("map"), u = a("map");
        n({ target: "Array", proto: true, forced: !s || !u }, { map: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(200).left, o = r(48), a = r(28), s = o("reduce"), u = a("reduce", { 1: 0 });
        n({ target: "Array", proto: true, forced: !s || !u }, { reduce: function(e2) {
          return i(this, e2, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        var n = r(127), i = r(27), o = r(41), a = r(26), s = function(e2) {
          return function(t2, r2, s2, u) {
            n(r2);
            var l = i(t2), c = o(l), h = a(l.length), p = e2 ? h - 1 : 0, f = e2 ? -1 : 1;
            if (s2 < 2)
              for (; ; ) {
                if (p in c) {
                  u = c[p], p += f;
                  break;
                }
                if (p += f, e2 ? p < 0 : h <= p)
                  throw TypeError("Reduce of empty array with no initial value");
              }
            for (; e2 ? p >= 0 : h > p; p += f)
              p in c && (u = r2(u, c[p], p, l));
            return u;
          };
        };
        e.exports = { left: s(false), right: s(true) };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).some, o = r(48), a = r(28), s = o("some"), u = a("some");
        n({ target: "Array", proto: true, forced: !s || !u }, { some: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(90), i = r(135);
        e.exports = n ? {}.toString : function() {
          return "[object " + i(this) + "]";
        };
      }, function(e, t) {
        e.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !n(function() {
          return Object.isExtensible(Object.preventExtensions({}));
        });
      }, function(e, t, r) {
        var n = r(5), i = r(49), o = n("iterator"), a = Array.prototype;
        e.exports = function(e2) {
          return e2 !== void 0 && (i.Array === e2 || a[o] === e2);
        };
      }, function(e, t, r) {
        var n = r(135), i = r(49), o = r(5)("iterator");
        e.exports = function(e2) {
          if (e2 != null)
            return e2[o] || e2["@@iterator"] || i[n(e2)];
        };
      }, function(e, t, r) {
        var n = r(18);
        e.exports = function(e2, t2, r2, i) {
          try {
            return i ? t2(n(r2)[0], r2[1]) : t2(r2);
          } catch (t3) {
            var o = e2.return;
            throw o !== void 0 && n(o.call(e2)), t3;
          }
        };
      }, function(e, t, r) {
        var n = r(5)("iterator"), i = false;
        try {
          var o = 0, a = { next: function() {
            return { done: !!o++ };
          }, return: function() {
            i = true;
          } };
          a[n] = function() {
            return this;
          }, Array.from(a, function() {
            throw 2;
          });
        } catch (e2) {
        }
        e.exports = function(e2, t2) {
          if (!t2 && !i)
            return false;
          var r2 = false;
          try {
            var o2 = {};
            o2[n] = function() {
              return { next: function() {
                return { done: r2 = true };
              } };
            }, e2(o2);
          } catch (e3) {
          }
          return r2;
        };
      }, function(e, t, r) {
        var n = r(13), i = r(133);
        e.exports = function(e2, t2, r2) {
          var o, a;
          return i && typeof (o = t2.constructor) == "function" && o !== r2 && n(a = o.prototype) && a !== r2.prototype && i(e2, a), e2;
        };
      }, function(e, t, r) {
        var n = r(25);
        e.exports = function(e2, t2, r2) {
          for (var i in t2)
            n(e2, i, t2[i], r2);
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(46), i = r(15), o = r(5), a = r(16), s = o("species");
        e.exports = function(e2) {
          var t2 = n(e2), r2 = i.f;
          a && t2 && !t2[s] && r2(t2, s, { configurable: true, get: function() {
            return this;
          } });
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s(0), throw: s(1), return: s(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s(o3) {
            return function(s2) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a.label++, { value: o4[1], done: false };
                      case 5:
                        a.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a.ops.pop(), a.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a.label < i2[1]) {
                          a.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a.label < i2[2]) {
                          a.label = i2[2], a.ops.push(o4);
                          break;
                        }
                        i2[2] && a.ops.pop(), a.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s2]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function() {
          function e2(e3) {
            e3 === void 0 && (e3 = 1e3), this._items = new Set(), this._limit = e3;
          }
          return e2.prototype.add = function(e3) {
            if (this._items.add(e3), this._items.size > this._limit) {
              var t2 = this._items.values().next();
              t2.done || this._items.delete(t2.value);
            }
            return this;
          }, e2.prototype.delete = function(e3) {
            return this._items.delete(e3);
          }, e2.prototype.has = function(e3) {
            return this._items.has(e3);
          }, e2.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e2.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e2.prototype.forEach = function(e3, t2) {
            var r2 = this;
            this._items.forEach(function(n2) {
              return e3.call(t2, n2, n2, r2);
            });
          }, e2.prototype.keys = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.keys())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.values = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.values())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.entries = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.entries())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype[Symbol.iterator] = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items)];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
            return "FixedSizeSet";
          }, enumerable: true, configurable: true }), e2;
        }();
        t.FixedSizeSet = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s(0), throw: s(1), return: s(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s(o3) {
            return function(s2) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a.label++, { value: o4[1], done: false };
                      case 5:
                        a.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a.ops.pop(), a.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a.label < i2[1]) {
                          a.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a.label < i2[2]) {
                          a.label = i2[2], a.ops.push(o4);
                          break;
                        }
                        i2[2] && a.ops.pop(), a.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s2]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function() {
          function e2(e3) {
            e3 === void 0 && (e3 = 1e3), this._items = new Map(), this._limit = e3;
          }
          return e2.prototype.get = function(e3) {
            return this._items.get(e3);
          }, e2.prototype.set = function(e3, t2) {
            if (this._items.set(e3, t2), this._items.size > this._limit) {
              var r2 = this._items.keys().next();
              r2.done || this._items.delete(r2.value);
            }
          }, e2.prototype.delete = function(e3) {
            return this._items.delete(e3);
          }, e2.prototype.has = function(e3) {
            return this._items.has(e3);
          }, e2.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e2.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e2.prototype.forEach = function(e3, t2) {
            this._items.forEach(function(r2, n2) {
              return e3.call(t2, n2, r2);
            });
          }, e2.prototype.keys = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.keys())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.values = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.values())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.entries = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.entries())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype[Symbol.iterator] = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items)];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
            return "ObjectCache";
          }, enumerable: true, configurable: true }), e2;
        }();
        t.ObjectCache = o;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3) {
            e3 === void 0 && (e3 = 1e3), this._items = new Map(), this._limit = e3;
          }
          return e2.prototype.check = function(e3, t2) {
            if (this._items.get(e3) === t2)
              return true;
            if (this._items.get(t2) === e3)
              return false;
            var r2 = Math.random() < 0.5;
            if (r2 ? this._items.set(e3, t2) : this._items.set(t2, e3), this._items.size > this._limit) {
              var n2 = this._items.keys().next();
              n2.done || this._items.delete(n2.value);
            }
            return r2;
          }, e2;
        }();
        t.CompareCache = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3) {
            this._initialized = false, this._value = void 0, this._initFunc = e3;
          }
          return Object.defineProperty(e2.prototype, "value", { get: function() {
            return this._initialized || (this._value = this._initFunc(), this._initialized = true), this._value;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.Lazy = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3) {
            this._pointer = 0, this._chars = Array.from(e3), this._length = this._chars.length;
          }
          return Object.defineProperty(e2.prototype, "eof", { get: function() {
            return this._pointer >= this._length;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._length;
          }, enumerable: true, configurable: true }), e2.prototype.codePoint = function() {
            if (this._codePoint === void 0)
              if (this.eof)
                this._codePoint = -1;
              else {
                var e3 = this._chars[this._pointer].codePointAt(0);
                this._codePoint = e3 !== void 0 ? e3 : -1;
              }
            return this._codePoint;
          }, e2.prototype.c = function() {
            return this._c === void 0 && (this._c = this.eof ? "" : this._chars[this._pointer]), this._c;
          }, e2.prototype.remaining = function() {
            return this._remaining === void 0 && (this._remaining = this.eof ? "" : this._chars.slice(this._pointer + 1).join("")), this._remaining;
          }, e2.prototype.substring = function() {
            return this._substring === void 0 && (this._substring = this.eof ? "" : this._chars.slice(this._pointer).join("")), this._substring;
          }, Object.defineProperty(e2.prototype, "pointer", { get: function() {
            return this._pointer;
          }, set: function(e3) {
            e3 !== this._pointer && (this._pointer = e3, this._codePoint = void 0, this._c = void 0, this._remaining = void 0, this._substring = void 0);
          }, enumerable: true, configurable: true }), e2;
        }();
        t.StringWalker = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(218);
        t.MapWriter = n.MapWriter;
        var i = r(258);
        t.XMLWriter = i.XMLWriter;
        var o = r(67);
        t.ObjectWriter = o.ObjectWriter;
        var a = r(260);
        t.JSONWriter = a.JSONWriter;
        var s = r(261);
        t.YAMLWriter = s.YAMLWriter;
      }, function(e, t, r) {
        "use strict";
        r(19), r(219), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(1), a = r(67), s = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._writerOptions = o.applyDefaults(r2, { format: "map", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            var t3 = o.applyDefaults(this._writerOptions, { format: "object", wellFormed: false, verbose: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3);
            return this._convertObject(r2);
          }, t2.prototype._convertObject = function(e3) {
            if (o.isArray(e3)) {
              for (var t3 = 0; t3 < e3.length; t3++)
                e3[t3] = this._convertObject(e3[t3]);
              return e3;
            }
            if (o.isObject(e3)) {
              var r2 = new Map();
              for (var n2 in e3)
                r2.set(n2, this._convertObject(e3[n2]));
              return r2;
            }
            return e3;
          }, t2;
        }(r(50).BaseWriter);
        t.MapWriter = s;
      }, function(e, t, r) {
        "use strict";
        var n = r(139), i = r(143);
        e.exports = n("Map", function(e2) {
          return function() {
            return e2(this, arguments.length ? arguments[0] : void 0);
          };
        }, i);
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(8), o = r(59), a = r(13), s = r(27), u = r(26), l = r(134), c = r(128), h = r(63), p = r(5), f = r(129), d = p("isConcatSpreadable"), m = f >= 51 || !i(function() {
          var e2 = [];
          return e2[d] = false, e2.concat()[0] !== e2;
        }), y = h("concat"), v = function(e2) {
          if (!a(e2))
            return false;
          var t2 = e2[d];
          return t2 !== void 0 ? !!t2 : o(e2);
        };
        n({ target: "Array", proto: true, forced: !m || !y }, { concat: function(e2) {
          var t2, r2, n2, i2, o2, a2 = s(this), h2 = c(a2, 0), p2 = 0;
          for (t2 = -1, n2 = arguments.length; t2 < n2; t2++)
            if (v(o2 = t2 === -1 ? a2 : arguments[t2])) {
              if (p2 + (i2 = u(o2.length)) > 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              for (r2 = 0; r2 < i2; r2++, p2++)
                r2 in o2 && l(h2, p2, o2[r2]);
            } else {
              if (p2 >= 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              l(h2, p2++, o2);
            }
          return h2.length = p2, h2;
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(8);
        function i(e2, t2) {
          return RegExp(e2, t2);
        }
        t.UNSUPPORTED_Y = n(function() {
          var e2 = i("a", "y");
          return e2.lastIndex = 2, e2.exec("abcd") != null;
        }), t.BROKEN_CARET = n(function() {
          var e2 = i("^r", "gy");
          return e2.lastIndex = 2, e2.exec("str") != null;
        });
      }, function(e, t, r) {
        var n = r(223);
        e.exports = function(e2) {
          if (n(e2))
            throw TypeError("The method doesn't accept regular expressions");
          return e2;
        };
      }, function(e, t, r) {
        var n = r(13), i = r(42), o = r(5)("match");
        e.exports = function(e2) {
          var t2;
          return n(e2) && ((t2 = e2[o]) !== void 0 ? !!t2 : i(e2) == "RegExp");
        };
      }, function(e, t, r) {
        var n = r(5)("match");
        e.exports = function(e2) {
          var t2 = /./;
          try {
            "/./"[e2](t2);
          } catch (r2) {
            try {
              return t2[n] = false, "/./"[e2](t2);
            } catch (e3) {
            }
          }
          return false;
        };
      }, function(e, t, r) {
        "use strict";
        r(68);
        var n = r(25), i = r(8), o = r(5), a = r(93), s = r(21), u = o("species"), l = !i(function() {
          var e2 = /./;
          return e2.exec = function() {
            var e3 = [];
            return e3.groups = { a: "7" }, e3;
          }, "".replace(e2, "$<a>") !== "7";
        }), c = "a".replace(/./, "$0") === "$0", h = o("replace"), p = !!/./[h] && /./[h]("a", "$0") === "", f = !i(function() {
          var e2 = /(?:)/, t2 = e2.exec;
          e2.exec = function() {
            return t2.apply(this, arguments);
          };
          var r2 = "ab".split(e2);
          return r2.length !== 2 || r2[0] !== "a" || r2[1] !== "b";
        });
        e.exports = function(e2, t2, r2, h2) {
          var d = o(e2), m = !i(function() {
            var t3 = {};
            return t3[d] = function() {
              return 7;
            }, ""[e2](t3) != 7;
          }), y = m && !i(function() {
            var t3 = false, r3 = /a/;
            return e2 === "split" && ((r3 = {}).constructor = {}, r3.constructor[u] = function() {
              return r3;
            }, r3.flags = "", r3[d] = /./[d]), r3.exec = function() {
              return t3 = true, null;
            }, r3[d](""), !t3;
          });
          if (!m || !y || e2 === "replace" && (!l || !c || p) || e2 === "split" && !f) {
            var v = /./[d], _ = r2(d, ""[e2], function(e3, t3, r3, n2, i2) {
              return t3.exec === a ? m && !i2 ? { done: true, value: v.call(t3, r3, n2) } : { done: true, value: e3.call(r3, t3, n2) } : { done: false };
            }, { REPLACE_KEEPS_$0: c, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: p }), g = _[0], b = _[1];
            n(String.prototype, e2, g), n(RegExp.prototype, d, t2 == 2 ? function(e3, t3) {
              return b.call(e3, this, t3);
            } : function(e3) {
              return b.call(e3, this);
            });
          }
          h2 && s(RegExp.prototype[d], "sham", true);
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(137).charAt;
        e.exports = function(e2, t2, r2) {
          return t2 + (r2 ? n(e2, t2).length : 1);
        };
      }, function(e, t, r) {
        var n = r(42), i = r(93);
        e.exports = function(e2, t2) {
          var r2 = e2.exec;
          if (typeof r2 == "function") {
            var o = r2.call(e2, t2);
            if (typeof o != "object")
              throw TypeError("RegExp exec method returned something other than an Object or null");
            return o;
          }
          if (n(e2) !== "RegExp")
            throw TypeError("RegExp#exec called on incompatible receiver");
          return i.call(e2, t2);
        };
      }, function(e, t, r) {
        "use strict";
        (function(e2) {
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(96);
          t.forgivingBase64Encode = function(t2) {
            return e2.from(t2).toString("base64");
          }, t.forgivingBase64Decode = function(t2) {
            return t2 === "" ? "" : ((t2 = t2.replace(n.ASCIIWhiteSpace, "")).length % 4 == 0 && (t2.endsWith("==") ? t2 = t2.substr(0, t2.length - 2) : t2.endsWith("=") && (t2 = t2.substr(0, t2.length - 1))), t2.length % 4 == 1 ? null : /[0-9A-Za-z+/]/.test(t2) ? e2.from(t2, "base64").toString("utf8") : null);
          };
        }).call(this, r(145).Buffer);
      }, function(e, t, r) {
        "use strict";
        t.byteLength = function(e2) {
          var t2 = l(e2), r2 = t2[0], n2 = t2[1];
          return 3 * (r2 + n2) / 4 - n2;
        }, t.toByteArray = function(e2) {
          var t2, r2, n2 = l(e2), a2 = n2[0], s2 = n2[1], u2 = new o(function(e3, t3, r3) {
            return 3 * (t3 + r3) / 4 - r3;
          }(0, a2, s2)), c2 = 0, h = s2 > 0 ? a2 - 4 : a2;
          for (r2 = 0; r2 < h; r2 += 4)
            t2 = i[e2.charCodeAt(r2)] << 18 | i[e2.charCodeAt(r2 + 1)] << 12 | i[e2.charCodeAt(r2 + 2)] << 6 | i[e2.charCodeAt(r2 + 3)], u2[c2++] = t2 >> 16 & 255, u2[c2++] = t2 >> 8 & 255, u2[c2++] = 255 & t2;
          s2 === 2 && (t2 = i[e2.charCodeAt(r2)] << 2 | i[e2.charCodeAt(r2 + 1)] >> 4, u2[c2++] = 255 & t2);
          s2 === 1 && (t2 = i[e2.charCodeAt(r2)] << 10 | i[e2.charCodeAt(r2 + 1)] << 4 | i[e2.charCodeAt(r2 + 2)] >> 2, u2[c2++] = t2 >> 8 & 255, u2[c2++] = 255 & t2);
          return u2;
        }, t.fromByteArray = function(e2) {
          for (var t2, r2 = e2.length, i2 = r2 % 3, o2 = [], a2 = 0, s2 = r2 - i2; a2 < s2; a2 += 16383)
            o2.push(c(e2, a2, a2 + 16383 > s2 ? s2 : a2 + 16383));
          i2 === 1 ? (t2 = e2[r2 - 1], o2.push(n[t2 >> 2] + n[t2 << 4 & 63] + "==")) : i2 === 2 && (t2 = (e2[r2 - 2] << 8) + e2[r2 - 1], o2.push(n[t2 >> 10] + n[t2 >> 4 & 63] + n[t2 << 2 & 63] + "="));
          return o2.join("");
        };
        for (var n = [], i = [], o = typeof Uint8Array != "undefined" ? Uint8Array : Array, a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, u = a.length; s < u; ++s)
          n[s] = a[s], i[a.charCodeAt(s)] = s;
        function l(e2) {
          var t2 = e2.length;
          if (t2 % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
          var r2 = e2.indexOf("=");
          return r2 === -1 && (r2 = t2), [r2, r2 === t2 ? 0 : 4 - r2 % 4];
        }
        function c(e2, t2, r2) {
          for (var i2, o2, a2 = [], s2 = t2; s2 < r2; s2 += 3)
            i2 = (e2[s2] << 16 & 16711680) + (e2[s2 + 1] << 8 & 65280) + (255 & e2[s2 + 2]), a2.push(n[(o2 = i2) >> 18 & 63] + n[o2 >> 12 & 63] + n[o2 >> 6 & 63] + n[63 & o2]);
          return a2.join("");
        }
        i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;
      }, function(e, t) {
        t.read = function(e2, t2, r, n, i) {
          var o, a, s = 8 * i - n - 1, u = (1 << s) - 1, l = u >> 1, c = -7, h = r ? i - 1 : 0, p = r ? -1 : 1, f = e2[t2 + h];
          for (h += p, o = f & (1 << -c) - 1, f >>= -c, c += s; c > 0; o = 256 * o + e2[t2 + h], h += p, c -= 8)
            ;
          for (a = o & (1 << -c) - 1, o >>= -c, c += n; c > 0; a = 256 * a + e2[t2 + h], h += p, c -= 8)
            ;
          if (o === 0)
            o = 1 - l;
          else {
            if (o === u)
              return a ? NaN : 1 / 0 * (f ? -1 : 1);
            a += Math.pow(2, n), o -= l;
          }
          return (f ? -1 : 1) * a * Math.pow(2, o - n);
        }, t.write = function(e2, t2, r, n, i, o) {
          var a, s, u, l = 8 * o - i - 1, c = (1 << l) - 1, h = c >> 1, p = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = n ? 0 : o - 1, d = n ? 1 : -1, m = t2 < 0 || t2 === 0 && 1 / t2 < 0 ? 1 : 0;
          for (t2 = Math.abs(t2), isNaN(t2) || t2 === 1 / 0 ? (s = isNaN(t2) ? 1 : 0, a = c) : (a = Math.floor(Math.log(t2) / Math.LN2), t2 * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (t2 += a + h >= 1 ? p / u : p * Math.pow(2, 1 - h)) * u >= 2 && (a++, u /= 2), a + h >= c ? (s = 0, a = c) : a + h >= 1 ? (s = (t2 * u - 1) * Math.pow(2, i), a += h) : (s = t2 * Math.pow(2, h - 1) * Math.pow(2, i), a = 0)); i >= 8; e2[r + f] = 255 & s, f += d, s /= 256, i -= 8)
            ;
          for (a = a << i | s, l += i; l > 0; e2[r + f] = 255 & a, f += d, a /= 256, l -= 8)
            ;
          e2[r + f - d] |= 128 * m;
        };
      }, function(e, t) {
        var r = {}.toString;
        e.exports = Array.isArray || function(e2) {
          return r.call(e2) == "[object Array]";
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(1);
        function o(e2) {
          var t2, r2;
          if (e2 === null || i.isString(e2) || i.isNumber(e2))
            return e2;
          if (i.isArray(e2)) {
            var a = new Array();
            try {
              for (var s = n(e2), u = s.next(); !u.done; u = s.next()) {
                var l = u.value;
                a.push(o(l));
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                u && !u.done && (r2 = s.return) && r2.call(s);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return a;
          }
          if (i.isObject(e2)) {
            a = new Map();
            for (var c in e2)
              if (e2.hasOwnProperty(c)) {
                var h = e2[c];
                a.set(c, o(h));
              }
            return a;
          }
          return e2;
        }
        t.parseJSONFromBytes = function(e2) {
          var t2 = i.utf8Decode(e2);
          return JSON.parse.call(void 0, t2);
        }, t.serializeJSONToBytes = function(e2) {
          var t2 = JSON.stringify.call(void 0, e2);
          return i.utf8Encode(t2);
        }, t.parseJSONIntoInfraValues = function(e2) {
          return o(JSON.parse.call(void 0, e2));
        }, t.convertAJSONDerivedJavaScriptValueToAnInfraValue = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s2(o3) {
            return function(s3) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a2; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a2.label++, { value: o4[1], done: false };
                      case 5:
                        a2.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a2 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a2.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(o4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a2);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s3]);
            };
          }
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        }, a = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(1);
        t.append = function(e2, t2) {
          e2.push(t2);
        }, t.extend = function(e2, t2) {
          e2.push.apply(e2, o(t2));
        }, t.prepend = function(e2, t2) {
          e2.unshift(t2);
        }, t.replace = function(e2, t2, r2) {
          var n2, i2, o2 = 0;
          try {
            for (var u = a(e2), l = u.next(); !l.done; l = u.next()) {
              var c = l.value;
              if (s.isFunction(t2))
                t2.call(null, c) && (e2[o2] = r2);
              else if (c === t2)
                return void (e2[o2] = r2);
              o2++;
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (i2 = u.return) && i2.call(u);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
        }, t.insert = function(e2, t2, r2) {
          e2.splice(r2, 0, t2);
        }, t.remove = function(e2, t2) {
          for (var r2 = e2.length; r2--; ) {
            var n2 = e2[r2];
            if (s.isFunction(t2))
              t2.call(null, n2) && e2.splice(r2, 1);
            else if (n2 === t2)
              return void e2.splice(r2, 1);
          }
        }, t.empty = function(e2) {
          e2.length = 0;
        }, t.contains = function(e2, t2) {
          var r2, n2;
          try {
            for (var i2 = a(e2), o2 = i2.next(); !o2.done; o2 = i2.next()) {
              var u = o2.value;
              if (s.isFunction(t2)) {
                if (t2.call(null, u))
                  return true;
              } else if (u === t2)
                return true;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              o2 && !o2.done && (n2 = i2.return) && n2.call(i2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t.size = function(e2, t2) {
          var r2, n2;
          if (t2 === void 0)
            return e2.length;
          var i2 = 0;
          try {
            for (var o2 = a(e2), s2 = o2.next(); !s2.done; s2 = o2.next()) {
              var u = s2.value;
              t2.call(null, u) && i2++;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return i2;
        }, t.isEmpty = function(e2) {
          return e2.length === 0;
        }, t.forEach = function(e2, t2) {
          var r2, i2, o2, s2, u, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t2 !== void 0 ? [3, 2] : [5, a(e2)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = a(e2), i2 = r2.next(), n2.label = 3;
              case 3:
                return i2.done ? [3, 6] : (o2 = i2.value, t2.call(null, o2) ? [4, o2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return i2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s2 = n2.sent(), u = { error: s2 }, [3, 9];
              case 8:
                try {
                  i2 && !i2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u)
                    throw u.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t.clone = function(e2) {
          return new (Array.bind.apply(Array, o([void 0], e2)))();
        }, t.sortInAscendingOrder = function(e2, t2) {
          return e2.sort(function(e3, r2) {
            return t2.call(null, e3, r2) ? -1 : 1;
          });
        }, t.sortInDescendingOrder = function(e2, t2) {
          return e2.sort(function(e3, r2) {
            return t2.call(null, e3, r2) ? 1 : -1;
          });
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s2(o3) {
            return function(s3) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a2; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a2.label++, { value: o4[1], done: false };
                      case 5:
                        a2.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a2 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a2.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(o4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a2);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s3]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, a = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(o(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(1);
        t.get = function(e2, t2) {
          return e2.get(t2);
        }, t.set = function(e2, t2, r2) {
          e2.set(t2, r2);
        }, t.remove = function(e2, t2) {
          var r2, n2, o2, a2;
          if (s.isFunction(t2)) {
            var u = [];
            try {
              for (var l = i(e2), c = l.next(); !c.done; c = l.next()) {
                var h = c.value;
                t2.call(null, h) && u.push(h[0]);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                c && !c.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i(u), f = p.next(); !f.done; f = p.next()) {
                var d = f.value;
                e2.delete(d);
              }
            } catch (e3) {
              o2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (a2 = p.return) && a2.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e2.delete(t2);
        }, t.contains = function(e2, t2) {
          var r2, n2;
          if (s.isFunction(t2)) {
            try {
              for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var u = a2.value;
                if (t2.call(null, u))
                  return true;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return false;
          }
          return e2.has(t2);
        }, t.keys = function(e2) {
          return new Set(e2.keys());
        }, t.values = function(e2) {
          return a(e2.values());
        }, t.size = function(e2, t2) {
          var r2, n2;
          if (t2 === void 0)
            return e2.size;
          var o2 = 0;
          try {
            for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              var u = s2.value;
              t2.call(null, u) && o2++;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.isEmpty = function(e2) {
          return e2.size === 0;
        }, t.forEach = function(e2, t2) {
          var r2, o2, a2, s2, u, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t2 !== void 0 ? [3, 2] : [5, i(e2)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i(e2), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a2 = o2.value, t2.call(null, a2) ? [4, a2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s2 = n2.sent(), u = { error: s2 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u)
                    throw u.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t.clone = function(e2) {
          return new Map(e2);
        }, t.sortInAscendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? -1 : 1;
          }), new Map(r2);
        }, t.sortInDescendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? 1 : -1;
          }), new Map(r2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.HTML = "http://www.w3.org/1999/xhtml", t.XML = "http://www.w3.org/XML/1998/namespace", t.XMLNS = "http://www.w3.org/2000/xmlns/", t.MathML = "http://www.w3.org/1998/Math/MathML", t.SVG = "http://www.w3.org/2000/svg", t.XLink = "http://www.w3.org/1999/xlink";
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.enqueue = function(e2, t2) {
          e2.push(t2);
        }, t.dequeue = function(e2) {
          return e2.shift() || null;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s2(o3) {
            return function(s3) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a2; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a2.label++, { value: o4[1], done: false };
                      case 5:
                        a2.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a2 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a2.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(o4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a2);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s3]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, a = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(o(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(1);
        function u(e2, t2) {
          var r2, n2;
          try {
            for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value;
              if (!t2.has(s2))
                return false;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return true;
        }
        t.append = function(e2, t2) {
          e2.add(t2);
        }, t.extend = function(e2, t2) {
          t2.forEach(e2.add, e2);
        }, t.prepend = function(e2, t2) {
          var r2 = new Set(e2);
          e2.clear(), e2.add(t2), r2.forEach(e2.add, e2);
        }, t.replace = function(e2, t2, r2) {
          var n2, o2, a2 = new Set();
          try {
            for (var u2 = i(e2), l = u2.next(); !l.done; l = u2.next()) {
              var c = l.value;
              s.isFunction(t2) ? t2.call(null, c) ? a2.add(r2) : a2.add(c) : c === t2 ? a2.add(r2) : a2.add(c);
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (o2 = u2.return) && o2.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e2.clear(), a2.forEach(e2.add, e2);
        }, t.insert = function(e2, t2, r2) {
          var n2, o2, a2 = new Set(), s2 = 0;
          try {
            for (var u2 = i(e2), l = u2.next(); !l.done; l = u2.next()) {
              var c = l.value;
              s2 === r2 && a2.add(t2), a2.add(c), s2++;
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (o2 = u2.return) && o2.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e2.clear(), a2.forEach(e2.add, e2);
        }, t.remove = function(e2, t2) {
          var r2, n2, o2, a2;
          if (s.isFunction(t2)) {
            var u2 = [];
            try {
              for (var l = i(e2), c = l.next(); !c.done; c = l.next()) {
                var h = c.value;
                t2.call(null, h) && u2.push(h);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                c && !c.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i(u2), f = p.next(); !f.done; f = p.next()) {
                var d = f.value;
                e2.delete(d);
              }
            } catch (e3) {
              o2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (a2 = p.return) && a2.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e2.delete(t2);
        }, t.empty = function(e2) {
          e2.clear();
        }, t.contains = function(e2, t2) {
          var r2, n2;
          if (!s.isFunction(t2))
            return e2.has(t2);
          try {
            for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var u2 = a2.value;
              if (t2.call(null, u2))
                return true;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t.size = function(e2, t2) {
          var r2, n2;
          if (t2 === void 0)
            return e2.size;
          var o2 = 0;
          try {
            for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              var u2 = s2.value;
              t2.call(null, u2) && o2++;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.isEmpty = function(e2) {
          return e2.size === 0;
        }, t.forEach = function(e2, t2) {
          var r2, o2, a2, s2, u2, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t2 !== void 0 ? [3, 2] : [5, i(e2)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i(e2), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a2 = o2.value, t2.call(null, a2) ? [4, a2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s2 = n2.sent(), u2 = { error: s2 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u2)
                    throw u2.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t.clone = function(e2) {
          return new Set(e2);
        }, t.sortInAscendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? -1 : 1;
          }), new Set(r2);
        }, t.sortInDescendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? 1 : -1;
          }), new Set(r2);
        }, t.isSubsetOf = u, t.isSupersetOf = function(e2, t2) {
          return u(t2, e2);
        }, t.intersection = function(e2, t2) {
          var r2, n2, o2 = new Set();
          try {
            for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              var u2 = s2.value;
              t2.has(u2) && o2.add(u2);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.union = function(e2, t2) {
          var r2 = new Set(e2);
          return t2.forEach(r2.add, r2), r2;
        }, t.range = function(e2, t2) {
          for (var r2 = new Set(), n2 = e2; n2 <= t2; n2++)
            r2.add(n2);
          return r2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.push = function(e2, t2) {
          e2.push(t2);
        }, t.pop = function(e2) {
          return e2.pop() || null;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(96), o = r(147), a = r(146), s = r(1);
        function u(e2, t2) {
          for (var r2 = 0; ; ) {
            var n2 = r2 < e2.length ? e2.charCodeAt(r2) : null, i2 = r2 < t2.length ? t2.charCodeAt(r2) : null;
            if (n2 === null)
              return true;
            if (n2 !== i2)
              return false;
            r2++;
          }
        }
        function l(e2) {
          var t2, r2, i2 = Array.from(e2), o2 = new Uint8Array(i2.length), a2 = 0;
          try {
            for (var s2 = n(e2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
              var l2 = u2.value.codePointAt(0);
              console.assert(l2 !== void 0 && l2 <= 255, "isomorphicEncode requires string bytes to be less than or equal to 0x00FF."), l2 !== void 0 && l2 <= 255 && (o2[a2++] = l2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return o2;
        }
        function c(e2) {
          return /^[\u0000-\u007F]*$/.test(e2);
        }
        function h(e2) {
          var t2, r2, i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value, u2 = s2.codePointAt(0);
              i2 += u2 !== void 0 && u2 >= 65 && u2 <= 90 ? String.fromCodePoint(u2 + 32) : s2;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function p(e2) {
          return e2.replace(/^[\t\n\f\r ]+/, "").replace(/[\t\n\f\r ]+$/, "");
        }
        function f(e2, t2, r2) {
          if (!s.isArray(t2))
            return f(e2, Array.from(t2), r2);
          for (var n2 = ""; r2.position < t2.length && e2.call(null, t2[r2.position]); )
            n2 += t2[r2.position], r2.position++;
          return n2;
        }
        function d(e2, t2) {
          f(function(e3) {
            return i.ASCIIWhiteSpace.test(e3);
          }, e2, t2);
        }
        t.isCodeUnitPrefix = u, t.isCodeUnitLessThan = function(e2, t2) {
          if (u(t2, e2))
            return false;
          if (u(e2, t2))
            return true;
          for (var r2 = 0; r2 < Math.min(e2.length, t2.length); r2++) {
            var n2 = e2.charCodeAt(r2), i2 = t2.charCodeAt(r2);
            if (n2 !== i2)
              return n2 < i2;
          }
          return false;
        }, t.isomorphicEncode = l, t.isASCIIString = c, t.asciiLowercase = h, t.asciiUppercase = function(e2) {
          var t2, r2, i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value, u2 = s2.codePointAt(0);
              i2 += u2 !== void 0 && u2 >= 97 && u2 <= 122 ? String.fromCodePoint(u2 - 32) : s2;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }, t.asciiCaseInsensitiveMatch = function(e2, t2) {
          return h(e2) === h(t2);
        }, t.asciiEncode = function(e2) {
          return console.assert(c(e2), "asciiEncode requires an ASCII string."), l(e2);
        }, t.asciiDecode = function(e2) {
          var t2, r2;
          try {
            for (var i2 = n(e2), s2 = i2.next(); !s2.done; s2 = i2.next()) {
              var u2 = s2.value;
              console.assert(a.isASCIIByte(u2), "asciiDecode requires an ASCII byte sequence.");
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return o.isomorphicDecode(e2);
        }, t.stripNewlines = function(e2) {
          return e2.replace(/[\n\r]/g, "");
        }, t.normalizeNewlines = function(e2) {
          return e2.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        }, t.stripLeadingAndTrailingASCIIWhitespace = p, t.stripAndCollapseASCIIWhitespace = function(e2) {
          return p(e2.replace(/[\t\n\f\r ]{2,}/g, " "));
        }, t.collectASequenceOfCodePoints = f, t.skipASCIIWhitespace = d, t.strictlySplit = function e2(t2, r2) {
          if (!s.isArray(t2))
            return e2(Array.from(t2), r2);
          var n2 = { position: 0 }, i2 = [], o2 = f(function(e3) {
            return r2 !== e3;
          }, t2, n2);
          for (i2.push(o2); n2.position < t2.length; )
            console.assert(t2[n2.position] === r2, "strictlySplit found no delimiter in input string."), n2.position++, o2 = f(function(e3) {
              return r2 !== e3;
            }, t2, n2), i2.push(o2);
          return i2;
        }, t.splitAStringOnASCIIWhitespace = function e2(t2) {
          if (!s.isArray(t2))
            return e2(Array.from(t2));
          var r2 = { position: 0 }, n2 = [];
          for (d(t2, r2); r2.position < t2.length; ) {
            var o2 = f(function(e3) {
              return !i.ASCIIWhiteSpace.test(e3);
            }, t2, r2);
            n2.push(o2), d(t2, r2);
          }
          return n2;
        }, t.splitAStringOnCommas = function e2(t2) {
          if (!s.isArray(t2))
            return e2(Array.from(t2));
          for (var r2 = { position: 0 }, n2 = []; r2.position < t2.length; ) {
            var i2 = f(function(e3) {
              return e3 !== ",";
            }, t2, r2);
            n2.push(p(i2)), r2.position < t2.length && (console.assert(t2[r2.position] === ",", "splitAStringOnCommas found no delimiter in input string."), r2.position++);
          }
          return n2;
        }, t.concatenate = function(e2, t2) {
          return t2 === void 0 && (t2 = ""), e2.length === 0 ? "" : e2.join(t2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(97);
        t.abort_add = function(e2, t2) {
          t2._abortedFlag || t2._abortAlgorithms.add(e2);
        }, t.abort_remove = function(e2, t2) {
          t2._abortAlgorithms.delete(e2);
        }, t.abort_signalAbort = function(e2) {
          var t2, r2;
          if (!e2._abortedFlag) {
            e2._abortedFlag = true;
            try {
              for (var o = n(e2._abortAlgorithms), a = o.next(); !a.done; a = o.next()) {
                a.value.call(e2);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a && !a.done && (r2 = o.return) && r2.call(o);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            e2._abortAlgorithms.clear(), i.event_fireAnEvent("abort", e2);
          }
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(150), i = function() {
          function e2() {
          }
          return e2.asNode = function(e3) {
            if (n.Guard.isNode(e3))
              return e3;
            throw new Error("Invalid object. Node expected.");
          }, e2;
        }();
        t.Cast = i;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "size", { get: function() {
            return 0;
          }, enumerable: true, configurable: true }), e2.prototype.add = function(e3) {
            throw new Error("Cannot add to an empty set.");
          }, e2.prototype.clear = function() {
          }, e2.prototype.delete = function(e3) {
            return false;
          }, e2.prototype.forEach = function(e3, t2) {
          }, e2.prototype.has = function(e3) {
            return false;
          }, e2.prototype[Symbol.iterator] = function() {
            return new i();
          }, e2.prototype.entries = function() {
            return new i();
          }, e2.prototype.keys = function() {
            return new i();
          }, e2.prototype.values = function() {
            return new i();
          }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
            return "EmptySet";
          }, enumerable: true, configurable: true }), e2;
        }();
        t.EmptySet = n;
        var i = function() {
          function e2() {
          }
          return e2.prototype[Symbol.iterator] = function() {
            return this;
          }, e2.prototype.next = function() {
            return { done: true, value: null };
          }, e2;
        }();
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
          e2[e2.SchemeStart = 0] = "SchemeStart", e2[e2.Scheme = 1] = "Scheme", e2[e2.NoScheme = 2] = "NoScheme", e2[e2.SpecialRelativeOrAuthority = 3] = "SpecialRelativeOrAuthority", e2[e2.PathOrAuthority = 4] = "PathOrAuthority", e2[e2.Relative = 5] = "Relative", e2[e2.RelativeSlash = 6] = "RelativeSlash", e2[e2.SpecialAuthoritySlashes = 7] = "SpecialAuthoritySlashes", e2[e2.SpecialAuthorityIgnoreSlashes = 8] = "SpecialAuthorityIgnoreSlashes", e2[e2.Authority = 9] = "Authority", e2[e2.Host = 10] = "Host", e2[e2.Hostname = 11] = "Hostname", e2[e2.Port = 12] = "Port", e2[e2.File = 13] = "File", e2[e2.FileSlash = 14] = "FileSlash", e2[e2.FileHost = 15] = "FileHost", e2[e2.PathStart = 16] = "PathStart", e2[e2.Path = 17] = "Path", e2[e2.CannotBeABaseURLPath = 18] = "CannotBeABaseURLPath", e2[e2.Query = 19] = "Query", e2[e2.Fragment = 20] = "Fragment";
        }(t.ParserState || (t.ParserState = {})), t.OpaqueOrigin = ["", "", null, null];
      }, function(e, t, r) {
        "use strict";
        var n = r(245), i = r(247);
        function o() {
          this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
        }
        t.parse = g, t.resolve = function(e2, t2) {
          return g(e2, false, true).resolve(t2);
        }, t.resolveObject = function(e2, t2) {
          return e2 ? g(e2, false, true).resolveObject(t2) : t2;
        }, t.format = function(e2) {
          i.isString(e2) && (e2 = g(e2));
          return e2 instanceof o ? e2.format() : o.prototype.format.call(e2);
        }, t.Url = o;
        var a = /^([a-z0-9.+-]+:)/i, s = /:[0-9]*$/, u = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]), c = ["'"].concat(l), h = ["%", "/", "?", ";", "#"].concat(c), p = ["/", "?", "#"], f = /^[+a-z0-9A-Z_-]{0,63}$/, d = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, m = { javascript: true, "javascript:": true }, y = { javascript: true, "javascript:": true }, v = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, _ = r(248);
        function g(e2, t2, r2) {
          if (e2 && i.isObject(e2) && e2 instanceof o)
            return e2;
          var n2 = new o();
          return n2.parse(e2, t2, r2), n2;
        }
        o.prototype.parse = function(e2, t2, r2) {
          if (!i.isString(e2))
            throw new TypeError("Parameter 'url' must be a string, not " + typeof e2);
          var o2 = e2.indexOf("?"), s2 = o2 !== -1 && o2 < e2.indexOf("#") ? "?" : "#", l2 = e2.split(s2);
          l2[0] = l2[0].replace(/\\/g, "/");
          var g2 = e2 = l2.join(s2);
          if (g2 = g2.trim(), !r2 && e2.split("#").length === 1) {
            var b = u.exec(g2);
            if (b)
              return this.path = g2, this.href = g2, this.pathname = b[1], b[2] ? (this.search = b[2], this.query = t2 ? _.parse(this.search.substr(1)) : this.search.substr(1)) : t2 && (this.search = "", this.query = {}), this;
          }
          var x = a.exec(g2);
          if (x) {
            var w = (x = x[0]).toLowerCase();
            this.protocol = w, g2 = g2.substr(x.length);
          }
          if (r2 || x || g2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var E = g2.substr(0, 2) === "//";
            !E || x && y[x] || (g2 = g2.substr(2), this.slashes = true);
          }
          if (!y[x] && (E || x && !v[x])) {
            for (var D, S, C = -1, A = 0; A < p.length; A++) {
              (N = g2.indexOf(p[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            (S = C === -1 ? g2.lastIndexOf("@") : g2.lastIndexOf("@", C)) !== -1 && (D = g2.slice(0, S), g2 = g2.slice(S + 1), this.auth = decodeURIComponent(D)), C = -1;
            for (A = 0; A < h.length; A++) {
              var N;
              (N = g2.indexOf(h[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            C === -1 && (C = g2.length), this.host = g2.slice(0, C), g2 = g2.slice(C), this.parseHost(), this.hostname = this.hostname || "";
            var T = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
            if (!T)
              for (var O = this.hostname.split(/\./), F = (A = 0, O.length); A < F; A++) {
                var k = O[A];
                if (k && !k.match(f)) {
                  for (var P = "", I = 0, L = k.length; I < L; I++)
                    k.charCodeAt(I) > 127 ? P += "x" : P += k[I];
                  if (!P.match(f)) {
                    var M = O.slice(0, A), B = O.slice(A + 1), j = k.match(d);
                    j && (M.push(j[1]), B.unshift(j[2])), B.length && (g2 = "/" + B.join(".") + g2), this.hostname = M.join(".");
                    break;
                  }
                }
              }
            this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T || (this.hostname = n.toASCII(this.hostname));
            var R = this.port ? ":" + this.port : "", z = this.hostname || "";
            this.host = z + R, this.href += this.host, T && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), g2[0] !== "/" && (g2 = "/" + g2));
          }
          if (!m[w])
            for (A = 0, F = c.length; A < F; A++) {
              var U = c[A];
              if (g2.indexOf(U) !== -1) {
                var G = encodeURIComponent(U);
                G === U && (G = escape(U)), g2 = g2.split(U).join(G);
              }
            }
          var X = g2.indexOf("#");
          X !== -1 && (this.hash = g2.substr(X), g2 = g2.slice(0, X));
          var q = g2.indexOf("?");
          if (q !== -1 ? (this.search = g2.substr(q), this.query = g2.substr(q + 1), t2 && (this.query = _.parse(this.query)), g2 = g2.slice(0, q)) : t2 && (this.search = "", this.query = {}), g2 && (this.pathname = g2), v[w] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
            R = this.pathname || "";
            var W = this.search || "";
            this.path = R + W;
          }
          return this.href = this.format(), this;
        }, o.prototype.format = function() {
          var e2 = this.auth || "";
          e2 && (e2 = (e2 = encodeURIComponent(e2)).replace(/%3A/i, ":"), e2 += "@");
          var t2 = this.protocol || "", r2 = this.pathname || "", n2 = this.hash || "", o2 = false, a2 = "";
          this.host ? o2 = e2 + this.host : this.hostname && (o2 = e2 + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (o2 += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (a2 = _.stringify(this.query));
          var s2 = this.search || a2 && "?" + a2 || "";
          return t2 && t2.substr(-1) !== ":" && (t2 += ":"), this.slashes || (!t2 || v[t2]) && o2 !== false ? (o2 = "//" + (o2 || ""), r2 && r2.charAt(0) !== "/" && (r2 = "/" + r2)) : o2 || (o2 = ""), n2 && n2.charAt(0) !== "#" && (n2 = "#" + n2), s2 && s2.charAt(0) !== "?" && (s2 = "?" + s2), t2 + o2 + (r2 = r2.replace(/[?#]/g, function(e3) {
            return encodeURIComponent(e3);
          })) + (s2 = s2.replace("#", "%23")) + n2;
        }, o.prototype.resolve = function(e2) {
          return this.resolveObject(g(e2, false, true)).format();
        }, o.prototype.resolveObject = function(e2) {
          if (i.isString(e2)) {
            var t2 = new o();
            t2.parse(e2, false, true), e2 = t2;
          }
          for (var r2 = new o(), n2 = Object.keys(this), a2 = 0; a2 < n2.length; a2++) {
            var s2 = n2[a2];
            r2[s2] = this[s2];
          }
          if (r2.hash = e2.hash, e2.href === "")
            return r2.href = r2.format(), r2;
          if (e2.slashes && !e2.protocol) {
            for (var u2 = Object.keys(e2), l2 = 0; l2 < u2.length; l2++) {
              var c2 = u2[l2];
              c2 !== "protocol" && (r2[c2] = e2[c2]);
            }
            return v[r2.protocol] && r2.hostname && !r2.pathname && (r2.path = r2.pathname = "/"), r2.href = r2.format(), r2;
          }
          if (e2.protocol && e2.protocol !== r2.protocol) {
            if (!v[e2.protocol]) {
              for (var h2 = Object.keys(e2), p2 = 0; p2 < h2.length; p2++) {
                var f2 = h2[p2];
                r2[f2] = e2[f2];
              }
              return r2.href = r2.format(), r2;
            }
            if (r2.protocol = e2.protocol, e2.host || y[e2.protocol])
              r2.pathname = e2.pathname;
            else {
              for (var d2 = (e2.pathname || "").split("/"); d2.length && !(e2.host = d2.shift()); )
                ;
              e2.host || (e2.host = ""), e2.hostname || (e2.hostname = ""), d2[0] !== "" && d2.unshift(""), d2.length < 2 && d2.unshift(""), r2.pathname = d2.join("/");
            }
            if (r2.search = e2.search, r2.query = e2.query, r2.host = e2.host || "", r2.auth = e2.auth, r2.hostname = e2.hostname || e2.host, r2.port = e2.port, r2.pathname || r2.search) {
              var m2 = r2.pathname || "", _2 = r2.search || "";
              r2.path = m2 + _2;
            }
            return r2.slashes = r2.slashes || e2.slashes, r2.href = r2.format(), r2;
          }
          var g2 = r2.pathname && r2.pathname.charAt(0) === "/", b = e2.host || e2.pathname && e2.pathname.charAt(0) === "/", x = b || g2 || r2.host && e2.pathname, w = x, E = r2.pathname && r2.pathname.split("/") || [], D = (d2 = e2.pathname && e2.pathname.split("/") || [], r2.protocol && !v[r2.protocol]);
          if (D && (r2.hostname = "", r2.port = null, r2.host && (E[0] === "" ? E[0] = r2.host : E.unshift(r2.host)), r2.host = "", e2.protocol && (e2.hostname = null, e2.port = null, e2.host && (d2[0] === "" ? d2[0] = e2.host : d2.unshift(e2.host)), e2.host = null), x = x && (d2[0] === "" || E[0] === "")), b)
            r2.host = e2.host || e2.host === "" ? e2.host : r2.host, r2.hostname = e2.hostname || e2.hostname === "" ? e2.hostname : r2.hostname, r2.search = e2.search, r2.query = e2.query, E = d2;
          else if (d2.length)
            E || (E = []), E.pop(), E = E.concat(d2), r2.search = e2.search, r2.query = e2.query;
          else if (!i.isNullOrUndefined(e2.search)) {
            if (D)
              r2.hostname = r2.host = E.shift(), (T = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T.shift(), r2.host = r2.hostname = T.shift());
            return r2.search = e2.search, r2.query = e2.query, i.isNull(r2.pathname) && i.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.href = r2.format(), r2;
          }
          if (!E.length)
            return r2.pathname = null, r2.search ? r2.path = "/" + r2.search : r2.path = null, r2.href = r2.format(), r2;
          for (var S = E.slice(-1)[0], C = (r2.host || e2.host || E.length > 1) && (S === "." || S === "..") || S === "", A = 0, N = E.length; N >= 0; N--)
            (S = E[N]) === "." ? E.splice(N, 1) : S === ".." ? (E.splice(N, 1), A++) : A && (E.splice(N, 1), A--);
          if (!x && !w)
            for (; A--; A)
              E.unshift("..");
          !x || E[0] === "" || E[0] && E[0].charAt(0) === "/" || E.unshift(""), C && E.join("/").substr(-1) !== "/" && E.push("");
          var T, O = E[0] === "" || E[0] && E[0].charAt(0) === "/";
          D && (r2.hostname = r2.host = O ? "" : E.length ? E.shift() : "", (T = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T.shift(), r2.host = r2.hostname = T.shift()));
          return (x = x || r2.host && E.length) && !O && E.unshift(""), E.length ? r2.pathname = E.join("/") : (r2.pathname = null, r2.path = null), i.isNull(r2.pathname) && i.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.auth = e2.auth || r2.auth, r2.slashes = r2.slashes || e2.slashes, r2.href = r2.format(), r2;
        }, o.prototype.parseHost = function() {
          var e2 = this.host, t2 = s.exec(e2);
          t2 && ((t2 = t2[0]) !== ":" && (this.port = t2.substr(1)), e2 = e2.substr(0, e2.length - t2.length)), e2 && (this.hostname = e2);
        };
      }, function(e, t, r) {
        (function(e2, n) {
          var i;
          !function(o) {
            t && t.nodeType, e2 && e2.nodeType;
            var a = typeof n == "object" && n;
            a.global !== a && a.window !== a && a.self;
            var s, u = 2147483647, l = /^xn--/, c = /[^\x20-\x7E]/, h = /[\x2E\u3002\uFF0E\uFF61]/g, p = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, f = Math.floor, d = String.fromCharCode;
            function m(e3) {
              throw new RangeError(p[e3]);
            }
            function y(e3, t2) {
              for (var r2 = e3.length, n2 = []; r2--; )
                n2[r2] = t2(e3[r2]);
              return n2;
            }
            function v(e3, t2) {
              var r2 = e3.split("@"), n2 = "";
              return r2.length > 1 && (n2 = r2[0] + "@", e3 = r2[1]), n2 + y((e3 = e3.replace(h, ".")).split("."), t2).join(".");
            }
            function _(e3) {
              for (var t2, r2, n2 = [], i2 = 0, o2 = e3.length; i2 < o2; )
                (t2 = e3.charCodeAt(i2++)) >= 55296 && t2 <= 56319 && i2 < o2 ? (64512 & (r2 = e3.charCodeAt(i2++))) == 56320 ? n2.push(((1023 & t2) << 10) + (1023 & r2) + 65536) : (n2.push(t2), i2--) : n2.push(t2);
              return n2;
            }
            function g(e3) {
              return y(e3, function(e4) {
                var t2 = "";
                return e4 > 65535 && (t2 += d((e4 -= 65536) >>> 10 & 1023 | 55296), e4 = 56320 | 1023 & e4), t2 += d(e4);
              }).join("");
            }
            function b(e3, t2) {
              return e3 + 22 + 75 * (e3 < 26) - ((t2 != 0) << 5);
            }
            function x(e3, t2, r2) {
              var n2 = 0;
              for (e3 = r2 ? f(e3 / 700) : e3 >> 1, e3 += f(e3 / t2); e3 > 455; n2 += 36)
                e3 = f(e3 / 35);
              return f(n2 + 36 * e3 / (e3 + 38));
            }
            function w(e3) {
              var t2, r2, n2, i2, o2, a2, s2, l2, c2, h2, p2, d2 = [], y2 = e3.length, v2 = 0, _2 = 128, b2 = 72;
              for ((r2 = e3.lastIndexOf("-")) < 0 && (r2 = 0), n2 = 0; n2 < r2; ++n2)
                e3.charCodeAt(n2) >= 128 && m("not-basic"), d2.push(e3.charCodeAt(n2));
              for (i2 = r2 > 0 ? r2 + 1 : 0; i2 < y2; ) {
                for (o2 = v2, a2 = 1, s2 = 36; i2 >= y2 && m("invalid-input"), ((l2 = (p2 = e3.charCodeAt(i2++)) - 48 < 10 ? p2 - 22 : p2 - 65 < 26 ? p2 - 65 : p2 - 97 < 26 ? p2 - 97 : 36) >= 36 || l2 > f((u - v2) / a2)) && m("overflow"), v2 += l2 * a2, !(l2 < (c2 = s2 <= b2 ? 1 : s2 >= b2 + 26 ? 26 : s2 - b2)); s2 += 36)
                  a2 > f(u / (h2 = 36 - c2)) && m("overflow"), a2 *= h2;
                b2 = x(v2 - o2, t2 = d2.length + 1, o2 == 0), f(v2 / t2) > u - _2 && m("overflow"), _2 += f(v2 / t2), v2 %= t2, d2.splice(v2++, 0, _2);
              }
              return g(d2);
            }
            function E(e3) {
              var t2, r2, n2, i2, o2, a2, s2, l2, c2, h2, p2, y2, v2, g2, w2, E2 = [];
              for (y2 = (e3 = _(e3)).length, t2 = 128, r2 = 0, o2 = 72, a2 = 0; a2 < y2; ++a2)
                (p2 = e3[a2]) < 128 && E2.push(d(p2));
              for (n2 = i2 = E2.length, i2 && E2.push("-"); n2 < y2; ) {
                for (s2 = u, a2 = 0; a2 < y2; ++a2)
                  (p2 = e3[a2]) >= t2 && p2 < s2 && (s2 = p2);
                for (s2 - t2 > f((u - r2) / (v2 = n2 + 1)) && m("overflow"), r2 += (s2 - t2) * v2, t2 = s2, a2 = 0; a2 < y2; ++a2)
                  if ((p2 = e3[a2]) < t2 && ++r2 > u && m("overflow"), p2 == t2) {
                    for (l2 = r2, c2 = 36; !(l2 < (h2 = c2 <= o2 ? 1 : c2 >= o2 + 26 ? 26 : c2 - o2)); c2 += 36)
                      w2 = l2 - h2, g2 = 36 - h2, E2.push(d(b(h2 + w2 % g2, 0))), l2 = f(w2 / g2);
                    E2.push(d(b(l2, 0))), o2 = x(r2, v2, n2 == i2), r2 = 0, ++n2;
                  }
                ++r2, ++t2;
              }
              return E2.join("");
            }
            s = { version: "1.4.1", ucs2: { decode: _, encode: g }, decode: w, encode: E, toASCII: function(e3) {
              return v(e3, function(e4) {
                return c.test(e4) ? "xn--" + E(e4) : e4;
              });
            }, toUnicode: function(e3) {
              return v(e3, function(e4) {
                return l.test(e4) ? w(e4.slice(4).toLowerCase()) : e4;
              });
            } }, (i = function() {
              return s;
            }.call(t, r, t, e2)) === void 0 || (e2.exports = i);
          }();
        }).call(this, r(246)(e), r(78));
      }, function(e, t) {
        e.exports = function(e2) {
          return e2.webpackPolyfill || (e2.deprecate = function() {
          }, e2.paths = [], e2.children || (e2.children = []), Object.defineProperty(e2, "loaded", { enumerable: true, get: function() {
            return e2.l;
          } }), Object.defineProperty(e2, "id", { enumerable: true, get: function() {
            return e2.i;
          } }), e2.webpackPolyfill = 1), e2;
        };
      }, function(e, t, r) {
        "use strict";
        e.exports = { isString: function(e2) {
          return typeof e2 == "string";
        }, isObject: function(e2) {
          return typeof e2 == "object" && e2 !== null;
        }, isNull: function(e2) {
          return e2 === null;
        }, isNullOrUndefined: function(e2) {
          return e2 == null;
        } };
      }, function(e, t, r) {
        "use strict";
        t.decode = t.parse = r(249), t.encode = t.stringify = r(250);
      }, function(e, t, r) {
        "use strict";
        function n(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }
        e.exports = function(e2, t2, r2, o) {
          t2 = t2 || "&", r2 = r2 || "=";
          var a = {};
          if (typeof e2 != "string" || e2.length === 0)
            return a;
          var s = /\+/g;
          e2 = e2.split(t2);
          var u = 1e3;
          o && typeof o.maxKeys == "number" && (u = o.maxKeys);
          var l = e2.length;
          u > 0 && l > u && (l = u);
          for (var c = 0; c < l; ++c) {
            var h, p, f, d, m = e2[c].replace(s, "%20"), y = m.indexOf(r2);
            y >= 0 ? (h = m.substr(0, y), p = m.substr(y + 1)) : (h = m, p = ""), f = decodeURIComponent(h), d = decodeURIComponent(p), n(a, f) ? i(a[f]) ? a[f].push(d) : a[f] = [a[f], d] : a[f] = d;
          }
          return a;
        };
        var i = Array.isArray || function(e2) {
          return Object.prototype.toString.call(e2) === "[object Array]";
        };
      }, function(e, t, r) {
        "use strict";
        var n = function(e2) {
          switch (typeof e2) {
            case "string":
              return e2;
            case "boolean":
              return e2 ? "true" : "false";
            case "number":
              return isFinite(e2) ? e2 : "";
            default:
              return "";
          }
        };
        e.exports = function(e2, t2, r2, s) {
          return t2 = t2 || "&", r2 = r2 || "=", e2 === null && (e2 = void 0), typeof e2 == "object" ? o(a(e2), function(a2) {
            var s2 = encodeURIComponent(n(a2)) + r2;
            return i(e2[a2]) ? o(e2[a2], function(e3) {
              return s2 + encodeURIComponent(n(e3));
            }).join(t2) : s2 + encodeURIComponent(n(e2[a2]));
          }).join(t2) : s ? encodeURIComponent(n(s)) + r2 + encodeURIComponent(n(e2)) : "";
        };
        var i = Array.isArray || function(e2) {
          return Object.prototype.toString.call(e2) === "[object Array]";
        };
        function o(e2, t2) {
          if (e2.map)
            return e2.map(t2);
          for (var r2 = [], n2 = 0; n2 < e2.length; n2++)
            r2.push(t2(e2[n2], n2));
          return r2;
        }
        var a = Object.keys || function(e2) {
          var t2 = [];
          for (var r2 in e2)
            Object.prototype.hasOwnProperty.call(e2, r2) && t2.push(r2);
          return t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(52);
        t.attr_setAnExistingAttributeValue = function(e2, t2) {
          e2._element === null ? e2._value = t2 : n.element_change(e2, e2._element, t2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(108), i = r(30), o = r(52);
        t.tokenList_validationSteps = function(e2, t2) {
          if (!i.dom_hasSupportedTokens(e2._attribute._localName))
            throw new TypeError("There are no supported tokens defined for attribute name: '" + e2._attribute._localName + "'.");
          return i.dom_getSupportedTokens(e2._attribute._localName).has(t2.toLowerCase());
        }, t.tokenList_updateSteps = function(e2) {
          (e2._element.hasAttribute(e2._attribute._localName) || e2._tokenSet.size !== 0) && o.element_setAnAttributeValue(e2._element, e2._attribute._localName, n.orderedSet_serialize(e2._tokenSet));
        }, t.tokenList_serializeSteps = function(e2) {
          return o.element_getAnAttributeValue(e2._element, e2._attribute._localName);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(1);
        function o(e2) {
          return i.isBoolean(e2) ? e2 : e2.capture || false;
        }
        t.eventTarget_flatten = o, t.eventTarget_flattenMore = function(e2) {
          var t2 = o(e2), r2 = false, n2 = false;
          return i.isBoolean(e2) || (r2 = e2.once || false, n2 = e2.passive || false), [t2, n2, r2];
        }, t.eventTarget_addEventListener = function(e2, t2) {
          if (t2.callback !== null) {
            for (var r2 = 0; r2 < e2._eventListenerList.length; r2++) {
              var n2 = e2._eventListenerList[r2];
              if (n2.type === t2.type && n2.callback.handleEvent === t2.callback.handleEvent && n2.capture === t2.capture)
                return;
            }
            e2._eventListenerList.push(t2);
          }
        }, t.eventTarget_removeEventListener = function(e2, t2, r2) {
          t2.removed = true, e2._eventListenerList.splice(r2, 1);
        }, t.eventTarget_removeAllEventListeners = function(e2) {
          var t2, r2;
          try {
            for (var i2 = n(e2._eventListenerList), o2 = i2.next(); !o2.done; o2 = i2.next()) {
              o2.value.removed = true;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              o2 && !o2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          e2._eventListenerList.length = 0;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(1), o = r(29);
        t.parentNode_convertNodesIntoANode = function(e2, t2) {
          for (var r2, a, s = null, u = 0; u < e2.length; u++) {
            var l = e2[u];
            if (i.isString(l)) {
              var c = o.create_text(t2, l);
              e2[u] = c;
            }
          }
          if (e2.length === 1)
            s = e2[0];
          else {
            var h = s = o.create_documentFragment(t2);
            try {
              for (var p = n(e2), f = p.next(); !f.done; f = p.next()) {
                l = f.value;
                h.appendChild(l);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (a = p.return) && a.call(p);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return s;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(2), s = r(9), u = r(3), l = r(29), c = r(17), h = r(175), p = r(107), f = r(176), d = r(37), m = r(177);
        function y(e2) {
          return e2._startNode === e2._endNode && e2._startOffset === e2._endOffset;
        }
        function v(e2) {
          return c.tree_rootNode(e2._startNode);
        }
        function _(e2, t2) {
          return c.tree_rootNode(e2) === v(t2) && h.boundaryPoint_position([e2, 0], t2._start) === a.BoundaryPosition.After && h.boundaryPoint_position([e2, c.tree_nodeLength(e2)], t2._end) === a.BoundaryPosition.Before;
        }
        function g(e2, t2) {
          var r2 = c.tree_isAncestorOf(t2._startNode, e2, true), n2 = c.tree_isAncestorOf(t2._endNode, e2, true);
          return r2 && !n2 || !r2 && n2;
        }
        function b(e2) {
          var t2, r2, i2, a2, h2, m2, v2 = l.create_documentFragment(e2._startNode._nodeDocument);
          if (y(e2))
            return v2;
          var x = e2._startNode, w = e2._startOffset, E = e2._endNode, D = e2._endOffset;
          if (x === E && u.Guard.isCharacterDataNode(x))
            return (R = f.node_clone(x))._data = p.characterData_substringData(x, w, D - w), d.mutation_append(R, v2), p.characterData_replaceData(x, w, D - w, ""), v2;
          for (var S = x; !c.tree_isAncestorOf(E, S, true); ) {
            if (S._parent === null)
              throw new Error("Parent node  is null.");
            S = S._parent;
          }
          var C = null;
          if (!c.tree_isAncestorOf(E, x, true))
            try {
              for (var A = n(S._children), N = A.next(); !N.done; N = A.next()) {
                if (g(k = N.value, e2)) {
                  C = k;
                  break;
                }
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                N && !N.done && (r2 = A.return) && r2.call(A);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
          var T = null;
          if (!c.tree_isAncestorOf(x, E, true))
            for (var O = o(S._children), F = O.length - 1; F > 0; F--) {
              var k;
              if (g(k = O[F], e2)) {
                T = k;
                break;
              }
            }
          var P, I, L = [];
          try {
            for (var M = n(S._children), B = M.next(); !B.done; B = M.next()) {
              if (_(X = B.value, e2)) {
                if (u.Guard.isDocumentTypeNode(X))
                  throw new s.HierarchyRequestError();
                L.push(X);
              }
            }
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              B && !B.done && (a2 = M.return) && a2.call(M);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          if (c.tree_isAncestorOf(E, x, true))
            P = x, I = w;
          else {
            for (var j = x; j._parent !== null && !c.tree_isAncestorOf(E, j._parent); )
              j = j._parent;
            if (j._parent === null)
              throw new Error("Parent node is null.");
            P = j._parent, I = 1 + c.tree_index(j);
          }
          if (u.Guard.isCharacterDataNode(C))
            (R = f.node_clone(x))._data = p.characterData_substringData(x, w, c.tree_nodeLength(x) - w), d.mutation_append(R, v2), p.characterData_replaceData(x, w, c.tree_nodeLength(x) - w, "");
          else if (C !== null) {
            var R = f.node_clone(C);
            d.mutation_append(R, v2);
            var z = b(l.create_range([x, w], [C, c.tree_nodeLength(C)]));
            d.mutation_append(z, R);
          }
          try {
            for (var U = n(L), G = U.next(); !G.done; G = U.next()) {
              var X = G.value;
              d.mutation_append(X, v2);
            }
          } catch (e3) {
            h2 = { error: e3 };
          } finally {
            try {
              G && !G.done && (m2 = U.return) && m2.call(U);
            } finally {
              if (h2)
                throw h2.error;
            }
          }
          if (u.Guard.isCharacterDataNode(T))
            (R = f.node_clone(E))._data = p.characterData_substringData(E, 0, D), d.mutation_append(R, v2), p.characterData_replaceData(E, 0, D, "");
          else if (T !== null) {
            R = f.node_clone(T);
            d.mutation_append(R, v2);
            z = b(l.create_range([T, 0], [E, D]));
            d.mutation_append(z, R);
          }
          return e2._start = [P, I], e2._end = [P, I], v2;
        }
        t.range_collapsed = y, t.range_root = v, t.range_isContained = _, t.range_isPartiallyContained = g, t.range_setTheStart = function(e2, t2, r2) {
          if (u.Guard.isDocumentTypeNode(t2))
            throw new s.InvalidNodeTypeError();
          if (r2 > c.tree_nodeLength(t2))
            throw new s.IndexSizeError();
          var n2 = [t2, r2];
          v(e2) === c.tree_rootNode(t2) && h.boundaryPoint_position(n2, e2._end) !== a.BoundaryPosition.After || (e2._end = n2), e2._start = n2;
        }, t.range_setTheEnd = function(e2, t2, r2) {
          if (u.Guard.isDocumentTypeNode(t2))
            throw new s.InvalidNodeTypeError();
          if (r2 > c.tree_nodeLength(t2))
            throw new s.IndexSizeError();
          var n2 = [t2, r2];
          v(e2) === c.tree_rootNode(t2) && h.boundaryPoint_position(n2, e2._start) !== a.BoundaryPosition.Before || (e2._start = n2), e2._end = n2;
        }, t.range_select = function(e2, t2) {
          var r2 = e2._parent;
          if (r2 === null)
            throw new s.InvalidNodeTypeError();
          var n2 = c.tree_index(e2);
          t2._start = [r2, n2], t2._end = [r2, n2 + 1];
        }, t.range_extract = b, t.range_cloneTheContents = function e2(t2) {
          var r2, i2, a2, h2, m2, v2, x = l.create_documentFragment(t2._startNode._nodeDocument);
          if (y(t2))
            return x;
          var w = t2._startNode, E = t2._startOffset, D = t2._endNode, S = t2._endOffset;
          w === D && u.Guard.isCharacterDataNode(w) && ((B = f.node_clone(w))._data = p.characterData_substringData(w, E, S - E), d.mutation_append(B, x));
          for (var C = w; !c.tree_isAncestorOf(D, C, true); ) {
            if (C._parent === null)
              throw new Error("Parent node  is null.");
            C = C._parent;
          }
          var A = null;
          if (!c.tree_isAncestorOf(D, w, true))
            try {
              for (var N = n(C._children), T = N.next(); !T.done; T = N.next()) {
                if (g(P = T.value, t2)) {
                  A = P;
                  break;
                }
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                T && !T.done && (i2 = N.return) && i2.call(N);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          var O = null;
          if (!c.tree_isAncestorOf(w, D, true))
            for (var F = o(C._children), k = F.length - 1; k > 0; k--) {
              var P;
              if (g(P = F[k], t2)) {
                O = P;
                break;
              }
            }
          var I = [];
          try {
            for (var L = n(C._children), M = L.next(); !M.done; M = L.next()) {
              if (_(U = M.value, t2)) {
                if (u.Guard.isDocumentTypeNode(U))
                  throw new s.HierarchyRequestError();
                I.push(U);
              }
            }
          } catch (e3) {
            a2 = { error: e3 };
          } finally {
            try {
              M && !M.done && (h2 = L.return) && h2.call(L);
            } finally {
              if (a2)
                throw a2.error;
            }
          }
          if (u.Guard.isCharacterDataNode(A))
            (B = f.node_clone(w))._data = p.characterData_substringData(w, E, c.tree_nodeLength(w) - E), d.mutation_append(B, x);
          else if (A !== null) {
            var B = f.node_clone(A);
            d.mutation_append(B, x);
            var j = e2(l.create_range([w, E], [A, c.tree_nodeLength(A)]));
            d.mutation_append(j, B);
          }
          try {
            for (var R = n(I), z = R.next(); !z.done; z = R.next()) {
              var U = z.value, B = f.node_clone(U);
              d.mutation_append(B, x);
            }
          } catch (e3) {
            m2 = { error: e3 };
          } finally {
            try {
              z && !z.done && (v2 = R.return) && v2.call(R);
            } finally {
              if (m2)
                throw m2.error;
            }
          }
          if (u.Guard.isCharacterDataNode(O))
            (B = f.node_clone(D))._data = p.characterData_substringData(D, 0, S), d.mutation_append(B, x);
          else if (O !== null) {
            B = f.node_clone(O);
            x.append(B);
            j = b(l.create_range([O, 0], [D, S]));
            d.mutation_append(j, B);
          }
          return x;
        }, t.range_insert = function(e2, t2) {
          var r2, i2;
          if (u.Guard.isProcessingInstructionNode(t2._startNode) || u.Guard.isCommentNode(t2._startNode) || u.Guard.isTextNode(t2._startNode) && t2._startNode._parent === null || t2._startNode === e2)
            throw new s.HierarchyRequestError();
          var o2, a2 = null;
          if (u.Guard.isTextNode(t2._startNode))
            a2 = t2._startNode;
          else {
            var l2 = 0;
            try {
              for (var h2 = n(t2._startNode._children), p2 = h2.next(); !p2.done; p2 = h2.next()) {
                var f2 = p2.value;
                if (l2 === t2._startOffset) {
                  a2 = f2;
                  break;
                }
                l2++;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                p2 && !p2.done && (i2 = h2.return) && i2.call(h2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          if (a2 === null)
            o2 = t2._startNode;
          else {
            if (a2._parent === null)
              throw new Error("Parent node is null.");
            o2 = a2._parent;
          }
          d.mutation_ensurePreInsertionValidity(e2, o2, a2), u.Guard.isTextNode(t2._startNode) && (a2 = m.text_split(t2._startNode, t2._startOffset)), e2 === a2 && (a2 = e2._nextSibling), e2._parent !== null && d.mutation_remove(e2, e2._parent);
          var v2 = a2 === null ? c.tree_nodeLength(o2) : c.tree_index(a2);
          u.Guard.isDocumentFragmentNode(e2) ? v2 += c.tree_nodeLength(e2) : v2++, d.mutation_preInsert(e2, o2, a2), y(t2) && (t2._end = [o2, v2]);
        }, t.range_getContainedNodes = function(e2) {
          var t2;
          return (t2 = {})[Symbol.iterator] = function() {
            var t3 = e2.commonAncestorContainer, r2 = c.tree_getFirstDescendantNode(t3);
            return { next: function() {
              for (; r2 && !_(r2, e2); )
                r2 = c.tree_getNextDescendantNode(t3, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c.tree_getNextDescendantNode(t3, r2), n2;
            } };
          }, t2;
        }, t.range_getPartiallyContainedNodes = function(e2) {
          var t2;
          return (t2 = {})[Symbol.iterator] = function() {
            var t3 = e2.commonAncestorContainer, r2 = c.tree_getFirstDescendantNode(t3);
            return { next: function() {
              for (; r2 && !g(r2, e2); )
                r2 = c.tree_getNextDescendantNode(t3, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c.tree_getNextDescendantNode(t3, r2), n2;
            } };
          }, t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(9);
        t.selectors_scopeMatchASelectorsString = function(e2, t2) {
          throw new n.NotSupportedError();
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(105);
        t.treeWalker_traverseChildren = function(e2, t2) {
          for (var r2 = t2 ? e2._current._firstChild : e2._current._lastChild; r2 !== null; ) {
            var o = i.traversal_filter(e2, r2);
            if (o === n.FilterResult.Accept)
              return e2._current = r2, r2;
            if (o === n.FilterResult.Skip) {
              var a = t2 ? r2._firstChild : r2._lastChild;
              if (a !== null) {
                r2 = a;
                continue;
              }
            }
            for (; r2 !== null; ) {
              var s = t2 ? r2._nextSibling : r2._previousSibling;
              if (s !== null) {
                r2 = s;
                break;
              }
              var u = r2._parent;
              if (u === null || u === e2._root || u === e2._current)
                return null;
              r2 = u;
            }
          }
          return null;
        }, t.treeWalker_traverseSiblings = function(e2, t2) {
          var r2 = e2._current;
          if (r2 === e2._root)
            return null;
          for (; ; ) {
            for (var o = t2 ? r2._nextSibling : r2._previousSibling; o !== null; ) {
              r2 = o;
              var a = i.traversal_filter(e2, r2);
              if (a === n.FilterResult.Accept)
                return e2._current = r2, r2;
              o = t2 ? r2._firstChild : r2._lastChild, a !== n.FilterResult.Reject && o !== null || (o = t2 ? r2._nextSibling : r2._previousSibling);
            }
            if ((r2 = r2._parent) === null || r2 === e2._root)
              return null;
            if (i.traversal_filter(e2, r2) === n.FilterResult.Accept)
              return null;
          }
        };
      }, function(e, t, r) {
        "use strict";
        r(89), r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(1), a = r(2), s = r(50), u = r(3), l = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._indentation = {}, n2._lengthToLastNewline = 0, n2._writerOptions = o.applyDefaults(r2, { wellFormed: false, headless: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, indentTextOnlyNodes: false, spaceBeforeSlash: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            return this._refs = { suppressPretty: false, emptyNode: false, markup: "" }, e3.nodeType !== a.NodeType.Document || this._writerOptions.headless || this.declaration(this._builderOptions.version, this._builderOptions.encoding, this._builderOptions.standalone), this.serializeNode(e3, this._writerOptions.wellFormed), this._writerOptions.prettyPrint && this._refs.markup.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (this._refs.markup = this._refs.markup.slice(0, -this._writerOptions.newline.length)), this._refs.markup;
          }, t2.prototype.declaration = function(e3, t3, r2) {
            this._beginLine(), this._refs.markup += '<?xml version="' + e3 + '"', t3 !== void 0 && (this._refs.markup += ' encoding="' + t3 + '"'), r2 !== void 0 && (this._refs.markup += ' standalone="' + (r2 ? "yes" : "no") + '"'), this._refs.markup += "?>", this._endLine();
          }, t2.prototype.docType = function(e3, t3, r2) {
            this._beginLine(), this._refs.markup += t3 && r2 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '" "' + r2 + '">' : t3 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '">' : r2 ? "<!DOCTYPE " + e3 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e3 + ">", this._endLine();
          }, t2.prototype.openTagBegin = function(e3) {
            this._beginLine(), this._refs.markup += "<" + e3;
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            if (this._refs.suppressPretty = false, this._refs.emptyNode = false, this._writerOptions.prettyPrint && !t3 && !r2) {
              for (var n2 = true, i2 = true, o2 = this.currentNode.firstChild, a2 = 0, s2 = 0; o2; ) {
                if (u.Guard.isExclusiveTextNode(o2))
                  s2++;
                else {
                  if (!u.Guard.isCDATASectionNode(o2)) {
                    n2 = false, i2 = false;
                    break;
                  }
                  a2++;
                }
                o2.data !== "" && (i2 = false), o2 = o2.nextSibling;
              }
              this._refs.suppressPretty = !this._writerOptions.indentTextOnlyNodes && n2 && (a2 <= 1 && s2 === 0 || a2 === 0), this._refs.emptyNode = i2;
            }
            (r2 || t3 || this._refs.emptyNode) && this._writerOptions.allowEmptyTags ? this._refs.markup += "></" + e3 + ">" : this._refs.markup += r2 ? " />" : t3 || this._refs.emptyNode ? this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">", this._endLine();
          }, t2.prototype.closeTag = function(e3) {
            this._refs.emptyNode || (this._beginLine(), this._refs.markup += "</" + e3 + ">"), this._refs.suppressPretty = false, this._refs.emptyNode = false, this._endLine();
          }, t2.prototype.attribute = function(e3, t3) {
            var r2 = e3 + '="' + t3 + '"';
            this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._refs.markup.length - this._lengthToLastNewline + 1 + r2.length > this._writerOptions.width ? (this._endLine(), this._beginLine(), this._refs.markup += this._indent(1) + r2) : this._refs.markup += " " + r2;
          }, t2.prototype.text = function(e3) {
            e3 !== "" && (this._beginLine(), this._refs.markup += e3, this._endLine());
          }, t2.prototype.cdata = function(e3) {
            e3 !== "" && (this._beginLine(), this._refs.markup += "<![CDATA[" + e3 + "]]>", this._endLine());
          }, t2.prototype.comment = function(e3) {
            this._beginLine(), this._refs.markup += "<!--" + e3 + "-->", this._endLine();
          }, t2.prototype.instruction = function(e3, t3) {
            this._beginLine(), this._refs.markup += "<?" + (t3 === "" ? e3 : e3 + " " + t3) + "?>", this._endLine();
          }, t2.prototype._beginLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._indent(this._writerOptions.offset + this.level));
          }, t2.prototype._endLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._writerOptions.newline, this._lengthToLastNewline = this._refs.markup.length);
          }, t2.prototype._indent = function(e3) {
            if (e3 <= 0)
              return "";
            if (this._indentation[e3] !== void 0)
              return this._indentation[e3];
            var t3 = this._writerOptions.indent.repeat(e3);
            return this._indentation[e3] = t3, t3;
          }, t2;
        }(s.BaseWriter);
        t.XMLWriter = l;
      }, function(e, t, r) {
        "use strict";
        var n = r(47), i = r(35);
        e.exports = "".repeat || function(e2) {
          var t2 = String(i(this)), r2 = "", o = n(e2);
          if (o < 0 || o == 1 / 0)
            throw RangeError("Wrong number of repetitions");
          for (; o > 0; (o >>>= 1) && (t2 += t2))
            1 & o && (r2 += t2);
          return r2;
        };
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(67), s = r(1), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._writerOptions = s.applyDefaults(r2, { wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            var t3 = s.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3);
            return this._beginLine(this._writerOptions, 0) + this._convertObject(r2, this._writerOptions);
          }, t2.prototype._convertObject = function(e3, t3, r2) {
            var n2, i2, a2 = this;
            r2 === void 0 && (r2 = 0);
            var u2 = "", l = this._isLeafNode(e3);
            if (s.isArray(e3)) {
              u2 += "[";
              var c = e3.length, h = 0;
              try {
                for (var p = o(e3), f = p.next(); !f.done; f = p.next()) {
                  var d = f.value;
                  u2 += this._endLine(t3, r2 + 1) + this._beginLine(t3, r2 + 1) + this._convertObject(d, t3, r2 + 1), h < c - 1 && (u2 += ","), h++;
                }
              } catch (e4) {
                n2 = { error: e4 };
              } finally {
                try {
                  f && !f.done && (i2 = p.return) && i2.call(p);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              u2 += this._endLine(t3, r2) + this._beginLine(t3, r2), u2 += "]";
            } else if (s.isObject(e3)) {
              u2 += "{";
              var m = s.objectLength(e3), y = 0;
              s.forEachObject(e3, function(e4, n3) {
                l && t3.prettyPrint ? u2 += " " : u2 += a2._endLine(t3, r2 + 1) + a2._beginLine(t3, r2 + 1), u2 += a2._key(e4), t3.prettyPrint && (u2 += " "), u2 += a2._convertObject(n3, t3, r2 + 1), y < m - 1 && (u2 += ","), y++;
              }, this), l && t3.prettyPrint ? u2 += " " : u2 += this._endLine(t3, r2) + this._beginLine(t3, r2), u2 += "}";
            } else
              u2 += this._val(e3);
            return u2;
          }, t2.prototype._beginLine = function(e3, t3) {
            if (!e3.prettyPrint)
              return "";
            var r2 = e3.offset + t3 + 1;
            return r2 > 0 ? new Array(r2).join(e3.indent) : "";
          }, t2.prototype._endLine = function(e3, t3) {
            return e3.prettyPrint ? e3.newline : "";
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2.prototype._isLeafNode = function(e3) {
            return this._descendantCount(e3) <= 1;
          }, t2.prototype._descendantCount = function(e3, t3) {
            var r2 = this;
            return t3 === void 0 && (t3 = 0), s.isArray(e3) ? s.forEachArray(e3, function(e4) {
              return t3 += r2._descendantCount(e4, t3);
            }, this) : s.isObject(e3) ? s.forEachObject(e3, function(e4, n2) {
              return t3 += r2._descendantCount(n2, t3);
            }, this) : t3++, t3;
          }, t2;
        }(r(50).BaseWriter);
        t.JSONWriter = u;
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(89), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(67), s = r(1), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            if (n2._writerOptions = s.applyDefaults(r2, { wellFormed: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2._writerOptions.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (n2._writerOptions.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            var t3 = s.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3), n2 = this._beginLine(this._writerOptions, 0) + "---" + this._endLine(this._writerOptions) + this._convertObject(r2, this._writerOptions, 0);
            return n2.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (n2 = n2.slice(0, -this._writerOptions.newline.length)), n2;
          }, t2.prototype._convertObject = function(e3, t3, r2, n2) {
            var i2, a2, u2 = this;
            n2 === void 0 && (n2 = false);
            var l = "";
            if (s.isArray(e3))
              try {
                for (var c = o(e3), h = c.next(); !h.done; h = c.next()) {
                  var p = h.value;
                  l += this._beginLine(t3, r2, true), s.isObject(p) ? s.isEmpty(p) ? l += '""' + this._endLine(t3) : l += this._convertObject(p, t3, r2, true) : l += this._val(p) + this._endLine(t3);
                }
              } catch (e4) {
                i2 = { error: e4 };
              } finally {
                try {
                  h && !h.done && (a2 = c.return) && a2.call(c);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
            else
              s.forEachObject(e3, function(e4, i3) {
                n2 ? (l += u2._key(e4), n2 = false) : l += u2._beginLine(t3, r2) + u2._key(e4), s.isObject(i3) ? s.isEmpty(i3) ? l += ' ""' + u2._endLine(t3) : l += u2._endLine(t3) + u2._convertObject(i3, t3, r2 + 1) : l += " " + u2._val(i3) + u2._endLine(t3);
              }, this);
            return l;
          }, t2.prototype._beginLine = function(e3, t3, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e3.offset + t3 + 1, i2 = new Array(n2).join(e3.indent);
            return r2 ? i2.substr(0, i2.length - 2) + "-" + i2.substr(-1, 1) : i2;
          }, t2.prototype._endLine = function(e3) {
            return e3.newline;
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2;
        }(r(50).BaseWriter);
        t.YAMLWriter = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), r(110).dom.setFeatures(true);
        var n = r(110);
        t.DOMImplementation = n.DOMImplementation;
        var i = r(271);
        t.DOMParser = i.DOMParser;
        var o = r(274);
        t.XMLSerializer = o.XMLSerializer;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(3), i = r(0), o = function() {
          function e2() {
          }
          return e2.prototype.before = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2 !== null) {
              for (var a = r2._previousSibling, s = true; s && a; ) {
                s = false;
                for (var u = 0; u < e3.length; u++) {
                  var l = e3[u];
                  if (l === a) {
                    a = a._previousSibling, s = true;
                    break;
                  }
                }
              }
              var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              a = a === null ? o2._firstChild : a._nextSibling, i.mutation_preInsert(c, o2, a);
            }
          }, e2.prototype.after = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a = r2._nextSibling, s = true; s && a; ) {
                s = false;
                for (var u = 0; u < e3.length; u++) {
                  var l = e3[u];
                  if (l === a) {
                    a = a._nextSibling, s = true;
                    break;
                  }
                }
              }
              var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              i.mutation_preInsert(c, o2, a);
            }
          }, e2.prototype.replaceWith = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a = r2._nextSibling, s = true; s && a; ) {
                s = false;
                for (var u = 0; u < e3.length; u++) {
                  var l = e3[u];
                  if (l === a) {
                    a = a._nextSibling, s = true;
                    break;
                  }
                }
              }
              var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              r2._parent === o2 ? i.mutation_replace(r2, c, o2) : i.mutation_preInsert(c, o2, a);
            }
          }, e2.prototype.remove = function() {
            var e3 = n.Cast.asNode(this), t2 = e3._parent;
            t2 && i.mutation_remove(e3, t2);
          }, e2;
        }();
        t.ChildNodeImpl = o;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
        };
        t.DocumentOrShadowRootImpl = n;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(7), s = function() {
          function e2(e3) {
            this._nodeList = [], this._recordQueue = [], this._callback = e3;
            var t2 = i.dom.window;
            a.set.append(t2._mutationObservers, this);
          }
          return e2.prototype.observe = function(e3, t2) {
            var r2, i2;
            if ((t2 = t2 || { childList: false, subtree: false }).attributeOldValue === void 0 && t2.attributeFilter === void 0 || t2.attributes !== void 0 || (t2.attributes = true), t2.characterDataOldValue !== void 0 && t2.characterData === void 0 && (t2.characterData = true), !t2.childList && !t2.attributes && !t2.characterData)
              throw new TypeError();
            if (t2.attributeOldValue && !t2.attributes)
              throw new TypeError();
            if (t2.attributeFilter !== void 0 && !t2.attributes)
              throw new TypeError();
            if (t2.characterDataOldValue && !t2.characterData)
              throw new TypeError();
            var s2 = false, u = t2, l = function(e4) {
              var t3, r3;
              if (e4.observer === c) {
                s2 = true;
                try {
                  for (var i3 = (t3 = void 0, n(c._nodeList)), l2 = i3.next(); !l2.done; l2 = i3.next()) {
                    var h2 = l2.value;
                    a.list.remove(h2._registeredObserverList, function(t4) {
                      return o.Guard.isTransientRegisteredObserver(t4) && t4.source === e4;
                    });
                  }
                } catch (e5) {
                  t3 = { error: e5 };
                } finally {
                  try {
                    l2 && !l2.done && (r3 = i3.return) && r3.call(i3);
                  } finally {
                    if (t3)
                      throw t3.error;
                  }
                }
                e4.options = u;
              }
            }, c = this;
            try {
              for (var h = n(e3._registeredObserverList), p = h.next(); !p.done; p = h.next()) {
                l(p.value);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                p && !p.done && (i2 = h.return) && i2.call(h);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            s2 || (e3._registeredObserverList.push({ observer: this, options: t2 }), this._nodeList.push(e3));
          }, e2.prototype.disconnect = function() {
            var e3, t2, r2 = this;
            try {
              for (var i2 = n(this._nodeList), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var s2 = o2.value;
                a.list.remove(s2._registeredObserverList, function(e4) {
                  return e4.observer === r2;
                });
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                o2 && !o2.done && (t2 = i2.return) && t2.call(i2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            this._recordQueue = [];
          }, e2.prototype.takeRecords = function() {
            var e3 = this._recordQueue;
            return this._recordQueue = [], e3;
          }, e2;
        }();
        t.MutationObserverImpl = s;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(3), i = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "previousElementSibling", { get: function() {
            for (var e3 = n.Cast.asNode(this)._previousSibling; e3; ) {
              if (n.Guard.isElementNode(e3))
                return e3;
              e3 = e3._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "nextElementSibling", { get: function() {
            for (var e3 = n.Cast.asNode(this)._nextSibling; e3; ) {
              if (n.Guard.isElementNode(e3))
                return e3;
              e3 = e3._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.NonDocumentTypeChildNodeImpl = i;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(3), i = r(0), o = function() {
          function e2() {
          }
          return e2.prototype.getElementById = function(e3) {
            for (var t2 = i.tree_getFirstDescendantNode(n.Cast.asNode(this), false, false, function(e4) {
              return n.Guard.isElementNode(e4);
            }); t2 !== null; ) {
              if (t2._uniqueIdentifier === e3)
                return t2;
              t2 = i.tree_getNextDescendantNode(n.Cast.asNode(this), t2, false, false, function(e4) {
                return n.Guard.isElementNode(e4);
              });
            }
            return null;
          }, e2;
        }();
        t.NonElementParentNodeImpl = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(3), o = r(0), a = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "children", { get: function() {
            return o.create_htmlCollection(i.Cast.asNode(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "firstElementChild", { get: function() {
            for (var e3 = i.Cast.asNode(this)._firstChild; e3; ) {
              if (i.Guard.isElementNode(e3))
                return e3;
              e3 = e3._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "lastElementChild", { get: function() {
            for (var e3 = i.Cast.asNode(this)._lastChild; e3; ) {
              if (i.Guard.isElementNode(e3))
                return e3;
              e3 = e3._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "childElementCount", { get: function() {
            var e3, t2, r2 = 0;
            try {
              for (var o2 = n(i.Cast.asNode(this)._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s = a2.value;
                i.Guard.isElementNode(s) && r2++;
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                a2 && !a2.done && (t2 = o2.return) && t2.call(o2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), e2.prototype.prepend = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = i.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
            o.mutation_preInsert(n2, r2, r2._firstChild);
          }, e2.prototype.append = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = i.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
            o.mutation_append(n2, r2);
          }, e2.prototype.querySelector = function(e3) {
            var t2 = i.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e3, t2);
            return r2.length === 0 ? null : r2[0];
          }, e2.prototype.querySelectorAll = function(e3) {
            var t2 = i.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e3, t2);
            return o.create_nodeListStatic(t2, r2);
          }, e2;
        }();
        t.ParentNodeImpl = a;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(0), i = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "_name", { get: function() {
            return this.__name || "";
          }, set: function(e3) {
            this.__name = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_assignedSlot", { get: function() {
            return this.__assignedSlot || null;
          }, set: function(e3) {
            this.__assignedSlot = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "assignedSlot", { get: function() {
            return n.shadowTree_findASlot(this, true);
          }, enumerable: true, configurable: true }), e2;
        }();
        t.SlotableImpl = i;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(102), a = r(9), s = r(3), u = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this) || this;
            if (s.Guard.isDocumentTypeNode(t3.startContainer) || s.Guard.isAttrNode(t3.startContainer) || s.Guard.isDocumentTypeNode(t3.endContainer) || s.Guard.isAttrNode(t3.endContainer))
              throw new a.InvalidNodeTypeError();
            return r2._start = [t3.startContainer, t3.startOffset], r2._end = [t3.endContainer, t3.endOffset], r2;
          }
          return i(t2, e2), t2;
        }(o.AbstractRangeImpl);
        t.StaticRangeImpl = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(272);
        t.DOMParser = n.DOMParserImpl;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(0), i = r(273), o = function() {
          function e2() {
          }
          return e2.prototype.parseFromString = function(e3, t2) {
            if (t2 === "text/html")
              throw new Error("HTML parser not implemented.");
            try {
              return (r2 = new i.XMLParserImpl().parse(e3))._contentType = t2, r2;
            } catch (e4) {
              var r2, o2 = "http://www.mozilla.org/newlayout/xml/parsererror.xml", a = (r2 = n.create_xmlDocument()).createElementNS(o2, "parsererror"), s = r2.createElementNS(o2, "error");
              return s.setAttribute("message", e4.message), a.appendChild(s), r2.appendChild(a), r2;
            }
          }, e2;
        }();
        t.DOMParserImpl = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(180), a = r(111), s = r(7), u = r(0), l = r(69), c = function() {
          function e2() {
          }
          return e2.prototype.parse = function(e3) {
            for (var t2, r2, c2, h, p = new o.XMLStringLexer(e3, { skipWhitespaceOnlyText: true }), f = u.create_document(), d = f, m = p.nextToken(); m.type !== a.TokenType.EOF; ) {
              switch (m.type) {
                case a.TokenType.Declaration:
                  var y = m;
                  if (y.version !== "1.0")
                    throw new Error("Invalid xml version: " + y.version);
                  break;
                case a.TokenType.DocType:
                  var v = m;
                  if (!u.xml_isPubidChar(v.pubId))
                    throw new Error("DocType public identifier does not match PubidChar construct.");
                  if (!u.xml_isLegalChar(v.sysId) || v.sysId.indexOf('"') !== -1 && v.sysId.indexOf("'") !== -1)
                    throw new Error("DocType system identifier contains invalid characters.");
                  d.appendChild(f.implementation.createDocumentType(v.name, v.pubId, v.sysId));
                  break;
                case a.TokenType.CDATA:
                  var _ = m;
                  if (!u.xml_isLegalChar(_.data) || _.data.indexOf("]]>") !== -1)
                    throw new Error("CDATA contains invalid characters.");
                  d.appendChild(f.createCDATASection(_.data));
                  break;
                case a.TokenType.Comment:
                  var g = m;
                  if (!u.xml_isLegalChar(g.data) || g.data.indexOf("--") !== -1 || g.data.endsWith("-"))
                    throw new Error("Comment data contains invalid characters.");
                  d.appendChild(f.createComment(g.data));
                  break;
                case a.TokenType.PI:
                  var b = m;
                  if (b.target.indexOf(":") !== -1 || /^xml$/i.test(b.target))
                    throw new Error("Processing instruction target contains invalid characters.");
                  if (!u.xml_isLegalChar(b.data) || b.data.indexOf("?>") !== -1)
                    throw new Error("Processing instruction data contains invalid characters.");
                  d.appendChild(f.createProcessingInstruction(b.target, b.data));
                  break;
                case a.TokenType.Text:
                  var x = m;
                  if (!u.xml_isLegalChar(x.data))
                    throw new Error("Text data contains invalid characters.");
                  d.appendChild(f.createTextNode(this._decodeText(x.data)));
                  break;
                case a.TokenType.Element:
                  var w = m, E = n(u.namespace_extractQName(w.name), 2), D = E[0], S = E[1];
                  if (S.indexOf(":") !== -1 || !u.xml_isName(S))
                    throw new Error("Node local name contains invalid characters.");
                  if (D === "xmlns")
                    throw new Error("An element cannot have the 'xmlns' prefix.");
                  var C = d.lookupNamespaceURI(D), A = {};
                  try {
                    for (var N = (t2 = void 0, i(w.attributes)), T = N.next(); !T.done; T = N.next()) {
                      var O = n(T.value, 2), F = O[0], k = O[1];
                      if (F === "xmlns")
                        C = k;
                      else {
                        var P = n(u.namespace_extractQName(F), 2), I = P[0], L = P[1];
                        I === "xmlns" && (L === D && (C = k), A[L] = k);
                      }
                    }
                  } catch (e4) {
                    t2 = { error: e4 };
                  } finally {
                    try {
                      T && !T.done && (r2 = N.return) && r2.call(N);
                    } finally {
                      if (t2)
                        throw t2.error;
                    }
                  }
                  var M = C !== null ? f.createElementNS(C, w.name) : f.createElement(w.name);
                  d.appendChild(M);
                  var B = new l.LocalNameSet();
                  try {
                    for (var j = (c2 = void 0, i(w.attributes)), R = j.next(); !R.done; R = j.next()) {
                      var z = n(R.value, 2), U = (F = z[0], k = z[1], n(u.namespace_extractQName(F), 2)), G = (I = U[0], L = U[1], null);
                      if (I === "xmlns" || I === null && L === "xmlns" ? G = s.namespace.XMLNS : (G = M.lookupNamespaceURI(I)) !== null && M.isDefaultNamespace(G) ? G = null : G === null && I !== null && (G = A[I] || null), B.has(G, L))
                        throw new Error("Element contains duplicate attributes.");
                      if (B.set(G, L), G === s.namespace.XMLNS && k === s.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved.");
                      if (L.indexOf(":") !== -1 || !u.xml_isName(L))
                        throw new Error("Attribute local name contains invalid characters.");
                      if (I === "xmlns" && k === "")
                        throw new Error("Empty XML namespace is not allowed.");
                      G !== null ? M.setAttributeNS(G, F, this._decodeAttributeValue(k)) : M.setAttribute(F, this._decodeAttributeValue(k));
                    }
                  } catch (e4) {
                    c2 = { error: e4 };
                  } finally {
                    try {
                      R && !R.done && (h = j.return) && h.call(j);
                    } finally {
                      if (c2)
                        throw c2.error;
                    }
                  }
                  w.selfClosing || (d = M);
                  break;
                case a.TokenType.ClosingTag:
                  if (m.name !== d.nodeName)
                    throw new Error("Closing tag name does not match opening tag name.");
                  d._parent && (d = d._parent);
              }
              m = p.nextToken();
            }
            return f;
          }, e2.prototype._decodeText = function(e3) {
            return e3 == null ? e3 : e3.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e2.prototype._decodeAttributeValue = function(e3) {
            return e3 == null ? e3 : e3.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e2;
        }();
        t.XMLParserImpl = c;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(275);
        t.XMLSerializer = n.XMLSerializerImpl;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(2), o = r(69), a = r(95), s = r(9), u = r(7), l = r(0), c = function() {
          function e2() {
          }
          return e2.prototype.serializeToString = function(e3) {
            return this._xmlSerialization(e3, false);
          }, e2.prototype._xmlSerialization = function(e3, t2) {
            if (e3._nodeDocument === void 0 || e3._nodeDocument._hasNamespaces) {
              var r2 = new a.NamespacePrefixMap();
              r2.set("xml", u.namespace.XML);
              try {
                return this._serializeNodeNS(e3, null, r2, { value: 1 }, t2);
              } catch (e4) {
                throw new s.InvalidStateError();
              }
            } else
              try {
                return this._serializeNode(e3, t2);
              } catch (e4) {
                throw new s.InvalidStateError();
              }
          }, e2.prototype._serializeNodeNS = function(e3, t2, r2, n2, o2) {
            switch (e3.nodeType) {
              case i.NodeType.Element:
                return this._serializeElementNS(e3, t2, r2, n2, o2);
              case i.NodeType.Document:
                return this._serializeDocumentNS(e3, t2, r2, n2, o2);
              case i.NodeType.Comment:
                return this._serializeComment(e3, o2);
              case i.NodeType.Text:
                return this._serializeText(e3, o2);
              case i.NodeType.DocumentFragment:
                return this._serializeDocumentFragmentNS(e3, t2, r2, n2, o2);
              case i.NodeType.DocumentType:
                return this._serializeDocumentType(e3, o2);
              case i.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e3, o2);
              case i.NodeType.CData:
                return this._serializeCData(e3, o2);
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeNode = function(e3, t2) {
            switch (e3.nodeType) {
              case i.NodeType.Element:
                return this._serializeElement(e3, t2);
              case i.NodeType.Document:
                return this._serializeDocument(e3, t2);
              case i.NodeType.Comment:
                return this._serializeComment(e3, t2);
              case i.NodeType.Text:
                return this._serializeText(e3, t2);
              case i.NodeType.DocumentFragment:
                return this._serializeDocumentFragment(e3, t2);
              case i.NodeType.DocumentType:
                return this._serializeDocumentType(e3, t2);
              case i.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e3, t2);
              case i.NodeType.CData:
                return this._serializeCData(e3, t2);
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeElementNS = function(t2, r2, i2, o2, a2) {
            var s2, c2;
            if (a2 && (t2.localName.indexOf(":") !== -1 || !l.xml_isName(t2.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var h = "<", p = "", f = false, d = false, m = i2.copy(), y = {}, v = this._recordNamespaceInformation(t2, m, y), _ = r2, g = t2.namespaceURI;
            if (_ === g)
              v !== null && (d = true), h += p = g === u.namespace.XML ? "xml:" + t2.localName : t2.localName;
            else {
              var b = t2.prefix, x = null;
              if (b === null && g === v || (x = m.get(b, g)), b === "xmlns") {
                if (a2)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                x = b;
              }
              x !== null ? (p = x + ":" + t2.localName, v !== null && v !== u.namespace.XML && (_ = v || null), h += p) : b !== null ? (b in y && (b = this._generatePrefix(g, m, o2)), m.set(b, g), h += p += b + ":" + t2.localName, h += " xmlns:" + b + '="' + this._serializeAttributeValue(g, a2) + '"', v !== null && (_ = v || null)) : v === null || v !== null && v !== g ? (d = true, _ = g, h += p += t2.localName, h += ' xmlns="' + this._serializeAttributeValue(g, a2) + '"') : (_ = g, h += p += t2.localName);
            }
            h += this._serializeAttributesNS(t2, m, o2, y, d, a2);
            var w = g === u.namespace.HTML;
            if (w && t2.childNodes.length === 0 && e2._VoidElementNames.has(t2.localName) ? (h += " /", f = true) : w || t2.childNodes.length !== 0 || (h += "/", f = true), h += ">", f)
              return h;
            if (w && t2.localName === "template")
              ;
            else
              try {
                for (var E = n(t2._children || t2.childNodes), D = E.next(); !D.done; D = E.next()) {
                  var S = D.value;
                  h += this._serializeNodeNS(S, _, m, o2, a2);
                }
              } catch (e3) {
                s2 = { error: e3 };
              } finally {
                try {
                  D && !D.done && (c2 = E.return) && c2.call(E);
                } finally {
                  if (s2)
                    throw s2.error;
                }
              }
            return h += "</" + p + ">";
          }, e2.prototype._serializeDocumentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2;
            if (o2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var u2 = "";
            try {
              for (var l2 = n(e3._children || e3.childNodes), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                var h = c2.value;
                u2 += this._serializeNodeNS(h, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (s2 = l2.return) && s2.call(l2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
            return u2;
          }, e2.prototype._serializeComment = function(e3, t2) {
            if (t2 && (!l.xml_isLegalChar(e3.data) || e3.data.indexOf("--") !== -1 || e3.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            return "<!--" + e3.data + "-->";
          }, e2.prototype._serializeText = function(e3, t2) {
            if (t2 && !l.xml_isLegalChar(e3.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            for (var r2 = "", n2 = 0; n2 < e3.data.length; n2++) {
              var i2 = e3.data[n2];
              r2 += i2 === "&" ? "&amp;" : i2 === "<" ? "&lt;" : i2 === ">" ? "&gt;" : i2;
            }
            return r2;
          }, e2.prototype._serializeDocumentFragmentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2, u2 = "";
            try {
              for (var l2 = n(e3._children || e3.childNodes), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                var h = c2.value;
                u2 += this._serializeNodeNS(h, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (s2 = l2.return) && s2.call(l2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
            return u2;
          }, e2.prototype._serializeDocumentType = function(e3, t2) {
            if (t2 && !l.xml_isPubidChar(e3.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t2 && (!l.xml_isLegalChar(e3.systemId) || e3.systemId.indexOf('"') !== -1 && e3.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            return e3.publicId && e3.systemId ? "<!DOCTYPE " + e3.name + ' PUBLIC "' + e3.publicId + '" "' + e3.systemId + '">' : e3.publicId ? "<!DOCTYPE " + e3.name + ' PUBLIC "' + e3.publicId + '">' : e3.systemId ? "<!DOCTYPE " + e3.name + ' SYSTEM "' + e3.systemId + '">' : "<!DOCTYPE " + e3.name + ">";
          }, e2.prototype._serializeProcessingInstruction = function(e3, t2) {
            if (t2 && (e3.target.indexOf(":") !== -1 || /^xml$/i.test(e3.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t2 && (!l.xml_isLegalChar(e3.data) || e3.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            return "<?" + (e3.data === "" ? e3.target : e3.target + " " + e3.data) + "?>";
          }, e2.prototype._serializeCData = function(e3, t2) {
            if (t2 && e3.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            return "<![CDATA[" + e3.data + "]]>";
          }, e2.prototype._serializeAttributesNS = function(e3, t2, r2, i2, a2, s2) {
            var c2, h, p = "", f = s2 ? new o.LocalNameSet() : void 0;
            try {
              for (var d = n(e3.attributes), m = d.next(); !m.done; m = d.next()) {
                var y = m.value;
                if (a2 || s2 || y.namespaceURI !== null) {
                  if (s2 && f && f.has(y.namespaceURI, y.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  s2 && f && f.set(y.namespaceURI, y.localName);
                  var v = y.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t2.get(y.prefix, v), v === u.namespace.XMLNS) {
                      if (y.value === u.namespace.XML || y.prefix === null && a2 || y.prefix !== null && (!(y.localName in i2) || i2[y.localName] !== y.value) && t2.has(y.localName, y.value))
                        continue;
                      if (s2 && y.value === u.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (s2 && y.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (p += " xmlns:" + (_ = y.prefix === null || t2.hasPrefix(y.prefix) && !t2.has(y.prefix, v) ? this._generatePrefix(v, t2, r2) : y.prefix) + '="' + this._serializeAttributeValue(v, s2) + '"');
                  if (p += " ", _ !== null && (p += _ + ":"), s2 && (y.localName.indexOf(":") !== -1 || !l.xml_isName(y.localName) || y.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p += y.localName + '="' + this._serializeAttributeValue(y.value, s2) + '"';
                } else
                  p += " " + y.localName + '="' + this._serializeAttributeValue(y.value, s2) + '"';
              }
            } catch (e4) {
              c2 = { error: e4 };
            } finally {
              try {
                m && !m.done && (h = d.return) && h.call(d);
              } finally {
                if (c2)
                  throw c2.error;
              }
            }
            return p;
          }, e2.prototype._recordNamespaceInformation = function(e3, t2, r2) {
            var i2, o2, a2 = null;
            try {
              for (var s2 = n(e3.attributes), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                var c2 = l2.value, h = c2.namespaceURI, p = c2.prefix;
                if (h === u.namespace.XMLNS) {
                  if (p === null) {
                    a2 = c2.value;
                    continue;
                  }
                  var f = c2.localName, d = c2.value;
                  if (d === u.namespace.XML)
                    continue;
                  if (d === "" && (d = null), t2.has(f, d))
                    continue;
                  t2.set(f, d), r2[f] = d || "";
                }
              }
            } catch (e4) {
              i2 = { error: e4 };
            } finally {
              try {
                l2 && !l2.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, e2.prototype._generatePrefix = function(e3, t2, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t2.set(n2, e3), n2;
          }, e2.prototype._serializeAttributeValue = function(e3, t2) {
            if (t2 && e3 !== null && !l.xml_isLegalChar(e3))
              throw new Error("Invalid characters in attribute value.");
            if (e3 === null)
              return "";
            for (var r2 = "", n2 = 0; n2 < e3.length; n2++) {
              var i2 = e3[n2];
              r2 += i2 === '"' ? "&quot;" : i2 === "&" ? "&amp;" : i2 === "<" ? "&lt;" : i2 === ">" ? "&gt;" : i2;
            }
            return r2;
          }, e2.prototype._serializeElement = function(e3, t2) {
            var r2, i2;
            if (t2 && (e3.localName.indexOf(":") !== -1 || !l.xml_isName(e3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a2 = e3.localName, s2 = "<" + a2;
            if (s2 += this._serializeAttributes(e3, t2), e3._children.size === 0 && (s2 += "/", o2 = true), s2 += ">", o2)
              return s2;
            try {
              for (var u2 = n(e3._children), c2 = u2.next(); !c2.done; c2 = u2.next()) {
                var h = c2.value;
                s2 += this._serializeNode(h, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (i2 = u2.return) && i2.call(u2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return s2 += "</" + a2 + ">";
          }, e2.prototype._serializeDocument = function(e3, t2) {
            var r2, i2;
            if (t2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var o2 = "";
            try {
              for (var a2 = n(e3._children), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var u2 = s2.value;
                o2 += this._serializeNode(u2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype._serializeDocumentFragment = function(e3, t2) {
            var r2, i2, o2 = "";
            try {
              for (var a2 = n(e3._children), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var u2 = s2.value;
                o2 += this._serializeNode(u2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype._serializeAttributes = function(e3, t2) {
            var r2, i2, o2 = "", a2 = t2 ? {} : void 0;
            try {
              for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var c2 = u2.value;
                if (t2 && a2 && c2.localName in a2)
                  throw new Error("Element contains duplicate attributes (well-formed required).");
                if (t2 && a2 && (a2[c2.localName] = true), t2 && (c2.localName.indexOf(":") !== -1 || !l.xml_isName(c2.localName)))
                  throw new Error("Attribute local name contains invalid characters (well-formed required).");
                o2 += " " + c2.localName + '="' + this._serializeAttributeValue(c2.value, t2) + '"';
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2._VoidElementNames = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e2;
        }();
        t.XMLSerializerImpl = c;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(277);
        t.XMLReader = n.XMLReader;
        var i = r(112);
        t.ObjectReader = i.ObjectReader;
        var o = r(280);
        t.JSONReader = o.JSONReader;
        var a = r(281);
        t.YAMLReader = a.YAMLReader;
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(65), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, a = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(180), u = r(111), l = r(7), c = r(0), h = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            for (var r2, n2, i2, h2, p = new s.XMLStringLexer(t3, { skipWhitespaceOnlyText: true }), f = e3, d = e3, m = p.nextToken(); m.type !== u.TokenType.EOF; ) {
              switch (m.type) {
                case u.TokenType.Declaration:
                  var y = m, v = this.sanitize(y.version);
                  if (v !== "1.0")
                    throw new Error("Invalid xml version: " + v);
                  var _ = { version: v };
                  y.encoding && (_.encoding = this.sanitize(y.encoding)), y.standalone && (_.standalone = this.sanitize(y.standalone) === "yes"), d.set(_);
                  break;
                case u.TokenType.DocType:
                  var g = m;
                  d = this.docType(d, this.sanitize(g.name), this.sanitize(g.pubId), this.sanitize(g.sysId)) || d;
                  break;
                case u.TokenType.CDATA:
                  var b = m;
                  d = this.cdata(d, this.sanitize(b.data)) || d;
                  break;
                case u.TokenType.Comment:
                  var x = m;
                  d = this.comment(d, this.sanitize(x.data)) || d;
                  break;
                case u.TokenType.PI:
                  var w = m;
                  d = this.instruction(d, this.sanitize(w.target), this.sanitize(w.data)) || d;
                  break;
                case u.TokenType.Text:
                  var E = m;
                  d = this.text(d, this._decodeText(this.sanitize(E.data))) || d;
                  break;
                case u.TokenType.Element:
                  var D = m, S = this.sanitize(D.name), C = o(c.namespace_extractQName(S), 1)[0], A = d.node.lookupNamespaceURI(C), N = {};
                  try {
                    for (var T = (r2 = void 0, a(D.attributes)), O = T.next(); !O.done; O = T.next()) {
                      var F = o(O.value, 2), k = F[0], P = F[1];
                      if (k = this.sanitize(k), P = this.sanitize(P), k === "xmlns")
                        A = P;
                      else {
                        var I = o(c.namespace_extractQName(k), 2), L = I[0], M = I[1];
                        L === "xmlns" && (M === C && (A = P), N[M] = P);
                      }
                    }
                  } catch (e4) {
                    r2 = { error: e4 };
                  } finally {
                    try {
                      O && !O.done && (n2 = T.return) && n2.call(T);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                  var B = A !== null ? this.element(d, A, S) : this.element(d, void 0, S);
                  if (B === void 0)
                    break;
                  d.node === e3.node && (f = B);
                  try {
                    for (var j = (i2 = void 0, a(D.attributes)), R = j.next(); !R.done; R = j.next()) {
                      var z = o(R.value, 2);
                      k = z[0], P = z[1];
                      k = this.sanitize(k), P = this.sanitize(P);
                      var U = o(c.namespace_extractQName(k), 2), G = (L = U[0], M = U[1], null);
                      L === "xmlns" || L === null && M === "xmlns" ? G = l.namespace.XMLNS : (G = B.node.lookupNamespaceURI(L)) !== null && B.node.isDefaultNamespace(G) ? G = null : G === null && L !== null && (G = N[L] || null), G !== null ? this.attribute(B, G, k, this._decodeAttributeValue(P)) : this.attribute(B, void 0, k, this._decodeAttributeValue(P));
                    }
                  } catch (e4) {
                    i2 = { error: e4 };
                  } finally {
                    try {
                      R && !R.done && (h2 = j.return) && h2.call(j);
                    } finally {
                      if (i2)
                        throw i2.error;
                    }
                  }
                  D.selfClosing || (d = B);
                  break;
                case u.TokenType.ClosingTag:
                  d.node.parentNode && (d = d.up());
              }
              m = p.nextToken();
            }
            return f;
          }, t2;
        }(r(75).BaseReader);
        t.XMLReader = h;
      }, function(e, t, r) {
        var n = r(4), i = r(279);
        n({ target: "Object", stat: true, forced: Object.assign !== i }, { assign: i });
      }, function(e, t, r) {
        "use strict";
        var n = r(16), i = r(8), o = r(61), a = r(85), s = r(79), u = r(27), l = r(41), c = Object.assign, h = Object.defineProperty;
        e.exports = !c || i(function() {
          if (n && c({ b: 1 }, c(h({}, "a", { enumerable: true, get: function() {
            h(this, "b", { value: 3, enumerable: false });
          } }), { b: 2 })).b !== 1)
            return true;
          var e2 = {}, t2 = {}, r2 = Symbol();
          return e2[r2] = 7, "abcdefghijklmnopqrst".split("").forEach(function(e3) {
            t2[e3] = e3;
          }), c({}, e2)[r2] != 7 || o(c({}, t2)).join("") != "abcdefghijklmnopqrst";
        }) ? function(e2, t2) {
          for (var r2 = u(e2), i2 = arguments.length, c2 = 1, h2 = a.f, p = s.f; i2 > c2; )
            for (var f, d = l(arguments[c2++]), m = h2 ? o(d).concat(h2(d)) : o(d), y = m.length, v = 0; y > v; )
              f = m[v++], n && !p.call(d, f) || (r2[f] = d[f]);
          return r2;
        } : c;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(112), a = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            return new o.ObjectReader(this._builderOptions).parse(e3, JSON.parse(t3));
          }, t2;
        }(r(75).BaseReader);
        t.JSONReader = a;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(112), a = r(75), s = r(282), u = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            var r2 = s.safeLoad(t3);
            if (r2 === void 0)
              throw new Error("Unable to parse YAML document.");
            return new o.ObjectReader(this._builderOptions).parse(e3, r2);
          }, t2;
        }(a.BaseReader);
        t.YAMLReader = u;
      }, function(e, t, r) {
        "use strict";
        var n = r(283);
        e.exports = n;
      }, function(e, t, r) {
        "use strict";
        var n = r(284), i = r(303);
        function o(e2) {
          return function() {
            throw new Error("Function " + e2 + " is deprecated and cannot be used.");
          };
        }
        e.exports.Type = r(10), e.exports.Schema = r(39), e.exports.FAILSAFE_SCHEMA = r(113), e.exports.JSON_SCHEMA = r(182), e.exports.CORE_SCHEMA = r(181), e.exports.DEFAULT_SAFE_SCHEMA = r(54), e.exports.DEFAULT_FULL_SCHEMA = r(76), e.exports.load = n.load, e.exports.loadAll = n.loadAll, e.exports.safeLoad = n.safeLoad, e.exports.safeLoadAll = n.safeLoadAll, e.exports.dump = i.dump, e.exports.safeDump = i.safeDump, e.exports.YAMLException = r(53), e.exports.MINIMAL_SCHEMA = r(113), e.exports.SAFE_SCHEMA = r(54), e.exports.DEFAULT_SCHEMA = r(76), e.exports.scan = o("scan"), e.exports.parse = o("parse"), e.exports.compose = o("compose"), e.exports.addConstructor = o("addConstructor");
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(53), o = r(285), a = r(54), s = r(76), u = Object.prototype.hasOwnProperty, l = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, c = /[\x85\u2028\u2029]/, h = /[,\[\]\{\}]/, p = /^(?:!|!!|![a-z\-]+!)$/i, f = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
        function d(e2) {
          return Object.prototype.toString.call(e2);
        }
        function m(e2) {
          return e2 === 10 || e2 === 13;
        }
        function y(e2) {
          return e2 === 9 || e2 === 32;
        }
        function v(e2) {
          return e2 === 9 || e2 === 32 || e2 === 10 || e2 === 13;
        }
        function _(e2) {
          return e2 === 44 || e2 === 91 || e2 === 93 || e2 === 123 || e2 === 125;
        }
        function g(e2) {
          var t2;
          return 48 <= e2 && e2 <= 57 ? e2 - 48 : 97 <= (t2 = 32 | e2) && t2 <= 102 ? t2 - 97 + 10 : -1;
        }
        function b(e2) {
          return e2 === 48 ? "\0" : e2 === 97 ? "\x07" : e2 === 98 ? "\b" : e2 === 116 || e2 === 9 ? "	" : e2 === 110 ? "\n" : e2 === 118 ? "\v" : e2 === 102 ? "\f" : e2 === 114 ? "\r" : e2 === 101 ? "" : e2 === 32 ? " " : e2 === 34 ? '"' : e2 === 47 ? "/" : e2 === 92 ? "\\" : e2 === 78 ? "\x85" : e2 === 95 ? "\xA0" : e2 === 76 ? "\u2028" : e2 === 80 ? "\u2029" : "";
        }
        function x(e2) {
          return e2 <= 65535 ? String.fromCharCode(e2) : String.fromCharCode(55296 + (e2 - 65536 >> 10), 56320 + (e2 - 65536 & 1023));
        }
        for (var w = new Array(256), E = new Array(256), D = 0; D < 256; D++)
          w[D] = b(D) ? 1 : 0, E[D] = b(D);
        function S(e2, t2) {
          this.input = e2, this.filename = t2.filename || null, this.schema = t2.schema || s, this.onWarning = t2.onWarning || null, this.legacy = t2.legacy || false, this.json = t2.json || false, this.listener = t2.listener || null, this.implicitTypes = this.schema.compiledImplicit, this.typeMap = this.schema.compiledTypeMap, this.length = e2.length, this.position = 0, this.line = 0, this.lineStart = 0, this.lineIndent = 0, this.documents = [];
        }
        function C(e2, t2) {
          return new i(t2, new o(e2.filename, e2.input, e2.position, e2.line, e2.position - e2.lineStart));
        }
        function A(e2, t2) {
          throw C(e2, t2);
        }
        function N(e2, t2) {
          e2.onWarning && e2.onWarning.call(null, C(e2, t2));
        }
        var T = { YAML: function(e2, t2, r2) {
          var n2, i2, o2;
          e2.version !== null && A(e2, "duplication of %YAML directive"), r2.length !== 1 && A(e2, "YAML directive accepts exactly one argument"), (n2 = /^([0-9]+)\.([0-9]+)$/.exec(r2[0])) === null && A(e2, "ill-formed argument of the YAML directive"), i2 = parseInt(n2[1], 10), o2 = parseInt(n2[2], 10), i2 !== 1 && A(e2, "unacceptable YAML version of the document"), e2.version = r2[0], e2.checkLineBreaks = o2 < 2, o2 !== 1 && o2 !== 2 && N(e2, "unsupported YAML version of the document");
        }, TAG: function(e2, t2, r2) {
          var n2, i2;
          r2.length !== 2 && A(e2, "TAG directive accepts exactly two arguments"), n2 = r2[0], i2 = r2[1], p.test(n2) || A(e2, "ill-formed tag handle (first argument) of the TAG directive"), u.call(e2.tagMap, n2) && A(e2, 'there is a previously declared suffix for "' + n2 + '" tag handle'), f.test(i2) || A(e2, "ill-formed tag prefix (second argument) of the TAG directive"), e2.tagMap[n2] = i2;
        } };
        function O(e2, t2, r2, n2) {
          var i2, o2, a2, s2;
          if (t2 < r2) {
            if (s2 = e2.input.slice(t2, r2), n2)
              for (i2 = 0, o2 = s2.length; i2 < o2; i2 += 1)
                (a2 = s2.charCodeAt(i2)) === 9 || 32 <= a2 && a2 <= 1114111 || A(e2, "expected valid JSON character");
            else
              l.test(s2) && A(e2, "the stream contains non-printable characters");
            e2.result += s2;
          }
        }
        function F(e2, t2, r2, i2) {
          var o2, a2, s2, l2;
          for (n.isObject(r2) || A(e2, "cannot merge mappings; the provided source object is unacceptable"), s2 = 0, l2 = (o2 = Object.keys(r2)).length; s2 < l2; s2 += 1)
            a2 = o2[s2], u.call(t2, a2) || (t2[a2] = r2[a2], i2[a2] = true);
        }
        function k(e2, t2, r2, n2, i2, o2, a2, s2) {
          var l2, c2;
          if (Array.isArray(i2))
            for (l2 = 0, c2 = (i2 = Array.prototype.slice.call(i2)).length; l2 < c2; l2 += 1)
              Array.isArray(i2[l2]) && A(e2, "nested arrays are not supported inside keys"), typeof i2 == "object" && d(i2[l2]) === "[object Object]" && (i2[l2] = "[object Object]");
          if (typeof i2 == "object" && d(i2) === "[object Object]" && (i2 = "[object Object]"), i2 = String(i2), t2 === null && (t2 = {}), n2 === "tag:yaml.org,2002:merge")
            if (Array.isArray(o2))
              for (l2 = 0, c2 = o2.length; l2 < c2; l2 += 1)
                F(e2, t2, o2[l2], r2);
            else
              F(e2, t2, o2, r2);
          else
            e2.json || u.call(r2, i2) || !u.call(t2, i2) || (e2.line = a2 || e2.line, e2.position = s2 || e2.position, A(e2, "duplicated mapping key")), t2[i2] = o2, delete r2[i2];
          return t2;
        }
        function P(e2) {
          var t2;
          (t2 = e2.input.charCodeAt(e2.position)) === 10 ? e2.position++ : t2 === 13 ? (e2.position++, e2.input.charCodeAt(e2.position) === 10 && e2.position++) : A(e2, "a line break is expected"), e2.line += 1, e2.lineStart = e2.position;
        }
        function I(e2, t2, r2) {
          for (var n2 = 0, i2 = e2.input.charCodeAt(e2.position); i2 !== 0; ) {
            for (; y(i2); )
              i2 = e2.input.charCodeAt(++e2.position);
            if (t2 && i2 === 35)
              do {
                i2 = e2.input.charCodeAt(++e2.position);
              } while (i2 !== 10 && i2 !== 13 && i2 !== 0);
            if (!m(i2))
              break;
            for (P(e2), i2 = e2.input.charCodeAt(e2.position), n2++, e2.lineIndent = 0; i2 === 32; )
              e2.lineIndent++, i2 = e2.input.charCodeAt(++e2.position);
          }
          return r2 !== -1 && n2 !== 0 && e2.lineIndent < r2 && N(e2, "deficient indentation"), n2;
        }
        function L(e2) {
          var t2, r2 = e2.position;
          return !((t2 = e2.input.charCodeAt(r2)) !== 45 && t2 !== 46 || t2 !== e2.input.charCodeAt(r2 + 1) || t2 !== e2.input.charCodeAt(r2 + 2) || (r2 += 3, (t2 = e2.input.charCodeAt(r2)) !== 0 && !v(t2)));
        }
        function M(e2, t2) {
          t2 === 1 ? e2.result += " " : t2 > 1 && (e2.result += n.repeat("\n", t2 - 1));
        }
        function B(e2, t2) {
          var r2, n2, i2 = e2.tag, o2 = e2.anchor, a2 = [], s2 = false;
          for (e2.anchor !== null && (e2.anchorMap[e2.anchor] = a2), n2 = e2.input.charCodeAt(e2.position); n2 !== 0 && n2 === 45 && v(e2.input.charCodeAt(e2.position + 1)); )
            if (s2 = true, e2.position++, I(e2, true, -1) && e2.lineIndent <= t2)
              a2.push(null), n2 = e2.input.charCodeAt(e2.position);
            else if (r2 = e2.line, z(e2, t2, 3, false, true), a2.push(e2.result), I(e2, true, -1), n2 = e2.input.charCodeAt(e2.position), (e2.line === r2 || e2.lineIndent > t2) && n2 !== 0)
              A(e2, "bad indentation of a sequence entry");
            else if (e2.lineIndent < t2)
              break;
          return !!s2 && (e2.tag = i2, e2.anchor = o2, e2.kind = "sequence", e2.result = a2, true);
        }
        function j(e2) {
          var t2, r2, n2, i2, o2 = false, a2 = false;
          if ((i2 = e2.input.charCodeAt(e2.position)) !== 33)
            return false;
          if (e2.tag !== null && A(e2, "duplication of a tag property"), (i2 = e2.input.charCodeAt(++e2.position)) === 60 ? (o2 = true, i2 = e2.input.charCodeAt(++e2.position)) : i2 === 33 ? (a2 = true, r2 = "!!", i2 = e2.input.charCodeAt(++e2.position)) : r2 = "!", t2 = e2.position, o2) {
            do {
              i2 = e2.input.charCodeAt(++e2.position);
            } while (i2 !== 0 && i2 !== 62);
            e2.position < e2.length ? (n2 = e2.input.slice(t2, e2.position), i2 = e2.input.charCodeAt(++e2.position)) : A(e2, "unexpected end of the stream within a verbatim tag");
          } else {
            for (; i2 !== 0 && !v(i2); )
              i2 === 33 && (a2 ? A(e2, "tag suffix cannot contain exclamation marks") : (r2 = e2.input.slice(t2 - 1, e2.position + 1), p.test(r2) || A(e2, "named tag handle cannot contain such characters"), a2 = true, t2 = e2.position + 1)), i2 = e2.input.charCodeAt(++e2.position);
            n2 = e2.input.slice(t2, e2.position), h.test(n2) && A(e2, "tag suffix cannot contain flow indicator characters");
          }
          return n2 && !f.test(n2) && A(e2, "tag name cannot contain such characters: " + n2), o2 ? e2.tag = n2 : u.call(e2.tagMap, r2) ? e2.tag = e2.tagMap[r2] + n2 : r2 === "!" ? e2.tag = "!" + n2 : r2 === "!!" ? e2.tag = "tag:yaml.org,2002:" + n2 : A(e2, 'undeclared tag handle "' + r2 + '"'), true;
        }
        function R(e2) {
          var t2, r2;
          if ((r2 = e2.input.charCodeAt(e2.position)) !== 38)
            return false;
          for (e2.anchor !== null && A(e2, "duplication of an anchor property"), r2 = e2.input.charCodeAt(++e2.position), t2 = e2.position; r2 !== 0 && !v(r2) && !_(r2); )
            r2 = e2.input.charCodeAt(++e2.position);
          return e2.position === t2 && A(e2, "name of an anchor node must contain at least one character"), e2.anchor = e2.input.slice(t2, e2.position), true;
        }
        function z(e2, t2, r2, i2, o2) {
          var a2, s2, l2, c2, h2, p2, f2, d2, b2 = 1, D2 = false, S2 = false;
          if (e2.listener !== null && e2.listener("open", e2), e2.tag = null, e2.anchor = null, e2.kind = null, e2.result = null, a2 = s2 = l2 = r2 === 4 || r2 === 3, i2 && I(e2, true, -1) && (D2 = true, e2.lineIndent > t2 ? b2 = 1 : e2.lineIndent === t2 ? b2 = 0 : e2.lineIndent < t2 && (b2 = -1)), b2 === 1)
            for (; j(e2) || R(e2); )
              I(e2, true, -1) ? (D2 = true, l2 = a2, e2.lineIndent > t2 ? b2 = 1 : e2.lineIndent === t2 ? b2 = 0 : e2.lineIndent < t2 && (b2 = -1)) : l2 = false;
          if (l2 && (l2 = D2 || o2), b2 !== 1 && r2 !== 4 || (f2 = r2 === 1 || r2 === 2 ? t2 : t2 + 1, d2 = e2.position - e2.lineStart, b2 === 1 ? l2 && (B(e2, d2) || function(e3, t3, r3) {
            var n2, i3, o3, a3, s3, u2 = e3.tag, l3 = e3.anchor, c3 = {}, h3 = {}, p3 = null, f3 = null, d3 = null, m2 = false, _2 = false;
            for (e3.anchor !== null && (e3.anchorMap[e3.anchor] = c3), s3 = e3.input.charCodeAt(e3.position); s3 !== 0; ) {
              if (n2 = e3.input.charCodeAt(e3.position + 1), o3 = e3.line, a3 = e3.position, s3 !== 63 && s3 !== 58 || !v(n2)) {
                if (!z(e3, r3, 2, false, true))
                  break;
                if (e3.line === o3) {
                  for (s3 = e3.input.charCodeAt(e3.position); y(s3); )
                    s3 = e3.input.charCodeAt(++e3.position);
                  if (s3 === 58)
                    v(s3 = e3.input.charCodeAt(++e3.position)) || A(e3, "a whitespace character is expected after the key-value separator within a block mapping"), m2 && (k(e3, c3, h3, p3, f3, null), p3 = f3 = d3 = null), _2 = true, m2 = false, i3 = false, p3 = e3.tag, f3 = e3.result;
                  else {
                    if (!_2)
                      return e3.tag = u2, e3.anchor = l3, true;
                    A(e3, "can not read an implicit mapping pair; a colon is missed");
                  }
                } else {
                  if (!_2)
                    return e3.tag = u2, e3.anchor = l3, true;
                  A(e3, "can not read a block mapping entry; a multiline key may not be an implicit key");
                }
              } else
                s3 === 63 ? (m2 && (k(e3, c3, h3, p3, f3, null), p3 = f3 = d3 = null), _2 = true, m2 = true, i3 = true) : m2 ? (m2 = false, i3 = true) : A(e3, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"), e3.position += 1, s3 = n2;
              if ((e3.line === o3 || e3.lineIndent > t3) && (z(e3, t3, 4, true, i3) && (m2 ? f3 = e3.result : d3 = e3.result), m2 || (k(e3, c3, h3, p3, f3, d3, o3, a3), p3 = f3 = d3 = null), I(e3, true, -1), s3 = e3.input.charCodeAt(e3.position)), e3.lineIndent > t3 && s3 !== 0)
                A(e3, "bad indentation of a mapping entry");
              else if (e3.lineIndent < t3)
                break;
            }
            return m2 && k(e3, c3, h3, p3, f3, null), _2 && (e3.tag = u2, e3.anchor = l3, e3.kind = "mapping", e3.result = c3), _2;
          }(e2, d2, f2)) || function(e3, t3) {
            var r3, n2, i3, o3, a3, s3, u2, l3, c3, h3, p3 = true, f3 = e3.tag, d3 = e3.anchor, m2 = {};
            if ((h3 = e3.input.charCodeAt(e3.position)) === 91)
              i3 = 93, s3 = false, n2 = [];
            else {
              if (h3 !== 123)
                return false;
              i3 = 125, s3 = true, n2 = {};
            }
            for (e3.anchor !== null && (e3.anchorMap[e3.anchor] = n2), h3 = e3.input.charCodeAt(++e3.position); h3 !== 0; ) {
              if (I(e3, true, t3), (h3 = e3.input.charCodeAt(e3.position)) === i3)
                return e3.position++, e3.tag = f3, e3.anchor = d3, e3.kind = s3 ? "mapping" : "sequence", e3.result = n2, true;
              p3 || A(e3, "missed comma between flow collection entries"), c3 = null, o3 = a3 = false, h3 === 63 && v(e3.input.charCodeAt(e3.position + 1)) && (o3 = a3 = true, e3.position++, I(e3, true, t3)), r3 = e3.line, z(e3, t3, 1, false, true), l3 = e3.tag, u2 = e3.result, I(e3, true, t3), h3 = e3.input.charCodeAt(e3.position), !a3 && e3.line !== r3 || h3 !== 58 || (o3 = true, h3 = e3.input.charCodeAt(++e3.position), I(e3, true, t3), z(e3, t3, 1, false, true), c3 = e3.result), s3 ? k(e3, n2, m2, l3, u2, c3) : o3 ? n2.push(k(e3, null, m2, l3, u2, c3)) : n2.push(u2), I(e3, true, t3), (h3 = e3.input.charCodeAt(e3.position)) === 44 ? (p3 = true, h3 = e3.input.charCodeAt(++e3.position)) : p3 = false;
            }
            A(e3, "unexpected end of the stream within a flow collection");
          }(e2, f2) ? S2 = true : (s2 && function(e3, t3) {
            var r3, i3, o3, a3, s3, u2 = 1, l3 = false, c3 = false, h3 = t3, p3 = 0, f3 = false;
            if ((a3 = e3.input.charCodeAt(e3.position)) === 124)
              i3 = false;
            else {
              if (a3 !== 62)
                return false;
              i3 = true;
            }
            for (e3.kind = "scalar", e3.result = ""; a3 !== 0; )
              if ((a3 = e3.input.charCodeAt(++e3.position)) === 43 || a3 === 45)
                u2 === 1 ? u2 = a3 === 43 ? 3 : 2 : A(e3, "repeat of a chomping mode identifier");
              else {
                if (!((o3 = 48 <= (s3 = a3) && s3 <= 57 ? s3 - 48 : -1) >= 0))
                  break;
                o3 === 0 ? A(e3, "bad explicit indentation width of a block scalar; it cannot be less than one") : c3 ? A(e3, "repeat of an indentation width identifier") : (h3 = t3 + o3 - 1, c3 = true);
              }
            if (y(a3)) {
              do {
                a3 = e3.input.charCodeAt(++e3.position);
              } while (y(a3));
              if (a3 === 35)
                do {
                  a3 = e3.input.charCodeAt(++e3.position);
                } while (!m(a3) && a3 !== 0);
            }
            for (; a3 !== 0; ) {
              for (P(e3), e3.lineIndent = 0, a3 = e3.input.charCodeAt(e3.position); (!c3 || e3.lineIndent < h3) && a3 === 32; )
                e3.lineIndent++, a3 = e3.input.charCodeAt(++e3.position);
              if (!c3 && e3.lineIndent > h3 && (h3 = e3.lineIndent), m(a3))
                p3++;
              else {
                if (e3.lineIndent < h3) {
                  u2 === 3 ? e3.result += n.repeat("\n", l3 ? 1 + p3 : p3) : u2 === 1 && l3 && (e3.result += "\n");
                  break;
                }
                for (i3 ? y(a3) ? (f3 = true, e3.result += n.repeat("\n", l3 ? 1 + p3 : p3)) : f3 ? (f3 = false, e3.result += n.repeat("\n", p3 + 1)) : p3 === 0 ? l3 && (e3.result += " ") : e3.result += n.repeat("\n", p3) : e3.result += n.repeat("\n", l3 ? 1 + p3 : p3), l3 = true, c3 = true, p3 = 0, r3 = e3.position; !m(a3) && a3 !== 0; )
                  a3 = e3.input.charCodeAt(++e3.position);
                O(e3, r3, e3.position, false);
              }
            }
            return true;
          }(e2, f2) || function(e3, t3) {
            var r3, n2, i3;
            if ((r3 = e3.input.charCodeAt(e3.position)) !== 39)
              return false;
            for (e3.kind = "scalar", e3.result = "", e3.position++, n2 = i3 = e3.position; (r3 = e3.input.charCodeAt(e3.position)) !== 0; )
              if (r3 === 39) {
                if (O(e3, n2, e3.position, true), (r3 = e3.input.charCodeAt(++e3.position)) !== 39)
                  return true;
                n2 = e3.position, e3.position++, i3 = e3.position;
              } else
                m(r3) ? (O(e3, n2, i3, true), M(e3, I(e3, false, t3)), n2 = i3 = e3.position) : e3.position === e3.lineStart && L(e3) ? A(e3, "unexpected end of the document within a single quoted scalar") : (e3.position++, i3 = e3.position);
            A(e3, "unexpected end of the stream within a single quoted scalar");
          }(e2, f2) || function(e3, t3) {
            var r3, n2, i3, o3, a3, s3, u2;
            if ((s3 = e3.input.charCodeAt(e3.position)) !== 34)
              return false;
            for (e3.kind = "scalar", e3.result = "", e3.position++, r3 = n2 = e3.position; (s3 = e3.input.charCodeAt(e3.position)) !== 0; ) {
              if (s3 === 34)
                return O(e3, r3, e3.position, true), e3.position++, true;
              if (s3 === 92) {
                if (O(e3, r3, e3.position, true), m(s3 = e3.input.charCodeAt(++e3.position)))
                  I(e3, false, t3);
                else if (s3 < 256 && w[s3])
                  e3.result += E[s3], e3.position++;
                else if ((a3 = (u2 = s3) === 120 ? 2 : u2 === 117 ? 4 : u2 === 85 ? 8 : 0) > 0) {
                  for (i3 = a3, o3 = 0; i3 > 0; i3--)
                    (a3 = g(s3 = e3.input.charCodeAt(++e3.position))) >= 0 ? o3 = (o3 << 4) + a3 : A(e3, "expected hexadecimal character");
                  e3.result += x(o3), e3.position++;
                } else
                  A(e3, "unknown escape sequence");
                r3 = n2 = e3.position;
              } else
                m(s3) ? (O(e3, r3, n2, true), M(e3, I(e3, false, t3)), r3 = n2 = e3.position) : e3.position === e3.lineStart && L(e3) ? A(e3, "unexpected end of the document within a double quoted scalar") : (e3.position++, n2 = e3.position);
            }
            A(e3, "unexpected end of the stream within a double quoted scalar");
          }(e2, f2) ? S2 = true : !function(e3) {
            var t3, r3, n2;
            if ((n2 = e3.input.charCodeAt(e3.position)) !== 42)
              return false;
            for (n2 = e3.input.charCodeAt(++e3.position), t3 = e3.position; n2 !== 0 && !v(n2) && !_(n2); )
              n2 = e3.input.charCodeAt(++e3.position);
            return e3.position === t3 && A(e3, "name of an alias node must contain at least one character"), r3 = e3.input.slice(t3, e3.position), e3.anchorMap.hasOwnProperty(r3) || A(e3, 'unidentified alias "' + r3 + '"'), e3.result = e3.anchorMap[r3], I(e3, true, -1), true;
          }(e2) ? function(e3, t3, r3) {
            var n2, i3, o3, a3, s3, u2, l3, c3, h3 = e3.kind, p3 = e3.result;
            if (v(c3 = e3.input.charCodeAt(e3.position)) || _(c3) || c3 === 35 || c3 === 38 || c3 === 42 || c3 === 33 || c3 === 124 || c3 === 62 || c3 === 39 || c3 === 34 || c3 === 37 || c3 === 64 || c3 === 96)
              return false;
            if ((c3 === 63 || c3 === 45) && (v(n2 = e3.input.charCodeAt(e3.position + 1)) || r3 && _(n2)))
              return false;
            for (e3.kind = "scalar", e3.result = "", i3 = o3 = e3.position, a3 = false; c3 !== 0; ) {
              if (c3 === 58) {
                if (v(n2 = e3.input.charCodeAt(e3.position + 1)) || r3 && _(n2))
                  break;
              } else if (c3 === 35) {
                if (v(e3.input.charCodeAt(e3.position - 1)))
                  break;
              } else {
                if (e3.position === e3.lineStart && L(e3) || r3 && _(c3))
                  break;
                if (m(c3)) {
                  if (s3 = e3.line, u2 = e3.lineStart, l3 = e3.lineIndent, I(e3, false, -1), e3.lineIndent >= t3) {
                    a3 = true, c3 = e3.input.charCodeAt(e3.position);
                    continue;
                  }
                  e3.position = o3, e3.line = s3, e3.lineStart = u2, e3.lineIndent = l3;
                  break;
                }
              }
              a3 && (O(e3, i3, o3, false), M(e3, e3.line - s3), i3 = o3 = e3.position, a3 = false), y(c3) || (o3 = e3.position + 1), c3 = e3.input.charCodeAt(++e3.position);
            }
            return O(e3, i3, o3, false), !!e3.result || (e3.kind = h3, e3.result = p3, false);
          }(e2, f2, r2 === 1) && (S2 = true, e2.tag === null && (e2.tag = "?")) : (S2 = true, e2.tag === null && e2.anchor === null || A(e2, "alias node should not have any properties")), e2.anchor !== null && (e2.anchorMap[e2.anchor] = e2.result)) : b2 === 0 && (S2 = l2 && B(e2, d2))), e2.tag !== null && e2.tag !== "!")
            if (e2.tag === "?") {
              for (e2.result !== null && e2.kind !== "scalar" && A(e2, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + e2.kind + '"'), c2 = 0, h2 = e2.implicitTypes.length; c2 < h2; c2 += 1)
                if ((p2 = e2.implicitTypes[c2]).resolve(e2.result)) {
                  e2.result = p2.construct(e2.result), e2.tag = p2.tag, e2.anchor !== null && (e2.anchorMap[e2.anchor] = e2.result);
                  break;
                }
            } else
              u.call(e2.typeMap[e2.kind || "fallback"], e2.tag) ? (p2 = e2.typeMap[e2.kind || "fallback"][e2.tag], e2.result !== null && p2.kind !== e2.kind && A(e2, "unacceptable node kind for !<" + e2.tag + '> tag; it should be "' + p2.kind + '", not "' + e2.kind + '"'), p2.resolve(e2.result) ? (e2.result = p2.construct(e2.result), e2.anchor !== null && (e2.anchorMap[e2.anchor] = e2.result)) : A(e2, "cannot resolve a node with !<" + e2.tag + "> explicit tag")) : A(e2, "unknown tag !<" + e2.tag + ">");
          return e2.listener !== null && e2.listener("close", e2), e2.tag !== null || e2.anchor !== null || S2;
        }
        function U(e2) {
          var t2, r2, n2, i2, o2 = e2.position, a2 = false;
          for (e2.version = null, e2.checkLineBreaks = e2.legacy, e2.tagMap = {}, e2.anchorMap = {}; (i2 = e2.input.charCodeAt(e2.position)) !== 0 && (I(e2, true, -1), i2 = e2.input.charCodeAt(e2.position), !(e2.lineIndent > 0 || i2 !== 37)); ) {
            for (a2 = true, i2 = e2.input.charCodeAt(++e2.position), t2 = e2.position; i2 !== 0 && !v(i2); )
              i2 = e2.input.charCodeAt(++e2.position);
            for (n2 = [], (r2 = e2.input.slice(t2, e2.position)).length < 1 && A(e2, "directive name must not be less than one character in length"); i2 !== 0; ) {
              for (; y(i2); )
                i2 = e2.input.charCodeAt(++e2.position);
              if (i2 === 35) {
                do {
                  i2 = e2.input.charCodeAt(++e2.position);
                } while (i2 !== 0 && !m(i2));
                break;
              }
              if (m(i2))
                break;
              for (t2 = e2.position; i2 !== 0 && !v(i2); )
                i2 = e2.input.charCodeAt(++e2.position);
              n2.push(e2.input.slice(t2, e2.position));
            }
            i2 !== 0 && P(e2), u.call(T, r2) ? T[r2](e2, r2, n2) : N(e2, 'unknown document directive "' + r2 + '"');
          }
          I(e2, true, -1), e2.lineIndent === 0 && e2.input.charCodeAt(e2.position) === 45 && e2.input.charCodeAt(e2.position + 1) === 45 && e2.input.charCodeAt(e2.position + 2) === 45 ? (e2.position += 3, I(e2, true, -1)) : a2 && A(e2, "directives end mark is expected"), z(e2, e2.lineIndent - 1, 4, false, true), I(e2, true, -1), e2.checkLineBreaks && c.test(e2.input.slice(o2, e2.position)) && N(e2, "non-ASCII line breaks are interpreted as content"), e2.documents.push(e2.result), e2.position === e2.lineStart && L(e2) ? e2.input.charCodeAt(e2.position) === 46 && (e2.position += 3, I(e2, true, -1)) : e2.position < e2.length - 1 && A(e2, "end of the stream or a document separator is expected");
        }
        function G(e2, t2) {
          t2 = t2 || {}, (e2 = String(e2)).length !== 0 && (e2.charCodeAt(e2.length - 1) !== 10 && e2.charCodeAt(e2.length - 1) !== 13 && (e2 += "\n"), e2.charCodeAt(0) === 65279 && (e2 = e2.slice(1)));
          var r2 = new S(e2, t2), n2 = e2.indexOf("\0");
          for (n2 !== -1 && (r2.position = n2, A(r2, "null byte is not allowed in input")), r2.input += "\0"; r2.input.charCodeAt(r2.position) === 32; )
            r2.lineIndent += 1, r2.position += 1;
          for (; r2.position < r2.length - 1; )
            U(r2);
          return r2.documents;
        }
        function X(e2, t2, r2) {
          t2 !== null && typeof t2 == "object" && r2 === void 0 && (r2 = t2, t2 = null);
          var n2 = G(e2, r2);
          if (typeof t2 != "function")
            return n2;
          for (var i2 = 0, o2 = n2.length; i2 < o2; i2 += 1)
            t2(n2[i2]);
        }
        function q(e2, t2) {
          var r2 = G(e2, t2);
          if (r2.length !== 0) {
            if (r2.length === 1)
              return r2[0];
            throw new i("expected a single document in the stream, but found more");
          }
        }
        e.exports.loadAll = X, e.exports.load = q, e.exports.safeLoadAll = function(e2, t2, r2) {
          return typeof t2 == "object" && t2 !== null && r2 === void 0 && (r2 = t2, t2 = null), X(e2, t2, n.extend({ schema: a }, r2));
        }, e.exports.safeLoad = function(e2, t2) {
          return q(e2, n.extend({ schema: a }, t2));
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(38);
        function i(e2, t2, r2, n2, i2) {
          this.name = e2, this.buffer = t2, this.position = r2, this.line = n2, this.column = i2;
        }
        i.prototype.getSnippet = function(e2, t2) {
          var r2, i2, o, a, s;
          if (!this.buffer)
            return null;
          for (e2 = e2 || 4, t2 = t2 || 75, r2 = "", i2 = this.position; i2 > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(i2 - 1)) === -1; )
            if (i2 -= 1, this.position - i2 > t2 / 2 - 1) {
              r2 = " ... ", i2 += 5;
              break;
            }
          for (o = "", a = this.position; a < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(a)) === -1; )
            if ((a += 1) - this.position > t2 / 2 - 1) {
              o = " ... ", a -= 5;
              break;
            }
          return s = this.buffer.slice(i2, a), n.repeat(" ", e2) + r2 + s + o + "\n" + n.repeat(" ", e2 + this.position - i2 + r2.length) + "^";
        }, i.prototype.toString = function(e2) {
          var t2, r2 = "";
          return this.name && (r2 += 'in "' + this.name + '" '), r2 += "at line " + (this.line + 1) + ", column " + (this.column + 1), e2 || (t2 = this.getSnippet()) && (r2 += ":\n" + t2), r2;
        }, e.exports = i;
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:str", { kind: "scalar", construct: function(e2) {
          return e2 !== null ? e2 : "";
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:seq", { kind: "sequence", construct: function(e2) {
          return e2 !== null ? e2 : [];
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:map", { kind: "mapping", construct: function(e2) {
          return e2 !== null ? e2 : {};
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:null", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2 = e2.length;
          return t2 === 1 && e2 === "~" || t2 === 4 && (e2 === "null" || e2 === "Null" || e2 === "NULL");
        }, construct: function() {
          return null;
        }, predicate: function(e2) {
          return e2 === null;
        }, represent: { canonical: function() {
          return "~";
        }, lowercase: function() {
          return "null";
        }, uppercase: function() {
          return "NULL";
        }, camelcase: function() {
          return "Null";
        } }, defaultStyle: "lowercase" });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:bool", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          var t2 = e2.length;
          return t2 === 4 && (e2 === "true" || e2 === "True" || e2 === "TRUE") || t2 === 5 && (e2 === "false" || e2 === "False" || e2 === "FALSE");
        }, construct: function(e2) {
          return e2 === "true" || e2 === "True" || e2 === "TRUE";
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Boolean]";
        }, represent: { lowercase: function(e2) {
          return e2 ? "true" : "false";
        }, uppercase: function(e2) {
          return e2 ? "TRUE" : "FALSE";
        }, camelcase: function(e2) {
          return e2 ? "True" : "False";
        } }, defaultStyle: "lowercase" });
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(10);
        function o(e2) {
          return 48 <= e2 && e2 <= 55;
        }
        function a(e2) {
          return 48 <= e2 && e2 <= 57;
        }
        e.exports = new i("tag:yaml.org,2002:int", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          var t2, r2, n2 = e2.length, i2 = 0, s = false;
          if (!n2)
            return false;
          if ((t2 = e2[i2]) !== "-" && t2 !== "+" || (t2 = e2[++i2]), t2 === "0") {
            if (i2 + 1 === n2)
              return true;
            if ((t2 = e2[++i2]) === "b") {
              for (i2++; i2 < n2; i2++)
                if ((t2 = e2[i2]) !== "_") {
                  if (t2 !== "0" && t2 !== "1")
                    return false;
                  s = true;
                }
              return s && t2 !== "_";
            }
            if (t2 === "x") {
              for (i2++; i2 < n2; i2++)
                if ((t2 = e2[i2]) !== "_") {
                  if (!(48 <= (r2 = e2.charCodeAt(i2)) && r2 <= 57 || 65 <= r2 && r2 <= 70 || 97 <= r2 && r2 <= 102))
                    return false;
                  s = true;
                }
              return s && t2 !== "_";
            }
            for (; i2 < n2; i2++)
              if ((t2 = e2[i2]) !== "_") {
                if (!o(e2.charCodeAt(i2)))
                  return false;
                s = true;
              }
            return s && t2 !== "_";
          }
          if (t2 === "_")
            return false;
          for (; i2 < n2; i2++)
            if ((t2 = e2[i2]) !== "_") {
              if (t2 === ":")
                break;
              if (!a(e2.charCodeAt(i2)))
                return false;
              s = true;
            }
          return !(!s || t2 === "_") && (t2 !== ":" || /^(:[0-5]?[0-9])+$/.test(e2.slice(i2)));
        }, construct: function(e2) {
          var t2, r2, n2 = e2, i2 = 1, o2 = [];
          return n2.indexOf("_") !== -1 && (n2 = n2.replace(/_/g, "")), (t2 = n2[0]) !== "-" && t2 !== "+" || (t2 === "-" && (i2 = -1), t2 = (n2 = n2.slice(1))[0]), n2 === "0" ? 0 : t2 === "0" ? n2[1] === "b" ? i2 * parseInt(n2.slice(2), 2) : n2[1] === "x" ? i2 * parseInt(n2, 16) : i2 * parseInt(n2, 8) : n2.indexOf(":") !== -1 ? (n2.split(":").forEach(function(e3) {
            o2.unshift(parseInt(e3, 10));
          }), n2 = 0, r2 = 1, o2.forEach(function(e3) {
            n2 += e3 * r2, r2 *= 60;
          }), i2 * n2) : i2 * parseInt(n2, 10);
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Number]" && e2 % 1 == 0 && !n.isNegativeZero(e2);
        }, represent: { binary: function(e2) {
          return e2 >= 0 ? "0b" + e2.toString(2) : "-0b" + e2.toString(2).slice(1);
        }, octal: function(e2) {
          return e2 >= 0 ? "0" + e2.toString(8) : "-0" + e2.toString(8).slice(1);
        }, decimal: function(e2) {
          return e2.toString(10);
        }, hexadecimal: function(e2) {
          return e2 >= 0 ? "0x" + e2.toString(16).toUpperCase() : "-0x" + e2.toString(16).toUpperCase().slice(1);
        } }, defaultStyle: "decimal", styleAliases: { binary: [2, "bin"], octal: [8, "oct"], decimal: [10, "dec"], hexadecimal: [16, "hex"] } });
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(10), o = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
        var a = /^[-+]?[0-9]+e/;
        e.exports = new i("tag:yaml.org,2002:float", { kind: "scalar", resolve: function(e2) {
          return e2 !== null && !(!o.test(e2) || e2[e2.length - 1] === "_");
        }, construct: function(e2) {
          var t2, r2, n2, i2;
          return r2 = (t2 = e2.replace(/_/g, "").toLowerCase())[0] === "-" ? -1 : 1, i2 = [], "+-".indexOf(t2[0]) >= 0 && (t2 = t2.slice(1)), t2 === ".inf" ? r2 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : t2 === ".nan" ? NaN : t2.indexOf(":") >= 0 ? (t2.split(":").forEach(function(e3) {
            i2.unshift(parseFloat(e3, 10));
          }), t2 = 0, n2 = 1, i2.forEach(function(e3) {
            t2 += e3 * n2, n2 *= 60;
          }), r2 * t2) : r2 * parseFloat(t2, 10);
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Number]" && (e2 % 1 != 0 || n.isNegativeZero(e2));
        }, represent: function(e2, t2) {
          var r2;
          if (isNaN(e2))
            switch (t2) {
              case "lowercase":
                return ".nan";
              case "uppercase":
                return ".NAN";
              case "camelcase":
                return ".NaN";
            }
          else if (Number.POSITIVE_INFINITY === e2)
            switch (t2) {
              case "lowercase":
                return ".inf";
              case "uppercase":
                return ".INF";
              case "camelcase":
                return ".Inf";
            }
          else if (Number.NEGATIVE_INFINITY === e2)
            switch (t2) {
              case "lowercase":
                return "-.inf";
              case "uppercase":
                return "-.INF";
              case "camelcase":
                return "-.Inf";
            }
          else if (n.isNegativeZero(e2))
            return "-0.0";
          return r2 = e2.toString(10), a.test(r2) ? r2.replace("e", ".e") : r2;
        }, defaultStyle: "lowercase" });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"), o = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
        e.exports = new n("tag:yaml.org,2002:timestamp", { kind: "scalar", resolve: function(e2) {
          return e2 !== null && (i.exec(e2) !== null || o.exec(e2) !== null);
        }, construct: function(e2) {
          var t2, r2, n2, a, s, u, l, c, h = 0, p = null;
          if ((t2 = i.exec(e2)) === null && (t2 = o.exec(e2)), t2 === null)
            throw new Error("Date resolve error");
          if (r2 = +t2[1], n2 = +t2[2] - 1, a = +t2[3], !t2[4])
            return new Date(Date.UTC(r2, n2, a));
          if (s = +t2[4], u = +t2[5], l = +t2[6], t2[7]) {
            for (h = t2[7].slice(0, 3); h.length < 3; )
              h += "0";
            h = +h;
          }
          return t2[9] && (p = 6e4 * (60 * +t2[10] + +(t2[11] || 0)), t2[9] === "-" && (p = -p)), c = new Date(Date.UTC(r2, n2, a, s, u, l, h)), p && c.setTime(c.getTime() - p), c;
        }, instanceOf: Date, represent: function(e2) {
          return e2.toISOString();
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:merge", { kind: "scalar", resolve: function(e2) {
          return e2 === "<<" || e2 === null;
        } });
      }, function(e, t, r) {
        "use strict";
        var n;
        try {
          n = r(145).Buffer;
        } catch (e2) {
        }
        var i = r(10), o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
        e.exports = new i("tag:yaml.org,2002:binary", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          var t2, r2, n2 = 0, i2 = e2.length, a = o;
          for (r2 = 0; r2 < i2; r2++)
            if (!((t2 = a.indexOf(e2.charAt(r2))) > 64)) {
              if (t2 < 0)
                return false;
              n2 += 6;
            }
          return n2 % 8 == 0;
        }, construct: function(e2) {
          var t2, r2, i2 = e2.replace(/[\r\n=]/g, ""), a = i2.length, s = o, u = 0, l = [];
          for (t2 = 0; t2 < a; t2++)
            t2 % 4 == 0 && t2 && (l.push(u >> 16 & 255), l.push(u >> 8 & 255), l.push(255 & u)), u = u << 6 | s.indexOf(i2.charAt(t2));
          return (r2 = a % 4 * 6) === 0 ? (l.push(u >> 16 & 255), l.push(u >> 8 & 255), l.push(255 & u)) : r2 === 18 ? (l.push(u >> 10 & 255), l.push(u >> 2 & 255)) : r2 === 12 && l.push(u >> 4 & 255), n ? n.from ? n.from(l) : new n(l) : l;
        }, predicate: function(e2) {
          return n && n.isBuffer(e2);
        }, represent: function(e2) {
          var t2, r2, n2 = "", i2 = 0, a = e2.length, s = o;
          for (t2 = 0; t2 < a; t2++)
            t2 % 3 == 0 && t2 && (n2 += s[i2 >> 18 & 63], n2 += s[i2 >> 12 & 63], n2 += s[i2 >> 6 & 63], n2 += s[63 & i2]), i2 = (i2 << 8) + e2[t2];
          return (r2 = a % 3) === 0 ? (n2 += s[i2 >> 18 & 63], n2 += s[i2 >> 12 & 63], n2 += s[i2 >> 6 & 63], n2 += s[63 & i2]) : r2 === 2 ? (n2 += s[i2 >> 10 & 63], n2 += s[i2 >> 4 & 63], n2 += s[i2 << 2 & 63], n2 += s[64]) : r2 === 1 && (n2 += s[i2 >> 2 & 63], n2 += s[i2 << 4 & 63], n2 += s[64], n2 += s[64]), n2;
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = Object.prototype.hasOwnProperty, o = Object.prototype.toString;
        e.exports = new n("tag:yaml.org,2002:omap", { kind: "sequence", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2, r2, n2, a, s, u = [], l = e2;
          for (t2 = 0, r2 = l.length; t2 < r2; t2 += 1) {
            if (n2 = l[t2], s = false, o.call(n2) !== "[object Object]")
              return false;
            for (a in n2)
              if (i.call(n2, a)) {
                if (s)
                  return false;
                s = true;
              }
            if (!s)
              return false;
            if (u.indexOf(a) !== -1)
              return false;
            u.push(a);
          }
          return true;
        }, construct: function(e2) {
          return e2 !== null ? e2 : [];
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = Object.prototype.toString;
        e.exports = new n("tag:yaml.org,2002:pairs", { kind: "sequence", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2, r2, n2, o, a, s = e2;
          for (a = new Array(s.length), t2 = 0, r2 = s.length; t2 < r2; t2 += 1) {
            if (n2 = s[t2], i.call(n2) !== "[object Object]")
              return false;
            if ((o = Object.keys(n2)).length !== 1)
              return false;
            a[t2] = [o[0], n2[o[0]]];
          }
          return true;
        }, construct: function(e2) {
          if (e2 === null)
            return [];
          var t2, r2, n2, i2, o, a = e2;
          for (o = new Array(a.length), t2 = 0, r2 = a.length; t2 < r2; t2 += 1)
            n2 = a[t2], i2 = Object.keys(n2), o[t2] = [i2[0], n2[i2[0]]];
          return o;
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = Object.prototype.hasOwnProperty;
        e.exports = new n("tag:yaml.org,2002:set", { kind: "mapping", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2, r2 = e2;
          for (t2 in r2)
            if (i.call(r2, t2) && r2[t2] !== null)
              return false;
          return true;
        }, construct: function(e2) {
          return e2 !== null ? e2 : {};
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:js/undefined", { kind: "scalar", resolve: function() {
          return true;
        }, construct: function() {
        }, predicate: function(e2) {
          return e2 === void 0;
        }, represent: function() {
          return "";
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:js/regexp", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          if (e2.length === 0)
            return false;
          var t2 = e2, r2 = /\/([gim]*)$/.exec(e2), n2 = "";
          if (t2[0] === "/") {
            if (r2 && (n2 = r2[1]), n2.length > 3)
              return false;
            if (t2[t2.length - n2.length - 1] !== "/")
              return false;
          }
          return true;
        }, construct: function(e2) {
          var t2 = e2, r2 = /\/([gim]*)$/.exec(e2), n2 = "";
          return t2[0] === "/" && (r2 && (n2 = r2[1]), t2 = t2.slice(1, t2.length - n2.length - 1)), new RegExp(t2, n2);
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object RegExp]";
        }, represent: function(e2) {
          var t2 = "/" + e2.source + "/";
          return e2.global && (t2 += "g"), e2.multiline && (t2 += "m"), e2.ignoreCase && (t2 += "i"), t2;
        } });
      }, function(e, t, r) {
        "use strict";
        var n;
        try {
          n = r(302);
        } catch (e2) {
          typeof window != "undefined" && (n = window.esprima);
        }
        var i = r(10);
        e.exports = new i("tag:yaml.org,2002:js/function", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          try {
            var t2 = "(" + e2 + ")", r2 = n.parse(t2, { range: true });
            return r2.type === "Program" && r2.body.length === 1 && r2.body[0].type === "ExpressionStatement" && (r2.body[0].expression.type === "ArrowFunctionExpression" || r2.body[0].expression.type === "FunctionExpression");
          } catch (e3) {
            return false;
          }
        }, construct: function(e2) {
          var t2, r2 = "(" + e2 + ")", i2 = n.parse(r2, { range: true }), o = [];
          if (i2.type !== "Program" || i2.body.length !== 1 || i2.body[0].type !== "ExpressionStatement" || i2.body[0].expression.type !== "ArrowFunctionExpression" && i2.body[0].expression.type !== "FunctionExpression")
            throw new Error("Failed to resolve function");
          return i2.body[0].expression.params.forEach(function(e3) {
            o.push(e3.name);
          }), t2 = i2.body[0].expression.body.range, i2.body[0].expression.body.type === "BlockStatement" ? new Function(o, r2.slice(t2[0] + 1, t2[1] - 1)) : new Function(o, "return " + r2.slice(t2[0], t2[1]));
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Function]";
        }, represent: function(e2) {
          return e2.toString();
        } });
      }, function(e, t, r) {
        var n;
        n = function() {
          return function(e2) {
            var t2 = {};
            function r2(n2) {
              if (t2[n2])
                return t2[n2].exports;
              var i = t2[n2] = { exports: {}, id: n2, loaded: false };
              return e2[n2].call(i.exports, i, i.exports, r2), i.loaded = true, i.exports;
            }
            return r2.m = e2, r2.c = t2, r2.p = "", r2(0);
          }([function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(1), i = r2(3), o = r2(8), a = r2(15);
            function s(e3, t3, r3) {
              var a2 = null, s2 = function(e4, t4) {
                r3 && r3(e4, t4), a2 && a2.visit(e4, t4);
              }, u2 = typeof r3 == "function" ? s2 : null, l = false;
              if (t3) {
                l = typeof t3.comment == "boolean" && t3.comment;
                var c = typeof t3.attachComment == "boolean" && t3.attachComment;
                (l || c) && ((a2 = new n2.CommentHandler()).attach = c, t3.comment = true, u2 = s2);
              }
              var h, p = false;
              t3 && typeof t3.sourceType == "string" && (p = t3.sourceType === "module"), h = t3 && typeof t3.jsx == "boolean" && t3.jsx ? new i.JSXParser(e3, t3, u2) : new o.Parser(e3, t3, u2);
              var f = p ? h.parseModule() : h.parseScript();
              return l && a2 && (f.comments = a2.comments), h.config.tokens && (f.tokens = h.tokens), h.config.tolerant && (f.errors = h.errorHandler.errors), f;
            }
            t2.parse = s, t2.parseModule = function(e3, t3, r3) {
              var n3 = t3 || {};
              return n3.sourceType = "module", s(e3, n3, r3);
            }, t2.parseScript = function(e3, t3, r3) {
              var n3 = t3 || {};
              return n3.sourceType = "script", s(e3, n3, r3);
            }, t2.tokenize = function(e3, t3, r3) {
              var n3, i2 = new a.Tokenizer(e3, t3);
              n3 = [];
              try {
                for (; ; ) {
                  var o2 = i2.getNextToken();
                  if (!o2)
                    break;
                  r3 && (o2 = r3(o2)), n3.push(o2);
                }
              } catch (e4) {
                i2.errorHandler.tolerate(e4);
              }
              return i2.errorHandler.tolerant && (n3.errors = i2.errors()), n3;
            };
            var u = r2(2);
            t2.Syntax = u.Syntax, t2.version = "4.0.1";
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(2), i = function() {
              function e3() {
                this.attach = false, this.comments = [], this.stack = [], this.leading = [], this.trailing = [];
              }
              return e3.prototype.insertInnerComments = function(e4, t3) {
                if (e4.type === n2.Syntax.BlockStatement && e4.body.length === 0) {
                  for (var r3 = [], i2 = this.leading.length - 1; i2 >= 0; --i2) {
                    var o = this.leading[i2];
                    t3.end.offset >= o.start && (r3.unshift(o.comment), this.leading.splice(i2, 1), this.trailing.splice(i2, 1));
                  }
                  r3.length && (e4.innerComments = r3);
                }
              }, e3.prototype.findTrailingComments = function(e4) {
                var t3 = [];
                if (this.trailing.length > 0) {
                  for (var r3 = this.trailing.length - 1; r3 >= 0; --r3) {
                    var n3 = this.trailing[r3];
                    n3.start >= e4.end.offset && t3.unshift(n3.comment);
                  }
                  return this.trailing.length = 0, t3;
                }
                var i2 = this.stack[this.stack.length - 1];
                if (i2 && i2.node.trailingComments) {
                  var o = i2.node.trailingComments[0];
                  o && o.range[0] >= e4.end.offset && (t3 = i2.node.trailingComments, delete i2.node.trailingComments);
                }
                return t3;
              }, e3.prototype.findLeadingComments = function(e4) {
                for (var t3, r3 = []; this.stack.length > 0 && ((o = this.stack[this.stack.length - 1]) && o.start >= e4.start.offset); )
                  t3 = o.node, this.stack.pop();
                if (t3) {
                  for (var n3 = (t3.leadingComments ? t3.leadingComments.length : 0) - 1; n3 >= 0; --n3) {
                    var i2 = t3.leadingComments[n3];
                    i2.range[1] <= e4.start.offset && (r3.unshift(i2), t3.leadingComments.splice(n3, 1));
                  }
                  return t3.leadingComments && t3.leadingComments.length === 0 && delete t3.leadingComments, r3;
                }
                for (n3 = this.leading.length - 1; n3 >= 0; --n3) {
                  var o;
                  (o = this.leading[n3]).start <= e4.start.offset && (r3.unshift(o.comment), this.leading.splice(n3, 1));
                }
                return r3;
              }, e3.prototype.visitNode = function(e4, t3) {
                if (!(e4.type === n2.Syntax.Program && e4.body.length > 0)) {
                  this.insertInnerComments(e4, t3);
                  var r3 = this.findTrailingComments(t3), i2 = this.findLeadingComments(t3);
                  i2.length > 0 && (e4.leadingComments = i2), r3.length > 0 && (e4.trailingComments = r3), this.stack.push({ node: e4, start: t3.start.offset });
                }
              }, e3.prototype.visitComment = function(e4, t3) {
                var r3 = e4.type[0] === "L" ? "Line" : "Block", n3 = { type: r3, value: e4.value };
                if (e4.range && (n3.range = e4.range), e4.loc && (n3.loc = e4.loc), this.comments.push(n3), this.attach) {
                  var i2 = { comment: { type: r3, value: e4.value, range: [t3.start.offset, t3.end.offset] }, start: t3.start.offset };
                  e4.loc && (i2.comment.loc = e4.loc), e4.type = r3, this.leading.push(i2), this.trailing.push(i2);
                }
              }, e3.prototype.visit = function(e4, t3) {
                e4.type === "LineComment" || e4.type === "BlockComment" ? this.visitComment(e4, t3) : this.attach && this.visitNode(e4, t3);
              }, e3;
            }();
            t2.CommentHandler = i;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Syntax = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DoWhileStatement: "DoWhileStatement", DebuggerStatement: "DebuggerStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForOfStatement: "ForOfStatement", ForInStatement: "ForInStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchCase: "SwitchCase", SwitchStatement: "SwitchStatement", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" };
          }, function(e2, t2, r2) {
            "use strict";
            var n2, i = this && this.__extends || (n2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r3 in t3)
                t3.hasOwnProperty(r3) && (e3[r3] = t3[r3]);
            }, function(e3, t3) {
              function r3() {
                this.constructor = e3;
              }
              n2(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r3.prototype = t3.prototype, new r3());
            });
            Object.defineProperty(t2, "__esModule", { value: true });
            var o = r2(4), a = r2(5), s = r2(6), u = r2(7), l = r2(8), c = r2(13), h = r2(14);
            function p(e3) {
              var t3;
              switch (e3.type) {
                case s.JSXSyntax.JSXIdentifier:
                  t3 = e3.name;
                  break;
                case s.JSXSyntax.JSXNamespacedName:
                  var r3 = e3;
                  t3 = p(r3.namespace) + ":" + p(r3.name);
                  break;
                case s.JSXSyntax.JSXMemberExpression:
                  var n3 = e3;
                  t3 = p(n3.object) + "." + p(n3.property);
              }
              return t3;
            }
            c.TokenName[100] = "JSXIdentifier", c.TokenName[101] = "JSXText";
            var f = function(e3) {
              function t3(t4, r3, n3) {
                return e3.call(this, t4, r3, n3) || this;
              }
              return i(t3, e3), t3.prototype.parsePrimaryExpression = function() {
                return this.match("<") ? this.parseJSXRoot() : e3.prototype.parsePrimaryExpression.call(this);
              }, t3.prototype.startJSX = function() {
                this.scanner.index = this.startMarker.index, this.scanner.lineNumber = this.startMarker.line, this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
              }, t3.prototype.finishJSX = function() {
                this.nextToken();
              }, t3.prototype.reenterJSX = function() {
                this.startJSX(), this.expectJSX("}"), this.config.tokens && this.tokens.pop();
              }, t3.prototype.createJSXNode = function() {
                return this.collectComments(), { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t3.prototype.createJSXChildNode = function() {
                return { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t3.prototype.scanXHTMLEntity = function(e4) {
                for (var t4 = "&", r3 = true, n3 = false, i2 = false, a2 = false; !this.scanner.eof() && r3 && !n3; ) {
                  var s2 = this.scanner.source[this.scanner.index];
                  if (s2 === e4)
                    break;
                  if (n3 = s2 === ";", t4 += s2, ++this.scanner.index, !n3)
                    switch (t4.length) {
                      case 2:
                        i2 = s2 === "#";
                        break;
                      case 3:
                        i2 && (r3 = (a2 = s2 === "x") || o.Character.isDecimalDigit(s2.charCodeAt(0)), i2 = i2 && !a2);
                        break;
                      default:
                        r3 = (r3 = r3 && !(i2 && !o.Character.isDecimalDigit(s2.charCodeAt(0)))) && !(a2 && !o.Character.isHexDigit(s2.charCodeAt(0)));
                    }
                }
                if (r3 && n3 && t4.length > 2) {
                  var u2 = t4.substr(1, t4.length - 2);
                  i2 && u2.length > 1 ? t4 = String.fromCharCode(parseInt(u2.substr(1), 10)) : a2 && u2.length > 2 ? t4 = String.fromCharCode(parseInt("0" + u2.substr(1), 16)) : i2 || a2 || !h.XHTMLEntities[u2] || (t4 = h.XHTMLEntities[u2]);
                }
                return t4;
              }, t3.prototype.lexJSX = function() {
                var e4 = this.scanner.source.charCodeAt(this.scanner.index);
                if (e4 === 60 || e4 === 62 || e4 === 47 || e4 === 58 || e4 === 61 || e4 === 123 || e4 === 125)
                  return { type: 7, value: s2 = this.scanner.source[this.scanner.index++], lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index - 1, end: this.scanner.index };
                if (e4 === 34 || e4 === 39) {
                  for (var t4 = this.scanner.index, r3 = this.scanner.source[this.scanner.index++], n3 = ""; !this.scanner.eof() && (u2 = this.scanner.source[this.scanner.index++]) !== r3; )
                    n3 += u2 === "&" ? this.scanXHTMLEntity(r3) : u2;
                  return { type: 8, value: n3, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                }
                if (e4 === 46) {
                  var i2 = this.scanner.source.charCodeAt(this.scanner.index + 1), a2 = this.scanner.source.charCodeAt(this.scanner.index + 2), s2 = i2 === 46 && a2 === 46 ? "..." : ".";
                  return t4 = this.scanner.index, this.scanner.index += s2.length, { type: 7, value: s2, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                }
                if (e4 === 96)
                  return { type: 10, value: "", lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index, end: this.scanner.index };
                if (o.Character.isIdentifierStart(e4) && e4 !== 92) {
                  for (t4 = this.scanner.index, ++this.scanner.index; !this.scanner.eof(); ) {
                    var u2 = this.scanner.source.charCodeAt(this.scanner.index);
                    if (o.Character.isIdentifierPart(u2) && u2 !== 92)
                      ++this.scanner.index;
                    else {
                      if (u2 !== 45)
                        break;
                      ++this.scanner.index;
                    }
                  }
                  return { type: 100, value: this.scanner.source.slice(t4, this.scanner.index), lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                }
                return this.scanner.lex();
              }, t3.prototype.nextJSXToken = function() {
                this.collectComments(), this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                var e4 = this.lexJSX();
                return this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.config.tokens && this.tokens.push(this.convertToken(e4)), e4;
              }, t3.prototype.nextJSXText = function() {
                this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                for (var e4 = this.scanner.index, t4 = ""; !this.scanner.eof(); ) {
                  var r3 = this.scanner.source[this.scanner.index];
                  if (r3 === "{" || r3 === "<")
                    break;
                  ++this.scanner.index, t4 += r3, o.Character.isLineTerminator(r3.charCodeAt(0)) && (++this.scanner.lineNumber, r3 === "\r" && this.scanner.source[this.scanner.index] === "\n" && ++this.scanner.index, this.scanner.lineStart = this.scanner.index);
                }
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                var n3 = { type: 101, value: t4, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: e4, end: this.scanner.index };
                return t4.length > 0 && this.config.tokens && this.tokens.push(this.convertToken(n3)), n3;
              }, t3.prototype.peekJSXToken = function() {
                var e4 = this.scanner.saveState();
                this.scanner.scanComments();
                var t4 = this.lexJSX();
                return this.scanner.restoreState(e4), t4;
              }, t3.prototype.expectJSX = function(e4) {
                var t4 = this.nextJSXToken();
                t4.type === 7 && t4.value === e4 || this.throwUnexpectedToken(t4);
              }, t3.prototype.matchJSX = function(e4) {
                var t4 = this.peekJSXToken();
                return t4.type === 7 && t4.value === e4;
              }, t3.prototype.parseJSXIdentifier = function() {
                var e4 = this.createJSXNode(), t4 = this.nextJSXToken();
                return t4.type !== 100 && this.throwUnexpectedToken(t4), this.finalize(e4, new a.JSXIdentifier(t4.value));
              }, t3.prototype.parseJSXElementName = function() {
                var e4 = this.createJSXNode(), t4 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var r3 = t4;
                  this.expectJSX(":");
                  var n3 = this.parseJSXIdentifier();
                  t4 = this.finalize(e4, new a.JSXNamespacedName(r3, n3));
                } else if (this.matchJSX("."))
                  for (; this.matchJSX("."); ) {
                    var i2 = t4;
                    this.expectJSX(".");
                    var o2 = this.parseJSXIdentifier();
                    t4 = this.finalize(e4, new a.JSXMemberExpression(i2, o2));
                  }
                return t4;
              }, t3.prototype.parseJSXAttributeName = function() {
                var e4, t4 = this.createJSXNode(), r3 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var n3 = r3;
                  this.expectJSX(":");
                  var i2 = this.parseJSXIdentifier();
                  e4 = this.finalize(t4, new a.JSXNamespacedName(n3, i2));
                } else
                  e4 = r3;
                return e4;
              }, t3.prototype.parseJSXStringLiteralAttribute = function() {
                var e4 = this.createJSXNode(), t4 = this.nextJSXToken();
                t4.type !== 8 && this.throwUnexpectedToken(t4);
                var r3 = this.getTokenRaw(t4);
                return this.finalize(e4, new u.Literal(t4.value, r3));
              }, t3.prototype.parseJSXExpressionAttribute = function() {
                var e4 = this.createJSXNode();
                this.expectJSX("{"), this.finishJSX(), this.match("}") && this.tolerateError("JSX attributes must only be assigned a non-empty expression");
                var t4 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e4, new a.JSXExpressionContainer(t4));
              }, t3.prototype.parseJSXAttributeValue = function() {
                return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
              }, t3.prototype.parseJSXNameValueAttribute = function() {
                var e4 = this.createJSXNode(), t4 = this.parseJSXAttributeName(), r3 = null;
                return this.matchJSX("=") && (this.expectJSX("="), r3 = this.parseJSXAttributeValue()), this.finalize(e4, new a.JSXAttribute(t4, r3));
              }, t3.prototype.parseJSXSpreadAttribute = function() {
                var e4 = this.createJSXNode();
                this.expectJSX("{"), this.expectJSX("..."), this.finishJSX();
                var t4 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e4, new a.JSXSpreadAttribute(t4));
              }, t3.prototype.parseJSXAttributes = function() {
                for (var e4 = []; !this.matchJSX("/") && !this.matchJSX(">"); ) {
                  var t4 = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                  e4.push(t4);
                }
                return e4;
              }, t3.prototype.parseJSXOpeningElement = function() {
                var e4 = this.createJSXNode();
                this.expectJSX("<");
                var t4 = this.parseJSXElementName(), r3 = this.parseJSXAttributes(), n3 = this.matchJSX("/");
                return n3 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e4, new a.JSXOpeningElement(t4, n3, r3));
              }, t3.prototype.parseJSXBoundaryElement = function() {
                var e4 = this.createJSXNode();
                if (this.expectJSX("<"), this.matchJSX("/")) {
                  this.expectJSX("/");
                  var t4 = this.parseJSXElementName();
                  return this.expectJSX(">"), this.finalize(e4, new a.JSXClosingElement(t4));
                }
                var r3 = this.parseJSXElementName(), n3 = this.parseJSXAttributes(), i2 = this.matchJSX("/");
                return i2 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e4, new a.JSXOpeningElement(r3, i2, n3));
              }, t3.prototype.parseJSXEmptyExpression = function() {
                var e4 = this.createJSXChildNode();
                return this.collectComments(), this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.finalize(e4, new a.JSXEmptyExpression());
              }, t3.prototype.parseJSXExpressionContainer = function() {
                var e4, t4 = this.createJSXNode();
                return this.expectJSX("{"), this.matchJSX("}") ? (e4 = this.parseJSXEmptyExpression(), this.expectJSX("}")) : (this.finishJSX(), e4 = this.parseAssignmentExpression(), this.reenterJSX()), this.finalize(t4, new a.JSXExpressionContainer(e4));
              }, t3.prototype.parseJSXChildren = function() {
                for (var e4 = []; !this.scanner.eof(); ) {
                  var t4 = this.createJSXChildNode(), r3 = this.nextJSXText();
                  if (r3.start < r3.end) {
                    var n3 = this.getTokenRaw(r3), i2 = this.finalize(t4, new a.JSXText(r3.value, n3));
                    e4.push(i2);
                  }
                  if (this.scanner.source[this.scanner.index] !== "{")
                    break;
                  var o2 = this.parseJSXExpressionContainer();
                  e4.push(o2);
                }
                return e4;
              }, t3.prototype.parseComplexJSXElement = function(e4) {
                for (var t4 = []; !this.scanner.eof(); ) {
                  e4.children = e4.children.concat(this.parseJSXChildren());
                  var r3 = this.createJSXChildNode(), n3 = this.parseJSXBoundaryElement();
                  if (n3.type === s.JSXSyntax.JSXOpeningElement) {
                    var i2 = n3;
                    if (i2.selfClosing) {
                      var o2 = this.finalize(r3, new a.JSXElement(i2, [], null));
                      e4.children.push(o2);
                    } else
                      t4.push(e4), e4 = { node: r3, opening: i2, closing: null, children: [] };
                  }
                  if (n3.type === s.JSXSyntax.JSXClosingElement) {
                    e4.closing = n3;
                    var u2 = p(e4.opening.name);
                    if (u2 !== p(e4.closing.name) && this.tolerateError("Expected corresponding JSX closing tag for %0", u2), !(t4.length > 0))
                      break;
                    o2 = this.finalize(e4.node, new a.JSXElement(e4.opening, e4.children, e4.closing)), (e4 = t4[t4.length - 1]).children.push(o2), t4.pop();
                  }
                }
                return e4;
              }, t3.prototype.parseJSXElement = function() {
                var e4 = this.createJSXNode(), t4 = this.parseJSXOpeningElement(), r3 = [], n3 = null;
                if (!t4.selfClosing) {
                  var i2 = this.parseComplexJSXElement({ node: e4, opening: t4, closing: n3, children: r3 });
                  r3 = i2.children, n3 = i2.closing;
                }
                return this.finalize(e4, new a.JSXElement(t4, r3, n3));
              }, t3.prototype.parseJSXRoot = function() {
                this.config.tokens && this.tokens.pop(), this.startJSX();
                var e4 = this.parseJSXElement();
                return this.finishJSX(), e4;
              }, t3.prototype.isStartOfExpression = function() {
                return e3.prototype.isStartOfExpression.call(this) || this.match("<");
              }, t3;
            }(l.Parser);
            t2.JSXParser = f;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var r2 = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ };
            t2.Character = { fromCodePoint: function(e3) {
              return e3 < 65536 ? String.fromCharCode(e3) : String.fromCharCode(55296 + (e3 - 65536 >> 10)) + String.fromCharCode(56320 + (e3 - 65536 & 1023));
            }, isWhiteSpace: function(e3) {
              return e3 === 32 || e3 === 9 || e3 === 11 || e3 === 12 || e3 === 160 || e3 >= 5760 && [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(e3) >= 0;
            }, isLineTerminator: function(e3) {
              return e3 === 10 || e3 === 13 || e3 === 8232 || e3 === 8233;
            }, isIdentifierStart: function(e3) {
              return e3 === 36 || e3 === 95 || e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122 || e3 === 92 || e3 >= 128 && r2.NonAsciiIdentifierStart.test(t2.Character.fromCodePoint(e3));
            }, isIdentifierPart: function(e3) {
              return e3 === 36 || e3 === 95 || e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122 || e3 >= 48 && e3 <= 57 || e3 === 92 || e3 >= 128 && r2.NonAsciiIdentifierPart.test(t2.Character.fromCodePoint(e3));
            }, isDecimalDigit: function(e3) {
              return e3 >= 48 && e3 <= 57;
            }, isHexDigit: function(e3) {
              return e3 >= 48 && e3 <= 57 || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
            }, isOctalDigit: function(e3) {
              return e3 >= 48 && e3 <= 55;
            } };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(6), i = function(e3) {
              this.type = n2.JSXSyntax.JSXClosingElement, this.name = e3;
            };
            t2.JSXClosingElement = i;
            var o = function(e3, t3, r3) {
              this.type = n2.JSXSyntax.JSXElement, this.openingElement = e3, this.children = t3, this.closingElement = r3;
            };
            t2.JSXElement = o;
            var a = function() {
              this.type = n2.JSXSyntax.JSXEmptyExpression;
            };
            t2.JSXEmptyExpression = a;
            var s = function(e3) {
              this.type = n2.JSXSyntax.JSXExpressionContainer, this.expression = e3;
            };
            t2.JSXExpressionContainer = s;
            var u = function(e3) {
              this.type = n2.JSXSyntax.JSXIdentifier, this.name = e3;
            };
            t2.JSXIdentifier = u;
            var l = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXMemberExpression, this.object = e3, this.property = t3;
            };
            t2.JSXMemberExpression = l;
            var c = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXAttribute, this.name = e3, this.value = t3;
            };
            t2.JSXAttribute = c;
            var h = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXNamespacedName, this.namespace = e3, this.name = t3;
            };
            t2.JSXNamespacedName = h;
            var p = function(e3, t3, r3) {
              this.type = n2.JSXSyntax.JSXOpeningElement, this.name = e3, this.selfClosing = t3, this.attributes = r3;
            };
            t2.JSXOpeningElement = p;
            var f = function(e3) {
              this.type = n2.JSXSyntax.JSXSpreadAttribute, this.argument = e3;
            };
            t2.JSXSpreadAttribute = f;
            var d = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXText, this.value = e3, this.raw = t3;
            };
            t2.JSXText = d;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.JSXSyntax = { JSXAttribute: "JSXAttribute", JSXClosingElement: "JSXClosingElement", JSXElement: "JSXElement", JSXEmptyExpression: "JSXEmptyExpression", JSXExpressionContainer: "JSXExpressionContainer", JSXIdentifier: "JSXIdentifier", JSXMemberExpression: "JSXMemberExpression", JSXNamespacedName: "JSXNamespacedName", JSXOpeningElement: "JSXOpeningElement", JSXSpreadAttribute: "JSXSpreadAttribute", JSXText: "JSXText" };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(2), i = function(e3) {
              this.type = n2.Syntax.ArrayExpression, this.elements = e3;
            };
            t2.ArrayExpression = i;
            var o = function(e3) {
              this.type = n2.Syntax.ArrayPattern, this.elements = e3;
            };
            t2.ArrayPattern = o;
            var a = function(e3, t3, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e3, this.body = t3, this.generator = false, this.expression = r3, this.async = false;
            };
            t2.ArrowFunctionExpression = a;
            var s = function(e3, t3, r3) {
              this.type = n2.Syntax.AssignmentExpression, this.operator = e3, this.left = t3, this.right = r3;
            };
            t2.AssignmentExpression = s;
            var u = function(e3, t3) {
              this.type = n2.Syntax.AssignmentPattern, this.left = e3, this.right = t3;
            };
            t2.AssignmentPattern = u;
            var l = function(e3, t3, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e3, this.body = t3, this.generator = false, this.expression = r3, this.async = true;
            };
            t2.AsyncArrowFunctionExpression = l;
            var c = function(e3, t3, r3) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e3, this.params = t3, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t2.AsyncFunctionDeclaration = c;
            var h = function(e3, t3, r3) {
              this.type = n2.Syntax.FunctionExpression, this.id = e3, this.params = t3, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t2.AsyncFunctionExpression = h;
            var p = function(e3) {
              this.type = n2.Syntax.AwaitExpression, this.argument = e3;
            };
            t2.AwaitExpression = p;
            var f = function(e3, t3, r3) {
              var i2 = e3 === "||" || e3 === "&&";
              this.type = i2 ? n2.Syntax.LogicalExpression : n2.Syntax.BinaryExpression, this.operator = e3, this.left = t3, this.right = r3;
            };
            t2.BinaryExpression = f;
            var d = function(e3) {
              this.type = n2.Syntax.BlockStatement, this.body = e3;
            };
            t2.BlockStatement = d;
            var m = function(e3) {
              this.type = n2.Syntax.BreakStatement, this.label = e3;
            };
            t2.BreakStatement = m;
            var y = function(e3, t3) {
              this.type = n2.Syntax.CallExpression, this.callee = e3, this.arguments = t3;
            };
            t2.CallExpression = y;
            var v = function(e3, t3) {
              this.type = n2.Syntax.CatchClause, this.param = e3, this.body = t3;
            };
            t2.CatchClause = v;
            var _ = function(e3) {
              this.type = n2.Syntax.ClassBody, this.body = e3;
            };
            t2.ClassBody = _;
            var g = function(e3, t3, r3) {
              this.type = n2.Syntax.ClassDeclaration, this.id = e3, this.superClass = t3, this.body = r3;
            };
            t2.ClassDeclaration = g;
            var b = function(e3, t3, r3) {
              this.type = n2.Syntax.ClassExpression, this.id = e3, this.superClass = t3, this.body = r3;
            };
            t2.ClassExpression = b;
            var x = function(e3, t3) {
              this.type = n2.Syntax.MemberExpression, this.computed = true, this.object = e3, this.property = t3;
            };
            t2.ComputedMemberExpression = x;
            var w = function(e3, t3, r3) {
              this.type = n2.Syntax.ConditionalExpression, this.test = e3, this.consequent = t3, this.alternate = r3;
            };
            t2.ConditionalExpression = w;
            var E = function(e3) {
              this.type = n2.Syntax.ContinueStatement, this.label = e3;
            };
            t2.ContinueStatement = E;
            var D = function() {
              this.type = n2.Syntax.DebuggerStatement;
            };
            t2.DebuggerStatement = D;
            var S = function(e3, t3) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e3, this.directive = t3;
            };
            t2.Directive = S;
            var C = function(e3, t3) {
              this.type = n2.Syntax.DoWhileStatement, this.body = e3, this.test = t3;
            };
            t2.DoWhileStatement = C;
            var A = function() {
              this.type = n2.Syntax.EmptyStatement;
            };
            t2.EmptyStatement = A;
            var N = function(e3) {
              this.type = n2.Syntax.ExportAllDeclaration, this.source = e3;
            };
            t2.ExportAllDeclaration = N;
            var T = function(e3) {
              this.type = n2.Syntax.ExportDefaultDeclaration, this.declaration = e3;
            };
            t2.ExportDefaultDeclaration = T;
            var O = function(e3, t3, r3) {
              this.type = n2.Syntax.ExportNamedDeclaration, this.declaration = e3, this.specifiers = t3, this.source = r3;
            };
            t2.ExportNamedDeclaration = O;
            var F = function(e3, t3) {
              this.type = n2.Syntax.ExportSpecifier, this.exported = t3, this.local = e3;
            };
            t2.ExportSpecifier = F;
            var k = function(e3) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e3;
            };
            t2.ExpressionStatement = k;
            var P = function(e3, t3, r3) {
              this.type = n2.Syntax.ForInStatement, this.left = e3, this.right = t3, this.body = r3, this.each = false;
            };
            t2.ForInStatement = P;
            var I = function(e3, t3, r3) {
              this.type = n2.Syntax.ForOfStatement, this.left = e3, this.right = t3, this.body = r3;
            };
            t2.ForOfStatement = I;
            var L = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.ForStatement, this.init = e3, this.test = t3, this.update = r3, this.body = i2;
            };
            t2.ForStatement = L;
            var M = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e3, this.params = t3, this.body = r3, this.generator = i2, this.expression = false, this.async = false;
            };
            t2.FunctionDeclaration = M;
            var B = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.FunctionExpression, this.id = e3, this.params = t3, this.body = r3, this.generator = i2, this.expression = false, this.async = false;
            };
            t2.FunctionExpression = B;
            var j = function(e3) {
              this.type = n2.Syntax.Identifier, this.name = e3;
            };
            t2.Identifier = j;
            var R = function(e3, t3, r3) {
              this.type = n2.Syntax.IfStatement, this.test = e3, this.consequent = t3, this.alternate = r3;
            };
            t2.IfStatement = R;
            var z = function(e3, t3) {
              this.type = n2.Syntax.ImportDeclaration, this.specifiers = e3, this.source = t3;
            };
            t2.ImportDeclaration = z;
            var U = function(e3) {
              this.type = n2.Syntax.ImportDefaultSpecifier, this.local = e3;
            };
            t2.ImportDefaultSpecifier = U;
            var G = function(e3) {
              this.type = n2.Syntax.ImportNamespaceSpecifier, this.local = e3;
            };
            t2.ImportNamespaceSpecifier = G;
            var X = function(e3, t3) {
              this.type = n2.Syntax.ImportSpecifier, this.local = e3, this.imported = t3;
            };
            t2.ImportSpecifier = X;
            var q = function(e3, t3) {
              this.type = n2.Syntax.LabeledStatement, this.label = e3, this.body = t3;
            };
            t2.LabeledStatement = q;
            var W = function(e3, t3) {
              this.type = n2.Syntax.Literal, this.value = e3, this.raw = t3;
            };
            t2.Literal = W;
            var H = function(e3, t3) {
              this.type = n2.Syntax.MetaProperty, this.meta = e3, this.property = t3;
            };
            t2.MetaProperty = H;
            var J = function(e3, t3, r3, i2, o2) {
              this.type = n2.Syntax.MethodDefinition, this.key = e3, this.computed = t3, this.value = r3, this.kind = i2, this.static = o2;
            };
            t2.MethodDefinition = J;
            var Y = function(e3) {
              this.type = n2.Syntax.Program, this.body = e3, this.sourceType = "module";
            };
            t2.Module = Y;
            var V = function(e3, t3) {
              this.type = n2.Syntax.NewExpression, this.callee = e3, this.arguments = t3;
            };
            t2.NewExpression = V;
            var K = function(e3) {
              this.type = n2.Syntax.ObjectExpression, this.properties = e3;
            };
            t2.ObjectExpression = K;
            var $ = function(e3) {
              this.type = n2.Syntax.ObjectPattern, this.properties = e3;
            };
            t2.ObjectPattern = $;
            var Q = function(e3, t3, r3, i2, o2, a2) {
              this.type = n2.Syntax.Property, this.key = t3, this.computed = r3, this.value = i2, this.kind = e3, this.method = o2, this.shorthand = a2;
            };
            t2.Property = Q;
            var Z = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.Literal, this.value = e3, this.raw = t3, this.regex = { pattern: r3, flags: i2 };
            };
            t2.RegexLiteral = Z;
            var ee = function(e3) {
              this.type = n2.Syntax.RestElement, this.argument = e3;
            };
            t2.RestElement = ee;
            var te = function(e3) {
              this.type = n2.Syntax.ReturnStatement, this.argument = e3;
            };
            t2.ReturnStatement = te;
            var re = function(e3) {
              this.type = n2.Syntax.Program, this.body = e3, this.sourceType = "script";
            };
            t2.Script = re;
            var ne = function(e3) {
              this.type = n2.Syntax.SequenceExpression, this.expressions = e3;
            };
            t2.SequenceExpression = ne;
            var ie = function(e3) {
              this.type = n2.Syntax.SpreadElement, this.argument = e3;
            };
            t2.SpreadElement = ie;
            var oe = function(e3, t3) {
              this.type = n2.Syntax.MemberExpression, this.computed = false, this.object = e3, this.property = t3;
            };
            t2.StaticMemberExpression = oe;
            var ae = function() {
              this.type = n2.Syntax.Super;
            };
            t2.Super = ae;
            var se = function(e3, t3) {
              this.type = n2.Syntax.SwitchCase, this.test = e3, this.consequent = t3;
            };
            t2.SwitchCase = se;
            var ue = function(e3, t3) {
              this.type = n2.Syntax.SwitchStatement, this.discriminant = e3, this.cases = t3;
            };
            t2.SwitchStatement = ue;
            var le = function(e3, t3) {
              this.type = n2.Syntax.TaggedTemplateExpression, this.tag = e3, this.quasi = t3;
            };
            t2.TaggedTemplateExpression = le;
            var ce = function(e3, t3) {
              this.type = n2.Syntax.TemplateElement, this.value = e3, this.tail = t3;
            };
            t2.TemplateElement = ce;
            var he = function(e3, t3) {
              this.type = n2.Syntax.TemplateLiteral, this.quasis = e3, this.expressions = t3;
            };
            t2.TemplateLiteral = he;
            var pe = function() {
              this.type = n2.Syntax.ThisExpression;
            };
            t2.ThisExpression = pe;
            var fe = function(e3) {
              this.type = n2.Syntax.ThrowStatement, this.argument = e3;
            };
            t2.ThrowStatement = fe;
            var de = function(e3, t3, r3) {
              this.type = n2.Syntax.TryStatement, this.block = e3, this.handler = t3, this.finalizer = r3;
            };
            t2.TryStatement = de;
            var me = function(e3, t3) {
              this.type = n2.Syntax.UnaryExpression, this.operator = e3, this.argument = t3, this.prefix = true;
            };
            t2.UnaryExpression = me;
            var ye = function(e3, t3, r3) {
              this.type = n2.Syntax.UpdateExpression, this.operator = e3, this.argument = t3, this.prefix = r3;
            };
            t2.UpdateExpression = ye;
            var ve = function(e3, t3) {
              this.type = n2.Syntax.VariableDeclaration, this.declarations = e3, this.kind = t3;
            };
            t2.VariableDeclaration = ve;
            var _e = function(e3, t3) {
              this.type = n2.Syntax.VariableDeclarator, this.id = e3, this.init = t3;
            };
            t2.VariableDeclarator = _e;
            var ge = function(e3, t3) {
              this.type = n2.Syntax.WhileStatement, this.test = e3, this.body = t3;
            };
            t2.WhileStatement = ge;
            var be = function(e3, t3) {
              this.type = n2.Syntax.WithStatement, this.object = e3, this.body = t3;
            };
            t2.WithStatement = be;
            var xe = function(e3, t3) {
              this.type = n2.Syntax.YieldExpression, this.argument = e3, this.delegate = t3;
            };
            t2.YieldExpression = xe;
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(9), i = r2(10), o = r2(11), a = r2(7), s = r2(12), u = r2(2), l = r2(13), c = function() {
              function e3(e4, t3, r3) {
                t3 === void 0 && (t3 = {}), this.config = { range: typeof t3.range == "boolean" && t3.range, loc: typeof t3.loc == "boolean" && t3.loc, source: null, tokens: typeof t3.tokens == "boolean" && t3.tokens, comment: typeof t3.comment == "boolean" && t3.comment, tolerant: typeof t3.tolerant == "boolean" && t3.tolerant }, this.config.loc && t3.source && t3.source !== null && (this.config.source = String(t3.source)), this.delegate = r3, this.errorHandler = new i.ErrorHandler(), this.errorHandler.tolerant = this.config.tolerant, this.scanner = new s.Scanner(e4, this.errorHandler), this.scanner.trackComment = this.config.comment, this.operatorPrecedence = { ")": 0, ";": 0, ",": 0, "=": 0, "]": 0, "||": 1, "&&": 2, "|": 3, "^": 4, "&": 5, "==": 6, "!=": 6, "===": 6, "!==": 6, "<": 7, ">": 7, "<=": 7, ">=": 7, "<<": 8, ">>": 8, ">>>": 8, "+": 9, "-": 9, "*": 11, "/": 11, "%": 11 }, this.lookahead = { type: 2, value: "", lineNumber: this.scanner.lineNumber, lineStart: 0, start: 0, end: 0 }, this.hasLineTerminator = false, this.context = { isModule: false, await: false, allowIn: true, allowStrictDirective: true, allowYield: true, firstCoverInitializedNameError: null, isAssignmentTarget: false, isBindingElement: false, inFunctionBody: false, inIteration: false, inSwitch: false, labelSet: {}, strict: false }, this.tokens = [], this.startMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.lastMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.nextToken(), this.lastMarker = { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }
              return e3.prototype.throwError = function(e4) {
                for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                  t3[r3 - 1] = arguments[r3];
                var i2 = Array.prototype.slice.call(arguments, 1), o2 = e4.replace(/%(\d)/g, function(e5, t4) {
                  return n2.assert(t4 < i2.length, "Message reference must be in range"), i2[t4];
                }), a2 = this.lastMarker.index, s2 = this.lastMarker.line, u2 = this.lastMarker.column + 1;
                throw this.errorHandler.createError(a2, s2, u2, o2);
              }, e3.prototype.tolerateError = function(e4) {
                for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                  t3[r3 - 1] = arguments[r3];
                var i2 = Array.prototype.slice.call(arguments, 1), o2 = e4.replace(/%(\d)/g, function(e5, t4) {
                  return n2.assert(t4 < i2.length, "Message reference must be in range"), i2[t4];
                }), a2 = this.lastMarker.index, s2 = this.scanner.lineNumber, u2 = this.lastMarker.column + 1;
                this.errorHandler.tolerateError(a2, s2, u2, o2);
              }, e3.prototype.unexpectedTokenError = function(e4, t3) {
                var r3, n3 = t3 || o.Messages.UnexpectedToken;
                if (e4 ? (t3 || (n3 = e4.type === 2 ? o.Messages.UnexpectedEOS : e4.type === 3 ? o.Messages.UnexpectedIdentifier : e4.type === 6 ? o.Messages.UnexpectedNumber : e4.type === 8 ? o.Messages.UnexpectedString : e4.type === 10 ? o.Messages.UnexpectedTemplate : o.Messages.UnexpectedToken, e4.type === 4 && (this.scanner.isFutureReservedWord(e4.value) ? n3 = o.Messages.UnexpectedReserved : this.context.strict && this.scanner.isStrictModeReservedWord(e4.value) && (n3 = o.Messages.StrictReservedWord))), r3 = e4.value) : r3 = "ILLEGAL", n3 = n3.replace("%0", r3), e4 && typeof e4.lineNumber == "number") {
                  var i2 = e4.start, a2 = e4.lineNumber, s2 = this.lastMarker.index - this.lastMarker.column, u2 = e4.start - s2 + 1;
                  return this.errorHandler.createError(i2, a2, u2, n3);
                }
                return i2 = this.lastMarker.index, a2 = this.lastMarker.line, u2 = this.lastMarker.column + 1, this.errorHandler.createError(i2, a2, u2, n3);
              }, e3.prototype.throwUnexpectedToken = function(e4, t3) {
                throw this.unexpectedTokenError(e4, t3);
              }, e3.prototype.tolerateUnexpectedToken = function(e4, t3) {
                this.errorHandler.tolerate(this.unexpectedTokenError(e4, t3));
              }, e3.prototype.collectComments = function() {
                if (this.config.comment) {
                  var e4 = this.scanner.scanComments();
                  if (e4.length > 0 && this.delegate)
                    for (var t3 = 0; t3 < e4.length; ++t3) {
                      var r3 = e4[t3], n3 = void 0;
                      n3 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: this.scanner.source.slice(r3.slice[0], r3.slice[1]) }, this.config.range && (n3.range = r3.range), this.config.loc && (n3.loc = r3.loc);
                      var i2 = { start: { line: r3.loc.start.line, column: r3.loc.start.column, offset: r3.range[0] }, end: { line: r3.loc.end.line, column: r3.loc.end.column, offset: r3.range[1] } };
                      this.delegate(n3, i2);
                    }
                } else
                  this.scanner.scanComments();
              }, e3.prototype.getTokenRaw = function(e4) {
                return this.scanner.source.slice(e4.start, e4.end);
              }, e3.prototype.convertToken = function(e4) {
                var t3 = { type: l.TokenName[e4.type], value: this.getTokenRaw(e4) };
                if (this.config.range && (t3.range = [e4.start, e4.end]), this.config.loc && (t3.loc = { start: { line: this.startMarker.line, column: this.startMarker.column }, end: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart } }), e4.type === 9) {
                  var r3 = e4.pattern, n3 = e4.flags;
                  t3.regex = { pattern: r3, flags: n3 };
                }
                return t3;
              }, e3.prototype.nextToken = function() {
                var e4 = this.lookahead;
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.collectComments(), this.scanner.index !== this.startMarker.index && (this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart);
                var t3 = this.scanner.lex();
                return this.hasLineTerminator = e4.lineNumber !== t3.lineNumber, t3 && this.context.strict && t3.type === 3 && this.scanner.isStrictModeReservedWord(t3.value) && (t3.type = 4), this.lookahead = t3, this.config.tokens && t3.type !== 2 && this.tokens.push(this.convertToken(t3)), e4;
              }, e3.prototype.nextRegexToken = function() {
                this.collectComments();
                var e4 = this.scanner.scanRegExp();
                return this.config.tokens && (this.tokens.pop(), this.tokens.push(this.convertToken(e4))), this.lookahead = e4, this.nextToken(), e4;
              }, e3.prototype.createNode = function() {
                return { index: this.startMarker.index, line: this.startMarker.line, column: this.startMarker.column };
              }, e3.prototype.startNode = function(e4, t3) {
                t3 === void 0 && (t3 = 0);
                var r3 = e4.start - e4.lineStart, n3 = e4.lineNumber;
                return r3 < 0 && (r3 += t3, n3--), { index: e4.start, line: n3, column: r3 };
              }, e3.prototype.finalize = function(e4, t3) {
                if (this.config.range && (t3.range = [e4.index, this.lastMarker.index]), this.config.loc && (t3.loc = { start: { line: e4.line, column: e4.column }, end: { line: this.lastMarker.line, column: this.lastMarker.column } }, this.config.source && (t3.loc.source = this.config.source)), this.delegate) {
                  var r3 = { start: { line: e4.line, column: e4.column, offset: e4.index }, end: { line: this.lastMarker.line, column: this.lastMarker.column, offset: this.lastMarker.index } };
                  this.delegate(t3, r3);
                }
                return t3;
              }, e3.prototype.expect = function(e4) {
                var t3 = this.nextToken();
                t3.type === 7 && t3.value === e4 || this.throwUnexpectedToken(t3);
              }, e3.prototype.expectCommaSeparator = function() {
                if (this.config.tolerant) {
                  var e4 = this.lookahead;
                  e4.type === 7 && e4.value === "," ? this.nextToken() : e4.type === 7 && e4.value === ";" ? (this.nextToken(), this.tolerateUnexpectedToken(e4)) : this.tolerateUnexpectedToken(e4, o.Messages.UnexpectedToken);
                } else
                  this.expect(",");
              }, e3.prototype.expectKeyword = function(e4) {
                var t3 = this.nextToken();
                t3.type === 4 && t3.value === e4 || this.throwUnexpectedToken(t3);
              }, e3.prototype.match = function(e4) {
                return this.lookahead.type === 7 && this.lookahead.value === e4;
              }, e3.prototype.matchKeyword = function(e4) {
                return this.lookahead.type === 4 && this.lookahead.value === e4;
              }, e3.prototype.matchContextualKeyword = function(e4) {
                return this.lookahead.type === 3 && this.lookahead.value === e4;
              }, e3.prototype.matchAssign = function() {
                if (this.lookahead.type !== 7)
                  return false;
                var e4 = this.lookahead.value;
                return e4 === "=" || e4 === "*=" || e4 === "**=" || e4 === "/=" || e4 === "%=" || e4 === "+=" || e4 === "-=" || e4 === "<<=" || e4 === ">>=" || e4 === ">>>=" || e4 === "&=" || e4 === "^=" || e4 === "|=";
              }, e3.prototype.isolateCoverGrammar = function(e4) {
                var t3 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i2 = e4.call(this);
                return this.context.firstCoverInitializedNameError !== null && this.throwUnexpectedToken(this.context.firstCoverInitializedNameError), this.context.isBindingElement = t3, this.context.isAssignmentTarget = r3, this.context.firstCoverInitializedNameError = n3, i2;
              }, e3.prototype.inheritCoverGrammar = function(e4) {
                var t3 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i2 = e4.call(this);
                return this.context.isBindingElement = this.context.isBindingElement && t3, this.context.isAssignmentTarget = this.context.isAssignmentTarget && r3, this.context.firstCoverInitializedNameError = n3 || this.context.firstCoverInitializedNameError, i2;
              }, e3.prototype.consumeSemicolon = function() {
                this.match(";") ? this.nextToken() : this.hasLineTerminator || (this.lookahead.type === 2 || this.match("}") || this.throwUnexpectedToken(this.lookahead), this.lastMarker.index = this.startMarker.index, this.lastMarker.line = this.startMarker.line, this.lastMarker.column = this.startMarker.column);
              }, e3.prototype.parsePrimaryExpression = function() {
                var e4, t3, r3, n3 = this.createNode();
                switch (this.lookahead.type) {
                  case 3:
                    (this.context.isModule || this.context.await) && this.lookahead.value === "await" && this.tolerateUnexpectedToken(this.lookahead), e4 = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(n3, new a.Identifier(this.nextToken().value));
                    break;
                  case 6:
                  case 8:
                    this.context.strict && this.lookahead.octal && this.tolerateUnexpectedToken(this.lookahead, o.Messages.StrictOctalLiteral), this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(t3.value, r3));
                    break;
                  case 1:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(t3.value === "true", r3));
                    break;
                  case 5:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(null, r3));
                    break;
                  case 10:
                    e4 = this.parseTemplateLiteral();
                    break;
                  case 7:
                    switch (this.lookahead.value) {
                      case "(":
                        this.context.isBindingElement = false, e4 = this.inheritCoverGrammar(this.parseGroupExpression);
                        break;
                      case "[":
                        e4 = this.inheritCoverGrammar(this.parseArrayInitializer);
                        break;
                      case "{":
                        e4 = this.inheritCoverGrammar(this.parseObjectInitializer);
                        break;
                      case "/":
                      case "/=":
                        this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.scanner.index = this.startMarker.index, t3 = this.nextRegexToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.RegexLiteral(t3.regex, r3, t3.pattern, t3.flags));
                        break;
                      default:
                        e4 = this.throwUnexpectedToken(this.nextToken());
                    }
                    break;
                  case 4:
                    !this.context.strict && this.context.allowYield && this.matchKeyword("yield") ? e4 = this.parseIdentifierName() : !this.context.strict && this.matchKeyword("let") ? e4 = this.finalize(n3, new a.Identifier(this.nextToken().value)) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.matchKeyword("function") ? e4 = this.parseFunctionExpression() : this.matchKeyword("this") ? (this.nextToken(), e4 = this.finalize(n3, new a.ThisExpression())) : e4 = this.matchKeyword("class") ? this.parseClassExpression() : this.throwUnexpectedToken(this.nextToken()));
                    break;
                  default:
                    e4 = this.throwUnexpectedToken(this.nextToken());
                }
                return e4;
              }, e3.prototype.parseSpreadElement = function() {
                var e4 = this.createNode();
                this.expect("...");
                var t3 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                return this.finalize(e4, new a.SpreadElement(t3));
              }, e3.prototype.parseArrayInitializer = function() {
                var e4 = this.createNode(), t3 = [];
                for (this.expect("["); !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), t3.push(null);
                  else if (this.match("...")) {
                    var r3 = this.parseSpreadElement();
                    this.match("]") || (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.expect(",")), t3.push(r3);
                  } else
                    t3.push(this.inheritCoverGrammar(this.parseAssignmentExpression)), this.match("]") || this.expect(",");
                return this.expect("]"), this.finalize(e4, new a.ArrayExpression(t3));
              }, e3.prototype.parsePropertyMethod = function(e4) {
                this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                var t3 = this.context.strict, r3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = e4.simple;
                var n3 = this.isolateCoverGrammar(this.parseFunctionSourceElements);
                return this.context.strict && e4.firstRestricted && this.tolerateUnexpectedToken(e4.firstRestricted, e4.message), this.context.strict && e4.stricted && this.tolerateUnexpectedToken(e4.stricted, e4.message), this.context.strict = t3, this.context.allowStrictDirective = r3, n3;
              }, e3.prototype.parsePropertyMethodFunction = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters(), n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
              }, e3.prototype.parsePropertyMethodAsyncFunction = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield, r3 = this.context.await;
                this.context.allowYield = false, this.context.await = true;
                var n3 = this.parseFormalParameters(), i2 = this.parsePropertyMethod(n3);
                return this.context.allowYield = t3, this.context.await = r3, this.finalize(e4, new a.AsyncFunctionExpression(null, n3.params, i2));
              }, e3.prototype.parseObjectPropertyKey = function() {
                var e4, t3 = this.createNode(), r3 = this.nextToken();
                switch (r3.type) {
                  case 8:
                  case 6:
                    this.context.strict && r3.octal && this.tolerateUnexpectedToken(r3, o.Messages.StrictOctalLiteral);
                    var n3 = this.getTokenRaw(r3);
                    e4 = this.finalize(t3, new a.Literal(r3.value, n3));
                    break;
                  case 3:
                  case 1:
                  case 5:
                  case 4:
                    e4 = this.finalize(t3, new a.Identifier(r3.value));
                    break;
                  case 7:
                    r3.value === "[" ? (e4 = this.isolateCoverGrammar(this.parseAssignmentExpression), this.expect("]")) : e4 = this.throwUnexpectedToken(r3);
                    break;
                  default:
                    e4 = this.throwUnexpectedToken(r3);
                }
                return e4;
              }, e3.prototype.isPropertyKey = function(e4, t3) {
                return e4.type === u.Syntax.Identifier && e4.name === t3 || e4.type === u.Syntax.Literal && e4.value === t3;
              }, e3.prototype.parseObjectProperty = function(e4) {
                var t3, r3 = this.createNode(), n3 = this.lookahead, i2 = null, s2 = null, u2 = false, l2 = false, c2 = false, h = false;
                if (n3.type === 3) {
                  var p = n3.value;
                  this.nextToken(), u2 = this.match("["), i2 = (h = !(this.hasLineTerminator || p !== "async" || this.match(":") || this.match("(") || this.match("*") || this.match(","))) ? this.parseObjectPropertyKey() : this.finalize(r3, new a.Identifier(p));
                } else
                  this.match("*") ? this.nextToken() : (u2 = this.match("["), i2 = this.parseObjectPropertyKey());
                var f = this.qualifiedPropertyName(this.lookahead);
                if (n3.type === 3 && !h && n3.value === "get" && f)
                  t3 = "get", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), this.context.allowYield = false, s2 = this.parseGetterMethod();
                else if (n3.type === 3 && !h && n3.value === "set" && f)
                  t3 = "set", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseSetterMethod();
                else if (n3.type === 7 && n3.value === "*" && f)
                  t3 = "init", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseGeneratorMethod(), l2 = true;
                else if (i2 || this.throwUnexpectedToken(this.lookahead), t3 = "init", this.match(":") && !h)
                  !u2 && this.isPropertyKey(i2, "__proto__") && (e4.value && this.tolerateError(o.Messages.DuplicateProtoProperty), e4.value = true), this.nextToken(), s2 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                else if (this.match("("))
                  s2 = h ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true;
                else if (n3.type === 3)
                  if (p = this.finalize(r3, new a.Identifier(n3.value)), this.match("=")) {
                    this.context.firstCoverInitializedNameError = this.lookahead, this.nextToken(), c2 = true;
                    var d = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    s2 = this.finalize(r3, new a.AssignmentPattern(p, d));
                  } else
                    c2 = true, s2 = p;
                else
                  this.throwUnexpectedToken(this.nextToken());
                return this.finalize(r3, new a.Property(t3, i2, u2, s2, l2, c2));
              }, e3.prototype.parseObjectInitializer = function() {
                var e4 = this.createNode();
                this.expect("{");
                for (var t3 = [], r3 = { value: false }; !this.match("}"); )
                  t3.push(this.parseObjectProperty(r3)), this.match("}") || this.expectCommaSeparator();
                return this.expect("}"), this.finalize(e4, new a.ObjectExpression(t3));
              }, e3.prototype.parseTemplateHead = function() {
                n2.assert(this.lookahead.head, "Template literal must start with a template head");
                var e4 = this.createNode(), t3 = this.nextToken(), r3 = t3.value, i2 = t3.cooked;
                return this.finalize(e4, new a.TemplateElement({ raw: r3, cooked: i2 }, t3.tail));
              }, e3.prototype.parseTemplateElement = function() {
                this.lookahead.type !== 10 && this.throwUnexpectedToken();
                var e4 = this.createNode(), t3 = this.nextToken(), r3 = t3.value, n3 = t3.cooked;
                return this.finalize(e4, new a.TemplateElement({ raw: r3, cooked: n3 }, t3.tail));
              }, e3.prototype.parseTemplateLiteral = function() {
                var e4 = this.createNode(), t3 = [], r3 = [], n3 = this.parseTemplateHead();
                for (r3.push(n3); !n3.tail; )
                  t3.push(this.parseExpression()), n3 = this.parseTemplateElement(), r3.push(n3);
                return this.finalize(e4, new a.TemplateLiteral(r3, t3));
              }, e3.prototype.reinterpretExpressionAsPattern = function(e4) {
                switch (e4.type) {
                  case u.Syntax.Identifier:
                  case u.Syntax.MemberExpression:
                  case u.Syntax.RestElement:
                  case u.Syntax.AssignmentPattern:
                    break;
                  case u.Syntax.SpreadElement:
                    e4.type = u.Syntax.RestElement, this.reinterpretExpressionAsPattern(e4.argument);
                    break;
                  case u.Syntax.ArrayExpression:
                    e4.type = u.Syntax.ArrayPattern;
                    for (var t3 = 0; t3 < e4.elements.length; t3++)
                      e4.elements[t3] !== null && this.reinterpretExpressionAsPattern(e4.elements[t3]);
                    break;
                  case u.Syntax.ObjectExpression:
                    for (e4.type = u.Syntax.ObjectPattern, t3 = 0; t3 < e4.properties.length; t3++)
                      this.reinterpretExpressionAsPattern(e4.properties[t3].value);
                    break;
                  case u.Syntax.AssignmentExpression:
                    e4.type = u.Syntax.AssignmentPattern, delete e4.operator, this.reinterpretExpressionAsPattern(e4.left);
                }
              }, e3.prototype.parseGroupExpression = function() {
                var e4;
                if (this.expect("("), this.match(")"))
                  this.nextToken(), this.match("=>") || this.expect("=>"), e4 = { type: "ArrowParameterPlaceHolder", params: [], async: false };
                else {
                  var t3 = this.lookahead, r3 = [];
                  if (this.match("..."))
                    e4 = this.parseRestElement(r3), this.expect(")"), this.match("=>") || this.expect("=>"), e4 = { type: "ArrowParameterPlaceHolder", params: [e4], async: false };
                  else {
                    var n3 = false;
                    if (this.context.isBindingElement = true, e4 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.match(",")) {
                      var i2 = [];
                      for (this.context.isAssignmentTarget = false, i2.push(e4); this.lookahead.type !== 2 && this.match(","); ) {
                        if (this.nextToken(), this.match(")")) {
                          this.nextToken();
                          for (var o2 = 0; o2 < i2.length; o2++)
                            this.reinterpretExpressionAsPattern(i2[o2]);
                          n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: i2, async: false };
                        } else if (this.match("...")) {
                          for (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), i2.push(this.parseRestElement(r3)), this.expect(")"), this.match("=>") || this.expect("=>"), this.context.isBindingElement = false, o2 = 0; o2 < i2.length; o2++)
                            this.reinterpretExpressionAsPattern(i2[o2]);
                          n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: i2, async: false };
                        } else
                          i2.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                        if (n3)
                          break;
                      }
                      n3 || (e4 = this.finalize(this.startNode(t3), new a.SequenceExpression(i2)));
                    }
                    if (!n3) {
                      if (this.expect(")"), this.match("=>") && (e4.type === u.Syntax.Identifier && e4.name === "yield" && (n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: [e4], async: false }), !n3)) {
                        if (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), e4.type === u.Syntax.SequenceExpression)
                          for (o2 = 0; o2 < e4.expressions.length; o2++)
                            this.reinterpretExpressionAsPattern(e4.expressions[o2]);
                        else
                          this.reinterpretExpressionAsPattern(e4);
                        e4 = { type: "ArrowParameterPlaceHolder", params: e4.type === u.Syntax.SequenceExpression ? e4.expressions : [e4], async: false };
                      }
                      this.context.isBindingElement = false;
                    }
                  }
                }
                return e4;
              }, e3.prototype.parseArguments = function() {
                this.expect("(");
                var e4 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t3 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                    if (e4.push(t3), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e4;
              }, e3.prototype.isIdentifierName = function(e4) {
                return e4.type === 3 || e4.type === 4 || e4.type === 1 || e4.type === 5;
              }, e3.prototype.parseIdentifierName = function() {
                var e4 = this.createNode(), t3 = this.nextToken();
                return this.isIdentifierName(t3) || this.throwUnexpectedToken(t3), this.finalize(e4, new a.Identifier(t3.value));
              }, e3.prototype.parseNewExpression = function() {
                var e4, t3 = this.createNode(), r3 = this.parseIdentifierName();
                if (n2.assert(r3.name === "new", "New expression must start with `new`"), this.match("."))
                  if (this.nextToken(), this.lookahead.type === 3 && this.context.inFunctionBody && this.lookahead.value === "target") {
                    var i2 = this.parseIdentifierName();
                    e4 = new a.MetaProperty(r3, i2);
                  } else
                    this.throwUnexpectedToken(this.lookahead);
                else {
                  var o2 = this.isolateCoverGrammar(this.parseLeftHandSideExpression), s2 = this.match("(") ? this.parseArguments() : [];
                  e4 = new a.NewExpression(o2, s2), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return this.finalize(t3, e4);
              }, e3.prototype.parseAsyncArgument = function() {
                var e4 = this.parseAssignmentExpression();
                return this.context.firstCoverInitializedNameError = null, e4;
              }, e3.prototype.parseAsyncArguments = function() {
                this.expect("(");
                var e4 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t3 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                    if (e4.push(t3), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e4;
              }, e3.prototype.parseLeftHandSideExpressionAllowCall = function() {
                var e4, t3 = this.lookahead, r3 = this.matchContextualKeyword("async"), n3 = this.context.allowIn;
                for (this.context.allowIn = true, this.matchKeyword("super") && this.context.inFunctionBody ? (e4 = this.createNode(), this.nextToken(), e4 = this.finalize(e4, new a.Super()), this.match("(") || this.match(".") || this.match("[") || this.throwUnexpectedToken(this.lookahead)) : e4 = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match(".")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect(".");
                    var i2 = this.parseIdentifierName();
                    e4 = this.finalize(this.startNode(t3), new a.StaticMemberExpression(e4, i2));
                  } else if (this.match("(")) {
                    var o2 = r3 && t3.lineNumber === this.lookahead.lineNumber;
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = false;
                    var s2 = o2 ? this.parseAsyncArguments() : this.parseArguments();
                    if (e4 = this.finalize(this.startNode(t3), new a.CallExpression(e4, s2)), o2 && this.match("=>")) {
                      for (var u2 = 0; u2 < s2.length; ++u2)
                        this.reinterpretExpressionAsPattern(s2[u2]);
                      e4 = { type: "ArrowParameterPlaceHolder", params: s2, async: true };
                    }
                  } else if (this.match("["))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("["), i2 = this.isolateCoverGrammar(this.parseExpression), this.expect("]"), e4 = this.finalize(this.startNode(t3), new a.ComputedMemberExpression(e4, i2));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var l2 = this.parseTemplateLiteral();
                    e4 = this.finalize(this.startNode(t3), new a.TaggedTemplateExpression(e4, l2));
                  }
                return this.context.allowIn = n3, e4;
              }, e3.prototype.parseSuper = function() {
                var e4 = this.createNode();
                return this.expectKeyword("super"), this.match("[") || this.match(".") || this.throwUnexpectedToken(this.lookahead), this.finalize(e4, new a.Super());
              }, e3.prototype.parseLeftHandSideExpression = function() {
                n2.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
                for (var e4 = this.startNode(this.lookahead), t3 = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match("[")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("[");
                    var r3 = this.isolateCoverGrammar(this.parseExpression);
                    this.expect("]"), t3 = this.finalize(e4, new a.ComputedMemberExpression(t3, r3));
                  } else if (this.match("."))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("."), r3 = this.parseIdentifierName(), t3 = this.finalize(e4, new a.StaticMemberExpression(t3, r3));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var i2 = this.parseTemplateLiteral();
                    t3 = this.finalize(e4, new a.TaggedTemplateExpression(t3, i2));
                  }
                return t3;
              }, e3.prototype.parseUpdateExpression = function() {
                var e4, t3 = this.lookahead;
                if (this.match("++") || this.match("--")) {
                  var r3 = this.startNode(t3), n3 = this.nextToken();
                  e4 = this.inheritCoverGrammar(this.parseUnaryExpression), this.context.strict && e4.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(e4.name) && this.tolerateError(o.Messages.StrictLHSPrefix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment);
                  var i2 = true;
                  e4 = this.finalize(r3, new a.UpdateExpression(n3.value, e4, i2)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else if (e4 = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall), !this.hasLineTerminator && this.lookahead.type === 7 && (this.match("++") || this.match("--"))) {
                  this.context.strict && e4.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(e4.name) && this.tolerateError(o.Messages.StrictLHSPostfix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var s2 = this.nextToken().value;
                  i2 = false, e4 = this.finalize(this.startNode(t3), new a.UpdateExpression(s2, e4, i2));
                }
                return e4;
              }, e3.prototype.parseAwaitExpression = function() {
                var e4 = this.createNode();
                this.nextToken();
                var t3 = this.parseUnaryExpression();
                return this.finalize(e4, new a.AwaitExpression(t3));
              }, e3.prototype.parseUnaryExpression = function() {
                var e4;
                if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                  var t3 = this.startNode(this.lookahead), r3 = this.nextToken();
                  e4 = this.inheritCoverGrammar(this.parseUnaryExpression), e4 = this.finalize(t3, new a.UnaryExpression(r3.value, e4)), this.context.strict && e4.operator === "delete" && e4.argument.type === u.Syntax.Identifier && this.tolerateError(o.Messages.StrictDelete), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else
                  e4 = this.context.await && this.matchContextualKeyword("await") ? this.parseAwaitExpression() : this.parseUpdateExpression();
                return e4;
              }, e3.prototype.parseExponentiationExpression = function() {
                var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseUnaryExpression);
                if (t3.type !== u.Syntax.UnaryExpression && this.match("**")) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var r3 = t3, n3 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                  t3 = this.finalize(this.startNode(e4), new a.BinaryExpression("**", r3, n3));
                }
                return t3;
              }, e3.prototype.binaryPrecedence = function(e4) {
                var t3 = e4.value;
                return e4.type === 7 ? this.operatorPrecedence[t3] || 0 : e4.type === 4 && (t3 === "instanceof" || this.context.allowIn && t3 === "in") ? 7 : 0;
              }, e3.prototype.parseBinaryExpression = function() {
                var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseExponentiationExpression), r3 = this.lookahead, n3 = this.binaryPrecedence(r3);
                if (n3 > 0) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  for (var i2 = [e4, this.lookahead], o2 = t3, s2 = this.isolateCoverGrammar(this.parseExponentiationExpression), u2 = [o2, r3.value, s2], l2 = [n3]; !((n3 = this.binaryPrecedence(this.lookahead)) <= 0); ) {
                    for (; u2.length > 2 && n3 <= l2[l2.length - 1]; ) {
                      s2 = u2.pop();
                      var c2 = u2.pop();
                      l2.pop(), o2 = u2.pop(), i2.pop();
                      var h = this.startNode(i2[i2.length - 1]);
                      u2.push(this.finalize(h, new a.BinaryExpression(c2, o2, s2)));
                    }
                    u2.push(this.nextToken().value), l2.push(n3), i2.push(this.lookahead), u2.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                  }
                  var p = u2.length - 1;
                  t3 = u2[p];
                  for (var f = i2.pop(); p > 1; ) {
                    var d = i2.pop(), m = f && f.lineStart;
                    h = this.startNode(d, m), c2 = u2[p - 1], t3 = this.finalize(h, new a.BinaryExpression(c2, u2[p - 2], t3)), p -= 2, f = d;
                  }
                }
                return t3;
              }, e3.prototype.parseConditionalExpression = function() {
                var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseBinaryExpression);
                if (this.match("?")) {
                  this.nextToken();
                  var r3 = this.context.allowIn;
                  this.context.allowIn = true;
                  var n3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowIn = r3, this.expect(":");
                  var i2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  t3 = this.finalize(this.startNode(e4), new a.ConditionalExpression(t3, n3, i2)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return t3;
              }, e3.prototype.checkPatternParam = function(e4, t3) {
                switch (t3.type) {
                  case u.Syntax.Identifier:
                    this.validateParam(e4, t3, t3.name);
                    break;
                  case u.Syntax.RestElement:
                    this.checkPatternParam(e4, t3.argument);
                    break;
                  case u.Syntax.AssignmentPattern:
                    this.checkPatternParam(e4, t3.left);
                    break;
                  case u.Syntax.ArrayPattern:
                    for (var r3 = 0; r3 < t3.elements.length; r3++)
                      t3.elements[r3] !== null && this.checkPatternParam(e4, t3.elements[r3]);
                    break;
                  case u.Syntax.ObjectPattern:
                    for (r3 = 0; r3 < t3.properties.length; r3++)
                      this.checkPatternParam(e4, t3.properties[r3].value);
                }
                e4.simple = e4.simple && t3 instanceof a.Identifier;
              }, e3.prototype.reinterpretAsCoverFormalsList = function(e4) {
                var t3, r3 = [e4], n3 = false;
                switch (e4.type) {
                  case u.Syntax.Identifier:
                    break;
                  case "ArrowParameterPlaceHolder":
                    r3 = e4.params, n3 = e4.async;
                    break;
                  default:
                    return null;
                }
                t3 = { simple: true, paramSet: {} };
                for (var i2 = 0; i2 < r3.length; ++i2)
                  (a2 = r3[i2]).type === u.Syntax.AssignmentPattern ? a2.right.type === u.Syntax.YieldExpression && (a2.right.argument && this.throwUnexpectedToken(this.lookahead), a2.right.type = u.Syntax.Identifier, a2.right.name = "yield", delete a2.right.argument, delete a2.right.delegate) : n3 && a2.type === u.Syntax.Identifier && a2.name === "await" && this.throwUnexpectedToken(this.lookahead), this.checkPatternParam(t3, a2), r3[i2] = a2;
                if (this.context.strict || !this.context.allowYield)
                  for (i2 = 0; i2 < r3.length; ++i2) {
                    var a2;
                    (a2 = r3[i2]).type === u.Syntax.YieldExpression && this.throwUnexpectedToken(this.lookahead);
                  }
                if (t3.message === o.Messages.StrictParamDupe) {
                  var s2 = this.context.strict ? t3.stricted : t3.firstRestricted;
                  this.throwUnexpectedToken(s2, t3.message);
                }
                return { simple: t3.simple, params: r3, stricted: t3.stricted, firstRestricted: t3.firstRestricted, message: t3.message };
              }, e3.prototype.parseAssignmentExpression = function() {
                var e4;
                if (!this.context.allowYield && this.matchKeyword("yield"))
                  e4 = this.parseYieldExpression();
                else {
                  var t3 = this.lookahead, r3 = t3;
                  if (e4 = this.parseConditionalExpression(), r3.type === 3 && r3.lineNumber === this.lookahead.lineNumber && r3.value === "async" && (this.lookahead.type === 3 || this.matchKeyword("yield"))) {
                    var n3 = this.parsePrimaryExpression();
                    this.reinterpretExpressionAsPattern(n3), e4 = { type: "ArrowParameterPlaceHolder", params: [n3], async: true };
                  }
                  if (e4.type === "ArrowParameterPlaceHolder" || this.match("=>")) {
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                    var i2 = e4.async, s2 = this.reinterpretAsCoverFormalsList(e4);
                    if (s2) {
                      this.hasLineTerminator && this.tolerateUnexpectedToken(this.lookahead), this.context.firstCoverInitializedNameError = null;
                      var l2 = this.context.strict, c2 = this.context.allowStrictDirective;
                      this.context.allowStrictDirective = s2.simple;
                      var h = this.context.allowYield, p = this.context.await;
                      this.context.allowYield = true, this.context.await = i2;
                      var f = this.startNode(t3);
                      this.expect("=>");
                      var d = void 0;
                      if (this.match("{")) {
                        var m = this.context.allowIn;
                        this.context.allowIn = true, d = this.parseFunctionSourceElements(), this.context.allowIn = m;
                      } else
                        d = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      var y = d.type !== u.Syntax.BlockStatement;
                      this.context.strict && s2.firstRestricted && this.throwUnexpectedToken(s2.firstRestricted, s2.message), this.context.strict && s2.stricted && this.tolerateUnexpectedToken(s2.stricted, s2.message), e4 = i2 ? this.finalize(f, new a.AsyncArrowFunctionExpression(s2.params, d, y)) : this.finalize(f, new a.ArrowFunctionExpression(s2.params, d, y)), this.context.strict = l2, this.context.allowStrictDirective = c2, this.context.allowYield = h, this.context.await = p;
                    }
                  } else if (this.matchAssign()) {
                    if (this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.strict && e4.type === u.Syntax.Identifier) {
                      var v = e4;
                      this.scanner.isRestrictedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictLHSAssignment), this.scanner.isStrictModeReservedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord);
                    }
                    this.match("=") ? this.reinterpretExpressionAsPattern(e4) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false);
                    var _ = (r3 = this.nextToken()).value, g = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    e4 = this.finalize(this.startNode(t3), new a.AssignmentExpression(_, e4, g)), this.context.firstCoverInitializedNameError = null;
                  }
                }
                return e4;
              }, e3.prototype.parseExpression = function() {
                var e4 = this.lookahead, t3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                if (this.match(",")) {
                  var r3 = [];
                  for (r3.push(t3); this.lookahead.type !== 2 && this.match(","); )
                    this.nextToken(), r3.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                  t3 = this.finalize(this.startNode(e4), new a.SequenceExpression(r3));
                }
                return t3;
              }, e3.prototype.parseStatementListItem = function() {
                var e4;
                if (this.context.isAssignmentTarget = true, this.context.isBindingElement = true, this.lookahead.type === 4)
                  switch (this.lookahead.value) {
                    case "export":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalExportDeclaration), e4 = this.parseExportDeclaration();
                      break;
                    case "import":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalImportDeclaration), e4 = this.parseImportDeclaration();
                      break;
                    case "const":
                      e4 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "function":
                      e4 = this.parseFunctionDeclaration();
                      break;
                    case "class":
                      e4 = this.parseClassDeclaration();
                      break;
                    case "let":
                      e4 = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
                      break;
                    default:
                      e4 = this.parseStatement();
                  }
                else
                  e4 = this.parseStatement();
                return e4;
              }, e3.prototype.parseBlock = function() {
                var e4 = this.createNode();
                this.expect("{");
                for (var t3 = []; !this.match("}"); )
                  t3.push(this.parseStatementListItem());
                return this.expect("}"), this.finalize(e4, new a.BlockStatement(t3));
              }, e3.prototype.parseLexicalBinding = function(e4, t3) {
                var r3 = this.createNode(), n3 = this.parsePattern([], e4);
                this.context.strict && n3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(n3.name) && this.tolerateError(o.Messages.StrictVarName);
                var i2 = null;
                return e4 === "const" ? this.matchKeyword("in") || this.matchContextualKeyword("of") || (this.match("=") ? (this.nextToken(), i2 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : this.throwError(o.Messages.DeclarationMissingInitializer, "const")) : (!t3.inFor && n3.type !== u.Syntax.Identifier || this.match("=")) && (this.expect("="), i2 = this.isolateCoverGrammar(this.parseAssignmentExpression)), this.finalize(r3, new a.VariableDeclarator(n3, i2));
              }, e3.prototype.parseBindingList = function(e4, t3) {
                for (var r3 = [this.parseLexicalBinding(e4, t3)]; this.match(","); )
                  this.nextToken(), r3.push(this.parseLexicalBinding(e4, t3));
                return r3;
              }, e3.prototype.isLexicalDeclaration = function() {
                var e4 = this.scanner.saveState();
                this.scanner.scanComments();
                var t3 = this.scanner.lex();
                return this.scanner.restoreState(e4), t3.type === 3 || t3.type === 7 && t3.value === "[" || t3.type === 7 && t3.value === "{" || t3.type === 4 && t3.value === "let" || t3.type === 4 && t3.value === "yield";
              }, e3.prototype.parseLexicalDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.nextToken().value;
                n2.assert(r3 === "let" || r3 === "const", "Lexical declaration must be either let or const");
                var i2 = this.parseBindingList(r3, e4);
                return this.consumeSemicolon(), this.finalize(t3, new a.VariableDeclaration(i2, r3));
              }, e3.prototype.parseBindingRestElement = function(e4, t3) {
                var r3 = this.createNode();
                this.expect("...");
                var n3 = this.parsePattern(e4, t3);
                return this.finalize(r3, new a.RestElement(n3));
              }, e3.prototype.parseArrayPattern = function(e4, t3) {
                var r3 = this.createNode();
                this.expect("[");
                for (var n3 = []; !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), n3.push(null);
                  else {
                    if (this.match("...")) {
                      n3.push(this.parseBindingRestElement(e4, t3));
                      break;
                    }
                    n3.push(this.parsePatternWithDefault(e4, t3)), this.match("]") || this.expect(",");
                  }
                return this.expect("]"), this.finalize(r3, new a.ArrayPattern(n3));
              }, e3.prototype.parsePropertyPattern = function(e4, t3) {
                var r3, n3, i2 = this.createNode(), o2 = false, s2 = false;
                if (this.lookahead.type === 3) {
                  var u2 = this.lookahead;
                  r3 = this.parseVariableIdentifier();
                  var l2 = this.finalize(i2, new a.Identifier(u2.value));
                  if (this.match("=")) {
                    e4.push(u2), s2 = true, this.nextToken();
                    var c2 = this.parseAssignmentExpression();
                    n3 = this.finalize(this.startNode(u2), new a.AssignmentPattern(l2, c2));
                  } else
                    this.match(":") ? (this.expect(":"), n3 = this.parsePatternWithDefault(e4, t3)) : (e4.push(u2), s2 = true, n3 = l2);
                } else
                  o2 = this.match("["), r3 = this.parseObjectPropertyKey(), this.expect(":"), n3 = this.parsePatternWithDefault(e4, t3);
                return this.finalize(i2, new a.Property("init", r3, o2, n3, false, s2));
              }, e3.prototype.parseObjectPattern = function(e4, t3) {
                var r3 = this.createNode(), n3 = [];
                for (this.expect("{"); !this.match("}"); )
                  n3.push(this.parsePropertyPattern(e4, t3)), this.match("}") || this.expect(",");
                return this.expect("}"), this.finalize(r3, new a.ObjectPattern(n3));
              }, e3.prototype.parsePattern = function(e4, t3) {
                var r3;
                return this.match("[") ? r3 = this.parseArrayPattern(e4, t3) : this.match("{") ? r3 = this.parseObjectPattern(e4, t3) : (!this.matchKeyword("let") || t3 !== "const" && t3 !== "let" || this.tolerateUnexpectedToken(this.lookahead, o.Messages.LetInLexicalBinding), e4.push(this.lookahead), r3 = this.parseVariableIdentifier(t3)), r3;
              }, e3.prototype.parsePatternWithDefault = function(e4, t3) {
                var r3 = this.lookahead, n3 = this.parsePattern(e4, t3);
                if (this.match("=")) {
                  this.nextToken();
                  var i2 = this.context.allowYield;
                  this.context.allowYield = true;
                  var o2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowYield = i2, n3 = this.finalize(this.startNode(r3), new a.AssignmentPattern(n3, o2));
                }
                return n3;
              }, e3.prototype.parseVariableIdentifier = function(e4) {
                var t3 = this.createNode(), r3 = this.nextToken();
                return r3.type === 4 && r3.value === "yield" ? this.context.strict ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : this.context.allowYield || this.throwUnexpectedToken(r3) : r3.type !== 3 ? this.context.strict && r3.type === 4 && this.scanner.isStrictModeReservedWord(r3.value) ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : (this.context.strict || r3.value !== "let" || e4 !== "var") && this.throwUnexpectedToken(r3) : (this.context.isModule || this.context.await) && r3.type === 3 && r3.value === "await" && this.tolerateUnexpectedToken(r3), this.finalize(t3, new a.Identifier(r3.value));
              }, e3.prototype.parseVariableDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.parsePattern([], "var");
                this.context.strict && r3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictVarName);
                var n3 = null;
                return this.match("=") ? (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : r3.type === u.Syntax.Identifier || e4.inFor || this.expect("="), this.finalize(t3, new a.VariableDeclarator(r3, n3));
              }, e3.prototype.parseVariableDeclarationList = function(e4) {
                var t3 = { inFor: e4.inFor }, r3 = [];
                for (r3.push(this.parseVariableDeclaration(t3)); this.match(","); )
                  this.nextToken(), r3.push(this.parseVariableDeclaration(t3));
                return r3;
              }, e3.prototype.parseVariableStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("var");
                var t3 = this.parseVariableDeclarationList({ inFor: false });
                return this.consumeSemicolon(), this.finalize(e4, new a.VariableDeclaration(t3, "var"));
              }, e3.prototype.parseEmptyStatement = function() {
                var e4 = this.createNode();
                return this.expect(";"), this.finalize(e4, new a.EmptyStatement());
              }, e3.prototype.parseExpressionStatement = function() {
                var e4 = this.createNode(), t3 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e4, new a.ExpressionStatement(t3));
              }, e3.prototype.parseIfClause = function() {
                return this.context.strict && this.matchKeyword("function") && this.tolerateError(o.Messages.StrictFunction), this.parseStatement();
              }, e3.prototype.parseIfStatement = function() {
                var e4, t3 = this.createNode(), r3 = null;
                this.expectKeyword("if"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement())) : (this.expect(")"), e4 = this.parseIfClause(), this.matchKeyword("else") && (this.nextToken(), r3 = this.parseIfClause())), this.finalize(t3, new a.IfStatement(n3, e4, r3));
              }, e3.prototype.parseDoWhileStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("do");
                var t3 = this.context.inIteration;
                this.context.inIteration = true;
                var r3 = this.parseStatement();
                this.context.inIteration = t3, this.expectKeyword("while"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? this.tolerateUnexpectedToken(this.nextToken()) : (this.expect(")"), this.match(";") && this.nextToken()), this.finalize(e4, new a.DoWhileStatement(r3, n3));
              }, e3.prototype.parseWhileStatement = function() {
                var e4, t3 = this.createNode();
                this.expectKeyword("while"), this.expect("(");
                var r3 = this.parseExpression();
                if (!this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement());
                else {
                  this.expect(")");
                  var n3 = this.context.inIteration;
                  this.context.inIteration = true, e4 = this.parseStatement(), this.context.inIteration = n3;
                }
                return this.finalize(t3, new a.WhileStatement(r3, e4));
              }, e3.prototype.parseForStatement = function() {
                var e4, t3, r3, n3 = null, i2 = null, s2 = null, l2 = true, c2 = this.createNode();
                if (this.expectKeyword("for"), this.expect("("), this.match(";"))
                  this.nextToken();
                else if (this.matchKeyword("var")) {
                  n3 = this.createNode(), this.nextToken();
                  var h = this.context.allowIn;
                  this.context.allowIn = false;
                  var p = this.parseVariableDeclarationList({ inFor: true });
                  if (this.context.allowIn = h, p.length === 1 && this.matchKeyword("in")) {
                    var f = p[0];
                    f.init && (f.id.type === u.Syntax.ArrayPattern || f.id.type === u.Syntax.ObjectPattern || this.context.strict) && this.tolerateError(o.Messages.ForInOfLoopInitializer, "for-in"), n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null;
                  } else
                    p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.nextToken(), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.expect(";"));
                } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                  n3 = this.createNode();
                  var d = this.nextToken().value;
                  this.context.strict || this.lookahead.value !== "in" ? (h = this.context.allowIn, this.context.allowIn = false, p = this.parseBindingList(d, { inFor: true }), this.context.allowIn = h, p.length === 1 && p[0].init === null && this.matchKeyword("in") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, d)), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null) : p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, d)), this.nextToken(), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (this.consumeSemicolon(), n3 = this.finalize(n3, new a.VariableDeclaration(p, d)))) : (n3 = this.finalize(n3, new a.Identifier(d)), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null);
                } else {
                  var m = this.lookahead;
                  if (h = this.context.allowIn, this.context.allowIn = false, n3 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.context.allowIn = h, this.matchKeyword("in"))
                    this.context.isAssignmentTarget && n3.type !== u.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForIn), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e4 = n3, t3 = this.parseExpression(), n3 = null;
                  else if (this.matchContextualKeyword("of"))
                    this.context.isAssignmentTarget && n3.type !== u.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForLoop), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false;
                  else {
                    if (this.match(",")) {
                      for (var y = [n3]; this.match(","); )
                        this.nextToken(), y.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                      n3 = this.finalize(this.startNode(m), new a.SequenceExpression(y));
                    }
                    this.expect(";");
                  }
                }
                if (e4 === void 0 && (this.match(";") || (i2 = this.parseExpression()), this.expect(";"), this.match(")") || (s2 = this.parseExpression())), !this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), r3 = this.finalize(this.createNode(), new a.EmptyStatement());
                else {
                  this.expect(")");
                  var v = this.context.inIteration;
                  this.context.inIteration = true, r3 = this.isolateCoverGrammar(this.parseStatement), this.context.inIteration = v;
                }
                return e4 === void 0 ? this.finalize(c2, new a.ForStatement(n3, i2, s2, r3)) : l2 ? this.finalize(c2, new a.ForInStatement(e4, t3, r3)) : this.finalize(c2, new a.ForOfStatement(e4, t3, r3));
              }, e3.prototype.parseContinueStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("continue");
                var t3 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier();
                  t3 = r3;
                  var n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name);
                }
                return this.consumeSemicolon(), t3 !== null || this.context.inIteration || this.throwError(o.Messages.IllegalContinue), this.finalize(e4, new a.ContinueStatement(t3));
              }, e3.prototype.parseBreakStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("break");
                var t3 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier(), n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name), t3 = r3;
                }
                return this.consumeSemicolon(), t3 !== null || this.context.inIteration || this.context.inSwitch || this.throwError(o.Messages.IllegalBreak), this.finalize(e4, new a.BreakStatement(t3));
              }, e3.prototype.parseReturnStatement = function() {
                this.context.inFunctionBody || this.tolerateError(o.Messages.IllegalReturn);
                var e4 = this.createNode();
                this.expectKeyword("return");
                var t3 = (this.match(";") || this.match("}") || this.hasLineTerminator || this.lookahead.type === 2) && this.lookahead.type !== 8 && this.lookahead.type !== 10 ? null : this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e4, new a.ReturnStatement(t3));
              }, e3.prototype.parseWithStatement = function() {
                this.context.strict && this.tolerateError(o.Messages.StrictModeWith);
                var e4, t3 = this.createNode();
                this.expectKeyword("with"), this.expect("(");
                var r3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement())) : (this.expect(")"), e4 = this.parseStatement()), this.finalize(t3, new a.WithStatement(r3, e4));
              }, e3.prototype.parseSwitchCase = function() {
                var e4, t3 = this.createNode();
                this.matchKeyword("default") ? (this.nextToken(), e4 = null) : (this.expectKeyword("case"), e4 = this.parseExpression()), this.expect(":");
                for (var r3 = []; !(this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")); )
                  r3.push(this.parseStatementListItem());
                return this.finalize(t3, new a.SwitchCase(e4, r3));
              }, e3.prototype.parseSwitchStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("switch"), this.expect("(");
                var t3 = this.parseExpression();
                this.expect(")");
                var r3 = this.context.inSwitch;
                this.context.inSwitch = true;
                var n3 = [], i2 = false;
                for (this.expect("{"); !this.match("}"); ) {
                  var s2 = this.parseSwitchCase();
                  s2.test === null && (i2 && this.throwError(o.Messages.MultipleDefaultsInSwitch), i2 = true), n3.push(s2);
                }
                return this.expect("}"), this.context.inSwitch = r3, this.finalize(e4, new a.SwitchStatement(t3, n3));
              }, e3.prototype.parseLabelledStatement = function() {
                var e4, t3 = this.createNode(), r3 = this.parseExpression();
                if (r3.type === u.Syntax.Identifier && this.match(":")) {
                  this.nextToken();
                  var n3 = r3, i2 = "$" + n3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, i2) && this.throwError(o.Messages.Redeclaration, "Label", n3.name), this.context.labelSet[i2] = true;
                  var s2 = void 0;
                  if (this.matchKeyword("class"))
                    this.tolerateUnexpectedToken(this.lookahead), s2 = this.parseClassDeclaration();
                  else if (this.matchKeyword("function")) {
                    var l2 = this.lookahead, c2 = this.parseFunctionDeclaration();
                    this.context.strict ? this.tolerateUnexpectedToken(l2, o.Messages.StrictFunction) : c2.generator && this.tolerateUnexpectedToken(l2, o.Messages.GeneratorInLegacyContext), s2 = c2;
                  } else
                    s2 = this.parseStatement();
                  delete this.context.labelSet[i2], e4 = new a.LabeledStatement(n3, s2);
                } else
                  this.consumeSemicolon(), e4 = new a.ExpressionStatement(r3);
                return this.finalize(t3, e4);
              }, e3.prototype.parseThrowStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("throw"), this.hasLineTerminator && this.throwError(o.Messages.NewlineAfterThrow);
                var t3 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e4, new a.ThrowStatement(t3));
              }, e3.prototype.parseCatchClause = function() {
                var e4 = this.createNode();
                this.expectKeyword("catch"), this.expect("("), this.match(")") && this.throwUnexpectedToken(this.lookahead);
                for (var t3 = [], r3 = this.parsePattern(t3), n3 = {}, i2 = 0; i2 < t3.length; i2++) {
                  var s2 = "$" + t3[i2].value;
                  Object.prototype.hasOwnProperty.call(n3, s2) && this.tolerateError(o.Messages.DuplicateBinding, t3[i2].value), n3[s2] = true;
                }
                this.context.strict && r3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictCatchVariable), this.expect(")");
                var l2 = this.parseBlock();
                return this.finalize(e4, new a.CatchClause(r3, l2));
              }, e3.prototype.parseFinallyClause = function() {
                return this.expectKeyword("finally"), this.parseBlock();
              }, e3.prototype.parseTryStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("try");
                var t3 = this.parseBlock(), r3 = this.matchKeyword("catch") ? this.parseCatchClause() : null, n3 = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
                return r3 || n3 || this.throwError(o.Messages.NoCatchOrFinally), this.finalize(e4, new a.TryStatement(t3, r3, n3));
              }, e3.prototype.parseDebuggerStatement = function() {
                var e4 = this.createNode();
                return this.expectKeyword("debugger"), this.consumeSemicolon(), this.finalize(e4, new a.DebuggerStatement());
              }, e3.prototype.parseStatement = function() {
                var e4;
                switch (this.lookahead.type) {
                  case 1:
                  case 5:
                  case 6:
                  case 8:
                  case 10:
                  case 9:
                    e4 = this.parseExpressionStatement();
                    break;
                  case 7:
                    var t3 = this.lookahead.value;
                    e4 = t3 === "{" ? this.parseBlock() : t3 === "(" ? this.parseExpressionStatement() : t3 === ";" ? this.parseEmptyStatement() : this.parseExpressionStatement();
                    break;
                  case 3:
                    e4 = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                    break;
                  case 4:
                    switch (this.lookahead.value) {
                      case "break":
                        e4 = this.parseBreakStatement();
                        break;
                      case "continue":
                        e4 = this.parseContinueStatement();
                        break;
                      case "debugger":
                        e4 = this.parseDebuggerStatement();
                        break;
                      case "do":
                        e4 = this.parseDoWhileStatement();
                        break;
                      case "for":
                        e4 = this.parseForStatement();
                        break;
                      case "function":
                        e4 = this.parseFunctionDeclaration();
                        break;
                      case "if":
                        e4 = this.parseIfStatement();
                        break;
                      case "return":
                        e4 = this.parseReturnStatement();
                        break;
                      case "switch":
                        e4 = this.parseSwitchStatement();
                        break;
                      case "throw":
                        e4 = this.parseThrowStatement();
                        break;
                      case "try":
                        e4 = this.parseTryStatement();
                        break;
                      case "var":
                        e4 = this.parseVariableStatement();
                        break;
                      case "while":
                        e4 = this.parseWhileStatement();
                        break;
                      case "with":
                        e4 = this.parseWithStatement();
                        break;
                      default:
                        e4 = this.parseExpressionStatement();
                    }
                    break;
                  default:
                    e4 = this.throwUnexpectedToken(this.lookahead);
                }
                return e4;
              }, e3.prototype.parseFunctionSourceElements = function() {
                var e4 = this.createNode();
                this.expect("{");
                var t3 = this.parseDirectivePrologues(), r3 = this.context.labelSet, n3 = this.context.inIteration, i2 = this.context.inSwitch, o2 = this.context.inFunctionBody;
                for (this.context.labelSet = {}, this.context.inIteration = false, this.context.inSwitch = false, this.context.inFunctionBody = true; this.lookahead.type !== 2 && !this.match("}"); )
                  t3.push(this.parseStatementListItem());
                return this.expect("}"), this.context.labelSet = r3, this.context.inIteration = n3, this.context.inSwitch = i2, this.context.inFunctionBody = o2, this.finalize(e4, new a.BlockStatement(t3));
              }, e3.prototype.validateParam = function(e4, t3, r3) {
                var n3 = "$" + r3;
                this.context.strict ? (this.scanner.isRestrictedWord(r3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamName), Object.prototype.hasOwnProperty.call(e4.paramSet, n3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamDupe)) : e4.firstRestricted || (this.scanner.isRestrictedWord(r3) ? (e4.firstRestricted = t3, e4.message = o.Messages.StrictParamName) : this.scanner.isStrictModeReservedWord(r3) ? (e4.firstRestricted = t3, e4.message = o.Messages.StrictReservedWord) : Object.prototype.hasOwnProperty.call(e4.paramSet, n3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamDupe)), typeof Object.defineProperty == "function" ? Object.defineProperty(e4.paramSet, n3, { value: true, enumerable: true, writable: true, configurable: true }) : e4.paramSet[n3] = true;
              }, e3.prototype.parseRestElement = function(e4) {
                var t3 = this.createNode();
                this.expect("...");
                var r3 = this.parsePattern(e4);
                return this.match("=") && this.throwError(o.Messages.DefaultRestParameter), this.match(")") || this.throwError(o.Messages.ParameterAfterRestParameter), this.finalize(t3, new a.RestElement(r3));
              }, e3.prototype.parseFormalParameter = function(e4) {
                for (var t3 = [], r3 = this.match("...") ? this.parseRestElement(t3) : this.parsePatternWithDefault(t3), n3 = 0; n3 < t3.length; n3++)
                  this.validateParam(e4, t3[n3], t3[n3].value);
                e4.simple = e4.simple && r3 instanceof a.Identifier, e4.params.push(r3);
              }, e3.prototype.parseFormalParameters = function(e4) {
                var t3;
                if (t3 = { simple: true, params: [], firstRestricted: e4 }, this.expect("("), !this.match(")"))
                  for (t3.paramSet = {}; this.lookahead.type !== 2 && (this.parseFormalParameter(t3), !this.match(")")) && (this.expect(","), !this.match(")")); )
                    ;
                return this.expect(")"), { simple: t3.simple, params: t3.params, stricted: t3.stricted, firstRestricted: t3.firstRestricted, message: t3.message };
              }, e3.prototype.matchAsyncFunction = function() {
                var e4 = this.matchContextualKeyword("async");
                if (e4) {
                  var t3 = this.scanner.saveState();
                  this.scanner.scanComments();
                  var r3 = this.scanner.lex();
                  this.scanner.restoreState(t3), e4 = t3.lineNumber === r3.lineNumber && r3.type === 4 && r3.value === "function";
                }
                return e4;
              }, e3.prototype.parseFunctionDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.matchContextualKeyword("async");
                r3 && this.nextToken(), this.expectKeyword("function");
                var n3, i2 = !r3 && this.match("*");
                i2 && this.nextToken();
                var s2 = null, u2 = null;
                if (!e4 || !this.match("(")) {
                  var l2 = this.lookahead;
                  s2 = this.parseVariableIdentifier(), this.context.strict ? this.scanner.isRestrictedWord(l2.value) && this.tolerateUnexpectedToken(l2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(l2.value) ? (u2 = l2, n3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(l2.value) && (u2 = l2, n3 = o.Messages.StrictReservedWord);
                }
                var c2 = this.context.await, h = this.context.allowYield;
                this.context.await = r3, this.context.allowYield = !i2;
                var p = this.parseFormalParameters(u2), f = p.params, d = p.stricted;
                u2 = p.firstRestricted, p.message && (n3 = p.message);
                var m = this.context.strict, y = this.context.allowStrictDirective;
                this.context.allowStrictDirective = p.simple;
                var v = this.parseFunctionSourceElements();
                return this.context.strict && u2 && this.throwUnexpectedToken(u2, n3), this.context.strict && d && this.tolerateUnexpectedToken(d, n3), this.context.strict = m, this.context.allowStrictDirective = y, this.context.await = c2, this.context.allowYield = h, r3 ? this.finalize(t3, new a.AsyncFunctionDeclaration(s2, f, v)) : this.finalize(t3, new a.FunctionDeclaration(s2, f, v, i2));
              }, e3.prototype.parseFunctionExpression = function() {
                var e4 = this.createNode(), t3 = this.matchContextualKeyword("async");
                t3 && this.nextToken(), this.expectKeyword("function");
                var r3, n3 = !t3 && this.match("*");
                n3 && this.nextToken();
                var i2, s2 = null, u2 = this.context.await, l2 = this.context.allowYield;
                if (this.context.await = t3, this.context.allowYield = !n3, !this.match("(")) {
                  var c2 = this.lookahead;
                  s2 = this.context.strict || n3 || !this.matchKeyword("yield") ? this.parseVariableIdentifier() : this.parseIdentifierName(), this.context.strict ? this.scanner.isRestrictedWord(c2.value) && this.tolerateUnexpectedToken(c2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(c2.value) ? (i2 = c2, r3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(c2.value) && (i2 = c2, r3 = o.Messages.StrictReservedWord);
                }
                var h = this.parseFormalParameters(i2), p = h.params, f = h.stricted;
                i2 = h.firstRestricted, h.message && (r3 = h.message);
                var d = this.context.strict, m = this.context.allowStrictDirective;
                this.context.allowStrictDirective = h.simple;
                var y = this.parseFunctionSourceElements();
                return this.context.strict && i2 && this.throwUnexpectedToken(i2, r3), this.context.strict && f && this.tolerateUnexpectedToken(f, r3), this.context.strict = d, this.context.allowStrictDirective = m, this.context.await = u2, this.context.allowYield = l2, t3 ? this.finalize(e4, new a.AsyncFunctionExpression(s2, p, y)) : this.finalize(e4, new a.FunctionExpression(s2, p, y, n3));
              }, e3.prototype.parseDirective = function() {
                var e4 = this.lookahead, t3 = this.createNode(), r3 = this.parseExpression(), n3 = r3.type === u.Syntax.Literal ? this.getTokenRaw(e4).slice(1, -1) : null;
                return this.consumeSemicolon(), this.finalize(t3, n3 ? new a.Directive(r3, n3) : new a.ExpressionStatement(r3));
              }, e3.prototype.parseDirectivePrologues = function() {
                for (var e4 = null, t3 = []; ; ) {
                  var r3 = this.lookahead;
                  if (r3.type !== 8)
                    break;
                  var n3 = this.parseDirective();
                  t3.push(n3);
                  var i2 = n3.directive;
                  if (typeof i2 != "string")
                    break;
                  i2 === "use strict" ? (this.context.strict = true, e4 && this.tolerateUnexpectedToken(e4, o.Messages.StrictOctalLiteral), this.context.allowStrictDirective || this.tolerateUnexpectedToken(r3, o.Messages.IllegalLanguageModeDirective)) : !e4 && r3.octal && (e4 = r3);
                }
                return t3;
              }, e3.prototype.qualifiedPropertyName = function(e4) {
                switch (e4.type) {
                  case 3:
                  case 8:
                  case 1:
                  case 5:
                  case 6:
                  case 4:
                    return true;
                  case 7:
                    return e4.value === "[";
                }
                return false;
              }, e3.prototype.parseGetterMethod = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length > 0 && this.tolerateError(o.Messages.BadGetterArity);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
              }, e3.prototype.parseSetterMethod = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length !== 1 ? this.tolerateError(o.Messages.BadSetterArity) : r3.params[0] instanceof a.RestElement && this.tolerateError(o.Messages.BadSetterRestParameter);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
              }, e3.prototype.parseGeneratorMethod = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                this.context.allowYield = false;
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, true));
              }, e3.prototype.isStartOfExpression = function() {
                var e4 = true, t3 = this.lookahead.value;
                switch (this.lookahead.type) {
                  case 7:
                    e4 = t3 === "[" || t3 === "(" || t3 === "{" || t3 === "+" || t3 === "-" || t3 === "!" || t3 === "~" || t3 === "++" || t3 === "--" || t3 === "/" || t3 === "/=";
                    break;
                  case 4:
                    e4 = t3 === "class" || t3 === "delete" || t3 === "function" || t3 === "let" || t3 === "new" || t3 === "super" || t3 === "this" || t3 === "typeof" || t3 === "void" || t3 === "yield";
                }
                return e4;
              }, e3.prototype.parseYieldExpression = function() {
                var e4 = this.createNode();
                this.expectKeyword("yield");
                var t3 = null, r3 = false;
                if (!this.hasLineTerminator) {
                  var n3 = this.context.allowYield;
                  this.context.allowYield = false, (r3 = this.match("*")) ? (this.nextToken(), t3 = this.parseAssignmentExpression()) : this.isStartOfExpression() && (t3 = this.parseAssignmentExpression()), this.context.allowYield = n3;
                }
                return this.finalize(e4, new a.YieldExpression(t3, r3));
              }, e3.prototype.parseClassElement = function(e4) {
                var t3 = this.lookahead, r3 = this.createNode(), n3 = "", i2 = null, s2 = null, u2 = false, l2 = false, c2 = false, h = false;
                if (this.match("*"))
                  this.nextToken();
                else if (u2 = this.match("["), (i2 = this.parseObjectPropertyKey()).name === "static" && (this.qualifiedPropertyName(this.lookahead) || this.match("*")) && (t3 = this.lookahead, c2 = true, u2 = this.match("["), this.match("*") ? this.nextToken() : i2 = this.parseObjectPropertyKey()), t3.type === 3 && !this.hasLineTerminator && t3.value === "async") {
                  var p = this.lookahead.value;
                  p !== ":" && p !== "(" && p !== "*" && (h = true, t3 = this.lookahead, i2 = this.parseObjectPropertyKey(), t3.type === 3 && t3.value === "constructor" && this.tolerateUnexpectedToken(t3, o.Messages.ConstructorIsAsync));
                }
                var f = this.qualifiedPropertyName(this.lookahead);
                return t3.type === 3 ? t3.value === "get" && f ? (n3 = "get", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), this.context.allowYield = false, s2 = this.parseGetterMethod()) : t3.value === "set" && f && (n3 = "set", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseSetterMethod()) : t3.type === 7 && t3.value === "*" && f && (n3 = "init", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseGeneratorMethod(), l2 = true), !n3 && i2 && this.match("(") && (n3 = "init", s2 = h ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true), n3 || this.throwUnexpectedToken(this.lookahead), n3 === "init" && (n3 = "method"), u2 || (c2 && this.isPropertyKey(i2, "prototype") && this.throwUnexpectedToken(t3, o.Messages.StaticPrototype), !c2 && this.isPropertyKey(i2, "constructor") && ((n3 !== "method" || !l2 || s2 && s2.generator) && this.throwUnexpectedToken(t3, o.Messages.ConstructorSpecialMethod), e4.value ? this.throwUnexpectedToken(t3, o.Messages.DuplicateConstructor) : e4.value = true, n3 = "constructor")), this.finalize(r3, new a.MethodDefinition(i2, u2, s2, n3, c2));
              }, e3.prototype.parseClassElementList = function() {
                var e4 = [], t3 = { value: false };
                for (this.expect("{"); !this.match("}"); )
                  this.match(";") ? this.nextToken() : e4.push(this.parseClassElement(t3));
                return this.expect("}"), e4;
              }, e3.prototype.parseClassBody = function() {
                var e4 = this.createNode(), t3 = this.parseClassElementList();
                return this.finalize(e4, new a.ClassBody(t3));
              }, e3.prototype.parseClassDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var n3 = e4 && this.lookahead.type !== 3 ? null : this.parseVariableIdentifier(), i2 = null;
                this.matchKeyword("extends") && (this.nextToken(), i2 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var o2 = this.parseClassBody();
                return this.context.strict = r3, this.finalize(t3, new a.ClassDeclaration(n3, i2, o2));
              }, e3.prototype.parseClassExpression = function() {
                var e4 = this.createNode(), t3 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var r3 = this.lookahead.type === 3 ? this.parseVariableIdentifier() : null, n3 = null;
                this.matchKeyword("extends") && (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var i2 = this.parseClassBody();
                return this.context.strict = t3, this.finalize(e4, new a.ClassExpression(r3, n3, i2));
              }, e3.prototype.parseModule = function() {
                this.context.strict = true, this.context.isModule = true, this.scanner.isModule = true;
                for (var e4 = this.createNode(), t3 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t3.push(this.parseStatementListItem());
                return this.finalize(e4, new a.Module(t3));
              }, e3.prototype.parseScript = function() {
                for (var e4 = this.createNode(), t3 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t3.push(this.parseStatementListItem());
                return this.finalize(e4, new a.Script(t3));
              }, e3.prototype.parseModuleSpecifier = function() {
                var e4 = this.createNode();
                this.lookahead.type !== 8 && this.throwError(o.Messages.InvalidModuleSpecifier);
                var t3 = this.nextToken(), r3 = this.getTokenRaw(t3);
                return this.finalize(e4, new a.Literal(t3.value, r3));
              }, e3.prototype.parseImportSpecifier = function() {
                var e4, t3, r3 = this.createNode();
                return this.lookahead.type === 3 ? (t3 = e4 = this.parseVariableIdentifier(), this.matchContextualKeyword("as") && (this.nextToken(), t3 = this.parseVariableIdentifier())) : (t3 = e4 = this.parseIdentifierName(), this.matchContextualKeyword("as") ? (this.nextToken(), t3 = this.parseVariableIdentifier()) : this.throwUnexpectedToken(this.nextToken())), this.finalize(r3, new a.ImportSpecifier(t3, e4));
              }, e3.prototype.parseNamedImports = function() {
                this.expect("{");
                for (var e4 = []; !this.match("}"); )
                  e4.push(this.parseImportSpecifier()), this.match("}") || this.expect(",");
                return this.expect("}"), e4;
              }, e3.prototype.parseImportDefaultSpecifier = function() {
                var e4 = this.createNode(), t3 = this.parseIdentifierName();
                return this.finalize(e4, new a.ImportDefaultSpecifier(t3));
              }, e3.prototype.parseImportNamespaceSpecifier = function() {
                var e4 = this.createNode();
                this.expect("*"), this.matchContextualKeyword("as") || this.throwError(o.Messages.NoAsAfterImportNamespace), this.nextToken();
                var t3 = this.parseIdentifierName();
                return this.finalize(e4, new a.ImportNamespaceSpecifier(t3));
              }, e3.prototype.parseImportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalImportDeclaration);
                var e4, t3 = this.createNode();
                this.expectKeyword("import");
                var r3 = [];
                if (this.lookahead.type === 8)
                  e4 = this.parseModuleSpecifier();
                else {
                  if (this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.isIdentifierName(this.lookahead) && !this.matchKeyword("default") ? (r3.push(this.parseImportDefaultSpecifier()), this.match(",") && (this.nextToken(), this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.throwUnexpectedToken(this.lookahead))) : this.throwUnexpectedToken(this.nextToken()), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken(), e4 = this.parseModuleSpecifier();
                }
                return this.consumeSemicolon(), this.finalize(t3, new a.ImportDeclaration(r3, e4));
              }, e3.prototype.parseExportSpecifier = function() {
                var e4 = this.createNode(), t3 = this.parseIdentifierName(), r3 = t3;
                return this.matchContextualKeyword("as") && (this.nextToken(), r3 = this.parseIdentifierName()), this.finalize(e4, new a.ExportSpecifier(t3, r3));
              }, e3.prototype.parseExportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalExportDeclaration);
                var e4, t3 = this.createNode();
                if (this.expectKeyword("export"), this.matchKeyword("default"))
                  if (this.nextToken(), this.matchKeyword("function")) {
                    var r3 = this.parseFunctionDeclaration(true);
                    e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3));
                  } else
                    this.matchKeyword("class") ? (r3 = this.parseClassDeclaration(true), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3))) : this.matchContextualKeyword("async") ? (r3 = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression(), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3))) : (this.matchContextualKeyword("from") && this.throwError(o.Messages.UnexpectedToken, this.lookahead.value), r3 = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression(), this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3)));
                else if (this.match("*")) {
                  if (this.nextToken(), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken();
                  var i2 = this.parseModuleSpecifier();
                  this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportAllDeclaration(i2));
                } else if (this.lookahead.type === 4) {
                  switch (r3 = void 0, this.lookahead.value) {
                    case "let":
                    case "const":
                      r3 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "var":
                    case "class":
                    case "function":
                      r3 = this.parseStatementListItem();
                      break;
                    default:
                      this.throwUnexpectedToken(this.lookahead);
                  }
                  e4 = this.finalize(t3, new a.ExportNamedDeclaration(r3, [], null));
                } else if (this.matchAsyncFunction())
                  r3 = this.parseFunctionDeclaration(), e4 = this.finalize(t3, new a.ExportNamedDeclaration(r3, [], null));
                else {
                  var s2 = [], u2 = null, l2 = false;
                  for (this.expect("{"); !this.match("}"); )
                    l2 = l2 || this.matchKeyword("default"), s2.push(this.parseExportSpecifier()), this.match("}") || this.expect(",");
                  this.expect("}"), this.matchContextualKeyword("from") ? (this.nextToken(), u2 = this.parseModuleSpecifier(), this.consumeSemicolon()) : l2 ? (n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause, this.throwError(n3, this.lookahead.value)) : this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportNamedDeclaration(null, s2, u2));
                }
                return e4;
              }, e3;
            }();
            t2.Parser = c;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.assert = function(e3, t3) {
              if (!e3)
                throw new Error("ASSERT: " + t3);
            };
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var r2 = function() {
              function e3() {
                this.errors = [], this.tolerant = false;
              }
              return e3.prototype.recordError = function(e4) {
                this.errors.push(e4);
              }, e3.prototype.tolerate = function(e4) {
                if (!this.tolerant)
                  throw e4;
                this.recordError(e4);
              }, e3.prototype.constructError = function(e4, t3) {
                var r3 = new Error(e4);
                try {
                  throw r3;
                } catch (e5) {
                  Object.create && Object.defineProperty && (r3 = Object.create(e5), Object.defineProperty(r3, "column", { value: t3 }));
                }
                return r3;
              }, e3.prototype.createError = function(e4, t3, r3, n2) {
                var i = "Line " + t3 + ": " + n2, o = this.constructError(i, r3);
                return o.index = e4, o.lineNumber = t3, o.description = n2, o;
              }, e3.prototype.throwError = function(e4, t3, r3, n2) {
                throw this.createError(e4, t3, r3, n2);
              }, e3.prototype.tolerateError = function(e4, t3, r3, n2) {
                var i = this.createError(e4, t3, r3, n2);
                if (!this.tolerant)
                  throw i;
                this.recordError(i);
              }, e3;
            }();
            t2.ErrorHandler = r2;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Messages = { BadGetterArity: "Getter must not have any formal parameters", BadSetterArity: "Setter must have exactly one formal parameter", BadSetterRestParameter: "Setter function argument must not be a rest parameter", ConstructorIsAsync: "Class constructor may not be an async method", ConstructorSpecialMethod: "Class constructor may not be an accessor", DeclarationMissingInitializer: "Missing initializer in %0 declaration", DefaultRestParameter: "Unexpected token =", DuplicateBinding: "Duplicate binding %0", DuplicateConstructor: "A class may only have one constructor", DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals", ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer", GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts", IllegalBreak: "Illegal break statement", IllegalContinue: "Illegal continue statement", IllegalExportDeclaration: "Unexpected token", IllegalImportDeclaration: "Unexpected token", IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list", IllegalReturn: "Illegal return statement", InvalidEscapedReservedWord: "Keyword must not contain escaped characters", InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence", InvalidLHSInAssignment: "Invalid left-hand side in assignment", InvalidLHSInForIn: "Invalid left-hand side in for-in", InvalidLHSInForLoop: "Invalid left-hand side in for-loop", InvalidModuleSpecifier: "Unexpected token", InvalidRegExp: "Invalid regular expression", LetInLexicalBinding: "let is disallowed as a lexically bound name", MissingFromClause: "Unexpected token", MultipleDefaultsInSwitch: "More than one default clause in switch statement", NewlineAfterThrow: "Illegal newline after throw", NoAsAfterImportNamespace: "Unexpected token", NoCatchOrFinally: "Missing catch or finally after try", ParameterAfterRestParameter: "Rest parameter must be last formal parameter", Redeclaration: "%0 '%1' has already been declared", StaticPrototype: "Classes may not have static property named prototype", StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode", StrictDelete: "Delete of an unqualified identifier in strict mode.", StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block", StrictFunctionName: "Function name may not be eval or arguments in strict mode", StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictModeWith: "Strict mode code may not include a with statement", StrictOctalLiteral: "Octal literals are not allowed in strict mode.", StrictParamDupe: "Strict mode function may not have duplicate parameter names", StrictParamName: "Parameter name eval or arguments is not allowed in strict mode", StrictReservedWord: "Use of future reserved word in strict mode", StrictVarName: "Variable name may not be eval or arguments in strict mode", TemplateOctalLiteral: "Octal literals are not allowed in template strings.", UnexpectedEOS: "Unexpected end of input", UnexpectedIdentifier: "Unexpected identifier", UnexpectedNumber: "Unexpected number", UnexpectedReserved: "Unexpected reserved word", UnexpectedString: "Unexpected string", UnexpectedTemplate: "Unexpected quasi %0", UnexpectedToken: "Unexpected token %0", UnexpectedTokenIllegal: "Unexpected token ILLEGAL", UnknownLabel: "Undefined label '%0'", UnterminatedRegExp: "Invalid regular expression: missing /" };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(9), i = r2(4), o = r2(11);
            function a(e3) {
              return "0123456789abcdef".indexOf(e3.toLowerCase());
            }
            function s(e3) {
              return "01234567".indexOf(e3);
            }
            var u = function() {
              function e3(e4, t3) {
                this.source = e4, this.errorHandler = t3, this.trackComment = false, this.isModule = false, this.length = e4.length, this.index = 0, this.lineNumber = e4.length > 0 ? 1 : 0, this.lineStart = 0, this.curlyStack = [];
              }
              return e3.prototype.saveState = function() {
                return { index: this.index, lineNumber: this.lineNumber, lineStart: this.lineStart };
              }, e3.prototype.restoreState = function(e4) {
                this.index = e4.index, this.lineNumber = e4.lineNumber, this.lineStart = e4.lineStart;
              }, e3.prototype.eof = function() {
                return this.index >= this.length;
              }, e3.prototype.throwUnexpectedToken = function(e4) {
                return e4 === void 0 && (e4 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, e4);
              }, e3.prototype.tolerateUnexpectedToken = function(e4) {
                e4 === void 0 && (e4 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, e4);
              }, e3.prototype.skipSingleLineComment = function(e4) {
                var t3, r3, n3 = [];
                for (this.trackComment && (n3 = [], t3 = this.index - e4, r3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - e4 }, end: {} }); !this.eof(); ) {
                  var o2 = this.source.charCodeAt(this.index);
                  if (++this.index, i.Character.isLineTerminator(o2)) {
                    if (this.trackComment) {
                      r3.end = { line: this.lineNumber, column: this.index - this.lineStart - 1 };
                      var a2 = { multiLine: false, slice: [t3 + e4, this.index - 1], range: [t3, this.index - 1], loc: r3 };
                      n3.push(a2);
                    }
                    return o2 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, n3;
                  }
                }
                return this.trackComment && (r3.end = { line: this.lineNumber, column: this.index - this.lineStart }, a2 = { multiLine: false, slice: [t3 + e4, this.index], range: [t3, this.index], loc: r3 }, n3.push(a2)), n3;
              }, e3.prototype.skipMultiLineComment = function() {
                var e4, t3, r3 = [];
                for (this.trackComment && (r3 = [], e4 = this.index - 2, t3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - 2 }, end: {} }); !this.eof(); ) {
                  var n3 = this.source.charCodeAt(this.index);
                  if (i.Character.isLineTerminator(n3))
                    n3 === 13 && this.source.charCodeAt(this.index + 1) === 10 && ++this.index, ++this.lineNumber, ++this.index, this.lineStart = this.index;
                  else if (n3 === 42) {
                    if (this.source.charCodeAt(this.index + 1) === 47) {
                      if (this.index += 2, this.trackComment) {
                        t3.end = { line: this.lineNumber, column: this.index - this.lineStart };
                        var o2 = { multiLine: true, slice: [e4 + 2, this.index - 2], range: [e4, this.index], loc: t3 };
                        r3.push(o2);
                      }
                      return r3;
                    }
                    ++this.index;
                  } else
                    ++this.index;
                }
                return this.trackComment && (t3.end = { line: this.lineNumber, column: this.index - this.lineStart }, o2 = { multiLine: true, slice: [e4 + 2, this.index], range: [e4, this.index], loc: t3 }, r3.push(o2)), this.tolerateUnexpectedToken(), r3;
              }, e3.prototype.scanComments = function() {
                var e4;
                this.trackComment && (e4 = []);
                for (var t3 = this.index === 0; !this.eof(); ) {
                  var r3 = this.source.charCodeAt(this.index);
                  if (i.Character.isWhiteSpace(r3))
                    ++this.index;
                  else if (i.Character.isLineTerminator(r3))
                    ++this.index, r3 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, t3 = true;
                  else if (r3 === 47)
                    if ((r3 = this.source.charCodeAt(this.index + 1)) === 47) {
                      this.index += 2;
                      var n3 = this.skipSingleLineComment(2);
                      this.trackComment && (e4 = e4.concat(n3)), t3 = true;
                    } else {
                      if (r3 !== 42)
                        break;
                      this.index += 2, n3 = this.skipMultiLineComment(), this.trackComment && (e4 = e4.concat(n3));
                    }
                  else if (t3 && r3 === 45) {
                    if (this.source.charCodeAt(this.index + 1) !== 45 || this.source.charCodeAt(this.index + 2) !== 62)
                      break;
                    this.index += 3, n3 = this.skipSingleLineComment(3), this.trackComment && (e4 = e4.concat(n3));
                  } else {
                    if (r3 !== 60 || this.isModule)
                      break;
                    if (this.source.slice(this.index + 1, this.index + 4) !== "!--")
                      break;
                    this.index += 4, n3 = this.skipSingleLineComment(4), this.trackComment && (e4 = e4.concat(n3));
                  }
                }
                return e4;
              }, e3.prototype.isFutureReservedWord = function(e4) {
                switch (e4) {
                  case "enum":
                  case "export":
                  case "import":
                  case "super":
                    return true;
                  default:
                    return false;
                }
              }, e3.prototype.isStrictModeReservedWord = function(e4) {
                switch (e4) {
                  case "implements":
                  case "interface":
                  case "package":
                  case "private":
                  case "protected":
                  case "public":
                  case "static":
                  case "yield":
                  case "let":
                    return true;
                  default:
                    return false;
                }
              }, e3.prototype.isRestrictedWord = function(e4) {
                return e4 === "eval" || e4 === "arguments";
              }, e3.prototype.isKeyword = function(e4) {
                switch (e4.length) {
                  case 2:
                    return e4 === "if" || e4 === "in" || e4 === "do";
                  case 3:
                    return e4 === "var" || e4 === "for" || e4 === "new" || e4 === "try" || e4 === "let";
                  case 4:
                    return e4 === "this" || e4 === "else" || e4 === "case" || e4 === "void" || e4 === "with" || e4 === "enum";
                  case 5:
                    return e4 === "while" || e4 === "break" || e4 === "catch" || e4 === "throw" || e4 === "const" || e4 === "yield" || e4 === "class" || e4 === "super";
                  case 6:
                    return e4 === "return" || e4 === "typeof" || e4 === "delete" || e4 === "switch" || e4 === "export" || e4 === "import";
                  case 7:
                    return e4 === "default" || e4 === "finally" || e4 === "extends";
                  case 8:
                    return e4 === "function" || e4 === "continue" || e4 === "debugger";
                  case 10:
                    return e4 === "instanceof";
                  default:
                    return false;
                }
              }, e3.prototype.codePointAt = function(e4) {
                var t3 = this.source.charCodeAt(e4);
                if (t3 >= 55296 && t3 <= 56319) {
                  var r3 = this.source.charCodeAt(e4 + 1);
                  r3 >= 56320 && r3 <= 57343 && (t3 = 1024 * (t3 - 55296) + r3 - 56320 + 65536);
                }
                return t3;
              }, e3.prototype.scanHexEscape = function(e4) {
                for (var t3 = e4 === "u" ? 4 : 2, r3 = 0, n3 = 0; n3 < t3; ++n3) {
                  if (this.eof() || !i.Character.isHexDigit(this.source.charCodeAt(this.index)))
                    return null;
                  r3 = 16 * r3 + a(this.source[this.index++]);
                }
                return String.fromCharCode(r3);
              }, e3.prototype.scanUnicodeCodePointEscape = function() {
                var e4 = this.source[this.index], t3 = 0;
                for (e4 === "}" && this.throwUnexpectedToken(); !this.eof() && (e4 = this.source[this.index++], i.Character.isHexDigit(e4.charCodeAt(0))); )
                  t3 = 16 * t3 + a(e4);
                return (t3 > 1114111 || e4 !== "}") && this.throwUnexpectedToken(), i.Character.fromCodePoint(t3);
              }, e3.prototype.getIdentifier = function() {
                for (var e4 = this.index++; !this.eof(); ) {
                  var t3 = this.source.charCodeAt(this.index);
                  if (t3 === 92)
                    return this.index = e4, this.getComplexIdentifier();
                  if (t3 >= 55296 && t3 < 57343)
                    return this.index = e4, this.getComplexIdentifier();
                  if (!i.Character.isIdentifierPart(t3))
                    break;
                  ++this.index;
                }
                return this.source.slice(e4, this.index);
              }, e3.prototype.getComplexIdentifier = function() {
                var e4, t3 = this.codePointAt(this.index), r3 = i.Character.fromCodePoint(t3);
                for (this.index += r3.length, t3 === 92 && (this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e4 = this.scanUnicodeCodePointEscape()) : (e4 = this.scanHexEscape("u")) !== null && e4 !== "\\" && i.Character.isIdentifierStart(e4.charCodeAt(0)) || this.throwUnexpectedToken(), r3 = e4); !this.eof() && (t3 = this.codePointAt(this.index), i.Character.isIdentifierPart(t3)); )
                  r3 += e4 = i.Character.fromCodePoint(t3), this.index += e4.length, t3 === 92 && (r3 = r3.substr(0, r3.length - 1), this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e4 = this.scanUnicodeCodePointEscape()) : (e4 = this.scanHexEscape("u")) !== null && e4 !== "\\" && i.Character.isIdentifierPart(e4.charCodeAt(0)) || this.throwUnexpectedToken(), r3 += e4);
                return r3;
              }, e3.prototype.octalToDecimal = function(e4) {
                var t3 = e4 !== "0", r3 = s(e4);
                return !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (t3 = true, r3 = 8 * r3 + s(this.source[this.index++]), "0123".indexOf(e4) >= 0 && !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (r3 = 8 * r3 + s(this.source[this.index++]))), { code: r3, octal: t3 };
              }, e3.prototype.scanIdentifier = function() {
                var e4, t3 = this.index, r3 = this.source.charCodeAt(t3) === 92 ? this.getComplexIdentifier() : this.getIdentifier();
                if ((e4 = r3.length === 1 ? 3 : this.isKeyword(r3) ? 4 : r3 === "null" ? 5 : r3 === "true" || r3 === "false" ? 1 : 3) != 3 && t3 + r3.length !== this.index) {
                  var n3 = this.index;
                  this.index = t3, this.tolerateUnexpectedToken(o.Messages.InvalidEscapedReservedWord), this.index = n3;
                }
                return { type: e4, value: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t3, end: this.index };
              }, e3.prototype.scanPunctuator = function() {
                var e4 = this.index, t3 = this.source[this.index];
                switch (t3) {
                  case "(":
                  case "{":
                    t3 === "{" && this.curlyStack.push("{"), ++this.index;
                    break;
                  case ".":
                    ++this.index, this.source[this.index] === "." && this.source[this.index + 1] === "." && (this.index += 2, t3 = "...");
                    break;
                  case "}":
                    ++this.index, this.curlyStack.pop();
                    break;
                  case ")":
                  case ";":
                  case ",":
                  case "[":
                  case "]":
                  case ":":
                  case "?":
                  case "~":
                    ++this.index;
                    break;
                  default:
                    (t3 = this.source.substr(this.index, 4)) === ">>>=" ? this.index += 4 : (t3 = t3.substr(0, 3)) === "===" || t3 === "!==" || t3 === ">>>" || t3 === "<<=" || t3 === ">>=" || t3 === "**=" ? this.index += 3 : (t3 = t3.substr(0, 2)) === "&&" || t3 === "||" || t3 === "==" || t3 === "!=" || t3 === "+=" || t3 === "-=" || t3 === "*=" || t3 === "/=" || t3 === "++" || t3 === "--" || t3 === "<<" || t3 === ">>" || t3 === "&=" || t3 === "|=" || t3 === "^=" || t3 === "%=" || t3 === "<=" || t3 === ">=" || t3 === "=>" || t3 === "**" ? this.index += 2 : (t3 = this.source[this.index], "<>=!+-*%&|^/".indexOf(t3) >= 0 && ++this.index);
                }
                return this.index === e4 && this.throwUnexpectedToken(), { type: 7, value: t3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanHexLiteral = function(e4) {
                for (var t3 = ""; !this.eof() && i.Character.isHexDigit(this.source.charCodeAt(this.index)); )
                  t3 += this.source[this.index++];
                return t3.length === 0 && this.throwUnexpectedToken(), i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseInt("0x" + t3, 16), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanBinaryLiteral = function(e4) {
                for (var t3, r3 = ""; !this.eof() && ((t3 = this.source[this.index]) === "0" || t3 === "1"); )
                  r3 += this.source[this.index++];
                return r3.length === 0 && this.throwUnexpectedToken(), this.eof() || (t3 = this.source.charCodeAt(this.index), (i.Character.isIdentifierStart(t3) || i.Character.isDecimalDigit(t3)) && this.throwUnexpectedToken()), { type: 6, value: parseInt(r3, 2), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanOctalLiteral = function(e4, t3) {
                var r3 = "", n3 = false;
                for (i.Character.isOctalDigit(e4.charCodeAt(0)) ? (n3 = true, r3 = "0" + this.source[this.index++]) : ++this.index; !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)); )
                  r3 += this.source[this.index++];
                return n3 || r3.length !== 0 || this.throwUnexpectedToken(), (i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || i.Character.isDecimalDigit(this.source.charCodeAt(this.index))) && this.throwUnexpectedToken(), { type: 6, value: parseInt(r3, 8), octal: n3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t3, end: this.index };
              }, e3.prototype.isImplicitOctalLiteral = function() {
                for (var e4 = this.index + 1; e4 < this.length; ++e4) {
                  var t3 = this.source[e4];
                  if (t3 === "8" || t3 === "9")
                    return false;
                  if (!i.Character.isOctalDigit(t3.charCodeAt(0)))
                    return true;
                }
                return true;
              }, e3.prototype.scanNumericLiteral = function() {
                var e4 = this.index, t3 = this.source[e4];
                n2.assert(i.Character.isDecimalDigit(t3.charCodeAt(0)) || t3 === ".", "Numeric literal must start with a decimal digit or a decimal point");
                var r3 = "";
                if (t3 !== ".") {
                  if (r3 = this.source[this.index++], t3 = this.source[this.index], r3 === "0") {
                    if (t3 === "x" || t3 === "X")
                      return ++this.index, this.scanHexLiteral(e4);
                    if (t3 === "b" || t3 === "B")
                      return ++this.index, this.scanBinaryLiteral(e4);
                    if (t3 === "o" || t3 === "O")
                      return this.scanOctalLiteral(t3, e4);
                    if (t3 && i.Character.isOctalDigit(t3.charCodeAt(0)) && this.isImplicitOctalLiteral())
                      return this.scanOctalLiteral(t3, e4);
                  }
                  for (; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t3 = this.source[this.index];
                }
                if (t3 === ".") {
                  for (r3 += this.source[this.index++]; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t3 = this.source[this.index];
                }
                if (t3 === "e" || t3 === "E")
                  if (r3 += this.source[this.index++], (t3 = this.source[this.index]) !== "+" && t3 !== "-" || (r3 += this.source[this.index++]), i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))
                    for (; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                      r3 += this.source[this.index++];
                  else
                    this.throwUnexpectedToken();
                return i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseFloat(r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanStringLiteral = function() {
                var e4 = this.index, t3 = this.source[e4];
                n2.assert(t3 === "'" || t3 === '"', "String literal must starts with a quote"), ++this.index;
                for (var r3 = false, a2 = ""; !this.eof(); ) {
                  var s2 = this.source[this.index++];
                  if (s2 === t3) {
                    t3 = "";
                    break;
                  }
                  if (s2 === "\\")
                    if ((s2 = this.source[this.index++]) && i.Character.isLineTerminator(s2.charCodeAt(0)))
                      ++this.lineNumber, s2 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (s2) {
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, a2 += this.scanUnicodeCodePointEscape();
                          else {
                            var u2 = this.scanHexEscape(s2);
                            u2 === null && this.throwUnexpectedToken(), a2 += u2;
                          }
                          break;
                        case "x":
                          var l = this.scanHexEscape(s2);
                          l === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), a2 += l;
                          break;
                        case "n":
                          a2 += "\n";
                          break;
                        case "r":
                          a2 += "\r";
                          break;
                        case "t":
                          a2 += "	";
                          break;
                        case "b":
                          a2 += "\b";
                          break;
                        case "f":
                          a2 += "\f";
                          break;
                        case "v":
                          a2 += "\v";
                          break;
                        case "8":
                        case "9":
                          a2 += s2, this.tolerateUnexpectedToken();
                          break;
                        default:
                          if (s2 && i.Character.isOctalDigit(s2.charCodeAt(0))) {
                            var c = this.octalToDecimal(s2);
                            r3 = c.octal || r3, a2 += String.fromCharCode(c.code);
                          } else
                            a2 += s2;
                      }
                  else {
                    if (i.Character.isLineTerminator(s2.charCodeAt(0)))
                      break;
                    a2 += s2;
                  }
                }
                return t3 !== "" && (this.index = e4, this.throwUnexpectedToken()), { type: 8, value: a2, octal: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanTemplate = function() {
                var e4 = "", t3 = false, r3 = this.index, n3 = this.source[r3] === "`", a2 = false, s2 = 2;
                for (++this.index; !this.eof(); ) {
                  var u2 = this.source[this.index++];
                  if (u2 === "`") {
                    s2 = 1, a2 = true, t3 = true;
                    break;
                  }
                  if (u2 === "$") {
                    if (this.source[this.index] === "{") {
                      this.curlyStack.push("${"), ++this.index, t3 = true;
                      break;
                    }
                    e4 += u2;
                  } else if (u2 === "\\")
                    if (u2 = this.source[this.index++], i.Character.isLineTerminator(u2.charCodeAt(0)))
                      ++this.lineNumber, u2 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (u2) {
                        case "n":
                          e4 += "\n";
                          break;
                        case "r":
                          e4 += "\r";
                          break;
                        case "t":
                          e4 += "	";
                          break;
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, e4 += this.scanUnicodeCodePointEscape();
                          else {
                            var l = this.index, c = this.scanHexEscape(u2);
                            c !== null ? e4 += c : (this.index = l, e4 += u2);
                          }
                          break;
                        case "x":
                          var h = this.scanHexEscape(u2);
                          h === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), e4 += h;
                          break;
                        case "b":
                          e4 += "\b";
                          break;
                        case "f":
                          e4 += "\f";
                          break;
                        case "v":
                          e4 += "\v";
                          break;
                        default:
                          u2 === "0" ? (i.Character.isDecimalDigit(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral), e4 += "\0") : i.Character.isOctalDigit(u2.charCodeAt(0)) ? this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral) : e4 += u2;
                      }
                  else
                    i.Character.isLineTerminator(u2.charCodeAt(0)) ? (++this.lineNumber, u2 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index, e4 += "\n") : e4 += u2;
                }
                return t3 || this.throwUnexpectedToken(), n3 || this.curlyStack.pop(), { type: 10, value: this.source.slice(r3 + 1, this.index - s2), cooked: e4, head: n3, tail: a2, lineNumber: this.lineNumber, lineStart: this.lineStart, start: r3, end: this.index };
              }, e3.prototype.testRegExp = function(e4, t3) {
                var r3 = e4, n3 = this;
                t3.indexOf("u") >= 0 && (r3 = r3.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function(e5, t4, r4) {
                  var i2 = parseInt(t4 || r4, 16);
                  return i2 > 1114111 && n3.throwUnexpectedToken(o.Messages.InvalidRegExp), i2 <= 65535 ? String.fromCharCode(i2) : "\uFFFF";
                }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "\uFFFF"));
                try {
                  RegExp(r3);
                } catch (e5) {
                  this.throwUnexpectedToken(o.Messages.InvalidRegExp);
                }
                try {
                  return new RegExp(e4, t3);
                } catch (e5) {
                  return null;
                }
              }, e3.prototype.scanRegExpBody = function() {
                var e4 = this.source[this.index];
                n2.assert(e4 === "/", "Regular expression literal must start with a slash");
                for (var t3 = this.source[this.index++], r3 = false, a2 = false; !this.eof(); )
                  if (t3 += e4 = this.source[this.index++], e4 === "\\")
                    e4 = this.source[this.index++], i.Character.isLineTerminator(e4.charCodeAt(0)) && this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t3 += e4;
                  else if (i.Character.isLineTerminator(e4.charCodeAt(0)))
                    this.throwUnexpectedToken(o.Messages.UnterminatedRegExp);
                  else if (r3)
                    e4 === "]" && (r3 = false);
                  else {
                    if (e4 === "/") {
                      a2 = true;
                      break;
                    }
                    e4 === "[" && (r3 = true);
                  }
                return a2 || this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t3.substr(1, t3.length - 2);
              }, e3.prototype.scanRegExpFlags = function() {
                for (var e4 = ""; !this.eof(); ) {
                  var t3 = this.source[this.index];
                  if (!i.Character.isIdentifierPart(t3.charCodeAt(0)))
                    break;
                  if (++this.index, t3 !== "\\" || this.eof())
                    e4 += t3;
                  else if ((t3 = this.source[this.index]) === "u") {
                    ++this.index;
                    var r3 = this.index, n3 = this.scanHexEscape("u");
                    if (n3 !== null)
                      for (e4 += n3; r3 < this.index; ++r3)
                        this.source[r3];
                    else
                      this.index = r3, e4 += "u";
                    this.tolerateUnexpectedToken();
                  } else
                    this.tolerateUnexpectedToken();
                }
                return e4;
              }, e3.prototype.scanRegExp = function() {
                var e4 = this.index, t3 = this.scanRegExpBody(), r3 = this.scanRegExpFlags();
                return { type: 9, value: "", pattern: t3, flags: r3, regex: this.testRegExp(t3, r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.lex = function() {
                if (this.eof())
                  return { type: 2, value: "", lineNumber: this.lineNumber, lineStart: this.lineStart, start: this.index, end: this.index };
                var e4 = this.source.charCodeAt(this.index);
                return i.Character.isIdentifierStart(e4) ? this.scanIdentifier() : e4 === 40 || e4 === 41 || e4 === 59 ? this.scanPunctuator() : e4 === 39 || e4 === 34 ? this.scanStringLiteral() : e4 === 46 ? i.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1)) ? this.scanNumericLiteral() : this.scanPunctuator() : i.Character.isDecimalDigit(e4) ? this.scanNumericLiteral() : e4 === 96 || e4 === 125 && this.curlyStack[this.curlyStack.length - 1] === "${" ? this.scanTemplate() : e4 >= 55296 && e4 < 57343 && i.Character.isIdentifierStart(this.codePointAt(this.index)) ? this.scanIdentifier() : this.scanPunctuator();
              }, e3;
            }();
            t2.Scanner = u;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.TokenName = {}, t2.TokenName[1] = "Boolean", t2.TokenName[2] = "<end>", t2.TokenName[3] = "Identifier", t2.TokenName[4] = "Keyword", t2.TokenName[5] = "Null", t2.TokenName[6] = "Numeric", t2.TokenName[7] = "Punctuator", t2.TokenName[8] = "String", t2.TokenName[9] = "RegularExpression", t2.TokenName[10] = "Template";
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.XHTMLEntities = { quot: '"', amp: "&", apos: "'", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666", lang: "\u27E8", rang: "\u27E9" };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(10), i = r2(12), o = r2(13), a = function() {
              function e3() {
                this.values = [], this.curly = this.paren = -1;
              }
              return e3.prototype.beforeFunctionExpression = function(e4) {
                return ["(", "{", "[", "in", "typeof", "instanceof", "new", "return", "case", "delete", "throw", "void", "=", "+=", "-=", "*=", "**=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ",", "+", "-", "*", "**", "/", "%", "++", "--", "<<", ">>", ">>>", "&", "|", "^", "!", "~", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!=="].indexOf(e4) >= 0;
              }, e3.prototype.isRegexStart = function() {
                var e4 = this.values[this.values.length - 1], t3 = e4 !== null;
                switch (e4) {
                  case "this":
                  case "]":
                    t3 = false;
                    break;
                  case ")":
                    var r3 = this.values[this.paren - 1];
                    t3 = r3 === "if" || r3 === "while" || r3 === "for" || r3 === "with";
                    break;
                  case "}":
                    if (t3 = false, this.values[this.curly - 3] === "function")
                      t3 = !!(n3 = this.values[this.curly - 4]) && !this.beforeFunctionExpression(n3);
                    else if (this.values[this.curly - 4] === "function") {
                      var n3;
                      t3 = !(n3 = this.values[this.curly - 5]) || !this.beforeFunctionExpression(n3);
                    }
                }
                return t3;
              }, e3.prototype.push = function(e4) {
                e4.type === 7 || e4.type === 4 ? (e4.value === "{" ? this.curly = this.values.length : e4.value === "(" && (this.paren = this.values.length), this.values.push(e4.value)) : this.values.push(null);
              }, e3;
            }(), s = function() {
              function e3(e4, t3) {
                this.errorHandler = new n2.ErrorHandler(), this.errorHandler.tolerant = !!t3 && typeof t3.tolerant == "boolean" && t3.tolerant, this.scanner = new i.Scanner(e4, this.errorHandler), this.scanner.trackComment = !!t3 && typeof t3.comment == "boolean" && t3.comment, this.trackRange = !!t3 && typeof t3.range == "boolean" && t3.range, this.trackLoc = !!t3 && typeof t3.loc == "boolean" && t3.loc, this.buffer = [], this.reader = new a();
              }
              return e3.prototype.errors = function() {
                return this.errorHandler.errors;
              }, e3.prototype.getNextToken = function() {
                if (this.buffer.length === 0) {
                  var e4 = this.scanner.scanComments();
                  if (this.scanner.trackComment)
                    for (var t3 = 0; t3 < e4.length; ++t3) {
                      var r3 = e4[t3], n3 = this.scanner.source.slice(r3.slice[0], r3.slice[1]), i2 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: n3 };
                      this.trackRange && (i2.range = r3.range), this.trackLoc && (i2.loc = r3.loc), this.buffer.push(i2);
                    }
                  if (!this.scanner.eof()) {
                    var a2 = void 0;
                    this.trackLoc && (a2 = { start: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, end: {} });
                    var s2 = this.scanner.source[this.scanner.index] === "/" && this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.lex();
                    this.reader.push(s2);
                    var u = { type: o.TokenName[s2.type], value: this.scanner.source.slice(s2.start, s2.end) };
                    if (this.trackRange && (u.range = [s2.start, s2.end]), this.trackLoc && (a2.end = { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, u.loc = a2), s2.type === 9) {
                      var l = s2.pattern, c = s2.flags;
                      u.regex = { pattern: l, flags: c };
                    }
                    this.buffer.push(u);
                  }
                }
                return this.buffer.shift();
              }, e3;
            }();
            t2.Tokenizer = s;
          }]);
        }, e.exports = n();
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(53), o = r(76), a = r(54), s = Object.prototype.toString, u = Object.prototype.hasOwnProperty, l = { 0: "\\0", 7: "\\a", 8: "\\b", 9: "\\t", 10: "\\n", 11: "\\v", 12: "\\f", 13: "\\r", 27: "\\e", 34: '\\"', 92: "\\\\", 133: "\\N", 160: "\\_", 8232: "\\L", 8233: "\\P" }, c = ["y", "Y", "yes", "Yes", "YES", "on", "On", "ON", "n", "N", "no", "No", "NO", "off", "Off", "OFF"];
        function h(e2) {
          var t2, r2, o2;
          if (t2 = e2.toString(16).toUpperCase(), e2 <= 255)
            r2 = "x", o2 = 2;
          else if (e2 <= 65535)
            r2 = "u", o2 = 4;
          else {
            if (!(e2 <= 4294967295))
              throw new i("code point within a string may not be greater than 0xFFFFFFFF");
            r2 = "U", o2 = 8;
          }
          return "\\" + r2 + n.repeat("0", o2 - t2.length) + t2;
        }
        function p(e2) {
          this.schema = e2.schema || o, this.indent = Math.max(1, e2.indent || 2), this.noArrayIndent = e2.noArrayIndent || false, this.skipInvalid = e2.skipInvalid || false, this.flowLevel = n.isNothing(e2.flowLevel) ? -1 : e2.flowLevel, this.styleMap = function(e3, t2) {
            var r2, n2, i2, o2, a2, s2, l2;
            if (t2 === null)
              return {};
            for (r2 = {}, i2 = 0, o2 = (n2 = Object.keys(t2)).length; i2 < o2; i2 += 1)
              a2 = n2[i2], s2 = String(t2[a2]), a2.slice(0, 2) === "!!" && (a2 = "tag:yaml.org,2002:" + a2.slice(2)), (l2 = e3.compiledTypeMap.fallback[a2]) && u.call(l2.styleAliases, s2) && (s2 = l2.styleAliases[s2]), r2[a2] = s2;
            return r2;
          }(this.schema, e2.styles || null), this.sortKeys = e2.sortKeys || false, this.lineWidth = e2.lineWidth || 80, this.noRefs = e2.noRefs || false, this.noCompatMode = e2.noCompatMode || false, this.condenseFlow = e2.condenseFlow || false, this.implicitTypes = this.schema.compiledImplicit, this.explicitTypes = this.schema.compiledExplicit, this.tag = null, this.result = "", this.duplicates = [], this.usedDuplicates = null;
        }
        function f(e2, t2) {
          for (var r2, i2 = n.repeat(" ", t2), o2 = 0, a2 = -1, s2 = "", u2 = e2.length; o2 < u2; )
            (a2 = e2.indexOf("\n", o2)) === -1 ? (r2 = e2.slice(o2), o2 = u2) : (r2 = e2.slice(o2, a2 + 1), o2 = a2 + 1), r2.length && r2 !== "\n" && (s2 += i2), s2 += r2;
          return s2;
        }
        function d(e2, t2) {
          return "\n" + n.repeat(" ", e2.indent * t2);
        }
        function m(e2) {
          return e2 === 32 || e2 === 9;
        }
        function y(e2) {
          return 32 <= e2 && e2 <= 126 || 161 <= e2 && e2 <= 55295 && e2 !== 8232 && e2 !== 8233 || 57344 <= e2 && e2 <= 65533 && e2 !== 65279 || 65536 <= e2 && e2 <= 1114111;
        }
        function v(e2, t2) {
          return y(e2) && e2 !== 65279 && e2 !== 44 && e2 !== 91 && e2 !== 93 && e2 !== 123 && e2 !== 125 && e2 !== 58 && (e2 !== 35 || t2 && function(e3) {
            return y(e3) && !m(e3) && e3 !== 65279 && e3 !== 13 && e3 !== 10;
          }(t2));
        }
        function _(e2) {
          return /^\n* /.test(e2);
        }
        function g(e2, t2, r2, n2, i2) {
          var o2, a2, s2, u2, l2 = false, c2 = false, h2 = n2 !== -1, p2 = -1, f2 = y(u2 = e2.charCodeAt(0)) && u2 !== 65279 && !m(u2) && u2 !== 45 && u2 !== 63 && u2 !== 58 && u2 !== 44 && u2 !== 91 && u2 !== 93 && u2 !== 123 && u2 !== 125 && u2 !== 35 && u2 !== 38 && u2 !== 42 && u2 !== 33 && u2 !== 124 && u2 !== 61 && u2 !== 62 && u2 !== 39 && u2 !== 34 && u2 !== 37 && u2 !== 64 && u2 !== 96 && !m(e2.charCodeAt(e2.length - 1));
          if (t2)
            for (o2 = 0; o2 < e2.length; o2++) {
              if (!y(a2 = e2.charCodeAt(o2)))
                return 5;
              s2 = o2 > 0 ? e2.charCodeAt(o2 - 1) : null, f2 = f2 && v(a2, s2);
            }
          else {
            for (o2 = 0; o2 < e2.length; o2++) {
              if ((a2 = e2.charCodeAt(o2)) === 10)
                l2 = true, h2 && (c2 = c2 || o2 - p2 - 1 > n2 && e2[p2 + 1] !== " ", p2 = o2);
              else if (!y(a2))
                return 5;
              s2 = o2 > 0 ? e2.charCodeAt(o2 - 1) : null, f2 = f2 && v(a2, s2);
            }
            c2 = c2 || h2 && o2 - p2 - 1 > n2 && e2[p2 + 1] !== " ";
          }
          return l2 || c2 ? r2 > 9 && _(e2) ? 5 : c2 ? 4 : 3 : f2 && !i2(e2) ? 1 : 2;
        }
        function b(e2, t2, r2, n2) {
          e2.dump = function() {
            if (t2.length === 0)
              return "''";
            if (!e2.noCompatMode && c.indexOf(t2) !== -1)
              return "'" + t2 + "'";
            var o2 = e2.indent * Math.max(1, r2), a2 = e2.lineWidth === -1 ? -1 : Math.max(Math.min(e2.lineWidth, 40), e2.lineWidth - o2), s2 = n2 || e2.flowLevel > -1 && r2 >= e2.flowLevel;
            switch (g(t2, s2, e2.indent, a2, function(t3) {
              return function(e3, t4) {
                var r3, n3;
                for (r3 = 0, n3 = e3.implicitTypes.length; r3 < n3; r3 += 1)
                  if (e3.implicitTypes[r3].resolve(t4))
                    return true;
                return false;
              }(e2, t3);
            })) {
              case 1:
                return t2;
              case 2:
                return "'" + t2.replace(/'/g, "''") + "'";
              case 3:
                return "|" + x(t2, e2.indent) + w(f(t2, o2));
              case 4:
                return ">" + x(t2, e2.indent) + w(f(function(e3, t3) {
                  var r3, n3, i2 = /(\n+)([^\n]*)/g, o3 = (s3 = e3.indexOf("\n"), s3 = s3 !== -1 ? s3 : e3.length, i2.lastIndex = s3, E(e3.slice(0, s3), t3)), a3 = e3[0] === "\n" || e3[0] === " ";
                  var s3;
                  for (; n3 = i2.exec(e3); ) {
                    var u2 = n3[1], l2 = n3[2];
                    r3 = l2[0] === " ", o3 += u2 + (a3 || r3 || l2 === "" ? "" : "\n") + E(l2, t3), a3 = r3;
                  }
                  return o3;
                }(t2, a2), o2));
              case 5:
                return '"' + function(e3) {
                  for (var t3, r3, n3, i2 = "", o3 = 0; o3 < e3.length; o3++)
                    (t3 = e3.charCodeAt(o3)) >= 55296 && t3 <= 56319 && (r3 = e3.charCodeAt(o3 + 1)) >= 56320 && r3 <= 57343 ? (i2 += h(1024 * (t3 - 55296) + r3 - 56320 + 65536), o3++) : (n3 = l[t3], i2 += !n3 && y(t3) ? e3[o3] : n3 || h(t3));
                  return i2;
                }(t2) + '"';
              default:
                throw new i("impossible error: invalid scalar style");
            }
          }();
        }
        function x(e2, t2) {
          var r2 = _(e2) ? String(t2) : "", n2 = e2[e2.length - 1] === "\n";
          return r2 + (n2 && (e2[e2.length - 2] === "\n" || e2 === "\n") ? "+" : n2 ? "" : "-") + "\n";
        }
        function w(e2) {
          return e2[e2.length - 1] === "\n" ? e2.slice(0, -1) : e2;
        }
        function E(e2, t2) {
          if (e2 === "" || e2[0] === " ")
            return e2;
          for (var r2, n2, i2 = / [^ ]/g, o2 = 0, a2 = 0, s2 = 0, u2 = ""; r2 = i2.exec(e2); )
            (s2 = r2.index) - o2 > t2 && (n2 = a2 > o2 ? a2 : s2, u2 += "\n" + e2.slice(o2, n2), o2 = n2 + 1), a2 = s2;
          return u2 += "\n", e2.length - o2 > t2 && a2 > o2 ? u2 += e2.slice(o2, a2) + "\n" + e2.slice(a2 + 1) : u2 += e2.slice(o2), u2.slice(1);
        }
        function D(e2, t2, r2) {
          var n2, o2, a2, l2, c2, h2;
          for (a2 = 0, l2 = (o2 = r2 ? e2.explicitTypes : e2.implicitTypes).length; a2 < l2; a2 += 1)
            if (((c2 = o2[a2]).instanceOf || c2.predicate) && (!c2.instanceOf || typeof t2 == "object" && t2 instanceof c2.instanceOf) && (!c2.predicate || c2.predicate(t2))) {
              if (e2.tag = r2 ? c2.tag : "?", c2.represent) {
                if (h2 = e2.styleMap[c2.tag] || c2.defaultStyle, s.call(c2.represent) === "[object Function]")
                  n2 = c2.represent(t2, h2);
                else {
                  if (!u.call(c2.represent, h2))
                    throw new i("!<" + c2.tag + '> tag resolver accepts not "' + h2 + '" style');
                  n2 = c2.represent[h2](t2, h2);
                }
                e2.dump = n2;
              }
              return true;
            }
          return false;
        }
        function S(e2, t2, r2, n2, o2, a2) {
          e2.tag = null, e2.dump = r2, D(e2, r2, false) || D(e2, r2, true);
          var u2 = s.call(e2.dump);
          n2 && (n2 = e2.flowLevel < 0 || e2.flowLevel > t2);
          var l2, c2, h2 = u2 === "[object Object]" || u2 === "[object Array]";
          if (h2 && (c2 = (l2 = e2.duplicates.indexOf(r2)) !== -1), (e2.tag !== null && e2.tag !== "?" || c2 || e2.indent !== 2 && t2 > 0) && (o2 = false), c2 && e2.usedDuplicates[l2])
            e2.dump = "*ref_" + l2;
          else {
            if (h2 && c2 && !e2.usedDuplicates[l2] && (e2.usedDuplicates[l2] = true), u2 === "[object Object]")
              n2 && Object.keys(e2.dump).length !== 0 ? (!function(e3, t3, r3, n3) {
                var o3, a3, s2, u3, l3, c3, h3 = "", p3 = e3.tag, f2 = Object.keys(r3);
                if (e3.sortKeys === true)
                  f2.sort();
                else if (typeof e3.sortKeys == "function")
                  f2.sort(e3.sortKeys);
                else if (e3.sortKeys)
                  throw new i("sortKeys must be a boolean or a function");
                for (o3 = 0, a3 = f2.length; o3 < a3; o3 += 1)
                  c3 = "", n3 && o3 === 0 || (c3 += d(e3, t3)), u3 = r3[s2 = f2[o3]], S(e3, t3 + 1, s2, true, true, true) && ((l3 = e3.tag !== null && e3.tag !== "?" || e3.dump && e3.dump.length > 1024) && (e3.dump && e3.dump.charCodeAt(0) === 10 ? c3 += "?" : c3 += "? "), c3 += e3.dump, l3 && (c3 += d(e3, t3)), S(e3, t3 + 1, u3, true, l3) && (e3.dump && e3.dump.charCodeAt(0) === 10 ? c3 += ":" : c3 += ": ", h3 += c3 += e3.dump));
                e3.tag = p3, e3.dump = h3 || "{}";
              }(e2, t2, e2.dump, o2), c2 && (e2.dump = "&ref_" + l2 + e2.dump)) : (!function(e3, t3, r3) {
                var n3, i2, o3, a3, s2, u3 = "", l3 = e3.tag, c3 = Object.keys(r3);
                for (n3 = 0, i2 = c3.length; n3 < i2; n3 += 1)
                  s2 = "", n3 !== 0 && (s2 += ", "), e3.condenseFlow && (s2 += '"'), a3 = r3[o3 = c3[n3]], S(e3, t3, o3, false, false) && (e3.dump.length > 1024 && (s2 += "? "), s2 += e3.dump + (e3.condenseFlow ? '"' : "") + ":" + (e3.condenseFlow ? "" : " "), S(e3, t3, a3, false, false) && (u3 += s2 += e3.dump));
                e3.tag = l3, e3.dump = "{" + u3 + "}";
              }(e2, t2, e2.dump), c2 && (e2.dump = "&ref_" + l2 + " " + e2.dump));
            else if (u2 === "[object Array]") {
              var p2 = e2.noArrayIndent && t2 > 0 ? t2 - 1 : t2;
              n2 && e2.dump.length !== 0 ? (!function(e3, t3, r3, n3) {
                var i2, o3, a3 = "", s2 = e3.tag;
                for (i2 = 0, o3 = r3.length; i2 < o3; i2 += 1)
                  S(e3, t3 + 1, r3[i2], true, true) && (n3 && i2 === 0 || (a3 += d(e3, t3)), e3.dump && e3.dump.charCodeAt(0) === 10 ? a3 += "-" : a3 += "- ", a3 += e3.dump);
                e3.tag = s2, e3.dump = a3 || "[]";
              }(e2, p2, e2.dump, o2), c2 && (e2.dump = "&ref_" + l2 + e2.dump)) : (!function(e3, t3, r3) {
                var n3, i2, o3 = "", a3 = e3.tag;
                for (n3 = 0, i2 = r3.length; n3 < i2; n3 += 1)
                  S(e3, t3, r3[n3], false, false) && (n3 !== 0 && (o3 += "," + (e3.condenseFlow ? "" : " ")), o3 += e3.dump);
                e3.tag = a3, e3.dump = "[" + o3 + "]";
              }(e2, p2, e2.dump), c2 && (e2.dump = "&ref_" + l2 + " " + e2.dump));
            } else {
              if (u2 !== "[object String]") {
                if (e2.skipInvalid)
                  return false;
                throw new i("unacceptable kind of an object to dump " + u2);
              }
              e2.tag !== "?" && b(e2, e2.dump, t2, a2);
            }
            e2.tag !== null && e2.tag !== "?" && (e2.dump = "!<" + e2.tag + "> " + e2.dump);
          }
          return true;
        }
        function C(e2, t2) {
          var r2, n2, i2 = [], o2 = [];
          for (function e3(t3, r3, n3) {
            var i3, o3, a2;
            if (t3 !== null && typeof t3 == "object")
              if ((o3 = r3.indexOf(t3)) !== -1)
                n3.indexOf(o3) === -1 && n3.push(o3);
              else if (r3.push(t3), Array.isArray(t3))
                for (o3 = 0, a2 = t3.length; o3 < a2; o3 += 1)
                  e3(t3[o3], r3, n3);
              else
                for (i3 = Object.keys(t3), o3 = 0, a2 = i3.length; o3 < a2; o3 += 1)
                  e3(t3[i3[o3]], r3, n3);
          }(e2, i2, o2), r2 = 0, n2 = o2.length; r2 < n2; r2 += 1)
            t2.duplicates.push(i2[o2[r2]]);
          t2.usedDuplicates = new Array(n2);
        }
        function A(e2, t2) {
          var r2 = new p(t2 = t2 || {});
          return r2.noRefs || C(e2, r2), S(r2, 0, e2, true, true) ? r2.dump + "\n" : "";
        }
        e.exports.dump = A, e.exports.safeDump = function(e2, t2) {
          return A(e2, n.extend({ schema: a }, t2));
        };
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(64), r(19), r(65), r(20), r(68), r(92), r(144), r(22), r(94), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(91), u = r(1), l = r(183), c = r(0), h = r(7), p = r(95), f = r(69), d = r(3), m = r(305), y = r(306), v = r(307), _ = function(e2) {
          function t2(t3, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e2.call(this) || this;
            return n2._hasDeclaration = false, n2._docTypeName = "", n2._hasDocumentElement = false, n2._currentElementSerialized = false, n2._openTags = [], n2._ended = false, n2._fragment = r2, n2._options = u.applyDefaults(t3 || {}, s.DefaultXMLBuilderCBOptions), n2._builderOptions = { defaultNamespace: n2._options.defaultNamespace, namespaceAlias: n2._options.namespaceAlias }, n2._options.format === "json" ? n2._writer = new y.JSONCBWriter(n2._options) : n2._options.format === "yaml" ? n2._writer = new v.YAMLCBWriter(n2._options) : n2._writer = new m.XMLCBWriter(n2._options), n2._options.data !== void 0 && n2.on("data", n2._options.data), n2._options.end !== void 0 && n2.on("end", n2._options.end), n2._options.error !== void 0 && n2.on("error", n2._options.error), n2._prefixMap = new p.NamespacePrefixMap(), n2._prefixMap.set("xml", h.namespace.XML), n2._prefixIndex = { value: 1 }, n2._push(n2._writer.frontMatter()), n2;
          }
          return i(t2, e2), t2.prototype.ele = function(e3, t3, r2) {
            var n2, i2;
            if (u.isObject(e3) || u.isString(e3) && (/^\s*</.test(e3) || /^\s*[\{\[]/.test(e3) || /^(\s*|(#.*)|(%.*))*---/.test(e3))) {
              var a2 = l.fragment().set(this._options);
              try {
                a2.ele(e3);
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              try {
                for (var s2 = o(a2.node.childNodes), c2 = s2.next(); !c2.done; c2 = s2.next()) {
                  var h2 = c2.value;
                  this._fromNode(h2);
                }
              } catch (e4) {
                n2 = { error: e4 };
              } finally {
                try {
                  c2 && !c2.done && (i2 = s2.return) && i2.call(s2);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              return this;
            }
            if (this._serializeOpenTag(true), !this._fragment && this._hasDocumentElement && this._writer.level === 0)
              return this.emit("error", new Error("Document cannot have multiple document element nodes.")), this;
            try {
              this._currentElement = l.fragment(this._builderOptions).ele(e3, t3, r2);
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._fragment || this._hasDocumentElement || this._docTypeName === "" || this._currentElement.node._qualifiedName === this._docTypeName ? (this._currentElementSerialized = false, this._fragment || (this._hasDocumentElement = true), this) : (this.emit("error", new Error("Document element name does not match DocType declaration name.")), this);
          }, t2.prototype.att = function(e3, t3, r2) {
            if (this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert an attribute node as child of a document node.")), this;
            try {
              this._currentElement.att(e3, t3, r2);
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this;
          }, t2.prototype.com = function(e3) {
            var t3;
            this._serializeOpenTag(true);
            try {
              t3 = l.fragment(this._builderOptions).com(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return !this._options.wellFormed || c.xml_isLegalChar(t3.data) && t3.data.indexOf("--") === -1 && !t3.data.endsWith("-") ? (this._push(this._writer.comment(t3.data)), this) : (this.emit("error", new Error("Comment data contains invalid characters (well-formed required).")), this);
          }, t2.prototype.txt = function(e3) {
            if (!this._fragment && this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert a text node as child of a document node.")), this;
            var t3;
            this._serializeOpenTag(true);
            try {
              t3 = l.fragment(this._builderOptions).txt(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            if (this._options.wellFormed && !c.xml_isLegalChar(t3.data))
              return this.emit("error", new Error("Text data contains invalid characters (well-formed required).")), this;
            var r2 = t3.data.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            return this._push(this._writer.text(r2)), this;
          }, t2.prototype.ins = function(e3, t3) {
            var r2;
            t3 === void 0 && (t3 = ""), this._serializeOpenTag(true);
            try {
              r2 = l.fragment(this._builderOptions).ins(e3, t3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._options.wellFormed && (r2.target.indexOf(":") !== -1 || /^xml$/i.test(r2.target)) ? (this.emit("error", new Error("Processing instruction target contains invalid characters (well-formed required).")), this) : this._options.wellFormed && !c.xml_isLegalChar(r2.data) ? (this.emit("error", Error("Processing instruction data contains invalid characters (well-formed required).")), this) : (this._push(this._writer.instruction(r2.target, r2.data)), this);
          }, t2.prototype.dat = function(e3) {
            var t3;
            this._serializeOpenTag(true);
            try {
              t3 = l.fragment(this._builderOptions).dat(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._push(this._writer.cdata(t3.data)), this;
          }, t2.prototype.dec = function(e3) {
            return e3 === void 0 && (e3 = { version: "1.0" }), this._fragment ? (this.emit("error", Error("Cannot insert an XML declaration into a document fragment.")), this) : this._hasDeclaration ? (this.emit("error", Error("XML declaration is already inserted.")), this) : (this._push(this._writer.declaration(e3.version || "1.0", e3.encoding, e3.standalone)), this._hasDeclaration = true, this);
          }, t2.prototype.dtd = function(e3) {
            if (this._fragment)
              return this.emit("error", Error("Cannot insert a DocType declaration into a document fragment.")), this;
            if (this._docTypeName !== "")
              return this.emit("error", new Error("DocType declaration is already inserted.")), this;
            if (this._hasDocumentElement)
              return this.emit("error", new Error("Cannot insert DocType declaration after document element.")), this;
            var t3;
            try {
              t3 = l.create().dtd(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._options.wellFormed && !c.xml_isPubidChar(t3.publicId) ? (this.emit("error", new Error("DocType public identifier does not match PubidChar construct (well-formed required).")), this) : this._options.wellFormed && (!c.xml_isLegalChar(t3.systemId) || t3.systemId.indexOf('"') !== -1 && t3.systemId.indexOf("'") !== -1) ? (this.emit("error", new Error("DocType system identifier contains invalid characters (well-formed required).")), this) : (this._docTypeName = e3.name, this._push(this._writer.docType(e3.name, t3.publicId, t3.systemId)), this);
          }, t2.prototype.import = function(e3) {
            var t3, r2, n2 = l.fragment().set(this._options);
            try {
              n2.import(e3);
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            try {
              for (var i2 = o(n2.node.childNodes), a2 = i2.next(); !a2.done; a2 = i2.next()) {
                var s2 = a2.value;
                this._fromNode(s2);
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return this;
          }, t2.prototype.up = function() {
            return this._serializeOpenTag(false), this._serializeCloseTag(), this;
          }, t2.prototype.end = function() {
            for (this._serializeOpenTag(false); this._openTags.length > 0; )
              this._serializeCloseTag();
            return this._push(null), this;
          }, t2.prototype._serializeOpenTag = function(e3) {
            if (!this._currentElementSerialized && this._currentElement !== void 0) {
              var r2 = this._currentElement.node;
              if (!this._options.wellFormed || r2.localName.indexOf(":") === -1 && c.xml_isName(r2.localName)) {
                var n2 = "", i2 = false, o2 = this._prefixMap.copy(), a2 = {}, s2 = this._recordNamespaceInformation(r2, o2, a2), u2 = this._openTags.length === 0 ? null : this._openTags[this._openTags.length - 1][1], l2 = r2.namespaceURI;
                if (l2 === null && (l2 = u2), u2 === l2)
                  s2 !== null && (i2 = true), n2 = l2 === h.namespace.XML ? "xml:" + r2.localName : r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2));
                else {
                  var p2 = r2.prefix, f2 = null;
                  if (p2 === null && l2 === s2 || (f2 = o2.get(p2, l2)), p2 === "xmlns") {
                    if (this._options.wellFormed)
                      return void this.emit("error", new Error("An element cannot have the 'xmlns' prefix (well-formed required)."));
                    f2 = p2;
                  }
                  f2 !== null ? (n2 = f2 + ":" + r2.localName, s2 !== null && s2 !== h.namespace.XML && (u2 = s2 || null), this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2))) : p2 !== null ? (p2 in a2 && (p2 = this._generatePrefix(l2, o2, this._prefixIndex)), o2.set(p2, l2), n2 += p2 + ":" + r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns:" + p2, this._serializeAttributeValue(l2, this._options.wellFormed))), s2 !== null && (u2 = s2 || null)) : s2 === null || s2 !== null && s2 !== l2 ? (i2 = true, n2 += r2.localName, u2 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns", this._serializeAttributeValue(l2, this._options.wellFormed)))) : (n2 += r2.localName, u2 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)));
                }
                this._serializeAttributes(r2, o2, this._prefixIndex, a2, i2, this._options.wellFormed);
                var d2 = l2 === h.namespace.HTML;
                d2 && !e3 && t2._VoidElementNames.has(r2.localName) ? (this._push(this._writer.openTagEnd(n2, true, true)), this._writer.endElement(n2)) : d2 || e3 ? this._push(this._writer.openTagEnd(n2, false, false)) : (this._push(this._writer.openTagEnd(n2, true, false)), this._writer.endElement(n2)), this._currentElementSerialized = true, this._openTags.push([n2, u2, this._prefixMap, e3]), this._isPrefixMapModified(this._prefixMap, o2) && (this._prefixMap = o2), this._writer.level++;
              } else
                this.emit("error", new Error("Node local name contains invalid characters (well-formed required)."));
            }
          }, t2.prototype._serializeCloseTag = function() {
            this._writer.level--;
            var e3 = this._openTags.pop();
            if (e3 !== void 0) {
              var t3 = a(e3, 4), r2 = t3[0], n2 = (t3[1], t3[2]), i2 = t3[3];
              this._prefixMap = n2, i2 && (this._push(this._writer.closeTag(r2)), this._writer.endElement(r2));
            } else
              this.emit("error", new Error("Last element is undefined."));
          }, t2.prototype._push = function(e3) {
            e3 === null ? (this._ended = true, this.emit("end")) : this._ended ? this.emit("error", new Error("Cannot push to ended stream.")) : e3.length !== 0 && (this._writer.hasData = true, this.emit("data", e3, this._writer.level));
          }, t2.prototype._fromNode = function(e3) {
            var t3, r2, n2, i2;
            if (d.Guard.isElementNode(e3)) {
              var a2 = e3.prefix ? e3.prefix + ":" + e3.localName : e3.localName;
              e3.namespaceURI !== null ? this.ele(e3.namespaceURI, a2) : this.ele(a2);
              try {
                for (var s2 = o(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                  var l2 = u2.value, c2 = l2.prefix ? l2.prefix + ":" + l2.localName : l2.localName;
                  l2.namespaceURI !== null ? this.att(l2.namespaceURI, c2, l2.value) : this.att(c2, l2.value);
                }
              } catch (e4) {
                t3 = { error: e4 };
              } finally {
                try {
                  u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              try {
                for (var h2 = o(e3.childNodes), p2 = h2.next(); !p2.done; p2 = h2.next()) {
                  var f2 = p2.value;
                  this._fromNode(f2);
                }
              } catch (e4) {
                n2 = { error: e4 };
              } finally {
                try {
                  p2 && !p2.done && (i2 = h2.return) && i2.call(h2);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              this.up();
            } else
              d.Guard.isExclusiveTextNode(e3) && e3.data ? this.txt(e3.data) : d.Guard.isCommentNode(e3) ? this.com(e3.data) : d.Guard.isCDATASectionNode(e3) ? this.dat(e3.data) : d.Guard.isProcessingInstructionNode(e3) && this.ins(e3.target, e3.data);
          }, t2.prototype._serializeAttributes = function(e3, t3, r2, n2, i2, a2) {
            var s2, u2, l2 = a2 ? new f.LocalNameSet() : void 0;
            try {
              for (var p2 = o(e3.attributes), d2 = p2.next(); !d2.done; d2 = p2.next()) {
                var m2 = d2.value;
                if (a2 || i2 || m2.namespaceURI !== null) {
                  if (a2 && l2 && l2.has(m2.namespaceURI, m2.localName))
                    return void this.emit("error", new Error("Element contains duplicate attributes (well-formed required)."));
                  a2 && l2 && l2.set(m2.namespaceURI, m2.localName);
                  var y2 = m2.namespaceURI, v2 = null;
                  if (y2 !== null)
                    if (v2 = t3.get(m2.prefix, y2), y2 === h.namespace.XMLNS) {
                      if (m2.value === h.namespace.XML || m2.prefix === null && i2 || m2.prefix !== null && (!(m2.localName in n2) || n2[m2.localName] !== m2.value) && t3.has(m2.localName, m2.value))
                        continue;
                      if (a2 && m2.value === h.namespace.XMLNS)
                        return void this.emit("error", new Error("XMLNS namespace is reserved (well-formed required)."));
                      if (a2 && m2.value === "")
                        return void this.emit("error", new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required)."));
                      m2.prefix === "xmlns" && (v2 = "xmlns");
                    } else
                      v2 === null && (v2 = m2.prefix === null || t3.hasPrefix(m2.prefix) && !t3.has(m2.prefix, y2) ? this._generatePrefix(y2, t3, r2) : m2.prefix, this._push(this._writer.attribute("xmlns:" + v2, this._serializeAttributeValue(y2, this._options.wellFormed))));
                  if (a2 && (m2.localName.indexOf(":") !== -1 || !c.xml_isName(m2.localName) || m2.localName === "xmlns" && y2 === null))
                    return void this.emit("error", new Error("Attribute local name contains invalid characters (well-formed required)."));
                  this._push(this._writer.attribute((v2 !== null ? v2 + ":" : "") + m2.localName, this._serializeAttributeValue(m2.value, this._options.wellFormed)));
                } else
                  this._push(this._writer.attribute(m2.localName, this._serializeAttributeValue(m2.value, this._options.wellFormed)));
              }
            } catch (e4) {
              s2 = { error: e4 };
            } finally {
              try {
                d2 && !d2.done && (u2 = p2.return) && u2.call(p2);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }, t2.prototype._serializeAttributeValue = function(e3, t3) {
            return t3 && e3 !== null && !c.xml_isLegalChar(e3) ? (this.emit("error", new Error("Invalid characters in attribute value.")), "") : e3 === null ? "" : e3.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, t2.prototype._recordNamespaceInformation = function(e3, t3, r2) {
            var n2, i2, a2 = null;
            try {
              for (var s2 = o(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var l2 = u2.value, c2 = l2.namespaceURI, p2 = l2.prefix;
                if (c2 === h.namespace.XMLNS) {
                  if (p2 === null) {
                    a2 = l2.value;
                    continue;
                  }
                  var f2 = l2.localName, d2 = l2.value;
                  if (d2 === h.namespace.XML)
                    continue;
                  if (d2 === "" && (d2 = null), t3.has(f2, d2))
                    continue;
                  t3.set(f2, d2), r2[f2] = d2 || "";
                }
              }
            } catch (e4) {
              n2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return a2;
          }, t2.prototype._generatePrefix = function(e3, t3, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t3.set(n2, e3), n2;
          }, t2.prototype._isPrefixMapModified = function(e3, t3) {
            var r2 = e3._items, n2 = t3._items, i2 = e3._nullItems, o2 = t3._nullItems;
            for (var a2 in n2) {
              var s2 = r2[a2];
              if (s2 === void 0)
                return true;
              var u2 = n2[a2];
              if (s2.length !== u2.length)
                return true;
              for (var l2 = 0; l2 < s2.length; l2++)
                if (s2[l2] !== u2[l2])
                  return true;
            }
            if (i2.length !== o2.length)
              return true;
            for (l2 = 0; l2 < i2.length; l2++)
              if (i2[l2] !== o2[l2])
                return true;
            return false;
          }, t2._VoidElementNames = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), t2;
        }(r(308).EventEmitter);
        t.XMLBuilderCBImpl = _;
      }, function(e, t, r) {
        "use strict";
        r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this, t3) || this;
            return r2._lineLength = 0, r2;
          }
          return i(t2, e2), t2.prototype.frontMatter = function() {
            return "";
          }, t2.prototype.declaration = function(e3, t3, r2) {
            var n2 = this._beginLine() + "<?xml";
            return n2 += ' version="' + e3 + '"', t3 !== void 0 && (n2 += ' encoding="' + t3 + '"'), r2 !== void 0 && (n2 += ' standalone="' + (r2 ? "yes" : "no") + '"'), n2 += "?>";
          }, t2.prototype.docType = function(e3, t3, r2) {
            var n2 = this._beginLine();
            return n2 += t3 && r2 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '" "' + r2 + '">' : t3 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '">' : r2 ? "<!DOCTYPE " + e3 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e3 + ">";
          }, t2.prototype.comment = function(e3) {
            return this._beginLine() + "<!--" + e3 + "-->";
          }, t2.prototype.text = function(e3) {
            return this._beginLine() + e3;
          }, t2.prototype.instruction = function(e3, t3) {
            return t3 ? this._beginLine() + "<?" + e3 + " " + t3 + "?>" : this._beginLine() + "<?" + e3 + "?>";
          }, t2.prototype.cdata = function(e3) {
            return this._beginLine() + "<![CDATA[" + e3 + "]]>";
          }, t2.prototype.openTagBegin = function(e3) {
            return this._lineLength += 1 + e3.length, this._beginLine() + "<" + e3;
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            return r2 ? " />" : t3 ? this._writerOptions.allowEmptyTags ? "></" + e3 + ">" : this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">";
          }, t2.prototype.closeTag = function(e3) {
            return this._beginLine() + "</" + e3 + ">";
          }, t2.prototype.attribute = function(e3, t3) {
            var r2 = e3 + '="' + t3 + '"';
            return this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._lineLength + 1 + r2.length > this._writerOptions.width ? (r2 = this._beginLine() + this._indent(1) + r2, this._lineLength = r2.length, r2) : (this._lineLength += 1 + r2.length, " " + r2);
          }, t2.prototype.beginElement = function(e3) {
          }, t2.prototype.endElement = function(e3) {
          }, t2.prototype._beginLine = function() {
            if (this._writerOptions.prettyPrint) {
              var e3 = (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level);
              return this._lineLength = e3.length, e3;
            }
            return "";
          }, t2.prototype._indent = function(e3) {
            return e3 <= 0 ? "" : this._writerOptions.indent.repeat(e3);
          }, t2;
        }(r(114).BaseCBWriter);
        t.XMLCBWriter = o;
      }, function(e, t, r) {
        "use strict";
        r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this, t3) || this;
            return r2._hasChildren = [], r2._additionalLevel = 0, r2;
          }
          return i(t2, e2), t2.prototype.frontMatter = function() {
            return "";
          }, t2.prototype.declaration = function(e3, t3, r2) {
            return "";
          }, t2.prototype.docType = function(e3, t3, r2) {
            return "";
          }, t2.prototype.comment = function(e3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.comment) + this._sep() + this._val(e3) + this._sep() + "}";
          }, t2.prototype.text = function(e3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.text) + this._sep() + this._val(e3) + this._sep() + "}";
          }, t2.prototype.instruction = function(e3, t3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.ins) + this._sep() + this._val(t3 ? e3 + " " + t3 : e3) + this._sep() + "}";
          }, t2.prototype.cdata = function(e3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.cdata) + this._sep() + this._val(e3) + this._sep() + "}";
          }, t2.prototype.attribute = function(e3, t3) {
            return this._comma() + this._beginLine(1) + "{" + this._sep() + this._key(this._builderOptions.convert.att + e3) + this._sep() + this._val(t3) + this._sep() + "}";
          }, t2.prototype.openTagBegin = function(e3) {
            var t3 = this._comma() + this._beginLine() + "{" + this._sep() + this._key(e3) + this._sep() + "{";
            return this._additionalLevel++, this.hasData = true, t3 += this._beginLine() + this._key(this._builderOptions.convert.text) + this._sep() + "[", this._hasChildren.push(false), t3;
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            if (t3) {
              var n2 = this._sep() + "]";
              return this._additionalLevel--, n2 += this._beginLine() + "}" + this._sep() + "}";
            }
            return "";
          }, t2.prototype.closeTag = function(e3) {
            var t3 = this._beginLine() + "]";
            return this._additionalLevel--, t3 += this._beginLine() + "}" + this._sep() + "}";
          }, t2.prototype.beginElement = function(e3) {
          }, t2.prototype.endElement = function(e3) {
            this._hasChildren.pop();
          }, t2.prototype._beginLine = function(e3) {
            return e3 === void 0 && (e3 = 0), this._writerOptions.prettyPrint ? (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level + e3) : "";
          }, t2.prototype._indent = function(e3) {
            return e3 + this._additionalLevel <= 0 ? "" : this._writerOptions.indent.repeat(e3 + this._additionalLevel);
          }, t2.prototype._comma = function() {
            var e3 = this._hasChildren[this._hasChildren.length - 1] ? "," : "";
            return this._hasChildren.length > 0 && (this._hasChildren[this._hasChildren.length - 1] = true), e3;
          }, t2.prototype._sep = function() {
            return this._writerOptions.prettyPrint ? " " : "";
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2;
        }(r(114).BaseCBWriter);
        t.JSONCBWriter = o;
      }, function(e, t, r) {
        "use strict";
        r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this, t3) || this;
            if (r2._rootWritten = false, r2._additionalLevel = 0, t3.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (t3.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return r2;
          }
          return i(t2, e2), t2.prototype.frontMatter = function() {
            return this._beginLine() + "---";
          }, t2.prototype.declaration = function(e3, t3, r2) {
            return "";
          }, t2.prototype.docType = function(e3, t3, r2) {
            return "";
          }, t2.prototype.comment = function(e3) {
            return this._beginLine() + this._key(this._builderOptions.convert.comment) + " " + this._val(e3);
          }, t2.prototype.text = function(e3) {
            return this._beginLine() + this._key(this._builderOptions.convert.text) + " " + this._val(e3);
          }, t2.prototype.instruction = function(e3, t3) {
            return this._beginLine() + this._key(this._builderOptions.convert.ins) + " " + this._val(t3 ? e3 + " " + t3 : e3);
          }, t2.prototype.cdata = function(e3) {
            return this._beginLine() + this._key(this._builderOptions.convert.cdata) + " " + this._val(e3);
          }, t2.prototype.attribute = function(e3, t3) {
            this._additionalLevel++;
            var r2 = this._beginLine() + this._key(this._builderOptions.convert.att + e3) + " " + this._val(t3);
            return this._additionalLevel--, r2;
          }, t2.prototype.openTagBegin = function(e3) {
            var t3 = this._beginLine() + this._key(e3);
            return this._rootWritten || (this._rootWritten = true), this.hasData = true, this._additionalLevel++, t3 += this._beginLine(true) + this._key(this._builderOptions.convert.text);
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            return t3 ? " " + this._val("") : "";
          }, t2.prototype.closeTag = function(e3) {
            return this._additionalLevel--, "";
          }, t2.prototype.beginElement = function(e3) {
          }, t2.prototype.endElement = function(e3) {
          }, t2.prototype._beginLine = function(e3) {
            return e3 === void 0 && (e3 = false), (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level, e3);
          }, t2.prototype._indent = function(e3, t3) {
            if (e3 + this._additionalLevel <= 0)
              return "";
            var r2 = this._writerOptions.indent.repeat(e3 + this._additionalLevel);
            return !t3 && this._rootWritten ? r2.substr(0, r2.length - 2) + "-" + r2.substr(-1, 1) : r2;
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2;
        }(r(114).BaseCBWriter);
        t.YAMLCBWriter = o;
      }, function(e, t, r) {
        "use strict";
        var n, i = typeof Reflect == "object" ? Reflect : null, o = i && typeof i.apply == "function" ? i.apply : function(e2, t2, r2) {
          return Function.prototype.apply.call(e2, t2, r2);
        };
        n = i && typeof i.ownKeys == "function" ? i.ownKeys : Object.getOwnPropertySymbols ? function(e2) {
          return Object.getOwnPropertyNames(e2).concat(Object.getOwnPropertySymbols(e2));
        } : function(e2) {
          return Object.getOwnPropertyNames(e2);
        };
        var a = Number.isNaN || function(e2) {
          return e2 != e2;
        };
        function s() {
          s.init.call(this);
        }
        e.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._eventsCount = 0, s.prototype._maxListeners = void 0;
        var u = 10;
        function l(e2) {
          if (typeof e2 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e2);
        }
        function c(e2) {
          return e2._maxListeners === void 0 ? s.defaultMaxListeners : e2._maxListeners;
        }
        function h(e2, t2, r2, n2) {
          var i2, o2, a2, s2;
          if (l(r2), (o2 = e2._events) === void 0 ? (o2 = e2._events = Object.create(null), e2._eventsCount = 0) : (o2.newListener !== void 0 && (e2.emit("newListener", t2, r2.listener ? r2.listener : r2), o2 = e2._events), a2 = o2[t2]), a2 === void 0)
            a2 = o2[t2] = r2, ++e2._eventsCount;
          else if (typeof a2 == "function" ? a2 = o2[t2] = n2 ? [r2, a2] : [a2, r2] : n2 ? a2.unshift(r2) : a2.push(r2), (i2 = c(e2)) > 0 && a2.length > i2 && !a2.warned) {
            a2.warned = true;
            var u2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(t2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u2.name = "MaxListenersExceededWarning", u2.emitter = e2, u2.type = t2, u2.count = a2.length, s2 = u2, console && console.warn && console.warn(s2);
          }
          return e2;
        }
        function p() {
          if (!this.fired)
            return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
        }
        function f(e2, t2, r2) {
          var n2 = { fired: false, wrapFn: void 0, target: e2, type: t2, listener: r2 }, i2 = p.bind(n2);
          return i2.listener = r2, n2.wrapFn = i2, i2;
        }
        function d(e2, t2, r2) {
          var n2 = e2._events;
          if (n2 === void 0)
            return [];
          var i2 = n2[t2];
          return i2 === void 0 ? [] : typeof i2 == "function" ? r2 ? [i2.listener || i2] : [i2] : r2 ? function(e3) {
            for (var t3 = new Array(e3.length), r3 = 0; r3 < t3.length; ++r3)
              t3[r3] = e3[r3].listener || e3[r3];
            return t3;
          }(i2) : y(i2, i2.length);
        }
        function m(e2) {
          var t2 = this._events;
          if (t2 !== void 0) {
            var r2 = t2[e2];
            if (typeof r2 == "function")
              return 1;
            if (r2 !== void 0)
              return r2.length;
          }
          return 0;
        }
        function y(e2, t2) {
          for (var r2 = new Array(t2), n2 = 0; n2 < t2; ++n2)
            r2[n2] = e2[n2];
          return r2;
        }
        Object.defineProperty(s, "defaultMaxListeners", { enumerable: true, get: function() {
          return u;
        }, set: function(e2) {
          if (typeof e2 != "number" || e2 < 0 || a(e2))
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e2 + ".");
          u = e2;
        } }), s.init = function() {
          this._events !== void 0 && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }, s.prototype.setMaxListeners = function(e2) {
          if (typeof e2 != "number" || e2 < 0 || a(e2))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e2 + ".");
          return this._maxListeners = e2, this;
        }, s.prototype.getMaxListeners = function() {
          return c(this);
        }, s.prototype.emit = function(e2) {
          for (var t2 = [], r2 = 1; r2 < arguments.length; r2++)
            t2.push(arguments[r2]);
          var n2 = e2 === "error", i2 = this._events;
          if (i2 !== void 0)
            n2 = n2 && i2.error === void 0;
          else if (!n2)
            return false;
          if (n2) {
            var a2;
            if (t2.length > 0 && (a2 = t2[0]), a2 instanceof Error)
              throw a2;
            var s2 = new Error("Unhandled error." + (a2 ? " (" + a2.message + ")" : ""));
            throw s2.context = a2, s2;
          }
          var u2 = i2[e2];
          if (u2 === void 0)
            return false;
          if (typeof u2 == "function")
            o(u2, this, t2);
          else {
            var l2 = u2.length, c2 = y(u2, l2);
            for (r2 = 0; r2 < l2; ++r2)
              o(c2[r2], this, t2);
          }
          return true;
        }, s.prototype.addListener = function(e2, t2) {
          return h(this, e2, t2, false);
        }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function(e2, t2) {
          return h(this, e2, t2, true);
        }, s.prototype.once = function(e2, t2) {
          return l(t2), this.on(e2, f(this, e2, t2)), this;
        }, s.prototype.prependOnceListener = function(e2, t2) {
          return l(t2), this.prependListener(e2, f(this, e2, t2)), this;
        }, s.prototype.removeListener = function(e2, t2) {
          var r2, n2, i2, o2, a2;
          if (l(t2), (n2 = this._events) === void 0)
            return this;
          if ((r2 = n2[e2]) === void 0)
            return this;
          if (r2 === t2 || r2.listener === t2)
            --this._eventsCount == 0 ? this._events = Object.create(null) : (delete n2[e2], n2.removeListener && this.emit("removeListener", e2, r2.listener || t2));
          else if (typeof r2 != "function") {
            for (i2 = -1, o2 = r2.length - 1; o2 >= 0; o2--)
              if (r2[o2] === t2 || r2[o2].listener === t2) {
                a2 = r2[o2].listener, i2 = o2;
                break;
              }
            if (i2 < 0)
              return this;
            i2 === 0 ? r2.shift() : function(e3, t3) {
              for (; t3 + 1 < e3.length; t3++)
                e3[t3] = e3[t3 + 1];
              e3.pop();
            }(r2, i2), r2.length === 1 && (n2[e2] = r2[0]), n2.removeListener !== void 0 && this.emit("removeListener", e2, a2 || t2);
          }
          return this;
        }, s.prototype.off = s.prototype.removeListener, s.prototype.removeAllListeners = function(e2) {
          var t2, r2, n2;
          if ((r2 = this._events) === void 0)
            return this;
          if (r2.removeListener === void 0)
            return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : r2[e2] !== void 0 && (--this._eventsCount == 0 ? this._events = Object.create(null) : delete r2[e2]), this;
          if (arguments.length === 0) {
            var i2, o2 = Object.keys(r2);
            for (n2 = 0; n2 < o2.length; ++n2)
              (i2 = o2[n2]) !== "removeListener" && this.removeAllListeners(i2);
            return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
          }
          if (typeof (t2 = r2[e2]) == "function")
            this.removeListener(e2, t2);
          else if (t2 !== void 0)
            for (n2 = t2.length - 1; n2 >= 0; n2--)
              this.removeListener(e2, t2[n2]);
          return this;
        }, s.prototype.listeners = function(e2) {
          return d(this, e2, true);
        }, s.prototype.rawListeners = function(e2) {
          return d(this, e2, false);
        }, s.listenerCount = function(e2, t2) {
          return typeof e2.listenerCount == "function" ? e2.listenerCount(t2) : m.call(e2, t2);
        }, s.prototype.listenerCount = m, s.prototype.eventNames = function() {
          return this._eventsCount > 0 ? n(this._events) : [];
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(77);
        t.createCB = function(e2) {
          return new n.XMLBuilderCBImpl(e2);
        }, t.fragmentCB = function(e2) {
          return new n.XMLBuilderCBImpl(e2, true);
        };
      }]);
    });
  }
});

// src/main.ts
__export(exports, {
  default: () => WordpressPlugin
});
var import_obsidian7 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var ApiType;
(function(ApiType2) {
  ApiType2["XML_RPC"] = "xml-rpc";
  ApiType2["RestAPI"] = "restapi";
})(ApiType || (ApiType = {}));
var RestApiPlugin;
(function(RestApiPlugin2) {
  RestApiPlugin2["Authentication_miniOrange"] = "miniOrange";
})(RestApiPlugin || (RestApiPlugin = {}));
var DEFAULT_SETTINGS = {
  apiType: ApiType.XML_RPC,
  endpoint: "",
  saveUserName: false,
  showRibbonIcon: false
};
var WordpressSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for WordPress plugin" });
    new import_obsidian.Setting(containerEl).setName("WordPress URL").setDesc("Full path of installed WordPress, for example, https://example.com/wordpress").addText((text) => text.setPlaceholder("https://example.com/wordpress").setValue(this.plugin.settings.endpoint).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.endpoint = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Save User Name").setDesc(`If enabled, the WordPress user name you typed will be saved in local data.
This might be user name disclosure in synchronize services.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.saveUserName).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.saveUserName = value;
      yield this.plugin.saveSettings();
      this.display();
    })));
    if (this.plugin.settings.saveUserName) {
      new import_obsidian.Setting(containerEl).setName("WordPress User Name").setDesc("User name of WordPress").addText((text) => text.setPlaceholder("User name").setValue(this.plugin.settings.userName).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.userName = value;
        yield this.plugin.saveSettings();
      })));
    } else {
      delete this.plugin.settings.userName;
    }
    new import_obsidian.Setting(containerEl).setName("API Type").setDesc(`Select which API you want to use.
- XML-RPC: Enabled by default but some host may disable it
- REST API`).addDropdown((dropdown) => {
      dropdown.addOption(ApiType.XML_RPC, "XML-RPC").addOption(ApiType.RestAPI, "REST API").setValue(this.plugin.settings.apiType).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.apiType = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    if (this.plugin.settings.apiType === ApiType.XML_RPC) {
    } else if (this.plugin.settings.apiType === ApiType.RestAPI) {
      if (!this.plugin.settings.restApiPlugin) {
        this.plugin.settings.restApiPlugin = RestApiPlugin.Authentication_miniOrange;
      }
      new import_obsidian.Setting(containerEl).setName("REST API Plugin").setDesc(`Select which auth plugin for REST API you installed.`).addDropdown((dropdown) => {
        dropdown.addOption(RestApiPlugin.Authentication_miniOrange, "WordPress REST API Authentication by miniOrange").setValue(this.plugin.settings.restApiPlugin).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.restApiPlugin = value;
          yield this.plugin.saveSettings();
          this.display();
        }));
      });
    }
    new import_obsidian.Setting(containerEl).setName("Show icon in sidebar").setDesc(`If enabled, a button which opens publish panel will be added to the Obsidian sidebar.
Changes only take effect on reload.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showRibbonIcon = value;
      yield this.plugin.saveSettings();
      this.display();
      this.plugin.updateRibbonIcon();
    })));
  }
};

// src/icons.ts
var import_obsidian2 = __toModule(require("obsidian"));
var icons = {
  "wp-logo": `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <g fill="currentColor">
    <path d="M 7.109375 50 C 7.109375 66.976562 16.976562 81.648438 31.28125 88.601562 L 10.820312 32.542969 C 8.441406 37.878906 7.109375 43.78125 7.109375 50 Z M 7.109375 50 "/>
    <path d="M 78.957031 47.835938 C 78.957031 42.535156 77.054688 38.863281 75.421875 36.003906 C 73.246094 32.472656 71.207031 29.480469 71.207031 25.945312 C 71.207031 22.003906 74.199219 18.332031 78.410156 18.332031 C 78.601562 18.332031 78.78125 18.355469 78.96875 18.367188 C 71.335938 11.375 61.167969 7.105469 50 7.105469 C 35.015625 7.105469 21.832031 14.796875 14.164062 26.441406 C 15.167969 26.472656 16.117188 26.492188 16.921875 26.492188 C 21.410156 26.492188 28.355469 25.949219 28.355469 25.949219 C 30.667969 25.8125 30.941406 29.207031 28.628906 29.480469 C 28.628906 29.480469 26.304688 29.753906 23.722656 29.890625 L 39.339844 76.351562 L 48.726562 48.199219 L 42.042969 29.886719 C 39.734375 29.753906 37.546875 29.480469 37.546875 29.480469 C 35.234375 29.34375 35.507812 25.808594 37.816406 25.945312 C 37.816406 25.945312 44.902344 26.492188 49.117188 26.492188 C 53.601562 26.492188 60.546875 25.945312 60.546875 25.945312 C 62.859375 25.808594 63.132812 29.207031 60.824219 29.480469 C 60.824219 29.480469 58.492188 29.753906 55.914062 29.886719 L 71.414062 75.996094 L 75.691406 61.699219 C 77.546875 55.765625 78.957031 51.507812 78.957031 47.835938 Z M 78.957031 47.835938 "/>
    <path d="M 50.753906 53.75 L 37.882812 91.148438 C 41.726562 92.277344 45.789062 92.894531 50 92.894531 C 54.996094 92.894531 59.785156 92.03125 64.246094 90.464844 C 64.128906 90.28125 64.027344 90.085938 63.941406 89.871094 Z M 50.753906 53.75 "/>
    <path d="M 87.636719 29.417969 C 87.824219 30.785156 87.925781 32.253906 87.925781 33.832031 C 87.925781 38.183594 87.113281 43.074219 84.667969 49.195312 L 71.5625 87.074219 C 84.316406 79.640625 92.894531 65.824219 92.894531 50 C 92.894531 42.542969 90.988281 35.53125 87.636719 29.417969 Z M 87.636719 29.417969 "/>
    <path d="M 50 0 C 22.433594 0 0 22.429688 0 50 C 0 77.570312 22.433594 100 50 100 C 77.570312 100 100.003906 77.570312 100.003906 50 C 100.003906 22.429688 77.570312 0 50 0 Z M 50 97.707031 C 23.695312 97.707031 2.292969 76.304688 2.292969 50 C 2.292969 23.695312 23.695312 2.292969 50 2.292969 C 76.304688 2.292969 97.707031 23.695312 97.707031 50 C 97.707031 76.304688 76.304688 97.707031 50 97.707031 Z M 50 97.707031 "/>
  </g>
</svg>`
};
var addIcons = () => {
  Object.keys(icons).forEach((key) => {
    (0, import_obsidian2.addIcon)(key, icons[key]);
  });
};

// src/wp-publish-view.ts
var import_obsidian6 = __toModule(require("obsidian"));

// node_modules/marked/lib/marked.esm.js
function getDefaults() {
  return {
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: "",
    highlight: null,
    langPrefix: "language-",
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
var defaults = getDefaults();
function changeDefaults(newDefaults) {
  defaults = newDefaults;
}
var escapeTest = /[&<>"']/;
var escapeReplace = /[&<>"']/g;
var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape2(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
var caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = regex.source || regex;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
var nonWordAndColonTest = /[^\w:]/g;
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    let prot;
    try {
      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, "").toLowerCase();
    } catch (e) {
      return null;
    }
    if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, "%");
  } catch (e) {
    return null;
  }
  return href;
}
var baseUrls = {};
var justDomain = /^[^:]+:\/*[^/]*$/;
var protocol = /^([^:]+:)[\s\S]*$/;
var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(base, href) {
  if (!baseUrls[" " + base]) {
    if (justDomain.test(base)) {
      baseUrls[" " + base] = base + "/";
    } else {
      baseUrls[" " + base] = rtrim(base, "/", true);
    }
  }
  base = baseUrls[" " + base];
  const relativeBase = base.indexOf(":") === -1;
  if (href.substring(0, 2) === "//") {
    if (relativeBase) {
      return href;
    }
    return base.replace(protocol, "$1") + href;
  } else if (href.charAt(0) === "/") {
    if (relativeBase) {
      return href;
    }
    return base.replace(domain, "$1") + href;
  } else {
    return base + href;
  }
}
var noopTest = { exec: function noopTest2() {
} };
function merge(obj) {
  let i = 1, target, key;
  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }
  return obj;
}
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match2, offset, str) => {
    let escaped = false, curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count)
      cells.push("");
  }
  for (; i < cells.length; i++) {
    cells[i] = cells[i].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.substr(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  const l = str.length;
  let level = 0, i = 0;
  for (; i < l; i++) {
    if (str[i] === "\\") {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  return -1;
}
function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
  }
}
function repeatString(pattern, count) {
  if (count < 1) {
    return "";
  }
  let result = "";
  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }
    count >>= 1;
    pattern += pattern;
  }
  return result + pattern;
}
function outputLink(cap, link, raw, lexer2) {
  const href = link.href;
  const title = link.title ? escape2(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer2.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href,
      title,
      text,
      tokens: lexer2.inlineTokens(text, [])
    };
    lexer2.state.inLink = false;
    return token;
  } else {
    return {
      type: "image",
      raw,
      href,
      title,
      text: escape2(text)
    };
  }
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return text.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var Tokenizer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text, "\n") : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim() : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, "#");
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      const token = {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text,
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ *> ?/gm, "");
      return {
        type: "blockquote",
        raw: cap[0],
        tokens: this.lexer.blockTokens(text, []),
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\n]*)?(?:\\n|$))`);
      while (src) {
        endEarly = false;
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split("\n", 1)[0];
        nextLine = src.split("\n", 1)[0];
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])`);
          while (src) {
            rawLine = src.split("\n", 1)[0];
            line = rawLine;
            if (this.options.pedantic) {
              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (nextBulletRegex.test(line)) {
              break;
            }
            if (line.search(/[^ ]/) >= indent || !line.trim()) {
              itemContents += "\n" + line.slice(indent);
            } else if (!blankLine) {
              itemContents += "\n" + line;
            } else {
              break;
            }
            if (!blankLine && !line.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      const l = list.items.length;
      for (i = 0; i < l; i++) {
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        const spacers = list.items[i].tokens.filter((t) => t.type === "space");
        const hasMultipleLineBreaks = spacers.every((t) => {
          const chars = t.raw.split("");
          let lineBreaks = 0;
          for (const char of chars) {
            if (char === "\n") {
              lineBreaks += 1;
            }
            if (lineBreaks > 1) {
              return true;
            }
          }
          return false;
        });
        if (!list.loose && spacers.length && hasMultipleLineBreaks) {
          list.loose = true;
          list.items[i].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
        text: cap[0]
      };
      if (this.options.sanitize) {
        token.type = "paragraph";
        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]);
        token.tokens = [];
        this.lexer.inline(token.text, token.tokens);
      }
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      if (cap[3])
        cap[3] = cap[3].substring(1, cap[3].length - 1);
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      return {
        type: "def",
        tag,
        raw: cap[0],
        href: cap[2],
        title: cap[3]
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      const item = {
        type: "table",
        header: splitCells(cap[1]).map((c) => {
          return { text: c };
        }),
        align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        let l = item.align.length;
        let i, j, k, row;
        for (i = 0; i < l; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = "right";
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = "center";
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = "left";
          } else {
            item.align[i] = null;
          }
        }
        l = item.rows.length;
        for (i = 0; i < l; i++) {
          item.rows[i] = splitCells(item.rows[i], item.header.length).map((c) => {
            return { text: c };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = [];
          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k = 0; k < row.length; k++) {
            row[k].tokens = [];
            this.lexer.inlineTokens(row[k].text, row[k].tokens);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      const token = {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const token = {
        type: "paragraph",
        raw: cap[0],
        text: cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      const token = {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape2(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: this.options.sanitize ? "text" : "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]) : cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link || !link.href) {
        const text = cap[0].charAt(0);
        return {
          type: "text",
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match2 = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match2)
      return;
    if (match2[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match2[1] || match2[2] || "";
    if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
      const lLength = match2[0].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match2[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match2 = endReg.exec(maskedSrc)) != null) {
        rDelim = match2[1] || match2[2] || match2[3] || match2[4] || match2[5] || match2[6];
        if (!rDelim)
          continue;
        rLength = rDelim.length;
        if (match2[3] || match2[4]) {
          delimTotal += rLength;
          continue;
        } else if (match2[5] || match2[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        if (Math.min(lLength, rLength) % 2) {
          const text2 = src.slice(1, lLength + match2.index + rLength);
          return {
            type: "em",
            raw: src.slice(0, lLength + match2.index + rLength + 1),
            text: text2,
            tokens: this.lexer.inlineTokens(text2, [])
          };
        }
        const text = src.slice(2, lLength + match2.index + rLength - 1);
        return {
          type: "strong",
          raw: src.slice(0, lLength + match2.index + rLength + 1),
          text,
          tokens: this.lexer.inlineTokens(text, [])
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape2(text, true);
      return {
        type: "codespan",
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2], [])
      };
    }
  }
  autolink(src, mangle2) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href;
      if (cap[2] === "@") {
        text = escape2(this.options.mangle ? mangle2(cap[1]) : cap[1]);
        href = "mailto:" + text;
      } else {
        text = escape2(cap[1]);
        href = text;
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src, mangle2) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href;
      if (cap[2] === "@") {
        text = escape2(this.options.mangle ? mangle2(cap[0]) : cap[0]);
        href = "mailto:" + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape2(cap[0]);
        if (cap[1] === "www.") {
          href = "http://" + text;
        } else {
          href = text;
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src, smartypants2) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]) : cap[0];
      } else {
        text = escape2(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text
      };
    }
  }
};
var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = merge({}, block);
block.gfm = merge({}, block.normal, {
  table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
});
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = merge({}, block.normal, {
  html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
});
var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline.escapedEmSt = /\\\*|\\_/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = merge({}, inline);
inline.pedantic = merge({}, inline.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
});
inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
});
function smartypants(text) {
  return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
}
function mangle(text) {
  let out = "", i, ch;
  const l = text.length;
  for (i = 0; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = "x" + ch.toString(16);
    }
    out += "&#" + ch + ";";
  }
  return out;
}
var Lexer = class {
  constructor(options2) {
    this.tokens = [];
    this.tokens.links = Object.create(null);
    this.options = options2 || defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  static get rules() {
    return {
      block,
      inline
    };
  }
  static lex(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.lex(src);
  }
  static lexInline(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ");
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/^ +$/gm, "");
    }
    let token, lastToken, cutSrc, lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) {
          tokens[tokens.length - 1].raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens) {
    this.inlineQueue.push({ src, tokens });
  }
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match2;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match2 = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match2[0].slice(match2[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match2 = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match2 = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var Renderer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  code(code, infostring, escaped) {
    const lang = (infostring || "").match(/\S*/)[0];
    if (this.options.highlight) {
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="' + this.options.langPrefix + escape2(lang, true) + '">' + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
  }
  blockquote(quote) {
    return "<blockquote>\n" + quote + "</blockquote>\n";
  }
  html(html) {
    return html;
  }
  heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      return "<h" + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + "</h" + level + ">\n";
    }
    return "<h" + level + ">" + text + "</h" + level + ">\n";
  }
  hr() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  }
  list(body, ordered, start) {
    const type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
  }
  listitem(text) {
    return "<li>" + text + "</li>\n";
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
  }
  paragraph(text) {
    return "<p>" + text + "</p>\n";
  }
  table(header, body) {
    if (body)
      body = "<tbody>" + body + "</tbody>";
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow(content) {
    return "<tr>\n" + content + "</tr>\n";
  }
  tablecell(content, flags) {
    const type = flags.header ? "th" : "td";
    const tag = flags.align ? "<" + type + ' align="' + flags.align + '">' : "<" + type + ">";
    return tag + content + "</" + type + ">\n";
  }
  strong(text) {
    return "<strong>" + text + "</strong>";
  }
  em(text) {
    return "<em>" + text + "</em>";
  }
  codespan(text) {
    return "<code>" + text + "</code>";
  }
  br() {
    return this.options.xhtml ? "<br/>" : "<br>";
  }
  del(text) {
    return "<del>" + text + "</del>";
  }
  link(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<a href="' + escape2(href) + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text + "</a>";
    return out;
  }
  image(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<img src="' + href + '" alt="' + text + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += this.options.xhtml ? "/>" : ">";
    return out;
  }
  text(text) {
    return text;
  }
};
var TextRenderer = class {
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href, title, text) {
    return "" + text;
  }
  image(href, title, text) {
    return "" + text;
  }
  br() {
    return "";
  }
};
var Slugger = class {
  constructor() {
    this.seen = {};
  }
  serialize(value) {
    return value.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
  }
  getNextSafeSlug(originalSlug, isDryRun) {
    let slug = originalSlug;
    let occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];
      do {
        occurenceAccumulator++;
        slug = originalSlug + "-" + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }
    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }
    return slug;
  }
  slug(value, options2 = {}) {
    const slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options2.dryrun);
  }
};
var Parser = class {
  constructor(options2) {
    this.options = options2 || defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
  }
  static parse(tokens, options2) {
    const parser2 = new Parser(options2);
    return parser2.parse(tokens);
  }
  static parseInline(tokens, options2) {
    const parser2 = new Parser(options2);
    return parser2.parseInline(tokens);
  }
  parse(tokens, top = true) {
    let out = "", i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
          continue;
        }
        case "code": {
          out += this.renderer.code(token.text, token.lang, token.escaped);
          continue;
        }
        case "table": {
          header = "";
          cell = "";
          l2 = token.header.length;
          for (j = 0; j < l2; j++) {
            cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), { header: true, align: token.align[j] });
          }
          header += this.renderer.tablerow(cell);
          body = "";
          l2 = token.rows.length;
          for (j = 0; j < l2; j++) {
            row = token.rows[j];
            cell = "";
            l3 = row.length;
            for (k = 0; k < l3; k++) {
              cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: token.align[k] });
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          body = this.parse(token.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          ordered = token.ordered;
          start = token.start;
          loose = token.loose;
          l2 = token.items.length;
          body = "";
          for (j = 0; j < l2; j++) {
            item = token.items[j];
            checked = item.checked;
            task = item.task;
            itemBody = "";
            if (item.task) {
              checkbox = this.renderer.checkbox(checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox
                  });
                }
              } else {
                itemBody += checkbox;
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          out += this.renderer.html(token.text);
          continue;
        }
        case "paragraph": {
          out += this.renderer.paragraph(this.parseInline(token.tokens));
          continue;
        }
        case "text": {
          body = token.tokens ? this.parseInline(token.tokens) : token.text;
          while (i + 1 < l && tokens[i + 1].type === "text") {
            token = tokens[++i];
            body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    let out = "", i, token, ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          out += renderer.text(token.text);
          break;
        }
        case "html": {
          out += renderer.html(token.text);
          break;
        }
        case "link": {
          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
          break;
        }
        case "image": {
          out += renderer.image(token.href, token.title, token.text);
          break;
        }
        case "strong": {
          out += renderer.strong(this.parseInline(token.tokens, renderer));
          break;
        }
        case "em": {
          out += renderer.em(this.parseInline(token.tokens, renderer));
          break;
        }
        case "codespan": {
          out += renderer.codespan(token.text);
          break;
        }
        case "br": {
          out += renderer.br();
          break;
        }
        case "del": {
          out += renderer.del(this.parseInline(token.tokens, renderer));
          break;
        }
        case "text": {
          out += renderer.text(token.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
function marked(src, opt, callback) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  if (typeof opt === "function") {
    callback = opt;
    opt = null;
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  if (callback) {
    const highlight = opt.highlight;
    let tokens;
    try {
      tokens = Lexer.lex(src, opt);
    } catch (e) {
      return callback(e);
    }
    const done = function(err) {
      let out;
      if (!err) {
        try {
          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }
          out = Parser.parse(tokens, opt);
        } catch (e) {
          err = e;
        }
      }
      opt.highlight = highlight;
      return err ? callback(err) : callback(null, out);
    };
    if (!highlight || highlight.length < 3) {
      return done();
    }
    delete opt.highlight;
    if (!tokens.length)
      return done();
    let pending = 0;
    marked.walkTokens(tokens, function(token) {
      if (token.type === "code") {
        pending++;
        setTimeout(() => {
          highlight(token.text, token.lang, function(err, code) {
            if (err) {
              return done(err);
            }
            if (code != null && code !== token.text) {
              token.text = code;
              token.escaped = true;
            }
            pending--;
            if (pending === 0) {
              done();
            }
          });
        }, 0);
      }
    });
    if (pending === 0) {
      done();
    }
    return;
  }
  try {
    const tokens = Lexer.lex(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parse(tokens, opt);
  } catch (e) {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape2(e.message + "", true) + "</pre>";
    }
    throw e;
  }
}
marked.options = marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = defaults;
marked.use = function(...args) {
  const opts = merge({}, ...args);
  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
  let hasExtensions;
  args.forEach((pack) => {
    if (pack.extensions) {
      hasExtensions = true;
      pack.extensions.forEach((ext) => {
        if (!ext.name) {
          throw new Error("extension name required");
        }
        if (ext.renderer) {
          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
          if (prevRenderer) {
            extensions.renderers[ext.name] = function(...args2) {
              let ret = ext.renderer.apply(this, args2);
              if (ret === false) {
                ret = prevRenderer.apply(this, args2);
              }
              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }
        if (ext.tokenizer) {
          if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
            throw new Error("extension level must be 'block' or 'inline'");
          }
          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }
          if (ext.start) {
            if (ext.level === "block") {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === "inline") {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }
        if (ext.childTokens) {
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
    }
    if (pack.renderer) {
      const renderer = marked.defaults.renderer || new Renderer();
      for (const prop in pack.renderer) {
        const prevRenderer = renderer[prop];
        renderer[prop] = (...args2) => {
          let ret = pack.renderer[prop].apply(renderer, args2);
          if (ret === false) {
            ret = prevRenderer.apply(renderer, args2);
          }
          return ret;
        };
      }
      opts.renderer = renderer;
    }
    if (pack.tokenizer) {
      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
      for (const prop in pack.tokenizer) {
        const prevTokenizer = tokenizer[prop];
        tokenizer[prop] = (...args2) => {
          let ret = pack.tokenizer[prop].apply(tokenizer, args2);
          if (ret === false) {
            ret = prevTokenizer.apply(tokenizer, args2);
          }
          return ret;
        };
      }
      opts.tokenizer = tokenizer;
    }
    if (pack.walkTokens) {
      const walkTokens2 = marked.defaults.walkTokens;
      opts.walkTokens = function(token) {
        pack.walkTokens.call(this, token);
        if (walkTokens2) {
          walkTokens2.call(this, token);
        }
      };
    }
    if (hasExtensions) {
      opts.extensions = extensions;
    }
    marked.setOptions(opts);
  });
};
marked.walkTokens = function(tokens, callback) {
  for (const token of tokens) {
    callback.call(marked, token);
    switch (token.type) {
      case "table": {
        for (const cell of token.header) {
          marked.walkTokens(cell.tokens, callback);
        }
        for (const row of token.rows) {
          for (const cell of row) {
            marked.walkTokens(cell.tokens, callback);
          }
        }
        break;
      }
      case "list": {
        marked.walkTokens(token.items, callback);
        break;
      }
      default: {
        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
            marked.walkTokens(token[childTokens], callback);
          });
        } else if (token.tokens) {
          marked.walkTokens(token.tokens, callback);
        }
      }
    }
  }
};
marked.parseInline = function(src, opt) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked.parseInline(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  try {
    const tokens = Lexer.lexInline(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parseInline(tokens, opt);
  } catch (e) {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape2(e.message + "", true) + "</pre>";
    }
    throw e;
  }
};
marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parser = Parser.parse;
var lexer = Lexer.lex;

// src/xmlrpc/client.ts
var import_obsidian3 = __toModule(require("obsidian"));
var import_xmlbuilder2 = __toModule(require_xmlbuilder2_min());

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var arrayMap_default = arrayMap;

// node_modules/lodash-es/isArray.js
var isArray = Array.isArray;
var isArray_default = isArray;

// node_modules/lodash-es/_baseToString.js
var INFINITY = 1 / 0;
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_default(value)) {
    return arrayMap_default(value, baseToString) + "";
  }
  if (isSymbol_default(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
var baseToString_default = baseToString;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/toFinite.js
var INFINITY2 = 1 / 0;
var MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_default(value);
  if (value === INFINITY2 || value === -INFINITY2) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_default = toFinite;

// node_modules/lodash-es/toInteger.js
function toInteger(value) {
  var result = toFinite_default(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_default = toInteger;

// node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;

// node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto2 = Function.prototype;
var objectProto3 = Object.prototype;
var funcToString2 = funcProto2.toString;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value)) {
    return false;
  }
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/lodash-es/_nodeUtil.js
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var freeProcess = moduleExports && freeGlobal_default.process;
var nodeUtil = function() {
  try {
    var types = freeModule && freeModule.require && freeModule.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeUtil_default = nodeUtil;

// node_modules/lodash-es/_isKey.js
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
var reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_default(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var isKey_default = isKey;

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var hashDelete_default = hashDelete;

// node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto4 = Object.prototype;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty3.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/lodash-es/_hashHas.js
var objectProto5 = Object.prototype;
var hasOwnProperty4 = objectProto5.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
  return this;
}
var hashSet_default = hashSet;

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_default(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var listCacheSet_default = listCacheSet;

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/lodash-es/memoize.js
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
memoize.Cache = MapCache_default;
var memoize_default = memoize;

// node_modules/lodash-es/_memoizeCapped.js
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_default(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var memoizeCapped_default = memoizeCapped;

// node_modules/lodash-es/_stringToPath.js
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match2, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
  });
  return result;
});
var stringToPath_default = stringToPath;

// node_modules/lodash-es/toString.js
function toString(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString;

// node_modules/lodash-es/_castPath.js
function castPath(value, object) {
  if (isArray_default(value)) {
    return value;
  }
  return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
}
var castPath_default = castPath;

// node_modules/lodash-es/_toKey.js
var INFINITY3 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_default(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
}
var toKey_default = toKey;

// node_modules/lodash-es/_baseGet.js
function baseGet(object, path) {
  path = castPath_default(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey_default(path[index++])];
  }
  return index && index == length ? object : void 0;
}
var baseGet_default = baseGet;

// node_modules/lodash-es/get.js
function get(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet_default(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_default = get;

// node_modules/lodash-es/_baseIsDate.js
var dateTag = "[object Date]";
function baseIsDate(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == dateTag;
}
var baseIsDate_default = baseIsDate;

// node_modules/lodash-es/isDate.js
var nodeIsDate = nodeUtil_default && nodeUtil_default.isDate;
var isDate = nodeIsDate ? baseUnary_default(nodeIsDate) : baseIsDate_default;
var isDate_default = isDate;

// node_modules/lodash-es/isInteger.js
function isInteger(value) {
  return typeof value == "number" && value == toInteger_default(value);
}
var isInteger_default = isInteger;

// node_modules/lodash-es/isNumber.js
var numberTag = "[object Number]";
function isNumber(value) {
  return typeof value == "number" || isObjectLike_default(value) && baseGetTag_default(value) == numberTag;
}
var isNumber_default = isNumber;

// node_modules/lodash-es/isSafeInteger.js
var MAX_SAFE_INTEGER = 9007199254740991;
function isSafeInteger(value) {
  return isInteger_default(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
}
var isSafeInteger_default = isSafeInteger;

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger2(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger2(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/isDate/index.js
function isDate2(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate2(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function(token, count, options2) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options2 !== null && options2 !== void 0 && options2.addSuffix) {
    if (options2.comparison && options2.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options2.width ? String(options2.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, dirtyOptions) {
    var options2 = dirtyOptions || {};
    var context = options2.context ? String(options2.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options2.width ? String(options2.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options2.width ? String(options2.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options2.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger2(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options2) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options2).getTime() - startOfUTCWeekYear(date, options2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  y: function(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  G: function(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  y: function(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  Y: function(date, token, localize2, options2) {
    var signedWeekYear = getUTCWeekYear(date, options2);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function(date, token, localize2, options2) {
    var week = getUTCWeek(date, options2);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  D: function(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  H: function(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  K: function(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  s: function(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  S: function(date, token) {
    return lightFormatters_default.S(date, token);
  },
  X: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
function dateLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
}
function timeLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
}
function dateTimeLongFormatter(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
}
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale || en_US_default;
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong, formatterOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!options2.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      if (!options2.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  dirtyObject = dirtyObject || {};
  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }
  return target;
}

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger2(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger2(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger2(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options2) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger2(dirtyWeek);
  var diff = getUTCWeek(date, options2) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var MILLISECONDS_IN_HOUR = 36e5;
var MILLISECONDS_IN_MINUTE = 6e4;
var MILLISECONDS_IN_SECOND = 1e3;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  date: /^(3[0-1]|[0-2]?\d)/,
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  week: /^(5[0-3]|[0-4]?\d)/,
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  hour11h: /^(1[0-1]|0?\d)/,
  hour12h: /^(1[0-2]|0?\d)/,
  minute: /^[0-5]?\d/,
  second: /^[0-5]?\d/,
  singleDigit: /^\d/,
  twoDigits: /^\d{1,2}/,
  threeDigits: /^\d{1,3}/,
  fourDigits: /^\d{1,4}/,
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  twoDigitsSigned: /^-?\d{1,2}/,
  threeDigitsSigned: /^-?\d{1,3}/,
  fourDigitsSigned: /^-?\d{1,4}/
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}
function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), string, valueCallback);
  }
}
function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), string, valueCallback);
  }
}
function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var parsers = {
  G: {
    priority: 140,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(string, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(string, {
            width: "wide"
          }) || match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
      }
    },
    set: function(date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["R", "u", "t", "T"]
  },
  y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return parseNDigits(4, string, valueCallback);
        case "yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]
  },
  Y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return parseNDigits(4, string, valueCallback);
        case "Yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, options2) {
      var currentYear = getUTCWeekYear(date, options2);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options2.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options2);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options2.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options2);
    },
    incompatibleTokens: ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  R: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "R") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  u: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "u") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]
  },
  Q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, string);
        case "Qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, string);
        case "qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  M: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "MM":
          return parseNDigits(2, string, valueCallback);
        case "Mo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "MMM":
          return match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(string, {
            width: "wide",
            context: "formatting"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  L: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "LL":
          return parseNDigits(2, string, valueCallback);
        case "Lo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "LLL":
          return match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(string, {
            width: "wide",
            context: "standalone"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  w: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, string);
        case "wo":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options2) {
      return startOfUTCWeek(setUTCWeek(date, value, options2), options2);
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  I: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, string);
        case "Io":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options2) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options2), options2);
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  d: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, string);
        case "do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  D: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, string);
        case "Do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]
  },
  E: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["D", "i", "e", "c", "t", "T"]
  },
  e: {
    priority: 90,
    parse: function(string, token, match2, options2) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return parseNDigits(token.length, string, valueCallback);
        case "eo":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "eee":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]
  },
  c: {
    priority: 90,
    parse: function(string, token, match2, options2) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return parseNDigits(token.length, string, valueCallback);
        case "co":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "ccc":
          return match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(string, {
            width: "wide",
            context: "standalone"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]
  },
  i: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, string);
        case "io":
          return match2.ordinalNumber(string, {
            unit: "day"
          });
        case "iii":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiii":
          return match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiiii":
          return match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiii":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCISODay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]
  },
  a: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["b", "B", "H", "k", "t", "T"]
  },
  b: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "B", "H", "k", "t", "T"]
  },
  B: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "t", "T"]
  },
  h: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, string);
        case "ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["H", "K", "k", "t", "T"]
  },
  H: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, string);
        case "Ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "K", "k", "t", "T"]
  },
  K: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, string);
        case "Ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["h", "H", "k", "t", "T"]
  },
  k: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, string);
        case "ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function(date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "H", "K", "t", "T"]
  },
  m: {
    priority: 60,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, string);
        case "mo":
          return match2.ordinalNumber(string, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  s: {
    priority: 50,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, string);
        case "so":
          return match2.ordinalNumber(string, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  S: {
    priority: 30,
    parse: function(string, token, _match, _options) {
      var valueCallback = function(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return parseNDigits(token.length, string, valueCallback);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  X: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "x"]
  },
  x: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "X"]
  },
  t: {
    priority: 40,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  },
  T: {
    priority: 20,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  }
};
var parsers_default = parsers;

// node_modules/date-fns/esm/parse/index.js
var TIMEZONE_UNIT_PRIORITY = 10;
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale || en_US_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    subPriority: -1,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter2 = substring[0];
    if (firstCharacter2 === "p" || firstCharacter2 === "P") {
      var longFormatter = longFormatters_default[firstCharacter2];
      return longFormatter(substring, locale2.formatLong, subFnOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (!options2.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    if (!options2.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    var firstCharacter = token[0];
    var parser2 = parsers_default[firstCharacter];
    if (parser2) {
      var incompatibleTokens = parser2.incompatibleTokens;
      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;
        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;
          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }
        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser2.incompatibleTokens === "*" && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }
      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser2.parse(dateString, token, locale2.match, subFnOptions);
      if (!parseResult) {
        return new Date(NaN);
      }
      setters.push({
        priority: parser2.priority,
        subPriority: parser2.subPriority || 0,
        set: parser2.set,
        validate: parser2.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
        throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
      }
      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString2(token);
      }
      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a, b) {
    return b - a;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date)) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];
    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }
    var result = setter.set(utcDate, flags, setter.value, subFnOptions);
    if (result[0]) {
      utcDate = result[0];
      assign(flags, result[1]);
    } else {
      utcDate = result;
    }
  }
  return utcDate;
}
function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }
  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// src/xmlrpc/client.ts
var XmlRpcClient = class {
  constructor(options2) {
    this.options = options2;
    console.log(options2);
  }
  methodCall(method, params) {
    console.log(`Endpoint: ${this.options.url.href}xmlrpc.php`);
    const xml = this.objectToXml(method, params).end({ prettyPrint: true });
    console.log(xml);
    return (0, import_obsidian3.request)({
      url: `${this.options.url.href}xmlrpc.php`,
      method: "POST",
      headers: {
        "Content-Type": "text/xml",
        "User-Agent": "obsidian.md"
      },
      body: xml
    }).then((res) => {
      console.log(res);
      return this.responseToObject(res);
    });
  }
  objectToXml(method, ...obj) {
    const xml = (0, import_xmlbuilder2.create)({ version: "1.0" }).ele("methodCall").ele("methodName").txt(method).up().ele("params");
    obj.forEach((it) => this.createParam(it, xml));
    return xml;
  }
  createParam(obj, xml) {
    const param = xml.ele("param");
    this.createValue(obj, param);
  }
  createValue(data, param) {
    const value = param.ele("value");
    if (isSafeInteger_default(data)) {
      value.ele("i4").txt(data.toString());
    } else if (isNumber_default(data)) {
      value.ele("double").txt(data.toString());
    } else if (isBoolean(data)) {
      value.ele("boolean").txt(data ? "1" : "0");
    } else if (isDate_default(data)) {
      value.ele("dateTime.iso8601").txt(format(data, "yyyyMMddTHH:mm:ss"));
    } else if (isArray_default(data)) {
      const array = value.ele("array").ele("data");
      data.forEach((it) => this.createValue(it, array));
    } else if (isObject_default(data)) {
      const struct = value.ele("struct");
      for (const [prop, value2] of Object.entries(data)) {
        const member = struct.ele("member").ele("name").txt(prop).up();
        this.createValue(value2, member);
      }
    } else {
      value.ele("string").txt(data.toString());
    }
  }
  responseToObject(response) {
    const res = (0, import_xmlbuilder2.create)(response).end({ format: "object" });
    if (get_default(res, "methodResponse.params")) {
      return this.fromValue(get_default(res, "methodResponse.params.param.value"));
    } else if (get_default(res, "methodResponse.fault")) {
      return this.fromValue(get_default(res, "methodResponse.fault.value"));
    }
    throw new Error("Invalid XML-RPC response.");
  }
  fromValue(value) {
    if (get_default(value, "i4") || get_default(value, "int")) {
      return get_default(value, "i4") || get_default(value, "int");
    } else if (get_default(value, "double")) {
      return get_default(value, "double");
    } else if (get_default(value, "boolean")) {
      return get_default(value, "boolean") === "1";
    } else if (get_default(value, "dateTime.iso8601")) {
      return parse(get_default(value, "dateTime.iso8601"), "yyyyMMddTHH:mm:ss", new Date());
    } else if (get_default(value, "array")) {
      const array = [];
      const data = get_default(value, "array.data.value");
      data.forEach((it) => {
        array.push(this.fromValue(it));
      });
      return array;
    } else if (get_default(value, "struct")) {
      const struct = {};
      const members = get_default(value, "struct.member");
      if (isArray_default(members)) {
        members.forEach((member) => {
          struct[get_default(member, "name")] = this.fromValue(get_default(member, "value"));
        });
      } else {
        struct[get_default(members, "name")] = this.fromValue(get_default(members, "value"));
      }
      return struct;
    } else {
      return get_default(value, "string");
    }
  }
};

// src/abstract-wp-client.ts
var import_obsidian5 = __toModule(require("obsidian"));

// src/wp-login-modal.ts
var import_obsidian4 = __toModule(require("obsidian"));
var WpLoginModal = class extends import_obsidian4.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "WordPress Login" });
    let password = "";
    new import_obsidian4.Setting(contentEl).setName("User Name").setDesc(`User name for ${this.plugin.settings.endpoint}`).addText((text) => {
      var _a;
      return text.setValue((_a = this.plugin.settings.userName) != null ? _a : "").onChange((value) => __async(this, null, function* () {
        if (this.plugin.settings.saveUserName) {
          this.plugin.settings.userName = value;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian4.Setting(contentEl).setName("Password").addText((text) => text.onChange((value) => __async(this, null, function* () {
      password = value;
    })));
    new import_obsidian4.Setting(contentEl).addButton((button) => button.setButtonText("Publish").setClass("mod-cta").onClick(() => {
      this.onSubmit(this.plugin.settings.userName, password, this);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/abstract-wp-client.ts
var AbstractWordPressClient = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  newPost() {
    return new Promise((resolve, reject) => {
      const { workspace } = this.app;
      const activeView = workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (activeView) {
        new WpLoginModal(this.app, this.plugin, (userName, password, modal) => {
          this.app.vault.read(activeView.file).then((content) => {
            const title = activeView.file.basename;
            return this.publish(title, content, {
              userName,
              password
            });
          }).then((result) => {
            if (result.code === WordPressClientReturnCode.Error) {
              const data = result.data;
              new import_obsidian5.Notice(`Post published failed!
${data.code}: ${data.message}`);
            } else {
              new import_obsidian5.Notice("Post published successfully!");
              modal.close();
            }
            return result;
          }).catch((error) => {
            console.log("Reading file content for 'newPost' failed: ", error);
            new import_obsidian5.Notice(error.toString());
          });
        }).open();
      } else {
        const error = "There is no editor found. Nothing will be published.";
        console.warn(error);
        reject(new Error(error));
      }
    });
  }
};

// src/wp-xml-rpc-client.ts
var WpXmlRpcClient = class extends AbstractWordPressClient {
  constructor(app, plugin) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
    this.client = new XmlRpcClient({
      url: new URL(plugin.settings.endpoint)
    });
  }
  publish(title, content, wp) {
    var _a;
    return this.client.methodCall("wp.newPost", [
      0,
      wp.userName,
      wp.password,
      {
        post_type: "post",
        post_status: "draft",
        post_title: title != null ? title : "A post from Obsidian!",
        post_content: (_a = marked.parse(content)) != null ? _a : ""
      }
    ]).then((response) => {
      if (response.faultCode && response.faultString) {
        return {
          code: WordPressClientReturnCode.Error,
          data: {
            code: response.faultCode,
            message: response.faultString
          }
        };
      } else {
        return {
          code: WordPressClientReturnCode.OK,
          data: response
        };
      }
    });
  }
};

// src/wp-rest-miniOrange-client.ts
var WpRestMiniOrangeClient = class extends AbstractWordPressClient {
  constructor(app, plugin) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
  }
  publish(title, content, wp) {
    return Promise.resolve(void 0);
  }
};

// src/wp-client.ts
var WordPressClientReturnCode;
(function(WordPressClientReturnCode2) {
  WordPressClientReturnCode2[WordPressClientReturnCode2["OK"] = 0] = "OK";
  WordPressClientReturnCode2[WordPressClientReturnCode2["Error"] = 1] = "Error";
})(WordPressClientReturnCode || (WordPressClientReturnCode = {}));
function createWordPressClient(app, plugin, type, options2) {
  switch (type) {
    case ApiType.XML_RPC:
      return new WpXmlRpcClient(app, plugin);
    case ApiType.RestAPI:
      switch (options2 == null ? void 0 : options2.restPlugin) {
        case RestApiPlugin.Authentication_miniOrange:
          return new WpRestMiniOrangeClient(app, plugin);
      }
      return null;
    default:
      return null;
  }
}

// src/wp-publish-view.ts
var WordPressPublishViewType = "wp-publish-options";
var WordPressPublishView = class extends import_obsidian6.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getDisplayText() {
    return "WordPress Publish";
  }
  getViewType() {
    return WordPressPublishViewType;
  }
  getIcon() {
    return "wp-logo";
  }
  load() {
    super.load();
    this.draw();
  }
  draw() {
    const actionButtonsControlDiv = this.contentEl.createEl("div");
    new import_obsidian6.ButtonComponent(actionButtonsControlDiv).setButtonText("Publish").setClass("mod-cta").onClick(() => {
      const client = createWordPressClient(this.app, this.plugin, ApiType.XML_RPC);
      if (client) {
        client.newPost().then();
      }
    });
  }
};

// src/main.ts
var WordpressPlugin = class extends import_obsidian7.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading obsidian-wordpress plugin");
      yield this.loadSettings();
      this.registerView(WordPressPublishViewType, (leaf) => new WordPressPublishView(leaf, this));
      addIcons();
      this.updateRibbonIcon();
      this.addCommand({
        id: "publish",
        name: "Publish current document",
        editorCallback: (editor, view) => {
          const client = createWordPressClient(this.app, this, ApiType.XML_RPC);
          if (client) {
            client.newPost().then();
          }
        }
      });
      this.addSettingTab(new WordpressSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateRibbonIcon() {
    const ribbonIconTitle = "WordPress Publish";
    if (this.settings.showRibbonIcon) {
      this.addRibbonIcon("wp-logo", ribbonIconTitle, () => {
        this.toggleWordPressPublishView();
      });
    } else {
      const leftRibbon = this.app.workspace.leftRibbon;
      const children = leftRibbon.ribbonActionsEl.children;
      for (let i = 0; i < children.length; i++) {
        if (children.item(i).getAttribute("aria-label") === ribbonIconTitle) {
          children.item(i).style.display = "none";
        }
      }
    }
  }
  toggleWordPressPublishView() {
    return __async(this, null, function* () {
      const existing = this.app.workspace.getLeavesOfType(WordPressPublishViewType);
      if (existing.length) {
        this.app.workspace.revealLeaf(existing[0]);
        return;
      }
      yield this.app.workspace.getRightLeaf(false).setViewState({
        type: WordPressPublishViewType,
        active: true
      });
      this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(WordPressPublishViewType)[0]);
    });
  }
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/*! https://mths.be/punycode v1.4.1 by @mathias */
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIyL2xpYi94bWxidWlsZGVyMi5taW4uanMiLCAic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy9pY29ucy50cyIsICJzcmMvd3AtcHVibGlzaC12aWV3LnRzIiwgIm5vZGVfbW9kdWxlcy9tYXJrZWQvbGliL21hcmtlZC5lc20uanMiLCAic3JjL3htbHJwYy9jbGllbnQudHMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzU3ltYm9sLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVG9TdHJpbmcuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdHJpbW1lZEVuZEluZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUcmltLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3QuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b051bWJlci5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvRmluaXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9JbnRlZ2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3JlSnNEYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvU291cmNlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc05hdGl2ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRWYWx1ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lcS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNLZXkuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlQ3JlYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0hhc2guanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlQ2xlYXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzb2NJbmRleE9mLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZURlbGV0ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVHZXQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlSGFzLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZVNldC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19MaXN0Q2FjaGUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlQ2xlYXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNLZXlhYmxlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE1hcERhdGEuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVEZWxldGUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVHZXQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVIYXMuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVTZXQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwQ2FjaGUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9tZW1vaXplLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21lbW9pemVDYXBwZWQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RyaW5nVG9QYXRoLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9TdHJpbmcuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2FzdFBhdGguanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9LZXkuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2dldC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNEYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNEYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNJbnRlZ2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNOdW1iZXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1NhZmVJbnRlZ2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbG9kYXNoLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYXNzaWduL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zZXRVVENEYXkvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3NldFVUQ0lTT0RheS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc2V0VVRDSVNPV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc2V0VVRDV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL2luZGV4LmpzIiwgInNyYy9hYnN0cmFjdC13cC1jbGllbnQudHMiLCAic3JjL3dwLWxvZ2luLW1vZGFsLnRzIiwgInNyYy93cC14bWwtcnBjLWNsaWVudC50cyIsICJzcmMvd3AtcmVzdC1taW5pT3JhbmdlLWNsaWVudC50cyIsICJzcmMvd3AtY2xpZW50LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLnhtbGJ1aWxkZXIyPXQoKTplLnhtbGJ1aWxkZXIyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gcihuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIGk9dFtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsciksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gci5tPWUsci5jPXQsci5kPWZ1bmN0aW9uKGUsdCxuKXtyLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxyLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sci50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1yKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoci5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgaSBpbiBlKXIuZChuLGksZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxpKSk7cmV0dXJuIG59LHIubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gci5kKHQsXCJhXCIsdCksdH0sci5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxyLnA9XCJcIixyKHIucz0xODQpfShbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7Zm9yKHZhciByIGluIGUpdC5oYXNPd25Qcm9wZXJ0eShyKXx8KHRbcl09ZVtyXSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbihyKDI0MCkpLG4ocigyNTEpKSxuKHIoMTc1KSksbihyKDEwNykpLG4ocigyOSkpLG4ocig3MykpLG4ocigxMDYpKSxuKHIoMzApKSxuKHIoMjUyKSksbihyKDUyKSksbihyKDk3KSksbihyKDI1MykpLG4ocigzNykpLG4ocig1MSkpLG4ocigxNzMpKSxuKHIoMTc2KSksbihyKDE3MikpLG4ocigxMDgpKSxuKHIoMjU0KSksbihyKDI1NSkpLG4ocigyNTYpKSxuKHIoNzIpKSxuKHIoMTc3KSksbihyKDEwNSkpLG4ocigxNykpLG4ocigyNTcpKSxuKHIoMTIpKSxuKHIoMTc0KSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDIxMik7dC5GaXhlZFNpemVTZXQ9aS5GaXhlZFNpemVTZXQ7dmFyIG89cigyMTMpO3QuT2JqZWN0Q2FjaGU9by5PYmplY3RDYWNoZTt2YXIgYT1yKDIxNCk7dC5Db21wYXJlQ2FjaGU9YS5Db21wYXJlQ2FjaGU7dmFyIHM9cigyMTUpO3QuTGF6eT1zLkxhenk7dmFyIHU9cigyMTYpO2Z1bmN0aW9uIGwoZSx0LHIpe2lmKG0oZSkpZS5mb3JFYWNoKChmdW5jdGlvbihlLG4pe3JldHVybiB0LmNhbGwocixuLGUpfSkpO2Vsc2UgZm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmdC5jYWxsKHIsbixlW25dKX1mdW5jdGlvbiBjKGUpe3ZhciB0LHI7aWYoaChlKSlyZXR1cm4gZTtpZihmKGUpKXt2YXIgaT1bXTt0cnl7Zm9yKHZhciBvPW4oZSksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe3ZhciBzPWEudmFsdWU7aS5wdXNoKGMocykpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIGl9aWYocChlKSl7aT17fTtmb3IodmFyIHUgaW4gZSlpZihlLmhhc093blByb3BlcnR5KHUpKXt2YXIgbD1lW3VdO2lbdV09YyhsKX1yZXR1cm4gaX1yZXR1cm4gZX1mdW5jdGlvbiBoKGUpe3JldHVybiEhZSYmXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIHAoZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuISFlJiYoXCJmdW5jdGlvblwiPT09dHx8XCJvYmplY3RcIj09PXQpfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl9ZnVuY3Rpb24gZChlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBtKGUpe3JldHVybiBlIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHkoZSl7aWYocChlKSl7dmFyIHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpLHI9dC5jb25zdHJ1Y3RvcjtyZXR1cm4gdCYmciYmXCJmdW5jdGlvblwiPT10eXBlb2YgciYmciBpbnN0YW5jZW9mIHImJkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHIpPT09RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoT2JqZWN0KX1yZXR1cm4hMX10LlN0cmluZ1dhbGtlcj11LlN0cmluZ1dhbGtlcix0LmFwcGx5TWl4aW49ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9W10sbj0yO248YXJndW1lbnRzLmxlbmd0aDtuKyspcltuLTJdPWFyZ3VtZW50c1tuXTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0LnByb3RvdHlwZSkuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoXCJjb25zdHJ1Y3RvclwiIT09bil7aWYoLTEhPT1yLmluZGV4T2Yobikpe3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZS5wcm90b3R5cGUsbik7aSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX1wiK24saSl9dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LnByb3RvdHlwZSxuKTtvJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsbixvKX19KSl9LHQuYXBwbHlEZWZhdWx0cz1mdW5jdGlvbiBlKHQscixuKXt2b2lkIDA9PT1uJiYobj0hMSk7dmFyIGk9Yyh0fHx7fSk7cmV0dXJuIGwociwoZnVuY3Rpb24odCxyKXt5KHIpP2lbdF09ZShpW3RdLHIsbik6KG58fHZvaWQgMD09PWlbdF0pJiYoaVt0XT1yKX0pKSxpfSx0LmZvckVhY2hBcnJheT1mdW5jdGlvbihlLHQscil7ZS5mb3JFYWNoKHQscil9LHQuZm9yRWFjaE9iamVjdD1sLHQuYXJyYXlMZW5ndGg9ZnVuY3Rpb24oZSl7cmV0dXJuIGQoZSk/ZS5zaXplOmUubGVuZ3RofSx0Lm9iamVjdExlbmd0aD1mdW5jdGlvbihlKXtyZXR1cm4gbShlKT9lLnNpemU6T2JqZWN0LmtleXMoZSkubGVuZ3RofSx0LmdldE9iamVjdFZhbHVlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG0oZSk/ZS5nZXQodCk6ZVt0XX0sdC5yZW1vdmVPYmplY3RWYWx1ZT1mdW5jdGlvbihlLHQpe20oZSk/ZS5kZWxldGUodCk6ZGVsZXRlIGVbdF19LHQuY2xvbmU9Yyx0LmlzQm9vbGVhbj1mdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGV9LHQuaXNOdW1iZXI9ZnVuY3Rpb24oZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGV9LHQuaXNTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LHQuaXNGdW5jdGlvbj1oLHQuaXNPYmplY3Q9cCx0LmlzQXJyYXk9Zix0LmlzU2V0PWQsdC5pc01hcD1tLHQuaXNFbXB0eT1mdW5jdGlvbihlKXtpZihmKGUpKXJldHVybiFlLmxlbmd0aDtpZihkKGUpKXJldHVybiFlLnNpemU7aWYobShlKSlyZXR1cm4hZS5zaXplO2lmKHAoZSkpe2Zvcih2YXIgdCBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodCkpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuITF9LHQuaXNQbGFpbk9iamVjdD15LHQuaXNJdGVyYWJsZT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZVtTeW1ib2wuaXRlcmF0b3JdfSx0LmdldFZhbHVlPWZ1bmN0aW9uKGUpe3JldHVybiBoKGUudmFsdWVPZik/ZS52YWx1ZU9mKCk6ZX0sdC51dGY4RW5jb2RlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgVWludDhBcnJheSg0KmUubGVuZ3RoKSxyPTAsbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lLmNoYXJDb2RlQXQobik7aWYoaTwxMjgpdFtyKytdPWk7ZWxzZXtpZihpPDIwNDgpdFtyKytdPWk+PjZ8MTkyO2Vsc2V7aWYoaT41NTI5NSYmaTw1NjMyMCl7aWYoKytuPj1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbmNvbXBsZXRlIHN1cnJvZ2F0ZSBwYWlyLlwiKTt2YXIgbz1lLmNoYXJDb2RlQXQobik7aWYobzw1NjMyMHx8bz41NzM0Myl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN1cnJvZ2F0ZSBjaGFyYWN0ZXIuXCIpO2k9NjU1MzYrKCgxMDIzJmkpPDwxMCkrKDEwMjMmbyksdFtyKytdPWk+PjE4fDI0MCx0W3IrK109aT4+MTImNjN8MTI4fWVsc2UgdFtyKytdPWk+PjEyfDIyNDt0W3IrK109aT4+NiY2M3wxMjh9dFtyKytdPTYzJml8MTI4fX1yZXR1cm4gdC5zdWJhcnJheSgwLHIpfSx0LnV0ZjhEZWNvZGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIscj0wO3I8ZS5sZW5ndGg7KXt2YXIgbj1lW3IrK107aWYobj4xMjcpaWYobj4xOTEmJm48MjI0KXtpZihyPj1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbmNvbXBsZXRlIDItYnl0ZSBzZXF1ZW5jZS5cIik7bj0oMzEmbik8PDZ8NjMmZVtyKytdfWVsc2UgaWYobj4yMjMmJm48MjQwKXtpZihyKzE+PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkluY29tcGxldGUgMy1ieXRlIHNlcXVlbmNlLlwiKTtuPSgxNSZuKTw8MTJ8KDYzJmVbcisrXSk8PDZ8NjMmZVtyKytdfWVsc2V7aWYoIShuPjIzOSYmbjwyNDgpKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gbXVsdGktYnl0ZSBzdGFydC5cIik7aWYocisyPj1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbmNvbXBsZXRlIDQtYnl0ZSBzZXF1ZW5jZS5cIik7bj0oNyZuKTw8MTh8KDYzJmVbcisrXSk8PDEyfCg2MyZlW3IrK10pPDw2fDYzJmVbcisrXX1pZihuPD02NTUzNSl0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKG4pO2Vsc2V7aWYoIShuPD0xMTE0MTExKSl0aHJvdyBuZXcgRXJyb3IoXCJDb2RlIHBvaW50IGV4Y2VlZHMgVVRGLTE2IGxpbWl0LlwiKTtuLT02NTUzNix0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKG4+PjEwfDU1Mjk2KSx0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKDEwMjMmbnw1NjMyMCl9fXJldHVybiB0fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUpe2VbZS5CZWZvcmU9MF09XCJCZWZvcmVcIixlW2UuRXF1YWw9MV09XCJFcXVhbFwiLGVbZS5BZnRlcj0yXT1cIkFmdGVyXCJ9KHQuQm91bmRhcnlQb3NpdGlvbnx8KHQuQm91bmRhcnlQb3NpdGlvbj17fSkpLGZ1bmN0aW9uKGUpe2VbZS5Ob25lPTBdPVwiTm9uZVwiLGVbZS5DYXB0dXJpbmc9MV09XCJDYXB0dXJpbmdcIixlW2UuQXRUYXJnZXQ9Ml09XCJBdFRhcmdldFwiLGVbZS5CdWJibGluZz0zXT1cIkJ1YmJsaW5nXCJ9KHQuRXZlbnRQaGFzZXx8KHQuRXZlbnRQaGFzZT17fSkpLGZ1bmN0aW9uKGUpe2VbZS5FbGVtZW50PTFdPVwiRWxlbWVudFwiLGVbZS5BdHRyaWJ1dGU9Ml09XCJBdHRyaWJ1dGVcIixlW2UuVGV4dD0zXT1cIlRleHRcIixlW2UuQ0RhdGE9NF09XCJDRGF0YVwiLGVbZS5FbnRpdHlSZWZlcmVuY2U9NV09XCJFbnRpdHlSZWZlcmVuY2VcIixlW2UuRW50aXR5PTZdPVwiRW50aXR5XCIsZVtlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbj03XT1cIlByb2Nlc3NpbmdJbnN0cnVjdGlvblwiLGVbZS5Db21tZW50PThdPVwiQ29tbWVudFwiLGVbZS5Eb2N1bWVudD05XT1cIkRvY3VtZW50XCIsZVtlLkRvY3VtZW50VHlwZT0xMF09XCJEb2N1bWVudFR5cGVcIixlW2UuRG9jdW1lbnRGcmFnbWVudD0xMV09XCJEb2N1bWVudEZyYWdtZW50XCIsZVtlLk5vdGF0aW9uPTEyXT1cIk5vdGF0aW9uXCJ9KHQuTm9kZVR5cGV8fCh0Lk5vZGVUeXBlPXt9KSksZnVuY3Rpb24oZSl7ZVtlLkRpc2Nvbm5lY3RlZD0xXT1cIkRpc2Nvbm5lY3RlZFwiLGVbZS5QcmVjZWRpbmc9Ml09XCJQcmVjZWRpbmdcIixlW2UuRm9sbG93aW5nPTRdPVwiRm9sbG93aW5nXCIsZVtlLkNvbnRhaW5zPThdPVwiQ29udGFpbnNcIixlW2UuQ29udGFpbmVkQnk9MTZdPVwiQ29udGFpbmVkQnlcIixlW2UuSW1wbGVtZW50YXRpb25TcGVjaWZpYz0zMl09XCJJbXBsZW1lbnRhdGlvblNwZWNpZmljXCJ9KHQuUG9zaXRpb258fCh0LlBvc2l0aW9uPXt9KSksZnVuY3Rpb24oZSl7ZVtlLkFjY2VwdD0xXT1cIkFjY2VwdFwiLGVbZS5SZWplY3Q9Ml09XCJSZWplY3RcIixlW2UuU2tpcD0zXT1cIlNraXBcIn0odC5GaWx0ZXJSZXN1bHR8fCh0LkZpbHRlclJlc3VsdD17fSkpLGZ1bmN0aW9uKGUpe2VbZS5BbGw9NDI5NDk2NzI5NV09XCJBbGxcIixlW2UuRWxlbWVudD0xXT1cIkVsZW1lbnRcIixlW2UuQXR0cmlidXRlPTJdPVwiQXR0cmlidXRlXCIsZVtlLlRleHQ9NF09XCJUZXh0XCIsZVtlLkNEYXRhU2VjdGlvbj04XT1cIkNEYXRhU2VjdGlvblwiLGVbZS5FbnRpdHlSZWZlcmVuY2U9MTZdPVwiRW50aXR5UmVmZXJlbmNlXCIsZVtlLkVudGl0eT0zMl09XCJFbnRpdHlcIixlW2UuUHJvY2Vzc2luZ0luc3RydWN0aW9uPTY0XT1cIlByb2Nlc3NpbmdJbnN0cnVjdGlvblwiLGVbZS5Db21tZW50PTEyOF09XCJDb21tZW50XCIsZVtlLkRvY3VtZW50PTI1Nl09XCJEb2N1bWVudFwiLGVbZS5Eb2N1bWVudFR5cGU9NTEyXT1cIkRvY3VtZW50VHlwZVwiLGVbZS5Eb2N1bWVudEZyYWdtZW50PTEwMjRdPVwiRG9jdW1lbnRGcmFnbWVudFwiLGVbZS5Ob3RhdGlvbj0yMDQ4XT1cIk5vdGF0aW9uXCJ9KHQuV2hhdFRvU2hvd3x8KHQuV2hhdFRvU2hvdz17fSkpLGZ1bmN0aW9uKGUpe2VbZS5TdGFydFRvU3RhcnQ9MF09XCJTdGFydFRvU3RhcnRcIixlW2UuU3RhcnRUb0VuZD0xXT1cIlN0YXJ0VG9FbmRcIixlW2UuRW5kVG9FbmQ9Ml09XCJFbmRUb0VuZFwiLGVbZS5FbmRUb1N0YXJ0PTNdPVwiRW5kVG9TdGFydFwifSh0Lkhvd1RvQ29tcGFyZXx8KHQuSG93VG9Db21wYXJlPXt9KSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDI0MSk7dC5DYXN0PW4uQ2FzdDt2YXIgaT1yKDE1MCk7dC5HdWFyZD1pLkd1YXJkO3ZhciBvPXIoMjQyKTt0LkVtcHR5U2V0PW8uRW1wdHlTZXR9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxpPXIoNTUpLmYsbz1yKDIxKSxhPXIoMjUpLHM9cig4MCksdT1yKDExOSksbD1yKDEyMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsYyxoLHAsZixkPWUudGFyZ2V0LG09ZS5nbG9iYWwseT1lLnN0YXQ7aWYocj1tP246eT9uW2RdfHxzKGQse30pOihuW2RdfHx7fSkucHJvdG90eXBlKWZvcihjIGluIHQpe2lmKHA9dFtjXSxoPWUubm9UYXJnZXRHZXQ/KGY9aShyLGMpKSYmZi52YWx1ZTpyW2NdLCFsKG0/YzpkKyh5P1wiLlwiOlwiI1wiKStjLGUuZm9yY2VkKSYmdm9pZCAwIT09aCl7aWYodHlwZW9mIHA9PXR5cGVvZiBoKWNvbnRpbnVlO3UocCxoKX0oZS5zaGFtfHxoJiZoLnNoYW0pJiZvKHAsXCJzaGFtXCIsITApLGEocixjLHAsZSl9fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTEpLGk9cig4MSksbz1yKDE0KSxhPXIoNTgpLHM9cig4NiksdT1yKDEyNCksbD1pKFwid2tzXCIpLGM9bi5TeW1ib2wsaD11P2M6YyYmYy53aXRob3V0U2V0dGVyfHxhO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbyhsLGUpfHwocyYmbyhjLGUpP2xbZV09Y1tlXTpsW2VdPWgoXCJTeW1ib2wuXCIrZSkpLGxbZV19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigxKSxpPXIoMjkpLG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5fZmVhdHVyZXM9e211dGF0aW9uT2JzZXJ2ZXJzOiEwLGN1c3RvbUVsZW1lbnRzOiEwLHNsb3RzOiEwLHN0ZXBzOiEwfSx0aGlzLl93aW5kb3c9bnVsbCx0aGlzLl9jb21wYXJlQ2FjaGU9bmV3IG4uQ29tcGFyZUNhY2hlLHRoaXMuX3JhbmdlTGlzdD1uZXcgbi5GaXhlZFNpemVTZXR9cmV0dXJuIGUucHJvdG90eXBlLnNldEZlYXR1cmVzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUmJihlPSEwKSxuLmlzT2JqZWN0KGUpKWZvcih2YXIgdCBpbiBlKXRoaXMuX2ZlYXR1cmVzW3RdPWVbdF18fCExO2Vsc2UgZm9yKHZhciB0IGluIHRoaXMuX2ZlYXR1cmVzKXRoaXMuX2ZlYXR1cmVzW3RdPWV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImZlYXR1cmVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9mZWF0dXJlc30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ3aW5kb3dcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLl93aW5kb3cmJih0aGlzLl93aW5kb3c9aS5jcmVhdGVfd2luZG93KCkpLHRoaXMuX3dpbmRvd30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjb21wYXJlQ2FjaGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbXBhcmVDYWNoZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJyYW5nZUxpc3RcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JhbmdlTGlzdH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImluc3RhbmNlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBlLl9pbnN0YW5jZXx8KGUuX2luc3RhbmNlPW5ldyBlKSxlLl9pbnN0YW5jZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuZG9tPW8uaW5zdGFuY2V9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9faW1wb3J0U3Rhcnx8ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPW4ocigyMjgpKTt0LmJhc2U2ND1pO3ZhciBvPW4ocigxNDYpKTt0LmJ5dGU9bzt2YXIgYT1uKHIoMTQ3KSk7dC5ieXRlU2VxdWVuY2U9YTt2YXIgcz1uKHIoOTYpKTt0LmNvZGVQb2ludD1zO3ZhciB1PW4ocigyMzIpKTt0Lmpzb249dTt2YXIgbD1uKHIoMjMzKSk7dC5saXN0PWw7dmFyIGM9bihyKDIzNCkpO3QubWFwPWM7dmFyIGg9bihyKDIzNSkpO3QubmFtZXNwYWNlPWg7dmFyIHA9bihyKDIzNikpO3QucXVldWU9cDt2YXIgZj1uKHIoMjM3KSk7dC5zZXQ9Zjt2YXIgZD1uKHIoMjM4KSk7dC5zdGFjaz1kO3ZhciBtPW4ocigyMzkpKTt0LnN0cmluZz1tfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuISFlKCl9Y2F0Y2goZSl7cmV0dXJuITB9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2b2lkIDA9PT1yJiYocj1cIlwiKTt2YXIgbj1lLmNhbGwodGhpcyxyKXx8dGhpcztyZXR1cm4gbi5uYW1lPXQsbn1yZXR1cm4gaSh0LGUpLHR9KEVycm9yKTt0LkRPTUV4Y2VwdGlvbj1vO3ZhciBhPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiRE9NU3RyaW5nU2l6ZUVycm9yXCIsdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LkRPTVN0cmluZ1NpemVFcnJvcj1hO3ZhciBzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiV3JvbmdEb2N1bWVudEVycm9yXCIsXCJUaGUgb2JqZWN0IGlzIGluIHRoZSB3cm9uZyBkb2N1bWVudC4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0Lldyb25nRG9jdW1lbnRFcnJvcj1zO3ZhciB1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiTm9EYXRhQWxsb3dlZEVycm9yXCIsdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0Lk5vRGF0YUFsbG93ZWRFcnJvcj11O3ZhciBsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3JcIixcIlRoZSBvYmplY3QgY2FuIG5vdCBiZSBtb2RpZmllZC4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0Lk5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yPWw7dmFyIGM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJOb3RTdXBwb3J0ZWRFcnJvclwiLFwiVGhlIG9wZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuTm90U3VwcG9ydGVkRXJyb3I9Yzt2YXIgaD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkluVXNlQXR0cmlidXRlRXJyb3JcIix0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSW5Vc2VBdHRyaWJ1dGVFcnJvcj1oO3ZhciBwPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiSW52YWxpZFN0YXRlRXJyb3JcIixcIlRoZSBvYmplY3QgaXMgaW4gYW4gaW52YWxpZCBzdGF0ZS4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LkludmFsaWRTdGF0ZUVycm9yPXA7dmFyIGY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3JcIixcIlRoZSBvYmplY3QgY2FuIG5vdCBiZSBtb2RpZmllZCBpbiB0aGlzIHdheS4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LkludmFsaWRNb2RpZmljYXRpb25FcnJvcj1mO3ZhciBkPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiTmFtZXNwYWNlRXJyb3JcIixcIlRoZSBvcGVyYXRpb24gaXMgbm90IGFsbG93ZWQgYnkgTmFtZXNwYWNlcyBpbiBYTUwuIFtYTUxOU10gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0Lk5hbWVzcGFjZUVycm9yPWQ7dmFyIG09ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJJbnZhbGlkQWNjZXNzRXJyb3JcIixcIlRoZSBvYmplY3QgZG9lcyBub3Qgc3VwcG9ydCB0aGUgb3BlcmF0aW9uIG9yIGFyZ3VtZW50LiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSW52YWxpZEFjY2Vzc0Vycm9yPW07dmFyIHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJWYWxpZGF0aW9uRXJyb3JcIix0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuVmFsaWRhdGlvbkVycm9yPXk7dmFyIHY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJUeXBlTWlzbWF0Y2hFcnJvclwiLHQpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5UeXBlTWlzbWF0Y2hFcnJvcj12O3ZhciBfPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiU2VjdXJpdHlFcnJvclwiLFwiVGhlIG9wZXJhdGlvbiBpcyBpbnNlY3VyZS4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LlNlY3VyaXR5RXJyb3I9Xzt2YXIgZz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIk5ldHdvcmtFcnJvclwiLFwiQSBuZXR3b3JrIGVycm9yIG9jY3VycmVkLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuTmV0d29ya0Vycm9yPWc7dmFyIGI9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJBYm9ydEVycm9yXCIsXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuQWJvcnRFcnJvcj1iO3ZhciB4PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiVVJMTWlzbWF0Y2hFcnJvclwiLFwiVGhlIGdpdmVuIFVSTCBkb2VzIG5vdCBtYXRjaCBhbm90aGVyIFVSTC4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LlVSTE1pc21hdGNoRXJyb3I9eDt2YXIgdz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIlF1b3RhRXhjZWVkZWRFcnJvclwiLFwiVGhlIHF1b3RhIGhhcyBiZWVuIGV4Y2VlZGVkLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuUXVvdGFFeGNlZWRlZEVycm9yPXc7dmFyIEU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJUaW1lb3V0RXJyb3JcIixcIlRoZSBvcGVyYXRpb24gdGltZWQgb3V0LiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuVGltZW91dEVycm9yPUU7dmFyIEQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJJbnZhbGlkTm9kZVR5cGVFcnJvclwiLFwiVGhlIHN1cHBsaWVkIG5vZGUgaXMgaW5jb3JyZWN0IG9yIGhhcyBhbiBpbmNvcnJlY3QgYW5jZXN0b3IgZm9yIHRoaXMgb3BlcmF0aW9uLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSW52YWxpZE5vZGVUeXBlRXJyb3I9RDt2YXIgUz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkRhdGFDbG9uZUVycm9yXCIsXCJUaGUgb2JqZWN0IGNhbiBub3QgYmUgY2xvbmVkLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuRGF0YUNsb25lRXJyb3I9Uzt2YXIgQz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIk5vdEltcGxlbWVudGVkRXJyb3JcIixcIlRoZSBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCBieSB0aGlzIG1vZHVsZS4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0Lk5vdEltcGxlbWVudGVkRXJyb3I9Qzt2YXIgQT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkhpZXJhcmNoeVJlcXVlc3RFcnJvclwiLFwiVGhlIG9wZXJhdGlvbiB3b3VsZCB5aWVsZCBhbiBpbmNvcnJlY3Qgbm9kZSB0cmVlLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSGllcmFyY2h5UmVxdWVzdEVycm9yPUE7dmFyIE49ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJOb3RGb3VuZEVycm9yXCIsXCJUaGUgb2JqZWN0IGNhbiBub3QgYmUgZm91bmQgaGVyZS4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0Lk5vdEZvdW5kRXJyb3I9Tjt2YXIgVD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkluZGV4U2l6ZUVycm9yXCIsXCJUaGUgaW5kZXggaXMgbm90IGluIHRoZSBhbGxvd2VkIHJhbmdlLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSW5kZXhTaXplRXJyb3I9VDt2YXIgTz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIlN5bnRheEVycm9yXCIsXCJUaGUgc3RyaW5nIGRpZCBub3QgbWF0Y2ggdGhlIGV4cGVjdGVkIHBhdHRlcm4uIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5TeW50YXhFcnJvcj1PO3ZhciBGPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiSW52YWxpZENoYXJhY3RlckVycm9yXCIsXCJUaGUgc3RyaW5nIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LkludmFsaWRDaGFyYWN0ZXJFcnJvcj1GfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig1MyksaT1bXCJraW5kXCIsXCJyZXNvbHZlXCIsXCJjb25zdHJ1Y3RcIixcImluc3RhbmNlT2ZcIixcInByZWRpY2F0ZVwiLFwicmVwcmVzZW50XCIsXCJkZWZhdWx0U3R5bGVcIixcInN0eWxlQWxpYXNlc1wiXSxvPVtcInNjYWxhclwiLFwic2VxdWVuY2VcIixcIm1hcHBpbmdcIl07ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsYTtpZih0PXR8fHt9LE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKC0xPT09aS5pbmRleE9mKHQpKXRocm93IG5ldyBuKCdVbmtub3duIG9wdGlvbiBcIicrdCsnXCIgaXMgbWV0IGluIGRlZmluaXRpb24gb2YgXCInK2UrJ1wiIFlBTUwgdHlwZS4nKX0pKSx0aGlzLnRhZz1lLHRoaXMua2luZD10LmtpbmR8fG51bGwsdGhpcy5yZXNvbHZlPXQucmVzb2x2ZXx8ZnVuY3Rpb24oKXtyZXR1cm4hMH0sdGhpcy5jb25zdHJ1Y3Q9dC5jb25zdHJ1Y3R8fGZ1bmN0aW9uKGUpe3JldHVybiBlfSx0aGlzLmluc3RhbmNlT2Y9dC5pbnN0YW5jZU9mfHxudWxsLHRoaXMucHJlZGljYXRlPXQucHJlZGljYXRlfHxudWxsLHRoaXMucmVwcmVzZW50PXQucmVwcmVzZW50fHxudWxsLHRoaXMuZGVmYXVsdFN0eWxlPXQuZGVmYXVsdFN0eWxlfHxudWxsLHRoaXMuc3R5bGVBbGlhc2VzPShyPXQuc3R5bGVBbGlhc2VzfHxudWxsLGE9e30sbnVsbCE9PXImJk9iamVjdC5rZXlzKHIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JbZV0uZm9yRWFjaCgoZnVuY3Rpb24odCl7YVtTdHJpbmcodCldPWV9KSl9KSksYSksLTE9PT1vLmluZGV4T2YodGhpcy5raW5kKSl0aHJvdyBuZXcgbignVW5rbm93biBraW5kIFwiJyt0aGlzLmtpbmQrJ1wiIGlzIHNwZWNpZmllZCBmb3IgXCInK2UrJ1wiIFlBTUwgdHlwZS4nKX19LGZ1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24odCl7dmFyIHI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuTWF0aD09TWF0aCYmZX07ZS5leHBvcnRzPXIoXCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbFRoaXMmJmdsb2JhbFRoaXMpfHxyKFwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyl8fHIoXCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYpfHxyKFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0KXx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpfSkuY2FsbCh0aGlzLHIoNzgpKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuaWRsX2RlZmluZUNvbnN0PWZ1bmN0aW9uKGUsdCxyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt3cml0YWJsZTohMSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSx2YWx1ZTpyfSl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZT9udWxsIT09ZTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlfX0sZnVuY3Rpb24oZSx0KXt2YXIgcj17fS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5jYWxsKGUsdCl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNiksaT1yKDExNSksbz1yKDE4KSxhPXIoNTYpLHM9T2JqZWN0LmRlZmluZVByb3BlcnR5O3QuZj1uP3M6ZnVuY3Rpb24oZSx0LHIpe2lmKG8oZSksdD1hKHQsITApLG8ociksaSl0cnl7cmV0dXJuIHMoZSx0LHIpfWNhdGNoKGUpe31pZihcImdldFwiaW4gcnx8XCJzZXRcImluIHIpdGhyb3cgVHlwZUVycm9yKFwiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWRcIik7cmV0dXJuXCJ2YWx1ZVwiaW4gciYmKGVbdF09ci52YWx1ZSksZX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgpO2UuZXhwb3J0cz0hbigoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LDEse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pWzFdfSkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cigzKSxvPXIoMik7ZnVuY3Rpb24gYShlLHQscil7aWYodm9pZCAwPT09ciYmKHI9ITEpLHImJmkuR3VhcmQuaXNFbGVtZW50Tm9kZSh0KSYmaS5HdWFyZC5pc1NoYWRvd1Jvb3QodC5zaGFkb3dSb290KSYmdC5zaGFkb3dSb290Ll9maXJzdENoaWxkKXJldHVybiB0LnNoYWRvd1Jvb3QuX2ZpcnN0Q2hpbGQ7aWYodC5fZmlyc3RDaGlsZClyZXR1cm4gdC5fZmlyc3RDaGlsZDtpZih0PT09ZSlyZXR1cm4gbnVsbDtpZih0Ll9uZXh0U2libGluZylyZXR1cm4gdC5fbmV4dFNpYmxpbmc7Zm9yKHZhciBuPXQuX3BhcmVudDtuJiZuIT09ZTspe2lmKG4uX25leHRTaWJsaW5nKXJldHVybiBuLl9uZXh0U2libGluZztuPW4uX3BhcmVudH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBzKCl7dmFyIGU7cmV0dXJuKGU9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybntkb25lOiEwLHZhbHVlOm51bGx9fX19LGV9ZnVuY3Rpb24gdShlLHQscixuKXt2b2lkIDA9PT10JiYodD0hMSksdm9pZCAwPT09ciYmKHI9ITEpO2Zvcih2YXIgaT10P2U6YShlLGUscik7aSYmbiYmIW4oaSk7KWk9YShlLGkscik7cmV0dXJuIGl9ZnVuY3Rpb24gbChlLHQscixuLGkpe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1uJiYobj0hMSk7Zm9yKHZhciBvPWEoZSx0LG4pO28mJmkmJiFpKG8pOylvPWEoZSxvLG4pO3JldHVybiBvfWZ1bmN0aW9uIGMoZSx0LHIsbil7dmFyIGk7cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1yJiYocj0hMSksdHx8MCE9PWUuX2NoaWxkcmVuLnNpemU/KChpPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIGk9dD9lOmEoZSxlLHIpO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7Zm9yKDtpJiZuJiYhbihpKTspaT1hKGUsaSxyKTtpZihudWxsPT09aSlyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfTt2YXIgdD17ZG9uZTohMSx2YWx1ZTppfTtyZXR1cm4gaT1hKGUsaSxyKSx0fX19LGkpOnMoKX1mdW5jdGlvbiBoKGUsdCxyKXt2b2lkIDA9PT10JiYodD0hMSk7Zm9yKHZhciBuPXQ/ZTplLl9wYXJlbnQ7biYmciYmIXIobik7KW49bi5fcGFyZW50O3JldHVybiBufWZ1bmN0aW9uIHAoZSx0LHIsbil7dm9pZCAwPT09ciYmKHI9ITEpO2Zvcih2YXIgaT10Ll9wYXJlbnQ7aSYmbiYmIW4oaSk7KWk9aS5fcGFyZW50O3JldHVybiBpfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIGkuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKGUpPzA6aS5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKGUpP2UuX2RhdGEubGVuZ3RoOmUuX2NoaWxkcmVuLnNpemV9ZnVuY3Rpb24gZChlLHQpe2lmKHZvaWQgMD09PXQmJih0PSExKSx0KXt2YXIgcj1kKGUsITEpO3JldHVybiBpLkd1YXJkLmlzU2hhZG93Um9vdChyKT9kKHIuX2hvc3QsITApOnJ9cmV0dXJuIGUuX3BhcmVudD9kKGUuX3BhcmVudCk6ZX1mdW5jdGlvbiBtKGUsdCxyLG4pe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1uJiYobj0hMSk7Zm9yKHZhciBvPXI/ZTpuJiZpLkd1YXJkLmlzU2hhZG93Um9vdChlKT9lLl9ob3N0OmUuX3BhcmVudDtudWxsIT09bzspe2lmKG89PT10KXJldHVybiEwO289biYmaS5HdWFyZC5pc1NoYWRvd1Jvb3Qobyk/by5faG9zdDpvLl9wYXJlbnR9cmV0dXJuITF9ZnVuY3Rpb24geShlKXtmb3IodmFyIHQ9ZChlKSxyPTAsbj11KHQpO251bGwhPT1uOyl7aWYocisrLG49PT1lKXJldHVybiByO249bCh0LG4pfXJldHVybi0xfXQudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlPXUsdC50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZT1sLHQudHJlZV9nZXREZXNjZW5kYW50Tm9kZXM9Yyx0LnRyZWVfZ2V0RGVzY2VuZGFudEVsZW1lbnRzPWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBvO3JldHVybiB2b2lkIDA9PT10JiYodD0hMSksdm9pZCAwPT09ciYmKHI9ITEpLHR8fDAhPT1lLl9jaGlsZHJlbi5zaXplPygobz17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3ZhciBvPWMoZSx0LHIsKGZ1bmN0aW9uKGUpe3JldHVybiBpLkd1YXJkLmlzRWxlbWVudE5vZGUoZSl9KSlbU3ltYm9sLml0ZXJhdG9yXSgpLGE9by5uZXh0KCkudmFsdWU7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtmb3IoO2EmJm4mJiFuKGEpOylhPW8ubmV4dCgpLnZhbHVlO2lmKG51bGw9PT1hKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBlPXtkb25lOiExLHZhbHVlOmF9O3JldHVybiBhPW8ubmV4dCgpLnZhbHVlLGV9fX0sbyk6cygpfSx0LnRyZWVfZ2V0U2libGluZ05vZGVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLGUuX3BhcmVudCYmMCE9PWUuX3BhcmVudC5fY2hpbGRyZW4uc2l6ZT8oKG49e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgbj1lLl9wYXJlbnQ/ZS5fcGFyZW50Ll9maXJzdENoaWxkOm51bGw7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtmb3IoO24mJihyJiYhcihuKXx8IXQmJm49PT1lKTspbj1uLl9uZXh0U2libGluZztpZihudWxsPT09bilyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfTt2YXIgaT17ZG9uZTohMSx2YWx1ZTpufTtyZXR1cm4gbj1uLl9uZXh0U2libGluZyxpfX19LG4pOnMoKX0sdC50cmVlX2dldEZpcnN0QW5jZXN0b3JOb2RlPWgsdC50cmVlX2dldE5leHRBbmNlc3Rvck5vZGU9cCx0LnRyZWVfZ2V0QW5jZXN0b3JOb2Rlcz1mdW5jdGlvbihlLHQscil7dmFyIG47cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSx0fHxlLl9wYXJlbnQ/KChuPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIG49aChlLHQscik7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtpZihudWxsPT09bilyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfTt2YXIgZT17ZG9uZTohMSx2YWx1ZTpufTtyZXR1cm4gbj1wKDAsbix0LHIpLGV9fX0sbik6cygpfSx0LnRyZWVfZ2V0Q29tbW9uQW5jZXN0b3I9ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gZS5fcGFyZW50O2Zvcih2YXIgcj1bXSxuPVtdLGk9aChlLCEwKTtudWxsIT09aTspci5wdXNoKGkpLGk9cCgwLGksITApO2Zvcih2YXIgbz1oKHQsITApO251bGwhPT1vOyluLnB1c2gobyksbz1wKDAsbywhMCk7Zm9yKHZhciBhPXIubGVuZ3RoLHM9bi5sZW5ndGgsdT1udWxsLGw9TWF0aC5taW4oYSxzKTtsPjA7bC0tKXt2YXIgYz1yWy0tYV07aWYoYyE9PW5bLS1zXSlicmVhazt1PWN9cmV0dXJuIHV9LHQudHJlZV9nZXRGb2xsb3dpbmdOb2RlPWZ1bmN0aW9uKGUsdCl7aWYodC5fZmlyc3RDaGlsZClyZXR1cm4gdC5fZmlyc3RDaGlsZDtpZih0Ll9uZXh0U2libGluZylyZXR1cm4gdC5fbmV4dFNpYmxpbmc7Zm9yKDs7KXt2YXIgcj10Ll9wYXJlbnQ7aWYobnVsbD09PXJ8fHI9PT1lKXJldHVybiBudWxsO2lmKHIuX25leHRTaWJsaW5nKXJldHVybiByLl9uZXh0U2libGluZzt0PXJ9fSx0LnRyZWVfZ2V0UHJlY2VkaW5nTm9kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0PT09ZT9udWxsOnQuX3ByZXZpb3VzU2libGluZz8odD10Ll9wcmV2aW91c1NpYmxpbmcpLl9sYXN0Q2hpbGQ/dC5fbGFzdENoaWxkOnQ6dC5fcGFyZW50fSx0LnRyZWVfaXNDb25zdHJhaW5lZD1mdW5jdGlvbiBlKHQpe3ZhciByLGksYSxzLHUsbDtzd2l0Y2godC5fbm9kZVR5cGUpe2Nhc2Ugby5Ob2RlVHlwZS5Eb2N1bWVudDp2YXIgYz0hMSxoPSExO3RyeXtmb3IodmFyIHA9bih0Ll9jaGlsZHJlbiksZj1wLm5leHQoKTshZi5kb25lO2Y9cC5uZXh0KCkpe3N3aXRjaChmLnZhbHVlLl9ub2RlVHlwZSl7Y2FzZSBvLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbjpjYXNlIG8uTm9kZVR5cGUuQ29tbWVudDpicmVhaztjYXNlIG8uTm9kZVR5cGUuRG9jdW1lbnRUeXBlOmlmKGN8fGgpcmV0dXJuITE7Yz0hMDticmVhaztjYXNlIG8uTm9kZVR5cGUuRWxlbWVudDppZihoKXJldHVybiExO2g9ITA7YnJlYWs7ZGVmYXVsdDpyZXR1cm4hMX19fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2YmJiFmLmRvbmUmJihpPXAucmV0dXJuKSYmaS5jYWxsKHApfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1icmVhaztjYXNlIG8uTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudDpjYXNlIG8uTm9kZVR5cGUuRWxlbWVudDp0cnl7Zm9yKHZhciBkPW4odC5fY2hpbGRyZW4pLG09ZC5uZXh0KCk7IW0uZG9uZTttPWQubmV4dCgpKXtzd2l0Y2gobS52YWx1ZS5fbm9kZVR5cGUpe2Nhc2Ugby5Ob2RlVHlwZS5FbGVtZW50OmNhc2Ugby5Ob2RlVHlwZS5UZXh0OmNhc2Ugby5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246Y2FzZSBvLk5vZGVUeXBlLkNEYXRhOmNhc2Ugby5Ob2RlVHlwZS5Db21tZW50OmJyZWFrO2RlZmF1bHQ6cmV0dXJuITF9fX1jYXRjaChlKXthPXtlcnJvcjplfX1maW5hbGx5e3RyeXttJiYhbS5kb25lJiYocz1kLnJldHVybikmJnMuY2FsbChkKX1maW5hbGx5e2lmKGEpdGhyb3cgYS5lcnJvcn19YnJlYWs7Y2FzZSBvLk5vZGVUeXBlLkRvY3VtZW50VHlwZTpjYXNlIG8uTm9kZVR5cGUuVGV4dDpjYXNlIG8uTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uOmNhc2Ugby5Ob2RlVHlwZS5DRGF0YTpjYXNlIG8uTm9kZVR5cGUuQ29tbWVudDpyZXR1cm4hdC5oYXNDaGlsZE5vZGVzKCl9dHJ5e2Zvcih2YXIgeT1uKHQuX2NoaWxkcmVuKSx2PXkubmV4dCgpOyF2LmRvbmU7dj15Lm5leHQoKSl7aWYoIWUodi52YWx1ZSkpcmV0dXJuITF9fWNhdGNoKGUpe3U9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3YmJiF2LmRvbmUmJihsPXkucmV0dXJuKSYmbC5jYWxsKHkpfWZpbmFsbHl7aWYodSl0aHJvdyB1LmVycm9yfX1yZXR1cm4hMH0sdC50cmVlX25vZGVMZW5ndGg9Zix0LnRyZWVfaXNFbXB0eT1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWYoZSl9LHQudHJlZV9yb290Tm9kZT1kLHQudHJlZV9pc0Rlc2NlbmRhbnRPZj1mdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT1yJiYocj0hMSksdm9pZCAwPT09biYmKG49ITEpO2Zvcih2YXIgaT11KGUscixuKTtudWxsIT09aTspe2lmKGk9PT10KXJldHVybiEwO2k9bChlLGkscixuKX1yZXR1cm4hMX0sdC50cmVlX2lzQW5jZXN0b3JPZj1tLHQudHJlZV9pc0hvc3RJbmNsdWRpbmdBbmNlc3Rvck9mPWZ1bmN0aW9uIGUodCxyLG4pe2lmKHZvaWQgMD09PW4mJihuPSExKSxtKHQscixuKSlyZXR1cm4hMDt2YXIgbz1kKHQpO3JldHVybiEoIWkuR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZShvKXx8bnVsbD09PW8uX2hvc3R8fCFlKG8uX2hvc3QscixuKSl9LHQudHJlZV9pc1NpYmxpbmdPZj1mdW5jdGlvbihlLHQscil7cmV0dXJuIHZvaWQgMD09PXImJihyPSExKSxlIT09dD9udWxsIT09ZS5fcGFyZW50JiZlLl9wYXJlbnQ9PT10Ll9wYXJlbnQ6ISFyfSx0LnRyZWVfaXNQcmVjZWRpbmc9ZnVuY3Rpb24oZSx0KXt2YXIgcj15KGUpLG49eSh0KTtyZXR1cm4tMSE9PXImJi0xIT09biYmKGQoZSk9PT1kKHQpJiZuPHIpfSx0LnRyZWVfaXNGb2xsb3dpbmc9ZnVuY3Rpb24oZSx0KXt2YXIgcj15KGUpLG49eSh0KTtyZXR1cm4tMSE9PXImJi0xIT09biYmKGQoZSk9PT1kKHQpJiZuPnIpfSx0LnRyZWVfaXNQYXJlbnRPZj1mdW5jdGlvbihlLHQpe3JldHVybiBlLl9wYXJlbnQ9PT10fSx0LnRyZWVfaXNDaGlsZE9mPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQuX3BhcmVudD09PWV9LHQudHJlZV9wcmV2aW91c1NpYmxpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX3ByZXZpb3VzU2libGluZ30sdC50cmVlX25leHRTaWJsaW5nPWZ1bmN0aW9uKGUpe3JldHVybiBlLl9uZXh0U2libGluZ30sdC50cmVlX2ZpcnN0Q2hpbGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX2ZpcnN0Q2hpbGR9LHQudHJlZV9sYXN0Q2hpbGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX2xhc3RDaGlsZH0sdC50cmVlX3RyZWVQb3NpdGlvbj15LHQudHJlZV9pbmRleD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDtudWxsIT09ZS5fcHJldmlvdXNTaWJsaW5nOyl0KyssZT1lLl9wcmV2aW91c1NpYmxpbmc7cmV0dXJuIHR9LHQudHJlZV9yZXRhcmdldD1mdW5jdGlvbihlLHQpe2Zvcig7Oyl7aWYoIWV8fCFpLkd1YXJkLmlzTm9kZShlKSlyZXR1cm4gZTt2YXIgcj1kKGUpO2lmKCFpLkd1YXJkLmlzU2hhZG93Um9vdChyKSlyZXR1cm4gZTtpZih0JiZpLkd1YXJkLmlzTm9kZSh0KSYmbShyLHQsITAsITApKXJldHVybiBlO2U9ci5ob3N0fX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW4oZSkpdGhyb3cgVHlwZUVycm9yKFN0cmluZyhlKStcIiBpcyBub3QgYW4gb2JqZWN0XCIpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMjQpLGk9cigxMzApLG89cig0OSksYT1yKDQzKSxzPXIoODgpLHU9YS5zZXQsbD1hLmdldHRlckZvcihcIkFycmF5IEl0ZXJhdG9yXCIpO2UuZXhwb3J0cz1zKEFycmF5LFwiQXJyYXlcIiwoZnVuY3Rpb24oZSx0KXt1KHRoaXMse3R5cGU6XCJBcnJheSBJdGVyYXRvclwiLHRhcmdldDpuKGUpLGluZGV4OjAsa2luZDp0fSl9KSwoZnVuY3Rpb24oKXt2YXIgZT1sKHRoaXMpLHQ9ZS50YXJnZXQscj1lLmtpbmQsbj1lLmluZGV4Kys7cmV0dXJuIXR8fG4+PXQubGVuZ3RoPyhlLnRhcmdldD12b2lkIDAse3ZhbHVlOnZvaWQgMCxkb25lOiEwfSk6XCJrZXlzXCI9PXI/e3ZhbHVlOm4sZG9uZTohMX06XCJ2YWx1ZXNcIj09cj97dmFsdWU6dFtuXSxkb25lOiExfTp7dmFsdWU6W24sdFtuXV0sZG9uZTohMX19KSxcInZhbHVlc1wiKSxvLkFyZ3VtZW50cz1vLkFycmF5LGkoXCJrZXlzXCIpLGkoXCJ2YWx1ZXNcIiksaShcImVudHJpZXNcIil9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDkwKSxpPXIoMjUpLG89cigyMDIpO258fGkoT2JqZWN0LnByb3RvdHlwZSxcInRvU3RyaW5nXCIsbyx7dW5zYWZlOiEwfSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE2KSxpPXIoMTUpLG89cig0MCk7ZS5leHBvcnRzPW4/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBpLmYoZSx0LG8oMSxyKSl9OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZVt0XT1yLGV9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMzcpLmNoYXJBdCxpPXIoNDMpLG89cig4OCksYT1pLnNldCxzPWkuZ2V0dGVyRm9yKFwiU3RyaW5nIEl0ZXJhdG9yXCIpO28oU3RyaW5nLFwiU3RyaW5nXCIsKGZ1bmN0aW9uKGUpe2EodGhpcyx7dHlwZTpcIlN0cmluZyBJdGVyYXRvclwiLHN0cmluZzpTdHJpbmcoZSksaW5kZXg6MH0pfSksKGZ1bmN0aW9uKCl7dmFyIGUsdD1zKHRoaXMpLHI9dC5zdHJpbmcsaT10LmluZGV4O3JldHVybiBpPj1yLmxlbmd0aD97dmFsdWU6dm9pZCAwLGRvbmU6ITB9OihlPW4ocixpKSx0LmluZGV4Kz1lLmxlbmd0aCx7dmFsdWU6ZSxkb25lOiExfSl9KSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxpPXIoMjAzKSxvPXIoMTkpLGE9cigyMSkscz1yKDUpLHU9cyhcIml0ZXJhdG9yXCIpLGw9cyhcInRvU3RyaW5nVGFnXCIpLGM9by52YWx1ZXM7Zm9yKHZhciBoIGluIGkpe3ZhciBwPW5baF0sZj1wJiZwLnByb3RvdHlwZTtpZihmKXtpZihmW3VdIT09Yyl0cnl7YShmLHUsYyl9Y2F0Y2goZSl7Zlt1XT1jfWlmKGZbbF18fGEoZixsLGgpLGlbaF0pZm9yKHZhciBkIGluIG8paWYoZltkXSE9PW9bZF0pdHJ5e2EoZixkLG9bZF0pfWNhdGNoKGUpe2ZbZF09b1tkXX19fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDEpLGk9cigzNSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuKGkoZSkpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTEpLGk9cigyMSksbz1yKDE0KSxhPXIoODApLHM9cigxMTcpLHU9cig0MyksbD11LmdldCxjPXUuZW5mb3JjZSxoPVN0cmluZyhTdHJpbmcpLnNwbGl0KFwiU3RyaW5nXCIpOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIscyl7dmFyIHU9ISFzJiYhIXMudW5zYWZlLGw9ISFzJiYhIXMuZW51bWVyYWJsZSxwPSEhcyYmISFzLm5vVGFyZ2V0R2V0O1wiZnVuY3Rpb25cIj09dHlwZW9mIHImJihcInN0cmluZ1wiIT10eXBlb2YgdHx8byhyLFwibmFtZVwiKXx8aShyLFwibmFtZVwiLHQpLGMocikuc291cmNlPWguam9pbihcInN0cmluZ1wiPT10eXBlb2YgdD90OlwiXCIpKSxlIT09bj8odT8hcCYmZVt0XSYmKGw9ITApOmRlbGV0ZSBlW3RdLGw/ZVt0XT1yOmkoZSx0LHIpKTpsP2VbdF09cjphKHQscil9KShGdW5jdGlvbi5wcm90b3R5cGUsXCJ0b1N0cmluZ1wiLChmdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMmJmwodGhpcykuc291cmNlfHxzKHRoaXMpfSkpfSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0NyksaT1NYXRoLm1pbjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+MD9pKG4oZSksOTAwNzE5OTI1NDc0MDk5MSk6MH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDM1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChuKGUpKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE2KSxpPXIoOCksbz1yKDE0KSxhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxzPXt9LHU9ZnVuY3Rpb24oZSl7dGhyb3cgZX07ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYobyhzLGUpKXJldHVybiBzW2VdO3R8fCh0PXt9KTt2YXIgcj1bXVtlXSxsPSEhbyh0LFwiQUNDRVNTT1JTXCIpJiZ0LkFDQ0VTU09SUyxjPW8odCwwKT90WzBdOnUsaD1vKHQsMSk/dFsxXTp2b2lkIDA7cmV0dXJuIHNbZV09ISFyJiYhaSgoZnVuY3Rpb24oKXtpZihsJiYhbilyZXR1cm4hMDt2YXIgZT17bGVuZ3RoOi0xfTtsP2EoZSwxLHtlbnVtZXJhYmxlOiEwLGdldDp1fSk6ZVsxXT0xLHIuY2FsbChlLGMsaCl9KSl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigxNDgpLGk9cigxNDkpLG89cigxNTEpLGE9cig5OCkscz1yKDE1MyksdT1yKDE1NCksbD1yKDE1NSksYz1yKDk5KSxoPXIoMTAwKSxwPXIoMTU2KSxmPXIoMTU3KSxkPXIoMTAxKSxtPXIoMTU4KSx5PXIoMTU5KSx2PXIoMTYwKSxfPXIoMTYxKSxnPXIoMTYyKSxiPXIoMTYzKSx4PXIoMTY0KSx3PXIoMTY1KSxFPXIoMTY2KSxEPXIoMTY3KSxTPXIoMTY4KSxDPXIoMTY5KSxBPXIoMTcwKTt0LmNyZWF0ZV9kb21JbXBsZW1lbnRhdGlvbj1mdW5jdGlvbihlKXtyZXR1cm4gbi5ET01JbXBsZW1lbnRhdGlvbkltcGwuX2NyZWF0ZShlKX0sdC5jcmVhdGVfd2luZG93PWZ1bmN0aW9uKCl7cmV0dXJuIGkuV2luZG93SW1wbC5fY3JlYXRlKCl9LHQuY3JlYXRlX3htbERvY3VtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBvLlhNTERvY3VtZW50SW1wbH0sdC5jcmVhdGVfZG9jdW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGEuRG9jdW1lbnRJbXBsfSx0LmNyZWF0ZV9hYm9ydENvbnRyb2xsZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHMuQWJvcnRDb250cm9sbGVySW1wbH0sdC5jcmVhdGVfYWJvcnRTaWduYWw9ZnVuY3Rpb24oKXtyZXR1cm4gdS5BYm9ydFNpZ25hbEltcGwuX2NyZWF0ZSgpfSx0LmNyZWF0ZV9kb2N1bWVudFR5cGU9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIGwuRG9jdW1lbnRUeXBlSW1wbC5fY3JlYXRlKGUsdCxyLG4pfSx0LmNyZWF0ZV9lbGVtZW50PWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiBjLkVsZW1lbnRJbXBsLl9jcmVhdGUoZSx0LHIsbil9LHQuY3JlYXRlX2h0bWxFbGVtZW50PWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiBjLkVsZW1lbnRJbXBsLl9jcmVhdGUoZSx0LHIsbil9LHQuY3JlYXRlX2h0bWxVbmtub3duRWxlbWVudD1mdW5jdGlvbihlLHQscixuKXtyZXR1cm4gYy5FbGVtZW50SW1wbC5fY3JlYXRlKGUsdCxyLG4pfSx0LmNyZWF0ZV9kb2N1bWVudEZyYWdtZW50PWZ1bmN0aW9uKGUpe3JldHVybiBoLkRvY3VtZW50RnJhZ21lbnRJbXBsLl9jcmVhdGUoZSl9LHQuY3JlYXRlX3NoYWRvd1Jvb3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcC5TaGFkb3dSb290SW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX2F0dHI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZi5BdHRySW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX3RleHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZC5UZXh0SW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX2NkYXRhU2VjdGlvbj1mdW5jdGlvbihlLHQpe3JldHVybiBtLkNEQVRBU2VjdGlvbkltcGwuX2NyZWF0ZShlLHQpfSx0LmNyZWF0ZV9jb21tZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHkuQ29tbWVudEltcGwuX2NyZWF0ZShlLHQpfSx0LmNyZWF0ZV9wcm9jZXNzaW5nSW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB2LlByb2Nlc3NpbmdJbnN0cnVjdGlvbkltcGwuX2NyZWF0ZShlLHQscil9LHQuY3JlYXRlX2h0bWxDb2xsZWN0aW9uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PWZ1bmN0aW9uKCl7cmV0dXJuITB9KSxfLkhUTUxDb2xsZWN0aW9uSW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX25vZGVMaXN0PWZ1bmN0aW9uKGUpe3JldHVybiBnLk5vZGVMaXN0SW1wbC5fY3JlYXRlKGUpfSx0LmNyZWF0ZV9ub2RlTGlzdFN0YXRpYz1mdW5jdGlvbihlLHQpe3JldHVybiBiLk5vZGVMaXN0U3RhdGljSW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX25hbWVkTm9kZU1hcD1mdW5jdGlvbihlKXtyZXR1cm4geC5OYW1lZE5vZGVNYXBJbXBsLl9jcmVhdGUoZSl9LHQuY3JlYXRlX3JhbmdlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHcuUmFuZ2VJbXBsLl9jcmVhdGUoZSx0KX0sdC5jcmVhdGVfbm9kZUl0ZXJhdG9yPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gRS5Ob2RlSXRlcmF0b3JJbXBsLl9jcmVhdGUoZSx0LHIpfSx0LmNyZWF0ZV90cmVlV2Fsa2VyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEQuVHJlZVdhbGtlckltcGwuX2NyZWF0ZShlLHQpfSx0LmNyZWF0ZV9ub2RlRmlsdGVyPWZ1bmN0aW9uKCl7cmV0dXJuIFMuTm9kZUZpbHRlckltcGwuX2NyZWF0ZSgpfSx0LmNyZWF0ZV9tdXRhdGlvblJlY29yZD1mdW5jdGlvbihlLHQscixuLGksbyxhLHMsdSl7cmV0dXJuIEMuTXV0YXRpb25SZWNvcmRJbXBsLl9jcmVhdGUoZSx0LHIsbixpLG8sYSxzLHUpfSx0LmNyZWF0ZV9kb21Ub2tlbkxpc3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gQS5ET01Ub2tlbkxpc3RJbXBsLl9jcmVhdGUoZSx0KX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDYpLG89cigxNyksYT1yKDMpLHM9cig3MiksdT1uZXcgTWFwO2Z1bmN0aW9uIGwoZSx0KXtpZih0IT09ZS5fcm9vdCYmby50cmVlX2lzQW5jZXN0b3JPZihlLl9yZWZlcmVuY2UsdCwhMCkpe2lmKGUuX3BvaW50ZXJCZWZvcmVSZWZlcmVuY2UpZm9yKDs7KXt2YXIgcj1vLnRyZWVfZ2V0Rm9sbG93aW5nTm9kZShlLl9yb290LHQpO2lmKG51bGwhPT1yJiZvLnRyZWVfaXNEZXNjZW5kYW50T2YoZS5fcm9vdCxyLCEwKSYmIW8udHJlZV9pc0Rlc2NlbmRhbnRPZih0LHIsITApKXJldHVybiB2b2lkKGUuX3JlZmVyZW5jZT1yKTtpZihudWxsPT09cilyZXR1cm4gdm9pZChlLl9wb2ludGVyQmVmb3JlUmVmZXJlbmNlPSExKX1pZihudWxsPT09dC5fcHJldmlvdXNTaWJsaW5nKW51bGwhPT10Ll9wYXJlbnQmJihlLl9yZWZlcmVuY2U9dC5fcGFyZW50KTtlbHNle2Zvcih2YXIgbj10Ll9wcmV2aW91c1NpYmxpbmcsaT1vLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZSh0Ll9wcmV2aW91c1NpYmxpbmcsITAsITEpO251bGwhPT1pOyludWxsIT09aSYmKG49aSksaT1vLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKHQuX3ByZXZpb3VzU2libGluZyxpLCEwLCExKTtlLl9yZWZlcmVuY2U9bn19fWZ1bmN0aW9uIGMoZSx0LHIsbixpKXtpZihhLkd1YXJkLmlzU2xvdChlKSYmXCJuYW1lXCI9PT10JiZudWxsPT09aSl7aWYobj09PXIpcmV0dXJuO2lmKG51bGw9PT1uJiZcIlwiPT09cilyZXR1cm47aWYoXCJcIj09PW4mJm51bGw9PT1yKXJldHVybjtlLl9uYW1lPW51bGw9PT1ufHxcIlwiPT09bj9cIlwiOm4scy5zaGFkb3dUcmVlX2Fzc2lnblNsb3RhYmxlc0ZvckFUcmVlKG8udHJlZV9yb290Tm9kZShlKSl9fWZ1bmN0aW9uIGgoZSx0LHIsbixpKXtpZihhLkd1YXJkLmlzU2xvdGFibGUoZSkmJlwic2xvdFwiPT09dCYmbnVsbD09PWkpe2lmKG49PT1yKXJldHVybjtpZihudWxsPT09biYmXCJcIj09PXIpcmV0dXJuO2lmKFwiXCI9PT1uJiZudWxsPT09cilyZXR1cm47ZS5fbmFtZT1udWxsPT09bnx8XCJcIj09PW4/XCJcIjpuLHMuc2hhZG93VHJlZV9pc0Fzc2lnbmVkKGUpJiZzLnNoYWRvd1RyZWVfYXNzaWduU2xvdGFibGVzKGUuX2Fzc2lnbmVkU2xvdCkscy5zaGFkb3dUcmVlX2Fzc2lnbkFTbG90KGUpfX1mdW5jdGlvbiBwKGUsdCxyLG4pe1wiaWRcIj09PXQmJm51bGw9PT1uJiYoZS5fdW5pcXVlSWRlbnRpZmllcj1yfHx2b2lkIDApfXQuZG9tX3J1blJlbW92aW5nU3RlcHM9ZnVuY3Rpb24oZSx0KXt9LHQuZG9tX3J1bkNsb25pbmdTdGVwcz1mdW5jdGlvbihlLHQscixuKXt9LHQuZG9tX3J1bkFkb3B0aW5nU3RlcHM9ZnVuY3Rpb24oZSx0KXt9LHQuZG9tX3J1bkF0dHJpYnV0ZUNoYW5nZVN0ZXBzPWZ1bmN0aW9uKGUsdCxyLG8sYSl7dmFyIHMsdTtpLmRvbS5mZWF0dXJlcy5zbG90cyYmKGguY2FsbChlLGUsdCxyLG8sYSksYy5jYWxsKGUsZSx0LHIsbyxhKSkscC5jYWxsKGUsZSx0LG8sYSk7dHJ5e2Zvcih2YXIgbD1uKGUuX2F0dHJpYnV0ZUNoYW5nZVN0ZXBzKSxmPWwubmV4dCgpOyFmLmRvbmU7Zj1sLm5leHQoKSl7Zi52YWx1ZS5jYWxsKGUsZSx0LHIsbyxhKX19Y2F0Y2goZSl7cz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZiYmIWYuZG9uZSYmKHU9bC5yZXR1cm4pJiZ1LmNhbGwobCl9ZmluYWxseXtpZihzKXRocm93IHMuZXJyb3J9fX0sdC5kb21fcnVuSW5zZXJ0aW9uU3RlcHM9ZnVuY3Rpb24oZSl7fSx0LmRvbV9ydW5Ob2RlSXRlcmF0b3JQcmVSZW1vdmluZ1N0ZXBzPWZ1bmN0aW9uKGUsdCl7bC5jYWxsKGUsZSx0KX0sdC5kb21faGFzU3VwcG9ydGVkVG9rZW5zPWZ1bmN0aW9uKGUpe3JldHVybiB1LmhhcyhlKX0sdC5kb21fZ2V0U3VwcG9ydGVkVG9rZW5zPWZ1bmN0aW9uKGUpe3JldHVybiB1LmdldChlKXx8bmV3IFNldH0sdC5kb21fcnVuRXZlbnRDb25zdHJ1Y3RpbmdTdGVwcz1mdW5jdGlvbihlKXt9LHQuZG9tX3J1bkNoaWxkVGV4dENvbnRlbnRDaGFuZ2VTdGVwcz1mdW5jdGlvbihlKXt9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMTEpLG89cig0NiksYT1yKDQ0KSxzPXIoMTYpLHU9cig4NiksbD1yKDEyNCksYz1yKDgpLGg9cigxNCkscD1yKDU5KSxmPXIoMTMpLGQ9cigxOCksbT1yKDI3KSx5PXIoMjQpLHY9cig1NiksXz1yKDQwKSxnPXIoNjApLGI9cig2MSkseD1yKDgyKSx3PXIoMTkwKSxFPXIoODUpLEQ9cig1NSksUz1yKDE1KSxDPXIoNzkpLEE9cigyMSksTj1yKDI1KSxUPXIoODEpLE89cig1NyksRj1yKDQ1KSxrPXIoNTgpLFA9cig1KSxJPXIoMTI1KSxMPXIoMTI2KSxNPXIoNjIpLEI9cig0Myksaj1yKDM2KS5mb3JFYWNoLFI9TyhcImhpZGRlblwiKSx6PVAoXCJ0b1ByaW1pdGl2ZVwiKSxVPUIuc2V0LEc9Qi5nZXR0ZXJGb3IoXCJTeW1ib2xcIiksWD1PYmplY3QucHJvdG90eXBlLHE9aS5TeW1ib2wsVz1vKFwiSlNPTlwiLFwic3RyaW5naWZ5XCIpLEg9RC5mLEo9Uy5mLFk9dy5mLFY9Qy5mLEs9VChcInN5bWJvbHNcIiksJD1UKFwib3Atc3ltYm9sc1wiKSxRPVQoXCJzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5XCIpLFo9VChcInN5bWJvbC10by1zdHJpbmctcmVnaXN0cnlcIiksZWU9VChcIndrc1wiKSx0ZT1pLlFPYmplY3QscmU9IXRlfHwhdGUucHJvdG90eXBlfHwhdGUucHJvdG90eXBlLmZpbmRDaGlsZCxuZT1zJiZjKChmdW5jdGlvbigpe3JldHVybiA3IT1nKEooe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBKKHRoaXMsXCJhXCIse3ZhbHVlOjd9KS5hfX0pKS5hfSkpP2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1IKFgsdCk7biYmZGVsZXRlIFhbdF0sSihlLHQsciksbiYmZSE9PVgmJkooWCx0LG4pfTpKLGllPWZ1bmN0aW9uKGUsdCl7dmFyIHI9S1tlXT1nKHEucHJvdG90eXBlKTtyZXR1cm4gVShyLHt0eXBlOlwiU3ltYm9sXCIsdGFnOmUsZGVzY3JpcHRpb246dH0pLHN8fChyLmRlc2NyaXB0aW9uPXQpLHJ9LG9lPWw/ZnVuY3Rpb24oZSl7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QoZSlpbnN0YW5jZW9mIHF9LGFlPWZ1bmN0aW9uKGUsdCxyKXtlPT09WCYmYWUoJCx0LHIpLGQoZSk7dmFyIG49dih0LCEwKTtyZXR1cm4gZChyKSxoKEssbik/KHIuZW51bWVyYWJsZT8oaChlLFIpJiZlW1JdW25dJiYoZVtSXVtuXT0hMSkscj1nKHIse2VudW1lcmFibGU6XygwLCExKX0pKTooaChlLFIpfHxKKGUsUixfKDEse30pKSxlW1JdW25dPSEwKSxuZShlLG4scikpOkooZSxuLHIpfSxzZT1mdW5jdGlvbihlLHQpe2QoZSk7dmFyIHI9eSh0KSxuPWIocikuY29uY2F0KGhlKHIpKTtyZXR1cm4gaihuLChmdW5jdGlvbih0KXtzJiYhdWUuY2FsbChyLHQpfHxhZShlLHQsclt0XSl9KSksZX0sdWU9ZnVuY3Rpb24oZSl7dmFyIHQ9dihlLCEwKSxyPVYuY2FsbCh0aGlzLHQpO3JldHVybiEodGhpcz09PVgmJmgoSyx0KSYmIWgoJCx0KSkmJighKHJ8fCFoKHRoaXMsdCl8fCFoKEssdCl8fGgodGhpcyxSKSYmdGhpc1tSXVt0XSl8fHIpfSxsZT1mdW5jdGlvbihlLHQpe3ZhciByPXkoZSksbj12KHQsITApO2lmKHIhPT1YfHwhaChLLG4pfHxoKCQsbikpe3ZhciBpPUgocixuKTtyZXR1cm4haXx8IWgoSyxuKXx8aChyLFIpJiZyW1JdW25dfHwoaS5lbnVtZXJhYmxlPSEwKSxpfX0sY2U9ZnVuY3Rpb24oZSl7dmFyIHQ9WSh5KGUpKSxyPVtdO3JldHVybiBqKHQsKGZ1bmN0aW9uKGUpe2goSyxlKXx8aChGLGUpfHxyLnB1c2goZSl9KSkscn0saGU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZT09PVgscj1ZKHQ/JDp5KGUpKSxuPVtdO3JldHVybiBqKHIsKGZ1bmN0aW9uKGUpeyFoKEssZSl8fHQmJiFoKFgsZSl8fG4ucHVzaChLW2VdKX0pKSxufTsodXx8KE4oKHE9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgcSl0aHJvdyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3JcIik7dmFyIGU9YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP1N0cmluZyhhcmd1bWVudHNbMF0pOnZvaWQgMCx0PWsoZSkscj1mdW5jdGlvbihlKXt0aGlzPT09WCYmci5jYWxsKCQsZSksaCh0aGlzLFIpJiZoKHRoaXNbUl0sdCkmJih0aGlzW1JdW3RdPSExKSxuZSh0aGlzLHQsXygxLGUpKX07cmV0dXJuIHMmJnJlJiZuZShYLHQse2NvbmZpZ3VyYWJsZTohMCxzZXQ6cn0pLGllKHQsZSl9KS5wcm90b3R5cGUsXCJ0b1N0cmluZ1wiLChmdW5jdGlvbigpe3JldHVybiBHKHRoaXMpLnRhZ30pKSxOKHEsXCJ3aXRob3V0U2V0dGVyXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBpZShrKGUpLGUpfSkpLEMuZj11ZSxTLmY9YWUsRC5mPWxlLHguZj13LmY9Y2UsRS5mPWhlLEkuZj1mdW5jdGlvbihlKXtyZXR1cm4gaWUoUChlKSxlKX0scyYmKEoocS5wcm90b3R5cGUsXCJkZXNjcmlwdGlvblwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEcodGhpcykuZGVzY3JpcHRpb259fSksYXx8TihYLFwicHJvcGVydHlJc0VudW1lcmFibGVcIix1ZSx7dW5zYWZlOiEwfSkpKSxuKHtnbG9iYWw6ITAsd3JhcDohMCxmb3JjZWQ6IXUsc2hhbTohdX0se1N5bWJvbDpxfSksaihiKGVlKSwoZnVuY3Rpb24oZSl7TChlKX0pKSxuKHt0YXJnZXQ6XCJTeW1ib2xcIixzdGF0OiEwLGZvcmNlZDohdX0se2ZvcjpmdW5jdGlvbihlKXt2YXIgdD1TdHJpbmcoZSk7aWYoaChRLHQpKXJldHVybiBRW3RdO3ZhciByPXEodCk7cmV0dXJuIFFbdF09cixaW3JdPXQscn0sa2V5Rm9yOmZ1bmN0aW9uKGUpe2lmKCFvZShlKSl0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgYSBzeW1ib2xcIik7aWYoaChaLGUpKXJldHVybiBaW2VdfSx1c2VTZXR0ZXI6ZnVuY3Rpb24oKXtyZT0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7cmU9ITF9fSksbih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6IXUsc2hhbTohc30se2NyZWF0ZTpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P2coZSk6c2UoZyhlKSx0KX0sZGVmaW5lUHJvcGVydHk6YWUsZGVmaW5lUHJvcGVydGllczpzZSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6bGV9KSxuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDohdX0se2dldE93blByb3BlcnR5TmFtZXM6Y2UsZ2V0T3duUHJvcGVydHlTeW1ib2xzOmhlfSksbih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6YygoZnVuY3Rpb24oKXtFLmYoMSl9KSl9LHtnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ZnVuY3Rpb24oZSl7cmV0dXJuIEUuZihtKGUpKX19KSxXKSYmbih7dGFyZ2V0OlwiSlNPTlwiLHN0YXQ6ITAsZm9yY2VkOiF1fHxjKChmdW5jdGlvbigpe3ZhciBlPXEoKTtyZXR1cm5cIltudWxsXVwiIT1XKFtlXSl8fFwie31cIiE9Vyh7YTplfSl8fFwie31cIiE9VyhPYmplY3QoZSkpfSkpfSx7c3RyaW5naWZ5OmZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG4saT1bZV0sbz0xO2FyZ3VtZW50cy5sZW5ndGg+bzspaS5wdXNoKGFyZ3VtZW50c1tvKytdKTtpZihuPXQsKGYodCl8fHZvaWQgMCE9PWUpJiYhb2UoZSkpcmV0dXJuIHAodCl8fCh0PWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKHQ9bi5jYWxsKHRoaXMsZSx0KSksIW9lKHQpKXJldHVybiB0fSksaVsxXT10LFcuYXBwbHkobnVsbCxpKX19KTtxLnByb3RvdHlwZVt6XXx8QShxLnByb3RvdHlwZSx6LHEucHJvdG90eXBlLnZhbHVlT2YpLE0ocSxcIlN5bWJvbFwiKSxGW1JdPSEwfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMTYpLG89cigxMSksYT1yKDE0KSxzPXIoMTMpLHU9cigxNSkuZixsPXIoMTE5KSxjPW8uU3ltYm9sO2lmKGkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMmJighKFwiZGVzY3JpcHRpb25cImluIGMucHJvdG90eXBlKXx8dm9pZCAwIT09YygpLmRlc2NyaXB0aW9uKSl7dmFyIGg9e30scD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg8MXx8dm9pZCAwPT09YXJndW1lbnRzWzBdP3ZvaWQgMDpTdHJpbmcoYXJndW1lbnRzWzBdKSx0PXRoaXMgaW5zdGFuY2VvZiBwP25ldyBjKGUpOnZvaWQgMD09PWU/YygpOmMoZSk7cmV0dXJuXCJcIj09PWUmJihoW3RdPSEwKSx0fTtsKHAsYyk7dmFyIGY9cC5wcm90b3R5cGU9Yy5wcm90b3R5cGU7Zi5jb25zdHJ1Y3Rvcj1wO3ZhciBkPWYudG9TdHJpbmcsbT1cIlN5bWJvbCh0ZXN0KVwiPT1TdHJpbmcoYyhcInRlc3RcIikpLHk9L15TeW1ib2xcXCgoLiopXFwpW14pXSskLzt1KGYsXCJkZXNjcmlwdGlvblwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9cyh0aGlzKT90aGlzLnZhbHVlT2YoKTp0aGlzLHQ9ZC5jYWxsKGUpO2lmKGEoaCxlKSlyZXR1cm5cIlwiO3ZhciByPW0/dC5zbGljZSg3LC0xKTp0LnJlcGxhY2UoeSxcIiQxXCIpO3JldHVyblwiXCI9PT1yP3ZvaWQgMDpyfX0pLG4oe2dsb2JhbDohMCxmb3JjZWQ6ITB9LHtTeW1ib2w6cH0pfX0sZnVuY3Rpb24oZSx0LHIpe3IoMTI2KShcIml0ZXJhdG9yXCIpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksbz10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDYpLHM9cigyKSx1PXIoNzApLGw9cigzKSxjPXIoOSksaD1yKDApLHA9cigxNTIpLGY9cigxMiksZD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIHQ9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiB0Ll9wYXJlbnQ9bnVsbCx0Ll9maXJzdENoaWxkPW51bGwsdC5fbGFzdENoaWxkPW51bGwsdC5fcHJldmlvdXNTaWJsaW5nPW51bGwsdC5fbmV4dFNpYmxpbmc9bnVsbCx0fXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiX2NoaWxkTm9kZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19jaGlsZE5vZGVzfHwodGhpcy5fX2NoaWxkTm9kZXM9aC5jcmVhdGVfbm9kZUxpc3QodGhpcykpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIl9ub2RlRG9jdW1lbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25vZGVEb2N1bWVudE92ZXJyaWRlfHxhLmRvbS53aW5kb3cuX2Fzc29jaWF0ZWREb2N1bWVudH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX25vZGVEb2N1bWVudE92ZXJyaWRlPWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3RcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0fHwodGhpcy5fX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3Q9W10pfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5vZGVUeXBlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ub2RlVHlwZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJub2RlTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5HdWFyZC5pc0VsZW1lbnROb2RlKHRoaXMpP3RoaXMuX2h0bWxVcHBlcmNhc2VkUXVhbGlmaWVkTmFtZTpsLkd1YXJkLmlzQXR0ck5vZGUodGhpcyk/dGhpcy5fcXVhbGlmaWVkTmFtZTpsLkd1YXJkLmlzRXhjbHVzaXZlVGV4dE5vZGUodGhpcyk/XCIjdGV4dFwiOmwuR3VhcmQuaXNDREFUQVNlY3Rpb25Ob2RlKHRoaXMpP1wiI2NkYXRhLXNlY3Rpb25cIjpsLkd1YXJkLmlzUHJvY2Vzc2luZ0luc3RydWN0aW9uTm9kZSh0aGlzKT90aGlzLl90YXJnZXQ6bC5HdWFyZC5pc0NvbW1lbnROb2RlKHRoaXMpP1wiI2NvbW1lbnRcIjpsLkd1YXJkLmlzRG9jdW1lbnROb2RlKHRoaXMpP1wiI2RvY3VtZW50XCI6bC5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUodGhpcyk/dGhpcy5fbmFtZTpsLkd1YXJkLmlzRG9jdW1lbnRGcmFnbWVudE5vZGUodGhpcyk/XCIjZG9jdW1lbnQtZnJhZ21lbnRcIjpcIlwifSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImJhc2VVUklcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAudXJsU2VyaWFsaXplcih0aGlzLl9ub2RlRG9jdW1lbnQuX1VSTCl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiaXNDb25uZWN0ZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGwuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzKSYmaC5zaGFkb3dUcmVlX2lzQ29ubmVjdGVkKHRoaXMpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm93bmVyRG9jdW1lbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25vZGVUeXBlPT09cy5Ob2RlVHlwZS5Eb2N1bWVudD9udWxsOnRoaXMuX25vZGVEb2N1bWVudH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5nZXRSb290Tm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gaC50cmVlX3Jvb3ROb2RlKHRoaXMsISFlJiZlLmNvbXBvc2VkKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicGFyZW50Tm9kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbm9kZVR5cGU9PT1zLk5vZGVUeXBlLkF0dHJpYnV0ZT9udWxsOnRoaXMuX3BhcmVudH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwYXJlbnRFbGVtZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wYXJlbnQmJmwuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzLl9wYXJlbnQpP3RoaXMuX3BhcmVudDpudWxsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmhhc0NoaWxkTm9kZXM9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuX2ZpcnN0Q2hpbGR9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNoaWxkTm9kZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NoaWxkTm9kZXN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZmlyc3RDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZmlyc3RDaGlsZH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJsYXN0Q2hpbGRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xhc3RDaGlsZH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwcmV2aW91c1NpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ByZXZpb3VzU2libGluZ30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJuZXh0U2libGluZ1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmV4dFNpYmxpbmd9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibm9kZVZhbHVlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBsLkd1YXJkLmlzQXR0ck5vZGUodGhpcyk/dGhpcy5fdmFsdWU6bC5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMpP3RoaXMuX2RhdGE6bnVsbH0sc2V0OmZ1bmN0aW9uKGUpe251bGw9PT1lJiYoZT1cIlwiKSxsLkd1YXJkLmlzQXR0ck5vZGUodGhpcyk/aC5hdHRyX3NldEFuRXhpc3RpbmdBdHRyaWJ1dGVWYWx1ZSh0aGlzLGUpOmwuR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzKSYmaC5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHRoaXMsMCx0aGlzLl9kYXRhLmxlbmd0aCxlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ0ZXh0Q29udGVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5HdWFyZC5pc0RvY3VtZW50RnJhZ21lbnROb2RlKHRoaXMpfHxsLkd1YXJkLmlzRWxlbWVudE5vZGUodGhpcyk/aC50ZXh0X2Rlc2NlbmRhbnRUZXh0Q29udGVudCh0aGlzKTpsLkd1YXJkLmlzQXR0ck5vZGUodGhpcyk/dGhpcy5fdmFsdWU6bC5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMpP3RoaXMuX2RhdGE6bnVsbH0sc2V0OmZ1bmN0aW9uKGUpe251bGw9PT1lJiYoZT1cIlwiKSxsLkd1YXJkLmlzRG9jdW1lbnRGcmFnbWVudE5vZGUodGhpcyl8fGwuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzKT9oLm5vZGVfc3RyaW5nUmVwbGFjZUFsbChlLHRoaXMpOmwuR3VhcmQuaXNBdHRyTm9kZSh0aGlzKT9oLmF0dHJfc2V0QW5FeGlzdGluZ0F0dHJpYnV0ZVZhbHVlKHRoaXMsZSk6bC5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMpJiZoLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEodGhpcywwLGgudHJlZV9ub2RlTGVuZ3RoKHRoaXMpLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLm5vcm1hbGl6ZT1mdW5jdGlvbigpe2Zvcih2YXIgZSx0LHIsbixpPVtdLHM9aC50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUodGhpcywhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIGwuR3VhcmQuaXNFeGNsdXNpdmVUZXh0Tm9kZShlKX0pKTtudWxsIT09czspaS5wdXNoKHMpLHM9aC50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZSh0aGlzLHMsITEsITEsKGZ1bmN0aW9uKGUpe3JldHVybiBsLkd1YXJkLmlzRXhjbHVzaXZlVGV4dE5vZGUoZSl9KSk7Zm9yKHZhciB1PTA7dTxpLmxlbmd0aDt1Kyspe3ZhciBjPWlbdV07aWYobnVsbCE9PWMuX3BhcmVudCl7dmFyIHA9aC50cmVlX25vZGVMZW5ndGgoYyk7aWYoMCE9PXApe3ZhciBmPVtdLGQ9XCJcIjt0cnl7Zm9yKHZhciBtPShlPXZvaWQgMCxvKGgudGV4dF9jb250aWd1b3VzRXhjbHVzaXZlVGV4dE5vZGVzKGMpKSkseT1tLm5leHQoKTsheS5kb25lO3k9bS5uZXh0KCkpe3ZhciB2PXkudmFsdWU7Zi5wdXNoKHYpLGQrPXYuX2RhdGF9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e3kmJiF5LmRvbmUmJih0PW0ucmV0dXJuKSYmdC5jYWxsKG0pfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1pZihoLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEoYyxwLDAsZCksMCE9PWEuZG9tLnJhbmdlTGlzdC5zaXplKWZvcih2YXIgXz1jLl9uZXh0U2libGluZztudWxsIT09XyYmbC5HdWFyZC5pc0V4Y2x1c2l2ZVRleHROb2RlKF8pOyl7dmFyIGc9XyxiPWgudHJlZV9pbmRleChnKTt0cnl7Zm9yKHZhciB4PShyPXZvaWQgMCxvKGEuZG9tLnJhbmdlTGlzdCkpLHc9eC5uZXh0KCk7IXcuZG9uZTt3PXgubmV4dCgpKXt2YXIgRT13LnZhbHVlO0UuX3N0YXJ0WzBdPT09ZyYmKEUuX3N0YXJ0WzBdPWMsRS5fc3RhcnRbMV0rPXApLEUuX2VuZFswXT09PWcmJihFLl9lbmRbMF09YyxFLl9lbmRbMV0rPXApLEUuX3N0YXJ0WzBdPT09Zy5fcGFyZW50JiZFLl9zdGFydFsxXT09PWImJihFLl9zdGFydFswXT1jLEUuX3N0YXJ0WzFdPXApLEUuX2VuZFswXT09PWcuX3BhcmVudCYmRS5fZW5kWzFdPT09YiYmKEUuX2VuZFswXT1jLEUuX2VuZFsxXT1wKX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dyYmIXcuZG9uZSYmKG49eC5yZXR1cm4pJiZuLmNhbGwoeCl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXArPWgudHJlZV9ub2RlTGVuZ3RoKF8pLF89Xy5fbmV4dFNpYmxpbmd9Zm9yKHZhciBEPTA7RDxmLmxlbmd0aDtEKyspe251bGwhPT0odj1mW0RdKS5fcGFyZW50JiZoLm11dGF0aW9uX3JlbW92ZSh2LHYuX3BhcmVudCl9fWVsc2UgaC5tdXRhdGlvbl9yZW1vdmUoYyxjLl9wYXJlbnQpfX19LHQucHJvdG90eXBlLmNsb25lTm9kZT1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lJiYoZT0hMSksbC5HdWFyZC5pc1NoYWRvd1Jvb3QodGhpcykpdGhyb3cgbmV3IGMuTm90U3VwcG9ydGVkRXJyb3I7cmV0dXJuIGgubm9kZV9jbG9uZSh0aGlzLG51bGwsZSl9LHQucHJvdG90eXBlLmlzRXF1YWxOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1udWxsKSxudWxsIT09ZSYmaC5ub2RlX2VxdWFscyh0aGlzLGUpfSx0LnByb3RvdHlwZS5pc1NhbWVOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1udWxsKSx0aGlzPT09ZX0sdC5wcm90b3R5cGUuY29tcGFyZURvY3VtZW50UG9zaXRpb249ZnVuY3Rpb24oZSl7aWYoZT09PXRoaXMpcmV0dXJuIDA7dmFyIHQ9ZSxyPXRoaXMsbj1udWxsLGk9bnVsbDtpZihsLkd1YXJkLmlzQXR0ck5vZGUodCkmJih0PShuPXQpLl9lbGVtZW50KSxsLkd1YXJkLmlzQXR0ck5vZGUocikmJihyPShpPXIpLl9lbGVtZW50LG4mJnQmJnQ9PT1yKSlmb3IodmFyIG89MDtvPHIuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO28rKyl7dmFyIHU9ci5fYXR0cmlidXRlTGlzdFtvXTtpZihoLm5vZGVfZXF1YWxzKHUsbikpcmV0dXJuIHMuUG9zaXRpb24uSW1wbGVtZW50YXRpb25TcGVjaWZpY3xzLlBvc2l0aW9uLlByZWNlZGluZztpZihoLm5vZGVfZXF1YWxzKHUsaSkpcmV0dXJuIHMuUG9zaXRpb24uSW1wbGVtZW50YXRpb25TcGVjaWZpY3xzLlBvc2l0aW9uLkZvbGxvd2luZ31yZXR1cm4gbnVsbD09PXR8fG51bGw9PT1yfHxoLnRyZWVfcm9vdE5vZGUodCkhPT1oLnRyZWVfcm9vdE5vZGUocik/cy5Qb3NpdGlvbi5EaXNjb25uZWN0ZWR8cy5Qb3NpdGlvbi5JbXBsZW1lbnRhdGlvblNwZWNpZmljfChhLmRvbS5jb21wYXJlQ2FjaGUuY2hlY2sodGhpcyxlKT9zLlBvc2l0aW9uLlByZWNlZGluZzpzLlBvc2l0aW9uLkZvbGxvd2luZyk6IW4mJmgudHJlZV9pc0FuY2VzdG9yT2Yocix0KXx8aSYmdD09PXI/cy5Qb3NpdGlvbi5Db250YWluc3xzLlBvc2l0aW9uLlByZWNlZGluZzohaSYmaC50cmVlX2lzRGVzY2VuZGFudE9mKHIsdCl8fG4mJnQ9PT1yP3MuUG9zaXRpb24uQ29udGFpbmVkQnl8cy5Qb3NpdGlvbi5Gb2xsb3dpbmc6aC50cmVlX2lzUHJlY2VkaW5nKHIsdCk/cy5Qb3NpdGlvbi5QcmVjZWRpbmc6cy5Qb3NpdGlvbi5Gb2xsb3dpbmd9LHQucHJvdG90eXBlLmNvbnRhaW5zPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZSYmaC50cmVlX2lzRGVzY2VuZGFudE9mKHRoaXMsZSwhMCl9LHQucHJvdG90eXBlLmxvb2t1cFByZWZpeD1mdW5jdGlvbihlKXtyZXR1cm4gZT9sLkd1YXJkLmlzRWxlbWVudE5vZGUodGhpcyk/aC5ub2RlX2xvY2F0ZUFOYW1lc3BhY2VQcmVmaXgodGhpcyxlKTpsLkd1YXJkLmlzRG9jdW1lbnROb2RlKHRoaXMpP251bGw9PT10aGlzLmRvY3VtZW50RWxlbWVudD9udWxsOmgubm9kZV9sb2NhdGVBTmFtZXNwYWNlUHJlZml4KHRoaXMuZG9jdW1lbnRFbGVtZW50LGUpOmwuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKHRoaXMpfHxsLkd1YXJkLmlzRG9jdW1lbnRGcmFnbWVudE5vZGUodGhpcyk/bnVsbDpsLkd1YXJkLmlzQXR0ck5vZGUodGhpcyk/bnVsbD09PXRoaXMuX2VsZW1lbnQ/bnVsbDpoLm5vZGVfbG9jYXRlQU5hbWVzcGFjZVByZWZpeCh0aGlzLl9lbGVtZW50LGUpOm51bGwhPT10aGlzLl9wYXJlbnQmJmwuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzLl9wYXJlbnQpP2gubm9kZV9sb2NhdGVBTmFtZXNwYWNlUHJlZml4KHRoaXMuX3BhcmVudCxlKTpudWxsOm51bGx9LHQucHJvdG90eXBlLmxvb2t1cE5hbWVzcGFjZVVSST1mdW5jdGlvbihlKXtyZXR1cm4gaC5ub2RlX2xvY2F0ZUFOYW1lc3BhY2UodGhpcyxlfHxudWxsKX0sdC5wcm90b3R5cGUuaXNEZWZhdWx0TmFtZXNwYWNlPWZ1bmN0aW9uKGUpe3JldHVybiBlfHwoZT1udWxsKSxoLm5vZGVfbG9jYXRlQU5hbWVzcGFjZSh0aGlzLG51bGwpPT09ZX0sdC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgubXV0YXRpb25fcHJlSW5zZXJ0KGUsdGhpcyx0KX0sdC5wcm90b3R5cGUuYXBwZW5kQ2hpbGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGgubXV0YXRpb25fYXBwZW5kKGUsdGhpcyl9LHQucHJvdG90eXBlLnJlcGxhY2VDaGlsZD1mdW5jdGlvbihlLHQpe3JldHVybiBoLm11dGF0aW9uX3JlcGxhY2UodCxlLHRoaXMpfSx0LnByb3RvdHlwZS5yZW1vdmVDaGlsZD1mdW5jdGlvbihlKXtyZXR1cm4gaC5tdXRhdGlvbl9wcmVSZW1vdmUoZSx0aGlzKX0sdC5wcm90b3R5cGUuX2dldFRoZVBhcmVudD1mdW5jdGlvbihlKXtyZXR1cm4gbC5HdWFyZC5pc1Nsb3RhYmxlKHRoaXMpJiZoLnNoYWRvd1RyZWVfaXNBc3NpZ25lZCh0aGlzKT90aGlzLl9hc3NpZ25lZFNsb3Q6dGhpcy5fcGFyZW50fSx0LkVMRU1FTlRfTk9ERT0xLHQuQVRUUklCVVRFX05PREU9Mix0LlRFWFRfTk9ERT0zLHQuQ0RBVEFfU0VDVElPTl9OT0RFPTQsdC5FTlRJVFlfUkVGRVJFTkNFX05PREU9NSx0LkVOVElUWV9OT0RFPTYsdC5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU9Nyx0LkNPTU1FTlRfTk9ERT04LHQuRE9DVU1FTlRfTk9ERT05LHQuRE9DVU1FTlRfVFlQRV9OT0RFPTEwLHQuRE9DVU1FTlRfRlJBR01FTlRfTk9ERT0xMSx0Lk5PVEFUSU9OX05PREU9MTIsdC5ET0NVTUVOVF9QT1NJVElPTl9ESVNDT05ORUNURUQ9MSx0LkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORz0yLHQuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HPTQsdC5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUz04LHQuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZPTE2LHQuRE9DVU1FTlRfUE9TSVRJT05fSU1QTEVNRU5UQVRJT05fU1BFQ0lGSUM9MzIsdH0odS5FdmVudFRhcmdldEltcGwpO3QuTm9kZUltcGw9ZCxkLnByb3RvdHlwZS5fY2hpbGRyZW49bmV3IGwuRW1wdHlTZXQsZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJFTEVNRU5UX05PREVcIiwxKSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkFUVFJJQlVURV9OT0RFXCIsMiksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJURVhUX05PREVcIiwzKSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkNEQVRBX1NFQ1RJT05fTk9ERVwiLDQpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRU5USVRZX1JFRkVSRU5DRV9OT0RFXCIsNSksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJFTlRJVFlfTk9ERVwiLDYpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFXCIsNyksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJDT01NRU5UX05PREVcIiw4KSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkRPQ1VNRU5UX05PREVcIiw5KSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkRPQ1VNRU5UX1RZUEVfTk9ERVwiLDEwKSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREVcIiwxMSksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJOT1RBVElPTl9OT0RFXCIsMTIpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfUE9TSVRJT05fRElTQ09OTkVDVEVEXCIsMSksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkdcIiwyKSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lOR1wiLDQpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTlNcIiw4KSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWVwiLDE2KSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkRPQ1VNRU5UX1BPU0lUSU9OX0lNUExFTUVOVEFUSU9OX1NQRUNJRklDXCIsMzIpfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihudWxsPT1lKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiK2UpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoODcpLGk9cig0MSksbz1yKDI3KSxhPXIoMjYpLHM9cigxMjgpLHU9W10ucHVzaCxsPWZ1bmN0aW9uKGUpe3ZhciB0PTE9PWUscj0yPT1lLGw9Mz09ZSxjPTQ9PWUsaD02PT1lLHA9NT09ZXx8aDtyZXR1cm4gZnVuY3Rpb24oZixkLG0seSl7Zm9yKHZhciB2LF8sZz1vKGYpLGI9aShnKSx4PW4oZCxtLDMpLHc9YShiLmxlbmd0aCksRT0wLEQ9eXx8cyxTPXQ/RChmLHcpOnI/RChmLDApOnZvaWQgMDt3PkU7RSsrKWlmKChwfHxFIGluIGIpJiYoXz14KHY9YltFXSxFLGcpLGUpKWlmKHQpU1tFXT1fO2Vsc2UgaWYoXylzd2l0Y2goZSl7Y2FzZSAzOnJldHVybiEwO2Nhc2UgNTpyZXR1cm4gdjtjYXNlIDY6cmV0dXJuIEU7Y2FzZSAyOnUuY2FsbChTLHYpfWVsc2UgaWYoYylyZXR1cm4hMTtyZXR1cm4gaD8tMTpsfHxjP2M6U319O2UuZXhwb3J0cz17Zm9yRWFjaDpsKDApLG1hcDpsKDEpLGZpbHRlcjpsKDIpLHNvbWU6bCgzKSxldmVyeTpsKDQpLGZpbmQ6bCg1KSxmaW5kSW5kZXg6bCg2KX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxpPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxvPXRoaXMmJnRoaXMuX19zcHJlYWR8fGZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWU9ZS5jb25jYXQoaShhcmd1bWVudHNbdF0pKTtyZXR1cm4gZX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9cig2KSxzPXIoOSksdT1yKDIpLGw9cigzKSxjPXIoMSksaD1yKDcpLHA9cig3MyksZj1yKDE3KSxkPXIoMTcyKSxtPXIoNzIpLHk9cig1MSksdj1yKDMwKSxfPXIoMTA2KTtmdW5jdGlvbiBnKGUsdCxyKXt2YXIgaSxvLGEsbCxjLGgscCxkLG09dC5fbm9kZVR5cGUseT1lLl9ub2RlVHlwZSx2PXI/ci5fbm9kZVR5cGU6bnVsbDtpZihtIT09dS5Ob2RlVHlwZS5Eb2N1bWVudCYmbSE9PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCYmbSE9PXUuTm9kZVR5cGUuRWxlbWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJPbmx5IGRvY3VtZW50LCBkb2N1bWVudCBmcmFnbWVudCBhbmQgZWxlbWVudCBub2RlcyBjYW4gY29udGFpbiBjaGlsZCBub2Rlcy4gUGFyZW50IG5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7aWYoZi50cmVlX2lzSG9zdEluY2x1ZGluZ0FuY2VzdG9yT2YodCxlLCEwKSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJUaGUgbm9kZSB0byBiZSBpbnNlcnRlZCBjYW5ub3QgYmUgYW4gaW5jbHVzaXZlIGFuY2VzdG9yIG9mIHBhcmVudCBub2RlLiBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIsIHBhcmVudCBub2RlIGlzIFwiK3Qubm9kZU5hbWUrXCIuXCIpO2lmKG51bGwhPT1yJiZyLl9wYXJlbnQhPT10KXRocm93IG5ldyBzLk5vdEZvdW5kRXJyb3IoXCJUaGUgcmVmZXJlbmNlIGNoaWxkIG5vZGUgY2Fubm90IGJlIGZvdW5kIHVuZGVyIHBhcmVudCBub2RlLiBDaGlsZCBub2RlIGlzIFwiK3Iubm9kZU5hbWUrXCIsIHBhcmVudCBub2RlIGlzIFwiK3Qubm9kZU5hbWUrXCIuXCIpO2lmKHkhPT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQmJnkhPT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSYmeSE9PXUuTm9kZVR5cGUuRWxlbWVudCYmeSE9PXUuTm9kZVR5cGUuVGV4dCYmeSE9PXUuTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uJiZ5IT09dS5Ob2RlVHlwZS5DRGF0YSYmeSE9PXUuTm9kZVR5cGUuQ29tbWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJPbmx5IGRvY3VtZW50IGZyYWdtZW50LCBkb2N1bWVudCB0eXBlLCBlbGVtZW50LCB0ZXh0LCBwcm9jZXNzaW5nIGluc3RydWN0aW9uLCBjZGF0YSBzZWN0aW9uIG9yIGNvbW1lbnQgbm9kZXMgY2FuIGJlIGluc2VydGVkLiBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIuXCIpO2lmKHk9PT11Lk5vZGVUeXBlLlRleHQmJm09PT11Lk5vZGVUeXBlLkRvY3VtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYSB0ZXh0IG5vZGUgYXMgYSBjaGlsZCBvZiBhIGRvY3VtZW50IG5vZGUuIE5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIi5cIik7aWYoeT09PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlJiZtIT09dS5Ob2RlVHlwZS5Eb2N1bWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJBIGRvY3VtZW50IHR5cGUgbm9kZSBjYW4gb25seSBiZSBpbnNlcnRlZCB1bmRlciBhIGRvY3VtZW50IG5vZGUuIFBhcmVudCBub2RlIGlzIFwiK3Qubm9kZU5hbWUrXCIuXCIpO2lmKG09PT11Lk5vZGVUeXBlLkRvY3VtZW50KWlmKHk9PT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQpe3ZhciBfPTA7dHJ5e2Zvcih2YXIgZz1uKGUuX2NoaWxkcmVuKSxiPWcubmV4dCgpOyFiLmRvbmU7Yj1nLm5leHQoKSl7dmFyIHg9Yi52YWx1ZTtpZih4Ll9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRWxlbWVudClfKys7ZWxzZSBpZih4Ll9ub2RlVHlwZT09PXUuTm9kZVR5cGUuVGV4dCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IHRleHQgYSBub2RlIGFzIGEgY2hpbGQgb2YgYSBkb2N1bWVudCBub2RlLiBOb2RlIGlzIFwiK3gubm9kZU5hbWUrXCIuXCIpfX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtiJiYhYi5kb25lJiYobz1nLnJldHVybikmJm8uY2FsbChnKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19aWYoXz4xKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkEgZG9jdW1lbnQgbm9kZSBjYW4gb25seSBoYXZlIG9uZSBkb2N1bWVudCBlbGVtZW50IG5vZGUuIERvY3VtZW50IGZyYWdtZW50IHRvIGJlIGluc2VydGVkIGhhcyBcIitfK1wiIGVsZW1lbnQgbm9kZXMuXCIpO2lmKDE9PT1fKXt0cnl7Zm9yKHZhciB3PW4odC5fY2hpbGRyZW4pLEU9dy5uZXh0KCk7IUUuZG9uZTtFPXcubmV4dCgpKXtpZihFLnZhbHVlLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRWxlbWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJUaGUgZG9jdW1lbnQgbm9kZSBhbHJlYWR5IGhhcyBhIGRvY3VtZW50IGVsZW1lbnQgbm9kZS5cIil9fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0UmJiFFLmRvbmUmJihsPXcucmV0dXJuKSYmbC5jYWxsKHcpfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX1pZihyKXtpZih2PT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhbiBlbGVtZW50IG5vZGUgYmVmb3JlIGEgZG9jdW1lbnQgdHlwZSBub2RlLlwiKTtmb3IodmFyIEQ9ci5fbmV4dFNpYmxpbmc7RDspe2lmKEQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhbiBlbGVtZW50IG5vZGUgYmVmb3JlIGEgZG9jdW1lbnQgdHlwZSBub2RlLlwiKTtEPUQuX25leHRTaWJsaW5nfX19fWVsc2UgaWYoeT09PXUuTm9kZVR5cGUuRWxlbWVudCl7dHJ5e2Zvcih2YXIgUz1uKHQuX2NoaWxkcmVuKSxDPVMubmV4dCgpOyFDLmRvbmU7Qz1TLm5leHQoKSl7aWYoQy52YWx1ZS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkVsZW1lbnQpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiRG9jdW1lbnQgYWxyZWFkeSBoYXMgYSBkb2N1bWVudCBlbGVtZW50IG5vZGUuIE5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIi5cIil9fWNhdGNoKGUpe2M9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0MmJiFDLmRvbmUmJihoPVMucmV0dXJuKSYmaC5jYWxsKFMpfWZpbmFsbHl7aWYoYyl0aHJvdyBjLmVycm9yfX1pZihyKXtpZih2PT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhbiBlbGVtZW50IG5vZGUgYmVmb3JlIGEgZG9jdW1lbnQgdHlwZSBub2RlLiBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIuXCIpO2ZvcihEPXIuX25leHRTaWJsaW5nO0Q7KXtpZihELl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYW4gZWxlbWVudCBub2RlIGJlZm9yZSBhIGRvY3VtZW50IHR5cGUgbm9kZS4gTm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLlwiKTtEPUQuX25leHRTaWJsaW5nfX19ZWxzZSBpZih5PT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpe3RyeXtmb3IodmFyIEE9bih0Ll9jaGlsZHJlbiksTj1BLm5leHQoKTshTi5kb25lO049QS5uZXh0KCkpe2lmKE4udmFsdWUuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiRG9jdW1lbnQgYWxyZWFkeSBoYXMgYSBkb2N1bWVudCB0eXBlIG5vZGUuIE5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIi5cIil9fWNhdGNoKGUpe3A9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e04mJiFOLmRvbmUmJihkPUEucmV0dXJuKSYmZC5jYWxsKEEpfWZpbmFsbHl7aWYocCl0aHJvdyBwLmVycm9yfX1pZihyKWZvcih2YXIgVD1yLl9wcmV2aW91c1NpYmxpbmc7VDspe2lmKFQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYSBkb2N1bWVudCB0eXBlIG5vZGUgYmVmb3JlIGFuIGVsZW1lbnQgbm9kZS4gTm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLlwiKTtUPVQuX3ByZXZpb3VzU2libGluZ31lbHNlIGZvcihUPXQuX2ZpcnN0Q2hpbGQ7VDspe2lmKFQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYSBkb2N1bWVudCB0eXBlIG5vZGUgYmVmb3JlIGFuIGVsZW1lbnQgbm9kZS4gTm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLlwiKTtUPVQuX25leHRTaWJsaW5nfX19ZnVuY3Rpb24gYihlLHQscil7ZyhlLHQscik7dmFyIG49cjtyZXR1cm4gbj09PWUmJihuPWUuX25leHRTaWJsaW5nKSxfLmRvY3VtZW50X2Fkb3B0KGUsdC5fbm9kZURvY3VtZW50KSx4KGUsdCxuKSxlfWZ1bmN0aW9uIHgoZSx0LHIsaSl7dmFyIHMsZDtpZihudWxsIT09cnx8ZS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQpe3ZhciBfPWUuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50P2UuX2NoaWxkcmVuLnNpemU6MTtpZihudWxsIT09ciYmMCE9PWEuZG9tLnJhbmdlTGlzdC5zaXplKXt2YXIgZz1mLnRyZWVfaW5kZXgocik7dHJ5e2Zvcih2YXIgYj1uKGEuZG9tLnJhbmdlTGlzdCkseD1iLm5leHQoKTsheC5kb25lO3g9Yi5uZXh0KCkpe3ZhciBFPXgudmFsdWU7RS5fc3RhcnRbMF09PT10JiZFLl9zdGFydFsxXT5nJiYoRS5fc3RhcnRbMV0rPV8pLEUuX2VuZFswXT09PXQmJkUuX2VuZFsxXT5nJiYoRS5fZW5kWzFdKz1fKX19Y2F0Y2goZSl7cz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7eCYmIXguZG9uZSYmKGQ9Yi5yZXR1cm4pJiZkLmNhbGwoYil9ZmluYWxseXtpZihzKXRocm93IHMuZXJyb3J9fX12YXIgRD1lLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudD9uZXcoQXJyYXkuYmluZC5hcHBseShBcnJheSxvKFt2b2lkIDBdLGUuX2NoaWxkcmVuKSkpOltlXTtpZihlLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudClmb3IoO2UuX2ZpcnN0Q2hpbGQ7KXcoZS5fZmlyc3RDaGlsZCxlLCEwKTthLmRvbS5mZWF0dXJlcy5tdXRhdGlvbk9ic2VydmVycyYmZS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQmJnkub2JzZXJ2ZXJfcXVldWVUcmVlTXV0YXRpb25SZWNvcmQoZSxbXSxELG51bGwsbnVsbCk7Zm9yKHZhciBTPXI/ci5fcHJldmlvdXNTaWJsaW5nOnQuX2xhc3RDaGlsZCxDPW51bGw9PT1yPy0xOmYudHJlZV9pbmRleChyKSxBPTA7QTxELmxlbmd0aDtBKyspe3ZhciBOPURbQV07aWYobC5HdWFyZC5pc0VsZW1lbnROb2RlKE4pJiYobC5HdWFyZC5pc0RvY3VtZW50Tm9kZSh0KSYmKHQuX2RvY3VtZW50RWxlbWVudD1OKSxOLl9ub2RlRG9jdW1lbnQuX2hhc05hbWVzcGFjZXN8fG51bGw9PT1OLl9uYW1lc3BhY2UmJm51bGw9PT1OLl9uYW1lc3BhY2VQcmVmaXh8fChOLl9ub2RlRG9jdW1lbnQuX2hhc05hbWVzcGFjZXM9ITApKSxOLl9wYXJlbnQ9dCxudWxsPT09cj9oLnNldC5hcHBlbmQodC5fY2hpbGRyZW4sTik6KGguc2V0Lmluc2VydCh0Ll9jaGlsZHJlbixOLEMpLEMrKyksbnVsbD09PXQuX2ZpcnN0Q2hpbGQpTi5fcHJldmlvdXNTaWJsaW5nPW51bGwsTi5fbmV4dFNpYmxpbmc9bnVsbCx0Ll9maXJzdENoaWxkPU4sdC5fbGFzdENoaWxkPU47ZWxzZXt2YXIgVD1yP3IuX3ByZXZpb3VzU2libGluZzp0Ll9sYXN0Q2hpbGQsTz1yfHxudWxsO04uX3ByZXZpb3VzU2libGluZz1ULE4uX25leHRTaWJsaW5nPU8sVCYmKFQuX25leHRTaWJsaW5nPU4pLE8mJihPLl9wcmV2aW91c1NpYmxpbmc9TiksVHx8KHQuX2ZpcnN0Q2hpbGQ9TiksT3x8KHQuX2xhc3RDaGlsZD1OKX1hLmRvbS5mZWF0dXJlcy5zbG90cyYmbnVsbCE9PXQuX3NoYWRvd1Jvb3QmJmwuR3VhcmQuaXNTbG90YWJsZShOKSYmbS5zaGFkb3dUcmVlX2Fzc2lnbkFTbG90KE4pLGEuZG9tLmZlYXR1cmVzLnN0ZXBzJiZsLkd1YXJkLmlzVGV4dE5vZGUoTikmJnYuZG9tX3J1bkNoaWxkVGV4dENvbnRlbnRDaGFuZ2VTdGVwcyh0KSxhLmRvbS5mZWF0dXJlcy5zbG90cyYmbC5HdWFyZC5pc1NoYWRvd1Jvb3QoZi50cmVlX3Jvb3ROb2RlKHQpKSYmbC5HdWFyZC5pc1Nsb3QodCkmJmMuaXNFbXB0eSh0Ll9hc3NpZ25lZE5vZGVzKSYmbS5zaGFkb3dUcmVlX3NpZ25hbEFTbG90Q2hhbmdlKHQpLGEuZG9tLmZlYXR1cmVzLnNsb3RzJiZtLnNoYWRvd1RyZWVfYXNzaWduU2xvdGFibGVzRm9yQVRyZWUoZi50cmVlX3Jvb3ROb2RlKE4pKTtmb3IodmFyIEY9Zi50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUoTiwhMCwhMCk7bnVsbCE9PUY7KWEuZG9tLmZlYXR1cmVzLnN0ZXBzJiZ2LmRvbV9ydW5JbnNlcnRpb25TdGVwcyhGKSxhLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmbC5HdWFyZC5pc0VsZW1lbnROb2RlKEYpJiZtLnNoYWRvd1RyZWVfaXNDb25uZWN0ZWQoRikmJihsLkd1YXJkLmlzQ3VzdG9tRWxlbWVudE5vZGUoRik/cC5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudENhbGxiYWNrUmVhY3Rpb24oRixcImNvbm5lY3RlZENhbGxiYWNrXCIsW10pOnAuY3VzdG9tRWxlbWVudF90cnlUb1VwZ3JhZGUoRikpLEY9Zi50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZShOLEYsITAsITApfWEuZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiYoaXx8eS5vYnNlcnZlcl9xdWV1ZVRyZWVNdXRhdGlvblJlY29yZCh0LEQsW10sUyxyKSl9ZWxzZSFmdW5jdGlvbihlLHQscil7dmFyIG49dC5fbGFzdENoaWxkO2wuR3VhcmQuaXNFbGVtZW50Tm9kZShlKSYmKGwuR3VhcmQuaXNEb2N1bWVudE5vZGUodCkmJih0Ll9kb2N1bWVudEVsZW1lbnQ9ZSksZS5fbm9kZURvY3VtZW50Ll9oYXNOYW1lc3BhY2VzfHxudWxsPT09ZS5fbmFtZXNwYWNlJiZudWxsPT09ZS5fbmFtZXNwYWNlUHJlZml4fHwoZS5fbm9kZURvY3VtZW50Ll9oYXNOYW1lc3BhY2VzPSEwKSk7aWYoZS5fcGFyZW50PXQsdC5fY2hpbGRyZW4uYWRkKGUpLG51bGw9PT10Ll9maXJzdENoaWxkKWUuX3ByZXZpb3VzU2libGluZz1udWxsLGUuX25leHRTaWJsaW5nPW51bGwsdC5fZmlyc3RDaGlsZD1lLHQuX2xhc3RDaGlsZD1lO2Vsc2V7dmFyIGk9dC5fbGFzdENoaWxkO2UuX3ByZXZpb3VzU2libGluZz1pLGUuX25leHRTaWJsaW5nPW51bGwsaSYmKGkuX25leHRTaWJsaW5nPWUpLGl8fCh0Ll9maXJzdENoaWxkPWUpLHQuX2xhc3RDaGlsZD1lfWEuZG9tLmZlYXR1cmVzLnNsb3RzJiZudWxsIT09dC5fc2hhZG93Um9vdCYmbC5HdWFyZC5pc1Nsb3RhYmxlKGUpJiZtLnNoYWRvd1RyZWVfYXNzaWduQVNsb3QoZSk7YS5kb20uZmVhdHVyZXMuc3RlcHMmJmwuR3VhcmQuaXNUZXh0Tm9kZShlKSYmdi5kb21fcnVuQ2hpbGRUZXh0Q29udGVudENoYW5nZVN0ZXBzKHQpO2EuZG9tLmZlYXR1cmVzLnNsb3RzJiZsLkd1YXJkLmlzU2hhZG93Um9vdChmLnRyZWVfcm9vdE5vZGUodCkpJiZsLkd1YXJkLmlzU2xvdCh0KSYmYy5pc0VtcHR5KHQuX2Fzc2lnbmVkTm9kZXMpJiZtLnNoYWRvd1RyZWVfc2lnbmFsQVNsb3RDaGFuZ2UodCk7YS5kb20uZmVhdHVyZXMuc2xvdHMmJm0uc2hhZG93VHJlZV9hc3NpZ25TbG90YWJsZXNGb3JBVHJlZShmLnRyZWVfcm9vdE5vZGUoZSkpO2EuZG9tLmZlYXR1cmVzLnN0ZXBzJiZ2LmRvbV9ydW5JbnNlcnRpb25TdGVwcyhlKTthLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmbC5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiZtLnNoYWRvd1RyZWVfaXNDb25uZWN0ZWQoZSkmJihsLkd1YXJkLmlzQ3VzdG9tRWxlbWVudE5vZGUoZSk/cC5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudENhbGxiYWNrUmVhY3Rpb24oZSxcImNvbm5lY3RlZENhbGxiYWNrXCIsW10pOnAuY3VzdG9tRWxlbWVudF90cnlUb1VwZ3JhZGUoZSkpO2EuZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiYocnx8eS5vYnNlcnZlcl9xdWV1ZVRyZWVNdXRhdGlvblJlY29yZCh0LFtlXSxbXSxuLG51bGwpKX0oZSx0LGkpfWZ1bmN0aW9uIHcoZSx0LHIpe3ZhciBpLG8scyx1LGgsXyxnLGI7aWYoMCE9PWEuZG9tLnJhbmdlTGlzdC5zaXplKXt2YXIgeD1mLnRyZWVfaW5kZXgoZSk7dHJ5e2Zvcih2YXIgdz1uKGEuZG9tLnJhbmdlTGlzdCksRT13Lm5leHQoKTshRS5kb25lO0U9dy5uZXh0KCkpe3ZhciBEPUUudmFsdWU7Zi50cmVlX2lzRGVzY2VuZGFudE9mKGUsRC5fc3RhcnRbMF0sITApJiYoRC5fc3RhcnQ9W3QseF0pLGYudHJlZV9pc0Rlc2NlbmRhbnRPZihlLEQuX2VuZFswXSwhMCkmJihELl9lbmQ9W3QseF0pLEQuX3N0YXJ0WzBdPT09dCYmRC5fc3RhcnRbMV0+eCYmRC5fc3RhcnRbMV0tLSxELl9lbmRbMF09PT10JiZELl9lbmRbMV0+eCYmRC5fZW5kWzFdLS19fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0UmJiFFLmRvbmUmJihvPXcucmV0dXJuKSYmby5jYWxsKHcpfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX10cnl7Zm9yKHZhciBTPW4oYS5kb20ucmFuZ2VMaXN0KSxDPVMubmV4dCgpOyFDLmRvbmU7Qz1TLm5leHQoKSl7KEQ9Qy52YWx1ZSkuX3N0YXJ0WzBdPT09dCYmRC5fc3RhcnRbMV0+eCYmKEQuX3N0YXJ0WzFdLT0xKSxELl9lbmRbMF09PT10JiZELl9lbmRbMV0+eCYmKEQuX2VuZFsxXS09MSl9fWNhdGNoKGUpe3M9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0MmJiFDLmRvbmUmJih1PVMucmV0dXJuKSYmdS5jYWxsKFMpfWZpbmFsbHl7aWYocyl0aHJvdyBzLmVycm9yfX19aWYoYS5kb20uZmVhdHVyZXMuc3RlcHMpdHJ5e2Zvcih2YXIgQT1uKGQubm9kZUl0ZXJhdG9yX2l0ZXJhdG9yTGlzdCgpKSxOPUEubmV4dCgpOyFOLmRvbmU7Tj1BLm5leHQoKSl7dmFyIFQ9Ti52YWx1ZTtULl9yb290Ll9ub2RlRG9jdW1lbnQ9PT1lLl9ub2RlRG9jdW1lbnQmJnYuZG9tX3J1bk5vZGVJdGVyYXRvclByZVJlbW92aW5nU3RlcHMoVCxlKX19Y2F0Y2goZSl7aD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7TiYmIU4uZG9uZSYmKF89QS5yZXR1cm4pJiZfLmNhbGwoQSl9ZmluYWxseXtpZihoKXRocm93IGguZXJyb3J9fXZhciBPPWUuX3ByZXZpb3VzU2libGluZyxGPWUuX25leHRTaWJsaW5nO2wuR3VhcmQuaXNEb2N1bWVudE5vZGUodCkmJmwuR3VhcmQuaXNFbGVtZW50Tm9kZShlKSYmKHQuX2RvY3VtZW50RWxlbWVudD1udWxsKSxlLl9wYXJlbnQ9bnVsbCx0Ll9jaGlsZHJlbi5kZWxldGUoZSk7dmFyIGs9ZS5fcHJldmlvdXNTaWJsaW5nLFA9ZS5fbmV4dFNpYmxpbmc7KGUuX3ByZXZpb3VzU2libGluZz1udWxsLGUuX25leHRTaWJsaW5nPW51bGwsayYmKGsuX25leHRTaWJsaW5nPVApLFAmJihQLl9wcmV2aW91c1NpYmxpbmc9ayksa3x8KHQuX2ZpcnN0Q2hpbGQ9UCksUHx8KHQuX2xhc3RDaGlsZD1rKSxhLmRvbS5mZWF0dXJlcy5zbG90cyYmbC5HdWFyZC5pc1Nsb3RhYmxlKGUpJiZudWxsIT09ZS5fYXNzaWduZWRTbG90JiZtLnNoYWRvd1RyZWVfaXNBc3NpZ25lZChlKSYmbS5zaGFkb3dUcmVlX2Fzc2lnblNsb3RhYmxlcyhlLl9hc3NpZ25lZFNsb3QpLGEuZG9tLmZlYXR1cmVzLnNsb3RzJiZsLkd1YXJkLmlzU2hhZG93Um9vdChmLnRyZWVfcm9vdE5vZGUodCkpJiZsLkd1YXJkLmlzU2xvdCh0KSYmYy5pc0VtcHR5KHQuX2Fzc2lnbmVkTm9kZXMpJiZtLnNoYWRvd1RyZWVfc2lnbmFsQVNsb3RDaGFuZ2UodCksYS5kb20uZmVhdHVyZXMuc2xvdHMpJiYobnVsbCE9PWYudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKGUsITAsITEsKGZ1bmN0aW9uKGUpe3JldHVybiBsLkd1YXJkLmlzU2xvdChlKX0pKSYmKG0uc2hhZG93VHJlZV9hc3NpZ25TbG90YWJsZXNGb3JBVHJlZShmLnRyZWVfcm9vdE5vZGUodCkpLG0uc2hhZG93VHJlZV9hc3NpZ25TbG90YWJsZXNGb3JBVHJlZShlKSkpO2EuZG9tLmZlYXR1cmVzLnN0ZXBzJiZ2LmRvbV9ydW5SZW1vdmluZ1N0ZXBzKGUsdCksYS5kb20uZmVhdHVyZXMuY3VzdG9tRWxlbWVudHMmJmwuR3VhcmQuaXNDdXN0b21FbGVtZW50Tm9kZShlKSYmcC5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudENhbGxiYWNrUmVhY3Rpb24oZSxcImRpc2Nvbm5lY3RlZENhbGxiYWNrXCIsW10pO2Zvcih2YXIgST1mLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZShlLCExLCEwKTtudWxsIT09STspYS5kb20uZmVhdHVyZXMuc3RlcHMmJnYuZG9tX3J1blJlbW92aW5nU3RlcHMoSSxlKSxhLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmbC5HdWFyZC5pc0N1c3RvbUVsZW1lbnROb2RlKEkpJiZwLmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbihJLFwiZGlzY29ubmVjdGVkQ2FsbGJhY2tcIixbXSksST1mLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKGUsSSwhMSwhMCk7aWYoYS5kb20uZmVhdHVyZXMubXV0YXRpb25PYnNlcnZlcnMpZm9yKHZhciBMPWYudHJlZV9nZXRGaXJzdEFuY2VzdG9yTm9kZSh0LCEwKTtudWxsIT09TDspe3RyeXtmb3IodmFyIE09KGc9dm9pZCAwLG4oTC5fcmVnaXN0ZXJlZE9ic2VydmVyTGlzdCkpLEI9TS5uZXh0KCk7IUIuZG9uZTtCPU0ubmV4dCgpKXt2YXIgaj1CLnZhbHVlO2oub3B0aW9ucy5zdWJ0cmVlJiZlLl9yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0LnB1c2goe29ic2VydmVyOmoub2JzZXJ2ZXIsb3B0aW9uczpqLm9wdGlvbnMsc291cmNlOmp9KX19Y2F0Y2goZSl7Zz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7QiYmIUIuZG9uZSYmKGI9TS5yZXR1cm4pJiZiLmNhbGwoTSl9ZmluYWxseXtpZihnKXRocm93IGcuZXJyb3J9fUw9Zi50cmVlX2dldE5leHRBbmNlc3Rvck5vZGUodCxMLCEwKX1hLmRvbS5mZWF0dXJlcy5tdXRhdGlvbk9ic2VydmVycyYmKHJ8fHkub2JzZXJ2ZXJfcXVldWVUcmVlTXV0YXRpb25SZWNvcmQodCxbXSxbZV0sTyxGKSksYS5kb20uZmVhdHVyZXMuc3RlcHMmJmwuR3VhcmQuaXNUZXh0Tm9kZShlKSYmdi5kb21fcnVuQ2hpbGRUZXh0Q29udGVudENoYW5nZVN0ZXBzKHQpfXQubXV0YXRpb25fZW5zdXJlUHJlSW5zZXJ0aW9uVmFsaWRpdHk9Zyx0Lm11dGF0aW9uX3ByZUluc2VydD1iLHQubXV0YXRpb25faW5zZXJ0PXgsdC5tdXRhdGlvbl9hcHBlbmQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYihlLHQsbnVsbCl9LHQubXV0YXRpb25fcmVwbGFjZT1mdW5jdGlvbihlLHQscil7dmFyIGksbyxsLGMsaCxwLGQsbTtpZihyLl9ub2RlVHlwZSE9PXUuTm9kZVR5cGUuRG9jdW1lbnQmJnIuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50JiZyLl9ub2RlVHlwZSE9PXUuTm9kZVR5cGUuRWxlbWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJPbmx5IGRvY3VtZW50LCBkb2N1bWVudCBmcmFnbWVudCBhbmQgZWxlbWVudCBub2RlcyBjYW4gY29udGFpbiBjaGlsZCBub2Rlcy4gUGFyZW50IG5vZGUgaXMgXCIrci5ub2RlTmFtZStcIi5cIik7aWYoZi50cmVlX2lzSG9zdEluY2x1ZGluZ0FuY2VzdG9yT2Yocix0LCEwKSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJUaGUgbm9kZSB0byBiZSBpbnNlcnRlZCBjYW5ub3QgYmUgYW4gYW5jZXN0b3Igb2YgcGFyZW50IG5vZGUuIE5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIiwgcGFyZW50IG5vZGUgaXMgXCIrci5ub2RlTmFtZStcIi5cIik7aWYoZS5fcGFyZW50IT09cil0aHJvdyBuZXcgcy5Ob3RGb3VuZEVycm9yKFwiVGhlIHJlZmVyZW5jZSBjaGlsZCBub2RlIGNhbm5vdCBiZSBmb3VuZCB1bmRlciBwYXJlbnQgbm9kZS4gQ2hpbGQgbm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLCBwYXJlbnQgbm9kZSBpcyBcIityLm5vZGVOYW1lK1wiLlwiKTtpZih0Ll9ub2RlVHlwZSE9PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCYmdC5fbm9kZVR5cGUhPT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSYmdC5fbm9kZVR5cGUhPT11Lk5vZGVUeXBlLkVsZW1lbnQmJnQuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5UZXh0JiZ0Ll9ub2RlVHlwZSE9PXUuTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uJiZ0Ll9ub2RlVHlwZSE9PXUuTm9kZVR5cGUuQ0RhdGEmJnQuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5Db21tZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIk9ubHkgZG9jdW1lbnQgZnJhZ21lbnQsIGRvY3VtZW50IHR5cGUsIGVsZW1lbnQsIHRleHQsIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24sIGNkYXRhIHNlY3Rpb24gb3IgY29tbWVudCBub2RlcyBjYW4gYmUgaW5zZXJ0ZWQuIE5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7aWYodC5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLlRleHQmJnIuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGEgdGV4dCBub2RlIGFzIGEgY2hpbGQgb2YgYSBkb2N1bWVudCBub2RlLiBOb2RlIGlzIFwiK3Qubm9kZU5hbWUrXCIuXCIpO2lmKHQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUmJnIuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5Eb2N1bWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJBIGRvY3VtZW50IHR5cGUgbm9kZSBjYW4gb25seSBiZSBpbnNlcnRlZCB1bmRlciBhIGRvY3VtZW50IG5vZGUuIFBhcmVudCBub2RlIGlzIFwiK3Iubm9kZU5hbWUrXCIuXCIpO2lmKHIuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudClpZih0Ll9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCl7dmFyIHY9MDt0cnl7Zm9yKHZhciBnPW4odC5fY2hpbGRyZW4pLGI9Zy5uZXh0KCk7IWIuZG9uZTtiPWcubmV4dCgpKXt2YXIgRT1iLnZhbHVlO2lmKEUuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50KXYrKztlbHNlIGlmKEUuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5UZXh0KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgdGV4dCBhIG5vZGUgYXMgYSBjaGlsZCBvZiBhIGRvY3VtZW50IG5vZGUuIE5vZGUgaXMgXCIrRS5ub2RlTmFtZStcIi5cIil9fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2ImJiFiLmRvbmUmJihvPWcucmV0dXJuKSYmby5jYWxsKGcpfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1pZih2PjEpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQSBkb2N1bWVudCBub2RlIGNhbiBvbmx5IGhhdmUgb25lIGRvY3VtZW50IGVsZW1lbnQgbm9kZS4gRG9jdW1lbnQgZnJhZ21lbnQgdG8gYmUgaW5zZXJ0ZWQgaGFzIFwiK3YrXCIgZWxlbWVudCBub2Rlcy5cIik7aWYoMT09PXYpe3RyeXtmb3IodmFyIEQ9bihyLl9jaGlsZHJlbiksUz1ELm5leHQoKTshUy5kb25lO1M9RC5uZXh0KCkpe2lmKChGPVMudmFsdWUpLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRWxlbWVudCYmRiE9PWUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiVGhlIGRvY3VtZW50IG5vZGUgYWxyZWFkeSBoYXMgYSBkb2N1bWVudCBlbGVtZW50IG5vZGUuXCIpfX1jYXRjaChlKXtsPXtlcnJvcjplfX1maW5hbGx5e3RyeXtTJiYhUy5kb25lJiYoYz1ELnJldHVybikmJmMuY2FsbChEKX1maW5hbGx5e2lmKGwpdGhyb3cgbC5lcnJvcn19Zm9yKHZhciBDPWUuX25leHRTaWJsaW5nO0M7KXtpZihDLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYW4gZWxlbWVudCBub2RlIGJlZm9yZSBhIGRvY3VtZW50IHR5cGUgbm9kZS5cIik7Qz1DLl9uZXh0U2libGluZ319fWVsc2UgaWYodC5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkVsZW1lbnQpe3RyeXtmb3IodmFyIEE9bihyLl9jaGlsZHJlbiksTj1BLm5leHQoKTshTi5kb25lO049QS5uZXh0KCkpe2lmKChGPU4udmFsdWUpLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRWxlbWVudCYmRiE9PWUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiRG9jdW1lbnQgYWxyZWFkeSBoYXMgYSBkb2N1bWVudCBlbGVtZW50IG5vZGUuIE5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIil9fWNhdGNoKGUpe2g9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e04mJiFOLmRvbmUmJihwPUEucmV0dXJuKSYmcC5jYWxsKEEpfWZpbmFsbHl7aWYoaCl0aHJvdyBoLmVycm9yfX1mb3IoQz1lLl9uZXh0U2libGluZztDOyl7aWYoQy5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGFuIGVsZW1lbnQgbm9kZSBiZWZvcmUgYSBkb2N1bWVudCB0eXBlIG5vZGUuIE5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7Qz1DLl9uZXh0U2libGluZ319ZWxzZSBpZih0Ll9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlKXt0cnl7Zm9yKHZhciBUPW4oci5fY2hpbGRyZW4pLE89VC5uZXh0KCk7IU8uZG9uZTtPPVQubmV4dCgpKXt2YXIgRjtpZigoRj1PLnZhbHVlKS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSYmRiE9PWUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiRG9jdW1lbnQgYWxyZWFkeSBoYXMgYSBkb2N1bWVudCB0eXBlIG5vZGUuIE5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIil9fWNhdGNoKGUpe2Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e08mJiFPLmRvbmUmJihtPVQucmV0dXJuKSYmbS5jYWxsKFQpfWZpbmFsbHl7aWYoZCl0aHJvdyBkLmVycm9yfX1mb3IodmFyIGs9ZS5fcHJldmlvdXNTaWJsaW5nO2s7KXtpZihrLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRWxlbWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGEgZG9jdW1lbnQgdHlwZSBub2RlIGJlZm9yZSBhbiBlbGVtZW50IG5vZGUuIE5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7az1rLl9wcmV2aW91c1NpYmxpbmd9fXZhciBQPWUuX25leHRTaWJsaW5nO1A9PT10JiYoUD10Ll9uZXh0U2libGluZyk7dmFyIEk9ZS5fcHJldmlvdXNTaWJsaW5nO18uZG9jdW1lbnRfYWRvcHQodCxyLl9ub2RlRG9jdW1lbnQpO3ZhciBMPVtdO251bGwhPT1lLl9wYXJlbnQmJihMLnB1c2goZSksdyhlLGUuX3BhcmVudCwhMCkpO3ZhciBNPVtdO3JldHVybiB0Ll9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudD9NPUFycmF5LmZyb20odC5fY2hpbGRyZW4pOk0ucHVzaCh0KSx4KHQscixQLCEwKSxhLmRvbS5mZWF0dXJlcy5tdXRhdGlvbk9ic2VydmVycyYmeS5vYnNlcnZlcl9xdWV1ZVRyZWVNdXRhdGlvblJlY29yZChyLE0sTCxJLFApLGV9LHQubXV0YXRpb25fcmVwbGFjZUFsbD1mdW5jdGlvbihlLHQpe3ZhciByLGk7bnVsbCE9PWUmJl8uZG9jdW1lbnRfYWRvcHQoZSx0Ll9ub2RlRG9jdW1lbnQpO3ZhciBvPUFycmF5LmZyb20odC5fY2hpbGRyZW4pLHM9W107ZSYmZS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQ/cz1BcnJheS5mcm9tKGUuX2NoaWxkcmVuKTpudWxsIT09ZSYmcy5wdXNoKGUpO3RyeXtmb3IodmFyIGw9bihvKSxjPWwubmV4dCgpOyFjLmRvbmU7Yz1sLm5leHQoKSl7dyhjLnZhbHVlLHQsITApfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYoaT1sLnJldHVybikmJmkuY2FsbChsKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19bnVsbCE9PWUmJngoZSx0LG51bGwsITApLGEuZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiZ5Lm9ic2VydmVyX3F1ZXVlVHJlZU11dGF0aW9uUmVjb3JkKHQscyxvLG51bGwsbnVsbCl9LHQubXV0YXRpb25fcHJlUmVtb3ZlPWZ1bmN0aW9uKGUsdCl7aWYoZS5fcGFyZW50IT09dCl0aHJvdyBuZXcgcy5Ob3RGb3VuZEVycm9yKFwiVGhlIGNoaWxkIG5vZGUgY2Fubm90IGJlIGZvdW5kIHVuZGVyIHBhcmVudCBub2RlLiBDaGlsZCBub2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIsIHBhcmVudCBub2RlIGlzIFwiK3Qubm9kZU5hbWUrXCIuXCIpO3JldHVybiB3KGUsdCksZX0sdC5tdXRhdGlvbl9yZW1vdmU9d30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIG51bGw9PWV9ZS5leHBvcnRzLmlzTm90aGluZz1uLGUuZXhwb3J0cy5pc09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV9LGUuZXhwb3J0cy50b0FycmF5PWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2U6bihlKT9bXTpbZV19LGUuZXhwb3J0cy5yZXBlYXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPVwiXCI7Zm9yKHI9MDtyPHQ7cis9MSluKz1lO3JldHVybiBufSxlLmV4cG9ydHMuaXNOZWdhdGl2ZVplcm89ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lJiZOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk9PT0xL2V9LGUuZXhwb3J0cy5leHRlbmQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbztpZih0KWZvcihyPTAsbj0obz1PYmplY3Qua2V5cyh0KSkubGVuZ3RoO3I8bjtyKz0xKWVbaT1vW3JdXT10W2ldO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzgpLGk9cig1Myksbz1yKDEwKTtmdW5jdGlvbiBhKGUsdCxyKXt2YXIgbj1bXTtyZXR1cm4gZS5pbmNsdWRlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3I9YShlLHQscil9KSksZVt0XS5mb3JFYWNoKChmdW5jdGlvbihlKXtyLmZvckVhY2goKGZ1bmN0aW9uKHQscil7dC50YWc9PT1lLnRhZyYmdC5raW5kPT09ZS5raW5kJiZuLnB1c2gocil9KSksci5wdXNoKGUpfSkpLHIuZmlsdGVyKChmdW5jdGlvbihlLHQpe3JldHVybi0xPT09bi5pbmRleE9mKHQpfSkpfWZ1bmN0aW9uIHMoZSl7dGhpcy5pbmNsdWRlPWUuaW5jbHVkZXx8W10sdGhpcy5pbXBsaWNpdD1lLmltcGxpY2l0fHxbXSx0aGlzLmV4cGxpY2l0PWUuZXhwbGljaXR8fFtdLHRoaXMuaW1wbGljaXQuZm9yRWFjaCgoZnVuY3Rpb24oZSl7aWYoZS5sb2FkS2luZCYmXCJzY2FsYXJcIiE9PWUubG9hZEtpbmQpdGhyb3cgbmV3IGkoXCJUaGVyZSBpcyBhIG5vbi1zY2FsYXIgdHlwZSBpbiB0aGUgaW1wbGljaXQgbGlzdCBvZiBhIHNjaGVtYS4gSW1wbGljaXQgcmVzb2x2aW5nIG9mIHN1Y2ggdHlwZXMgaXMgbm90IHN1cHBvcnRlZC5cIil9KSksdGhpcy5jb21waWxlZEltcGxpY2l0PWEodGhpcyxcImltcGxpY2l0XCIsW10pLHRoaXMuY29tcGlsZWRFeHBsaWNpdD1hKHRoaXMsXCJleHBsaWNpdFwiLFtdKSx0aGlzLmNvbXBpbGVkVHlwZU1hcD1mdW5jdGlvbigpe3ZhciBlLHQscj17c2NhbGFyOnt9LHNlcXVlbmNlOnt9LG1hcHBpbmc6e30sZmFsbGJhY2s6e319O2Z1bmN0aW9uIG4oZSl7cltlLmtpbmRdW2UudGFnXT1yLmZhbGxiYWNrW2UudGFnXT1lfWZvcihlPTAsdD1hcmd1bWVudHMubGVuZ3RoO2U8dDtlKz0xKWFyZ3VtZW50c1tlXS5mb3JFYWNoKG4pO3JldHVybiByfSh0aGlzLmNvbXBpbGVkSW1wbGljaXQsdGhpcy5jb21waWxlZEV4cGxpY2l0KX1zLkRFRkFVTFQ9bnVsbCxzLmNyZWF0ZT1mdW5jdGlvbigpe3ZhciBlLHQ7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMTplPXMuREVGQVVMVCx0PWFyZ3VtZW50c1swXTticmVhaztjYXNlIDI6ZT1hcmd1bWVudHNbMF0sdD1hcmd1bWVudHNbMV07YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgaShcIldyb25nIG51bWJlciBvZiBhcmd1bWVudHMgZm9yIFNjaGVtYS5jcmVhdGUgZnVuY3Rpb25cIil9aWYoZT1uLnRvQXJyYXkoZSksdD1uLnRvQXJyYXkodCksIWUuZXZlcnkoKGZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygc30pKSl0aHJvdyBuZXcgaShcIlNwZWNpZmllZCBsaXN0IG9mIHN1cGVyIHNjaGVtYXMgKG9yIGEgc2luZ2xlIFNjaGVtYSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVNjaGVtYSBvYmplY3QuXCIpO2lmKCF0LmV2ZXJ5KChmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIG99KSkpdGhyb3cgbmV3IGkoXCJTcGVjaWZpZWQgbGlzdCBvZiBZQU1MIHR5cGVzIChvciBhIHNpbmdsZSBUeXBlIG9iamVjdCkgY29udGFpbnMgYSBub24tVHlwZSBvYmplY3QuXCIpO3JldHVybiBuZXcgcyh7aW5jbHVkZTplLGV4cGxpY2l0OnR9KX0sZS5leHBvcnRzPXN9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoOCksaT1yKDQyKSxvPVwiXCIuc3BsaXQ7ZS5leHBvcnRzPW4oKGZ1bmN0aW9uKCl7cmV0dXJuIU9iamVjdChcInpcIikucHJvcGVydHlJc0VudW1lcmFibGUoMCl9KSk/ZnVuY3Rpb24oZSl7cmV0dXJuXCJTdHJpbmdcIj09aShlKT9vLmNhbGwoZSxcIlwiKTpPYmplY3QoZSl9Ok9iamVjdH0sZnVuY3Rpb24oZSx0KXt2YXIgcj17fS50b1N0cmluZztlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHIuY2FsbChlKS5zbGljZSg4LC0xKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG8sYT1yKDE4Nikscz1yKDExKSx1PXIoMTMpLGw9cigyMSksYz1yKDE0KSxoPXIoNTcpLHA9cig0NSksZj1zLldlYWtNYXA7aWYoYSl7dmFyIGQ9bmV3IGYsbT1kLmdldCx5PWQuaGFzLHY9ZC5zZXQ7bj1mdW5jdGlvbihlLHQpe3JldHVybiB2LmNhbGwoZCxlLHQpLHR9LGk9ZnVuY3Rpb24oZSl7cmV0dXJuIG0uY2FsbChkLGUpfHx7fX0sbz1mdW5jdGlvbihlKXtyZXR1cm4geS5jYWxsKGQsZSl9fWVsc2V7dmFyIF89aChcInN0YXRlXCIpO3BbX109ITAsbj1mdW5jdGlvbihlLHQpe3JldHVybiBsKGUsXyx0KSx0fSxpPWZ1bmN0aW9uKGUpe3JldHVybiBjKGUsXyk/ZVtfXTp7fX0sbz1mdW5jdGlvbihlKXtyZXR1cm4gYyhlLF8pfX1lLmV4cG9ydHM9e3NldDpuLGdldDppLGhhczpvLGVuZm9yY2U6ZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSk/aShlKTpuKGUse30pfSxnZXR0ZXJGb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciByO2lmKCF1KHQpfHwocj1pKHQpKS50eXBlIT09ZSl0aHJvdyBUeXBlRXJyb3IoXCJJbmNvbXBhdGlibGUgcmVjZWl2ZXIsIFwiK2UrXCIgcmVxdWlyZWRcIik7cmV0dXJuIHJ9fX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSExfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTIwKSxpPXIoMTEpLG89ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZT9lOnZvaWQgMH07ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8Mj9vKG5bZV0pfHxvKGlbZV0pOm5bZV0mJm5bZV1bdF18fGlbZV0mJmlbZV1bdF19fSxmdW5jdGlvbihlLHQpe3ZhciByPU1hdGguY2VpbCxuPU1hdGguZmxvb3I7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpc05hTihlPStlKT8wOihlPjA/bjpyKShlKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDgpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPVtdW2VdO3JldHVybiEhciYmbigoZnVuY3Rpb24oKXtyLmNhbGwobnVsbCx0fHxmdW5jdGlvbigpe3Rocm93IDF9LDEpfSkpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9e319LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDMxKSxyKDMyKSxyKDMzKSxyKDIyMCkscig2NCkscigxOSkscig2NSkscigyMCkscig2OCkscig2Nikscig5MikscigxNDQpLHIoMjIpLHIoOTQpLHIoMjMpO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LGk9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LG89dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChpKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDIpLHM9cig2OSksdT1yKDk1KSxsPXIoNyksYz1yKDApLGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMubGV2ZWw9MCx0aGlzLl9idWlsZGVyT3B0aW9ucz1lfXJldHVybiBlLnByb3RvdHlwZS5kZWNsYXJhdGlvbj1mdW5jdGlvbihlLHQscil7fSxlLnByb3RvdHlwZS5kb2NUeXBlPWZ1bmN0aW9uKGUsdCxyKXt9LGUucHJvdG90eXBlLmNvbW1lbnQ9ZnVuY3Rpb24oZSl7fSxlLnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKGUpe30sZS5wcm90b3R5cGUuaW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0KXt9LGUucHJvdG90eXBlLmNkYXRhPWZ1bmN0aW9uKGUpe30sZS5wcm90b3R5cGUub3BlblRhZ0JlZ2luPWZ1bmN0aW9uKGUpe30sZS5wcm90b3R5cGUub3BlblRhZ0VuZD1mdW5jdGlvbihlLHQscil7fSxlLnByb3RvdHlwZS5jbG9zZVRhZz1mdW5jdGlvbihlKXt9LGUucHJvdG90eXBlLmF0dHJpYnV0ZXM9ZnVuY3Rpb24oZSl7dmFyIHQscjt0cnl7Zm9yKHZhciBpPW4oZSksbz1pLm5leHQoKTshby5kb25lO289aS5uZXh0KCkpe3ZhciBhPW8udmFsdWU7dGhpcy5hdHRyaWJ1dGUobnVsbD09PWFbMV0/YVsyXTphWzFdK1wiOlwiK2FbMl0sYVszXSl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e28mJiFvLmRvbmUmJihyPWkucmV0dXJuKSYmci5jYWxsKGkpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX19LGUucHJvdG90eXBlLmF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe30sZS5wcm90b3R5cGUuYmVnaW5FbGVtZW50PWZ1bmN0aW9uKGUpe30sZS5wcm90b3R5cGUuZW5kRWxlbWVudD1mdW5jdGlvbihlKXt9LGUucHJvdG90eXBlLnNlcmlhbGl6ZU5vZGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDAhPT1lLl9ub2RlRG9jdW1lbnQmJmUuX25vZGVEb2N1bWVudC5faGFzTmFtZXNwYWNlcztpZih0aGlzLmxldmVsPTAsdGhpcy5jdXJyZW50Tm9kZT1lLHIpe3ZhciBuPW5ldyB1Lk5hbWVzcGFjZVByZWZpeE1hcDtuLnNldChcInhtbFwiLGwubmFtZXNwYWNlLlhNTCk7dGhpcy5fc2VyaWFsaXplTm9kZU5TKGUsbnVsbCxuLHt2YWx1ZToxfSx0KX1lbHNlIHRoaXMuX3NlcmlhbGl6ZU5vZGUoZSx0KX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZU5vZGVOUz1mdW5jdGlvbihlLHQscixuLGkpe3N3aXRjaCh0aGlzLmN1cnJlbnROb2RlPWUsZS5ub2RlVHlwZSl7Y2FzZSBhLk5vZGVUeXBlLkVsZW1lbnQ6dGhpcy5fc2VyaWFsaXplRWxlbWVudE5TKGUsdCxyLG4saSk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLkRvY3VtZW50OnRoaXMuX3NlcmlhbGl6ZURvY3VtZW50TlMoZSx0LHIsbixpKTticmVhaztjYXNlIGEuTm9kZVR5cGUuQ29tbWVudDp0aGlzLl9zZXJpYWxpemVDb21tZW50KGUsaSk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLlRleHQ6dGhpcy5fc2VyaWFsaXplVGV4dChlLGkpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50OnRoaXMuX3NlcmlhbGl6ZURvY3VtZW50RnJhZ21lbnROUyhlLHQscixuLGkpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGU6dGhpcy5fc2VyaWFsaXplRG9jdW1lbnRUeXBlKGUsaSk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbjp0aGlzLl9zZXJpYWxpemVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oZSxpKTticmVhaztjYXNlIGEuTm9kZVR5cGUuQ0RhdGE6dGhpcy5fc2VyaWFsaXplQ0RhdGEoZSxpKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIlVua25vd24gbm9kZSB0eXBlOiBcIitlLm5vZGVUeXBlKX19LGUucHJvdG90eXBlLl9zZXJpYWxpemVOb2RlPWZ1bmN0aW9uKGUsdCl7c3dpdGNoKHRoaXMuY3VycmVudE5vZGU9ZSxlLm5vZGVUeXBlKXtjYXNlIGEuTm9kZVR5cGUuRWxlbWVudDp0aGlzLl9zZXJpYWxpemVFbGVtZW50KGUsdCk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLkRvY3VtZW50OnRoaXMuX3NlcmlhbGl6ZURvY3VtZW50KGUsdCk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLkNvbW1lbnQ6dGhpcy5fc2VyaWFsaXplQ29tbWVudChlLHQpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5UZXh0OnRoaXMuX3NlcmlhbGl6ZVRleHQoZSx0KTticmVhaztjYXNlIGEuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudDp0aGlzLl9zZXJpYWxpemVEb2N1bWVudEZyYWdtZW50KGUsdCk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLkRvY3VtZW50VHlwZTp0aGlzLl9zZXJpYWxpemVEb2N1bWVudFR5cGUoZSx0KTticmVhaztjYXNlIGEuTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uOnRoaXMuX3NlcmlhbGl6ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihlLHQpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5DRGF0YTp0aGlzLl9zZXJpYWxpemVDRGF0YShlLHQpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBub2RlIHR5cGU6IFwiK2Uubm9kZVR5cGUpfX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZUVsZW1lbnROUz1mdW5jdGlvbih0LHIsaSxhLHMpe3ZhciB1LGgscD1bXTtpZihzJiYoLTEhPT10LmxvY2FsTmFtZS5pbmRleE9mKFwiOlwiKXx8IWMueG1sX2lzTmFtZSh0LmxvY2FsTmFtZSkpKXRocm93IG5ldyBFcnJvcihcIk5vZGUgbG9jYWwgbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dmFyIGY9XCJcIixkPSExLG09ITEseT1pLmNvcHkoKSx2PXt9LF89dGhpcy5fcmVjb3JkTmFtZXNwYWNlSW5mb3JtYXRpb24odCx5LHYpLGc9cixiPXQubmFtZXNwYWNlVVJJO2lmKGc9PT1iKW51bGwhPT1fJiYobT0hMCksZj1iPT09bC5uYW1lc3BhY2UuWE1MP1wieG1sOlwiK3QubG9jYWxOYW1lOnQubG9jYWxOYW1lLHRoaXMuYmVnaW5FbGVtZW50KGYpLHRoaXMub3BlblRhZ0JlZ2luKGYpO2Vsc2V7dmFyIHg9dC5wcmVmaXgsdz1udWxsO2lmKG51bGw9PT14JiZiPT09X3x8KHc9eS5nZXQoeCxiKSksXCJ4bWxuc1wiPT09eCl7aWYocyl0aHJvdyBuZXcgRXJyb3IoXCJBbiBlbGVtZW50IGNhbm5vdCBoYXZlIHRoZSAneG1sbnMnIHByZWZpeCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt3PXh9bnVsbCE9PXc/KGY9dytcIjpcIit0LmxvY2FsTmFtZSxudWxsIT09XyYmXyE9PWwubmFtZXNwYWNlLlhNTCYmKGc9X3x8bnVsbCksdGhpcy5iZWdpbkVsZW1lbnQoZiksdGhpcy5vcGVuVGFnQmVnaW4oZikpOm51bGwhPT14Pyh4IGluIHYmJih4PXRoaXMuX2dlbmVyYXRlUHJlZml4KGIseSxhKSkseS5zZXQoeCxiKSxmKz14K1wiOlwiK3QubG9jYWxOYW1lLHRoaXMuYmVnaW5FbGVtZW50KGYpLHRoaXMub3BlblRhZ0JlZ2luKGYpLHAucHVzaChbbnVsbCxcInhtbG5zXCIseCx0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShiLHMpXSksbnVsbCE9PV8mJihnPV98fG51bGwpKTpudWxsPT09X3x8bnVsbCE9PV8mJl8hPT1iPyhtPSEwLGYrPXQubG9jYWxOYW1lLGc9Yix0aGlzLmJlZ2luRWxlbWVudChmKSx0aGlzLm9wZW5UYWdCZWdpbihmKSxwLnB1c2goW251bGwsbnVsbCxcInhtbG5zXCIsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUoYixzKV0pKTooZis9dC5sb2NhbE5hbWUsZz1iLHRoaXMuYmVnaW5FbGVtZW50KGYpLHRoaXMub3BlblRhZ0JlZ2luKGYpKX1wLnB1c2guYXBwbHkocCxvKHRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZXNOUyh0LHksYSx2LG0scykpKSx0aGlzLmF0dHJpYnV0ZXMocCk7dmFyIEU9Yj09PWwubmFtZXNwYWNlLkhUTUw7aWYoRSYmMD09PXQuY2hpbGROb2Rlcy5sZW5ndGgmJmUuX1ZvaWRFbGVtZW50TmFtZXMuaGFzKHQubG9jYWxOYW1lKT8odGhpcy5vcGVuVGFnRW5kKGYsITAsITApLHRoaXMuZW5kRWxlbWVudChmKSxkPSEwKTpFfHwwIT09dC5jaGlsZE5vZGVzLmxlbmd0aD90aGlzLm9wZW5UYWdFbmQoZiwhMSwhMSk6KHRoaXMub3BlblRhZ0VuZChmLCEwLCExKSx0aGlzLmVuZEVsZW1lbnQoZiksZD0hMCksIWQpe2lmKEUmJlwidGVtcGxhdGVcIj09PXQubG9jYWxOYW1lKTtlbHNlIHRyeXtmb3IodmFyIEQ9bih0LmNoaWxkTm9kZXMpLFM9RC5uZXh0KCk7IVMuZG9uZTtTPUQubmV4dCgpKXt2YXIgQz1TLnZhbHVlO3RoaXMubGV2ZWwrKyx0aGlzLl9zZXJpYWxpemVOb2RlTlMoQyxnLHksYSxzKSx0aGlzLmxldmVsLS19fWNhdGNoKGUpe3U9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e1MmJiFTLmRvbmUmJihoPUQucmV0dXJuKSYmaC5jYWxsKEQpfWZpbmFsbHl7aWYodSl0aHJvdyB1LmVycm9yfX10aGlzLmNsb3NlVGFnKGYpLHRoaXMuZW5kRWxlbWVudChmKX19LGUucHJvdG90eXBlLl9zZXJpYWxpemVFbGVtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtpZih0JiYoLTEhPT1lLmxvY2FsTmFtZS5pbmRleE9mKFwiOlwiKXx8IWMueG1sX2lzTmFtZShlLmxvY2FsTmFtZSkpKXRocm93IG5ldyBFcnJvcihcIk5vZGUgbG9jYWwgbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dmFyIG89ITEsYT1lLmxvY2FsTmFtZTt0aGlzLmJlZ2luRWxlbWVudChhKSx0aGlzLm9wZW5UYWdCZWdpbihhKTt2YXIgcz10aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVzKGUsdCk7aWYodGhpcy5hdHRyaWJ1dGVzKHMpLGUuaGFzQ2hpbGROb2RlcygpP3RoaXMub3BlblRhZ0VuZChhLCExLCExKToodGhpcy5vcGVuVGFnRW5kKGEsITAsITEpLHRoaXMuZW5kRWxlbWVudChhKSxvPSEwKSwhbyl7dHJ5e2Zvcih2YXIgdT1uKGUuX2NoaWxkcmVuKSxsPXUubmV4dCgpOyFsLmRvbmU7bD11Lm5leHQoKSl7dmFyIGg9bC52YWx1ZTt0aGlzLmxldmVsKyssdGhpcy5fc2VyaWFsaXplTm9kZShoLHQpLHRoaXMubGV2ZWwtLX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKGk9dS5yZXR1cm4pJiZpLmNhbGwodSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXRoaXMuY2xvc2VUYWcoYSksdGhpcy5lbmRFbGVtZW50KGEpfX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZURvY3VtZW50TlM9ZnVuY3Rpb24oZSx0LHIsaSxvKXt2YXIgYSxzO2lmKG8mJm51bGw9PT1lLmRvY3VtZW50RWxlbWVudCl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGRvY3VtZW50IGVsZW1lbnQgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dHJ5e2Zvcih2YXIgdT1uKGUuY2hpbGROb2RlcyksbD11Lm5leHQoKTshbC5kb25lO2w9dS5uZXh0KCkpe3ZhciBjPWwudmFsdWU7dGhpcy5fc2VyaWFsaXplTm9kZU5TKGMsdCxyLGksbyl9fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJihzPXUucmV0dXJuKSYmcy5jYWxsKHUpfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX19LGUucHJvdG90eXBlLl9zZXJpYWxpemVEb2N1bWVudD1mdW5jdGlvbihlLHQpe3ZhciByLGk7aWYodCYmbnVsbD09PWUuZG9jdW1lbnRFbGVtZW50KXRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZG9jdW1lbnQgZWxlbWVudCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt0cnl7Zm9yKHZhciBvPW4oZS5fY2hpbGRyZW4pLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgcz1hLnZhbHVlO3RoaXMuX3NlcmlhbGl6ZU5vZGUocyx0KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKGk9by5yZXR1cm4pJiZpLmNhbGwobyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZUNvbW1lbnQ9ZnVuY3Rpb24oZSx0KXtpZih0JiYoIWMueG1sX2lzTGVnYWxDaGFyKGUuZGF0YSl8fC0xIT09ZS5kYXRhLmluZGV4T2YoXCItLVwiKXx8ZS5kYXRhLmVuZHNXaXRoKFwiLVwiKSkpdGhyb3cgbmV3IEVycm9yKFwiQ29tbWVudCBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt0aGlzLmNvbW1lbnQoZS5kYXRhKX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZVRleHQ9ZnVuY3Rpb24oZSx0KXtpZih0JiYhYy54bWxfaXNMZWdhbENoYXIoZS5kYXRhKSl0aHJvdyBuZXcgRXJyb3IoXCJUZXh0IGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3ZhciByPWUuZGF0YS5yZXBsYWNlKC8oPyEmKFteJjtdKik7KSYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvPi9nLFwiJmd0O1wiKTt0aGlzLnRleHQocil9LGUucHJvdG90eXBlLl9zZXJpYWxpemVEb2N1bWVudEZyYWdtZW50TlM9ZnVuY3Rpb24oZSx0LHIsaSxvKXt2YXIgYSxzO3RyeXtmb3IodmFyIHU9bihlLmNoaWxkTm9kZXMpLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgYz1sLnZhbHVlO3RoaXMuX3NlcmlhbGl6ZU5vZGVOUyhjLHQscixpLG8pfX1jYXRjaChlKXthPXtlcnJvcjplfX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYocz11LnJldHVybikmJnMuY2FsbCh1KX1maW5hbGx5e2lmKGEpdGhyb3cgYS5lcnJvcn19fSxlLnByb3RvdHlwZS5fc2VyaWFsaXplRG9jdW1lbnRGcmFnbWVudD1mdW5jdGlvbihlLHQpe3ZhciByLGk7dHJ5e2Zvcih2YXIgbz1uKGUuX2NoaWxkcmVuKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7dmFyIHM9YS52YWx1ZTt0aGlzLl9zZXJpYWxpemVOb2RlKHMsdCl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihpPW8ucmV0dXJuKSYmaS5jYWxsKG8pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX19LGUucHJvdG90eXBlLl9zZXJpYWxpemVEb2N1bWVudFR5cGU9ZnVuY3Rpb24oZSx0KXtpZih0JiYhYy54bWxfaXNQdWJpZENoYXIoZS5wdWJsaWNJZCkpdGhyb3cgbmV3IEVycm9yKFwiRG9jVHlwZSBwdWJsaWMgaWRlbnRpZmllciBkb2VzIG5vdCBtYXRjaCBQdWJpZENoYXIgY29uc3RydWN0ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2lmKHQmJighYy54bWxfaXNMZWdhbENoYXIoZS5zeXN0ZW1JZCl8fC0xIT09ZS5zeXN0ZW1JZC5pbmRleE9mKCdcIicpJiYtMSE9PWUuc3lzdGVtSWQuaW5kZXhPZihcIidcIikpKXRocm93IG5ldyBFcnJvcihcIkRvY1R5cGUgc3lzdGVtIGlkZW50aWZpZXIgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3RoaXMuZG9jVHlwZShlLm5hbWUsZS5wdWJsaWNJZCxlLnN5c3RlbUlkKX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe2lmKHQmJigtMSE9PWUudGFyZ2V0LmluZGV4T2YoXCI6XCIpfHwvXnhtbCQvaS50ZXN0KGUudGFyZ2V0KSkpdGhyb3cgbmV3IEVycm9yKFwiUHJvY2Vzc2luZyBpbnN0cnVjdGlvbiB0YXJnZXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2lmKHQmJighYy54bWxfaXNMZWdhbENoYXIoZS5kYXRhKXx8LTEhPT1lLmRhdGEuaW5kZXhPZihcIj8+XCIpKSl0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNzaW5nIGluc3RydWN0aW9uIGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3RoaXMuaW5zdHJ1Y3Rpb24oZS50YXJnZXQsZS5kYXRhKX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZUNEYXRhPWZ1bmN0aW9uKGUsdCl7aWYodCYmLTEhPT1lLmRhdGEuaW5kZXhPZihcIl1dPlwiKSl0aHJvdyBuZXcgRXJyb3IoXCJDREFUQSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dGhpcy5jZGF0YShlLmRhdGEpfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlc05TPWZ1bmN0aW9uKGUsdCxyLGksbyxhKXt2YXIgdSxoLHA9W10sZj1hP25ldyBzLkxvY2FsTmFtZVNldDp2b2lkIDA7dHJ5e2Zvcih2YXIgZD1uKGUuYXR0cmlidXRlcyksbT1kLm5leHQoKTshbS5kb25lO209ZC5uZXh0KCkpe3ZhciB5PW0udmFsdWU7aWYoYXx8b3x8bnVsbCE9PXkubmFtZXNwYWNlVVJJKXtpZihhJiZmJiZmLmhhcyh5Lm5hbWVzcGFjZVVSSSx5LmxvY2FsTmFtZSkpdGhyb3cgbmV3IEVycm9yKFwiRWxlbWVudCBjb250YWlucyBkdXBsaWNhdGUgYXR0cmlidXRlcyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTthJiZmJiZmLnNldCh5Lm5hbWVzcGFjZVVSSSx5LmxvY2FsTmFtZSk7dmFyIHY9eS5uYW1lc3BhY2VVUkksXz1udWxsO2lmKG51bGwhPT12KWlmKF89dC5nZXQoeS5wcmVmaXgsdiksdj09PWwubmFtZXNwYWNlLlhNTE5TKXtpZih5LnZhbHVlPT09bC5uYW1lc3BhY2UuWE1MfHxudWxsPT09eS5wcmVmaXgmJm98fG51bGwhPT15LnByZWZpeCYmKCEoeS5sb2NhbE5hbWUgaW4gaSl8fGlbeS5sb2NhbE5hbWVdIT09eS52YWx1ZSkmJnQuaGFzKHkubG9jYWxOYW1lLHkudmFsdWUpKWNvbnRpbnVlO2lmKGEmJnkudmFsdWU9PT1sLm5hbWVzcGFjZS5YTUxOUyl0aHJvdyBuZXcgRXJyb3IoXCJYTUxOUyBuYW1lc3BhY2UgaXMgcmVzZXJ2ZWQgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7aWYoYSYmXCJcIj09PXkudmFsdWUpdGhyb3cgbmV3IEVycm9yKFwiTmFtZXNwYWNlIHByZWZpeCBkZWNsYXJhdGlvbnMgY2Fubm90IGJlIHVzZWQgdG8gdW5kZWNsYXJlIGEgbmFtZXNwYWNlICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO1wieG1sbnNcIj09PXkucHJlZml4JiYoXz1cInhtbG5zXCIpfWVsc2UgbnVsbD09PV8mJihfPW51bGw9PT15LnByZWZpeHx8dC5oYXNQcmVmaXgoeS5wcmVmaXgpJiYhdC5oYXMoeS5wcmVmaXgsdik/dGhpcy5fZ2VuZXJhdGVQcmVmaXgodix0LHIpOnkucHJlZml4LHAucHVzaChbbnVsbCxcInhtbG5zXCIsXyx0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh2LGEpXSkpO2lmKG51bGwhPT1fJiZfLGEmJigtMSE9PXkubG9jYWxOYW1lLmluZGV4T2YoXCI6XCIpfHwhYy54bWxfaXNOYW1lKHkubG9jYWxOYW1lKXx8XCJ4bWxuc1wiPT09eS5sb2NhbE5hbWUmJm51bGw9PT12KSl0aHJvdyBuZXcgRXJyb3IoXCJBdHRyaWJ1dGUgbG9jYWwgbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7cC5wdXNoKFt2LF8seS5sb2NhbE5hbWUsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUoeS52YWx1ZSxhKV0pfWVsc2UgcC5wdXNoKFtudWxsLG51bGwseS5sb2NhbE5hbWUsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUoeS52YWx1ZSxhKV0pfX1jYXRjaChlKXt1PXtlcnJvcjplfX1maW5hbGx5e3RyeXttJiYhbS5kb25lJiYoaD1kLnJldHVybikmJmguY2FsbChkKX1maW5hbGx5e2lmKHUpdGhyb3cgdS5lcnJvcn19cmV0dXJuIHB9LGUucHJvdG90eXBlLl9zZXJpYWxpemVBdHRyaWJ1dGVzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaSxvPVtdLGE9dD97fTp2b2lkIDA7dHJ5e2Zvcih2YXIgcz1uKGUuYXR0cmlidXRlcyksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBsPXUudmFsdWU7aWYodCl7aWYodCYmYSYmbC5sb2NhbE5hbWUgaW4gYSl0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IGNvbnRhaW5zIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2lmKHQmJmEmJihhW2wubG9jYWxOYW1lXT0hMCksdCYmKC0xIT09bC5sb2NhbE5hbWUuaW5kZXhPZihcIjpcIil8fCFjLnhtbF9pc05hbWUobC5sb2NhbE5hbWUpKSl0aHJvdyBuZXcgRXJyb3IoXCJBdHRyaWJ1dGUgbG9jYWwgbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7by5wdXNoKFtudWxsLG51bGwsbC5sb2NhbE5hbWUsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUobC52YWx1ZSx0KV0pfWVsc2Ugby5wdXNoKFtudWxsLG51bGwsbC5sb2NhbE5hbWUsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUobC52YWx1ZSx0KV0pfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXt1JiYhdS5kb25lJiYoaT1zLnJldHVybikmJmkuY2FsbChzKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIG99LGUucHJvdG90eXBlLl9yZWNvcmROYW1lc3BhY2VJbmZvcm1hdGlvbj1mdW5jdGlvbihlLHQscil7dmFyIGksbyxhPW51bGw7dHJ5e2Zvcih2YXIgcz1uKGUuYXR0cmlidXRlcyksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBjPXUudmFsdWUsaD1jLm5hbWVzcGFjZVVSSSxwPWMucHJlZml4O2lmKGg9PT1sLm5hbWVzcGFjZS5YTUxOUyl7aWYobnVsbD09PXApe2E9Yy52YWx1ZTtjb250aW51ZX12YXIgZj1jLmxvY2FsTmFtZSxkPWMudmFsdWU7aWYoZD09PWwubmFtZXNwYWNlLlhNTCljb250aW51ZTtpZihcIlwiPT09ZCYmKGQ9bnVsbCksdC5oYXMoZixkKSljb250aW51ZTt0LnNldChmLGQpLHJbZl09ZHx8XCJcIn19fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihvPXMucmV0dXJuKSYmby5jYWxsKHMpfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0sZS5wcm90b3R5cGUuX2dlbmVyYXRlUHJlZml4PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1cIm5zXCIrci52YWx1ZS50b1N0cmluZygpO3JldHVybiByLnZhbHVlKyssdC5zZXQobixlKSxufSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oZSx0KXtpZih0JiZudWxsIT09ZSYmIWMueG1sX2lzTGVnYWxDaGFyKGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVycyBpbiBhdHRyaWJ1dGUgdmFsdWUuXCIpO3JldHVybiBudWxsPT09ZT9cIlwiOmUucmVwbGFjZSgvKD8hJihbXiY7XSopOykmL2csXCImYW1wO1wiKS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoLz4vZyxcIiZndDtcIikucmVwbGFjZSgvXCIvZyxcIiZxdW90O1wiKX0sZS5fVm9pZEVsZW1lbnROYW1lcz1uZXcgU2V0KFtcImFyZWFcIixcImJhc2VcIixcImJhc2Vmb250XCIsXCJiZ3NvdW5kXCIsXCJiclwiLFwiY29sXCIsXCJlbWJlZFwiLFwiZnJhbWVcIixcImhyXCIsXCJpbWdcIixcImlucHV0XCIsXCJrZXlnZW5cIixcImxpbmtcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJwYXJhbVwiLFwic291cmNlXCIsXCJ0cmFja1wiLFwid2JyXCJdKSxlfSgpO3QuQmFzZVdyaXRlcj1ofSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0saT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cig2KSxhPXIoMykscz1yKDcpLHU9cigyOSksbD1yKDE3KSxjPXIoOTcpO2Z1bmN0aW9uIGgoKXt2YXIgZT1vLmRvbS53aW5kb3c7ZS5fbXV0YXRpb25PYnNlcnZlck1pY3JvdGFza1F1ZXVlZHx8KGUuX211dGF0aW9uT2JzZXJ2ZXJNaWNyb3Rhc2tRdWV1ZWQ9ITAsUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKXtwKCl9KSkpfWZ1bmN0aW9uIHAoKXt2YXIgZSx0LHIsaSx1PW8uZG9tLndpbmRvdzt1Ll9tdXRhdGlvbk9ic2VydmVyTWljcm90YXNrUXVldWVkPSExO3ZhciBsPXMuc2V0LmNsb25lKHUuX211dGF0aW9uT2JzZXJ2ZXJzKSxoPXMuc2V0LmNsb25lKHUuX3NpZ25hbFNsb3RzKTtzLnNldC5lbXB0eSh1Ll9zaWduYWxTbG90cyk7dmFyIHA9ZnVuY3Rpb24oZSl7dmFyIHQ9cy5saXN0LmNsb25lKGUuX3JlY29yZFF1ZXVlKTtzLmxpc3QuZW1wdHkoZS5fcmVjb3JkUXVldWUpO2Zvcih2YXIgcj0wO3I8ZS5fbm9kZUxpc3QubGVuZ3RoO3IrKyl7dmFyIG49ZS5fbm9kZUxpc3Rbcl07cy5saXN0LnJlbW92ZShuLl9yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0LChmdW5jdGlvbih0KXtyZXR1cm4gYS5HdWFyZC5pc1RyYW5zaWVudFJlZ2lzdGVyZWRPYnNlcnZlcih0KSYmdC5vYnNlcnZlcj09PWV9KSl9aWYoIXMubGlzdC5pc0VtcHR5KHQpKXRyeXtlLl9jYWxsYmFjay5jYWxsKGUsdCxlKX1jYXRjaChlKXt9fTt0cnl7Zm9yKHZhciBmPW4obCksZD1mLm5leHQoKTshZC5kb25lO2Q9Zi5uZXh0KCkpe3AoZC52YWx1ZSl9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e2QmJiFkLmRvbmUmJih0PWYucmV0dXJuKSYmdC5jYWxsKGYpfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1pZihvLmRvbS5mZWF0dXJlcy5zbG90cyl0cnl7Zm9yKHZhciBtPW4oaCkseT1tLm5leHQoKTsheS5kb25lO3k9bS5uZXh0KCkpe3ZhciB2PXkudmFsdWU7Yy5ldmVudF9maXJlQW5FdmVudChcInNsb3RjaGFuZ2VcIix2LHZvaWQgMCx7YnViYmxlczohMH0pfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXt5JiYheS5kb25lJiYoaT1tLnJldHVybikmJmkuY2FsbChtKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19fWZ1bmN0aW9uIGYoZSx0LHIsbyxhLHMsYyxwLGYpe2Zvcih2YXIgZCxtLHk9bmV3IE1hcCx2PWwudHJlZV9nZXRGaXJzdEFuY2VzdG9yTm9kZSh0LCEwKTtudWxsIT09djspe2Zvcih2YXIgXz0wO188di5fcmVnaXN0ZXJlZE9ic2VydmVyTGlzdC5sZW5ndGg7XysrKXt2YXIgZz12Ll9yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0W19dLGI9Zy5vcHRpb25zO2lmKCh2PT09dHx8Yi5zdWJ0cmVlKSYmKChcImF0dHJpYnV0ZXNcIiE9PWV8fGIuYXR0cmlidXRlcykmJihcImF0dHJpYnV0ZXNcIiE9PWV8fCFiLmF0dHJpYnV0ZUZpbHRlcnx8Yi5hdHRyaWJ1dGVGaWx0ZXIuaW5kZXhPZihyfHxcIlwiKSYmbnVsbD09PW8pJiYoXCJjaGFyYWN0ZXJEYXRhXCIhPT1lfHxiLmNoYXJhY3RlckRhdGEpJiYoXCJjaGlsZExpc3RcIiE9PWV8fGIuY2hpbGRMaXN0KSkpe3ZhciB4PWcub2JzZXJ2ZXI7eS5oYXMoeCl8fHkuc2V0KHgsbnVsbCksKFwiYXR0cmlidXRlc1wiPT09ZSYmYi5hdHRyaWJ1dGVPbGRWYWx1ZXx8XCJjaGFyYWN0ZXJEYXRhXCI9PT1lJiZiLmNoYXJhY3RlckRhdGFPbGRWYWx1ZSkmJnkuc2V0KHgsYSl9fXY9bC50cmVlX2dldE5leHRBbmNlc3Rvck5vZGUodCx2LCEwKX10cnl7Zm9yKHZhciB3PW4oeSksRT13Lm5leHQoKTshRS5kb25lO0U9dy5uZXh0KCkpe3ZhciBEPWkoRS52YWx1ZSwyKSxTPURbMF0sQz1EWzFdLEE9dS5jcmVhdGVfbXV0YXRpb25SZWNvcmQoZSx0LHUuY3JlYXRlX25vZGVMaXN0U3RhdGljKHQscyksdS5jcmVhdGVfbm9kZUxpc3RTdGF0aWModCxjKSxwLGYscixvLEMpO1MuX3JlY29yZFF1ZXVlLnB1c2goQSl9fWNhdGNoKGUpe2Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0UmJiFFLmRvbmUmJihtPXcucmV0dXJuKSYmbS5jYWxsKHcpfWZpbmFsbHl7aWYoZCl0aHJvdyBkLmVycm9yfX1oKCl9dC5vYnNlcnZlcl9xdWV1ZUFNdXRhdGlvbk9ic2VydmVyTWljcm90YXNrPWgsdC5vYnNlcnZlcl9ub3RpZnlNdXRhdGlvbk9ic2VydmVycz1wLHQub2JzZXJ2ZXJfcXVldWVNdXRhdGlvblJlY29yZD1mLHQub2JzZXJ2ZXJfcXVldWVUcmVlTXV0YXRpb25SZWNvcmQ9ZnVuY3Rpb24oZSx0LHIsbixpKXtmKFwiY2hpbGRMaXN0XCIsZSxudWxsLG51bGwsbnVsbCx0LHIsbixpKX0sdC5vYnNlcnZlcl9xdWV1ZUF0dHJpYnV0ZU11dGF0aW9uUmVjb3JkPWZ1bmN0aW9uKGUsdCxyLG4pe2YoXCJhdHRyaWJ1dGVzXCIsZSx0LHIsbixbXSxbXSxudWxsLG51bGwpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNiksaT1yKDcpLG89cigzKSxhPXIoOSkscz1yKDI5KSx1PXIoNzMpLGw9cig1MSksYz1yKDMwKSxoPXIoMzcpLHA9cigxMDYpO2Z1bmN0aW9uIGYoZSx0LHIpe24uZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiZsLm9ic2VydmVyX3F1ZXVlQXR0cmlidXRlTXV0YXRpb25SZWNvcmQodCxlLl9sb2NhbE5hbWUsZS5fbmFtZXNwYWNlLGUuX3ZhbHVlKSxuLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmby5HdWFyZC5pc0N1c3RvbUVsZW1lbnROb2RlKHQpJiZ1LmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbih0LFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsW2UuX2xvY2FsTmFtZSxlLl92YWx1ZSxyLGUuX25hbWVzcGFjZV0pLG4uZG9tLmZlYXR1cmVzLnN0ZXBzJiZjLmRvbV9ydW5BdHRyaWJ1dGVDaGFuZ2VTdGVwcyh0LGUuX2xvY2FsTmFtZSxlLl92YWx1ZSxyLGUuX25hbWVzcGFjZSksZS5fdmFsdWU9cn1mdW5jdGlvbiBkKGUsdCl7bi5kb20uZmVhdHVyZXMubXV0YXRpb25PYnNlcnZlcnMmJmwub2JzZXJ2ZXJfcXVldWVBdHRyaWJ1dGVNdXRhdGlvblJlY29yZCh0LGUuX2xvY2FsTmFtZSxlLl9uYW1lc3BhY2UsbnVsbCksbi5kb20uZmVhdHVyZXMuY3VzdG9tRWxlbWVudHMmJm8uR3VhcmQuaXNDdXN0b21FbGVtZW50Tm9kZSh0KSYmdS5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudENhbGxiYWNrUmVhY3Rpb24odCxcImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja1wiLFtlLl9sb2NhbE5hbWUsbnVsbCxlLl92YWx1ZSxlLl9uYW1lc3BhY2VdKSxuLmRvbS5mZWF0dXJlcy5zdGVwcyYmYy5kb21fcnVuQXR0cmlidXRlQ2hhbmdlU3RlcHModCxlLl9sb2NhbE5hbWUsbnVsbCxlLl92YWx1ZSxlLl9uYW1lc3BhY2UpLHQuX2F0dHJpYnV0ZUxpc3QuX2FzQXJyYXkoKS5wdXNoKGUpLGUuX2VsZW1lbnQ9dCx0Ll9ub2RlRG9jdW1lbnQuX2hhc05hbWVzcGFjZXN8fG51bGw9PT1lLl9uYW1lc3BhY2UmJm51bGw9PT1lLl9uYW1lc3BhY2VQcmVmaXgmJlwieG1sbnNcIiE9PWUuX2xvY2FsTmFtZXx8KHQuX25vZGVEb2N1bWVudC5faGFzTmFtZXNwYWNlcz0hMCl9ZnVuY3Rpb24gbShlLHQpe24uZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiZsLm9ic2VydmVyX3F1ZXVlQXR0cmlidXRlTXV0YXRpb25SZWNvcmQodCxlLl9sb2NhbE5hbWUsZS5fbmFtZXNwYWNlLGUuX3ZhbHVlKSxuLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmby5HdWFyZC5pc0N1c3RvbUVsZW1lbnROb2RlKHQpJiZ1LmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbih0LFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsW2UuX2xvY2FsTmFtZSxlLl92YWx1ZSxudWxsLGUuX25hbWVzcGFjZV0pLG4uZG9tLmZlYXR1cmVzLnN0ZXBzJiZjLmRvbV9ydW5BdHRyaWJ1dGVDaGFuZ2VTdGVwcyh0LGUuX2xvY2FsTmFtZSxlLl92YWx1ZSxudWxsLGUuX25hbWVzcGFjZSk7dmFyIHI9dC5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpLmluZGV4T2YoZSk7dC5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpLnNwbGljZShyLDEpLGUuX2VsZW1lbnQ9bnVsbH1mdW5jdGlvbiB5KGUsdCxyKXtuLmRvbS5mZWF0dXJlcy5tdXRhdGlvbk9ic2VydmVycyYmbC5vYnNlcnZlcl9xdWV1ZUF0dHJpYnV0ZU11dGF0aW9uUmVjb3JkKHIsZS5fbG9jYWxOYW1lLGUuX25hbWVzcGFjZSxlLl92YWx1ZSksbi5kb20uZmVhdHVyZXMuY3VzdG9tRWxlbWVudHMmJm8uR3VhcmQuaXNDdXN0b21FbGVtZW50Tm9kZShyKSYmdS5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudENhbGxiYWNrUmVhY3Rpb24ocixcImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja1wiLFtlLl9sb2NhbE5hbWUsZS5fdmFsdWUsdC5fdmFsdWUsZS5fbmFtZXNwYWNlXSksbi5kb20uZmVhdHVyZXMuc3RlcHMmJmMuZG9tX3J1bkF0dHJpYnV0ZUNoYW5nZVN0ZXBzKHIsZS5fbG9jYWxOYW1lLGUuX3ZhbHVlLHQuX3ZhbHVlLGUuX25hbWVzcGFjZSk7dmFyIGk9ci5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpLmluZGV4T2YoZSk7LTEhPT1pJiYoci5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpW2ldPXQpLGUuX2VsZW1lbnQ9bnVsbCx0Ll9lbGVtZW50PXIsci5fbm9kZURvY3VtZW50Ll9oYXNOYW1lc3BhY2VzfHxudWxsPT09dC5fbmFtZXNwYWNlJiZudWxsPT09dC5fbmFtZXNwYWNlUHJlZml4JiZcInhtbG5zXCIhPT10Ll9sb2NhbE5hbWV8fChyLl9ub2RlRG9jdW1lbnQuX2hhc05hbWVzcGFjZXM9ITApfWZ1bmN0aW9uIHYoZSx0KXtyZXR1cm4gdC5fbmFtZXNwYWNlPT09aS5uYW1lc3BhY2UuSFRNTCYmXCJodG1sXCI9PT10Ll9ub2RlRG9jdW1lbnQuX3R5cGUmJihlPWUudG9Mb3dlckNhc2UoKSksdC5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0Ll9xdWFsaWZpZWROYW1lPT09ZX0pKXx8bnVsbH1mdW5jdGlvbiBfKGUsdCxyKXt2YXIgbj1lfHxudWxsO3JldHVybiByLl9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KCkuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuX25hbWVzcGFjZT09PW4mJmUuX2xvY2FsTmFtZT09PXR9KSl8fG51bGx9dC5lbGVtZW50X2hhcz1mdW5jdGlvbihlLHQpe3JldHVybi0xIT09dC5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpLmluZGV4T2YoZSl9LHQuZWxlbWVudF9jaGFuZ2U9Zix0LmVsZW1lbnRfYXBwZW5kPWQsdC5lbGVtZW50X3JlbW92ZT1tLHQuZWxlbWVudF9yZXBsYWNlPXksdC5lbGVtZW50X2dldEFuQXR0cmlidXRlQnlOYW1lPXYsdC5lbGVtZW50X2dldEFuQXR0cmlidXRlQnlOYW1lc3BhY2VBbmRMb2NhbE5hbWU9Xyx0LmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVWYWx1ZT1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09ciYmKHI9XCJcIik7dmFyIG49XyhyLHQsZSk7cmV0dXJuIG51bGw9PT1uP1wiXCI6bi5fdmFsdWV9LHQuZWxlbWVudF9zZXRBbkF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe2lmKG51bGwhPT1lLl9lbGVtZW50JiZlLl9lbGVtZW50IT09dCl0aHJvdyBuZXcgYS5JblVzZUF0dHJpYnV0ZUVycm9yKFwiVGhpcyBhdHRyaWJ1dGUgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGRvY3VtZW50OiBcIitlLl9xdWFsaWZpZWROYW1lK1wiIGFzIGEgY2hpbGQgb2YgXCIrZS5fZWxlbWVudC5fcXVhbGlmaWVkTmFtZStcIi5cIik7dmFyIHI9XyhlLl9uYW1lc3BhY2V8fFwiXCIsZS5fbG9jYWxOYW1lLHQpO3JldHVybiByPT09ZT9lOihudWxsIT09cj95KHIsZSx0KTpkKGUsdCkscil9LHQuZWxlbWVudF9zZXRBbkF0dHJpYnV0ZVZhbHVlPWZ1bmN0aW9uKGUsdCxyLG4saSl7dm9pZCAwPT09biYmKG49bnVsbCksdm9pZCAwPT09aSYmKGk9bnVsbCk7dmFyIG89XyhpfHxcIlwiLHQsZSk7aWYobnVsbD09PW8pe3ZhciBhPXMuY3JlYXRlX2F0dHIoZS5fbm9kZURvY3VtZW50LHQpO3JldHVybiBhLl9uYW1lc3BhY2U9aSxhLl9uYW1lc3BhY2VQcmVmaXg9bixhLl92YWx1ZT1yLHZvaWQgZChhLGUpfWYobyxlLHIpfSx0LmVsZW1lbnRfcmVtb3ZlQW5BdHRyaWJ1dGVCeU5hbWU9ZnVuY3Rpb24oZSx0KXt2YXIgcj12KGUsdCk7cmV0dXJuIG51bGwhPT1yJiZtKHIsdCkscn0sdC5lbGVtZW50X3JlbW92ZUFuQXR0cmlidXRlQnlOYW1lc3BhY2VBbmRMb2NhbE5hbWU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPV8oZSx0LHIpO3JldHVybiBudWxsIT09biYmbShuLHIpLG59LHQuZWxlbWVudF9jcmVhdGVBbkVsZW1lbnQ9ZnVuY3Rpb24oZSx0LHIsbyxsLGMpe3ZvaWQgMD09PW8mJihvPW51bGwpLHZvaWQgMD09PWwmJihsPW51bGwpLHZvaWQgMD09PWMmJihjPSExKTt2YXIgaD1udWxsO2lmKCFuLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cylyZXR1cm4oaD1zLmNyZWF0ZV9lbGVtZW50KGUsdCxyLG8pKS5fY3VzdG9tRWxlbWVudFN0YXRlPVwidW5jdXN0b21pemVkXCIsaC5fY3VzdG9tRWxlbWVudERlZmluaXRpb249bnVsbCxoLl9pcz1sLGg7dmFyIGY9dS5jdXN0b21FbGVtZW50X2xvb2tVcEFDdXN0b21FbGVtZW50RGVmaW5pdGlvbihlLHIsdCxsKTtpZihudWxsIT09ZiYmZi5uYW1lIT09Zi5sb2NhbE5hbWUpKGg9bmV3KHAuZG9jdW1lbnRfZWxlbWVudEludGVyZmFjZSh0LGkubmFtZXNwYWNlLkhUTUwpKSkuX2xvY2FsTmFtZT10LGguX25hbWVzcGFjZT1pLm5hbWVzcGFjZS5IVE1MLGguX25hbWVzcGFjZVByZWZpeD1vLGguX2N1c3RvbUVsZW1lbnRTdGF0ZT1cInVuZGVmaW5lZFwiLGguX2N1c3RvbUVsZW1lbnREZWZpbml0aW9uPW51bGwsaC5faXM9bCxoLl9ub2RlRG9jdW1lbnQ9ZSxjP3UuY3VzdG9tRWxlbWVudF91cGdyYWRlKGYsaCk6dS5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudFVwZ3JhZGVSZWFjdGlvbihoLGYpO2Vsc2UgaWYobnVsbCE9PWYpaWYoYyl0cnl7dmFyIGQ9bmV3KDAsZi5jb25zdHJ1Y3Rvcik7aWYoY29uc29sZS5hc3NlcnQodm9pZCAwIT09ZC5fY3VzdG9tRWxlbWVudFN0YXRlKSxjb25zb2xlLmFzc2VydCh2b2lkIDAhPT1kLl9jdXN0b21FbGVtZW50RGVmaW5pdGlvbiksY29uc29sZS5hc3NlcnQoZC5fbmFtZXNwYWNlPT09aS5uYW1lc3BhY2UuSFRNTCksMCE9PWQuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoKXRocm93IG5ldyBhLk5vdFN1cHBvcnRlZEVycm9yKFwiQ3VzdG9tIGVsZW1lbnQgYWxyZWFkeSBoYXMgYXR0cmlidXRlcy5cIik7aWYoMCE9PWQuX2NoaWxkcmVuLnNpemUpdGhyb3cgbmV3IGEuTm90U3VwcG9ydGVkRXJyb3IoXCJDdXN0b20gZWxlbWVudCBhbHJlYWR5IGhhcyBjaGlsZCBub2Rlcy5cIik7aWYobnVsbCE9PWQuX3BhcmVudCl0aHJvdyBuZXcgYS5Ob3RTdXBwb3J0ZWRFcnJvcihcIkN1c3RvbSBlbGVtZW50IGFscmVhZHkgaGFzIGEgcGFyZW50IG5vZGUuXCIpO2lmKGQuX25vZGVEb2N1bWVudCE9PWUpdGhyb3cgbmV3IGEuTm90U3VwcG9ydGVkRXJyb3IoXCJDdXN0b20gZWxlbWVudCBpcyBhbHJlYWR5IGluIGEgZG9jdW1lbnQuXCIpO2lmKGQuX2xvY2FsTmFtZSE9PXQpdGhyb3cgbmV3IGEuTm90U3VwcG9ydGVkRXJyb3IoXCJDdXN0b20gZWxlbWVudCBoYXMgYSBkaWZmZXJlbnQgbG9jYWwgbmFtZS5cIik7ZC5fbmFtZXNwYWNlUHJlZml4PW8sZC5faXM9bnVsbH1jYXRjaChyKXsoaD1zLmNyZWF0ZV9odG1sVW5rbm93bkVsZW1lbnQoZSx0LGkubmFtZXNwYWNlLkhUTUwsbykpLl9jdXN0b21FbGVtZW50U3RhdGU9XCJmYWlsZWRcIixoLl9jdXN0b21FbGVtZW50RGVmaW5pdGlvbj1udWxsLGguX2lzPW51bGx9ZWxzZShoPXMuY3JlYXRlX2h0bWxFbGVtZW50KGUsdCxpLm5hbWVzcGFjZS5IVE1MLG8pKS5fY3VzdG9tRWxlbWVudFN0YXRlPVwidW5kZWZpbmVkXCIsaC5fY3VzdG9tRWxlbWVudERlZmluaXRpb249bnVsbCxoLl9pcz1udWxsLHUuY3VzdG9tRWxlbWVudF9lbnF1ZXVlQUN1c3RvbUVsZW1lbnRVcGdyYWRlUmVhY3Rpb24oaCxmKTtlbHNleyhoPW5ldyhwLmRvY3VtZW50X2VsZW1lbnRJbnRlcmZhY2UodCxyKSkpLl9sb2NhbE5hbWU9dCxoLl9uYW1lc3BhY2U9cixoLl9uYW1lc3BhY2VQcmVmaXg9byxoLl9jdXN0b21FbGVtZW50U3RhdGU9XCJ1bmN1c3RvbWl6ZWRcIixoLl9jdXN0b21FbGVtZW50RGVmaW5pdGlvbj1udWxsLGguX2lzPWwsaC5fbm9kZURvY3VtZW50PWUsciE9PWkubmFtZXNwYWNlLkhUTUx8fG51bGw9PT1sJiYhdS5jdXN0b21FbGVtZW50X2lzVmFsaWRDdXN0b21FbGVtZW50TmFtZSh0KXx8KGguX2N1c3RvbUVsZW1lbnRTdGF0ZT1cInVuZGVmaW5lZFwiKX1pZihudWxsPT09aCl0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIGVsZW1lbnQuXCIpO3JldHVybiBofSx0LmVsZW1lbnRfaW5zZXJ0QWRqYWNlbnQ9ZnVuY3Rpb24oZSx0LHIpe3N3aXRjaCh0LnRvTG93ZXJDYXNlKCkpe2Nhc2VcImJlZm9yZWJlZ2luXCI6cmV0dXJuIG51bGw9PT1lLl9wYXJlbnQ/bnVsbDpoLm11dGF0aW9uX3ByZUluc2VydChyLGUuX3BhcmVudCxlKTtjYXNlXCJhZnRlcmJlZ2luXCI6cmV0dXJuIGgubXV0YXRpb25fcHJlSW5zZXJ0KHIsZSxlLl9maXJzdENoaWxkKTtjYXNlXCJiZWZvcmVlbmRcIjpyZXR1cm4gaC5tdXRhdGlvbl9wcmVJbnNlcnQocixlLG51bGwpO2Nhc2VcImFmdGVyZW5kXCI6cmV0dXJuIG51bGw9PT1lLl9wYXJlbnQ/bnVsbDpoLm11dGF0aW9uX3ByZUluc2VydChyLGUuX3BhcmVudCxlLl9uZXh0U2libGluZyk7ZGVmYXVsdDp0aHJvdyBuZXcgYS5TeW50YXhFcnJvcignSW52YWxpZCBcXCd3aGVyZVxcJyBhcmd1bWVudC4gXCJiZWZvcmViZWdpblwiLCBcImFmdGVyYmVnaW5cIiwgXCJiZWZvcmVlbmRcIiBvciBcImFmdGVyZW5kXCIgZXhwZWN0ZWQnKX19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe0Vycm9yLmNhbGwodGhpcyksdGhpcy5uYW1lPVwiWUFNTEV4Y2VwdGlvblwiLHRoaXMucmVhc29uPWUsdGhpcy5tYXJrPXQsdGhpcy5tZXNzYWdlPSh0aGlzLnJlYXNvbnx8XCIodW5rbm93biByZWFzb24pXCIpKyh0aGlzLm1hcms/XCIgXCIrdGhpcy5tYXJrLnRvU3RyaW5nKCk6XCJcIiksRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2U/RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyx0aGlzLmNvbnN0cnVjdG9yKTp0aGlzLnN0YWNrPShuZXcgRXJyb3IpLnN0YWNrfHxcIlwifW4ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKSxuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1uLG4ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubmFtZStcIjogXCI7cmV0dXJuIHQrPXRoaXMucmVhc29ufHxcIih1bmtub3duIHJlYXNvbilcIiwhZSYmdGhpcy5tYXJrJiYodCs9XCIgXCIrdGhpcy5tYXJrLnRvU3RyaW5nKCkpLHR9LGUuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOSk7ZS5leHBvcnRzPW5ldyBuKHtpbmNsdWRlOltyKDE4MSldLGltcGxpY2l0OltyKDI5MykscigyOTQpXSxleHBsaWNpdDpbcigyOTUpLHIoMjk2KSxyKDI5NykscigyOTgpXX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNiksaT1yKDc5KSxvPXIoNDApLGE9cigyNCkscz1yKDU2KSx1PXIoMTQpLGw9cigxMTUpLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt0LmY9bj9jOmZ1bmN0aW9uKGUsdCl7aWYoZT1hKGUpLHQ9cyh0LCEwKSxsKXRyeXtyZXR1cm4gYyhlLHQpfWNhdGNoKGUpe31pZih1KGUsdCkpcmV0dXJuIG8oIWkuZi5jYWxsKGUsdCksZVt0XSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIW4oZSkpcmV0dXJuIGU7dmFyIHIsaTtpZih0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihpPXIuY2FsbChlKSkpcmV0dXJuIGk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Yocj1lLnZhbHVlT2YpJiYhbihpPXIuY2FsbChlKSkpcmV0dXJuIGk7aWYoIXQmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKGk9ci5jYWxsKGUpKSlyZXR1cm4gaTt0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig4MSksaT1yKDU4KSxvPW4oXCJrZXlzXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gb1tlXXx8KG9bZV09aShlKSl9fSxmdW5jdGlvbihlLHQpe3ZhciByPTAsbj1NYXRoLnJhbmRvbSgpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cIlN5bWJvbChcIitTdHJpbmcodm9pZCAwPT09ZT9cIlwiOmUpK1wiKV9cIisoKytyK24pLnRvU3RyaW5nKDM2KX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQyKTtlLmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuXCJBcnJheVwiPT1uKGUpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGk9cigxOCksbz1yKDE4OCksYT1yKDg0KSxzPXIoNDUpLHU9cigxODkpLGw9cigxMTYpLGM9cig1NyksaD1jKFwiSUVfUFJPVE9cIikscD1mdW5jdGlvbigpe30sZj1mdW5jdGlvbihlKXtyZXR1cm5cIjxzY3JpcHQ+XCIrZStcIjxcXC9zY3JpcHQ+XCJ9LGQ9ZnVuY3Rpb24oKXt0cnl7bj1kb2N1bWVudC5kb21haW4mJm5ldyBBY3RpdmVYT2JqZWN0KFwiaHRtbGZpbGVcIil9Y2F0Y2goZSl7fXZhciBlLHQ7ZD1uP2Z1bmN0aW9uKGUpe2Uud3JpdGUoZihcIlwiKSksZS5jbG9zZSgpO3ZhciB0PWUucGFyZW50V2luZG93Lk9iamVjdDtyZXR1cm4gZT1udWxsLHR9KG4pOigodD1sKFwiaWZyYW1lXCIpKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHUuYXBwZW5kQ2hpbGQodCksdC5zcmM9U3RyaW5nKFwiamF2YXNjcmlwdDpcIiksKGU9dC5jb250ZW50V2luZG93LmRvY3VtZW50KS5vcGVuKCksZS53cml0ZShmKFwiZG9jdW1lbnQuRj1PYmplY3RcIikpLGUuY2xvc2UoKSxlLkYpO2Zvcih2YXIgcj1hLmxlbmd0aDtyLS07KWRlbGV0ZSBkLnByb3RvdHlwZVthW3JdXTtyZXR1cm4gZCgpfTtzW2hdPSEwLGUuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiBudWxsIT09ZT8ocC5wcm90b3R5cGU9aShlKSxyPW5ldyBwLHAucHJvdG90eXBlPW51bGwscltoXT1lKTpyPWQoKSx2b2lkIDA9PT10P3I6byhyLHQpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTIxKSxpPXIoODQpO2UuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxpKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE1KS5mLGk9cigxNCksbz1yKDUpKFwidG9TdHJpbmdUYWdcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtlJiYhaShlPXI/ZTplLnByb3RvdHlwZSxvKSYmbihlLG8se2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTp0fSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig4KSxpPXIoNSksbz1yKDEyOSksYT1pKFwic3BlY2llc1wiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8+PTUxfHwhbigoZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4odC5jb25zdHJ1Y3Rvcj17fSlbYV09ZnVuY3Rpb24oKXtyZXR1cm57Zm9vOjF9fSwxIT09dFtlXShCb29sZWFuKS5mb299KSl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMTIyKS5pbmRleE9mLG89cig0OCksYT1yKDI4KSxzPVtdLmluZGV4T2YsdT0hIXMmJjEvWzFdLmluZGV4T2YoMSwtMCk8MCxsPW8oXCJpbmRleE9mXCIpLGM9YShcImluZGV4T2ZcIix7QUNDRVNTT1JTOiEwLDE6MH0pO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOnV8fCFsfHwhY30se2luZGV4T2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIHU/cy5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fDA6aSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNiksaT1yKDE1KS5mLG89RnVuY3Rpb24ucHJvdG90eXBlLGE9by50b1N0cmluZyxzPS9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztuJiYhKFwibmFtZVwiaW4gbykmJmkobyxcIm5hbWVcIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3RyeXtyZXR1cm4gYS5jYWxsKHRoaXMpLm1hdGNoKHMpWzFdfWNhdGNoKGUpe3JldHVyblwiXCJ9fX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyNSksaT1yKDE4KSxvPXIoOCksYT1yKDEzNikscz1SZWdFeHAucHJvdG90eXBlLHU9cy50b1N0cmluZyxsPW8oKGZ1bmN0aW9uKCl7cmV0dXJuXCIvYS9iXCIhPXUuY2FsbCh7c291cmNlOlwiYVwiLGZsYWdzOlwiYlwifSl9KSksYz1cInRvU3RyaW5nXCIhPXUubmFtZTsobHx8YykmJm4oUmVnRXhwLnByb3RvdHlwZSxcInRvU3RyaW5nXCIsKGZ1bmN0aW9uKCl7dmFyIGU9aSh0aGlzKSx0PVN0cmluZyhlLnNvdXJjZSkscj1lLmZsYWdzO3JldHVyblwiL1wiK3QrXCIvXCIrU3RyaW5nKHZvaWQgMD09PXImJmUgaW5zdGFuY2VvZiBSZWdFeHAmJiEoXCJmbGFnc1wiaW4gcyk/YS5jYWxsKGUpOnIpfSkse3Vuc2FmZTohMH0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigzMSkscigzMikscigzMykscigxOSkscigxMzgpLHIoMjApLHIoNjYpLHIoMjIpLHIoMjMpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pLG89dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9cigxKSxzPXIoMiksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscil7dmFyIG49ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIG4uX3dyaXRlck9wdGlvbnM9YS5hcHBseURlZmF1bHRzKHIse2Zvcm1hdDpcIm9iamVjdFwiLHdlbGxGb3JtZWQ6ITEsZ3JvdXA6ITEsdmVyYm9zZTohMX0pLG59cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5zZXJpYWxpemU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2N1cnJlbnRMaXN0PVtdLHRoaXMuX2N1cnJlbnRJbmRleD0wLHRoaXMuX2xpc3RSZWdpc3Rlcj1bdGhpcy5fY3VycmVudExpc3RdLHRoaXMuc2VyaWFsaXplTm9kZShlLHRoaXMuX3dyaXRlck9wdGlvbnMud2VsbEZvcm1lZCksdGhpcy5fcHJvY2Vzcyh0aGlzLl9jdXJyZW50TGlzdCx0aGlzLl93cml0ZXJPcHRpb25zKX0sdC5wcm90b3R5cGUuX3Byb2Nlc3M9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyx1LGwsYztpZigwPT09ZS5sZW5ndGgpcmV0dXJue307Zm9yKHZhciBoPXt9LHA9ITEsZj0wLGQ9MCxtPTAseT0wLHY9MDt2PGUubGVuZ3RoO3YrKyl7dmFyIF89ZVt2XTtzd2l0Y2goST1PYmplY3Qua2V5cyhfKVswXSl7Y2FzZVwiQFwiOmNvbnRpbnVlO2Nhc2VcIiNcIjpmKys7YnJlYWs7Y2FzZVwiIVwiOmQrKzticmVhaztjYXNlXCI/XCI6bSsrO2JyZWFrO2Nhc2VcIiRcIjp5Kys7YnJlYWs7ZGVmYXVsdDpoW0ldP3A9ITA6aFtJXT0hMH19dmFyIGc9dGhpcy5fZ2V0QXR0cktleSgpLGI9dGhpcy5fZ2V0Tm9kZUtleShzLk5vZGVUeXBlLlRleHQpLHg9dGhpcy5fZ2V0Tm9kZUtleShzLk5vZGVUeXBlLkNvbW1lbnQpLHc9dGhpcy5fZ2V0Tm9kZUtleShzLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbiksRT10aGlzLl9nZXROb2RlS2V5KHMuTm9kZVR5cGUuQ0RhdGEpO2lmKDE9PT1mJiYxPT09ZS5sZW5ndGgmJmEuaXNTdHJpbmcoZVswXVtcIiNcIl0pKXJldHVybiBlWzBdW1wiI1wiXTtpZihwKXt2YXIgRD17fTtmb3Iodj0wO3Y8ZS5sZW5ndGg7disrKXtfPWVbdl07aWYoXCJAXCI9PT0oST1PYmplY3Qua2V5cyhfKVswXSkpe3ZhciBTPV9bXCJAXCJdOzE9PT0oTD1PYmplY3Qua2V5cyhTKSkubGVuZ3RoP0RbZytMWzBdXT1TW0xbMF1dOkRbZ109X1tcIkBcIl19fXZhciBDPVtdO2Zvcih2PTA7djxlLmxlbmd0aDt2Kyspe189ZVt2XTtzd2l0Y2goST1PYmplY3Qua2V5cyhfKVswXSl7Y2FzZVwiQFwiOmJyZWFrO2Nhc2VcIiNcIjpDLnB1c2goKChyPXt9KVtiXT1fW1wiI1wiXSxyKSk7YnJlYWs7Y2FzZVwiIVwiOkMucHVzaCgoKG49e30pW3hdPV9bXCIhXCJdLG4pKTticmVhaztjYXNlXCI/XCI6Qy5wdXNoKCgoaT17fSlbd109X1tcIj9cIl0saSkpO2JyZWFrO2Nhc2VcIiRcIjpDLnB1c2goKChvPXt9KVtFXT1fLiQsbykpO2JyZWFrO2RlZmF1bHQ6aWYoMCE9PShCPV8pW0ldLmxlbmd0aCYmYS5pc0FycmF5KEJbSV1bMF0pKXtmb3IodmFyIEE9W10sTj1CW0ldLFQ9MDtUPE4ubGVuZ3RoO1QrKylBLnB1c2godGhpcy5fcHJvY2VzcyhOW1RdLHQpKTtDLnB1c2goKCh1PXt9KVtJXT1BLHUpKX1lbHNlIHQudmVyYm9zZT9DLnB1c2goKChsPXt9KVtJXT1bdGhpcy5fcHJvY2VzcyhCW0ldLHQpXSxsKSk6Qy5wdXNoKCgoYz17fSlbSV09dGhpcy5fcHJvY2VzcyhCW0ldLHQpLGMpKX19cmV0dXJuIERbYl09QyxEfXZhciBPPTEsRj0xLGs9MSxQPTE7Zm9yKEQ9e30sdj0wO3Y8ZS5sZW5ndGg7disrKXt2YXIgSTtfPWVbdl07c3dpdGNoKEk9T2JqZWN0LmtleXMoXylbMF0pe2Nhc2VcIkBcIjpTPV9bXCJAXCJdO3ZhciBMPU9iamVjdC5rZXlzKFMpO2lmKHQuZ3JvdXAmJjEhPT1MLmxlbmd0aClEW2ddPVM7ZWxzZSBmb3IodmFyIE0gaW4gUylEW2crTV09U1tNXTticmVhaztjYXNlXCIjXCI6Tz10aGlzLl9wcm9jZXNzU3BlY0l0ZW0oX1tcIiNcIl0sRCx0Lmdyb3VwLGIsZixPKTticmVhaztjYXNlXCIhXCI6Rj10aGlzLl9wcm9jZXNzU3BlY0l0ZW0oX1tcIiFcIl0sRCx0Lmdyb3VwLHgsZCxGKTticmVhaztjYXNlXCI/XCI6az10aGlzLl9wcm9jZXNzU3BlY0l0ZW0oX1tcIj9cIl0sRCx0Lmdyb3VwLHcsbSxrKTticmVhaztjYXNlXCIkXCI6UD10aGlzLl9wcm9jZXNzU3BlY0l0ZW0oXy4kLEQsdC5ncm91cCxFLHksUCk7YnJlYWs7ZGVmYXVsdDp2YXIgQjtpZigwIT09KEI9XylbSV0ubGVuZ3RoJiZhLmlzQXJyYXkoQltJXVswXSkpe0E9W10sTj1CW0ldO2Zvcih2YXIgaj0wO2o8Ti5sZW5ndGg7aisrKUEucHVzaCh0aGlzLl9wcm9jZXNzKE5bal0sdCkpO0RbSV09QX1lbHNlIHQudmVyYm9zZT9EW0ldPVt0aGlzLl9wcm9jZXNzKEJbSV0sdCldOkRbSV09dGhpcy5fcHJvY2VzcyhCW0ldLHQpfX1yZXR1cm4gRH0sdC5wcm90b3R5cGUuX3Byb2Nlc3NTcGVjSXRlbT1mdW5jdGlvbihlLHQscixuLGkscyl7dmFyIHUsbDtpZighciYmYS5pc0FycmF5KGUpJiZpK2UubGVuZ3RoPjIpdHJ5e2Zvcih2YXIgYz1vKGUpLGg9Yy5uZXh0KCk7IWguZG9uZTtoPWMubmV4dCgpKXt2YXIgcD1oLnZhbHVlO3RbbisocysrKS50b1N0cmluZygpXT1wfX1jYXRjaChlKXt1PXtlcnJvcjplfX1maW5hbGx5e3RyeXtoJiYhaC5kb25lJiYobD1jLnJldHVybikmJmwuY2FsbChjKX1maW5hbGx5e2lmKHUpdGhyb3cgdS5lcnJvcn19ZWxzZSB0W2k+MT9uKyhzKyspLnRvU3RyaW5nKCk6bl09ZTtyZXR1cm4gc30sdC5wcm90b3R5cGUuYmVnaW5FbGVtZW50PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1bXTtpZigwPT09dGhpcy5fY3VycmVudExpc3QubGVuZ3RoKXRoaXMuX2N1cnJlbnRMaXN0LnB1c2goKCh0PXt9KVtlXT1uLHQpKTtlbHNle3ZhciBpPXRoaXMuX2N1cnJlbnRMaXN0W3RoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aC0xXTtpZih0aGlzLl9pc0VsZW1lbnROb2RlKGksZSkpaWYoMCE9PWlbZV0ubGVuZ3RoJiZhLmlzQXJyYXkoaVtlXVswXSkpaVtlXS5wdXNoKG4pO2Vsc2UgaVtlXT1baVtlXSxuXTtlbHNlIHRoaXMuX2N1cnJlbnRMaXN0LnB1c2goKChyPXt9KVtlXT1uLHIpKX10aGlzLl9jdXJyZW50SW5kZXgrKyx0aGlzLl9saXN0UmVnaXN0ZXIubGVuZ3RoPnRoaXMuX2N1cnJlbnRJbmRleD90aGlzLl9saXN0UmVnaXN0ZXJbdGhpcy5fY3VycmVudEluZGV4XT1uOnRoaXMuX2xpc3RSZWdpc3Rlci5wdXNoKG4pLHRoaXMuX2N1cnJlbnRMaXN0PW59LHQucHJvdG90eXBlLmVuZEVsZW1lbnQ9ZnVuY3Rpb24oKXt0aGlzLl9jdXJyZW50TGlzdD10aGlzLl9saXN0UmVnaXN0ZXJbLS10aGlzLl9jdXJyZW50SW5kZXhdfSx0LnByb3RvdHlwZS5hdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO2lmKDA9PT10aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgpdGhpcy5fY3VycmVudExpc3QucHVzaCh7XCJAXCI6KHI9e30scltlXT10LHIpfSk7ZWxzZXt2YXIgaT10aGlzLl9jdXJyZW50TGlzdFt0aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgtMV07dGhpcy5faXNBdHRyTm9kZShpKT9pW1wiQFwiXVtlXT10OnRoaXMuX2N1cnJlbnRMaXN0LnB1c2goe1wiQFwiOihuPXt9LG5bZV09dCxuKX0pfX0sdC5wcm90b3R5cGUuY29tbWVudD1mdW5jdGlvbihlKXtpZigwPT09dGhpcy5fY3VycmVudExpc3QubGVuZ3RoKXRoaXMuX2N1cnJlbnRMaXN0LnB1c2goe1wiIVwiOmV9KTtlbHNle3ZhciB0PXRoaXMuX2N1cnJlbnRMaXN0W3RoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aC0xXTt0aGlzLl9pc0NvbW1lbnROb2RlKHQpP2EuaXNBcnJheSh0W1wiIVwiXSk/dFtcIiFcIl0ucHVzaChlKTp0W1wiIVwiXT1bdFtcIiFcIl0sZV06dGhpcy5fY3VycmVudExpc3QucHVzaCh7XCIhXCI6ZX0pfX0sdC5wcm90b3R5cGUudGV4dD1mdW5jdGlvbihlKXtpZigwPT09dGhpcy5fY3VycmVudExpc3QubGVuZ3RoKXRoaXMuX2N1cnJlbnRMaXN0LnB1c2goe1wiI1wiOmV9KTtlbHNle3ZhciB0PXRoaXMuX2N1cnJlbnRMaXN0W3RoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aC0xXTt0aGlzLl9pc1RleHROb2RlKHQpP2EuaXNBcnJheSh0W1wiI1wiXSk/dFtcIiNcIl0ucHVzaChlKTp0W1wiI1wiXT1bdFtcIiNcIl0sZV06dGhpcy5fY3VycmVudExpc3QucHVzaCh7XCIjXCI6ZX0pfX0sdC5wcm90b3R5cGUuaW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0KXt2YXIgcj1cIlwiPT09dD9lOmUrXCIgXCIrdDtpZigwPT09dGhpcy5fY3VycmVudExpc3QubGVuZ3RoKXRoaXMuX2N1cnJlbnRMaXN0LnB1c2goe1wiP1wiOnJ9KTtlbHNle3ZhciBuPXRoaXMuX2N1cnJlbnRMaXN0W3RoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aC0xXTt0aGlzLl9pc0luc3RydWN0aW9uTm9kZShuKT9hLmlzQXJyYXkobltcIj9cIl0pP25bXCI/XCJdLnB1c2gocik6bltcIj9cIl09W25bXCI/XCJdLHJdOnRoaXMuX2N1cnJlbnRMaXN0LnB1c2goe1wiP1wiOnJ9KX19LHQucHJvdG90eXBlLmNkYXRhPWZ1bmN0aW9uKGUpe2lmKDA9PT10aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgpdGhpcy5fY3VycmVudExpc3QucHVzaCh7JDplfSk7ZWxzZXt2YXIgdD10aGlzLl9jdXJyZW50TGlzdFt0aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgtMV07dGhpcy5faXNDREFUQU5vZGUodCk/YS5pc0FycmF5KHQuJCk/dC4kLnB1c2goZSk6dC4kPVt0LiQsZV06dGhpcy5fY3VycmVudExpc3QucHVzaCh7JDplfSl9fSx0LnByb3RvdHlwZS5faXNBdHRyTm9kZT1mdW5jdGlvbihlKXtyZXR1cm5cIkBcImluIGV9LHQucHJvdG90eXBlLl9pc1RleHROb2RlPWZ1bmN0aW9uKGUpe3JldHVyblwiI1wiaW4gZX0sdC5wcm90b3R5cGUuX2lzQ29tbWVudE5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCIhXCJpbiBlfSx0LnByb3RvdHlwZS5faXNJbnN0cnVjdGlvbk5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCI/XCJpbiBlfSx0LnByb3RvdHlwZS5faXNDREFUQU5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCIkXCJpbiBlfSx0LnByb3RvdHlwZS5faXNFbGVtZW50Tm9kZT1mdW5jdGlvbihlLHQpe3JldHVybiB0IGluIGV9LHQucHJvdG90eXBlLl9nZXRBdHRyS2V5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQuYXR0fSx0LnByb3RvdHlwZS5fZ2V0Tm9kZUtleT1mdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZSBzLk5vZGVUeXBlLkNvbW1lbnQ6cmV0dXJuIHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQuY29tbWVudDtjYXNlIHMuTm9kZVR5cGUuVGV4dDpyZXR1cm4gdGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC50ZXh0O2Nhc2Ugcy5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246cmV0dXJuIHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQuaW5zO2Nhc2Ugcy5Ob2RlVHlwZS5DRGF0YTpyZXR1cm4gdGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5jZGF0YTtkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbm9kZSB0eXBlLlwiKX19LHR9KHIoNTApLkJhc2VXcml0ZXIpO3QuT2JqZWN0V3JpdGVyPXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cig5Myk7bih7dGFyZ2V0OlwiUmVnRXhwXCIscHJvdG86ITAsZm9yY2VkOi8uLy5leGVjIT09aX0se2V4ZWM6aX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5faXRlbXM9e30sdGhpcy5fbnVsbEl0ZW1zPXt9fXJldHVybiBlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXtudWxsPT09ZT90aGlzLl9udWxsSXRlbXNbdF09ITA6KHRoaXMuX2l0ZW1zW2VdfHwodGhpcy5faXRlbXNbZV09e30pLHRoaXMuX2l0ZW1zW2VdW3RdPSEwKX0sZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PT1lPyEwPT09dGhpcy5fbnVsbEl0ZW1zW3RdOiEhdGhpcy5faXRlbXNbZV0mJiEwPT09dGhpcy5faXRlbXNbZV1bdF19LGV9KCk7dC5Mb2NhbE5hbWVTZXQ9bn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDkpLG89cigzKSxhPXIoMCkscz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9ldmVudExpc3RlbmVyTGlzdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2V2ZW50TGlzdGVuZXJMaXN0fHwodGhpcy5fX2V2ZW50TGlzdGVuZXJMaXN0PVtdKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJfZXZlbnRIYW5kbGVyTWFwXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fZXZlbnRIYW5kbGVyTWFwfHwodGhpcy5fX2V2ZW50SGFuZGxlck1hcD17fSl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09ciYmKHI9e3Bhc3NpdmU6ITEsb25jZTohMSxjYXB0dXJlOiExfSk7dmFyIGkscz1uKGEuZXZlbnRUYXJnZXRfZmxhdHRlbk1vcmUociksMyksdT1zWzBdLGw9c1sxXSxjPXNbMl07dCYmKGk9by5HdWFyZC5pc0V2ZW50TGlzdGVuZXIodCk/dDp7aGFuZGxlRXZlbnQ6dH0sYS5ldmVudFRhcmdldF9hZGRFdmVudExpc3RlbmVyKHRoaXMse3R5cGU6ZSxjYWxsYmFjazppLGNhcHR1cmU6dSxwYXNzaXZlOmwsb25jZTpjLHJlbW92ZWQ6ITF9KSl9LGUucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSx0LHIpe3ZvaWQgMD09PXImJihyPXtjYXB0dXJlOiExfSk7dmFyIG49YS5ldmVudFRhcmdldF9mbGF0dGVuKHIpO2lmKHQpZm9yKHZhciBpPTA7aTx0aGlzLl9ldmVudExpc3RlbmVyTGlzdC5sZW5ndGg7aSsrKXt2YXIgcz10aGlzLl9ldmVudExpc3RlbmVyTGlzdFtpXTtpZihzLnR5cGU9PT1lJiZzLmNhcHR1cmU9PT1uKXtpZihvLkd1YXJkLmlzRXZlbnRMaXN0ZW5lcih0KSYmcy5jYWxsYmFjaz09PXQpe2EuZXZlbnRUYXJnZXRfcmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLHMsaSk7YnJlYWt9aWYodCYmcy5jYWxsYmFjay5oYW5kbGVFdmVudD09PXQpe2EuZXZlbnRUYXJnZXRfcmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLHMsaSk7YnJlYWt9fX19LGUucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oZSl7aWYoZS5fZGlzcGF0Y2hGbGFnfHwhZS5faW5pdGlhbGl6ZWRGbGFnKXRocm93IG5ldyBpLkludmFsaWRTdGF0ZUVycm9yO3JldHVybiBlLl9pc1RydXN0ZWQ9ITEsYS5ldmVudF9kaXNwYXRjaChlLHRoaXMpfSxlLnByb3RvdHlwZS5fZ2V0VGhlUGFyZW50PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsfSxlfSgpO3QuRXZlbnRUYXJnZXRJbXBsPXN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDM0KSxhPXIoMCkscz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3ZhciByPWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gci5fZGF0YT10LHJ9cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJkYXRhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhfSxzZXQ6ZnVuY3Rpb24oZSl7YS5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHRoaXMsMCx0aGlzLl9kYXRhLmxlbmd0aCxlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJsZW5ndGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGEubGVuZ3RofSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnN1YnN0cmluZ0RhdGE9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYS5jaGFyYWN0ZXJEYXRhX3N1YnN0cmluZ0RhdGEodGhpcyxlLHQpfSx0LnByb3RvdHlwZS5hcHBlbmREYXRhPWZ1bmN0aW9uKGUpe3JldHVybiBhLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEodGhpcyx0aGlzLl9kYXRhLmxlbmd0aCwwLGUpfSx0LnByb3RvdHlwZS5pbnNlcnREYXRhPWZ1bmN0aW9uKGUsdCl7YS5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHRoaXMsZSwwLHQpfSx0LnByb3RvdHlwZS5kZWxldGVEYXRhPWZ1bmN0aW9uKGUsdCl7YS5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHRoaXMsZSx0LFwiXCIpfSx0LnByb3RvdHlwZS5yZXBsYWNlRGF0YT1mdW5jdGlvbihlLHQscil7YS5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHRoaXMsZSx0LHIpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nXCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBOb25Eb2N1bWVudFR5cGVDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJuZXh0RWxlbWVudFNpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IE5vbkRvY3VtZW50VHlwZUNoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmJlZm9yZT1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmFmdGVyPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucmVwbGFjZVdpdGg9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IENoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHR9KG8uTm9kZUltcGwpO3QuQ2hhcmFjdGVyRGF0YUltcGw9c30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LGk9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LG89dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChpKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDYpLHM9cigzKSx1PXIoMSksbD1yKDE3KSxjPXIoNTEpO2Z1bmN0aW9uIGgoZSl7YS5kb20ud2luZG93Ll9zaWduYWxTbG90cy5hZGQoZSksYy5vYnNlcnZlcl9xdWV1ZUFNdXRhdGlvbk9ic2VydmVyTWljcm90YXNrKCl9ZnVuY3Rpb24gcChlLHQpe3ZvaWQgMD09PXQmJih0PSExKTt2YXIgcj1zLkNhc3QuYXNOb2RlKGUpLl9wYXJlbnQ7aWYobnVsbD09PXIpcmV0dXJuIG51bGw7dmFyIG49ci5fc2hhZG93Um9vdHx8bnVsbDtpZihudWxsPT09bilyZXR1cm4gbnVsbDtpZih0JiZcIm9wZW5cIiE9PW4uX21vZGUpcmV0dXJuIG51bGw7Zm9yKHZhciBpPWwudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKG4sITEsITAsKGZ1bmN0aW9uKGUpe3JldHVybiBzLkd1YXJkLmlzU2xvdChlKX0pKTtudWxsIT09aTspe2lmKGkuX25hbWU9PT1lLl9uYW1lKXJldHVybiBpO2k9bC50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZShuLGksITEsITAsKGZ1bmN0aW9uKGUpe3JldHVybiBzLkd1YXJkLmlzU2xvdChlKX0pKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmKGUpe3ZhciB0LHIsaT1bXSxvPWwudHJlZV9yb290Tm9kZShlKTtpZighcy5HdWFyZC5pc1NoYWRvd1Jvb3QobykpcmV0dXJuIGk7dmFyIGE9by5faG9zdDt0cnl7Zm9yKHZhciB1PW4oYS5fY2hpbGRyZW4pLGM9dS5uZXh0KCk7IWMuZG9uZTtjPXUubmV4dCgpKXt2YXIgaD1jLnZhbHVlO2lmKHMuR3VhcmQuaXNTbG90YWJsZShoKSlwKGgpPT09ZSYmaS5wdXNoKGgpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYocj11LnJldHVybikmJnIuY2FsbCh1KX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIGl9ZnVuY3Rpb24gZChlKXt2YXIgdCxyLGk9ZihlKTtpZihpLmxlbmd0aD09PWUuX2Fzc2lnbmVkTm9kZXMubGVuZ3RoKXtmb3IodmFyIG89ITAsYT0wO2E8aS5sZW5ndGg7YSsrKWlmKGlbYV0hPT1lLl9hc3NpZ25lZE5vZGVzW2FdKXtvPSExO2JyZWFrfW98fGgoZSl9ZS5fYXNzaWduZWROb2Rlcz1pO3RyeXtmb3IodmFyIHM9bihpKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dS52YWx1ZS5fYXNzaWduZWRTbG90PWV9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihyPXMucmV0dXJuKSYmci5jYWxsKHMpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX19dC5zaGFkb3dUcmVlX3NpZ25hbEFTbG90Q2hhbmdlPWgsdC5zaGFkb3dUcmVlX2lzQ29ubmVjdGVkPWZ1bmN0aW9uKGUpe3JldHVybiBzLkd1YXJkLmlzRG9jdW1lbnROb2RlKGwudHJlZV9yb290Tm9kZShlLCEwKSl9LHQuc2hhZG93VHJlZV9pc0Fzc2lnbmVkPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZS5fYXNzaWduZWRTbG90fSx0LnNoYWRvd1RyZWVfZmluZEFTbG90PXAsdC5zaGFkb3dUcmVlX2ZpbmRTbG90YWJsZXM9Zix0LnNoYWRvd1RyZWVfZmluZEZsYXR0ZW5lZFNsb3RhYmxlcz1mdW5jdGlvbiBlKHQpe3ZhciByLGksYSxjLGg9W10scD1sLnRyZWVfcm9vdE5vZGUodCk7aWYoIXMuR3VhcmQuaXNTaGFkb3dSb290KHApKXJldHVybiBoO3ZhciBkPWYodCk7aWYodS5pc0VtcHR5KGQpKXRyeXtmb3IodmFyIG09bih0Ll9jaGlsZHJlbikseT1tLm5leHQoKTsheS5kb25lO3k9bS5uZXh0KCkpe3ZhciB2PXkudmFsdWU7cy5HdWFyZC5pc1Nsb3RhYmxlKHYpJiZkLnB1c2godil9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3kmJiF5LmRvbmUmJihpPW0ucmV0dXJuKSYmaS5jYWxsKG0pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX10cnl7Zm9yKHZhciBfPW4oZCksZz1fLm5leHQoKTshZy5kb25lO2c9Xy5uZXh0KCkpe3ZhciBiPWcudmFsdWU7aWYocy5HdWFyZC5pc1Nsb3QoYikmJnMuR3VhcmQuaXNTaGFkb3dSb290KGwudHJlZV9yb290Tm9kZShiKSkpe3ZhciB4PWUoYik7aC5wdXNoLmFwcGx5KGgsbyh4KSl9ZWxzZSBoLnB1c2goYil9fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2cmJiFnLmRvbmUmJihjPV8ucmV0dXJuKSYmYy5jYWxsKF8pfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX1yZXR1cm4gaH0sdC5zaGFkb3dUcmVlX2Fzc2lnblNsb3RhYmxlcz1kLHQuc2hhZG93VHJlZV9hc3NpZ25TbG90YWJsZXNGb3JBVHJlZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bC50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUoZSwhMCwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIHMuR3VhcmQuaXNTbG90KGUpfSkpO251bGwhPT10OylkKHQpLHQ9bC50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZShlLHQsITAsITEsKGZ1bmN0aW9uKGUpe3JldHVybiBzLkd1YXJkLmlzU2xvdChlKX0pKX0sdC5zaGFkb3dUcmVlX2Fzc2lnbkFTbG90PWZ1bmN0aW9uKGUpe3ZhciB0PXAoZSk7bnVsbCE9PXQmJmQodCl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49L1thLXpdKFtcXDAtXFx0XFx4MkRcXC5fYS16XFx4QjdcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMENcXHUyMDBEXFx1MjAzRlxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdfFtcXHVEODAwLVxcdURCN0ZdW1xcdURDMDAtXFx1REZGRl0pKi0oW1xcMC1cXHRcXHgyRFxcLl9hLXpcXHhCN1xceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQ1xcdTIwMERcXHUyMDNGXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF18W1xcdUQ4MDAtXFx1REI3Rl1bXFx1REMwMC1cXHVERkZGXSkqLyxpPW5ldyBTZXQoW1wiYW5ub3RhdGlvbi14bWxcIixcImNvbG9yLXByb2ZpbGVcIixcImZvbnQtZmFjZVwiLFwiZm9udC1mYWNlLXNyY1wiLFwiZm9udC1mYWNlLXVyaVwiLFwiZm9udC1mYWNlLWZvcm1hdFwiLFwiZm9udC1mYWNlLW5hbWVcIixcIm1pc3NpbmctZ2x5cGhcIl0pLG89bmV3IFNldChbXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiZGl2XCIsXCJmb290ZXJcIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRlclwiLFwibWFpblwiLFwibmF2XCIsXCJwXCIsXCJzZWN0aW9uXCIsXCJzcGFuXCJdKSxhPW5ldyBTZXQoW1wiYXJlYVwiLFwiYmFzZVwiLFwiYmFzZWZvbnRcIixcImJnc291bmRcIixcImJyXCIsXCJjb2xcIixcImVtYmVkXCIsXCJmcmFtZVwiLFwiaHJcIixcImltZ1wiLFwiaW5wdXRcIixcImtleWdlblwiLFwibGlua1wiLFwibWVudWl0ZW1cIixcIm1ldGFcIixcInBhcmFtXCIsXCJzb3VyY2VcIixcInRyYWNrXCIsXCJ3YnJcIl0pLHM9bmV3IFNldChbXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiZGl2XCIsXCJmb290ZXJcIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRlclwiLFwibWFpblwiLFwibmF2XCIsXCJwXCIsXCJzZWN0aW9uXCIsXCJzcGFuXCJdKTt0LmN1c3RvbUVsZW1lbnRfaXNWYWxpZEN1c3RvbUVsZW1lbnROYW1lPWZ1bmN0aW9uKGUpe3JldHVybiEhbi50ZXN0KGUpJiYhaS5oYXMoZSl9LHQuY3VzdG9tRWxlbWVudF9pc1ZhbGlkRWxlbWVudE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uaGFzKGUpfSx0LmN1c3RvbUVsZW1lbnRfaXNWb2lkRWxlbWVudE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGEuaGFzKGUpfSx0LmN1c3RvbUVsZW1lbnRfaXNWYWxpZFNoYWRvd0hvc3ROYW1lPWZ1bmN0aW9uKGUpe3JldHVybiBzLmhhcyhlKX0sdC5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudFVwZ3JhZGVSZWFjdGlvbj1mdW5jdGlvbihlLHQpe30sdC5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudENhbGxiYWNrUmVhY3Rpb249ZnVuY3Rpb24oZSx0LHIpe30sdC5jdXN0b21FbGVtZW50X3VwZ3JhZGU9ZnVuY3Rpb24oZSx0KXt9LHQuY3VzdG9tRWxlbWVudF90cnlUb1VwZ3JhZGU9ZnVuY3Rpb24oZSl7fSx0LmN1c3RvbUVsZW1lbnRfbG9va1VwQUN1c3RvbUVsZW1lbnREZWZpbml0aW9uPWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiBudWxsfX0sZnVuY3Rpb24oZSx0LHIpe3IoNCkoe3RhcmdldDpcIlN0cmluZ1wiLHByb3RvOiEwfSx7cmVwZWF0OnIoMjU5KX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigyNzgpLHIoNjgpLHIoMTc5KSxyKDk0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEwOSksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5fYnVpbGRlck9wdGlvbnM9ZSxlLnBhcnNlciYmT2JqZWN0LmFzc2lnbih0aGlzLGUucGFyc2VyKX1yZXR1cm4gZS5wcm90b3R5cGUuX2RvY1R5cGU9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIGUuZHRkKHtuYW1lOnQscHViSUQ6cixzeXNJRDpufSl9LGUucHJvdG90eXBlLl9jb21tZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY29tKHQpfSxlLnByb3RvdHlwZS5fdGV4dD1mdW5jdGlvbihlLHQpe3JldHVybiBlLnR4dCh0KX0sZS5wcm90b3R5cGUuX2luc3RydWN0aW9uPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZS5pbnModCxyKX0sZS5wcm90b3R5cGUuX2NkYXRhPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZGF0KHQpfSxlLnByb3RvdHlwZS5fZWxlbWVudD1mdW5jdGlvbihlLHQscil7cmV0dXJuIHZvaWQgMD09PXQ/ZS5lbGUocik6ZS5lbGUodCxyKX0sZS5wcm90b3R5cGUuX2F0dHJpYnV0ZT1mdW5jdGlvbihlLHQscixuKXtyZXR1cm4gdm9pZCAwPT09dD9lLmF0dChyLG4pOmUuYXR0KHQscixuKX0sZS5wcm90b3R5cGUuX3Nhbml0aXplPWZ1bmN0aW9uKGUpe3JldHVybiBuLnNhbml0aXplSW5wdXQoZSx0aGlzLl9idWlsZGVyT3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KX0sZS5wcm90b3R5cGUuX2RlY29kZVRleHQ9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXQ/dDp0LnJlcGxhY2UoLyYocXVvdHxhbXB8YXBvc3xsdHxndCk7L2csKGZ1bmN0aW9uKHQscil7cmV0dXJuIGUuX2VudGl0eVRhYmxlW3JdfSkpLnJlcGxhY2UoLyYjKD86eChbYS1mQS1GMC05XSspfChbMC05XSspKTsvZywoZnVuY3Rpb24oZSx0LHIpe3JldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludCh0fHxyLHQ/MTY6MTApKX0pKX0sZS5wcm90b3R5cGUuX2RlY29kZUF0dHJpYnV0ZVZhbHVlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9kZWNvZGVUZXh0KGUpfSxlLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9wYXJzZShlLHQpfSxlLnByb3RvdHlwZS5kb2NUeXBlPWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiB0aGlzLl9kb2NUeXBlKGUsdCxyLG4pfSxlLnByb3RvdHlwZS5jb21tZW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX2NvbW1lbnQoZSx0KX0sZS5wcm90b3R5cGUudGV4dD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl90ZXh0KGUsdCl9LGUucHJvdG90eXBlLmluc3RydWN0aW9uPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5faW5zdHJ1Y3Rpb24oZSx0LHIpfSxlLnByb3RvdHlwZS5jZGF0YT1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9jZGF0YShlLHQpfSxlLnByb3RvdHlwZS5lbGVtZW50PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5fZWxlbWVudChlLHQscil9LGUucHJvdG90eXBlLmF0dHJpYnV0ZT1mdW5jdGlvbihlLHQscixuKXtyZXR1cm4gdGhpcy5fYXR0cmlidXRlKGUsdCxyLG4pfSxlLnByb3RvdHlwZS5zYW5pdGl6ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fc2FuaXRpemUoZSl9LGUuX2VudGl0eVRhYmxlPXtsdDpcIjxcIixndDpcIj5cIixhbXA6XCImXCIscXVvdDonXCInLGFwb3M6XCInXCJ9LGV9KCk7dC5CYXNlUmVhZGVyPWl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM5KTtlLmV4cG9ydHM9bi5ERUZBVUxUPW5ldyBuKHtpbmNsdWRlOltyKDU0KV0sZXhwbGljaXQ6W3IoMjk5KSxyKDMwMCkscigzMDEpXX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigxODUpO3QuWE1MQnVpbGRlckltcGw9bi5YTUxCdWlsZGVySW1wbDt2YXIgaT1yKDMwNCk7dC5YTUxCdWlsZGVyQ0JJbXBsPWkuWE1MQnVpbGRlckNCSW1wbDt2YXIgbz1yKDE4Myk7dC5idWlsZGVyPW8uYnVpbGRlcix0LmNyZWF0ZT1vLmNyZWF0ZSx0LmZyYWdtZW50PW8uZnJhZ21lbnQsdC5jb252ZXJ0PW8uY29udmVydDt2YXIgYT1yKDMwOSk7dC5jcmVhdGVDQj1hLmNyZWF0ZUNCLHQuZnJhZ21lbnRDQj1hLmZyYWdtZW50Q0J9LGZ1bmN0aW9uKGUsdCl7dmFyIHI7cj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXtyPXJ8fG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9Y2F0Y2goZSl7XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmKHI9d2luZG93KX1lLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLGk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixvPWkmJiFuLmNhbGwoezE6Mn0sMSk7dC5mPW8/ZnVuY3Rpb24oZSl7dmFyIHQ9aSh0aGlzLGUpO3JldHVybiEhdCYmdC5lbnVtZXJhYmxlfTpufSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMSksaT1yKDIxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt0cnl7aShuLGUsdCl9Y2F0Y2gocil7bltlXT10fXJldHVybiB0fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDQpLGk9cigxMTgpOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaVtlXXx8KGlbZV09dm9pZCAwIT09dD90Ont9KX0pKFwidmVyc2lvbnNcIixbXSkucHVzaCh7dmVyc2lvbjpcIjMuNi41XCIsbW9kZTpuP1wicHVyZVwiOlwiZ2xvYmFsXCIsY29weXJpZ2h0OlwiXHUwMEE5IDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSlcIn0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMjEpLGk9cig4NCkuY29uY2F0KFwibGVuZ3RoXCIsXCJwcm90b3R5cGVcIik7dC5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLGkpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDcpLGk9TWF0aC5tYXgsbz1NYXRoLm1pbjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uKGUpO3JldHVybiByPDA/aShyK3QsMCk6byhyLHQpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9W1wiY29uc3RydWN0b3JcIixcImhhc093blByb3BlcnR5XCIsXCJpc1Byb3RvdHlwZU9mXCIsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFwidG9Mb2NhbGVTdHJpbmdcIixcInRvU3RyaW5nXCIsXCJ2YWx1ZU9mXCJdfSxmdW5jdGlvbihlLHQpe3QuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSxmdW5jdGlvbihlLHQscil7dmFyIG49cig4KTtlLmV4cG9ydHM9ISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzJiYhbigoZnVuY3Rpb24oKXtyZXR1cm4hU3RyaW5nKFN5bWJvbCgpKX0pKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTI3KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gocil7Y2FzZSAwOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodCl9O2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGUuY2FsbCh0LHIpfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHIsbil7cmV0dXJuIGUuY2FsbCh0LHIsbil9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocixuLGkpe3JldHVybiBlLmNhbGwodCxyLG4saSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMTk1KSxvPXIoMTMyKSxhPXIoMTMzKSxzPXIoNjIpLHU9cigyMSksbD1yKDI1KSxjPXIoNSksaD1yKDQ0KSxwPXIoNDkpLGY9cigxMzEpLGQ9Zi5JdGVyYXRvclByb3RvdHlwZSxtPWYuQlVHR1lfU0FGQVJJX0lURVJBVE9SUyx5PWMoXCJpdGVyYXRvclwiKSx2PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscixjLGYsXyxnKXtpKHIsdCxjKTt2YXIgYix4LHcsRT1mdW5jdGlvbihlKXtpZihlPT09ZiYmTilyZXR1cm4gTjtpZighbSYmZSBpbiBDKXJldHVybiBDW2VdO3N3aXRjaChlKXtjYXNlXCJrZXlzXCI6Y2FzZVwidmFsdWVzXCI6Y2FzZVwiZW50cmllc1wiOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyl9fSxEPXQrXCIgSXRlcmF0b3JcIixTPSExLEM9ZS5wcm90b3R5cGUsQT1DW3ldfHxDW1wiQEBpdGVyYXRvclwiXXx8ZiYmQ1tmXSxOPSFtJiZBfHxFKGYpLFQ9XCJBcnJheVwiPT10JiZDLmVudHJpZXN8fEE7aWYoVCYmKGI9byhULmNhbGwobmV3IGUpKSxkIT09T2JqZWN0LnByb3RvdHlwZSYmYi5uZXh0JiYoaHx8byhiKT09PWR8fChhP2EoYixkKTpcImZ1bmN0aW9uXCIhPXR5cGVvZiBiW3ldJiZ1KGIseSx2KSkscyhiLEQsITAsITApLGgmJihwW0RdPXYpKSksXCJ2YWx1ZXNcIj09ZiYmQSYmXCJ2YWx1ZXNcIiE9PUEubmFtZSYmKFM9ITAsTj1mdW5jdGlvbigpe3JldHVybiBBLmNhbGwodGhpcyl9KSxoJiYhZ3x8Q1t5XT09PU58fHUoQyx5LE4pLHBbdF09TixmKWlmKHg9e3ZhbHVlczpFKFwidmFsdWVzXCIpLGtleXM6Xz9OOkUoXCJrZXlzXCIpLGVudHJpZXM6RShcImVudHJpZXNcIil9LGcpZm9yKHcgaW4geCkobXx8U3x8ISh3IGluIEMpKSYmbChDLHcseFt3XSk7ZWxzZSBuKHt0YXJnZXQ6dCxwcm90bzohMCxmb3JjZWQ6bXx8U30seCk7cmV0dXJuIHh9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMTMpLG89cig1OSksYT1yKDgzKSxzPXIoMjYpLHU9cigyNCksbD1yKDEzNCksYz1yKDUpLGg9cig2MykscD1yKDI4KSxmPWgoXCJzbGljZVwiKSxkPXAoXCJzbGljZVwiLHtBQ0NFU1NPUlM6ITAsMDowLDE6Mn0pLG09YyhcInNwZWNpZXNcIikseT1bXS5zbGljZSx2PU1hdGgubWF4O24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFmfHwhZH0se3NsaWNlOmZ1bmN0aW9uKGUsdCl7dmFyIHIsbixjLGg9dSh0aGlzKSxwPXMoaC5sZW5ndGgpLGY9YShlLHApLGQ9YSh2b2lkIDA9PT10P3A6dCxwKTtpZihvKGgpJiYoXCJmdW5jdGlvblwiIT10eXBlb2Yocj1oLmNvbnN0cnVjdG9yKXx8ciE9PUFycmF5JiYhbyhyLnByb3RvdHlwZSk/aShyKSYmbnVsbD09PShyPXJbbV0pJiYocj12b2lkIDApOnI9dm9pZCAwLHI9PT1BcnJheXx8dm9pZCAwPT09cikpcmV0dXJuIHkuY2FsbChoLGYsZCk7Zm9yKG49bmV3KHZvaWQgMD09PXI/QXJyYXk6cikodihkLWYsMCkpLGM9MDtmPGQ7ZisrLGMrKylmIGluIGgmJmwobixjLGhbZl0pO3JldHVybiBuLmxlbmd0aD1jLG59fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj17fTtuW3IoNSkoXCJ0b1N0cmluZ1RhZ1wiKV09XCJ6XCIsZS5leHBvcnRzPVwiW29iamVjdCB6XVwiPT09U3RyaW5nKG4pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigxOSkscigxMzgpLHIoMjApLHIoOTIpLHIoMjIpLHIoMjMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRGVmYXVsdEJ1aWxkZXJPcHRpb25zPXt2ZXJzaW9uOlwiMS4wXCIsZW5jb2Rpbmc6dm9pZCAwLHN0YW5kYWxvbmU6dm9pZCAwLGtlZXBOdWxsTm9kZXM6ITEsa2VlcE51bGxBdHRyaWJ1dGVzOiExLGlnbm9yZUNvbnZlcnRlcnM6ITEsY29udmVydDp7YXR0OlwiQFwiLGluczpcIj9cIix0ZXh0OlwiI1wiLGNkYXRhOlwiJFwiLGNvbW1lbnQ6XCIhXCJ9LGRlZmF1bHROYW1lc3BhY2U6e2VsZTp2b2lkIDAsYXR0OnZvaWQgMH0sbmFtZXNwYWNlQWxpYXM6e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIseG1sOlwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIseG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHhsaW5rOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wifSxpbnZhbGlkQ2hhclJlcGxhY2VtZW50OnZvaWQgMCxwYXJzZXI6dm9pZCAwfSx0LlhNTEJ1aWxkZXJPcHRpb25LZXlzPW5ldyBTZXQoT2JqZWN0LmtleXModC5EZWZhdWx0QnVpbGRlck9wdGlvbnMpKSx0LkRlZmF1bHRYTUxCdWlsZGVyQ0JPcHRpb25zPXtmb3JtYXQ6XCJ4bWxcIix3ZWxsRm9ybWVkOiExLHByZXR0eVByaW50OiExLGluZGVudDpcIiAgXCIsbmV3bGluZTpcIlxcblwiLG9mZnNldDowLHdpZHRoOjAsYWxsb3dFbXB0eVRhZ3M6ITEsc3BhY2VCZWZvcmVTbGFzaDohMSxrZWVwTnVsbE5vZGVzOiExLGtlZXBOdWxsQXR0cmlidXRlczohMSxpZ25vcmVDb252ZXJ0ZXJzOiExLGNvbnZlcnQ6e2F0dDpcIkBcIixpbnM6XCI/XCIsdGV4dDpcIiNcIixjZGF0YTpcIiRcIixjb21tZW50OlwiIVwifSxkZWZhdWx0TmFtZXNwYWNlOntlbGU6dm9pZCAwLGF0dDp2b2lkIDB9LG5hbWVzcGFjZUFsaWFzOntodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLHhtbDpcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIn19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMzkpLGk9cigxNDMpO2UuZXhwb3J0cz1uKFwiU2V0XCIsKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKHRoaXMsYXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMF06dm9pZCAwKX19KSxpKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGksbz1yKDEzNiksYT1yKDIyMSkscz1SZWdFeHAucHJvdG90eXBlLmV4ZWMsdT1TdHJpbmcucHJvdG90eXBlLnJlcGxhY2UsbD1zLGM9KG49L2EvLGk9L2IqL2cscy5jYWxsKG4sXCJhXCIpLHMuY2FsbChpLFwiYVwiKSwwIT09bi5sYXN0SW5kZXh8fDAhPT1pLmxhc3RJbmRleCksaD1hLlVOU1VQUE9SVEVEX1l8fGEuQlJPS0VOX0NBUkVULHA9dm9pZCAwIT09LygpPz8vLmV4ZWMoXCJcIilbMV07KGN8fHB8fGgpJiYobD1mdW5jdGlvbihlKXt2YXIgdCxyLG4saSxhPXRoaXMsbD1oJiZhLnN0aWNreSxmPW8uY2FsbChhKSxkPWEuc291cmNlLG09MCx5PWU7cmV0dXJuIGwmJigtMT09PShmPWYucmVwbGFjZShcInlcIixcIlwiKSkuaW5kZXhPZihcImdcIikmJihmKz1cImdcIikseT1TdHJpbmcoZSkuc2xpY2UoYS5sYXN0SW5kZXgpLGEubGFzdEluZGV4PjAmJighYS5tdWx0aWxpbmV8fGEubXVsdGlsaW5lJiZcIlxcblwiIT09ZVthLmxhc3RJbmRleC0xXSkmJihkPVwiKD86IFwiK2QrXCIpXCIseT1cIiBcIit5LG0rKykscj1uZXcgUmVnRXhwKFwiXig/OlwiK2QrXCIpXCIsZikpLHAmJihyPW5ldyBSZWdFeHAoXCJeXCIrZCtcIiQoPyFcXFxccylcIixmKSksYyYmKHQ9YS5sYXN0SW5kZXgpLG49cy5jYWxsKGw/cjphLHkpLGw/bj8obi5pbnB1dD1uLmlucHV0LnNsaWNlKG0pLG5bMF09blswXS5zbGljZShtKSxuLmluZGV4PWEubGFzdEluZGV4LGEubGFzdEluZGV4Kz1uWzBdLmxlbmd0aCk6YS5sYXN0SW5kZXg9MDpjJiZuJiYoYS5sYXN0SW5kZXg9YS5nbG9iYWw/bi5pbmRleCtuWzBdLmxlbmd0aDp0KSxwJiZuJiZuLmxlbmd0aD4xJiZ1LmNhbGwoblswXSxyLChmdW5jdGlvbigpe2ZvcihpPTE7aTxhcmd1bWVudHMubGVuZ3RoLTI7aSsrKXZvaWQgMD09PWFyZ3VtZW50c1tpXSYmKG5baV09dm9pZCAwKX0pKSxufSksZS5leHBvcnRzPWx9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDIyNSksaT1yKDE4KSxvPXIoMjcpLGE9cigyNikscz1yKDQ3KSx1PXIoMzUpLGw9cigyMjYpLGM9cigyMjcpLGg9TWF0aC5tYXgscD1NYXRoLm1pbixmPU1hdGguZmxvb3IsZD0vXFwkKFskJidgXXxcXGRcXGQ/fDxbXj5dKj4pL2csbT0vXFwkKFskJidgXXxcXGRcXGQ/KS9nO24oXCJyZXBsYWNlXCIsMiwoZnVuY3Rpb24oZSx0LHIsbil7dmFyIHk9bi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSx2PW4uUkVQTEFDRV9LRUVQU18kMCxfPXk/XCIkXCI6XCIkMFwiO3JldHVybltmdW5jdGlvbihyLG4pe3ZhciBpPXUodGhpcyksbz1udWxsPT1yP3ZvaWQgMDpyW2VdO3JldHVybiB2b2lkIDAhPT1vP28uY2FsbChyLGksbik6dC5jYWxsKFN0cmluZyhpKSxyLG4pfSxmdW5jdGlvbihlLG4pe2lmKCF5JiZ2fHxcInN0cmluZ1wiPT10eXBlb2YgbiYmLTE9PT1uLmluZGV4T2YoXykpe3ZhciBvPXIodCxlLHRoaXMsbik7aWYoby5kb25lKXJldHVybiBvLnZhbHVlfXZhciB1PWkoZSksZj1TdHJpbmcodGhpcyksZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBuO2R8fChuPVN0cmluZyhuKSk7dmFyIG09dS5nbG9iYWw7aWYobSl7dmFyIGI9dS51bmljb2RlO3UubGFzdEluZGV4PTB9Zm9yKHZhciB4PVtdOzspe3ZhciB3PWModSxmKTtpZihudWxsPT09dylicmVhaztpZih4LnB1c2godyksIW0pYnJlYWs7XCJcIj09PVN0cmluZyh3WzBdKSYmKHUubGFzdEluZGV4PWwoZixhKHUubGFzdEluZGV4KSxiKSl9Zm9yKHZhciBFLEQ9XCJcIixTPTAsQz0wO0M8eC5sZW5ndGg7QysrKXt3PXhbQ107Zm9yKHZhciBBPVN0cmluZyh3WzBdKSxOPWgocChzKHcuaW5kZXgpLGYubGVuZ3RoKSwwKSxUPVtdLE89MTtPPHcubGVuZ3RoO08rKylULnB1c2godm9pZCAwPT09KEU9d1tPXSk/RTpTdHJpbmcoRSkpO3ZhciBGPXcuZ3JvdXBzO2lmKGQpe3ZhciBrPVtBXS5jb25jYXQoVCxOLGYpO3ZvaWQgMCE9PUYmJmsucHVzaChGKTt2YXIgUD1TdHJpbmcobi5hcHBseSh2b2lkIDAsaykpfWVsc2UgUD1nKEEsZixOLFQsRixuKTtOPj1TJiYoRCs9Zi5zbGljZShTLE4pK1AsUz1OK0EubGVuZ3RoKX1yZXR1cm4gRCtmLnNsaWNlKFMpfV07ZnVuY3Rpb24gZyhlLHIsbixpLGEscyl7dmFyIHU9bitlLmxlbmd0aCxsPWkubGVuZ3RoLGM9bTtyZXR1cm4gdm9pZCAwIT09YSYmKGE9byhhKSxjPWQpLHQuY2FsbChzLGMsKGZ1bmN0aW9uKHQsbyl7dmFyIHM7c3dpdGNoKG8uY2hhckF0KDApKXtjYXNlXCIkXCI6cmV0dXJuXCIkXCI7Y2FzZVwiJlwiOnJldHVybiBlO2Nhc2VcImBcIjpyZXR1cm4gci5zbGljZSgwLG4pO2Nhc2VcIidcIjpyZXR1cm4gci5zbGljZSh1KTtjYXNlXCI8XCI6cz1hW28uc2xpY2UoMSwtMSldO2JyZWFrO2RlZmF1bHQ6dmFyIGM9K287aWYoMD09PWMpcmV0dXJuIHQ7aWYoYz5sKXt2YXIgaD1mKGMvMTApO3JldHVybiAwPT09aD90Omg8PWw/dm9pZCAwPT09aVtoLTFdP28uY2hhckF0KDEpOmlbaC0xXStvLmNoYXJBdCgxKTp0fXM9aVtjLTFdfXJldHVybiB2b2lkIDA9PT1zP1wiXCI6c30pKX19KSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLl9pdGVtcz17fSx0aGlzLl9udWxsSXRlbXM9W119cmV0dXJuIGUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZTtmb3IodmFyIHIgaW4gdGhpcy5faXRlbXMpdC5faXRlbXNbcl09dGhpcy5faXRlbXNbcl0uc2xpY2UoMCk7cmV0dXJuIHQuX251bGxJdGVtcz10aGlzLl9udWxsSXRlbXMuc2xpY2UoMCksdH0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9bnVsbD09PXQ/dGhpcy5fbnVsbEl0ZW1zOnRoaXMuX2l0ZW1zW3RdfHxudWxsO2lmKG51bGw9PT1yKXJldHVybiBudWxsO2Zvcih2YXIgbj1udWxsLGk9MDtpPHIubGVuZ3RoO2krKylpZigobj1yW2ldKT09PWUpcmV0dXJuIG47cmV0dXJuIG59LGUucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlLHQpe3ZhciByPW51bGw9PT10P3RoaXMuX251bGxJdGVtczp0aGlzLl9pdGVtc1t0XXx8bnVsbDtyZXR1cm4gbnVsbCE9PXImJi0xIT09ci5pbmRleE9mKGUpfSxlLnByb3RvdHlwZS5oYXNQcmVmaXg9ZnVuY3Rpb24oZSl7aWYoLTEhPT10aGlzLl9udWxsSXRlbXMuaW5kZXhPZihlKSlyZXR1cm4hMDtmb3IodmFyIHQgaW4gdGhpcy5faXRlbXMpaWYoLTEhPT10aGlzLl9pdGVtc1t0XS5pbmRleE9mKGUpKXJldHVybiEwO3JldHVybiExfSxlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1udWxsPT09dD90aGlzLl9udWxsSXRlbXM6dGhpcy5faXRlbXNbdF18fG51bGw7bnVsbCE9PXQmJm51bGw9PT1yP3RoaXMuX2l0ZW1zW3RdPVtlXTpyLnB1c2goZSl9LGV9KCk7dC5OYW1lc3BhY2VQcmVmaXhNYXA9bn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU3Vycm9nYXRlPS9bXFx1RDgwMC1cXHVERkZGXS8sdC5TY2FsYXJWYWx1ZT0vW1xcdUQ4MDAtXFx1REZGRl0vLHQuTm9uQ2hhcmFjdGVyPS9bXFx1RkREMC1cXHVGREVGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODNGXFx1RDg3RlxcdUQ4QkZcXHVEOEZGXFx1RDkzRlxcdUQ5N0ZcXHVEOUJGXFx1RDlGRlxcdURBM0ZcXHVEQTdGXFx1REFCRlxcdURBRkZcXHVEQjNGXFx1REI3RlxcdURCQkZcXHVEQkZGXVtcXHVERkZFXFx1REZGRl0vLHQuQVNDSUlDb2RlUG9pbnQ9L1tcXHUwMDAwLVxcdTAwN0ZdLyx0LkFTQ0lJVGFiT3JOZXdMaW5lPS9bXFx0XFxuXFxyXS8sdC5BU0NJSVdoaXRlU3BhY2U9L1tcXHRcXG5cXGZcXHIgXS8sdC5DMENvbnRyb2w9L1tcXHUwMDAwLVxcdTAwMUZdLyx0LkMwQ29udHJvbE9yU3BhY2U9L1tcXHUwMDAwLVxcdTAwMUYgXS8sdC5Db250cm9sPS9bXFx1MDAwMC1cXHUwMDFGXFx1MDA3Ri1cXHUwMDlGXS8sdC5BU0NJSURpZ2l0PS9bMC05XS8sdC5BU0NJSVVwcGVySGV4RGlnaXQ9L1swLTlBLUZdLyx0LkFTQ0lJTG93ZXJIZXhEaWdpdD0vWzAtOWEtZl0vLHQuQVNDSUlIZXhEaWdpdD0vWzAtOUEtRmEtZl0vLHQuQVNDSUlVcHBlckFscGhhPS9bQS1aXS8sdC5BU0NJSUxvd2VyQWxwaGE9L1thLXpdLyx0LkFTQ0lJQWxwaGE9L1tBLVphLXpdLyx0LkFTQ0lJQWxwaGFudW1lcmljPS9bMC05QS1aYS16XS99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxpPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxvPXRoaXMmJnRoaXMuX19zcHJlYWR8fGZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWU9ZS5jb25jYXQoaShhcmd1bWVudHNbdF0pKTtyZXR1cm4gZX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9cig2KSxzPXIoMiksdT1yKDMpLGw9cigxNzEpLGM9cigxMDQpLGg9cig5KSxwPXIoMTcpLGY9cig3MiksZD1yKDMwKTtmdW5jdGlvbiBtKGUsdCl7dm9pZCAwPT09dCYmKHQ9dm9pZCAwKSx2b2lkIDA9PT10JiYodD1udWxsKTt2YXIgcj15KGUsdCxuZXcgRGF0ZSx7fSk7cmV0dXJuIHIuX2lzVHJ1c3RlZD0hMCxyfWZ1bmN0aW9uIHkoZSx0LHIsbil7dmFyIGk9bmV3IGUoXCJcIik7cmV0dXJuIGkuX2luaXRpYWxpemVkRmxhZz0hMCxpLl90aW1lU3RhbXA9ci5nZXRUaW1lKCksT2JqZWN0LmFzc2lnbihpLG4pLGEuZG9tLmZlYXR1cmVzLnN0ZXBzJiZkLmRvbV9ydW5FdmVudENvbnN0cnVjdGluZ1N0ZXBzKGkpLGl9ZnVuY3Rpb24gdihlLHQscixpKXt2YXIgbyxhLGwsYzt2b2lkIDA9PT1yJiYocj0hMSksdm9pZCAwPT09aSYmKGk9e3ZhbHVlOiExfSk7dmFyIGg9ITE7ZS5fZGlzcGF0Y2hGbGFnPSEwO3ZhciBkPXQ7aWYocil7dmFyIG09dC5fYXNzb2NpYXRlZERvY3VtZW50O3UuR3VhcmQuaXNEb2N1bWVudE5vZGUobSkmJihkPW0pfXZhciB5PW51bGwsdj1wLnRyZWVfcmV0YXJnZXQoZS5fcmVsYXRlZFRhcmdldCx0KTtpZih0IT09dnx8dD09PWUuX3JlbGF0ZWRUYXJnZXQpe3ZhciBiPVtdO3RyeXtmb3IodmFyIHg9bihlLl90b3VjaFRhcmdldExpc3QpLHc9eC5uZXh0KCk7IXcuZG9uZTt3PXgubmV4dCgpKXt2YXIgRT13LnZhbHVlO2IucHVzaChwLnRyZWVfcmV0YXJnZXQoRSx0KSl9fWNhdGNoKGUpe289e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3cmJiF3LmRvbmUmJihhPXgucmV0dXJuKSYmYS5jYWxsKHgpfWZpbmFsbHl7aWYobyl0aHJvdyBvLmVycm9yfX1fKGUsdCxkLHYsYiwhMSk7dmFyIEQ9dS5HdWFyZC5pc01vdXNlRXZlbnQoZSkmJlwiY2xpY2tcIj09PWUuX3R5cGU7RCYmdm9pZCAwIT09dC5fYWN0aXZhdGlvbkJlaGF2aW9yJiYoeT10KTtmb3IodmFyIFM9dS5HdWFyZC5pc1Nsb3RhYmxlKHQpJiZmLnNoYWRvd1RyZWVfaXNBc3NpZ25lZCh0KT90Om51bGwsQz0hMSxBPXQuX2dldFRoZVBhcmVudChlKTtudWxsIT09QSYmdS5HdWFyZC5pc05vZGUoQSk7KXtpZihudWxsIT09Uyl7aWYoIXUuR3VhcmQuaXNTbG90KEEpKXRocm93IG5ldyBFcnJvcihcIlBhcmVudCBub2RlIG9mIGEgc2xvdGFibGUgc2hvdWxkIGJlIGEgc2xvdC5cIik7Uz1udWxsO3ZhciBOPXAudHJlZV9yb290Tm9kZShBLCEwKTt1Lkd1YXJkLmlzU2hhZG93Um9vdChOKSYmXCJjbG9zZWRcIj09PU4uX21vZGUmJihDPSEwKX11Lkd1YXJkLmlzU2xvdGFibGUoQSkmJmYuc2hhZG93VHJlZV9pc0Fzc2lnbmVkKEEpJiYoUz1BKSx2PXAudHJlZV9yZXRhcmdldChlLl9yZWxhdGVkVGFyZ2V0LEEpLGI9W107dHJ5e2Zvcih2YXIgVD0obD12b2lkIDAsbihlLl90b3VjaFRhcmdldExpc3QpKSxPPVQubmV4dCgpOyFPLmRvbmU7Tz1ULm5leHQoKSl7RT1PLnZhbHVlO2IucHVzaChwLnRyZWVfcmV0YXJnZXQoRSxBKSl9fWNhdGNoKGUpe2w9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e08mJiFPLmRvbmUmJihjPVQucmV0dXJuKSYmYy5jYWxsKFQpfWZpbmFsbHl7aWYobCl0aHJvdyBsLmVycm9yfX11Lkd1YXJkLmlzV2luZG93KEEpfHx1Lkd1YXJkLmlzTm9kZShBKSYmdS5HdWFyZC5pc05vZGUodCkmJnAudHJlZV9pc0FuY2VzdG9yT2YocC50cmVlX3Jvb3ROb2RlKHQsITApLEEsITAsITApPyhEJiZlLl9idWJibGVzJiZudWxsPT09eSYmQS5fYWN0aXZhdGlvbkJlaGF2aW9yJiYoeT1BKSxfKGUsQSxudWxsLHYsYixDKSk6QT09PXY/QT1udWxsOih0PUEsRCYmbnVsbD09PXkmJnQuX2FjdGl2YXRpb25CZWhhdmlvciYmKHk9dCksXyhlLEEsdCx2LGIsQykpLG51bGwhPT1BJiYoQT1BLl9nZXRUaGVQYXJlbnQoZSkpLEM9ITF9Zm9yKHZhciBGPW51bGwsaz1lLl9wYXRoLFA9ay5sZW5ndGgtMTtQPj0wO1AtLSl7aWYobnVsbCE9PShMPWtbUF0pLnNoYWRvd0FkanVzdGVkVGFyZ2V0KXtGPUw7YnJlYWt9fWlmKG51bGwhPT1GKWlmKHUuR3VhcmQuaXNOb2RlKEYuc2hhZG93QWRqdXN0ZWRUYXJnZXQpJiZ1Lkd1YXJkLmlzU2hhZG93Um9vdChwLnRyZWVfcm9vdE5vZGUoRi5zaGFkb3dBZGp1c3RlZFRhcmdldCwhMCkpKWg9ITA7ZWxzZSBpZih1Lkd1YXJkLmlzTm9kZShGLnJlbGF0ZWRUYXJnZXQpJiZ1Lkd1YXJkLmlzU2hhZG93Um9vdChwLnRyZWVfcm9vdE5vZGUoRi5yZWxhdGVkVGFyZ2V0LCEwKSkpaD0hMDtlbHNlIGZvcih2YXIgST0wO0k8Ri50b3VjaFRhcmdldExpc3QubGVuZ3RoO0krKyl7dmFyIEw9Ri50b3VjaFRhcmdldExpc3RbSV07aWYodS5HdWFyZC5pc05vZGUoTCkmJnUuR3VhcmQuaXNTaGFkb3dSb290KHAudHJlZV9yb290Tm9kZShMLCEwKSkpe2g9ITA7YnJlYWt9fW51bGwhPT15JiZ2b2lkIDAhPT15Ll9sZWdhY3lQcmVBY3RpdmF0aW9uQmVoYXZpb3ImJnkuX2xlZ2FjeVByZUFjdGl2YXRpb25CZWhhdmlvcihlKTtmb3IoUD1rLmxlbmd0aC0xO1A+PTA7UC0tKXtudWxsIT09KEw9a1tQXSkuc2hhZG93QWRqdXN0ZWRUYXJnZXQ/ZS5fZXZlbnRQaGFzZT1zLkV2ZW50UGhhc2UuQXRUYXJnZXQ6ZS5fZXZlbnRQaGFzZT1zLkV2ZW50UGhhc2UuQ2FwdHVyaW5nLGcoTCxlLFwiY2FwdHVyaW5nXCIsaSl9Zm9yKFA9MDtQPGsubGVuZ3RoO1ArKyl7aWYobnVsbCE9PShMPWtbUF0pLnNoYWRvd0FkanVzdGVkVGFyZ2V0KWUuX2V2ZW50UGhhc2U9cy5FdmVudFBoYXNlLkF0VGFyZ2V0O2Vsc2V7aWYoIWUuX2J1YmJsZXMpY29udGludWU7ZS5fZXZlbnRQaGFzZT1zLkV2ZW50UGhhc2UuQnViYmxpbmd9ZyhMLGUsXCJidWJibGluZ1wiLGkpfX1yZXR1cm4gZS5fZXZlbnRQaGFzZT1zLkV2ZW50UGhhc2UuTm9uZSxlLl9jdXJyZW50VGFyZ2V0PW51bGwsZS5fcGF0aD1bXSxlLl9kaXNwYXRjaEZsYWc9ITEsZS5fc3RvcFByb3BhZ2F0aW9uRmxhZz0hMSxlLl9zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25GbGFnPSExLGgmJihlLl90YXJnZXQ9bnVsbCxlLl9yZWxhdGVkVGFyZ2V0PW51bGwsZS5fdG91Y2hUYXJnZXRMaXN0PVtdKSxudWxsIT09eSYmKGUuX2NhbmNlbGVkRmxhZ3x8dm9pZCAwPT09eS5fYWN0aXZhdGlvbkJlaGF2aW9yP3ZvaWQgMCE9PXkuX2xlZ2FjeUNhbmNlbGVkQWN0aXZhdGlvbkJlaGF2aW9yJiZ5Ll9sZWdhY3lDYW5jZWxlZEFjdGl2YXRpb25CZWhhdmlvcihlKTp5Ll9hY3RpdmF0aW9uQmVoYXZpb3IoZSkpLCFlLl9jYW5jZWxlZEZsYWd9ZnVuY3Rpb24gXyhlLHQscixuLGksbyl7dmFyIGE9ITE7dS5HdWFyZC5pc05vZGUodCkmJnUuR3VhcmQuaXNTaGFkb3dSb290KHAudHJlZV9yb290Tm9kZSh0KSkmJihhPSEwKTt2YXIgcz0hMTt1Lkd1YXJkLmlzU2hhZG93Um9vdCh0KSYmXCJjbG9zZWRcIj09PXQuX21vZGUmJihzPSEwKSxlLl9wYXRoLnB1c2goe2ludm9jYXRpb25UYXJnZXQ6dCxpbnZvY2F0aW9uVGFyZ2V0SW5TaGFkb3dUcmVlOmEsc2hhZG93QWRqdXN0ZWRUYXJnZXQ6cixyZWxhdGVkVGFyZ2V0Om4sdG91Y2hUYXJnZXRMaXN0Omkscm9vdE9mQ2xvc2VkVHJlZTpzLHNsb3RJbkNsb3NlZFRyZWU6b30pfWZ1bmN0aW9uIGcoZSx0LHIsbil7dm9pZCAwPT09biYmKG49e3ZhbHVlOiExfSk7Zm9yKHZhciBpPXQuX3BhdGgsYT0tMSxzPTA7czxpLmxlbmd0aDtzKyspaWYoaVtzXT09PWUpe2E9czticmVha31pZigtMSE9PWEpe3ZhciB1PWlbYV07KG51bGwhPT11LnNoYWRvd0FkanVzdGVkVGFyZ2V0fHxhPjAmJm51bGwhPT0odT1pW2EtMV0pLnNoYWRvd0FkanVzdGVkVGFyZ2V0KSYmKHQuX3RhcmdldD11LnNoYWRvd0FkanVzdGVkVGFyZ2V0KX1pZih0Ll9yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCx0Ll90b3VjaFRhcmdldExpc3Q9ZS50b3VjaFRhcmdldExpc3QsIXQuX3N0b3BQcm9wYWdhdGlvbkZsYWcpe3QuX2N1cnJlbnRUYXJnZXQ9ZS5pbnZvY2F0aW9uVGFyZ2V0O3ZhciBsPXQuX2N1cnJlbnRUYXJnZXQuX2V2ZW50TGlzdGVuZXJMaXN0LGM9bmV3KEFycmF5LmJpbmQuYXBwbHkoQXJyYXksbyhbdm9pZCAwXSxsKSkpO2lmKCFiKHQsYyxyLGUsbikmJnQuX2lzVHJ1c3RlZCl7dmFyIGg9dC5fdHlwZTtcImFuaW1hdGlvbmVuZFwiPT09aD90Ll90eXBlPVwid2Via2l0QW5pbWF0aW9uRW5kXCI6XCJhbmltYXRpb25pdGVyYXRpb25cIj09PWg/dC5fdHlwZT1cIndlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvblwiOlwiYW5pbWF0aW9uc3RhcnRcIj09PWg/dC5fdHlwZT1cIndlYmtpdEFuaW1hdGlvblN0YXJ0XCI6XCJ0cmFuc2l0aW9uZW5kXCI9PT1oJiYodC5fdHlwZT1cIndlYmtpdFRyYW5zaXRpb25FbmRcIiksYih0LGMscixlLG4pLHQuX3R5cGU9aH19fWZ1bmN0aW9uIGIoZSx0LHIsbixpKXt2b2lkIDA9PT1pJiYoaT17dmFsdWU6ITF9KTtmb3IodmFyIG89ITEsYT0wO2E8dC5sZW5ndGg7YSsrKXt2YXIgcz10W2FdO2lmKCFzLnJlbW92ZWQpe2lmKGUuX3R5cGUhPT1zLnR5cGUpY29udGludWU7aWYobz0hMCxcImNhcHR1cmluZ1wiPT09ciYmIXMuY2FwdHVyZSljb250aW51ZTtpZihcImJ1YmJsaW5nXCI9PT1yJiZzLmNhcHR1cmUpY29udGludWU7aWYocy5vbmNlJiZudWxsIT09ZS5fY3VycmVudFRhcmdldCl7Zm9yKHZhciBsPWUuX2N1cnJlbnRUYXJnZXQsYz0tMSxoPTA7aDxsLl9ldmVudExpc3RlbmVyTGlzdC5sZW5ndGg7aCsrKWlmKGwuX2V2ZW50TGlzdGVuZXJMaXN0W2hdPT09cyl7Yz1oO2JyZWFrfS0xIT09YyYmbC5fZXZlbnRMaXN0ZW5lckxpc3Quc3BsaWNlKGMsMSl9dmFyIHA9dm9pZCAwLGY9dm9pZCAwO3UuR3VhcmQuaXNXaW5kb3cocCkmJihmPXAuX2N1cnJlbnRFdmVudCwhMT09PW4uaW52b2NhdGlvblRhcmdldEluU2hhZG93VHJlZSYmKHAuX2N1cnJlbnRFdmVudD1lKSkscy5wYXNzaXZlJiYoZS5faW5QYXNzaXZlTGlzdGVuZXJGbGFnPSEwKTt0cnl7cy5jYWxsYmFjay5oYW5kbGVFdmVudC5jYWxsKGUuX2N1cnJlbnRUYXJnZXQsZSl9Y2F0Y2goZSl7aS52YWx1ZT0hMH1pZihzLnBhc3NpdmUmJihlLl9pblBhc3NpdmVMaXN0ZW5lckZsYWc9ITEpLHUuR3VhcmQuaXNXaW5kb3cocCkmJihwLl9jdXJyZW50RXZlbnQ9ZiksZS5fc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uRmxhZylyZXR1cm4gb319cmV0dXJuIG99ZnVuY3Rpb24geChlLHQpe3JldHVybiBudWxsfWZ1bmN0aW9uIHcoZSx0KXtyZXR1cm4gbnVsbH1mdW5jdGlvbiBFKGUsdCl7fWZ1bmN0aW9uIEQoZSx0KXt9dC5ldmVudF9zZXRUaGVDYW5jZWxlZEZsYWc9ZnVuY3Rpb24oZSl7ZS5fY2FuY2VsYWJsZSYmIWUuX2luUGFzc2l2ZUxpc3RlbmVyRmxhZyYmKGUuX2NhbmNlbGVkRmxhZz0hMCl9LHQuZXZlbnRfaW5pdGlhbGl6ZT1mdW5jdGlvbihlLHQscixuKXtlLl9pbml0aWFsaXplZEZsYWc9ITAsZS5fc3RvcFByb3BhZ2F0aW9uRmxhZz0hMSxlLl9zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25GbGFnPSExLGUuX2NhbmNlbGVkRmxhZz0hMSxlLl9pc1RydXN0ZWQ9ITEsZS5fdGFyZ2V0PW51bGwsZS5fdHlwZT10LGUuX2J1YmJsZXM9cixlLl9jYW5jZWxhYmxlPW59LHQuZXZlbnRfY3JlYXRlQW5FdmVudD1tLHQuZXZlbnRfaW5uZXJFdmVudENyZWF0aW9uU3RlcHM9eSx0LmV2ZW50X2Rpc3BhdGNoPXYsdC5ldmVudF9hcHBlbmRUb0FuRXZlbnRQYXRoPV8sdC5ldmVudF9pbnZva2U9Zyx0LmV2ZW50X2lubmVySW52b2tlPWIsdC5ldmVudF9maXJlQW5FdmVudD1mdW5jdGlvbihlLHQscixuLGkpe3ZvaWQgMD09PXImJihyPWMuRXZlbnRJbXBsKTt2YXIgbz1tKHIpO2lmKG8uX3R5cGU9ZSxuKWZvcih2YXIgYSBpbiBuKXtvW2FdPW5bYV19cmV0dXJuIHYobyx0LGkpfSx0LmV2ZW50X2NyZWF0ZUxlZ2FjeUV2ZW50PWZ1bmN0aW9uKGUpe3ZhciB0PW51bGw7c3dpdGNoKGUudG9Mb3dlckNhc2UoKSl7Y2FzZVwiYmVmb3JldW5sb2FkZXZlbnRcIjpjYXNlXCJjb21wb3NpdGlvbmV2ZW50XCI6YnJlYWs7Y2FzZVwiY3VzdG9tZXZlbnRcIjp0PWwuQ3VzdG9tRXZlbnRJbXBsO2JyZWFrO2Nhc2VcImRldmljZW1vdGlvbmV2ZW50XCI6Y2FzZVwiZGV2aWNlb3JpZW50YXRpb25ldmVudFwiOmNhc2VcImRyYWdldmVudFwiOmJyZWFrO2Nhc2VcImV2ZW50XCI6Y2FzZVwiZXZlbnRzXCI6dD1jLkV2ZW50SW1wbH1pZihudWxsPT09dCl0aHJvdyBuZXcgaC5Ob3RTdXBwb3J0ZWRFcnJvcihcIkV2ZW50IGNvbnN0cnVjdG9yIG5vdCBmb3VuZCBmb3IgaW50ZXJmYWNlIFwiK2UrXCIuXCIpO3ZhciByPW5ldyB0KFwiXCIpO3JldHVybiByLl90eXBlPVwiXCIsci5fdGltZVN0YW1wPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHIuX2lzVHJ1c3RlZD0hMSxyLl9pbml0aWFsaXplZEZsYWc9ITEscn0sdC5ldmVudF9nZXR0ZXJFdmVudEhhbmRsZXJJRExBdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbH0sdC5ldmVudF9zZXR0ZXJFdmVudEhhbmRsZXJJRExBdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0LHIpe30sdC5ldmVudF9kZXRlcm1pbmVUaGVUYXJnZXRPZkFuRXZlbnRIYW5kbGVyPXgsdC5ldmVudF9nZXRUaGVDdXJyZW50VmFsdWVPZkFuRXZlbnRIYW5kbGVyPXcsdC5ldmVudF9hY3RpdmF0ZUFuRXZlbnRIYW5kbGVyPUUsdC5ldmVudF9kZWFjdGl2YXRlQW5FdmVudEhhbmRsZXI9RH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pLG89dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0sYT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9cig2KSx1PXIoMiksbD1yKDkpLGM9cigzNCksaD1yKDMpLHA9cigxKSxmPXIoNyksZD1yKDE1MiksbT1yKDApLHk9cigxMiksdj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIHQ9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiB0Ll9jaGlsZHJlbj1uZXcgU2V0LHQuX2VuY29kaW5nPXtuYW1lOlwiVVRGLThcIixsYWJlbHM6W1widW5pY29kZS0xLTEtdXRmLThcIixcInV0Zi04XCIsXCJ1dGY4XCJdfSx0Ll9jb250ZW50VHlwZT1cImFwcGxpY2F0aW9uL3htbFwiLHQuX1VSTD17c2NoZW1lOlwiYWJvdXRcIix1c2VybmFtZTpcIlwiLHBhc3N3b3JkOlwiXCIsaG9zdDpudWxsLHBvcnQ6bnVsbCxwYXRoOltcImJsYW5rXCJdLHF1ZXJ5Om51bGwsZnJhZ21lbnQ6bnVsbCxfY2Fubm90QmVBQmFzZVVSTEZsYWc6ITAsX2Jsb2JVUkxFbnRyeTpudWxsfSx0Ll9vcmlnaW49bnVsbCx0Ll90eXBlPVwieG1sXCIsdC5fbW9kZT1cIm5vLXF1aXJrc1wiLHQuX2RvY3VtZW50RWxlbWVudD1udWxsLHQuX2hhc05hbWVzcGFjZXM9ITEsdC5fbm9kZURvY3VtZW50T3ZlcndyaXRlPW51bGwsdH1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIl9ub2RlRG9jdW1lbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25vZGVEb2N1bWVudE92ZXJ3cml0ZXx8dGhpc30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX25vZGVEb2N1bWVudE92ZXJ3cml0ZT1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImltcGxlbWVudGF0aW9uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbXBsZW1lbnRhdGlvbnx8KHRoaXMuX2ltcGxlbWVudGF0aW9uPW0uY3JlYXRlX2RvbUltcGxlbWVudGF0aW9uKHRoaXMpKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJVUkxcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGQudXJsU2VyaWFsaXplcih0aGlzLl9VUkwpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRvY3VtZW50VVJJXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLlVSTH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJvcmlnaW5cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJudWxsXCJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY29tcGF0TW9kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cInF1aXJrc1wiPT09dGhpcy5fbW9kZT9cIkJhY2tDb21wYXRcIjpcIkNTUzFDb21wYXRcIn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjaGFyYWN0ZXJTZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VuY29kaW5nLm5hbWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2hhcnNldFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW5jb2RpbmcubmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJpbnB1dEVuY29kaW5nXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmNvZGluZy5uYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNvbnRlbnRUeXBlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb250ZW50VHlwZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJkb2N0eXBlXCIse2dldDpmdW5jdGlvbigpe3ZhciBlLHQ7dHJ5e2Zvcih2YXIgcj1vKHRoaXMuX2NoaWxkcmVuKSxuPXIubmV4dCgpOyFuLmRvbmU7bj1yLm5leHQoKSl7dmFyIGk9bi52YWx1ZTtpZihoLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZShpKSlyZXR1cm4gaX19Y2F0Y2godCl7ZT17ZXJyb3I6dH19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHQ9ci5yZXR1cm4pJiZ0LmNhbGwocil9ZmluYWxseXtpZihlKXRocm93IGUuZXJyb3J9fXJldHVybiBudWxsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRvY3VtZW50RWxlbWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZG9jdW1lbnRFbGVtZW50fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiBtLm5vZGVfbGlzdE9mRWxlbWVudHNXaXRoUXVhbGlmaWVkTmFtZShlLHRoaXMpfSx0LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG0ubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhOYW1lc3BhY2UoZSx0LHRoaXMpfSx0LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiBtLm5vZGVfbGlzdE9mRWxlbWVudHNXaXRoQ2xhc3NOYW1lcyhlLHRoaXMpfSx0LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50PWZ1bmN0aW9uKGUsdCl7aWYoIW0ueG1sX2lzTmFtZShlKSl0aHJvdyBuZXcgbC5JbnZhbGlkQ2hhcmFjdGVyRXJyb3I7XCJodG1sXCI9PT10aGlzLl90eXBlJiYoZT1lLnRvTG93ZXJDYXNlKCkpO3ZhciByPW51bGw7dm9pZCAwIT09dCYmKHI9cC5pc1N0cmluZyh0KT90OnQuaXMpO3ZhciBuPVwiaHRtbFwiPT09dGhpcy5fdHlwZXx8XCJhcHBsaWNhdGlvbi94aHRtbCt4bWxcIj09PXRoaXMuX2NvbnRlbnRUeXBlP2YubmFtZXNwYWNlLkhUTUw6bnVsbDtyZXR1cm4gbS5lbGVtZW50X2NyZWF0ZUFuRWxlbWVudCh0aGlzLGUsbixudWxsLHIsITApfSx0LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50TlM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBtLmRvY3VtZW50X2ludGVybmFsQ3JlYXRlRWxlbWVudE5TKHRoaXMsZSx0LHIpfSx0LnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIG0uY3JlYXRlX2RvY3VtZW50RnJhZ21lbnQodGhpcyl9LHQucHJvdG90eXBlLmNyZWF0ZVRleHROb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBtLmNyZWF0ZV90ZXh0KHRoaXMsZSl9LHQucHJvdG90eXBlLmNyZWF0ZUNEQVRBU2VjdGlvbj1mdW5jdGlvbihlKXtpZihcImh0bWxcIj09PXRoaXMuX3R5cGUpdGhyb3cgbmV3IGwuTm90U3VwcG9ydGVkRXJyb3I7aWYoLTEhPT1lLmluZGV4T2YoXCJdXT5cIikpdGhyb3cgbmV3IGwuSW52YWxpZENoYXJhY3RlckVycm9yO3JldHVybiBtLmNyZWF0ZV9jZGF0YVNlY3Rpb24odGhpcyxlKX0sdC5wcm90b3R5cGUuY3JlYXRlQ29tbWVudD1mdW5jdGlvbihlKXtyZXR1cm4gbS5jcmVhdGVfY29tbWVudCh0aGlzLGUpfSx0LnByb3RvdHlwZS5jcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0KXtpZighbS54bWxfaXNOYW1lKGUpKXRocm93IG5ldyBsLkludmFsaWRDaGFyYWN0ZXJFcnJvcjtpZigtMSE9PXQuaW5kZXhPZihcIj8+XCIpKXRocm93IG5ldyBsLkludmFsaWRDaGFyYWN0ZXJFcnJvcjtyZXR1cm4gbS5jcmVhdGVfcHJvY2Vzc2luZ0luc3RydWN0aW9uKHRoaXMsZSx0KX0sdC5wcm90b3R5cGUuaW1wb3J0Tm9kZT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQmJih0PSExKSxoLkd1YXJkLmlzRG9jdW1lbnROb2RlKGUpfHxoLkd1YXJkLmlzU2hhZG93Um9vdChlKSl0aHJvdyBuZXcgbC5Ob3RTdXBwb3J0ZWRFcnJvcjtyZXR1cm4gbS5ub2RlX2Nsb25lKGUsdGhpcyx0KX0sdC5wcm90b3R5cGUuYWRvcHROb2RlPWZ1bmN0aW9uKGUpe2lmKGguR3VhcmQuaXNEb2N1bWVudE5vZGUoZSkpdGhyb3cgbmV3IGwuTm90U3VwcG9ydGVkRXJyb3I7aWYoaC5HdWFyZC5pc1NoYWRvd1Jvb3QoZSkpdGhyb3cgbmV3IGwuSGllcmFyY2h5UmVxdWVzdEVycm9yO3JldHVybiBtLmRvY3VtZW50X2Fkb3B0KGUsdGhpcyksZX0sdC5wcm90b3R5cGUuY3JlYXRlQXR0cmlidXRlPWZ1bmN0aW9uKGUpe2lmKCFtLnhtbF9pc05hbWUoZSkpdGhyb3cgbmV3IGwuSW52YWxpZENoYXJhY3RlckVycm9yO3JldHVyblwiaHRtbFwiPT09dGhpcy5fdHlwZSYmKGU9ZS50b0xvd2VyQ2FzZSgpKSxtLmNyZWF0ZV9hdHRyKHRoaXMsZSl9LHQucHJvdG90eXBlLmNyZWF0ZUF0dHJpYnV0ZU5TPWZ1bmN0aW9uKGUsdCl7dmFyIHI9YShtLm5hbWVzcGFjZV92YWxpZGF0ZUFuZEV4dHJhY3QoZSx0KSwzKSxuPXJbMF0saT1yWzFdLG89clsyXSxzPW0uY3JlYXRlX2F0dHIodGhpcyxvKTtyZXR1cm4gcy5fbmFtZXNwYWNlPW4scy5fbmFtZXNwYWNlUHJlZml4PWksc30sdC5wcm90b3R5cGUuY3JlYXRlRXZlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG0uZXZlbnRfY3JlYXRlTGVnYWN5RXZlbnQoZSl9LHQucHJvdG90eXBlLmNyZWF0ZVJhbmdlPWZ1bmN0aW9uKCl7dmFyIGU9bS5jcmVhdGVfcmFuZ2UoKTtyZXR1cm4gZS5fc3RhcnQ9W3RoaXMsMF0sZS5fZW5kPVt0aGlzLDBdLGV9LHQucHJvdG90eXBlLmNyZWF0ZU5vZGVJdGVyYXRvcj1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09dCYmKHQ9dS5XaGF0VG9TaG93LkFsbCksdm9pZCAwPT09ciYmKHI9bnVsbCk7dmFyIG49bS5jcmVhdGVfbm9kZUl0ZXJhdG9yKGUsZSwhMCk7cmV0dXJuIG4uX3doYXRUb1Nob3c9dCxuLl9pdGVyYXRvckNvbGxlY3Rpb249bS5jcmVhdGVfbm9kZUxpc3QoZSkscC5pc0Z1bmN0aW9uKHIpPyhuLl9maWx0ZXI9bS5jcmVhdGVfbm9kZUZpbHRlcigpLG4uX2ZpbHRlci5hY2NlcHROb2RlPXIpOm4uX2ZpbHRlcj1yLG59LHQucHJvdG90eXBlLmNyZWF0ZVRyZWVXYWxrZXI9ZnVuY3Rpb24oZSx0LHIpe3ZvaWQgMD09PXQmJih0PXUuV2hhdFRvU2hvdy5BbGwpLHZvaWQgMD09PXImJihyPW51bGwpO3ZhciBuPW0uY3JlYXRlX3RyZWVXYWxrZXIoZSxlKTtyZXR1cm4gbi5fd2hhdFRvU2hvdz10LHAuaXNGdW5jdGlvbihyKT8obi5fZmlsdGVyPW0uY3JlYXRlX25vZGVGaWx0ZXIoKSxuLl9maWx0ZXIuYWNjZXB0Tm9kZT1yKTpuLl9maWx0ZXI9cixufSx0LnByb3RvdHlwZS5fZ2V0VGhlUGFyZW50PWZ1bmN0aW9uKGUpe3JldHVyblwibG9hZFwiPT09ZS5fdHlwZT9udWxsOnMuZG9tLndpbmRvd30sdC5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5SWQ9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IE5vbkVsZW1lbnRQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNoaWxkcmVuXCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZmlyc3RFbGVtZW50Q2hpbGRcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJsYXN0RWxlbWVudENoaWxkXCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2hpbGRFbGVtZW50Q291bnRcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5wcmVwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGw9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdH0oYy5Ob2RlSW1wbCk7dC5Eb2N1bWVudEltcGw9dix5LmlkbF9kZWZpbmVDb25zdCh2LnByb3RvdHlwZSxcIl9ub2RlVHlwZVwiLHUuTm9kZVR5cGUuRG9jdW1lbnQpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksbz10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxhPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDIpLHU9cigzNCksbD1yKDkpLGM9cig3KSxoPXIoMCkscD1yKDEyKSxmPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgdD1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHQuX2NoaWxkcmVuPW5ldyBTZXQsdC5fbmFtZXNwYWNlPW51bGwsdC5fbmFtZXNwYWNlUHJlZml4PW51bGwsdC5fbG9jYWxOYW1lPVwiXCIsdC5fY3VzdG9tRWxlbWVudFN0YXRlPVwidW5kZWZpbmVkXCIsdC5fY3VzdG9tRWxlbWVudERlZmluaXRpb249bnVsbCx0Ll9pcz1udWxsLHQuX3NoYWRvd1Jvb3Q9bnVsbCx0Ll9hdHRyaWJ1dGVMaXN0PWguY3JlYXRlX25hbWVkTm9kZU1hcCh0KSx0Ll9hdHRyaWJ1dGVDaGFuZ2VTdGVwcz1bXSx0Ll9uYW1lPVwiXCIsdC5fYXNzaWduZWRTbG90PW51bGwsdH1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5hbWVzcGFjZVVSSVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZXNwYWNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInByZWZpeFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZXNwYWNlUHJlZml4fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImxvY2FsTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbG9jYWxOYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInRhZ05hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2h0bWxVcHBlcmNhc2VkUXVhbGlmaWVkTmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJpZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5lbGVtZW50X2dldEFuQXR0cmlidXRlVmFsdWUodGhpcyxcImlkXCIpfSxzZXQ6ZnVuY3Rpb24oZSl7aC5lbGVtZW50X3NldEFuQXR0cmlidXRlVmFsdWUodGhpcyxcImlkXCIsZSl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2xhc3NOYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBoLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVWYWx1ZSh0aGlzLFwiY2xhc3NcIil9LHNldDpmdW5jdGlvbihlKXtoLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGVWYWx1ZSh0aGlzLFwiY2xhc3NcIixlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjbGFzc0xpc3RcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGU9aC5lbGVtZW50X2dldEFuQXR0cmlidXRlQnlOYW1lKFwiY2xhc3NcIix0aGlzKTtyZXR1cm4gbnVsbD09PWUmJihlPWguY3JlYXRlX2F0dHIodGhpcy5fbm9kZURvY3VtZW50LFwiY2xhc3NcIikpLGguY3JlYXRlX2RvbVRva2VuTGlzdCh0aGlzLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInNsb3RcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGguZWxlbWVudF9nZXRBbkF0dHJpYnV0ZVZhbHVlKHRoaXMsXCJzbG90XCIpfSxzZXQ6ZnVuY3Rpb24oZSl7aC5lbGVtZW50X3NldEFuQXR0cmlidXRlVmFsdWUodGhpcyxcInNsb3RcIixlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5oYXNBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIDAhPT10aGlzLl9hdHRyaWJ1dGVMaXN0Lmxlbmd0aH0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiYXR0cmlidXRlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXR0cmlidXRlTGlzdH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOYW1lcz1mdW5jdGlvbigpe3ZhciBlLHQscj1bXTt0cnl7Zm9yKHZhciBuPW8odGhpcy5fYXR0cmlidXRlTGlzdCksaT1uLm5leHQoKTshaS5kb25lO2k9bi5uZXh0KCkpe3ZhciBhPWkudmFsdWU7ci5wdXNoKGEuX3F1YWxpZmllZE5hbWUpfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXtpJiYhaS5kb25lJiYodD1uLnJldHVybikmJnQuY2FsbChuKX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19cmV0dXJuIHJ9LHQucHJvdG90eXBlLmdldEF0dHJpYnV0ZT1mdW5jdGlvbihlKXt2YXIgdD1oLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVCeU5hbWUoZSx0aGlzKTtyZXR1cm4gdD90Ll92YWx1ZTpudWxsfSx0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOUz1mdW5jdGlvbihlLHQpe3ZhciByPWguZWxlbWVudF9nZXRBbkF0dHJpYnV0ZUJ5TmFtZXNwYWNlQW5kTG9jYWxOYW1lKGUsdCx0aGlzKTtyZXR1cm4gcj9yLl92YWx1ZTpudWxsfSx0LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXtpZighaC54bWxfaXNOYW1lKGUpKXRocm93IG5ldyBsLkludmFsaWRDaGFyYWN0ZXJFcnJvcjt0aGlzLl9uYW1lc3BhY2U9PT1jLm5hbWVzcGFjZS5IVE1MJiZcImh0bWxcIj09PXRoaXMuX25vZGVEb2N1bWVudC5fdHlwZSYmKGU9ZS50b0xvd2VyQ2FzZSgpKTtmb3IodmFyIHI9bnVsbCxuPTA7bjx0aGlzLl9hdHRyaWJ1dGVMaXN0Lmxlbmd0aDtuKyspe3ZhciBpPXRoaXMuX2F0dHJpYnV0ZUxpc3Rbbl07aWYoaS5fcXVhbGlmaWVkTmFtZT09PWUpe3I9aTticmVha319aWYobnVsbD09PXIpcmV0dXJuKHI9aC5jcmVhdGVfYXR0cih0aGlzLl9ub2RlRG9jdW1lbnQsZSkpLl92YWx1ZT10LHZvaWQgaC5lbGVtZW50X2FwcGVuZChyLHRoaXMpO2guZWxlbWVudF9jaGFuZ2Uocix0aGlzLHQpfSx0LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUz1mdW5jdGlvbihlLHQscil7dmFyIG49YShoLm5hbWVzcGFjZV92YWxpZGF0ZUFuZEV4dHJhY3QoZSx0KSwzKSxpPW5bMF0sbz1uWzFdLHM9blsyXTtoLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGVWYWx1ZSh0aGlzLHMscixvLGkpfSx0LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGU9ZnVuY3Rpb24oZSl7aC5lbGVtZW50X3JlbW92ZUFuQXR0cmlidXRlQnlOYW1lKGUsdGhpcyl9LHQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZU5TPWZ1bmN0aW9uKGUsdCl7aC5lbGVtZW50X3JlbW92ZUFuQXR0cmlidXRlQnlOYW1lc3BhY2VBbmRMb2NhbE5hbWUoZSx0LHRoaXMpfSx0LnByb3RvdHlwZS5oYXNBdHRyaWJ1dGU9ZnVuY3Rpb24oZSl7dGhpcy5fbmFtZXNwYWNlPT09Yy5uYW1lc3BhY2UuSFRNTCYmXCJodG1sXCI9PT10aGlzLl9ub2RlRG9jdW1lbnQuX3R5cGUmJihlPWUudG9Mb3dlckNhc2UoKSk7Zm9yKHZhciB0PTA7dDx0aGlzLl9hdHRyaWJ1dGVMaXN0Lmxlbmd0aDt0Kyspe2lmKHRoaXMuX2F0dHJpYnV0ZUxpc3RbdF0uX3F1YWxpZmllZE5hbWU9PT1lKXJldHVybiEwfXJldHVybiExfSx0LnByb3RvdHlwZS50b2dnbGVBdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXtpZighaC54bWxfaXNOYW1lKGUpKXRocm93IG5ldyBsLkludmFsaWRDaGFyYWN0ZXJFcnJvcjt0aGlzLl9uYW1lc3BhY2U9PT1jLm5hbWVzcGFjZS5IVE1MJiZcImh0bWxcIj09PXRoaXMuX25vZGVEb2N1bWVudC5fdHlwZSYmKGU9ZS50b0xvd2VyQ2FzZSgpKTtmb3IodmFyIHI9bnVsbCxuPTA7bjx0aGlzLl9hdHRyaWJ1dGVMaXN0Lmxlbmd0aDtuKyspe3ZhciBpPXRoaXMuX2F0dHJpYnV0ZUxpc3Rbbl07aWYoaS5fcXVhbGlmaWVkTmFtZT09PWUpe3I9aTticmVha319cmV0dXJuIG51bGw9PT1yPyh2b2lkIDA9PT10fHwhMD09PXQpJiYoKHI9aC5jcmVhdGVfYXR0cih0aGlzLl9ub2RlRG9jdW1lbnQsZSkpLl92YWx1ZT1cIlwiLGguZWxlbWVudF9hcHBlbmQocix0aGlzKSwhMCk6dm9pZCAwIT09dCYmITEhPT10fHwoaC5lbGVtZW50X3JlbW92ZUFuQXR0cmlidXRlQnlOYW1lKGUsdGhpcyksITEpfSx0LnByb3RvdHlwZS5oYXNBdHRyaWJ1dGVOUz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1lfHxudWxsLG49MDtuPHRoaXMuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO24rKyl7dmFyIGk9dGhpcy5fYXR0cmlidXRlTGlzdFtuXTtpZihpLl9uYW1lc3BhY2U9PT1yJiZpLl9sb2NhbE5hbWU9PT10KXJldHVybiEwfXJldHVybiExfSx0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBoLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVCeU5hbWUoZSx0aGlzKX0sdC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTm9kZU5TPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGguZWxlbWVudF9nZXRBbkF0dHJpYnV0ZUJ5TmFtZXNwYWNlQW5kTG9jYWxOYW1lKGUsdCx0aGlzKX0sdC5wcm90b3R5cGUuc2V0QXR0cmlidXRlTm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gaC5lbGVtZW50X3NldEFuQXR0cmlidXRlKGUsdGhpcyl9LHQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5vZGVOUz1mdW5jdGlvbihlKXtyZXR1cm4gaC5lbGVtZW50X3NldEFuQXR0cmlidXRlKGUsdGhpcyl9LHQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZU5vZGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PSExLHI9MDtyPHRoaXMuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO3IrKyl7aWYodGhpcy5fYXR0cmlidXRlTGlzdFtyXT09PWUpe3Q9ITA7YnJlYWt9fWlmKCF0KXRocm93IG5ldyBsLk5vdEZvdW5kRXJyb3I7cmV0dXJuIGguZWxlbWVudF9yZW1vdmUoZSx0aGlzKSxlfSx0LnByb3RvdHlwZS5hdHRhY2hTaGFkb3c9ZnVuY3Rpb24oZSl7aWYodGhpcy5fbmFtZXNwYWNlIT09Yy5uYW1lc3BhY2UuSFRNTCl0aHJvdyBuZXcgbC5Ob3RTdXBwb3J0ZWRFcnJvcjtpZighaC5jdXN0b21FbGVtZW50X2lzVmFsaWRDdXN0b21FbGVtZW50TmFtZSh0aGlzLl9sb2NhbE5hbWUpJiYhaC5jdXN0b21FbGVtZW50X2lzVmFsaWRTaGFkb3dIb3N0TmFtZSh0aGlzLl9sb2NhbE5hbWUpKXRocm93IG5ldyBsLk5vdFN1cHBvcnRlZEVycm9yO2lmKGguY3VzdG9tRWxlbWVudF9pc1ZhbGlkQ3VzdG9tRWxlbWVudE5hbWUodGhpcy5fbG9jYWxOYW1lKXx8bnVsbCE9PXRoaXMuX2lzKXt2YXIgdD1oLmN1c3RvbUVsZW1lbnRfbG9va1VwQUN1c3RvbUVsZW1lbnREZWZpbml0aW9uKHRoaXMuX25vZGVEb2N1bWVudCx0aGlzLl9uYW1lc3BhY2UsdGhpcy5fbG9jYWxOYW1lLHRoaXMuX2lzKTtpZihudWxsIT09dCYmITA9PT10LmRpc2FibGVTaGFkb3cpdGhyb3cgbmV3IGwuTm90U3VwcG9ydGVkRXJyb3J9aWYobnVsbCE9PXRoaXMuX3NoYWRvd1Jvb3QpdGhyb3cgbmV3IGwuTm90U3VwcG9ydGVkRXJyb3I7dmFyIHI9aC5jcmVhdGVfc2hhZG93Um9vdCh0aGlzLl9ub2RlRG9jdW1lbnQsdGhpcyk7cmV0dXJuIHIuX21vZGU9ZS5tb2RlLHRoaXMuX3NoYWRvd1Jvb3Q9cixyfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJzaGFkb3dSb290XCIse2dldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3NoYWRvd1Jvb3Q7cmV0dXJuIG51bGw9PT1lfHxcImNsb3NlZFwiPT09ZS5tb2RlP251bGw6ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5jbG9zZXN0PWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBsLk5vdEltcGxlbWVudGVkRXJyb3J9LHQucHJvdG90eXBlLm1hdGNoZXM9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IGwuTm90SW1wbGVtZW50ZWRFcnJvcn0sdC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm1hdGNoZXMoZSl9LHQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiBoLm5vZGVfbGlzdE9mRWxlbWVudHNXaXRoUXVhbGlmaWVkTmFtZShlLHRoaXMpfSx0LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhOYW1lc3BhY2UoZSx0LHRoaXMpfSx0LnByb3RvdHlwZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiBoLm5vZGVfbGlzdE9mRWxlbWVudHNXaXRoQ2xhc3NOYW1lcyhlLHRoaXMpfSx0LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudEVsZW1lbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaC5lbGVtZW50X2luc2VydEFkamFjZW50KHRoaXMsZSx0KX0sdC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRUZXh0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9aC5jcmVhdGVfdGV4dCh0aGlzLl9ub2RlRG9jdW1lbnQsdCk7aC5lbGVtZW50X2luc2VydEFkamFjZW50KHRoaXMsZSxyKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiX3F1YWxpZmllZE5hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25hbWVzcGFjZVByZWZpeD90aGlzLl9uYW1lc3BhY2VQcmVmaXgrXCI6XCIrdGhpcy5fbG9jYWxOYW1lOnRoaXMuX2xvY2FsTmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJfaHRtbFVwcGVyY2FzZWRRdWFsaWZpZWROYW1lXCIse2dldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3F1YWxpZmllZE5hbWU7cmV0dXJuIHRoaXMuX25hbWVzcGFjZT09PWMubmFtZXNwYWNlLkhUTUwmJlwiaHRtbFwiPT09dGhpcy5fbm9kZURvY3VtZW50Ll90eXBlJiYoZT1lLnRvVXBwZXJDYXNlKCkpLGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2hpbGRyZW5cIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJmaXJzdEVsZW1lbnRDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImxhc3RFbGVtZW50Q2hpbGRcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjaGlsZEVsZW1lbnRDb3VudFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnByZXBlbmQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbD1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nXCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBOb25Eb2N1bWVudFR5cGVDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJuZXh0RWxlbWVudFNpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IE5vbkRvY3VtZW50VHlwZUNoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmJlZm9yZT1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmFmdGVyPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucmVwbGFjZVdpdGg9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IENoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImFzc2lnbmVkU2xvdFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogU2xvdGFibGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyLG4saSl7dm9pZCAwPT09biYmKG49bnVsbCksdm9pZCAwPT09aSYmKGk9bnVsbCk7dmFyIG89bmV3IHQ7cmV0dXJuIG8uX2xvY2FsTmFtZT1yLG8uX25hbWVzcGFjZT1uLG8uX25hbWVzcGFjZVByZWZpeD1pLG8uX25vZGVEb2N1bWVudD1lLG99LHR9KHUuTm9kZUltcGwpO3QuRWxlbWVudEltcGw9ZixwLmlkbF9kZWZpbmVDb25zdChmLnByb3RvdHlwZSxcIl9ub2RlVHlwZVwiLHMuTm9kZVR5cGUuRWxlbWVudCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDIpLGE9cigzNCkscz1yKDEyKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dm9pZCAwPT09dCYmKHQ9bnVsbCk7dmFyIHI9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiByLl9jaGlsZHJlbj1uZXcgU2V0LHIuX2hvc3Q9dCxyfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5SWQ9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IE5vbkVsZW1lbnRQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNoaWxkcmVuXCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZmlyc3RFbGVtZW50Q2hpbGRcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJsYXN0RWxlbWVudENoaWxkXCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2hpbGRFbGVtZW50Q291bnRcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5wcmVwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGw9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5fY3JlYXRlPWZ1bmN0aW9uKGUscil7dm9pZCAwPT09ciYmKHI9bnVsbCk7dmFyIG49bmV3IHQocik7cmV0dXJuIG4uX25vZGVEb2N1bWVudD1lLG59LHR9KGEuTm9kZUltcGwpO3QuRG9jdW1lbnRGcmFnbWVudEltcGw9dSxzLmlkbF9kZWZpbmVDb25zdCh1LnByb3RvdHlwZSxcIl9ub2RlVHlwZVwiLG8uTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KSxvPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoMikscz1yKDcxKSx1PXIoMCksbD1yKDEyKSxjPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dm9pZCAwPT09dCYmKHQ9XCJcIik7dmFyIHI9ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIHIuX25hbWU9XCJcIixyLl9hc3NpZ25lZFNsb3Q9bnVsbCxyfXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwid2hvbGVUZXh0XCIse2dldDpmdW5jdGlvbigpe3ZhciBlLHQscj1cIlwiO3RyeXtmb3IodmFyIG49byh1LnRleHRfY29udGlndW91c1RleHROb2Rlcyh0aGlzLCEwKSksaT1uLm5leHQoKTshaS5kb25lO2k9bi5uZXh0KCkpe3IrPWkudmFsdWUuX2RhdGF9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e2kmJiFpLmRvbmUmJih0PW4ucmV0dXJuKSYmdC5jYWxsKG4pfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1yZXR1cm4gcn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5zcGxpdFRleHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHUudGV4dF9zcGxpdCh0aGlzLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJhc3NpZ25lZFNsb3RcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFNsb3RhYmxlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5fY3JlYXRlPWZ1bmN0aW9uKGUscil7dm9pZCAwPT09ciYmKHI9XCJcIik7dmFyIG49bmV3IHQocik7cmV0dXJuIG4uX25vZGVEb2N1bWVudD1lLG59LHR9KHMuQ2hhcmFjdGVyRGF0YUltcGwpO3QuVGV4dEltcGw9YyxsLmlkbF9kZWZpbmVDb25zdChjLnByb3RvdHlwZSxcIl9ub2RlVHlwZVwiLGEuTm9kZVR5cGUuVGV4dCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9zdGFydE5vZGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXJ0WzBdfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9zdGFydE9mZnNldFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhcnRbMV19LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX2VuZE5vZGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VuZFswXX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJfZW5kT2Zmc2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmRbMV19LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX2NvbGxhcHNlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhcnRbMF09PT10aGlzLl9lbmRbMF0mJnRoaXMuX3N0YXJ0WzFdPT09dGhpcy5fZW5kWzFdfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInN0YXJ0Q29udGFpbmVyXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFydE5vZGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic3RhcnRPZmZzZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXJ0T2Zmc2V0fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImVuZENvbnRhaW5lclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW5kTm9kZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJlbmRPZmZzZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VuZE9mZnNldH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjb2xsYXBzZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbGxhcHNlZH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuQWJzdHJhY3RSYW5nZUltcGw9bn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5fYWN0aXZlRmxhZz0hMSx0aGlzLl9yb290PWUsdGhpcy5fd2hhdFRvU2hvdz1uLldoYXRUb1Nob3cuQWxsLHRoaXMuX2ZpbHRlcj1udWxsfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJyb290XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yb290fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIndoYXRUb1Nob3dcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3doYXRUb1Nob3d9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiZmlsdGVyXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9maWx0ZXJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0LlRyYXZlcnNlckltcGw9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1yKDApLG89cigxMiksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLl90YXJnZXQ9bnVsbCx0aGlzLl9yZWxhdGVkVGFyZ2V0PW51bGwsdGhpcy5fdG91Y2hUYXJnZXRMaXN0PVtdLHRoaXMuX3BhdGg9W10sdGhpcy5fY3VycmVudFRhcmdldD1udWxsLHRoaXMuX2V2ZW50UGhhc2U9bi5FdmVudFBoYXNlLk5vbmUsdGhpcy5fc3RvcFByb3BhZ2F0aW9uRmxhZz0hMSx0aGlzLl9zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25GbGFnPSExLHRoaXMuX2NhbmNlbGVkRmxhZz0hMSx0aGlzLl9pblBhc3NpdmVMaXN0ZW5lckZsYWc9ITEsdGhpcy5fY29tcG9zZWRGbGFnPSExLHRoaXMuX2luaXRpYWxpemVkRmxhZz0hMSx0aGlzLl9kaXNwYXRjaEZsYWc9ITEsdGhpcy5faXNUcnVzdGVkPSExLHRoaXMuX2J1YmJsZXM9ITEsdGhpcy5fY2FuY2VsYWJsZT0hMSx0aGlzLl90eXBlPWUsdCYmKHRoaXMuX2J1YmJsZXM9dC5idWJibGVzfHwhMSx0aGlzLl9jYW5jZWxhYmxlPXQuY2FuY2VsYWJsZXx8ITEsdGhpcy5fY29tcG9zZWRGbGFnPXQuY29tcG9zZWR8fCExKSx0aGlzLl9pbml0aWFsaXplZEZsYWc9ITAsdGhpcy5fdGltZVN0YW1wPShuZXcgRGF0ZSkuZ2V0VGltZSgpfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ0eXBlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90eXBlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInRhcmdldFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGFyZ2V0fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNyY0VsZW1lbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RhcmdldH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjdXJyZW50VGFyZ2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdXJyZW50VGFyZ2V0fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmNvbXBvc2VkUGF0aD1mdW5jdGlvbigpe3ZhciBlPVtdLHQ9dGhpcy5fcGF0aDtpZigwPT09dC5sZW5ndGgpcmV0dXJuIGU7dmFyIHI9dGhpcy5fY3VycmVudFRhcmdldDtpZihudWxsPT09cil0aHJvdyBuZXcgRXJyb3IoXCJFdmVudCBjdXJyZW50VGFyZ2V0IGlzIG51bGwuXCIpO2UucHVzaChyKTtmb3IodmFyIG49MCxpPTAsbz10Lmxlbmd0aC0xO28+PTA7KXtpZih0W29dLnJvb3RPZkNsb3NlZFRyZWUmJmkrKyx0W29dLmludm9jYXRpb25UYXJnZXQ9PT1yKXtuPW87YnJlYWt9dFtvXS5zbG90SW5DbG9zZWRUcmVlJiZpLS0sby0tfXZhciBhPWkscz1pO2ZvcihvPW4tMTtvPj0wOyl0W29dLnJvb3RPZkNsb3NlZFRyZWUmJmErKyxhPD1zJiZlLnVuc2hpZnQodFtvXS5pbnZvY2F0aW9uVGFyZ2V0KSx0W29dLnNsb3RJbkNsb3NlZFRyZWUmJi0tYTxzJiYocz1hKSxvLS07Zm9yKGE9aSxzPWksbz1uKzE7bzx0Lmxlbmd0aDspdFtvXS5zbG90SW5DbG9zZWRUcmVlJiZhKyssYTw9cyYmZS5wdXNoKHRbb10uaW52b2NhdGlvblRhcmdldCksdFtvXS5yb290T2ZDbG9zZWRUcmVlJiYtLWE8cyYmKHM9YSksbysrO3JldHVybiBlfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJldmVudFBoYXNlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ldmVudFBoYXNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbj1mdW5jdGlvbigpe3RoaXMuX3N0b3BQcm9wYWdhdGlvbkZsYWc9ITB9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImNhbmNlbEJ1YmJsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RvcFByb3BhZ2F0aW9uRmxhZ30sc2V0OmZ1bmN0aW9uKGUpe2UmJnRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uPWZ1bmN0aW9uKCl7dGhpcy5fc3RvcFByb3BhZ2F0aW9uRmxhZz0hMCx0aGlzLl9zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25GbGFnPSEwfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJidWJibGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9idWJibGVzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImNhbmNlbGFibGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NhbmNlbGFibGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwicmV0dXJuVmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuX2NhbmNlbGVkRmxhZ30sc2V0OmZ1bmN0aW9uKGUpe2V8fGkuZXZlbnRfc2V0VGhlQ2FuY2VsZWRGbGFnKHRoaXMpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7aS5ldmVudF9zZXRUaGVDYW5jZWxlZEZsYWcodGhpcyl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImRlZmF1bHRQcmV2ZW50ZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NhbmNlbGVkRmxhZ30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjb21wb3NlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29tcG9zZWRGbGFnfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImlzVHJ1c3RlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNUcnVzdGVkfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInRpbWVTdGFtcFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGltZVN0YW1wfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmluaXRFdmVudD1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09dCYmKHQ9ITEpLHZvaWQgMD09PXImJihyPSExKSx0aGlzLl9kaXNwYXRjaEZsYWd8fGkuZXZlbnRfaW5pdGlhbGl6ZSh0aGlzLGUsdCxyKX0sZS5OT05FPTAsZS5DQVBUVVJJTkdfUEhBU0U9MSxlLkFUX1RBUkdFVD0yLGUuQlVCQkxJTkdfUEhBU0U9MyxlfSgpO3QuRXZlbnRJbXBsPWEsby5pZGxfZGVmaW5lQ29uc3QoYS5wcm90b3R5cGUsXCJOT05FXCIsMCksby5pZGxfZGVmaW5lQ29uc3QoYS5wcm90b3R5cGUsXCJDQVBUVVJJTkdfUEhBU0VcIiwxKSxvLmlkbF9kZWZpbmVDb25zdChhLnByb3RvdHlwZSxcIkFUX1RBUkdFVFwiLDIpLG8uaWRsX2RlZmluZUNvbnN0KGEucHJvdG90eXBlLFwiQlVCQkxJTkdfUEhBU0VcIiwzKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1yKDkpO3QudHJhdmVyc2FsX2ZpbHRlcj1mdW5jdGlvbihlLHQpe2lmKGUuX2FjdGl2ZUZsYWcpdGhyb3cgbmV3IGkuSW52YWxpZFN0YXRlRXJyb3I7dmFyIHI9MTw8dC5fbm9kZVR5cGUtMTtpZigwPT0oZS53aGF0VG9TaG93JnIpKXJldHVybiBuLkZpbHRlclJlc3VsdC5Ta2lwO2lmKCFlLmZpbHRlcilyZXR1cm4gbi5GaWx0ZXJSZXN1bHQuQWNjZXB0O2UuX2FjdGl2ZUZsYWc9ITA7dmFyIG89bi5GaWx0ZXJSZXN1bHQuUmVqZWN0O3RyeXtvPWUuZmlsdGVyLmFjY2VwdE5vZGUodCl9Y2F0Y2godCl7dGhyb3cgZS5fYWN0aXZlRmxhZz0hMSx0fXJldHVybiBlLl9hY3RpdmVGbGFnPSExLG99fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LGk9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cig2KSxhPXIoMykscz1yKDEpLHU9cig5OSksbD1yKDczKSxjPXIoMTcpLGg9cigxNzMpLHA9cigzMCksZj1yKDUyKSxkPXIoMzcpO3QuZG9jdW1lbnRfZWxlbWVudEludGVyZmFjZT1mdW5jdGlvbihlLHQpe3JldHVybiB1LkVsZW1lbnRJbXBsfSx0LmRvY3VtZW50X2ludGVybmFsQ3JlYXRlRWxlbWVudE5TPWZ1bmN0aW9uKGUsdCxyLGkpe3ZhciBvPW4oaC5uYW1lc3BhY2VfdmFsaWRhdGVBbmRFeHRyYWN0KHQsciksMyksYT1vWzBdLHU9b1sxXSxsPW9bMl0sYz1udWxsO3JldHVybiB2b2lkIDAhPT1pJiYoYz1zLmlzU3RyaW5nKGkpP2k6aS5pcyksZi5lbGVtZW50X2NyZWF0ZUFuRWxlbWVudChlLGwsYSx1LGMsITApfSx0LmRvY3VtZW50X2Fkb3B0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtpZihlLl9ub2RlRG9jdW1lbnQhPT10fHxudWxsIT09ZS5fcGFyZW50KXt2YXIgcz1lLl9ub2RlRG9jdW1lbnQ7aWYoZS5fcGFyZW50JiZkLm11dGF0aW9uX3JlbW92ZShlLGUuX3BhcmVudCksdCE9PXMpZm9yKHZhciB1PWMudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKGUsITAsITApO251bGwhPT11Oyl7aWYodS5fbm9kZURvY3VtZW50PXQsYS5HdWFyZC5pc0VsZW1lbnROb2RlKHUpKXRyeXtmb3IodmFyIGg9KHI9dm9pZCAwLGkodS5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpKSksZj1oLm5leHQoKTshZi5kb25lO2Y9aC5uZXh0KCkpe2YudmFsdWUuX25vZGVEb2N1bWVudD10fX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtmJiYhZi5kb25lJiYobj1oLnJldHVybikmJm4uY2FsbChoKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19by5kb20uZmVhdHVyZXMuY3VzdG9tRWxlbWVudHMmJmEuR3VhcmQuaXNFbGVtZW50Tm9kZSh1KSYmXCJjdXN0b21cIj09PXUuX2N1c3RvbUVsZW1lbnRTdGF0ZSYmbC5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudENhbGxiYWNrUmVhY3Rpb24odSxcImFkb3B0ZWRDYWxsYmFja1wiLFtzLHRdKSxvLmRvbS5mZWF0dXJlcy5zdGVwcyYmcC5kb21fcnVuQWRvcHRpbmdTdGVwcyh1LHMpLHU9Yy50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZShlLHUsITAsITApfX19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cig2KSxvPXIoMyksYT1yKDkpLHM9cigxNyksdT1yKDUxKSxsPXIoMzApO3QuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YT1mdW5jdGlvbihlLHQscixjKXt2YXIgaCxwLGY9cy50cmVlX25vZGVMZW5ndGgoZSk7aWYodD5mKXRocm93IG5ldyBhLkluZGV4U2l6ZUVycm9yKFwiT2Zmc2V0IGV4Y2VlZHMgY2hhcmFjdGVyIGRhdGEgbGVuZ3RoLiBPZmZzZXQ6IFwiK3QrXCIsIExlbmd0aDogXCIrZitcIiwgTm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLlwiKTt0K3I+ZiYmKHI9Zi10KSxpLmRvbS5mZWF0dXJlcy5tdXRhdGlvbk9ic2VydmVycyYmdS5vYnNlcnZlcl9xdWV1ZU11dGF0aW9uUmVjb3JkKFwiY2hhcmFjdGVyRGF0YVwiLGUsbnVsbCxudWxsLGUuX2RhdGEsW10sW10sbnVsbCxudWxsKTt2YXIgZD1lLl9kYXRhLnN1YnN0cmluZygwLHQpK2MrZS5fZGF0YS5zdWJzdHJpbmcodCtyKTtlLl9kYXRhPWQ7dHJ5e2Zvcih2YXIgbT1uKGkuZG9tLnJhbmdlTGlzdCkseT1tLm5leHQoKTsheS5kb25lO3k9bS5uZXh0KCkpe3ZhciB2PXkudmFsdWU7di5fc3RhcnRbMF09PT1lJiZ2Ll9zdGFydFsxXT50JiZ2Ll9zdGFydFsxXTw9dCtyJiYodi5fc3RhcnRbMV09dCksdi5fZW5kWzBdPT09ZSYmdi5fZW5kWzFdPnQmJnYuX2VuZFsxXTw9dCtyJiYodi5fZW5kWzFdPXQpLHYuX3N0YXJ0WzBdPT09ZSYmdi5fc3RhcnRbMV0+dCtyJiYodi5fc3RhcnRbMV0rPWMubGVuZ3RoLXIpLHYuX2VuZFswXT09PWUmJnYuX2VuZFsxXT50K3ImJih2Ll9lbmRbMV0rPWMubGVuZ3RoLXIpfX1jYXRjaChlKXtoPXtlcnJvcjplfX1maW5hbGx5e3RyeXt5JiYheS5kb25lJiYocD1tLnJldHVybikmJnAuY2FsbChtKX1maW5hbGx5e2lmKGgpdGhyb3cgaC5lcnJvcn19aS5kb20uZmVhdHVyZXMuc3RlcHMmJm8uR3VhcmQuaXNUZXh0Tm9kZShlKSYmbnVsbCE9PWUuX3BhcmVudCYmbC5kb21fcnVuQ2hpbGRUZXh0Q29udGVudENoYW5nZVN0ZXBzKGUuX3BhcmVudCl9LHQuY2hhcmFjdGVyRGF0YV9zdWJzdHJpbmdEYXRhPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1zLnRyZWVfbm9kZUxlbmd0aChlKTtpZih0Pm4pdGhyb3cgbmV3IGEuSW5kZXhTaXplRXJyb3IoXCJPZmZzZXQgZXhjZWVkcyBjaGFyYWN0ZXIgZGF0YSBsZW5ndGguIE9mZnNldDogXCIrdCtcIiwgTGVuZ3RoOiBcIituK1wiLCBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIuXCIpO3JldHVybiB0K3I+bj9lLl9kYXRhLnN1YnN0cih0KTplLl9kYXRhLnN1YnN0cih0LHIpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxpPXRoaXMmJnRoaXMuX19zcHJlYWR8fGZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWU9ZS5jb25jYXQobihhcmd1bWVudHNbdF0pKTtyZXR1cm4gZX0sbz10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDcpO2Z1bmN0aW9uIHMoZSl7dmFyIHQ9YS5zdHJpbmcuc3BsaXRBU3RyaW5nT25BU0NJSVdoaXRlc3BhY2UoZSk7cmV0dXJuIG5ldyBTZXQodCl9ZnVuY3Rpb24gdShlKXtyZXR1cm4gaShlKS5qb2luKFwiIFwiKX10Lm9yZGVyZWRTZXRfcGFyc2U9cyx0Lm9yZGVyZWRTZXRfc2VyaWFsaXplPXUsdC5vcmRlcmVkU2V0X3Nhbml0aXplPWZ1bmN0aW9uKGUpe3JldHVybiB1KHMoZSkpfSx0Lm9yZGVyZWRTZXRfY29udGFpbnM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksYSxzO3RyeXtmb3IodmFyIHU9byh0KSxsPXUubmV4dCgpOyFsLmRvbmU7bD11Lm5leHQoKSl7dmFyIGM9bC52YWx1ZSxoPSExO3RyeXtmb3IodmFyIHA9KGE9dm9pZCAwLG8oZSkpLGY9cC5uZXh0KCk7IWYuZG9uZTtmPXAubmV4dCgpKXt2YXIgZD1mLnZhbHVlO2lmKHIpe2lmKGQ9PT1jKXtoPSEwO2JyZWFrfX1lbHNlIGlmKGQudG9VcHBlckNhc2UoKT09PWMudG9VcHBlckNhc2UoKSl7aD0hMDticmVha319fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2YmJiFmLmRvbmUmJihzPXAucmV0dXJuKSYmcy5jYWxsKHApfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX1pZighaClyZXR1cm4hMX19Y2F0Y2goZSl7bj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKGk9dS5yZXR1cm4pJiZpLmNhbGwodSl9ZmluYWxseXtpZihuKXRocm93IG4uZXJyb3J9fXJldHVybiEwfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoMTc5KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDI2MiksaT1yKDExMCksbz1yKDEpO2kuZG9tLnNldEZlYXR1cmVzKCExKSx0LmNyZWF0ZURvY3VtZW50PWZ1bmN0aW9uKCl7dmFyIGU9KG5ldyBuLkRPTUltcGxlbWVudGF0aW9uKS5jcmVhdGVEb2N1bWVudChudWxsLFwicm9vdFwiLG51bGwpO3JldHVybiBlLmRvY3VtZW50RWxlbWVudCYmZS5yZW1vdmVDaGlsZChlLmRvY3VtZW50RWxlbWVudCksZX0sdC5zYW5pdGl6ZUlucHV0PWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm4gZTtpZih2b2lkIDA9PT10KXJldHVybiBlK1wiXCI7dmFyIHI9XCJcIjtlKz1cIlwiO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lLmNoYXJDb2RlQXQobik7aWYoOT09PWl8fDEwPT09aXx8MTM9PT1pfHxpPj0zMiYmaTw9NTUyOTV8fGk+PTU3MzQ0JiZpPD02NTUzMylyKz1lLmNoYXJBdChuKTtlbHNlIGlmKGk+PTU1Mjk2JiZpPD01NjMxOSYmbjxlLmxlbmd0aC0xKXt2YXIgYT1lLmNoYXJDb2RlQXQobisxKTthPj01NjMyMCYmYTw9NTczNDM/KGk9MTAyNCooaS01NTI5NikrYS01NjMyMCs2NTUzNixyKz1TdHJpbmcuZnJvbUNvZGVQb2ludChpKSxuKyspOnIrPW8uaXNTdHJpbmcodCk/dDp0KGUuY2hhckF0KG4pLG4sZSl9ZWxzZSByKz1vLmlzU3RyaW5nKHQpP3Q6dChlLmNoYXJBdChuKSxuLGUpfXJldHVybiByfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1yKDE1Myk7dC5BYm9ydENvbnRyb2xsZXI9aS5BYm9ydENvbnRyb2xsZXJJbXBsO3ZhciBvPXIoMTU0KTt0LkFib3J0U2lnbmFsPW8uQWJvcnRTaWduYWxJbXBsO3ZhciBhPXIoMTAyKTt0LkFic3RyYWN0UmFuZ2U9YS5BYnN0cmFjdFJhbmdlSW1wbDt2YXIgcz1yKDE1Nyk7dC5BdHRyPXMuQXR0ckltcGw7dmFyIHU9cigxNTgpO3QuQ0RBVEFTZWN0aW9uPXUuQ0RBVEFTZWN0aW9uSW1wbDt2YXIgbD1yKDcxKTt0LkNoYXJhY3RlckRhdGE9bC5DaGFyYWN0ZXJEYXRhSW1wbDt2YXIgYz1yKDI2MyksaD1yKDE1OSk7dC5Db21tZW50PWguQ29tbWVudEltcGw7dmFyIHA9cigxNzEpO3QuQ3VzdG9tRXZlbnQ9cC5DdXN0b21FdmVudEltcGw7dmFyIGY9cigxMDApO3QuRG9jdW1lbnRGcmFnbWVudD1mLkRvY3VtZW50RnJhZ21lbnRJbXBsO3ZhciBkPXIoOTgpO3QuRG9jdW1lbnQ9ZC5Eb2N1bWVudEltcGw7dmFyIG09cigyNjQpLHk9cigxNTUpO3QuRG9jdW1lbnRUeXBlPXkuRG9jdW1lbnRUeXBlSW1wbDt2YXIgdj1yKDYpO3QuZG9tPXYuZG9tO3ZhciBfPXIoMTQ4KTt0LkRPTUltcGxlbWVudGF0aW9uPV8uRE9NSW1wbGVtZW50YXRpb25JbXBsO3ZhciBnPXIoMTcwKTt0LkRPTVRva2VuTGlzdD1nLkRPTVRva2VuTGlzdEltcGw7dmFyIGI9cig5OSk7dC5FbGVtZW50PWIuRWxlbWVudEltcGw7dmFyIHg9cigxMDQpO3QuRXZlbnQ9eC5FdmVudEltcGw7dmFyIHc9cig3MCk7dC5FdmVudFRhcmdldD13LkV2ZW50VGFyZ2V0SW1wbDt2YXIgRT1yKDE2MSk7dC5IVE1MQ29sbGVjdGlvbj1FLkhUTUxDb2xsZWN0aW9uSW1wbDt2YXIgRD1yKDI2NSk7dC5NdXRhdGlvbk9ic2VydmVyPUQuTXV0YXRpb25PYnNlcnZlckltcGw7dmFyIFM9cigxNjkpO3QuTXV0YXRpb25SZWNvcmQ9Uy5NdXRhdGlvblJlY29yZEltcGw7dmFyIEM9cigxNjQpO3QuTmFtZWROb2RlTWFwPUMuTmFtZWROb2RlTWFwSW1wbDt2YXIgQT1yKDE2OCk7dC5Ob2RlRmlsdGVyPUEuTm9kZUZpbHRlckltcGw7dmFyIE49cigzNCk7dC5Ob2RlPU4uTm9kZUltcGw7dmFyIFQ9cigxNjYpO3QuTm9kZUl0ZXJhdG9yPVQuTm9kZUl0ZXJhdG9ySW1wbDt2YXIgTz1yKDE2Mik7dC5Ob2RlTGlzdD1PLk5vZGVMaXN0SW1wbDt2YXIgRj1yKDE2Myk7dC5Ob2RlTGlzdFN0YXRpYz1GLk5vZGVMaXN0U3RhdGljSW1wbDt2YXIgaz1yKDI2NiksUD1yKDI2NyksST1yKDI2OCksTD1yKDE2MCk7dC5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb249TC5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb25JbXBsO3ZhciBNPXIoMTY1KTt0LlJhbmdlPU0uUmFuZ2VJbXBsO3ZhciBCPXIoMTU2KTt0LlNoYWRvd1Jvb3Q9Qi5TaGFkb3dSb290SW1wbDt2YXIgaj1yKDI2OSksUj1yKDI3MCk7dC5TdGF0aWNSYW5nZT1SLlN0YXRpY1JhbmdlSW1wbDt2YXIgej1yKDEwMSk7dC5UZXh0PXouVGV4dEltcGw7dmFyIFU9cigxMDMpO3QuVHJhdmVyc2VyPVUuVHJhdmVyc2VySW1wbDt2YXIgRz1yKDE2Nyk7dC5UcmVlV2Fsa2VyPUcuVHJlZVdhbGtlckltcGw7dmFyIFg9cigxNDkpO3QuV2luZG93PVguV2luZG93SW1wbDt2YXIgcT1yKDE1MSk7dC5YTUxEb2N1bWVudD1xLlhNTERvY3VtZW50SW1wbCxuLmFwcGx5TWl4aW4oYi5FbGVtZW50SW1wbCxjLkNoaWxkTm9kZUltcGwpLG4uYXBwbHlNaXhpbihsLkNoYXJhY3RlckRhdGFJbXBsLGMuQ2hpbGROb2RlSW1wbCksbi5hcHBseU1peGluKHkuRG9jdW1lbnRUeXBlSW1wbCxjLkNoaWxkTm9kZUltcGwpLG4uYXBwbHlNaXhpbihkLkRvY3VtZW50SW1wbCxtLkRvY3VtZW50T3JTaGFkb3dSb290SW1wbCksbi5hcHBseU1peGluKEIuU2hhZG93Um9vdEltcGwsbS5Eb2N1bWVudE9yU2hhZG93Um9vdEltcGwpLG4uYXBwbHlNaXhpbihiLkVsZW1lbnRJbXBsLGsuTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlSW1wbCksbi5hcHBseU1peGluKGwuQ2hhcmFjdGVyRGF0YUltcGwsay5Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGVJbXBsKSxuLmFwcGx5TWl4aW4oZC5Eb2N1bWVudEltcGwsUC5Ob25FbGVtZW50UGFyZW50Tm9kZUltcGwpLG4uYXBwbHlNaXhpbihmLkRvY3VtZW50RnJhZ21lbnRJbXBsLFAuTm9uRWxlbWVudFBhcmVudE5vZGVJbXBsKSxuLmFwcGx5TWl4aW4oZC5Eb2N1bWVudEltcGwsSS5QYXJlbnROb2RlSW1wbCksbi5hcHBseU1peGluKGYuRG9jdW1lbnRGcmFnbWVudEltcGwsSS5QYXJlbnROb2RlSW1wbCksbi5hcHBseU1peGluKGIuRWxlbWVudEltcGwsSS5QYXJlbnROb2RlSW1wbCksbi5hcHBseU1peGluKHouVGV4dEltcGwsai5TbG90YWJsZUltcGwpLG4uYXBwbHlNaXhpbihiLkVsZW1lbnRJbXBsLGouU2xvdGFibGVJbXBsKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUpe2VbZS5FT0Y9MF09XCJFT0ZcIixlW2UuRGVjbGFyYXRpb249MV09XCJEZWNsYXJhdGlvblwiLGVbZS5Eb2NUeXBlPTJdPVwiRG9jVHlwZVwiLGVbZS5FbGVtZW50PTNdPVwiRWxlbWVudFwiLGVbZS5UZXh0PTRdPVwiVGV4dFwiLGVbZS5DREFUQT01XT1cIkNEQVRBXCIsZVtlLlBJPTZdPVwiUElcIixlW2UuQ29tbWVudD03XT1cIkNvbW1lbnRcIixlW2UuQ2xvc2luZ1RhZz04XT1cIkNsb3NpbmdUYWdcIn0odC5Ub2tlblR5cGV8fCh0LlRva2VuVHlwZT17fSkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cig2NCkscigyMCkscig2Nik7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigxKSxhPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuX3BhcnNlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcyxuPXRoaXMuX2J1aWxkZXJPcHRpb25zLGk9bnVsbDtyZXR1cm4gby5pc0Z1bmN0aW9uKHQpP2k9dGhpcy5wYXJzZShlLHQuYXBwbHkodGhpcykpOm8uaXNBcnJheSh0KXx8by5pc1NldCh0KT9vLmZvckVhY2hBcnJheSh0LChmdW5jdGlvbih0KXtyZXR1cm4gaT1yLnBhcnNlKGUsdCl9KSx0aGlzKTpvLmlzTWFwKHQpfHxvLmlzT2JqZWN0KHQpP28uZm9yRWFjaE9iamVjdCh0LChmdW5jdGlvbih0LGEpe2lmKG8uaXNGdW5jdGlvbihhKSYmKGE9YS5hcHBseShyKSksbi5pZ25vcmVDb252ZXJ0ZXJzfHwwIT09dC5pbmRleE9mKG4uY29udmVydC5hdHQpKWlmKG4uaWdub3JlQ29udmVydGVyc3x8MCE9PXQuaW5kZXhPZihuLmNvbnZlcnQudGV4dCkpaWYobi5pZ25vcmVDb252ZXJ0ZXJzfHwwIT09dC5pbmRleE9mKG4uY29udmVydC5jZGF0YSkpaWYobi5pZ25vcmVDb252ZXJ0ZXJzfHwwIT09dC5pbmRleE9mKG4uY29udmVydC5jb21tZW50KSlpZihuLmlnbm9yZUNvbnZlcnRlcnN8fDAhPT10LmluZGV4T2Yobi5jb252ZXJ0LmlucykpaWYoKG8uaXNBcnJheShhKXx8by5pc1NldChhKSkmJm8uaXNFbXB0eShhKSk7ZWxzZSBpZigoby5pc01hcChhKXx8by5pc09iamVjdChhKSkmJm8uaXNFbXB0eShhKSlpPXIuZWxlbWVudChlLHZvaWQgMCxyLnNhbml0aXplKHQpKXx8aTtlbHNlIGlmKG4ua2VlcE51bGxOb2Rlc3x8bnVsbCE9YSlpZihvLmlzQXJyYXkoYSl8fG8uaXNTZXQoYSkpby5mb3JFYWNoQXJyYXkoYSwoZnVuY3Rpb24obil7dmFyIG89e307b1t0XT1uLGk9ci5wYXJzZShlLG8pfSkscik7ZWxzZSBpZihvLmlzTWFwKGEpfHxvLmlzT2JqZWN0KGEpKXsocz1yLmVsZW1lbnQoZSx2b2lkIDAsci5zYW5pdGl6ZSh0KSkpJiYoaT1zLHIucGFyc2UocyxhKSl9ZWxzZSBpZihudWxsIT1hJiZcIlwiIT09YSl7dmFyIHM7KHM9ci5lbGVtZW50KGUsdm9pZCAwLHIuc2FuaXRpemUodCkpKSYmKGk9cyxyLnRleHQocyxyLl9kZWNvZGVUZXh0KHIuc2FuaXRpemUoYSkpKSl9ZWxzZSBpPXIuZWxlbWVudChlLHZvaWQgMCxyLnNhbml0aXplKHQpKXx8aTtlbHNlO2Vsc2UgaWYoby5pc1N0cmluZyhhKSl7dmFyIHU9YS5pbmRleE9mKFwiIFwiKSxsPS0xPT09dT9hOmEuc3Vic3RyKDAsdSksYz0tMT09PXU/XCJcIjphLnN1YnN0cih1KzEpO2k9ci5pbnN0cnVjdGlvbihlLHIuc2FuaXRpemUobCksci5zYW5pdGl6ZShjKSl8fGl9ZWxzZSBvLmlzQXJyYXkoYSl8fG8uaXNTZXQoYSk/by5mb3JFYWNoQXJyYXkoYSwoZnVuY3Rpb24odCl7dmFyIG49dC5pbmRleE9mKFwiIFwiKSxvPS0xPT09bj90OnQuc3Vic3RyKDAsbiksYT0tMT09PW4/XCJcIjp0LnN1YnN0cihuKzEpO2k9ci5pbnN0cnVjdGlvbihlLHIuc2FuaXRpemUobyksci5zYW5pdGl6ZShhKSl8fGl9KSxyKTpvLmZvckVhY2hPYmplY3QoYSwoZnVuY3Rpb24odCxuKXtyZXR1cm4gaT1yLmluc3RydWN0aW9uKGUsci5zYW5pdGl6ZSh0KSxyLnNhbml0aXplKG4pKXx8aX0pLHIpO2Vsc2Ugby5pc0FycmF5KGEpfHxvLmlzU2V0KGEpP28uZm9yRWFjaEFycmF5KGEsKGZ1bmN0aW9uKHQpe3JldHVybiBpPXIuY29tbWVudChlLHIuc2FuaXRpemUodCkpfHxpfSkscik6aT1yLmNvbW1lbnQoZSxyLnNhbml0aXplKGEpKXx8aTtlbHNlIG8uaXNBcnJheShhKXx8by5pc1NldChhKT9vLmZvckVhY2hBcnJheShhLChmdW5jdGlvbih0KXtyZXR1cm4gaT1yLmNkYXRhKGUsci5zYW5pdGl6ZSh0KSl8fGl9KSxyKTppPXIuY2RhdGEoZSxyLnNhbml0aXplKGEpKXx8aTtlbHNlIGk9by5pc01hcChhKXx8by5pc09iamVjdChhKT9yLnBhcnNlKGUsYSk6ci50ZXh0KGUsci5fZGVjb2RlVGV4dChyLnNhbml0aXplKGEpKSl8fGk7ZWxzZSBpZih0PT09bi5jb252ZXJ0LmF0dCl7aWYoby5pc0FycmF5KGEpfHxvLmlzU2V0KGEpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXR0cmlidXRlOiBcIithLnRvU3RyaW5nKCkrXCIuIFwiK2UuX2RlYnVnSW5mbygpKTtvLmZvckVhY2hPYmplY3QoYSwoZnVuY3Rpb24odCxuKXtpPXIuYXR0cmlidXRlKGUsdm9pZCAwLHIuc2FuaXRpemUodCksci5fZGVjb2RlQXR0cmlidXRlVmFsdWUoci5zYW5pdGl6ZShuKSkpfHxpfSkpfWVsc2UgaT1yLmF0dHJpYnV0ZShlLHZvaWQgMCxyLnNhbml0aXplKHQuc3Vic3RyKG4uY29udmVydC5hdHQubGVuZ3RoKSksci5fZGVjb2RlQXR0cmlidXRlVmFsdWUoci5zYW5pdGl6ZShhKSkpfHxpfSksdGhpcyk6KG4ua2VlcE51bGxOb2Rlc3x8bnVsbCE9dCkmJihpPXRoaXMudGV4dChlLHRoaXMuX2RlY29kZVRleHQodGhpcy5zYW5pdGl6ZSh0KSkpfHxpKSxpfHxlfSx0fShyKDc1KS5CYXNlUmVhZGVyKTt0Lk9iamVjdFJlYWRlcj1hfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOSk7ZS5leHBvcnRzPW5ldyBuKHtleHBsaWNpdDpbcigyODYpLHIoMjg3KSxyKDI4OCldfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbihlKXt0aGlzLmxldmVsPTAsdGhpcy5fYnVpbGRlck9wdGlvbnM9ZSx0aGlzLl93cml0ZXJPcHRpb25zPWV9O3QuQmFzZUNCV3JpdGVyPW59LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE2KSxpPXIoOCksbz1yKDExNik7ZS5leHBvcnRzPSFuJiYhaSgoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KG8oXCJkaXZcIiksXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxpPXIoMTMpLG89bi5kb2N1bWVudCxhPWkobykmJmkoby5jcmVhdGVFbGVtZW50KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGE/by5jcmVhdGVFbGVtZW50KGUpOnt9fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTE4KSxpPUZ1bmN0aW9uLnRvU3RyaW5nO1wiZnVuY3Rpb25cIiE9dHlwZW9mIG4uaW5zcGVjdFNvdXJjZSYmKG4uaW5zcGVjdFNvdXJjZT1mdW5jdGlvbihlKXtyZXR1cm4gaS5jYWxsKGUpfSksZS5leHBvcnRzPW4uaW5zcGVjdFNvdXJjZX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTEpLGk9cig4MCksbz1uW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdfHxpKFwiX19jb3JlLWpzX3NoYXJlZF9fXCIse30pO2UuZXhwb3J0cz1vfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNCksaT1yKDE4Nyksbz1yKDU1KSxhPXIoMTUpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1pKHQpLHM9YS5mLHU9by5mLGw9MDtsPHIubGVuZ3RoO2wrKyl7dmFyIGM9cltsXTtuKGUsYyl8fHMoZSxjLHUodCxjKSl9fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTEpO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNCksaT1yKDI0KSxvPXIoMTIyKS5pbmRleE9mLGE9cig0NSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIscz1pKGUpLHU9MCxsPVtdO2ZvcihyIGluIHMpIW4oYSxyKSYmbihzLHIpJiZsLnB1c2gocik7Zm9yKDt0Lmxlbmd0aD51OyluKHMscj10W3UrK10pJiYofm8obCxyKXx8bC5wdXNoKHIpKTtyZXR1cm4gbH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDI0KSxpPXIoMjYpLG89cig4MyksYT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLGEpe3ZhciBzLHU9bih0KSxsPWkodS5sZW5ndGgpLGM9byhhLGwpO2lmKGUmJnIhPXIpe2Zvcig7bD5jOylpZigocz11W2MrK10pIT1zKXJldHVybiEwfWVsc2UgZm9yKDtsPmM7YysrKWlmKChlfHxjIGluIHUpJiZ1W2NdPT09cilyZXR1cm4gZXx8Y3x8MDtyZXR1cm4hZSYmLTF9fTtlLmV4cG9ydHM9e2luY2x1ZGVzOmEoITApLGluZGV4T2Y6YSghMSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig4KSxpPS8jfFxcLnByb3RvdHlwZVxcLi8sbz1mdW5jdGlvbihlLHQpe3ZhciByPXNbYShlKV07cmV0dXJuIHI9PWx8fHIhPXUmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P24odCk6ISF0KX0sYT1vLm5vcm1hbGl6ZT1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nKGUpLnJlcGxhY2UoaSxcIi5cIikudG9Mb3dlckNhc2UoKX0scz1vLmRhdGE9e30sdT1vLk5BVElWRT1cIk5cIixsPW8uUE9MWUZJTEw9XCJQXCI7ZS5leHBvcnRzPW99LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDg2KTtlLmV4cG9ydHM9biYmIVN5bWJvbC5zaGFtJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yfSxmdW5jdGlvbihlLHQscil7dmFyIG49cig1KTt0LmY9bn0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTIwKSxpPXIoMTQpLG89cigxMjUpLGE9cigxNSkuZjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bi5TeW1ib2x8fChuLlN5bWJvbD17fSk7aSh0LGUpfHxhKHQsZSx7dmFsdWU6by5mKGUpfSl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IFR5cGVFcnJvcihTdHJpbmcoZSkrXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMyksaT1yKDU5KSxvPXIoNSkoXCJzcGVjaWVzXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiBpKGUpJiYoXCJmdW5jdGlvblwiIT10eXBlb2Yocj1lLmNvbnN0cnVjdG9yKXx8ciE9PUFycmF5JiYhaShyLnByb3RvdHlwZSk/bihyKSYmbnVsbD09PShyPXJbb10pJiYocj12b2lkIDApOnI9dm9pZCAwKSxuZXcodm9pZCAwPT09cj9BcnJheTpyKSgwPT09dD8wOnQpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbz1yKDExKSxhPXIoMTkzKSxzPW8ucHJvY2Vzcyx1PXMmJnMudmVyc2lvbnMsbD11JiZ1LnY4O2w/aT0obj1sLnNwbGl0KFwiLlwiKSlbMF0rblsxXTphJiYoIShuPWEubWF0Y2goL0VkZ2VcXC8oXFxkKykvKSl8fG5bMV0+PTc0KSYmKG49YS5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLykpJiYoaT1uWzFdKSxlLmV4cG9ydHM9aSYmK2l9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDUpLGk9cig2MCksbz1yKDE1KSxhPW4oXCJ1bnNjb3BhYmxlc1wiKSxzPUFycmF5LnByb3RvdHlwZTtudWxsPT1zW2FdJiZvLmYocyxhLHtjb25maWd1cmFibGU6ITAsdmFsdWU6aShudWxsKX0pLGUuZXhwb3J0cz1mdW5jdGlvbihlKXtzW2FdW2VdPSEwfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGksbyxhPXIoMTMyKSxzPXIoMjEpLHU9cigxNCksbD1yKDUpLGM9cig0NCksaD1sKFwiaXRlcmF0b3JcIikscD0hMTtbXS5rZXlzJiYoXCJuZXh0XCJpbihvPVtdLmtleXMoKSk/KGk9YShhKG8pKSkhPT1PYmplY3QucHJvdG90eXBlJiYobj1pKTpwPSEwKSxudWxsPT1uJiYobj17fSksY3x8dShuLGgpfHxzKG4saCwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pKSxlLmV4cG9ydHM9e0l0ZXJhdG9yUHJvdG90eXBlOm4sQlVHR1lfU0FGQVJJX0lURVJBVE9SUzpwfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTQpLGk9cigyNyksbz1yKDU3KSxhPXIoMTk2KSxzPW8oXCJJRV9QUk9UT1wiKSx1PU9iamVjdC5wcm90b3R5cGU7ZS5leHBvcnRzPWE/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKGUpe3JldHVybiBlPWkoZSksbihlLHMpP2Vbc106XCJmdW5jdGlvblwiPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD91Om51bGx9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxOCksaT1yKDE5Nyk7ZS5leHBvcnRzPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8KFwiX19wcm90b19fXCJpbnt9P2Z1bmN0aW9uKCl7dmFyIGUsdD0hMSxyPXt9O3RyeXsoZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsXCJfX3Byb3RvX19cIikuc2V0KS5jYWxsKHIsW10pLHQ9ciBpbnN0YW5jZW9mIEFycmF5fWNhdGNoKGUpe31yZXR1cm4gZnVuY3Rpb24ocixvKXtyZXR1cm4gbihyKSxpKG8pLHQ/ZS5jYWxsKHIsbyk6ci5fX3Byb3RvX189byxyfX0oKTp2b2lkIDApfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig1NiksaT1yKDE1KSxvPXIoNDApO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIGE9bih0KTthIGluIGU/aS5mKGUsYSxvKDAscikpOmVbYV09cn19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDkwKSxpPXIoNDIpLG89cig1KShcInRvU3RyaW5nVGFnXCIpLGE9XCJBcmd1bWVudHNcIj09aShmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpO2UuZXhwb3J0cz1uP2k6ZnVuY3Rpb24oZSl7dmFyIHQscixuO3JldHVybiB2b2lkIDA9PT1lP1wiVW5kZWZpbmVkXCI6bnVsbD09PWU/XCJOdWxsXCI6XCJzdHJpbmdcIj09dHlwZW9mKHI9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIGVbdF19Y2F0Y2goZSl7fX0odD1PYmplY3QoZSksbykpP3I6YT9pKHQpOlwiT2JqZWN0XCI9PShuPWkodCkpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNhbGxlZT9cIkFyZ3VtZW50c1wiOm59fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxOCk7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGU9bih0aGlzKSx0PVwiXCI7cmV0dXJuIGUuZ2xvYmFsJiYodCs9XCJnXCIpLGUuaWdub3JlQ2FzZSYmKHQrPVwiaVwiKSxlLm11bHRpbGluZSYmKHQrPVwibVwiKSxlLmRvdEFsbCYmKHQrPVwic1wiKSxlLnVuaWNvZGUmJih0Kz1cInVcIiksZS5zdGlja3kmJih0Kz1cInlcIiksdH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQ3KSxpPXIoMzUpLG89ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscil7dmFyIG8sYSxzPVN0cmluZyhpKHQpKSx1PW4ociksbD1zLmxlbmd0aDtyZXR1cm4gdTwwfHx1Pj1sP2U/XCJcIjp2b2lkIDA6KG89cy5jaGFyQ29kZUF0KHUpKTw1NTI5Nnx8bz41NjMxOXx8dSsxPT09bHx8KGE9cy5jaGFyQ29kZUF0KHUrMSkpPDU2MzIwfHxhPjU3MzQzP2U/cy5jaGFyQXQodSk6bzplP3Muc2xpY2UodSx1KzIpOmEtNTYzMjArKG8tNTUyOTY8PDEwKSs2NTUzNn19O2UuZXhwb3J0cz17Y29kZUF0Om8oITEpLGNoYXJBdDpvKCEwKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQpLGk9cigyNyksbz1yKDYxKTtuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDpyKDgpKChmdW5jdGlvbigpe28oMSl9KSl9LHtrZXlzOmZ1bmN0aW9uKGUpe3JldHVybiBvKGkoZSkpfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMTEpLG89cigxMjMpLGE9cigyNSkscz1yKDE0MCksdT1yKDE0MSksbD1yKDE0MiksYz1yKDEzKSxoPXIoOCkscD1yKDIwOCksZj1yKDYyKSxkPXIoMjA5KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBtPS0xIT09ZS5pbmRleE9mKFwiTWFwXCIpLHk9LTEhPT1lLmluZGV4T2YoXCJXZWFrXCIpLHY9bT9cInNldFwiOlwiYWRkXCIsXz1pW2VdLGc9XyYmXy5wcm90b3R5cGUsYj1fLHg9e30sdz1mdW5jdGlvbihlKXt2YXIgdD1nW2VdO2EoZyxlLFwiYWRkXCI9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2FsbCh0aGlzLDA9PT1lPzA6ZSksdGhpc306XCJkZWxldGVcIj09ZT9mdW5jdGlvbihlKXtyZXR1cm4hKHkmJiFjKGUpKSYmdC5jYWxsKHRoaXMsMD09PWU/MDplKX06XCJnZXRcIj09ZT9mdW5jdGlvbihlKXtyZXR1cm4geSYmIWMoZSk/dm9pZCAwOnQuY2FsbCh0aGlzLDA9PT1lPzA6ZSl9OlwiaGFzXCI9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuISh5JiYhYyhlKSkmJnQuY2FsbCh0aGlzLDA9PT1lPzA6ZSl9OmZ1bmN0aW9uKGUscil7cmV0dXJuIHQuY2FsbCh0aGlzLDA9PT1lPzA6ZSxyKSx0aGlzfSl9O2lmKG8oZSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBffHwhKHl8fGcuZm9yRWFjaCYmIWgoKGZ1bmN0aW9uKCl7KG5ldyBfKS5lbnRyaWVzKCkubmV4dCgpfSkpKSkpYj1yLmdldENvbnN0cnVjdG9yKHQsZSxtLHYpLHMuUkVRVUlSRUQ9ITA7ZWxzZSBpZihvKGUsITApKXt2YXIgRT1uZXcgYixEPUVbdl0oeT97fTotMCwxKSE9RSxTPWgoKGZ1bmN0aW9uKCl7RS5oYXMoMSl9KSksQz1wKChmdW5jdGlvbihlKXtuZXcgXyhlKX0pKSxBPSF5JiZoKChmdW5jdGlvbigpe2Zvcih2YXIgZT1uZXcgXyx0PTU7dC0tOyllW3ZdKHQsdCk7cmV0dXJuIWUuaGFzKC0wKX0pKTtDfHwoKGI9dCgoZnVuY3Rpb24odCxyKXtsKHQsYixlKTt2YXIgbj1kKG5ldyBfLHQsYik7cmV0dXJuIG51bGwhPXImJnUocixuW3ZdLG4sbSksbn0pKSkucHJvdG90eXBlPWcsZy5jb25zdHJ1Y3Rvcj1iKSwoU3x8QSkmJih3KFwiZGVsZXRlXCIpLHcoXCJoYXNcIiksbSYmdyhcImdldFwiKSksKEF8fEQpJiZ3KHYpLHkmJmcuY2xlYXImJmRlbGV0ZSBnLmNsZWFyfXJldHVybiB4W2VdPWIsbih7Z2xvYmFsOiEwLGZvcmNlZDpiIT1ffSx4KSxmKGIsZSkseXx8ci5zZXRTdHJvbmcoYixlLG0pLGJ9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0NSksaT1yKDEzKSxvPXIoMTQpLGE9cigxNSkuZixzPXIoNTgpLHU9cigyMDQpLGw9cyhcIm1ldGFcIiksYz0wLGg9T2JqZWN0LmlzRXh0ZW5zaWJsZXx8ZnVuY3Rpb24oKXtyZXR1cm4hMH0scD1mdW5jdGlvbihlKXthKGUsbCx7dmFsdWU6e29iamVjdElEOlwiT1wiKyArK2Msd2Vha0RhdGE6e319fSl9LGY9ZS5leHBvcnRzPXtSRVFVSVJFRDohMSxmYXN0S2V5OmZ1bmN0aW9uKGUsdCl7aWYoIWkoZSkpcmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGU/ZTooXCJzdHJpbmdcIj09dHlwZW9mIGU/XCJTXCI6XCJQXCIpK2U7aWYoIW8oZSxsKSl7aWYoIWgoZSkpcmV0dXJuXCJGXCI7aWYoIXQpcmV0dXJuXCJFXCI7cChlKX1yZXR1cm4gZVtsXS5vYmplY3RJRH0sZ2V0V2Vha0RhdGE6ZnVuY3Rpb24oZSx0KXtpZighbyhlLGwpKXtpZighaChlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTtwKGUpfXJldHVybiBlW2xdLndlYWtEYXRhfSxvbkZyZWV6ZTpmdW5jdGlvbihlKXtyZXR1cm4gdSYmZi5SRVFVSVJFRCYmaChlKSYmIW8oZSxsKSYmcChlKSxlfX07bltsXT0hMH0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTgpLGk9cigyMDUpLG89cigyNiksYT1yKDg3KSxzPXIoMjA2KSx1PXIoMjA3KSxsPWZ1bmN0aW9uKGUsdCl7dGhpcy5zdG9wcGVkPWUsdGhpcy5yZXN1bHQ9dH07KGUuZXhwb3J0cz1mdW5jdGlvbihlLHQscixjLGgpe3ZhciBwLGYsZCxtLHksdixfLGc9YSh0LHIsYz8yOjEpO2lmKGgpcD1lO2Vsc2V7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YoZj1zKGUpKSl0aHJvdyBUeXBlRXJyb3IoXCJUYXJnZXQgaXMgbm90IGl0ZXJhYmxlXCIpO2lmKGkoZikpe2ZvcihkPTAsbT1vKGUubGVuZ3RoKTttPmQ7ZCsrKWlmKCh5PWM/ZyhuKF89ZVtkXSlbMF0sX1sxXSk6ZyhlW2RdKSkmJnkgaW5zdGFuY2VvZiBsKXJldHVybiB5O3JldHVybiBuZXcgbCghMSl9cD1mLmNhbGwoZSl9Zm9yKHY9cC5uZXh0OyEoXz12LmNhbGwocCkpLmRvbmU7KWlmKFwib2JqZWN0XCI9PXR5cGVvZih5PXUocCxnLF8udmFsdWUsYykpJiZ5JiZ5IGluc3RhbmNlb2YgbClyZXR1cm4geTtyZXR1cm4gbmV3IGwoITEpfSkuc3RvcD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGwoITAsZSl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgVHlwZUVycm9yKFwiSW5jb3JyZWN0IFwiKyhyP3IrXCIgXCI6XCJcIikrXCJpbnZvY2F0aW9uXCIpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTUpLmYsaT1yKDYwKSxvPXIoMjEwKSxhPXIoODcpLHM9cigxNDIpLHU9cigxNDEpLGw9cig4OCksYz1yKDIxMSksaD1yKDE2KSxwPXIoMTQwKS5mYXN0S2V5LGY9cig0MyksZD1mLnNldCxtPWYuZ2V0dGVyRm9yO2UuZXhwb3J0cz17Z2V0Q29uc3RydWN0b3I6ZnVuY3Rpb24oZSx0LHIsbCl7dmFyIGM9ZSgoZnVuY3Rpb24oZSxuKXtzKGUsYyx0KSxkKGUse3R5cGU6dCxpbmRleDppKG51bGwpLGZpcnN0OnZvaWQgMCxsYXN0OnZvaWQgMCxzaXplOjB9KSxofHwoZS5zaXplPTApLG51bGwhPW4mJnUobixlW2xdLGUscil9KSksZj1tKHQpLHk9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbz1mKGUpLGE9dihlLHQpO3JldHVybiBhP2EudmFsdWU9cjooby5sYXN0PWE9e2luZGV4Omk9cCh0LCEwKSxrZXk6dCx2YWx1ZTpyLHByZXZpb3VzOm49by5sYXN0LG5leHQ6dm9pZCAwLHJlbW92ZWQ6ITF9LG8uZmlyc3R8fChvLmZpcnN0PWEpLG4mJihuLm5leHQ9YSksaD9vLnNpemUrKzplLnNpemUrKyxcIkZcIiE9PWkmJihvLmluZGV4W2ldPWEpKSxlfSx2PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj1mKGUpLGk9cCh0KTtpZihcIkZcIiE9PWkpcmV0dXJuIG4uaW5kZXhbaV07Zm9yKHI9bi5maXJzdDtyO3I9ci5uZXh0KWlmKHIua2V5PT10KXJldHVybiByfTtyZXR1cm4gbyhjLnByb3RvdHlwZSx7Y2xlYXI6ZnVuY3Rpb24oKXtmb3IodmFyIGU9Zih0aGlzKSx0PWUuaW5kZXgscj1lLmZpcnN0O3I7KXIucmVtb3ZlZD0hMCxyLnByZXZpb3VzJiYoci5wcmV2aW91cz1yLnByZXZpb3VzLm5leHQ9dm9pZCAwKSxkZWxldGUgdFtyLmluZGV4XSxyPXIubmV4dDtlLmZpcnN0PWUubGFzdD12b2lkIDAsaD9lLnNpemU9MDp0aGlzLnNpemU9MH0sZGVsZXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWYodGhpcykscj12KHRoaXMsZSk7aWYocil7dmFyIG49ci5uZXh0LGk9ci5wcmV2aW91cztkZWxldGUgdC5pbmRleFtyLmluZGV4XSxyLnJlbW92ZWQ9ITAsaSYmKGkubmV4dD1uKSxuJiYobi5wcmV2aW91cz1pKSx0LmZpcnN0PT1yJiYodC5maXJzdD1uKSx0Lmxhc3Q9PXImJih0Lmxhc3Q9aSksaD90LnNpemUtLTp0aGlzLnNpemUtLX1yZXR1cm4hIXJ9LGZvckVhY2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9Zih0aGlzKSxuPWEoZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwzKTt0PXQ/dC5uZXh0OnIuZmlyc3Q7KWZvcihuKHQudmFsdWUsdC5rZXksdGhpcyk7dCYmdC5yZW1vdmVkOyl0PXQucHJldmlvdXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4hIXYodGhpcyxlKX19KSxvKGMucHJvdG90eXBlLHI/e2dldDpmdW5jdGlvbihlKXt2YXIgdD12KHRoaXMsZSk7cmV0dXJuIHQmJnQudmFsdWV9LHNldDpmdW5jdGlvbihlLHQpe3JldHVybiB5KHRoaXMsMD09PWU/MDplLHQpfX06e2FkZDpmdW5jdGlvbihlKXtyZXR1cm4geSh0aGlzLGU9MD09PWU/MDplLGUpfX0pLGgmJm4oYy5wcm90b3R5cGUsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBmKHRoaXMpLnNpemV9fSksY30sc2V0U3Ryb25nOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10K1wiIEl0ZXJhdG9yXCIsaT1tKHQpLG89bShuKTtsKGUsdCwoZnVuY3Rpb24oZSx0KXtkKHRoaXMse3R5cGU6bix0YXJnZXQ6ZSxzdGF0ZTppKGUpLGtpbmQ6dCxsYXN0OnZvaWQgMH0pfSksKGZ1bmN0aW9uKCl7Zm9yKHZhciBlPW8odGhpcyksdD1lLmtpbmQscj1lLmxhc3Q7ciYmci5yZW1vdmVkOylyPXIucHJldmlvdXM7cmV0dXJuIGUudGFyZ2V0JiYoZS5sYXN0PXI9cj9yLm5leHQ6ZS5zdGF0ZS5maXJzdCk/XCJrZXlzXCI9PXQ/e3ZhbHVlOnIua2V5LGRvbmU6ITF9OlwidmFsdWVzXCI9PXQ/e3ZhbHVlOnIudmFsdWUsZG9uZTohMX06e3ZhbHVlOltyLmtleSxyLnZhbHVlXSxkb25lOiExfTooZS50YXJnZXQ9dm9pZCAwLHt2YWx1ZTp2b2lkIDAsZG9uZTohMH0pfSkscj9cImVudHJpZXNcIjpcInZhbHVlc1wiLCFyLCEwKSxjKHQpfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXIoNCksbz1yKDU1KS5mLGE9cigyNikscz1yKDIyMiksdT1yKDM1KSxsPXIoMjI0KSxjPXIoNDQpLGg9XCJcIi5lbmRzV2l0aCxwPU1hdGgubWluLGY9bChcImVuZHNXaXRoXCIpO2koe3RhcmdldDpcIlN0cmluZ1wiLHByb3RvOiEwLGZvcmNlZDohIShjfHxmfHwobj1vKFN0cmluZy5wcm90b3R5cGUsXCJlbmRzV2l0aFwiKSwhbnx8bi53cml0YWJsZSkpJiYhZn0se2VuZHNXaXRoOmZ1bmN0aW9uKGUpe3ZhciB0PVN0cmluZyh1KHRoaXMpKTtzKGUpO3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLG49YSh0Lmxlbmd0aCksaT12b2lkIDA9PT1yP246cChhKHIpLG4pLG89U3RyaW5nKGUpO3JldHVybiBoP2guY2FsbCh0LG8saSk6dC5zbGljZShpLW8ubGVuZ3RoLGkpPT09b319KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbihlKXtcbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG52YXIgbj1yKDIyOSksaT1yKDIzMCksbz1yKDIzMSk7ZnVuY3Rpb24gYSgpe3JldHVybiB1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/MjE0NzQ4MzY0NzoxMDczNzQxODIzfWZ1bmN0aW9uIHMoZSx0KXtpZihhKCk8dCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoXCIpO3JldHVybiB1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KGU9bmV3IFVpbnQ4QXJyYXkodCkpLl9fcHJvdG9fXz11LnByb3RvdHlwZToobnVsbD09PWUmJihlPW5ldyB1KHQpKSxlLmxlbmd0aD10KSxlfWZ1bmN0aW9uIHUoZSx0LHIpe2lmKCEodS5UWVBFRF9BUlJBWV9TVVBQT1JUfHx0aGlzIGluc3RhbmNlb2YgdSkpcmV0dXJuIG5ldyB1KGUsdCxyKTtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7cmV0dXJuIGgodGhpcyxlKX1yZXR1cm4gbCh0aGlzLGUsdCxyKX1mdW5jdGlvbiBsKGUsdCxyLG4pe2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP2Z1bmN0aW9uKGUsdCxyLG4pe2lmKHQuYnl0ZUxlbmd0aCxyPDB8fHQuYnl0ZUxlbmd0aDxyKXRocm93IG5ldyBSYW5nZUVycm9yKFwiJ29mZnNldCcgaXMgb3V0IG9mIGJvdW5kc1wiKTtpZih0LmJ5dGVMZW5ndGg8cisobnx8MCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInbGVuZ3RoJyBpcyBvdXQgb2YgYm91bmRzXCIpO3Q9dm9pZCAwPT09ciYmdm9pZCAwPT09bj9uZXcgVWludDhBcnJheSh0KTp2b2lkIDA9PT1uP25ldyBVaW50OEFycmF5KHQscik6bmV3IFVpbnQ4QXJyYXkodCxyLG4pO3UuVFlQRURfQVJSQVlfU1VQUE9SVD8oZT10KS5fX3Byb3RvX189dS5wcm90b3R5cGU6ZT1wKGUsdCk7cmV0dXJuIGV9KGUsdCxyLG4pOlwic3RyaW5nXCI9PXR5cGVvZiB0P2Z1bmN0aW9uKGUsdCxyKXtcInN0cmluZ1wiPT10eXBlb2YgciYmXCJcIiE9PXJ8fChyPVwidXRmOFwiKTtpZighdS5pc0VuY29kaW5nKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJyk7dmFyIG49MHxkKHQsciksaT0oZT1zKGUsbikpLndyaXRlKHQscik7aSE9PW4mJihlPWUuc2xpY2UoMCxpKSk7cmV0dXJuIGV9KGUsdCxyKTpmdW5jdGlvbihlLHQpe2lmKHUuaXNCdWZmZXIodCkpe3ZhciByPTB8Zih0Lmxlbmd0aCk7cmV0dXJuIDA9PT0oZT1zKGUscikpLmxlbmd0aHx8dC5jb3B5KGUsMCwwLHIpLGV9aWYodCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZ0LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHxcImxlbmd0aFwiaW4gdClyZXR1cm5cIm51bWJlclwiIT10eXBlb2YgdC5sZW5ndGh8fChuPXQubGVuZ3RoKSE9bj9zKGUsMCk6cChlLHQpO2lmKFwiQnVmZmVyXCI9PT10LnR5cGUmJm8odC5kYXRhKSlyZXR1cm4gcChlLHQuZGF0YSl9dmFyIG47dGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC5cIil9KGUsdCl9ZnVuY3Rpb24gYyhlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJyk7aWYoZTwwKXRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpfWZ1bmN0aW9uIGgoZSx0KXtpZihjKHQpLGU9cyhlLHQ8MD8wOjB8Zih0KSksIXUuVFlQRURfQVJSQVlfU1VQUE9SVClmb3IodmFyIHI9MDtyPHQ7KytyKWVbcl09MDtyZXR1cm4gZX1mdW5jdGlvbiBwKGUsdCl7dmFyIHI9dC5sZW5ndGg8MD8wOjB8Zih0Lmxlbmd0aCk7ZT1zKGUscik7Zm9yKHZhciBuPTA7bjxyO24rPTEpZVtuXT0yNTUmdFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBmKGUpe2lmKGU+PWEoKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIithKCkudG9TdHJpbmcoMTYpK1wiIGJ5dGVzXCIpO3JldHVybiAwfGV9ZnVuY3Rpb24gZChlLHQpe2lmKHUuaXNCdWZmZXIoZSkpcmV0dXJuIGUubGVuZ3RoO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3JiYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpfHxlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKXJldHVybiBlLmJ5dGVMZW5ndGg7XCJzdHJpbmdcIiE9dHlwZW9mIGUmJihlPVwiXCIrZSk7dmFyIHI9ZS5sZW5ndGg7aWYoMD09PXIpcmV0dXJuIDA7Zm9yKHZhciBuPSExOzspc3dpdGNoKHQpe2Nhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIHI7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZSB2b2lkIDA6cmV0dXJuIHooZSkubGVuZ3RoO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiAyKnI7Y2FzZVwiaGV4XCI6cmV0dXJuIHI+Pj4xO2Nhc2VcImJhc2U2NFwiOnJldHVybiBVKGUpLmxlbmd0aDtkZWZhdWx0OmlmKG4pcmV0dXJuIHooZSkubGVuZ3RoO3Q9KFwiXCIrdCkudG9Mb3dlckNhc2UoKSxuPSEwfX1mdW5jdGlvbiBtKGUsdCxyKXt2YXIgbj0hMTtpZigodm9pZCAwPT09dHx8dDwwKSYmKHQ9MCksdD50aGlzLmxlbmd0aClyZXR1cm5cIlwiO2lmKCh2b2lkIDA9PT1yfHxyPnRoaXMubGVuZ3RoKSYmKHI9dGhpcy5sZW5ndGgpLHI8PTApcmV0dXJuXCJcIjtpZigocj4+Pj0wKTw9KHQ+Pj49MCkpcmV0dXJuXCJcIjtmb3IoZXx8KGU9XCJ1dGY4XCIpOzspc3dpdGNoKGUpe2Nhc2VcImhleFwiOnJldHVybiBUKHRoaXMsdCxyKTtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gQyh0aGlzLHQscik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gQSh0aGlzLHQscik7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIE4odGhpcyx0LHIpO2Nhc2VcImJhc2U2NFwiOnJldHVybiBTKHRoaXMsdCxyKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gTyh0aGlzLHQscik7ZGVmYXVsdDppZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitlKTtlPShlK1wiXCIpLnRvTG93ZXJDYXNlKCksbj0hMH19ZnVuY3Rpb24geShlLHQscil7dmFyIG49ZVt0XTtlW3RdPWVbcl0sZVtyXT1ufWZ1bmN0aW9uIHYoZSx0LHIsbixpKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuLTE7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHI/KG49cixyPTApOnI+MjE0NzQ4MzY0Nz9yPTIxNDc0ODM2NDc6cjwtMjE0NzQ4MzY0OCYmKHI9LTIxNDc0ODM2NDgpLHI9K3IsaXNOYU4ocikmJihyPWk/MDplLmxlbmd0aC0xKSxyPDAmJihyPWUubGVuZ3RoK3IpLHI+PWUubGVuZ3RoKXtpZihpKXJldHVybi0xO3I9ZS5sZW5ndGgtMX1lbHNlIGlmKHI8MCl7aWYoIWkpcmV0dXJuLTE7cj0wfWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD11LmZyb20odCxuKSksdS5pc0J1ZmZlcih0KSlyZXR1cm4gMD09PXQubGVuZ3RoPy0xOl8oZSx0LHIsbixpKTtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdCY9MjU1LHUuVFlQRURfQVJSQVlfU1VQUE9SVCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZj9pP1VpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChlLHQscik6VWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChlLHQscik6XyhlLFt0XSxyLG4saSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlclwiKX1mdW5jdGlvbiBfKGUsdCxyLG4saSl7dmFyIG8sYT0xLHM9ZS5sZW5ndGgsdT10Lmxlbmd0aDtpZih2b2lkIDAhPT1uJiYoXCJ1Y3MyXCI9PT0obj1TdHJpbmcobikudG9Mb3dlckNhc2UoKSl8fFwidWNzLTJcIj09PW58fFwidXRmMTZsZVwiPT09bnx8XCJ1dGYtMTZsZVwiPT09bikpe2lmKGUubGVuZ3RoPDJ8fHQubGVuZ3RoPDIpcmV0dXJuLTE7YT0yLHMvPTIsdS89MixyLz0yfWZ1bmN0aW9uIGwoZSx0KXtyZXR1cm4gMT09PWE/ZVt0XTplLnJlYWRVSW50MTZCRSh0KmEpfWlmKGkpe3ZhciBjPS0xO2ZvcihvPXI7bzxzO28rKylpZihsKGUsbyk9PT1sKHQsLTE9PT1jPzA6by1jKSl7aWYoLTE9PT1jJiYoYz1vKSxvLWMrMT09PXUpcmV0dXJuIGMqYX1lbHNlLTEhPT1jJiYoby09by1jKSxjPS0xfWVsc2UgZm9yKHIrdT5zJiYocj1zLXUpLG89cjtvPj0wO28tLSl7Zm9yKHZhciBoPSEwLHA9MDtwPHU7cCsrKWlmKGwoZSxvK3ApIT09bCh0LHApKXtoPSExO2JyZWFrfWlmKGgpcmV0dXJuIG99cmV0dXJuLTF9ZnVuY3Rpb24gZyhlLHQscixuKXtyPU51bWJlcihyKXx8MDt2YXIgaT1lLmxlbmd0aC1yO24/KG49TnVtYmVyKG4pKT5pJiYobj1pKTpuPWk7dmFyIG89dC5sZW5ndGg7aWYobyUyIT0wKXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGhleCBzdHJpbmdcIik7bj5vLzImJihuPW8vMik7Zm9yKHZhciBhPTA7YTxuOysrYSl7dmFyIHM9cGFyc2VJbnQodC5zdWJzdHIoMiphLDIpLDE2KTtpZihpc05hTihzKSlyZXR1cm4gYTtlW3IrYV09c31yZXR1cm4gYX1mdW5jdGlvbiBiKGUsdCxyLG4pe3JldHVybiBHKHoodCxlLmxlbmd0aC1yKSxlLHIsbil9ZnVuY3Rpb24geChlLHQscixuKXtyZXR1cm4gRyhmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wO3I8ZS5sZW5ndGg7KytyKXQucHVzaCgyNTUmZS5jaGFyQ29kZUF0KHIpKTtyZXR1cm4gdH0odCksZSxyLG4pfWZ1bmN0aW9uIHcoZSx0LHIsbil7cmV0dXJuIHgoZSx0LHIsbil9ZnVuY3Rpb24gRShlLHQscixuKXtyZXR1cm4gRyhVKHQpLGUscixuKX1mdW5jdGlvbiBEKGUsdCxyLG4pe3JldHVybiBHKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLG4saSxvPVtdLGE9MDthPGUubGVuZ3RoJiYhKCh0LT0yKTwwKTsrK2Epcj1lLmNoYXJDb2RlQXQoYSksbj1yPj44LGk9ciUyNTYsby5wdXNoKGkpLG8ucHVzaChuKTtyZXR1cm4gb30odCxlLmxlbmd0aC1yKSxlLHIsbil9ZnVuY3Rpb24gUyhlLHQscil7cmV0dXJuIDA9PT10JiZyPT09ZS5sZW5ndGg/bi5mcm9tQnl0ZUFycmF5KGUpOm4uZnJvbUJ5dGVBcnJheShlLnNsaWNlKHQscikpfWZ1bmN0aW9uIEMoZSx0LHIpe3I9TWF0aC5taW4oZS5sZW5ndGgscik7Zm9yKHZhciBuPVtdLGk9dDtpPHI7KXt2YXIgbyxhLHMsdSxsPWVbaV0sYz1udWxsLGg9bD4yMzk/NDpsPjIyMz8zOmw+MTkxPzI6MTtpZihpK2g8PXIpc3dpdGNoKGgpe2Nhc2UgMTpsPDEyOCYmKGM9bCk7YnJlYWs7Y2FzZSAyOjEyOD09KDE5MiYobz1lW2krMV0pKSYmKHU9KDMxJmwpPDw2fDYzJm8pPjEyNyYmKGM9dSk7YnJlYWs7Y2FzZSAzOm89ZVtpKzFdLGE9ZVtpKzJdLDEyOD09KDE5MiZvKSYmMTI4PT0oMTkyJmEpJiYodT0oMTUmbCk8PDEyfCg2MyZvKTw8Nnw2MyZhKT4yMDQ3JiYodTw1NTI5Nnx8dT41NzM0MykmJihjPXUpO2JyZWFrO2Nhc2UgNDpvPWVbaSsxXSxhPWVbaSsyXSxzPWVbaSszXSwxMjg9PSgxOTImbykmJjEyOD09KDE5MiZhKSYmMTI4PT0oMTkyJnMpJiYodT0oMTUmbCk8PDE4fCg2MyZvKTw8MTJ8KDYzJmEpPDw2fDYzJnMpPjY1NTM1JiZ1PDExMTQxMTImJihjPXUpfW51bGw9PT1jPyhjPTY1NTMzLGg9MSk6Yz42NTUzNSYmKGMtPTY1NTM2LG4ucHVzaChjPj4+MTAmMTAyM3w1NTI5NiksYz01NjMyMHwxMDIzJmMpLG4ucHVzaChjKSxpKz1ofXJldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLmxlbmd0aDtpZih0PD00MDk2KXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlKTt2YXIgcj1cIlwiLG49MDtmb3IoO248dDspcis9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZS5zbGljZShuLG4rPTQwOTYpKTtyZXR1cm4gcn0obil9dC5CdWZmZXI9dSx0LlNsb3dCdWZmZXI9ZnVuY3Rpb24oZSl7K2UhPWUmJihlPTApO3JldHVybiB1LmFsbG9jKCtlKX0sdC5JTlNQRUNUX01BWF9CWVRFUz01MCx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ9dm9pZCAwIT09ZS5UWVBFRF9BUlJBWV9TVVBQT1JUP2UuVFlQRURfQVJSQVlfU1VQUE9SVDpmdW5jdGlvbigpe3RyeXt2YXIgZT1uZXcgVWludDhBcnJheSgxKTtyZXR1cm4gZS5fX3Byb3RvX189e19fcHJvdG9fXzpVaW50OEFycmF5LnByb3RvdHlwZSxmb286ZnVuY3Rpb24oKXtyZXR1cm4gNDJ9fSw0Mj09PWUuZm9vKCkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuc3ViYXJyYXkmJjA9PT1lLnN1YmFycmF5KDEsMSkuYnl0ZUxlbmd0aH1jYXRjaChlKXtyZXR1cm4hMX19KCksdC5rTWF4TGVuZ3RoPWEoKSx1LnBvb2xTaXplPTgxOTIsdS5fYXVnbWVudD1mdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX189dS5wcm90b3R5cGUsZX0sdS5mcm9tPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbChudWxsLGUsdCxyKX0sdS5UWVBFRF9BUlJBWV9TVVBQT1JUJiYodS5wcm90b3R5cGUuX19wcm90b19fPVVpbnQ4QXJyYXkucHJvdG90eXBlLHUuX19wcm90b19fPVVpbnQ4QXJyYXksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnNwZWNpZXMmJnVbU3ltYm9sLnNwZWNpZXNdPT09dSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHUsU3ltYm9sLnNwZWNpZXMse3ZhbHVlOm51bGwsY29uZmlndXJhYmxlOiEwfSkpLHUuYWxsb2M9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBmdW5jdGlvbihlLHQscixuKXtyZXR1cm4gYyh0KSx0PD0wP3MoZSx0KTp2b2lkIDAhPT1yP1wic3RyaW5nXCI9PXR5cGVvZiBuP3MoZSx0KS5maWxsKHIsbik6cyhlLHQpLmZpbGwocik6cyhlLHQpfShudWxsLGUsdCxyKX0sdS5hbGxvY1Vuc2FmZT1mdW5jdGlvbihlKXtyZXR1cm4gaChudWxsLGUpfSx1LmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbihlKXtyZXR1cm4gaChudWxsLGUpfSx1LmlzQnVmZmVyPWZ1bmN0aW9uKGUpe3JldHVybiEobnVsbD09ZXx8IWUuX2lzQnVmZmVyKX0sdS5jb21wYXJlPWZ1bmN0aW9uKGUsdCl7aWYoIXUuaXNCdWZmZXIoZSl8fCF1LmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzXCIpO2lmKGU9PT10KXJldHVybiAwO2Zvcih2YXIgcj1lLmxlbmd0aCxuPXQubGVuZ3RoLGk9MCxvPU1hdGgubWluKHIsbik7aTxvOysraSlpZihlW2ldIT09dFtpXSl7cj1lW2ldLG49dFtpXTticmVha31yZXR1cm4gcjxuPy0xOm48cj8xOjB9LHUuaXNFbmNvZGluZz1mdW5jdGlvbihlKXtzd2l0Y2goU3RyaW5nKGUpLnRvTG93ZXJDYXNlKCkpe2Nhc2VcImhleFwiOmNhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6Y2FzZVwiYmFzZTY0XCI6Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LHUuY29uY2F0PWZ1bmN0aW9uKGUsdCl7aWYoIW8oZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7aWYoMD09PWUubGVuZ3RoKXJldHVybiB1LmFsbG9jKDApO3ZhciByO2lmKHZvaWQgMD09PXQpZm9yKHQ9MCxyPTA7cjxlLmxlbmd0aDsrK3IpdCs9ZVtyXS5sZW5ndGg7dmFyIG49dS5hbGxvY1Vuc2FmZSh0KSxpPTA7Zm9yKHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIGE9ZVtyXTtpZighdS5pc0J1ZmZlcihhKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTthLmNvcHkobixpKSxpKz1hLmxlbmd0aH1yZXR1cm4gbn0sdS5ieXRlTGVuZ3RoPWQsdS5wcm90b3R5cGUuX2lzQnVmZmVyPSEwLHUucHJvdG90eXBlLnN3YXAxNj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlMiE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz0yKXkodGhpcyx0LHQrMSk7cmV0dXJuIHRoaXN9LHUucHJvdG90eXBlLnN3YXAzMj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlNCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz00KXkodGhpcyx0LHQrMykseSh0aGlzLHQrMSx0KzIpO3JldHVybiB0aGlzfSx1LnByb3RvdHlwZS5zd2FwNjQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxlbmd0aDtpZihlJTghPTApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtmb3IodmFyIHQ9MDt0PGU7dCs9OCl5KHRoaXMsdCx0KzcpLHkodGhpcyx0KzEsdCs2KSx5KHRoaXMsdCsyLHQrNSkseSh0aGlzLHQrMyx0KzQpO3JldHVybiB0aGlzfSx1LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPTB8dGhpcy5sZW5ndGg7cmV0dXJuIDA9PT1lP1wiXCI6MD09PWFyZ3VtZW50cy5sZW5ndGg/Qyh0aGlzLDAsZSk6bS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHUucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbihlKXtpZighdS5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtyZXR1cm4gdGhpcz09PWV8fDA9PT11LmNvbXBhcmUodGhpcyxlKX0sdS5wcm90b3R5cGUuaW5zcGVjdD1mdW5jdGlvbigpe3ZhciBlPVwiXCIscj10LklOU1BFQ1RfTUFYX0JZVEVTO3JldHVybiB0aGlzLmxlbmd0aD4wJiYoZT10aGlzLnRvU3RyaW5nKFwiaGV4XCIsMCxyKS5tYXRjaCgvLnsyfS9nKS5qb2luKFwiIFwiKSx0aGlzLmxlbmd0aD5yJiYoZSs9XCIgLi4uIFwiKSksXCI8QnVmZmVyIFwiK2UrXCI+XCJ9LHUucHJvdG90eXBlLmNvbXBhcmU9ZnVuY3Rpb24oZSx0LHIsbixpKXtpZighdS5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtpZih2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1yJiYocj1lP2UubGVuZ3RoOjApLHZvaWQgMD09PW4mJihuPTApLHZvaWQgMD09PWkmJihpPXRoaXMubGVuZ3RoKSx0PDB8fHI+ZS5sZW5ndGh8fG48MHx8aT50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm91dCBvZiByYW5nZSBpbmRleFwiKTtpZihuPj1pJiZ0Pj1yKXJldHVybiAwO2lmKG4+PWkpcmV0dXJuLTE7aWYodD49cilyZXR1cm4gMTtpZih0aGlzPT09ZSlyZXR1cm4gMDtmb3IodmFyIG89KGk+Pj49MCktKG4+Pj49MCksYT0ocj4+Pj0wKS0odD4+Pj0wKSxzPU1hdGgubWluKG8sYSksbD10aGlzLnNsaWNlKG4saSksYz1lLnNsaWNlKHQsciksaD0wO2g8czsrK2gpaWYobFtoXSE9PWNbaF0pe289bFtoXSxhPWNbaF07YnJlYWt9cmV0dXJuIG88YT8tMTphPG8/MTowfSx1LnByb3RvdHlwZS5pbmNsdWRlcz1mdW5jdGlvbihlLHQscil7cmV0dXJuLTEhPT10aGlzLmluZGV4T2YoZSx0LHIpfSx1LnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdih0aGlzLGUsdCxyLCEwKX0sdS5wcm90b3R5cGUubGFzdEluZGV4T2Y9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB2KHRoaXMsZSx0LHIsITEpfSx1LnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihlLHQscixuKXtpZih2b2lkIDA9PT10KW49XCJ1dGY4XCIscj10aGlzLmxlbmd0aCx0PTA7ZWxzZSBpZih2b2lkIDA9PT1yJiZcInN0cmluZ1wiPT10eXBlb2YgdCluPXQscj10aGlzLmxlbmd0aCx0PTA7ZWxzZXtpZighaXNGaW5pdGUodCkpdGhyb3cgbmV3IEVycm9yKFwiQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcIik7dHw9MCxpc0Zpbml0ZShyKT8ocnw9MCx2b2lkIDA9PT1uJiYobj1cInV0ZjhcIikpOihuPXIscj12b2lkIDApfXZhciBpPXRoaXMubGVuZ3RoLXQ7aWYoKHZvaWQgMD09PXJ8fHI+aSkmJihyPWkpLGUubGVuZ3RoPjAmJihyPDB8fHQ8MCl8fHQ+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kc1wiKTtufHwobj1cInV0ZjhcIik7Zm9yKHZhciBvPSExOzspc3dpdGNoKG4pe2Nhc2VcImhleFwiOnJldHVybiBnKHRoaXMsZSx0LHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBiKHRoaXMsZSx0LHIpO2Nhc2VcImFzY2lpXCI6cmV0dXJuIHgodGhpcyxlLHQscik7Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIHcodGhpcyxlLHQscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIEUodGhpcyxlLHQscik7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIEQodGhpcyxlLHQscik7ZGVmYXVsdDppZihvKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIituKTtuPShcIlwiK24pLnRvTG93ZXJDYXNlKCksbz0hMH19LHUucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt0eXBlOlwiQnVmZmVyXCIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTtmdW5jdGlvbiBBKGUsdCxyKXt2YXIgbj1cIlwiO3I9TWF0aC5taW4oZS5sZW5ndGgscik7Zm9yKHZhciBpPXQ7aTxyOysraSluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDEyNyZlW2ldKTtyZXR1cm4gbn1mdW5jdGlvbiBOKGUsdCxyKXt2YXIgbj1cIlwiO3I9TWF0aC5taW4oZS5sZW5ndGgscik7Zm9yKHZhciBpPXQ7aTxyOysraSluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbaV0pO3JldHVybiBufWZ1bmN0aW9uIFQoZSx0LHIpe3ZhciBuPWUubGVuZ3RoOyghdHx8dDwwKSYmKHQ9MCksKCFyfHxyPDB8fHI+bikmJihyPW4pO2Zvcih2YXIgaT1cIlwiLG89dDtvPHI7KytvKWkrPVIoZVtvXSk7cmV0dXJuIGl9ZnVuY3Rpb24gTyhlLHQscil7Zm9yKHZhciBuPWUuc2xpY2UodCxyKSxpPVwiXCIsbz0wO288bi5sZW5ndGg7bys9MilpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKG5bb10rMjU2Km5bbysxXSk7cmV0dXJuIGl9ZnVuY3Rpb24gRihlLHQscil7aWYoZSUxIT0wfHxlPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvZmZzZXQgaXMgbm90IHVpbnRcIik7aWYoZSt0PnIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoXCIpfWZ1bmN0aW9uIGsoZSx0LHIsbixpLG8pe2lmKCF1LmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpO2lmKHQ+aXx8dDxvKXRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpO2lmKHIrbj5lLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBQKGUsdCxyLG4pe3Q8MCYmKHQ9NjU1MzUrdCsxKTtmb3IodmFyIGk9MCxvPU1hdGgubWluKGUubGVuZ3RoLXIsMik7aTxvOysraSllW3IraV09KHQmMjU1PDw4KihuP2k6MS1pKSk+Pj44KihuP2k6MS1pKX1mdW5jdGlvbiBJKGUsdCxyLG4pe3Q8MCYmKHQ9NDI5NDk2NzI5NSt0KzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4oZS5sZW5ndGgtciw0KTtpPG87KytpKWVbcitpXT10Pj4+OCoobj9pOjMtaSkmMjU1fWZ1bmN0aW9uIEwoZSx0LHIsbixpLG8pe2lmKHIrbj5lLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZihyPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIil9ZnVuY3Rpb24gTShlLHQscixuLG8pe3JldHVybiBvfHxMKGUsMCxyLDQpLGkud3JpdGUoZSx0LHIsbiwyMyw0KSxyKzR9ZnVuY3Rpb24gQihlLHQscixuLG8pe3JldHVybiBvfHxMKGUsMCxyLDgpLGkud3JpdGUoZSx0LHIsbiw1Miw4KSxyKzh9dS5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPXRoaXMubGVuZ3RoO2lmKChlPX5+ZSk8MD8oZSs9bik8MCYmKGU9MCk6ZT5uJiYoZT1uKSwodD12b2lkIDA9PT10P246fn50KTwwPyh0Kz1uKTwwJiYodD0wKTp0Pm4mJih0PW4pLHQ8ZSYmKHQ9ZSksdS5UWVBFRF9BUlJBWV9TVVBQT1JUKShyPXRoaXMuc3ViYXJyYXkoZSx0KSkuX19wcm90b19fPXUucHJvdG90eXBlO2Vsc2V7dmFyIGk9dC1lO3I9bmV3IHUoaSx2b2lkIDApO2Zvcih2YXIgbz0wO288aTsrK28pcltvXT10aGlzW28rZV19cmV0dXJuIHJ9LHUucHJvdG90eXBlLnJlYWRVSW50TEU9ZnVuY3Rpb24oZSx0LHIpe2V8PTAsdHw9MCxyfHxGKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbZV0saT0xLG89MDsrK288dCYmKGkqPTI1Nik7KW4rPXRoaXNbZStvXSppO3JldHVybiBufSx1LnByb3RvdHlwZS5yZWFkVUludEJFPWZ1bmN0aW9uKGUsdCxyKXtlfD0wLHR8PTAscnx8RihlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj10aGlzW2UrLS10XSxpPTE7dD4wJiYoaSo9MjU2KTspbis9dGhpc1tlKy0tdF0qaTtyZXR1cm4gbn0sdS5wcm90b3R5cGUucmVhZFVJbnQ4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fEYoZSwxLHRoaXMubGVuZ3RoKSx0aGlzW2VdfSx1LnByb3RvdHlwZS5yZWFkVUludDE2TEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlKzFdPDw4fSx1LnByb3RvdHlwZS5yZWFkVUludDE2QkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDh8dGhpc1tlKzFdfSx1LnByb3RvdHlwZS5yZWFkVUludDMyTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDQsdGhpcy5sZW5ndGgpLCh0aGlzW2VdfHRoaXNbZSsxXTw8OHx0aGlzW2UrMl08PDE2KSsxNjc3NzIxNip0aGlzW2UrM119LHUucHJvdG90eXBlLnJlYWRVSW50MzJCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxGKGUsNCx0aGlzLmxlbmd0aCksMTY3NzcyMTYqdGhpc1tlXSsodGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdKX0sdS5wcm90b3R5cGUucmVhZEludExFPWZ1bmN0aW9uKGUsdCxyKXtlfD0wLHR8PTAscnx8RihlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj10aGlzW2VdLGk9MSxvPTA7KytvPHQmJihpKj0yNTYpOyluKz10aGlzW2Urb10qaTtyZXR1cm4gbj49KGkqPTEyOCkmJihuLT1NYXRoLnBvdygyLDgqdCkpLG59LHUucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbihlLHQscil7ZXw9MCx0fD0wLHJ8fEYoZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG49dCxpPTEsbz10aGlzW2UrLS1uXTtuPjAmJihpKj0yNTYpOylvKz10aGlzW2UrLS1uXSppO3JldHVybiBvPj0oaSo9MTI4KSYmKG8tPU1hdGgucG93KDIsOCp0KSksb30sdS5wcm90b3R5cGUucmVhZEludDg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDEsdGhpcy5sZW5ndGgpLDEyOCZ0aGlzW2VdPy0xKigyNTUtdGhpc1tlXSsxKTp0aGlzW2VdfSx1LnByb3RvdHlwZS5yZWFkSW50MTZMRT1mdW5jdGlvbihlLHQpe3R8fEYoZSwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW2VdfHRoaXNbZSsxXTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0sdS5wcm90b3R5cGUucmVhZEludDE2QkU9ZnVuY3Rpb24oZSx0KXt0fHxGKGUsMix0aGlzLmxlbmd0aCk7dmFyIHI9dGhpc1tlKzFdfHRoaXNbZV08PDg7cmV0dXJuIDMyNzY4JnI/NDI5NDkwMTc2MHxyOnJ9LHUucHJvdG90eXBlLnJlYWRJbnQzMkxFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fEYoZSw0LHRoaXMubGVuZ3RoKSx0aGlzW2VdfHRoaXNbZSsxXTw8OHx0aGlzW2UrMl08PDE2fHRoaXNbZSszXTw8MjR9LHUucHJvdG90eXBlLnJlYWRJbnQzMkJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fEYoZSw0LHRoaXMubGVuZ3RoKSx0aGlzW2VdPDwyNHx0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM119LHUucHJvdG90eXBlLnJlYWRGbG9hdExFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fEYoZSw0LHRoaXMubGVuZ3RoKSxpLnJlYWQodGhpcyxlLCEwLDIzLDQpfSx1LnByb3RvdHlwZS5yZWFkRmxvYXRCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxGKGUsNCx0aGlzLmxlbmd0aCksaS5yZWFkKHRoaXMsZSwhMSwyMyw0KX0sdS5wcm90b3R5cGUucmVhZERvdWJsZUxFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fEYoZSw4LHRoaXMubGVuZ3RoKSxpLnJlYWQodGhpcyxlLCEwLDUyLDgpfSx1LnByb3RvdHlwZS5yZWFkRG91YmxlQkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDgsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITEsNTIsOCl9LHUucHJvdG90eXBlLndyaXRlVUludExFPWZ1bmN0aW9uKGUsdCxyLG4peyhlPStlLHR8PTAscnw9MCxuKXx8ayh0aGlzLGUsdCxyLE1hdGgucG93KDIsOCpyKS0xLDApO3ZhciBpPTEsbz0wO2Zvcih0aGlzW3RdPTI1NSZlOysrbzxyJiYoaSo9MjU2KTspdGhpc1t0K29dPWUvaSYyNTU7cmV0dXJuIHQrcn0sdS5wcm90b3R5cGUud3JpdGVVSW50QkU9ZnVuY3Rpb24oZSx0LHIsbil7KGU9K2UsdHw9MCxyfD0wLG4pfHxrKHRoaXMsZSx0LHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIGk9ci0xLG89MTtmb3IodGhpc1t0K2ldPTI1NSZlOy0taT49MCYmKG8qPTI1Nik7KXRoaXNbdCtpXT1lL28mMjU1O3JldHVybiB0K3J9LHUucHJvdG90eXBlLndyaXRlVUludDg9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8ayh0aGlzLGUsdCwxLDI1NSwwKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlR8fChlPU1hdGguZmxvb3IoZSkpLHRoaXNbdF09MjU1JmUsdCsxfSx1LnByb3RvdHlwZS53cml0ZVVJbnQxNkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fGsodGhpcyxlLHQsMiw2NTUzNSwwKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44KTpQKHRoaXMsZSx0LCEwKSx0KzJ9LHUucHJvdG90eXBlLndyaXRlVUludDE2QkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8ayh0aGlzLGUsdCwyLDY1NTM1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+OCx0aGlzW3QrMV09MjU1JmUpOlAodGhpcyxlLHQsITEpLHQrMn0sdS5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxrKHRoaXMsZSx0LDQsNDI5NDk2NzI5NSwwKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdCszXT1lPj4+MjQsdGhpc1t0KzJdPWU+Pj4xNix0aGlzW3QrMV09ZT4+PjgsdGhpc1t0XT0yNTUmZSk6SSh0aGlzLGUsdCwhMCksdCs0fSx1LnByb3RvdHlwZS53cml0ZVVJbnQzMkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fGsodGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPTI1NSZlKTpJKHRoaXMsZSx0LCExKSx0KzR9LHUucHJvdG90eXBlLndyaXRlSW50TEU9ZnVuY3Rpb24oZSx0LHIsbil7aWYoZT0rZSx0fD0wLCFuKXt2YXIgaT1NYXRoLnBvdygyLDgqci0xKTtrKHRoaXMsZSx0LHIsaS0xLC1pKX12YXIgbz0wLGE9MSxzPTA7Zm9yKHRoaXNbdF09MjU1JmU7KytvPHImJihhKj0yNTYpOyllPDAmJjA9PT1zJiYwIT09dGhpc1t0K28tMV0mJihzPTEpLHRoaXNbdCtvXT0oZS9hPj4wKS1zJjI1NTtyZXR1cm4gdCtyfSx1LnByb3RvdHlwZS53cml0ZUludEJFPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKGU9K2UsdHw9MCwhbil7dmFyIGk9TWF0aC5wb3coMiw4KnItMSk7ayh0aGlzLGUsdCxyLGktMSwtaSl9dmFyIG89ci0xLGE9MSxzPTA7Zm9yKHRoaXNbdCtvXT0yNTUmZTstLW8+PTAmJihhKj0yNTYpOyllPDAmJjA9PT1zJiYwIT09dGhpc1t0K28rMV0mJihzPTEpLHRoaXNbdCtvXT0oZS9hPj4wKS1zJjI1NTtyZXR1cm4gdCtyfSx1LnByb3RvdHlwZS53cml0ZUludDg9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8ayh0aGlzLGUsdCwxLDEyNywtMTI4KSx1LlRZUEVEX0FSUkFZX1NVUFBPUlR8fChlPU1hdGguZmxvb3IoZSkpLGU8MCYmKGU9MjU1K2UrMSksdGhpc1t0XT0yNTUmZSx0KzF9LHUucHJvdG90eXBlLndyaXRlSW50MTZMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxrKHRoaXMsZSx0LDIsMzI3NjcsLTMyNzY4KSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44KTpQKHRoaXMsZSx0LCEwKSx0KzJ9LHUucHJvdG90eXBlLndyaXRlSW50MTZCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxrKHRoaXMsZSx0LDIsMzI3NjcsLTMyNzY4KSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09ZT4+PjgsdGhpc1t0KzFdPTI1NSZlKTpQKHRoaXMsZSx0LCExKSx0KzJ9LHUucHJvdG90eXBlLndyaXRlSW50MzJMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxrKHRoaXMsZSx0LDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCksdS5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3RdPTI1NSZlLHRoaXNbdCsxXT1lPj4+OCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCszXT1lPj4+MjQpOkkodGhpcyxlLHQsITApLHQrNH0sdS5wcm90b3R5cGUud3JpdGVJbnQzMkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fGsodGhpcyxlLHQsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSxlPDAmJihlPTQyOTQ5NjcyOTUrZSsxKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09ZT4+PjI0LHRoaXNbdCsxXT1lPj4+MTYsdGhpc1t0KzJdPWU+Pj44LHRoaXNbdCszXT0yNTUmZSk6SSh0aGlzLGUsdCwhMSksdCs0fSx1LnByb3RvdHlwZS53cml0ZUZsb2F0TEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBNKHRoaXMsZSx0LCEwLHIpfSx1LnByb3RvdHlwZS53cml0ZUZsb2F0QkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBNKHRoaXMsZSx0LCExLHIpfSx1LnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQih0aGlzLGUsdCwhMCxyKX0sdS5wcm90b3R5cGUud3JpdGVEb3VibGVCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEIodGhpcyxlLHQsITEscil9LHUucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oZSx0LHIsbil7aWYocnx8KHI9MCksbnx8MD09PW58fChuPXRoaXMubGVuZ3RoKSx0Pj1lLmxlbmd0aCYmKHQ9ZS5sZW5ndGgpLHR8fCh0PTApLG4+MCYmbjxyJiYobj1yKSxuPT09cilyZXR1cm4gMDtpZigwPT09ZS5sZW5ndGh8fDA9PT10aGlzLmxlbmd0aClyZXR1cm4gMDtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzXCIpO2lmKHI8MHx8cj49dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzXCIpO2lmKG48MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInNvdXJjZUVuZCBvdXQgb2YgYm91bmRzXCIpO24+dGhpcy5sZW5ndGgmJihuPXRoaXMubGVuZ3RoKSxlLmxlbmd0aC10PG4tciYmKG49ZS5sZW5ndGgtdCtyKTt2YXIgaSxvPW4tcjtpZih0aGlzPT09ZSYmcjx0JiZ0PG4pZm9yKGk9by0xO2k+PTA7LS1pKWVbaSt0XT10aGlzW2krcl07ZWxzZSBpZihvPDFlM3x8IXUuVFlQRURfQVJSQVlfU1VQUE9SVClmb3IoaT0wO2k8bzsrK2kpZVtpK3RdPXRoaXNbaStyXTtlbHNlIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKGUsdGhpcy5zdWJhcnJheShyLHIrbyksdCk7cmV0dXJuIG99LHUucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24oZSx0LHIsbil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0PyhuPXQsdD0wLHI9dGhpcy5sZW5ndGgpOlwic3RyaW5nXCI9PXR5cGVvZiByJiYobj1yLHI9dGhpcy5sZW5ndGgpLDE9PT1lLmxlbmd0aCl7dmFyIGk9ZS5jaGFyQ29kZUF0KDApO2k8MjU2JiYoZT1pKX1pZih2b2lkIDAhPT1uJiZcInN0cmluZ1wiIT10eXBlb2Ygbil0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgbiYmIXUuaXNFbmNvZGluZyhuKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrbil9ZWxzZVwibnVtYmVyXCI9PXR5cGVvZiBlJiYoZSY9MjU1KTtpZih0PDB8fHRoaXMubGVuZ3RoPHR8fHRoaXMubGVuZ3RoPHIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYocjw9dClyZXR1cm4gdGhpczt2YXIgbztpZih0Pj4+PTAscj12b2lkIDA9PT1yP3RoaXMubGVuZ3RoOnI+Pj4wLGV8fChlPTApLFwibnVtYmVyXCI9PXR5cGVvZiBlKWZvcihvPXQ7bzxyOysrbyl0aGlzW29dPWU7ZWxzZXt2YXIgYT11LmlzQnVmZmVyKGUpP2U6eihuZXcgdShlLG4pLnRvU3RyaW5nKCkpLHM9YS5sZW5ndGg7Zm9yKG89MDtvPHItdDsrK28pdGhpc1tvK3RdPWFbbyVzXX1yZXR1cm4gdGhpc307dmFyIGo9L1teK1xcLzAtOUEtWmEtei1fXS9nO2Z1bmN0aW9uIFIoZSl7cmV0dXJuIGU8MTY/XCIwXCIrZS50b1N0cmluZygxNik6ZS50b1N0cmluZygxNil9ZnVuY3Rpb24geihlLHQpe3ZhciByO3Q9dHx8MS8wO2Zvcih2YXIgbj1lLmxlbmd0aCxpPW51bGwsbz1bXSxhPTA7YTxuOysrYSl7aWYoKHI9ZS5jaGFyQ29kZUF0KGEpKT41NTI5NSYmcjw1NzM0NCl7aWYoIWkpe2lmKHI+NTYzMTkpeyh0LT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1pZihhKzE9PT1uKXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9aT1yO2NvbnRpbnVlfWlmKHI8NTYzMjApeyh0LT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KSxpPXI7Y29udGludWV9cj02NTUzNisoaS01NTI5Njw8MTB8ci01NjMyMCl9ZWxzZSBpJiYodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7aWYoaT1udWxsLHI8MTI4KXtpZigodC09MSk8MClicmVhaztvLnB1c2gocil9ZWxzZSBpZihyPDIwNDgpe2lmKCh0LT0yKTwwKWJyZWFrO28ucHVzaChyPj42fDE5Miw2MyZyfDEyOCl9ZWxzZSBpZihyPDY1NTM2KXtpZigodC09Myk8MClicmVhaztvLnB1c2gocj4+MTJ8MjI0LHI+PjYmNjN8MTI4LDYzJnJ8MTI4KX1lbHNle2lmKCEocjwxMTE0MTEyKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIik7aWYoKHQtPTQpPDApYnJlYWs7by5wdXNoKHI+PjE4fDI0MCxyPj4xMiY2M3wxMjgscj4+NiY2M3wxMjgsNjMmcnwxMjgpfX1yZXR1cm4gb31mdW5jdGlvbiBVKGUpe3JldHVybiBuLnRvQnl0ZUFycmF5KGZ1bmN0aW9uKGUpe2lmKChlPWZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0/ZS50cmltKCk6ZS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpfShlKS5yZXBsYWNlKGosXCJcIikpLmxlbmd0aDwyKXJldHVyblwiXCI7Zm9yKDtlLmxlbmd0aCU0IT0wOyllKz1cIj1cIjtyZXR1cm4gZX0oZSkpfWZ1bmN0aW9uIEcoZSx0LHIsbil7Zm9yKHZhciBpPTA7aTxuJiYhKGkrcj49dC5sZW5ndGh8fGk+PWUubGVuZ3RoKTsrK2kpdFtpK3JdPWVbaV07cmV0dXJuIGl9fSkuY2FsbCh0aGlzLHIoNzgpKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuaXNBU0NJSUJ5dGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTAmJmU8PTEyN319LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0saT10aGlzJiZ0aGlzLl9fc3ByZWFkfHxmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllPWUuY29uY2F0KG4oYXJndW1lbnRzW3RdKSk7cmV0dXJuIGV9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQubGVuZ3RoPWZ1bmN0aW9uKGUpe3JldHVybiBlLmxlbmd0aH0sdC5ieXRlTG93ZXJjYXNlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lW3RdO3I+PTY1JiZyPD05MCYmKGVbdF09ciszMil9fSx0LmJ5dGVVcHBlcmNhc2U9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWVbdF07cj49OTcmJnI8PTEyMiYmKGVbdF09ci0zMil9fSx0LmJ5dGVDYXNlSW5zZW5zaXRpdmVNYXRjaD1mdW5jdGlvbihlLHQpe2lmKGUubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWVbcl0saT10W3JdO2lmKG4+PTY1JiZuPD05MCYmKG4rPTMyKSxpPj02NSYmaTw9OTAmJihpKz0zMiksbiE9PWkpcmV0dXJuITF9cmV0dXJuITB9LHQuc3RhcnRzV2l0aD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj0wOzspe2lmKHI+PWUubGVuZ3RoKXJldHVybiExO2lmKHI+PXQubGVuZ3RoKXJldHVybiEwO2lmKGVbcl0hPT10W3JdKXJldHVybiExO3IrK319LHQuYnl0ZUxlc3NUaGFuPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTA7Oyl7aWYocj49ZS5sZW5ndGgpcmV0dXJuITE7aWYocj49dC5sZW5ndGgpcmV0dXJuITA7dmFyIG49ZVtyXSxpPXRbcl07aWYobjxpKXJldHVybiEwO2lmKG4+aSlyZXR1cm4hMTtyKyt9fSx0Lmlzb21vcnBoaWNEZWNvZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KFN0cmluZyxpKGUpKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDYpLGk9cig3KSxvPXIoMCksYT1yKDEyKSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLl9hc3NvY2lhdGVkRG9jdW1lbnQ9ZXx8bi5kb20ud2luZG93LmRvY3VtZW50fXJldHVybiBlLnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudFR5cGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBvLm5hbWVzcGFjZV92YWxpZGF0ZShlKSxvLmNyZWF0ZV9kb2N1bWVudFR5cGUodGhpcy5fYXNzb2NpYXRlZERvY3VtZW50LGUsdCxyKX0sZS5wcm90b3R5cGUuY3JlYXRlRG9jdW1lbnQ9ZnVuY3Rpb24oZSx0LHIpe3ZvaWQgMD09PXImJihyPW51bGwpO3ZhciBuPW8uY3JlYXRlX3htbERvY3VtZW50KCksYT1udWxsO3JldHVybiB0JiYoYT1vLmRvY3VtZW50X2ludGVybmFsQ3JlYXRlRWxlbWVudE5TKG4sZSx0KSksciYmbi5hcHBlbmRDaGlsZChyKSxhJiZuLmFwcGVuZENoaWxkKGEpLG4uX29yaWdpbj10aGlzLl9hc3NvY2lhdGVkRG9jdW1lbnQuX29yaWdpbixlPT09aS5uYW1lc3BhY2UuSFRNTD9uLl9jb250ZW50VHlwZT1cImFwcGxpY2F0aW9uL3hodG1sK3htbFwiOmU9PT1pLm5hbWVzcGFjZS5TVkc/bi5fY29udGVudFR5cGU9XCJpbWFnZS9zdmcreG1sXCI6bi5fY29udGVudFR5cGU9XCJhcHBsaWNhdGlvbi94bWxcIixufSxlLnByb3RvdHlwZS5jcmVhdGVIVE1MRG9jdW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9by5jcmVhdGVfZG9jdW1lbnQoKTt0Ll90eXBlPVwiaHRtbFwiLHQuX2NvbnRlbnRUeXBlPVwidGV4dC9odG1sXCIsdC5hcHBlbmRDaGlsZChvLmNyZWF0ZV9kb2N1bWVudFR5cGUodCxcImh0bWxcIixcIlwiLFwiXCIpKTt2YXIgcj1vLmVsZW1lbnRfY3JlYXRlQW5FbGVtZW50KHQsXCJodG1sXCIsaS5uYW1lc3BhY2UuSFRNTCk7dC5hcHBlbmRDaGlsZChyKTt2YXIgbj1vLmVsZW1lbnRfY3JlYXRlQW5FbGVtZW50KHQsXCJoZWFkXCIsaS5uYW1lc3BhY2UuSFRNTCk7aWYoci5hcHBlbmRDaGlsZChuKSx2b2lkIDAhPT1lKXt2YXIgYT1vLmVsZW1lbnRfY3JlYXRlQW5FbGVtZW50KHQsXCJ0aXRsZVwiLGkubmFtZXNwYWNlLkhUTUwpO24uYXBwZW5kQ2hpbGQoYSk7dmFyIHM9by5jcmVhdGVfdGV4dCh0LGUpO2EuYXBwZW5kQ2hpbGQocyl9dmFyIHU9by5lbGVtZW50X2NyZWF0ZUFuRWxlbWVudCh0LFwiYm9keVwiLGkubmFtZXNwYWNlLkhUTUwpO3JldHVybiByLmFwcGVuZENoaWxkKHUpLHQuX29yaWdpbj10aGlzLl9hc3NvY2lhdGVkRG9jdW1lbnQuX29yaWdpbix0fSxlLnByb3RvdHlwZS5oYXNGZWF0dXJlPWZ1bmN0aW9uKCl7cmV0dXJuITB9LGUuX2NyZWF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGUodCl9LGV9KCk7dC5ET01JbXBsZW1lbnRhdGlvbkltcGw9cyxhLmlkbF9kZWZpbmVDb25zdChzLnByb3RvdHlwZSxcIl9JRFwiLFwiQG9vemNpdGFrL2RvbVwiKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoNzApLGE9cigxKSxzPXIoMCksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIHQ9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiB0Ll9zaWduYWxTbG90cz1uZXcgU2V0LHQuX211dGF0aW9uT2JzZXJ2ZXJNaWNyb3Rhc2tRdWV1ZWQ9ITEsdC5fbXV0YXRpb25PYnNlcnZlcnM9bmV3IFNldCx0Ll9pdGVyYXRvckxpc3Q9bmV3IGEuRml4ZWRTaXplU2V0LHQuX2Fzc29jaWF0ZWREb2N1bWVudD1zLmNyZWF0ZV9kb2N1bWVudCgpLHR9cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJkb2N1bWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXNzb2NpYXRlZERvY3VtZW50fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImV2ZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdXJyZW50RXZlbnR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5fY3JlYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0fSx0fShvLkV2ZW50VGFyZ2V0SW1wbCk7dC5XaW5kb3dJbXBsPXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIpLGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLmlzTm9kZT1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJnZvaWQgMCE9PWUuX25vZGVUeXBlfSxlLmlzRG9jdW1lbnROb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLkRvY3VtZW50fSxlLmlzRG9jdW1lbnRUeXBlTm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc05vZGUodCkmJnQuX25vZGVUeXBlPT09bi5Ob2RlVHlwZS5Eb2N1bWVudFR5cGV9LGUuaXNEb2N1bWVudEZyYWdtZW50Tm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc05vZGUodCkmJnQuX25vZGVUeXBlPT09bi5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50fSxlLmlzQXR0ck5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGUuaXNOb2RlKHQpJiZ0Ll9ub2RlVHlwZT09PW4uTm9kZVR5cGUuQXR0cmlidXRlfSxlLmlzQ2hhcmFjdGVyRGF0YU5vZGU9ZnVuY3Rpb24odCl7aWYoIWUuaXNOb2RlKHQpKXJldHVybiExO3ZhciByPXQuX25vZGVUeXBlO3JldHVybiByPT09bi5Ob2RlVHlwZS5UZXh0fHxyPT09bi5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb258fHI9PT1uLk5vZGVUeXBlLkNvbW1lbnR8fHI9PT1uLk5vZGVUeXBlLkNEYXRhfSxlLmlzVGV4dE5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGUuaXNOb2RlKHQpJiYodC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLlRleHR8fHQuX25vZGVUeXBlPT09bi5Ob2RlVHlwZS5DRGF0YSl9LGUuaXNFeGNsdXNpdmVUZXh0Tm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc05vZGUodCkmJnQuX25vZGVUeXBlPT09bi5Ob2RlVHlwZS5UZXh0fSxlLmlzQ0RBVEFTZWN0aW9uTm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc05vZGUodCkmJnQuX25vZGVUeXBlPT09bi5Ob2RlVHlwZS5DRGF0YX0sZS5pc0NvbW1lbnROb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLkNvbW1lbnR9LGUuaXNQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbn0sZS5pc0VsZW1lbnROb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLkVsZW1lbnR9LGUuaXNDdXN0b21FbGVtZW50Tm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc0VsZW1lbnROb2RlKHQpJiZcImN1c3RvbVwiPT09dC5fY3VzdG9tRWxlbWVudFN0YXRlfSxlLmlzU2hhZG93Um9vdD1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJnZvaWQgMCE9PWUuaG9zdH0sZS5pc01vdXNlRXZlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuISFlJiZ2b2lkIDAhPT1lLnNjcmVlblgmJm51bGwhPWUuc2NyZWVuWX0sZS5pc1Nsb3RhYmxlPWZ1bmN0aW9uKHQpe3JldHVybiEhdCYmdm9pZCAwIT09dC5fbmFtZSYmdm9pZCAwIT09dC5fYXNzaWduZWRTbG90JiYoZS5pc1RleHROb2RlKHQpfHxlLmlzRWxlbWVudE5vZGUodCkpfSxlLmlzU2xvdD1mdW5jdGlvbih0KXtyZXR1cm4hIXQmJnZvaWQgMCE9PXQuX25hbWUmJnZvaWQgMCE9PXQuX2Fzc2lnbmVkTm9kZXMmJmUuaXNFbGVtZW50Tm9kZSh0KX0sZS5pc1dpbmRvdz1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJnZvaWQgMCE9PWUubmF2aWdhdG9yfSxlLmlzRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJnZvaWQgMCE9PWUuaGFuZGxlRXZlbnR9LGUuaXNSZWdpc3RlcmVkT2JzZXJ2ZXI9ZnVuY3Rpb24oZSl7cmV0dXJuISFlJiZ2b2lkIDAhPT1lLm9ic2VydmVyJiZ2b2lkIDAhPT1lLm9wdGlvbnN9LGUuaXNUcmFuc2llbnRSZWdpc3RlcmVkT2JzZXJ2ZXI9ZnVuY3Rpb24odCl7cmV0dXJuISF0JiZ2b2lkIDAhPT10LnNvdXJjZSYmZS5pc1JlZ2lzdGVyZWRPYnNlcnZlcih0KX0sZX0oKTt0Lkd1YXJkPWl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGUuY2FsbCh0aGlzKXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KHIoOTgpLkRvY3VtZW50SW1wbCk7dC5YTUxEb2N1bWVudEltcGw9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LGk9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvLGE9cigxKSxzPXIoMjQzKSx1PXIoNyksbD1yKDI0NCksYz17ZnRwOjIxLGZpbGU6bnVsbCxodHRwOjgwLGh0dHBzOjQ0Myx3czo4MCx3c3M6NDQzfSxoPS9bXFwwLVxceDFGXFx4N0YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS8scD0vWyBcIjw+YF18W1xcMC1cXHgxRlxceDdGLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vLGY9L1sgXCI8PmAjP3t9XXxbXFwwLVxceDFGXFx4N0YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS8sZD0vWyBcIjw+YCM/e30vOjs9QFxcW1xcXVxcXFxcXF5cXHxdfFtcXDAtXFx4MUZcXHg3Ri1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLyxtPS9bMC05QS1aYS16IVxcJCYtXFwvOjs9XFw/QF9+XFx4QTAtXFx1RDdGRlxcdUUwMDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF18W1xcdUQ4MDAtXFx1RDgzRVxcdUQ4NDAtXFx1RDg3RVxcdUQ4ODAtXFx1RDhCRVxcdUQ4QzAtXFx1RDhGRVxcdUQ5MDAtXFx1RDkzRVxcdUQ5NDAtXFx1RDk3RVxcdUQ5ODAtXFx1RDlCRVxcdUQ5QzAtXFx1RDlGRVxcdURBMDAtXFx1REEzRVxcdURBNDAtXFx1REE3RVxcdURBODAtXFx1REFCRVxcdURBQzAtXFx1REFGRVxcdURCMDAtXFx1REIzRVxcdURCNDAtXFx1REI3RVxcdURCODAtXFx1REJCRVxcdURCQzAtXFx1REJGRV1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgzRlxcdUQ4N0ZcXHVEOEJGXFx1RDhGRlxcdUQ5M0ZcXHVEOTdGXFx1RDlCRlxcdUQ5RkZcXHVEQTNGXFx1REE3RlxcdURBQkZcXHVEQUZGXFx1REIzRlxcdURCN0ZcXHVEQkJGXFx1REJGRl1bXFx1REMwMC1cXHVERkZEXS8seT0vW1xcMFxcdFxcZlxcciAjJS86P0BcXFtcXFxcXFxdXS87ZnVuY3Rpb24gdihlKXt2b2lkIDAhPT1vJiZvLmNhbGwobnVsbCxcIlZhbGlkYXRpb24gRXJyb3I6IFwiK2UpfWZ1bmN0aW9uIF8oKXtyZXR1cm57c2NoZW1lOlwiXCIsdXNlcm5hbWU6XCJcIixwYXNzd29yZDpcIlwiLGhvc3Q6bnVsbCxwb3J0Om51bGwscGF0aDpbXSxxdWVyeTpudWxsLGZyYWdtZW50Om51bGwsX2Nhbm5vdEJlQUJhc2VVUkxGbGFnOiExLF9ibG9iVVJMRW50cnk6bnVsbH19ZnVuY3Rpb24gZyhlKXtyZXR1cm4gZSBpbiBjfWZ1bmN0aW9uIGIoZSl7cmV0dXJuIGcoZS5zY2hlbWUpfWZ1bmN0aW9uIHgoZSl7cmV0dXJuIGNbZV18fG51bGx9ZnVuY3Rpb24gdyhlKXtyZXR1cm5cIlwiIT09ZS51c2VybmFtZXx8XCJcIiE9PWUucGFzc3dvcmR9ZnVuY3Rpb24gRShlLHQpe3ZhciByLGk7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciBvPWUuc2NoZW1lK1wiOlwiO2lmKG51bGwhPT1lLmhvc3Q/KG8rPVwiLy9cIix3KGUpJiYobys9ZS51c2VybmFtZSxcIlwiIT09ZS5wYXNzd29yZCYmKG8rPVwiOlwiK2UucGFzc3dvcmQpLG8rPVwiQFwiKSxvKz1EKGUuaG9zdCksbnVsbCE9PWUucG9ydCYmKG8rPVwiOlwiK2UucG9ydCkpOm51bGw9PT1lLmhvc3QmJlwiZmlsZVwiPT09ZS5zY2hlbWUmJihvKz1cIi8vXCIpLGUuX2Nhbm5vdEJlQUJhc2VVUkxGbGFnKW8rPWUucGF0aFswXTtlbHNlIHRyeXtmb3IodmFyIGE9bihlLnBhdGgpLHM9YS5uZXh0KCk7IXMuZG9uZTtzPWEubmV4dCgpKXtvKz1cIi9cIitzLnZhbHVlfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYoaT1hLnJldHVybikmJmkuY2FsbChhKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIG51bGwhPT1lLnF1ZXJ5JiYobys9XCI/XCIrZS5xdWVyeSksdHx8bnVsbD09PWUuZnJhZ21lbnR8fChvKz1cIiNcIitlLmZyYWdtZW50KSxvfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIGEuaXNOdW1iZXIoZSk/UyhlKTphLmlzQXJyYXkoZSk/XCJbXCIrQyhlKStcIl1cIjplfWZ1bmN0aW9uIFMoZSl7Zm9yKHZhciB0PVwiXCIscj1lLG49MTtuPD00O24rKyl0PShyJTI1NikudG9TdHJpbmcoKSt0LDQhPT1uJiYodD1cIi5cIit0KSxyPU1hdGguZmxvb3Ioci8yNTYpO3JldHVybiB0fWZ1bmN0aW9uIEMoZSl7Zm9yKHZhciB0PVwiXCIscj1udWxsLG49LTEsaT0wLG89MCxhPTA7YTw4O2ErKylpZigwPT09ZVthXSl7aT0xO2Zvcih2YXIgcz1hKzE7czw4JiYwPT09ZVtzXTtzKyspaSsrO2k+byYmKG89aSxuPWEpfW8+MSYmKHI9bik7Zm9yKHZhciB1PSExLGw9MDtsPDg7bCsrKXUmJjA9PT1lW2xdfHwodSYmKHU9ITEpLHIhPT1sPyh0Kz1lW2xdLnRvU3RyaW5nKDE2KSw3IT09bCYmKHQrPVwiOlwiKSk6KHQrPTA9PT1sP1wiOjpcIjpcIjpcIix1PSEwKSk7cmV0dXJuIHR9ZnVuY3Rpb24gQShlLHQscixpLG8pe3ZhciBsLGMseSxfO2lmKHZvaWQgMD09PWkpe2k9e3NjaGVtZTpcIlwiLHVzZXJuYW1lOlwiXCIscGFzc3dvcmQ6XCJcIixob3N0Om51bGwscG9ydDpudWxsLHBhdGg6W10scXVlcnk6bnVsbCxmcmFnbWVudDpudWxsLF9jYW5ub3RCZUFCYXNlVVJMRmxhZzohMSxfYmxvYlVSTEVudHJ5Om51bGx9O3ZhciBFPS9eW1xcdTAwMDAtXFx1MDAxRlxcdTAwMjBdKy8sRD0vW1xcdTAwMDAtXFx1MDAxRlxcdTAwMjBdKyQvOyhFLnRlc3QoZSl8fEQudGVzdChlKSkmJnYoXCJJbnB1dCBzdHJpbmcgY29udGFpbnMgbGVhZGluZyBvciB0cmFpbGluZyBjb250cm9sIGNoYXJhY3RlcnMgb3Igc3BhY2UuXCIpLGU9KGU9ZS5yZXBsYWNlKEUsXCJcIikpLnJlcGxhY2UoRCxcIlwiKX12YXIgUz0vW1xcdTAwMDlcXHUwMDBBXFx1MDAwRF0vZztTLnRlc3QoZSkmJnYoXCJJbnB1dCBzdHJpbmcgY29udGFpbnMgdGFiIG9yIG5ld2xpbmUgY2hhcmFjdGVycy5cIiksZT1lLnJlcGxhY2UoUyxcIlwiKTt2YXIgQz12b2lkIDA9PT1vP3MuUGFyc2VyU3RhdGUuU2NoZW1lU3RhcnQ6bzt2b2lkIDA9PT10JiYodD1udWxsKTtmb3IodmFyIEE9dm9pZCAwPT09cnx8XCJyZXBsYWNlbWVudFwiPT09cnx8XCJVVEYtMTZCRVwiPT09cnx8XCJVVEYtMTZMRVwiPT09cj9cIlVURi04XCI6cixMPVwiXCIsTT0hMSxCPSExLGo9ITEsUj1uZXcgYS5TdHJpbmdXYWxrZXIoZSk7Oyl7c3dpdGNoKEMpe2Nhc2Ugcy5QYXJzZXJTdGF0ZS5TY2hlbWVTdGFydDppZih1LmNvZGVQb2ludC5BU0NJSUFscGhhLnRlc3QoUi5jKCkpKUwrPVIuYygpLnRvTG93ZXJDYXNlKCksQz1zLlBhcnNlclN0YXRlLlNjaGVtZTtlbHNle2lmKHZvaWQgMCE9PW8pcmV0dXJuIHYoXCJJbnZhbGlkIHNjaGVtZSBzdGFydCBjaGFyYWN0ZXIuXCIpLG51bGw7Qz1zLlBhcnNlclN0YXRlLk5vU2NoZW1lLFIucG9pbnRlci0tfWJyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5TY2hlbWU6aWYodS5jb2RlUG9pbnQuQVNDSUlBbHBoYW51bWVyaWMudGVzdChSLmMoKSl8fFwiK1wiPT09Ui5jKCl8fFwiLVwiPT09Ui5jKCl8fFwiLlwiPT09Ui5jKCkpTCs9Ui5jKCkudG9Mb3dlckNhc2UoKTtlbHNle2lmKFwiOlwiIT09Ui5jKCkpe2lmKHZvaWQgMD09PW8pe0w9XCJcIixDPXMuUGFyc2VyU3RhdGUuTm9TY2hlbWUsUi5wb2ludGVyPTA7Y29udGludWV9cmV0dXJuIHYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksbnVsbH1pZih2b2lkIDAhPT1vKXtpZihnKGkuc2NoZW1lKSYmIWcoTCkpcmV0dXJuIGk7aWYoIWcoaS5zY2hlbWUpJiZnKEwpKXJldHVybiBpO2lmKCh3KGkpfHxudWxsIT09aS5wb3J0KSYmXCJmaWxlXCI9PT1MKXJldHVybiBpO2lmKFwiZmlsZVwiPT09aS5zY2hlbWUmJihcIlwiPT09aS5ob3N0fHxudWxsPT09aS5ob3N0KSlyZXR1cm4gaX1pZihpLnNjaGVtZT1MLHZvaWQgMCE9PW8pcmV0dXJuIGkucG9ydD09PXgoaS5zY2hlbWUpJiYoaS5wb3J0PW51bGwpLGk7TD1cIlwiLFwiZmlsZVwiPT09aS5zY2hlbWU/KFIucmVtYWluaW5nKCkuc3RhcnRzV2l0aChcIi8vXCIpfHx2KFwiSW52YWxpZCBmaWxlIFVSTCBzY2hlbWUsICcvLycgZXhwZWN0ZWQuXCIpLEM9cy5QYXJzZXJTdGF0ZS5GaWxlKTpiKGkpJiZudWxsIT09dCYmdC5zY2hlbWU9PT1pLnNjaGVtZT9DPXMuUGFyc2VyU3RhdGUuU3BlY2lhbFJlbGF0aXZlT3JBdXRob3JpdHk6YihpKT9DPXMuUGFyc2VyU3RhdGUuU3BlY2lhbEF1dGhvcml0eVNsYXNoZXM6Ui5yZW1haW5pbmcoKS5zdGFydHNXaXRoKFwiL1wiKT8oQz1zLlBhcnNlclN0YXRlLlBhdGhPckF1dGhvcml0eSxSLnBvaW50ZXIrKyk6KGkuX2Nhbm5vdEJlQUJhc2VVUkxGbGFnPSEwLGkucGF0aC5wdXNoKFwiXCIpLEM9cy5QYXJzZXJTdGF0ZS5DYW5ub3RCZUFCYXNlVVJMUGF0aCl9YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLk5vU2NoZW1lOmlmKG51bGw9PT10fHx0Ll9jYW5ub3RCZUFCYXNlVVJMRmxhZyYmXCIjXCIhPT1SLmMoKSlyZXR1cm4gdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxudWxsO3QuX2Nhbm5vdEJlQUJhc2VVUkxGbGFnJiZcIiNcIj09PVIuYygpPyhpLnNjaGVtZT10LnNjaGVtZSxpLnBhdGg9dS5saXN0LmNsb25lKHQucGF0aCksaS5xdWVyeT10LnF1ZXJ5LGkuZnJhZ21lbnQ9XCJcIixpLl9jYW5ub3RCZUFCYXNlVVJMRmxhZz0hMCxDPXMuUGFyc2VyU3RhdGUuRnJhZ21lbnQpOlwiZmlsZVwiIT09dC5zY2hlbWU/KEM9cy5QYXJzZXJTdGF0ZS5SZWxhdGl2ZSxSLnBvaW50ZXItLSk6KEM9cy5QYXJzZXJTdGF0ZS5GaWxlLFIucG9pbnRlci0tKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuU3BlY2lhbFJlbGF0aXZlT3JBdXRob3JpdHk6XCIvXCI9PT1SLmMoKSYmUi5yZW1haW5pbmcoKS5zdGFydHNXaXRoKFwiL1wiKT8oQz1zLlBhcnNlclN0YXRlLlNwZWNpYWxBdXRob3JpdHlJZ25vcmVTbGFzaGVzLFIucG9pbnRlcisrKToodihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxDPXMuUGFyc2VyU3RhdGUuUmVsYXRpdmUsUi5wb2ludGVyLS0pO2JyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5QYXRoT3JBdXRob3JpdHk6XCIvXCI9PT1SLmMoKT9DPXMuUGFyc2VyU3RhdGUuQXV0aG9yaXR5OihDPXMuUGFyc2VyU3RhdGUuUGF0aCxSLnBvaW50ZXItLSk7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlJlbGF0aXZlOmlmKG51bGw9PT10KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyc2VyIHN0YXRlLiBCYXNlIFVSTCBpcyBudWxsLlwiKTtzd2l0Y2goaS5zY2hlbWU9dC5zY2hlbWUsUi5jKCkpe2Nhc2VcIlwiOmkudXNlcm5hbWU9dC51c2VybmFtZSxpLnBhc3N3b3JkPXQucGFzc3dvcmQsaS5ob3N0PXQuaG9zdCxpLnBvcnQ9dC5wb3J0LGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSxpLnF1ZXJ5PXQucXVlcnk7YnJlYWs7Y2FzZVwiL1wiOkM9cy5QYXJzZXJTdGF0ZS5SZWxhdGl2ZVNsYXNoO2JyZWFrO2Nhc2VcIj9cIjppLnVzZXJuYW1lPXQudXNlcm5hbWUsaS5wYXNzd29yZD10LnBhc3N3b3JkLGkuaG9zdD10Lmhvc3QsaS5wb3J0PXQucG9ydCxpLnBhdGg9dS5saXN0LmNsb25lKHQucGF0aCksaS5xdWVyeT1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5RdWVyeTticmVhaztjYXNlXCIjXCI6aS51c2VybmFtZT10LnVzZXJuYW1lLGkucGFzc3dvcmQ9dC5wYXNzd29yZCxpLmhvc3Q9dC5ob3N0LGkucG9ydD10LnBvcnQsaS5wYXRoPXUubGlzdC5jbG9uZSh0LnBhdGgpLGkucXVlcnk9dC5xdWVyeSxpLmZyYWdtZW50PVwiXCIsQz1zLlBhcnNlclN0YXRlLkZyYWdtZW50O2JyZWFrO2RlZmF1bHQ6YihpKSYmXCJcXFxcXCI9PT1SLmMoKT8odihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxDPXMuUGFyc2VyU3RhdGUuUmVsYXRpdmVTbGFzaCk6KGkudXNlcm5hbWU9dC51c2VybmFtZSxpLnBhc3N3b3JkPXQucGFzc3dvcmQsaS5ob3N0PXQuaG9zdCxpLnBvcnQ9dC5wb3J0LGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSwwIT09aS5wYXRoLmxlbmd0aCYmaS5wYXRoLnNwbGljZShpLnBhdGgubGVuZ3RoLTEsMSksQz1zLlBhcnNlclN0YXRlLlBhdGgsUi5wb2ludGVyLS0pfWJyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5SZWxhdGl2ZVNsYXNoOmlmKCFiKGkpfHxcIi9cIiE9PVIuYygpJiZcIlxcXFxcIiE9PVIuYygpKWlmKFwiL1wiPT09Ui5jKCkpQz1zLlBhcnNlclN0YXRlLkF1dGhvcml0eTtlbHNle2lmKG51bGw9PT10KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyc2VyIHN0YXRlLiBCYXNlIFVSTCBpcyBudWxsLlwiKTtpLnVzZXJuYW1lPXQudXNlcm5hbWUsaS5wYXNzd29yZD10LnBhc3N3b3JkLGkuaG9zdD10Lmhvc3QsaS5wb3J0PXQucG9ydCxDPXMuUGFyc2VyU3RhdGUuUGF0aCxSLnBvaW50ZXItLX1lbHNlXCJcXFxcXCI9PT1SLmMoKSYmdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxDPXMuUGFyc2VyU3RhdGUuU3BlY2lhbEF1dGhvcml0eUlnbm9yZVNsYXNoZXM7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlNwZWNpYWxBdXRob3JpdHlTbGFzaGVzOlwiL1wiPT09Ui5jKCkmJlIucmVtYWluaW5nKCkuc3RhcnRzV2l0aChcIi9cIik/KEM9cy5QYXJzZXJTdGF0ZS5TcGVjaWFsQXV0aG9yaXR5SWdub3JlU2xhc2hlcyxSLnBvaW50ZXIrKyk6KHYoXCJFeHBlY3RlZCAnLy8nLlwiKSxDPXMuUGFyc2VyU3RhdGUuU3BlY2lhbEF1dGhvcml0eUlnbm9yZVNsYXNoZXMsUi5wb2ludGVyLS0pO2JyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5TcGVjaWFsQXV0aG9yaXR5SWdub3JlU2xhc2hlczpcIi9cIiE9PVIuYygpJiZcIlxcXFxcIiE9PVIuYygpPyhDPXMuUGFyc2VyU3RhdGUuQXV0aG9yaXR5LFIucG9pbnRlci0tKTp2KFwiVW5leHBlY3RlZCAnLycgb3IgJ1xcXFwnLlwiKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuQXV0aG9yaXR5OmlmKFwiQFwiPT09Ui5jKCkpe3YoXCJVbmV4cGVjdGVkICdAJy5cIiksTSYmKEw9XCIlNDBcIitMKSxNPSEwO3RyeXtmb3IodmFyIFU9KGw9dm9pZCAwLG4oTCkpLEc9VS5uZXh0KCk7IUcuZG9uZTtHPVUubmV4dCgpKXt2YXIgcT1HLnZhbHVlO2lmKFwiOlwiIT09cXx8ail7dmFyIFc9WChxLGQpO2o/aS5wYXNzd29yZCs9VzppLnVzZXJuYW1lKz1XfWVsc2Ugaj0hMH19Y2F0Y2goZSl7bD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7RyYmIUcuZG9uZSYmKGM9VS5yZXR1cm4pJiZjLmNhbGwoVSl9ZmluYWxseXtpZihsKXRocm93IGwuZXJyb3J9fUw9XCJcIn1lbHNlIGlmKFwiXCI9PT1SLmMoKXx8XCIvXCI9PT1SLmMoKXx8XCI/XCI9PT1SLmMoKXx8XCIjXCI9PT1SLmMoKXx8YihpKSYmXCJcXFxcXCI9PT1SLmMoKSl7aWYoTSYmXCJcIj09PUwpcmV0dXJuIHYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksbnVsbDtSLnBvaW50ZXItPUwubGVuZ3RoKzEsTD1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5Ib3N0fWVsc2UgTCs9Ui5jKCk7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLkhvc3Q6Y2FzZSBzLlBhcnNlclN0YXRlLkhvc3RuYW1lOmlmKHZvaWQgMCE9PW8mJlwiZmlsZVwiPT09aS5zY2hlbWUpUi5wb2ludGVyLS0sQz1zLlBhcnNlclN0YXRlLkZpbGVIb3N0O2Vsc2UgaWYoXCI6XCIhPT1SLmMoKXx8QilpZihcIlwiPT09Ui5jKCl8fFwiL1wiPT09Ui5jKCl8fFwiP1wiPT09Ui5jKCl8fFwiI1wiPT09Ui5jKCl8fGIoaSkmJlwiXFxcXFwiPT09Ui5jKCkpe2lmKFIucG9pbnRlci0tLGIoaSkmJlwiXCI9PT1MKXJldHVybiB2KFwiSW52YWxpZCBpbnB1dCBzdHJpbmcuXCIpLG51bGw7aWYodm9pZCAwIT09byYmXCJcIj09PUwmJih3KGkpfHxudWxsIT09aS5wb3J0KSlyZXR1cm4gdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxpO2lmKG51bGw9PT0oSj1JKEwsIWIoaSkpKSlyZXR1cm4gbnVsbDtpZihpLmhvc3Q9SixMPVwiXCIsQz1zLlBhcnNlclN0YXRlLlBhdGhTdGFydCx2b2lkIDAhPT1vKXJldHVybiBpfWVsc2VcIltcIj09PVIuYygpJiYoQj0hMCksXCJdXCI9PT1SLmMoKSYmKEI9ITEpLEwrPVIuYygpO2Vsc2V7aWYoXCJcIj09PUwpcmV0dXJuIHYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksbnVsbDtpZihudWxsPT09KEo9SShMLCFiKGkpKSkpcmV0dXJuIG51bGw7aWYoaS5ob3N0PUosTD1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5Qb3J0LG89PT1zLlBhcnNlclN0YXRlLkhvc3RuYW1lKXJldHVybiBpfWJyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5Qb3J0OmlmKHUuY29kZVBvaW50LkFTQ0lJRGlnaXQudGVzdChSLmMoKSkpTCs9Ui5jKCk7ZWxzZXtpZighKFwiXCI9PT1SLmMoKXx8XCIvXCI9PT1SLmMoKXx8XCI/XCI9PT1SLmMoKXx8XCIjXCI9PT1SLmMoKXx8YihpKSYmXCJcXFxcXCI9PT1SLmMoKXx8bykpcmV0dXJuIHYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksbnVsbDtpZihcIlwiIT09TCYmXCJcIiE9PUwpe3ZhciBIPXBhcnNlSW50KEwsMTApO2lmKEg+TWF0aC5wb3coMiwxNiktMSlyZXR1cm4gdihcIkludmFsaWQgcG9ydCBudW1iZXIuXCIpLG51bGw7aS5wb3J0PUg9PT14KGkuc2NoZW1lKT9udWxsOkgsTD1cIlwifWlmKHZvaWQgMCE9PW8pcmV0dXJuIGk7Qz1zLlBhcnNlclN0YXRlLlBhdGhTdGFydCxSLnBvaW50ZXItLX1icmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuRmlsZTppZihpLnNjaGVtZT1cImZpbGVcIixcIi9cIj09PVIuYygpfHxcIlxcXFxcIj09PVIuYygpKVwiXFxcXFwiPT09Ui5jKCkmJnYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksQz1zLlBhcnNlclN0YXRlLkZpbGVTbGFzaDtlbHNlIGlmKG51bGwhPT10JiZcImZpbGVcIj09PXQuc2NoZW1lKXN3aXRjaChSLmMoKSl7Y2FzZVwiXCI6aS5ob3N0PXQuaG9zdCxpLnBhdGg9dS5saXN0LmNsb25lKHQucGF0aCksaS5xdWVyeT10LnF1ZXJ5O2JyZWFrO2Nhc2VcIj9cIjppLmhvc3Q9dC5ob3N0LGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSxpLnF1ZXJ5PVwiXCIsQz1zLlBhcnNlclN0YXRlLlF1ZXJ5O2JyZWFrO2Nhc2VcIiNcIjppLmhvc3Q9dC5ob3N0LGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSxpLnF1ZXJ5PXQucXVlcnksaS5mcmFnbWVudD1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5GcmFnbWVudDticmVhaztkZWZhdWx0OlAoUi5zdWJzdHJpbmcoKSk/dihcIlVuZXhwZWN0ZWQgd2luZG93cyBkcml2ZSBsZXR0ZXIgaW4gaW5wdXQgc3RyaW5nLlwiKTooaS5ob3N0PXQuaG9zdCxpLnBhdGg9dS5saXN0LmNsb25lKHQucGF0aCksTyhpKSksQz1zLlBhcnNlclN0YXRlLlBhdGgsUi5wb2ludGVyLS19ZWxzZSBDPXMuUGFyc2VyU3RhdGUuUGF0aCxSLnBvaW50ZXItLTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuRmlsZVNsYXNoOlwiL1wiPT09Ui5jKCl8fFwiXFxcXFwiPT09Ui5jKCk/KFwiXFxcXFwiPT09Ui5jKCkmJnYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksQz1zLlBhcnNlclN0YXRlLkZpbGVIb3N0KToobnVsbD09PXR8fFwiZmlsZVwiIT09dC5zY2hlbWV8fFAoUi5zdWJzdHJpbmcoKSl8fChGKHQucGF0aFswXSk/aS5wYXRoLnB1c2godC5wYXRoWzBdKTppLmhvc3Q9dC5ob3N0KSxDPXMuUGFyc2VyU3RhdGUuUGF0aCxSLnBvaW50ZXItLSk7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLkZpbGVIb3N0OmlmKFwiXCI9PT1SLmMoKXx8XCIvXCI9PT1SLmMoKXx8XCJcXFxcXCI9PT1SLmMoKXx8XCI/XCI9PT1SLmMoKXx8XCIjXCI9PT1SLmMoKSlpZihSLnBvaW50ZXItLSx2b2lkIDA9PT1vJiZrKEwpKXYoXCJVbmV4cGVjdGVkIHdpbmRvd3MgZHJpdmUgbGV0dGVyIGluIGlucHV0IHN0cmluZy5cIiksQz1zLlBhcnNlclN0YXRlLlBhdGg7ZWxzZSBpZihcIlwiPT09TCl7aWYoaS5ob3N0PVwiXCIsdm9pZCAwIT09bylyZXR1cm4gaTtDPXMuUGFyc2VyU3RhdGUuUGF0aFN0YXJ0fWVsc2V7dmFyIEo7aWYobnVsbD09PShKPUkoTCwhYihpKSkpKXJldHVybiBudWxsO2lmKFwibG9jYWxob3N0XCI9PT1KJiYoSj1cIlwiKSxpLmhvc3Q9Six2b2lkIDAhPT1vKXJldHVybiBpO0w9XCJcIixDPXMuUGFyc2VyU3RhdGUuUGF0aFN0YXJ0fWVsc2UgTCs9Ui5jKCk7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlBhdGhTdGFydDpiKGkpPyhcIlxcXFxcIj09PVIuYygpJiZ2KFwiSW52YWxpZCBpbnB1dCBzdHJpbmcuXCIpLEM9cy5QYXJzZXJTdGF0ZS5QYXRoLFwiL1wiIT09Ui5jKCkmJlwiXFxcXFwiIT09Ui5jKCkmJlIucG9pbnRlci0tKTp2b2lkIDA9PT1vJiZcIj9cIj09PVIuYygpPyhpLnF1ZXJ5PVwiXCIsQz1zLlBhcnNlclN0YXRlLlF1ZXJ5KTp2b2lkIDA9PT1vJiZcIiNcIj09PVIuYygpPyhpLmZyYWdtZW50PVwiXCIsQz1zLlBhcnNlclN0YXRlLkZyYWdtZW50KTpcIlwiIT09Ui5jKCkmJihDPXMuUGFyc2VyU3RhdGUuUGF0aCxcIi9cIiE9PVIuYygpJiZSLnBvaW50ZXItLSk7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlBhdGg6aWYoXCJcIj09PVIuYygpfHxcIi9cIj09PVIuYygpfHxiKGkpJiZcIlxcXFxcIj09PVIuYygpfHx2b2lkIDA9PT1vJiYoXCI/XCI9PT1SLmMoKXx8XCIjXCI9PT1SLmMoKSkpe2lmKGIoaSkmJlwiXFxcXFwiPT09Ui5jKCkmJnYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksVChMKSlPKGkpLFwiL1wiPT09Ui5jKCl8fGIoaSkmJlwiXFxcXFwiPT09Ui5jKCl8fGkucGF0aC5wdXNoKFwiXCIpO2Vsc2UgaWYoIU4oTCl8fFwiL1wiPT09Ui5jKCl8fGIoaSkmJlwiXFxcXFwiPT09Ui5jKCkpe2lmKCFOKEwpKXtpZihcImZpbGVcIj09PWkuc2NoZW1lJiYwPT09aS5wYXRoLmxlbmd0aCYmayhMKSl7bnVsbCE9PWkuaG9zdCYmXCJcIiE9PWkuaG9zdCYmKHYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksaS5ob3N0PVwiXCIpO3ZhciBZPUFycmF5LmZyb20oTCk7TD1ZLnNsaWNlKDAsMSkrXCI6XCIrWS5zbGljZSgyKX1pLnBhdGgucHVzaChMKX19ZWxzZSBpLnBhdGgucHVzaChcIlwiKTtpZihMPVwiXCIsXCJmaWxlXCI9PT1pLnNjaGVtZSYmKFwiXCI9PT1SLmMoKXx8XCI/XCI9PT1SLmMoKXx8XCIjXCI9PT1SLmMoKSkpZm9yKDtpLnBhdGgubGVuZ3RoPjEmJlwiXCI9PT1pLnBhdGhbMF07KXYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksaS5wYXRoLnNwbGljZSgwLDEpO1wiP1wiPT09Ui5jKCkmJihpLnF1ZXJ5PVwiXCIsQz1zLlBhcnNlclN0YXRlLlF1ZXJ5KSxcIiNcIj09PVIuYygpJiYoaS5mcmFnbWVudD1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5GcmFnbWVudCl9ZWxzZSBtLnRlc3QoUi5jKCkpfHxcIiVcIj09PVIuYygpfHx2KFwiQ2hhcmFjdGVyIGlzIG5vdCBhIFVSTCBjb2RlIHBvaW50IG9yIGEgcGVyY2VudCBlbmNvZGVkIGNoYXJhY3Rlci5cIiksXCIlXCIhPT1SLmMoKXx8L15bMC05YS1mQS1GXVswLTlhLWZBLUZdLy50ZXN0KFIucmVtYWluaW5nKCkpfHx2KFwiUGVyY2VudCBlbmNvZGVkIGNoYXJhY3RlciBtdXN0IGJlIGZvbGxvd2VkIGJ5IHR3byBoZXggZGlnaXRzLlwiKSxMKz1YKFIuYygpLGYpO2JyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5DYW5ub3RCZUFCYXNlVVJMUGF0aDpcIj9cIj09PVIuYygpPyhpLnF1ZXJ5PVwiXCIsQz1zLlBhcnNlclN0YXRlLlF1ZXJ5KTpcIiNcIj09PVIuYygpPyhpLmZyYWdtZW50PVwiXCIsQz1zLlBhcnNlclN0YXRlLkZyYWdtZW50KTooXCJcIj09PVIuYygpfHxtLnRlc3QoUi5jKCkpfHxcIiVcIj09PVIuYygpfHx2KFwiQ2hhcmFjdGVyIGlzIG5vdCBhIFVSTCBjb2RlIHBvaW50IG9yIGEgcGVyY2VudCBlbmNvZGVkIGNoYXJhY3Rlci5cIiksXCIlXCIhPT1SLmMoKXx8L15bMC05YS1mQS1GXVswLTlhLWZBLUZdLy50ZXN0KFIucmVtYWluaW5nKCkpfHx2KFwiUGVyY2VudCBlbmNvZGVkIGNoYXJhY3RlciBtdXN0IGJlIGZvbGxvd2VkIGJ5IHR3byBoZXggZGlnaXRzLlwiKSxcIlwiIT09Ui5jKCkmJihpLnBhdGhbMF0rPVgoUi5jKCksaCkpKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuUXVlcnk6aWYoXCJVVEYtOFwiPT09QXx8YihpKSYmXCJ3c1wiIT09aS5zY2hlbWUmJlwid3NzXCIhPT1pLnNjaGVtZXx8KEE9XCJVVEYtOFwiKSx2b2lkIDA9PT1vJiZcIiNcIj09PVIuYygpKWkuZnJhZ21lbnQ9XCJcIixDPXMuUGFyc2VyU3RhdGUuRnJhZ21lbnQ7ZWxzZSBpZihcIlwiIT09Ui5jKCkpe2lmKG0udGVzdChSLmMoKSl8fFwiJVwiPT09Ui5jKCl8fHYoXCJDaGFyYWN0ZXIgaXMgbm90IGEgVVJMIGNvZGUgcG9pbnQgb3IgYSBwZXJjZW50IGVuY29kZWQgY2hhcmFjdGVyLlwiKSxcIiVcIiE9PVIuYygpfHwvXlswLTlhLWZBLUZdWzAtOWEtZkEtRl0vLnRlc3QoUi5yZW1haW5pbmcoKSl8fHYoXCJQZXJjZW50IGVuY29kZWQgY2hhcmFjdGVyIG11c3QgYmUgZm9sbG93ZWQgYnkgdHdvIGhleCBkaWdpdHMuXCIpLFwiVVRGLThcIiE9PUEudG9VcHBlckNhc2UoKSl0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IFVURi04IGVuY29kaW5nIGlzIHN1cHBvcnRlZC5cIik7dmFyIFY9YS51dGY4RW5jb2RlKFIuYygpKTtpZihWLmxlbmd0aD49MyYmMzg9PT1WWzBdJiYzNT09PVZbMV0mJjU5PT09VltWLmxlbmd0aC0xXSlWPVYuc3ViYXJyYXkoMixWLmxlbmd0aC0xKSxpLnF1ZXJ5Kz1cIiUyNiUyM1wiK3UuYnl0ZVNlcXVlbmNlLmlzb21vcnBoaWNEZWNvZGUoVikrXCIlM0JcIjtlbHNlIHRyeXtmb3IodmFyIEs9KHk9dm9pZCAwLG4oVikpLCQ9Sy5uZXh0KCk7ISQuZG9uZTskPUsubmV4dCgpKXt2YXIgUT0kLnZhbHVlO1E8MzN8fFE+MTI2fHwzND09PVF8fDM1PT09UXx8NjA9PT1RfHw2Mj09PVF8fDM5PT09USYmYihpKT9pLnF1ZXJ5Kz16KFEpOmkucXVlcnkrPVN0cmluZy5mcm9tQ2hhckNvZGUoUSl9fWNhdGNoKGUpe3k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5eyQmJiEkLmRvbmUmJihfPUsucmV0dXJuKSYmXy5jYWxsKEspfWZpbmFsbHl7aWYoeSl0aHJvdyB5LmVycm9yfX19YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLkZyYWdtZW50OlwiXCI9PT1SLmMoKXx8KFwiXFwwXCI9PT1SLmMoKT92KFwiTlVMTCBjaGFyYWN0ZXIgaW4gaW5wdXQgc3RyaW5nLlwiKToobS50ZXN0KFIuYygpKXx8XCIlXCI9PT1SLmMoKXx8dihcIlVuZXhwZWN0ZWQgY2hhcmFjdGVyIGluIGZyYWdtZW50IHN0cmluZy5cIiksXCIlXCIhPT1SLmMoKXx8L15bQS1aYS16MC05XVtBLVphLXowLTldLy50ZXN0KFIucmVtYWluaW5nKCkpfHx2KFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgaW4gZnJhZ21lbnQgc3RyaW5nLlwiKSxpLmZyYWdtZW50Kz1YKFIuYygpLHApKSl9aWYoUi5lb2YpYnJlYWs7Ui5wb2ludGVyKyt9cmV0dXJuIGl9ZnVuY3Rpb24gTihlKXtyZXR1cm5cIi5cIj09PWV8fFwiJTJlXCI9PT1lLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gVChlKXt2YXIgdD1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCIuLlwiPT09dHx8XCIuJTJlXCI9PT10fHxcIiUyZS5cIj09PXR8fFwiJTJlJTJlXCI9PT10fWZ1bmN0aW9uIE8oZSl7dmFyIHQ9ZS5wYXRoOzAhPT10Lmxlbmd0aCYmKFwiZmlsZVwiPT09ZS5zY2hlbWUmJjE9PT10Lmxlbmd0aCYmRih0WzBdKXx8ZS5wYXRoLnNwbGljZShlLnBhdGgubGVuZ3RoLTEsMSkpfWZ1bmN0aW9uIEYoZSl7cmV0dXJuIGUubGVuZ3RoPj0yJiZ1LmNvZGVQb2ludC5BU0NJSUFscGhhLnRlc3QoZVswXSkmJlwiOlwiPT09ZVsxXX1mdW5jdGlvbiBrKGUpe3JldHVybiBlLmxlbmd0aD49MiYmdS5jb2RlUG9pbnQuQVNDSUlBbHBoYS50ZXN0KGVbMF0pJiYoXCI6XCI9PT1lWzFdfHxcInxcIj09PWVbMV0pfWZ1bmN0aW9uIFAoZSl7cmV0dXJuIGUubGVuZ3RoPj0yJiZrKGUpJiYoMj09PWUubGVuZ3RofHxcIi9cIj09PWVbMl18fFwiXFxcXFwiPT09ZVsyXXx8XCI/XCI9PT1lWzJdfHxcIiNcIj09PWVbMl0pfWZ1bmN0aW9uIEkoZSx0KXtpZih2b2lkIDA9PT10JiYodD0hMSksZS5zdGFydHNXaXRoKFwiW1wiKSlyZXR1cm4gZS5lbmRzV2l0aChcIl1cIik/QihlLnN1YnN0cmluZygxLGUubGVuZ3RoLTEpKToodihcIkV4cGVjdGVkICddJyBhZnRlciAnWycuXCIpLG51bGwpO2lmKHQpcmV0dXJuIGooZSk7dmFyIHI9SChhLnV0ZjhEZWNvZGUoRyhlKSkpO2lmKG51bGw9PT1yKXJldHVybiB2KFwiSW52YWxpZCBkb21haW4uXCIpLG51bGw7aWYoeS50ZXN0KHIpKXJldHVybiB2KFwiSW52YWxpZCBkb21haW4uXCIpLG51bGw7dmFyIG49TShyKTtyZXR1cm4gbnVsbD09PW58fGEuaXNOdW1iZXIobik/bjpyfWZ1bmN0aW9uIEwoZSx0KXt2b2lkIDA9PT10JiYodD17dmFsdWU6ITF9KTt2YXIgcj0xMDtyZXR1cm4gZS5zdGFydHNXaXRoKFwiMHhcIil8fGUuc3RhcnRzV2l0aChcIjBYXCIpPyh0LnZhbHVlPSEwLGU9ZS5zdWJzdHIoMikscj0xNik6ZS5sZW5ndGg+PTImJlwiMFwiPT09ZVswXSYmKHQudmFsdWU9ITAsZT1lLnN1YnN0cigxKSxyPTgpLFwiXCI9PT1lPzA6KDEwPT09cj8vXlswLTldKyQvOjE2PT09cj8vXlswLTlBLUZhLWZdKyQvOi9eWzAtN10rJC8pLnRlc3QoZSk/cGFyc2VJbnQoZSxyKTpudWxsfWZ1bmN0aW9uIE0oZSl7dmFyIHQscixpLG8sYT17dmFsdWU6ITF9LHM9ZS5zcGxpdChcIi5cIik7aWYoXCJcIj09PXNbcy5sZW5ndGgtMV0mJihhLnZhbHVlPSEwLHMubGVuZ3RoPjEmJnMucG9wKCkpLHMubGVuZ3RoPjQpcmV0dXJuIGU7dmFyIHU9W107dHJ5e2Zvcih2YXIgbD1uKHMpLGM9bC5uZXh0KCk7IWMuZG9uZTtjPWwubmV4dCgpKXt2YXIgaD1jLnZhbHVlO2lmKFwiXCI9PT1oKXJldHVybiBlO2lmKG51bGw9PT0oXz1MKGgsYSkpKXJldHVybiBlO3UucHVzaChfKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YyYmIWMuZG9uZSYmKHI9bC5yZXR1cm4pJiZyLmNhbGwobCl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fWEudmFsdWUmJnYoXCJJbnZhbGlkIElQIHY0IGFkZHJlc3MuXCIpO2Zvcih2YXIgcD0wO3A8dS5sZW5ndGg7cCsrKXtpZih1W3BdPjI1NSYmKHYoXCJJbnZhbGlkIElQIHY0IGFkZHJlc3MuXCIpLHA8dS5sZW5ndGgtMSkpcmV0dXJuIG51bGx9aWYodVt1Lmxlbmd0aC0xXT49TWF0aC5wb3coMjU2LDUtdS5sZW5ndGgpKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NCBhZGRyZXNzLlwiKSxudWxsO3ZhciBmPXVbdS5sZW5ndGgtMV07dS5wb3AoKTt2YXIgZD0wO3RyeXtmb3IodmFyIG09bih1KSx5PW0ubmV4dCgpOyF5LmRvbmU7eT1tLm5leHQoKSl7dmFyIF87Zis9KF89eS52YWx1ZSkqTWF0aC5wb3coMjU2LDMtZCksZCsrfX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXt5JiYheS5kb25lJiYobz1tLnJldHVybikmJm8uY2FsbChtKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGZ9ZnVuY3Rpb24gQihlKXt2YXIgdCxyPVswLDAsMCwwLDAsMCwwLDBdLG49MCxvPW51bGwscz1uZXcgYS5TdHJpbmdXYWxrZXIoZSk7aWYoXCI6XCI9PT1zLmMoKSl7aWYoIXMucmVtYWluaW5nKCkuc3RhcnRzV2l0aChcIjpcIikpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7cy5wb2ludGVyKz0yLG89bis9MX1mb3IoO1wiXCIhPT1zLmMoKTspe2lmKDg9PT1uKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsO2lmKFwiOlwiIT09cy5jKCkpe2Zvcih2YXIgbD0wLGM9MDtjPDQmJnUuY29kZVBvaW50LkFTQ0lJSGV4RGlnaXQudGVzdChzLmMoKSk7KWw9MTYqbCtwYXJzZUludChzLmMoKSwxNikscy5wb2ludGVyKyssYysrO2lmKFwiLlwiPT09cy5jKCkpe2lmKDA9PT1jKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsO2lmKHMucG9pbnRlci09YyxuPjYpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7Zm9yKHZhciBoPTA7XCJcIiE9PXMuYygpOyl7dmFyIHA9bnVsbDtpZihoPjApe2lmKCEoXCIuXCI9PT1zLmMoKSYmaDw0KSlyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtzLnBvaW50ZXIrK31pZighdS5jb2RlUG9pbnQuQVNDSUlEaWdpdC50ZXN0KHMuYygpKSlyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtmb3IoO3UuY29kZVBvaW50LkFTQ0lJRGlnaXQudGVzdChzLmMoKSk7KXt2YXIgZj1wYXJzZUludChzLmMoKSwxMCk7aWYobnVsbD09PXApcD1mO2Vsc2V7aWYoMD09PXApcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7cD0xMCpwK2Z9aWYocD4yNTUpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7cy5wb2ludGVyKyt9aWYobnVsbD09PXApcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7cltuXT0yNTYqcltuXStwLDIhPT0rK2gmJjQhPT1ofHxuKyt9aWYoNCE9PWgpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7YnJlYWt9aWYoXCI6XCI9PT1zLmMoKSl7aWYocy5wb2ludGVyKyssXCJcIj09PXMuYygpKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsfWVsc2UgaWYoXCJcIiE9PXMuYygpKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsO3Jbbl09bCxuKyt9ZWxzZXtpZihudWxsIT09bylyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtzLnBvaW50ZXIrKyxvPSsrbn19aWYobnVsbCE9PW8pe3ZhciBkPW4tbztmb3Iobj03OzAhPT1uJiZkPjA7KXQ9aShbcltvK2QtMV0scltuXV0sMikscltuXT10WzBdLHJbbytkLTFdPXRbMV0sbi0tLGQtLX1lbHNlIGlmKG51bGw9PT1vJiY4IT09bilyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtyZXR1cm4gcn1mdW5jdGlvbiBqKGUpe3ZhciB0LHI7aWYoL1tcXHgwMFxcdFxcZlxcciAjLzo/QFxcW1xcXFxcXF1dLy50ZXN0KGUpKXJldHVybiB2KFwiSW52YWxpZCBob3N0IHN0cmluZy5cIiksbnVsbDt2YXIgaT1cIlwiO3RyeXtmb3IodmFyIG89bihlKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7aSs9WChhLnZhbHVlLGgpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIGl9ZnVuY3Rpb24gUihlKXtyZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGUpe3JldHVyblwiJVwiKyhcIjAwXCIrZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc2xpY2UoLTIpfWZ1bmN0aW9uIFUoZSl7Zm9yKHZhciB0PWZ1bmN0aW9uKGUpe3JldHVybiBlPj00OCYmZTw9NTd8fGU+PTY1JiZlPD03MHx8ZT49OTcmJmU8PTEwMn0scj1uZXcgVWludDhBcnJheShlLmxlbmd0aCksbj0wLGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIG89ZVtpXTtpZigzNyE9PW8pcltuXT1vLG4rKztlbHNlIGlmKDM3PT09byYmaT49ZS5sZW5ndGgtMilyW25dPW8sbisrO2Vsc2UgaWYoMzchPT1vfHx0KGVbaSsxXSkmJnQoZVtpKzJdKSl7dmFyIHM9cGFyc2VJbnQoYS51dGY4RGVjb2RlKFVpbnQ4QXJyYXkub2YoZVtpKzFdLGVbaSsyXSkpLDE2KTtyW25dPXMsbisrLGkrPTJ9ZWxzZSByW25dPW8sbisrfXJldHVybiByLnN1YmFycmF5KDAsbil9ZnVuY3Rpb24gRyhlKXtyZXR1cm4gVShhLnV0ZjhFbmNvZGUoZSkpfWZ1bmN0aW9uIFgoZSx0KXt2YXIgcixpO2lmKCF0LnRlc3QoZSkpcmV0dXJuIGU7dmFyIG89YS51dGY4RW5jb2RlKGUpLHM9XCJcIjt0cnl7Zm9yKHZhciB1PW4obyksbD11Lm5leHQoKTshbC5kb25lO2w9dS5uZXh0KCkpe3MrPXoobC52YWx1ZSl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJihpPXUucmV0dXJuKSYmaS5jYWxsKHUpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4gc31mdW5jdGlvbiBxKGUpe3ZhciB0LHIsaSxvLHM9W10sdT1bXTt0cnl7Zm9yKHZhciBsPW4oZSksYz1sLm5leHQoKTshYy5kb25lO2M9bC5uZXh0KCkpe3ZhciBoPWMudmFsdWU7Mzg9PT1oPyhzLnB1c2goVWludDhBcnJheS5mcm9tKHUpKSx1PVtdKTp1LnB1c2goaCl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2MmJiFjLmRvbmUmJihyPWwucmV0dXJuKSYmci5jYWxsKGwpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX0wIT09dS5sZW5ndGgmJnMucHVzaChVaW50OEFycmF5LmZyb20odSkpO3ZhciBwPVtdO3RyeXtmb3IodmFyIGY9bihzKSxkPWYubmV4dCgpOyFkLmRvbmU7ZD1mLm5leHQoKSl7dmFyIG09ZC52YWx1ZTtpZigwIT09bS5sZW5ndGgpe2Zvcih2YXIgeT1tLmluZGV4T2YoNjEpLHY9LTEhPT15P20uc2xpY2UoMCx5KTptLF89LTEhPT15P20uc2xpY2UoeSsxKTpuZXcgVWludDhBcnJheSxnPTA7Zzx2Lmxlbmd0aDtnKyspNDM9PT12W2ddJiYodltnXT0zMik7Zm9yKGc9MDtnPF8ubGVuZ3RoO2crKyk0Mz09PV9bZ10mJihfW2ddPTMyKTt2YXIgYj1hLnV0ZjhEZWNvZGUodikseD1hLnV0ZjhEZWNvZGUoXyk7cC5wdXNoKFtiLHhdKX19fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2QmJiFkLmRvbmUmJihvPWYucmV0dXJuKSYmby5jYWxsKGYpfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gcH1mdW5jdGlvbiBXKGUpe3ZhciB0LHIsaT1cIlwiO3RyeXtmb3IodmFyIG89bihlKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7dmFyIHM9YS52YWx1ZTtpKz0zMj09PXM/XCIrXCI6NDI9PT1zfHw0NT09PXN8fDQ2PT09c3x8cz49NDgmJnM8PTU3fHxzPj02NSYmczw9OTB8fDk1PT09c3x8cz49OTcmJnM8PTEyMj9TdHJpbmcuZnJvbUNvZGVQb2ludChzKTp6KHMpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIGl9ZnVuY3Rpb24gSChlLHQpe3ZvaWQgMD09PXQmJih0PSExKTt2YXIgcj1sLmRvbWFpblRvQVNDSUkoZSk7cmV0dXJuXCJcIj09PXI/KHYoXCJJbnZhbGlkIGRvbWFpbiBuYW1lLlwiKSxudWxsKTpyfXQuc2V0VmFsaWRhdGlvbkVycm9yQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7bz1lfSx0Lm5ld1VSTD1fLHQuaXNTcGVjaWFsU2NoZW1lPWcsdC5pc1NwZWNpYWw9Yix0LmRlZmF1bHRQb3J0PXgsdC5pbmNsdWRlc0NyZWRlbnRpYWxzPXcsdC5jYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZS5ob3N0fHxcIlwiPT09ZS5ob3N0fHxlLl9jYW5ub3RCZUFCYXNlVVJMRmxhZ3x8XCJmaWxlXCI9PT1lLnNjaGVtZX0sdC51cmxTZXJpYWxpemVyPUUsdC5ob3N0U2VyaWFsaXplcj1ELHQuaVB2NFNlcmlhbGl6ZXI9Uyx0LmlQdjZTZXJpYWxpemVyPUMsdC51cmxQYXJzZXI9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPUEoZSx0LHIpO3JldHVybiBudWxsPT09bj9udWxsOihcImJsb2JcIiE9PW4uc2NoZW1lfHwobi5fYmxvYlVSTEVudHJ5PW51bGwpLG4pfSx0LmJhc2ljVVJMUGFyc2VyPUEsdC5zZXRUaGVVc2VybmFtZT1mdW5jdGlvbihlLHQpe3ZhciByLGksbz1cIlwiO3RyeXtmb3IodmFyIGE9bih0KSxzPWEubmV4dCgpOyFzLmRvbmU7cz1hLm5leHQoKSl7bys9WChzLnZhbHVlLGQpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYoaT1hLnJldHVybikmJmkuY2FsbChhKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19ZS51c2VybmFtZT1vfSx0LnNldFRoZVBhc3N3b3JkPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaSxvPVwiXCI7dHJ5e2Zvcih2YXIgYT1uKHQpLHM9YS5uZXh0KCk7IXMuZG9uZTtzPWEubmV4dCgpKXtvKz1YKHMudmFsdWUsZCl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3MmJiFzLmRvbmUmJihpPWEucmV0dXJuKSYmaS5jYWxsKGEpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1lLnBhc3N3b3JkPW99LHQuaXNTaW5nbGVEb3RQYXRoU2VnbWVudD1OLHQuaXNEb3VibGVEb3RQYXRoU2VnbWVudD1ULHQuc2hvcnRlbj1PLHQuaXNOb3JtYWxpemVkV2luZG93c0RyaXZlTGV0dGVyPUYsdC5pc1dpbmRvd3NEcml2ZUxldHRlcj1rLHQuc3RhcnRzV2l0aEFXaW5kb3dzRHJpdmVMZXR0ZXI9UCx0Lmhvc3RQYXJzZXI9SSx0LmlQdjROdW1iZXJQYXJzZXI9TCx0LmlQdjRQYXJzZXI9TSx0LmlQdjZQYXJzZXI9Qix0Lm9wYXF1ZUhvc3RQYXJzZXI9aix0LnJlc29sdmVBQmxvYlVSTD1SLHQucGVyY2VudEVuY29kZT16LHQucGVyY2VudERlY29kZT1VLHQuc3RyaW5nUGVyY2VudERlY29kZT1HLHQudXRmOFBlcmNlbnRFbmNvZGU9WCx0Lmhvc3RFcXVhbHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXR9LHQudXJsRXF1YWxzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9ITEpLEUoZSxyKT09PUUodCxyKX0sdC51cmxFbmNvZGVkU3RyaW5nUGFyc2VyPWZ1bmN0aW9uKGUpe3JldHVybiBxKGEudXRmOEVuY29kZShlKSl9LHQudXJsRW5jb2RlZFBhcnNlcj1xLHQudXJsRW5jb2RlZEJ5dGVTZXJpYWxpemVyPVcsdC51cmxFbmNvZGVkU2VyaWFsaXplcj1mdW5jdGlvbihlLHQpe3ZhciByLGk7aWYoXCJVVEYtOFwiIT09KHZvaWQgMD09PXR8fFwicmVwbGFjZW1lbnRcIj09PXR8fFwiVVRGLTE2QkVcIj09PXR8fFwiVVRGLTE2TEVcIj09PXQ/XCJVVEYtOFwiOnQpLnRvVXBwZXJDYXNlKCkpdGhyb3cgbmV3IEVycm9yKFwiT25seSBVVEYtOCBlbmNvZGluZyBpcyBzdXBwb3J0ZWQuXCIpO3ZhciBvPVwiXCI7dHJ5e2Zvcih2YXIgcz1uKGUpLHU9cy5uZXh0KCk7IXUuZG9uZTt1PXMubmV4dCgpKXt2YXIgbD11LnZhbHVlLGM9VyhhLnV0ZjhFbmNvZGUobFswXSkpLGg9bFsxXTtoPVcoYS51dGY4RW5jb2RlKGgpKSxcIlwiIT09byYmKG8rPVwiJlwiKSxvKz1jK1wiPVwiK2h9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihpPXMucmV0dXJuKSYmaS5jYWxsKHMpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4gb30sdC5vcmlnaW49ZnVuY3Rpb24gZSh0KXtzd2l0Y2godC5zY2hlbWUpe2Nhc2VcImJsb2JcIjp0Ll9ibG9iVVJMRW50cnk7dmFyIHI9QSh0LnBhdGhbMF0pO3JldHVybiBudWxsPT09cj9zLk9wYXF1ZU9yaWdpbjplKHIpO2Nhc2VcImZ0cFwiOmNhc2VcImh0dHBcIjpjYXNlXCJodHRwc1wiOmNhc2VcIndzXCI6Y2FzZVwid3NzXCI6cmV0dXJuW3Quc2NoZW1lLG51bGw9PT10Lmhvc3Q/XCJcIjp0Lmhvc3QsdC5wb3J0LG51bGxdO2Nhc2VcImZpbGVcIjpkZWZhdWx0OnJldHVybiBzLk9wYXF1ZU9yaWdpbn19LHQuZG9tYWluVG9BU0NJST1ILHQuZG9tYWluVG9Vbmljb2RlPWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciByPWwuZG9tYWluVG9Vbmljb2RlKGUpO3JldHVyblwiXCI9PT1yJiZ2KFwiSW52YWxpZCBkb21haW4gbmFtZS5cIikscn0sdC5hc2NpaVNlcmlhbGl6YXRpb25PZkFuT3JpZ2luPWZ1bmN0aW9uKGUpe2lmKFwiXCI9PT1lWzBdJiZcIlwiPT09ZVsxXSYmbnVsbD09PWVbMl0mJm51bGw9PT1lWzNdKXJldHVyblwibnVsbFwiO3ZhciB0PWVbMF0rXCI6Ly9cIitEKGVbMV0pO3JldHVybiBudWxsIT09ZVsyXSYmKHQrPVwiOlwiK2VbMl0udG9TdHJpbmcoKSksdH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDApLGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5fc2lnbmFsPW4uY3JlYXRlX2Fib3J0U2lnbmFsKCl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNpZ25hbFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2lnbmFsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmFib3J0PWZ1bmN0aW9uKCl7bi5hYm9ydF9zaWduYWxBYm9ydCh0aGlzLl9zaWduYWwpfSxlfSgpO3QuQWJvcnRDb250cm9sbGVySW1wbD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cig3MCksYT1yKDApLHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3ZhciB0PWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gdC5fYWJvcnRlZEZsYWc9ITEsdC5fYWJvcnRBbGdvcml0aG1zPW5ldyBTZXQsdH1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImFib3J0ZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Fib3J0ZWRGbGFnfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm9uYWJvcnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEuZXZlbnRfZ2V0dGVyRXZlbnRIYW5kbGVySURMQXR0cmlidXRlKHRoaXMsXCJvbmFib3J0XCIpfSxzZXQ6ZnVuY3Rpb24oZSl7YS5ldmVudF9zZXR0ZXJFdmVudEhhbmRsZXJJRExBdHRyaWJ1dGUodGhpcyxcIm9uYWJvcnRcIixlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0Ll9jcmVhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHR9LHR9KG8uRXZlbnRUYXJnZXRJbXBsKTt0LkFib3J0U2lnbmFsSW1wbD1zfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigyKSxhPXIoMzQpLHM9cigxMiksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscixuKXt2YXIgaT1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGkuX25hbWU9XCJcIixpLl9wdWJsaWNJZD1cIlwiLGkuX3N5c3RlbUlkPVwiXCIsaS5fbmFtZT10LGkuX3B1YmxpY0lkPXIsaS5fc3lzdGVtSWQ9bixpfXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwdWJsaWNJZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHVibGljSWR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwic3lzdGVtSWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N5c3RlbUlkfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmJlZm9yZT1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmFmdGVyPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucmVwbGFjZVdpdGg9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IENoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIsbixpKXt2b2lkIDA9PT1uJiYobj1cIlwiKSx2b2lkIDA9PT1pJiYoaT1cIlwiKTt2YXIgbz1uZXcgdChyLG4saSk7cmV0dXJuIG8uX25vZGVEb2N1bWVudD1lLG99LHR9KGEuTm9kZUltcGwpO3QuRG9jdW1lbnRUeXBlSW1wbD11LHMuaWRsX2RlZmluZUNvbnN0KHUucHJvdG90eXBlLFwiX25vZGVUeXBlXCIsby5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigxMDApLGE9cigxKSxzPXIoMCksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscil7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLl9ob3N0PXQsbi5fbW9kZT1yLG59cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJtb2RlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9tb2RlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImhvc3RcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2hvc3R9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuX2dldFRoZVBhcmVudD1mdW5jdGlvbihlKXtyZXR1cm4gZS5fY29tcG9zZWRGbGFnfHxhLmlzRW1wdHkoZS5fcGF0aCl8fHMudHJlZV9yb290Tm9kZShlLl9wYXRoWzBdLmludm9jYXRpb25UYXJnZXQpIT09dGhpcz90aGlzLl9ob3N0Om51bGx9LHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIpe3JldHVybiBuZXcgdChyLFwiY2xvc2VkXCIpfSx0fShvLkRvY3VtZW50RnJhZ21lbnRJbXBsKTt0LlNoYWRvd1Jvb3RJbXBsPXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDIpLGE9cigzNCkscz1yKDApLHU9cigxMiksbD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3ZhciByPWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gci5fbmFtZXNwYWNlPW51bGwsci5fbmFtZXNwYWNlUHJlZml4PW51bGwsci5fZWxlbWVudD1udWxsLHIuX3ZhbHVlPVwiXCIsci5fbG9jYWxOYW1lPXQscn1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm93bmVyRWxlbWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZWxlbWVudH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJuYW1lc3BhY2VVUklcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25hbWVzcGFjZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwcmVmaXhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25hbWVzcGFjZVByZWZpeH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJsb2NhbE5hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xvY2FsTmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJuYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9xdWFsaWZpZWROYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInZhbHVlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl92YWx1ZX0sc2V0OmZ1bmN0aW9uKGUpe3MuYXR0cl9zZXRBbkV4aXN0aW5nQXR0cmlidXRlVmFsdWUodGhpcyxlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJfcXVhbGlmaWVkTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuX25hbWVzcGFjZVByZWZpeD90aGlzLl9uYW1lc3BhY2VQcmVmaXgrXCI6XCIrdGhpcy5fbG9jYWxOYW1lOnRoaXMuX2xvY2FsTmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyKXt2YXIgbj1uZXcgdChyKTtyZXR1cm4gbi5fbm9kZURvY3VtZW50PWUsbn0sdH0oYS5Ob2RlSW1wbCk7dC5BdHRySW1wbD1sLHUuaWRsX2RlZmluZUNvbnN0KGwucHJvdG90eXBlLFwiX25vZGVUeXBlXCIsby5Ob2RlVHlwZS5BdHRyaWJ1dGUpLHUuaWRsX2RlZmluZUNvbnN0KGwucHJvdG90eXBlLFwic3BlY2lmaWVkXCIsITApfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigxMDEpLGE9cigyKSxzPXIoMTIpLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gZS5jYWxsKHRoaXMsdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyKXt2b2lkIDA9PT1yJiYocj1cIlwiKTt2YXIgbj1uZXcgdChyKTtyZXR1cm4gbi5fbm9kZURvY3VtZW50PWUsbn0sdH0oby5UZXh0SW1wbCk7dC5DREFUQVNlY3Rpb25JbXBsPXUscy5pZGxfZGVmaW5lQ29uc3QodS5wcm90b3R5cGUsXCJfbm9kZVR5cGVcIixhLk5vZGVUeXBlLkNEYXRhKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMiksYT1yKDcxKSxzPXIoMTIpLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyKXt2b2lkIDA9PT1yJiYocj1cIlwiKTt2YXIgbj1uZXcgdChyKTtyZXR1cm4gbi5fbm9kZURvY3VtZW50PWUsbn0sdH0oYS5DaGFyYWN0ZXJEYXRhSW1wbCk7dC5Db21tZW50SW1wbD11LHMuaWRsX2RlZmluZUNvbnN0KHUucHJvdG90eXBlLFwiX25vZGVUeXBlXCIsby5Ob2RlVHlwZS5Db21tZW50KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMiksYT1yKDcxKSxzPXIoMTIpLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIpe3ZhciBuPWUuY2FsbCh0aGlzLHIpfHx0aGlzO3JldHVybiBuLl90YXJnZXQ9dCxufXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwidGFyZ2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90YXJnZXR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5fY3JlYXRlPWZ1bmN0aW9uKGUscixuKXt2YXIgaT1uZXcgdChyLG4pO3JldHVybiBpLl9ub2RlRG9jdW1lbnQ9ZSxpfSx0fShhLkNoYXJhY3RlckRhdGFJbXBsKTt0LlByb2Nlc3NpbmdJbnN0cnVjdGlvbkltcGw9dSxzLmlkbF9kZWZpbmVDb25zdCh1LnByb3RvdHlwZSxcIl9ub2RlVHlwZVwiLG8uTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNyksaT1yKDApLG89cigzKSxhPXIoMSkscz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtyZXR1cm4gdGhpcy5fbGl2ZT0hMCx0aGlzLl9yb290PWUsdGhpcy5fZmlsdGVyPXQsbmV3IFByb3h5KHRoaXMsdGhpcyl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcyx0PTAscj1pLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZSh0aGlzLl9yb290LCExLCExLChmdW5jdGlvbih0KXtyZXR1cm4gby5HdWFyZC5pc0VsZW1lbnROb2RlKHQpJiZlLl9maWx0ZXIodCl9KSk7bnVsbCE9PXI7KXQrKyxyPWkudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodGhpcy5fcm9vdCxyLCExLCExLChmdW5jdGlvbih0KXtyZXR1cm4gby5HdWFyZC5pc0VsZW1lbnROb2RlKHQpJiZlLl9maWx0ZXIodCl9KSk7cmV0dXJuIHR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuaXRlbT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcyxyPTAsbj1pLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZSh0aGlzLl9yb290LCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gby5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiZ0Ll9maWx0ZXIoZSl9KSk7bnVsbCE9PW47KXtpZihyPT09ZSlyZXR1cm4gbjtyKyssbj1pLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKHRoaXMuX3Jvb3QsbiwhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIG8uR3VhcmQuaXNFbGVtZW50Tm9kZShlKSYmdC5fZmlsdGVyKGUpfSkpfXJldHVybiBudWxsfSxlLnByb3RvdHlwZS5uYW1lZEl0ZW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZihcIlwiPT09ZSlyZXR1cm4gbnVsbDtmb3IodmFyIHI9aS50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUodGhpcy5fcm9vdCwhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIG8uR3VhcmQuaXNFbGVtZW50Tm9kZShlKSYmdC5fZmlsdGVyKGUpfSkpO251bGwhPXI7KXtpZihyLl91bmlxdWVJZGVudGlmaWVyPT09ZSlyZXR1cm4gcjtpZihyLl9uYW1lc3BhY2U9PT1uLm5hbWVzcGFjZS5IVE1MKWZvcih2YXIgYT0wO2E8ci5fYXR0cmlidXRlTGlzdC5sZW5ndGg7YSsrKXt2YXIgcz1yLl9hdHRyaWJ1dGVMaXN0W2FdO2lmKFwibmFtZVwiPT09cy5fbG9jYWxOYW1lJiZudWxsPT09cy5fbmFtZXNwYWNlJiZudWxsPT09cy5fbmFtZXNwYWNlUHJlZml4JiZzLl92YWx1ZT09PWUpcmV0dXJuIHJ9cj1pLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKHRoaXMuX3Jvb3QsciwhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIG8uR3VhcmQuaXNFbGVtZW50Tm9kZShlKSYmdC5fZmlsdGVyKGUpfSkpfXJldHVybiBudWxsfSxlLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fcm9vdCx0PXRoaXMuX2ZpbHRlcixyPWkudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKGUsITEsITEsKGZ1bmN0aW9uKGUpe3JldHVybiBvLkd1YXJkLmlzRWxlbWVudE5vZGUoZSkmJnQoZSl9KSk7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtpZihudWxsPT09cilyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfTt2YXIgbj17ZG9uZTohMSx2YWx1ZTpyfTtyZXR1cm4gcj1pLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKGUsciwhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIG8uR3VhcmQuaXNFbGVtZW50Tm9kZShlKSYmdChlKX0pKSxufX19LGUucHJvdG90eXBlLmdldD1mdW5jdGlvbih0LHIsbil7aWYoIWEuaXNTdHJpbmcocil8fC0xIT09ZS5yZXNlcnZlZE5hbWVzLmluZGV4T2YocikpcmV0dXJuIFJlZmxlY3QuZ2V0KHQscixuKTt2YXIgaT1OdW1iZXIocik7cmV0dXJuIGlzTmFOKGkpP3QubmFtZWRJdGVtKHIpfHx2b2lkIDA6dC5pdGVtKGkpfHx2b2lkIDB9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LHIsbixvKXtpZighYS5pc1N0cmluZyhyKXx8LTEhPT1lLnJlc2VydmVkTmFtZXMuaW5kZXhPZihyKSlyZXR1cm4gUmVmbGVjdC5zZXQodCxyLG4sbyk7dmFyIHM9TnVtYmVyKHIpLHU9aXNOYU4ocyk/dC5uYW1lZEl0ZW0ocil8fHZvaWQgMDp0Lml0ZW0ocyl8fHZvaWQgMDtyZXR1cm4hKCF1fHwhdS5fcGFyZW50KSYmKGkubXV0YXRpb25fcmVwbGFjZSh1LG4sdS5fcGFyZW50KSwhMCl9LGUuX2NyZWF0ZT1mdW5jdGlvbih0LHIpe3JldHVybiB2b2lkIDA9PT1yJiYocj1mdW5jdGlvbigpe3JldHVybiEwfSksbmV3IGUodCxyKX0sZS5yZXNlcnZlZE5hbWVzPVtcIl9yb290XCIsXCJfbGl2ZVwiLFwiX2ZpbHRlclwiLFwibGVuZ3RoXCIsXCJpdGVtXCIsXCJuYW1lZEl0ZW1cIixcImdldFwiLFwic2V0XCJdLGV9KCk7dC5IVE1MQ29sbGVjdGlvbkltcGw9c30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoNiksbz1yKDEpLGE9cigwKSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gdGhpcy5fbGl2ZT0hMCx0aGlzLl9maWx0ZXI9bnVsbCx0aGlzLl9sZW5ndGg9MCx0aGlzLl9yb290PWUsbmV3IFByb3h5KHRoaXMsdGhpcyl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcm9vdC5fY2hpbGRyZW4uc2l6ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5pdGVtPWZ1bmN0aW9uKGUpe2lmKGU8MHx8ZT50aGlzLmxlbmd0aC0xKXJldHVybiBudWxsO2lmKGU8dGhpcy5sZW5ndGgvMil7Zm9yKHZhciB0PTAscj10aGlzLl9yb290Ll9maXJzdENoaWxkO251bGwhPT1yJiZ0IT09ZTspcj1yLl9uZXh0U2libGluZyx0Kys7cmV0dXJuIHJ9Zm9yKHQ9dGhpcy5sZW5ndGgtMSxyPXRoaXMuX3Jvb3QuX2xhc3RDaGlsZDtudWxsIT09ciYmdCE9PWU7KXI9ci5fcHJldmlvdXNTaWJsaW5nLHQtLTtyZXR1cm4gcn0sZS5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3ZhciBlO3JldHVybihlPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIGU9MDtyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlPT09dGhpcy5sZW5ndGg/e2RvbmU6ITAsdmFsdWU6bnVsbH06e2RvbmU6ITEsdmFsdWU6ZSsrfX0uYmluZCh0aGlzKX19LmJpbmQodGhpcyksZX0sZS5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuKGU9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgZT10aGlzW1N5bWJvbC5pdGVyYXRvcl0oKTtyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlLm5leHQoKX19fS5iaW5kKHRoaXMpLGV9LGUucHJvdG90eXBlLmVudHJpZXM9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4oZT17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3ZhciBlPXRoaXNbU3ltYm9sLml0ZXJhdG9yXSgpLHQ9MDtyZXR1cm57bmV4dDpmdW5jdGlvbigpe3ZhciByPWUubmV4dCgpO3JldHVybiByLmRvbmU/e2RvbmU6ITAsdmFsdWU6bnVsbH06e2RvbmU6ITEsdmFsdWU6W3QrKyxyLnZhbHVlXX19fX0uYmluZCh0aGlzKSxlfSxlLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Jvb3QuX2NoaWxkcmVuW1N5bWJvbC5pdGVyYXRvcl0oKX0sZS5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihlLHQpe3ZhciByLG87dm9pZCAwPT09dCYmKHQ9aS5kb20ud2luZG93KTt2YXIgYT0wO3RyeXtmb3IodmFyIHM9bih0aGlzLl9yb290Ll9jaGlsZHJlbiksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBsPXUudmFsdWU7ZS5jYWxsKHQsbCxhKyssdGhpcyl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihvPXMucmV0dXJuKSYmby5jYWxsKHMpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX19LGUucHJvdG90eXBlLmdldD1mdW5jdGlvbihlLHQscil7aWYoIW8uaXNTdHJpbmcodCkpcmV0dXJuIFJlZmxlY3QuZ2V0KGUsdCxyKTt2YXIgbj1OdW1iZXIodCk7cmV0dXJuIGlzTmFOKG4pP1JlZmxlY3QuZ2V0KGUsdCxyKTplLml0ZW0obil8fHZvaWQgMH0sZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFvLmlzU3RyaW5nKHQpKXJldHVybiBSZWZsZWN0LnNldChlLHQscixuKTt2YXIgaT1OdW1iZXIodCk7aWYoaXNOYU4oaSkpcmV0dXJuIFJlZmxlY3Quc2V0KGUsdCxyLG4pO3ZhciBzPWUuaXRlbShpKXx8dm9pZCAwO3JldHVybiEhcyYmKCEhcy5fcGFyZW50JiYoYS5tdXRhdGlvbl9yZXBsYWNlKHMscixzLl9wYXJlbnQpLCEwKSl9LGUuX2NyZWF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGUodCl9LGV9KCk7dC5Ob2RlTGlzdEltcGw9c30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoNiksbz1yKDEpLGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVybiB0aGlzLl9saXZlPSExLHRoaXMuX2l0ZW1zPVtdLHRoaXMuX2xlbmd0aD0wLHRoaXMuX3Jvb3Q9ZSx0aGlzLl9pdGVtcz1bXSx0aGlzLl9maWx0ZXI9ZnVuY3Rpb24oZSl7cmV0dXJuITB9LG5ldyBQcm94eSh0aGlzLHRoaXMpfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJsZW5ndGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2l0ZW1zLmxlbmd0aH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5pdGVtPWZ1bmN0aW9uKGUpe3JldHVybiBlPDB8fGU+dGhpcy5sZW5ndGgtMT9udWxsOnRoaXMuX2l0ZW1zW2VdfSxlLnByb3RvdHlwZS5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuKGU9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgZT0wO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGU9PT10aGlzLmxlbmd0aD97ZG9uZTohMCx2YWx1ZTpudWxsfTp7ZG9uZTohMSx2YWx1ZTplKyt9fS5iaW5kKHRoaXMpfX0uYmluZCh0aGlzKSxlfSxlLnByb3RvdHlwZS52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4oZT17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3ZhciBlPXRoaXNbU3ltYm9sLml0ZXJhdG9yXSgpO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUubmV4dCgpfX19LmJpbmQodGhpcyksZX0sZS5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3ZhciBlO3JldHVybihlPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIGU9dGhpc1tTeW1ib2wuaXRlcmF0b3JdKCksdD0wO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7dmFyIHI9ZS5uZXh0KCk7cmV0dXJuIHIuZG9uZT97ZG9uZTohMCx2YWx1ZTpudWxsfTp7ZG9uZTohMSx2YWx1ZTpbdCsrLHIudmFsdWVdfX19fS5iaW5kKHRoaXMpLGV9LGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9pdGVtc1tTeW1ib2wuaXRlcmF0b3JdKCk7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5uZXh0KCl9fX0sZS5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihlLHQpe3ZhciByLG87dm9pZCAwPT09dCYmKHQ9aS5kb20ud2luZG93KTt2YXIgYT0wO3RyeXtmb3IodmFyIHM9bih0aGlzLl9pdGVtcyksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBsPXUudmFsdWU7ZS5jYWxsKHQsbCxhKyssdGhpcyl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihvPXMucmV0dXJuKSYmby5jYWxsKHMpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX19LGUucHJvdG90eXBlLmdldD1mdW5jdGlvbihlLHQscil7aWYoIW8uaXNTdHJpbmcodCkpcmV0dXJuIFJlZmxlY3QuZ2V0KGUsdCxyKTt2YXIgbj1OdW1iZXIodCk7cmV0dXJuIGlzTmFOKG4pP1JlZmxlY3QuZ2V0KGUsdCxyKTplLl9pdGVtc1tuXXx8dm9pZCAwfSxlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0LHIsbil7aWYoIW8uaXNTdHJpbmcodCkpcmV0dXJuIFJlZmxlY3Quc2V0KGUsdCxyLG4pO3ZhciBpPU51bWJlcih0KTtyZXR1cm4gaXNOYU4oaSk/UmVmbGVjdC5zZXQoZSx0LHIsbik6aT49MCYmaTxlLl9pdGVtcy5sZW5ndGgmJihlLl9pdGVtc1tpXT1yLCEwKX0sZS5fY3JlYXRlPWZ1bmN0aW9uKHQscil7dmFyIG49bmV3IGUodCk7cmV0dXJuIG4uX2l0ZW1zPXIsbn0sZX0oKTt0Lk5vZGVMaXN0U3RhdGljSW1wbD1hfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cig5KSxhPXIoMCkscz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe3ZhciBuPWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gbi5fZWxlbWVudD1yLE9iamVjdC5zZXRQcm90b3R5cGVPZihuLHQucHJvdG90eXBlKSxufXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuX2FzQXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sdC5wcm90b3R5cGUuaXRlbT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpc1tlXXx8bnVsbH0sdC5wcm90b3R5cGUuZ2V0TmFtZWRJdGVtPWZ1bmN0aW9uKGUpe3JldHVybiBhLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVCeU5hbWUoZSx0aGlzLl9lbGVtZW50KX0sdC5wcm90b3R5cGUuZ2V0TmFtZWRJdGVtTlM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYS5lbGVtZW50X2dldEFuQXR0cmlidXRlQnlOYW1lc3BhY2VBbmRMb2NhbE5hbWUoZXx8XCJcIix0LHRoaXMuX2VsZW1lbnQpfSx0LnByb3RvdHlwZS5zZXROYW1lZEl0ZW09ZnVuY3Rpb24oZSl7cmV0dXJuIGEuZWxlbWVudF9zZXRBbkF0dHJpYnV0ZShlLHRoaXMuX2VsZW1lbnQpfSx0LnByb3RvdHlwZS5zZXROYW1lZEl0ZW1OUz1mdW5jdGlvbihlKXtyZXR1cm4gYS5lbGVtZW50X3NldEFuQXR0cmlidXRlKGUsdGhpcy5fZWxlbWVudCl9LHQucHJvdG90eXBlLnJlbW92ZU5hbWVkSXRlbT1mdW5jdGlvbihlKXt2YXIgdD1hLmVsZW1lbnRfcmVtb3ZlQW5BdHRyaWJ1dGVCeU5hbWUoZSx0aGlzLl9lbGVtZW50KTtpZihudWxsPT09dCl0aHJvdyBuZXcgby5Ob3RGb3VuZEVycm9yO3JldHVybiB0fSx0LnByb3RvdHlwZS5yZW1vdmVOYW1lZEl0ZW1OUz1mdW5jdGlvbihlLHQpe3ZhciByPWEuZWxlbWVudF9yZW1vdmVBbkF0dHJpYnV0ZUJ5TmFtZXNwYWNlQW5kTG9jYWxOYW1lKGV8fFwiXCIsdCx0aGlzLl9lbGVtZW50KTtpZihudWxsPT09cil0aHJvdyBuZXcgby5Ob3RGb3VuZEVycm9yO3JldHVybiByfSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB0KGUpfSx0fShBcnJheSk7dC5OYW1lZE5vZGVNYXBJbXBsPXN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KSxvPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoNikscz1yKDIpLHU9cigxMDIpLGw9cig5KSxjPXIoMCksaD1yKDEyKSxwPXIoMyksZj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIHQ9ZS5jYWxsKHRoaXMpfHx0aGlzLHI9YS5kb20ud2luZG93Ll9hc3NvY2lhdGVkRG9jdW1lbnQ7cmV0dXJuIHQuX3N0YXJ0PVtyLDBdLHQuX2VuZD1bciwwXSxhLmRvbS5yYW5nZUxpc3QuYWRkKHQpLHR9cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjb21tb25BbmNlc3RvckNvbnRhaW5lclwiLHtnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5fc3RhcnRbMF07IWMudHJlZV9pc0FuY2VzdG9yT2YodGhpcy5fZW5kWzBdLGUsITApOyl7aWYobnVsbD09PWUuX3BhcmVudCl0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnQgbm9kZSAgaXMgbnVsbC5cIik7ZT1lLl9wYXJlbnR9cmV0dXJuIGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuc2V0U3RhcnQ9ZnVuY3Rpb24oZSx0KXtjLnJhbmdlX3NldFRoZVN0YXJ0KHRoaXMsZSx0KX0sdC5wcm90b3R5cGUuc2V0RW5kPWZ1bmN0aW9uKGUsdCl7Yy5yYW5nZV9zZXRUaGVFbmQodGhpcyxlLHQpfSx0LnByb3RvdHlwZS5zZXRTdGFydEJlZm9yZT1mdW5jdGlvbihlKXt2YXIgdD1lLl9wYXJlbnQ7aWYobnVsbD09PXQpdGhyb3cgbmV3IGwuSW52YWxpZE5vZGVUeXBlRXJyb3I7Yy5yYW5nZV9zZXRUaGVTdGFydCh0aGlzLHQsYy50cmVlX2luZGV4KGUpKX0sdC5wcm90b3R5cGUuc2V0U3RhcnRBZnRlcj1mdW5jdGlvbihlKXt2YXIgdD1lLl9wYXJlbnQ7aWYobnVsbD09PXQpdGhyb3cgbmV3IGwuSW52YWxpZE5vZGVUeXBlRXJyb3I7Yy5yYW5nZV9zZXRUaGVTdGFydCh0aGlzLHQsYy50cmVlX2luZGV4KGUpKzEpfSx0LnByb3RvdHlwZS5zZXRFbmRCZWZvcmU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5fcGFyZW50O2lmKG51bGw9PT10KXRocm93IG5ldyBsLkludmFsaWROb2RlVHlwZUVycm9yO2MucmFuZ2Vfc2V0VGhlRW5kKHRoaXMsdCxjLnRyZWVfaW5kZXgoZSkpfSx0LnByb3RvdHlwZS5zZXRFbmRBZnRlcj1mdW5jdGlvbihlKXt2YXIgdD1lLl9wYXJlbnQ7aWYobnVsbD09PXQpdGhyb3cgbmV3IGwuSW52YWxpZE5vZGVUeXBlRXJyb3I7Yy5yYW5nZV9zZXRUaGVFbmQodGhpcyx0LGMudHJlZV9pbmRleChlKSsxKX0sdC5wcm90b3R5cGUuY29sbGFwc2U9ZnVuY3Rpb24oZSl7ZT90aGlzLl9lbmQ9dGhpcy5fc3RhcnQ6dGhpcy5fc3RhcnQ9dGhpcy5fZW5kfSx0LnByb3RvdHlwZS5zZWxlY3ROb2RlPWZ1bmN0aW9uKGUpe2MucmFuZ2Vfc2VsZWN0KGUsdGhpcyl9LHQucHJvdG90eXBlLnNlbGVjdE5vZGVDb250ZW50cz1mdW5jdGlvbihlKXtpZihwLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZShlKSl0aHJvdyBuZXcgbC5JbnZhbGlkTm9kZVR5cGVFcnJvcjt2YXIgdD1jLnRyZWVfbm9kZUxlbmd0aChlKTt0aGlzLl9zdGFydD1bZSwwXSx0aGlzLl9lbmQ9W2UsdF19LHQucHJvdG90eXBlLmNvbXBhcmVCb3VuZGFyeVBvaW50cz1mdW5jdGlvbihlLHQpe2lmKGUhPT1zLkhvd1RvQ29tcGFyZS5TdGFydFRvU3RhcnQmJmUhPT1zLkhvd1RvQ29tcGFyZS5TdGFydFRvRW5kJiZlIT09cy5Ib3dUb0NvbXBhcmUuRW5kVG9FbmQmJmUhPT1zLkhvd1RvQ29tcGFyZS5FbmRUb1N0YXJ0KXRocm93IG5ldyBsLk5vdFN1cHBvcnRlZEVycm9yO2lmKGMucmFuZ2Vfcm9vdCh0aGlzKSE9PWMucmFuZ2Vfcm9vdCh0KSl0aHJvdyBuZXcgbC5Xcm9uZ0RvY3VtZW50RXJyb3I7dmFyIHIsbjtzd2l0Y2goZSl7Y2FzZSBzLkhvd1RvQ29tcGFyZS5TdGFydFRvU3RhcnQ6cj10aGlzLl9zdGFydCxuPXQuX3N0YXJ0O2JyZWFrO2Nhc2Ugcy5Ib3dUb0NvbXBhcmUuU3RhcnRUb0VuZDpyPXRoaXMuX2VuZCxuPXQuX3N0YXJ0O2JyZWFrO2Nhc2Ugcy5Ib3dUb0NvbXBhcmUuRW5kVG9FbmQ6cj10aGlzLl9lbmQsbj10Ll9lbmQ7YnJlYWs7Y2FzZSBzLkhvd1RvQ29tcGFyZS5FbmRUb1N0YXJ0OnI9dGhpcy5fc3RhcnQsbj10Ll9lbmQ7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgbC5Ob3RTdXBwb3J0ZWRFcnJvcn12YXIgaT1jLmJvdW5kYXJ5UG9pbnRfcG9zaXRpb24ocixuKTtyZXR1cm4gaT09PXMuQm91bmRhcnlQb3NpdGlvbi5CZWZvcmU/LTE6aT09PXMuQm91bmRhcnlQb3NpdGlvbi5BZnRlcj8xOjB9LHQucHJvdG90eXBlLmRlbGV0ZUNvbnRlbnRzPWZ1bmN0aW9uKCl7dmFyIGUsdCxyLG47aWYoIWMucmFuZ2VfY29sbGFwc2VkKHRoaXMpKXt2YXIgaT10aGlzLl9zdGFydE5vZGUsYT10aGlzLl9zdGFydE9mZnNldCxzPXRoaXMuX2VuZE5vZGUsdT10aGlzLl9lbmRPZmZzZXQ7aWYoaT09PXMmJnAuR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZShpKSljLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEoaSxhLHUtYSxcIlwiKTtlbHNle3ZhciBsLGgsZj1bXTt0cnl7Zm9yKHZhciBkPW8oYy5yYW5nZV9nZXRDb250YWluZWROb2Rlcyh0aGlzKSksbT1kLm5leHQoKTshbS5kb25lO209ZC5uZXh0KCkpe3ZhciB5PShiPW0udmFsdWUpLl9wYXJlbnQ7bnVsbCE9PXkmJmMucmFuZ2VfaXNDb250YWluZWQoeSx0aGlzKXx8Zi5wdXNoKGIpfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXttJiYhbS5kb25lJiYodD1kLnJldHVybikmJnQuY2FsbChkKX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19aWYoYy50cmVlX2lzQW5jZXN0b3JPZihzLGksITApKWw9aSxoPWE7ZWxzZXtmb3IodmFyIHY9aTtudWxsIT09di5fcGFyZW50JiYhYy50cmVlX2lzQW5jZXN0b3JPZihzLHYuX3BhcmVudCwhMCk7KXY9di5fcGFyZW50O2lmKG51bGw9PT12Ll9wYXJlbnQpdGhyb3cgbmV3IEVycm9yKFwiUGFyZW50IG5vZGUgaXMgbnVsbC5cIik7bD12Ll9wYXJlbnQsaD1jLnRyZWVfaW5kZXgodikrMX1wLkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUoaSkmJmMuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YShpLGEsYy50cmVlX25vZGVMZW5ndGgoaSktYSxcIlwiKTt0cnl7Zm9yKHZhciBfPW8oZiksZz1fLm5leHQoKTshZy5kb25lO2c9Xy5uZXh0KCkpe3ZhciBiOyhiPWcudmFsdWUpLl9wYXJlbnQmJmMubXV0YXRpb25fcmVtb3ZlKGIsYi5fcGFyZW50KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZyYmIWcuZG9uZSYmKG49Xy5yZXR1cm4pJiZuLmNhbGwoXyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXAuR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZShzKSYmYy5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHMsMCx1LFwiXCIpLHRoaXMuX3N0YXJ0PVtsLGhdLHRoaXMuX2VuZD1bbCxoXX19fSx0LnByb3RvdHlwZS5leHRyYWN0Q29udGVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gYy5yYW5nZV9leHRyYWN0KHRoaXMpfSx0LnByb3RvdHlwZS5jbG9uZUNvbnRlbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIGMucmFuZ2VfY2xvbmVUaGVDb250ZW50cyh0aGlzKX0sdC5wcm90b3R5cGUuaW5zZXJ0Tm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gYy5yYW5nZV9pbnNlcnQoZSx0aGlzKX0sdC5wcm90b3R5cGUuc3Vycm91bmRDb250ZW50cz1mdW5jdGlvbihlKXt2YXIgdCxyO3RyeXtmb3IodmFyIG49byhjLnJhbmdlX2dldFBhcnRpYWxseUNvbnRhaW5lZE5vZGVzKHRoaXMpKSxpPW4ubmV4dCgpOyFpLmRvbmU7aT1uLm5leHQoKSl7dmFyIGE9aS52YWx1ZTtpZighcC5HdWFyZC5pc1RleHROb2RlKGEpKXRocm93IG5ldyBsLkludmFsaWRTdGF0ZUVycm9yfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtpJiYhaS5kb25lJiYocj1uLnJldHVybikmJnIuY2FsbChuKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19aWYocC5HdWFyZC5pc0RvY3VtZW50Tm9kZShlKXx8cC5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUoZSl8fHAuR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZShlKSl0aHJvdyBuZXcgbC5JbnZhbGlkTm9kZVR5cGVFcnJvcjt2YXIgcz1jLnJhbmdlX2V4dHJhY3QodGhpcyk7MCE9PWUuX2NoaWxkcmVuLnNpemUmJmMubXV0YXRpb25fcmVwbGFjZUFsbChudWxsLGUpLGMucmFuZ2VfaW5zZXJ0KGUsdGhpcyksYy5tdXRhdGlvbl9hcHBlbmQocyxlKSxjLnJhbmdlX3NlbGVjdChlLHRoaXMpfSx0LnByb3RvdHlwZS5jbG9uZVJhbmdlPWZ1bmN0aW9uKCl7cmV0dXJuIGMuY3JlYXRlX3JhbmdlKHRoaXMuX3N0YXJ0LHRoaXMuX2VuZCl9LHQucHJvdG90eXBlLmRldGFjaD1mdW5jdGlvbigpe2EuZG9tLnJhbmdlTGlzdC5kZWxldGUodGhpcyl9LHQucHJvdG90eXBlLmlzUG9pbnRJblJhbmdlPWZ1bmN0aW9uKGUsdCl7aWYoYy50cmVlX3Jvb3ROb2RlKGUpIT09Yy5yYW5nZV9yb290KHRoaXMpKXJldHVybiExO2lmKHAuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKGUpKXRocm93IG5ldyBsLkludmFsaWROb2RlVHlwZUVycm9yO2lmKHQ+Yy50cmVlX25vZGVMZW5ndGgoZSkpdGhyb3cgbmV3IGwuSW5kZXhTaXplRXJyb3I7dmFyIHI9W2UsdF07cmV0dXJuIGMuYm91bmRhcnlQb2ludF9wb3NpdGlvbihyLHRoaXMuX3N0YXJ0KSE9PXMuQm91bmRhcnlQb3NpdGlvbi5CZWZvcmUmJmMuYm91bmRhcnlQb2ludF9wb3NpdGlvbihyLHRoaXMuX2VuZCkhPT1zLkJvdW5kYXJ5UG9zaXRpb24uQWZ0ZXJ9LHQucHJvdG90eXBlLmNvbXBhcmVQb2ludD1mdW5jdGlvbihlLHQpe2lmKGMudHJlZV9yb290Tm9kZShlKSE9PWMucmFuZ2Vfcm9vdCh0aGlzKSl0aHJvdyBuZXcgbC5Xcm9uZ0RvY3VtZW50RXJyb3I7aWYocC5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUoZSkpdGhyb3cgbmV3IGwuSW52YWxpZE5vZGVUeXBlRXJyb3I7aWYodD5jLnRyZWVfbm9kZUxlbmd0aChlKSl0aHJvdyBuZXcgbC5JbmRleFNpemVFcnJvcjt2YXIgcj1bZSx0XTtyZXR1cm4gYy5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKHIsdGhpcy5fc3RhcnQpPT09cy5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZT8tMTpjLmJvdW5kYXJ5UG9pbnRfcG9zaXRpb24ocix0aGlzLl9lbmQpPT09cy5Cb3VuZGFyeVBvc2l0aW9uLkFmdGVyPzE6MH0sdC5wcm90b3R5cGUuaW50ZXJzZWN0c05vZGU9ZnVuY3Rpb24oZSl7aWYoYy50cmVlX3Jvb3ROb2RlKGUpIT09Yy5yYW5nZV9yb290KHRoaXMpKXJldHVybiExO3ZhciB0PWUuX3BhcmVudDtpZihudWxsPT09dClyZXR1cm4hMDt2YXIgcj1jLnRyZWVfaW5kZXgoZSk7cmV0dXJuIGMuYm91bmRhcnlQb2ludF9wb3NpdGlvbihbdCxyXSx0aGlzLl9lbmQpPT09cy5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZSYmYy5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKFt0LHIrMV0sdGhpcy5fc3RhcnQpPT09cy5Cb3VuZGFyeVBvc2l0aW9uLkFmdGVyfSx0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlLHQscj1cIlwiO2lmKHRoaXMuX3N0YXJ0Tm9kZT09PXRoaXMuX2VuZE5vZGUmJnAuR3VhcmQuaXNUZXh0Tm9kZSh0aGlzLl9zdGFydE5vZGUpKXJldHVybiB0aGlzLl9zdGFydE5vZGUuX2RhdGEuc3Vic3RyaW5nKHRoaXMuX3N0YXJ0T2Zmc2V0LHRoaXMuX2VuZE9mZnNldCk7cC5HdWFyZC5pc1RleHROb2RlKHRoaXMuX3N0YXJ0Tm9kZSkmJihyKz10aGlzLl9zdGFydE5vZGUuX2RhdGEuc3Vic3RyaW5nKHRoaXMuX3N0YXJ0T2Zmc2V0KSk7dHJ5e2Zvcih2YXIgbj1vKGMucmFuZ2VfZ2V0Q29udGFpbmVkTm9kZXModGhpcykpLGk9bi5uZXh0KCk7IWkuZG9uZTtpPW4ubmV4dCgpKXt2YXIgYT1pLnZhbHVlO3AuR3VhcmQuaXNUZXh0Tm9kZShhKSYmKHIrPWEuX2RhdGEpfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXtpJiYhaS5kb25lJiYodD1uLnJldHVybikmJnQuY2FsbChuKX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19cmV0dXJuIHAuR3VhcmQuaXNUZXh0Tm9kZSh0aGlzLl9lbmROb2RlKSYmKHIrPXRoaXMuX2VuZE5vZGUuX2RhdGEuc3Vic3RyaW5nKDAsdGhpcy5fZW5kT2Zmc2V0KSkscn0sdC5fY3JlYXRlPWZ1bmN0aW9uKGUscil7dmFyIG49bmV3IHQ7cmV0dXJuIGUmJihuLl9zdGFydD1lKSxyJiYobi5fZW5kPXIpLG59LHQuU1RBUlRfVE9fU1RBUlQ9MCx0LlNUQVJUX1RPX0VORD0xLHQuRU5EX1RPX0VORD0yLHQuRU5EX1RPX1NUQVJUPTMsdH0odS5BYnN0cmFjdFJhbmdlSW1wbCk7dC5SYW5nZUltcGw9ZixoLmlkbF9kZWZpbmVDb25zdChmLnByb3RvdHlwZSxcIlNUQVJUX1RPX1NUQVJUXCIsMCksaC5pZGxfZGVmaW5lQ29uc3QoZi5wcm90b3R5cGUsXCJTVEFSVF9UT19FTkRcIiwxKSxoLmlkbF9kZWZpbmVDb25zdChmLnByb3RvdHlwZSxcIkVORF9UT19FTkRcIiwyKSxoLmlkbF9kZWZpbmVDb25zdChmLnByb3RvdHlwZSxcIkVORF9UT19TVEFSVFwiLDMpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigxMDMpLGE9cigwKSxzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyLG4pe3ZhciBpPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiBpLl9pdGVyYXRvckNvbGxlY3Rpb249dm9pZCAwLGkuX3JlZmVyZW5jZT1yLGkuX3BvaW50ZXJCZWZvcmVSZWZlcmVuY2U9bixhLm5vZGVJdGVyYXRvcl9pdGVyYXRvckxpc3QoKS5hZGQoaSksaX1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInJlZmVyZW5jZU5vZGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlZmVyZW5jZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcG9pbnRlckJlZm9yZVJlZmVyZW5jZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5uZXh0Tm9kZT1mdW5jdGlvbigpe3JldHVybiBhLm5vZGVJdGVyYXRvcl90cmF2ZXJzZSh0aGlzLCEwKX0sdC5wcm90b3R5cGUucHJldmlvdXNOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGEubm9kZUl0ZXJhdG9yX3RyYXZlcnNlKHRoaXMsITEpfSx0LnByb3RvdHlwZS5kZXRhY2g9ZnVuY3Rpb24oKXthLm5vZGVJdGVyYXRvcl9pdGVyYXRvckxpc3QoKS5kZWxldGUodGhpcyl9LHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIsbil7cmV0dXJuIG5ldyB0KGUscixuKX0sdH0oby5UcmF2ZXJzZXJJbXBsKTt0Lk5vZGVJdGVyYXRvckltcGw9c30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMiksYT1yKDEwMykscz1yKDApLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIpe3ZhciBuPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiBuLl9jdXJyZW50PXIsbn1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImN1cnJlbnROb2RlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdXJyZW50fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fY3VycmVudD1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnBhcmVudE5vZGU9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5fY3VycmVudDtudWxsIT09ZSYmZSE9PXRoaXMuX3Jvb3Q7KWlmKG51bGwhPT0oZT1lLl9wYXJlbnQpJiZzLnRyYXZlcnNhbF9maWx0ZXIodGhpcyxlKT09PW8uRmlsdGVyUmVzdWx0LkFjY2VwdClyZXR1cm4gdGhpcy5fY3VycmVudD1lLGU7cmV0dXJuIG51bGx9LHQucHJvdG90eXBlLmZpcnN0Q2hpbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy50cmVlV2Fsa2VyX3RyYXZlcnNlQ2hpbGRyZW4odGhpcywhMCl9LHQucHJvdG90eXBlLmxhc3RDaGlsZD1mdW5jdGlvbigpe3JldHVybiBzLnRyZWVXYWxrZXJfdHJhdmVyc2VDaGlsZHJlbih0aGlzLCExKX0sdC5wcm90b3R5cGUubmV4dFNpYmxpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gcy50cmVlV2Fsa2VyX3RyYXZlcnNlU2libGluZ3ModGhpcywhMCl9LHQucHJvdG90eXBlLnByZXZpb3VzTm9kZT1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLl9jdXJyZW50O2UhPT10aGlzLl9yb290Oyl7Zm9yKHZhciB0PWUuX3ByZXZpb3VzU2libGluZzt0Oyl7ZT10O2Zvcih2YXIgcj1zLnRyYXZlcnNhbF9maWx0ZXIodGhpcyxlKTtyIT09by5GaWx0ZXJSZXN1bHQuUmVqZWN0JiZlLl9sYXN0Q2hpbGQ7KWU9ZS5fbGFzdENoaWxkLHI9cy50cmF2ZXJzYWxfZmlsdGVyKHRoaXMsZSk7aWYocj09PW8uRmlsdGVyUmVzdWx0LkFjY2VwdClyZXR1cm4gdGhpcy5fY3VycmVudD1lLGU7dD1lLl9wcmV2aW91c1NpYmxpbmd9aWYoZT09PXRoaXMuX3Jvb3R8fG51bGw9PT1lLl9wYXJlbnQpcmV0dXJuIG51bGw7aWYoZT1lLl9wYXJlbnQscy50cmF2ZXJzYWxfZmlsdGVyKHRoaXMsZSk9PT1vLkZpbHRlclJlc3VsdC5BY2NlcHQpcmV0dXJuIHRoaXMuX2N1cnJlbnQ9ZSxlfXJldHVybiBudWxsfSx0LnByb3RvdHlwZS5wcmV2aW91c1NpYmxpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gcy50cmVlV2Fsa2VyX3RyYXZlcnNlU2libGluZ3ModGhpcywhMSl9LHQucHJvdG90eXBlLm5leHROb2RlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuX2N1cnJlbnQsdD1vLkZpbHRlclJlc3VsdC5BY2NlcHQ7Oyl7Zm9yKDt0IT09by5GaWx0ZXJSZXN1bHQuUmVqZWN0JiZlLl9maXJzdENoaWxkOylpZihlPWUuX2ZpcnN0Q2hpbGQsKHQ9cy50cmF2ZXJzYWxfZmlsdGVyKHRoaXMsZSkpPT09by5GaWx0ZXJSZXN1bHQuQWNjZXB0KXJldHVybiB0aGlzLl9jdXJyZW50PWUsZTtmb3IodmFyIHI9bnVsbCxuPWU7bnVsbCE9PW47KXtpZihuPT09dGhpcy5fcm9vdClyZXR1cm4gbnVsbDtpZihudWxsIT09KHI9bi5fbmV4dFNpYmxpbmcpKXtlPXI7YnJlYWt9bj1uLl9wYXJlbnR9aWYoKHQ9cy50cmF2ZXJzYWxfZmlsdGVyKHRoaXMsZSkpPT09by5GaWx0ZXJSZXN1bHQuQWNjZXB0KXJldHVybiB0aGlzLl9jdXJyZW50PWUsZX19LHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIpe3JldHVybiBuZXcgdChlLHIpfSx0fShhLlRyYXZlcnNlckltcGwpO3QuVHJlZVdhbGtlckltcGw9dX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1yKDEyKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5wcm90b3R5cGUuYWNjZXB0Tm9kZT1mdW5jdGlvbihlKXtyZXR1cm4gbi5GaWx0ZXJSZXN1bHQuQWNjZXB0fSxlLl9jcmVhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGV9LGUuRklMVEVSX0FDQ0VQVD0xLGUuRklMVEVSX1JFSkVDVD0yLGUuRklMVEVSX1NLSVA9MyxlLlNIT1dfQUxMPTQyOTQ5NjcyOTUsZS5TSE9XX0VMRU1FTlQ9MSxlLlNIT1dfQVRUUklCVVRFPTIsZS5TSE9XX1RFWFQ9NCxlLlNIT1dfQ0RBVEFfU0VDVElPTj04LGUuU0hPV19FTlRJVFlfUkVGRVJFTkNFPTE2LGUuU0hPV19FTlRJVFk9MzIsZS5TSE9XX1BST0NFU1NJTkdfSU5TVFJVQ1RJT049NjQsZS5TSE9XX0NPTU1FTlQ9MTI4LGUuU0hPV19ET0NVTUVOVD0yNTYsZS5TSE9XX0RPQ1VNRU5UX1RZUEU9NTEyLGUuU0hPV19ET0NVTUVOVF9GUkFHTUVOVD0xMDI0LGUuU0hPV19OT1RBVElPTj0yMDQ4LGV9KCk7dC5Ob2RlRmlsdGVySW1wbD1vLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiRklMVEVSX0FDQ0VQVFwiLDEpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiRklMVEVSX1JFSkVDVFwiLDIpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiRklMVEVSX1NLSVBcIiwzKSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfQUxMXCIsNDI5NDk2NzI5NSksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX0VMRU1FTlRcIiwxKSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfQVRUUklCVVRFXCIsMiksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX1RFWFRcIiw0KSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfQ0RBVEFfU0VDVElPTlwiLDgpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19FTlRJVFlfUkVGRVJFTkNFXCIsMTYpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19FTlRJVFlcIiwzMiksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX1BST0NFU1NJTkdfSU5TVFJVQ1RJT05cIiw2NCksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX0NPTU1FTlRcIiwxMjgpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19ET0NVTUVOVFwiLDI1NiksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX0RPQ1VNRU5UX1RZUEVcIiw1MTIpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19ET0NVTUVOVF9GUkFHTUVOVFwiLDEwMjQpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19OT1RBVElPTlwiLDIwNDgpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxyLG4saSxvLGEscyx1KXt0aGlzLl90eXBlPWUsdGhpcy5fdGFyZ2V0PXQsdGhpcy5fYWRkZWROb2Rlcz1yLHRoaXMuX3JlbW92ZWROb2Rlcz1uLHRoaXMuX3ByZXZpb3VzU2libGluZz1pLHRoaXMuX25leHRTaWJsaW5nPW8sdGhpcy5fYXR0cmlidXRlTmFtZT1hLHRoaXMuX2F0dHJpYnV0ZU5hbWVzcGFjZT1zLHRoaXMuX29sZFZhbHVlPXV9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInR5cGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3R5cGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidGFyZ2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90YXJnZXR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiYWRkZWROb2Rlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWRkZWROb2Rlc30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJyZW1vdmVkTm9kZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlbW92ZWROb2Rlc30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJwcmV2aW91c1NpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ByZXZpb3VzU2libGluZ30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJuZXh0U2libGluZ1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmV4dFNpYmxpbmd9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiYXR0cmlidXRlTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXR0cmlidXRlTmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhdHRyaWJ1dGVOYW1lc3BhY2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2F0dHJpYnV0ZU5hbWVzcGFjZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJvbGRWYWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb2xkVmFsdWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5fY3JlYXRlPWZ1bmN0aW9uKHQscixuLGksbyxhLHMsdSxsKXtyZXR1cm4gbmV3IGUodCxyLG4saSxvLGEscyx1LGwpfSxlfSgpO3QuTXV0YXRpb25SZWNvcmRJbXBsPW59LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDYpLG89cig5KSxhPXIoNykscz1yKDApLHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5fZWxlbWVudD1lLHRoaXMuX2F0dHJpYnV0ZT10LHRoaXMuX3Rva2VuU2V0PW5ldyBTZXQ7dmFyIHI9dC5fbG9jYWxOYW1lLG49cy5lbGVtZW50X2dldEFuQXR0cmlidXRlVmFsdWUoZSxyKSxvPXRoaXM7dGhpcy5fZWxlbWVudC5fYXR0cmlidXRlQ2hhbmdlU3RlcHMucHVzaCgoZnVuY3Rpb24oZSx0LHIsbixpKXt0PT09by5fYXR0cmlidXRlLl9sb2NhbE5hbWUmJm51bGw9PT1pJiYobj9vLl90b2tlblNldD1zLm9yZGVyZWRTZXRfcGFyc2Uobik6by5fdG9rZW5TZXQuY2xlYXIoKSl9KSksaS5kb20uZmVhdHVyZXMuc3RlcHMmJnMuZG9tX3J1bkF0dHJpYnV0ZUNoYW5nZVN0ZXBzKGUscixuLG4sbnVsbCl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdG9rZW5TZXQuc2l6ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5pdGVtPWZ1bmN0aW9uKGUpe3ZhciB0LHIsaT0wO3RyeXtmb3IodmFyIG89bih0aGlzLl90b2tlblNldCksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe3ZhciBzPWEudmFsdWU7aWYoaT09PWUpcmV0dXJuIHM7aSsrfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIG51bGx9LGUucHJvdG90eXBlLmNvbnRhaW5zPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl90b2tlblNldC5oYXMoZSl9LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbigpe2Zvcih2YXIgZSx0LHI9W10saT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspcltpXT1hcmd1bWVudHNbaV07dHJ5e2Zvcih2YXIgdT1uKHIpLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgYz1sLnZhbHVlO2lmKFwiXCI9PT1jKXRocm93IG5ldyBvLlN5bnRheEVycm9yKFwiQ2Fubm90IGFkZCBhbiBlbXB0eSB0b2tlbi5cIik7aWYoYS5jb2RlUG9pbnQuQVNDSUlXaGl0ZVNwYWNlLnRlc3QoYykpdGhyb3cgbmV3IG8uSW52YWxpZENoYXJhY3RlckVycm9yKFwiVG9rZW4gY2Fubm90IGNvbnRhaW4gd2hpdGVzcGFjZS5cIik7dGhpcy5fdG9rZW5TZXQuYWRkKGMpfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYodD11LnJldHVybikmJnQuY2FsbCh1KX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19cy50b2tlbkxpc3RfdXBkYXRlU3RlcHModGhpcyl9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe2Zvcih2YXIgZSx0LHI9W10saT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspcltpXT1hcmd1bWVudHNbaV07dHJ5e2Zvcih2YXIgdT1uKHIpLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgYz1sLnZhbHVlO2lmKFwiXCI9PT1jKXRocm93IG5ldyBvLlN5bnRheEVycm9yKFwiQ2Fubm90IHJlbW92ZSBhbiBlbXB0eSB0b2tlbi5cIik7aWYoYS5jb2RlUG9pbnQuQVNDSUlXaGl0ZVNwYWNlLnRlc3QoYykpdGhyb3cgbmV3IG8uSW52YWxpZENoYXJhY3RlckVycm9yKFwiVG9rZW4gY2Fubm90IGNvbnRhaW4gd2hpdGVzcGFjZS5cIik7dGhpcy5fdG9rZW5TZXQuZGVsZXRlKGMpfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYodD11LnJldHVybikmJnQuY2FsbCh1KX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19cy50b2tlbkxpc3RfdXBkYXRlU3RlcHModGhpcyl9LGUucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQmJih0PXZvaWQgMCksXCJcIj09PWUpdGhyb3cgbmV3IG8uU3ludGF4RXJyb3IoXCJDYW5ub3QgdG9nZ2xlIGFuIGVtcHR5IHRva2VuLlwiKTtpZihhLmNvZGVQb2ludC5BU0NJSVdoaXRlU3BhY2UudGVzdChlKSl0aHJvdyBuZXcgby5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCJUb2tlbiBjYW5ub3QgY29udGFpbiB3aGl0ZXNwYWNlLlwiKTtyZXR1cm4gdGhpcy5fdG9rZW5TZXQuaGFzKGUpP3ZvaWQgMCE9PXQmJiExIT09dHx8KHRoaXMuX3Rva2VuU2V0LmRlbGV0ZShlKSxzLnRva2VuTGlzdF91cGRhdGVTdGVwcyh0aGlzKSwhMSk6KHZvaWQgMD09PXR8fCEwPT09dCkmJih0aGlzLl90b2tlblNldC5hZGQoZSkscy50b2tlbkxpc3RfdXBkYXRlU3RlcHModGhpcyksITApfSxlLnByb3RvdHlwZS5yZXBsYWNlPWZ1bmN0aW9uKGUsdCl7aWYoXCJcIj09PWV8fFwiXCI9PT10KXRocm93IG5ldyBvLlN5bnRheEVycm9yKFwiQ2Fubm90IHJlcGxhY2UgYW4gZW1wdHkgdG9rZW4uXCIpO2lmKGEuY29kZVBvaW50LkFTQ0lJV2hpdGVTcGFjZS50ZXN0KGUpfHxhLmNvZGVQb2ludC5BU0NJSVdoaXRlU3BhY2UudGVzdCh0KSl0aHJvdyBuZXcgby5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCJUb2tlbiBjYW5ub3QgY29udGFpbiB3aGl0ZXNwYWNlLlwiKTtyZXR1cm4hIXRoaXMuX3Rva2VuU2V0LmhhcyhlKSYmKGEuc2V0LnJlcGxhY2UodGhpcy5fdG9rZW5TZXQsZSx0KSxzLnRva2VuTGlzdF91cGRhdGVTdGVwcyh0aGlzKSwhMCl9LGUucHJvdG90eXBlLnN1cHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBzLnRva2VuTGlzdF92YWxpZGF0aW9uU3RlcHModGhpcyxlKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHMudG9rZW5MaXN0X3NlcmlhbGl6ZVN0ZXBzKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oZSl7cy5lbGVtZW50X3NldEFuQXR0cmlidXRlVmFsdWUodGhpcy5fZWxlbWVudCx0aGlzLl9hdHRyaWJ1dGUuX2xvY2FsTmFtZSxlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fdG9rZW5TZXRbU3ltYm9sLml0ZXJhdG9yXSgpO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUubmV4dCgpfX19LGUuX2NyZWF0ZT1mdW5jdGlvbih0LHIpe3JldHVybiBuZXcgZSh0LHIpfSxlfSgpO3QuRE9NVG9rZW5MaXN0SW1wbD11fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigxMDQpLGE9cigwKSxzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2YXIgbj1lLmNhbGwodGhpcyx0LHIpfHx0aGlzO3JldHVybiBuLl9kZXRhaWw9bnVsbCxuLl9kZXRhaWw9ciYmci5kZXRhaWx8fG51bGwsbn1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRldGFpbFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGV0YWlsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmluaXRDdXN0b21FdmVudD1mdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT10JiYodD0hMSksdm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW4mJihuPW51bGwpLHRoaXMuX2Rpc3BhdGNoRmxhZ3x8KGEuZXZlbnRfaW5pdGlhbGl6ZSh0aGlzLGUsdCxyKSx0aGlzLl9kZXRhaWw9bil9LHR9KG8uRXZlbnRJbXBsKTt0LkN1c3RvbUV2ZW50SW1wbD1zfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cig2KSxpPXIoMiksbz1yKDEwNSksYT1yKDE3KTt0Lm5vZGVJdGVyYXRvcl90cmF2ZXJzZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1lLl9yZWZlcmVuY2Usbj1lLl9wb2ludGVyQmVmb3JlUmVmZXJlbmNlOzspe2lmKHQpaWYobiluPSExO2Vsc2V7dmFyIHM9YS50cmVlX2dldEZvbGxvd2luZ05vZGUoZS5fcm9vdCxyKTtpZighcylyZXR1cm4gbnVsbDtyPXN9ZWxzZSBpZihuKXt2YXIgdT1hLnRyZWVfZ2V0UHJlY2VkaW5nTm9kZShlLnJvb3Qscik7aWYoIXUpcmV0dXJuIG51bGw7cj11fWVsc2Ugbj0hMDtpZihvLnRyYXZlcnNhbF9maWx0ZXIoZSxyKT09PWkuRmlsdGVyUmVzdWx0LkFjY2VwdClicmVha31yZXR1cm4gZS5fcmVmZXJlbmNlPXIsZS5fcG9pbnRlckJlZm9yZVJlZmVyZW5jZT1uLHJ9LHQubm9kZUl0ZXJhdG9yX2l0ZXJhdG9yTGlzdD1mdW5jdGlvbigpe3JldHVybiBuLmRvbS53aW5kb3cuX2l0ZXJhdG9yTGlzdH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDkpLGk9cig3KSxvPXIoMTc0KTtmdW5jdGlvbiBhKGUpe2lmKCFvLnhtbF9pc05hbWUoZSkpdGhyb3cgbmV3IG4uSW52YWxpZENoYXJhY3RlckVycm9yKFwiSW52YWxpZCBYTUwgbmFtZTogXCIrZSk7aWYoIW8ueG1sX2lzUU5hbWUoZSkpdGhyb3cgbmV3IG4uSW52YWxpZENoYXJhY3RlckVycm9yKFwiSW52YWxpZCBYTUwgcXVhbGlmaWVkIG5hbWU6IFwiK2UrXCIuXCIpfXQubmFtZXNwYWNlX3ZhbGlkYXRlPWEsdC5uYW1lc3BhY2VfdmFsaWRhdGVBbmRFeHRyYWN0PWZ1bmN0aW9uKGUsdCl7ZXx8KGU9bnVsbCksYSh0KTt2YXIgcj10LnNwbGl0KFwiOlwiKSxvPTI9PT1yLmxlbmd0aD9yWzBdOm51bGwscz0yPT09ci5sZW5ndGg/clsxXTp0O2lmKG8mJm51bGw9PT1lKXRocm93IG5ldyBuLk5hbWVzcGFjZUVycm9yKFwiUXVhbGlmaWVkIG5hbWUgaW5jbHVkZXMgYSBwcmVmaXggYnV0IHRoZSBuYW1lc3BhY2UgaXMgbnVsbC5cIik7aWYoXCJ4bWxcIj09PW8mJmUhPT1pLm5hbWVzcGFjZS5YTUwpdGhyb3cgbmV3IG4uTmFtZXNwYWNlRXJyb3IoJ1F1YWxpZmllZCBuYW1lIGluY2x1ZGVzIHRoZSBcInhtbFwiIHByZWZpeCBidXQgdGhlIG5hbWVzcGFjZSBpcyBub3QgdGhlIFhNTCBuYW1lc3BhY2UuJyk7aWYoZSE9PWkubmFtZXNwYWNlLlhNTE5TJiYoXCJ4bWxuc1wiPT09b3x8XCJ4bWxuc1wiPT09dCkpdGhyb3cgbmV3IG4uTmFtZXNwYWNlRXJyb3IoJ1F1YWxpZmllZCBuYW1lIGluY2x1ZGVzIHRoZSBcInhtbG5zXCIgcHJlZml4IGJ1dCB0aGUgbmFtZXNwYWNlIGlzIG5vdCB0aGUgWE1MTlMgbmFtZXNwYWNlLicpO2lmKGU9PT1pLm5hbWVzcGFjZS5YTUxOUyYmXCJ4bWxuc1wiIT09byYmXCJ4bWxuc1wiIT09dCl0aHJvdyBuZXcgbi5OYW1lc3BhY2VFcnJvcignUXVhbGlmaWVkIG5hbWUgZG9lcyBub3QgaW5jbHVkZSB0aGUgXCJ4bWxuc1wiIHByZWZpeCBidXQgdGhlIG5hbWVzcGFjZSBpcyB0aGUgWE1MTlMgbmFtZXNwYWNlLicpO3JldHVybltlLG8sc119LHQubmFtZXNwYWNlX2V4dHJhY3RRTmFtZT1mdW5jdGlvbihlKXthKGUpO3ZhciB0PWUuc3BsaXQoXCI6XCIpO3JldHVyblsyPT09dC5sZW5ndGg/dFswXTpudWxsLDI9PT10Lmxlbmd0aD90WzFdOmVdfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQueG1sX2lzTmFtZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIHI9ZS5jaGFyQ29kZUF0KHQpO2lmKCEocj49OTcmJnI8PTEyMnx8cj49NjUmJnI8PTkwfHw1OD09PXJ8fDk1PT09cnx8cj49MTkyJiZyPD0yMTR8fHI+PTIxNiYmcjw9MjQ2fHxyPj0yNDgmJnI8PTc2N3x8cj49ODgwJiZyPD04OTN8fHI+PTg5NSYmcjw9ODE5MXx8cj49ODIwNCYmcjw9ODIwNXx8cj49ODMwNCYmcjw9ODU5MXx8cj49MTEyNjQmJnI8PTEyMjcxfHxyPj0xMjI4OSYmcjw9NTUyOTV8fHI+PTYzNzQ0JiZyPD02NDk3NXx8cj49NjUwMDgmJnI8PTY1NTMzKSYmKDA9PT10fHwhKDQ1PT09cnx8NDY9PT1yfHxyPj00OCYmcjw9NTd8fDE4Mz09PXJ8fHI+PTc2OCYmcjw9ODc5fHxyPj04MjU1JiZyPD04MjU2KSkpe2lmKHI+PTU1Mjk2JiZyPD01NjMxOSYmdDxlLmxlbmd0aC0xKXt2YXIgbj1lLmNoYXJDb2RlQXQodCsxKTtpZihuPj01NjMyMCYmbjw9NTczNDMmJih0KyssKHI9MTAyNCooci01NTI5Nikrbi01NjMyMCs2NTUzNik+PTY1NTM2JiZyPD05ODMwMzkpKWNvbnRpbnVlfXJldHVybiExfX1yZXR1cm4hMH0sdC54bWxfaXNRTmFtZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ITEscj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbj1lLmNoYXJDb2RlQXQocik7aWYoIShuPj05NyYmbjw9MTIyfHxuPj02NSYmbjw9OTB8fDk1PT09bnx8bj49MTkyJiZuPD0yMTR8fG4+PTIxNiYmbjw9MjQ2fHxuPj0yNDgmJm48PTc2N3x8bj49ODgwJiZuPD04OTN8fG4+PTg5NSYmbjw9ODE5MXx8bj49ODIwNCYmbjw9ODIwNXx8bj49ODMwNCYmbjw9ODU5MXx8bj49MTEyNjQmJm48PTEyMjcxfHxuPj0xMjI4OSYmbjw9NTUyOTV8fG4+PTYzNzQ0JiZuPD02NDk3NXx8bj49NjUwMDgmJm48PTY1NTMzKSYmKDA9PT1yfHwhKDQ1PT09bnx8NDY9PT1ufHxuPj00OCYmbjw9NTd8fDE4Mz09PW58fG4+PTc2OCYmbjw9ODc5fHxuPj04MjU1JiZuPD04MjU2KSkpe2lmKDA9PT1yfHw1OCE9PW4pe2lmKG4+PTU1Mjk2JiZuPD01NjMxOSYmcjxlLmxlbmd0aC0xKXt2YXIgaT1lLmNoYXJDb2RlQXQocisxKTtpZihpPj01NjMyMCYmaTw9NTczNDMmJihyKyssKG49MTAyNCoobi01NTI5NikraS01NjMyMCs2NTUzNik+PTY1NTM2JiZuPD05ODMwMzkpKWNvbnRpbnVlfXJldHVybiExfWlmKHQpcmV0dXJuITE7aWYocj09PWUubGVuZ3RoLTEpcmV0dXJuITE7dD0hMH19cmV0dXJuITB9LHQueG1sX2lzTGVnYWxDaGFyPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lLmNoYXJDb2RlQXQodCk7aWYoISg5PT09cnx8MTA9PT1yfHwxMz09PXJ8fHI+PTMyJiZyPD01NTI5NXx8cj49NTczNDQmJnI8PTY1NTMzKSl7aWYocj49NTUyOTYmJnI8PTU2MzE5JiZ0PGUubGVuZ3RoLTEpe3ZhciBuPWUuY2hhckNvZGVBdCh0KzEpO2lmKG4+PTU2MzIwJiZuPD01NzM0MyYmKHQrKywocj0xMDI0KihyLTU1Mjk2KStuLTU2MzIwKzY1NTM2KT49NjU1MzYmJnI8PTExMTQxMTEpKWNvbnRpbnVlfXJldHVybiExfX1yZXR1cm4hMH0sdC54bWxfaXNQdWJpZENoYXI9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWUuY2hhckNvZGVBdCh0KTtpZighKHI+PTk3JiZyPD0xMjJ8fHI+PTY1JiZyPD05MHx8cj49MzkmJnI8PTU5fHwzMj09PXJ8fDEzPT09cnx8MTA9PT1yfHxyPj0zNSYmcjw9Mzd8fDMzPT09cnx8NjE9PT1yfHw2Mz09PXJ8fDY0PT09cnx8OTU9PT1yKSlyZXR1cm4hMX1yZXR1cm4hMH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIpLGk9cigxNyk7dC5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uPWZ1bmN0aW9uIGUodCxyKXt2YXIgbz10WzBdLGE9dFsxXSxzPXJbMF0sdT1yWzFdO2lmKGNvbnNvbGUuYXNzZXJ0KGkudHJlZV9yb290Tm9kZShvKT09PWkudHJlZV9yb290Tm9kZShzKSxcIkJvdW5kYXJ5IHBvaW50cyBtdXN0IHNoYXJlIHRoZSBzYW1lIHJvb3Qgbm9kZS5cIiksbz09PXMpcmV0dXJuIGE9PT11P24uQm91bmRhcnlQb3NpdGlvbi5FcXVhbDphPHU/bi5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZTpuLkJvdW5kYXJ5UG9zaXRpb24uQWZ0ZXI7aWYoaS50cmVlX2lzRm9sbG93aW5nKHMsbykpe3ZhciBsPWUoW3MsdV0sW28sYV0pO2lmKGw9PT1uLkJvdW5kYXJ5UG9zaXRpb24uQmVmb3JlKXJldHVybiBuLkJvdW5kYXJ5UG9zaXRpb24uQWZ0ZXI7aWYobD09PW4uQm91bmRhcnlQb3NpdGlvbi5BZnRlcilyZXR1cm4gbi5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZX1pZihpLnRyZWVfaXNBbmNlc3Rvck9mKHMsbykpe2Zvcih2YXIgYz1zOyFpLnRyZWVfaXNDaGlsZE9mKG8sYyk7KW51bGwhPT1jLl9wYXJlbnQmJihjPWMuX3BhcmVudCk7aWYoaS50cmVlX2luZGV4KGMpPGEpcmV0dXJuIG4uQm91bmRhcnlQb3NpdGlvbi5BZnRlcn1yZXR1cm4gbi5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDYpLG89cigzKSxhPXIoNykscz1yKDI5KSx1PXIoMTA4KSxsPXIoMzApLGM9cigzNyksaD1yKDUyKTt0Lm5vZGVfc3RyaW5nUmVwbGFjZUFsbD1mdW5jdGlvbihlLHQpe3ZhciByPW51bGw7XCJcIiE9PWUmJihyPXMuY3JlYXRlX3RleHQodC5fbm9kZURvY3VtZW50LGUpKSxjLm11dGF0aW9uX3JlcGxhY2VBbGwocix0KX0sdC5ub2RlX2Nsb25lPWZ1bmN0aW9uIGUodCxyLGEpe3ZhciB1LHAsZixkLG07aWYodm9pZCAwPT09ciYmKHI9bnVsbCksdm9pZCAwPT09YSYmKGE9ITEpLG51bGw9PT1yJiYocj10Ll9ub2RlRG9jdW1lbnQpLG8uR3VhcmQuaXNFbGVtZW50Tm9kZSh0KSl7bT1oLmVsZW1lbnRfY3JlYXRlQW5FbGVtZW50KHIsdC5fbG9jYWxOYW1lLHQuX25hbWVzcGFjZSx0Ll9uYW1lc3BhY2VQcmVmaXgsdC5faXMsITEpO3RyeXtmb3IodmFyIHk9bih0Ll9hdHRyaWJ1dGVMaXN0KSx2PXkubmV4dCgpOyF2LmRvbmU7dj15Lm5leHQoKSl7dmFyIF89ZSh2LnZhbHVlLHIpO2guZWxlbWVudF9hcHBlbmQoXyxtKX19Y2F0Y2goZSl7dT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7diYmIXYuZG9uZSYmKHA9eS5yZXR1cm4pJiZwLmNhbGwoeSl9ZmluYWxseXtpZih1KXRocm93IHUuZXJyb3J9fX1lbHNlIGlmKG8uR3VhcmQuaXNEb2N1bWVudE5vZGUodCkpe3ZhciBnPXMuY3JlYXRlX2RvY3VtZW50KCk7Zy5fZW5jb2Rpbmc9dC5fZW5jb2RpbmcsZy5fY29udGVudFR5cGU9dC5fY29udGVudFR5cGUsZy5fVVJMPXQuX1VSTCxnLl9vcmlnaW49dC5fb3JpZ2luLGcuX3R5cGU9dC5fdHlwZSxnLl9tb2RlPXQuX21vZGUsbT1nfWVsc2UgaWYoby5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUodCkpe209cy5jcmVhdGVfZG9jdW1lbnRUeXBlKHIsdC5fbmFtZSx0Ll9wdWJsaWNJZCx0Ll9zeXN0ZW1JZCl9ZWxzZSBpZihvLkd1YXJkLmlzQXR0ck5vZGUodCkpe3ZhciBiPXMuY3JlYXRlX2F0dHIocix0LmxvY2FsTmFtZSk7Yi5fbmFtZXNwYWNlPXQuX25hbWVzcGFjZSxiLl9uYW1lc3BhY2VQcmVmaXg9dC5fbmFtZXNwYWNlUHJlZml4LGIuX3ZhbHVlPXQuX3ZhbHVlLG09Yn1lbHNlIG09by5HdWFyZC5pc0V4Y2x1c2l2ZVRleHROb2RlKHQpP3MuY3JlYXRlX3RleHQocix0Ll9kYXRhKTpvLkd1YXJkLmlzQ0RBVEFTZWN0aW9uTm9kZSh0KT9zLmNyZWF0ZV9jZGF0YVNlY3Rpb24ocix0Ll9kYXRhKTpvLkd1YXJkLmlzQ29tbWVudE5vZGUodCk/cy5jcmVhdGVfY29tbWVudChyLHQuX2RhdGEpOm8uR3VhcmQuaXNQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob2RlKHQpP3MuY3JlYXRlX3Byb2Nlc3NpbmdJbnN0cnVjdGlvbihyLHQuX3RhcmdldCx0Ll9kYXRhKTpvLkd1YXJkLmlzRG9jdW1lbnRGcmFnbWVudE5vZGUodCk/cy5jcmVhdGVfZG9jdW1lbnRGcmFnbWVudChyKTpPYmplY3QuY3JlYXRlKHQpO2lmKG8uR3VhcmQuaXNEb2N1bWVudE5vZGUobSk/KG0uX25vZGVEb2N1bWVudD1tLHI9bSk6bS5fbm9kZURvY3VtZW50PXIsaS5kb20uZmVhdHVyZXMuc3RlcHMmJmwuZG9tX3J1bkNsb25pbmdTdGVwcyhtLHQscixhKSxhKXRyeXtmb3IodmFyIHg9bih0Ll9jaGlsZHJlbiksdz14Lm5leHQoKTshdy5kb25lO3c9eC5uZXh0KCkpe3ZhciBFPWUody52YWx1ZSxyLCEwKTtjLm11dGF0aW9uX2FwcGVuZChFLG0pfX1jYXRjaChlKXtmPXtlcnJvcjplfX1maW5hbGx5e3RyeXt3JiYhdy5kb25lJiYoZD14LnJldHVybikmJmQuY2FsbCh4KX1maW5hbGx5e2lmKGYpdGhyb3cgZi5lcnJvcn19cmV0dXJuIG19LHQubm9kZV9lcXVhbHM9ZnVuY3Rpb24gZSh0LHIpe3ZhciBpLGEscyx1O2lmKHQuX25vZGVUeXBlIT09ci5fbm9kZVR5cGUpcmV0dXJuITE7aWYoby5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUodCkmJm8uR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKHIpKXtpZih0Ll9uYW1lIT09ci5fbmFtZXx8dC5fcHVibGljSWQhPT1yLl9wdWJsaWNJZHx8dC5fc3lzdGVtSWQhPT1yLl9zeXN0ZW1JZClyZXR1cm4hMX1lbHNlIGlmKG8uR3VhcmQuaXNFbGVtZW50Tm9kZSh0KSYmby5HdWFyZC5pc0VsZW1lbnROb2RlKHIpKXtpZih0Ll9uYW1lc3BhY2UhPT1yLl9uYW1lc3BhY2V8fHQuX25hbWVzcGFjZVByZWZpeCE9PXIuX25hbWVzcGFjZVByZWZpeHx8dC5fbG9jYWxOYW1lIT09ci5fbG9jYWxOYW1lfHx0Ll9hdHRyaWJ1dGVMaXN0Lmxlbmd0aCE9PXIuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoKXJldHVybiExfWVsc2UgaWYoby5HdWFyZC5pc0F0dHJOb2RlKHQpJiZvLkd1YXJkLmlzQXR0ck5vZGUocikpe2lmKHQuX25hbWVzcGFjZSE9PXIuX25hbWVzcGFjZXx8dC5fbG9jYWxOYW1lIT09ci5fbG9jYWxOYW1lfHx0Ll92YWx1ZSE9PXIuX3ZhbHVlKXJldHVybiExfWVsc2UgaWYoby5HdWFyZC5pc1Byb2Nlc3NpbmdJbnN0cnVjdGlvbk5vZGUodCkmJm8uR3VhcmQuaXNQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob2RlKHIpKXtpZih0Ll90YXJnZXQhPT1yLl90YXJnZXR8fHQuX2RhdGEhPT1yLl9kYXRhKXJldHVybiExfWVsc2UgaWYoby5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKHQpJiZvLkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUocikmJnQuX2RhdGEhPT1yLl9kYXRhKXJldHVybiExO2lmKG8uR3VhcmQuaXNFbGVtZW50Tm9kZSh0KSYmby5HdWFyZC5pc0VsZW1lbnROb2RlKHIpKXt2YXIgbD17fTt0cnl7Zm9yKHZhciBjPW4odC5fYXR0cmlidXRlTGlzdCksaD1jLm5leHQoKTshaC5kb25lO2g9Yy5uZXh0KCkpe2xbKGQ9aC52YWx1ZSkuX2xvY2FsTmFtZV09ZH19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7aCYmIWguZG9uZSYmKGE9Yy5yZXR1cm4pJiZhLmNhbGwoYyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXRyeXtmb3IodmFyIHA9bihyLl9hdHRyaWJ1dGVMaXN0KSxmPXAubmV4dCgpOyFmLmRvbmU7Zj1wLm5leHQoKSl7dmFyIGQsbT1mLnZhbHVlO2lmKCEoZD1sW20uX2xvY2FsTmFtZV0pKXJldHVybiExO2lmKCFlKGQsbSkpcmV0dXJuITF9fWNhdGNoKGUpe3M9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2YmJiFmLmRvbmUmJih1PXAucmV0dXJuKSYmdS5jYWxsKHApfWZpbmFsbHl7aWYocyl0aHJvdyBzLmVycm9yfX19aWYodC5fY2hpbGRyZW4uc2l6ZSE9PXIuX2NoaWxkcmVuLnNpemUpcmV0dXJuITE7Zm9yKHZhciB5PXQuX2NoaWxkcmVuW1N5bWJvbC5pdGVyYXRvcl0oKSx2PXIuX2NoaWxkcmVuW1N5bWJvbC5pdGVyYXRvcl0oKSxfPXkubmV4dCgpLGc9di5uZXh0KCk7IV8uZG9uZSYmIWcuZG9uZTspe2lmKCFlKF8udmFsdWUsZy52YWx1ZSkpcmV0dXJuITE7Xz15Lm5leHQoKSxnPXYubmV4dCgpfXJldHVybiEwfSx0Lm5vZGVfbGlzdE9mRWxlbWVudHNXaXRoUXVhbGlmaWVkTmFtZT1mdW5jdGlvbihlLHQpe3JldHVyblwiKlwiPT09ZT9zLmNyZWF0ZV9odG1sQ29sbGVjdGlvbih0KTpcImh0bWxcIj09PXQuX25vZGVEb2N1bWVudC5fdHlwZT9zLmNyZWF0ZV9odG1sQ29sbGVjdGlvbih0LChmdW5jdGlvbih0KXtyZXR1cm4gdC5fbmFtZXNwYWNlPT09YS5uYW1lc3BhY2UuSFRNTCYmdC5fcXVhbGlmaWVkTmFtZT09PWUudG9Mb3dlckNhc2UoKXx8dC5fbmFtZXNwYWNlIT09YS5uYW1lc3BhY2UuSFRNTCYmdC5fcXVhbGlmaWVkTmFtZT09PWV9KSk6cy5jcmVhdGVfaHRtbENvbGxlY3Rpb24odCwoZnVuY3Rpb24odCl7cmV0dXJuIHQuX3F1YWxpZmllZE5hbWU9PT1lfSkpfSx0Lm5vZGVfbGlzdE9mRWxlbWVudHNXaXRoTmFtZXNwYWNlPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cIlwiPT09ZSYmKGU9bnVsbCksXCIqXCI9PT1lJiZcIipcIj09PXQ/cy5jcmVhdGVfaHRtbENvbGxlY3Rpb24ocik6XCIqXCI9PT1lP3MuY3JlYXRlX2h0bWxDb2xsZWN0aW9uKHIsKGZ1bmN0aW9uKGUpe3JldHVybiBlLl9sb2NhbE5hbWU9PT10fSkpOlwiKlwiPT09dD9zLmNyZWF0ZV9odG1sQ29sbGVjdGlvbihyLChmdW5jdGlvbih0KXtyZXR1cm4gdC5fbmFtZXNwYWNlPT09ZX0pKTpzLmNyZWF0ZV9odG1sQ29sbGVjdGlvbihyLChmdW5jdGlvbihyKXtyZXR1cm4gci5fbG9jYWxOYW1lPT09dCYmci5fbmFtZXNwYWNlPT09ZX0pKX0sdC5ub2RlX2xpc3RPZkVsZW1lbnRzV2l0aENsYXNzTmFtZXM9ZnVuY3Rpb24oZSx0KXt2YXIgcj11Lm9yZGVyZWRTZXRfcGFyc2UoZSk7aWYoMD09PXIuc2l6ZSlyZXR1cm4gcy5jcmVhdGVfaHRtbENvbGxlY3Rpb24odCwoZnVuY3Rpb24oKXtyZXR1cm4hMX0pKTt2YXIgbj1cInF1aXJrc1wiIT09dC5fbm9kZURvY3VtZW50Ll9tb2RlO3JldHVybiBzLmNyZWF0ZV9odG1sQ29sbGVjdGlvbih0LChmdW5jdGlvbihlKXt2YXIgdD1lLmNsYXNzTGlzdDtyZXR1cm4gdS5vcmRlcmVkU2V0X2NvbnRhaW5zKHQuX3Rva2VuU2V0LHIsbil9KSl9LHQubm9kZV9sb2NhdGVBTmFtZXNwYWNlUHJlZml4PWZ1bmN0aW9uIGUodCxyKXtpZih0Ll9uYW1lc3BhY2U9PT1yJiZudWxsIT09dC5fbmFtZXNwYWNlUHJlZml4KXJldHVybiB0Ll9uYW1lc3BhY2VQcmVmaXg7Zm9yKHZhciBuPTA7bjx0Ll9hdHRyaWJ1dGVMaXN0Lmxlbmd0aDtuKyspe3ZhciBpPXQuX2F0dHJpYnV0ZUxpc3Rbbl07aWYoXCJ4bWxuc1wiPT09aS5fbmFtZXNwYWNlUHJlZml4JiZpLl92YWx1ZT09PXIpcmV0dXJuIGkuX2xvY2FsTmFtZX1yZXR1cm4gdC5fcGFyZW50JiZvLkd1YXJkLmlzRWxlbWVudE5vZGUodC5fcGFyZW50KT9lKHQuX3BhcmVudCxyKTpudWxsfSx0Lm5vZGVfbG9jYXRlQU5hbWVzcGFjZT1mdW5jdGlvbiBlKHQscil7aWYoby5HdWFyZC5pc0VsZW1lbnROb2RlKHQpKXtpZihudWxsIT09dC5fbmFtZXNwYWNlJiZ0Ll9uYW1lc3BhY2VQcmVmaXg9PT1yKXJldHVybiB0Ll9uYW1lc3BhY2U7Zm9yKHZhciBuPTA7bjx0Ll9hdHRyaWJ1dGVMaXN0Lmxlbmd0aDtuKyspe3ZhciBpPXQuX2F0dHJpYnV0ZUxpc3Rbbl07aWYoaS5fbmFtZXNwYWNlPT09YS5uYW1lc3BhY2UuWE1MTlMmJlwieG1sbnNcIj09PWkuX25hbWVzcGFjZVByZWZpeCYmaS5fbG9jYWxOYW1lPT09cilyZXR1cm4gaS5fdmFsdWV8fG51bGw7aWYobnVsbD09PXImJmkuX25hbWVzcGFjZT09PWEubmFtZXNwYWNlLlhNTE5TJiZudWxsPT09aS5fbmFtZXNwYWNlUHJlZml4JiZcInhtbG5zXCI9PT1pLl9sb2NhbE5hbWUpcmV0dXJuIGkuX3ZhbHVlfHxudWxsfXJldHVybiBudWxsPT09dC5wYXJlbnRFbGVtZW50P251bGw6ZSh0LnBhcmVudEVsZW1lbnQscil9cmV0dXJuIG8uR3VhcmQuaXNEb2N1bWVudE5vZGUodCk/bnVsbD09PXQuZG9jdW1lbnRFbGVtZW50P251bGw6ZSh0LmRvY3VtZW50RWxlbWVudCxyKTpvLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0KXx8by5HdWFyZC5pc0RvY3VtZW50RnJhZ21lbnROb2RlKHQpP251bGw6by5HdWFyZC5pc0F0dHJOb2RlKHQpP251bGw9PT10Ll9lbGVtZW50P251bGw6ZSh0Ll9lbGVtZW50LHIpOnQuX3BhcmVudCYmby5HdWFyZC5pc0VsZW1lbnROb2RlKHQuX3BhcmVudCk/ZSh0Ll9wYXJlbnQscik6bnVsbH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDYpLG89cigzKSxhPXIoOSkscz1yKDI5KSx1PXIoMTcpLGw9cigxMDcpLGM9cigzNyk7dC50ZXh0X2NvbnRpZ3VvdXNUZXh0Tm9kZXM9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLChyPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7Zm9yKHZhciByPWU7ciYmby5HdWFyZC5pc1RleHROb2RlKHIuX3ByZXZpb3VzU2libGluZyk7KXI9ci5fcHJldmlvdXNTaWJsaW5nO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7aWYociYmIXQmJnI9PT1lJiYocj1vLkd1YXJkLmlzVGV4dE5vZGUoci5fbmV4dFNpYmxpbmcpP3IuX25leHRTaWJsaW5nOm51bGwpLG51bGw9PT1yKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBuPXtkb25lOiExLHZhbHVlOnJ9O3JldHVybiByPW8uR3VhcmQuaXNUZXh0Tm9kZShyLl9uZXh0U2libGluZyk/ci5fbmV4dFNpYmxpbmc6bnVsbCxufX19LHJ9LHQudGV4dF9jb250aWd1b3VzRXhjbHVzaXZlVGV4dE5vZGVzPWZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSwocj17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe2Zvcih2YXIgcj1lO3ImJm8uR3VhcmQuaXNFeGNsdXNpdmVUZXh0Tm9kZShyLl9wcmV2aW91c1NpYmxpbmcpOylyPXIuX3ByZXZpb3VzU2libGluZztyZXR1cm57bmV4dDpmdW5jdGlvbigpe2lmKHImJiF0JiZyPT09ZSYmKHI9by5HdWFyZC5pc0V4Y2x1c2l2ZVRleHROb2RlKHIuX25leHRTaWJsaW5nKT9yLl9uZXh0U2libGluZzpudWxsKSxudWxsPT09cilyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfTt2YXIgbj17ZG9uZTohMSx2YWx1ZTpyfTtyZXR1cm4gcj1vLkd1YXJkLmlzRXhjbHVzaXZlVGV4dE5vZGUoci5fbmV4dFNpYmxpbmcpP3IuX25leHRTaWJsaW5nOm51bGwsbn19fSxyfSx0LnRleHRfZGVzY2VuZGFudFRleHRDb250ZW50PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cIlwiLHI9dS50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUoZSwhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIG8uR3VhcmQuaXNUZXh0Tm9kZShlKX0pKTtudWxsIT09cjspdCs9ci5fZGF0YSxyPXUudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUoZSxyLCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gby5HdWFyZC5pc1RleHROb2RlKGUpfSkpO3JldHVybiB0fSx0LnRleHRfc3BsaXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixvLGg9ZS5fZGF0YS5sZW5ndGg7aWYodD5oKXRocm93IG5ldyBhLkluZGV4U2l6ZUVycm9yO3ZhciBwPWgtdCxmPWwuY2hhcmFjdGVyRGF0YV9zdWJzdHJpbmdEYXRhKGUsdCxwKSxkPXMuY3JlYXRlX3RleHQoZS5fbm9kZURvY3VtZW50LGYpLG09ZS5fcGFyZW50O2lmKG51bGwhPT1tKXtjLm11dGF0aW9uX2luc2VydChkLG0sZS5fbmV4dFNpYmxpbmcpO3RyeXtmb3IodmFyIHk9bihpLmRvbS5yYW5nZUxpc3QpLHY9eS5uZXh0KCk7IXYuZG9uZTt2PXkubmV4dCgpKXt2YXIgXz12LnZhbHVlO18uX3N0YXJ0WzBdPT09ZSYmXy5fc3RhcnRbMV0+dCYmKF8uX3N0YXJ0WzBdPWQsXy5fc3RhcnRbMV0tPXQpLF8uX2VuZFswXT09PWUmJl8uX2VuZFsxXT50JiYoXy5fZW5kWzBdPWQsXy5fZW5kWzFdLT10KTt2YXIgZz11LnRyZWVfaW5kZXgoZSk7Xy5fc3RhcnRbMF09PT1tJiZfLl9zdGFydFsxXT09PWcrMSYmXy5fc3RhcnRbMV0rKyxfLl9lbmRbMF09PT1tJiZfLl9lbmRbMV09PT1nKzEmJl8uX2VuZFsxXSsrfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXt2JiYhdi5kb25lJiYobz15LnJldHVybikmJm8uY2FsbCh5KX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19fXJldHVybiBsLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEoZSx0LHAsXCJcIiksZH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cig0MSksbz1yKDI0KSxhPXIoNDgpLHM9W10uam9pbix1PWkhPU9iamVjdCxsPWEoXCJqb2luXCIsXCIsXCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOnV8fCFsfSx7am9pbjpmdW5jdGlvbihlKXtyZXR1cm4gcy5jYWxsKG8odGhpcyksdm9pZCAwPT09ZT9cIixcIjplKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNCksaT1yKDgzKSxvPVN0cmluZy5mcm9tQ2hhckNvZGUsYT1TdHJpbmcuZnJvbUNvZGVQb2ludDtuKHt0YXJnZXQ6XCJTdHJpbmdcIixzdGF0OiEwLGZvcmNlZDohIWEmJjEhPWEubGVuZ3RofSx7ZnJvbUNvZGVQb2ludDpmdW5jdGlvbihlKXtmb3IodmFyIHQscj1bXSxuPWFyZ3VtZW50cy5sZW5ndGgsYT0wO24+YTspe2lmKHQ9K2FyZ3VtZW50c1thKytdLGkodCwxMTE0MTExKSE9PXQpdGhyb3cgUmFuZ2VFcnJvcih0K1wiIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnRcIik7ci5wdXNoKHQ8NjU1MzY/byh0KTpvKDU1Mjk2KygodC09NjU1MzYpPj4xMCksdCUxMDI0KzU2MzIwKSl9cmV0dXJuIHIuam9pbihcIlwiKX19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDExMSksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLl9vcHRpb25zPXtza2lwV2hpdGVzcGFjZU9ubHlUZXh0OiExfSx0aGlzLmVycj17bGluZTotMSxjb2w6LTEsaW5kZXg6LTEsc3RyOlwiXCJ9LHRoaXMuX3N0cj1lLHRoaXMuX2luZGV4PTAsdGhpcy5fbGVuZ3RoPWUubGVuZ3RoLHQmJih0aGlzLl9vcHRpb25zLnNraXBXaGl0ZXNwYWNlT25seVRleHQ9dC5za2lwV2hpdGVzcGFjZU9ubHlUZXh0fHwhMSl9cmV0dXJuIGUucHJvdG90eXBlLm5leHRUb2tlbj1mdW5jdGlvbigpe2lmKHRoaXMuZW9mKCkpcmV0dXJue3R5cGU6aS5Ub2tlblR5cGUuRU9GfTt2YXIgdD10aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI8XCIpP3RoaXMub3BlbkJyYWNrZXQoKTp0aGlzLnRleHQoKTtyZXR1cm4gdGhpcy5fb3B0aW9ucy5za2lwV2hpdGVzcGFjZU9ubHlUZXh0JiZ0LnR5cGU9PT1pLlRva2VuVHlwZS5UZXh0JiZlLmlzV2hpdGVTcGFjZVRva2VuKHQpJiYodD10aGlzLm5leHRUb2tlbigpKSx0fSxlLnByb3RvdHlwZS5vcGVuQnJhY2tldD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI/XCIpP3RoaXMuc2tpcElmU3RhcnRzV2l0aChcInhtbFwiKT9lLmlzU3BhY2UodGhpcy5fc3RyW3RoaXMuX2luZGV4XSk/dGhpcy5kZWNsYXJhdGlvbigpOih0aGlzLnNlZWsoLTMpLHRoaXMucGkoKSk6dGhpcy5waSgpOnRoaXMuc2tpcElmU3RhcnRzV2l0aChcIiFcIik/dGhpcy5za2lwSWZTdGFydHNXaXRoKFwiLS1cIik/dGhpcy5jb21tZW50KCk6dGhpcy5za2lwSWZTdGFydHNXaXRoKFwiW0NEQVRBW1wiKT90aGlzLmNkYXRhKCk6dGhpcy5za2lwSWZTdGFydHNXaXRoKFwiRE9DVFlQRVwiKT90aGlzLmRvY3R5cGUoKTp2b2lkIHRoaXMudGhyb3dFcnJvcihcIkludmFsaWQgJyEnIGluIG9wZW5pbmcgdGFnLlwiKTp0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCIvXCIpP3RoaXMuY2xvc2VUYWcoKTp0aGlzLm9wZW5UYWcoKX0sZS5wcm90b3R5cGUuZGVjbGFyYXRpb249ZnVuY3Rpb24oKXtmb3IodmFyIGU9XCJcIix0PVwiXCIscj1cIlwiOyF0aGlzLmVvZigpOyl7aWYodGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI/PlwiKSlyZXR1cm57dHlwZTppLlRva2VuVHlwZS5EZWNsYXJhdGlvbix2ZXJzaW9uOmUsZW5jb2Rpbmc6dCxzdGFuZGFsb25lOnJ9O3ZhciBvPW4odGhpcy5hdHRyaWJ1dGUoKSwyKSxhPW9bMF0scz1vWzFdO1widmVyc2lvblwiPT09YT9lPXM6XCJlbmNvZGluZ1wiPT09YT90PXM6XCJzdGFuZGFsb25lXCI9PT1hP3I9czp0aGlzLnRocm93RXJyb3IoXCJJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBcIithKX10aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIGRlY2xhcmF0aW9uIGVuZCBzeW1ib2wgYD8+YFwiKX0sZS5wcm90b3R5cGUuZG9jdHlwZT1mdW5jdGlvbigpe3ZhciBlPVwiXCIsdD1cIlwiO3RoaXMuc2tpcFNwYWNlKCk7dmFyIHI9dGhpcy50YWtlVW50aWwyKFwiW1wiLFwiPlwiLCEwKTtyZXR1cm4gdGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCJQVUJMSUNcIik/KGU9dGhpcy5xdW90ZWRTdHJpbmcoKSx0PXRoaXMucXVvdGVkU3RyaW5nKCkpOnRoaXMuc2tpcElmU3RhcnRzV2l0aChcIlNZU1RFTVwiKSYmKHQ9dGhpcy5xdW90ZWRTdHJpbmcoKSksdGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCJbXCIpJiYodGhpcy5za2lwVW50aWwoXCJdXCIpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIl1cIil8fHRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgZW5kIGJyYWNrZXQgb2YgRFREIGludGVybmFsIHN1YnNldFwiKSksdGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI+XCIpfHx0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIGRvY3R5cGUgZW5kIHN5bWJvbCBgPmBcIikse3R5cGU6aS5Ub2tlblR5cGUuRG9jVHlwZSxuYW1lOnIscHViSWQ6ZSxzeXNJZDp0fX0sZS5wcm90b3R5cGUucGk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnRha2VVbnRpbFN0YXJ0c1dpdGgoXCI/PlwiLCEwKTtpZih0aGlzLmVvZigpJiZ0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gZW5kIHN5bWJvbCBgPz5gXCIpLHRoaXMuc2tpcFNwYWNlKCksdGhpcy5za2lwSWZTdGFydHNXaXRoKFwiPz5cIikpcmV0dXJue3R5cGU6aS5Ub2tlblR5cGUuUEksdGFyZ2V0OmUsZGF0YTpcIlwifTt2YXIgdD10aGlzLnRha2VVbnRpbFN0YXJ0c1dpdGgoXCI/PlwiKTtyZXR1cm4gdGhpcy5lb2YoKSYmdGhpcy50aHJvd0Vycm9yKFwiTWlzc2luZyBwcm9jZXNzaW5nIGluc3RydWN0aW9uIGVuZCBzeW1ib2wgYD8+YFwiKSx0aGlzLnNlZWsoMikse3R5cGU6aS5Ub2tlblR5cGUuUEksdGFyZ2V0OmUsZGF0YTp0fX0sZS5wcm90b3R5cGUudGV4dD1mdW5jdGlvbigpe3ZhciBlPXRoaXMudGFrZVVudGlsKFwiPFwiKTtyZXR1cm57dHlwZTppLlRva2VuVHlwZS5UZXh0LGRhdGE6ZX19LGUucHJvdG90eXBlLmNvbW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnRha2VVbnRpbFN0YXJ0c1dpdGgoXCItLVxceDNlXCIpO3JldHVybiB0aGlzLmVvZigpJiZ0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIGNvbW1lbnQgZW5kIHN5bWJvbCBgLS1cXHgzZWBcIiksdGhpcy5zZWVrKDMpLHt0eXBlOmkuVG9rZW5UeXBlLkNvbW1lbnQsZGF0YTplfX0sZS5wcm90b3R5cGUuY2RhdGE9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnRha2VVbnRpbFN0YXJ0c1dpdGgoXCJdXT5cIik7cmV0dXJuIHRoaXMuZW9mKCkmJnRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgQ0RBVEEgZW5kIHN5bWJvbCBgXT5gXCIpLHRoaXMuc2VlaygzKSx7dHlwZTppLlRva2VuVHlwZS5DREFUQSxkYXRhOmV9fSxlLnByb3RvdHlwZS5vcGVuVGFnPWZ1bmN0aW9uKCl7dGhpcy5za2lwU3BhY2UoKTt2YXIgZT10aGlzLnRha2VVbnRpbDIoXCI+XCIsXCIvXCIsITApO2lmKHRoaXMuc2tpcFNwYWNlKCksdGhpcy5za2lwSWZTdGFydHNXaXRoKFwiPlwiKSlyZXR1cm57dHlwZTppLlRva2VuVHlwZS5FbGVtZW50LG5hbWU6ZSxhdHRyaWJ1dGVzOltdLHNlbGZDbG9zaW5nOiExfTtpZih0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCIvPlwiKSlyZXR1cm57dHlwZTppLlRva2VuVHlwZS5FbGVtZW50LG5hbWU6ZSxhdHRyaWJ1dGVzOltdLHNlbGZDbG9zaW5nOiEwfTtmb3IodmFyIHQ9W107IXRoaXMuZW9mKCk7KXtpZih0aGlzLnNraXBTcGFjZSgpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIj5cIikpcmV0dXJue3R5cGU6aS5Ub2tlblR5cGUuRWxlbWVudCxuYW1lOmUsYXR0cmlidXRlczp0LHNlbGZDbG9zaW5nOiExfTtpZih0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCIvPlwiKSlyZXR1cm57dHlwZTppLlRva2VuVHlwZS5FbGVtZW50LG5hbWU6ZSxhdHRyaWJ1dGVzOnQsc2VsZkNsb3Npbmc6ITB9O3ZhciByPXRoaXMuYXR0cmlidXRlKCk7dC5wdXNoKHIpfXRoaXMudGhyb3dFcnJvcihcIk1pc3Npbmcgb3BlbmluZyBlbGVtZW50IHRhZyBlbmQgc3ltYm9sIGA+YFwiKX0sZS5wcm90b3R5cGUuY2xvc2VUYWc9ZnVuY3Rpb24oKXt0aGlzLnNraXBTcGFjZSgpO3ZhciBlPXRoaXMudGFrZVVudGlsKFwiPlwiLCEwKTtyZXR1cm4gdGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI+XCIpfHx0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIGNsb3NpbmcgZWxlbWVudCB0YWcgZW5kIHN5bWJvbCBgPmBcIikse3R5cGU6aS5Ub2tlblR5cGUuQ2xvc2luZ1RhZyxuYW1lOmV9fSxlLnByb3RvdHlwZS5hdHRyaWJ1dGU9ZnVuY3Rpb24oKXt0aGlzLnNraXBTcGFjZSgpO3ZhciBlPXRoaXMudGFrZVVudGlsKFwiPVwiLCEwKTtyZXR1cm4gdGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI9XCIpfHx0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIGVxdWFscyBzaWduIGJlZm9yZSBhdHRyaWJ1dGUgdmFsdWVcIiksW2UsdGhpcy5xdW90ZWRTdHJpbmcoKV19LGUucHJvdG90eXBlLnF1b3RlZFN0cmluZz1mdW5jdGlvbigpe3RoaXMuc2tpcFNwYWNlKCk7dmFyIHQ9dGhpcy50YWtlKDEpO2UuaXNRdW90ZSh0KXx8dGhpcy50aHJvd0Vycm9yKFwiTWlzc2luZyBzdGFydCBxdW90ZSBjaGFyYWN0ZXIgYmVmb3JlIHF1b3RlZCB2YWx1ZVwiKTt2YXIgcj10aGlzLnRha2VVbnRpbCh0KTtyZXR1cm4gdGhpcy5za2lwSWZTdGFydHNXaXRoKHQpfHx0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIGVuZCBxdW90ZSBjaGFyYWN0ZXIgYWZ0ZXIgcXVvdGVkIHZhbHVlXCIpLHJ9LGUucHJvdG90eXBlLmVvZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbmRleD49dGhpcy5fbGVuZ3RofSxlLnByb3RvdHlwZS5za2lwSWZTdGFydHNXaXRoPWZ1bmN0aW9uKGUpe3ZhciB0PWUubGVuZ3RoO2lmKDE9PT10KXJldHVybiB0aGlzLl9zdHJbdGhpcy5faW5kZXhdPT09ZSYmKHRoaXMuX2luZGV4KyssITApO2Zvcih2YXIgcj0wO3I8dDtyKyspaWYodGhpcy5fc3RyW3RoaXMuX2luZGV4K3JdIT09ZVtyXSlyZXR1cm4hMTtyZXR1cm4gdGhpcy5faW5kZXgrPXQsITB9LGUucHJvdG90eXBlLnNlZWs9ZnVuY3Rpb24oZSl7dGhpcy5faW5kZXgrPWUsdGhpcy5faW5kZXg8MCYmKHRoaXMuX2luZGV4PTApLHRoaXMuX2luZGV4PnRoaXMuX2xlbmd0aCYmKHRoaXMuX2luZGV4PXRoaXMuX2xlbmd0aCl9LGUucHJvdG90eXBlLnNraXBTcGFjZT1mdW5jdGlvbigpe2Zvcig7IXRoaXMuZW9mKCkmJmUuaXNTcGFjZSh0aGlzLl9zdHJbdGhpcy5faW5kZXhdKTspdGhpcy5faW5kZXgrK30sZS5wcm90b3R5cGUudGFrZT1mdW5jdGlvbihlKXtpZigxPT09ZSlyZXR1cm4gdGhpcy5fc3RyW3RoaXMuX2luZGV4KytdO3ZhciB0PXRoaXMuX2luZGV4O3JldHVybiB0aGlzLnNlZWsoZSksdGhpcy5fc3RyLnNsaWNlKHQsdGhpcy5faW5kZXgpfSxlLnByb3RvdHlwZS50YWtlVW50aWw9ZnVuY3Rpb24odCxyKXt2b2lkIDA9PT1yJiYocj0hMSk7Zm9yKHZhciBuPXRoaXMuX2luZGV4O3RoaXMuX2luZGV4PHRoaXMuX2xlbmd0aDspe3ZhciBpPXRoaXMuX3N0clt0aGlzLl9pbmRleF07aWYoaT09PXR8fHImJmUuaXNTcGFjZShpKSlicmVhazt0aGlzLl9pbmRleCsrfXJldHVybiB0aGlzLl9zdHIuc2xpY2Uobix0aGlzLl9pbmRleCl9LGUucHJvdG90eXBlLnRha2VVbnRpbDI9ZnVuY3Rpb24odCxyLG4pe3ZvaWQgMD09PW4mJihuPSExKTtmb3IodmFyIGk9dGhpcy5faW5kZXg7dGhpcy5faW5kZXg8dGhpcy5fbGVuZ3RoOyl7dmFyIG89dGhpcy5fc3RyW3RoaXMuX2luZGV4XTtpZihvPT09dHx8bz09PXJ8fG4mJmUuaXNTcGFjZShvKSlicmVhazt0aGlzLl9pbmRleCsrfXJldHVybiB0aGlzLl9zdHIuc2xpY2UoaSx0aGlzLl9pbmRleCl9LGUucHJvdG90eXBlLnRha2VVbnRpbFN0YXJ0c1dpdGg9ZnVuY3Rpb24odCxyKXt2b2lkIDA9PT1yJiYocj0hMSk7Zm9yKHZhciBuPXRoaXMuX2luZGV4LGk9dC5sZW5ndGg7dGhpcy5faW5kZXg8dGhpcy5fbGVuZ3RoOyl7Zm9yKHZhciBvPSEwLGE9MDthPGk7YSsrKXt2YXIgcz10aGlzLl9zdHJbdGhpcy5faW5kZXgrYV0sdT10W2FdO2lmKHImJmUuaXNTcGFjZShzKSlyZXR1cm4gdGhpcy5fc3RyLnNsaWNlKG4sdGhpcy5faW5kZXgpO2lmKHMhPT11KXt0aGlzLl9pbmRleCsrLG89ITE7YnJlYWt9fWlmKG8pcmV0dXJuIHRoaXMuX3N0ci5zbGljZShuLHRoaXMuX2luZGV4KX1yZXR1cm4gdGhpcy5faW5kZXg9dGhpcy5fbGVuZ3RoLHRoaXMuX3N0ci5zbGljZShuKX0sZS5wcm90b3R5cGUuc2tpcFVudGlsPWZ1bmN0aW9uKGUpe2Zvcig7dGhpcy5faW5kZXg8dGhpcy5fbGVuZ3RoOyl7aWYodGhpcy5fc3RyW3RoaXMuX2luZGV4XT09PWUpYnJlYWs7dGhpcy5faW5kZXgrK319LGUuaXNXaGl0ZVNwYWNlVG9rZW49ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuZGF0YSxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07aWYoXCIgXCIhPT1uJiZcIlxcblwiIT09biYmXCJcXHJcIiE9PW4mJlwiXFx0XCIhPT1uJiZcIlxcZlwiIT09bilyZXR1cm4hMX1yZXR1cm4hMH0sZS5pc1NwYWNlPWZ1bmN0aW9uKGUpe3JldHVyblwiIFwiPT09ZXx8XCJcXG5cIj09PWV8fFwiXFxyXCI9PT1lfHxcIlxcdFwiPT09ZX0sZS5pc1F1b3RlPWZ1bmN0aW9uKGUpe3JldHVybidcIic9PT1lfHxcIidcIj09PWV9LGUucHJvdG90eXBlLnRocm93RXJyb3I9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PS9cXHJcXG58XFxyfFxcbi9nLHI9bnVsbCxuPTAsaT0wLG89dGhpcy5fc3RyLmxlbmd0aDtudWxsIT09KHI9dC5leGVjKHRoaXMuX3N0cikpJiZudWxsIT09cjspaWYobisrLHIuaW5kZXg8dGhpcy5faW5kZXgmJihpPXQubGFzdEluZGV4KSxyLmluZGV4PnRoaXMuX2luZGV4KXtvPXIuaW5kZXg7YnJlYWt9dGhyb3cgdGhpcy5lcnI9e2xpbmU6bixjb2w6dGhpcy5faW5kZXgtaSxpbmRleDp0aGlzLl9pbmRleCxzdHI6dGhpcy5fc3RyLnN1YnN0cmluZyhpLG8pfSxuZXcgRXJyb3IoZStcIlxcbkluZGV4OiBcIit0aGlzLmVyci5pbmRleCtcIlxcbkxuOiBcIit0aGlzLmVyci5saW5lK1wiLCBDb2w6IFwiK3RoaXMuZXJyLmNvbCtcIlxcbklucHV0OiBcIit0aGlzLmVyci5zdHIpfSxlLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2luZGV4PTAse25leHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm5leHRUb2tlbigpO3JldHVybiBlLnR5cGU9PT1pLlRva2VuVHlwZS5FT0Y/e2RvbmU6ITAsdmFsdWU6bnVsbH06e2RvbmU6ITEsdmFsdWU6ZX19LmJpbmQodGhpcyl9fSxlfSgpO3QuWE1MU3RyaW5nTGV4ZXI9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzkpO2UuZXhwb3J0cz1uZXcgbih7aW5jbHVkZTpbcigxODIpXX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOSk7ZS5leHBvcnRzPW5ldyBuKHtpbmNsdWRlOltyKDExMyldLGltcGxpY2l0OltyKDI4OSkscigyOTApLHIoMjkxKSxyKDI5MildfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDkxKSxpPXIoMSksbz1yKDMpLGE9cig3Nykscz1yKDEwOSk7ZnVuY3Rpb24gdShlLHQpe3ZhciByPWModm9pZCAwPT09ZXx8bChlKT9lOm4uRGVmYXVsdEJ1aWxkZXJPcHRpb25zKSxpPWwoZSk/dDplLG89cy5jcmVhdGVEb2N1bWVudCgpO2gobyxyKTt2YXIgdT1uZXcgYS5YTUxCdWlsZGVySW1wbChvKTtyZXR1cm4gdm9pZCAwIT09aSYmdS5lbGUoaSksdX1mdW5jdGlvbiBsKGUpe2lmKCFpLmlzUGxhaW5PYmplY3QoZSkpcmV0dXJuITE7Zm9yKHZhciB0IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSYmIW4uWE1MQnVpbGRlck9wdGlvbktleXMuaGFzKHQpKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGMoZSl7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciB0PWkuYXBwbHlEZWZhdWx0cyhlLG4uRGVmYXVsdEJ1aWxkZXJPcHRpb25zKTtpZigwPT09dC5jb252ZXJ0LmF0dC5sZW5ndGh8fDA9PT10LmNvbnZlcnQuaW5zLmxlbmd0aHx8MD09PXQuY29udmVydC50ZXh0Lmxlbmd0aHx8MD09PXQuY29udmVydC5jZGF0YS5sZW5ndGh8fDA9PT10LmNvbnZlcnQuY29tbWVudC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiSlMgb2JqZWN0IGNvbnZlcnRlciBzdHJpbmdzIGNhbm5vdCBiZSB6ZXJvIGxlbmd0aC5cIik7cmV0dXJuIHR9ZnVuY3Rpb24gaChlLHQscil7dmFyIG49ZTtuLl94bWxCdWlsZGVyT3B0aW9ucz10LG4uX2lzRnJhZ21lbnQ9cn10LmJ1aWxkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1jKGwoZSk/ZTpuLkRlZmF1bHRCdWlsZGVyT3B0aW9ucykscz1vLkd1YXJkLmlzTm9kZShlKXx8aS5pc0FycmF5KGUpP2U6dDtpZih2b2lkIDA9PT1zKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzLlwiKTtpZihpLmlzQXJyYXkocykpe2Zvcih2YXIgdT1bXSxoPTA7aDxzLmxlbmd0aDtoKyspe3ZhciBwPW5ldyBhLlhNTEJ1aWxkZXJJbXBsKHNbaF0pO3Auc2V0KHIpLHUucHVzaChwKX1yZXR1cm4gdX12YXIgZj1uZXcgYS5YTUxCdWlsZGVySW1wbChzKTtyZXR1cm4gZi5zZXQociksZn0sdC5jcmVhdGU9dSx0LmZyYWdtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHI9Yyh2b2lkIDA9PT1lfHxsKGUpP2U6bi5EZWZhdWx0QnVpbGRlck9wdGlvbnMpLGk9bChlKT90OmUsbz1zLmNyZWF0ZURvY3VtZW50KCk7aChvLHIsITApO3ZhciB1PW5ldyBhLlhNTEJ1aWxkZXJJbXBsKG8uY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKTtyZXR1cm4gdm9pZCAwIT09aSYmdS5lbGUoaSksdX0sdC5jb252ZXJ0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLGE7cmV0dXJuIGwoZSkmJnZvaWQgMCE9PXQ/KGk9ZSxvPXQsYT1yKTooaT1uLkRlZmF1bHRCdWlsZGVyT3B0aW9ucyxvPWUsYT10fHx2b2lkIDApLHUoaSxvKS5lbmQoYSl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cig3Nyk7dC5idWlsZGVyPW4uYnVpbGRlcix0LmNyZWF0ZT1uLmNyZWF0ZSx0LmZyYWdtZW50PW4uZnJhZ21lbnQsdC5jb252ZXJ0PW4uY29udmVydCx0LmNyZWF0ZUNCPW4uY3JlYXRlQ0IsdC5mcmFnbWVudENCPW4uZnJhZ21lbnRDQn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoMzEpLHIoMzIpLHIoMzMpLHIoMTkxKSxyKDE5MikscigxOTQpLHIoNjQpLHIoMTkpLHIoMTk4KSxyKDE5OSkscig4OSkscigyMDEpLHIoNjUpLHIoMjApLHIoNjYpLHIoMjIpLHIoMjMpO3ZhciBuPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxpPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoOTEpLGE9cigxKSxzPXIoMjE3KSx1PXIoMiksbD1yKDMpLGM9cigwKSxoPXIoMTA5KSxwPXIoNyksZj1yKDI3NiksZD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5fZG9tTm9kZT1lfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJub2RlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kb21Ob2RlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIm9wdGlvbnNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29wdGlvbnN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9vcHRpb25zPWEuYXBwbHlEZWZhdWx0cyhhLmFwcGx5RGVmYXVsdHModGhpcy5fb3B0aW9ucyxlLCEwKSxvLkRlZmF1bHRCdWlsZGVyT3B0aW9ucyksdGhpc30sZS5wcm90b3R5cGUuZWxlPWZ1bmN0aW9uKHQscixpKXt2YXIgbyxzLHUsbCxwLGQ7aWYoYS5pc09iamVjdCh0KSlyZXR1cm4gbmV3IGYuT2JqZWN0UmVhZGVyKHRoaXMuX29wdGlvbnMpLnBhcnNlKHRoaXMsdCk7aWYobnVsbCE9PXQmJi9eXFxzKjwvLnRlc3QodCkpcmV0dXJuIG5ldyBmLlhNTFJlYWRlcih0aGlzLl9vcHRpb25zKS5wYXJzZSh0aGlzLHQpO2lmKG51bGwhPT10JiYvXlxccypbXFx7XFxbXS8udGVzdCh0KSlyZXR1cm4gbmV3IGYuSlNPTlJlYWRlcih0aGlzLl9vcHRpb25zKS5wYXJzZSh0aGlzLHQpO2lmKG51bGwhPT10JiYvXihcXHMqfCgjLiopfCglLiopKSotLS0vLnRlc3QodCkpcmV0dXJuIG5ldyBmLllBTUxSZWFkZXIodGhpcy5fb3B0aW9ucykucGFyc2UodGhpcyx0KTtpZigobnVsbD09PXR8fGEuaXNTdHJpbmcodCkpJiZhLmlzU3RyaW5nKHIpKWw9KG89bihbdCxyLGldLDMpKVswXSxwPW9bMV0sZD1vWzJdO2Vsc2V7aWYobnVsbD09PXQpdGhyb3cgbmV3IEVycm9yKFwiRWxlbWVudCBuYW1lIGNhbm5vdCBiZSBudWxsLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7bD0ocz1uKFt2b2lkIDAsdCxhLmlzT2JqZWN0KHIpP3I6dm9pZCAwXSwzKSlbMF0scD1zWzFdLGQ9c1syXX1pZihkJiYoZD1hLmdldFZhbHVlKGQpKSxsPSh1PW4odGhpcy5fZXh0cmFjdE5hbWVzcGFjZShoLnNhbml0aXplSW5wdXQobCx0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpLGguc2FuaXRpemVJbnB1dChwLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCksITApLDIpKVswXSxwPXVbMV0sdm9pZCAwPT09bCl7dmFyIG09bihjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUocCksMSlbMF07bD10aGlzLm5vZGUubG9va3VwTmFtZXNwYWNlVVJJKG0pfXZhciB5PW51bGwhPWw/dGhpcy5fZG9jLmNyZWF0ZUVsZW1lbnROUyhsLHApOnRoaXMuX2RvYy5jcmVhdGVFbGVtZW50KHApO3RoaXMubm9kZS5hcHBlbmRDaGlsZCh5KTt2YXIgdj1uZXcgZSh5KSxfPXRoaXMuX2RvYy5kb2N0eXBlO2lmKHk9PT10aGlzLl9kb2MuZG9jdW1lbnRFbGVtZW50JiZudWxsIT09Xyl7dmFyIGc9dGhpcy5fZG9jLmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50VHlwZSh0aGlzLl9kb2MuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWUsXy5wdWJsaWNJZCxfLnN5c3RlbUlkKTt0aGlzLl9kb2MucmVwbGFjZUNoaWxkKGcsXyl9cmV0dXJuIGQmJiFhLmlzRW1wdHkoZCkmJnYuYXR0KGQpLHZ9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMudXAoKTtyZXR1cm4gZS5ub2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSksZX0sZS5wcm90b3R5cGUuYXR0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLHMsdSxmLGQsbT10aGlzO2lmKGEuaXNNYXAoZSl8fGEuaXNPYmplY3QoZSkpcmV0dXJuIGEuZm9yRWFjaE9iamVjdChlLChmdW5jdGlvbihlLHQpe3JldHVybiBtLmF0dChlLHQpfSksdGhpcyksdGhpcztpZihudWxsIT1lJiYoZT1hLmdldFZhbHVlKGUrXCJcIikpLG51bGwhPXQmJih0PWEuZ2V0VmFsdWUodCtcIlwiKSksbnVsbCE9ciYmKHI9YS5nZXRWYWx1ZShyK1wiXCIpKSxudWxsIT09ZSYmIWEuaXNTdHJpbmcoZSl8fCFhLmlzU3RyaW5nKHQpfHxudWxsIT09ciYmIWEuaXNTdHJpbmcocikpe2lmKCFhLmlzU3RyaW5nKGUpfHxudWxsIT10JiYhYS5pc1N0cmluZyh0KSl0aHJvdyBuZXcgRXJyb3IoXCJBdHRyaWJ1dGUgbmFtZSBhbmQgdmFsdWUgbm90IHNwZWNpZmllZC4gXCIrdGhpcy5fZGVidWdJbmZvKCkpO3U9KG89bihbdm9pZCAwLGUsdF0sMykpWzBdLGY9b1sxXSxkPW9bMl19ZWxzZSB1PShpPW4oW2UsdCxyXSwzKSlbMF0sZj1pWzFdLGQ9aVsyXTtpZih0aGlzLl9vcHRpb25zLmtlZXBOdWxsQXR0cmlidXRlcyYmbnVsbD09ZClkPVwiXCI7ZWxzZSBpZihudWxsPT1kKXJldHVybiB0aGlzO2lmKCFsLkd1YXJkLmlzRWxlbWVudE5vZGUodGhpcy5ub2RlKSl0aHJvdyBuZXcgRXJyb3IoXCJBbiBhdHRyaWJ1dGUgY2FuIG9ubHkgYmUgYXNzaWduZWQgdG8gYW4gZWxlbWVudCBub2RlLlwiKTt2YXIgeT10aGlzLm5vZGU7dT0ocz1uKHRoaXMuX2V4dHJhY3ROYW1lc3BhY2UodSxmLCExKSwyKSlbMF0sZj1zWzFdLGY9aC5zYW5pdGl6ZUlucHV0KGYsdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSx1PWguc2FuaXRpemVJbnB1dCh1LHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCksZD1oLnNhbml0aXplSW5wdXQoZCx0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpO3ZhciB2PW4oYy5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKGYpLDIpLF89dlswXSxnPXZbMV0sYj1uKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZSh5LnByZWZpeD95LnByZWZpeCtcIjpcIit5LmxvY2FsTmFtZTp5LmxvY2FsTmFtZSksMSlbMF0seD1udWxsO3JldHVyblwieG1sbnNcIj09PV8/KHU9cC5uYW1lc3BhY2UuWE1MTlMsbnVsbD09PXkubmFtZXNwYWNlVVJJJiZiPT09ZyYmKHg9ZCkpOm51bGw9PT1fJiZcInhtbG5zXCI9PT1nJiZudWxsPT09YiYmKHU9cC5uYW1lc3BhY2UuWE1MTlMseD1kKSxudWxsIT09eCYmKHRoaXMuX3VwZGF0ZU5hbWVzcGFjZSh4KSx5PXRoaXMubm9kZSksdm9pZCAwIT09dT95LnNldEF0dHJpYnV0ZU5TKHUsZixkKTp5LnNldEF0dHJpYnV0ZShmLGQpLHRoaXN9LGUucHJvdG90eXBlLnJlbW92ZUF0dD1mdW5jdGlvbihlLHQpe3ZhciByLG4saT10aGlzO2lmKCFsLkd1YXJkLmlzRWxlbWVudE5vZGUodGhpcy5ub2RlKSl0aHJvdyBuZXcgRXJyb3IoXCJBbiBhdHRyaWJ1dGUgY2FuIG9ubHkgYmUgcmVtb3ZlZCBmcm9tIGFuIGVsZW1lbnQgbm9kZS5cIik7aWYoZT1hLmdldFZhbHVlKGUpLHZvaWQgMCE9PXQmJih0PWEuZ2V0VmFsdWUodCkpLG51bGwhPT1lJiZ2b2lkIDA9PT10KW49ZTtlbHNle2lmKG51bGwhPT1lJiYhYS5pc1N0cmluZyhlKXx8dm9pZCAwPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJBdHRyaWJ1dGUgbmFtZXNwYWNlIG11c3QgYmUgYSBzdHJpbmcuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTtyPWUsbj10fXJldHVybiBhLmlzQXJyYXkobil8fGEuaXNTZXQobik/YS5mb3JFYWNoQXJyYXkobiwoZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PXI/aS5yZW1vdmVBdHQoZSk6aS5yZW1vdmVBdHQocixlKX0pLHRoaXMpOnZvaWQgMCE9PXI/KG49aC5zYW5pdGl6ZUlucHV0KG4sdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSxyPWguc2FuaXRpemVJbnB1dChyLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCksdGhpcy5ub2RlLnJlbW92ZUF0dHJpYnV0ZU5TKHIsbikpOihuPWguc2FuaXRpemVJbnB1dChuLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCksdGhpcy5ub2RlLnJlbW92ZUF0dHJpYnV0ZShuKSksdGhpc30sZS5wcm90b3R5cGUudHh0PWZ1bmN0aW9uKGUpe2lmKG51bGw9PWUpe2lmKCF0aGlzLl9vcHRpb25zLmtlZXBOdWxsTm9kZXMpcmV0dXJuIHRoaXM7ZT1cIlwifXZhciB0PXRoaXMuX2RvYy5jcmVhdGVUZXh0Tm9kZShoLnNhbml0aXplSW5wdXQoZSx0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpKTtyZXR1cm4gdGhpcy5ub2RlLmFwcGVuZENoaWxkKHQpLHRoaXN9LGUucHJvdG90eXBlLmNvbT1mdW5jdGlvbihlKXtpZihudWxsPT1lKXtpZighdGhpcy5fb3B0aW9ucy5rZWVwTnVsbE5vZGVzKXJldHVybiB0aGlzO2U9XCJcIn12YXIgdD10aGlzLl9kb2MuY3JlYXRlQ29tbWVudChoLnNhbml0aXplSW5wdXQoZSx0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpKTtyZXR1cm4gdGhpcy5ub2RlLmFwcGVuZENoaWxkKHQpLHRoaXN9LGUucHJvdG90eXBlLmRhdD1mdW5jdGlvbihlKXtpZihudWxsPT1lKXtpZighdGhpcy5fb3B0aW9ucy5rZWVwTnVsbE5vZGVzKXJldHVybiB0aGlzO2U9XCJcIn12YXIgdD10aGlzLl9kb2MuY3JlYXRlQ0RBVEFTZWN0aW9uKGguc2FuaXRpemVJbnB1dChlLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCkpO3JldHVybiB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodCksdGhpc30sZS5wcm90b3R5cGUuaW5zPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztpZih2b2lkIDA9PT10JiYodD1cIlwiKSxudWxsPT10KXtpZighdGhpcy5fb3B0aW9ucy5rZWVwTnVsbE5vZGVzKXJldHVybiB0aGlzO3Q9XCJcIn1pZihhLmlzQXJyYXkoZSl8fGEuaXNTZXQoZSkpYS5mb3JFYWNoQXJyYXkoZSwoZnVuY3Rpb24oZSl7dmFyIHQ9KGUrPVwiXCIpLmluZGV4T2YoXCIgXCIpLG49LTE9PT10P2U6ZS5zdWJzdHIoMCx0KSxpPS0xPT09dD9cIlwiOmUuc3Vic3RyKHQrMSk7ci5pbnMobixpKX0pLHRoaXMpO2Vsc2UgaWYoYS5pc01hcChlKXx8YS5pc09iamVjdChlKSlhLmZvckVhY2hPYmplY3QoZSwoZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5pbnMoZSx0KX0pLHRoaXMpO2Vsc2V7dmFyIG49dGhpcy5fZG9jLmNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihoLnNhbml0aXplSW5wdXQoZSx0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpLGguc2FuaXRpemVJbnB1dCh0LHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCkpO3RoaXMubm9kZS5hcHBlbmRDaGlsZChuKX1yZXR1cm4gdGhpc30sZS5wcm90b3R5cGUuZGVjPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9vcHRpb25zLnZlcnNpb249ZS52ZXJzaW9ufHxcIjEuMFwiLHRoaXMuX29wdGlvbnMuZW5jb2Rpbmc9ZS5lbmNvZGluZyx0aGlzLl9vcHRpb25zLnN0YW5kYWxvbmU9ZS5zdGFuZGFsb25lLHRoaXN9LGUucHJvdG90eXBlLmR0ZD1mdW5jdGlvbihlKXt2YXIgdD1oLnNhbml0aXplSW5wdXQoZSYmZS5uYW1lfHwodGhpcy5fZG9jLmRvY3VtZW50RWxlbWVudD90aGlzLl9kb2MuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWU6XCJST09UXCIpLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCkscj1oLnNhbml0aXplSW5wdXQoZSYmZS5wdWJJRHx8XCJcIix0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpLG49aC5zYW5pdGl6ZUlucHV0KGUmJmUuc3lzSUR8fFwiXCIsdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KTtpZihudWxsIT09dGhpcy5fZG9jLmRvY3VtZW50RWxlbWVudCYmdCE9PXRoaXMuX2RvYy5kb2N1bWVudEVsZW1lbnQudGFnTmFtZSl0aHJvdyBuZXcgRXJyb3IoXCJEb2NUeXBlIG5hbWUgZG9lcyBub3QgbWF0Y2ggZG9jdW1lbnQgZWxlbWVudCBuYW1lLlwiKTt2YXIgaT10aGlzLl9kb2MuaW1wbGVtZW50YXRpb24uY3JlYXRlRG9jdW1lbnRUeXBlKHQscixuKTtyZXR1cm4gbnVsbCE9PXRoaXMuX2RvYy5kb2N0eXBlP3RoaXMuX2RvYy5yZXBsYWNlQ2hpbGQoaSx0aGlzLl9kb2MuZG9jdHlwZSk6dGhpcy5fZG9jLmluc2VydEJlZm9yZShpLHRoaXMuX2RvYy5kb2N1bWVudEVsZW1lbnQpLHRoaXN9LGUucHJvdG90eXBlLmltcG9ydD1mdW5jdGlvbih0KXt2YXIgcixvLGE9dGhpcy5fZG9tTm9kZSxzPXRoaXMuX2RvYyx1PXQubm9kZTtpZihsLkd1YXJkLmlzRG9jdW1lbnROb2RlKHUpKXt2YXIgaD11LmRvY3VtZW50RWxlbWVudDtpZihudWxsPT09aCl0aHJvdyBuZXcgRXJyb3IoXCJJbXBvcnRlZCBkb2N1bWVudCBoYXMgbm8gZG9jdW1lbnQgZWxlbWVudCBub2RlLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7dmFyIHA9cy5pbXBvcnROb2RlKGgsITApO2EuYXBwZW5kQ2hpbGQocCk7dmFyIGY9bihjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUocC5wcmVmaXg/cC5wcmVmaXgrXCI6XCIrcC5sb2NhbE5hbWU6cC5sb2NhbE5hbWUpLDEpWzBdLGQ9YS5sb29rdXBOYW1lc3BhY2VVUkkoZik7bmV3IGUocCkuX3VwZGF0ZU5hbWVzcGFjZShkKX1lbHNlIGlmKGwuR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZSh1KSl0cnl7Zm9yKHZhciBtPWkodS5jaGlsZE5vZGVzKSx5PW0ubmV4dCgpOyF5LmRvbmU7eT1tLm5leHQoKSl7dmFyIHY9eS52YWx1ZTtwPXMuaW1wb3J0Tm9kZSh2LCEwKTtpZihhLmFwcGVuZENoaWxkKHApLGwuR3VhcmQuaXNFbGVtZW50Tm9kZShwKSl7Zj1uKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShwLnByZWZpeD9wLnByZWZpeCtcIjpcIitwLmxvY2FsTmFtZTpwLmxvY2FsTmFtZSksMSlbMF0sZD1hLmxvb2t1cE5hbWVzcGFjZVVSSShmKTtuZXcgZShwKS5fdXBkYXRlTmFtZXNwYWNlKGQpfX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7eSYmIXkuZG9uZSYmKG89bS5yZXR1cm4pJiZvLmNhbGwobSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fWVsc2V7cD1zLmltcG9ydE5vZGUodSwhMCk7aWYoYS5hcHBlbmRDaGlsZChwKSxsLkd1YXJkLmlzRWxlbWVudE5vZGUocCkpe2Y9bihjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUocC5wcmVmaXg/cC5wcmVmaXgrXCI6XCIrcC5sb2NhbE5hbWU6cC5sb2NhbE5hbWUpLDEpWzBdLGQ9YS5sb29rdXBOYW1lc3BhY2VVUkkoZik7bmV3IGUocCkuX3VwZGF0ZU5hbWVzcGFjZShkKX19cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLmRvYz1mdW5jdGlvbigpe2lmKHRoaXMuX2RvYy5faXNGcmFnbWVudCl7Zm9yKHZhciB0PXRoaXMubm9kZTt0JiZ0Lm5vZGVUeXBlIT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50Oyl0PXQucGFyZW50Tm9kZTtpZihudWxsPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJOb2RlIGhhcyBubyBwYXJlbnQgbm9kZSB3aGlsZSBzZWFyY2hpbmcgZm9yIGRvY3VtZW50IGZyYWdtZW50IGFuY2VzdG9yLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7cmV0dXJuIG5ldyBlKHQpfXJldHVybiBuZXcgZSh0aGlzLl9kb2MpfSxlLnByb3RvdHlwZS5yb290PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZG9jLmRvY3VtZW50RWxlbWVudDtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJEb2N1bWVudCByb290IGVsZW1lbnQgaXMgbnVsbC4gXCIrdGhpcy5fZGVidWdJbmZvKCkpO3JldHVybiBuZXcgZSh0KX0sZS5wcm90b3R5cGUudXA9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9kb21Ob2RlLnBhcmVudE5vZGU7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiUGFyZW50IG5vZGUgaXMgbnVsbC4gXCIrdGhpcy5fZGVidWdJbmZvKCkpO3JldHVybiBuZXcgZSh0KX0sZS5wcm90b3R5cGUucHJldj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2RvbU5vZGUucHJldmlvdXNTaWJsaW5nO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIlByZXZpb3VzIHNpYmxpbmcgbm9kZSBpcyBudWxsLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7cmV0dXJuIG5ldyBlKHQpfSxlLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZG9tTm9kZS5uZXh0U2libGluZztpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJOZXh0IHNpYmxpbmcgbm9kZSBpcyBudWxsLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7cmV0dXJuIG5ldyBlKHQpfSxlLnByb3RvdHlwZS5maXJzdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2RvbU5vZGUuZmlyc3RDaGlsZDtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJGaXJzdCBjaGlsZCBub2RlIGlzIG51bGwuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTtyZXR1cm4gbmV3IGUodCl9LGUucHJvdG90eXBlLmxhc3Q9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9kb21Ob2RlLmxhc3RDaGlsZDtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJMYXN0IGNoaWxkIG5vZGUgaXMgbnVsbC4gXCIrdGhpcy5fZGVidWdJbmZvKCkpO3JldHVybiBuZXcgZSh0KX0sZS5wcm90b3R5cGUuZWFjaD1mdW5jdGlvbih0LHIsbixpKXt2b2lkIDA9PT1yJiYocj0hMSksdm9pZCAwPT09biYmKG49ITEpO2Zvcih2YXIgbz10aGlzLl9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHRoaXMuX2RvbU5vZGUscixuKTtvWzBdOyl7dmFyIGE9dGhpcy5fZ2V0TmV4dERlc2NlbmRhbnROb2RlKHRoaXMuX2RvbU5vZGUsb1swXSxuLG9bMV0sb1syXSk7dC5jYWxsKGksbmV3IGUob1swXSksb1sxXSxvWzJdKSxvPWF9cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLm1hcD1mdW5jdGlvbihlLHQscixuKXt2b2lkIDA9PT10JiYodD0hMSksdm9pZCAwPT09ciYmKHI9ITEpO3ZhciBpPVtdO3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKHQscixvKXtyZXR1cm4gaS5wdXNoKGUuY2FsbChuLHQscixvKSl9KSx0LHIpLGl9LGUucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbihlLHQscixuLGkpe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIG89dDtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbih0LHIsbil7cmV0dXJuIG89ZS5jYWxsKGksbyx0LHIsbil9KSxyLG4pLG99LGUucHJvdG90eXBlLmZpbmQ9ZnVuY3Rpb24odCxyLG4saSl7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW4mJihuPSExKTtmb3IodmFyIG89dGhpcy5fZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZSh0aGlzLl9kb21Ob2RlLHIsbik7b1swXTspe3ZhciBhPW5ldyBlKG9bMF0pO2lmKHQuY2FsbChpLGEsb1sxXSxvWzJdKSlyZXR1cm4gYTtvPXRoaXMuX2dldE5leHREZXNjZW5kYW50Tm9kZSh0aGlzLl9kb21Ob2RlLG9bMF0sbixvWzFdLG9bMl0pfX0sZS5wcm90b3R5cGUuZmlsdGVyPWZ1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1yJiYocj0hMSk7dmFyIGk9W107cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24odCxyLG8pe2UuY2FsbChuLHQscixvKSYmaS5wdXNoKHQpfSksdCxyKSxpfSxlLnByb3RvdHlwZS5ldmVyeT1mdW5jdGlvbih0LHIsbixpKXt2b2lkIDA9PT1yJiYocj0hMSksdm9pZCAwPT09biYmKG49ITEpO2Zvcih2YXIgbz10aGlzLl9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHRoaXMuX2RvbU5vZGUscixuKTtvWzBdOyl7dmFyIGE9bmV3IGUob1swXSk7aWYoIXQuY2FsbChpLGEsb1sxXSxvWzJdKSlyZXR1cm4hMTtvPXRoaXMuX2dldE5leHREZXNjZW5kYW50Tm9kZSh0aGlzLl9kb21Ob2RlLG9bMF0sbixvWzFdLG9bMl0pfXJldHVybiEwfSxlLnByb3RvdHlwZS5zb21lPWZ1bmN0aW9uKHQscixuLGkpe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1uJiYobj0hMSk7Zm9yKHZhciBvPXRoaXMuX2dldEZpcnN0RGVzY2VuZGFudE5vZGUodGhpcy5fZG9tTm9kZSxyLG4pO29bMF07KXt2YXIgYT1uZXcgZShvWzBdKTtpZih0LmNhbGwoaSxhLG9bMV0sb1syXSkpcmV0dXJuITA7bz10aGlzLl9nZXROZXh0RGVzY2VuZGFudE5vZGUodGhpcy5fZG9tTm9kZSxvWzBdLG4sb1sxXSxvWzJdKX1yZXR1cm4hMX0sZS5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PWUmJihlPSExKSx2b2lkIDA9PT10JiYodD0hMSk7dmFyIHI9W107cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIHIucHVzaChlKX0pLGUsdCkscn0sZS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PShlPWV8fHt9KS5mb3JtYXQmJihlLmZvcm1hdD1cInhtbFwiKSx0aGlzLl9zZXJpYWxpemUoZSl9LGUucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT0oZT1lfHx7fSkuZm9ybWF0JiYoZS5mb3JtYXQ9XCJvYmplY3RcIiksdGhpcy5fc2VyaWFsaXplKGUpfSxlLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PShlPWV8fHt9KS5mb3JtYXQmJihlLmZvcm1hdD1cInhtbFwiKSx0aGlzLmRvYygpLl9zZXJpYWxpemUoZSl9LGUucHJvdG90eXBlLl9nZXRGaXJzdERlc2NlbmRhbnROb2RlPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdD9bdGhpcy5fZG9tTm9kZSwwLDBdOnI/dGhpcy5fZ2V0TmV4dERlc2NlbmRhbnROb2RlKGUsZSxyLDAsMCk6W3RoaXMuX2RvbU5vZGUuZmlyc3RDaGlsZCwwLDFdfSxlLnByb3RvdHlwZS5fZ2V0TmV4dERlc2NlbmRhbnROb2RlPWZ1bmN0aW9uKGUsdCxyLG4saSl7aWYoIXIpcmV0dXJuIGU9PT10P1t0LmZpcnN0Q2hpbGQsMCxpKzFdOlt0Lm5leHRTaWJsaW5nLG4rMSxpXTtpZih0LmZpcnN0Q2hpbGQpcmV0dXJuW3QuZmlyc3RDaGlsZCwwLGkrMV07aWYodD09PWUpcmV0dXJuW251bGwsLTEsLTFdO2lmKHQubmV4dFNpYmxpbmcpcmV0dXJuW3QubmV4dFNpYmxpbmcsbisxLGldO2Zvcih2YXIgbz10LnBhcmVudE5vZGU7byYmbyE9PWU7KXtpZihvLm5leHRTaWJsaW5nKXJldHVybltvLm5leHRTaWJsaW5nLGMudHJlZV9pbmRleChvLm5leHRTaWJsaW5nKSxpLTFdO289by5wYXJlbnROb2RlLGktLX1yZXR1cm5bbnVsbCwtMSwtMV19LGUucHJvdG90eXBlLl9zZXJpYWxpemU9ZnVuY3Rpb24oZSl7aWYoXCJ4bWxcIj09PWUuZm9ybWF0KXJldHVybiBuZXcgcy5YTUxXcml0ZXIodGhpcy5fb3B0aW9ucyxlKS5zZXJpYWxpemUodGhpcy5ub2RlKTtpZihcIm1hcFwiPT09ZS5mb3JtYXQpcmV0dXJuIG5ldyBzLk1hcFdyaXRlcih0aGlzLl9vcHRpb25zLGUpLnNlcmlhbGl6ZSh0aGlzLm5vZGUpO2lmKFwib2JqZWN0XCI9PT1lLmZvcm1hdClyZXR1cm4gbmV3IHMuT2JqZWN0V3JpdGVyKHRoaXMuX29wdGlvbnMsZSkuc2VyaWFsaXplKHRoaXMubm9kZSk7aWYoXCJqc29uXCI9PT1lLmZvcm1hdClyZXR1cm4gbmV3IHMuSlNPTldyaXRlcih0aGlzLl9vcHRpb25zLGUpLnNlcmlhbGl6ZSh0aGlzLm5vZGUpO2lmKFwieWFtbFwiPT09ZS5mb3JtYXQpcmV0dXJuIG5ldyBzLllBTUxXcml0ZXIodGhpcy5fb3B0aW9ucyxlKS5zZXJpYWxpemUodGhpcy5ub2RlKTt0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHdyaXRlciBmb3JtYXQ6IFwiK2UuZm9ybWF0K1wiLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSl9LGUucHJvdG90eXBlLl9leHRyYWN0TmFtZXNwYWNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10LmluZGV4T2YoXCJAXCIpO2lmKG4+MCYmKHZvaWQgMD09PWUmJihlPXQuc2xpY2UobisxKSksdD10LnNsaWNlKDAsbikpLHZvaWQgMD09PWUpZT1yP3RoaXMuX29wdGlvbnMuZGVmYXVsdE5hbWVzcGFjZS5lbGU6dGhpcy5fb3B0aW9ucy5kZWZhdWx0TmFtZXNwYWNlLmF0dDtlbHNlIGlmKG51bGwhPT1lJiZcIkBcIj09PWVbMF0pe3ZhciBpPWUuc2xpY2UoMSk7aWYodm9pZCAwPT09KGU9dGhpcy5fb3B0aW9ucy5uYW1lc3BhY2VBbGlhc1tpXSkpdGhyb3cgbmV3IEVycm9yKFwiTmFtZXNwYWNlIGFsaWFzIGBcIitpK1wiYCBpcyBub3QgZGVmaW5lZC4gXCIrdGhpcy5fZGVidWdJbmZvKCkpfXJldHVybltlLHRdfSxlLnByb3RvdHlwZS5fdXBkYXRlTmFtZXNwYWNlPWZ1bmN0aW9uKHQpe3ZhciByLG8sYSxzLHU9dGhpcy5fZG9tTm9kZTtpZihsLkd1YXJkLmlzRWxlbWVudE5vZGUodSkmJm51bGwhPT10JiZ1Lm5hbWVzcGFjZVVSSSE9PXQpe3ZhciBoPW4oYy5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKHUucHJlZml4P3UucHJlZml4K1wiOlwiK3UubG9jYWxOYW1lOnUubG9jYWxOYW1lKSwyKSxwPWhbMF0sZj1oWzFdLGQ9Yy5jcmVhdGVfZWxlbWVudCh0aGlzLl9kb2MsZix0LHApO3RyeXtmb3IodmFyIG09aSh1LmF0dHJpYnV0ZXMpLHk9bS5uZXh0KCk7IXkuZG9uZTt5PW0ubmV4dCgpKXt2YXIgdj15LnZhbHVlLF89di5wcmVmaXg/di5wcmVmaXgrXCI6XCIrdi5sb2NhbE5hbWU6di5sb2NhbE5hbWUsZz1uKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShfKSwxKVswXSxiPXYubmFtZXNwYWNlVVJJO251bGw9PT1iJiZudWxsIT09ZyYmKGI9dS5sb29rdXBOYW1lc3BhY2VVUkkoZykpLG51bGw9PT1iP2Quc2V0QXR0cmlidXRlKF8sdi52YWx1ZSk6ZC5zZXRBdHRyaWJ1dGVOUyhiLF8sdi52YWx1ZSl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3kmJiF5LmRvbmUmJihvPW0ucmV0dXJuKSYmby5jYWxsKG0pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX12YXIgeD11LnBhcmVudE5vZGU7aWYobnVsbD09PXgpdGhyb3cgbmV3IEVycm9yKFwiUGFyZW50IG5vZGUgaXMgbnVsbC5cIit0aGlzLl9kZWJ1Z0luZm8oKSk7eC5yZXBsYWNlQ2hpbGQoZCx1KSx0aGlzLl9kb21Ob2RlPWQ7dHJ5e2Zvcih2YXIgdz1pKHUuY2hpbGROb2RlcyksRT13Lm5leHQoKTshRS5kb25lO0U9dy5uZXh0KCkpe3ZhciBEPUUudmFsdWUuY2xvbmVOb2RlKCEwKTtpZihkLmFwcGVuZENoaWxkKEQpLGwuR3VhcmQuaXNFbGVtZW50Tm9kZShEKSl7dmFyIFM9bihjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUoRC5wcmVmaXg/RC5wcmVmaXgrXCI6XCIrRC5sb2NhbE5hbWU6RC5sb2NhbE5hbWUpLDEpWzBdLEM9ZC5sb29rdXBOYW1lc3BhY2VVUkkoUyk7bmV3IGUoRCkuX3VwZGF0ZU5hbWVzcGFjZShDKX19fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0UmJiFFLmRvbmUmJihzPXcucmV0dXJuKSYmcy5jYWxsKHcpfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX19fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJfZG9jXCIse2dldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMubm9kZTtpZihsLkd1YXJkLmlzRG9jdW1lbnROb2RlKGUpKXJldHVybiBlO3ZhciB0PWUub3duZXJEb2N1bWVudDtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJPd25lciBkb2N1bWVudCBpcyBudWxsLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7cmV0dXJuIHR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuX2RlYnVnSW5mbz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm5vZGUscj10LnBhcmVudE5vZGU7ZT1lfHx0Lm5vZGVOYW1lO3ZhciBuPXI/ci5ub2RlTmFtZTpcIlwiO3JldHVybiBuP1wibm9kZTogPFwiK2UrXCI+LCBwYXJlbnQ6IDxcIituK1wiPlwiOlwibm9kZTogPFwiK2UrXCI+XCJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9vcHRpb25zXCIse2dldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMuX2RvYztpZih2b2lkIDA9PT1lLl94bWxCdWlsZGVyT3B0aW9ucyl0aHJvdyBuZXcgRXJyb3IoXCJCdWlsZGVyIG9wdGlvbnMgaXMgbm90IHNldC5cIik7cmV0dXJuIGUuX3htbEJ1aWxkZXJPcHRpb25zfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fZG9jLl94bWxCdWlsZGVyT3B0aW9ucz1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9KCk7dC5YTUxCdWlsZGVySW1wbD1kfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMSksaT1yKDExNyksbz1uLldlYWtNYXA7ZS5leHBvcnRzPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8mJi9uYXRpdmUgY29kZS8udGVzdChpKG8pKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDYpLGk9cig4Miksbz1yKDg1KSxhPXIoMTgpO2UuZXhwb3J0cz1uKFwiUmVmbGVjdFwiLFwib3duS2V5c1wiKXx8ZnVuY3Rpb24oZSl7dmFyIHQ9aS5mKGEoZSkpLHI9by5mO3JldHVybiByP3QuY29uY2F0KHIoZSkpOnR9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNiksaT1yKDE1KSxvPXIoMTgpLGE9cig2MSk7ZS5leHBvcnRzPW4/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24oZSx0KXtvKGUpO2Zvcih2YXIgcixuPWEodCkscz1uLmxlbmd0aCx1PTA7cz51OylpLmYoZSxyPW5bdSsrXSx0W3JdKTtyZXR1cm4gZX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQ2KTtlLmV4cG9ydHM9bihcImRvY3VtZW50XCIsXCJkb2N1bWVudEVsZW1lbnRcIil9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDI0KSxpPXIoODIpLmYsbz17fS50b1N0cmluZyxhPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXTtlLmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gYSYmXCJbb2JqZWN0IFdpbmRvd11cIj09by5jYWxsKGUpP2Z1bmN0aW9uKGUpe3RyeXtyZXR1cm4gaShlKX1jYXRjaChlKXtyZXR1cm4gYS5zbGljZSgpfX0oZSk6aShuKGUpKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigzNikuZXZlcnksbz1yKDQ4KSxhPXIoMjgpLHM9byhcImV2ZXJ5XCIpLHU9YShcImV2ZXJ5XCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhdX0se2V2ZXJ5OmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigzNikuZmlsdGVyLG89cig2MyksYT1yKDI4KSxzPW8oXCJmaWx0ZXJcIiksdT1hKFwiZmlsdGVyXCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhdX0se2ZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0Nik7ZS5leHBvcnRzPW4oXCJuYXZpZ2F0b3JcIixcInVzZXJBZ2VudFwiKXx8XCJcIn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNCksaT1yKDM2KS5maW5kLG89cigxMzApLGE9cigyOCkscz0hMCx1PWEoXCJmaW5kXCIpO1wiZmluZFwiaW5bXSYmQXJyYXkoMSkuZmluZCgoZnVuY3Rpb24oKXtzPSExfSkpLG4oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOnN8fCF1fSx7ZmluZDpmdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pLG8oXCJmaW5kXCIpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMzEpLkl0ZXJhdG9yUHJvdG90eXBlLGk9cig2MCksbz1yKDQwKSxhPXIoNjIpLHM9cig0OSksdT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBsPXQrXCIgSXRlcmF0b3JcIjtyZXR1cm4gZS5wcm90b3R5cGU9aShuLHtuZXh0Om8oMSxyKX0pLGEoZSxsLCExLCEwKSxzW2xdPXUsZX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgpO2UuZXhwb3J0cz0hbigoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1udWxsLE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgZSkhPT1lLnByb3RvdHlwZX0pKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTMpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighbihlKSYmbnVsbCE9PWUpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiK1N0cmluZyhlKStcIiBhcyBhIHByb3RvdHlwZVwiKTtyZXR1cm4gZX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigzNikubWFwLG89cig2MyksYT1yKDI4KSxzPW8oXCJtYXBcIiksdT1hKFwibWFwXCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhdX0se21hcDpmdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMjAwKS5sZWZ0LG89cig0OCksYT1yKDI4KSxzPW8oXCJyZWR1Y2VcIiksdT1hKFwicmVkdWNlXCIsezE6MH0pO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhdX0se3JlZHVjZTpmdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEyNyksaT1yKDI3KSxvPXIoNDEpLGE9cigyNikscz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLHMsdSl7bihyKTt2YXIgbD1pKHQpLGM9byhsKSxoPWEobC5sZW5ndGgpLHA9ZT9oLTE6MCxmPWU/LTE6MTtpZihzPDIpZm9yKDs7KXtpZihwIGluIGMpe3U9Y1twXSxwKz1mO2JyZWFrfWlmKHArPWYsZT9wPDA6aDw9cCl0aHJvdyBUeXBlRXJyb3IoXCJSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlXCIpfWZvcig7ZT9wPj0wOmg+cDtwKz1mKXAgaW4gYyYmKHU9cih1LGNbcF0scCxsKSk7cmV0dXJuIHV9fTtlLmV4cG9ydHM9e2xlZnQ6cyghMSkscmlnaHQ6cyghMCl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMzYpLnNvbWUsbz1yKDQ4KSxhPXIoMjgpLHM9byhcInNvbWVcIiksdT1hKFwic29tZVwiKTtuKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohc3x8IXV9LHtzb21lOmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDkwKSxpPXIoMTM1KTtlLmV4cG9ydHM9bj97fS50b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBcIitpKHRoaXMpK1wiXVwifX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9e0NTU1J1bGVMaXN0OjAsQ1NTU3R5bGVEZWNsYXJhdGlvbjowLENTU1ZhbHVlTGlzdDowLENsaWVudFJlY3RMaXN0OjAsRE9NUmVjdExpc3Q6MCxET01TdHJpbmdMaXN0OjAsRE9NVG9rZW5MaXN0OjEsRGF0YVRyYW5zZmVySXRlbUxpc3Q6MCxGaWxlTGlzdDowLEhUTUxBbGxDb2xsZWN0aW9uOjAsSFRNTENvbGxlY3Rpb246MCxIVE1MRm9ybUVsZW1lbnQ6MCxIVE1MU2VsZWN0RWxlbWVudDowLE1lZGlhTGlzdDowLE1pbWVUeXBlQXJyYXk6MCxOYW1lZE5vZGVNYXA6MCxOb2RlTGlzdDoxLFBhaW50UmVxdWVzdExpc3Q6MCxQbHVnaW46MCxQbHVnaW5BcnJheTowLFNWR0xlbmd0aExpc3Q6MCxTVkdOdW1iZXJMaXN0OjAsU1ZHUGF0aFNlZ0xpc3Q6MCxTVkdQb2ludExpc3Q6MCxTVkdTdHJpbmdMaXN0OjAsU1ZHVHJhbnNmb3JtTGlzdDowLFNvdXJjZUJ1ZmZlckxpc3Q6MCxTdHlsZVNoZWV0TGlzdDowLFRleHRUcmFja0N1ZUxpc3Q6MCxUZXh0VHJhY2tMaXN0OjAsVG91Y2hMaXN0OjB9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig4KTtlLmV4cG9ydHM9IW4oKGZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDUpLGk9cig0OSksbz1uKFwiaXRlcmF0b3JcIiksYT1BcnJheS5wcm90b3R5cGU7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lJiYoaS5BcnJheT09PWV8fGFbb109PT1lKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzNSksaT1yKDQ5KSxvPXIoNSkoXCJpdGVyYXRvclwiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYobnVsbCE9ZSlyZXR1cm4gZVtvXXx8ZVtcIkBAaXRlcmF0b3JcIl18fGlbbihlKV19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxOCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGkpe3RyeXtyZXR1cm4gaT90KG4ocilbMF0sclsxXSk6dChyKX1jYXRjaCh0KXt2YXIgbz1lLnJldHVybjt0aHJvdyB2b2lkIDAhPT1vJiZuKG8uY2FsbChlKSksdH19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig1KShcIml0ZXJhdG9yXCIpLGk9ITE7dHJ5e3ZhciBvPTAsYT17bmV4dDpmdW5jdGlvbigpe3JldHVybntkb25lOiEhbysrfX0scmV0dXJuOmZ1bmN0aW9uKCl7aT0hMH19O2Fbbl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sQXJyYXkuZnJvbShhLChmdW5jdGlvbigpe3Rocm93IDJ9KSl9Y2F0Y2goZSl7fWUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCF0JiYhaSlyZXR1cm4hMTt2YXIgcj0hMTt0cnl7dmFyIG89e307b1tuXT1mdW5jdGlvbigpe3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6cj0hMH19fX0sZShvKX1jYXRjaChlKXt9cmV0dXJuIHJ9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMyksaT1yKDEzMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbyxhO3JldHVybiBpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihvPXQuY29uc3RydWN0b3IpJiZvIT09ciYmbihhPW8ucHJvdG90eXBlKSYmYSE9PXIucHJvdG90eXBlJiZpKGUsYSksZX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDI1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgaSBpbiB0KW4oZSxpLHRbaV0scik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0NiksaT1yKDE1KSxvPXIoNSksYT1yKDE2KSxzPW8oXCJzcGVjaWVzXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uKGUpLHI9aS5mO2EmJnQmJiF0W3NdJiZyKHQscyx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzfX0pfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYT17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZpWzBdKXRocm93IGlbMV07cmV0dXJuIGlbMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gbz17bmV4dDpzKDApLHRocm93OnMoMSkscmV0dXJuOnMoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKG9bU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksbztmdW5jdGlvbiBzKG8pe3JldHVybiBmdW5jdGlvbihzKXtyZXR1cm4gZnVuY3Rpb24obyl7aWYocil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2E7KXRyeXtpZihyPTEsbiYmKGk9MiZvWzBdP24ucmV0dXJuOm9bMF0/bi50aHJvd3x8KChpPW4ucmV0dXJuKSYmaS5jYWxsKG4pLDApOm4ubmV4dCkmJiEoaT1pLmNhbGwobixvWzFdKSkuZG9uZSlyZXR1cm4gaTtzd2l0Y2gobj0wLGkmJihvPVsyJm9bMF0saS52YWx1ZV0pLG9bMF0pe2Nhc2UgMDpjYXNlIDE6aT1vO2JyZWFrO2Nhc2UgNDpyZXR1cm4gYS5sYWJlbCsrLHt2YWx1ZTpvWzFdLGRvbmU6ITF9O2Nhc2UgNTphLmxhYmVsKyssbj1vWzFdLG89WzBdO2NvbnRpbnVlO2Nhc2UgNzpvPWEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEoaT1hLnRyeXMsKGk9aS5sZW5ndGg+MCYmaVtpLmxlbmd0aC0xXSl8fDYhPT1vWzBdJiYyIT09b1swXSkpe2E9MDtjb250aW51ZX1pZigzPT09b1swXSYmKCFpfHxvWzFdPmlbMF0mJm9bMV08aVszXSkpe2EubGFiZWw9b1sxXTticmVha31pZig2PT09b1swXSYmYS5sYWJlbDxpWzFdKXthLmxhYmVsPWlbMV0saT1vO2JyZWFrfWlmKGkmJmEubGFiZWw8aVsyXSl7YS5sYWJlbD1pWzJdLGEub3BzLnB1c2gobyk7YnJlYWt9aVsyXSYmYS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlfW89dC5jYWxsKGUsYSl9Y2F0Y2goZSl7bz1bNixlXSxuPTB9ZmluYWxseXtyPWk9MH1pZig1Jm9bMF0pdGhyb3cgb1sxXTtyZXR1cm57dmFsdWU6b1swXT9vWzFdOnZvaWQgMCxkb25lOiEwfX0oW28sc10pfX19LGk9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZvaWQgMD09PWUmJihlPTFlMyksdGhpcy5faXRlbXM9bmV3IFNldCx0aGlzLl9saW1pdD1lfXJldHVybiBlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSl7aWYodGhpcy5faXRlbXMuYWRkKGUpLHRoaXMuX2l0ZW1zLnNpemU+dGhpcy5fbGltaXQpe3ZhciB0PXRoaXMuX2l0ZW1zLnZhbHVlcygpLm5leHQoKTt0LmRvbmV8fHRoaXMuX2l0ZW1zLmRlbGV0ZSh0LnZhbHVlKX1yZXR1cm4gdGhpc30sZS5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pdGVtcy5kZWxldGUoZSl9LGUucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faXRlbXMuaGFzKGUpfSxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX2l0ZW1zLmNsZWFyKCl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2l0ZW1zLnNpemV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7dGhpcy5faXRlbXMuZm9yRWFjaCgoZnVuY3Rpb24obil7cmV0dXJuIGUuY2FsbCh0LG4sbixyKX0pKX0sZS5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzUsaSh0aGlzLl9pdGVtcy5rZXlzKCkpXTtjYXNlIDE6cmV0dXJuIGUuc2VudCgpLFsyXX19KSl9LGUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzUsaSh0aGlzLl9pdGVtcy52YWx1ZXMoKSldO2Nhc2UgMTpyZXR1cm4gZS5zZW50KCksWzJdfX0pKX0sZS5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzUsaSh0aGlzLl9pdGVtcy5lbnRyaWVzKCkpXTtjYXNlIDE6cmV0dXJuIGUuc2VudCgpLFsyXX19KSl9LGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls1LGkodGhpcy5faXRlbXMpXTtjYXNlIDE6cmV0dXJuIGUuc2VudCgpLFsyXX19KSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcse2dldDpmdW5jdGlvbigpe3JldHVyblwiRml4ZWRTaXplU2V0XCJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0LkZpeGVkU2l6ZVNldD1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxhPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBvPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYob1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxvO2Z1bmN0aW9uIHMobyl7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihvKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7YTspdHJ5e2lmKHI9MSxuJiYoaT0yJm9bMF0/bi5yZXR1cm46b1swXT9uLnRocm93fHwoKGk9bi5yZXR1cm4pJiZpLmNhbGwobiksMCk6bi5uZXh0KSYmIShpPWkuY2FsbChuLG9bMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChuPTAsaSYmKG89WzImb1swXSxpLnZhbHVlXSksb1swXSl7Y2FzZSAwOmNhc2UgMTppPW87YnJlYWs7Y2FzZSA0OnJldHVybiBhLmxhYmVsKysse3ZhbHVlOm9bMV0sZG9uZTohMX07Y2FzZSA1OmEubGFiZWwrKyxuPW9bMV0sbz1bMF07Y29udGludWU7Y2FzZSA3Om89YS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPWEudHJ5cywoaT1pLmxlbmd0aD4wJiZpW2kubGVuZ3RoLTFdKXx8NiE9PW9bMF0mJjIhPT1vWzBdKSl7YT0wO2NvbnRpbnVlfWlmKDM9PT1vWzBdJiYoIWl8fG9bMV0+aVswXSYmb1sxXTxpWzNdKSl7YS5sYWJlbD1vWzFdO2JyZWFrfWlmKDY9PT1vWzBdJiZhLmxhYmVsPGlbMV0pe2EubGFiZWw9aVsxXSxpPW87YnJlYWt9aWYoaSYmYS5sYWJlbDxpWzJdKXthLmxhYmVsPWlbMl0sYS5vcHMucHVzaChvKTticmVha31pWzJdJiZhLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWV9bz10LmNhbGwoZSxhKX1jYXRjaChlKXtvPVs2LGVdLG49MH1maW5hbGx5e3I9aT0wfWlmKDUmb1swXSl0aHJvdyBvWzFdO3JldHVybnt2YWx1ZTpvWzBdP29bMV06dm9pZCAwLGRvbmU6ITB9fShbbyxzXSl9fX0saT10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dm9pZCAwPT09ZSYmKGU9MWUzKSx0aGlzLl9pdGVtcz1uZXcgTWFwLHRoaXMuX2xpbWl0PWV9cmV0dXJuIGUucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faXRlbXMuZ2V0KGUpfSxlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLl9pdGVtcy5zZXQoZSx0KSx0aGlzLl9pdGVtcy5zaXplPnRoaXMuX2xpbWl0KXt2YXIgcj10aGlzLl9pdGVtcy5rZXlzKCkubmV4dCgpO3IuZG9uZXx8dGhpcy5faXRlbXMuZGVsZXRlKHIudmFsdWUpfX0sZS5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pdGVtcy5kZWxldGUoZSl9LGUucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faXRlbXMuaGFzKGUpfSxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX2l0ZW1zLmNsZWFyKCl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2l0ZW1zLnNpemV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihlLHQpe3RoaXMuX2l0ZW1zLmZvckVhY2goKGZ1bmN0aW9uKHIsbil7cmV0dXJuIGUuY2FsbCh0LG4scil9KSl9LGUucHJvdG90eXBlLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls1LGkodGhpcy5faXRlbXMua2V5cygpKV07Y2FzZSAxOnJldHVybiBlLnNlbnQoKSxbMl19fSkpfSxlLnByb3RvdHlwZS52YWx1ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls1LGkodGhpcy5faXRlbXMudmFsdWVzKCkpXTtjYXNlIDE6cmV0dXJuIGUuc2VudCgpLFsyXX19KSl9LGUucHJvdG90eXBlLmVudHJpZXM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls1LGkodGhpcy5faXRlbXMuZW50cmllcygpKV07Y2FzZSAxOnJldHVybiBlLnNlbnQoKSxbMl19fSkpfSxlLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcywoZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNSxpKHRoaXMuX2l0ZW1zKV07Y2FzZSAxOnJldHVybiBlLnNlbnQoKSxbMl19fSkpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIk9iamVjdENhY2hlXCJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0Lk9iamVjdENhY2hlPW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dm9pZCAwPT09ZSYmKGU9MWUzKSx0aGlzLl9pdGVtcz1uZXcgTWFwLHRoaXMuX2xpbWl0PWV9cmV0dXJuIGUucHJvdG90eXBlLmNoZWNrPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5faXRlbXMuZ2V0KGUpPT09dClyZXR1cm4hMDtpZih0aGlzLl9pdGVtcy5nZXQodCk9PT1lKXJldHVybiExO3ZhciByPU1hdGgucmFuZG9tKCk8LjU7aWYocj90aGlzLl9pdGVtcy5zZXQoZSx0KTp0aGlzLl9pdGVtcy5zZXQodCxlKSx0aGlzLl9pdGVtcy5zaXplPnRoaXMuX2xpbWl0KXt2YXIgbj10aGlzLl9pdGVtcy5rZXlzKCkubmV4dCgpO24uZG9uZXx8dGhpcy5faXRlbXMuZGVsZXRlKG4udmFsdWUpfXJldHVybiByfSxlfSgpO3QuQ29tcGFyZUNhY2hlPW59LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5faW5pdGlhbGl6ZWQ9ITEsdGhpcy5fdmFsdWU9dm9pZCAwLHRoaXMuX2luaXRGdW5jPWV9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInZhbHVlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pbml0aWFsaXplZHx8KHRoaXMuX3ZhbHVlPXRoaXMuX2luaXRGdW5jKCksdGhpcy5faW5pdGlhbGl6ZWQ9ITApLHRoaXMuX3ZhbHVlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9KCk7dC5MYXp5PW59LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5fcG9pbnRlcj0wLHRoaXMuX2NoYXJzPUFycmF5LmZyb20oZSksdGhpcy5fbGVuZ3RoPXRoaXMuX2NoYXJzLmxlbmd0aH1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiZW9mXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wb2ludGVyPj10aGlzLl9sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwibGVuZ3RoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuY29kZVBvaW50PWZ1bmN0aW9uKCl7aWYodm9pZCAwPT09dGhpcy5fY29kZVBvaW50KWlmKHRoaXMuZW9mKXRoaXMuX2NvZGVQb2ludD0tMTtlbHNle3ZhciBlPXRoaXMuX2NoYXJzW3RoaXMuX3BvaW50ZXJdLmNvZGVQb2ludEF0KDApO3RoaXMuX2NvZGVQb2ludD12b2lkIDAhPT1lP2U6LTF9cmV0dXJuIHRoaXMuX2NvZGVQb2ludH0sZS5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzLl9jJiYodGhpcy5fYz10aGlzLmVvZj9cIlwiOnRoaXMuX2NoYXJzW3RoaXMuX3BvaW50ZXJdKSx0aGlzLl9jfSxlLnByb3RvdHlwZS5yZW1haW5pbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fcmVtYWluaW5nJiYodGhpcy5fcmVtYWluaW5nPXRoaXMuZW9mP1wiXCI6dGhpcy5fY2hhcnMuc2xpY2UodGhpcy5fcG9pbnRlcisxKS5qb2luKFwiXCIpKSx0aGlzLl9yZW1haW5pbmd9LGUucHJvdG90eXBlLnN1YnN0cmluZz1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzLl9zdWJzdHJpbmcmJih0aGlzLl9zdWJzdHJpbmc9dGhpcy5lb2Y/XCJcIjp0aGlzLl9jaGFycy5zbGljZSh0aGlzLl9wb2ludGVyKS5qb2luKFwiXCIpKSx0aGlzLl9zdWJzdHJpbmd9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInBvaW50ZXJcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BvaW50ZXJ9LHNldDpmdW5jdGlvbihlKXtlIT09dGhpcy5fcG9pbnRlciYmKHRoaXMuX3BvaW50ZXI9ZSx0aGlzLl9jb2RlUG9pbnQ9dm9pZCAwLHRoaXMuX2M9dm9pZCAwLHRoaXMuX3JlbWFpbmluZz12b2lkIDAsdGhpcy5fc3Vic3RyaW5nPXZvaWQgMCl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0LlN0cmluZ1dhbGtlcj1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyMTgpO3QuTWFwV3JpdGVyPW4uTWFwV3JpdGVyO3ZhciBpPXIoMjU4KTt0LlhNTFdyaXRlcj1pLlhNTFdyaXRlcjt2YXIgbz1yKDY3KTt0Lk9iamVjdFdyaXRlcj1vLk9iamVjdFdyaXRlcjt2YXIgYT1yKDI2MCk7dC5KU09OV3JpdGVyPWEuSlNPTldyaXRlcjt2YXIgcz1yKDI2MSk7dC5ZQU1MV3JpdGVyPXMuWUFNTFdyaXRlcn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoMTkpLHIoMjE5KSxyKDIwKSxyKDIyKSxyKDIzKTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEpLGE9cig2Nykscz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscil7dmFyIG49ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIG4uX3dyaXRlck9wdGlvbnM9by5hcHBseURlZmF1bHRzKHIse2Zvcm1hdDpcIm1hcFwiLHdlbGxGb3JtZWQ6ITEsZ3JvdXA6ITEsdmVyYm9zZTohMX0pLG59cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5zZXJpYWxpemU9ZnVuY3Rpb24oZSl7dmFyIHQ9by5hcHBseURlZmF1bHRzKHRoaXMuX3dyaXRlck9wdGlvbnMse2Zvcm1hdDpcIm9iamVjdFwiLHdlbGxGb3JtZWQ6ITEsdmVyYm9zZTohMX0pLHI9bmV3IGEuT2JqZWN0V3JpdGVyKHRoaXMuX2J1aWxkZXJPcHRpb25zLHQpLnNlcmlhbGl6ZShlKTtyZXR1cm4gdGhpcy5fY29udmVydE9iamVjdChyKX0sdC5wcm90b3R5cGUuX2NvbnZlcnRPYmplY3Q9ZnVuY3Rpb24oZSl7aWYoby5pc0FycmF5KGUpKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdPXRoaXMuX2NvbnZlcnRPYmplY3QoZVt0XSk7cmV0dXJuIGV9aWYoby5pc09iamVjdChlKSl7dmFyIHI9bmV3IE1hcDtmb3IodmFyIG4gaW4gZSlyLnNldChuLHRoaXMuX2NvbnZlcnRPYmplY3QoZVtuXSkpO3JldHVybiByfXJldHVybiBlfSx0fShyKDUwKS5CYXNlV3JpdGVyKTt0Lk1hcFdyaXRlcj1zfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMzkpLGk9cigxNDMpO2UuZXhwb3J0cz1uKFwiTWFwXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKHRoaXMsYXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMF06dm9pZCAwKX19KSxpKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNCksaT1yKDgpLG89cig1OSksYT1yKDEzKSxzPXIoMjcpLHU9cigyNiksbD1yKDEzNCksYz1yKDEyOCksaD1yKDYzKSxwPXIoNSksZj1yKDEyOSksZD1wKFwiaXNDb25jYXRTcHJlYWRhYmxlXCIpLG09Zj49NTF8fCFpKChmdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBlW2RdPSExLGUuY29uY2F0KClbMF0hPT1lfSkpLHk9aChcImNvbmNhdFwiKSx2PWZ1bmN0aW9uKGUpe2lmKCFhKGUpKXJldHVybiExO3ZhciB0PWVbZF07cmV0dXJuIHZvaWQgMCE9PXQ/ISF0Om8oZSl9O24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFtfHwheX0se2NvbmNhdDpmdW5jdGlvbihlKXt2YXIgdCxyLG4saSxvLGE9cyh0aGlzKSxoPWMoYSwwKSxwPTA7Zm9yKHQ9LTEsbj1hcmd1bWVudHMubGVuZ3RoO3Q8bjt0KyspaWYodihvPS0xPT09dD9hOmFyZ3VtZW50c1t0XSkpe2lmKHArKGk9dShvLmxlbmd0aCkpPjkwMDcxOTkyNTQ3NDA5OTEpdGhyb3cgVHlwZUVycm9yKFwiTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkXCIpO2ZvcihyPTA7cjxpO3IrKyxwKyspciBpbiBvJiZsKGgscCxvW3JdKX1lbHNle2lmKHA+PTkwMDcxOTkyNTQ3NDA5OTEpdGhyb3cgVHlwZUVycm9yKFwiTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkXCIpO2woaCxwKyssbyl9cmV0dXJuIGgubGVuZ3RoPXAsaH19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoOCk7ZnVuY3Rpb24gaShlLHQpe3JldHVybiBSZWdFeHAoZSx0KX10LlVOU1VQUE9SVEVEX1k9bigoZnVuY3Rpb24oKXt2YXIgZT1pKFwiYVwiLFwieVwiKTtyZXR1cm4gZS5sYXN0SW5kZXg9MixudWxsIT1lLmV4ZWMoXCJhYmNkXCIpfSkpLHQuQlJPS0VOX0NBUkVUPW4oKGZ1bmN0aW9uKCl7dmFyIGU9aShcIl5yXCIsXCJneVwiKTtyZXR1cm4gZS5sYXN0SW5kZXg9MixudWxsIT1lLmV4ZWMoXCJzdHJcIil9KSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDIyMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKG4oZSkpdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTMpLGk9cig0Miksbz1yKDUpKFwibWF0Y2hcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBuKGUpJiYodm9pZCAwIT09KHQ9ZVtvXSk/ISF0OlwiUmVnRXhwXCI9PWkoZSkpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNSkoXCJtYXRjaFwiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9Ly4vO3RyeXtcIi8uL1wiW2VdKHQpfWNhdGNoKHIpe3RyeXtyZXR1cm4gdFtuXT0hMSxcIi8uL1wiW2VdKHQpfWNhdGNoKGUpe319cmV0dXJuITF9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cig2OCk7dmFyIG49cigyNSksaT1yKDgpLG89cig1KSxhPXIoOTMpLHM9cigyMSksdT1vKFwic3BlY2llc1wiKSxsPSFpKChmdW5jdGlvbigpe3ZhciBlPS8uLztyZXR1cm4gZS5leGVjPWZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIGUuZ3JvdXBzPXthOlwiN1wifSxlfSxcIjdcIiE9PVwiXCIucmVwbGFjZShlLFwiJDxhPlwiKX0pKSxjPVwiJDBcIj09PVwiYVwiLnJlcGxhY2UoLy4vLFwiJDBcIiksaD1vKFwicmVwbGFjZVwiKSxwPSEhLy4vW2hdJiZcIlwiPT09Ly4vW2hdKFwiYVwiLFwiJDBcIiksZj0haSgoZnVuY3Rpb24oKXt2YXIgZT0vKD86KS8sdD1lLmV4ZWM7ZS5leGVjPWZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfTt2YXIgcj1cImFiXCIuc3BsaXQoZSk7cmV0dXJuIDIhPT1yLmxlbmd0aHx8XCJhXCIhPT1yWzBdfHxcImJcIiE9PXJbMV19KSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGgpe3ZhciBkPW8oZSksbT0haSgoZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gdFtkXT1mdW5jdGlvbigpe3JldHVybiA3fSw3IT1cIlwiW2VdKHQpfSkpLHk9bSYmIWkoKGZ1bmN0aW9uKCl7dmFyIHQ9ITEscj0vYS87cmV0dXJuXCJzcGxpdFwiPT09ZSYmKChyPXt9KS5jb25zdHJ1Y3Rvcj17fSxyLmNvbnN0cnVjdG9yW3VdPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHIuZmxhZ3M9XCJcIixyW2RdPS8uL1tkXSksci5leGVjPWZ1bmN0aW9uKCl7cmV0dXJuIHQ9ITAsbnVsbH0scltkXShcIlwiKSwhdH0pKTtpZighbXx8IXl8fFwicmVwbGFjZVwiPT09ZSYmKCFsfHwhY3x8cCl8fFwic3BsaXRcIj09PWUmJiFmKXt2YXIgdj0vLi9bZF0sXz1yKGQsXCJcIltlXSwoZnVuY3Rpb24oZSx0LHIsbixpKXtyZXR1cm4gdC5leGVjPT09YT9tJiYhaT97ZG9uZTohMCx2YWx1ZTp2LmNhbGwodCxyLG4pfTp7ZG9uZTohMCx2YWx1ZTplLmNhbGwocix0LG4pfTp7ZG9uZTohMX19KSx7UkVQTEFDRV9LRUVQU18kMDpjLFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFOnB9KSxnPV9bMF0sYj1fWzFdO24oU3RyaW5nLnByb3RvdHlwZSxlLGcpLG4oUmVnRXhwLnByb3RvdHlwZSxkLDI9PXQ/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYi5jYWxsKGUsdGhpcyx0KX06ZnVuY3Rpb24oZSl7cmV0dXJuIGIuY2FsbChlLHRoaXMpfSl9aCYmcyhSZWdFeHAucHJvdG90eXBlW2RdLFwic2hhbVwiLCEwKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEzNykuY2hhckF0O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHQrKHI/bihlLHQpLmxlbmd0aDoxKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQyKSxpPXIoOTMpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPWUuZXhlYztpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXt2YXIgbz1yLmNhbGwoZSx0KTtpZihcIm9iamVjdFwiIT10eXBlb2Ygbyl0aHJvdyBUeXBlRXJyb3IoXCJSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGxcIik7cmV0dXJuIG99aWYoXCJSZWdFeHBcIiE9PW4oZSkpdGhyb3cgVHlwZUVycm9yKFwiUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlclwiKTtyZXR1cm4gaS5jYWxsKGUsdCl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOTYpO3QuZm9yZ2l2aW5nQmFzZTY0RW5jb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmZyb20odCkudG9TdHJpbmcoXCJiYXNlNjRcIil9LHQuZm9yZ2l2aW5nQmFzZTY0RGVjb2RlPWZ1bmN0aW9uKHQpe3JldHVyblwiXCI9PT10P1wiXCI6KCh0PXQucmVwbGFjZShuLkFTQ0lJV2hpdGVTcGFjZSxcIlwiKSkubGVuZ3RoJTQ9PTAmJih0LmVuZHNXaXRoKFwiPT1cIik/dD10LnN1YnN0cigwLHQubGVuZ3RoLTIpOnQuZW5kc1dpdGgoXCI9XCIpJiYodD10LnN1YnN0cigwLHQubGVuZ3RoLTEpKSksdC5sZW5ndGglND09MT9udWxsOi9bMC05QS1aYS16Ky9dLy50ZXN0KHQpP2UuZnJvbSh0LFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwidXRmOFwiKTpudWxsKX19KS5jYWxsKHRoaXMscigxNDUpLkJ1ZmZlcil9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmJ5dGVMZW5ndGg9ZnVuY3Rpb24oZSl7dmFyIHQ9bChlKSxyPXRbMF0sbj10WzFdO3JldHVybiAzKihyK24pLzQtbn0sdC50b0J5dGVBcnJheT1mdW5jdGlvbihlKXt2YXIgdCxyLG49bChlKSxhPW5bMF0scz1uWzFdLHU9bmV3IG8oZnVuY3Rpb24oZSx0LHIpe3JldHVybiAzKih0K3IpLzQtcn0oMCxhLHMpKSxjPTAsaD1zPjA/YS00OmE7Zm9yKHI9MDtyPGg7cis9NCl0PWlbZS5jaGFyQ29kZUF0KHIpXTw8MTh8aVtlLmNoYXJDb2RlQXQocisxKV08PDEyfGlbZS5jaGFyQ29kZUF0KHIrMildPDw2fGlbZS5jaGFyQ29kZUF0KHIrMyldLHVbYysrXT10Pj4xNiYyNTUsdVtjKytdPXQ+PjgmMjU1LHVbYysrXT0yNTUmdDsyPT09cyYmKHQ9aVtlLmNoYXJDb2RlQXQocildPDwyfGlbZS5jaGFyQ29kZUF0KHIrMSldPj40LHVbYysrXT0yNTUmdCk7MT09PXMmJih0PWlbZS5jaGFyQ29kZUF0KHIpXTw8MTB8aVtlLmNoYXJDb2RlQXQocisxKV08PDR8aVtlLmNoYXJDb2RlQXQocisyKV0+PjIsdVtjKytdPXQ+PjgmMjU1LHVbYysrXT0yNTUmdCk7cmV0dXJuIHV9LHQuZnJvbUJ5dGVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1lLmxlbmd0aCxpPXIlMyxvPVtdLGE9MCxzPXItaTthPHM7YSs9MTYzODMpby5wdXNoKGMoZSxhLGErMTYzODM+cz9zOmErMTYzODMpKTsxPT09aT8odD1lW3ItMV0sby5wdXNoKG5bdD4+Ml0rblt0PDw0JjYzXStcIj09XCIpKToyPT09aSYmKHQ9KGVbci0yXTw8OCkrZVtyLTFdLG8ucHVzaChuW3Q+PjEwXStuW3Q+PjQmNjNdK25bdDw8MiY2M10rXCI9XCIpKTtyZXR1cm4gby5qb2luKFwiXCIpfTtmb3IodmFyIG49W10saT1bXSxvPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5P1VpbnQ4QXJyYXk6QXJyYXksYT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIixzPTAsdT1hLmxlbmd0aDtzPHU7KytzKW5bc109YVtzXSxpW2EuY2hhckNvZGVBdChzKV09cztmdW5jdGlvbiBsKGUpe3ZhciB0PWUubGVuZ3RoO2lmKHQlND4wKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDRcIik7dmFyIHI9ZS5pbmRleE9mKFwiPVwiKTtyZXR1cm4tMT09PXImJihyPXQpLFtyLHI9PT10PzA6NC1yJTRdfWZ1bmN0aW9uIGMoZSx0LHIpe2Zvcih2YXIgaSxvLGE9W10scz10O3M8cjtzKz0zKWk9KGVbc108PDE2JjE2NzExNjgwKSsoZVtzKzFdPDw4JjY1MjgwKSsoMjU1JmVbcysyXSksYS5wdXNoKG5bKG89aSk+PjE4JjYzXStuW28+PjEyJjYzXStuW28+PjYmNjNdK25bNjMmb10pO3JldHVybiBhLmpvaW4oXCJcIil9aVtcIi1cIi5jaGFyQ29kZUF0KDApXT02MixpW1wiX1wiLmNoYXJDb2RlQXQoMCldPTYzfSxmdW5jdGlvbihlLHQpe3QucmVhZD1mdW5jdGlvbihlLHQscixuLGkpe3ZhciBvLGEscz04Kmktbi0xLHU9KDE8PHMpLTEsbD11Pj4xLGM9LTcsaD1yP2ktMTowLHA9cj8tMToxLGY9ZVt0K2hdO2ZvcihoKz1wLG89ZiYoMTw8LWMpLTEsZj4+PS1jLGMrPXM7Yz4wO289MjU2Km8rZVt0K2hdLGgrPXAsYy09OCk7Zm9yKGE9byYoMTw8LWMpLTEsbz4+PS1jLGMrPW47Yz4wO2E9MjU2KmErZVt0K2hdLGgrPXAsYy09OCk7aWYoMD09PW8pbz0xLWw7ZWxzZXtpZihvPT09dSlyZXR1cm4gYT9OYU46MS8wKihmPy0xOjEpO2ErPU1hdGgucG93KDIsbiksby09bH1yZXR1cm4oZj8tMToxKSphKk1hdGgucG93KDIsby1uKX0sdC53cml0ZT1mdW5jdGlvbihlLHQscixuLGksbyl7dmFyIGEscyx1LGw9OCpvLWktMSxjPSgxPDxsKS0xLGg9Yz4+MSxwPTIzPT09aT9NYXRoLnBvdygyLC0yNCktTWF0aC5wb3coMiwtNzcpOjAsZj1uPzA6by0xLGQ9bj8xOi0xLG09dDwwfHwwPT09dCYmMS90PDA/MTowO2Zvcih0PU1hdGguYWJzKHQpLGlzTmFOKHQpfHx0PT09MS8wPyhzPWlzTmFOKHQpPzE6MCxhPWMpOihhPU1hdGguZmxvb3IoTWF0aC5sb2codCkvTWF0aC5MTjIpLHQqKHU9TWF0aC5wb3coMiwtYSkpPDEmJihhLS0sdSo9MiksKHQrPWEraD49MT9wL3U6cCpNYXRoLnBvdygyLDEtaCkpKnU+PTImJihhKyssdS89MiksYStoPj1jPyhzPTAsYT1jKTphK2g+PTE/KHM9KHQqdS0xKSpNYXRoLnBvdygyLGkpLGErPWgpOihzPXQqTWF0aC5wb3coMixoLTEpKk1hdGgucG93KDIsaSksYT0wKSk7aT49ODtlW3IrZl09MjU1JnMsZis9ZCxzLz0yNTYsaS09OCk7Zm9yKGE9YTw8aXxzLGwrPWk7bD4wO2VbcitmXT0yNTUmYSxmKz1kLGEvPTI1NixsLT04KTtlW3IrZi1kXXw9MTI4Km19fSxmdW5jdGlvbihlLHQpe3ZhciByPXt9LnRvU3RyaW5nO2UuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PXIuY2FsbChlKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDEpO2Z1bmN0aW9uIG8oZSl7dmFyIHQscjtpZihudWxsPT09ZXx8aS5pc1N0cmluZyhlKXx8aS5pc051bWJlcihlKSlyZXR1cm4gZTtpZihpLmlzQXJyYXkoZSkpe3ZhciBhPW5ldyBBcnJheTt0cnl7Zm9yKHZhciBzPW4oZSksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBsPXUudmFsdWU7YS5wdXNoKG8obCkpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXt1JiYhdS5kb25lJiYocj1zLnJldHVybikmJnIuY2FsbChzKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIGF9aWYoaS5pc09iamVjdChlKSl7YT1uZXcgTWFwO2Zvcih2YXIgYyBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkoYykpe3ZhciBoPWVbY107YS5zZXQoYyxvKGgpKX1yZXR1cm4gYX1yZXR1cm4gZX10LnBhcnNlSlNPTkZyb21CeXRlcz1mdW5jdGlvbihlKXt2YXIgdD1pLnV0ZjhEZWNvZGUoZSk7cmV0dXJuIEpTT04ucGFyc2UuY2FsbCh2b2lkIDAsdCl9LHQuc2VyaWFsaXplSlNPTlRvQnl0ZXM9ZnVuY3Rpb24oZSl7dmFyIHQ9SlNPTi5zdHJpbmdpZnkuY2FsbCh2b2lkIDAsZSk7cmV0dXJuIGkudXRmOEVuY29kZSh0KX0sdC5wYXJzZUpTT05JbnRvSW5mcmFWYWx1ZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8oSlNPTi5wYXJzZS5jYWxsKHZvaWQgMCxlKSl9LHQuY29udmVydEFKU09ORGVyaXZlZEphdmFTY3JpcHRWYWx1ZVRvQW5JbmZyYVZhbHVlPW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLGE9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmaVswXSl0aHJvdyBpWzFdO3JldHVybiBpWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIG89e25leHQ6cygwKSx0aHJvdzpzKDEpLHJldHVybjpzKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihvW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLG87ZnVuY3Rpb24gcyhvKXtyZXR1cm4gZnVuY3Rpb24ocyl7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKHIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDthOyl0cnl7aWYocj0xLG4mJihpPTImb1swXT9uLnJldHVybjpvWzBdP24udGhyb3d8fCgoaT1uLnJldHVybikmJmkuY2FsbChuKSwwKTpuLm5leHQpJiYhKGk9aS5jYWxsKG4sb1sxXSkpLmRvbmUpcmV0dXJuIGk7c3dpdGNoKG49MCxpJiYobz1bMiZvWzBdLGkudmFsdWVdKSxvWzBdKXtjYXNlIDA6Y2FzZSAxOmk9bzticmVhaztjYXNlIDQ6cmV0dXJuIGEubGFiZWwrKyx7dmFsdWU6b1sxXSxkb25lOiExfTtjYXNlIDU6YS5sYWJlbCsrLG49b1sxXSxvPVswXTtjb250aW51ZTtjYXNlIDc6bz1hLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKGk9YS50cnlzLChpPWkubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pfHw2IT09b1swXSYmMiE9PW9bMF0pKXthPTA7Y29udGludWV9aWYoMz09PW9bMF0mJighaXx8b1sxXT5pWzBdJiZvWzFdPGlbM10pKXthLmxhYmVsPW9bMV07YnJlYWt9aWYoNj09PW9bMF0mJmEubGFiZWw8aVsxXSl7YS5sYWJlbD1pWzFdLGk9bzticmVha31pZihpJiZhLmxhYmVsPGlbMl0pe2EubGFiZWw9aVsyXSxhLm9wcy5wdXNoKG8pO2JyZWFrfWlbMl0mJmEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZX1vPXQuY2FsbChlLGEpfWNhdGNoKGUpe289WzYsZV0sbj0wfWZpbmFsbHl7cj1pPTB9aWYoNSZvWzBdKXRocm93IG9bMV07cmV0dXJue3ZhbHVlOm9bMF0/b1sxXTp2b2lkIDAsZG9uZTohMH19KFtvLHNdKX19fSxpPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxvPXRoaXMmJnRoaXMuX19zcHJlYWR8fGZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWU9ZS5jb25jYXQoaShhcmd1bWVudHNbdF0pKTtyZXR1cm4gZX0sYT10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDEpO3QuYXBwZW5kPWZ1bmN0aW9uKGUsdCl7ZS5wdXNoKHQpfSx0LmV4dGVuZD1mdW5jdGlvbihlLHQpe2UucHVzaC5hcHBseShlLG8odCkpfSx0LnByZXBlbmQ9ZnVuY3Rpb24oZSx0KXtlLnVuc2hpZnQodCl9LHQucmVwbGFjZT1mdW5jdGlvbihlLHQscil7dmFyIG4saSxvPTA7dHJ5e2Zvcih2YXIgdT1hKGUpLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgYz1sLnZhbHVlO2lmKHMuaXNGdW5jdGlvbih0KSl0LmNhbGwobnVsbCxjKSYmKGVbb109cik7ZWxzZSBpZihjPT09dClyZXR1cm4gdm9pZChlW29dPXIpO28rK319Y2F0Y2goZSl7bj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKGk9dS5yZXR1cm4pJiZpLmNhbGwodSl9ZmluYWxseXtpZihuKXRocm93IG4uZXJyb3J9fX0sdC5pbnNlcnQ9ZnVuY3Rpb24oZSx0LHIpe2Uuc3BsaWNlKHIsMCx0KX0sdC5yZW1vdmU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9ZS5sZW5ndGg7ci0tOyl7dmFyIG49ZVtyXTtpZihzLmlzRnVuY3Rpb24odCkpdC5jYWxsKG51bGwsbikmJmUuc3BsaWNlKHIsMSk7ZWxzZSBpZihuPT09dClyZXR1cm4gdm9pZCBlLnNwbGljZShyLDEpfX0sdC5lbXB0eT1mdW5jdGlvbihlKXtlLmxlbmd0aD0wfSx0LmNvbnRhaW5zPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjt0cnl7Zm9yKHZhciBpPWEoZSksbz1pLm5leHQoKTshby5kb25lO289aS5uZXh0KCkpe3ZhciB1PW8udmFsdWU7aWYocy5pc0Z1bmN0aW9uKHQpKXtpZih0LmNhbGwobnVsbCx1KSlyZXR1cm4hMH1lbHNlIGlmKHU9PT10KXJldHVybiEwfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtvJiYhby5kb25lJiYobj1pLnJldHVybikmJm4uY2FsbChpKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuITF9LHQuc2l6ZT1mdW5jdGlvbihlLHQpe3ZhciByLG47aWYodm9pZCAwPT09dClyZXR1cm4gZS5sZW5ndGg7dmFyIGk9MDt0cnl7Zm9yKHZhciBvPWEoZSkscz1vLm5leHQoKTshcy5kb25lO3M9by5uZXh0KCkpe3ZhciB1PXMudmFsdWU7dC5jYWxsKG51bGwsdSkmJmkrK319Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKG49by5yZXR1cm4pJiZuLmNhbGwobyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBpfSx0LmlzRW1wdHk9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLmxlbmd0aH0sdC5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaSxvLHMsdSxsO3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHZvaWQgMCE9PXQ/WzMsMl06WzUsYShlKV07Y2FzZSAxOnJldHVybiBuLnNlbnQoKSxbMyw5XTtjYXNlIDI6bi50cnlzLnB1c2goWzIsNyw4LDldKSxyPWEoZSksaT1yLm5leHQoKSxuLmxhYmVsPTM7Y2FzZSAzOnJldHVybiBpLmRvbmU/WzMsNl06KG89aS52YWx1ZSx0LmNhbGwobnVsbCxvKT9bNCxvXTpbMyw1XSk7Y2FzZSA0Om4uc2VudCgpLG4ubGFiZWw9NTtjYXNlIDU6cmV0dXJuIGk9ci5uZXh0KCksWzMsM107Y2FzZSA2OnJldHVyblszLDldO2Nhc2UgNzpyZXR1cm4gcz1uLnNlbnQoKSx1PXtlcnJvcjpzfSxbMyw5XTtjYXNlIDg6dHJ5e2kmJiFpLmRvbmUmJihsPXIucmV0dXJuKSYmbC5jYWxsKHIpfWZpbmFsbHl7aWYodSl0aHJvdyB1LmVycm9yfXJldHVybls3XTtjYXNlIDk6cmV0dXJuWzJdfX0pKX0sdC5jbG9uZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3KEFycmF5LmJpbmQuYXBwbHkoQXJyYXksbyhbdm9pZCAwXSxlKSkpfSx0LnNvcnRJbkFzY2VuZGluZ09yZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuc29ydCgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKG51bGwsZSxyKT8tMToxfSkpfSx0LnNvcnRJbkRlc2NlbmRpbmdPcmRlcj1mdW5jdGlvbihlLHQpe3JldHVybiBlLnNvcnQoKGZ1bmN0aW9uKGUscil7cmV0dXJuIHQuY2FsbChudWxsLGUscik/MTotMX0pKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLGE9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmaVswXSl0aHJvdyBpWzFdO3JldHVybiBpWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIG89e25leHQ6cygwKSx0aHJvdzpzKDEpLHJldHVybjpzKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihvW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLG87ZnVuY3Rpb24gcyhvKXtyZXR1cm4gZnVuY3Rpb24ocyl7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKHIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDthOyl0cnl7aWYocj0xLG4mJihpPTImb1swXT9uLnJldHVybjpvWzBdP24udGhyb3d8fCgoaT1uLnJldHVybikmJmkuY2FsbChuKSwwKTpuLm5leHQpJiYhKGk9aS5jYWxsKG4sb1sxXSkpLmRvbmUpcmV0dXJuIGk7c3dpdGNoKG49MCxpJiYobz1bMiZvWzBdLGkudmFsdWVdKSxvWzBdKXtjYXNlIDA6Y2FzZSAxOmk9bzticmVhaztjYXNlIDQ6cmV0dXJuIGEubGFiZWwrKyx7dmFsdWU6b1sxXSxkb25lOiExfTtjYXNlIDU6YS5sYWJlbCsrLG49b1sxXSxvPVswXTtjb250aW51ZTtjYXNlIDc6bz1hLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKGk9YS50cnlzLChpPWkubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pfHw2IT09b1swXSYmMiE9PW9bMF0pKXthPTA7Y29udGludWV9aWYoMz09PW9bMF0mJighaXx8b1sxXT5pWzBdJiZvWzFdPGlbM10pKXthLmxhYmVsPW9bMV07YnJlYWt9aWYoNj09PW9bMF0mJmEubGFiZWw8aVsxXSl7YS5sYWJlbD1pWzFdLGk9bzticmVha31pZihpJiZhLmxhYmVsPGlbMl0pe2EubGFiZWw9aVsyXSxhLm9wcy5wdXNoKG8pO2JyZWFrfWlbMl0mJmEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZX1vPXQuY2FsbChlLGEpfWNhdGNoKGUpe289WzYsZV0sbj0wfWZpbmFsbHl7cj1pPTB9aWYoNSZvWzBdKXRocm93IG9bMV07cmV0dXJue3ZhbHVlOm9bMF0/b1sxXTp2b2lkIDAsZG9uZTohMH19KFtvLHNdKX19fSxpPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LG89dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LGE9dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChvKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDEpO3QuZ2V0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZ2V0KHQpfSx0LnNldD1mdW5jdGlvbihlLHQscil7ZS5zZXQodCxyKX0sdC5yZW1vdmU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLG8sYTtpZihzLmlzRnVuY3Rpb24odCkpe3ZhciB1PVtdO3RyeXtmb3IodmFyIGw9aShlKSxjPWwubmV4dCgpOyFjLmRvbmU7Yz1sLm5leHQoKSl7dmFyIGg9Yy52YWx1ZTt0LmNhbGwobnVsbCxoKSYmdS5wdXNoKGhbMF0pfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYobj1sLnJldHVybikmJm4uY2FsbChsKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19dHJ5e2Zvcih2YXIgcD1pKHUpLGY9cC5uZXh0KCk7IWYuZG9uZTtmPXAubmV4dCgpKXt2YXIgZD1mLnZhbHVlO2UuZGVsZXRlKGQpfX1jYXRjaChlKXtvPXtlcnJvcjplfX1maW5hbGx5e3RyeXtmJiYhZi5kb25lJiYoYT1wLnJldHVybikmJmEuY2FsbChwKX1maW5hbGx5e2lmKG8pdGhyb3cgby5lcnJvcn19fWVsc2UgZS5kZWxldGUodCl9LHQuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO2lmKHMuaXNGdW5jdGlvbih0KSl7dHJ5e2Zvcih2YXIgbz1pKGUpLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgdT1hLnZhbHVlO2lmKHQuY2FsbChudWxsLHUpKXJldHVybiEwfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYobj1vLnJldHVybikmJm4uY2FsbChvKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuITF9cmV0dXJuIGUuaGFzKHQpfSx0LmtleXM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBTZXQoZS5rZXlzKCkpfSx0LnZhbHVlcz1mdW5jdGlvbihlKXtyZXR1cm4gYShlLnZhbHVlcygpKX0sdC5zaXplPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtpZih2b2lkIDA9PT10KXJldHVybiBlLnNpemU7dmFyIG89MDt0cnl7Zm9yKHZhciBhPWkoZSkscz1hLm5leHQoKTshcy5kb25lO3M9YS5uZXh0KCkpe3ZhciB1PXMudmFsdWU7dC5jYWxsKG51bGwsdSkmJm8rK319Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKG49YS5yZXR1cm4pJiZuLmNhbGwoYSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBvfSx0LmlzRW1wdHk9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLnNpemV9LHQuZm9yRWFjaD1mdW5jdGlvbihlLHQpe3ZhciByLG8sYSxzLHUsbDtyZXR1cm4gbih0aGlzLChmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOnJldHVybiB2b2lkIDAhPT10P1szLDJdOls1LGkoZSldO2Nhc2UgMTpyZXR1cm4gbi5zZW50KCksWzMsOV07Y2FzZSAyOm4udHJ5cy5wdXNoKFsyLDcsOCw5XSkscj1pKGUpLG89ci5uZXh0KCksbi5sYWJlbD0zO2Nhc2UgMzpyZXR1cm4gby5kb25lP1szLDZdOihhPW8udmFsdWUsdC5jYWxsKG51bGwsYSk/WzQsYV06WzMsNV0pO2Nhc2UgNDpuLnNlbnQoKSxuLmxhYmVsPTU7Y2FzZSA1OnJldHVybiBvPXIubmV4dCgpLFszLDNdO2Nhc2UgNjpyZXR1cm5bMyw5XTtjYXNlIDc6cmV0dXJuIHM9bi5zZW50KCksdT17ZXJyb3I6c30sWzMsOV07Y2FzZSA4OnRyeXtvJiYhby5kb25lJiYobD1yLnJldHVybikmJmwuY2FsbChyKX1maW5hbGx5e2lmKHUpdGhyb3cgdS5lcnJvcn1yZXR1cm5bN107Y2FzZSA5OnJldHVyblsyXX19KSl9LHQuY2xvbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBNYXAoZSl9LHQuc29ydEluQXNjZW5kaW5nT3JkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcoQXJyYXkuYmluZC5hcHBseShBcnJheSxhKFt2b2lkIDBdLGUpKSk7cmV0dXJuIHIuc29ydCgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKG51bGwsZSxyKT8tMToxfSkpLG5ldyBNYXAocil9LHQuc29ydEluRGVzY2VuZGluZ09yZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3KEFycmF5LmJpbmQuYXBwbHkoQXJyYXksYShbdm9pZCAwXSxlKSkpO3JldHVybiByLnNvcnQoKGZ1bmN0aW9uKGUscil7cmV0dXJuIHQuY2FsbChudWxsLGUscik/MTotMX0pKSxuZXcgTWFwKHIpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSFRNTD1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIix0LlhNTD1cImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLHQuWE1MTlM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiLHQuTWF0aE1MPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHQuU1ZHPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIix0LlhMaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wifSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5lbnF1ZXVlPWZ1bmN0aW9uKGUsdCl7ZS5wdXNoKHQpfSx0LmRlcXVldWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2hpZnQoKXx8bnVsbH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLGE9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmaVswXSl0aHJvdyBpWzFdO3JldHVybiBpWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIG89e25leHQ6cygwKSx0aHJvdzpzKDEpLHJldHVybjpzKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihvW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLG87ZnVuY3Rpb24gcyhvKXtyZXR1cm4gZnVuY3Rpb24ocyl7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKHIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDthOyl0cnl7aWYocj0xLG4mJihpPTImb1swXT9uLnJldHVybjpvWzBdP24udGhyb3d8fCgoaT1uLnJldHVybikmJmkuY2FsbChuKSwwKTpuLm5leHQpJiYhKGk9aS5jYWxsKG4sb1sxXSkpLmRvbmUpcmV0dXJuIGk7c3dpdGNoKG49MCxpJiYobz1bMiZvWzBdLGkudmFsdWVdKSxvWzBdKXtjYXNlIDA6Y2FzZSAxOmk9bzticmVhaztjYXNlIDQ6cmV0dXJuIGEubGFiZWwrKyx7dmFsdWU6b1sxXSxkb25lOiExfTtjYXNlIDU6YS5sYWJlbCsrLG49b1sxXSxvPVswXTtjb250aW51ZTtjYXNlIDc6bz1hLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKGk9YS50cnlzLChpPWkubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pfHw2IT09b1swXSYmMiE9PW9bMF0pKXthPTA7Y29udGludWV9aWYoMz09PW9bMF0mJighaXx8b1sxXT5pWzBdJiZvWzFdPGlbM10pKXthLmxhYmVsPW9bMV07YnJlYWt9aWYoNj09PW9bMF0mJmEubGFiZWw8aVsxXSl7YS5sYWJlbD1pWzFdLGk9bzticmVha31pZihpJiZhLmxhYmVsPGlbMl0pe2EubGFiZWw9aVsyXSxhLm9wcy5wdXNoKG8pO2JyZWFrfWlbMl0mJmEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZX1vPXQuY2FsbChlLGEpfWNhdGNoKGUpe289WzYsZV0sbj0wfWZpbmFsbHl7cj1pPTB9aWYoNSZvWzBdKXRocm93IG9bMV07cmV0dXJue3ZhbHVlOm9bMF0/b1sxXTp2b2lkIDAsZG9uZTohMH19KFtvLHNdKX19fSxpPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LG89dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LGE9dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChvKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDEpO2Z1bmN0aW9uIHUoZSx0KXt2YXIgcixuO3RyeXtmb3IodmFyIG89aShlKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7dmFyIHM9YS52YWx1ZTtpZighdC5oYXMocykpcmV0dXJuITF9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihuPW8ucmV0dXJuKSYmbi5jYWxsKG8pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4hMH10LmFwcGVuZD1mdW5jdGlvbihlLHQpe2UuYWRkKHQpfSx0LmV4dGVuZD1mdW5jdGlvbihlLHQpe3QuZm9yRWFjaChlLmFkZCxlKX0sdC5wcmVwZW5kPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IFNldChlKTtlLmNsZWFyKCksZS5hZGQodCksci5mb3JFYWNoKGUuYWRkLGUpfSx0LnJlcGxhY2U9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLG8sYT1uZXcgU2V0O3RyeXtmb3IodmFyIHU9aShlKSxsPXUubmV4dCgpOyFsLmRvbmU7bD11Lm5leHQoKSl7dmFyIGM9bC52YWx1ZTtzLmlzRnVuY3Rpb24odCk/dC5jYWxsKG51bGwsYyk/YS5hZGQocik6YS5hZGQoYyk6Yz09PXQ/YS5hZGQocik6YS5hZGQoYyl9fWNhdGNoKGUpe249e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJihvPXUucmV0dXJuKSYmby5jYWxsKHUpfWZpbmFsbHl7aWYobil0aHJvdyBuLmVycm9yfX1lLmNsZWFyKCksYS5mb3JFYWNoKGUuYWRkLGUpfSx0Lmluc2VydD1mdW5jdGlvbihlLHQscil7dmFyIG4sbyxhPW5ldyBTZXQscz0wO3RyeXtmb3IodmFyIHU9aShlKSxsPXUubmV4dCgpOyFsLmRvbmU7bD11Lm5leHQoKSl7dmFyIGM9bC52YWx1ZTtzPT09ciYmYS5hZGQodCksYS5hZGQoYykscysrfX1jYXRjaChlKXtuPXtlcnJvcjplfX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYobz11LnJldHVybikmJm8uY2FsbCh1KX1maW5hbGx5e2lmKG4pdGhyb3cgbi5lcnJvcn19ZS5jbGVhcigpLGEuZm9yRWFjaChlLmFkZCxlKX0sdC5yZW1vdmU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLG8sYTtpZihzLmlzRnVuY3Rpb24odCkpe3ZhciB1PVtdO3RyeXtmb3IodmFyIGw9aShlKSxjPWwubmV4dCgpOyFjLmRvbmU7Yz1sLm5leHQoKSl7dmFyIGg9Yy52YWx1ZTt0LmNhbGwobnVsbCxoKSYmdS5wdXNoKGgpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYobj1sLnJldHVybikmJm4uY2FsbChsKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19dHJ5e2Zvcih2YXIgcD1pKHUpLGY9cC5uZXh0KCk7IWYuZG9uZTtmPXAubmV4dCgpKXt2YXIgZD1mLnZhbHVlO2UuZGVsZXRlKGQpfX1jYXRjaChlKXtvPXtlcnJvcjplfX1maW5hbGx5e3RyeXtmJiYhZi5kb25lJiYoYT1wLnJldHVybikmJmEuY2FsbChwKX1maW5hbGx5e2lmKG8pdGhyb3cgby5lcnJvcn19fWVsc2UgZS5kZWxldGUodCl9LHQuZW1wdHk9ZnVuY3Rpb24oZSl7ZS5jbGVhcigpfSx0LmNvbnRhaW5zPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtpZighcy5pc0Z1bmN0aW9uKHQpKXJldHVybiBlLmhhcyh0KTt0cnl7Zm9yKHZhciBvPWkoZSksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe3ZhciB1PWEudmFsdWU7aWYodC5jYWxsKG51bGwsdSkpcmV0dXJuITB9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihuPW8ucmV0dXJuKSYmbi5jYWxsKG8pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4hMX0sdC5zaXplPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtpZih2b2lkIDA9PT10KXJldHVybiBlLnNpemU7dmFyIG89MDt0cnl7Zm9yKHZhciBhPWkoZSkscz1hLm5leHQoKTshcy5kb25lO3M9YS5uZXh0KCkpe3ZhciB1PXMudmFsdWU7dC5jYWxsKG51bGwsdSkmJm8rK319Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKG49YS5yZXR1cm4pJiZuLmNhbGwoYSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBvfSx0LmlzRW1wdHk9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLnNpemV9LHQuZm9yRWFjaD1mdW5jdGlvbihlLHQpe3ZhciByLG8sYSxzLHUsbDtyZXR1cm4gbih0aGlzLChmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOnJldHVybiB2b2lkIDAhPT10P1szLDJdOls1LGkoZSldO2Nhc2UgMTpyZXR1cm4gbi5zZW50KCksWzMsOV07Y2FzZSAyOm4udHJ5cy5wdXNoKFsyLDcsOCw5XSkscj1pKGUpLG89ci5uZXh0KCksbi5sYWJlbD0zO2Nhc2UgMzpyZXR1cm4gby5kb25lP1szLDZdOihhPW8udmFsdWUsdC5jYWxsKG51bGwsYSk/WzQsYV06WzMsNV0pO2Nhc2UgNDpuLnNlbnQoKSxuLmxhYmVsPTU7Y2FzZSA1OnJldHVybiBvPXIubmV4dCgpLFszLDNdO2Nhc2UgNjpyZXR1cm5bMyw5XTtjYXNlIDc6cmV0dXJuIHM9bi5zZW50KCksdT17ZXJyb3I6c30sWzMsOV07Y2FzZSA4OnRyeXtvJiYhby5kb25lJiYobD1yLnJldHVybikmJmwuY2FsbChyKX1maW5hbGx5e2lmKHUpdGhyb3cgdS5lcnJvcn1yZXR1cm5bN107Y2FzZSA5OnJldHVyblsyXX19KSl9LHQuY2xvbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBTZXQoZSl9LHQuc29ydEluQXNjZW5kaW5nT3JkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcoQXJyYXkuYmluZC5hcHBseShBcnJheSxhKFt2b2lkIDBdLGUpKSk7cmV0dXJuIHIuc29ydCgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKG51bGwsZSxyKT8tMToxfSkpLG5ldyBTZXQocil9LHQuc29ydEluRGVzY2VuZGluZ09yZGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3KEFycmF5LmJpbmQuYXBwbHkoQXJyYXksYShbdm9pZCAwXSxlKSkpO3JldHVybiByLnNvcnQoKGZ1bmN0aW9uKGUscil7cmV0dXJuIHQuY2FsbChudWxsLGUscik/MTotMX0pKSxuZXcgU2V0KHIpfSx0LmlzU3Vic2V0T2Y9dSx0LmlzU3VwZXJzZXRPZj1mdW5jdGlvbihlLHQpe3JldHVybiB1KHQsZSl9LHQuaW50ZXJzZWN0aW9uPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixvPW5ldyBTZXQ7dHJ5e2Zvcih2YXIgYT1pKGUpLHM9YS5uZXh0KCk7IXMuZG9uZTtzPWEubmV4dCgpKXt2YXIgdT1zLnZhbHVlO3QuaGFzKHUpJiZvLmFkZCh1KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKG49YS5yZXR1cm4pJiZuLmNhbGwoYSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBvfSx0LnVuaW9uPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IFNldChlKTtyZXR1cm4gdC5mb3JFYWNoKHIuYWRkLHIpLHJ9LHQucmFuZ2U9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9bmV3IFNldCxuPWU7bjw9dDtuKyspci5hZGQobik7cmV0dXJuIHJ9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5wdXNoPWZ1bmN0aW9uKGUsdCl7ZS5wdXNoKHQpfSx0LnBvcD1mdW5jdGlvbihlKXtyZXR1cm4gZS5wb3AoKXx8bnVsbH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDk2KSxvPXIoMTQ3KSxhPXIoMTQ2KSxzPXIoMSk7ZnVuY3Rpb24gdShlLHQpe2Zvcih2YXIgcj0wOzspe3ZhciBuPXI8ZS5sZW5ndGg/ZS5jaGFyQ29kZUF0KHIpOm51bGwsaT1yPHQubGVuZ3RoP3QuY2hhckNvZGVBdChyKTpudWxsO2lmKG51bGw9PT1uKXJldHVybiEwO2lmKG4hPT1pKXJldHVybiExO3IrK319ZnVuY3Rpb24gbChlKXt2YXIgdCxyLGk9QXJyYXkuZnJvbShlKSxvPW5ldyBVaW50OEFycmF5KGkubGVuZ3RoKSxhPTA7dHJ5e2Zvcih2YXIgcz1uKGUpLHU9cy5uZXh0KCk7IXUuZG9uZTt1PXMubmV4dCgpKXt2YXIgbD11LnZhbHVlLmNvZGVQb2ludEF0KDApO2NvbnNvbGUuYXNzZXJ0KHZvaWQgMCE9PWwmJmw8PTI1NSxcImlzb21vcnBoaWNFbmNvZGUgcmVxdWlyZXMgc3RyaW5nIGJ5dGVzIHRvIGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAweDAwRkYuXCIpLHZvaWQgMCE9PWwmJmw8PTI1NSYmKG9bYSsrXT1sKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dSYmIXUuZG9uZSYmKHI9cy5yZXR1cm4pJiZyLmNhbGwocyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXJldHVybiBvfWZ1bmN0aW9uIGMoZSl7cmV0dXJuL15bXFx1MDAwMC1cXHUwMDdGXSokLy50ZXN0KGUpfWZ1bmN0aW9uIGgoZSl7dmFyIHQscixpPVwiXCI7dHJ5e2Zvcih2YXIgbz1uKGUpLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgcz1hLnZhbHVlLHU9cy5jb2RlUG9pbnRBdCgwKTtpKz12b2lkIDAhPT11JiZ1Pj02NSYmdTw9OTA/U3RyaW5nLmZyb21Db2RlUG9pbnQodSszMik6c319Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXJldHVybiBpfWZ1bmN0aW9uIHAoZSl7cmV0dXJuIGUucmVwbGFjZSgvXltcXHRcXG5cXGZcXHIgXSsvLFwiXCIpLnJlcGxhY2UoL1tcXHRcXG5cXGZcXHIgXSskLyxcIlwiKX1mdW5jdGlvbiBmKGUsdCxyKXtpZighcy5pc0FycmF5KHQpKXJldHVybiBmKGUsQXJyYXkuZnJvbSh0KSxyKTtmb3IodmFyIG49XCJcIjtyLnBvc2l0aW9uPHQubGVuZ3RoJiZlLmNhbGwobnVsbCx0W3IucG9zaXRpb25dKTspbis9dFtyLnBvc2l0aW9uXSxyLnBvc2l0aW9uKys7cmV0dXJuIG59ZnVuY3Rpb24gZChlLHQpe2YoKGZ1bmN0aW9uKGUpe3JldHVybiBpLkFTQ0lJV2hpdGVTcGFjZS50ZXN0KGUpfSksZSx0KX10LmlzQ29kZVVuaXRQcmVmaXg9dSx0LmlzQ29kZVVuaXRMZXNzVGhhbj1mdW5jdGlvbihlLHQpe2lmKHUodCxlKSlyZXR1cm4hMTtpZih1KGUsdCkpcmV0dXJuITA7Zm9yKHZhciByPTA7cjxNYXRoLm1pbihlLmxlbmd0aCx0Lmxlbmd0aCk7cisrKXt2YXIgbj1lLmNoYXJDb2RlQXQociksaT10LmNoYXJDb2RlQXQocik7aWYobiE9PWkpcmV0dXJuIG48aX1yZXR1cm4hMX0sdC5pc29tb3JwaGljRW5jb2RlPWwsdC5pc0FTQ0lJU3RyaW5nPWMsdC5hc2NpaUxvd2VyY2FzZT1oLHQuYXNjaWlVcHBlcmNhc2U9ZnVuY3Rpb24oZSl7dmFyIHQscixpPVwiXCI7dHJ5e2Zvcih2YXIgbz1uKGUpLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgcz1hLnZhbHVlLHU9cy5jb2RlUG9pbnRBdCgwKTtpKz12b2lkIDAhPT11JiZ1Pj05NyYmdTw9MTIyP1N0cmluZy5mcm9tQ29kZVBvaW50KHUtMzIpOnN9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gaX0sdC5hc2NpaUNhc2VJbnNlbnNpdGl2ZU1hdGNoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgoZSk9PT1oKHQpfSx0LmFzY2lpRW5jb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBjb25zb2xlLmFzc2VydChjKGUpLFwiYXNjaWlFbmNvZGUgcmVxdWlyZXMgYW4gQVNDSUkgc3RyaW5nLlwiKSxsKGUpfSx0LmFzY2lpRGVjb2RlPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dHJ5e2Zvcih2YXIgaT1uKGUpLHM9aS5uZXh0KCk7IXMuZG9uZTtzPWkubmV4dCgpKXt2YXIgdT1zLnZhbHVlO2NvbnNvbGUuYXNzZXJ0KGEuaXNBU0NJSUJ5dGUodSksXCJhc2NpaURlY29kZSByZXF1aXJlcyBhbiBBU0NJSSBieXRlIHNlcXVlbmNlLlwiKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKHI9aS5yZXR1cm4pJiZyLmNhbGwoaSl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXJldHVybiBvLmlzb21vcnBoaWNEZWNvZGUoZSl9LHQuc3RyaXBOZXdsaW5lcz1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFxuXFxyXS9nLFwiXCIpfSx0Lm5vcm1hbGl6ZU5ld2xpbmVzPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcclxcbi9nLFwiXFxuXCIpLnJlcGxhY2UoL1xcci9nLFwiXFxuXCIpfSx0LnN0cmlwTGVhZGluZ0FuZFRyYWlsaW5nQVNDSUlXaGl0ZXNwYWNlPXAsdC5zdHJpcEFuZENvbGxhcHNlQVNDSUlXaGl0ZXNwYWNlPWZ1bmN0aW9uKGUpe3JldHVybiBwKGUucmVwbGFjZSgvW1xcdFxcblxcZlxcciBdezIsfS9nLFwiIFwiKSl9LHQuY29sbGVjdEFTZXF1ZW5jZU9mQ29kZVBvaW50cz1mLHQuc2tpcEFTQ0lJV2hpdGVzcGFjZT1kLHQuc3RyaWN0bHlTcGxpdD1mdW5jdGlvbiBlKHQscil7aWYoIXMuaXNBcnJheSh0KSlyZXR1cm4gZShBcnJheS5mcm9tKHQpLHIpO3ZhciBuPXtwb3NpdGlvbjowfSxpPVtdLG89ZigoZnVuY3Rpb24oZSl7cmV0dXJuIHIhPT1lfSksdCxuKTtmb3IoaS5wdXNoKG8pO24ucG9zaXRpb248dC5sZW5ndGg7KWNvbnNvbGUuYXNzZXJ0KHRbbi5wb3NpdGlvbl09PT1yLFwic3RyaWN0bHlTcGxpdCBmb3VuZCBubyBkZWxpbWl0ZXIgaW4gaW5wdXQgc3RyaW5nLlwiKSxuLnBvc2l0aW9uKyssbz1mKChmdW5jdGlvbihlKXtyZXR1cm4gciE9PWV9KSx0LG4pLGkucHVzaChvKTtyZXR1cm4gaX0sdC5zcGxpdEFTdHJpbmdPbkFTQ0lJV2hpdGVzcGFjZT1mdW5jdGlvbiBlKHQpe2lmKCFzLmlzQXJyYXkodCkpcmV0dXJuIGUoQXJyYXkuZnJvbSh0KSk7dmFyIHI9e3Bvc2l0aW9uOjB9LG49W107Zm9yKGQodCxyKTtyLnBvc2l0aW9uPHQubGVuZ3RoOyl7dmFyIG89ZigoZnVuY3Rpb24oZSl7cmV0dXJuIWkuQVNDSUlXaGl0ZVNwYWNlLnRlc3QoZSl9KSx0LHIpO24ucHVzaChvKSxkKHQscil9cmV0dXJuIG59LHQuc3BsaXRBU3RyaW5nT25Db21tYXM9ZnVuY3Rpb24gZSh0KXtpZighcy5pc0FycmF5KHQpKXJldHVybiBlKEFycmF5LmZyb20odCkpO2Zvcih2YXIgcj17cG9zaXRpb246MH0sbj1bXTtyLnBvc2l0aW9uPHQubGVuZ3RoOyl7dmFyIGk9ZigoZnVuY3Rpb24oZSl7cmV0dXJuXCIsXCIhPT1lfSksdCxyKTtuLnB1c2gocChpKSksci5wb3NpdGlvbjx0Lmxlbmd0aCYmKGNvbnNvbGUuYXNzZXJ0KFwiLFwiPT09dFtyLnBvc2l0aW9uXSxcInNwbGl0QVN0cmluZ09uQ29tbWFzIGZvdW5kIG5vIGRlbGltaXRlciBpbiBpbnB1dCBzdHJpbmcuXCIpLHIucG9zaXRpb24rKyl9cmV0dXJuIG59LHQuY29uY2F0ZW5hdGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksMD09PWUubGVuZ3RoP1wiXCI6ZS5qb2luKHQpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoOTcpO3QuYWJvcnRfYWRkPWZ1bmN0aW9uKGUsdCl7dC5fYWJvcnRlZEZsYWd8fHQuX2Fib3J0QWxnb3JpdGhtcy5hZGQoZSl9LHQuYWJvcnRfcmVtb3ZlPWZ1bmN0aW9uKGUsdCl7dC5fYWJvcnRBbGdvcml0aG1zLmRlbGV0ZShlKX0sdC5hYm9ydF9zaWduYWxBYm9ydD1mdW5jdGlvbihlKXt2YXIgdCxyO2lmKCFlLl9hYm9ydGVkRmxhZyl7ZS5fYWJvcnRlZEZsYWc9ITA7dHJ5e2Zvcih2YXIgbz1uKGUuX2Fib3J0QWxnb3JpdGhtcyksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe2EudmFsdWUuY2FsbChlKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fWUuX2Fib3J0QWxnb3JpdGhtcy5jbGVhcigpLGkuZXZlbnRfZmlyZUFuRXZlbnQoXCJhYm9ydFwiLGUpfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDE1MCksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUuYXNOb2RlPWZ1bmN0aW9uKGUpe2lmKG4uR3VhcmQuaXNOb2RlKGUpKXJldHVybiBlO3Rocm93IG5ldyBFcnJvcihcIkludmFsaWQgb2JqZWN0LiBOb2RlIGV4cGVjdGVkLlwiKX0sZX0oKTt0LkNhc3Q9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGFkZCB0byBhbiBlbXB0eSBzZXQuXCIpfSxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe30sZS5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKGUpe3JldHVybiExfSxlLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7fSxlLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24oZSl7cmV0dXJuITF9LGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGl9LGUucHJvdG90eXBlLmVudHJpZXM9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGl9LGUucHJvdG90eXBlLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGl9LGUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiBuZXcgaX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFN5bWJvbC50b1N0cmluZ1RhZyx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJFbXB0eVNldFwifSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9KCk7dC5FbXB0eVNldD1uO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxlLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6ITAsdmFsdWU6bnVsbH19LGV9KCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxmdW5jdGlvbihlKXtlW2UuU2NoZW1lU3RhcnQ9MF09XCJTY2hlbWVTdGFydFwiLGVbZS5TY2hlbWU9MV09XCJTY2hlbWVcIixlW2UuTm9TY2hlbWU9Ml09XCJOb1NjaGVtZVwiLGVbZS5TcGVjaWFsUmVsYXRpdmVPckF1dGhvcml0eT0zXT1cIlNwZWNpYWxSZWxhdGl2ZU9yQXV0aG9yaXR5XCIsZVtlLlBhdGhPckF1dGhvcml0eT00XT1cIlBhdGhPckF1dGhvcml0eVwiLGVbZS5SZWxhdGl2ZT01XT1cIlJlbGF0aXZlXCIsZVtlLlJlbGF0aXZlU2xhc2g9Nl09XCJSZWxhdGl2ZVNsYXNoXCIsZVtlLlNwZWNpYWxBdXRob3JpdHlTbGFzaGVzPTddPVwiU3BlY2lhbEF1dGhvcml0eVNsYXNoZXNcIixlW2UuU3BlY2lhbEF1dGhvcml0eUlnbm9yZVNsYXNoZXM9OF09XCJTcGVjaWFsQXV0aG9yaXR5SWdub3JlU2xhc2hlc1wiLGVbZS5BdXRob3JpdHk9OV09XCJBdXRob3JpdHlcIixlW2UuSG9zdD0xMF09XCJIb3N0XCIsZVtlLkhvc3RuYW1lPTExXT1cIkhvc3RuYW1lXCIsZVtlLlBvcnQ9MTJdPVwiUG9ydFwiLGVbZS5GaWxlPTEzXT1cIkZpbGVcIixlW2UuRmlsZVNsYXNoPTE0XT1cIkZpbGVTbGFzaFwiLGVbZS5GaWxlSG9zdD0xNV09XCJGaWxlSG9zdFwiLGVbZS5QYXRoU3RhcnQ9MTZdPVwiUGF0aFN0YXJ0XCIsZVtlLlBhdGg9MTddPVwiUGF0aFwiLGVbZS5DYW5ub3RCZUFCYXNlVVJMUGF0aD0xOF09XCJDYW5ub3RCZUFCYXNlVVJMUGF0aFwiLGVbZS5RdWVyeT0xOV09XCJRdWVyeVwiLGVbZS5GcmFnbWVudD0yMF09XCJGcmFnbWVudFwifSh0LlBhcnNlclN0YXRlfHwodC5QYXJzZXJTdGF0ZT17fSkpLHQuT3BhcXVlT3JpZ2luPVtcIlwiLFwiXCIsbnVsbCxudWxsXX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMjQ1KSxpPXIoMjQ3KTtmdW5jdGlvbiBvKCl7dGhpcy5wcm90b2NvbD1udWxsLHRoaXMuc2xhc2hlcz1udWxsLHRoaXMuYXV0aD1udWxsLHRoaXMuaG9zdD1udWxsLHRoaXMucG9ydD1udWxsLHRoaXMuaG9zdG5hbWU9bnVsbCx0aGlzLmhhc2g9bnVsbCx0aGlzLnNlYXJjaD1udWxsLHRoaXMucXVlcnk9bnVsbCx0aGlzLnBhdGhuYW1lPW51bGwsdGhpcy5wYXRoPW51bGwsdGhpcy5ocmVmPW51bGx9dC5wYXJzZT1nLHQucmVzb2x2ZT1mdW5jdGlvbihlLHQpe3JldHVybiBnKGUsITEsITApLnJlc29sdmUodCl9LHQucmVzb2x2ZU9iamVjdD1mdW5jdGlvbihlLHQpe3JldHVybiBlP2coZSwhMSwhMCkucmVzb2x2ZU9iamVjdCh0KTp0fSx0LmZvcm1hdD1mdW5jdGlvbihlKXtpLmlzU3RyaW5nKGUpJiYoZT1nKGUpKTtyZXR1cm4gZSBpbnN0YW5jZW9mIG8/ZS5mb3JtYXQoKTpvLnByb3RvdHlwZS5mb3JtYXQuY2FsbChlKX0sdC5Vcmw9bzt2YXIgYT0vXihbYS16MC05ListXSs6KS9pLHM9LzpbMC05XSokLyx1PS9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sbD1bXCJ7XCIsXCJ9XCIsXCJ8XCIsXCJcXFxcXCIsXCJeXCIsXCJgXCJdLmNvbmNhdChbXCI8XCIsXCI+XCIsJ1wiJyxcImBcIixcIiBcIixcIlxcclwiLFwiXFxuXCIsXCJcXHRcIl0pLGM9W1wiJ1wiXS5jb25jYXQobCksaD1bXCIlXCIsXCIvXCIsXCI/XCIsXCI7XCIsXCIjXCJdLmNvbmNhdChjKSxwPVtcIi9cIixcIj9cIixcIiNcIl0sZj0vXlsrYS16MC05QS1aXy1dezAsNjN9JC8sZD0vXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sbT17amF2YXNjcmlwdDohMCxcImphdmFzY3JpcHQ6XCI6ITB9LHk9e2phdmFzY3JpcHQ6ITAsXCJqYXZhc2NyaXB0OlwiOiEwfSx2PXtodHRwOiEwLGh0dHBzOiEwLGZ0cDohMCxnb3BoZXI6ITAsZmlsZTohMCxcImh0dHA6XCI6ITAsXCJodHRwczpcIjohMCxcImZ0cDpcIjohMCxcImdvcGhlcjpcIjohMCxcImZpbGU6XCI6ITB9LF89cigyNDgpO2Z1bmN0aW9uIGcoZSx0LHIpe2lmKGUmJmkuaXNPYmplY3QoZSkmJmUgaW5zdGFuY2VvZiBvKXJldHVybiBlO3ZhciBuPW5ldyBvO3JldHVybiBuLnBhcnNlKGUsdCxyKSxufW8ucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUsdCxyKXtpZighaS5pc1N0cmluZyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIit0eXBlb2YgZSk7dmFyIG89ZS5pbmRleE9mKFwiP1wiKSxzPS0xIT09byYmbzxlLmluZGV4T2YoXCIjXCIpP1wiP1wiOlwiI1wiLGw9ZS5zcGxpdChzKTtsWzBdPWxbMF0ucmVwbGFjZSgvXFxcXC9nLFwiL1wiKTt2YXIgZz1lPWwuam9pbihzKTtpZihnPWcudHJpbSgpLCFyJiYxPT09ZS5zcGxpdChcIiNcIikubGVuZ3RoKXt2YXIgYj11LmV4ZWMoZyk7aWYoYilyZXR1cm4gdGhpcy5wYXRoPWcsdGhpcy5ocmVmPWcsdGhpcy5wYXRobmFtZT1iWzFdLGJbMl0/KHRoaXMuc2VhcmNoPWJbMl0sdGhpcy5xdWVyeT10P18ucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTp0aGlzLnNlYXJjaC5zdWJzdHIoMSkpOnQmJih0aGlzLnNlYXJjaD1cIlwiLHRoaXMucXVlcnk9e30pLHRoaXN9dmFyIHg9YS5leGVjKGcpO2lmKHgpe3ZhciB3PSh4PXhbMF0pLnRvTG93ZXJDYXNlKCk7dGhpcy5wcm90b2NvbD13LGc9Zy5zdWJzdHIoeC5sZW5ndGgpfWlmKHJ8fHh8fGcubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKXt2YXIgRT1cIi8vXCI9PT1nLnN1YnN0cigwLDIpOyFFfHx4JiZ5W3hdfHwoZz1nLnN1YnN0cigyKSx0aGlzLnNsYXNoZXM9ITApfWlmKCF5W3hdJiYoRXx8eCYmIXZbeF0pKXtmb3IodmFyIEQsUyxDPS0xLEE9MDtBPHAubGVuZ3RoO0ErKyl7LTEhPT0oTj1nLmluZGV4T2YocFtBXSkpJiYoLTE9PT1DfHxOPEMpJiYoQz1OKX0tMSE9PShTPS0xPT09Qz9nLmxhc3RJbmRleE9mKFwiQFwiKTpnLmxhc3RJbmRleE9mKFwiQFwiLEMpKSYmKEQ9Zy5zbGljZSgwLFMpLGc9Zy5zbGljZShTKzEpLHRoaXMuYXV0aD1kZWNvZGVVUklDb21wb25lbnQoRCkpLEM9LTE7Zm9yKEE9MDtBPGgubGVuZ3RoO0ErKyl7dmFyIE47LTEhPT0oTj1nLmluZGV4T2YoaFtBXSkpJiYoLTE9PT1DfHxOPEMpJiYoQz1OKX0tMT09PUMmJihDPWcubGVuZ3RoKSx0aGlzLmhvc3Q9Zy5zbGljZSgwLEMpLGc9Zy5zbGljZShDKSx0aGlzLnBhcnNlSG9zdCgpLHRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZXx8XCJcIjt2YXIgVD1cIltcIj09PXRoaXMuaG9zdG5hbWVbMF0mJlwiXVwiPT09dGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aC0xXTtpZighVClmb3IodmFyIE89dGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyksRj0oQT0wLE8ubGVuZ3RoKTtBPEY7QSsrKXt2YXIgaz1PW0FdO2lmKGsmJiFrLm1hdGNoKGYpKXtmb3IodmFyIFA9XCJcIixJPTAsTD1rLmxlbmd0aDtJPEw7SSsrKWsuY2hhckNvZGVBdChJKT4xMjc/UCs9XCJ4XCI6UCs9a1tJXTtpZighUC5tYXRjaChmKSl7dmFyIE09Ty5zbGljZSgwLEEpLEI9Ty5zbGljZShBKzEpLGo9ay5tYXRjaChkKTtqJiYoTS5wdXNoKGpbMV0pLEIudW5zaGlmdChqWzJdKSksQi5sZW5ndGgmJihnPVwiL1wiK0Iuam9pbihcIi5cIikrZyksdGhpcy5ob3N0bmFtZT1NLmpvaW4oXCIuXCIpO2JyZWFrfX19dGhpcy5ob3N0bmFtZS5sZW5ndGg+MjU1P3RoaXMuaG9zdG5hbWU9XCJcIjp0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKSxUfHwodGhpcy5ob3N0bmFtZT1uLnRvQVNDSUkodGhpcy5ob3N0bmFtZSkpO3ZhciBSPXRoaXMucG9ydD9cIjpcIit0aGlzLnBvcnQ6XCJcIix6PXRoaXMuaG9zdG5hbWV8fFwiXCI7dGhpcy5ob3N0PXorUix0aGlzLmhyZWYrPXRoaXMuaG9zdCxUJiYodGhpcy5ob3N0bmFtZT10aGlzLmhvc3RuYW1lLnN1YnN0cigxLHRoaXMuaG9zdG5hbWUubGVuZ3RoLTIpLFwiL1wiIT09Z1swXSYmKGc9XCIvXCIrZykpfWlmKCFtW3ddKWZvcihBPTAsRj1jLmxlbmd0aDtBPEY7QSsrKXt2YXIgVT1jW0FdO2lmKC0xIT09Zy5pbmRleE9mKFUpKXt2YXIgRz1lbmNvZGVVUklDb21wb25lbnQoVSk7Rz09PVUmJihHPWVzY2FwZShVKSksZz1nLnNwbGl0KFUpLmpvaW4oRyl9fXZhciBYPWcuaW5kZXhPZihcIiNcIik7LTEhPT1YJiYodGhpcy5oYXNoPWcuc3Vic3RyKFgpLGc9Zy5zbGljZSgwLFgpKTt2YXIgcT1nLmluZGV4T2YoXCI/XCIpO2lmKC0xIT09cT8odGhpcy5zZWFyY2g9Zy5zdWJzdHIocSksdGhpcy5xdWVyeT1nLnN1YnN0cihxKzEpLHQmJih0aGlzLnF1ZXJ5PV8ucGFyc2UodGhpcy5xdWVyeSkpLGc9Zy5zbGljZSgwLHEpKTp0JiYodGhpcy5zZWFyY2g9XCJcIix0aGlzLnF1ZXJ5PXt9KSxnJiYodGhpcy5wYXRobmFtZT1nKSx2W3ddJiZ0aGlzLmhvc3RuYW1lJiYhdGhpcy5wYXRobmFtZSYmKHRoaXMucGF0aG5hbWU9XCIvXCIpLHRoaXMucGF0aG5hbWV8fHRoaXMuc2VhcmNoKXtSPXRoaXMucGF0aG5hbWV8fFwiXCI7dmFyIFc9dGhpcy5zZWFyY2h8fFwiXCI7dGhpcy5wYXRoPVIrV31yZXR1cm4gdGhpcy5ocmVmPXRoaXMuZm9ybWF0KCksdGhpc30sby5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5hdXRofHxcIlwiO2UmJihlPShlPWVuY29kZVVSSUNvbXBvbmVudChlKSkucmVwbGFjZSgvJTNBL2ksXCI6XCIpLGUrPVwiQFwiKTt2YXIgdD10aGlzLnByb3RvY29sfHxcIlwiLHI9dGhpcy5wYXRobmFtZXx8XCJcIixuPXRoaXMuaGFzaHx8XCJcIixvPSExLGE9XCJcIjt0aGlzLmhvc3Q/bz1lK3RoaXMuaG9zdDp0aGlzLmhvc3RuYW1lJiYobz1lKygtMT09PXRoaXMuaG9zdG5hbWUuaW5kZXhPZihcIjpcIik/dGhpcy5ob3N0bmFtZTpcIltcIit0aGlzLmhvc3RuYW1lK1wiXVwiKSx0aGlzLnBvcnQmJihvKz1cIjpcIit0aGlzLnBvcnQpKSx0aGlzLnF1ZXJ5JiZpLmlzT2JqZWN0KHRoaXMucXVlcnkpJiZPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgmJihhPV8uc3RyaW5naWZ5KHRoaXMucXVlcnkpKTt2YXIgcz10aGlzLnNlYXJjaHx8YSYmXCI/XCIrYXx8XCJcIjtyZXR1cm4gdCYmXCI6XCIhPT10LnN1YnN0cigtMSkmJih0Kz1cIjpcIiksdGhpcy5zbGFzaGVzfHwoIXR8fHZbdF0pJiYhMSE9PW8/KG89XCIvL1wiKyhvfHxcIlwiKSxyJiZcIi9cIiE9PXIuY2hhckF0KDApJiYocj1cIi9cIityKSk6b3x8KG89XCJcIiksbiYmXCIjXCIhPT1uLmNoYXJBdCgwKSYmKG49XCIjXCIrbikscyYmXCI/XCIhPT1zLmNoYXJBdCgwKSYmKHM9XCI/XCIrcyksdCtvKyhyPXIucmVwbGFjZSgvWz8jXS9nLChmdW5jdGlvbihlKXtyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGUpfSkpKSsocz1zLnJlcGxhY2UoXCIjXCIsXCIlMjNcIikpK259LG8ucHJvdG90eXBlLnJlc29sdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdChnKGUsITEsITApKS5mb3JtYXQoKX0sby5wcm90b3R5cGUucmVzb2x2ZU9iamVjdD1mdW5jdGlvbihlKXtpZihpLmlzU3RyaW5nKGUpKXt2YXIgdD1uZXcgbzt0LnBhcnNlKGUsITEsITApLGU9dH1mb3IodmFyIHI9bmV3IG8sbj1PYmplY3Qua2V5cyh0aGlzKSxhPTA7YTxuLmxlbmd0aDthKyspe3ZhciBzPW5bYV07cltzXT10aGlzW3NdfWlmKHIuaGFzaD1lLmhhc2gsXCJcIj09PWUuaHJlZilyZXR1cm4gci5ocmVmPXIuZm9ybWF0KCkscjtpZihlLnNsYXNoZXMmJiFlLnByb3RvY29sKXtmb3IodmFyIHU9T2JqZWN0LmtleXMoZSksbD0wO2w8dS5sZW5ndGg7bCsrKXt2YXIgYz11W2xdO1wicHJvdG9jb2xcIiE9PWMmJihyW2NdPWVbY10pfXJldHVybiB2W3IucHJvdG9jb2xdJiZyLmhvc3RuYW1lJiYhci5wYXRobmFtZSYmKHIucGF0aD1yLnBhdGhuYW1lPVwiL1wiKSxyLmhyZWY9ci5mb3JtYXQoKSxyfWlmKGUucHJvdG9jb2wmJmUucHJvdG9jb2whPT1yLnByb3RvY29sKXtpZighdltlLnByb3RvY29sXSl7Zm9yKHZhciBoPU9iamVjdC5rZXlzKGUpLHA9MDtwPGgubGVuZ3RoO3ArKyl7dmFyIGY9aFtwXTtyW2ZdPWVbZl19cmV0dXJuIHIuaHJlZj1yLmZvcm1hdCgpLHJ9aWYoci5wcm90b2NvbD1lLnByb3RvY29sLGUuaG9zdHx8eVtlLnByb3RvY29sXSlyLnBhdGhuYW1lPWUucGF0aG5hbWU7ZWxzZXtmb3IodmFyIGQ9KGUucGF0aG5hbWV8fFwiXCIpLnNwbGl0KFwiL1wiKTtkLmxlbmd0aCYmIShlLmhvc3Q9ZC5zaGlmdCgpKTspO2UuaG9zdHx8KGUuaG9zdD1cIlwiKSxlLmhvc3RuYW1lfHwoZS5ob3N0bmFtZT1cIlwiKSxcIlwiIT09ZFswXSYmZC51bnNoaWZ0KFwiXCIpLGQubGVuZ3RoPDImJmQudW5zaGlmdChcIlwiKSxyLnBhdGhuYW1lPWQuam9pbihcIi9cIil9aWYoci5zZWFyY2g9ZS5zZWFyY2gsci5xdWVyeT1lLnF1ZXJ5LHIuaG9zdD1lLmhvc3R8fFwiXCIsci5hdXRoPWUuYXV0aCxyLmhvc3RuYW1lPWUuaG9zdG5hbWV8fGUuaG9zdCxyLnBvcnQ9ZS5wb3J0LHIucGF0aG5hbWV8fHIuc2VhcmNoKXt2YXIgbT1yLnBhdGhuYW1lfHxcIlwiLF89ci5zZWFyY2h8fFwiXCI7ci5wYXRoPW0rX31yZXR1cm4gci5zbGFzaGVzPXIuc2xhc2hlc3x8ZS5zbGFzaGVzLHIuaHJlZj1yLmZvcm1hdCgpLHJ9dmFyIGc9ci5wYXRobmFtZSYmXCIvXCI9PT1yLnBhdGhuYW1lLmNoYXJBdCgwKSxiPWUuaG9zdHx8ZS5wYXRobmFtZSYmXCIvXCI9PT1lLnBhdGhuYW1lLmNoYXJBdCgwKSx4PWJ8fGd8fHIuaG9zdCYmZS5wYXRobmFtZSx3PXgsRT1yLnBhdGhuYW1lJiZyLnBhdGhuYW1lLnNwbGl0KFwiL1wiKXx8W10sRD0oZD1lLnBhdGhuYW1lJiZlLnBhdGhuYW1lLnNwbGl0KFwiL1wiKXx8W10sci5wcm90b2NvbCYmIXZbci5wcm90b2NvbF0pO2lmKEQmJihyLmhvc3RuYW1lPVwiXCIsci5wb3J0PW51bGwsci5ob3N0JiYoXCJcIj09PUVbMF0/RVswXT1yLmhvc3Q6RS51bnNoaWZ0KHIuaG9zdCkpLHIuaG9zdD1cIlwiLGUucHJvdG9jb2wmJihlLmhvc3RuYW1lPW51bGwsZS5wb3J0PW51bGwsZS5ob3N0JiYoXCJcIj09PWRbMF0/ZFswXT1lLmhvc3Q6ZC51bnNoaWZ0KGUuaG9zdCkpLGUuaG9zdD1udWxsKSx4PXgmJihcIlwiPT09ZFswXXx8XCJcIj09PUVbMF0pKSxiKXIuaG9zdD1lLmhvc3R8fFwiXCI9PT1lLmhvc3Q/ZS5ob3N0OnIuaG9zdCxyLmhvc3RuYW1lPWUuaG9zdG5hbWV8fFwiXCI9PT1lLmhvc3RuYW1lP2UuaG9zdG5hbWU6ci5ob3N0bmFtZSxyLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnksRT1kO2Vsc2UgaWYoZC5sZW5ndGgpRXx8KEU9W10pLEUucG9wKCksRT1FLmNvbmNhdChkKSxyLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnk7ZWxzZSBpZighaS5pc051bGxPclVuZGVmaW5lZChlLnNlYXJjaCkpe2lmKEQpci5ob3N0bmFtZT1yLmhvc3Q9RS5zaGlmdCgpLChUPSEhKHIuaG9zdCYmci5ob3N0LmluZGV4T2YoXCJAXCIpPjApJiZyLmhvc3Quc3BsaXQoXCJAXCIpKSYmKHIuYXV0aD1ULnNoaWZ0KCksci5ob3N0PXIuaG9zdG5hbWU9VC5zaGlmdCgpKTtyZXR1cm4gci5zZWFyY2g9ZS5zZWFyY2gsci5xdWVyeT1lLnF1ZXJ5LGkuaXNOdWxsKHIucGF0aG5hbWUpJiZpLmlzTnVsbChyLnNlYXJjaCl8fChyLnBhdGg9KHIucGF0aG5hbWU/ci5wYXRobmFtZTpcIlwiKSsoci5zZWFyY2g/ci5zZWFyY2g6XCJcIikpLHIuaHJlZj1yLmZvcm1hdCgpLHJ9aWYoIUUubGVuZ3RoKXJldHVybiByLnBhdGhuYW1lPW51bGwsci5zZWFyY2g/ci5wYXRoPVwiL1wiK3Iuc2VhcmNoOnIucGF0aD1udWxsLHIuaHJlZj1yLmZvcm1hdCgpLHI7Zm9yKHZhciBTPUUuc2xpY2UoLTEpWzBdLEM9KHIuaG9zdHx8ZS5ob3N0fHxFLmxlbmd0aD4xKSYmKFwiLlwiPT09U3x8XCIuLlwiPT09Uyl8fFwiXCI9PT1TLEE9MCxOPUUubGVuZ3RoO04+PTA7Ti0tKVwiLlwiPT09KFM9RVtOXSk/RS5zcGxpY2UoTiwxKTpcIi4uXCI9PT1TPyhFLnNwbGljZShOLDEpLEErKyk6QSYmKEUuc3BsaWNlKE4sMSksQS0tKTtpZigheCYmIXcpZm9yKDtBLS07QSlFLnVuc2hpZnQoXCIuLlwiKTsheHx8XCJcIj09PUVbMF18fEVbMF0mJlwiL1wiPT09RVswXS5jaGFyQXQoMCl8fEUudW5zaGlmdChcIlwiKSxDJiZcIi9cIiE9PUUuam9pbihcIi9cIikuc3Vic3RyKC0xKSYmRS5wdXNoKFwiXCIpO3ZhciBULE89XCJcIj09PUVbMF18fEVbMF0mJlwiL1wiPT09RVswXS5jaGFyQXQoMCk7RCYmKHIuaG9zdG5hbWU9ci5ob3N0PU8/XCJcIjpFLmxlbmd0aD9FLnNoaWZ0KCk6XCJcIiwoVD0hIShyLmhvc3QmJnIuaG9zdC5pbmRleE9mKFwiQFwiKT4wKSYmci5ob3N0LnNwbGl0KFwiQFwiKSkmJihyLmF1dGg9VC5zaGlmdCgpLHIuaG9zdD1yLmhvc3RuYW1lPVQuc2hpZnQoKSkpO3JldHVybih4PXh8fHIuaG9zdCYmRS5sZW5ndGgpJiYhTyYmRS51bnNoaWZ0KFwiXCIpLEUubGVuZ3RoP3IucGF0aG5hbWU9RS5qb2luKFwiL1wiKTooci5wYXRobmFtZT1udWxsLHIucGF0aD1udWxsKSxpLmlzTnVsbChyLnBhdGhuYW1lKSYmaS5pc051bGwoci5zZWFyY2gpfHwoci5wYXRoPShyLnBhdGhuYW1lP3IucGF0aG5hbWU6XCJcIikrKHIuc2VhcmNoP3Iuc2VhcmNoOlwiXCIpKSxyLmF1dGg9ZS5hdXRofHxyLmF1dGgsci5zbGFzaGVzPXIuc2xhc2hlc3x8ZS5zbGFzaGVzLHIuaHJlZj1yLmZvcm1hdCgpLHJ9LG8ucHJvdG90eXBlLnBhcnNlSG9zdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaG9zdCx0PXMuZXhlYyhlKTt0JiYoXCI6XCIhPT0odD10WzBdKSYmKHRoaXMucG9ydD10LnN1YnN0cigxKSksZT1lLnN1YnN0cigwLGUubGVuZ3RoLXQubGVuZ3RoKSksZSYmKHRoaXMuaG9zdG5hbWU9ZSl9fSxmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUsbil7dmFyIGk7LyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS40LjEgYnkgQG1hdGhpYXMgKi8hZnVuY3Rpb24obyl7dCYmdC5ub2RlVHlwZSxlJiZlLm5vZGVUeXBlO3ZhciBhPVwib2JqZWN0XCI9PXR5cGVvZiBuJiZuO2EuZ2xvYmFsIT09YSYmYS53aW5kb3chPT1hJiZhLnNlbGY7dmFyIHMsdT0yMTQ3NDgzNjQ3LGw9L154bi0tLyxjPS9bXlxceDIwLVxceDdFXS8saD0vW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLHA9e292ZXJmbG93OlwiT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3NcIixcIm5vdC1iYXNpY1wiOlwiSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KVwiLFwiaW52YWxpZC1pbnB1dFwiOlwiSW52YWxpZCBpbnB1dFwifSxmPU1hdGguZmxvb3IsZD1TdHJpbmcuZnJvbUNoYXJDb2RlO2Z1bmN0aW9uIG0oZSl7dGhyb3cgbmV3IFJhbmdlRXJyb3IocFtlXSl9ZnVuY3Rpb24geShlLHQpe2Zvcih2YXIgcj1lLmxlbmd0aCxuPVtdO3ItLTspbltyXT10KGVbcl0pO3JldHVybiBufWZ1bmN0aW9uIHYoZSx0KXt2YXIgcj1lLnNwbGl0KFwiQFwiKSxuPVwiXCI7cmV0dXJuIHIubGVuZ3RoPjEmJihuPXJbMF0rXCJAXCIsZT1yWzFdKSxuK3koKGU9ZS5yZXBsYWNlKGgsXCIuXCIpKS5zcGxpdChcIi5cIiksdCkuam9pbihcIi5cIil9ZnVuY3Rpb24gXyhlKXtmb3IodmFyIHQscixuPVtdLGk9MCxvPWUubGVuZ3RoO2k8bzspKHQ9ZS5jaGFyQ29kZUF0KGkrKykpPj01NTI5NiYmdDw9NTYzMTkmJmk8bz81NjMyMD09KDY0NTEyJihyPWUuY2hhckNvZGVBdChpKyspKSk/bi5wdXNoKCgoMTAyMyZ0KTw8MTApKygxMDIzJnIpKzY1NTM2KToobi5wdXNoKHQpLGktLSk6bi5wdXNoKHQpO3JldHVybiBufWZ1bmN0aW9uIGcoZSl7cmV0dXJuIHkoZSwoZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtyZXR1cm4gZT42NTUzNSYmKHQrPWQoKGUtPTY1NTM2KT4+PjEwJjEwMjN8NTUyOTYpLGU9NTYzMjB8MTAyMyZlKSx0Kz1kKGUpfSkpLmpvaW4oXCJcIil9ZnVuY3Rpb24gYihlLHQpe3JldHVybiBlKzIyKzc1KihlPDI2KS0oKDAhPXQpPDw1KX1mdW5jdGlvbiB4KGUsdCxyKXt2YXIgbj0wO2ZvcihlPXI/ZihlLzcwMCk6ZT4+MSxlKz1mKGUvdCk7ZT40NTU7bis9MzYpZT1mKGUvMzUpO3JldHVybiBmKG4rMzYqZS8oZSszOCkpfWZ1bmN0aW9uIHcoZSl7dmFyIHQscixuLGksbyxhLHMsbCxjLGgscCxkPVtdLHk9ZS5sZW5ndGgsdj0wLF89MTI4LGI9NzI7Zm9yKChyPWUubGFzdEluZGV4T2YoXCItXCIpKTwwJiYocj0wKSxuPTA7bjxyOysrbillLmNoYXJDb2RlQXQobik+PTEyOCYmbShcIm5vdC1iYXNpY1wiKSxkLnB1c2goZS5jaGFyQ29kZUF0KG4pKTtmb3IoaT1yPjA/cisxOjA7aTx5Oyl7Zm9yKG89dixhPTEscz0zNjtpPj15JiZtKFwiaW52YWxpZC1pbnB1dFwiKSwoKGw9KHA9ZS5jaGFyQ29kZUF0KGkrKykpLTQ4PDEwP3AtMjI6cC02NTwyNj9wLTY1OnAtOTc8MjY/cC05NzozNik+PTM2fHxsPmYoKHUtdikvYSkpJiZtKFwib3ZlcmZsb3dcIiksdis9bCphLCEobDwoYz1zPD1iPzE6cz49YisyNj8yNjpzLWIpKTtzKz0zNilhPmYodS8oaD0zNi1jKSkmJm0oXCJvdmVyZmxvd1wiKSxhKj1oO2I9eCh2LW8sdD1kLmxlbmd0aCsxLDA9PW8pLGYodi90KT51LV8mJm0oXCJvdmVyZmxvd1wiKSxfKz1mKHYvdCksdiU9dCxkLnNwbGljZSh2KyssMCxfKX1yZXR1cm4gZyhkKX1mdW5jdGlvbiBFKGUpe3ZhciB0LHIsbixpLG8sYSxzLGwsYyxoLHAseSx2LGcsdyxFPVtdO2Zvcih5PShlPV8oZSkpLmxlbmd0aCx0PTEyOCxyPTAsbz03MixhPTA7YTx5OysrYSkocD1lW2FdKTwxMjgmJkUucHVzaChkKHApKTtmb3Iobj1pPUUubGVuZ3RoLGkmJkUucHVzaChcIi1cIik7bjx5Oyl7Zm9yKHM9dSxhPTA7YTx5OysrYSkocD1lW2FdKT49dCYmcDxzJiYocz1wKTtmb3Iocy10PmYoKHUtcikvKHY9bisxKSkmJm0oXCJvdmVyZmxvd1wiKSxyKz0ocy10KSp2LHQ9cyxhPTA7YTx5OysrYSlpZigocD1lW2FdKTx0JiYrK3I+dSYmbShcIm92ZXJmbG93XCIpLHA9PXQpe2ZvcihsPXIsYz0zNjshKGw8KGg9Yzw9bz8xOmM+PW8rMjY/MjY6Yy1vKSk7Yys9MzYpdz1sLWgsZz0zNi1oLEUucHVzaChkKGIoaCt3JWcsMCkpKSxsPWYody9nKTtFLnB1c2goZChiKGwsMCkpKSxvPXgocix2LG49PWkpLHI9MCwrK259KytyLCsrdH1yZXR1cm4gRS5qb2luKFwiXCIpfXM9e3ZlcnNpb246XCIxLjQuMVwiLHVjczI6e2RlY29kZTpfLGVuY29kZTpnfSxkZWNvZGU6dyxlbmNvZGU6RSx0b0FTQ0lJOmZ1bmN0aW9uKGUpe3JldHVybiB2KGUsKGZ1bmN0aW9uKGUpe3JldHVybiBjLnRlc3QoZSk/XCJ4bi0tXCIrRShlKTplfSkpfSx0b1VuaWNvZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHYoZSwoZnVuY3Rpb24oZSl7cmV0dXJuIGwudGVzdChlKT93KGUuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSk6ZX0pKX19LHZvaWQgMD09PShpPWZ1bmN0aW9uKCl7cmV0dXJuIHN9LmNhbGwodCxyLHQsZSkpfHwoZS5leHBvcnRzPWkpfSgpfSkuY2FsbCh0aGlzLHIoMjQ2KShlKSxyKDc4KSl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlLndlYnBhY2tQb2x5ZmlsbHx8KGUuZGVwcmVjYXRlPWZ1bmN0aW9uKCl7fSxlLnBhdGhzPVtdLGUuY2hpbGRyZW58fChlLmNoaWxkcmVuPVtdKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImxvYWRlZFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmx9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJpZFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLml9fSksZS53ZWJwYWNrUG9seWZpbGw9MSksZX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e2lzU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfSxpc09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV9LGlzTnVsbDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWV9LGlzTnVsbE9yVW5kZWZpbmVkOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmRlY29kZT10LnBhcnNlPXIoMjQ5KSx0LmVuY29kZT10LnN0cmluZ2lmeT1yKDI1MCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfWUuZXhwb3J0cz1mdW5jdGlvbihlLHQscixvKXt0PXR8fFwiJlwiLHI9cnx8XCI9XCI7dmFyIGE9e307aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fDA9PT1lLmxlbmd0aClyZXR1cm4gYTt2YXIgcz0vXFwrL2c7ZT1lLnNwbGl0KHQpO3ZhciB1PTFlMztvJiZcIm51bWJlclwiPT10eXBlb2Ygby5tYXhLZXlzJiYodT1vLm1heEtleXMpO3ZhciBsPWUubGVuZ3RoO3U+MCYmbD51JiYobD11KTtmb3IodmFyIGM9MDtjPGw7KytjKXt2YXIgaCxwLGYsZCxtPWVbY10ucmVwbGFjZShzLFwiJTIwXCIpLHk9bS5pbmRleE9mKHIpO3k+PTA/KGg9bS5zdWJzdHIoMCx5KSxwPW0uc3Vic3RyKHkrMSkpOihoPW0scD1cIlwiKSxmPWRlY29kZVVSSUNvbXBvbmVudChoKSxkPWRlY29kZVVSSUNvbXBvbmVudChwKSxuKGEsZik/aShhW2ZdKT9hW2ZdLnB1c2goZCk6YVtmXT1bYVtmXSxkXTphW2ZdPWR9cmV0dXJuIGF9O3ZhciBpPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1mdW5jdGlvbihlKXtzd2l0Y2godHlwZW9mIGUpe2Nhc2VcInN0cmluZ1wiOnJldHVybiBlO2Nhc2VcImJvb2xlYW5cIjpyZXR1cm4gZT9cInRydWVcIjpcImZhbHNlXCI7Y2FzZVwibnVtYmVyXCI6cmV0dXJuIGlzRmluaXRlKGUpP2U6XCJcIjtkZWZhdWx0OnJldHVyblwiXCJ9fTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIscyl7cmV0dXJuIHQ9dHx8XCImXCIscj1yfHxcIj1cIixudWxsPT09ZSYmKGU9dm9pZCAwKSxcIm9iamVjdFwiPT10eXBlb2YgZT9vKGEoZSksKGZ1bmN0aW9uKGEpe3ZhciBzPWVuY29kZVVSSUNvbXBvbmVudChuKGEpKStyO3JldHVybiBpKGVbYV0pP28oZVthXSwoZnVuY3Rpb24oZSl7cmV0dXJuIHMrZW5jb2RlVVJJQ29tcG9uZW50KG4oZSkpfSkpLmpvaW4odCk6cytlbmNvZGVVUklDb21wb25lbnQobihlW2FdKSl9KSkuam9pbih0KTpzP2VuY29kZVVSSUNvbXBvbmVudChuKHMpKStyK2VuY29kZVVSSUNvbXBvbmVudChuKGUpKTpcIlwifTt2YXIgaT1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9O2Z1bmN0aW9uIG8oZSx0KXtpZihlLm1hcClyZXR1cm4gZS5tYXAodCk7Zm9yKHZhciByPVtdLG49MDtuPGUubGVuZ3RoO24rKylyLnB1c2godChlW25dLG4pKTtyZXR1cm4gcn12YXIgYT1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJnQucHVzaChyKTtyZXR1cm4gdH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDUyKTt0LmF0dHJfc2V0QW5FeGlzdGluZ0F0dHJpYnV0ZVZhbHVlPWZ1bmN0aW9uKGUsdCl7bnVsbD09PWUuX2VsZW1lbnQ/ZS5fdmFsdWU9dDpuLmVsZW1lbnRfY2hhbmdlKGUsZS5fZWxlbWVudCx0KX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEwOCksaT1yKDMwKSxvPXIoNTIpO3QudG9rZW5MaXN0X3ZhbGlkYXRpb25TdGVwcz1mdW5jdGlvbihlLHQpe2lmKCFpLmRvbV9oYXNTdXBwb3J0ZWRUb2tlbnMoZS5fYXR0cmlidXRlLl9sb2NhbE5hbWUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVyZSBhcmUgbm8gc3VwcG9ydGVkIHRva2VucyBkZWZpbmVkIGZvciBhdHRyaWJ1dGUgbmFtZTogJ1wiK2UuX2F0dHJpYnV0ZS5fbG9jYWxOYW1lK1wiJy5cIik7cmV0dXJuIGkuZG9tX2dldFN1cHBvcnRlZFRva2VucyhlLl9hdHRyaWJ1dGUuX2xvY2FsTmFtZSkuaGFzKHQudG9Mb3dlckNhc2UoKSl9LHQudG9rZW5MaXN0X3VwZGF0ZVN0ZXBzPWZ1bmN0aW9uKGUpeyhlLl9lbGVtZW50Lmhhc0F0dHJpYnV0ZShlLl9hdHRyaWJ1dGUuX2xvY2FsTmFtZSl8fDAhPT1lLl90b2tlblNldC5zaXplKSYmby5lbGVtZW50X3NldEFuQXR0cmlidXRlVmFsdWUoZS5fZWxlbWVudCxlLl9hdHRyaWJ1dGUuX2xvY2FsTmFtZSxuLm9yZGVyZWRTZXRfc2VyaWFsaXplKGUuX3Rva2VuU2V0KSl9LHQudG9rZW5MaXN0X3NlcmlhbGl6ZVN0ZXBzPWZ1bmN0aW9uKGUpe3JldHVybiBvLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVWYWx1ZShlLl9lbGVtZW50LGUuX2F0dHJpYnV0ZS5fbG9jYWxOYW1lKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDEpO2Z1bmN0aW9uIG8oZSl7cmV0dXJuIGkuaXNCb29sZWFuKGUpP2U6ZS5jYXB0dXJlfHwhMX10LmV2ZW50VGFyZ2V0X2ZsYXR0ZW49byx0LmV2ZW50VGFyZ2V0X2ZsYXR0ZW5Nb3JlPWZ1bmN0aW9uKGUpe3ZhciB0PW8oZSkscj0hMSxuPSExO3JldHVybiBpLmlzQm9vbGVhbihlKXx8KHI9ZS5vbmNlfHwhMSxuPWUucGFzc2l2ZXx8ITEpLFt0LG4scl19LHQuZXZlbnRUYXJnZXRfYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe2lmKG51bGwhPT10LmNhbGxiYWNrKXtmb3IodmFyIHI9MDtyPGUuX2V2ZW50TGlzdGVuZXJMaXN0Lmxlbmd0aDtyKyspe3ZhciBuPWUuX2V2ZW50TGlzdGVuZXJMaXN0W3JdO2lmKG4udHlwZT09PXQudHlwZSYmbi5jYWxsYmFjay5oYW5kbGVFdmVudD09PXQuY2FsbGJhY2suaGFuZGxlRXZlbnQmJm4uY2FwdHVyZT09PXQuY2FwdHVyZSlyZXR1cm59ZS5fZXZlbnRMaXN0ZW5lckxpc3QucHVzaCh0KX19LHQuZXZlbnRUYXJnZXRfcmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQscil7dC5yZW1vdmVkPSEwLGUuX2V2ZW50TGlzdGVuZXJMaXN0LnNwbGljZShyLDEpfSx0LmV2ZW50VGFyZ2V0X3JlbW92ZUFsbEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dHJ5e2Zvcih2YXIgaT1uKGUuX2V2ZW50TGlzdGVuZXJMaXN0KSxvPWkubmV4dCgpOyFvLmRvbmU7bz1pLm5leHQoKSl7by52YWx1ZS5yZW1vdmVkPSEwfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtvJiYhby5kb25lJiYocj1pLnJldHVybikmJnIuY2FsbChpKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19ZS5fZXZlbnRMaXN0ZW5lckxpc3QubGVuZ3RoPTB9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cigxKSxvPXIoMjkpO3QucGFyZW50Tm9kZV9jb252ZXJ0Tm9kZXNJbnRvQU5vZGU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsYSxzPW51bGwsdT0wO3U8ZS5sZW5ndGg7dSsrKXt2YXIgbD1lW3VdO2lmKGkuaXNTdHJpbmcobCkpe3ZhciBjPW8uY3JlYXRlX3RleHQodCxsKTtlW3VdPWN9fWlmKDE9PT1lLmxlbmd0aClzPWVbMF07ZWxzZXt2YXIgaD1zPW8uY3JlYXRlX2RvY3VtZW50RnJhZ21lbnQodCk7dHJ5e2Zvcih2YXIgcD1uKGUpLGY9cC5uZXh0KCk7IWYuZG9uZTtmPXAubmV4dCgpKXtsPWYudmFsdWU7aC5hcHBlbmRDaGlsZChsKX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZiYmIWYuZG9uZSYmKGE9cC5yZXR1cm4pJiZhLmNhbGwocCl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fX1yZXR1cm4gc319LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxpPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxvPXRoaXMmJnRoaXMuX19zcHJlYWR8fGZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWU9ZS5jb25jYXQoaShhcmd1bWVudHNbdF0pKTtyZXR1cm4gZX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9cigyKSxzPXIoOSksdT1yKDMpLGw9cigyOSksYz1yKDE3KSxoPXIoMTc1KSxwPXIoMTA3KSxmPXIoMTc2KSxkPXIoMzcpLG09cigxNzcpO2Z1bmN0aW9uIHkoZSl7cmV0dXJuIGUuX3N0YXJ0Tm9kZT09PWUuX2VuZE5vZGUmJmUuX3N0YXJ0T2Zmc2V0PT09ZS5fZW5kT2Zmc2V0fWZ1bmN0aW9uIHYoZSl7cmV0dXJuIGMudHJlZV9yb290Tm9kZShlLl9zdGFydE5vZGUpfWZ1bmN0aW9uIF8oZSx0KXtyZXR1cm4gYy50cmVlX3Jvb3ROb2RlKGUpPT09dih0KSYmaC5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKFtlLDBdLHQuX3N0YXJ0KT09PWEuQm91bmRhcnlQb3NpdGlvbi5BZnRlciYmaC5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKFtlLGMudHJlZV9ub2RlTGVuZ3RoKGUpXSx0Ll9lbmQpPT09YS5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZX1mdW5jdGlvbiBnKGUsdCl7dmFyIHI9Yy50cmVlX2lzQW5jZXN0b3JPZih0Ll9zdGFydE5vZGUsZSwhMCksbj1jLnRyZWVfaXNBbmNlc3Rvck9mKHQuX2VuZE5vZGUsZSwhMCk7cmV0dXJuIHImJiFufHwhciYmbn1mdW5jdGlvbiBiKGUpe3ZhciB0LHIsaSxhLGgsbSx2PWwuY3JlYXRlX2RvY3VtZW50RnJhZ21lbnQoZS5fc3RhcnROb2RlLl9ub2RlRG9jdW1lbnQpO2lmKHkoZSkpcmV0dXJuIHY7dmFyIHg9ZS5fc3RhcnROb2RlLHc9ZS5fc3RhcnRPZmZzZXQsRT1lLl9lbmROb2RlLEQ9ZS5fZW5kT2Zmc2V0O2lmKHg9PT1FJiZ1Lkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUoeCkpcmV0dXJuKFI9Zi5ub2RlX2Nsb25lKHgpKS5fZGF0YT1wLmNoYXJhY3RlckRhdGFfc3Vic3RyaW5nRGF0YSh4LHcsRC13KSxkLm11dGF0aW9uX2FwcGVuZChSLHYpLHAuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YSh4LHcsRC13LFwiXCIpLHY7Zm9yKHZhciBTPXg7IWMudHJlZV9pc0FuY2VzdG9yT2YoRSxTLCEwKTspe2lmKG51bGw9PT1TLl9wYXJlbnQpdGhyb3cgbmV3IEVycm9yKFwiUGFyZW50IG5vZGUgIGlzIG51bGwuXCIpO1M9Uy5fcGFyZW50fXZhciBDPW51bGw7aWYoIWMudHJlZV9pc0FuY2VzdG9yT2YoRSx4LCEwKSl0cnl7Zm9yKHZhciBBPW4oUy5fY2hpbGRyZW4pLE49QS5uZXh0KCk7IU4uZG9uZTtOPUEubmV4dCgpKXtpZihnKGs9Ti52YWx1ZSxlKSl7Qz1rO2JyZWFrfX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7TiYmIU4uZG9uZSYmKHI9QS5yZXR1cm4pJiZyLmNhbGwoQSl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXZhciBUPW51bGw7aWYoIWMudHJlZV9pc0FuY2VzdG9yT2YoeCxFLCEwKSlmb3IodmFyIE89byhTLl9jaGlsZHJlbiksRj1PLmxlbmd0aC0xO0Y+MDtGLS0pe3ZhciBrO2lmKGcoaz1PW0ZdLGUpKXtUPWs7YnJlYWt9fXZhciBQLEksTD1bXTt0cnl7Zm9yKHZhciBNPW4oUy5fY2hpbGRyZW4pLEI9TS5uZXh0KCk7IUIuZG9uZTtCPU0ubmV4dCgpKXtpZihfKFg9Qi52YWx1ZSxlKSl7aWYodS5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUoWCkpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yO0wucHVzaChYKX19fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0ImJiFCLmRvbmUmJihhPU0ucmV0dXJuKSYmYS5jYWxsKE0pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1pZihjLnRyZWVfaXNBbmNlc3Rvck9mKEUseCwhMCkpUD14LEk9dztlbHNle2Zvcih2YXIgaj14O251bGwhPT1qLl9wYXJlbnQmJiFjLnRyZWVfaXNBbmNlc3Rvck9mKEUsai5fcGFyZW50KTspaj1qLl9wYXJlbnQ7aWYobnVsbD09PWouX3BhcmVudCl0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnQgbm9kZSBpcyBudWxsLlwiKTtQPWouX3BhcmVudCxJPTErYy50cmVlX2luZGV4KGopfWlmKHUuR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZShDKSkoUj1mLm5vZGVfY2xvbmUoeCkpLl9kYXRhPXAuY2hhcmFjdGVyRGF0YV9zdWJzdHJpbmdEYXRhKHgsdyxjLnRyZWVfbm9kZUxlbmd0aCh4KS13KSxkLm11dGF0aW9uX2FwcGVuZChSLHYpLHAuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YSh4LHcsYy50cmVlX25vZGVMZW5ndGgoeCktdyxcIlwiKTtlbHNlIGlmKG51bGwhPT1DKXt2YXIgUj1mLm5vZGVfY2xvbmUoQyk7ZC5tdXRhdGlvbl9hcHBlbmQoUix2KTt2YXIgej1iKGwuY3JlYXRlX3JhbmdlKFt4LHddLFtDLGMudHJlZV9ub2RlTGVuZ3RoKEMpXSkpO2QubXV0YXRpb25fYXBwZW5kKHosUil9dHJ5e2Zvcih2YXIgVT1uKEwpLEc9VS5uZXh0KCk7IUcuZG9uZTtHPVUubmV4dCgpKXt2YXIgWD1HLnZhbHVlO2QubXV0YXRpb25fYXBwZW5kKFgsdil9fWNhdGNoKGUpe2g9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0cmJiFHLmRvbmUmJihtPVUucmV0dXJuKSYmbS5jYWxsKFUpfWZpbmFsbHl7aWYoaCl0aHJvdyBoLmVycm9yfX1pZih1Lkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUoVCkpKFI9Zi5ub2RlX2Nsb25lKEUpKS5fZGF0YT1wLmNoYXJhY3RlckRhdGFfc3Vic3RyaW5nRGF0YShFLDAsRCksZC5tdXRhdGlvbl9hcHBlbmQoUix2KSxwLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEoRSwwLEQsXCJcIik7ZWxzZSBpZihudWxsIT09VCl7Uj1mLm5vZGVfY2xvbmUoVCk7ZC5tdXRhdGlvbl9hcHBlbmQoUix2KTt6PWIobC5jcmVhdGVfcmFuZ2UoW1QsMF0sW0UsRF0pKTtkLm11dGF0aW9uX2FwcGVuZCh6LFIpfXJldHVybiBlLl9zdGFydD1bUCxJXSxlLl9lbmQ9W1AsSV0sdn10LnJhbmdlX2NvbGxhcHNlZD15LHQucmFuZ2Vfcm9vdD12LHQucmFuZ2VfaXNDb250YWluZWQ9Xyx0LnJhbmdlX2lzUGFydGlhbGx5Q29udGFpbmVkPWcsdC5yYW5nZV9zZXRUaGVTdGFydD1mdW5jdGlvbihlLHQscil7aWYodS5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUodCkpdGhyb3cgbmV3IHMuSW52YWxpZE5vZGVUeXBlRXJyb3I7aWYocj5jLnRyZWVfbm9kZUxlbmd0aCh0KSl0aHJvdyBuZXcgcy5JbmRleFNpemVFcnJvcjt2YXIgbj1bdCxyXTt2KGUpPT09Yy50cmVlX3Jvb3ROb2RlKHQpJiZoLmJvdW5kYXJ5UG9pbnRfcG9zaXRpb24obixlLl9lbmQpIT09YS5Cb3VuZGFyeVBvc2l0aW9uLkFmdGVyfHwoZS5fZW5kPW4pLGUuX3N0YXJ0PW59LHQucmFuZ2Vfc2V0VGhlRW5kPWZ1bmN0aW9uKGUsdCxyKXtpZih1Lkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0KSl0aHJvdyBuZXcgcy5JbnZhbGlkTm9kZVR5cGVFcnJvcjtpZihyPmMudHJlZV9ub2RlTGVuZ3RoKHQpKXRocm93IG5ldyBzLkluZGV4U2l6ZUVycm9yO3ZhciBuPVt0LHJdO3YoZSk9PT1jLnRyZWVfcm9vdE5vZGUodCkmJmguYm91bmRhcnlQb2ludF9wb3NpdGlvbihuLGUuX3N0YXJ0KSE9PWEuQm91bmRhcnlQb3NpdGlvbi5CZWZvcmV8fChlLl9zdGFydD1uKSxlLl9lbmQ9bn0sdC5yYW5nZV9zZWxlY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLl9wYXJlbnQ7aWYobnVsbD09PXIpdGhyb3cgbmV3IHMuSW52YWxpZE5vZGVUeXBlRXJyb3I7dmFyIG49Yy50cmVlX2luZGV4KGUpO3QuX3N0YXJ0PVtyLG5dLHQuX2VuZD1bcixuKzFdfSx0LnJhbmdlX2V4dHJhY3Q9Yix0LnJhbmdlX2Nsb25lVGhlQ29udGVudHM9ZnVuY3Rpb24gZSh0KXt2YXIgcixpLGEsaCxtLHYseD1sLmNyZWF0ZV9kb2N1bWVudEZyYWdtZW50KHQuX3N0YXJ0Tm9kZS5fbm9kZURvY3VtZW50KTtpZih5KHQpKXJldHVybiB4O3ZhciB3PXQuX3N0YXJ0Tm9kZSxFPXQuX3N0YXJ0T2Zmc2V0LEQ9dC5fZW5kTm9kZSxTPXQuX2VuZE9mZnNldDt3PT09RCYmdS5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKHcpJiYoKEI9Zi5ub2RlX2Nsb25lKHcpKS5fZGF0YT1wLmNoYXJhY3RlckRhdGFfc3Vic3RyaW5nRGF0YSh3LEUsUy1FKSxkLm11dGF0aW9uX2FwcGVuZChCLHgpKTtmb3IodmFyIEM9dzshYy50cmVlX2lzQW5jZXN0b3JPZihELEMsITApOyl7aWYobnVsbD09PUMuX3BhcmVudCl0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnQgbm9kZSAgaXMgbnVsbC5cIik7Qz1DLl9wYXJlbnR9dmFyIEE9bnVsbDtpZighYy50cmVlX2lzQW5jZXN0b3JPZihELHcsITApKXRyeXtmb3IodmFyIE49bihDLl9jaGlsZHJlbiksVD1OLm5leHQoKTshVC5kb25lO1Q9Ti5uZXh0KCkpe2lmKGcoUD1ULnZhbHVlLHQpKXtBPVA7YnJlYWt9fX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtUJiYhVC5kb25lJiYoaT1OLnJldHVybikmJmkuY2FsbChOKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19dmFyIE89bnVsbDtpZighYy50cmVlX2lzQW5jZXN0b3JPZih3LEQsITApKWZvcih2YXIgRj1vKEMuX2NoaWxkcmVuKSxrPUYubGVuZ3RoLTE7az4wO2stLSl7dmFyIFA7aWYoZyhQPUZba10sdCkpe089UDticmVha319dmFyIEk9W107dHJ5e2Zvcih2YXIgTD1uKEMuX2NoaWxkcmVuKSxNPUwubmV4dCgpOyFNLmRvbmU7TT1MLm5leHQoKSl7aWYoXyhVPU0udmFsdWUsdCkpe2lmKHUuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKFUpKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcjtJLnB1c2goVSl9fX1jYXRjaChlKXthPXtlcnJvcjplfX1maW5hbGx5e3RyeXtNJiYhTS5kb25lJiYoaD1MLnJldHVybikmJmguY2FsbChMKX1maW5hbGx5e2lmKGEpdGhyb3cgYS5lcnJvcn19aWYodS5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKEEpKShCPWYubm9kZV9jbG9uZSh3KSkuX2RhdGE9cC5jaGFyYWN0ZXJEYXRhX3N1YnN0cmluZ0RhdGEodyxFLGMudHJlZV9ub2RlTGVuZ3RoKHcpLUUpLGQubXV0YXRpb25fYXBwZW5kKEIseCk7ZWxzZSBpZihudWxsIT09QSl7dmFyIEI9Zi5ub2RlX2Nsb25lKEEpO2QubXV0YXRpb25fYXBwZW5kKEIseCk7dmFyIGo9ZShsLmNyZWF0ZV9yYW5nZShbdyxFXSxbQSxjLnRyZWVfbm9kZUxlbmd0aChBKV0pKTtkLm11dGF0aW9uX2FwcGVuZChqLEIpfXRyeXtmb3IodmFyIFI9bihJKSx6PVIubmV4dCgpOyF6LmRvbmU7ej1SLm5leHQoKSl7dmFyIFU9ei52YWx1ZSxCPWYubm9kZV9jbG9uZShVKTtkLm11dGF0aW9uX2FwcGVuZChCLHgpfX1jYXRjaChlKXttPXtlcnJvcjplfX1maW5hbGx5e3RyeXt6JiYhei5kb25lJiYodj1SLnJldHVybikmJnYuY2FsbChSKX1maW5hbGx5e2lmKG0pdGhyb3cgbS5lcnJvcn19aWYodS5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKE8pKShCPWYubm9kZV9jbG9uZShEKSkuX2RhdGE9cC5jaGFyYWN0ZXJEYXRhX3N1YnN0cmluZ0RhdGEoRCwwLFMpLGQubXV0YXRpb25fYXBwZW5kKEIseCk7ZWxzZSBpZihudWxsIT09Tyl7Qj1mLm5vZGVfY2xvbmUoTyk7eC5hcHBlbmQoQik7aj1iKGwuY3JlYXRlX3JhbmdlKFtPLDBdLFtELFNdKSk7ZC5tdXRhdGlvbl9hcHBlbmQoaixCKX1yZXR1cm4geH0sdC5yYW5nZV9pbnNlcnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixpO2lmKHUuR3VhcmQuaXNQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob2RlKHQuX3N0YXJ0Tm9kZSl8fHUuR3VhcmQuaXNDb21tZW50Tm9kZSh0Ll9zdGFydE5vZGUpfHx1Lkd1YXJkLmlzVGV4dE5vZGUodC5fc3RhcnROb2RlKSYmbnVsbD09PXQuX3N0YXJ0Tm9kZS5fcGFyZW50fHx0Ll9zdGFydE5vZGU9PT1lKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcjt2YXIgbyxhPW51bGw7aWYodS5HdWFyZC5pc1RleHROb2RlKHQuX3N0YXJ0Tm9kZSkpYT10Ll9zdGFydE5vZGU7ZWxzZXt2YXIgbD0wO3RyeXtmb3IodmFyIGg9bih0Ll9zdGFydE5vZGUuX2NoaWxkcmVuKSxwPWgubmV4dCgpOyFwLmRvbmU7cD1oLm5leHQoKSl7dmFyIGY9cC52YWx1ZTtpZihsPT09dC5fc3RhcnRPZmZzZXQpe2E9ZjticmVha31sKyt9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3AmJiFwLmRvbmUmJihpPWgucmV0dXJuKSYmaS5jYWxsKGgpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX19aWYobnVsbD09PWEpbz10Ll9zdGFydE5vZGU7ZWxzZXtpZihudWxsPT09YS5fcGFyZW50KXRocm93IG5ldyBFcnJvcihcIlBhcmVudCBub2RlIGlzIG51bGwuXCIpO289YS5fcGFyZW50fWQubXV0YXRpb25fZW5zdXJlUHJlSW5zZXJ0aW9uVmFsaWRpdHkoZSxvLGEpLHUuR3VhcmQuaXNUZXh0Tm9kZSh0Ll9zdGFydE5vZGUpJiYoYT1tLnRleHRfc3BsaXQodC5fc3RhcnROb2RlLHQuX3N0YXJ0T2Zmc2V0KSksZT09PWEmJihhPWUuX25leHRTaWJsaW5nKSxudWxsIT09ZS5fcGFyZW50JiZkLm11dGF0aW9uX3JlbW92ZShlLGUuX3BhcmVudCk7dmFyIHY9bnVsbD09PWE/Yy50cmVlX25vZGVMZW5ndGgobyk6Yy50cmVlX2luZGV4KGEpO3UuR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZShlKT92Kz1jLnRyZWVfbm9kZUxlbmd0aChlKTp2KyssZC5tdXRhdGlvbl9wcmVJbnNlcnQoZSxvLGEpLHkodCkmJih0Ll9lbmQ9W28sdl0pfSx0LnJhbmdlX2dldENvbnRhaW5lZE5vZGVzPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybih0PXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcixyPWMudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHQpO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7Zm9yKDtyJiYhXyhyLGUpOylyPWMudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodCxyKTtpZihudWxsPT09cilyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfTt2YXIgbj17ZG9uZTohMSx2YWx1ZTpyfTtyZXR1cm4gcj1jLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKHQsciksbn19fSx0fSx0LnJhbmdlX2dldFBhcnRpYWxseUNvbnRhaW5lZE5vZGVzPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybih0PXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcixyPWMudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHQpO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7Zm9yKDtyJiYhZyhyLGUpOylyPWMudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodCxyKTtpZihudWxsPT09cilyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfTt2YXIgbj17ZG9uZTohMSx2YWx1ZTpyfTtyZXR1cm4gcj1jLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKHQsciksbn19fSx0fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOSk7dC5zZWxlY3RvcnNfc2NvcGVNYXRjaEFTZWxlY3RvcnNTdHJpbmc9ZnVuY3Rpb24oZSx0KXt0aHJvdyBuZXcgbi5Ob3RTdXBwb3J0ZWRFcnJvcn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIpLGk9cigxMDUpO3QudHJlZVdhbGtlcl90cmF2ZXJzZUNoaWxkcmVuPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXQ/ZS5fY3VycmVudC5fZmlyc3RDaGlsZDplLl9jdXJyZW50Ll9sYXN0Q2hpbGQ7bnVsbCE9PXI7KXt2YXIgbz1pLnRyYXZlcnNhbF9maWx0ZXIoZSxyKTtpZihvPT09bi5GaWx0ZXJSZXN1bHQuQWNjZXB0KXJldHVybiBlLl9jdXJyZW50PXIscjtpZihvPT09bi5GaWx0ZXJSZXN1bHQuU2tpcCl7dmFyIGE9dD9yLl9maXJzdENoaWxkOnIuX2xhc3RDaGlsZDtpZihudWxsIT09YSl7cj1hO2NvbnRpbnVlfX1mb3IoO251bGwhPT1yOyl7dmFyIHM9dD9yLl9uZXh0U2libGluZzpyLl9wcmV2aW91c1NpYmxpbmc7aWYobnVsbCE9PXMpe3I9czticmVha312YXIgdT1yLl9wYXJlbnQ7aWYobnVsbD09PXV8fHU9PT1lLl9yb290fHx1PT09ZS5fY3VycmVudClyZXR1cm4gbnVsbDtyPXV9fXJldHVybiBudWxsfSx0LnRyZWVXYWxrZXJfdHJhdmVyc2VTaWJsaW5ncz1mdW5jdGlvbihlLHQpe3ZhciByPWUuX2N1cnJlbnQ7aWYocj09PWUuX3Jvb3QpcmV0dXJuIG51bGw7Zm9yKDs7KXtmb3IodmFyIG89dD9yLl9uZXh0U2libGluZzpyLl9wcmV2aW91c1NpYmxpbmc7bnVsbCE9PW87KXtyPW87dmFyIGE9aS50cmF2ZXJzYWxfZmlsdGVyKGUscik7aWYoYT09PW4uRmlsdGVyUmVzdWx0LkFjY2VwdClyZXR1cm4gZS5fY3VycmVudD1yLHI7bz10P3IuX2ZpcnN0Q2hpbGQ6ci5fbGFzdENoaWxkLGEhPT1uLkZpbHRlclJlc3VsdC5SZWplY3QmJm51bGwhPT1vfHwobz10P3IuX25leHRTaWJsaW5nOnIuX3ByZXZpb3VzU2libGluZyl9aWYobnVsbD09PShyPXIuX3BhcmVudCl8fHI9PT1lLl9yb290KXJldHVybiBudWxsO2lmKGkudHJhdmVyc2FsX2ZpbHRlcihlLHIpPT09bi5GaWx0ZXJSZXN1bHQuQWNjZXB0KXJldHVybiBudWxsfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDg5KSxyKDc0KTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEpLGE9cigyKSxzPXIoNTApLHU9cigzKSxsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2YXIgbj1lLmNhbGwodGhpcyx0KXx8dGhpcztyZXR1cm4gbi5faW5kZW50YXRpb249e30sbi5fbGVuZ3RoVG9MYXN0TmV3bGluZT0wLG4uX3dyaXRlck9wdGlvbnM9by5hcHBseURlZmF1bHRzKHIse3dlbGxGb3JtZWQ6ITEsaGVhZGxlc3M6ITEscHJldHR5UHJpbnQ6ITEsaW5kZW50OlwiICBcIixuZXdsaW5lOlwiXFxuXCIsb2Zmc2V0OjAsd2lkdGg6MCxhbGxvd0VtcHR5VGFnczohMSxpbmRlbnRUZXh0T25seU5vZGVzOiExLHNwYWNlQmVmb3JlU2xhc2g6ITF9KSxufXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuc2VyaWFsaXplPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9yZWZzPXtzdXBwcmVzc1ByZXR0eTohMSxlbXB0eU5vZGU6ITEsbWFya3VwOlwiXCJ9LGUubm9kZVR5cGUhPT1hLk5vZGVUeXBlLkRvY3VtZW50fHx0aGlzLl93cml0ZXJPcHRpb25zLmhlYWRsZXNzfHx0aGlzLmRlY2xhcmF0aW9uKHRoaXMuX2J1aWxkZXJPcHRpb25zLnZlcnNpb24sdGhpcy5fYnVpbGRlck9wdGlvbnMuZW5jb2RpbmcsdGhpcy5fYnVpbGRlck9wdGlvbnMuc3RhbmRhbG9uZSksdGhpcy5zZXJpYWxpemVOb2RlKGUsdGhpcy5fd3JpdGVyT3B0aW9ucy53ZWxsRm9ybWVkKSx0aGlzLl93cml0ZXJPcHRpb25zLnByZXR0eVByaW50JiZ0aGlzLl9yZWZzLm1hcmt1cC5zbGljZSgtdGhpcy5fd3JpdGVyT3B0aW9ucy5uZXdsaW5lLmxlbmd0aCk9PT10aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmUmJih0aGlzLl9yZWZzLm1hcmt1cD10aGlzLl9yZWZzLm1hcmt1cC5zbGljZSgwLC10aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmUubGVuZ3RoKSksdGhpcy5fcmVmcy5tYXJrdXB9LHQucHJvdG90eXBlLmRlY2xhcmF0aW9uPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLl9iZWdpbkxpbmUoKSx0aGlzLl9yZWZzLm1hcmt1cCs9Jzw/eG1sIHZlcnNpb249XCInK2UrJ1wiJyx2b2lkIDAhPT10JiYodGhpcy5fcmVmcy5tYXJrdXArPScgZW5jb2Rpbmc9XCInK3QrJ1wiJyksdm9pZCAwIT09ciYmKHRoaXMuX3JlZnMubWFya3VwKz0nIHN0YW5kYWxvbmU9XCInKyhyP1wieWVzXCI6XCJub1wiKSsnXCInKSx0aGlzLl9yZWZzLm1hcmt1cCs9XCI/PlwiLHRoaXMuX2VuZExpbmUoKX0sdC5wcm90b3R5cGUuZG9jVHlwZT1mdW5jdGlvbihlLHQscil7dGhpcy5fYmVnaW5MaW5lKCksdGhpcy5fcmVmcy5tYXJrdXArPXQmJnI/XCI8IURPQ1RZUEUgXCIrZSsnIFBVQkxJQyBcIicrdCsnXCIgXCInK3IrJ1wiPic6dD9cIjwhRE9DVFlQRSBcIitlKycgUFVCTElDIFwiJyt0KydcIj4nOnI/XCI8IURPQ1RZUEUgXCIrZSsnIFNZU1RFTSBcIicrcisnXCI+JzpcIjwhRE9DVFlQRSBcIitlK1wiPlwiLHRoaXMuX2VuZExpbmUoKX0sdC5wcm90b3R5cGUub3BlblRhZ0JlZ2luPWZ1bmN0aW9uKGUpe3RoaXMuX2JlZ2luTGluZSgpLHRoaXMuX3JlZnMubWFya3VwKz1cIjxcIitlfSx0LnByb3RvdHlwZS5vcGVuVGFnRW5kPWZ1bmN0aW9uKGUsdCxyKXtpZih0aGlzLl9yZWZzLnN1cHByZXNzUHJldHR5PSExLHRoaXMuX3JlZnMuZW1wdHlOb2RlPSExLHRoaXMuX3dyaXRlck9wdGlvbnMucHJldHR5UHJpbnQmJiF0JiYhcil7Zm9yKHZhciBuPSEwLGk9ITAsbz10aGlzLmN1cnJlbnROb2RlLmZpcnN0Q2hpbGQsYT0wLHM9MDtvOyl7aWYodS5HdWFyZC5pc0V4Y2x1c2l2ZVRleHROb2RlKG8pKXMrKztlbHNle2lmKCF1Lkd1YXJkLmlzQ0RBVEFTZWN0aW9uTm9kZShvKSl7bj0hMSxpPSExO2JyZWFrfWErK31cIlwiIT09by5kYXRhJiYoaT0hMSksbz1vLm5leHRTaWJsaW5nfXRoaXMuX3JlZnMuc3VwcHJlc3NQcmV0dHk9IXRoaXMuX3dyaXRlck9wdGlvbnMuaW5kZW50VGV4dE9ubHlOb2RlcyYmbiYmKGE8PTEmJjA9PT1zfHwwPT09YSksdGhpcy5fcmVmcy5lbXB0eU5vZGU9aX0ocnx8dHx8dGhpcy5fcmVmcy5lbXB0eU5vZGUpJiZ0aGlzLl93cml0ZXJPcHRpb25zLmFsbG93RW1wdHlUYWdzP3RoaXMuX3JlZnMubWFya3VwKz1cIj48L1wiK2UrXCI+XCI6dGhpcy5fcmVmcy5tYXJrdXArPXI/XCIgLz5cIjp0fHx0aGlzLl9yZWZzLmVtcHR5Tm9kZT90aGlzLl93cml0ZXJPcHRpb25zLnNwYWNlQmVmb3JlU2xhc2g/XCIgLz5cIjpcIi8+XCI6XCI+XCIsdGhpcy5fZW5kTGluZSgpfSx0LnByb3RvdHlwZS5jbG9zZVRhZz1mdW5jdGlvbihlKXt0aGlzLl9yZWZzLmVtcHR5Tm9kZXx8KHRoaXMuX2JlZ2luTGluZSgpLHRoaXMuX3JlZnMubWFya3VwKz1cIjwvXCIrZStcIj5cIiksdGhpcy5fcmVmcy5zdXBwcmVzc1ByZXR0eT0hMSx0aGlzLl9yZWZzLmVtcHR5Tm9kZT0hMSx0aGlzLl9lbmRMaW5lKCl9LHQucHJvdG90eXBlLmF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe3ZhciByPWUrJz1cIicrdCsnXCInO3RoaXMuX3dyaXRlck9wdGlvbnMucHJldHR5UHJpbnQmJnRoaXMuX3dyaXRlck9wdGlvbnMud2lkdGg+MCYmdGhpcy5fcmVmcy5tYXJrdXAubGVuZ3RoLXRoaXMuX2xlbmd0aFRvTGFzdE5ld2xpbmUrMStyLmxlbmd0aD50aGlzLl93cml0ZXJPcHRpb25zLndpZHRoPyh0aGlzLl9lbmRMaW5lKCksdGhpcy5fYmVnaW5MaW5lKCksdGhpcy5fcmVmcy5tYXJrdXArPXRoaXMuX2luZGVudCgxKStyKTp0aGlzLl9yZWZzLm1hcmt1cCs9XCIgXCIrcn0sdC5wcm90b3R5cGUudGV4dD1mdW5jdGlvbihlKXtcIlwiIT09ZSYmKHRoaXMuX2JlZ2luTGluZSgpLHRoaXMuX3JlZnMubWFya3VwKz1lLHRoaXMuX2VuZExpbmUoKSl9LHQucHJvdG90eXBlLmNkYXRhPWZ1bmN0aW9uKGUpe1wiXCIhPT1lJiYodGhpcy5fYmVnaW5MaW5lKCksdGhpcy5fcmVmcy5tYXJrdXArPVwiPCFbQ0RBVEFbXCIrZStcIl1dPlwiLHRoaXMuX2VuZExpbmUoKSl9LHQucHJvdG90eXBlLmNvbW1lbnQ9ZnVuY3Rpb24oZSl7dGhpcy5fYmVnaW5MaW5lKCksdGhpcy5fcmVmcy5tYXJrdXArPVwiXFx4M2MhLS1cIitlK1wiLS1cXHgzZVwiLHRoaXMuX2VuZExpbmUoKX0sdC5wcm90b3R5cGUuaW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0KXt0aGlzLl9iZWdpbkxpbmUoKSx0aGlzLl9yZWZzLm1hcmt1cCs9XCI8P1wiKyhcIlwiPT09dD9lOmUrXCIgXCIrdCkrXCI/PlwiLHRoaXMuX2VuZExpbmUoKX0sdC5wcm90b3R5cGUuX2JlZ2luTGluZT1mdW5jdGlvbigpe3RoaXMuX3dyaXRlck9wdGlvbnMucHJldHR5UHJpbnQmJiF0aGlzLl9yZWZzLnN1cHByZXNzUHJldHR5JiYodGhpcy5fcmVmcy5tYXJrdXArPXRoaXMuX2luZGVudCh0aGlzLl93cml0ZXJPcHRpb25zLm9mZnNldCt0aGlzLmxldmVsKSl9LHQucHJvdG90eXBlLl9lbmRMaW5lPWZ1bmN0aW9uKCl7dGhpcy5fd3JpdGVyT3B0aW9ucy5wcmV0dHlQcmludCYmIXRoaXMuX3JlZnMuc3VwcHJlc3NQcmV0dHkmJih0aGlzLl9yZWZzLm1hcmt1cCs9dGhpcy5fd3JpdGVyT3B0aW9ucy5uZXdsaW5lLHRoaXMuX2xlbmd0aFRvTGFzdE5ld2xpbmU9dGhpcy5fcmVmcy5tYXJrdXAubGVuZ3RoKX0sdC5wcm90b3R5cGUuX2luZGVudD1mdW5jdGlvbihlKXtpZihlPD0wKXJldHVyblwiXCI7aWYodm9pZCAwIT09dGhpcy5faW5kZW50YXRpb25bZV0pcmV0dXJuIHRoaXMuX2luZGVudGF0aW9uW2VdO3ZhciB0PXRoaXMuX3dyaXRlck9wdGlvbnMuaW5kZW50LnJlcGVhdChlKTtyZXR1cm4gdGhpcy5faW5kZW50YXRpb25bZV09dCx0fSx0fShzLkJhc2VXcml0ZXIpO3QuWE1MV3JpdGVyPWx9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQ3KSxpPXIoMzUpO2UuZXhwb3J0cz1cIlwiLnJlcGVhdHx8ZnVuY3Rpb24oZSl7dmFyIHQ9U3RyaW5nKGkodGhpcykpLHI9XCJcIixvPW4oZSk7aWYobzwwfHxvPT0xLzApdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIG51bWJlciBvZiByZXBldGl0aW9uc1wiKTtmb3IoO28+MDsobz4+Pj0xKSYmKHQrPXQpKTEmbyYmKHIrPXQpO3JldHVybiByfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoMzEpLHIoMzIpLHIoMzMpLHIoMTkpLHIoMTc4KSxyKDIwKSxyKDIyKSxyKDIzKTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KSxvPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoNjcpLHM9cigxKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2YXIgbj1lLmNhbGwodGhpcyx0KXx8dGhpcztyZXR1cm4gbi5fd3JpdGVyT3B0aW9ucz1zLmFwcGx5RGVmYXVsdHMocix7d2VsbEZvcm1lZDohMSxwcmV0dHlQcmludDohMSxpbmRlbnQ6XCIgIFwiLG5ld2xpbmU6XCJcXG5cIixvZmZzZXQ6MCxncm91cDohMSx2ZXJib3NlOiExfSksbn1yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLnNlcmlhbGl6ZT1mdW5jdGlvbihlKXt2YXIgdD1zLmFwcGx5RGVmYXVsdHModGhpcy5fd3JpdGVyT3B0aW9ucyx7Zm9ybWF0Olwib2JqZWN0XCIsd2VsbEZvcm1lZDohMX0pLHI9bmV3IGEuT2JqZWN0V3JpdGVyKHRoaXMuX2J1aWxkZXJPcHRpb25zLHQpLnNlcmlhbGl6ZShlKTtyZXR1cm4gdGhpcy5fYmVnaW5MaW5lKHRoaXMuX3dyaXRlck9wdGlvbnMsMCkrdGhpcy5fY29udmVydE9iamVjdChyLHRoaXMuX3dyaXRlck9wdGlvbnMpfSx0LnByb3RvdHlwZS5fY29udmVydE9iamVjdD1mdW5jdGlvbihlLHQscil7dmFyIG4saSxhPXRoaXM7dm9pZCAwPT09ciYmKHI9MCk7dmFyIHU9XCJcIixsPXRoaXMuX2lzTGVhZk5vZGUoZSk7aWYocy5pc0FycmF5KGUpKXt1Kz1cIltcIjt2YXIgYz1lLmxlbmd0aCxoPTA7dHJ5e2Zvcih2YXIgcD1vKGUpLGY9cC5uZXh0KCk7IWYuZG9uZTtmPXAubmV4dCgpKXt2YXIgZD1mLnZhbHVlO3UrPXRoaXMuX2VuZExpbmUodCxyKzEpK3RoaXMuX2JlZ2luTGluZSh0LHIrMSkrdGhpcy5fY29udmVydE9iamVjdChkLHQscisxKSxoPGMtMSYmKHUrPVwiLFwiKSxoKyt9fWNhdGNoKGUpe249e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2YmJiFmLmRvbmUmJihpPXAucmV0dXJuKSYmaS5jYWxsKHApfWZpbmFsbHl7aWYobil0aHJvdyBuLmVycm9yfX11Kz10aGlzLl9lbmRMaW5lKHQscikrdGhpcy5fYmVnaW5MaW5lKHQsciksdSs9XCJdXCJ9ZWxzZSBpZihzLmlzT2JqZWN0KGUpKXt1Kz1cIntcIjt2YXIgbT1zLm9iamVjdExlbmd0aChlKSx5PTA7cy5mb3JFYWNoT2JqZWN0KGUsKGZ1bmN0aW9uKGUsbil7bCYmdC5wcmV0dHlQcmludD91Kz1cIiBcIjp1Kz1hLl9lbmRMaW5lKHQscisxKSthLl9iZWdpbkxpbmUodCxyKzEpLHUrPWEuX2tleShlKSx0LnByZXR0eVByaW50JiYodSs9XCIgXCIpLHUrPWEuX2NvbnZlcnRPYmplY3Qobix0LHIrMSkseTxtLTEmJih1Kz1cIixcIikseSsrfSksdGhpcyksbCYmdC5wcmV0dHlQcmludD91Kz1cIiBcIjp1Kz10aGlzLl9lbmRMaW5lKHQscikrdGhpcy5fYmVnaW5MaW5lKHQsciksdSs9XCJ9XCJ9ZWxzZSB1Kz10aGlzLl92YWwoZSk7cmV0dXJuIHV9LHQucHJvdG90eXBlLl9iZWdpbkxpbmU9ZnVuY3Rpb24oZSx0KXtpZighZS5wcmV0dHlQcmludClyZXR1cm5cIlwiO3ZhciByPWUub2Zmc2V0K3QrMTtyZXR1cm4gcj4wP25ldyBBcnJheShyKS5qb2luKGUuaW5kZW50KTpcIlwifSx0LnByb3RvdHlwZS5fZW5kTGluZT1mdW5jdGlvbihlLHQpe3JldHVybiBlLnByZXR0eVByaW50P2UubmV3bGluZTpcIlwifSx0LnByb3RvdHlwZS5fa2V5PWZ1bmN0aW9uKGUpe3JldHVybidcIicrZSsnXCI6J30sdC5wcm90b3R5cGUuX3ZhbD1mdW5jdGlvbihlKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSl9LHQucHJvdG90eXBlLl9pc0xlYWZOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9kZXNjZW5kYW50Q291bnQoZSk8PTF9LHQucHJvdG90eXBlLl9kZXNjZW5kYW50Q291bnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3JldHVybiB2b2lkIDA9PT10JiYodD0wKSxzLmlzQXJyYXkoZSk/cy5mb3JFYWNoQXJyYXkoZSwoZnVuY3Rpb24oZSl7cmV0dXJuIHQrPXIuX2Rlc2NlbmRhbnRDb3VudChlLHQpfSksdGhpcyk6cy5pc09iamVjdChlKT9zLmZvckVhY2hPYmplY3QoZSwoZnVuY3Rpb24oZSxuKXtyZXR1cm4gdCs9ci5fZGVzY2VuZGFudENvdW50KG4sdCl9KSx0aGlzKTp0KyssdH0sdH0ocig1MCkuQmFzZVdyaXRlcik7dC5KU09OV3JpdGVyPXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDMxKSxyKDMyKSxyKDMzKSxyKDE5KSxyKDE3OCkscig4OSkscigyMCkscigyMikscigyMyk7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksbz10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDY3KSxzPXIoMSksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscil7dmFyIG49ZS5jYWxsKHRoaXMsdCl8fHRoaXM7aWYobi5fd3JpdGVyT3B0aW9ucz1zLmFwcGx5RGVmYXVsdHMocix7d2VsbEZvcm1lZDohMSxpbmRlbnQ6XCIgIFwiLG5ld2xpbmU6XCJcXG5cIixvZmZzZXQ6MCxncm91cDohMSx2ZXJib3NlOiExfSksbi5fd3JpdGVyT3B0aW9ucy5pbmRlbnQubGVuZ3RoPDIpdGhyb3cgbmV3IEVycm9yKFwiWUFNTCBpbmRlbnRlbnRhdGlvbiBzdHJpbmcgbXVzdCBiZSBhdCBsZWFzdCB0d28gY2hhcmFjdGVycyBsb25nLlwiKTtpZihuLl93cml0ZXJPcHRpb25zLm9mZnNldDwwKXRocm93IG5ldyBFcnJvcihcIllBTUwgb2Zmc2V0IHNob3VsZCBiZSB6ZXJvIG9yIGEgcG9zaXRpdmUgbnVtYmVyLlwiKTtyZXR1cm4gbn1yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLnNlcmlhbGl6ZT1mdW5jdGlvbihlKXt2YXIgdD1zLmFwcGx5RGVmYXVsdHModGhpcy5fd3JpdGVyT3B0aW9ucyx7Zm9ybWF0Olwib2JqZWN0XCIsd2VsbEZvcm1lZDohMX0pLHI9bmV3IGEuT2JqZWN0V3JpdGVyKHRoaXMuX2J1aWxkZXJPcHRpb25zLHQpLnNlcmlhbGl6ZShlKSxuPXRoaXMuX2JlZ2luTGluZSh0aGlzLl93cml0ZXJPcHRpb25zLDApK1wiLS0tXCIrdGhpcy5fZW5kTGluZSh0aGlzLl93cml0ZXJPcHRpb25zKSt0aGlzLl9jb252ZXJ0T2JqZWN0KHIsdGhpcy5fd3JpdGVyT3B0aW9ucywwKTtyZXR1cm4gbi5zbGljZSgtdGhpcy5fd3JpdGVyT3B0aW9ucy5uZXdsaW5lLmxlbmd0aCk9PT10aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmUmJihuPW4uc2xpY2UoMCwtdGhpcy5fd3JpdGVyT3B0aW9ucy5uZXdsaW5lLmxlbmd0aCkpLG59LHQucHJvdG90eXBlLl9jb252ZXJ0T2JqZWN0PWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpLGEsdT10aGlzO3ZvaWQgMD09PW4mJihuPSExKTt2YXIgbD1cIlwiO2lmKHMuaXNBcnJheShlKSl0cnl7Zm9yKHZhciBjPW8oZSksaD1jLm5leHQoKTshaC5kb25lO2g9Yy5uZXh0KCkpe3ZhciBwPWgudmFsdWU7bCs9dGhpcy5fYmVnaW5MaW5lKHQsciwhMCkscy5pc09iamVjdChwKT9zLmlzRW1wdHkocCk/bCs9J1wiXCInK3RoaXMuX2VuZExpbmUodCk6bCs9dGhpcy5fY29udmVydE9iamVjdChwLHQsciwhMCk6bCs9dGhpcy5fdmFsKHApK3RoaXMuX2VuZExpbmUodCl9fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2gmJiFoLmRvbmUmJihhPWMucmV0dXJuKSYmYS5jYWxsKGMpfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1lbHNlIHMuZm9yRWFjaE9iamVjdChlLChmdW5jdGlvbihlLGkpe24/KGwrPXUuX2tleShlKSxuPSExKTpsKz11Ll9iZWdpbkxpbmUodCxyKSt1Ll9rZXkoZSkscy5pc09iamVjdChpKT9zLmlzRW1wdHkoaSk/bCs9JyBcIlwiJyt1Ll9lbmRMaW5lKHQpOmwrPXUuX2VuZExpbmUodCkrdS5fY29udmVydE9iamVjdChpLHQscisxKTpsKz1cIiBcIit1Ll92YWwoaSkrdS5fZW5kTGluZSh0KX0pLHRoaXMpO3JldHVybiBsfSx0LnByb3RvdHlwZS5fYmVnaW5MaW5lPWZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG49ZS5vZmZzZXQrdCsxLGk9bmV3IEFycmF5KG4pLmpvaW4oZS5pbmRlbnQpO3JldHVybiByP2kuc3Vic3RyKDAsaS5sZW5ndGgtMikrXCItXCIraS5zdWJzdHIoLTEsMSk6aX0sdC5wcm90b3R5cGUuX2VuZExpbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUubmV3bGluZX0sdC5wcm90b3R5cGUuX2tleT1mdW5jdGlvbihlKXtyZXR1cm4nXCInK2UrJ1wiOid9LHQucHJvdG90eXBlLl92YWw9ZnVuY3Rpb24oZSl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfSx0fShyKDUwKS5CYXNlV3JpdGVyKTt0LllBTUxXcml0ZXI9dX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIoMTEwKS5kb20uc2V0RmVhdHVyZXMoITApO3ZhciBuPXIoMTEwKTt0LkRPTUltcGxlbWVudGF0aW9uPW4uRE9NSW1wbGVtZW50YXRpb247dmFyIGk9cigyNzEpO3QuRE9NUGFyc2VyPWkuRE9NUGFyc2VyO3ZhciBvPXIoMjc0KTt0LlhNTFNlcmlhbGl6ZXI9by5YTUxTZXJpYWxpemVyfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigzKSxpPXIoMCksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLmJlZm9yZT1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt2YXIgcj1uLkNhc3QuYXNOb2RlKHRoaXMpLG89ci5fcGFyZW50O2lmKG51bGwhPT1vKXtmb3IodmFyIGE9ci5fcHJldmlvdXNTaWJsaW5nLHM9ITA7cyYmYTspe3M9ITE7Zm9yKHZhciB1PTA7dTxlLmxlbmd0aDt1Kyspe3ZhciBsPWVbdV07aWYobD09PWEpe2E9YS5fcHJldmlvdXNTaWJsaW5nLHM9ITA7YnJlYWt9fX12YXIgYz1pLnBhcmVudE5vZGVfY29udmVydE5vZGVzSW50b0FOb2RlKGUsci5fbm9kZURvY3VtZW50KTthPW51bGw9PT1hP28uX2ZpcnN0Q2hpbGQ6YS5fbmV4dFNpYmxpbmcsaS5tdXRhdGlvbl9wcmVJbnNlcnQoYyxvLGEpfX0sZS5wcm90b3R5cGUuYWZ0ZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIHI9bi5DYXN0LmFzTm9kZSh0aGlzKSxvPXIuX3BhcmVudDtpZihvKXtmb3IodmFyIGE9ci5fbmV4dFNpYmxpbmcscz0hMDtzJiZhOyl7cz0hMTtmb3IodmFyIHU9MDt1PGUubGVuZ3RoO3UrKyl7dmFyIGw9ZVt1XTtpZihsPT09YSl7YT1hLl9uZXh0U2libGluZyxzPSEwO2JyZWFrfX19dmFyIGM9aS5wYXJlbnROb2RlX2NvbnZlcnROb2Rlc0ludG9BTm9kZShlLHIuX25vZGVEb2N1bWVudCk7aS5tdXRhdGlvbl9wcmVJbnNlcnQoYyxvLGEpfX0sZS5wcm90b3R5cGUucmVwbGFjZVdpdGg9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIHI9bi5DYXN0LmFzTm9kZSh0aGlzKSxvPXIuX3BhcmVudDtpZihvKXtmb3IodmFyIGE9ci5fbmV4dFNpYmxpbmcscz0hMDtzJiZhOyl7cz0hMTtmb3IodmFyIHU9MDt1PGUubGVuZ3RoO3UrKyl7dmFyIGw9ZVt1XTtpZihsPT09YSl7YT1hLl9uZXh0U2libGluZyxzPSEwO2JyZWFrfX19dmFyIGM9aS5wYXJlbnROb2RlX2NvbnZlcnROb2Rlc0ludG9BTm9kZShlLHIuX25vZGVEb2N1bWVudCk7ci5fcGFyZW50PT09bz9pLm11dGF0aW9uX3JlcGxhY2UocixjLG8pOmkubXV0YXRpb25fcHJlSW5zZXJ0KGMsbyxhKX19LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3ZhciBlPW4uQ2FzdC5hc05vZGUodGhpcyksdD1lLl9wYXJlbnQ7dCYmaS5tdXRhdGlvbl9yZW1vdmUoZSx0KX0sZX0oKTt0LkNoaWxkTm9kZUltcGw9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7fTt0LkRvY3VtZW50T3JTaGFkb3dSb290SW1wbD1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cig2KSxvPXIoMyksYT1yKDcpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuX25vZGVMaXN0PVtdLHRoaXMuX3JlY29yZFF1ZXVlPVtdLHRoaXMuX2NhbGxiYWNrPWU7dmFyIHQ9aS5kb20ud2luZG93O2Euc2V0LmFwcGVuZCh0Ll9tdXRhdGlvbk9ic2VydmVycyx0aGlzKX1yZXR1cm4gZS5wcm90b3R5cGUub2JzZXJ2ZT1mdW5jdGlvbihlLHQpe3ZhciByLGk7aWYodm9pZCAwPT09KHQ9dHx8e2NoaWxkTGlzdDohMSxzdWJ0cmVlOiExfSkuYXR0cmlidXRlT2xkVmFsdWUmJnZvaWQgMD09PXQuYXR0cmlidXRlRmlsdGVyfHx2b2lkIDAhPT10LmF0dHJpYnV0ZXN8fCh0LmF0dHJpYnV0ZXM9ITApLHZvaWQgMCE9PXQuY2hhcmFjdGVyRGF0YU9sZFZhbHVlJiZ2b2lkIDA9PT10LmNoYXJhY3RlckRhdGEmJih0LmNoYXJhY3RlckRhdGE9ITApLCF0LmNoaWxkTGlzdCYmIXQuYXR0cmlidXRlcyYmIXQuY2hhcmFjdGVyRGF0YSl0aHJvdyBuZXcgVHlwZUVycm9yO2lmKHQuYXR0cmlidXRlT2xkVmFsdWUmJiF0LmF0dHJpYnV0ZXMpdGhyb3cgbmV3IFR5cGVFcnJvcjtpZih2b2lkIDAhPT10LmF0dHJpYnV0ZUZpbHRlciYmIXQuYXR0cmlidXRlcyl0aHJvdyBuZXcgVHlwZUVycm9yO2lmKHQuY2hhcmFjdGVyRGF0YU9sZFZhbHVlJiYhdC5jaGFyYWN0ZXJEYXRhKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIHM9ITEsdT10LGw9ZnVuY3Rpb24oZSl7dmFyIHQscjtpZihlLm9ic2VydmVyPT09Yyl7cz0hMDt0cnl7Zm9yKHZhciBpPSh0PXZvaWQgMCxuKGMuX25vZGVMaXN0KSksbD1pLm5leHQoKTshbC5kb25lO2w9aS5uZXh0KCkpe3ZhciBoPWwudmFsdWU7YS5saXN0LnJlbW92ZShoLl9yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0LChmdW5jdGlvbih0KXtyZXR1cm4gby5HdWFyZC5pc1RyYW5zaWVudFJlZ2lzdGVyZWRPYnNlcnZlcih0KSYmdC5zb3VyY2U9PT1lfSkpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYocj1pLnJldHVybikmJnIuY2FsbChpKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19ZS5vcHRpb25zPXV9fSxjPXRoaXM7dHJ5e2Zvcih2YXIgaD1uKGUuX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3QpLHA9aC5uZXh0KCk7IXAuZG9uZTtwPWgubmV4dCgpKXtsKHAudmFsdWUpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtwJiYhcC5kb25lJiYoaT1oLnJldHVybikmJmkuY2FsbChoKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19c3x8KGUuX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3QucHVzaCh7b2JzZXJ2ZXI6dGhpcyxvcHRpb25zOnR9KSx0aGlzLl9ub2RlTGlzdC5wdXNoKGUpKX0sZS5wcm90b3R5cGUuZGlzY29ubmVjdD1mdW5jdGlvbigpe3ZhciBlLHQscj10aGlzO3RyeXtmb3IodmFyIGk9bih0aGlzLl9ub2RlTGlzdCksbz1pLm5leHQoKTshby5kb25lO289aS5uZXh0KCkpe3ZhciBzPW8udmFsdWU7YS5saXN0LnJlbW92ZShzLl9yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0LChmdW5jdGlvbihlKXtyZXR1cm4gZS5vYnNlcnZlcj09PXJ9KSl9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e28mJiFvLmRvbmUmJih0PWkucmV0dXJuKSYmdC5jYWxsKGkpfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX10aGlzLl9yZWNvcmRRdWV1ZT1bXX0sZS5wcm90b3R5cGUudGFrZVJlY29yZHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9yZWNvcmRRdWV1ZTtyZXR1cm4gdGhpcy5fcmVjb3JkUXVldWU9W10sZX0sZX0oKTt0Lk11dGF0aW9uT2JzZXJ2ZXJJbXBsPXN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDMpLGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nXCIse2dldDpmdW5jdGlvbigpe2Zvcih2YXIgZT1uLkNhc3QuYXNOb2RlKHRoaXMpLl9wcmV2aW91c1NpYmxpbmc7ZTspe2lmKG4uR3VhcmQuaXNFbGVtZW50Tm9kZShlKSlyZXR1cm4gZTtlPWUuX3ByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJuZXh0RWxlbWVudFNpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBlPW4uQ2FzdC5hc05vZGUodGhpcykuX25leHRTaWJsaW5nO2U7KXtpZihuLkd1YXJkLmlzRWxlbWVudE5vZGUoZSkpcmV0dXJuIGU7ZT1lLl9uZXh0U2libGluZ31yZXR1cm4gbnVsbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlSW1wbD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigzKSxpPXIoMCksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLmdldEVsZW1lbnRCeUlkPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1pLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZShuLkNhc3QuYXNOb2RlKHRoaXMpLCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gbi5HdWFyZC5pc0VsZW1lbnROb2RlKGUpfSkpO251bGwhPT10Oyl7aWYodC5fdW5pcXVlSWRlbnRpZmllcj09PWUpcmV0dXJuIHQ7dD1pLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKG4uQ2FzdC5hc05vZGUodGhpcyksdCwhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIG4uR3VhcmQuaXNFbGVtZW50Tm9kZShlKX0pKX1yZXR1cm4gbnVsbH0sZX0oKTt0Lk5vbkVsZW1lbnRQYXJlbnROb2RlSW1wbD1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cigzKSxvPXIoMCksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImNoaWxkcmVuXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBvLmNyZWF0ZV9odG1sQ29sbGVjdGlvbihpLkNhc3QuYXNOb2RlKHRoaXMpKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJmaXJzdEVsZW1lbnRDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9aS5DYXN0LmFzTm9kZSh0aGlzKS5fZmlyc3RDaGlsZDtlOyl7aWYoaS5HdWFyZC5pc0VsZW1lbnROb2RlKGUpKXJldHVybiBlO2U9ZS5fbmV4dFNpYmxpbmd9cmV0dXJuIG51bGx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwibGFzdEVsZW1lbnRDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9aS5DYXN0LmFzTm9kZSh0aGlzKS5fbGFzdENoaWxkO2U7KXtpZihpLkd1YXJkLmlzRWxlbWVudE5vZGUoZSkpcmV0dXJuIGU7ZT1lLl9wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiY2hpbGRFbGVtZW50Q291bnRcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGUsdCxyPTA7dHJ5e2Zvcih2YXIgbz1uKGkuQ2FzdC5hc05vZGUodGhpcykuX2NoaWxkcmVuKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7dmFyIHM9YS52YWx1ZTtpLkd1YXJkLmlzRWxlbWVudE5vZGUocykmJnIrK319Y2F0Y2godCl7ZT17ZXJyb3I6dH19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKHQ9by5yZXR1cm4pJiZ0LmNhbGwobyl9ZmluYWxseXtpZihlKXRocm93IGUuZXJyb3J9fXJldHVybiByfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLnByZXBlbmQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIHI9aS5DYXN0LmFzTm9kZSh0aGlzKSxuPW8ucGFyZW50Tm9kZV9jb252ZXJ0Tm9kZXNJbnRvQU5vZGUoZSxyLl9ub2RlRG9jdW1lbnQpO28ubXV0YXRpb25fcHJlSW5zZXJ0KG4scixyLl9maXJzdENoaWxkKX0sZS5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3ZhciByPWkuQ2FzdC5hc05vZGUodGhpcyksbj1vLnBhcmVudE5vZGVfY29udmVydE5vZGVzSW50b0FOb2RlKGUsci5fbm9kZURvY3VtZW50KTtvLm11dGF0aW9uX2FwcGVuZChuLHIpfSxlLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yPWZ1bmN0aW9uKGUpe3ZhciB0PWkuQ2FzdC5hc05vZGUodGhpcykscj1vLnNlbGVjdG9yc19zY29wZU1hdGNoQVNlbGVjdG9yc1N0cmluZyhlLHQpO3JldHVybiAwPT09ci5sZW5ndGg/bnVsbDpyWzBdfSxlLnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsPWZ1bmN0aW9uKGUpe3ZhciB0PWkuQ2FzdC5hc05vZGUodGhpcykscj1vLnNlbGVjdG9yc19zY29wZU1hdGNoQVNlbGVjdG9yc1N0cmluZyhlLHQpO3JldHVybiBvLmNyZWF0ZV9ub2RlTGlzdFN0YXRpYyh0LHIpfSxlfSgpO3QuUGFyZW50Tm9kZUltcGw9YX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMCksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9uYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fbmFtZXx8XCJcIn0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX19uYW1lPWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX2Fzc2lnbmVkU2xvdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2Fzc2lnbmVkU2xvdHx8bnVsbH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX19hc3NpZ25lZFNsb3Q9ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhc3NpZ25lZFNsb3RcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4uc2hhZG93VHJlZV9maW5kQVNsb3QodGhpcywhMCl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0LlNsb3RhYmxlSW1wbD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigxMDIpLGE9cig5KSxzPXIoMyksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3ZhciByPWUuY2FsbCh0aGlzKXx8dGhpcztpZihzLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0LnN0YXJ0Q29udGFpbmVyKXx8cy5HdWFyZC5pc0F0dHJOb2RlKHQuc3RhcnRDb250YWluZXIpfHxzLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0LmVuZENvbnRhaW5lcil8fHMuR3VhcmQuaXNBdHRyTm9kZSh0LmVuZENvbnRhaW5lcikpdGhyb3cgbmV3IGEuSW52YWxpZE5vZGVUeXBlRXJyb3I7cmV0dXJuIHIuX3N0YXJ0PVt0LnN0YXJ0Q29udGFpbmVyLHQuc3RhcnRPZmZzZXRdLHIuX2VuZD1bdC5lbmRDb250YWluZXIsdC5lbmRPZmZzZXRdLHJ9cmV0dXJuIGkodCxlKSx0fShvLkFic3RyYWN0UmFuZ2VJbXBsKTt0LlN0YXRpY1JhbmdlSW1wbD11fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyNzIpO3QuRE9NUGFyc2VyPW4uRE9NUGFyc2VySW1wbH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMCksaT1yKDI3Myksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLnBhcnNlRnJvbVN0cmluZz1mdW5jdGlvbihlLHQpe2lmKFwidGV4dC9odG1sXCI9PT10KXRocm93IG5ldyBFcnJvcihcIkhUTUwgcGFyc2VyIG5vdCBpbXBsZW1lbnRlZC5cIik7dHJ5e3JldHVybihyPShuZXcgaS5YTUxQYXJzZXJJbXBsKS5wYXJzZShlKSkuX2NvbnRlbnRUeXBlPXQscn1jYXRjaChlKXt2YXIgcixvPVwiaHR0cDovL3d3dy5tb3ppbGxhLm9yZy9uZXdsYXlvdXQveG1sL3BhcnNlcmVycm9yLnhtbFwiLGE9KHI9bi5jcmVhdGVfeG1sRG9jdW1lbnQoKSkuY3JlYXRlRWxlbWVudE5TKG8sXCJwYXJzZXJlcnJvclwiKSxzPXIuY3JlYXRlRWxlbWVudE5TKG8sXCJlcnJvclwiKTtyZXR1cm4gcy5zZXRBdHRyaWJ1dGUoXCJtZXNzYWdlXCIsZS5tZXNzYWdlKSxhLmFwcGVuZENoaWxkKHMpLHIuYXBwZW5kQ2hpbGQoYSkscn19LGV9KCk7dC5ET01QYXJzZXJJbXBsPW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0saT10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDE4MCksYT1yKDExMSkscz1yKDcpLHU9cigwKSxsPXIoNjkpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlKXtmb3IodmFyIHQscixjLGgscD1uZXcgby5YTUxTdHJpbmdMZXhlcihlLHtza2lwV2hpdGVzcGFjZU9ubHlUZXh0OiEwfSksZj11LmNyZWF0ZV9kb2N1bWVudCgpLGQ9ZixtPXAubmV4dFRva2VuKCk7bS50eXBlIT09YS5Ub2tlblR5cGUuRU9GOyl7c3dpdGNoKG0udHlwZSl7Y2FzZSBhLlRva2VuVHlwZS5EZWNsYXJhdGlvbjp2YXIgeT1tO2lmKFwiMS4wXCIhPT15LnZlcnNpb24pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB4bWwgdmVyc2lvbjogXCIreS52ZXJzaW9uKTticmVhaztjYXNlIGEuVG9rZW5UeXBlLkRvY1R5cGU6dmFyIHY9bTtpZighdS54bWxfaXNQdWJpZENoYXIodi5wdWJJZCkpdGhyb3cgbmV3IEVycm9yKFwiRG9jVHlwZSBwdWJsaWMgaWRlbnRpZmllciBkb2VzIG5vdCBtYXRjaCBQdWJpZENoYXIgY29uc3RydWN0LlwiKTtpZighdS54bWxfaXNMZWdhbENoYXIodi5zeXNJZCl8fC0xIT09di5zeXNJZC5pbmRleE9mKCdcIicpJiYtMSE9PXYuc3lzSWQuaW5kZXhPZihcIidcIikpdGhyb3cgbmV3IEVycm9yKFwiRG9jVHlwZSBzeXN0ZW0gaWRlbnRpZmllciBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuXCIpO2QuYXBwZW5kQ2hpbGQoZi5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudFR5cGUodi5uYW1lLHYucHViSWQsdi5zeXNJZCkpO2JyZWFrO2Nhc2UgYS5Ub2tlblR5cGUuQ0RBVEE6dmFyIF89bTtpZighdS54bWxfaXNMZWdhbENoYXIoXy5kYXRhKXx8LTEhPT1fLmRhdGEuaW5kZXhPZihcIl1dPlwiKSl0aHJvdyBuZXcgRXJyb3IoXCJDREFUQSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuXCIpO2QuYXBwZW5kQ2hpbGQoZi5jcmVhdGVDREFUQVNlY3Rpb24oXy5kYXRhKSk7YnJlYWs7Y2FzZSBhLlRva2VuVHlwZS5Db21tZW50OnZhciBnPW07aWYoIXUueG1sX2lzTGVnYWxDaGFyKGcuZGF0YSl8fC0xIT09Zy5kYXRhLmluZGV4T2YoXCItLVwiKXx8Zy5kYXRhLmVuZHNXaXRoKFwiLVwiKSl0aHJvdyBuZXcgRXJyb3IoXCJDb21tZW50IGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLlwiKTtkLmFwcGVuZENoaWxkKGYuY3JlYXRlQ29tbWVudChnLmRhdGEpKTticmVhaztjYXNlIGEuVG9rZW5UeXBlLlBJOnZhciBiPW07aWYoLTEhPT1iLnRhcmdldC5pbmRleE9mKFwiOlwiKXx8L154bWwkL2kudGVzdChiLnRhcmdldCkpdGhyb3cgbmV3IEVycm9yKFwiUHJvY2Vzc2luZyBpbnN0cnVjdGlvbiB0YXJnZXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLlwiKTtpZighdS54bWxfaXNMZWdhbENoYXIoYi5kYXRhKXx8LTEhPT1iLmRhdGEuaW5kZXhPZihcIj8+XCIpKXRocm93IG5ldyBFcnJvcihcIlByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuXCIpO2QuYXBwZW5kQ2hpbGQoZi5jcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oYi50YXJnZXQsYi5kYXRhKSk7YnJlYWs7Y2FzZSBhLlRva2VuVHlwZS5UZXh0OnZhciB4PW07aWYoIXUueG1sX2lzTGVnYWxDaGFyKHguZGF0YSkpdGhyb3cgbmV3IEVycm9yKFwiVGV4dCBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy5cIik7ZC5hcHBlbmRDaGlsZChmLmNyZWF0ZVRleHROb2RlKHRoaXMuX2RlY29kZVRleHQoeC5kYXRhKSkpO2JyZWFrO2Nhc2UgYS5Ub2tlblR5cGUuRWxlbWVudDp2YXIgdz1tLEU9bih1Lm5hbWVzcGFjZV9leHRyYWN0UU5hbWUody5uYW1lKSwyKSxEPUVbMF0sUz1FWzFdO2lmKC0xIT09Uy5pbmRleE9mKFwiOlwiKXx8IXUueG1sX2lzTmFtZShTKSl0aHJvdyBuZXcgRXJyb3IoXCJOb2RlIGxvY2FsIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLlwiKTtpZihcInhtbG5zXCI9PT1EKXRocm93IG5ldyBFcnJvcihcIkFuIGVsZW1lbnQgY2Fubm90IGhhdmUgdGhlICd4bWxucycgcHJlZml4LlwiKTt2YXIgQz1kLmxvb2t1cE5hbWVzcGFjZVVSSShEKSxBPXt9O3RyeXtmb3IodmFyIE49KHQ9dm9pZCAwLGkody5hdHRyaWJ1dGVzKSksVD1OLm5leHQoKTshVC5kb25lO1Q9Ti5uZXh0KCkpe3ZhciBPPW4oVC52YWx1ZSwyKSxGPU9bMF0saz1PWzFdO2lmKFwieG1sbnNcIj09PUYpQz1rO2Vsc2V7dmFyIFA9bih1Lm5hbWVzcGFjZV9leHRyYWN0UU5hbWUoRiksMiksST1QWzBdLEw9UFsxXTtcInhtbG5zXCI9PT1JJiYoTD09PUQmJihDPWspLEFbTF09ayl9fX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtUJiYhVC5kb25lJiYocj1OLnJldHVybikmJnIuY2FsbChOKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19dmFyIE09bnVsbCE9PUM/Zi5jcmVhdGVFbGVtZW50TlMoQyx3Lm5hbWUpOmYuY3JlYXRlRWxlbWVudCh3Lm5hbWUpO2QuYXBwZW5kQ2hpbGQoTSk7dmFyIEI9bmV3IGwuTG9jYWxOYW1lU2V0O3RyeXtmb3IodmFyIGo9KGM9dm9pZCAwLGkody5hdHRyaWJ1dGVzKSksUj1qLm5leHQoKTshUi5kb25lO1I9ai5uZXh0KCkpe3ZhciB6PW4oUi52YWx1ZSwyKSxVPShGPXpbMF0saz16WzFdLG4odS5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKEYpLDIpKSxHPShJPVVbMF0sTD1VWzFdLG51bGwpO2lmKFwieG1sbnNcIj09PUl8fG51bGw9PT1JJiZcInhtbG5zXCI9PT1MP0c9cy5uYW1lc3BhY2UuWE1MTlM6bnVsbCE9PShHPU0ubG9va3VwTmFtZXNwYWNlVVJJKEkpKSYmTS5pc0RlZmF1bHROYW1lc3BhY2UoRyk/Rz1udWxsOm51bGw9PT1HJiZudWxsIT09SSYmKEc9QVtJXXx8bnVsbCksQi5oYXMoRyxMKSl0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IGNvbnRhaW5zIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzLlwiKTtpZihCLnNldChHLEwpLEc9PT1zLm5hbWVzcGFjZS5YTUxOUyYmaz09PXMubmFtZXNwYWNlLlhNTE5TKXRocm93IG5ldyBFcnJvcihcIlhNTE5TIG5hbWVzcGFjZSBpcyByZXNlcnZlZC5cIik7aWYoLTEhPT1MLmluZGV4T2YoXCI6XCIpfHwhdS54bWxfaXNOYW1lKEwpKXRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy5cIik7aWYoXCJ4bWxuc1wiPT09SSYmXCJcIj09PWspdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgWE1MIG5hbWVzcGFjZSBpcyBub3QgYWxsb3dlZC5cIik7bnVsbCE9PUc/TS5zZXRBdHRyaWJ1dGVOUyhHLEYsdGhpcy5fZGVjb2RlQXR0cmlidXRlVmFsdWUoaykpOk0uc2V0QXR0cmlidXRlKEYsdGhpcy5fZGVjb2RlQXR0cmlidXRlVmFsdWUoaykpfX1jYXRjaChlKXtjPXtlcnJvcjplfX1maW5hbGx5e3RyeXtSJiYhUi5kb25lJiYoaD1qLnJldHVybikmJmguY2FsbChqKX1maW5hbGx5e2lmKGMpdGhyb3cgYy5lcnJvcn19dy5zZWxmQ2xvc2luZ3x8KGQ9TSk7YnJlYWs7Y2FzZSBhLlRva2VuVHlwZS5DbG9zaW5nVGFnOmlmKG0ubmFtZSE9PWQubm9kZU5hbWUpdGhyb3cgbmV3IEVycm9yKFwiQ2xvc2luZyB0YWcgbmFtZSBkb2VzIG5vdCBtYXRjaCBvcGVuaW5nIHRhZyBuYW1lLlwiKTtkLl9wYXJlbnQmJihkPWQuX3BhcmVudCl9bT1wLm5leHRUb2tlbigpfXJldHVybiBmfSxlLnByb3RvdHlwZS5fZGVjb2RlVGV4dD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9lOmUucmVwbGFjZSgvJmx0Oy9nLFwiPFwiKS5yZXBsYWNlKC8mZ3Q7L2csXCI+XCIpLnJlcGxhY2UoLyZhbXA7L2csXCImXCIpfSxlLnByb3RvdHlwZS5fZGVjb2RlQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/ZTplLnJlcGxhY2UoLyZsdDsvZyxcIjxcIikucmVwbGFjZSgvJmd0Oy9nLFwiPlwiKS5yZXBsYWNlKC8mYW1wOy9nLFwiJlwiKX0sZX0oKTt0LlhNTFBhcnNlckltcGw9Y30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMjc1KTt0LlhNTFNlcmlhbGl6ZXI9bi5YTUxTZXJpYWxpemVySW1wbH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoMiksbz1yKDY5KSxhPXIoOTUpLHM9cig5KSx1PXIoNyksbD1yKDApLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZS5zZXJpYWxpemVUb1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5feG1sU2VyaWFsaXphdGlvbihlLCExKX0sZS5wcm90b3R5cGUuX3htbFNlcmlhbGl6YXRpb249ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT1lLl9ub2RlRG9jdW1lbnR8fGUuX25vZGVEb2N1bWVudC5faGFzTmFtZXNwYWNlcyl7dmFyIHI9bmV3IGEuTmFtZXNwYWNlUHJlZml4TWFwO3Iuc2V0KFwieG1sXCIsdS5uYW1lc3BhY2UuWE1MKTt0cnl7cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZU5vZGVOUyhlLG51bGwscix7dmFsdWU6MX0sdCl9Y2F0Y2goZSl7dGhyb3cgbmV3IHMuSW52YWxpZFN0YXRlRXJyb3J9fWVsc2UgdHJ5e3JldHVybiB0aGlzLl9zZXJpYWxpemVOb2RlKGUsdCl9Y2F0Y2goZSl7dGhyb3cgbmV3IHMuSW52YWxpZFN0YXRlRXJyb3J9fSxlLnByb3RvdHlwZS5fc2VyaWFsaXplTm9kZU5TPWZ1bmN0aW9uKGUsdCxyLG4sbyl7c3dpdGNoKGUubm9kZVR5cGUpe2Nhc2UgaS5Ob2RlVHlwZS5FbGVtZW50OnJldHVybiB0aGlzLl9zZXJpYWxpemVFbGVtZW50TlMoZSx0LHIsbixvKTtjYXNlIGkuTm9kZVR5cGUuRG9jdW1lbnQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZURvY3VtZW50TlMoZSx0LHIsbixvKTtjYXNlIGkuTm9kZVR5cGUuQ29tbWVudDpyZXR1cm4gdGhpcy5fc2VyaWFsaXplQ29tbWVudChlLG8pO2Nhc2UgaS5Ob2RlVHlwZS5UZXh0OnJldHVybiB0aGlzLl9zZXJpYWxpemVUZXh0KGUsbyk7Y2FzZSBpLk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZURvY3VtZW50RnJhZ21lbnROUyhlLHQscixuLG8pO2Nhc2UgaS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGU6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZURvY3VtZW50VHlwZShlLG8pO2Nhc2UgaS5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihlLG8pO2Nhc2UgaS5Ob2RlVHlwZS5DRGF0YTpyZXR1cm4gdGhpcy5fc2VyaWFsaXplQ0RhdGEoZSxvKTtkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIlVua25vd24gbm9kZSB0eXBlOiBcIitlLm5vZGVUeXBlKX19LGUucHJvdG90eXBlLl9zZXJpYWxpemVOb2RlPWZ1bmN0aW9uKGUsdCl7c3dpdGNoKGUubm9kZVR5cGUpe2Nhc2UgaS5Ob2RlVHlwZS5FbGVtZW50OnJldHVybiB0aGlzLl9zZXJpYWxpemVFbGVtZW50KGUsdCk7Y2FzZSBpLk5vZGVUeXBlLkRvY3VtZW50OnJldHVybiB0aGlzLl9zZXJpYWxpemVEb2N1bWVudChlLHQpO2Nhc2UgaS5Ob2RlVHlwZS5Db21tZW50OnJldHVybiB0aGlzLl9zZXJpYWxpemVDb21tZW50KGUsdCk7Y2FzZSBpLk5vZGVUeXBlLlRleHQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZVRleHQoZSx0KTtjYXNlIGkuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudDpyZXR1cm4gdGhpcy5fc2VyaWFsaXplRG9jdW1lbnRGcmFnbWVudChlLHQpO2Nhc2UgaS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGU6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZURvY3VtZW50VHlwZShlLHQpO2Nhc2UgaS5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihlLHQpO2Nhc2UgaS5Ob2RlVHlwZS5DRGF0YTpyZXR1cm4gdGhpcy5fc2VyaWFsaXplQ0RhdGEoZSx0KTtkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIlVua25vd24gbm9kZSB0eXBlOiBcIitlLm5vZGVUeXBlKX19LGUucHJvdG90eXBlLl9zZXJpYWxpemVFbGVtZW50TlM9ZnVuY3Rpb24odCxyLGksbyxhKXt2YXIgcyxjO2lmKGEmJigtMSE9PXQubG9jYWxOYW1lLmluZGV4T2YoXCI6XCIpfHwhbC54bWxfaXNOYW1lKHQubG9jYWxOYW1lKSkpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt2YXIgaD1cIjxcIixwPVwiXCIsZj0hMSxkPSExLG09aS5jb3B5KCkseT17fSx2PXRoaXMuX3JlY29yZE5hbWVzcGFjZUluZm9ybWF0aW9uKHQsbSx5KSxfPXIsZz10Lm5hbWVzcGFjZVVSSTtpZihfPT09ZyludWxsIT09diYmKGQ9ITApLGgrPXA9Zz09PXUubmFtZXNwYWNlLlhNTD9cInhtbDpcIit0LmxvY2FsTmFtZTp0LmxvY2FsTmFtZTtlbHNle3ZhciBiPXQucHJlZml4LHg9bnVsbDtpZihudWxsPT09YiYmZz09PXZ8fCh4PW0uZ2V0KGIsZykpLFwieG1sbnNcIj09PWIpe2lmKGEpdGhyb3cgbmV3IEVycm9yKFwiQW4gZWxlbWVudCBjYW5ub3QgaGF2ZSB0aGUgJ3htbG5zJyBwcmVmaXggKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7eD1ifW51bGwhPT14PyhwPXgrXCI6XCIrdC5sb2NhbE5hbWUsbnVsbCE9PXYmJnYhPT11Lm5hbWVzcGFjZS5YTUwmJihfPXZ8fG51bGwpLGgrPXApOm51bGwhPT1iPyhiIGluIHkmJihiPXRoaXMuX2dlbmVyYXRlUHJlZml4KGcsbSxvKSksbS5zZXQoYixnKSxoKz1wKz1iK1wiOlwiK3QubG9jYWxOYW1lLGgrPVwiIHhtbG5zOlwiK2IrJz1cIicrdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUoZyxhKSsnXCInLG51bGwhPT12JiYoXz12fHxudWxsKSk6bnVsbD09PXZ8fG51bGwhPT12JiZ2IT09Zz8oZD0hMCxfPWcsaCs9cCs9dC5sb2NhbE5hbWUsaCs9JyB4bWxucz1cIicrdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUoZyxhKSsnXCInKTooXz1nLGgrPXArPXQubG9jYWxOYW1lKX1oKz10aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVzTlModCxtLG8seSxkLGEpO3ZhciB3PWc9PT11Lm5hbWVzcGFjZS5IVE1MO2lmKHcmJjA9PT10LmNoaWxkTm9kZXMubGVuZ3RoJiZlLl9Wb2lkRWxlbWVudE5hbWVzLmhhcyh0LmxvY2FsTmFtZSk/KGgrPVwiIC9cIixmPSEwKTp3fHwwIT09dC5jaGlsZE5vZGVzLmxlbmd0aHx8KGgrPVwiL1wiLGY9ITApLGgrPVwiPlwiLGYpcmV0dXJuIGg7aWYodyYmXCJ0ZW1wbGF0ZVwiPT09dC5sb2NhbE5hbWUpO2Vsc2UgdHJ5e2Zvcih2YXIgRT1uKHQuX2NoaWxkcmVufHx0LmNoaWxkTm9kZXMpLEQ9RS5uZXh0KCk7IUQuZG9uZTtEPUUubmV4dCgpKXt2YXIgUz1ELnZhbHVlO2grPXRoaXMuX3NlcmlhbGl6ZU5vZGVOUyhTLF8sbSxvLGEpfX1jYXRjaChlKXtzPXtlcnJvcjplfX1maW5hbGx5e3RyeXtEJiYhRC5kb25lJiYoYz1FLnJldHVybikmJmMuY2FsbChFKX1maW5hbGx5e2lmKHMpdGhyb3cgcy5lcnJvcn19cmV0dXJuIGgrPVwiPC9cIitwK1wiPlwifSxlLnByb3RvdHlwZS5fc2VyaWFsaXplRG9jdW1lbnROUz1mdW5jdGlvbihlLHQscixpLG8pe3ZhciBhLHM7aWYobyYmbnVsbD09PWUuZG9jdW1lbnRFbGVtZW50KXRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZG9jdW1lbnQgZWxlbWVudCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt2YXIgdT1cIlwiO3RyeXtmb3IodmFyIGw9bihlLl9jaGlsZHJlbnx8ZS5jaGlsZE5vZGVzKSxjPWwubmV4dCgpOyFjLmRvbmU7Yz1sLm5leHQoKSl7dmFyIGg9Yy52YWx1ZTt1Kz10aGlzLl9zZXJpYWxpemVOb2RlTlMoaCx0LHIsaSxvKX19Y2F0Y2goZSl7YT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YyYmIWMuZG9uZSYmKHM9bC5yZXR1cm4pJiZzLmNhbGwobCl9ZmluYWxseXtpZihhKXRocm93IGEuZXJyb3J9fXJldHVybiB1fSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQ29tbWVudD1mdW5jdGlvbihlLHQpe2lmKHQmJighbC54bWxfaXNMZWdhbENoYXIoZS5kYXRhKXx8LTEhPT1lLmRhdGEuaW5kZXhPZihcIi0tXCIpfHxlLmRhdGEuZW5kc1dpdGgoXCItXCIpKSl0aHJvdyBuZXcgRXJyb3IoXCJDb21tZW50IGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3JldHVyblwiXFx4M2MhLS1cIitlLmRhdGErXCItLVxceDNlXCJ9LGUucHJvdG90eXBlLl9zZXJpYWxpemVUZXh0PWZ1bmN0aW9uKGUsdCl7aWYodCYmIWwueG1sX2lzTGVnYWxDaGFyKGUuZGF0YSkpdGhyb3cgbmV3IEVycm9yKFwiVGV4dCBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtmb3IodmFyIHI9XCJcIixuPTA7bjxlLmRhdGEubGVuZ3RoO24rKyl7dmFyIGk9ZS5kYXRhW25dO3IrPVwiJlwiPT09aT9cIiZhbXA7XCI6XCI8XCI9PT1pP1wiJmx0O1wiOlwiPlwiPT09aT9cIiZndDtcIjppfXJldHVybiByfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplRG9jdW1lbnRGcmFnbWVudE5TPWZ1bmN0aW9uKGUsdCxyLGksbyl7dmFyIGEscyx1PVwiXCI7dHJ5e2Zvcih2YXIgbD1uKGUuX2NoaWxkcmVufHxlLmNoaWxkTm9kZXMpLGM9bC5uZXh0KCk7IWMuZG9uZTtjPWwubmV4dCgpKXt2YXIgaD1jLnZhbHVlO3UrPXRoaXMuX3NlcmlhbGl6ZU5vZGVOUyhoLHQscixpLG8pfX1jYXRjaChlKXthPXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYocz1sLnJldHVybikmJnMuY2FsbChsKX1maW5hbGx5e2lmKGEpdGhyb3cgYS5lcnJvcn19cmV0dXJuIHV9LGUucHJvdG90eXBlLl9zZXJpYWxpemVEb2N1bWVudFR5cGU9ZnVuY3Rpb24oZSx0KXtpZih0JiYhbC54bWxfaXNQdWJpZENoYXIoZS5wdWJsaWNJZCkpdGhyb3cgbmV3IEVycm9yKFwiRG9jVHlwZSBwdWJsaWMgaWRlbnRpZmllciBkb2VzIG5vdCBtYXRjaCBQdWJpZENoYXIgY29uc3RydWN0ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2lmKHQmJighbC54bWxfaXNMZWdhbENoYXIoZS5zeXN0ZW1JZCl8fC0xIT09ZS5zeXN0ZW1JZC5pbmRleE9mKCdcIicpJiYtMSE9PWUuc3lzdGVtSWQuaW5kZXhPZihcIidcIikpKXRocm93IG5ldyBFcnJvcihcIkRvY1R5cGUgc3lzdGVtIGlkZW50aWZpZXIgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3JldHVybiBlLnB1YmxpY0lkJiZlLnN5c3RlbUlkP1wiPCFET0NUWVBFIFwiK2UubmFtZSsnIFBVQkxJQyBcIicrZS5wdWJsaWNJZCsnXCIgXCInK2Uuc3lzdGVtSWQrJ1wiPic6ZS5wdWJsaWNJZD9cIjwhRE9DVFlQRSBcIitlLm5hbWUrJyBQVUJMSUMgXCInK2UucHVibGljSWQrJ1wiPic6ZS5zeXN0ZW1JZD9cIjwhRE9DVFlQRSBcIitlLm5hbWUrJyBTWVNURU0gXCInK2Uuc3lzdGVtSWQrJ1wiPic6XCI8IURPQ1RZUEUgXCIrZS5uYW1lK1wiPlwifSxlLnByb3RvdHlwZS5fc2VyaWFsaXplUHJvY2Vzc2luZ0luc3RydWN0aW9uPWZ1bmN0aW9uKGUsdCl7aWYodCYmKC0xIT09ZS50YXJnZXQuaW5kZXhPZihcIjpcIil8fC9eeG1sJC9pLnRlc3QoZS50YXJnZXQpKSl0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNzaW5nIGluc3RydWN0aW9uIHRhcmdldCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7aWYodCYmKCFsLnhtbF9pc0xlZ2FsQ2hhcihlLmRhdGEpfHwtMSE9PWUuZGF0YS5pbmRleE9mKFwiPz5cIikpKXRocm93IG5ldyBFcnJvcihcIlByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7cmV0dXJuXCI8P1wiKyhcIlwiPT09ZS5kYXRhP2UudGFyZ2V0OmUudGFyZ2V0K1wiIFwiK2UuZGF0YSkrXCI/PlwifSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQ0RhdGE9ZnVuY3Rpb24oZSx0KXtpZih0JiYtMSE9PWUuZGF0YS5pbmRleE9mKFwiXV0+XCIpKXRocm93IG5ldyBFcnJvcihcIkNEQVRBIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtyZXR1cm5cIjwhW0NEQVRBW1wiK2UuZGF0YStcIl1dPlwifSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlc05TPWZ1bmN0aW9uKGUsdCxyLGksYSxzKXt2YXIgYyxoLHA9XCJcIixmPXM/bmV3IG8uTG9jYWxOYW1lU2V0OnZvaWQgMDt0cnl7Zm9yKHZhciBkPW4oZS5hdHRyaWJ1dGVzKSxtPWQubmV4dCgpOyFtLmRvbmU7bT1kLm5leHQoKSl7dmFyIHk9bS52YWx1ZTtpZihhfHxzfHxudWxsIT09eS5uYW1lc3BhY2VVUkkpe2lmKHMmJmYmJmYuaGFzKHkubmFtZXNwYWNlVVJJLHkubG9jYWxOYW1lKSl0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IGNvbnRhaW5zIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3MmJmYmJmYuc2V0KHkubmFtZXNwYWNlVVJJLHkubG9jYWxOYW1lKTt2YXIgdj15Lm5hbWVzcGFjZVVSSSxfPW51bGw7aWYobnVsbCE9PXYpaWYoXz10LmdldCh5LnByZWZpeCx2KSx2PT09dS5uYW1lc3BhY2UuWE1MTlMpe2lmKHkudmFsdWU9PT11Lm5hbWVzcGFjZS5YTUx8fG51bGw9PT15LnByZWZpeCYmYXx8bnVsbCE9PXkucHJlZml4JiYoISh5LmxvY2FsTmFtZSBpbiBpKXx8aVt5LmxvY2FsTmFtZV0hPT15LnZhbHVlKSYmdC5oYXMoeS5sb2NhbE5hbWUseS52YWx1ZSkpY29udGludWU7aWYocyYmeS52YWx1ZT09PXUubmFtZXNwYWNlLlhNTE5TKXRocm93IG5ldyBFcnJvcihcIlhNTE5TIG5hbWVzcGFjZSBpcyByZXNlcnZlZCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtpZihzJiZcIlwiPT09eS52YWx1ZSl0aHJvdyBuZXcgRXJyb3IoXCJOYW1lc3BhY2UgcHJlZml4IGRlY2xhcmF0aW9ucyBjYW5ub3QgYmUgdXNlZCB0byB1bmRlY2xhcmUgYSBuYW1lc3BhY2UgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7XCJ4bWxuc1wiPT09eS5wcmVmaXgmJihfPVwieG1sbnNcIil9ZWxzZSBudWxsPT09XyYmKHArPVwiIHhtbG5zOlwiKyhfPW51bGw9PT15LnByZWZpeHx8dC5oYXNQcmVmaXgoeS5wcmVmaXgpJiYhdC5oYXMoeS5wcmVmaXgsdik/dGhpcy5fZ2VuZXJhdGVQcmVmaXgodix0LHIpOnkucHJlZml4KSsnPVwiJyt0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh2LHMpKydcIicpO2lmKHArPVwiIFwiLG51bGwhPT1fJiYocCs9XytcIjpcIikscyYmKC0xIT09eS5sb2NhbE5hbWUuaW5kZXhPZihcIjpcIil8fCFsLnhtbF9pc05hbWUoeS5sb2NhbE5hbWUpfHxcInhtbG5zXCI9PT15LmxvY2FsTmFtZSYmbnVsbD09PXYpKXRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtwKz15LmxvY2FsTmFtZSsnPVwiJyt0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh5LnZhbHVlLHMpKydcIid9ZWxzZSBwKz1cIiBcIit5LmxvY2FsTmFtZSsnPVwiJyt0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh5LnZhbHVlLHMpKydcIid9fWNhdGNoKGUpe2M9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e20mJiFtLmRvbmUmJihoPWQucmV0dXJuKSYmaC5jYWxsKGQpfWZpbmFsbHl7aWYoYyl0aHJvdyBjLmVycm9yfX1yZXR1cm4gcH0sZS5wcm90b3R5cGUuX3JlY29yZE5hbWVzcGFjZUluZm9ybWF0aW9uPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLGE9bnVsbDt0cnl7Zm9yKHZhciBzPW4oZS5hdHRyaWJ1dGVzKSxsPXMubmV4dCgpOyFsLmRvbmU7bD1zLm5leHQoKSl7dmFyIGM9bC52YWx1ZSxoPWMubmFtZXNwYWNlVVJJLHA9Yy5wcmVmaXg7aWYoaD09PXUubmFtZXNwYWNlLlhNTE5TKXtpZihudWxsPT09cCl7YT1jLnZhbHVlO2NvbnRpbnVlfXZhciBmPWMubG9jYWxOYW1lLGQ9Yy52YWx1ZTtpZihkPT09dS5uYW1lc3BhY2UuWE1MKWNvbnRpbnVlO2lmKFwiXCI9PT1kJiYoZD1udWxsKSx0LmhhcyhmLGQpKWNvbnRpbnVlO3Quc2V0KGYsZCkscltmXT1kfHxcIlwifX19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKG89cy5yZXR1cm4pJiZvLmNhbGwocyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxlLnByb3RvdHlwZS5fZ2VuZXJhdGVQcmVmaXg9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPVwibnNcIityLnZhbHVlO3JldHVybiByLnZhbHVlKyssdC5zZXQobixlKSxufSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oZSx0KXtpZih0JiZudWxsIT09ZSYmIWwueG1sX2lzTGVnYWxDaGFyKGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVycyBpbiBhdHRyaWJ1dGUgdmFsdWUuXCIpO2lmKG51bGw9PT1lKXJldHVyblwiXCI7Zm9yKHZhciByPVwiXCIsbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lW25dO3IrPSdcIic9PT1pP1wiJnF1b3Q7XCI6XCImXCI9PT1pP1wiJmFtcDtcIjpcIjxcIj09PWk/XCImbHQ7XCI6XCI+XCI9PT1pP1wiJmd0O1wiOml9cmV0dXJuIHJ9LGUucHJvdG90eXBlLl9zZXJpYWxpemVFbGVtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtpZih0JiYoLTEhPT1lLmxvY2FsTmFtZS5pbmRleE9mKFwiOlwiKXx8IWwueG1sX2lzTmFtZShlLmxvY2FsTmFtZSkpKXRocm93IG5ldyBFcnJvcihcIk5vZGUgbG9jYWwgbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dmFyIG89ITEsYT1lLmxvY2FsTmFtZSxzPVwiPFwiK2E7aWYocys9dGhpcy5fc2VyaWFsaXplQXR0cmlidXRlcyhlLHQpLDA9PT1lLl9jaGlsZHJlbi5zaXplJiYocys9XCIvXCIsbz0hMCkscys9XCI+XCIsbylyZXR1cm4gczt0cnl7Zm9yKHZhciB1PW4oZS5fY2hpbGRyZW4pLGM9dS5uZXh0KCk7IWMuZG9uZTtjPXUubmV4dCgpKXt2YXIgaD1jLnZhbHVlO3MrPXRoaXMuX3NlcmlhbGl6ZU5vZGUoaCx0KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YyYmIWMuZG9uZSYmKGk9dS5yZXR1cm4pJiZpLmNhbGwodSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBzKz1cIjwvXCIrYStcIj5cIn0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZURvY3VtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtpZih0JiZudWxsPT09ZS5kb2N1bWVudEVsZW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBkb2N1bWVudCBlbGVtZW50ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3ZhciBvPVwiXCI7dHJ5e2Zvcih2YXIgYT1uKGUuX2NoaWxkcmVuKSxzPWEubmV4dCgpOyFzLmRvbmU7cz1hLm5leHQoKSl7dmFyIHU9cy52YWx1ZTtvKz10aGlzLl9zZXJpYWxpemVOb2RlKHUsdCl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3MmJiFzLmRvbmUmJihpPWEucmV0dXJuKSYmaS5jYWxsKGEpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4gb30sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZURvY3VtZW50RnJhZ21lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixpLG89XCJcIjt0cnl7Zm9yKHZhciBhPW4oZS5fY2hpbGRyZW4pLHM9YS5uZXh0KCk7IXMuZG9uZTtzPWEubmV4dCgpKXt2YXIgdT1zLnZhbHVlO28rPXRoaXMuX3NlcmlhbGl6ZU5vZGUodSx0KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKGk9YS5yZXR1cm4pJiZpLmNhbGwoYSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBvfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlcz1mdW5jdGlvbihlLHQpe3ZhciByLGksbz1cIlwiLGE9dD97fTp2b2lkIDA7dHJ5e2Zvcih2YXIgcz1uKGUuYXR0cmlidXRlcyksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBjPXUudmFsdWU7aWYodCYmYSYmYy5sb2NhbE5hbWUgaW4gYSl0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IGNvbnRhaW5zIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2lmKHQmJmEmJihhW2MubG9jYWxOYW1lXT0hMCksdCYmKC0xIT09Yy5sb2NhbE5hbWUuaW5kZXhPZihcIjpcIil8fCFsLnhtbF9pc05hbWUoYy5sb2NhbE5hbWUpKSl0aHJvdyBuZXcgRXJyb3IoXCJBdHRyaWJ1dGUgbG9jYWwgbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7bys9XCIgXCIrYy5sb2NhbE5hbWUrJz1cIicrdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUoYy52YWx1ZSx0KSsnXCInfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXt1JiYhdS5kb25lJiYoaT1zLnJldHVybikmJmkuY2FsbChzKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIG99LGUuX1ZvaWRFbGVtZW50TmFtZXM9bmV3IFNldChbXCJhcmVhXCIsXCJiYXNlXCIsXCJiYXNlZm9udFwiLFwiYmdzb3VuZFwiLFwiYnJcIixcImNvbFwiLFwiZW1iZWRcIixcImZyYW1lXCIsXCJoclwiLFwiaW1nXCIsXCJpbnB1dFwiLFwia2V5Z2VuXCIsXCJsaW5rXCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwicGFyYW1cIixcInNvdXJjZVwiLFwidHJhY2tcIixcIndiclwiXSksZX0oKTt0LlhNTFNlcmlhbGl6ZXJJbXBsPWN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDI3Nyk7dC5YTUxSZWFkZXI9bi5YTUxSZWFkZXI7dmFyIGk9cigxMTIpO3QuT2JqZWN0UmVhZGVyPWkuT2JqZWN0UmVhZGVyO3ZhciBvPXIoMjgwKTt0LkpTT05SZWFkZXI9by5KU09OUmVhZGVyO3ZhciBhPXIoMjgxKTt0LllBTUxSZWFkZXI9YS5ZQU1MUmVhZGVyfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigzMSkscigzMikscigzMykscigxOSkscig2NSkscigyMCkscigyMikscigyMyk7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksbz10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0sYT10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDE4MCksdT1yKDExMSksbD1yKDcpLGM9cigwKSxoPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuX3BhcnNlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLG4saSxoLHA9bmV3IHMuWE1MU3RyaW5nTGV4ZXIodCx7c2tpcFdoaXRlc3BhY2VPbmx5VGV4dDohMH0pLGY9ZSxkPWUsbT1wLm5leHRUb2tlbigpO20udHlwZSE9PXUuVG9rZW5UeXBlLkVPRjspe3N3aXRjaChtLnR5cGUpe2Nhc2UgdS5Ub2tlblR5cGUuRGVjbGFyYXRpb246dmFyIHk9bSx2PXRoaXMuc2FuaXRpemUoeS52ZXJzaW9uKTtpZihcIjEuMFwiIT09dil0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHhtbCB2ZXJzaW9uOiBcIit2KTt2YXIgXz17dmVyc2lvbjp2fTt5LmVuY29kaW5nJiYoXy5lbmNvZGluZz10aGlzLnNhbml0aXplKHkuZW5jb2RpbmcpKSx5LnN0YW5kYWxvbmUmJihfLnN0YW5kYWxvbmU9XCJ5ZXNcIj09PXRoaXMuc2FuaXRpemUoeS5zdGFuZGFsb25lKSksZC5zZXQoXyk7YnJlYWs7Y2FzZSB1LlRva2VuVHlwZS5Eb2NUeXBlOnZhciBnPW07ZD10aGlzLmRvY1R5cGUoZCx0aGlzLnNhbml0aXplKGcubmFtZSksdGhpcy5zYW5pdGl6ZShnLnB1YklkKSx0aGlzLnNhbml0aXplKGcuc3lzSWQpKXx8ZDticmVhaztjYXNlIHUuVG9rZW5UeXBlLkNEQVRBOnZhciBiPW07ZD10aGlzLmNkYXRhKGQsdGhpcy5zYW5pdGl6ZShiLmRhdGEpKXx8ZDticmVhaztjYXNlIHUuVG9rZW5UeXBlLkNvbW1lbnQ6dmFyIHg9bTtkPXRoaXMuY29tbWVudChkLHRoaXMuc2FuaXRpemUoeC5kYXRhKSl8fGQ7YnJlYWs7Y2FzZSB1LlRva2VuVHlwZS5QSTp2YXIgdz1tO2Q9dGhpcy5pbnN0cnVjdGlvbihkLHRoaXMuc2FuaXRpemUody50YXJnZXQpLHRoaXMuc2FuaXRpemUody5kYXRhKSl8fGQ7YnJlYWs7Y2FzZSB1LlRva2VuVHlwZS5UZXh0OnZhciBFPW07ZD10aGlzLnRleHQoZCx0aGlzLl9kZWNvZGVUZXh0KHRoaXMuc2FuaXRpemUoRS5kYXRhKSkpfHxkO2JyZWFrO2Nhc2UgdS5Ub2tlblR5cGUuRWxlbWVudDp2YXIgRD1tLFM9dGhpcy5zYW5pdGl6ZShELm5hbWUpLEM9byhjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUoUyksMSlbMF0sQT1kLm5vZGUubG9va3VwTmFtZXNwYWNlVVJJKEMpLE49e307dHJ5e2Zvcih2YXIgVD0ocj12b2lkIDAsYShELmF0dHJpYnV0ZXMpKSxPPVQubmV4dCgpOyFPLmRvbmU7Tz1ULm5leHQoKSl7dmFyIEY9byhPLnZhbHVlLDIpLGs9RlswXSxQPUZbMV07aWYoaz10aGlzLnNhbml0aXplKGspLFA9dGhpcy5zYW5pdGl6ZShQKSxcInhtbG5zXCI9PT1rKUE9UDtlbHNle3ZhciBJPW8oYy5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKGspLDIpLEw9SVswXSxNPUlbMV07XCJ4bWxuc1wiPT09TCYmKE09PT1DJiYoQT1QKSxOW01dPVApfX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7TyYmIU8uZG9uZSYmKG49VC5yZXR1cm4pJiZuLmNhbGwoVCl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXZhciBCPW51bGwhPT1BP3RoaXMuZWxlbWVudChkLEEsUyk6dGhpcy5lbGVtZW50KGQsdm9pZCAwLFMpO2lmKHZvaWQgMD09PUIpYnJlYWs7ZC5ub2RlPT09ZS5ub2RlJiYoZj1CKTt0cnl7Zm9yKHZhciBqPShpPXZvaWQgMCxhKEQuYXR0cmlidXRlcykpLFI9ai5uZXh0KCk7IVIuZG9uZTtSPWoubmV4dCgpKXt2YXIgej1vKFIudmFsdWUsMik7az16WzBdLFA9elsxXTtrPXRoaXMuc2FuaXRpemUoayksUD10aGlzLnNhbml0aXplKFApO3ZhciBVPW8oYy5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKGspLDIpLEc9KEw9VVswXSxNPVVbMV0sbnVsbCk7XCJ4bWxuc1wiPT09THx8bnVsbD09PUwmJlwieG1sbnNcIj09PU0/Rz1sLm5hbWVzcGFjZS5YTUxOUzpudWxsIT09KEc9Qi5ub2RlLmxvb2t1cE5hbWVzcGFjZVVSSShMKSkmJkIubm9kZS5pc0RlZmF1bHROYW1lc3BhY2UoRyk/Rz1udWxsOm51bGw9PT1HJiZudWxsIT09TCYmKEc9TltMXXx8bnVsbCksbnVsbCE9PUc/dGhpcy5hdHRyaWJ1dGUoQixHLGssdGhpcy5fZGVjb2RlQXR0cmlidXRlVmFsdWUoUCkpOnRoaXMuYXR0cmlidXRlKEIsdm9pZCAwLGssdGhpcy5fZGVjb2RlQXR0cmlidXRlVmFsdWUoUCkpfX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtSJiYhUi5kb25lJiYoaD1qLnJldHVybikmJmguY2FsbChqKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19RC5zZWxmQ2xvc2luZ3x8KGQ9Qik7YnJlYWs7Y2FzZSB1LlRva2VuVHlwZS5DbG9zaW5nVGFnOmQubm9kZS5wYXJlbnROb2RlJiYoZD1kLnVwKCkpfW09cC5uZXh0VG9rZW4oKX1yZXR1cm4gZn0sdH0ocig3NSkuQmFzZVJlYWRlcik7dC5YTUxSZWFkZXI9aH0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNCksaT1yKDI3OSk7bih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6T2JqZWN0LmFzc2lnbiE9PWl9LHthc3NpZ246aX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxNiksaT1yKDgpLG89cig2MSksYT1yKDg1KSxzPXIoNzkpLHU9cigyNyksbD1yKDQxKSxjPU9iamVjdC5hc3NpZ24saD1PYmplY3QuZGVmaW5lUHJvcGVydHk7ZS5leHBvcnRzPSFjfHxpKChmdW5jdGlvbigpe2lmKG4mJjEhPT1jKHtiOjF9LGMoaCh7fSxcImFcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtoKHRoaXMsXCJiXCIse3ZhbHVlOjMsZW51bWVyYWJsZTohMX0pfX0pLHtiOjJ9KSkuYilyZXR1cm4hMDt2YXIgZT17fSx0PXt9LHI9U3ltYm9sKCk7cmV0dXJuIGVbcl09NyxcImFiY2RlZmdoaWprbG1ub3BxcnN0XCIuc3BsaXQoXCJcIikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dFtlXT1lfSkpLDchPWMoe30sZSlbcl18fFwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIiE9byhjKHt9LHQpKS5qb2luKFwiXCIpfSkpP2Z1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXUoZSksaT1hcmd1bWVudHMubGVuZ3RoLGM9MSxoPWEuZixwPXMuZjtpPmM7KWZvcih2YXIgZixkPWwoYXJndW1lbnRzW2MrK10pLG09aD9vKGQpLmNvbmNhdChoKGQpKTpvKGQpLHk9bS5sZW5ndGgsdj0wO3k+djspZj1tW3YrK10sbiYmIXAuY2FsbChkLGYpfHwocltmXT1kW2ZdKTtyZXR1cm4gcn06Y30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMTEyKSxhPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuX3BhcnNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBvLk9iamVjdFJlYWRlcih0aGlzLl9idWlsZGVyT3B0aW9ucykucGFyc2UoZSxKU09OLnBhcnNlKHQpKX0sdH0ocig3NSkuQmFzZVJlYWRlcik7dC5KU09OUmVhZGVyPWF9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDExMiksYT1yKDc1KSxzPXIoMjgyKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gbnVsbCE9PWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuX3BhcnNlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9cy5zYWZlTG9hZCh0KTtpZih2b2lkIDA9PT1yKXRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBwYXJzZSBZQU1MIGRvY3VtZW50LlwiKTtyZXR1cm4gbmV3IG8uT2JqZWN0UmVhZGVyKHRoaXMuX2J1aWxkZXJPcHRpb25zKS5wYXJzZShlLHIpfSx0fShhLkJhc2VSZWFkZXIpO3QuWUFNTFJlYWRlcj11fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyODMpO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyODQpLGk9cigzMDMpO2Z1bmN0aW9uIG8oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiRnVuY3Rpb24gXCIrZStcIiBpcyBkZXByZWNhdGVkIGFuZCBjYW5ub3QgYmUgdXNlZC5cIil9fWUuZXhwb3J0cy5UeXBlPXIoMTApLGUuZXhwb3J0cy5TY2hlbWE9cigzOSksZS5leHBvcnRzLkZBSUxTQUZFX1NDSEVNQT1yKDExMyksZS5leHBvcnRzLkpTT05fU0NIRU1BPXIoMTgyKSxlLmV4cG9ydHMuQ09SRV9TQ0hFTUE9cigxODEpLGUuZXhwb3J0cy5ERUZBVUxUX1NBRkVfU0NIRU1BPXIoNTQpLGUuZXhwb3J0cy5ERUZBVUxUX0ZVTExfU0NIRU1BPXIoNzYpLGUuZXhwb3J0cy5sb2FkPW4ubG9hZCxlLmV4cG9ydHMubG9hZEFsbD1uLmxvYWRBbGwsZS5leHBvcnRzLnNhZmVMb2FkPW4uc2FmZUxvYWQsZS5leHBvcnRzLnNhZmVMb2FkQWxsPW4uc2FmZUxvYWRBbGwsZS5leHBvcnRzLmR1bXA9aS5kdW1wLGUuZXhwb3J0cy5zYWZlRHVtcD1pLnNhZmVEdW1wLGUuZXhwb3J0cy5ZQU1MRXhjZXB0aW9uPXIoNTMpLGUuZXhwb3J0cy5NSU5JTUFMX1NDSEVNQT1yKDExMyksZS5leHBvcnRzLlNBRkVfU0NIRU1BPXIoNTQpLGUuZXhwb3J0cy5ERUZBVUxUX1NDSEVNQT1yKDc2KSxlLmV4cG9ydHMuc2Nhbj1vKFwic2NhblwiKSxlLmV4cG9ydHMucGFyc2U9byhcInBhcnNlXCIpLGUuZXhwb3J0cy5jb21wb3NlPW8oXCJjb21wb3NlXCIpLGUuZXhwb3J0cy5hZGRDb25zdHJ1Y3Rvcj1vKFwiYWRkQ29uc3RydWN0b3JcIil9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM4KSxpPXIoNTMpLG89cigyODUpLGE9cig1NCkscz1yKDc2KSx1PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbD0vW1xceDAwLVxceDA4XFx4MEJcXHgwQ1xceDBFLVxceDFGXFx4N0YtXFx4ODRcXHg4Ni1cXHg5RlxcdUZGRkVcXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS8sYz0vW1xceDg1XFx1MjAyOFxcdTIwMjldLyxoPS9bLFxcW1xcXVxce1xcfV0vLHA9L14oPzohfCEhfCFbYS16XFwtXSshKSQvaSxmPS9eKD86IXxbXixcXFtcXF1cXHtcXH1dKSg/OiVbMC05YS1mXXsyfXxbMC05YS16XFwtIztcXC9cXD86QCY9XFwrXFwkLF9cXC4hflxcKidcXChcXClcXFtcXF1dKSokL2k7ZnVuY3Rpb24gZChlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIG0oZSl7cmV0dXJuIDEwPT09ZXx8MTM9PT1lfWZ1bmN0aW9uIHkoZSl7cmV0dXJuIDk9PT1lfHwzMj09PWV9ZnVuY3Rpb24gdihlKXtyZXR1cm4gOT09PWV8fDMyPT09ZXx8MTA9PT1lfHwxMz09PWV9ZnVuY3Rpb24gXyhlKXtyZXR1cm4gNDQ9PT1lfHw5MT09PWV8fDkzPT09ZXx8MTIzPT09ZXx8MTI1PT09ZX1mdW5jdGlvbiBnKGUpe3ZhciB0O3JldHVybiA0ODw9ZSYmZTw9NTc/ZS00ODo5Nzw9KHQ9MzJ8ZSkmJnQ8PTEwMj90LTk3KzEwOi0xfWZ1bmN0aW9uIGIoZSl7cmV0dXJuIDQ4PT09ZT9cIlxcMFwiOjk3PT09ZT9cIlx1MDAwN1wiOjk4PT09ZT9cIlxcYlwiOjExNj09PWV8fDk9PT1lP1wiXFx0XCI6MTEwPT09ZT9cIlxcblwiOjExOD09PWU/XCJcXHZcIjoxMDI9PT1lP1wiXFxmXCI6MTE0PT09ZT9cIlxcclwiOjEwMT09PWU/XCJcdTAwMUJcIjozMj09PWU/XCIgXCI6MzQ9PT1lPydcIic6NDc9PT1lP1wiL1wiOjkyPT09ZT9cIlxcXFxcIjo3OD09PWU/XCJcdTAwODVcIjo5NT09PWU/XCJcdTAwQTBcIjo3Nj09PWU/XCJcXHUyMDI4XCI6ODA9PT1lP1wiXFx1MjAyOVwiOlwiXCJ9ZnVuY3Rpb24geChlKXtyZXR1cm4gZTw9NjU1MzU/U3RyaW5nLmZyb21DaGFyQ29kZShlKTpTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2KyhlLTY1NTM2Pj4xMCksNTYzMjArKGUtNjU1MzYmMTAyMykpfWZvcih2YXIgdz1uZXcgQXJyYXkoMjU2KSxFPW5ldyBBcnJheSgyNTYpLEQ9MDtEPDI1NjtEKyspd1tEXT1iKEQpPzE6MCxFW0RdPWIoRCk7ZnVuY3Rpb24gUyhlLHQpe3RoaXMuaW5wdXQ9ZSx0aGlzLmZpbGVuYW1lPXQuZmlsZW5hbWV8fG51bGwsdGhpcy5zY2hlbWE9dC5zY2hlbWF8fHMsdGhpcy5vbldhcm5pbmc9dC5vbldhcm5pbmd8fG51bGwsdGhpcy5sZWdhY3k9dC5sZWdhY3l8fCExLHRoaXMuanNvbj10Lmpzb258fCExLHRoaXMubGlzdGVuZXI9dC5saXN0ZW5lcnx8bnVsbCx0aGlzLmltcGxpY2l0VHlwZXM9dGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdCx0aGlzLnR5cGVNYXA9dGhpcy5zY2hlbWEuY29tcGlsZWRUeXBlTWFwLHRoaXMubGVuZ3RoPWUubGVuZ3RoLHRoaXMucG9zaXRpb249MCx0aGlzLmxpbmU9MCx0aGlzLmxpbmVTdGFydD0wLHRoaXMubGluZUluZGVudD0wLHRoaXMuZG9jdW1lbnRzPVtdfWZ1bmN0aW9uIEMoZSx0KXtyZXR1cm4gbmV3IGkodCxuZXcgbyhlLmZpbGVuYW1lLGUuaW5wdXQsZS5wb3NpdGlvbixlLmxpbmUsZS5wb3NpdGlvbi1lLmxpbmVTdGFydCkpfWZ1bmN0aW9uIEEoZSx0KXt0aHJvdyBDKGUsdCl9ZnVuY3Rpb24gTihlLHQpe2Uub25XYXJuaW5nJiZlLm9uV2FybmluZy5jYWxsKG51bGwsQyhlLHQpKX12YXIgVD17WUFNTDpmdW5jdGlvbihlLHQscil7dmFyIG4saSxvO251bGwhPT1lLnZlcnNpb24mJkEoZSxcImR1cGxpY2F0aW9uIG9mICVZQU1MIGRpcmVjdGl2ZVwiKSwxIT09ci5sZW5ndGgmJkEoZSxcIllBTUwgZGlyZWN0aXZlIGFjY2VwdHMgZXhhY3RseSBvbmUgYXJndW1lbnRcIiksbnVsbD09PShuPS9eKFswLTldKylcXC4oWzAtOV0rKSQvLmV4ZWMoclswXSkpJiZBKGUsXCJpbGwtZm9ybWVkIGFyZ3VtZW50IG9mIHRoZSBZQU1MIGRpcmVjdGl2ZVwiKSxpPXBhcnNlSW50KG5bMV0sMTApLG89cGFyc2VJbnQoblsyXSwxMCksMSE9PWkmJkEoZSxcInVuYWNjZXB0YWJsZSBZQU1MIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50XCIpLGUudmVyc2lvbj1yWzBdLGUuY2hlY2tMaW5lQnJlYWtzPW88MiwxIT09byYmMiE9PW8mJk4oZSxcInVuc3VwcG9ydGVkIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnRcIil9LFRBRzpmdW5jdGlvbihlLHQscil7dmFyIG4saTsyIT09ci5sZW5ndGgmJkEoZSxcIlRBRyBkaXJlY3RpdmUgYWNjZXB0cyBleGFjdGx5IHR3byBhcmd1bWVudHNcIiksbj1yWzBdLGk9clsxXSxwLnRlc3Qobil8fEEoZSxcImlsbC1mb3JtZWQgdGFnIGhhbmRsZSAoZmlyc3QgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlXCIpLHUuY2FsbChlLnRhZ01hcCxuKSYmQShlLCd0aGVyZSBpcyBhIHByZXZpb3VzbHkgZGVjbGFyZWQgc3VmZml4IGZvciBcIicrbisnXCIgdGFnIGhhbmRsZScpLGYudGVzdChpKXx8QShlLFwiaWxsLWZvcm1lZCB0YWcgcHJlZml4IChzZWNvbmQgYXJndW1lbnQpIG9mIHRoZSBUQUcgZGlyZWN0aXZlXCIpLGUudGFnTWFwW25dPWl9fTtmdW5jdGlvbiBPKGUsdCxyLG4pe3ZhciBpLG8sYSxzO2lmKHQ8cil7aWYocz1lLmlucHV0LnNsaWNlKHQsciksbilmb3IoaT0wLG89cy5sZW5ndGg7aTxvO2krPTEpOT09PShhPXMuY2hhckNvZGVBdChpKSl8fDMyPD1hJiZhPD0xMTE0MTExfHxBKGUsXCJleHBlY3RlZCB2YWxpZCBKU09OIGNoYXJhY3RlclwiKTtlbHNlIGwudGVzdChzKSYmQShlLFwidGhlIHN0cmVhbSBjb250YWlucyBub24tcHJpbnRhYmxlIGNoYXJhY3RlcnNcIik7ZS5yZXN1bHQrPXN9fWZ1bmN0aW9uIEYoZSx0LHIsaSl7dmFyIG8sYSxzLGw7Zm9yKG4uaXNPYmplY3Qocil8fEEoZSxcImNhbm5vdCBtZXJnZSBtYXBwaW5nczsgdGhlIHByb3ZpZGVkIHNvdXJjZSBvYmplY3QgaXMgdW5hY2NlcHRhYmxlXCIpLHM9MCxsPShvPU9iamVjdC5rZXlzKHIpKS5sZW5ndGg7czxsO3MrPTEpYT1vW3NdLHUuY2FsbCh0LGEpfHwodFthXT1yW2FdLGlbYV09ITApfWZ1bmN0aW9uIGsoZSx0LHIsbixpLG8sYSxzKXt2YXIgbCxjO2lmKEFycmF5LmlzQXJyYXkoaSkpZm9yKGw9MCxjPShpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGkpKS5sZW5ndGg7bDxjO2wrPTEpQXJyYXkuaXNBcnJheShpW2xdKSYmQShlLFwibmVzdGVkIGFycmF5cyBhcmUgbm90IHN1cHBvcnRlZCBpbnNpZGUga2V5c1wiKSxcIm9iamVjdFwiPT10eXBlb2YgaSYmXCJbb2JqZWN0IE9iamVjdF1cIj09PWQoaVtsXSkmJihpW2xdPVwiW29iamVjdCBPYmplY3RdXCIpO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBpJiZcIltvYmplY3QgT2JqZWN0XVwiPT09ZChpKSYmKGk9XCJbb2JqZWN0IE9iamVjdF1cIiksaT1TdHJpbmcoaSksbnVsbD09PXQmJih0PXt9KSxcInRhZzp5YW1sLm9yZywyMDAyOm1lcmdlXCI9PT1uKWlmKEFycmF5LmlzQXJyYXkobykpZm9yKGw9MCxjPW8ubGVuZ3RoO2w8YztsKz0xKUYoZSx0LG9bbF0scik7ZWxzZSBGKGUsdCxvLHIpO2Vsc2UgZS5qc29ufHx1LmNhbGwocixpKXx8IXUuY2FsbCh0LGkpfHwoZS5saW5lPWF8fGUubGluZSxlLnBvc2l0aW9uPXN8fGUucG9zaXRpb24sQShlLFwiZHVwbGljYXRlZCBtYXBwaW5nIGtleVwiKSksdFtpXT1vLGRlbGV0ZSByW2ldO3JldHVybiB0fWZ1bmN0aW9uIFAoZSl7dmFyIHQ7MTA9PT0odD1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpP2UucG9zaXRpb24rKzoxMz09PXQ/KGUucG9zaXRpb24rKywxMD09PWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSYmZS5wb3NpdGlvbisrKTpBKGUsXCJhIGxpbmUgYnJlYWsgaXMgZXhwZWN0ZWRcIiksZS5saW5lKz0xLGUubGluZVN0YXJ0PWUucG9zaXRpb259ZnVuY3Rpb24gSShlLHQscil7Zm9yKHZhciBuPTAsaT1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbik7MCE9PWk7KXtmb3IoO3koaSk7KWk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7aWYodCYmMzU9PT1pKWRve2k9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbil9d2hpbGUoMTAhPT1pJiYxMyE9PWkmJjAhPT1pKTtpZighbShpKSlicmVhaztmb3IoUChlKSxpPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSxuKyssZS5saW5lSW5kZW50PTA7MzI9PT1pOyllLmxpbmVJbmRlbnQrKyxpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pfXJldHVybi0xIT09ciYmMCE9PW4mJmUubGluZUluZGVudDxyJiZOKGUsXCJkZWZpY2llbnQgaW5kZW50YXRpb25cIiksbn1mdW5jdGlvbiBMKGUpe3ZhciB0LHI9ZS5wb3NpdGlvbjtyZXR1cm4hKDQ1IT09KHQ9ZS5pbnB1dC5jaGFyQ29kZUF0KHIpKSYmNDYhPT10fHx0IT09ZS5pbnB1dC5jaGFyQ29kZUF0KHIrMSl8fHQhPT1lLmlucHV0LmNoYXJDb2RlQXQocisyKXx8KHIrPTMsMCE9PSh0PWUuaW5wdXQuY2hhckNvZGVBdChyKSkmJiF2KHQpKSl9ZnVuY3Rpb24gTShlLHQpezE9PT10P2UucmVzdWx0Kz1cIiBcIjp0PjEmJihlLnJlc3VsdCs9bi5yZXBlYXQoXCJcXG5cIix0LTEpKX1mdW5jdGlvbiBCKGUsdCl7dmFyIHIsbixpPWUudGFnLG89ZS5hbmNob3IsYT1bXSxzPSExO2ZvcihudWxsIT09ZS5hbmNob3ImJihlLmFuY2hvck1hcFtlLmFuY2hvcl09YSksbj1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbik7MCE9PW4mJjQ1PT09biYmdihlLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbisxKSk7KWlmKHM9ITAsZS5wb3NpdGlvbisrLEkoZSwhMCwtMSkmJmUubGluZUluZGVudDw9dClhLnB1c2gobnVsbCksbj1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbik7ZWxzZSBpZihyPWUubGluZSx6KGUsdCwzLCExLCEwKSxhLnB1c2goZS5yZXN1bHQpLEkoZSwhMCwtMSksbj1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbiksKGUubGluZT09PXJ8fGUubGluZUluZGVudD50KSYmMCE9PW4pQShlLFwiYmFkIGluZGVudGF0aW9uIG9mIGEgc2VxdWVuY2UgZW50cnlcIik7ZWxzZSBpZihlLmxpbmVJbmRlbnQ8dClicmVhaztyZXR1cm4hIXMmJihlLnRhZz1pLGUuYW5jaG9yPW8sZS5raW5kPVwic2VxdWVuY2VcIixlLnJlc3VsdD1hLCEwKX1mdW5jdGlvbiBqKGUpe3ZhciB0LHIsbixpLG89ITEsYT0hMTtpZigzMyE9PShpPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSkpcmV0dXJuITE7aWYobnVsbCE9PWUudGFnJiZBKGUsXCJkdXBsaWNhdGlvbiBvZiBhIHRhZyBwcm9wZXJ0eVwiKSw2MD09PShpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKT8obz0hMCxpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKTozMz09PWk/KGE9ITAscj1cIiEhXCIsaT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKSk6cj1cIiFcIix0PWUucG9zaXRpb24sbyl7ZG97aT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKX13aGlsZSgwIT09aSYmNjIhPT1pKTtlLnBvc2l0aW9uPGUubGVuZ3RoPyhuPWUuaW5wdXQuc2xpY2UodCxlLnBvc2l0aW9uKSxpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKTpBKGUsXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHZlcmJhdGltIHRhZ1wiKX1lbHNle2Zvcig7MCE9PWkmJiF2KGkpOykzMz09PWkmJihhP0EoZSxcInRhZyBzdWZmaXggY2Fubm90IGNvbnRhaW4gZXhjbGFtYXRpb24gbWFya3NcIik6KHI9ZS5pbnB1dC5zbGljZSh0LTEsZS5wb3NpdGlvbisxKSxwLnRlc3Qocil8fEEoZSxcIm5hbWVkIHRhZyBoYW5kbGUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzXCIpLGE9ITAsdD1lLnBvc2l0aW9uKzEpKSxpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pO249ZS5pbnB1dC5zbGljZSh0LGUucG9zaXRpb24pLGgudGVzdChuKSYmQShlLFwidGFnIHN1ZmZpeCBjYW5ub3QgY29udGFpbiBmbG93IGluZGljYXRvciBjaGFyYWN0ZXJzXCIpfXJldHVybiBuJiYhZi50ZXN0KG4pJiZBKGUsXCJ0YWcgbmFtZSBjYW5ub3QgY29udGFpbiBzdWNoIGNoYXJhY3RlcnM6IFwiK24pLG8/ZS50YWc9bjp1LmNhbGwoZS50YWdNYXAscik/ZS50YWc9ZS50YWdNYXBbcl0rbjpcIiFcIj09PXI/ZS50YWc9XCIhXCIrbjpcIiEhXCI9PT1yP2UudGFnPVwidGFnOnlhbWwub3JnLDIwMDI6XCIrbjpBKGUsJ3VuZGVjbGFyZWQgdGFnIGhhbmRsZSBcIicrcisnXCInKSwhMH1mdW5jdGlvbiBSKGUpe3ZhciB0LHI7aWYoMzghPT0ocj1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpKXJldHVybiExO2ZvcihudWxsIT09ZS5hbmNob3ImJkEoZSxcImR1cGxpY2F0aW9uIG9mIGFuIGFuY2hvciBwcm9wZXJ0eVwiKSxyPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pLHQ9ZS5wb3NpdGlvbjswIT09ciYmIXYocikmJiFfKHIpOylyPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pO3JldHVybiBlLnBvc2l0aW9uPT09dCYmQShlLFwibmFtZSBvZiBhbiBhbmNob3Igbm9kZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGNoYXJhY3RlclwiKSxlLmFuY2hvcj1lLmlucHV0LnNsaWNlKHQsZS5wb3NpdGlvbiksITB9ZnVuY3Rpb24geihlLHQscixpLG8pe3ZhciBhLHMsbCxjLGgscCxmLGQsYj0xLEQ9ITEsUz0hMTtpZihudWxsIT09ZS5saXN0ZW5lciYmZS5saXN0ZW5lcihcIm9wZW5cIixlKSxlLnRhZz1udWxsLGUuYW5jaG9yPW51bGwsZS5raW5kPW51bGwsZS5yZXN1bHQ9bnVsbCxhPXM9bD00PT09cnx8Mz09PXIsaSYmSShlLCEwLC0xKSYmKEQ9ITAsZS5saW5lSW5kZW50PnQ/Yj0xOmUubGluZUluZGVudD09PXQ/Yj0wOmUubGluZUluZGVudDx0JiYoYj0tMSkpLDE9PT1iKWZvcig7aihlKXx8UihlKTspSShlLCEwLC0xKT8oRD0hMCxsPWEsZS5saW5lSW5kZW50PnQ/Yj0xOmUubGluZUluZGVudD09PXQ/Yj0wOmUubGluZUluZGVudDx0JiYoYj0tMSkpOmw9ITE7aWYobCYmKGw9RHx8byksMSE9PWImJjQhPT1yfHwoZj0xPT09cnx8Mj09PXI/dDp0KzEsZD1lLnBvc2l0aW9uLWUubGluZVN0YXJ0LDE9PT1iP2wmJihCKGUsZCl8fGZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG8sYSxzLHU9ZS50YWcsbD1lLmFuY2hvcixjPXt9LGg9e30scD1udWxsLGY9bnVsbCxkPW51bGwsbT0hMSxfPSExO2ZvcihudWxsIT09ZS5hbmNob3ImJihlLmFuY2hvck1hcFtlLmFuY2hvcl09Yykscz1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbik7MCE9PXM7KXtpZihuPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKzEpLG89ZS5saW5lLGE9ZS5wb3NpdGlvbiw2MyE9PXMmJjU4IT09c3x8IXYobikpe2lmKCF6KGUsciwyLCExLCEwKSlicmVhaztpZihlLmxpbmU9PT1vKXtmb3Iocz1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbik7eShzKTspcz1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKTtpZig1OD09PXMpdihzPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKXx8QShlLFwiYSB3aGl0ZXNwYWNlIGNoYXJhY3RlciBpcyBleHBlY3RlZCBhZnRlciB0aGUga2V5LXZhbHVlIHNlcGFyYXRvciB3aXRoaW4gYSBibG9jayBtYXBwaW5nXCIpLG0mJihrKGUsYyxoLHAsZixudWxsKSxwPWY9ZD1udWxsKSxfPSEwLG09ITEsaT0hMSxwPWUudGFnLGY9ZS5yZXN1bHQ7ZWxzZXtpZighXylyZXR1cm4gZS50YWc9dSxlLmFuY2hvcj1sLCEwO0EoZSxcImNhbiBub3QgcmVhZCBhbiBpbXBsaWNpdCBtYXBwaW5nIHBhaXI7IGEgY29sb24gaXMgbWlzc2VkXCIpfX1lbHNle2lmKCFfKXJldHVybiBlLnRhZz11LGUuYW5jaG9yPWwsITA7QShlLFwiY2FuIG5vdCByZWFkIGEgYmxvY2sgbWFwcGluZyBlbnRyeTsgYSBtdWx0aWxpbmUga2V5IG1heSBub3QgYmUgYW4gaW1wbGljaXQga2V5XCIpfX1lbHNlIDYzPT09cz8obSYmKGsoZSxjLGgscCxmLG51bGwpLHA9Zj1kPW51bGwpLF89ITAsbT0hMCxpPSEwKTptPyhtPSExLGk9ITApOkEoZSxcImluY29tcGxldGUgZXhwbGljaXQgbWFwcGluZyBwYWlyOyBhIGtleSBub2RlIGlzIG1pc3NlZDsgb3IgZm9sbG93ZWQgYnkgYSBub24tdGFidWxhdGVkIGVtcHR5IGxpbmVcIiksZS5wb3NpdGlvbis9MSxzPW47aWYoKGUubGluZT09PW98fGUubGluZUluZGVudD50KSYmKHooZSx0LDQsITAsaSkmJihtP2Y9ZS5yZXN1bHQ6ZD1lLnJlc3VsdCksbXx8KGsoZSxjLGgscCxmLGQsbyxhKSxwPWY9ZD1udWxsKSxJKGUsITAsLTEpLHM9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKSxlLmxpbmVJbmRlbnQ+dCYmMCE9PXMpQShlLFwiYmFkIGluZGVudGF0aW9uIG9mIGEgbWFwcGluZyBlbnRyeVwiKTtlbHNlIGlmKGUubGluZUluZGVudDx0KWJyZWFrfXJldHVybiBtJiZrKGUsYyxoLHAsZixudWxsKSxfJiYoZS50YWc9dSxlLmFuY2hvcj1sLGUua2luZD1cIm1hcHBpbmdcIixlLnJlc3VsdD1jKSxffShlLGQsZikpfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLGEscyx1LGwsYyxoLHA9ITAsZj1lLnRhZyxkPWUuYW5jaG9yLG09e307aWYoOTE9PT0oaD1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpKWk9OTMscz0hMSxuPVtdO2Vsc2V7aWYoMTIzIT09aClyZXR1cm4hMTtpPTEyNSxzPSEwLG49e319Zm9yKG51bGwhPT1lLmFuY2hvciYmKGUuYW5jaG9yTWFwW2UuYW5jaG9yXT1uKSxoPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pOzAhPT1oOyl7aWYoSShlLCEwLHQpLChoPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSk9PT1pKXJldHVybiBlLnBvc2l0aW9uKyssZS50YWc9ZixlLmFuY2hvcj1kLGUua2luZD1zP1wibWFwcGluZ1wiOlwic2VxdWVuY2VcIixlLnJlc3VsdD1uLCEwO3B8fEEoZSxcIm1pc3NlZCBjb21tYSBiZXR3ZWVuIGZsb3cgY29sbGVjdGlvbiBlbnRyaWVzXCIpLGM9bnVsbCxvPWE9ITEsNjM9PT1oJiZ2KGUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKzEpKSYmKG89YT0hMCxlLnBvc2l0aW9uKyssSShlLCEwLHQpKSxyPWUubGluZSx6KGUsdCwxLCExLCEwKSxsPWUudGFnLHU9ZS5yZXN1bHQsSShlLCEwLHQpLGg9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pLCFhJiZlLmxpbmUhPT1yfHw1OCE9PWh8fChvPSEwLGg9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbiksSShlLCEwLHQpLHooZSx0LDEsITEsITApLGM9ZS5yZXN1bHQpLHM/ayhlLG4sbSxsLHUsYyk6bz9uLnB1c2goayhlLG51bGwsbSxsLHUsYykpOm4ucHVzaCh1KSxJKGUsITAsdCksNDQ9PT0oaD1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpPyhwPSEwLGg9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpOnA9ITF9QShlLFwidW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBmbG93IGNvbGxlY3Rpb25cIil9KGUsZik/Uz0hMDoocyYmZnVuY3Rpb24oZSx0KXt2YXIgcixpLG8sYSxzLHU9MSxsPSExLGM9ITEsaD10LHA9MCxmPSExO2lmKDEyND09PShhPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSkpaT0hMTtlbHNle2lmKDYyIT09YSlyZXR1cm4hMTtpPSEwfWZvcihlLmtpbmQ9XCJzY2FsYXJcIixlLnJlc3VsdD1cIlwiOzAhPT1hOylpZig0Mz09PShhPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKXx8NDU9PT1hKTE9PT11P3U9NDM9PT1hPzM6MjpBKGUsXCJyZXBlYXQgb2YgYSBjaG9tcGluZyBtb2RlIGlkZW50aWZpZXJcIik7ZWxzZXtpZighKChvPTQ4PD0ocz1hKSYmczw9NTc/cy00ODotMSk+PTApKWJyZWFrOzA9PT1vP0EoZSxcImJhZCBleHBsaWNpdCBpbmRlbnRhdGlvbiB3aWR0aCBvZiBhIGJsb2NrIHNjYWxhcjsgaXQgY2Fubm90IGJlIGxlc3MgdGhhbiBvbmVcIik6Yz9BKGUsXCJyZXBlYXQgb2YgYW4gaW5kZW50YXRpb24gd2lkdGggaWRlbnRpZmllclwiKTooaD10K28tMSxjPSEwKX1pZih5KGEpKXtkb3thPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pfXdoaWxlKHkoYSkpO2lmKDM1PT09YSlkb3thPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pfXdoaWxlKCFtKGEpJiYwIT09YSl9Zm9yKDswIT09YTspe2ZvcihQKGUpLGUubGluZUluZGVudD0wLGE9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pOyghY3x8ZS5saW5lSW5kZW50PGgpJiYzMj09PWE7KWUubGluZUluZGVudCsrLGE9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7aWYoIWMmJmUubGluZUluZGVudD5oJiYoaD1lLmxpbmVJbmRlbnQpLG0oYSkpcCsrO2Vsc2V7aWYoZS5saW5lSW5kZW50PGgpezM9PT11P2UucmVzdWx0Kz1uLnJlcGVhdChcIlxcblwiLGw/MStwOnApOjE9PT11JiZsJiYoZS5yZXN1bHQrPVwiXFxuXCIpO2JyZWFrfWZvcihpP3koYSk/KGY9ITAsZS5yZXN1bHQrPW4ucmVwZWF0KFwiXFxuXCIsbD8xK3A6cCkpOmY/KGY9ITEsZS5yZXN1bHQrPW4ucmVwZWF0KFwiXFxuXCIscCsxKSk6MD09PXA/bCYmKGUucmVzdWx0Kz1cIiBcIik6ZS5yZXN1bHQrPW4ucmVwZWF0KFwiXFxuXCIscCk6ZS5yZXN1bHQrPW4ucmVwZWF0KFwiXFxuXCIsbD8xK3A6cCksbD0hMCxjPSEwLHA9MCxyPWUucG9zaXRpb247IW0oYSkmJjAhPT1hOylhPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pO08oZSxyLGUucG9zaXRpb24sITEpfX1yZXR1cm4hMH0oZSxmKXx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGk7aWYoMzkhPT0ocj1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpKXJldHVybiExO2ZvcihlLmtpbmQ9XCJzY2FsYXJcIixlLnJlc3VsdD1cIlwiLGUucG9zaXRpb24rKyxuPWk9ZS5wb3NpdGlvbjswIT09KHI9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKTspaWYoMzk9PT1yKXtpZihPKGUsbixlLnBvc2l0aW9uLCEwKSwzOSE9PShyPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKSlyZXR1cm4hMDtuPWUucG9zaXRpb24sZS5wb3NpdGlvbisrLGk9ZS5wb3NpdGlvbn1lbHNlIG0ocik/KE8oZSxuLGksITApLE0oZSxJKGUsITEsdCkpLG49aT1lLnBvc2l0aW9uKTplLnBvc2l0aW9uPT09ZS5saW5lU3RhcnQmJkwoZSk/QShlLFwidW5leHBlY3RlZCBlbmQgb2YgdGhlIGRvY3VtZW50IHdpdGhpbiBhIHNpbmdsZSBxdW90ZWQgc2NhbGFyXCIpOihlLnBvc2l0aW9uKyssaT1lLnBvc2l0aW9uKTtBKGUsXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHNpbmdsZSBxdW90ZWQgc2NhbGFyXCIpfShlLGYpfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLGEscyx1O2lmKDM0IT09KHM9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKSlyZXR1cm4hMTtmb3IoZS5raW5kPVwic2NhbGFyXCIsZS5yZXN1bHQ9XCJcIixlLnBvc2l0aW9uKysscj1uPWUucG9zaXRpb247MCE9PShzPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSk7KXtpZigzND09PXMpcmV0dXJuIE8oZSxyLGUucG9zaXRpb24sITApLGUucG9zaXRpb24rKywhMDtpZig5Mj09PXMpe2lmKE8oZSxyLGUucG9zaXRpb24sITApLG0ocz1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKSkpSShlLCExLHQpO2Vsc2UgaWYoczwyNTYmJndbc10pZS5yZXN1bHQrPUVbc10sZS5wb3NpdGlvbisrO2Vsc2UgaWYoKGE9MTIwPT09KHU9cyk/MjoxMTc9PT11PzQ6ODU9PT11Pzg6MCk+MCl7Zm9yKGk9YSxvPTA7aT4wO2ktLSkoYT1nKHM9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpKT49MD9vPShvPDw0KSthOkEoZSxcImV4cGVjdGVkIGhleGFkZWNpbWFsIGNoYXJhY3RlclwiKTtlLnJlc3VsdCs9eChvKSxlLnBvc2l0aW9uKyt9ZWxzZSBBKGUsXCJ1bmtub3duIGVzY2FwZSBzZXF1ZW5jZVwiKTtyPW49ZS5wb3NpdGlvbn1lbHNlIG0ocyk/KE8oZSxyLG4sITApLE0oZSxJKGUsITEsdCkpLHI9bj1lLnBvc2l0aW9uKTplLnBvc2l0aW9uPT09ZS5saW5lU3RhcnQmJkwoZSk/QShlLFwidW5leHBlY3RlZCBlbmQgb2YgdGhlIGRvY3VtZW50IHdpdGhpbiBhIGRvdWJsZSBxdW90ZWQgc2NhbGFyXCIpOihlLnBvc2l0aW9uKyssbj1lLnBvc2l0aW9uKX1BKGUsXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIGRvdWJsZSBxdW90ZWQgc2NhbGFyXCIpfShlLGYpP1M9ITA6IWZ1bmN0aW9uKGUpe3ZhciB0LHIsbjtpZig0MiE9PShuPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSkpcmV0dXJuITE7Zm9yKG49ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbiksdD1lLnBvc2l0aW9uOzAhPT1uJiYhdihuKSYmIV8obik7KW49ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7cmV0dXJuIGUucG9zaXRpb249PT10JiZBKGUsXCJuYW1lIG9mIGFuIGFsaWFzIG5vZGUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXJcIikscj1lLmlucHV0LnNsaWNlKHQsZS5wb3NpdGlvbiksZS5hbmNob3JNYXAuaGFzT3duUHJvcGVydHkocil8fEEoZSwndW5pZGVudGlmaWVkIGFsaWFzIFwiJytyKydcIicpLGUucmVzdWx0PWUuYW5jaG9yTWFwW3JdLEkoZSwhMCwtMSksITB9KGUpP2Z1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG8sYSxzLHUsbCxjLGg9ZS5raW5kLHA9ZS5yZXN1bHQ7aWYodihjPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSl8fF8oYyl8fDM1PT09Y3x8Mzg9PT1jfHw0Mj09PWN8fDMzPT09Y3x8MTI0PT09Y3x8NjI9PT1jfHwzOT09PWN8fDM0PT09Y3x8Mzc9PT1jfHw2ND09PWN8fDk2PT09YylyZXR1cm4hMTtpZigoNjM9PT1jfHw0NT09PWMpJiYodihuPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKzEpKXx8ciYmXyhuKSkpcmV0dXJuITE7Zm9yKGUua2luZD1cInNjYWxhclwiLGUucmVzdWx0PVwiXCIsaT1vPWUucG9zaXRpb24sYT0hMTswIT09Yzspe2lmKDU4PT09Yyl7aWYodihuPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKzEpKXx8ciYmXyhuKSlicmVha31lbHNlIGlmKDM1PT09Yyl7aWYodihlLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbi0xKSkpYnJlYWt9ZWxzZXtpZihlLnBvc2l0aW9uPT09ZS5saW5lU3RhcnQmJkwoZSl8fHImJl8oYykpYnJlYWs7aWYobShjKSl7aWYocz1lLmxpbmUsdT1lLmxpbmVTdGFydCxsPWUubGluZUluZGVudCxJKGUsITEsLTEpLGUubGluZUluZGVudD49dCl7YT0hMCxjPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKTtjb250aW51ZX1lLnBvc2l0aW9uPW8sZS5saW5lPXMsZS5saW5lU3RhcnQ9dSxlLmxpbmVJbmRlbnQ9bDticmVha319YSYmKE8oZSxpLG8sITEpLE0oZSxlLmxpbmUtcyksaT1vPWUucG9zaXRpb24sYT0hMSkseShjKXx8KG89ZS5wb3NpdGlvbisxKSxjPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pfXJldHVybiBPKGUsaSxvLCExKSwhIWUucmVzdWx0fHwoZS5raW5kPWgsZS5yZXN1bHQ9cCwhMSl9KGUsZiwxPT09cikmJihTPSEwLG51bGw9PT1lLnRhZyYmKGUudGFnPVwiP1wiKSk6KFM9ITAsbnVsbD09PWUudGFnJiZudWxsPT09ZS5hbmNob3J8fEEoZSxcImFsaWFzIG5vZGUgc2hvdWxkIG5vdCBoYXZlIGFueSBwcm9wZXJ0aWVzXCIpKSxudWxsIT09ZS5hbmNob3ImJihlLmFuY2hvck1hcFtlLmFuY2hvcl09ZS5yZXN1bHQpKTowPT09YiYmKFM9bCYmQihlLGQpKSksbnVsbCE9PWUudGFnJiZcIiFcIiE9PWUudGFnKWlmKFwiP1wiPT09ZS50YWcpe2ZvcihudWxsIT09ZS5yZXN1bHQmJlwic2NhbGFyXCIhPT1lLmtpbmQmJkEoZSwndW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITw/PiB0YWc7IGl0IHNob3VsZCBiZSBcInNjYWxhclwiLCBub3QgXCInK2Uua2luZCsnXCInKSxjPTAsaD1lLmltcGxpY2l0VHlwZXMubGVuZ3RoO2M8aDtjKz0xKWlmKChwPWUuaW1wbGljaXRUeXBlc1tjXSkucmVzb2x2ZShlLnJlc3VsdCkpe2UucmVzdWx0PXAuY29uc3RydWN0KGUucmVzdWx0KSxlLnRhZz1wLnRhZyxudWxsIT09ZS5hbmNob3ImJihlLmFuY2hvck1hcFtlLmFuY2hvcl09ZS5yZXN1bHQpO2JyZWFrfX1lbHNlIHUuY2FsbChlLnR5cGVNYXBbZS5raW5kfHxcImZhbGxiYWNrXCJdLGUudGFnKT8ocD1lLnR5cGVNYXBbZS5raW5kfHxcImZhbGxiYWNrXCJdW2UudGFnXSxudWxsIT09ZS5yZXN1bHQmJnAua2luZCE9PWUua2luZCYmQShlLFwidW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITxcIitlLnRhZysnPiB0YWc7IGl0IHNob3VsZCBiZSBcIicrcC5raW5kKydcIiwgbm90IFwiJytlLmtpbmQrJ1wiJykscC5yZXNvbHZlKGUucmVzdWx0KT8oZS5yZXN1bHQ9cC5jb25zdHJ1Y3QoZS5yZXN1bHQpLG51bGwhPT1lLmFuY2hvciYmKGUuYW5jaG9yTWFwW2UuYW5jaG9yXT1lLnJlc3VsdCkpOkEoZSxcImNhbm5vdCByZXNvbHZlIGEgbm9kZSB3aXRoICE8XCIrZS50YWcrXCI+IGV4cGxpY2l0IHRhZ1wiKSk6QShlLFwidW5rbm93biB0YWcgITxcIitlLnRhZytcIj5cIik7cmV0dXJuIG51bGwhPT1lLmxpc3RlbmVyJiZlLmxpc3RlbmVyKFwiY2xvc2VcIixlKSxudWxsIT09ZS50YWd8fG51bGwhPT1lLmFuY2hvcnx8U31mdW5jdGlvbiBVKGUpe3ZhciB0LHIsbixpLG89ZS5wb3NpdGlvbixhPSExO2ZvcihlLnZlcnNpb249bnVsbCxlLmNoZWNrTGluZUJyZWFrcz1lLmxlZ2FjeSxlLnRhZ01hcD17fSxlLmFuY2hvck1hcD17fTswIT09KGk9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKSYmKEkoZSwhMCwtMSksaT1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbiksIShlLmxpbmVJbmRlbnQ+MHx8MzchPT1pKSk7KXtmb3IoYT0hMCxpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pLHQ9ZS5wb3NpdGlvbjswIT09aSYmIXYoaSk7KWk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7Zm9yKG49W10sKHI9ZS5pbnB1dC5zbGljZSh0LGUucG9zaXRpb24pKS5sZW5ndGg8MSYmQShlLFwiZGlyZWN0aXZlIG5hbWUgbXVzdCBub3QgYmUgbGVzcyB0aGFuIG9uZSBjaGFyYWN0ZXIgaW4gbGVuZ3RoXCIpOzAhPT1pOyl7Zm9yKDt5KGkpOylpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pO2lmKDM1PT09aSl7ZG97aT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKX13aGlsZSgwIT09aSYmIW0oaSkpO2JyZWFrfWlmKG0oaSkpYnJlYWs7Zm9yKHQ9ZS5wb3NpdGlvbjswIT09aSYmIXYoaSk7KWk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7bi5wdXNoKGUuaW5wdXQuc2xpY2UodCxlLnBvc2l0aW9uKSl9MCE9PWkmJlAoZSksdS5jYWxsKFQscik/VFtyXShlLHIsbik6TihlLCd1bmtub3duIGRvY3VtZW50IGRpcmVjdGl2ZSBcIicrcisnXCInKX1JKGUsITAsLTEpLDA9PT1lLmxpbmVJbmRlbnQmJjQ1PT09ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pJiY0NT09PWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKzEpJiY0NT09PWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKzIpPyhlLnBvc2l0aW9uKz0zLEkoZSwhMCwtMSkpOmEmJkEoZSxcImRpcmVjdGl2ZXMgZW5kIG1hcmsgaXMgZXhwZWN0ZWRcIikseihlLGUubGluZUluZGVudC0xLDQsITEsITApLEkoZSwhMCwtMSksZS5jaGVja0xpbmVCcmVha3MmJmMudGVzdChlLmlucHV0LnNsaWNlKG8sZS5wb3NpdGlvbikpJiZOKGUsXCJub24tQVNDSUkgbGluZSBicmVha3MgYXJlIGludGVycHJldGVkIGFzIGNvbnRlbnRcIiksZS5kb2N1bWVudHMucHVzaChlLnJlc3VsdCksZS5wb3NpdGlvbj09PWUubGluZVN0YXJ0JiZMKGUpPzQ2PT09ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pJiYoZS5wb3NpdGlvbis9MyxJKGUsITAsLTEpKTplLnBvc2l0aW9uPGUubGVuZ3RoLTEmJkEoZSxcImVuZCBvZiB0aGUgc3RyZWFtIG9yIGEgZG9jdW1lbnQgc2VwYXJhdG9yIGlzIGV4cGVjdGVkXCIpfWZ1bmN0aW9uIEcoZSx0KXt0PXR8fHt9LDAhPT0oZT1TdHJpbmcoZSkpLmxlbmd0aCYmKDEwIT09ZS5jaGFyQ29kZUF0KGUubGVuZ3RoLTEpJiYxMyE9PWUuY2hhckNvZGVBdChlLmxlbmd0aC0xKSYmKGUrPVwiXFxuXCIpLDY1Mjc5PT09ZS5jaGFyQ29kZUF0KDApJiYoZT1lLnNsaWNlKDEpKSk7dmFyIHI9bmV3IFMoZSx0KSxuPWUuaW5kZXhPZihcIlxcMFwiKTtmb3IoLTEhPT1uJiYoci5wb3NpdGlvbj1uLEEocixcIm51bGwgYnl0ZSBpcyBub3QgYWxsb3dlZCBpbiBpbnB1dFwiKSksci5pbnB1dCs9XCJcXDBcIjszMj09PXIuaW5wdXQuY2hhckNvZGVBdChyLnBvc2l0aW9uKTspci5saW5lSW5kZW50Kz0xLHIucG9zaXRpb24rPTE7Zm9yKDtyLnBvc2l0aW9uPHIubGVuZ3RoLTE7KVUocik7cmV0dXJuIHIuZG9jdW1lbnRzfWZ1bmN0aW9uIFgoZSx0LHIpe251bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdm9pZCAwPT09ciYmKHI9dCx0PW51bGwpO3ZhciBuPUcoZSxyKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXJldHVybiBuO2Zvcih2YXIgaT0wLG89bi5sZW5ndGg7aTxvO2krPTEpdChuW2ldKX1mdW5jdGlvbiBxKGUsdCl7dmFyIHI9RyhlLHQpO2lmKDAhPT1yLmxlbmd0aCl7aWYoMT09PXIubGVuZ3RoKXJldHVybiByWzBdO3Rocm93IG5ldyBpKFwiZXhwZWN0ZWQgYSBzaW5nbGUgZG9jdW1lbnQgaW4gdGhlIHN0cmVhbSwgYnV0IGZvdW5kIG1vcmVcIil9fWUuZXhwb3J0cy5sb2FkQWxsPVgsZS5leHBvcnRzLmxvYWQ9cSxlLmV4cG9ydHMuc2FmZUxvYWRBbGw9ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0JiZudWxsIT09dCYmdm9pZCAwPT09ciYmKHI9dCx0PW51bGwpLFgoZSx0LG4uZXh0ZW5kKHtzY2hlbWE6YX0scikpfSxlLmV4cG9ydHMuc2FmZUxvYWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcShlLG4uZXh0ZW5kKHtzY2hlbWE6YX0sdCkpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzgpO2Z1bmN0aW9uIGkoZSx0LHIsbixpKXt0aGlzLm5hbWU9ZSx0aGlzLmJ1ZmZlcj10LHRoaXMucG9zaXRpb249cix0aGlzLmxpbmU9bix0aGlzLmNvbHVtbj1pfWkucHJvdG90eXBlLmdldFNuaXBwZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixpLG8sYSxzO2lmKCF0aGlzLmJ1ZmZlcilyZXR1cm4gbnVsbDtmb3IoZT1lfHw0LHQ9dHx8NzUscj1cIlwiLGk9dGhpcy5wb3NpdGlvbjtpPjAmJi0xPT09XCJcXDBcXHJcXG5cdTAwODVcXHUyMDI4XFx1MjAyOVwiLmluZGV4T2YodGhpcy5idWZmZXIuY2hhckF0KGktMSkpOylpZihpLT0xLHRoaXMucG9zaXRpb24taT50LzItMSl7cj1cIiAuLi4gXCIsaSs9NTticmVha31mb3Iobz1cIlwiLGE9dGhpcy5wb3NpdGlvbjthPHRoaXMuYnVmZmVyLmxlbmd0aCYmLTE9PT1cIlxcMFxcclxcblx1MDA4NVxcdTIwMjhcXHUyMDI5XCIuaW5kZXhPZih0aGlzLmJ1ZmZlci5jaGFyQXQoYSkpOylpZigoYSs9MSktdGhpcy5wb3NpdGlvbj50LzItMSl7bz1cIiAuLi4gXCIsYS09NTticmVha31yZXR1cm4gcz10aGlzLmJ1ZmZlci5zbGljZShpLGEpLG4ucmVwZWF0KFwiIFwiLGUpK3IrcytvK1wiXFxuXCIrbi5yZXBlYXQoXCIgXCIsZSt0aGlzLnBvc2l0aW9uLWkrci5sZW5ndGgpK1wiXlwifSxpLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbihlKXt2YXIgdCxyPVwiXCI7cmV0dXJuIHRoaXMubmFtZSYmKHIrPSdpbiBcIicrdGhpcy5uYW1lKydcIiAnKSxyKz1cImF0IGxpbmUgXCIrKHRoaXMubGluZSsxKStcIiwgY29sdW1uIFwiKyh0aGlzLmNvbHVtbisxKSxlfHwodD10aGlzLmdldFNuaXBwZXQoKSkmJihyKz1cIjpcXG5cIit0KSxyfSxlLmV4cG9ydHM9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApO2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOnN0clwiLHtraW5kOlwic2NhbGFyXCIsY29uc3RydWN0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZT9lOlwiXCJ9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKTtlLmV4cG9ydHM9bmV3IG4oXCJ0YWc6eWFtbC5vcmcsMjAwMjpzZXFcIix7a2luZDpcInNlcXVlbmNlXCIsY29uc3RydWN0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZT9lOltdfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMCk7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6bWFwXCIse2tpbmQ6XCJtYXBwaW5nXCIsY29uc3RydWN0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZT9lOnt9fX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMCk7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6bnVsbFwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMDt2YXIgdD1lLmxlbmd0aDtyZXR1cm4gMT09PXQmJlwiflwiPT09ZXx8ND09PXQmJihcIm51bGxcIj09PWV8fFwiTnVsbFwiPT09ZXx8XCJOVUxMXCI9PT1lKX0sY29uc3RydWN0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LHByZWRpY2F0ZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWV9LHJlcHJlc2VudDp7Y2Fub25pY2FsOmZ1bmN0aW9uKCl7cmV0dXJuXCJ+XCJ9LGxvd2VyY2FzZTpmdW5jdGlvbigpe3JldHVyblwibnVsbFwifSx1cHBlcmNhc2U6ZnVuY3Rpb24oKXtyZXR1cm5cIk5VTExcIn0sY2FtZWxjYXNlOmZ1bmN0aW9uKCl7cmV0dXJuXCJOdWxsXCJ9fSxkZWZhdWx0U3R5bGU6XCJsb3dlcmNhc2VcIn0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMCk7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6Ym9vbFwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMTt2YXIgdD1lLmxlbmd0aDtyZXR1cm4gND09PXQmJihcInRydWVcIj09PWV8fFwiVHJ1ZVwiPT09ZXx8XCJUUlVFXCI9PT1lKXx8NT09PXQmJihcImZhbHNlXCI9PT1lfHxcIkZhbHNlXCI9PT1lfHxcIkZBTFNFXCI9PT1lKX0sY29uc3RydWN0OmZ1bmN0aW9uKGUpe3JldHVyblwidHJ1ZVwiPT09ZXx8XCJUcnVlXCI9PT1lfHxcIlRSVUVcIj09PWV9LHByZWRpY2F0ZTpmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQm9vbGVhbl1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0scmVwcmVzZW50Ontsb3dlcmNhc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJ0cnVlXCI6XCJmYWxzZVwifSx1cHBlcmNhc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJUUlVFXCI6XCJGQUxTRVwifSxjYW1lbGNhc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJUcnVlXCI6XCJGYWxzZVwifX0sZGVmYXVsdFN0eWxlOlwibG93ZXJjYXNlXCJ9KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzgpLGk9cigxMCk7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gNDg8PWUmJmU8PTU1fWZ1bmN0aW9uIGEoZSl7cmV0dXJuIDQ4PD1lJiZlPD01N31lLmV4cG9ydHM9bmV3IGkoXCJ0YWc6eWFtbC5vcmcsMjAwMjppbnRcIix7a2luZDpcInNjYWxhclwiLHJlc29sdmU6ZnVuY3Rpb24oZSl7aWYobnVsbD09PWUpcmV0dXJuITE7dmFyIHQscixuPWUubGVuZ3RoLGk9MCxzPSExO2lmKCFuKXJldHVybiExO2lmKFwiLVwiIT09KHQ9ZVtpXSkmJlwiK1wiIT09dHx8KHQ9ZVsrK2ldKSxcIjBcIj09PXQpe2lmKGkrMT09PW4pcmV0dXJuITA7aWYoXCJiXCI9PT0odD1lWysraV0pKXtmb3IoaSsrO2k8bjtpKyspaWYoXCJfXCIhPT0odD1lW2ldKSl7aWYoXCIwXCIhPT10JiZcIjFcIiE9PXQpcmV0dXJuITE7cz0hMH1yZXR1cm4gcyYmXCJfXCIhPT10fWlmKFwieFwiPT09dCl7Zm9yKGkrKztpPG47aSsrKWlmKFwiX1wiIT09KHQ9ZVtpXSkpe2lmKCEoNDg8PShyPWUuY2hhckNvZGVBdChpKSkmJnI8PTU3fHw2NTw9ciYmcjw9NzB8fDk3PD1yJiZyPD0xMDIpKXJldHVybiExO3M9ITB9cmV0dXJuIHMmJlwiX1wiIT09dH1mb3IoO2k8bjtpKyspaWYoXCJfXCIhPT0odD1lW2ldKSl7aWYoIW8oZS5jaGFyQ29kZUF0KGkpKSlyZXR1cm4hMTtzPSEwfXJldHVybiBzJiZcIl9cIiE9PXR9aWYoXCJfXCI9PT10KXJldHVybiExO2Zvcig7aTxuO2krKylpZihcIl9cIiE9PSh0PWVbaV0pKXtpZihcIjpcIj09PXQpYnJlYWs7aWYoIWEoZS5jaGFyQ29kZUF0KGkpKSlyZXR1cm4hMTtzPSEwfXJldHVybiEoIXN8fFwiX1wiPT09dCkmJihcIjpcIiE9PXR8fC9eKDpbMC01XT9bMC05XSkrJC8udGVzdChlLnNsaWNlKGkpKSl9LGNvbnN0cnVjdDpmdW5jdGlvbihlKXt2YXIgdCxyLG49ZSxpPTEsbz1bXTtyZXR1cm4tMSE9PW4uaW5kZXhPZihcIl9cIikmJihuPW4ucmVwbGFjZSgvXy9nLFwiXCIpKSxcIi1cIiE9PSh0PW5bMF0pJiZcIitcIiE9PXR8fChcIi1cIj09PXQmJihpPS0xKSx0PShuPW4uc2xpY2UoMSkpWzBdKSxcIjBcIj09PW4/MDpcIjBcIj09PXQ/XCJiXCI9PT1uWzFdP2kqcGFyc2VJbnQobi5zbGljZSgyKSwyKTpcInhcIj09PW5bMV0/aSpwYXJzZUludChuLDE2KTppKnBhcnNlSW50KG4sOCk6LTEhPT1uLmluZGV4T2YoXCI6XCIpPyhuLnNwbGl0KFwiOlwiKS5mb3JFYWNoKChmdW5jdGlvbihlKXtvLnVuc2hpZnQocGFyc2VJbnQoZSwxMCkpfSkpLG49MCxyPTEsby5mb3JFYWNoKChmdW5jdGlvbihlKXtuKz1lKnIscio9NjB9KSksaSpuKTppKnBhcnNlSW50KG4sMTApfSxwcmVkaWNhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IE51bWJlcl1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSYmZSUxPT0wJiYhbi5pc05lZ2F0aXZlWmVybyhlKX0scmVwcmVzZW50OntiaW5hcnk6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTA/XCIwYlwiK2UudG9TdHJpbmcoMik6XCItMGJcIitlLnRvU3RyaW5nKDIpLnNsaWNlKDEpfSxvY3RhbDpmdW5jdGlvbihlKXtyZXR1cm4gZT49MD9cIjBcIitlLnRvU3RyaW5nKDgpOlwiLTBcIitlLnRvU3RyaW5nKDgpLnNsaWNlKDEpfSxkZWNpbWFsOmZ1bmN0aW9uKGUpe3JldHVybiBlLnRvU3RyaW5nKDEwKX0saGV4YWRlY2ltYWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTA/XCIweFwiK2UudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk6XCItMHhcIitlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLnNsaWNlKDEpfX0sZGVmYXVsdFN0eWxlOlwiZGVjaW1hbFwiLHN0eWxlQWxpYXNlczp7YmluYXJ5OlsyLFwiYmluXCJdLG9jdGFsOls4LFwib2N0XCJdLGRlY2ltYWw6WzEwLFwiZGVjXCJdLGhleGFkZWNpbWFsOlsxNixcImhleFwiXX19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzgpLGk9cigxMCksbz1uZXcgUmVnRXhwKFwiXig/OlstK10/KD86MHxbMS05XVswLTlfXSopKD86XFxcXC5bMC05X10qKT8oPzpbZUVdWy0rXT9bMC05XSspP3xcXFxcLlswLTlfXSsoPzpbZUVdWy0rXT9bMC05XSspP3xbLStdP1swLTldWzAtOV9dKig/OjpbMC01XT9bMC05XSkrXFxcXC5bMC05X10qfFstK10/XFxcXC4oPzppbmZ8SW5mfElORil8XFxcXC4oPzpuYW58TmFOfE5BTikpJFwiKTt2YXIgYT0vXlstK10/WzAtOV0rZS87ZS5leHBvcnRzPW5ldyBpKFwidGFnOnlhbWwub3JnLDIwMDI6ZmxvYXRcIix7a2luZDpcInNjYWxhclwiLHJlc29sdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lJiYhKCFvLnRlc3QoZSl8fFwiX1wiPT09ZVtlLmxlbmd0aC0xXSl9LGNvbnN0cnVjdDpmdW5jdGlvbihlKXt2YXIgdCxyLG4saTtyZXR1cm4gcj1cIi1cIj09PSh0PWUucmVwbGFjZSgvXy9nLFwiXCIpLnRvTG93ZXJDYXNlKCkpWzBdPy0xOjEsaT1bXSxcIistXCIuaW5kZXhPZih0WzBdKT49MCYmKHQ9dC5zbGljZSgxKSksXCIuaW5mXCI9PT10PzE9PT1yP051bWJlci5QT1NJVElWRV9JTkZJTklUWTpOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk6XCIubmFuXCI9PT10P05hTjp0LmluZGV4T2YoXCI6XCIpPj0wPyh0LnNwbGl0KFwiOlwiKS5mb3JFYWNoKChmdW5jdGlvbihlKXtpLnVuc2hpZnQocGFyc2VGbG9hdChlLDEwKSl9KSksdD0wLG49MSxpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QrPWUqbixuKj02MH0pKSxyKnQpOnIqcGFyc2VGbG9hdCh0LDEwKX0scHJlZGljYXRlOmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBOdW1iZXJdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkmJihlJTEhPTB8fG4uaXNOZWdhdGl2ZVplcm8oZSkpfSxyZXByZXNlbnQ6ZnVuY3Rpb24oZSx0KXt2YXIgcjtpZihpc05hTihlKSlzd2l0Y2godCl7Y2FzZVwibG93ZXJjYXNlXCI6cmV0dXJuXCIubmFuXCI7Y2FzZVwidXBwZXJjYXNlXCI6cmV0dXJuXCIuTkFOXCI7Y2FzZVwiY2FtZWxjYXNlXCI6cmV0dXJuXCIuTmFOXCJ9ZWxzZSBpZihOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk9PT1lKXN3aXRjaCh0KXtjYXNlXCJsb3dlcmNhc2VcIjpyZXR1cm5cIi5pbmZcIjtjYXNlXCJ1cHBlcmNhc2VcIjpyZXR1cm5cIi5JTkZcIjtjYXNlXCJjYW1lbGNhc2VcIjpyZXR1cm5cIi5JbmZcIn1lbHNlIGlmKE51bWJlci5ORUdBVElWRV9JTkZJTklUWT09PWUpc3dpdGNoKHQpe2Nhc2VcImxvd2VyY2FzZVwiOnJldHVyblwiLS5pbmZcIjtjYXNlXCJ1cHBlcmNhc2VcIjpyZXR1cm5cIi0uSU5GXCI7Y2FzZVwiY2FtZWxjYXNlXCI6cmV0dXJuXCItLkluZlwifWVsc2UgaWYobi5pc05lZ2F0aXZlWmVybyhlKSlyZXR1cm5cIi0wLjBcIjtyZXR1cm4gcj1lLnRvU3RyaW5nKDEwKSxhLnRlc3Qocik/ci5yZXBsYWNlKFwiZVwiLFwiLmVcIik6cn0sZGVmYXVsdFN0eWxlOlwibG93ZXJjYXNlXCJ9KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApLGk9bmV3IFJlZ0V4cChcIl4oWzAtOV1bMC05XVswLTldWzAtOV0pLShbMC05XVswLTldKS0oWzAtOV1bMC05XSkkXCIpLG89bmV3IFJlZ0V4cChcIl4oWzAtOV1bMC05XVswLTldWzAtOV0pLShbMC05XVswLTldPyktKFswLTldWzAtOV0/KSg/OltUdF18WyBcXFxcdF0rKShbMC05XVswLTldPyk6KFswLTldWzAtOV0pOihbMC05XVswLTldKSg/OlxcXFwuKFswLTldKikpPyg/OlsgXFxcXHRdKihafChbLStdKShbMC05XVswLTldPykoPzo6KFswLTldWzAtOV0pKT8pKT8kXCIpO2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOnRpbWVzdGFtcFwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWUmJihudWxsIT09aS5leGVjKGUpfHxudWxsIT09by5leGVjKGUpKX0sY29uc3RydWN0OmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixhLHMsdSxsLGMsaD0wLHA9bnVsbDtpZihudWxsPT09KHQ9aS5leGVjKGUpKSYmKHQ9by5leGVjKGUpKSxudWxsPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJEYXRlIHJlc29sdmUgZXJyb3JcIik7aWYocj0rdFsxXSxuPSt0WzJdLTEsYT0rdFszXSwhdFs0XSlyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMocixuLGEpKTtpZihzPSt0WzRdLHU9K3RbNV0sbD0rdFs2XSx0WzddKXtmb3IoaD10WzddLnNsaWNlKDAsMyk7aC5sZW5ndGg8MzspaCs9XCIwXCI7aD0raH1yZXR1cm4gdFs5XSYmKHA9NmU0Kig2MCordFsxMF0rICsodFsxMV18fDApKSxcIi1cIj09PXRbOV0mJihwPS1wKSksYz1uZXcgRGF0ZShEYXRlLlVUQyhyLG4sYSxzLHUsbCxoKSkscCYmYy5zZXRUaW1lKGMuZ2V0VGltZSgpLXApLGN9LGluc3RhbmNlT2Y6RGF0ZSxyZXByZXNlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9JU09TdHJpbmcoKX19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApO2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOm1lcmdlXCIse2tpbmQ6XCJzY2FsYXJcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe3JldHVyblwiPDxcIj09PWV8fG51bGw9PT1lfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG47dHJ5e249cigxNDUpLkJ1ZmZlcn1jYXRjaChlKXt9dmFyIGk9cigxMCksbz1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XFxuXFxyXCI7ZS5leHBvcnRzPW5ldyBpKFwidGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5XCIse2tpbmQ6XCJzY2FsYXJcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiExO3ZhciB0LHIsbj0wLGk9ZS5sZW5ndGgsYT1vO2ZvcihyPTA7cjxpO3IrKylpZighKCh0PWEuaW5kZXhPZihlLmNoYXJBdChyKSkpPjY0KSl7aWYodDwwKXJldHVybiExO24rPTZ9cmV0dXJuIG4lOD09MH0sY29uc3RydWN0OmZ1bmN0aW9uKGUpe3ZhciB0LHIsaT1lLnJlcGxhY2UoL1tcXHJcXG49XS9nLFwiXCIpLGE9aS5sZW5ndGgscz1vLHU9MCxsPVtdO2Zvcih0PTA7dDxhO3QrKyl0JTQ9PTAmJnQmJihsLnB1c2godT4+MTYmMjU1KSxsLnB1c2godT4+OCYyNTUpLGwucHVzaCgyNTUmdSkpLHU9dTw8NnxzLmluZGV4T2YoaS5jaGFyQXQodCkpO3JldHVybiAwPT09KHI9YSU0KjYpPyhsLnB1c2godT4+MTYmMjU1KSxsLnB1c2godT4+OCYyNTUpLGwucHVzaCgyNTUmdSkpOjE4PT09cj8obC5wdXNoKHU+PjEwJjI1NSksbC5wdXNoKHU+PjImMjU1KSk6MTI9PT1yJiZsLnB1c2godT4+NCYyNTUpLG4/bi5mcm9tP24uZnJvbShsKTpuZXcgbihsKTpsfSxwcmVkaWNhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIG4mJm4uaXNCdWZmZXIoZSl9LHJlcHJlc2VudDpmdW5jdGlvbihlKXt2YXIgdCxyLG49XCJcIixpPTAsYT1lLmxlbmd0aCxzPW87Zm9yKHQ9MDt0PGE7dCsrKXQlMz09MCYmdCYmKG4rPXNbaT4+MTgmNjNdLG4rPXNbaT4+MTImNjNdLG4rPXNbaT4+NiY2M10sbis9c1s2MyZpXSksaT0oaTw8OCkrZVt0XTtyZXR1cm4gMD09PShyPWElMyk/KG4rPXNbaT4+MTgmNjNdLG4rPXNbaT4+MTImNjNdLG4rPXNbaT4+NiY2M10sbis9c1s2MyZpXSk6Mj09PXI/KG4rPXNbaT4+MTAmNjNdLG4rPXNbaT4+NCY2M10sbis9c1tpPDwyJjYzXSxuKz1zWzY0XSk6MT09PXImJihuKz1zW2k+PjImNjNdLG4rPXNbaTw8NCY2M10sbis9c1s2NF0sbis9c1s2NF0pLG59fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKSxpPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOm9tYXBcIix7a2luZDpcInNlcXVlbmNlXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMDt2YXIgdCxyLG4sYSxzLHU9W10sbD1lO2Zvcih0PTAscj1sLmxlbmd0aDt0PHI7dCs9MSl7aWYobj1sW3RdLHM9ITEsXCJbb2JqZWN0IE9iamVjdF1cIiE9PW8uY2FsbChuKSlyZXR1cm4hMTtmb3IoYSBpbiBuKWlmKGkuY2FsbChuLGEpKXtpZihzKXJldHVybiExO3M9ITB9aWYoIXMpcmV0dXJuITE7aWYoLTEhPT11LmluZGV4T2YoYSkpcmV0dXJuITE7dS5wdXNoKGEpfXJldHVybiEwfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lP2U6W119fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKSxpPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6cGFpcnNcIix7a2luZDpcInNlcXVlbmNlXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMDt2YXIgdCxyLG4sbyxhLHM9ZTtmb3IoYT1uZXcgQXJyYXkocy5sZW5ndGgpLHQ9MCxyPXMubGVuZ3RoO3Q8cjt0Kz0xKXtpZihuPXNbdF0sXCJbb2JqZWN0IE9iamVjdF1cIiE9PWkuY2FsbChuKSlyZXR1cm4hMTtpZigxIT09KG89T2JqZWN0LmtleXMobikpLmxlbmd0aClyZXR1cm4hMTthW3RdPVtvWzBdLG5bb1swXV1dfXJldHVybiEwfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7aWYobnVsbD09PWUpcmV0dXJuW107dmFyIHQscixuLGksbyxhPWU7Zm9yKG89bmV3IEFycmF5KGEubGVuZ3RoKSx0PTAscj1hLmxlbmd0aDt0PHI7dCs9MSluPWFbdF0saT1PYmplY3Qua2V5cyhuKSxvW3RdPVtpWzBdLG5baVswXV1dO3JldHVybiBvfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMCksaT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOnNldFwiLHtraW5kOlwibWFwcGluZ1wiLHJlc29sdmU6ZnVuY3Rpb24oZSl7aWYobnVsbD09PWUpcmV0dXJuITA7dmFyIHQscj1lO2Zvcih0IGluIHIpaWYoaS5jYWxsKHIsdCkmJm51bGwhPT1yW3RdKXJldHVybiExO3JldHVybiEwfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lP2U6e319fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKTtlLmV4cG9ydHM9bmV3IG4oXCJ0YWc6eWFtbC5vcmcsMjAwMjpqcy91bmRlZmluZWRcIix7a2luZDpcInNjYWxhclwiLHJlc29sdmU6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sY29uc3RydWN0OmZ1bmN0aW9uKCl7fSxwcmVkaWNhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWV9LHJlcHJlc2VudDpmdW5jdGlvbigpe3JldHVyblwiXCJ9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKTtlLmV4cG9ydHM9bmV3IG4oXCJ0YWc6eWFtbC5vcmcsMjAwMjpqcy9yZWdleHBcIix7a2luZDpcInNjYWxhclwiLHJlc29sdmU6ZnVuY3Rpb24oZSl7aWYobnVsbD09PWUpcmV0dXJuITE7aWYoMD09PWUubGVuZ3RoKXJldHVybiExO3ZhciB0PWUscj0vXFwvKFtnaW1dKikkLy5leGVjKGUpLG49XCJcIjtpZihcIi9cIj09PXRbMF0pe2lmKHImJihuPXJbMV0pLG4ubGVuZ3RoPjMpcmV0dXJuITE7aWYoXCIvXCIhPT10W3QubGVuZ3RoLW4ubGVuZ3RoLTFdKXJldHVybiExfXJldHVybiEwfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9ZSxyPS9cXC8oW2dpbV0qKSQvLmV4ZWMoZSksbj1cIlwiO3JldHVyblwiL1wiPT09dFswXSYmKHImJihuPXJbMV0pLHQ9dC5zbGljZSgxLHQubGVuZ3RoLW4ubGVuZ3RoLTEpKSxuZXcgUmVnRXhwKHQsbil9LHByZWRpY2F0ZTpmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSxyZXByZXNlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9XCIvXCIrZS5zb3VyY2UrXCIvXCI7cmV0dXJuIGUuZ2xvYmFsJiYodCs9XCJnXCIpLGUubXVsdGlsaW5lJiYodCs9XCJtXCIpLGUuaWdub3JlQ2FzZSYmKHQrPVwiaVwiKSx0fX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG47dHJ5e249cigzMDIpfWNhdGNoKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJihuPXdpbmRvdy5lc3ByaW1hKX12YXIgaT1yKDEwKTtlLmV4cG9ydHM9bmV3IGkoXCJ0YWc6eWFtbC5vcmcsMjAwMjpqcy9mdW5jdGlvblwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMTt0cnl7dmFyIHQ9XCIoXCIrZStcIilcIixyPW4ucGFyc2UodCx7cmFuZ2U6ITB9KTtyZXR1cm5cIlByb2dyYW1cIj09PXIudHlwZSYmMT09PXIuYm9keS5sZW5ndGgmJlwiRXhwcmVzc2lvblN0YXRlbWVudFwiPT09ci5ib2R5WzBdLnR5cGUmJihcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCI9PT1yLmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlfHxcIkZ1bmN0aW9uRXhwcmVzc2lvblwiPT09ci5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSl9Y2F0Y2goZSl7cmV0dXJuITF9fSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7dmFyIHQscj1cIihcIitlK1wiKVwiLGk9bi5wYXJzZShyLHtyYW5nZTohMH0pLG89W107aWYoXCJQcm9ncmFtXCIhPT1pLnR5cGV8fDEhPT1pLmJvZHkubGVuZ3RofHxcIkV4cHJlc3Npb25TdGF0ZW1lbnRcIiE9PWkuYm9keVswXS50eXBlfHxcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIhPT1pLmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlJiZcIkZ1bmN0aW9uRXhwcmVzc2lvblwiIT09aS5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmVzb2x2ZSBmdW5jdGlvblwiKTtyZXR1cm4gaS5ib2R5WzBdLmV4cHJlc3Npb24ucGFyYW1zLmZvckVhY2goKGZ1bmN0aW9uKGUpe28ucHVzaChlLm5hbWUpfSkpLHQ9aS5ib2R5WzBdLmV4cHJlc3Npb24uYm9keS5yYW5nZSxcIkJsb2NrU3RhdGVtZW50XCI9PT1pLmJvZHlbMF0uZXhwcmVzc2lvbi5ib2R5LnR5cGU/bmV3IEZ1bmN0aW9uKG8sci5zbGljZSh0WzBdKzEsdFsxXS0xKSk6bmV3IEZ1bmN0aW9uKG8sXCJyZXR1cm4gXCIrci5zbGljZSh0WzBdLHRbMV0pKX0scHJlZGljYXRlOmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBGdW5jdGlvbl1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0scmVwcmVzZW50OmZ1bmN0aW9uKGUpe3JldHVybiBlLnRvU3RyaW5nKCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtuPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIHIobil7aWYodFtuXSlyZXR1cm4gdFtuXS5leHBvcnRzO3ZhciBpPXRbbl09e2V4cG9ydHM6e30saWQ6bixsb2FkZWQ6ITF9O3JldHVybiBlW25dLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLHIpLGkubG9hZGVkPSEwLGkuZXhwb3J0c31yZXR1cm4gci5tPWUsci5jPXQsci5wPVwiXCIscigwKX0oW2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9cigzKSxvPXIoOCksYT1yKDE1KTtmdW5jdGlvbiBzKGUsdCxyKXt2YXIgYT1udWxsLHM9ZnVuY3Rpb24oZSx0KXtyJiZyKGUsdCksYSYmYS52aXNpdChlLHQpfSx1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHI/czpudWxsLGw9ITE7aWYodCl7bD1cImJvb2xlYW5cIj09dHlwZW9mIHQuY29tbWVudCYmdC5jb21tZW50O3ZhciBjPVwiYm9vbGVhblwiPT10eXBlb2YgdC5hdHRhY2hDb21tZW50JiZ0LmF0dGFjaENvbW1lbnQ7KGx8fGMpJiYoKGE9bmV3IG4uQ29tbWVudEhhbmRsZXIpLmF0dGFjaD1jLHQuY29tbWVudD0hMCx1PXMpfXZhciBoLHA9ITE7dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQuc291cmNlVHlwZSYmKHA9XCJtb2R1bGVcIj09PXQuc291cmNlVHlwZSksaD10JiZcImJvb2xlYW5cIj09dHlwZW9mIHQuanN4JiZ0LmpzeD9uZXcgaS5KU1hQYXJzZXIoZSx0LHUpOm5ldyBvLlBhcnNlcihlLHQsdSk7dmFyIGY9cD9oLnBhcnNlTW9kdWxlKCk6aC5wYXJzZVNjcmlwdCgpO3JldHVybiBsJiZhJiYoZi5jb21tZW50cz1hLmNvbW1lbnRzKSxoLmNvbmZpZy50b2tlbnMmJihmLnRva2Vucz1oLnRva2VucyksaC5jb25maWcudG9sZXJhbnQmJihmLmVycm9ycz1oLmVycm9ySGFuZGxlci5lcnJvcnMpLGZ9dC5wYXJzZT1zLHQucGFyc2VNb2R1bGU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXR8fHt9O3JldHVybiBuLnNvdXJjZVR5cGU9XCJtb2R1bGVcIixzKGUsbixyKX0sdC5wYXJzZVNjcmlwdD1mdW5jdGlvbihlLHQscil7dmFyIG49dHx8e307cmV0dXJuIG4uc291cmNlVHlwZT1cInNjcmlwdFwiLHMoZSxuLHIpfSx0LnRva2VuaXplPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpPW5ldyBhLlRva2VuaXplcihlLHQpO249W107dHJ5e2Zvcig7Oyl7dmFyIG89aS5nZXROZXh0VG9rZW4oKTtpZighbylicmVhaztyJiYobz1yKG8pKSxuLnB1c2gobyl9fWNhdGNoKGUpe2kuZXJyb3JIYW5kbGVyLnRvbGVyYXRlKGUpfXJldHVybiBpLmVycm9ySGFuZGxlci50b2xlcmFudCYmKG4uZXJyb3JzPWkuZXJyb3JzKCkpLG59O3ZhciB1PXIoMik7dC5TeW50YXg9dS5TeW50YXgsdC52ZXJzaW9uPVwiNC4wLjFcIn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLmF0dGFjaD0hMSx0aGlzLmNvbW1lbnRzPVtdLHRoaXMuc3RhY2s9W10sdGhpcy5sZWFkaW5nPVtdLHRoaXMudHJhaWxpbmc9W119cmV0dXJuIGUucHJvdG90eXBlLmluc2VydElubmVyQ29tbWVudHM9ZnVuY3Rpb24oZSx0KXtpZihlLnR5cGU9PT1uLlN5bnRheC5CbG9ja1N0YXRlbWVudCYmMD09PWUuYm9keS5sZW5ndGgpe2Zvcih2YXIgcj1bXSxpPXRoaXMubGVhZGluZy5sZW5ndGgtMTtpPj0wOy0taSl7dmFyIG89dGhpcy5sZWFkaW5nW2ldO3QuZW5kLm9mZnNldD49by5zdGFydCYmKHIudW5zaGlmdChvLmNvbW1lbnQpLHRoaXMubGVhZGluZy5zcGxpY2UoaSwxKSx0aGlzLnRyYWlsaW5nLnNwbGljZShpLDEpKX1yLmxlbmd0aCYmKGUuaW5uZXJDb21tZW50cz1yKX19LGUucHJvdG90eXBlLmZpbmRUcmFpbGluZ0NvbW1lbnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2lmKHRoaXMudHJhaWxpbmcubGVuZ3RoPjApe2Zvcih2YXIgcj10aGlzLnRyYWlsaW5nLmxlbmd0aC0xO3I+PTA7LS1yKXt2YXIgbj10aGlzLnRyYWlsaW5nW3JdO24uc3RhcnQ+PWUuZW5kLm9mZnNldCYmdC51bnNoaWZ0KG4uY29tbWVudCl9cmV0dXJuIHRoaXMudHJhaWxpbmcubGVuZ3RoPTAsdH12YXIgaT10aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoLTFdO2lmKGkmJmkubm9kZS50cmFpbGluZ0NvbW1lbnRzKXt2YXIgbz1pLm5vZGUudHJhaWxpbmdDb21tZW50c1swXTtvJiZvLnJhbmdlWzBdPj1lLmVuZC5vZmZzZXQmJih0PWkubm9kZS50cmFpbGluZ0NvbW1lbnRzLGRlbGV0ZSBpLm5vZGUudHJhaWxpbmdDb21tZW50cyl9cmV0dXJuIHR9LGUucHJvdG90eXBlLmZpbmRMZWFkaW5nQ29tbWVudHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9W107dGhpcy5zdGFjay5sZW5ndGg+MCYmKChvPXRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGgtMV0pJiZvLnN0YXJ0Pj1lLnN0YXJ0Lm9mZnNldCk7KXQ9by5ub2RlLHRoaXMuc3RhY2sucG9wKCk7aWYodCl7Zm9yKHZhciBuPSh0LmxlYWRpbmdDb21tZW50cz90LmxlYWRpbmdDb21tZW50cy5sZW5ndGg6MCktMTtuPj0wOy0tbil7dmFyIGk9dC5sZWFkaW5nQ29tbWVudHNbbl07aS5yYW5nZVsxXTw9ZS5zdGFydC5vZmZzZXQmJihyLnVuc2hpZnQoaSksdC5sZWFkaW5nQ29tbWVudHMuc3BsaWNlKG4sMSkpfXJldHVybiB0LmxlYWRpbmdDb21tZW50cyYmMD09PXQubGVhZGluZ0NvbW1lbnRzLmxlbmd0aCYmZGVsZXRlIHQubGVhZGluZ0NvbW1lbnRzLHJ9Zm9yKG49dGhpcy5sZWFkaW5nLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgbzsobz10aGlzLmxlYWRpbmdbbl0pLnN0YXJ0PD1lLnN0YXJ0Lm9mZnNldCYmKHIudW5zaGlmdChvLmNvbW1lbnQpLHRoaXMubGVhZGluZy5zcGxpY2UobiwxKSl9cmV0dXJuIHJ9LGUucHJvdG90eXBlLnZpc2l0Tm9kZT1mdW5jdGlvbihlLHQpe2lmKCEoZS50eXBlPT09bi5TeW50YXguUHJvZ3JhbSYmZS5ib2R5Lmxlbmd0aD4wKSl7dGhpcy5pbnNlcnRJbm5lckNvbW1lbnRzKGUsdCk7dmFyIHI9dGhpcy5maW5kVHJhaWxpbmdDb21tZW50cyh0KSxpPXRoaXMuZmluZExlYWRpbmdDb21tZW50cyh0KTtpLmxlbmd0aD4wJiYoZS5sZWFkaW5nQ29tbWVudHM9aSksci5sZW5ndGg+MCYmKGUudHJhaWxpbmdDb21tZW50cz1yKSx0aGlzLnN0YWNrLnB1c2goe25vZGU6ZSxzdGFydDp0LnN0YXJ0Lm9mZnNldH0pfX0sZS5wcm90b3R5cGUudmlzaXRDb21tZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJMXCI9PT1lLnR5cGVbMF0/XCJMaW5lXCI6XCJCbG9ja1wiLG49e3R5cGU6cix2YWx1ZTplLnZhbHVlfTtpZihlLnJhbmdlJiYobi5yYW5nZT1lLnJhbmdlKSxlLmxvYyYmKG4ubG9jPWUubG9jKSx0aGlzLmNvbW1lbnRzLnB1c2gobiksdGhpcy5hdHRhY2gpe3ZhciBpPXtjb21tZW50Ont0eXBlOnIsdmFsdWU6ZS52YWx1ZSxyYW5nZTpbdC5zdGFydC5vZmZzZXQsdC5lbmQub2Zmc2V0XX0sc3RhcnQ6dC5zdGFydC5vZmZzZXR9O2UubG9jJiYoaS5jb21tZW50LmxvYz1lLmxvYyksZS50eXBlPXIsdGhpcy5sZWFkaW5nLnB1c2goaSksdGhpcy50cmFpbGluZy5wdXNoKGkpfX0sZS5wcm90b3R5cGUudmlzaXQ9ZnVuY3Rpb24oZSx0KXtcIkxpbmVDb21tZW50XCI9PT1lLnR5cGV8fFwiQmxvY2tDb21tZW50XCI9PT1lLnR5cGU/dGhpcy52aXNpdENvbW1lbnQoZSx0KTp0aGlzLmF0dGFjaCYmdGhpcy52aXNpdE5vZGUoZSx0KX0sZX0oKTt0LkNvbW1lbnRIYW5kbGVyPWl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TeW50YXg9e0Fzc2lnbm1lbnRFeHByZXNzaW9uOlwiQXNzaWdubWVudEV4cHJlc3Npb25cIixBc3NpZ25tZW50UGF0dGVybjpcIkFzc2lnbm1lbnRQYXR0ZXJuXCIsQXJyYXlFeHByZXNzaW9uOlwiQXJyYXlFeHByZXNzaW9uXCIsQXJyYXlQYXR0ZXJuOlwiQXJyYXlQYXR0ZXJuXCIsQXJyb3dGdW5jdGlvbkV4cHJlc3Npb246XCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiLEF3YWl0RXhwcmVzc2lvbjpcIkF3YWl0RXhwcmVzc2lvblwiLEJsb2NrU3RhdGVtZW50OlwiQmxvY2tTdGF0ZW1lbnRcIixCaW5hcnlFeHByZXNzaW9uOlwiQmluYXJ5RXhwcmVzc2lvblwiLEJyZWFrU3RhdGVtZW50OlwiQnJlYWtTdGF0ZW1lbnRcIixDYWxsRXhwcmVzc2lvbjpcIkNhbGxFeHByZXNzaW9uXCIsQ2F0Y2hDbGF1c2U6XCJDYXRjaENsYXVzZVwiLENsYXNzQm9keTpcIkNsYXNzQm9keVwiLENsYXNzRGVjbGFyYXRpb246XCJDbGFzc0RlY2xhcmF0aW9uXCIsQ2xhc3NFeHByZXNzaW9uOlwiQ2xhc3NFeHByZXNzaW9uXCIsQ29uZGl0aW9uYWxFeHByZXNzaW9uOlwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIsQ29udGludWVTdGF0ZW1lbnQ6XCJDb250aW51ZVN0YXRlbWVudFwiLERvV2hpbGVTdGF0ZW1lbnQ6XCJEb1doaWxlU3RhdGVtZW50XCIsRGVidWdnZXJTdGF0ZW1lbnQ6XCJEZWJ1Z2dlclN0YXRlbWVudFwiLEVtcHR5U3RhdGVtZW50OlwiRW1wdHlTdGF0ZW1lbnRcIixFeHBvcnRBbGxEZWNsYXJhdGlvbjpcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIsRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uOlwiRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uXCIsRXhwb3J0TmFtZWREZWNsYXJhdGlvbjpcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIixFeHBvcnRTcGVjaWZpZXI6XCJFeHBvcnRTcGVjaWZpZXJcIixFeHByZXNzaW9uU3RhdGVtZW50OlwiRXhwcmVzc2lvblN0YXRlbWVudFwiLEZvclN0YXRlbWVudDpcIkZvclN0YXRlbWVudFwiLEZvck9mU3RhdGVtZW50OlwiRm9yT2ZTdGF0ZW1lbnRcIixGb3JJblN0YXRlbWVudDpcIkZvckluU3RhdGVtZW50XCIsRnVuY3Rpb25EZWNsYXJhdGlvbjpcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIixGdW5jdGlvbkV4cHJlc3Npb246XCJGdW5jdGlvbkV4cHJlc3Npb25cIixJZGVudGlmaWVyOlwiSWRlbnRpZmllclwiLElmU3RhdGVtZW50OlwiSWZTdGF0ZW1lbnRcIixJbXBvcnREZWNsYXJhdGlvbjpcIkltcG9ydERlY2xhcmF0aW9uXCIsSW1wb3J0RGVmYXVsdFNwZWNpZmllcjpcIkltcG9ydERlZmF1bHRTcGVjaWZpZXJcIixJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI6XCJJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXJcIixJbXBvcnRTcGVjaWZpZXI6XCJJbXBvcnRTcGVjaWZpZXJcIixMaXRlcmFsOlwiTGl0ZXJhbFwiLExhYmVsZWRTdGF0ZW1lbnQ6XCJMYWJlbGVkU3RhdGVtZW50XCIsTG9naWNhbEV4cHJlc3Npb246XCJMb2dpY2FsRXhwcmVzc2lvblwiLE1lbWJlckV4cHJlc3Npb246XCJNZW1iZXJFeHByZXNzaW9uXCIsTWV0YVByb3BlcnR5OlwiTWV0YVByb3BlcnR5XCIsTWV0aG9kRGVmaW5pdGlvbjpcIk1ldGhvZERlZmluaXRpb25cIixOZXdFeHByZXNzaW9uOlwiTmV3RXhwcmVzc2lvblwiLE9iamVjdEV4cHJlc3Npb246XCJPYmplY3RFeHByZXNzaW9uXCIsT2JqZWN0UGF0dGVybjpcIk9iamVjdFBhdHRlcm5cIixQcm9ncmFtOlwiUHJvZ3JhbVwiLFByb3BlcnR5OlwiUHJvcGVydHlcIixSZXN0RWxlbWVudDpcIlJlc3RFbGVtZW50XCIsUmV0dXJuU3RhdGVtZW50OlwiUmV0dXJuU3RhdGVtZW50XCIsU2VxdWVuY2VFeHByZXNzaW9uOlwiU2VxdWVuY2VFeHByZXNzaW9uXCIsU3ByZWFkRWxlbWVudDpcIlNwcmVhZEVsZW1lbnRcIixTdXBlcjpcIlN1cGVyXCIsU3dpdGNoQ2FzZTpcIlN3aXRjaENhc2VcIixTd2l0Y2hTdGF0ZW1lbnQ6XCJTd2l0Y2hTdGF0ZW1lbnRcIixUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb246XCJUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb25cIixUZW1wbGF0ZUVsZW1lbnQ6XCJUZW1wbGF0ZUVsZW1lbnRcIixUZW1wbGF0ZUxpdGVyYWw6XCJUZW1wbGF0ZUxpdGVyYWxcIixUaGlzRXhwcmVzc2lvbjpcIlRoaXNFeHByZXNzaW9uXCIsVGhyb3dTdGF0ZW1lbnQ6XCJUaHJvd1N0YXRlbWVudFwiLFRyeVN0YXRlbWVudDpcIlRyeVN0YXRlbWVudFwiLFVuYXJ5RXhwcmVzc2lvbjpcIlVuYXJ5RXhwcmVzc2lvblwiLFVwZGF0ZUV4cHJlc3Npb246XCJVcGRhdGVFeHByZXNzaW9uXCIsVmFyaWFibGVEZWNsYXJhdGlvbjpcIlZhcmlhYmxlRGVjbGFyYXRpb25cIixWYXJpYWJsZURlY2xhcmF0b3I6XCJWYXJpYWJsZURlY2xhcmF0b3JcIixXaGlsZVN0YXRlbWVudDpcIldoaWxlU3RhdGVtZW50XCIsV2l0aFN0YXRlbWVudDpcIldpdGhTdGF0ZW1lbnRcIixZaWVsZEV4cHJlc3Npb246XCJZaWVsZEV4cHJlc3Npb25cIn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDQpLGE9cig1KSxzPXIoNiksdT1yKDcpLGw9cig4KSxjPXIoMTMpLGg9cigxNCk7ZnVuY3Rpb24gcChlKXt2YXIgdDtzd2l0Y2goZS50eXBlKXtjYXNlIHMuSlNYU3ludGF4LkpTWElkZW50aWZpZXI6dD1lLm5hbWU7YnJlYWs7Y2FzZSBzLkpTWFN5bnRheC5KU1hOYW1lc3BhY2VkTmFtZTp2YXIgcj1lO3Q9cChyLm5hbWVzcGFjZSkrXCI6XCIrcChyLm5hbWUpO2JyZWFrO2Nhc2Ugcy5KU1hTeW50YXguSlNYTWVtYmVyRXhwcmVzc2lvbjp2YXIgbj1lO3Q9cChuLm9iamVjdCkrXCIuXCIrcChuLnByb3BlcnR5KX1yZXR1cm4gdH1jLlRva2VuTmFtZVsxMDBdPVwiSlNYSWRlbnRpZmllclwiLGMuVG9rZW5OYW1lWzEwMV09XCJKU1hUZXh0XCI7dmFyIGY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIsbil7cmV0dXJuIGUuY2FsbCh0aGlzLHQscixuKXx8dGhpc31yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLnBhcnNlUHJpbWFyeUV4cHJlc3Npb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXRjaChcIjxcIik/dGhpcy5wYXJzZUpTWFJvb3QoKTplLnByb3RvdHlwZS5wYXJzZVByaW1hcnlFeHByZXNzaW9uLmNhbGwodGhpcyl9LHQucHJvdG90eXBlLnN0YXJ0SlNYPWZ1bmN0aW9uKCl7dGhpcy5zY2FubmVyLmluZGV4PXRoaXMuc3RhcnRNYXJrZXIuaW5kZXgsdGhpcy5zY2FubmVyLmxpbmVOdW1iZXI9dGhpcy5zdGFydE1hcmtlci5saW5lLHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ9dGhpcy5zdGFydE1hcmtlci5pbmRleC10aGlzLnN0YXJ0TWFya2VyLmNvbHVtbn0sdC5wcm90b3R5cGUuZmluaXNoSlNYPWZ1bmN0aW9uKCl7dGhpcy5uZXh0VG9rZW4oKX0sdC5wcm90b3R5cGUucmVlbnRlckpTWD1mdW5jdGlvbigpe3RoaXMuc3RhcnRKU1goKSx0aGlzLmV4cGVjdEpTWChcIn1cIiksdGhpcy5jb25maWcudG9rZW5zJiZ0aGlzLnRva2Vucy5wb3AoKX0sdC5wcm90b3R5cGUuY3JlYXRlSlNYTm9kZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbGxlY3RDb21tZW50cygpLHtpbmRleDp0aGlzLnNjYW5uZXIuaW5kZXgsbGluZTp0aGlzLnNjYW5uZXIubGluZU51bWJlcixjb2x1bW46dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnR9fSx0LnByb3RvdHlwZS5jcmVhdGVKU1hDaGlsZE5vZGU9ZnVuY3Rpb24oKXtyZXR1cm57aW5kZXg6dGhpcy5zY2FubmVyLmluZGV4LGxpbmU6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0fX0sdC5wcm90b3R5cGUuc2NhblhIVE1MRW50aXR5PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cIiZcIixyPSEwLG49ITEsaT0hMSxhPSExOyF0aGlzLnNjYW5uZXIuZW9mKCkmJnImJiFuOyl7dmFyIHM9dGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdO2lmKHM9PT1lKWJyZWFrO2lmKG49XCI7XCI9PT1zLHQrPXMsKyt0aGlzLnNjYW5uZXIuaW5kZXgsIW4pc3dpdGNoKHQubGVuZ3RoKXtjYXNlIDI6aT1cIiNcIj09PXM7YnJlYWs7Y2FzZSAzOmkmJihyPShhPVwieFwiPT09cyl8fG8uQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHMuY2hhckNvZGVBdCgwKSksaT1pJiYhYSk7YnJlYWs7ZGVmYXVsdDpyPShyPXImJiEoaSYmIW8uQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHMuY2hhckNvZGVBdCgwKSkpKSYmIShhJiYhby5DaGFyYWN0ZXIuaXNIZXhEaWdpdChzLmNoYXJDb2RlQXQoMCkpKX19aWYociYmbiYmdC5sZW5ndGg+Mil7dmFyIHU9dC5zdWJzdHIoMSx0Lmxlbmd0aC0yKTtpJiZ1Lmxlbmd0aD4xP3Q9U3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCh1LnN1YnN0cigxKSwxMCkpOmEmJnUubGVuZ3RoPjI/dD1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KFwiMFwiK3Uuc3Vic3RyKDEpLDE2KSk6aXx8YXx8IWguWEhUTUxFbnRpdGllc1t1XXx8KHQ9aC5YSFRNTEVudGl0aWVzW3VdKX1yZXR1cm4gdH0sdC5wcm90b3R5cGUubGV4SlNYPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zY2FubmVyLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuc2Nhbm5lci5pbmRleCk7aWYoNjA9PT1lfHw2Mj09PWV8fDQ3PT09ZXx8NTg9PT1lfHw2MT09PWV8fDEyMz09PWV8fDEyNT09PWUpcmV0dXJue3R5cGU6Nyx2YWx1ZTpzPXRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4KytdLGxpbmVOdW1iZXI6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMuc2Nhbm5lci5saW5lU3RhcnQsc3RhcnQ6dGhpcy5zY2FubmVyLmluZGV4LTEsZW5kOnRoaXMuc2Nhbm5lci5pbmRleH07aWYoMzQ9PT1lfHwzOT09PWUpe2Zvcih2YXIgdD10aGlzLnNjYW5uZXIuaW5kZXgscj10aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleCsrXSxuPVwiXCI7IXRoaXMuc2Nhbm5lci5lb2YoKSYmKHU9dGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXgrK10pIT09cjspbis9XCImXCI9PT11P3RoaXMuc2NhblhIVE1MRW50aXR5KHIpOnU7cmV0dXJue3R5cGU6OCx2YWx1ZTpuLGxpbmVOdW1iZXI6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMuc2Nhbm5lci5saW5lU3RhcnQsc3RhcnQ6dCxlbmQ6dGhpcy5zY2FubmVyLmluZGV4fX1pZig0Nj09PWUpe3ZhciBpPXRoaXMuc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLnNjYW5uZXIuaW5kZXgrMSksYT10aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4KzIpLHM9NDY9PT1pJiY0Nj09PWE/XCIuLi5cIjpcIi5cIjtyZXR1cm4gdD10aGlzLnNjYW5uZXIuaW5kZXgsdGhpcy5zY2FubmVyLmluZGV4Kz1zLmxlbmd0aCx7dHlwZTo3LHZhbHVlOnMsbGluZU51bWJlcjp0aGlzLnNjYW5uZXIubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5zY2FubmVyLmxpbmVTdGFydCxzdGFydDp0LGVuZDp0aGlzLnNjYW5uZXIuaW5kZXh9fWlmKDk2PT09ZSlyZXR1cm57dHlwZToxMCx2YWx1ZTpcIlwiLGxpbmVOdW1iZXI6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMuc2Nhbm5lci5saW5lU3RhcnQsc3RhcnQ6dGhpcy5zY2FubmVyLmluZGV4LGVuZDp0aGlzLnNjYW5uZXIuaW5kZXh9O2lmKG8uQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KGUpJiY5MiE9PWUpe2Zvcih0PXRoaXMuc2Nhbm5lci5pbmRleCwrK3RoaXMuc2Nhbm5lci5pbmRleDshdGhpcy5zY2FubmVyLmVvZigpOyl7dmFyIHU9dGhpcy5zY2FubmVyLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuc2Nhbm5lci5pbmRleCk7aWYoby5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydCh1KSYmOTIhPT11KSsrdGhpcy5zY2FubmVyLmluZGV4O2Vsc2V7aWYoNDUhPT11KWJyZWFrOysrdGhpcy5zY2FubmVyLmluZGV4fX1yZXR1cm57dHlwZToxMDAsdmFsdWU6dGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZSh0LHRoaXMuc2Nhbm5lci5pbmRleCksbGluZU51bWJlcjp0aGlzLnNjYW5uZXIubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5zY2FubmVyLmxpbmVTdGFydCxzdGFydDp0LGVuZDp0aGlzLnNjYW5uZXIuaW5kZXh9fXJldHVybiB0aGlzLnNjYW5uZXIubGV4KCl9LHQucHJvdG90eXBlLm5leHRKU1hUb2tlbj1mdW5jdGlvbigpe3RoaXMuY29sbGVjdENvbW1lbnRzKCksdGhpcy5zdGFydE1hcmtlci5pbmRleD10aGlzLnNjYW5uZXIuaW5kZXgsdGhpcy5zdGFydE1hcmtlci5saW5lPXRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLHRoaXMuc3RhcnRNYXJrZXIuY29sdW1uPXRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0O3ZhciBlPXRoaXMubGV4SlNYKCk7cmV0dXJuIHRoaXMubGFzdE1hcmtlci5pbmRleD10aGlzLnNjYW5uZXIuaW5kZXgsdGhpcy5sYXN0TWFya2VyLmxpbmU9dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsdGhpcy5sYXN0TWFya2VyLmNvbHVtbj10aGlzLnNjYW5uZXIuaW5kZXgtdGhpcy5zY2FubmVyLmxpbmVTdGFydCx0aGlzLmNvbmZpZy50b2tlbnMmJnRoaXMudG9rZW5zLnB1c2godGhpcy5jb252ZXJ0VG9rZW4oZSkpLGV9LHQucHJvdG90eXBlLm5leHRKU1hUZXh0PWZ1bmN0aW9uKCl7dGhpcy5zdGFydE1hcmtlci5pbmRleD10aGlzLnNjYW5uZXIuaW5kZXgsdGhpcy5zdGFydE1hcmtlci5saW5lPXRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLHRoaXMuc3RhcnRNYXJrZXIuY29sdW1uPXRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0O2Zvcih2YXIgZT10aGlzLnNjYW5uZXIuaW5kZXgsdD1cIlwiOyF0aGlzLnNjYW5uZXIuZW9mKCk7KXt2YXIgcj10aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleF07aWYoXCJ7XCI9PT1yfHxcIjxcIj09PXIpYnJlYWs7Kyt0aGlzLnNjYW5uZXIuaW5kZXgsdCs9cixvLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKHIuY2hhckNvZGVBdCgwKSkmJigrK3RoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFwiXFxyXCI9PT1yJiZcIlxcblwiPT09dGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdJiYrK3RoaXMuc2Nhbm5lci5pbmRleCx0aGlzLnNjYW5uZXIubGluZVN0YXJ0PXRoaXMuc2Nhbm5lci5pbmRleCl9dGhpcy5sYXN0TWFya2VyLmluZGV4PXRoaXMuc2Nhbm5lci5pbmRleCx0aGlzLmxhc3RNYXJrZXIubGluZT10aGlzLnNjYW5uZXIubGluZU51bWJlcix0aGlzLmxhc3RNYXJrZXIuY29sdW1uPXRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0O3ZhciBuPXt0eXBlOjEwMSx2YWx1ZTp0LGxpbmVOdW1iZXI6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMuc2Nhbm5lci5saW5lU3RhcnQsc3RhcnQ6ZSxlbmQ6dGhpcy5zY2FubmVyLmluZGV4fTtyZXR1cm4gdC5sZW5ndGg+MCYmdGhpcy5jb25maWcudG9rZW5zJiZ0aGlzLnRva2Vucy5wdXNoKHRoaXMuY29udmVydFRva2VuKG4pKSxufSx0LnByb3RvdHlwZS5wZWVrSlNYVG9rZW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnNjYW5uZXIuc2F2ZVN0YXRlKCk7dGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpO3ZhciB0PXRoaXMubGV4SlNYKCk7cmV0dXJuIHRoaXMuc2Nhbm5lci5yZXN0b3JlU3RhdGUoZSksdH0sdC5wcm90b3R5cGUuZXhwZWN0SlNYPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubmV4dEpTWFRva2VuKCk7Nz09PXQudHlwZSYmdC52YWx1ZT09PWV8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCl9LHQucHJvdG90eXBlLm1hdGNoSlNYPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGVla0pTWFRva2VuKCk7cmV0dXJuIDc9PT10LnR5cGUmJnQudmFsdWU9PT1lfSx0LnByb3RvdHlwZS5wYXJzZUpTWElkZW50aWZpZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZUpTWE5vZGUoKSx0PXRoaXMubmV4dEpTWFRva2VuKCk7cmV0dXJuIDEwMCE9PXQudHlwZSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0KSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuSlNYSWRlbnRpZmllcih0LnZhbHVlKSl9LHQucHJvdG90eXBlLnBhcnNlSlNYRWxlbWVudE5hbWU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZUpTWE5vZGUoKSx0PXRoaXMucGFyc2VKU1hJZGVudGlmaWVyKCk7aWYodGhpcy5tYXRjaEpTWChcIjpcIikpe3ZhciByPXQ7dGhpcy5leHBlY3RKU1goXCI6XCIpO3ZhciBuPXRoaXMucGFyc2VKU1hJZGVudGlmaWVyKCk7dD10aGlzLmZpbmFsaXplKGUsbmV3IGEuSlNYTmFtZXNwYWNlZE5hbWUocixuKSl9ZWxzZSBpZih0aGlzLm1hdGNoSlNYKFwiLlwiKSlmb3IoO3RoaXMubWF0Y2hKU1goXCIuXCIpOyl7dmFyIGk9dDt0aGlzLmV4cGVjdEpTWChcIi5cIik7dmFyIG89dGhpcy5wYXJzZUpTWElkZW50aWZpZXIoKTt0PXRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hNZW1iZXJFeHByZXNzaW9uKGksbykpfXJldHVybiB0fSx0LnByb3RvdHlwZS5wYXJzZUpTWEF0dHJpYnV0ZU5hbWU9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuY3JlYXRlSlNYTm9kZSgpLHI9dGhpcy5wYXJzZUpTWElkZW50aWZpZXIoKTtpZih0aGlzLm1hdGNoSlNYKFwiOlwiKSl7dmFyIG49cjt0aGlzLmV4cGVjdEpTWChcIjpcIik7dmFyIGk9dGhpcy5wYXJzZUpTWElkZW50aWZpZXIoKTtlPXRoaXMuZmluYWxpemUodCxuZXcgYS5KU1hOYW1lc3BhY2VkTmFtZShuLGkpKX1lbHNlIGU9cjtyZXR1cm4gZX0sdC5wcm90b3R5cGUucGFyc2VKU1hTdHJpbmdMaXRlcmFsQXR0cmlidXRlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVKU1hOb2RlKCksdD10aGlzLm5leHRKU1hUb2tlbigpOzghPT10LnR5cGUmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCk7dmFyIHI9dGhpcy5nZXRUb2tlblJhdyh0KTtyZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyB1LkxpdGVyYWwodC52YWx1ZSxyKSl9LHQucHJvdG90eXBlLnBhcnNlSlNYRXhwcmVzc2lvbkF0dHJpYnV0ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlSlNYTm9kZSgpO3RoaXMuZXhwZWN0SlNYKFwie1wiKSx0aGlzLmZpbmlzaEpTWCgpLHRoaXMubWF0Y2goXCJ9XCIpJiZ0aGlzLnRvbGVyYXRlRXJyb3IoXCJKU1ggYXR0cmlidXRlcyBtdXN0IG9ubHkgYmUgYXNzaWduZWQgYSBub24tZW1wdHkgZXhwcmVzc2lvblwiKTt2YXIgdD10aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtyZXR1cm4gdGhpcy5yZWVudGVySlNYKCksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWEV4cHJlc3Npb25Db250YWluZXIodCkpfSx0LnByb3RvdHlwZS5wYXJzZUpTWEF0dHJpYnV0ZVZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF0Y2hKU1goXCJ7XCIpP3RoaXMucGFyc2VKU1hFeHByZXNzaW9uQXR0cmlidXRlKCk6dGhpcy5tYXRjaEpTWChcIjxcIik/dGhpcy5wYXJzZUpTWEVsZW1lbnQoKTp0aGlzLnBhcnNlSlNYU3RyaW5nTGl0ZXJhbEF0dHJpYnV0ZSgpfSx0LnByb3RvdHlwZS5wYXJzZUpTWE5hbWVWYWx1ZUF0dHJpYnV0ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlSlNYTm9kZSgpLHQ9dGhpcy5wYXJzZUpTWEF0dHJpYnV0ZU5hbWUoKSxyPW51bGw7cmV0dXJuIHRoaXMubWF0Y2hKU1goXCI9XCIpJiYodGhpcy5leHBlY3RKU1goXCI9XCIpLHI9dGhpcy5wYXJzZUpTWEF0dHJpYnV0ZVZhbHVlKCkpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hBdHRyaWJ1dGUodCxyKSl9LHQucHJvdG90eXBlLnBhcnNlSlNYU3ByZWFkQXR0cmlidXRlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVKU1hOb2RlKCk7dGhpcy5leHBlY3RKU1goXCJ7XCIpLHRoaXMuZXhwZWN0SlNYKFwiLi4uXCIpLHRoaXMuZmluaXNoSlNYKCk7dmFyIHQ9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7cmV0dXJuIHRoaXMucmVlbnRlckpTWCgpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hTcHJlYWRBdHRyaWJ1dGUodCkpfSx0LnByb3RvdHlwZS5wYXJzZUpTWEF0dHJpYnV0ZXM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W107IXRoaXMubWF0Y2hKU1goXCIvXCIpJiYhdGhpcy5tYXRjaEpTWChcIj5cIik7KXt2YXIgdD10aGlzLm1hdGNoSlNYKFwie1wiKT90aGlzLnBhcnNlSlNYU3ByZWFkQXR0cmlidXRlKCk6dGhpcy5wYXJzZUpTWE5hbWVWYWx1ZUF0dHJpYnV0ZSgpO2UucHVzaCh0KX1yZXR1cm4gZX0sdC5wcm90b3R5cGUucGFyc2VKU1hPcGVuaW5nRWxlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlSlNYTm9kZSgpO3RoaXMuZXhwZWN0SlNYKFwiPFwiKTt2YXIgdD10aGlzLnBhcnNlSlNYRWxlbWVudE5hbWUoKSxyPXRoaXMucGFyc2VKU1hBdHRyaWJ1dGVzKCksbj10aGlzLm1hdGNoSlNYKFwiL1wiKTtyZXR1cm4gbiYmdGhpcy5leHBlY3RKU1goXCIvXCIpLHRoaXMuZXhwZWN0SlNYKFwiPlwiKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuSlNYT3BlbmluZ0VsZW1lbnQodCxuLHIpKX0sdC5wcm90b3R5cGUucGFyc2VKU1hCb3VuZGFyeUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZUpTWE5vZGUoKTtpZih0aGlzLmV4cGVjdEpTWChcIjxcIiksdGhpcy5tYXRjaEpTWChcIi9cIikpe3RoaXMuZXhwZWN0SlNYKFwiL1wiKTt2YXIgdD10aGlzLnBhcnNlSlNYRWxlbWVudE5hbWUoKTtyZXR1cm4gdGhpcy5leHBlY3RKU1goXCI+XCIpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hDbG9zaW5nRWxlbWVudCh0KSl9dmFyIHI9dGhpcy5wYXJzZUpTWEVsZW1lbnROYW1lKCksbj10aGlzLnBhcnNlSlNYQXR0cmlidXRlcygpLGk9dGhpcy5tYXRjaEpTWChcIi9cIik7cmV0dXJuIGkmJnRoaXMuZXhwZWN0SlNYKFwiL1wiKSx0aGlzLmV4cGVjdEpTWChcIj5cIiksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWE9wZW5pbmdFbGVtZW50KHIsaSxuKSl9LHQucHJvdG90eXBlLnBhcnNlSlNYRW1wdHlFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVKU1hDaGlsZE5vZGUoKTtyZXR1cm4gdGhpcy5jb2xsZWN0Q29tbWVudHMoKSx0aGlzLmxhc3RNYXJrZXIuaW5kZXg9dGhpcy5zY2FubmVyLmluZGV4LHRoaXMubGFzdE1hcmtlci5saW5lPXRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLHRoaXMubGFzdE1hcmtlci5jb2x1bW49dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnQsdGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWEVtcHR5RXhwcmVzc2lvbil9LHQucHJvdG90eXBlLnBhcnNlSlNYRXhwcmVzc2lvbkNvbnRhaW5lcj1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5jcmVhdGVKU1hOb2RlKCk7cmV0dXJuIHRoaXMuZXhwZWN0SlNYKFwie1wiKSx0aGlzLm1hdGNoSlNYKFwifVwiKT8oZT10aGlzLnBhcnNlSlNYRW1wdHlFeHByZXNzaW9uKCksdGhpcy5leHBlY3RKU1goXCJ9XCIpKToodGhpcy5maW5pc2hKU1goKSxlPXRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpLHRoaXMucmVlbnRlckpTWCgpKSx0aGlzLmZpbmFsaXplKHQsbmV3IGEuSlNYRXhwcmVzc2lvbkNvbnRhaW5lcihlKSl9LHQucHJvdG90eXBlLnBhcnNlSlNYQ2hpbGRyZW49ZnVuY3Rpb24oKXtmb3IodmFyIGU9W107IXRoaXMuc2Nhbm5lci5lb2YoKTspe3ZhciB0PXRoaXMuY3JlYXRlSlNYQ2hpbGROb2RlKCkscj10aGlzLm5leHRKU1hUZXh0KCk7aWYoci5zdGFydDxyLmVuZCl7dmFyIG49dGhpcy5nZXRUb2tlblJhdyhyKSxpPXRoaXMuZmluYWxpemUodCxuZXcgYS5KU1hUZXh0KHIudmFsdWUsbikpO2UucHVzaChpKX1pZihcIntcIiE9PXRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4XSlicmVhazt2YXIgbz10aGlzLnBhcnNlSlNYRXhwcmVzc2lvbkNvbnRhaW5lcigpO2UucHVzaChvKX1yZXR1cm4gZX0sdC5wcm90b3R5cGUucGFyc2VDb21wbGV4SlNYRWxlbWVudD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W107IXRoaXMuc2Nhbm5lci5lb2YoKTspe2UuY2hpbGRyZW49ZS5jaGlsZHJlbi5jb25jYXQodGhpcy5wYXJzZUpTWENoaWxkcmVuKCkpO3ZhciByPXRoaXMuY3JlYXRlSlNYQ2hpbGROb2RlKCksbj10aGlzLnBhcnNlSlNYQm91bmRhcnlFbGVtZW50KCk7aWYobi50eXBlPT09cy5KU1hTeW50YXguSlNYT3BlbmluZ0VsZW1lbnQpe3ZhciBpPW47aWYoaS5zZWxmQ2xvc2luZyl7dmFyIG89dGhpcy5maW5hbGl6ZShyLG5ldyBhLkpTWEVsZW1lbnQoaSxbXSxudWxsKSk7ZS5jaGlsZHJlbi5wdXNoKG8pfWVsc2UgdC5wdXNoKGUpLGU9e25vZGU6cixvcGVuaW5nOmksY2xvc2luZzpudWxsLGNoaWxkcmVuOltdfX1pZihuLnR5cGU9PT1zLkpTWFN5bnRheC5KU1hDbG9zaW5nRWxlbWVudCl7ZS5jbG9zaW5nPW47dmFyIHU9cChlLm9wZW5pbmcubmFtZSk7aWYodSE9PXAoZS5jbG9zaW5nLm5hbWUpJiZ0aGlzLnRvbGVyYXRlRXJyb3IoXCJFeHBlY3RlZCBjb3JyZXNwb25kaW5nIEpTWCBjbG9zaW5nIHRhZyBmb3IgJTBcIix1KSwhKHQubGVuZ3RoPjApKWJyZWFrO289dGhpcy5maW5hbGl6ZShlLm5vZGUsbmV3IGEuSlNYRWxlbWVudChlLm9wZW5pbmcsZS5jaGlsZHJlbixlLmNsb3NpbmcpKSwoZT10W3QubGVuZ3RoLTFdKS5jaGlsZHJlbi5wdXNoKG8pLHQucG9wKCl9fXJldHVybiBlfSx0LnByb3RvdHlwZS5wYXJzZUpTWEVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZUpTWE5vZGUoKSx0PXRoaXMucGFyc2VKU1hPcGVuaW5nRWxlbWVudCgpLHI9W10sbj1udWxsO2lmKCF0LnNlbGZDbG9zaW5nKXt2YXIgaT10aGlzLnBhcnNlQ29tcGxleEpTWEVsZW1lbnQoe25vZGU6ZSxvcGVuaW5nOnQsY2xvc2luZzpuLGNoaWxkcmVuOnJ9KTtyPWkuY2hpbGRyZW4sbj1pLmNsb3Npbmd9cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hFbGVtZW50KHQscixuKSl9LHQucHJvdG90eXBlLnBhcnNlSlNYUm9vdD1mdW5jdGlvbigpe3RoaXMuY29uZmlnLnRva2VucyYmdGhpcy50b2tlbnMucG9wKCksdGhpcy5zdGFydEpTWCgpO3ZhciBlPXRoaXMucGFyc2VKU1hFbGVtZW50KCk7cmV0dXJuIHRoaXMuZmluaXNoSlNYKCksZX0sdC5wcm90b3R5cGUuaXNTdGFydE9mRXhwcmVzc2lvbj1mdW5jdGlvbigpe3JldHVybiBlLnByb3RvdHlwZS5pc1N0YXJ0T2ZFeHByZXNzaW9uLmNhbGwodGhpcyl8fHRoaXMubWF0Y2goXCI8XCIpfSx0fShsLlBhcnNlcik7dC5KU1hQYXJzZXI9Zn0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj17Tm9uQXNjaWlJZGVudGlmaWVyU3RhcnQ6L1tcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4QTAtXFx1MDhCNFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEFGOVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNTgtXFx1MEM1QVxcdTBDNjBcXHUwQzYxXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE2MC1cXHUyMTg4XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0VFXFx1MkNGMlxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlCLVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFRlxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMzAtXFx1REY0QVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4My1cXHVEREIyXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMkJcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERURFXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0RcXHVERjUwXFx1REY1RC1cXHVERjYxXXxcXHVEODA1W1xcdURDODAtXFx1RENBRlxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERBRVxcdURERDgtXFx1REREQlxcdURFMDAtXFx1REUyRlxcdURFNDRcXHVERTgwLVxcdURFQUFcXHVERjAwLVxcdURGMTldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0RGXFx1RENGRlxcdURFQzAtXFx1REVGOF18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3Ml1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY0MC1cXHVERjQzXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTBcXHVERjkzLVxcdURGOUZdfFxcdUQ4MkNbXFx1REMwMFxcdURDMDFdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0vLE5vbkFzY2lpSWRlbnRpZmllclBhcnQ6L1tcXHhBQVxceEI1XFx4QjdcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzAwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4My1cXHUwNDg3XFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1OTEtXFx1MDVCRFxcdTA1QkZcXHUwNUMxXFx1MDVDMlxcdTA1QzRcXHUwNUM1XFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MTAtXFx1MDYxQVxcdTA2MjAtXFx1MDY2OVxcdTA2NkUtXFx1MDZEM1xcdTA2RDUtXFx1MDZEQ1xcdTA2REYtXFx1MDZFOFxcdTA2RUEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwLVxcdTA3NEFcXHUwNzRELVxcdTA3QjFcXHUwN0MwLVxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODJEXFx1MDg0MC1cXHUwODVCXFx1MDhBMC1cXHUwOEI0XFx1MDhFMy1cXHUwOTYzXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MS1cXHUwOTgzXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCQy1cXHUwOUM0XFx1MDlDN1xcdTA5QzhcXHUwOUNCLVxcdTA5Q0VcXHUwOUQ3XFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTNcXHUwOUU2LVxcdTA5RjFcXHUwQTAxLVxcdTBBMDNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBM0NcXHUwQTNFLVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE2Ni1cXHUwQTc1XFx1MEE4MS1cXHUwQTgzXFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJDLVxcdTBBQzVcXHUwQUM3LVxcdTBBQzlcXHUwQUNCLVxcdTBBQ0RcXHUwQUQwXFx1MEFFMC1cXHUwQUUzXFx1MEFFNi1cXHUwQUVGXFx1MEFGOVxcdTBCMDEtXFx1MEIwM1xcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNDLVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEItXFx1MEI0RFxcdTBCNTZcXHUwQjU3XFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjNcXHUwQjY2LVxcdTBCNkZcXHUwQjcxXFx1MEI4MlxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJCRS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNEXFx1MEJEMFxcdTBCRDdcXHUwQkU2LVxcdTBCRUZcXHUwQzAwLVxcdTBDMDNcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNELVxcdTBDNDRcXHUwQzQ2LVxcdTBDNDhcXHUwQzRBLVxcdTBDNERcXHUwQzU1XFx1MEM1NlxcdTBDNTgtXFx1MEM1QVxcdTBDNjAtXFx1MEM2M1xcdTBDNjYtXFx1MEM2RlxcdTBDODEtXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkMtXFx1MENDNFxcdTBDQzYtXFx1MENDOFxcdTBDQ0EtXFx1MENDRFxcdTBDRDVcXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFM1xcdTBDRTYtXFx1MENFRlxcdTBDRjFcXHUwQ0YyXFx1MEQwMS1cXHUwRDAzXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRC1cXHUwRDQ0XFx1MEQ0Ni1cXHUwRDQ4XFx1MEQ0QS1cXHUwRDRFXFx1MEQ1N1xcdTBENUYtXFx1MEQ2M1xcdTBENjYtXFx1MEQ2RlxcdTBEN0EtXFx1MEQ3RlxcdTBEODJcXHUwRDgzXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBEQ0FcXHUwRENGLVxcdTBERDRcXHUwREQ2XFx1MEREOC1cXHUwRERGXFx1MERFNi1cXHUwREVGXFx1MERGMlxcdTBERjNcXHUwRTAxLVxcdTBFM0FcXHUwRTQwLVxcdTBFNEVcXHUwRTUwLVxcdTBFNTlcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCOVxcdTBFQkItXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRUM4LVxcdTBFQ0RcXHUwRUQwLVxcdTBFRDlcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEYxOFxcdTBGMTlcXHUwRjIwLVxcdTBGMjlcXHUwRjM1XFx1MEYzN1xcdTBGMzlcXHUwRjNFLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjcxLVxcdTBGODRcXHUwRjg2LVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAwMC1cXHUxMDQ5XFx1MTA1MC1cXHUxMDlEXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNUQtXFx1MTM1RlxcdTEzNjktXFx1MTM3MVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxNFxcdTE3MjAtXFx1MTczNFxcdTE3NDAtXFx1MTc1M1xcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3NzJcXHUxNzczXFx1MTc4MC1cXHUxN0QzXFx1MTdEN1xcdTE3RENcXHUxN0REXFx1MTdFMC1cXHUxN0U5XFx1MTgwQi1cXHUxODBEXFx1MTgxMC1cXHUxODE5XFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTkyMC1cXHUxOTJCXFx1MTkzMC1cXHUxOTNCXFx1MTk0Ni1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MTlEMC1cXHUxOURBXFx1MUEwMC1cXHUxQTFCXFx1MUEyMC1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3Ri1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUFBN1xcdTFBQjAtXFx1MUFCRFxcdTFCMDAtXFx1MUI0QlxcdTFCNTAtXFx1MUI1OVxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUJGM1xcdTFDMDAtXFx1MUMzN1xcdTFDNDAtXFx1MUM0OVxcdTFDNEQtXFx1MUM3RFxcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNGNlxcdTFDRjhcXHUxQ0Y5XFx1MUQwMC1cXHUxREY1XFx1MURGQy1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwMENcXHUyMDBEXFx1MjAzRlxcdTIwNDBcXHUyMDU0XFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMEQwLVxcdTIwRENcXHUyMEUxXFx1MjBFNS1cXHUyMEYwXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOC1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxNjAtXFx1MjE4OFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEN0YtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJERTAtXFx1MkRGRlxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyRlxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOTktXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYyQlxcdUE2NDAtXFx1QTY2RlxcdUE2NzQtXFx1QTY3RFxcdUE2N0YtXFx1QTZGMVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgyN1xcdUE4NDAtXFx1QTg3M1xcdUE4ODAtXFx1QThDNFxcdUE4RDAtXFx1QThEOVxcdUE4RTAtXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwMC1cXHVBOTJEXFx1QTkzMC1cXHVBOTUzXFx1QTk2MC1cXHVBOTdDXFx1QTk4MC1cXHVBOUMwXFx1QTlDRi1cXHVBOUQ5XFx1QTlFMC1cXHVBOUZFXFx1QUEwMC1cXHVBQTM2XFx1QUE0MC1cXHVBQTREXFx1QUE1MC1cXHVBQTU5XFx1QUE2MC1cXHVBQTc2XFx1QUE3QS1cXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVGXFx1QUFGMi1cXHVBQUY2XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkVBXFx1QUJFQ1xcdUFCRURcXHVBQkYwLVxcdUFCRjlcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFELVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFMDAtXFx1RkUwRlxcdUZFMjAtXFx1RkUyRlxcdUZFMzNcXHVGRTM0XFx1RkU0RC1cXHVGRTRGXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYxMC1cXHVGRjE5XFx1RkYyMS1cXHVGRjNBXFx1RkYzRlxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURERkRcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERUUwXFx1REYwMC1cXHVERjFGXFx1REYzMC1cXHVERjRBXFx1REY1MC1cXHVERjdBXFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXFx1REZEMS1cXHVERkQ1XXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQTAtXFx1RENBOVxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDAtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNlxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDRbXFx1REMwMC1cXHVEQzQ2XFx1REM2Ni1cXHVEQzZGXFx1REM3Ri1cXHVEQ0JBXFx1RENEMC1cXHVEQ0U4XFx1RENGMC1cXHVEQ0Y5XFx1REQwMC1cXHVERDM0XFx1REQzNi1cXHVERDNGXFx1REQ1MC1cXHVERDczXFx1REQ3NlxcdUREODAtXFx1RERDNFxcdUREQ0EtXFx1RERDQ1xcdURERDAtXFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMzdcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERUVBXFx1REVGMC1cXHVERUY5XFx1REYwMC1cXHVERjAzXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0MtXFx1REY0NFxcdURGNDdcXHVERjQ4XFx1REY0Qi1cXHVERjREXFx1REY1MFxcdURGNTdcXHVERjVELVxcdURGNjNcXHVERjY2LVxcdURGNkNcXHVERjcwLVxcdURGNzRdfFxcdUQ4MDVbXFx1REM4MC1cXHVEQ0M1XFx1RENDN1xcdURDRDAtXFx1RENEOVxcdUREODAtXFx1RERCNVxcdUREQjgtXFx1RERDMFxcdURERDgtXFx1RERERFxcdURFMDAtXFx1REU0MFxcdURFNDRcXHVERTUwLVxcdURFNTlcXHVERTgwLVxcdURFQjdcXHVERUMwLVxcdURFQzlcXHVERjAwLVxcdURGMTlcXHVERjFELVxcdURGMkJcXHVERjMwLVxcdURGMzldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0U5XFx1RENGRlxcdURFQzAtXFx1REVGOF18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3Ml1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REU2MC1cXHVERTY5XFx1REVEMC1cXHVERUVEXFx1REVGMC1cXHVERUY0XFx1REYwMC1cXHVERjM2XFx1REY0MC1cXHVERjQzXFx1REY1MC1cXHVERjU5XFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTAtXFx1REY3RVxcdURGOEYtXFx1REY5Rl18XFx1RDgyQ1tcXHVEQzAwXFx1REMwMV18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTlcXHVEQzlEXFx1REM5RV18XFx1RDgzNFtcXHVERDY1LVxcdURENjlcXHVERDZELVxcdURENzJcXHVERDdCLVxcdUREODJcXHVERDg1LVxcdUREOEJcXHVEREFBLVxcdUREQURcXHVERTQyLVxcdURFNDRdfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQlxcdURGQ0UtXFx1REZGRl18XFx1RDgzNltcXHVERTAwLVxcdURFMzZcXHVERTNCLVxcdURFNkNcXHVERTc1XFx1REU4NFxcdURFOUItXFx1REU5RlxcdURFQTEtXFx1REVBRl18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRcXHVEQ0QwLVxcdURDRDZdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXXxcXHVEQjQwW1xcdUREMDAtXFx1RERFRl0vfTt0LkNoYXJhY3Rlcj17ZnJvbUNvZGVQb2ludDpmdW5jdGlvbihlKXtyZXR1cm4gZTw2NTUzNj9TdHJpbmcuZnJvbUNoYXJDb2RlKGUpOlN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYrKGUtNjU1MzY+PjEwKSkrU3RyaW5nLmZyb21DaGFyQ29kZSg1NjMyMCsoZS02NTUzNiYxMDIzKSl9LGlzV2hpdGVTcGFjZTpmdW5jdGlvbihlKXtyZXR1cm4gMzI9PT1lfHw5PT09ZXx8MTE9PT1lfHwxMj09PWV8fDE2MD09PWV8fGU+PTU3NjAmJls1NzYwLDgxOTIsODE5Myw4MTk0LDgxOTUsODE5Niw4MTk3LDgxOTgsODE5OSw4MjAwLDgyMDEsODIwMiw4MjM5LDgyODcsMTIyODgsNjUyNzldLmluZGV4T2YoZSk+PTB9LGlzTGluZVRlcm1pbmF0b3I6ZnVuY3Rpb24oZSl7cmV0dXJuIDEwPT09ZXx8MTM9PT1lfHw4MjMyPT09ZXx8ODIzMz09PWV9LGlzSWRlbnRpZmllclN0YXJ0OmZ1bmN0aW9uKGUpe3JldHVybiAzNj09PWV8fDk1PT09ZXx8ZT49NjUmJmU8PTkwfHxlPj05NyYmZTw9MTIyfHw5Mj09PWV8fGU+PTEyOCYmci5Ob25Bc2NpaUlkZW50aWZpZXJTdGFydC50ZXN0KHQuQ2hhcmFjdGVyLmZyb21Db2RlUG9pbnQoZSkpfSxpc0lkZW50aWZpZXJQYXJ0OmZ1bmN0aW9uKGUpe3JldHVybiAzNj09PWV8fDk1PT09ZXx8ZT49NjUmJmU8PTkwfHxlPj05NyYmZTw9MTIyfHxlPj00OCYmZTw9NTd8fDkyPT09ZXx8ZT49MTI4JiZyLk5vbkFzY2lpSWRlbnRpZmllclBhcnQudGVzdCh0LkNoYXJhY3Rlci5mcm9tQ29kZVBvaW50KGUpKX0saXNEZWNpbWFsRGlnaXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTQ4JiZlPD01N30saXNIZXhEaWdpdDpmdW5jdGlvbihlKXtyZXR1cm4gZT49NDgmJmU8PTU3fHxlPj02NSYmZTw9NzB8fGU+PTk3JiZlPD0xMDJ9LGlzT2N0YWxEaWdpdDpmdW5jdGlvbihlKXtyZXR1cm4gZT49NDgmJmU8PTU1fX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDYpLGk9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWENsb3NpbmdFbGVtZW50LHRoaXMubmFtZT1lfTt0LkpTWENsb3NpbmdFbGVtZW50PWk7dmFyIG89ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLkpTWFN5bnRheC5KU1hFbGVtZW50LHRoaXMub3BlbmluZ0VsZW1lbnQ9ZSx0aGlzLmNoaWxkcmVuPXQsdGhpcy5jbG9zaW5nRWxlbWVudD1yfTt0LkpTWEVsZW1lbnQ9bzt2YXIgYT1mdW5jdGlvbigpe3RoaXMudHlwZT1uLkpTWFN5bnRheC5KU1hFbXB0eUV4cHJlc3Npb259O3QuSlNYRW1wdHlFeHByZXNzaW9uPWE7dmFyIHM9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWEV4cHJlc3Npb25Db250YWluZXIsdGhpcy5leHByZXNzaW9uPWV9O3QuSlNYRXhwcmVzc2lvbkNvbnRhaW5lcj1zO3ZhciB1PWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLkpTWFN5bnRheC5KU1hJZGVudGlmaWVyLHRoaXMubmFtZT1lfTt0LkpTWElkZW50aWZpZXI9dTt2YXIgbD1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLkpTWFN5bnRheC5KU1hNZW1iZXJFeHByZXNzaW9uLHRoaXMub2JqZWN0PWUsdGhpcy5wcm9wZXJ0eT10fTt0LkpTWE1lbWJlckV4cHJlc3Npb249bDt2YXIgYz1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLkpTWFN5bnRheC5KU1hBdHRyaWJ1dGUsdGhpcy5uYW1lPWUsdGhpcy52YWx1ZT10fTt0LkpTWEF0dHJpYnV0ZT1jO3ZhciBoPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWE5hbWVzcGFjZWROYW1lLHRoaXMubmFtZXNwYWNlPWUsdGhpcy5uYW1lPXR9O3QuSlNYTmFtZXNwYWNlZE5hbWU9aDt2YXIgcD1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWE9wZW5pbmdFbGVtZW50LHRoaXMubmFtZT1lLHRoaXMuc2VsZkNsb3Npbmc9dCx0aGlzLmF0dHJpYnV0ZXM9cn07dC5KU1hPcGVuaW5nRWxlbWVudD1wO3ZhciBmPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLkpTWFN5bnRheC5KU1hTcHJlYWRBdHRyaWJ1dGUsdGhpcy5hcmd1bWVudD1lfTt0LkpTWFNwcmVhZEF0dHJpYnV0ZT1mO3ZhciBkPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWFRleHQsdGhpcy52YWx1ZT1lLHRoaXMucmF3PXR9O3QuSlNYVGV4dD1kfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSlNYU3ludGF4PXtKU1hBdHRyaWJ1dGU6XCJKU1hBdHRyaWJ1dGVcIixKU1hDbG9zaW5nRWxlbWVudDpcIkpTWENsb3NpbmdFbGVtZW50XCIsSlNYRWxlbWVudDpcIkpTWEVsZW1lbnRcIixKU1hFbXB0eUV4cHJlc3Npb246XCJKU1hFbXB0eUV4cHJlc3Npb25cIixKU1hFeHByZXNzaW9uQ29udGFpbmVyOlwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLEpTWElkZW50aWZpZXI6XCJKU1hJZGVudGlmaWVyXCIsSlNYTWVtYmVyRXhwcmVzc2lvbjpcIkpTWE1lbWJlckV4cHJlc3Npb25cIixKU1hOYW1lc3BhY2VkTmFtZTpcIkpTWE5hbWVzcGFjZWROYW1lXCIsSlNYT3BlbmluZ0VsZW1lbnQ6XCJKU1hPcGVuaW5nRWxlbWVudFwiLEpTWFNwcmVhZEF0dHJpYnV0ZTpcIkpTWFNwcmVhZEF0dHJpYnV0ZVwiLEpTWFRleHQ6XCJKU1hUZXh0XCJ9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyKSxpPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5BcnJheUV4cHJlc3Npb24sdGhpcy5lbGVtZW50cz1lfTt0LkFycmF5RXhwcmVzc2lvbj1pO3ZhciBvPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5BcnJheVBhdHRlcm4sdGhpcy5lbGVtZW50cz1lfTt0LkFycmF5UGF0dGVybj1vO3ZhciBhPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24sdGhpcy5pZD1udWxsLHRoaXMucGFyYW1zPWUsdGhpcy5ib2R5PXQsdGhpcy5nZW5lcmF0b3I9ITEsdGhpcy5leHByZXNzaW9uPXIsdGhpcy5hc3luYz0hMX07dC5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbj1hO3ZhciBzPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb24sdGhpcy5vcGVyYXRvcj1lLHRoaXMubGVmdD10LHRoaXMucmlnaHQ9cn07dC5Bc3NpZ25tZW50RXhwcmVzc2lvbj1zO3ZhciB1PWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuLHRoaXMubGVmdD1lLHRoaXMucmlnaHQ9dH07dC5Bc3NpZ25tZW50UGF0dGVybj11O3ZhciBsPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24sdGhpcy5pZD1udWxsLHRoaXMucGFyYW1zPWUsdGhpcy5ib2R5PXQsdGhpcy5nZW5lcmF0b3I9ITEsdGhpcy5leHByZXNzaW9uPXIsdGhpcy5hc3luYz0hMH07dC5Bc3luY0Fycm93RnVuY3Rpb25FeHByZXNzaW9uPWw7dmFyIGM9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5GdW5jdGlvbkRlY2xhcmF0aW9uLHRoaXMuaWQ9ZSx0aGlzLnBhcmFtcz10LHRoaXMuYm9keT1yLHRoaXMuZ2VuZXJhdG9yPSExLHRoaXMuZXhwcmVzc2lvbj0hMSx0aGlzLmFzeW5jPSEwfTt0LkFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbj1jO3ZhciBoPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguRnVuY3Rpb25FeHByZXNzaW9uLHRoaXMuaWQ9ZSx0aGlzLnBhcmFtcz10LHRoaXMuYm9keT1yLHRoaXMuZ2VuZXJhdG9yPSExLHRoaXMuZXhwcmVzc2lvbj0hMSx0aGlzLmFzeW5jPSEwfTt0LkFzeW5jRnVuY3Rpb25FeHByZXNzaW9uPWg7dmFyIHA9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkF3YWl0RXhwcmVzc2lvbix0aGlzLmFyZ3VtZW50PWV9O3QuQXdhaXRFeHByZXNzaW9uPXA7dmFyIGY9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPVwifHxcIj09PWV8fFwiJiZcIj09PWU7dGhpcy50eXBlPWk/bi5TeW50YXguTG9naWNhbEV4cHJlc3Npb246bi5TeW50YXguQmluYXJ5RXhwcmVzc2lvbix0aGlzLm9wZXJhdG9yPWUsdGhpcy5sZWZ0PXQsdGhpcy5yaWdodD1yfTt0LkJpbmFyeUV4cHJlc3Npb249Zjt2YXIgZD1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguQmxvY2tTdGF0ZW1lbnQsdGhpcy5ib2R5PWV9O3QuQmxvY2tTdGF0ZW1lbnQ9ZDt2YXIgbT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguQnJlYWtTdGF0ZW1lbnQsdGhpcy5sYWJlbD1lfTt0LkJyZWFrU3RhdGVtZW50PW07dmFyIHk9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguQ2FsbEV4cHJlc3Npb24sdGhpcy5jYWxsZWU9ZSx0aGlzLmFyZ3VtZW50cz10fTt0LkNhbGxFeHByZXNzaW9uPXk7dmFyIHY9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguQ2F0Y2hDbGF1c2UsdGhpcy5wYXJhbT1lLHRoaXMuYm9keT10fTt0LkNhdGNoQ2xhdXNlPXY7dmFyIF89ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkNsYXNzQm9keSx0aGlzLmJvZHk9ZX07dC5DbGFzc0JvZHk9Xzt2YXIgZz1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uU3ludGF4LkNsYXNzRGVjbGFyYXRpb24sdGhpcy5pZD1lLHRoaXMuc3VwZXJDbGFzcz10LHRoaXMuYm9keT1yfTt0LkNsYXNzRGVjbGFyYXRpb249Zzt2YXIgYj1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uU3ludGF4LkNsYXNzRXhwcmVzc2lvbix0aGlzLmlkPWUsdGhpcy5zdXBlckNsYXNzPXQsdGhpcy5ib2R5PXJ9O3QuQ2xhc3NFeHByZXNzaW9uPWI7dmFyIHg9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguTWVtYmVyRXhwcmVzc2lvbix0aGlzLmNvbXB1dGVkPSEwLHRoaXMub2JqZWN0PWUsdGhpcy5wcm9wZXJ0eT10fTt0LkNvbXB1dGVkTWVtYmVyRXhwcmVzc2lvbj14O3ZhciB3PWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguQ29uZGl0aW9uYWxFeHByZXNzaW9uLHRoaXMudGVzdD1lLHRoaXMuY29uc2VxdWVudD10LHRoaXMuYWx0ZXJuYXRlPXJ9O3QuQ29uZGl0aW9uYWxFeHByZXNzaW9uPXc7dmFyIEU9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkNvbnRpbnVlU3RhdGVtZW50LHRoaXMubGFiZWw9ZX07dC5Db250aW51ZVN0YXRlbWVudD1FO3ZhciBEPWZ1bmN0aW9uKCl7dGhpcy50eXBlPW4uU3ludGF4LkRlYnVnZ2VyU3RhdGVtZW50fTt0LkRlYnVnZ2VyU3RhdGVtZW50PUQ7dmFyIFM9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguRXhwcmVzc2lvblN0YXRlbWVudCx0aGlzLmV4cHJlc3Npb249ZSx0aGlzLmRpcmVjdGl2ZT10fTt0LkRpcmVjdGl2ZT1TO3ZhciBDPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LkRvV2hpbGVTdGF0ZW1lbnQsdGhpcy5ib2R5PWUsdGhpcy50ZXN0PXR9O3QuRG9XaGlsZVN0YXRlbWVudD1DO3ZhciBBPWZ1bmN0aW9uKCl7dGhpcy50eXBlPW4uU3ludGF4LkVtcHR5U3RhdGVtZW50fTt0LkVtcHR5U3RhdGVtZW50PUE7dmFyIE49ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkV4cG9ydEFsbERlY2xhcmF0aW9uLHRoaXMuc291cmNlPWV9O3QuRXhwb3J0QWxsRGVjbGFyYXRpb249Tjt2YXIgVD1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uLHRoaXMuZGVjbGFyYXRpb249ZX07dC5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb249VDt2YXIgTz1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uU3ludGF4LkV4cG9ydE5hbWVkRGVjbGFyYXRpb24sdGhpcy5kZWNsYXJhdGlvbj1lLHRoaXMuc3BlY2lmaWVycz10LHRoaXMuc291cmNlPXJ9O3QuRXhwb3J0TmFtZWREZWNsYXJhdGlvbj1PO3ZhciBGPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LkV4cG9ydFNwZWNpZmllcix0aGlzLmV4cG9ydGVkPXQsdGhpcy5sb2NhbD1lfTt0LkV4cG9ydFNwZWNpZmllcj1GO3ZhciBrPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5FeHByZXNzaW9uU3RhdGVtZW50LHRoaXMuZXhwcmVzc2lvbj1lfTt0LkV4cHJlc3Npb25TdGF0ZW1lbnQ9azt2YXIgUD1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uU3ludGF4LkZvckluU3RhdGVtZW50LHRoaXMubGVmdD1lLHRoaXMucmlnaHQ9dCx0aGlzLmJvZHk9cix0aGlzLmVhY2g9ITF9O3QuRm9ySW5TdGF0ZW1lbnQ9UDt2YXIgST1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uU3ludGF4LkZvck9mU3RhdGVtZW50LHRoaXMubGVmdD1lLHRoaXMucmlnaHQ9dCx0aGlzLmJvZHk9cn07dC5Gb3JPZlN0YXRlbWVudD1JO3ZhciBMPWZ1bmN0aW9uKGUsdCxyLGkpe3RoaXMudHlwZT1uLlN5bnRheC5Gb3JTdGF0ZW1lbnQsdGhpcy5pbml0PWUsdGhpcy50ZXN0PXQsdGhpcy51cGRhdGU9cix0aGlzLmJvZHk9aX07dC5Gb3JTdGF0ZW1lbnQ9TDt2YXIgTT1mdW5jdGlvbihlLHQscixpKXt0aGlzLnR5cGU9bi5TeW50YXguRnVuY3Rpb25EZWNsYXJhdGlvbix0aGlzLmlkPWUsdGhpcy5wYXJhbXM9dCx0aGlzLmJvZHk9cix0aGlzLmdlbmVyYXRvcj1pLHRoaXMuZXhwcmVzc2lvbj0hMSx0aGlzLmFzeW5jPSExfTt0LkZ1bmN0aW9uRGVjbGFyYXRpb249TTt2YXIgQj1mdW5jdGlvbihlLHQscixpKXt0aGlzLnR5cGU9bi5TeW50YXguRnVuY3Rpb25FeHByZXNzaW9uLHRoaXMuaWQ9ZSx0aGlzLnBhcmFtcz10LHRoaXMuYm9keT1yLHRoaXMuZ2VuZXJhdG9yPWksdGhpcy5leHByZXNzaW9uPSExLHRoaXMuYXN5bmM9ITF9O3QuRnVuY3Rpb25FeHByZXNzaW9uPUI7dmFyIGo9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LklkZW50aWZpZXIsdGhpcy5uYW1lPWV9O3QuSWRlbnRpZmllcj1qO3ZhciBSPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguSWZTdGF0ZW1lbnQsdGhpcy50ZXN0PWUsdGhpcy5jb25zZXF1ZW50PXQsdGhpcy5hbHRlcm5hdGU9cn07dC5JZlN0YXRlbWVudD1SO3ZhciB6PWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LkltcG9ydERlY2xhcmF0aW9uLHRoaXMuc3BlY2lmaWVycz1lLHRoaXMuc291cmNlPXR9O3QuSW1wb3J0RGVjbGFyYXRpb249ejt2YXIgVT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguSW1wb3J0RGVmYXVsdFNwZWNpZmllcix0aGlzLmxvY2FsPWV9O3QuSW1wb3J0RGVmYXVsdFNwZWNpZmllcj1VO3ZhciBHPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5JbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIsdGhpcy5sb2NhbD1lfTt0LkltcG9ydE5hbWVzcGFjZVNwZWNpZmllcj1HO3ZhciBYPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LkltcG9ydFNwZWNpZmllcix0aGlzLmxvY2FsPWUsdGhpcy5pbXBvcnRlZD10fTt0LkltcG9ydFNwZWNpZmllcj1YO3ZhciBxPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LkxhYmVsZWRTdGF0ZW1lbnQsdGhpcy5sYWJlbD1lLHRoaXMuYm9keT10fTt0LkxhYmVsZWRTdGF0ZW1lbnQ9cTt2YXIgVz1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5MaXRlcmFsLHRoaXMudmFsdWU9ZSx0aGlzLnJhdz10fTt0LkxpdGVyYWw9Vzt2YXIgSD1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5NZXRhUHJvcGVydHksdGhpcy5tZXRhPWUsdGhpcy5wcm9wZXJ0eT10fTt0Lk1ldGFQcm9wZXJ0eT1IO3ZhciBKPWZ1bmN0aW9uKGUsdCxyLGksbyl7dGhpcy50eXBlPW4uU3ludGF4Lk1ldGhvZERlZmluaXRpb24sdGhpcy5rZXk9ZSx0aGlzLmNvbXB1dGVkPXQsdGhpcy52YWx1ZT1yLHRoaXMua2luZD1pLHRoaXMuc3RhdGljPW99O3QuTWV0aG9kRGVmaW5pdGlvbj1KO3ZhciBZPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5Qcm9ncmFtLHRoaXMuYm9keT1lLHRoaXMuc291cmNlVHlwZT1cIm1vZHVsZVwifTt0Lk1vZHVsZT1ZO3ZhciBWPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4Lk5ld0V4cHJlc3Npb24sdGhpcy5jYWxsZWU9ZSx0aGlzLmFyZ3VtZW50cz10fTt0Lk5ld0V4cHJlc3Npb249Vjt2YXIgSz1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguT2JqZWN0RXhwcmVzc2lvbix0aGlzLnByb3BlcnRpZXM9ZX07dC5PYmplY3RFeHByZXNzaW9uPUs7dmFyICQ9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4Lk9iamVjdFBhdHRlcm4sdGhpcy5wcm9wZXJ0aWVzPWV9O3QuT2JqZWN0UGF0dGVybj0kO3ZhciBRPWZ1bmN0aW9uKGUsdCxyLGksbyxhKXt0aGlzLnR5cGU9bi5TeW50YXguUHJvcGVydHksdGhpcy5rZXk9dCx0aGlzLmNvbXB1dGVkPXIsdGhpcy52YWx1ZT1pLHRoaXMua2luZD1lLHRoaXMubWV0aG9kPW8sdGhpcy5zaG9ydGhhbmQ9YX07dC5Qcm9wZXJ0eT1RO3ZhciBaPWZ1bmN0aW9uKGUsdCxyLGkpe3RoaXMudHlwZT1uLlN5bnRheC5MaXRlcmFsLHRoaXMudmFsdWU9ZSx0aGlzLnJhdz10LHRoaXMucmVnZXg9e3BhdHRlcm46cixmbGFnczppfX07dC5SZWdleExpdGVyYWw9Wjt2YXIgZWU9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LlJlc3RFbGVtZW50LHRoaXMuYXJndW1lbnQ9ZX07dC5SZXN0RWxlbWVudD1lZTt2YXIgdGU9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LlJldHVyblN0YXRlbWVudCx0aGlzLmFyZ3VtZW50PWV9O3QuUmV0dXJuU3RhdGVtZW50PXRlO3ZhciByZT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguUHJvZ3JhbSx0aGlzLmJvZHk9ZSx0aGlzLnNvdXJjZVR5cGU9XCJzY3JpcHRcIn07dC5TY3JpcHQ9cmU7dmFyIG5lPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5TZXF1ZW5jZUV4cHJlc3Npb24sdGhpcy5leHByZXNzaW9ucz1lfTt0LlNlcXVlbmNlRXhwcmVzc2lvbj1uZTt2YXIgaWU9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LlNwcmVhZEVsZW1lbnQsdGhpcy5hcmd1bWVudD1lfTt0LlNwcmVhZEVsZW1lbnQ9aWU7dmFyIG9lPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4Lk1lbWJlckV4cHJlc3Npb24sdGhpcy5jb21wdXRlZD0hMSx0aGlzLm9iamVjdD1lLHRoaXMucHJvcGVydHk9dH07dC5TdGF0aWNNZW1iZXJFeHByZXNzaW9uPW9lO3ZhciBhZT1mdW5jdGlvbigpe3RoaXMudHlwZT1uLlN5bnRheC5TdXBlcn07dC5TdXBlcj1hZTt2YXIgc2U9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguU3dpdGNoQ2FzZSx0aGlzLnRlc3Q9ZSx0aGlzLmNvbnNlcXVlbnQ9dH07dC5Td2l0Y2hDYXNlPXNlO3ZhciB1ZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5Td2l0Y2hTdGF0ZW1lbnQsdGhpcy5kaXNjcmltaW5hbnQ9ZSx0aGlzLmNhc2VzPXR9O3QuU3dpdGNoU3RhdGVtZW50PXVlO3ZhciBsZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24sdGhpcy50YWc9ZSx0aGlzLnF1YXNpPXR9O3QuVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uPWxlO3ZhciBjZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5UZW1wbGF0ZUVsZW1lbnQsdGhpcy52YWx1ZT1lLHRoaXMudGFpbD10fTt0LlRlbXBsYXRlRWxlbWVudD1jZTt2YXIgaGU9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguVGVtcGxhdGVMaXRlcmFsLHRoaXMucXVhc2lzPWUsdGhpcy5leHByZXNzaW9ucz10fTt0LlRlbXBsYXRlTGl0ZXJhbD1oZTt2YXIgcGU9ZnVuY3Rpb24oKXt0aGlzLnR5cGU9bi5TeW50YXguVGhpc0V4cHJlc3Npb259O3QuVGhpc0V4cHJlc3Npb249cGU7dmFyIGZlPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5UaHJvd1N0YXRlbWVudCx0aGlzLmFyZ3VtZW50PWV9O3QuVGhyb3dTdGF0ZW1lbnQ9ZmU7dmFyIGRlPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguVHJ5U3RhdGVtZW50LHRoaXMuYmxvY2s9ZSx0aGlzLmhhbmRsZXI9dCx0aGlzLmZpbmFsaXplcj1yfTt0LlRyeVN0YXRlbWVudD1kZTt2YXIgbWU9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguVW5hcnlFeHByZXNzaW9uLHRoaXMub3BlcmF0b3I9ZSx0aGlzLmFyZ3VtZW50PXQsdGhpcy5wcmVmaXg9ITB9O3QuVW5hcnlFeHByZXNzaW9uPW1lO3ZhciB5ZT1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uU3ludGF4LlVwZGF0ZUV4cHJlc3Npb24sdGhpcy5vcGVyYXRvcj1lLHRoaXMuYXJndW1lbnQ9dCx0aGlzLnByZWZpeD1yfTt0LlVwZGF0ZUV4cHJlc3Npb249eWU7dmFyIHZlPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LlZhcmlhYmxlRGVjbGFyYXRpb24sdGhpcy5kZWNsYXJhdGlvbnM9ZSx0aGlzLmtpbmQ9dH07dC5WYXJpYWJsZURlY2xhcmF0aW9uPXZlO3ZhciBfZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5WYXJpYWJsZURlY2xhcmF0b3IsdGhpcy5pZD1lLHRoaXMuaW5pdD10fTt0LlZhcmlhYmxlRGVjbGFyYXRvcj1fZTt2YXIgZ2U9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguV2hpbGVTdGF0ZW1lbnQsdGhpcy50ZXN0PWUsdGhpcy5ib2R5PXR9O3QuV2hpbGVTdGF0ZW1lbnQ9Z2U7dmFyIGJlPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LldpdGhTdGF0ZW1lbnQsdGhpcy5vYmplY3Q9ZSx0aGlzLmJvZHk9dH07dC5XaXRoU3RhdGVtZW50PWJlO3ZhciB4ZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5ZaWVsZEV4cHJlc3Npb24sdGhpcy5hcmd1bWVudD1lLHRoaXMuZGVsZWdhdGU9dH07dC5ZaWVsZEV4cHJlc3Npb249eGV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDkpLGk9cigxMCksbz1yKDExKSxhPXIoNykscz1yKDEyKSx1PXIoMiksbD1yKDEzKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQscil7dm9pZCAwPT09dCYmKHQ9e30pLHRoaXMuY29uZmlnPXtyYW5nZTpcImJvb2xlYW5cIj09dHlwZW9mIHQucmFuZ2UmJnQucmFuZ2UsbG9jOlwiYm9vbGVhblwiPT10eXBlb2YgdC5sb2MmJnQubG9jLHNvdXJjZTpudWxsLHRva2VuczpcImJvb2xlYW5cIj09dHlwZW9mIHQudG9rZW5zJiZ0LnRva2Vucyxjb21tZW50OlwiYm9vbGVhblwiPT10eXBlb2YgdC5jb21tZW50JiZ0LmNvbW1lbnQsdG9sZXJhbnQ6XCJib29sZWFuXCI9PXR5cGVvZiB0LnRvbGVyYW50JiZ0LnRvbGVyYW50fSx0aGlzLmNvbmZpZy5sb2MmJnQuc291cmNlJiZudWxsIT09dC5zb3VyY2UmJih0aGlzLmNvbmZpZy5zb3VyY2U9U3RyaW5nKHQuc291cmNlKSksdGhpcy5kZWxlZ2F0ZT1yLHRoaXMuZXJyb3JIYW5kbGVyPW5ldyBpLkVycm9ySGFuZGxlcix0aGlzLmVycm9ySGFuZGxlci50b2xlcmFudD10aGlzLmNvbmZpZy50b2xlcmFudCx0aGlzLnNjYW5uZXI9bmV3IHMuU2Nhbm5lcihlLHRoaXMuZXJyb3JIYW5kbGVyKSx0aGlzLnNjYW5uZXIudHJhY2tDb21tZW50PXRoaXMuY29uZmlnLmNvbW1lbnQsdGhpcy5vcGVyYXRvclByZWNlZGVuY2U9e1wiKVwiOjAsXCI7XCI6MCxcIixcIjowLFwiPVwiOjAsXCJdXCI6MCxcInx8XCI6MSxcIiYmXCI6MixcInxcIjozLFwiXlwiOjQsXCImXCI6NSxcIj09XCI6NixcIiE9XCI6NixcIj09PVwiOjYsXCIhPT1cIjo2LFwiPFwiOjcsXCI+XCI6NyxcIjw9XCI6NyxcIj49XCI6NyxcIjw8XCI6OCxcIj4+XCI6OCxcIj4+PlwiOjgsXCIrXCI6OSxcIi1cIjo5LFwiKlwiOjExLFwiL1wiOjExLFwiJVwiOjExfSx0aGlzLmxvb2thaGVhZD17dHlwZToyLHZhbHVlOlwiXCIsbGluZU51bWJlcjp0aGlzLnNjYW5uZXIubGluZU51bWJlcixsaW5lU3RhcnQ6MCxzdGFydDowLGVuZDowfSx0aGlzLmhhc0xpbmVUZXJtaW5hdG9yPSExLHRoaXMuY29udGV4dD17aXNNb2R1bGU6ITEsYXdhaXQ6ITEsYWxsb3dJbjohMCxhbGxvd1N0cmljdERpcmVjdGl2ZTohMCxhbGxvd1lpZWxkOiEwLGZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcjpudWxsLGlzQXNzaWdubWVudFRhcmdldDohMSxpc0JpbmRpbmdFbGVtZW50OiExLGluRnVuY3Rpb25Cb2R5OiExLGluSXRlcmF0aW9uOiExLGluU3dpdGNoOiExLGxhYmVsU2V0Ont9LHN0cmljdDohMX0sdGhpcy50b2tlbnM9W10sdGhpcy5zdGFydE1hcmtlcj17aW5kZXg6MCxsaW5lOnRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLGNvbHVtbjowfSx0aGlzLmxhc3RNYXJrZXI9e2luZGV4OjAsbGluZTp0aGlzLnNjYW5uZXIubGluZU51bWJlcixjb2x1bW46MH0sdGhpcy5uZXh0VG9rZW4oKSx0aGlzLmxhc3RNYXJrZXI9e2luZGV4OnRoaXMuc2Nhbm5lci5pbmRleCxsaW5lOnRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLGNvbHVtbjp0aGlzLnNjYW5uZXIuaW5kZXgtdGhpcy5zY2FubmVyLmxpbmVTdGFydH19cmV0dXJuIGUucHJvdG90eXBlLnRocm93RXJyb3I9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXRbci0xXT1hcmd1bWVudHNbcl07dmFyIGk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLG89ZS5yZXBsYWNlKC8lKFxcZCkvZywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5hc3NlcnQodDxpLmxlbmd0aCxcIk1lc3NhZ2UgcmVmZXJlbmNlIG11c3QgYmUgaW4gcmFuZ2VcIiksaVt0XX0pKSxhPXRoaXMubGFzdE1hcmtlci5pbmRleCxzPXRoaXMubGFzdE1hcmtlci5saW5lLHU9dGhpcy5sYXN0TWFya2VyLmNvbHVtbisxO3Rocm93IHRoaXMuZXJyb3JIYW5kbGVyLmNyZWF0ZUVycm9yKGEscyx1LG8pfSxlLnByb3RvdHlwZS50b2xlcmF0ZUVycm9yPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO3ZhciBpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxvPWUucmVwbGFjZSgvJShcXGQpL2csKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uYXNzZXJ0KHQ8aS5sZW5ndGgsXCJNZXNzYWdlIHJlZmVyZW5jZSBtdXN0IGJlIGluIHJhbmdlXCIpLGlbdF19KSksYT10aGlzLmxhc3RNYXJrZXIuaW5kZXgscz10aGlzLnNjYW5uZXIubGluZU51bWJlcix1PXRoaXMubGFzdE1hcmtlci5jb2x1bW4rMTt0aGlzLmVycm9ySGFuZGxlci50b2xlcmF0ZUVycm9yKGEscyx1LG8pfSxlLnByb3RvdHlwZS51bmV4cGVjdGVkVG9rZW5FcnJvcj1mdW5jdGlvbihlLHQpe3ZhciByLG49dHx8by5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW47aWYoZT8odHx8KG49Mj09PWUudHlwZT9vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRFT1M6Mz09PWUudHlwZT9vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRJZGVudGlmaWVyOjY9PT1lLnR5cGU/by5NZXNzYWdlcy5VbmV4cGVjdGVkTnVtYmVyOjg9PT1lLnR5cGU/by5NZXNzYWdlcy5VbmV4cGVjdGVkU3RyaW5nOjEwPT09ZS50eXBlP28uTWVzc2FnZXMuVW5leHBlY3RlZFRlbXBsYXRlOm8uTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuLDQ9PT1lLnR5cGUmJih0aGlzLnNjYW5uZXIuaXNGdXR1cmVSZXNlcnZlZFdvcmQoZS52YWx1ZSk/bj1vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRSZXNlcnZlZDp0aGlzLmNvbnRleHQuc3RyaWN0JiZ0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKGUudmFsdWUpJiYobj1vLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZCkpKSxyPWUudmFsdWUpOnI9XCJJTExFR0FMXCIsbj1uLnJlcGxhY2UoXCIlMFwiLHIpLGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxpbmVOdW1iZXIpe3ZhciBpPWUuc3RhcnQsYT1lLmxpbmVOdW1iZXIscz10aGlzLmxhc3RNYXJrZXIuaW5kZXgtdGhpcy5sYXN0TWFya2VyLmNvbHVtbix1PWUuc3RhcnQtcysxO3JldHVybiB0aGlzLmVycm9ySGFuZGxlci5jcmVhdGVFcnJvcihpLGEsdSxuKX1yZXR1cm4gaT10aGlzLmxhc3RNYXJrZXIuaW5kZXgsYT10aGlzLmxhc3RNYXJrZXIubGluZSx1PXRoaXMubGFzdE1hcmtlci5jb2x1bW4rMSx0aGlzLmVycm9ySGFuZGxlci5jcmVhdGVFcnJvcihpLGEsdSxuKX0sZS5wcm90b3R5cGUudGhyb3dVbmV4cGVjdGVkVG9rZW49ZnVuY3Rpb24oZSx0KXt0aHJvdyB0aGlzLnVuZXhwZWN0ZWRUb2tlbkVycm9yKGUsdCl9LGUucHJvdG90eXBlLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuPWZ1bmN0aW9uKGUsdCl7dGhpcy5lcnJvckhhbmRsZXIudG9sZXJhdGUodGhpcy51bmV4cGVjdGVkVG9rZW5FcnJvcihlLHQpKX0sZS5wcm90b3R5cGUuY29sbGVjdENvbW1lbnRzPWZ1bmN0aW9uKCl7aWYodGhpcy5jb25maWcuY29tbWVudCl7dmFyIGU9dGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpO2lmKGUubGVuZ3RoPjAmJnRoaXMuZGVsZWdhdGUpZm9yKHZhciB0PTA7dDxlLmxlbmd0aDsrK3Qpe3ZhciByPWVbdF0sbj12b2lkIDA7bj17dHlwZTpyLm11bHRpTGluZT9cIkJsb2NrQ29tbWVudFwiOlwiTGluZUNvbW1lbnRcIix2YWx1ZTp0aGlzLnNjYW5uZXIuc291cmNlLnNsaWNlKHIuc2xpY2VbMF0sci5zbGljZVsxXSl9LHRoaXMuY29uZmlnLnJhbmdlJiYobi5yYW5nZT1yLnJhbmdlKSx0aGlzLmNvbmZpZy5sb2MmJihuLmxvYz1yLmxvYyk7dmFyIGk9e3N0YXJ0OntsaW5lOnIubG9jLnN0YXJ0LmxpbmUsY29sdW1uOnIubG9jLnN0YXJ0LmNvbHVtbixvZmZzZXQ6ci5yYW5nZVswXX0sZW5kOntsaW5lOnIubG9jLmVuZC5saW5lLGNvbHVtbjpyLmxvYy5lbmQuY29sdW1uLG9mZnNldDpyLnJhbmdlWzFdfX07dGhpcy5kZWxlZ2F0ZShuLGkpfX1lbHNlIHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKX0sZS5wcm90b3R5cGUuZ2V0VG9rZW5SYXc9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc2Nhbm5lci5zb3VyY2Uuc2xpY2UoZS5zdGFydCxlLmVuZCl9LGUucHJvdG90eXBlLmNvbnZlcnRUb2tlbj1mdW5jdGlvbihlKXt2YXIgdD17dHlwZTpsLlRva2VuTmFtZVtlLnR5cGVdLHZhbHVlOnRoaXMuZ2V0VG9rZW5SYXcoZSl9O2lmKHRoaXMuY29uZmlnLnJhbmdlJiYodC5yYW5nZT1bZS5zdGFydCxlLmVuZF0pLHRoaXMuY29uZmlnLmxvYyYmKHQubG9jPXtzdGFydDp7bGluZTp0aGlzLnN0YXJ0TWFya2VyLmxpbmUsY29sdW1uOnRoaXMuc3RhcnRNYXJrZXIuY29sdW1ufSxlbmQ6e2xpbmU6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0fX0pLDk9PT1lLnR5cGUpe3ZhciByPWUucGF0dGVybixuPWUuZmxhZ3M7dC5yZWdleD17cGF0dGVybjpyLGZsYWdzOm59fXJldHVybiB0fSxlLnByb3RvdHlwZS5uZXh0VG9rZW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxvb2thaGVhZDt0aGlzLmxhc3RNYXJrZXIuaW5kZXg9dGhpcy5zY2FubmVyLmluZGV4LHRoaXMubGFzdE1hcmtlci5saW5lPXRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLHRoaXMubGFzdE1hcmtlci5jb2x1bW49dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnQsdGhpcy5jb2xsZWN0Q29tbWVudHMoKSx0aGlzLnNjYW5uZXIuaW5kZXghPT10aGlzLnN0YXJ0TWFya2VyLmluZGV4JiYodGhpcy5zdGFydE1hcmtlci5pbmRleD10aGlzLnNjYW5uZXIuaW5kZXgsdGhpcy5zdGFydE1hcmtlci5saW5lPXRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLHRoaXMuc3RhcnRNYXJrZXIuY29sdW1uPXRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0KTt2YXIgdD10aGlzLnNjYW5uZXIubGV4KCk7cmV0dXJuIHRoaXMuaGFzTGluZVRlcm1pbmF0b3I9ZS5saW5lTnVtYmVyIT09dC5saW5lTnVtYmVyLHQmJnRoaXMuY29udGV4dC5zdHJpY3QmJjM9PT10LnR5cGUmJnRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQodC52YWx1ZSkmJih0LnR5cGU9NCksdGhpcy5sb29rYWhlYWQ9dCx0aGlzLmNvbmZpZy50b2tlbnMmJjIhPT10LnR5cGUmJnRoaXMudG9rZW5zLnB1c2godGhpcy5jb252ZXJ0VG9rZW4odCkpLGV9LGUucHJvdG90eXBlLm5leHRSZWdleFRva2VuPWZ1bmN0aW9uKCl7dGhpcy5jb2xsZWN0Q29tbWVudHMoKTt2YXIgZT10aGlzLnNjYW5uZXIuc2NhblJlZ0V4cCgpO3JldHVybiB0aGlzLmNvbmZpZy50b2tlbnMmJih0aGlzLnRva2Vucy5wb3AoKSx0aGlzLnRva2Vucy5wdXNoKHRoaXMuY29udmVydFRva2VuKGUpKSksdGhpcy5sb29rYWhlYWQ9ZSx0aGlzLm5leHRUb2tlbigpLGV9LGUucHJvdG90eXBlLmNyZWF0ZU5vZGU9ZnVuY3Rpb24oKXtyZXR1cm57aW5kZXg6dGhpcy5zdGFydE1hcmtlci5pbmRleCxsaW5lOnRoaXMuc3RhcnRNYXJrZXIubGluZSxjb2x1bW46dGhpcy5zdGFydE1hcmtlci5jb2x1bW59fSxlLnByb3RvdHlwZS5zdGFydE5vZGU9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD0wKTt2YXIgcj1lLnN0YXJ0LWUubGluZVN0YXJ0LG49ZS5saW5lTnVtYmVyO3JldHVybiByPDAmJihyKz10LG4tLSkse2luZGV4OmUuc3RhcnQsbGluZTpuLGNvbHVtbjpyfX0sZS5wcm90b3R5cGUuZmluYWxpemU9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLmNvbmZpZy5yYW5nZSYmKHQucmFuZ2U9W2UuaW5kZXgsdGhpcy5sYXN0TWFya2VyLmluZGV4XSksdGhpcy5jb25maWcubG9jJiYodC5sb2M9e3N0YXJ0OntsaW5lOmUubGluZSxjb2x1bW46ZS5jb2x1bW59LGVuZDp7bGluZTp0aGlzLmxhc3RNYXJrZXIubGluZSxjb2x1bW46dGhpcy5sYXN0TWFya2VyLmNvbHVtbn19LHRoaXMuY29uZmlnLnNvdXJjZSYmKHQubG9jLnNvdXJjZT10aGlzLmNvbmZpZy5zb3VyY2UpKSx0aGlzLmRlbGVnYXRlKXt2YXIgcj17c3RhcnQ6e2xpbmU6ZS5saW5lLGNvbHVtbjplLmNvbHVtbixvZmZzZXQ6ZS5pbmRleH0sZW5kOntsaW5lOnRoaXMubGFzdE1hcmtlci5saW5lLGNvbHVtbjp0aGlzLmxhc3RNYXJrZXIuY29sdW1uLG9mZnNldDp0aGlzLmxhc3RNYXJrZXIuaW5kZXh9fTt0aGlzLmRlbGVnYXRlKHQscil9cmV0dXJuIHR9LGUucHJvdG90eXBlLmV4cGVjdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm5leHRUb2tlbigpOzc9PT10LnR5cGUmJnQudmFsdWU9PT1lfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHQpfSxlLnByb3RvdHlwZS5leHBlY3RDb21tYVNlcGFyYXRvcj1mdW5jdGlvbigpe2lmKHRoaXMuY29uZmlnLnRvbGVyYW50KXt2YXIgZT10aGlzLmxvb2thaGVhZDs3PT09ZS50eXBlJiZcIixcIj09PWUudmFsdWU/dGhpcy5uZXh0VG9rZW4oKTo3PT09ZS50eXBlJiZcIjtcIj09PWUudmFsdWU/KHRoaXMubmV4dFRva2VuKCksdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihlKSk6dGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihlLG8uTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuKX1lbHNlIHRoaXMuZXhwZWN0KFwiLFwiKX0sZS5wcm90b3R5cGUuZXhwZWN0S2V5d29yZD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm5leHRUb2tlbigpOzQ9PT10LnR5cGUmJnQudmFsdWU9PT1lfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHQpfSxlLnByb3RvdHlwZS5tYXRjaD1mdW5jdGlvbihlKXtyZXR1cm4gNz09PXRoaXMubG9va2FoZWFkLnR5cGUmJnRoaXMubG9va2FoZWFkLnZhbHVlPT09ZX0sZS5wcm90b3R5cGUubWF0Y2hLZXl3b3JkPWZ1bmN0aW9uKGUpe3JldHVybiA0PT09dGhpcy5sb29rYWhlYWQudHlwZSYmdGhpcy5sb29rYWhlYWQudmFsdWU9PT1lfSxlLnByb3RvdHlwZS5tYXRjaENvbnRleHR1YWxLZXl3b3JkPWZ1bmN0aW9uKGUpe3JldHVybiAzPT09dGhpcy5sb29rYWhlYWQudHlwZSYmdGhpcy5sb29rYWhlYWQudmFsdWU9PT1lfSxlLnByb3RvdHlwZS5tYXRjaEFzc2lnbj1mdW5jdGlvbigpe2lmKDchPT10aGlzLmxvb2thaGVhZC50eXBlKXJldHVybiExO3ZhciBlPXRoaXMubG9va2FoZWFkLnZhbHVlO3JldHVyblwiPVwiPT09ZXx8XCIqPVwiPT09ZXx8XCIqKj1cIj09PWV8fFwiLz1cIj09PWV8fFwiJT1cIj09PWV8fFwiKz1cIj09PWV8fFwiLT1cIj09PWV8fFwiPDw9XCI9PT1lfHxcIj4+PVwiPT09ZXx8XCI+Pj49XCI9PT1lfHxcIiY9XCI9PT1lfHxcIl49XCI9PT1lfHxcInw9XCI9PT1lfSxlLnByb3RvdHlwZS5pc29sYXRlQ292ZXJHcmFtbWFyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50LHI9dGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCxuPXRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I7dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITAsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMCx0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yPW51bGw7dmFyIGk9ZS5jYWxsKHRoaXMpO3JldHVybiBudWxsIT09dGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yKSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD10LHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9cix0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yPW4saX0sZS5wcm90b3R5cGUuaW5oZXJpdENvdmVyR3JhbW1hcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCxyPXRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQsbj10aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yO3RoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSEwLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITAsdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcj1udWxsO3ZhciBpPWUuY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQmJnQsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD10aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0JiZyLHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I9bnx8dGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcixpfSxlLnByb3RvdHlwZS5jb25zdW1lU2VtaWNvbG9uPWZ1bmN0aW9uKCl7dGhpcy5tYXRjaChcIjtcIik/dGhpcy5uZXh0VG9rZW4oKTp0aGlzLmhhc0xpbmVUZXJtaW5hdG9yfHwoMj09PXRoaXMubG9va2FoZWFkLnR5cGV8fHRoaXMubWF0Y2goXCJ9XCIpfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSx0aGlzLmxhc3RNYXJrZXIuaW5kZXg9dGhpcy5zdGFydE1hcmtlci5pbmRleCx0aGlzLmxhc3RNYXJrZXIubGluZT10aGlzLnN0YXJ0TWFya2VyLmxpbmUsdGhpcy5sYXN0TWFya2VyLmNvbHVtbj10aGlzLnN0YXJ0TWFya2VyLmNvbHVtbil9LGUucHJvdG90eXBlLnBhcnNlUHJpbWFyeUV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZSx0LHIsbj10aGlzLmNyZWF0ZU5vZGUoKTtzd2l0Y2godGhpcy5sb29rYWhlYWQudHlwZSl7Y2FzZSAzOih0aGlzLmNvbnRleHQuaXNNb2R1bGV8fHRoaXMuY29udGV4dC5hd2FpdCkmJlwiYXdhaXRcIj09PXRoaXMubG9va2FoZWFkLnZhbHVlJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSxlPXRoaXMubWF0Y2hBc3luY0Z1bmN0aW9uKCk/dGhpcy5wYXJzZUZ1bmN0aW9uRXhwcmVzc2lvbigpOnRoaXMuZmluYWxpemUobixuZXcgYS5JZGVudGlmaWVyKHRoaXMubmV4dFRva2VuKCkudmFsdWUpKTticmVhaztjYXNlIDY6Y2FzZSA4OnRoaXMuY29udGV4dC5zdHJpY3QmJnRoaXMubG9va2FoZWFkLm9jdGFsJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkLG8uTWVzc2FnZXMuU3RyaWN0T2N0YWxMaXRlcmFsKSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLHQ9dGhpcy5uZXh0VG9rZW4oKSxyPXRoaXMuZ2V0VG9rZW5SYXcodCksZT10aGlzLmZpbmFsaXplKG4sbmV3IGEuTGl0ZXJhbCh0LnZhbHVlLHIpKTticmVhaztjYXNlIDE6dGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0PXRoaXMubmV4dFRva2VuKCkscj10aGlzLmdldFRva2VuUmF3KHQpLGU9dGhpcy5maW5hbGl6ZShuLG5ldyBhLkxpdGVyYWwoXCJ0cnVlXCI9PT10LnZhbHVlLHIpKTticmVhaztjYXNlIDU6dGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0PXRoaXMubmV4dFRva2VuKCkscj10aGlzLmdldFRva2VuUmF3KHQpLGU9dGhpcy5maW5hbGl6ZShuLG5ldyBhLkxpdGVyYWwobnVsbCxyKSk7YnJlYWs7Y2FzZSAxMDplPXRoaXMucGFyc2VUZW1wbGF0ZUxpdGVyYWwoKTticmVhaztjYXNlIDc6c3dpdGNoKHRoaXMubG9va2FoZWFkLnZhbHVlKXtjYXNlXCIoXCI6dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsZT10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUdyb3VwRXhwcmVzc2lvbik7YnJlYWs7Y2FzZVwiW1wiOmU9dGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VBcnJheUluaXRpYWxpemVyKTticmVhaztjYXNlXCJ7XCI6ZT10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZU9iamVjdEluaXRpYWxpemVyKTticmVhaztjYXNlXCIvXCI6Y2FzZVwiLz1cIjp0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLHRoaXMuc2Nhbm5lci5pbmRleD10aGlzLnN0YXJ0TWFya2VyLmluZGV4LHQ9dGhpcy5uZXh0UmVnZXhUb2tlbigpLHI9dGhpcy5nZXRUb2tlblJhdyh0KSxlPXRoaXMuZmluYWxpemUobixuZXcgYS5SZWdleExpdGVyYWwodC5yZWdleCxyLHQucGF0dGVybix0LmZsYWdzKSk7YnJlYWs7ZGVmYXVsdDplPXRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSl9YnJlYWs7Y2FzZSA0OiF0aGlzLmNvbnRleHQuc3RyaWN0JiZ0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCYmdGhpcy5tYXRjaEtleXdvcmQoXCJ5aWVsZFwiKT9lPXRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpOiF0aGlzLmNvbnRleHQuc3RyaWN0JiZ0aGlzLm1hdGNoS2V5d29yZChcImxldFwiKT9lPXRoaXMuZmluYWxpemUobixuZXcgYS5JZGVudGlmaWVyKHRoaXMubmV4dFRva2VuKCkudmFsdWUpKToodGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0aGlzLm1hdGNoS2V5d29yZChcImZ1bmN0aW9uXCIpP2U9dGhpcy5wYXJzZUZ1bmN0aW9uRXhwcmVzc2lvbigpOnRoaXMubWF0Y2hLZXl3b3JkKFwidGhpc1wiKT8odGhpcy5uZXh0VG9rZW4oKSxlPXRoaXMuZmluYWxpemUobixuZXcgYS5UaGlzRXhwcmVzc2lvbikpOmU9dGhpcy5tYXRjaEtleXdvcmQoXCJjbGFzc1wiKT90aGlzLnBhcnNlQ2xhc3NFeHByZXNzaW9uKCk6dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKSk7YnJlYWs7ZGVmYXVsdDplPXRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSl9cmV0dXJuIGV9LGUucHJvdG90eXBlLnBhcnNlU3ByZWFkRWxlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0KFwiLi4uXCIpO3ZhciB0PXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuU3ByZWFkRWxlbWVudCh0KSl9LGUucHJvdG90eXBlLnBhcnNlQXJyYXlJbml0aWFsaXplcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9W107Zm9yKHRoaXMuZXhwZWN0KFwiW1wiKTshdGhpcy5tYXRjaChcIl1cIik7KWlmKHRoaXMubWF0Y2goXCIsXCIpKXRoaXMubmV4dFRva2VuKCksdC5wdXNoKG51bGwpO2Vsc2UgaWYodGhpcy5tYXRjaChcIi4uLlwiKSl7dmFyIHI9dGhpcy5wYXJzZVNwcmVhZEVsZW1lbnQoKTt0aGlzLm1hdGNoKFwiXVwiKXx8KHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsdGhpcy5leHBlY3QoXCIsXCIpKSx0LnB1c2gocil9ZWxzZSB0LnB1c2godGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbikpLHRoaXMubWF0Y2goXCJdXCIpfHx0aGlzLmV4cGVjdChcIixcIik7cmV0dXJuIHRoaXMuZXhwZWN0KFwiXVwiKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuQXJyYXlFeHByZXNzaW9uKHQpKX0sZS5wcm90b3R5cGUucGFyc2VQcm9wZXJ0eU1ldGhvZD1mdW5jdGlvbihlKXt0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExO3ZhciB0PXRoaXMuY29udGV4dC5zdHJpY3Qscj10aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU7dGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlPWUuc2ltcGxlO3ZhciBuPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cyk7cmV0dXJuIHRoaXMuY29udGV4dC5zdHJpY3QmJmUuZmlyc3RSZXN0cmljdGVkJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGUuZmlyc3RSZXN0cmljdGVkLGUubWVzc2FnZSksdGhpcy5jb250ZXh0LnN0cmljdCYmZS5zdHJpY3RlZCYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihlLnN0cmljdGVkLGUubWVzc2FnZSksdGhpcy5jb250ZXh0LnN0cmljdD10LHRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZT1yLG59LGUucHJvdG90eXBlLnBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5jb250ZXh0LmFsbG93WWllbGQ7dGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITA7dmFyIHI9dGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKSxuPXRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChyKTtyZXR1cm4gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9dCx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRnVuY3Rpb25FeHByZXNzaW9uKG51bGwsci5wYXJhbXMsbiwhMSkpfSxlLnByb3RvdHlwZS5wYXJzZVByb3BlcnR5TWV0aG9kQXN5bmNGdW5jdGlvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5jb250ZXh0LmFsbG93WWllbGQscj10aGlzLmNvbnRleHQuYXdhaXQ7dGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITEsdGhpcy5jb250ZXh0LmF3YWl0PSEwO3ZhciBuPXRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCksaT10aGlzLnBhcnNlUHJvcGVydHlNZXRob2Qobik7cmV0dXJuIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkPXQsdGhpcy5jb250ZXh0LmF3YWl0PXIsdGhpcy5maW5hbGl6ZShlLG5ldyBhLkFzeW5jRnVuY3Rpb25FeHByZXNzaW9uKG51bGwsbi5wYXJhbXMsaSkpfSxlLnByb3RvdHlwZS5wYXJzZU9iamVjdFByb3BlcnR5S2V5PWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmNyZWF0ZU5vZGUoKSxyPXRoaXMubmV4dFRva2VuKCk7c3dpdGNoKHIudHlwZSl7Y2FzZSA4OmNhc2UgNjp0aGlzLmNvbnRleHQuc3RyaWN0JiZyLm9jdGFsJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHIsby5NZXNzYWdlcy5TdHJpY3RPY3RhbExpdGVyYWwpO3ZhciBuPXRoaXMuZ2V0VG9rZW5SYXcocik7ZT10aGlzLmZpbmFsaXplKHQsbmV3IGEuTGl0ZXJhbChyLnZhbHVlLG4pKTticmVhaztjYXNlIDM6Y2FzZSAxOmNhc2UgNTpjYXNlIDQ6ZT10aGlzLmZpbmFsaXplKHQsbmV3IGEuSWRlbnRpZmllcihyLnZhbHVlKSk7YnJlYWs7Y2FzZSA3OlwiW1wiPT09ci52YWx1ZT8oZT10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSx0aGlzLmV4cGVjdChcIl1cIikpOmU9dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihyKTticmVhaztkZWZhdWx0OmU9dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihyKX1yZXR1cm4gZX0sZS5wcm90b3R5cGUuaXNQcm9wZXJ0eUtleT1mdW5jdGlvbihlLHQpe3JldHVybiBlLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyJiZlLm5hbWU9PT10fHxlLnR5cGU9PT11LlN5bnRheC5MaXRlcmFsJiZlLnZhbHVlPT09dH0sZS5wcm90b3R5cGUucGFyc2VPYmplY3RQcm9wZXJ0eT1mdW5jdGlvbihlKXt2YXIgdCxyPXRoaXMuY3JlYXRlTm9kZSgpLG49dGhpcy5sb29rYWhlYWQsaT1udWxsLHM9bnVsbCx1PSExLGw9ITEsYz0hMSxoPSExO2lmKDM9PT1uLnR5cGUpe3ZhciBwPW4udmFsdWU7dGhpcy5uZXh0VG9rZW4oKSx1PXRoaXMubWF0Y2goXCJbXCIpLGk9KGg9ISh0aGlzLmhhc0xpbmVUZXJtaW5hdG9yfHxcImFzeW5jXCIhPT1wfHx0aGlzLm1hdGNoKFwiOlwiKXx8dGhpcy5tYXRjaChcIihcIil8fHRoaXMubWF0Y2goXCIqXCIpfHx0aGlzLm1hdGNoKFwiLFwiKSkpP3RoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpOnRoaXMuZmluYWxpemUocixuZXcgYS5JZGVudGlmaWVyKHApKX1lbHNlIHRoaXMubWF0Y2goXCIqXCIpP3RoaXMubmV4dFRva2VuKCk6KHU9dGhpcy5tYXRjaChcIltcIiksaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSk7dmFyIGY9dGhpcy5xdWFsaWZpZWRQcm9wZXJ0eU5hbWUodGhpcy5sb29rYWhlYWQpO2lmKDM9PT1uLnR5cGUmJiFoJiZcImdldFwiPT09bi52YWx1ZSYmZil0PVwiZ2V0XCIsdT10aGlzLm1hdGNoKFwiW1wiKSxpPXRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpLHRoaXMuY29udGV4dC5hbGxvd1lpZWxkPSExLHM9dGhpcy5wYXJzZUdldHRlck1ldGhvZCgpO2Vsc2UgaWYoMz09PW4udHlwZSYmIWgmJlwic2V0XCI9PT1uLnZhbHVlJiZmKXQ9XCJzZXRcIix1PXRoaXMubWF0Y2goXCJbXCIpLGk9dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCkscz10aGlzLnBhcnNlU2V0dGVyTWV0aG9kKCk7ZWxzZSBpZig3PT09bi50eXBlJiZcIipcIj09PW4udmFsdWUmJmYpdD1cImluaXRcIix1PXRoaXMubWF0Y2goXCJbXCIpLGk9dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCkscz10aGlzLnBhcnNlR2VuZXJhdG9yTWV0aG9kKCksbD0hMDtlbHNlIGlmKGl8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpLHQ9XCJpbml0XCIsdGhpcy5tYXRjaChcIjpcIikmJiFoKSF1JiZ0aGlzLmlzUHJvcGVydHlLZXkoaSxcIl9fcHJvdG9fX1wiKSYmKGUudmFsdWUmJnRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkR1cGxpY2F0ZVByb3RvUHJvcGVydHkpLGUudmFsdWU9ITApLHRoaXMubmV4dFRva2VuKCkscz10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtlbHNlIGlmKHRoaXMubWF0Y2goXCIoXCIpKXM9aD90aGlzLnBhcnNlUHJvcGVydHlNZXRob2RBc3luY0Z1bmN0aW9uKCk6dGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kRnVuY3Rpb24oKSxsPSEwO2Vsc2UgaWYoMz09PW4udHlwZSlpZihwPXRoaXMuZmluYWxpemUocixuZXcgYS5JZGVudGlmaWVyKG4udmFsdWUpKSx0aGlzLm1hdGNoKFwiPVwiKSl7dGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcj10aGlzLmxvb2thaGVhZCx0aGlzLm5leHRUb2tlbigpLGM9ITA7dmFyIGQ9dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7cz10aGlzLmZpbmFsaXplKHIsbmV3IGEuQXNzaWdubWVudFBhdHRlcm4ocCxkKSl9ZWxzZSBjPSEwLHM9cDtlbHNlIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSk7cmV0dXJuIHRoaXMuZmluYWxpemUocixuZXcgYS5Qcm9wZXJ0eSh0LGksdSxzLGwsYykpfSxlLnByb3RvdHlwZS5wYXJzZU9iamVjdEluaXRpYWxpemVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3QoXCJ7XCIpO2Zvcih2YXIgdD1bXSxyPXt2YWx1ZTohMX07IXRoaXMubWF0Y2goXCJ9XCIpOyl0LnB1c2godGhpcy5wYXJzZU9iamVjdFByb3BlcnR5KHIpKSx0aGlzLm1hdGNoKFwifVwiKXx8dGhpcy5leHBlY3RDb21tYVNlcGFyYXRvcigpO3JldHVybiB0aGlzLmV4cGVjdChcIn1cIiksdGhpcy5maW5hbGl6ZShlLG5ldyBhLk9iamVjdEV4cHJlc3Npb24odCkpfSxlLnByb3RvdHlwZS5wYXJzZVRlbXBsYXRlSGVhZD1mdW5jdGlvbigpe24uYXNzZXJ0KHRoaXMubG9va2FoZWFkLmhlYWQsXCJUZW1wbGF0ZSBsaXRlcmFsIG11c3Qgc3RhcnQgd2l0aCBhIHRlbXBsYXRlIGhlYWRcIik7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLm5leHRUb2tlbigpLHI9dC52YWx1ZSxpPXQuY29va2VkO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuVGVtcGxhdGVFbGVtZW50KHtyYXc6cixjb29rZWQ6aX0sdC50YWlsKSl9LGUucHJvdG90eXBlLnBhcnNlVGVtcGxhdGVFbGVtZW50PWZ1bmN0aW9uKCl7MTAhPT10aGlzLmxvb2thaGVhZC50eXBlJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLm5leHRUb2tlbigpLHI9dC52YWx1ZSxuPXQuY29va2VkO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuVGVtcGxhdGVFbGVtZW50KHtyYXc6cixjb29rZWQ6bn0sdC50YWlsKSl9LGUucHJvdG90eXBlLnBhcnNlVGVtcGxhdGVMaXRlcmFsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD1bXSxyPVtdLG49dGhpcy5wYXJzZVRlbXBsYXRlSGVhZCgpO2ZvcihyLnB1c2gobik7IW4udGFpbDspdC5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpLG49dGhpcy5wYXJzZVRlbXBsYXRlRWxlbWVudCgpLHIucHVzaChuKTtyZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLlRlbXBsYXRlTGl0ZXJhbChyLHQpKX0sZS5wcm90b3R5cGUucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuPWZ1bmN0aW9uKGUpe3N3aXRjaChlLnR5cGUpe2Nhc2UgdS5TeW50YXguSWRlbnRpZmllcjpjYXNlIHUuU3ludGF4Lk1lbWJlckV4cHJlc3Npb246Y2FzZSB1LlN5bnRheC5SZXN0RWxlbWVudDpjYXNlIHUuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuOmJyZWFrO2Nhc2UgdS5TeW50YXguU3ByZWFkRWxlbWVudDplLnR5cGU9dS5TeW50YXguUmVzdEVsZW1lbnQsdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZS5hcmd1bWVudCk7YnJlYWs7Y2FzZSB1LlN5bnRheC5BcnJheUV4cHJlc3Npb246ZS50eXBlPXUuU3ludGF4LkFycmF5UGF0dGVybjtmb3IodmFyIHQ9MDt0PGUuZWxlbWVudHMubGVuZ3RoO3QrKyludWxsIT09ZS5lbGVtZW50c1t0XSYmdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZS5lbGVtZW50c1t0XSk7YnJlYWs7Y2FzZSB1LlN5bnRheC5PYmplY3RFeHByZXNzaW9uOmZvcihlLnR5cGU9dS5TeW50YXguT2JqZWN0UGF0dGVybix0PTA7dDxlLnByb3BlcnRpZXMubGVuZ3RoO3QrKyl0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihlLnByb3BlcnRpZXNbdF0udmFsdWUpO2JyZWFrO2Nhc2UgdS5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb246ZS50eXBlPXUuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuLGRlbGV0ZSBlLm9wZXJhdG9yLHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGUubGVmdCl9fSxlLnByb3RvdHlwZS5wYXJzZUdyb3VwRXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlO2lmKHRoaXMuZXhwZWN0KFwiKFwiKSx0aGlzLm1hdGNoKFwiKVwiKSl0aGlzLm5leHRUb2tlbigpLHRoaXMubWF0Y2goXCI9PlwiKXx8dGhpcy5leHBlY3QoXCI9PlwiKSxlPXt0eXBlOlwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiLHBhcmFtczpbXSxhc3luYzohMX07ZWxzZXt2YXIgdD10aGlzLmxvb2thaGVhZCxyPVtdO2lmKHRoaXMubWF0Y2goXCIuLi5cIikpZT10aGlzLnBhcnNlUmVzdEVsZW1lbnQociksdGhpcy5leHBlY3QoXCIpXCIpLHRoaXMubWF0Y2goXCI9PlwiKXx8dGhpcy5leHBlY3QoXCI9PlwiKSxlPXt0eXBlOlwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiLHBhcmFtczpbZV0sYXN5bmM6ITF9O2Vsc2V7dmFyIG49ITE7aWYodGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITAsZT10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSx0aGlzLm1hdGNoKFwiLFwiKSl7dmFyIGk9W107Zm9yKHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsaS5wdXNoKGUpOzIhPT10aGlzLmxvb2thaGVhZC50eXBlJiZ0aGlzLm1hdGNoKFwiLFwiKTspe2lmKHRoaXMubmV4dFRva2VuKCksdGhpcy5tYXRjaChcIilcIikpe3RoaXMubmV4dFRva2VuKCk7Zm9yKHZhciBvPTA7bzxpLmxlbmd0aDtvKyspdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oaVtvXSk7bj0hMCxlPXt0eXBlOlwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiLHBhcmFtczppLGFzeW5jOiExfX1lbHNlIGlmKHRoaXMubWF0Y2goXCIuLi5cIikpe2Zvcih0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudHx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCksaS5wdXNoKHRoaXMucGFyc2VSZXN0RWxlbWVudChyKSksdGhpcy5leHBlY3QoXCIpXCIpLHRoaXMubWF0Y2goXCI9PlwiKXx8dGhpcy5leHBlY3QoXCI9PlwiKSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSxvPTA7bzxpLmxlbmd0aDtvKyspdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oaVtvXSk7bj0hMCxlPXt0eXBlOlwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiLHBhcmFtczppLGFzeW5jOiExfX1lbHNlIGkucHVzaCh0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk7aWYobilicmVha31ufHwoZT10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHQpLG5ldyBhLlNlcXVlbmNlRXhwcmVzc2lvbihpKSkpfWlmKCFuKXtpZih0aGlzLmV4cGVjdChcIilcIiksdGhpcy5tYXRjaChcIj0+XCIpJiYoZS50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmXCJ5aWVsZFwiPT09ZS5uYW1lJiYobj0hMCxlPXt0eXBlOlwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiLHBhcmFtczpbZV0sYXN5bmM6ITF9KSwhbikpe2lmKHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50fHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSxlLnR5cGU9PT11LlN5bnRheC5TZXF1ZW5jZUV4cHJlc3Npb24pZm9yKG89MDtvPGUuZXhwcmVzc2lvbnMubGVuZ3RoO28rKyl0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihlLmV4cHJlc3Npb25zW29dKTtlbHNlIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGUpO2U9e3R5cGU6XCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCIscGFyYW1zOmUudHlwZT09PXUuU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbj9lLmV4cHJlc3Npb25zOltlXSxhc3luYzohMX19dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITF9fX1yZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VBcmd1bWVudHM9ZnVuY3Rpb24oKXt0aGlzLmV4cGVjdChcIihcIik7dmFyIGU9W107aWYoIXRoaXMubWF0Y2goXCIpXCIpKWZvcig7Oyl7dmFyIHQ9dGhpcy5tYXRjaChcIi4uLlwiKT90aGlzLnBhcnNlU3ByZWFkRWxlbWVudCgpOnRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO2lmKGUucHVzaCh0KSx0aGlzLm1hdGNoKFwiKVwiKSlicmVhaztpZih0aGlzLmV4cGVjdENvbW1hU2VwYXJhdG9yKCksdGhpcy5tYXRjaChcIilcIikpYnJlYWt9cmV0dXJuIHRoaXMuZXhwZWN0KFwiKVwiKSxlfSxlLnByb3RvdHlwZS5pc0lkZW50aWZpZXJOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiAzPT09ZS50eXBlfHw0PT09ZS50eXBlfHwxPT09ZS50eXBlfHw1PT09ZS50eXBlfSxlLnByb3RvdHlwZS5wYXJzZUlkZW50aWZpZXJOYW1lPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLm5leHRUb2tlbigpO3JldHVybiB0aGlzLmlzSWRlbnRpZmllck5hbWUodCl8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCksdGhpcy5maW5hbGl6ZShlLG5ldyBhLklkZW50aWZpZXIodC52YWx1ZSkpfSxlLnByb3RvdHlwZS5wYXJzZU5ld0V4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuY3JlYXRlTm9kZSgpLHI9dGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7aWYobi5hc3NlcnQoXCJuZXdcIj09PXIubmFtZSxcIk5ldyBleHByZXNzaW9uIG11c3Qgc3RhcnQgd2l0aCBgbmV3YFwiKSx0aGlzLm1hdGNoKFwiLlwiKSlpZih0aGlzLm5leHRUb2tlbigpLDM9PT10aGlzLmxvb2thaGVhZC50eXBlJiZ0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkmJlwidGFyZ2V0XCI9PT10aGlzLmxvb2thaGVhZC52YWx1ZSl7dmFyIGk9dGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7ZT1uZXcgYS5NZXRhUHJvcGVydHkocixpKX1lbHNlIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO2Vsc2V7dmFyIG89dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uKSxzPXRoaXMubWF0Y2goXCIoXCIpP3RoaXMucGFyc2VBcmd1bWVudHMoKTpbXTtlPW5ldyBhLk5ld0V4cHJlc3Npb24obyxzKSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExfXJldHVybiB0aGlzLmZpbmFsaXplKHQsZSl9LGUucHJvdG90eXBlLnBhcnNlQXN5bmNBcmd1bWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO3JldHVybiB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yPW51bGwsZX0sZS5wcm90b3R5cGUucGFyc2VBc3luY0FyZ3VtZW50cz1mdW5jdGlvbigpe3RoaXMuZXhwZWN0KFwiKFwiKTt2YXIgZT1bXTtpZighdGhpcy5tYXRjaChcIilcIikpZm9yKDs7KXt2YXIgdD10aGlzLm1hdGNoKFwiLi4uXCIpP3RoaXMucGFyc2VTcHJlYWRFbGVtZW50KCk6dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3luY0FyZ3VtZW50KTtpZihlLnB1c2godCksdGhpcy5tYXRjaChcIilcIikpYnJlYWs7aWYodGhpcy5leHBlY3RDb21tYVNlcGFyYXRvcigpLHRoaXMubWF0Y2goXCIpXCIpKWJyZWFrfXJldHVybiB0aGlzLmV4cGVjdChcIilcIiksZX0sZS5wcm90b3R5cGUucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmxvb2thaGVhZCxyPXRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzeW5jXCIpLG49dGhpcy5jb250ZXh0LmFsbG93SW47Zm9yKHRoaXMuY29udGV4dC5hbGxvd0luPSEwLHRoaXMubWF0Y2hLZXl3b3JkKFwic3VwZXJcIikmJnRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keT8oZT10aGlzLmNyZWF0ZU5vZGUoKSx0aGlzLm5leHRUb2tlbigpLGU9dGhpcy5maW5hbGl6ZShlLG5ldyBhLlN1cGVyKSx0aGlzLm1hdGNoKFwiKFwiKXx8dGhpcy5tYXRjaChcIi5cIil8fHRoaXMubWF0Y2goXCJbXCIpfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSk6ZT10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5tYXRjaEtleXdvcmQoXCJuZXdcIik/dGhpcy5wYXJzZU5ld0V4cHJlc3Npb246dGhpcy5wYXJzZVByaW1hcnlFeHByZXNzaW9uKTs7KWlmKHRoaXMubWF0Y2goXCIuXCIpKXt0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSEwLHRoaXMuZXhwZWN0KFwiLlwiKTt2YXIgaT10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtlPXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUodCksbmV3IGEuU3RhdGljTWVtYmVyRXhwcmVzc2lvbihlLGkpKX1lbHNlIGlmKHRoaXMubWF0Y2goXCIoXCIpKXt2YXIgbz1yJiZ0LmxpbmVOdW1iZXI9PT10aGlzLmxvb2thaGVhZC5saW5lTnVtYmVyO3RoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITE7dmFyIHM9bz90aGlzLnBhcnNlQXN5bmNBcmd1bWVudHMoKTp0aGlzLnBhcnNlQXJndW1lbnRzKCk7aWYoZT10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHQpLG5ldyBhLkNhbGxFeHByZXNzaW9uKGUscykpLG8mJnRoaXMubWF0Y2goXCI9PlwiKSl7Zm9yKHZhciB1PTA7dTxzLmxlbmd0aDsrK3UpdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oc1t1XSk7ZT17dHlwZTpcIkFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXJcIixwYXJhbXM6cyxhc3luYzohMH19fWVsc2UgaWYodGhpcy5tYXRjaChcIltcIikpdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMCx0aGlzLmV4cGVjdChcIltcIiksaT10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUV4cHJlc3Npb24pLHRoaXMuZXhwZWN0KFwiXVwiKSxlPXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUodCksbmV3IGEuQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uKGUsaSkpO2Vsc2V7aWYoMTAhPT10aGlzLmxvb2thaGVhZC50eXBlfHwhdGhpcy5sb29rYWhlYWQuaGVhZClicmVhazt2YXIgbD10aGlzLnBhcnNlVGVtcGxhdGVMaXRlcmFsKCk7ZT10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHQpLG5ldyBhLlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihlLGwpKX1yZXR1cm4gdGhpcy5jb250ZXh0LmFsbG93SW49bixlfSxlLnByb3RvdHlwZS5wYXJzZVN1cGVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7cmV0dXJuIHRoaXMuZXhwZWN0S2V5d29yZChcInN1cGVyXCIpLHRoaXMubWF0Y2goXCJbXCIpfHx0aGlzLm1hdGNoKFwiLlwiKXx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCksdGhpcy5maW5hbGl6ZShlLG5ldyBhLlN1cGVyKX0sZS5wcm90b3R5cGUucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uPWZ1bmN0aW9uKCl7bi5hc3NlcnQodGhpcy5jb250ZXh0LmFsbG93SW4sXCJjYWxsZWUgb2YgbmV3IGV4cHJlc3Npb24gYWx3YXlzIGFsbG93IGluIGtleXdvcmQuXCIpO2Zvcih2YXIgZT10aGlzLnN0YXJ0Tm9kZSh0aGlzLmxvb2thaGVhZCksdD10aGlzLm1hdGNoS2V5d29yZChcInN1cGVyXCIpJiZ0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHk/dGhpcy5wYXJzZVN1cGVyKCk6dGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMubWF0Y2hLZXl3b3JkKFwibmV3XCIpP3RoaXMucGFyc2VOZXdFeHByZXNzaW9uOnRoaXMucGFyc2VQcmltYXJ5RXhwcmVzc2lvbik7OylpZih0aGlzLm1hdGNoKFwiW1wiKSl7dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMCx0aGlzLmV4cGVjdChcIltcIik7dmFyIHI9dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHByZXNzaW9uKTt0aGlzLmV4cGVjdChcIl1cIiksdD10aGlzLmZpbmFsaXplKGUsbmV3IGEuQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uKHQscikpfWVsc2UgaWYodGhpcy5tYXRjaChcIi5cIikpdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMCx0aGlzLmV4cGVjdChcIi5cIikscj10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKSx0PXRoaXMuZmluYWxpemUoZSxuZXcgYS5TdGF0aWNNZW1iZXJFeHByZXNzaW9uKHQscikpO2Vsc2V7aWYoMTAhPT10aGlzLmxvb2thaGVhZC50eXBlfHwhdGhpcy5sb29rYWhlYWQuaGVhZClicmVhazt2YXIgaT10aGlzLnBhcnNlVGVtcGxhdGVMaXRlcmFsKCk7dD10aGlzLmZpbmFsaXplKGUsbmV3IGEuVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uKHQsaSkpfXJldHVybiB0fSxlLnByb3RvdHlwZS5wYXJzZVVwZGF0ZUV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMubG9va2FoZWFkO2lmKHRoaXMubWF0Y2goXCIrK1wiKXx8dGhpcy5tYXRjaChcIi0tXCIpKXt2YXIgcj10aGlzLnN0YXJ0Tm9kZSh0KSxuPXRoaXMubmV4dFRva2VuKCk7ZT10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZVVuYXJ5RXhwcmVzc2lvbiksdGhpcy5jb250ZXh0LnN0cmljdCYmZS50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmdGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoZS5uYW1lKSYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuU3RyaWN0TEhTUHJlZml4KSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0fHx0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5JbnZhbGlkTEhTSW5Bc3NpZ25tZW50KTt2YXIgaT0hMDtlPXRoaXMuZmluYWxpemUocixuZXcgYS5VcGRhdGVFeHByZXNzaW9uKG4udmFsdWUsZSxpKSksdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMX1lbHNlIGlmKGU9dGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsKSwhdGhpcy5oYXNMaW5lVGVybWluYXRvciYmNz09PXRoaXMubG9va2FoZWFkLnR5cGUmJih0aGlzLm1hdGNoKFwiKytcIil8fHRoaXMubWF0Y2goXCItLVwiKSkpe3RoaXMuY29udGV4dC5zdHJpY3QmJmUudHlwZT09PXUuU3ludGF4LklkZW50aWZpZXImJnRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGUubmFtZSkmJnRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLlN0cmljdExIU1Bvc3RmaXgpLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXR8fHRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkludmFsaWRMSFNJbkFzc2lnbm1lbnQpLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITE7dmFyIHM9dGhpcy5uZXh0VG9rZW4oKS52YWx1ZTtpPSExLGU9dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZSh0KSxuZXcgYS5VcGRhdGVFeHByZXNzaW9uKHMsZSxpKSl9cmV0dXJuIGV9LGUucHJvdG90eXBlLnBhcnNlQXdhaXRFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5uZXh0VG9rZW4oKTt2YXIgdD10aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKCk7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5Bd2FpdEV4cHJlc3Npb24odCkpfSxlLnByb3RvdHlwZS5wYXJzZVVuYXJ5RXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlO2lmKHRoaXMubWF0Y2goXCIrXCIpfHx0aGlzLm1hdGNoKFwiLVwiKXx8dGhpcy5tYXRjaChcIn5cIil8fHRoaXMubWF0Y2goXCIhXCIpfHx0aGlzLm1hdGNoS2V5d29yZChcImRlbGV0ZVwiKXx8dGhpcy5tYXRjaEtleXdvcmQoXCJ2b2lkXCIpfHx0aGlzLm1hdGNoS2V5d29yZChcInR5cGVvZlwiKSl7dmFyIHQ9dGhpcy5zdGFydE5vZGUodGhpcy5sb29rYWhlYWQpLHI9dGhpcy5uZXh0VG9rZW4oKTtlPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKSxlPXRoaXMuZmluYWxpemUodCxuZXcgYS5VbmFyeUV4cHJlc3Npb24oci52YWx1ZSxlKSksdGhpcy5jb250ZXh0LnN0cmljdCYmXCJkZWxldGVcIj09PWUub3BlcmF0b3ImJmUuYXJndW1lbnQudHlwZT09PXUuU3ludGF4LklkZW50aWZpZXImJnRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLlN0cmljdERlbGV0ZSksdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMX1lbHNlIGU9dGhpcy5jb250ZXh0LmF3YWl0JiZ0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJhd2FpdFwiKT90aGlzLnBhcnNlQXdhaXRFeHByZXNzaW9uKCk6dGhpcy5wYXJzZVVwZGF0ZUV4cHJlc3Npb24oKTtyZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VFeHBvbmVudGlhdGlvbkV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxvb2thaGVhZCx0PXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKTtpZih0LnR5cGUhPT11LlN5bnRheC5VbmFyeUV4cHJlc3Npb24mJnRoaXMubWF0Y2goXCIqKlwiKSl7dGhpcy5uZXh0VG9rZW4oKSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExO3ZhciByPXQsbj10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbik7dD10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKGUpLG5ldyBhLkJpbmFyeUV4cHJlc3Npb24oXCIqKlwiLHIsbikpfXJldHVybiB0fSxlLnByb3RvdHlwZS5iaW5hcnlQcmVjZWRlbmNlPWZ1bmN0aW9uKGUpe3ZhciB0PWUudmFsdWU7cmV0dXJuIDc9PT1lLnR5cGU/dGhpcy5vcGVyYXRvclByZWNlZGVuY2VbdF18fDA6ND09PWUudHlwZSYmKFwiaW5zdGFuY2VvZlwiPT09dHx8dGhpcy5jb250ZXh0LmFsbG93SW4mJlwiaW5cIj09PXQpPzc6MH0sZS5wcm90b3R5cGUucGFyc2VCaW5hcnlFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sb29rYWhlYWQsdD10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbikscj10aGlzLmxvb2thaGVhZCxuPXRoaXMuYmluYXJ5UHJlY2VkZW5jZShyKTtpZihuPjApe3RoaXMubmV4dFRva2VuKCksdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMTtmb3IodmFyIGk9W2UsdGhpcy5sb29rYWhlYWRdLG89dCxzPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uKSx1PVtvLHIudmFsdWUsc10sbD1bbl07ISgobj10aGlzLmJpbmFyeVByZWNlZGVuY2UodGhpcy5sb29rYWhlYWQpKTw9MCk7KXtmb3IoO3UubGVuZ3RoPjImJm48PWxbbC5sZW5ndGgtMV07KXtzPXUucG9wKCk7dmFyIGM9dS5wb3AoKTtsLnBvcCgpLG89dS5wb3AoKSxpLnBvcCgpO3ZhciBoPXRoaXMuc3RhcnROb2RlKGlbaS5sZW5ndGgtMV0pO3UucHVzaCh0aGlzLmZpbmFsaXplKGgsbmV3IGEuQmluYXJ5RXhwcmVzc2lvbihjLG8scykpKX11LnB1c2godGhpcy5uZXh0VG9rZW4oKS52YWx1ZSksbC5wdXNoKG4pLGkucHVzaCh0aGlzLmxvb2thaGVhZCksdS5wdXNoKHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uKSl9dmFyIHA9dS5sZW5ndGgtMTt0PXVbcF07Zm9yKHZhciBmPWkucG9wKCk7cD4xOyl7dmFyIGQ9aS5wb3AoKSxtPWYmJmYubGluZVN0YXJ0O2g9dGhpcy5zdGFydE5vZGUoZCxtKSxjPXVbcC0xXSx0PXRoaXMuZmluYWxpemUoaCxuZXcgYS5CaW5hcnlFeHByZXNzaW9uKGMsdVtwLTJdLHQpKSxwLT0yLGY9ZH19cmV0dXJuIHR9LGUucHJvdG90eXBlLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sb29rYWhlYWQsdD10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUJpbmFyeUV4cHJlc3Npb24pO2lmKHRoaXMubWF0Y2goXCI/XCIpKXt0aGlzLm5leHRUb2tlbigpO3ZhciByPXRoaXMuY29udGV4dC5hbGxvd0luO3RoaXMuY29udGV4dC5hbGxvd0luPSEwO3ZhciBuPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO3RoaXMuY29udGV4dC5hbGxvd0luPXIsdGhpcy5leHBlY3QoXCI6XCIpO3ZhciBpPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO3Q9dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShlKSxuZXcgYS5Db25kaXRpb25hbEV4cHJlc3Npb24odCxuLGkpKSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExfXJldHVybiB0fSxlLnByb3RvdHlwZS5jaGVja1BhdHRlcm5QYXJhbT1mdW5jdGlvbihlLHQpe3N3aXRjaCh0LnR5cGUpe2Nhc2UgdS5TeW50YXguSWRlbnRpZmllcjp0aGlzLnZhbGlkYXRlUGFyYW0oZSx0LHQubmFtZSk7YnJlYWs7Y2FzZSB1LlN5bnRheC5SZXN0RWxlbWVudDp0aGlzLmNoZWNrUGF0dGVyblBhcmFtKGUsdC5hcmd1bWVudCk7YnJlYWs7Y2FzZSB1LlN5bnRheC5Bc3NpZ25tZW50UGF0dGVybjp0aGlzLmNoZWNrUGF0dGVyblBhcmFtKGUsdC5sZWZ0KTticmVhaztjYXNlIHUuU3ludGF4LkFycmF5UGF0dGVybjpmb3IodmFyIHI9MDtyPHQuZWxlbWVudHMubGVuZ3RoO3IrKyludWxsIT09dC5lbGVtZW50c1tyXSYmdGhpcy5jaGVja1BhdHRlcm5QYXJhbShlLHQuZWxlbWVudHNbcl0pO2JyZWFrO2Nhc2UgdS5TeW50YXguT2JqZWN0UGF0dGVybjpmb3Iocj0wO3I8dC5wcm9wZXJ0aWVzLmxlbmd0aDtyKyspdGhpcy5jaGVja1BhdHRlcm5QYXJhbShlLHQucHJvcGVydGllc1tyXS52YWx1ZSl9ZS5zaW1wbGU9ZS5zaW1wbGUmJnQgaW5zdGFuY2VvZiBhLklkZW50aWZpZXJ9LGUucHJvdG90eXBlLnJlaW50ZXJwcmV0QXNDb3ZlckZvcm1hbHNMaXN0PWZ1bmN0aW9uKGUpe3ZhciB0LHI9W2VdLG49ITE7c3dpdGNoKGUudHlwZSl7Y2FzZSB1LlN5bnRheC5JZGVudGlmaWVyOmJyZWFrO2Nhc2VcIkFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXJcIjpyPWUucGFyYW1zLG49ZS5hc3luYzticmVhaztkZWZhdWx0OnJldHVybiBudWxsfXQ9e3NpbXBsZTohMCxwYXJhbVNldDp7fX07Zm9yKHZhciBpPTA7aTxyLmxlbmd0aDsrK2kpKGE9cltpXSkudHlwZT09PXUuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuP2EucmlnaHQudHlwZT09PXUuU3ludGF4LllpZWxkRXhwcmVzc2lvbiYmKGEucmlnaHQuYXJndW1lbnQmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpLGEucmlnaHQudHlwZT11LlN5bnRheC5JZGVudGlmaWVyLGEucmlnaHQubmFtZT1cInlpZWxkXCIsZGVsZXRlIGEucmlnaHQuYXJndW1lbnQsZGVsZXRlIGEucmlnaHQuZGVsZWdhdGUpOm4mJmEudHlwZT09PXUuU3ludGF4LklkZW50aWZpZXImJlwiYXdhaXRcIj09PWEubmFtZSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCksdGhpcy5jaGVja1BhdHRlcm5QYXJhbSh0LGEpLHJbaV09YTtpZih0aGlzLmNvbnRleHQuc3RyaWN0fHwhdGhpcy5jb250ZXh0LmFsbG93WWllbGQpZm9yKGk9MDtpPHIubGVuZ3RoOysraSl7dmFyIGE7KGE9cltpXSkudHlwZT09PXUuU3ludGF4LllpZWxkRXhwcmVzc2lvbiYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCl9aWYodC5tZXNzYWdlPT09by5NZXNzYWdlcy5TdHJpY3RQYXJhbUR1cGUpe3ZhciBzPXRoaXMuY29udGV4dC5zdHJpY3Q/dC5zdHJpY3RlZDp0LmZpcnN0UmVzdHJpY3RlZDt0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHMsdC5tZXNzYWdlKX1yZXR1cm57c2ltcGxlOnQuc2ltcGxlLHBhcmFtczpyLHN0cmljdGVkOnQuc3RyaWN0ZWQsZmlyc3RSZXN0cmljdGVkOnQuZmlyc3RSZXN0cmljdGVkLG1lc3NhZ2U6dC5tZXNzYWdlfX0sZS5wcm90b3R5cGUucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlO2lmKCF0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCYmdGhpcy5tYXRjaEtleXdvcmQoXCJ5aWVsZFwiKSllPXRoaXMucGFyc2VZaWVsZEV4cHJlc3Npb24oKTtlbHNle3ZhciB0PXRoaXMubG9va2FoZWFkLHI9dDtpZihlPXRoaXMucGFyc2VDb25kaXRpb25hbEV4cHJlc3Npb24oKSwzPT09ci50eXBlJiZyLmxpbmVOdW1iZXI9PT10aGlzLmxvb2thaGVhZC5saW5lTnVtYmVyJiZcImFzeW5jXCI9PT1yLnZhbHVlJiYoMz09PXRoaXMubG9va2FoZWFkLnR5cGV8fHRoaXMubWF0Y2hLZXl3b3JkKFwieWllbGRcIikpKXt2YXIgbj10aGlzLnBhcnNlUHJpbWFyeUV4cHJlc3Npb24oKTt0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihuKSxlPXt0eXBlOlwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiLHBhcmFtczpbbl0sYXN5bmM6ITB9fWlmKFwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiPT09ZS50eXBlfHx0aGlzLm1hdGNoKFwiPT5cIikpe3RoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITE7dmFyIGk9ZS5hc3luYyxzPXRoaXMucmVpbnRlcnByZXRBc0NvdmVyRm9ybWFsc0xpc3QoZSk7aWYocyl7dGhpcy5oYXNMaW5lVGVybWluYXRvciYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCksdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcj1udWxsO3ZhciBsPXRoaXMuY29udGV4dC5zdHJpY3QsYz10aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU7dGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlPXMuc2ltcGxlO3ZhciBoPXRoaXMuY29udGV4dC5hbGxvd1lpZWxkLHA9dGhpcy5jb250ZXh0LmF3YWl0O3RoaXMuY29udGV4dC5hbGxvd1lpZWxkPSEwLHRoaXMuY29udGV4dC5hd2FpdD1pO3ZhciBmPXRoaXMuc3RhcnROb2RlKHQpO3RoaXMuZXhwZWN0KFwiPT5cIik7dmFyIGQ9dm9pZCAwO2lmKHRoaXMubWF0Y2goXCJ7XCIpKXt2YXIgbT10aGlzLmNvbnRleHQuYWxsb3dJbjt0aGlzLmNvbnRleHQuYWxsb3dJbj0hMCxkPXRoaXMucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCksdGhpcy5jb250ZXh0LmFsbG93SW49bX1lbHNlIGQ9dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7dmFyIHk9ZC50eXBlIT09dS5TeW50YXguQmxvY2tTdGF0ZW1lbnQ7dGhpcy5jb250ZXh0LnN0cmljdCYmcy5maXJzdFJlc3RyaWN0ZWQmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4ocy5maXJzdFJlc3RyaWN0ZWQscy5tZXNzYWdlKSx0aGlzLmNvbnRleHQuc3RyaWN0JiZzLnN0cmljdGVkJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHMuc3RyaWN0ZWQscy5tZXNzYWdlKSxlPWk/dGhpcy5maW5hbGl6ZShmLG5ldyBhLkFzeW5jQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ocy5wYXJhbXMsZCx5KSk6dGhpcy5maW5hbGl6ZShmLG5ldyBhLkFycm93RnVuY3Rpb25FeHByZXNzaW9uKHMucGFyYW1zLGQseSkpLHRoaXMuY29udGV4dC5zdHJpY3Q9bCx0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU9Yyx0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD1oLHRoaXMuY29udGV4dC5hd2FpdD1wfX1lbHNlIGlmKHRoaXMubWF0Y2hBc3NpZ24oKSl7aWYodGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldHx8dGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuSW52YWxpZExIU0luQXNzaWdubWVudCksdGhpcy5jb250ZXh0LnN0cmljdCYmZS50eXBlPT09dS5TeW50YXguSWRlbnRpZmllcil7dmFyIHY9ZTt0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZCh2Lm5hbWUpJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHIsby5NZXNzYWdlcy5TdHJpY3RMSFNBc3NpZ25tZW50KSx0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKHYubmFtZSkmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4ocixvLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZCl9dGhpcy5tYXRjaChcIj1cIik/dGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZSk6KHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEpO3ZhciBfPShyPXRoaXMubmV4dFRva2VuKCkpLnZhbHVlLGc9dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7ZT10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHQpLG5ldyBhLkFzc2lnbm1lbnRFeHByZXNzaW9uKF8sZSxnKSksdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcj1udWxsfX1yZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sb29rYWhlYWQsdD10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtpZih0aGlzLm1hdGNoKFwiLFwiKSl7dmFyIHI9W107Zm9yKHIucHVzaCh0KTsyIT09dGhpcy5sb29rYWhlYWQudHlwZSYmdGhpcy5tYXRjaChcIixcIik7KXRoaXMubmV4dFRva2VuKCksci5wdXNoKHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pKTt0PXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoZSksbmV3IGEuU2VxdWVuY2VFeHByZXNzaW9uKHIpKX1yZXR1cm4gdH0sZS5wcm90b3R5cGUucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbT1mdW5jdGlvbigpe3ZhciBlO2lmKHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITAsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITAsND09PXRoaXMubG9va2FoZWFkLnR5cGUpc3dpdGNoKHRoaXMubG9va2FoZWFkLnZhbHVlKXtjYXNlXCJleHBvcnRcIjp0aGlzLmNvbnRleHQuaXNNb2R1bGV8fHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQsby5NZXNzYWdlcy5JbGxlZ2FsRXhwb3J0RGVjbGFyYXRpb24pLGU9dGhpcy5wYXJzZUV4cG9ydERlY2xhcmF0aW9uKCk7YnJlYWs7Y2FzZVwiaW1wb3J0XCI6dGhpcy5jb250ZXh0LmlzTW9kdWxlfHx0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkLG8uTWVzc2FnZXMuSWxsZWdhbEltcG9ydERlY2xhcmF0aW9uKSxlPXRoaXMucGFyc2VJbXBvcnREZWNsYXJhdGlvbigpO2JyZWFrO2Nhc2VcImNvbnN0XCI6ZT10aGlzLnBhcnNlTGV4aWNhbERlY2xhcmF0aW9uKHtpbkZvcjohMX0pO2JyZWFrO2Nhc2VcImZ1bmN0aW9uXCI6ZT10aGlzLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbigpO2JyZWFrO2Nhc2VcImNsYXNzXCI6ZT10aGlzLnBhcnNlQ2xhc3NEZWNsYXJhdGlvbigpO2JyZWFrO2Nhc2VcImxldFwiOmU9dGhpcy5pc0xleGljYWxEZWNsYXJhdGlvbigpP3RoaXMucGFyc2VMZXhpY2FsRGVjbGFyYXRpb24oe2luRm9yOiExfSk6dGhpcy5wYXJzZVN0YXRlbWVudCgpO2JyZWFrO2RlZmF1bHQ6ZT10aGlzLnBhcnNlU3RhdGVtZW50KCl9ZWxzZSBlPXRoaXMucGFyc2VTdGF0ZW1lbnQoKTtyZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VCbG9jaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0KFwie1wiKTtmb3IodmFyIHQ9W107IXRoaXMubWF0Y2goXCJ9XCIpOyl0LnB1c2godGhpcy5wYXJzZVN0YXRlbWVudExpc3RJdGVtKCkpO3JldHVybiB0aGlzLmV4cGVjdChcIn1cIiksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkJsb2NrU3RhdGVtZW50KHQpKX0sZS5wcm90b3R5cGUucGFyc2VMZXhpY2FsQmluZGluZz1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuY3JlYXRlTm9kZSgpLG49dGhpcy5wYXJzZVBhdHRlcm4oW10sZSk7dGhpcy5jb250ZXh0LnN0cmljdCYmbi50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmdGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQobi5uYW1lKSYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuU3RyaWN0VmFyTmFtZSk7dmFyIGk9bnVsbDtyZXR1cm5cImNvbnN0XCI9PT1lP3RoaXMubWF0Y2hLZXl3b3JkKFwiaW5cIil8fHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcIm9mXCIpfHwodGhpcy5tYXRjaChcIj1cIik/KHRoaXMubmV4dFRva2VuKCksaT10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk6dGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuRGVjbGFyYXRpb25NaXNzaW5nSW5pdGlhbGl6ZXIsXCJjb25zdFwiKSk6KCF0LmluRm9yJiZuLnR5cGUhPT11LlN5bnRheC5JZGVudGlmaWVyfHx0aGlzLm1hdGNoKFwiPVwiKSkmJih0aGlzLmV4cGVjdChcIj1cIiksaT10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSksdGhpcy5maW5hbGl6ZShyLG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRvcihuLGkpKX0sZS5wcm90b3R5cGUucGFyc2VCaW5kaW5nTGlzdD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1bdGhpcy5wYXJzZUxleGljYWxCaW5kaW5nKGUsdCldO3RoaXMubWF0Y2goXCIsXCIpOyl0aGlzLm5leHRUb2tlbigpLHIucHVzaCh0aGlzLnBhcnNlTGV4aWNhbEJpbmRpbmcoZSx0KSk7cmV0dXJuIHJ9LGUucHJvdG90eXBlLmlzTGV4aWNhbERlY2xhcmF0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zY2FubmVyLnNhdmVTdGF0ZSgpO3RoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTt2YXIgdD10aGlzLnNjYW5uZXIubGV4KCk7cmV0dXJuIHRoaXMuc2Nhbm5lci5yZXN0b3JlU3RhdGUoZSksMz09PXQudHlwZXx8Nz09PXQudHlwZSYmXCJbXCI9PT10LnZhbHVlfHw3PT09dC50eXBlJiZcIntcIj09PXQudmFsdWV8fDQ9PT10LnR5cGUmJlwibGV0XCI9PT10LnZhbHVlfHw0PT09dC50eXBlJiZcInlpZWxkXCI9PT10LnZhbHVlfSxlLnByb3RvdHlwZS5wYXJzZUxleGljYWxEZWNsYXJhdGlvbj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmNyZWF0ZU5vZGUoKSxyPXRoaXMubmV4dFRva2VuKCkudmFsdWU7bi5hc3NlcnQoXCJsZXRcIj09PXJ8fFwiY29uc3RcIj09PXIsXCJMZXhpY2FsIGRlY2xhcmF0aW9uIG11c3QgYmUgZWl0aGVyIGxldCBvciBjb25zdFwiKTt2YXIgaT10aGlzLnBhcnNlQmluZGluZ0xpc3QocixlKTtyZXR1cm4gdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksdGhpcy5maW5hbGl6ZSh0LG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRpb24oaSxyKSl9LGUucHJvdG90eXBlLnBhcnNlQmluZGluZ1Jlc3RFbGVtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3QoXCIuLi5cIik7dmFyIG49dGhpcy5wYXJzZVBhdHRlcm4oZSx0KTtyZXR1cm4gdGhpcy5maW5hbGl6ZShyLG5ldyBhLlJlc3RFbGVtZW50KG4pKX0sZS5wcm90b3R5cGUucGFyc2VBcnJheVBhdHRlcm49ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdChcIltcIik7Zm9yKHZhciBuPVtdOyF0aGlzLm1hdGNoKFwiXVwiKTspaWYodGhpcy5tYXRjaChcIixcIikpdGhpcy5uZXh0VG9rZW4oKSxuLnB1c2gobnVsbCk7ZWxzZXtpZih0aGlzLm1hdGNoKFwiLi4uXCIpKXtuLnB1c2godGhpcy5wYXJzZUJpbmRpbmdSZXN0RWxlbWVudChlLHQpKTticmVha31uLnB1c2godGhpcy5wYXJzZVBhdHRlcm5XaXRoRGVmYXVsdChlLHQpKSx0aGlzLm1hdGNoKFwiXVwiKXx8dGhpcy5leHBlY3QoXCIsXCIpfXJldHVybiB0aGlzLmV4cGVjdChcIl1cIiksdGhpcy5maW5hbGl6ZShyLG5ldyBhLkFycmF5UGF0dGVybihuKSl9LGUucHJvdG90eXBlLnBhcnNlUHJvcGVydHlQYXR0ZXJuPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpPXRoaXMuY3JlYXRlTm9kZSgpLG89ITEscz0hMTtpZigzPT09dGhpcy5sb29rYWhlYWQudHlwZSl7dmFyIHU9dGhpcy5sb29rYWhlYWQ7cj10aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7dmFyIGw9dGhpcy5maW5hbGl6ZShpLG5ldyBhLklkZW50aWZpZXIodS52YWx1ZSkpO2lmKHRoaXMubWF0Y2goXCI9XCIpKXtlLnB1c2godSkscz0hMCx0aGlzLm5leHRUb2tlbigpO3ZhciBjPXRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO249dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZSh1KSxuZXcgYS5Bc3NpZ25tZW50UGF0dGVybihsLGMpKX1lbHNlIHRoaXMubWF0Y2goXCI6XCIpPyh0aGlzLmV4cGVjdChcIjpcIiksbj10aGlzLnBhcnNlUGF0dGVybldpdGhEZWZhdWx0KGUsdCkpOihlLnB1c2godSkscz0hMCxuPWwpfWVsc2Ugbz10aGlzLm1hdGNoKFwiW1wiKSxyPXRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpLHRoaXMuZXhwZWN0KFwiOlwiKSxuPXRoaXMucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQoZSx0KTtyZXR1cm4gdGhpcy5maW5hbGl6ZShpLG5ldyBhLlByb3BlcnR5KFwiaW5pdFwiLHIsbyxuLCExLHMpKX0sZS5wcm90b3R5cGUucGFyc2VPYmplY3RQYXR0ZXJuPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5jcmVhdGVOb2RlKCksbj1bXTtmb3IodGhpcy5leHBlY3QoXCJ7XCIpOyF0aGlzLm1hdGNoKFwifVwiKTspbi5wdXNoKHRoaXMucGFyc2VQcm9wZXJ0eVBhdHRlcm4oZSx0KSksdGhpcy5tYXRjaChcIn1cIil8fHRoaXMuZXhwZWN0KFwiLFwiKTtyZXR1cm4gdGhpcy5leHBlY3QoXCJ9XCIpLHRoaXMuZmluYWxpemUocixuZXcgYS5PYmplY3RQYXR0ZXJuKG4pKX0sZS5wcm90b3R5cGUucGFyc2VQYXR0ZXJuPWZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIHRoaXMubWF0Y2goXCJbXCIpP3I9dGhpcy5wYXJzZUFycmF5UGF0dGVybihlLHQpOnRoaXMubWF0Y2goXCJ7XCIpP3I9dGhpcy5wYXJzZU9iamVjdFBhdHRlcm4oZSx0KTooIXRoaXMubWF0Y2hLZXl3b3JkKFwibGV0XCIpfHxcImNvbnN0XCIhPT10JiZcImxldFwiIT09dHx8dGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCxvLk1lc3NhZ2VzLkxldEluTGV4aWNhbEJpbmRpbmcpLGUucHVzaCh0aGlzLmxvb2thaGVhZCkscj10aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKHQpKSxyfSxlLnByb3RvdHlwZS5wYXJzZVBhdHRlcm5XaXRoRGVmYXVsdD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMubG9va2FoZWFkLG49dGhpcy5wYXJzZVBhdHRlcm4oZSx0KTtpZih0aGlzLm1hdGNoKFwiPVwiKSl7dGhpcy5uZXh0VG9rZW4oKTt2YXIgaT10aGlzLmNvbnRleHQuYWxsb3dZaWVsZDt0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0hMDt2YXIgbz10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTt0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD1pLG49dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShyKSxuZXcgYS5Bc3NpZ25tZW50UGF0dGVybihuLG8pKX1yZXR1cm4gbn0sZS5wcm90b3R5cGUucGFyc2VWYXJpYWJsZUlkZW50aWZpZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jcmVhdGVOb2RlKCkscj10aGlzLm5leHRUb2tlbigpO3JldHVybiA0PT09ci50eXBlJiZcInlpZWxkXCI9PT1yLnZhbHVlP3RoaXMuY29udGV4dC5zdHJpY3Q/dGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihyLG8uTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkKTp0aGlzLmNvbnRleHQuYWxsb3dZaWVsZHx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihyKTozIT09ci50eXBlP3RoaXMuY29udGV4dC5zdHJpY3QmJjQ9PT1yLnR5cGUmJnRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQoci52YWx1ZSk/dGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihyLG8uTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkKToodGhpcy5jb250ZXh0LnN0cmljdHx8XCJsZXRcIiE9PXIudmFsdWV8fFwidmFyXCIhPT1lKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihyKToodGhpcy5jb250ZXh0LmlzTW9kdWxlfHx0aGlzLmNvbnRleHQuYXdhaXQpJiYzPT09ci50eXBlJiZcImF3YWl0XCI9PT1yLnZhbHVlJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHIpLHRoaXMuZmluYWxpemUodCxuZXcgYS5JZGVudGlmaWVyKHIudmFsdWUpKX0sZS5wcm90b3R5cGUucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY3JlYXRlTm9kZSgpLHI9dGhpcy5wYXJzZVBhdHRlcm4oW10sXCJ2YXJcIik7dGhpcy5jb250ZXh0LnN0cmljdCYmci50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmdGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoci5uYW1lKSYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuU3RyaWN0VmFyTmFtZSk7dmFyIG49bnVsbDtyZXR1cm4gdGhpcy5tYXRjaChcIj1cIik/KHRoaXMubmV4dFRva2VuKCksbj10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk6ci50eXBlPT09dS5TeW50YXguSWRlbnRpZmllcnx8ZS5pbkZvcnx8dGhpcy5leHBlY3QoXCI9XCIpLHRoaXMuZmluYWxpemUodCxuZXcgYS5WYXJpYWJsZURlY2xhcmF0b3IocixuKSl9LGUucHJvdG90eXBlLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbkxpc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9e2luRm9yOmUuaW5Gb3J9LHI9W107Zm9yKHIucHVzaCh0aGlzLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbih0KSk7dGhpcy5tYXRjaChcIixcIik7KXRoaXMubmV4dFRva2VuKCksci5wdXNoKHRoaXMucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uKHQpKTtyZXR1cm4gcn0sZS5wcm90b3R5cGUucGFyc2VWYXJpYWJsZVN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcInZhclwiKTt2YXIgdD10aGlzLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbkxpc3Qoe2luRm9yOiExfSk7cmV0dXJuIHRoaXMuY29uc3VtZVNlbWljb2xvbigpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5WYXJpYWJsZURlY2xhcmF0aW9uKHQsXCJ2YXJcIikpfSxlLnByb3RvdHlwZS5wYXJzZUVtcHR5U3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7cmV0dXJuIHRoaXMuZXhwZWN0KFwiO1wiKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRW1wdHlTdGF0ZW1lbnQpfSxlLnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMucGFyc2VFeHByZXNzaW9uKCk7cmV0dXJuIHRoaXMuY29uc3VtZVNlbWljb2xvbigpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5FeHByZXNzaW9uU3RhdGVtZW50KHQpKX0sZS5wcm90b3R5cGUucGFyc2VJZkNsYXVzZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRleHQuc3RyaWN0JiZ0aGlzLm1hdGNoS2V5d29yZChcImZ1bmN0aW9uXCIpJiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbiksdGhpcy5wYXJzZVN0YXRlbWVudCgpfSxlLnByb3RvdHlwZS5wYXJzZUlmU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmNyZWF0ZU5vZGUoKSxyPW51bGw7dGhpcy5leHBlY3RLZXl3b3JkKFwiaWZcIiksdGhpcy5leHBlY3QoXCIoXCIpO3ZhciBuPXRoaXMucGFyc2VFeHByZXNzaW9uKCk7cmV0dXJuIXRoaXMubWF0Y2goXCIpXCIpJiZ0aGlzLmNvbmZpZy50b2xlcmFudD8odGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKSxlPXRoaXMuZmluYWxpemUodGhpcy5jcmVhdGVOb2RlKCksbmV3IGEuRW1wdHlTdGF0ZW1lbnQpKToodGhpcy5leHBlY3QoXCIpXCIpLGU9dGhpcy5wYXJzZUlmQ2xhdXNlKCksdGhpcy5tYXRjaEtleXdvcmQoXCJlbHNlXCIpJiYodGhpcy5uZXh0VG9rZW4oKSxyPXRoaXMucGFyc2VJZkNsYXVzZSgpKSksdGhpcy5maW5hbGl6ZSh0LG5ldyBhLklmU3RhdGVtZW50KG4sZSxyKSl9LGUucHJvdG90eXBlLnBhcnNlRG9XaGlsZVN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcImRvXCIpO3ZhciB0PXRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbjt0aGlzLmNvbnRleHQuaW5JdGVyYXRpb249ITA7dmFyIHI9dGhpcy5wYXJzZVN0YXRlbWVudCgpO3RoaXMuY29udGV4dC5pbkl0ZXJhdGlvbj10LHRoaXMuZXhwZWN0S2V5d29yZChcIndoaWxlXCIpLHRoaXMuZXhwZWN0KFwiKFwiKTt2YXIgbj10aGlzLnBhcnNlRXhwcmVzc2lvbigpO3JldHVybiF0aGlzLm1hdGNoKFwiKVwiKSYmdGhpcy5jb25maWcudG9sZXJhbnQ/dGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKToodGhpcy5leHBlY3QoXCIpXCIpLHRoaXMubWF0Y2goXCI7XCIpJiZ0aGlzLm5leHRUb2tlbigpKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRG9XaGlsZVN0YXRlbWVudChyLG4pKX0sZS5wcm90b3R5cGUucGFyc2VXaGlsZVN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwid2hpbGVcIiksdGhpcy5leHBlY3QoXCIoXCIpO3ZhciByPXRoaXMucGFyc2VFeHByZXNzaW9uKCk7aWYoIXRoaXMubWF0Y2goXCIpXCIpJiZ0aGlzLmNvbmZpZy50b2xlcmFudCl0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpLGU9dGhpcy5maW5hbGl6ZSh0aGlzLmNyZWF0ZU5vZGUoKSxuZXcgYS5FbXB0eVN0YXRlbWVudCk7ZWxzZXt0aGlzLmV4cGVjdChcIilcIik7dmFyIG49dGhpcy5jb250ZXh0LmluSXRlcmF0aW9uO3RoaXMuY29udGV4dC5pbkl0ZXJhdGlvbj0hMCxlPXRoaXMucGFyc2VTdGF0ZW1lbnQoKSx0aGlzLmNvbnRleHQuaW5JdGVyYXRpb249bn1yZXR1cm4gdGhpcy5maW5hbGl6ZSh0LG5ldyBhLldoaWxlU3RhdGVtZW50KHIsZSkpfSxlLnByb3RvdHlwZS5wYXJzZUZvclN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlLHQscixuPW51bGwsaT1udWxsLHM9bnVsbCxsPSEwLGM9dGhpcy5jcmVhdGVOb2RlKCk7aWYodGhpcy5leHBlY3RLZXl3b3JkKFwiZm9yXCIpLHRoaXMuZXhwZWN0KFwiKFwiKSx0aGlzLm1hdGNoKFwiO1wiKSl0aGlzLm5leHRUb2tlbigpO2Vsc2UgaWYodGhpcy5tYXRjaEtleXdvcmQoXCJ2YXJcIikpe249dGhpcy5jcmVhdGVOb2RlKCksdGhpcy5uZXh0VG9rZW4oKTt2YXIgaD10aGlzLmNvbnRleHQuYWxsb3dJbjt0aGlzLmNvbnRleHQuYWxsb3dJbj0hMTt2YXIgcD10aGlzLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbkxpc3Qoe2luRm9yOiEwfSk7aWYodGhpcy5jb250ZXh0LmFsbG93SW49aCwxPT09cC5sZW5ndGgmJnRoaXMubWF0Y2hLZXl3b3JkKFwiaW5cIikpe3ZhciBmPXBbMF07Zi5pbml0JiYoZi5pZC50eXBlPT09dS5TeW50YXguQXJyYXlQYXR0ZXJufHxmLmlkLnR5cGU9PT11LlN5bnRheC5PYmplY3RQYXR0ZXJufHx0aGlzLmNvbnRleHQuc3RyaWN0KSYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuRm9ySW5PZkxvb3BJbml0aWFsaXplcixcImZvci1pblwiKSxuPXRoaXMuZmluYWxpemUobixuZXcgYS5WYXJpYWJsZURlY2xhcmF0aW9uKHAsXCJ2YXJcIikpLHRoaXMubmV4dFRva2VuKCksZT1uLHQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKSxuPW51bGx9ZWxzZSAxPT09cC5sZW5ndGgmJm51bGw9PT1wWzBdLmluaXQmJnRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcIm9mXCIpPyhuPXRoaXMuZmluYWxpemUobixuZXcgYS5WYXJpYWJsZURlY2xhcmF0aW9uKHAsXCJ2YXJcIikpLHRoaXMubmV4dFRva2VuKCksZT1uLHQ9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCksbj1udWxsLGw9ITEpOihuPXRoaXMuZmluYWxpemUobixuZXcgYS5WYXJpYWJsZURlY2xhcmF0aW9uKHAsXCJ2YXJcIikpLHRoaXMuZXhwZWN0KFwiO1wiKSl9ZWxzZSBpZih0aGlzLm1hdGNoS2V5d29yZChcImNvbnN0XCIpfHx0aGlzLm1hdGNoS2V5d29yZChcImxldFwiKSl7bj10aGlzLmNyZWF0ZU5vZGUoKTt2YXIgZD10aGlzLm5leHRUb2tlbigpLnZhbHVlO3RoaXMuY29udGV4dC5zdHJpY3R8fFwiaW5cIiE9PXRoaXMubG9va2FoZWFkLnZhbHVlPyhoPXRoaXMuY29udGV4dC5hbGxvd0luLHRoaXMuY29udGV4dC5hbGxvd0luPSExLHA9dGhpcy5wYXJzZUJpbmRpbmdMaXN0KGQse2luRm9yOiEwfSksdGhpcy5jb250ZXh0LmFsbG93SW49aCwxPT09cC5sZW5ndGgmJm51bGw9PT1wWzBdLmluaXQmJnRoaXMubWF0Y2hLZXl3b3JkKFwiaW5cIik/KG49dGhpcy5maW5hbGl6ZShuLG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRpb24ocCxkKSksdGhpcy5uZXh0VG9rZW4oKSxlPW4sdD10aGlzLnBhcnNlRXhwcmVzc2lvbigpLG49bnVsbCk6MT09PXAubGVuZ3RoJiZudWxsPT09cFswXS5pbml0JiZ0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJvZlwiKT8obj10aGlzLmZpbmFsaXplKG4sbmV3IGEuVmFyaWFibGVEZWNsYXJhdGlvbihwLGQpKSx0aGlzLm5leHRUb2tlbigpLGU9bix0PXRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpLG49bnVsbCxsPSExKToodGhpcy5jb25zdW1lU2VtaWNvbG9uKCksbj10aGlzLmZpbmFsaXplKG4sbmV3IGEuVmFyaWFibGVEZWNsYXJhdGlvbihwLGQpKSkpOihuPXRoaXMuZmluYWxpemUobixuZXcgYS5JZGVudGlmaWVyKGQpKSx0aGlzLm5leHRUb2tlbigpLGU9bix0PXRoaXMucGFyc2VFeHByZXNzaW9uKCksbj1udWxsKX1lbHNle3ZhciBtPXRoaXMubG9va2FoZWFkO2lmKGg9dGhpcy5jb250ZXh0LmFsbG93SW4sdGhpcy5jb250ZXh0LmFsbG93SW49ITEsbj10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSx0aGlzLmNvbnRleHQuYWxsb3dJbj1oLHRoaXMubWF0Y2hLZXl3b3JkKFwiaW5cIikpdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCYmbi50eXBlIT09dS5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb258fHRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkludmFsaWRMSFNJbkZvckluKSx0aGlzLm5leHRUb2tlbigpLHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKG4pLGU9bix0PXRoaXMucGFyc2VFeHByZXNzaW9uKCksbj1udWxsO2Vsc2UgaWYodGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwib2ZcIikpdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCYmbi50eXBlIT09dS5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb258fHRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkludmFsaWRMSFNJbkZvckxvb3ApLHRoaXMubmV4dFRva2VuKCksdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4obiksZT1uLHQ9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCksbj1udWxsLGw9ITE7ZWxzZXtpZih0aGlzLm1hdGNoKFwiLFwiKSl7Zm9yKHZhciB5PVtuXTt0aGlzLm1hdGNoKFwiLFwiKTspdGhpcy5uZXh0VG9rZW4oKSx5LnB1c2godGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbikpO249dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShtKSxuZXcgYS5TZXF1ZW5jZUV4cHJlc3Npb24oeSkpfXRoaXMuZXhwZWN0KFwiO1wiKX19aWYodm9pZCAwPT09ZSYmKHRoaXMubWF0Y2goXCI7XCIpfHwoaT10aGlzLnBhcnNlRXhwcmVzc2lvbigpKSx0aGlzLmV4cGVjdChcIjtcIiksdGhpcy5tYXRjaChcIilcIil8fChzPXRoaXMucGFyc2VFeHByZXNzaW9uKCkpKSwhdGhpcy5tYXRjaChcIilcIikmJnRoaXMuY29uZmlnLnRvbGVyYW50KXRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSkscj10aGlzLmZpbmFsaXplKHRoaXMuY3JlYXRlTm9kZSgpLG5ldyBhLkVtcHR5U3RhdGVtZW50KTtlbHNle3RoaXMuZXhwZWN0KFwiKVwiKTt2YXIgdj10aGlzLmNvbnRleHQuaW5JdGVyYXRpb247dGhpcy5jb250ZXh0LmluSXRlcmF0aW9uPSEwLHI9dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VTdGF0ZW1lbnQpLHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbj12fXJldHVybiB2b2lkIDA9PT1lP3RoaXMuZmluYWxpemUoYyxuZXcgYS5Gb3JTdGF0ZW1lbnQobixpLHMscikpOmw/dGhpcy5maW5hbGl6ZShjLG5ldyBhLkZvckluU3RhdGVtZW50KGUsdCxyKSk6dGhpcy5maW5hbGl6ZShjLG5ldyBhLkZvck9mU3RhdGVtZW50KGUsdCxyKSl9LGUucHJvdG90eXBlLnBhcnNlQ29udGludWVTdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdEtleXdvcmQoXCJjb250aW51ZVwiKTt2YXIgdD1udWxsO2lmKDM9PT10aGlzLmxvb2thaGVhZC50eXBlJiYhdGhpcy5oYXNMaW5lVGVybWluYXRvcil7dmFyIHI9dGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO3Q9cjt2YXIgbj1cIiRcIityLm5hbWU7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29udGV4dC5sYWJlbFNldCxuKXx8dGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuVW5rbm93bkxhYmVsLHIubmFtZSl9cmV0dXJuIHRoaXMuY29uc3VtZVNlbWljb2xvbigpLG51bGwhPT10fHx0aGlzLmNvbnRleHQuaW5JdGVyYXRpb258fHRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLklsbGVnYWxDb250aW51ZSksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkNvbnRpbnVlU3RhdGVtZW50KHQpKX0sZS5wcm90b3R5cGUucGFyc2VCcmVha1N0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcImJyZWFrXCIpO3ZhciB0PW51bGw7aWYoMz09PXRoaXMubG9va2FoZWFkLnR5cGUmJiF0aGlzLmhhc0xpbmVUZXJtaW5hdG9yKXt2YXIgcj10aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCksbj1cIiRcIityLm5hbWU7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29udGV4dC5sYWJlbFNldCxuKXx8dGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuVW5rbm93bkxhYmVsLHIubmFtZSksdD1yfXJldHVybiB0aGlzLmNvbnN1bWVTZW1pY29sb24oKSxudWxsIT09dHx8dGhpcy5jb250ZXh0LmluSXRlcmF0aW9ufHx0aGlzLmNvbnRleHQuaW5Td2l0Y2h8fHRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLklsbGVnYWxCcmVhayksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkJyZWFrU3RhdGVtZW50KHQpKX0sZS5wcm90b3R5cGUucGFyc2VSZXR1cm5TdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHl8fHRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLklsbGVnYWxSZXR1cm4pO3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcInJldHVyblwiKTt2YXIgdD0odGhpcy5tYXRjaChcIjtcIil8fHRoaXMubWF0Y2goXCJ9XCIpfHx0aGlzLmhhc0xpbmVUZXJtaW5hdG9yfHwyPT09dGhpcy5sb29rYWhlYWQudHlwZSkmJjghPT10aGlzLmxvb2thaGVhZC50eXBlJiYxMCE9PXRoaXMubG9va2FoZWFkLnR5cGU/bnVsbDp0aGlzLnBhcnNlRXhwcmVzc2lvbigpO3JldHVybiB0aGlzLmNvbnN1bWVTZW1pY29sb24oKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuUmV0dXJuU3RhdGVtZW50KHQpKX0sZS5wcm90b3R5cGUucGFyc2VXaXRoU3RhdGVtZW50PWZ1bmN0aW9uKCl7dGhpcy5jb250ZXh0LnN0cmljdCYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuU3RyaWN0TW9kZVdpdGgpO3ZhciBlLHQ9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwid2l0aFwiKSx0aGlzLmV4cGVjdChcIihcIik7dmFyIHI9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTtyZXR1cm4hdGhpcy5tYXRjaChcIilcIikmJnRoaXMuY29uZmlnLnRvbGVyYW50Pyh0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpLGU9dGhpcy5maW5hbGl6ZSh0aGlzLmNyZWF0ZU5vZGUoKSxuZXcgYS5FbXB0eVN0YXRlbWVudCkpOih0aGlzLmV4cGVjdChcIilcIiksZT10aGlzLnBhcnNlU3RhdGVtZW50KCkpLHRoaXMuZmluYWxpemUodCxuZXcgYS5XaXRoU3RhdGVtZW50KHIsZSkpfSxlLnByb3RvdHlwZS5wYXJzZVN3aXRjaENhc2U9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMubWF0Y2hLZXl3b3JkKFwiZGVmYXVsdFwiKT8odGhpcy5uZXh0VG9rZW4oKSxlPW51bGwpOih0aGlzLmV4cGVjdEtleXdvcmQoXCJjYXNlXCIpLGU9dGhpcy5wYXJzZUV4cHJlc3Npb24oKSksdGhpcy5leHBlY3QoXCI6XCIpO2Zvcih2YXIgcj1bXTshKHRoaXMubWF0Y2goXCJ9XCIpfHx0aGlzLm1hdGNoS2V5d29yZChcImRlZmF1bHRcIil8fHRoaXMubWF0Y2hLZXl3b3JkKFwiY2FzZVwiKSk7KXIucHVzaCh0aGlzLnBhcnNlU3RhdGVtZW50TGlzdEl0ZW0oKSk7cmV0dXJuIHRoaXMuZmluYWxpemUodCxuZXcgYS5Td2l0Y2hDYXNlKGUscikpfSxlLnByb3RvdHlwZS5wYXJzZVN3aXRjaFN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcInN3aXRjaFwiKSx0aGlzLmV4cGVjdChcIihcIik7dmFyIHQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTt0aGlzLmV4cGVjdChcIilcIik7dmFyIHI9dGhpcy5jb250ZXh0LmluU3dpdGNoO3RoaXMuY29udGV4dC5pblN3aXRjaD0hMDt2YXIgbj1bXSxpPSExO2Zvcih0aGlzLmV4cGVjdChcIntcIik7IXRoaXMubWF0Y2goXCJ9XCIpOyl7dmFyIHM9dGhpcy5wYXJzZVN3aXRjaENhc2UoKTtudWxsPT09cy50ZXN0JiYoaSYmdGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuTXVsdGlwbGVEZWZhdWx0c0luU3dpdGNoKSxpPSEwKSxuLnB1c2gocyl9cmV0dXJuIHRoaXMuZXhwZWN0KFwifVwiKSx0aGlzLmNvbnRleHQuaW5Td2l0Y2g9cix0aGlzLmZpbmFsaXplKGUsbmV3IGEuU3dpdGNoU3RhdGVtZW50KHQsbikpfSxlLnByb3RvdHlwZS5wYXJzZUxhYmVsbGVkU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmNyZWF0ZU5vZGUoKSxyPXRoaXMucGFyc2VFeHByZXNzaW9uKCk7aWYoci50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmdGhpcy5tYXRjaChcIjpcIikpe3RoaXMubmV4dFRva2VuKCk7dmFyIG49cixpPVwiJFwiK24ubmFtZTtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb250ZXh0LmxhYmVsU2V0LGkpJiZ0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5SZWRlY2xhcmF0aW9uLFwiTGFiZWxcIixuLm5hbWUpLHRoaXMuY29udGV4dC5sYWJlbFNldFtpXT0hMDt2YXIgcz12b2lkIDA7aWYodGhpcy5tYXRjaEtleXdvcmQoXCJjbGFzc1wiKSl0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSxzPXRoaXMucGFyc2VDbGFzc0RlY2xhcmF0aW9uKCk7ZWxzZSBpZih0aGlzLm1hdGNoS2V5d29yZChcImZ1bmN0aW9uXCIpKXt2YXIgbD10aGlzLmxvb2thaGVhZCxjPXRoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk7dGhpcy5jb250ZXh0LnN0cmljdD90aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGwsby5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbik6Yy5nZW5lcmF0b3ImJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4obCxvLk1lc3NhZ2VzLkdlbmVyYXRvckluTGVnYWN5Q29udGV4dCkscz1jfWVsc2Ugcz10aGlzLnBhcnNlU3RhdGVtZW50KCk7ZGVsZXRlIHRoaXMuY29udGV4dC5sYWJlbFNldFtpXSxlPW5ldyBhLkxhYmVsZWRTdGF0ZW1lbnQobixzKX1lbHNlIHRoaXMuY29uc3VtZVNlbWljb2xvbigpLGU9bmV3IGEuRXhwcmVzc2lvblN0YXRlbWVudChyKTtyZXR1cm4gdGhpcy5maW5hbGl6ZSh0LGUpfSxlLnByb3RvdHlwZS5wYXJzZVRocm93U3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwidGhyb3dcIiksdGhpcy5oYXNMaW5lVGVybWluYXRvciYmdGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuTmV3bGluZUFmdGVyVGhyb3cpO3ZhciB0PXRoaXMucGFyc2VFeHByZXNzaW9uKCk7cmV0dXJuIHRoaXMuY29uc3VtZVNlbWljb2xvbigpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5UaHJvd1N0YXRlbWVudCh0KSl9LGUucHJvdG90eXBlLnBhcnNlQ2F0Y2hDbGF1c2U9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdEtleXdvcmQoXCJjYXRjaFwiKSx0aGlzLmV4cGVjdChcIihcIiksdGhpcy5tYXRjaChcIilcIikmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO2Zvcih2YXIgdD1bXSxyPXRoaXMucGFyc2VQYXR0ZXJuKHQpLG49e30saT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgcz1cIiRcIit0W2ldLnZhbHVlO09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHMpJiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5EdXBsaWNhdGVCaW5kaW5nLHRbaV0udmFsdWUpLG5bc109ITB9dGhpcy5jb250ZXh0LnN0cmljdCYmci50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmdGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoci5uYW1lKSYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuU3RyaWN0Q2F0Y2hWYXJpYWJsZSksdGhpcy5leHBlY3QoXCIpXCIpO3ZhciBsPXRoaXMucGFyc2VCbG9jaygpO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuQ2F0Y2hDbGF1c2UocixsKSl9LGUucHJvdG90eXBlLnBhcnNlRmluYWxseUNsYXVzZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmV4cGVjdEtleXdvcmQoXCJmaW5hbGx5XCIpLHRoaXMucGFyc2VCbG9jaygpfSxlLnByb3RvdHlwZS5wYXJzZVRyeVN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcInRyeVwiKTt2YXIgdD10aGlzLnBhcnNlQmxvY2soKSxyPXRoaXMubWF0Y2hLZXl3b3JkKFwiY2F0Y2hcIik/dGhpcy5wYXJzZUNhdGNoQ2xhdXNlKCk6bnVsbCxuPXRoaXMubWF0Y2hLZXl3b3JkKFwiZmluYWxseVwiKT90aGlzLnBhcnNlRmluYWxseUNsYXVzZSgpOm51bGw7cmV0dXJuIHJ8fG58fHRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLk5vQ2F0Y2hPckZpbmFsbHkpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5UcnlTdGF0ZW1lbnQodCxyLG4pKX0sZS5wcm90b3R5cGUucGFyc2VEZWJ1Z2dlclN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3JldHVybiB0aGlzLmV4cGVjdEtleXdvcmQoXCJkZWJ1Z2dlclwiKSx0aGlzLmNvbnN1bWVTZW1pY29sb24oKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRGVidWdnZXJTdGF0ZW1lbnQpfSxlLnByb3RvdHlwZS5wYXJzZVN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlO3N3aXRjaCh0aGlzLmxvb2thaGVhZC50eXBlKXtjYXNlIDE6Y2FzZSA1OmNhc2UgNjpjYXNlIDg6Y2FzZSAxMDpjYXNlIDk6ZT10aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCgpO2JyZWFrO2Nhc2UgNzp2YXIgdD10aGlzLmxvb2thaGVhZC52YWx1ZTtlPVwie1wiPT09dD90aGlzLnBhcnNlQmxvY2soKTpcIihcIj09PXQ/dGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQoKTpcIjtcIj09PXQ/dGhpcy5wYXJzZUVtcHR5U3RhdGVtZW50KCk6dGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQoKTticmVhaztjYXNlIDM6ZT10aGlzLm1hdGNoQXN5bmNGdW5jdGlvbigpP3RoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk6dGhpcy5wYXJzZUxhYmVsbGVkU3RhdGVtZW50KCk7YnJlYWs7Y2FzZSA0OnN3aXRjaCh0aGlzLmxvb2thaGVhZC52YWx1ZSl7Y2FzZVwiYnJlYWtcIjplPXRoaXMucGFyc2VCcmVha1N0YXRlbWVudCgpO2JyZWFrO2Nhc2VcImNvbnRpbnVlXCI6ZT10aGlzLnBhcnNlQ29udGludWVTdGF0ZW1lbnQoKTticmVhaztjYXNlXCJkZWJ1Z2dlclwiOmU9dGhpcy5wYXJzZURlYnVnZ2VyU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwiZG9cIjplPXRoaXMucGFyc2VEb1doaWxlU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwiZm9yXCI6ZT10aGlzLnBhcnNlRm9yU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwiZnVuY3Rpb25cIjplPXRoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk7YnJlYWs7Y2FzZVwiaWZcIjplPXRoaXMucGFyc2VJZlN0YXRlbWVudCgpO2JyZWFrO2Nhc2VcInJldHVyblwiOmU9dGhpcy5wYXJzZVJldHVyblN0YXRlbWVudCgpO2JyZWFrO2Nhc2VcInN3aXRjaFwiOmU9dGhpcy5wYXJzZVN3aXRjaFN0YXRlbWVudCgpO2JyZWFrO2Nhc2VcInRocm93XCI6ZT10aGlzLnBhcnNlVGhyb3dTdGF0ZW1lbnQoKTticmVhaztjYXNlXCJ0cnlcIjplPXRoaXMucGFyc2VUcnlTdGF0ZW1lbnQoKTticmVhaztjYXNlXCJ2YXJcIjplPXRoaXMucGFyc2VWYXJpYWJsZVN0YXRlbWVudCgpO2JyZWFrO2Nhc2VcIndoaWxlXCI6ZT10aGlzLnBhcnNlV2hpbGVTdGF0ZW1lbnQoKTticmVhaztjYXNlXCJ3aXRoXCI6ZT10aGlzLnBhcnNlV2l0aFN0YXRlbWVudCgpO2JyZWFrO2RlZmF1bHQ6ZT10aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCgpfWJyZWFrO2RlZmF1bHQ6ZT10aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKX1yZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3QoXCJ7XCIpO3ZhciB0PXRoaXMucGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXMoKSxyPXRoaXMuY29udGV4dC5sYWJlbFNldCxuPXRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbixpPXRoaXMuY29udGV4dC5pblN3aXRjaCxvPXRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keTtmb3IodGhpcy5jb250ZXh0LmxhYmVsU2V0PXt9LHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbj0hMSx0aGlzLmNvbnRleHQuaW5Td2l0Y2g9ITEsdGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5PSEwOzIhPT10aGlzLmxvb2thaGVhZC50eXBlJiYhdGhpcy5tYXRjaChcIn1cIik7KXQucHVzaCh0aGlzLnBhcnNlU3RhdGVtZW50TGlzdEl0ZW0oKSk7cmV0dXJuIHRoaXMuZXhwZWN0KFwifVwiKSx0aGlzLmNvbnRleHQubGFiZWxTZXQ9cix0aGlzLmNvbnRleHQuaW5JdGVyYXRpb249bix0aGlzLmNvbnRleHQuaW5Td2l0Y2g9aSx0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHk9byx0aGlzLmZpbmFsaXplKGUsbmV3IGEuQmxvY2tTdGF0ZW1lbnQodCkpfSxlLnByb3RvdHlwZS52YWxpZGF0ZVBhcmFtPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1cIiRcIityO3RoaXMuY29udGV4dC5zdHJpY3Q/KHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKHIpJiYoZS5zdHJpY3RlZD10LGUubWVzc2FnZT1vLk1lc3NhZ2VzLlN0cmljdFBhcmFtTmFtZSksT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUucGFyYW1TZXQsbikmJihlLnN0cmljdGVkPXQsZS5tZXNzYWdlPW8uTWVzc2FnZXMuU3RyaWN0UGFyYW1EdXBlKSk6ZS5maXJzdFJlc3RyaWN0ZWR8fCh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChyKT8oZS5maXJzdFJlc3RyaWN0ZWQ9dCxlLm1lc3NhZ2U9by5NZXNzYWdlcy5TdHJpY3RQYXJhbU5hbWUpOnRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQocik/KGUuZmlyc3RSZXN0cmljdGVkPXQsZS5tZXNzYWdlPW8uTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZS5wYXJhbVNldCxuKSYmKGUuc3RyaWN0ZWQ9dCxlLm1lc3NhZ2U9by5NZXNzYWdlcy5TdHJpY3RQYXJhbUR1cGUpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHk/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUucGFyYW1TZXQsbix7dmFsdWU6ITAsZW51bWVyYWJsZTohMCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9KTplLnBhcmFtU2V0W25dPSEwfSxlLnByb3RvdHlwZS5wYXJzZVJlc3RFbGVtZW50PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0KFwiLi4uXCIpO3ZhciByPXRoaXMucGFyc2VQYXR0ZXJuKGUpO3JldHVybiB0aGlzLm1hdGNoKFwiPVwiKSYmdGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuRGVmYXVsdFJlc3RQYXJhbWV0ZXIpLHRoaXMubWF0Y2goXCIpXCIpfHx0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5QYXJhbWV0ZXJBZnRlclJlc3RQYXJhbWV0ZXIpLHRoaXMuZmluYWxpemUodCxuZXcgYS5SZXN0RWxlbWVudChyKSl9LGUucHJvdG90eXBlLnBhcnNlRm9ybWFsUGFyYW1ldGVyPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPXRoaXMubWF0Y2goXCIuLi5cIik/dGhpcy5wYXJzZVJlc3RFbGVtZW50KHQpOnRoaXMucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQodCksbj0wO248dC5sZW5ndGg7bisrKXRoaXMudmFsaWRhdGVQYXJhbShlLHRbbl0sdFtuXS52YWx1ZSk7ZS5zaW1wbGU9ZS5zaW1wbGUmJnIgaW5zdGFuY2VvZiBhLklkZW50aWZpZXIsZS5wYXJhbXMucHVzaChyKX0sZS5wcm90b3R5cGUucGFyc2VGb3JtYWxQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUpe3ZhciB0O2lmKHQ9e3NpbXBsZTohMCxwYXJhbXM6W10sZmlyc3RSZXN0cmljdGVkOmV9LHRoaXMuZXhwZWN0KFwiKFwiKSwhdGhpcy5tYXRjaChcIilcIikpZm9yKHQucGFyYW1TZXQ9e307MiE9PXRoaXMubG9va2FoZWFkLnR5cGUmJih0aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVyKHQpLCF0aGlzLm1hdGNoKFwiKVwiKSkmJih0aGlzLmV4cGVjdChcIixcIiksIXRoaXMubWF0Y2goXCIpXCIpKTspO3JldHVybiB0aGlzLmV4cGVjdChcIilcIikse3NpbXBsZTp0LnNpbXBsZSxwYXJhbXM6dC5wYXJhbXMsc3RyaWN0ZWQ6dC5zdHJpY3RlZCxmaXJzdFJlc3RyaWN0ZWQ6dC5maXJzdFJlc3RyaWN0ZWQsbWVzc2FnZTp0Lm1lc3NhZ2V9fSxlLnByb3RvdHlwZS5tYXRjaEFzeW5jRnVuY3Rpb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJhc3luY1wiKTtpZihlKXt2YXIgdD10aGlzLnNjYW5uZXIuc2F2ZVN0YXRlKCk7dGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpO3ZhciByPXRoaXMuc2Nhbm5lci5sZXgoKTt0aGlzLnNjYW5uZXIucmVzdG9yZVN0YXRlKHQpLGU9dC5saW5lTnVtYmVyPT09ci5saW5lTnVtYmVyJiY0PT09ci50eXBlJiZcImZ1bmN0aW9uXCI9PT1yLnZhbHVlfXJldHVybiBlfSxlLnByb3RvdHlwZS5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jcmVhdGVOb2RlKCkscj10aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJhc3luY1wiKTtyJiZ0aGlzLm5leHRUb2tlbigpLHRoaXMuZXhwZWN0S2V5d29yZChcImZ1bmN0aW9uXCIpO3ZhciBuLGk9IXImJnRoaXMubWF0Y2goXCIqXCIpO2kmJnRoaXMubmV4dFRva2VuKCk7dmFyIHM9bnVsbCx1PW51bGw7aWYoIWV8fCF0aGlzLm1hdGNoKFwiKFwiKSl7dmFyIGw9dGhpcy5sb29rYWhlYWQ7cz10aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCksdGhpcy5jb250ZXh0LnN0cmljdD90aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChsLnZhbHVlKSYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihsLG8uTWVzc2FnZXMuU3RyaWN0RnVuY3Rpb25OYW1lKTp0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChsLnZhbHVlKT8odT1sLG49by5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbk5hbWUpOnRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQobC52YWx1ZSkmJih1PWwsbj1vLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZCl9dmFyIGM9dGhpcy5jb250ZXh0LmF3YWl0LGg9dGhpcy5jb250ZXh0LmFsbG93WWllbGQ7dGhpcy5jb250ZXh0LmF3YWl0PXIsdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9IWk7dmFyIHA9dGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnModSksZj1wLnBhcmFtcyxkPXAuc3RyaWN0ZWQ7dT1wLmZpcnN0UmVzdHJpY3RlZCxwLm1lc3NhZ2UmJihuPXAubWVzc2FnZSk7dmFyIG09dGhpcy5jb250ZXh0LnN0cmljdCx5PXRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZTt0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU9cC5zaW1wbGU7dmFyIHY9dGhpcy5wYXJzZUZ1bmN0aW9uU291cmNlRWxlbWVudHMoKTtyZXR1cm4gdGhpcy5jb250ZXh0LnN0cmljdCYmdSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih1LG4pLHRoaXMuY29udGV4dC5zdHJpY3QmJmQmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oZCxuKSx0aGlzLmNvbnRleHQuc3RyaWN0PW0sdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlPXksdGhpcy5jb250ZXh0LmF3YWl0PWMsdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9aCxyP3RoaXMuZmluYWxpemUodCxuZXcgYS5Bc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24ocyxmLHYpKTp0aGlzLmZpbmFsaXplKHQsbmV3IGEuRnVuY3Rpb25EZWNsYXJhdGlvbihzLGYsdixpKSl9LGUucHJvdG90eXBlLnBhcnNlRnVuY3Rpb25FeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJhc3luY1wiKTt0JiZ0aGlzLm5leHRUb2tlbigpLHRoaXMuZXhwZWN0S2V5d29yZChcImZ1bmN0aW9uXCIpO3ZhciByLG49IXQmJnRoaXMubWF0Y2goXCIqXCIpO24mJnRoaXMubmV4dFRva2VuKCk7dmFyIGkscz1udWxsLHU9dGhpcy5jb250ZXh0LmF3YWl0LGw9dGhpcy5jb250ZXh0LmFsbG93WWllbGQ7aWYodGhpcy5jb250ZXh0LmF3YWl0PXQsdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9IW4sIXRoaXMubWF0Y2goXCIoXCIpKXt2YXIgYz10aGlzLmxvb2thaGVhZDtzPXRoaXMuY29udGV4dC5zdHJpY3R8fG58fCF0aGlzLm1hdGNoS2V5d29yZChcInlpZWxkXCIpP3RoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTp0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKSx0aGlzLmNvbnRleHQuc3RyaWN0P3RoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGMudmFsdWUpJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGMsby5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbk5hbWUpOnRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGMudmFsdWUpPyhpPWMscj1vLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZSk6dGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChjLnZhbHVlKSYmKGk9YyxyPW8uTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkKX12YXIgaD10aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVycyhpKSxwPWgucGFyYW1zLGY9aC5zdHJpY3RlZDtpPWguZmlyc3RSZXN0cmljdGVkLGgubWVzc2FnZSYmKHI9aC5tZXNzYWdlKTt2YXIgZD10aGlzLmNvbnRleHQuc3RyaWN0LG09dGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlO3RoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZT1oLnNpbXBsZTt2YXIgeT10aGlzLnBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cygpO3JldHVybiB0aGlzLmNvbnRleHQuc3RyaWN0JiZpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKGksciksdGhpcy5jb250ZXh0LnN0cmljdCYmZiYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihmLHIpLHRoaXMuY29udGV4dC5zdHJpY3Q9ZCx0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU9bSx0aGlzLmNvbnRleHQuYXdhaXQ9dSx0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD1sLHQ/dGhpcy5maW5hbGl6ZShlLG5ldyBhLkFzeW5jRnVuY3Rpb25FeHByZXNzaW9uKHMscCx5KSk6dGhpcy5maW5hbGl6ZShlLG5ldyBhLkZ1bmN0aW9uRXhwcmVzc2lvbihzLHAseSxuKSl9LGUucHJvdG90eXBlLnBhcnNlRGlyZWN0aXZlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sb29rYWhlYWQsdD10aGlzLmNyZWF0ZU5vZGUoKSxyPXRoaXMucGFyc2VFeHByZXNzaW9uKCksbj1yLnR5cGU9PT11LlN5bnRheC5MaXRlcmFsP3RoaXMuZ2V0VG9rZW5SYXcoZSkuc2xpY2UoMSwtMSk6bnVsbDtyZXR1cm4gdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksdGhpcy5maW5hbGl6ZSh0LG4/bmV3IGEuRGlyZWN0aXZlKHIsbik6bmV3IGEuRXhwcmVzc2lvblN0YXRlbWVudChyKSl9LGUucHJvdG90eXBlLnBhcnNlRGlyZWN0aXZlUHJvbG9ndWVzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPW51bGwsdD1bXTs7KXt2YXIgcj10aGlzLmxvb2thaGVhZDtpZig4IT09ci50eXBlKWJyZWFrO3ZhciBuPXRoaXMucGFyc2VEaXJlY3RpdmUoKTt0LnB1c2gobik7dmFyIGk9bi5kaXJlY3RpdmU7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGkpYnJlYWs7XCJ1c2Ugc3RyaWN0XCI9PT1pPyh0aGlzLmNvbnRleHQuc3RyaWN0PSEwLGUmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oZSxvLk1lc3NhZ2VzLlN0cmljdE9jdGFsTGl0ZXJhbCksdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlfHx0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHIsby5NZXNzYWdlcy5JbGxlZ2FsTGFuZ3VhZ2VNb2RlRGlyZWN0aXZlKSk6IWUmJnIub2N0YWwmJihlPXIpfXJldHVybiB0fSxlLnByb3RvdHlwZS5xdWFsaWZpZWRQcm9wZXJ0eU5hbWU9ZnVuY3Rpb24oZSl7c3dpdGNoKGUudHlwZSl7Y2FzZSAzOmNhc2UgODpjYXNlIDE6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6cmV0dXJuITA7Y2FzZSA3OnJldHVyblwiW1wiPT09ZS52YWx1ZX1yZXR1cm4hMX0sZS5wcm90b3R5cGUucGFyc2VHZXR0ZXJNZXRob2Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMuY29udGV4dC5hbGxvd1lpZWxkO3RoaXMuY29udGV4dC5hbGxvd1lpZWxkPSEwO3ZhciByPXRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCk7ci5wYXJhbXMubGVuZ3RoPjAmJnRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkJhZEdldHRlckFyaXR5KTt2YXIgbj10aGlzLnBhcnNlUHJvcGVydHlNZXRob2Qocik7cmV0dXJuIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkPXQsdGhpcy5maW5hbGl6ZShlLG5ldyBhLkZ1bmN0aW9uRXhwcmVzc2lvbihudWxsLHIucGFyYW1zLG4sITEpKX0sZS5wcm90b3R5cGUucGFyc2VTZXR0ZXJNZXRob2Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMuY29udGV4dC5hbGxvd1lpZWxkO3RoaXMuY29udGV4dC5hbGxvd1lpZWxkPSEwO3ZhciByPXRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCk7MSE9PXIucGFyYW1zLmxlbmd0aD90aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5CYWRTZXR0ZXJBcml0eSk6ci5wYXJhbXNbMF1pbnN0YW5jZW9mIGEuUmVzdEVsZW1lbnQmJnRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkJhZFNldHRlclJlc3RQYXJhbWV0ZXIpO3ZhciBuPXRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChyKTtyZXR1cm4gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9dCx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRnVuY3Rpb25FeHByZXNzaW9uKG51bGwsci5wYXJhbXMsbiwhMSkpfSxlLnByb3RvdHlwZS5wYXJzZUdlbmVyYXRvck1ldGhvZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5jb250ZXh0LmFsbG93WWllbGQ7dGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITA7dmFyIHI9dGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKTt0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0hMTt2YXIgbj10aGlzLnBhcnNlUHJvcGVydHlNZXRob2Qocik7cmV0dXJuIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkPXQsdGhpcy5maW5hbGl6ZShlLG5ldyBhLkZ1bmN0aW9uRXhwcmVzc2lvbihudWxsLHIucGFyYW1zLG4sITApKX0sZS5wcm90b3R5cGUuaXNTdGFydE9mRXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlPSEwLHQ9dGhpcy5sb29rYWhlYWQudmFsdWU7c3dpdGNoKHRoaXMubG9va2FoZWFkLnR5cGUpe2Nhc2UgNzplPVwiW1wiPT09dHx8XCIoXCI9PT10fHxcIntcIj09PXR8fFwiK1wiPT09dHx8XCItXCI9PT10fHxcIiFcIj09PXR8fFwiflwiPT09dHx8XCIrK1wiPT09dHx8XCItLVwiPT09dHx8XCIvXCI9PT10fHxcIi89XCI9PT10O2JyZWFrO2Nhc2UgNDplPVwiY2xhc3NcIj09PXR8fFwiZGVsZXRlXCI9PT10fHxcImZ1bmN0aW9uXCI9PT10fHxcImxldFwiPT09dHx8XCJuZXdcIj09PXR8fFwic3VwZXJcIj09PXR8fFwidGhpc1wiPT09dHx8XCJ0eXBlb2ZcIj09PXR8fFwidm9pZFwiPT09dHx8XCJ5aWVsZFwiPT09dH1yZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VZaWVsZEV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdEtleXdvcmQoXCJ5aWVsZFwiKTt2YXIgdD1udWxsLHI9ITE7aWYoIXRoaXMuaGFzTGluZVRlcm1pbmF0b3Ipe3ZhciBuPXRoaXMuY29udGV4dC5hbGxvd1lpZWxkO3RoaXMuY29udGV4dC5hbGxvd1lpZWxkPSExLChyPXRoaXMubWF0Y2goXCIqXCIpKT8odGhpcy5uZXh0VG9rZW4oKSx0PXRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpKTp0aGlzLmlzU3RhcnRPZkV4cHJlc3Npb24oKSYmKHQ9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCkpLHRoaXMuY29udGV4dC5hbGxvd1lpZWxkPW59cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5ZaWVsZEV4cHJlc3Npb24odCxyKSl9LGUucHJvdG90eXBlLnBhcnNlQ2xhc3NFbGVtZW50PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubG9va2FoZWFkLHI9dGhpcy5jcmVhdGVOb2RlKCksbj1cIlwiLGk9bnVsbCxzPW51bGwsdT0hMSxsPSExLGM9ITEsaD0hMTtpZih0aGlzLm1hdGNoKFwiKlwiKSl0aGlzLm5leHRUb2tlbigpO2Vsc2UgaWYodT10aGlzLm1hdGNoKFwiW1wiKSxcInN0YXRpY1wiPT09KGk9dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCkpLm5hbWUmJih0aGlzLnF1YWxpZmllZFByb3BlcnR5TmFtZSh0aGlzLmxvb2thaGVhZCl8fHRoaXMubWF0Y2goXCIqXCIpKSYmKHQ9dGhpcy5sb29rYWhlYWQsYz0hMCx1PXRoaXMubWF0Y2goXCJbXCIpLHRoaXMubWF0Y2goXCIqXCIpP3RoaXMubmV4dFRva2VuKCk6aT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSksMz09PXQudHlwZSYmIXRoaXMuaGFzTGluZVRlcm1pbmF0b3ImJlwiYXN5bmNcIj09PXQudmFsdWUpe3ZhciBwPXRoaXMubG9va2FoZWFkLnZhbHVlO1wiOlwiIT09cCYmXCIoXCIhPT1wJiZcIipcIiE9PXAmJihoPSEwLHQ9dGhpcy5sb29rYWhlYWQsaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSwzPT09dC50eXBlJiZcImNvbnN0cnVjdG9yXCI9PT10LnZhbHVlJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHQsby5NZXNzYWdlcy5Db25zdHJ1Y3RvcklzQXN5bmMpKX12YXIgZj10aGlzLnF1YWxpZmllZFByb3BlcnR5TmFtZSh0aGlzLmxvb2thaGVhZCk7cmV0dXJuIDM9PT10LnR5cGU/XCJnZXRcIj09PXQudmFsdWUmJmY/KG49XCJnZXRcIix1PXRoaXMubWF0Y2goXCJbXCIpLGk9dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCksdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITEscz10aGlzLnBhcnNlR2V0dGVyTWV0aG9kKCkpOlwic2V0XCI9PT10LnZhbHVlJiZmJiYobj1cInNldFwiLHU9dGhpcy5tYXRjaChcIltcIiksaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSxzPXRoaXMucGFyc2VTZXR0ZXJNZXRob2QoKSk6Nz09PXQudHlwZSYmXCIqXCI9PT10LnZhbHVlJiZmJiYobj1cImluaXRcIix1PXRoaXMubWF0Y2goXCJbXCIpLGk9dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCkscz10aGlzLnBhcnNlR2VuZXJhdG9yTWV0aG9kKCksbD0hMCksIW4mJmkmJnRoaXMubWF0Y2goXCIoXCIpJiYobj1cImluaXRcIixzPWg/dGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kQXN5bmNGdW5jdGlvbigpOnRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZEZ1bmN0aW9uKCksbD0hMCksbnx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCksXCJpbml0XCI9PT1uJiYobj1cIm1ldGhvZFwiKSx1fHwoYyYmdGhpcy5pc1Byb3BlcnR5S2V5KGksXCJwcm90b3R5cGVcIikmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCxvLk1lc3NhZ2VzLlN0YXRpY1Byb3RvdHlwZSksIWMmJnRoaXMuaXNQcm9wZXJ0eUtleShpLFwiY29uc3RydWN0b3JcIikmJigoXCJtZXRob2RcIiE9PW58fCFsfHxzJiZzLmdlbmVyYXRvcikmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCxvLk1lc3NhZ2VzLkNvbnN0cnVjdG9yU3BlY2lhbE1ldGhvZCksZS52YWx1ZT90aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHQsby5NZXNzYWdlcy5EdXBsaWNhdGVDb25zdHJ1Y3Rvcik6ZS52YWx1ZT0hMCxuPVwiY29uc3RydWN0b3JcIikpLHRoaXMuZmluYWxpemUocixuZXcgYS5NZXRob2REZWZpbml0aW9uKGksdSxzLG4sYykpfSxlLnByb3RvdHlwZS5wYXJzZUNsYXNzRWxlbWVudExpc3Q9ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PXt2YWx1ZTohMX07Zm9yKHRoaXMuZXhwZWN0KFwie1wiKTshdGhpcy5tYXRjaChcIn1cIik7KXRoaXMubWF0Y2goXCI7XCIpP3RoaXMubmV4dFRva2VuKCk6ZS5wdXNoKHRoaXMucGFyc2VDbGFzc0VsZW1lbnQodCkpO3JldHVybiB0aGlzLmV4cGVjdChcIn1cIiksZX0sZS5wcm90b3R5cGUucGFyc2VDbGFzc0JvZHk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMucGFyc2VDbGFzc0VsZW1lbnRMaXN0KCk7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5DbGFzc0JvZHkodCkpfSxlLnByb3RvdHlwZS5wYXJzZUNsYXNzRGVjbGFyYXRpb249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jcmVhdGVOb2RlKCkscj10aGlzLmNvbnRleHQuc3RyaWN0O3RoaXMuY29udGV4dC5zdHJpY3Q9ITAsdGhpcy5leHBlY3RLZXl3b3JkKFwiY2xhc3NcIik7dmFyIG49ZSYmMyE9PXRoaXMubG9va2FoZWFkLnR5cGU/bnVsbDp0aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCksaT1udWxsO3RoaXMubWF0Y2hLZXl3b3JkKFwiZXh0ZW5kc1wiKSYmKHRoaXMubmV4dFRva2VuKCksaT10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb25BbGxvd0NhbGwpKTt2YXIgbz10aGlzLnBhcnNlQ2xhc3NCb2R5KCk7cmV0dXJuIHRoaXMuY29udGV4dC5zdHJpY3Q9cix0aGlzLmZpbmFsaXplKHQsbmV3IGEuQ2xhc3NEZWNsYXJhdGlvbihuLGksbykpfSxlLnByb3RvdHlwZS5wYXJzZUNsYXNzRXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5jb250ZXh0LnN0cmljdDt0aGlzLmNvbnRleHQuc3RyaWN0PSEwLHRoaXMuZXhwZWN0S2V5d29yZChcImNsYXNzXCIpO3ZhciByPTM9PT10aGlzLmxvb2thaGVhZC50eXBlP3RoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTpudWxsLG49bnVsbDt0aGlzLm1hdGNoS2V5d29yZChcImV4dGVuZHNcIikmJih0aGlzLm5leHRUb2tlbigpLG49dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsKSk7dmFyIGk9dGhpcy5wYXJzZUNsYXNzQm9keSgpO3JldHVybiB0aGlzLmNvbnRleHQuc3RyaWN0PXQsdGhpcy5maW5hbGl6ZShlLG5ldyBhLkNsYXNzRXhwcmVzc2lvbihyLG4saSkpfSxlLnByb3RvdHlwZS5wYXJzZU1vZHVsZT1mdW5jdGlvbigpe3RoaXMuY29udGV4dC5zdHJpY3Q9ITAsdGhpcy5jb250ZXh0LmlzTW9kdWxlPSEwLHRoaXMuc2Nhbm5lci5pc01vZHVsZT0hMDtmb3IodmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLnBhcnNlRGlyZWN0aXZlUHJvbG9ndWVzKCk7MiE9PXRoaXMubG9va2FoZWFkLnR5cGU7KXQucHVzaCh0aGlzLnBhcnNlU3RhdGVtZW50TGlzdEl0ZW0oKSk7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5Nb2R1bGUodCkpfSxlLnByb3RvdHlwZS5wYXJzZVNjcmlwdD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMucGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXMoKTsyIT09dGhpcy5sb29rYWhlYWQudHlwZTspdC5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtyZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLlNjcmlwdCh0KSl9LGUucHJvdG90eXBlLnBhcnNlTW9kdWxlU3BlY2lmaWVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7OCE9PXRoaXMubG9va2FoZWFkLnR5cGUmJnRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLkludmFsaWRNb2R1bGVTcGVjaWZpZXIpO3ZhciB0PXRoaXMubmV4dFRva2VuKCkscj10aGlzLmdldFRva2VuUmF3KHQpO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuTGl0ZXJhbCh0LnZhbHVlLHIpKX0sZS5wcm90b3R5cGUucGFyc2VJbXBvcnRTcGVjaWZpZXI9ZnVuY3Rpb24oKXt2YXIgZSx0LHI9dGhpcy5jcmVhdGVOb2RlKCk7cmV0dXJuIDM9PT10aGlzLmxvb2thaGVhZC50eXBlPyh0PWU9dGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpLHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzXCIpJiYodGhpcy5uZXh0VG9rZW4oKSx0PXRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKSkpOih0PWU9dGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCksdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwiYXNcIik/KHRoaXMubmV4dFRva2VuKCksdD10aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCkpOnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSkpLHRoaXMuZmluYWxpemUocixuZXcgYS5JbXBvcnRTcGVjaWZpZXIodCxlKSl9LGUucHJvdG90eXBlLnBhcnNlTmFtZWRJbXBvcnRzPWZ1bmN0aW9uKCl7dGhpcy5leHBlY3QoXCJ7XCIpO2Zvcih2YXIgZT1bXTshdGhpcy5tYXRjaChcIn1cIik7KWUucHVzaCh0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVyKCkpLHRoaXMubWF0Y2goXCJ9XCIpfHx0aGlzLmV4cGVjdChcIixcIik7cmV0dXJuIHRoaXMuZXhwZWN0KFwifVwiKSxlfSxlLnByb3RvdHlwZS5wYXJzZUltcG9ydERlZmF1bHRTcGVjaWZpZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuSW1wb3J0RGVmYXVsdFNwZWNpZmllcih0KSl9LGUucHJvdG90eXBlLnBhcnNlSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3QoXCIqXCIpLHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzXCIpfHx0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5Ob0FzQWZ0ZXJJbXBvcnROYW1lc3BhY2UpLHRoaXMubmV4dFRva2VuKCk7dmFyIHQ9dGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5JbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIodCkpfSxlLnByb3RvdHlwZS5wYXJzZUltcG9ydERlY2xhcmF0aW9uPWZ1bmN0aW9uKCl7dGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5JiZ0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5JbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb24pO3ZhciBlLHQ9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwiaW1wb3J0XCIpO3ZhciByPVtdO2lmKDg9PT10aGlzLmxvb2thaGVhZC50eXBlKWU9dGhpcy5wYXJzZU1vZHVsZVNwZWNpZmllcigpO2Vsc2V7aWYodGhpcy5tYXRjaChcIntcIik/cj1yLmNvbmNhdCh0aGlzLnBhcnNlTmFtZWRJbXBvcnRzKCkpOnRoaXMubWF0Y2goXCIqXCIpP3IucHVzaCh0aGlzLnBhcnNlSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyKCkpOnRoaXMuaXNJZGVudGlmaWVyTmFtZSh0aGlzLmxvb2thaGVhZCkmJiF0aGlzLm1hdGNoS2V5d29yZChcImRlZmF1bHRcIik/KHIucHVzaCh0aGlzLnBhcnNlSW1wb3J0RGVmYXVsdFNwZWNpZmllcigpKSx0aGlzLm1hdGNoKFwiLFwiKSYmKHRoaXMubmV4dFRva2VuKCksdGhpcy5tYXRjaChcIipcIik/ci5wdXNoKHRoaXMucGFyc2VJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIoKSk6dGhpcy5tYXRjaChcIntcIik/cj1yLmNvbmNhdCh0aGlzLnBhcnNlTmFtZWRJbXBvcnRzKCkpOnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpKSk6dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKSwhdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwiZnJvbVwiKSl7dmFyIG49dGhpcy5sb29rYWhlYWQudmFsdWU/by5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW46by5NZXNzYWdlcy5NaXNzaW5nRnJvbUNsYXVzZTt0aGlzLnRocm93RXJyb3Iobix0aGlzLmxvb2thaGVhZC52YWx1ZSl9dGhpcy5uZXh0VG9rZW4oKSxlPXRoaXMucGFyc2VNb2R1bGVTcGVjaWZpZXIoKX1yZXR1cm4gdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksdGhpcy5maW5hbGl6ZSh0LG5ldyBhLkltcG9ydERlY2xhcmF0aW9uKHIsZSkpfSxlLnByb3RvdHlwZS5wYXJzZUV4cG9ydFNwZWNpZmllcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCkscj10O3JldHVybiB0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJhc1wiKSYmKHRoaXMubmV4dFRva2VuKCkscj10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKSksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkV4cG9ydFNwZWNpZmllcih0LHIpKX0sZS5wcm90b3R5cGUucGFyc2VFeHBvcnREZWNsYXJhdGlvbj1mdW5jdGlvbigpe3RoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSYmdGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuSWxsZWdhbEV4cG9ydERlY2xhcmF0aW9uKTt2YXIgZSx0PXRoaXMuY3JlYXRlTm9kZSgpO2lmKHRoaXMuZXhwZWN0S2V5d29yZChcImV4cG9ydFwiKSx0aGlzLm1hdGNoS2V5d29yZChcImRlZmF1bHRcIikpaWYodGhpcy5uZXh0VG9rZW4oKSx0aGlzLm1hdGNoS2V5d29yZChcImZ1bmN0aW9uXCIpKXt2YXIgcj10aGlzLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbighMCk7ZT10aGlzLmZpbmFsaXplKHQsbmV3IGEuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKHIpKX1lbHNlIHRoaXMubWF0Y2hLZXl3b3JkKFwiY2xhc3NcIik/KHI9dGhpcy5wYXJzZUNsYXNzRGVjbGFyYXRpb24oITApLGU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbihyKSkpOnRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzeW5jXCIpPyhyPXRoaXMubWF0Y2hBc3luY0Z1bmN0aW9uKCk/dGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oITApOnRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpLGU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbihyKSkpOih0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJmcm9tXCIpJiZ0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sdGhpcy5sb29rYWhlYWQudmFsdWUpLHI9dGhpcy5tYXRjaChcIntcIik/dGhpcy5wYXJzZU9iamVjdEluaXRpYWxpemVyKCk6dGhpcy5tYXRjaChcIltcIik/dGhpcy5wYXJzZUFycmF5SW5pdGlhbGl6ZXIoKTp0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKSx0aGlzLmNvbnN1bWVTZW1pY29sb24oKSxlPXRoaXMuZmluYWxpemUodCxuZXcgYS5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb24ocikpKTtlbHNlIGlmKHRoaXMubWF0Y2goXCIqXCIpKXtpZih0aGlzLm5leHRUb2tlbigpLCF0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJmcm9tXCIpKXt2YXIgbj10aGlzLmxvb2thaGVhZC52YWx1ZT9vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbjpvLk1lc3NhZ2VzLk1pc3NpbmdGcm9tQ2xhdXNlO3RoaXMudGhyb3dFcnJvcihuLHRoaXMubG9va2FoZWFkLnZhbHVlKX10aGlzLm5leHRUb2tlbigpO3ZhciBpPXRoaXMucGFyc2VNb2R1bGVTcGVjaWZpZXIoKTt0aGlzLmNvbnN1bWVTZW1pY29sb24oKSxlPXRoaXMuZmluYWxpemUodCxuZXcgYS5FeHBvcnRBbGxEZWNsYXJhdGlvbihpKSl9ZWxzZSBpZig0PT09dGhpcy5sb29rYWhlYWQudHlwZSl7c3dpdGNoKHI9dm9pZCAwLHRoaXMubG9va2FoZWFkLnZhbHVlKXtjYXNlXCJsZXRcIjpjYXNlXCJjb25zdFwiOnI9dGhpcy5wYXJzZUxleGljYWxEZWNsYXJhdGlvbih7aW5Gb3I6ITF9KTticmVhaztjYXNlXCJ2YXJcIjpjYXNlXCJjbGFzc1wiOmNhc2VcImZ1bmN0aW9uXCI6cj10aGlzLnBhcnNlU3RhdGVtZW50TGlzdEl0ZW0oKTticmVhaztkZWZhdWx0OnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpfWU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24ocixbXSxudWxsKSl9ZWxzZSBpZih0aGlzLm1hdGNoQXN5bmNGdW5jdGlvbigpKXI9dGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKSxlPXRoaXMuZmluYWxpemUodCxuZXcgYS5FeHBvcnROYW1lZERlY2xhcmF0aW9uKHIsW10sbnVsbCkpO2Vsc2V7dmFyIHM9W10sdT1udWxsLGw9ITE7Zm9yKHRoaXMuZXhwZWN0KFwie1wiKTshdGhpcy5tYXRjaChcIn1cIik7KWw9bHx8dGhpcy5tYXRjaEtleXdvcmQoXCJkZWZhdWx0XCIpLHMucHVzaCh0aGlzLnBhcnNlRXhwb3J0U3BlY2lmaWVyKCkpLHRoaXMubWF0Y2goXCJ9XCIpfHx0aGlzLmV4cGVjdChcIixcIik7dGhpcy5leHBlY3QoXCJ9XCIpLHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImZyb21cIik/KHRoaXMubmV4dFRva2VuKCksdT10aGlzLnBhcnNlTW9kdWxlU3BlY2lmaWVyKCksdGhpcy5jb25zdW1lU2VtaWNvbG9uKCkpOmw/KG49dGhpcy5sb29rYWhlYWQudmFsdWU/by5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW46by5NZXNzYWdlcy5NaXNzaW5nRnJvbUNsYXVzZSx0aGlzLnRocm93RXJyb3Iobix0aGlzLmxvb2thaGVhZC52YWx1ZSkpOnRoaXMuY29uc3VtZVNlbWljb2xvbigpLGU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24obnVsbCxzLHUpKX1yZXR1cm4gZX0sZX0oKTt0LlBhcnNlcj1jfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYXNzZXJ0PWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiQVNTRVJUOiBcIit0KX19LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5lcnJvcnM9W10sdGhpcy50b2xlcmFudD0hMX1yZXR1cm4gZS5wcm90b3R5cGUucmVjb3JkRXJyb3I9ZnVuY3Rpb24oZSl7dGhpcy5lcnJvcnMucHVzaChlKX0sZS5wcm90b3R5cGUudG9sZXJhdGU9ZnVuY3Rpb24oZSl7aWYoIXRoaXMudG9sZXJhbnQpdGhyb3cgZTt0aGlzLnJlY29yZEVycm9yKGUpfSxlLnByb3RvdHlwZS5jb25zdHJ1Y3RFcnJvcj1mdW5jdGlvbihlLHQpe3ZhciByPW5ldyBFcnJvcihlKTt0cnl7dGhyb3cgcn1jYXRjaChlKXtPYmplY3QuY3JlYXRlJiZPYmplY3QuZGVmaW5lUHJvcGVydHkmJihyPU9iamVjdC5jcmVhdGUoZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJjb2x1bW5cIix7dmFsdWU6dH0pKX1yZXR1cm4gcn0sZS5wcm90b3R5cGUuY3JlYXRlRXJyb3I9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9XCJMaW5lIFwiK3QrXCI6IFwiK24sbz10aGlzLmNvbnN0cnVjdEVycm9yKGkscik7cmV0dXJuIG8uaW5kZXg9ZSxvLmxpbmVOdW1iZXI9dCxvLmRlc2NyaXB0aW9uPW4sb30sZS5wcm90b3R5cGUudGhyb3dFcnJvcj1mdW5jdGlvbihlLHQscixuKXt0aHJvdyB0aGlzLmNyZWF0ZUVycm9yKGUsdCxyLG4pfSxlLnByb3RvdHlwZS50b2xlcmF0ZUVycm9yPWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPXRoaXMuY3JlYXRlRXJyb3IoZSx0LHIsbik7aWYoIXRoaXMudG9sZXJhbnQpdGhyb3cgaTt0aGlzLnJlY29yZEVycm9yKGkpfSxlfSgpO3QuRXJyb3JIYW5kbGVyPXJ9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5NZXNzYWdlcz17QmFkR2V0dGVyQXJpdHk6XCJHZXR0ZXIgbXVzdCBub3QgaGF2ZSBhbnkgZm9ybWFsIHBhcmFtZXRlcnNcIixCYWRTZXR0ZXJBcml0eTpcIlNldHRlciBtdXN0IGhhdmUgZXhhY3RseSBvbmUgZm9ybWFsIHBhcmFtZXRlclwiLEJhZFNldHRlclJlc3RQYXJhbWV0ZXI6XCJTZXR0ZXIgZnVuY3Rpb24gYXJndW1lbnQgbXVzdCBub3QgYmUgYSByZXN0IHBhcmFtZXRlclwiLENvbnN0cnVjdG9ySXNBc3luYzpcIkNsYXNzIGNvbnN0cnVjdG9yIG1heSBub3QgYmUgYW4gYXN5bmMgbWV0aG9kXCIsQ29uc3RydWN0b3JTcGVjaWFsTWV0aG9kOlwiQ2xhc3MgY29uc3RydWN0b3IgbWF5IG5vdCBiZSBhbiBhY2Nlc3NvclwiLERlY2xhcmF0aW9uTWlzc2luZ0luaXRpYWxpemVyOlwiTWlzc2luZyBpbml0aWFsaXplciBpbiAlMCBkZWNsYXJhdGlvblwiLERlZmF1bHRSZXN0UGFyYW1ldGVyOlwiVW5leHBlY3RlZCB0b2tlbiA9XCIsRHVwbGljYXRlQmluZGluZzpcIkR1cGxpY2F0ZSBiaW5kaW5nICUwXCIsRHVwbGljYXRlQ29uc3RydWN0b3I6XCJBIGNsYXNzIG1heSBvbmx5IGhhdmUgb25lIGNvbnN0cnVjdG9yXCIsRHVwbGljYXRlUHJvdG9Qcm9wZXJ0eTpcIkR1cGxpY2F0ZSBfX3Byb3RvX18gZmllbGRzIGFyZSBub3QgYWxsb3dlZCBpbiBvYmplY3QgbGl0ZXJhbHNcIixGb3JJbk9mTG9vcEluaXRpYWxpemVyOlwiJTAgbG9vcCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBtYXkgbm90IGhhdmUgYW4gaW5pdGlhbGl6ZXJcIixHZW5lcmF0b3JJbkxlZ2FjeUNvbnRleHQ6XCJHZW5lcmF0b3IgZGVjbGFyYXRpb25zIGFyZSBub3QgYWxsb3dlZCBpbiBsZWdhY3kgY29udGV4dHNcIixJbGxlZ2FsQnJlYWs6XCJJbGxlZ2FsIGJyZWFrIHN0YXRlbWVudFwiLElsbGVnYWxDb250aW51ZTpcIklsbGVnYWwgY29udGludWUgc3RhdGVtZW50XCIsSWxsZWdhbEV4cG9ydERlY2xhcmF0aW9uOlwiVW5leHBlY3RlZCB0b2tlblwiLElsbGVnYWxJbXBvcnREZWNsYXJhdGlvbjpcIlVuZXhwZWN0ZWQgdG9rZW5cIixJbGxlZ2FsTGFuZ3VhZ2VNb2RlRGlyZWN0aXZlOlwiSWxsZWdhbCAndXNlIHN0cmljdCcgZGlyZWN0aXZlIGluIGZ1bmN0aW9uIHdpdGggbm9uLXNpbXBsZSBwYXJhbWV0ZXIgbGlzdFwiLElsbGVnYWxSZXR1cm46XCJJbGxlZ2FsIHJldHVybiBzdGF0ZW1lbnRcIixJbnZhbGlkRXNjYXBlZFJlc2VydmVkV29yZDpcIktleXdvcmQgbXVzdCBub3QgY29udGFpbiBlc2NhcGVkIGNoYXJhY3RlcnNcIixJbnZhbGlkSGV4RXNjYXBlU2VxdWVuY2U6XCJJbnZhbGlkIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZVwiLEludmFsaWRMSFNJbkFzc2lnbm1lbnQ6XCJJbnZhbGlkIGxlZnQtaGFuZCBzaWRlIGluIGFzc2lnbm1lbnRcIixJbnZhbGlkTEhTSW5Gb3JJbjpcIkludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gZm9yLWluXCIsSW52YWxpZExIU0luRm9yTG9vcDpcIkludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gZm9yLWxvb3BcIixJbnZhbGlkTW9kdWxlU3BlY2lmaWVyOlwiVW5leHBlY3RlZCB0b2tlblwiLEludmFsaWRSZWdFeHA6XCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvblwiLExldEluTGV4aWNhbEJpbmRpbmc6XCJsZXQgaXMgZGlzYWxsb3dlZCBhcyBhIGxleGljYWxseSBib3VuZCBuYW1lXCIsTWlzc2luZ0Zyb21DbGF1c2U6XCJVbmV4cGVjdGVkIHRva2VuXCIsTXVsdGlwbGVEZWZhdWx0c0luU3dpdGNoOlwiTW9yZSB0aGFuIG9uZSBkZWZhdWx0IGNsYXVzZSBpbiBzd2l0Y2ggc3RhdGVtZW50XCIsTmV3bGluZUFmdGVyVGhyb3c6XCJJbGxlZ2FsIG5ld2xpbmUgYWZ0ZXIgdGhyb3dcIixOb0FzQWZ0ZXJJbXBvcnROYW1lc3BhY2U6XCJVbmV4cGVjdGVkIHRva2VuXCIsTm9DYXRjaE9yRmluYWxseTpcIk1pc3NpbmcgY2F0Y2ggb3IgZmluYWxseSBhZnRlciB0cnlcIixQYXJhbWV0ZXJBZnRlclJlc3RQYXJhbWV0ZXI6XCJSZXN0IHBhcmFtZXRlciBtdXN0IGJlIGxhc3QgZm9ybWFsIHBhcmFtZXRlclwiLFJlZGVjbGFyYXRpb246XCIlMCAnJTEnIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWRcIixTdGF0aWNQcm90b3R5cGU6XCJDbGFzc2VzIG1heSBub3QgaGF2ZSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgcHJvdG90eXBlXCIsU3RyaWN0Q2F0Y2hWYXJpYWJsZTpcIkNhdGNoIHZhcmlhYmxlIG1heSBub3QgYmUgZXZhbCBvciBhcmd1bWVudHMgaW4gc3RyaWN0IG1vZGVcIixTdHJpY3REZWxldGU6XCJEZWxldGUgb2YgYW4gdW5xdWFsaWZpZWQgaWRlbnRpZmllciBpbiBzdHJpY3QgbW9kZS5cIixTdHJpY3RGdW5jdGlvbjpcIkluIHN0cmljdCBtb2RlIGNvZGUsIGZ1bmN0aW9ucyBjYW4gb25seSBiZSBkZWNsYXJlZCBhdCB0b3AgbGV2ZWwgb3IgaW5zaWRlIGEgYmxvY2tcIixTdHJpY3RGdW5jdGlvbk5hbWU6XCJGdW5jdGlvbiBuYW1lIG1heSBub3QgYmUgZXZhbCBvciBhcmd1bWVudHMgaW4gc3RyaWN0IG1vZGVcIixTdHJpY3RMSFNBc3NpZ25tZW50OlwiQXNzaWdubWVudCB0byBldmFsIG9yIGFyZ3VtZW50cyBpcyBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZVwiLFN0cmljdExIU1Bvc3RmaXg6XCJQb3N0Zml4IGluY3JlbWVudC9kZWNyZW1lbnQgbWF5IG5vdCBoYXZlIGV2YWwgb3IgYXJndW1lbnRzIG9wZXJhbmQgaW4gc3RyaWN0IG1vZGVcIixTdHJpY3RMSFNQcmVmaXg6XCJQcmVmaXggaW5jcmVtZW50L2RlY3JlbWVudCBtYXkgbm90IGhhdmUgZXZhbCBvciBhcmd1bWVudHMgb3BlcmFuZCBpbiBzdHJpY3QgbW9kZVwiLFN0cmljdE1vZGVXaXRoOlwiU3RyaWN0IG1vZGUgY29kZSBtYXkgbm90IGluY2x1ZGUgYSB3aXRoIHN0YXRlbWVudFwiLFN0cmljdE9jdGFsTGl0ZXJhbDpcIk9jdGFsIGxpdGVyYWxzIGFyZSBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZS5cIixTdHJpY3RQYXJhbUR1cGU6XCJTdHJpY3QgbW9kZSBmdW5jdGlvbiBtYXkgbm90IGhhdmUgZHVwbGljYXRlIHBhcmFtZXRlciBuYW1lc1wiLFN0cmljdFBhcmFtTmFtZTpcIlBhcmFtZXRlciBuYW1lIGV2YWwgb3IgYXJndW1lbnRzIGlzIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlXCIsU3RyaWN0UmVzZXJ2ZWRXb3JkOlwiVXNlIG9mIGZ1dHVyZSByZXNlcnZlZCB3b3JkIGluIHN0cmljdCBtb2RlXCIsU3RyaWN0VmFyTmFtZTpcIlZhcmlhYmxlIG5hbWUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZVwiLFRlbXBsYXRlT2N0YWxMaXRlcmFsOlwiT2N0YWwgbGl0ZXJhbHMgYXJlIG5vdCBhbGxvd2VkIGluIHRlbXBsYXRlIHN0cmluZ3MuXCIsVW5leHBlY3RlZEVPUzpcIlVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0XCIsVW5leHBlY3RlZElkZW50aWZpZXI6XCJVbmV4cGVjdGVkIGlkZW50aWZpZXJcIixVbmV4cGVjdGVkTnVtYmVyOlwiVW5leHBlY3RlZCBudW1iZXJcIixVbmV4cGVjdGVkUmVzZXJ2ZWQ6XCJVbmV4cGVjdGVkIHJlc2VydmVkIHdvcmRcIixVbmV4cGVjdGVkU3RyaW5nOlwiVW5leHBlY3RlZCBzdHJpbmdcIixVbmV4cGVjdGVkVGVtcGxhdGU6XCJVbmV4cGVjdGVkIHF1YXNpICUwXCIsVW5leHBlY3RlZFRva2VuOlwiVW5leHBlY3RlZCB0b2tlbiAlMFwiLFVuZXhwZWN0ZWRUb2tlbklsbGVnYWw6XCJVbmV4cGVjdGVkIHRva2VuIElMTEVHQUxcIixVbmtub3duTGFiZWw6XCJVbmRlZmluZWQgbGFiZWwgJyUwJ1wiLFVudGVybWluYXRlZFJlZ0V4cDpcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uOiBtaXNzaW5nIC9cIn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDkpLGk9cig0KSxvPXIoMTEpO2Z1bmN0aW9uIGEoZSl7cmV0dXJuXCIwMTIzNDU2Nzg5YWJjZGVmXCIuaW5kZXhPZihlLnRvTG93ZXJDYXNlKCkpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuXCIwMTIzNDU2N1wiLmluZGV4T2YoZSl9dmFyIHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5zb3VyY2U9ZSx0aGlzLmVycm9ySGFuZGxlcj10LHRoaXMudHJhY2tDb21tZW50PSExLHRoaXMuaXNNb2R1bGU9ITEsdGhpcy5sZW5ndGg9ZS5sZW5ndGgsdGhpcy5pbmRleD0wLHRoaXMubGluZU51bWJlcj1lLmxlbmd0aD4wPzE6MCx0aGlzLmxpbmVTdGFydD0wLHRoaXMuY3VybHlTdGFjaz1bXX1yZXR1cm4gZS5wcm90b3R5cGUuc2F2ZVN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJue2luZGV4OnRoaXMuaW5kZXgsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0fX0sZS5wcm90b3R5cGUucmVzdG9yZVN0YXRlPWZ1bmN0aW9uKGUpe3RoaXMuaW5kZXg9ZS5pbmRleCx0aGlzLmxpbmVOdW1iZXI9ZS5saW5lTnVtYmVyLHRoaXMubGluZVN0YXJ0PWUubGluZVN0YXJ0fSxlLnByb3RvdHlwZS5lb2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmRleD49dGhpcy5sZW5ndGh9LGUucHJvdG90eXBlLnRocm93VW5leHBlY3RlZFRva2VuPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbklsbGVnYWwpLHRoaXMuZXJyb3JIYW5kbGVyLnRocm93RXJyb3IodGhpcy5pbmRleCx0aGlzLmxpbmVOdW1iZXIsdGhpcy5pbmRleC10aGlzLmxpbmVTdGFydCsxLGUpfSxlLnByb3RvdHlwZS50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbj1mdW5jdGlvbihlKXt2b2lkIDA9PT1lJiYoZT1vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbklsbGVnYWwpLHRoaXMuZXJyb3JIYW5kbGVyLnRvbGVyYXRlRXJyb3IodGhpcy5pbmRleCx0aGlzLmxpbmVOdW1iZXIsdGhpcy5pbmRleC10aGlzLmxpbmVTdGFydCsxLGUpfSxlLnByb3RvdHlwZS5za2lwU2luZ2xlTGluZUNvbW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHQscixuPVtdO2Zvcih0aGlzLnRyYWNrQ29tbWVudCYmKG49W10sdD10aGlzLmluZGV4LWUscj17c3RhcnQ6e2xpbmU6dGhpcy5saW5lTnVtYmVyLGNvbHVtbjp0aGlzLmluZGV4LXRoaXMubGluZVN0YXJ0LWV9LGVuZDp7fX0pOyF0aGlzLmVvZigpOyl7dmFyIG89dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtpZigrK3RoaXMuaW5kZXgsaS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihvKSl7aWYodGhpcy50cmFja0NvbW1lbnQpe3IuZW5kPXtsaW5lOnRoaXMubGluZU51bWJlcixjb2x1bW46dGhpcy5pbmRleC10aGlzLmxpbmVTdGFydC0xfTt2YXIgYT17bXVsdGlMaW5lOiExLHNsaWNlOlt0K2UsdGhpcy5pbmRleC0xXSxyYW5nZTpbdCx0aGlzLmluZGV4LTFdLGxvYzpyfTtuLnB1c2goYSl9cmV0dXJuIDEzPT09byYmMTA9PT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpJiYrK3RoaXMuaW5kZXgsKyt0aGlzLmxpbmVOdW1iZXIsdGhpcy5saW5lU3RhcnQ9dGhpcy5pbmRleCxufX1yZXR1cm4gdGhpcy50cmFja0NvbW1lbnQmJihyLmVuZD17bGluZTp0aGlzLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuaW5kZXgtdGhpcy5saW5lU3RhcnR9LGE9e211bHRpTGluZTohMSxzbGljZTpbdCtlLHRoaXMuaW5kZXhdLHJhbmdlOlt0LHRoaXMuaW5kZXhdLGxvYzpyfSxuLnB1c2goYSkpLG59LGUucHJvdG90eXBlLnNraXBNdWx0aUxpbmVDb21tZW50PWZ1bmN0aW9uKCl7dmFyIGUsdCxyPVtdO2Zvcih0aGlzLnRyYWNrQ29tbWVudCYmKHI9W10sZT10aGlzLmluZGV4LTIsdD17c3RhcnQ6e2xpbmU6dGhpcy5saW5lTnVtYmVyLGNvbHVtbjp0aGlzLmluZGV4LXRoaXMubGluZVN0YXJ0LTJ9LGVuZDp7fX0pOyF0aGlzLmVvZigpOyl7dmFyIG49dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtpZihpLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKG4pKTEzPT09biYmMTA9PT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgrMSkmJisrdGhpcy5pbmRleCwrK3RoaXMubGluZU51bWJlciwrK3RoaXMuaW5kZXgsdGhpcy5saW5lU3RhcnQ9dGhpcy5pbmRleDtlbHNlIGlmKDQyPT09bil7aWYoNDc9PT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgrMSkpe2lmKHRoaXMuaW5kZXgrPTIsdGhpcy50cmFja0NvbW1lbnQpe3QuZW5kPXtsaW5lOnRoaXMubGluZU51bWJlcixjb2x1bW46dGhpcy5pbmRleC10aGlzLmxpbmVTdGFydH07dmFyIG89e211bHRpTGluZTohMCxzbGljZTpbZSsyLHRoaXMuaW5kZXgtMl0scmFuZ2U6W2UsdGhpcy5pbmRleF0sbG9jOnR9O3IucHVzaChvKX1yZXR1cm4gcn0rK3RoaXMuaW5kZXh9ZWxzZSsrdGhpcy5pbmRleH1yZXR1cm4gdGhpcy50cmFja0NvbW1lbnQmJih0LmVuZD17bGluZTp0aGlzLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuaW5kZXgtdGhpcy5saW5lU3RhcnR9LG89e211bHRpTGluZTohMCxzbGljZTpbZSsyLHRoaXMuaW5kZXhdLHJhbmdlOltlLHRoaXMuaW5kZXhdLGxvYzp0fSxyLnB1c2gobykpLHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oKSxyfSxlLnByb3RvdHlwZS5zY2FuQ29tbWVudHM9ZnVuY3Rpb24oKXt2YXIgZTt0aGlzLnRyYWNrQ29tbWVudCYmKGU9W10pO2Zvcih2YXIgdD0wPT09dGhpcy5pbmRleDshdGhpcy5lb2YoKTspe3ZhciByPXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7aWYoaS5DaGFyYWN0ZXIuaXNXaGl0ZVNwYWNlKHIpKSsrdGhpcy5pbmRleDtlbHNlIGlmKGkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IocikpKyt0aGlzLmluZGV4LDEzPT09ciYmMTA9PT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpJiYrK3RoaXMuaW5kZXgsKyt0aGlzLmxpbmVOdW1iZXIsdGhpcy5saW5lU3RhcnQ9dGhpcy5pbmRleCx0PSEwO2Vsc2UgaWYoNDc9PT1yKWlmKDQ3PT09KHI9dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KzEpKSl7dGhpcy5pbmRleCs9Mjt2YXIgbj10aGlzLnNraXBTaW5nbGVMaW5lQ29tbWVudCgyKTt0aGlzLnRyYWNrQ29tbWVudCYmKGU9ZS5jb25jYXQobikpLHQ9ITB9ZWxzZXtpZig0MiE9PXIpYnJlYWs7dGhpcy5pbmRleCs9MixuPXRoaXMuc2tpcE11bHRpTGluZUNvbW1lbnQoKSx0aGlzLnRyYWNrQ29tbWVudCYmKGU9ZS5jb25jYXQobikpfWVsc2UgaWYodCYmNDU9PT1yKXtpZig0NSE9PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCsxKXx8NjIhPT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgrMikpYnJlYWs7dGhpcy5pbmRleCs9MyxuPXRoaXMuc2tpcFNpbmdsZUxpbmVDb21tZW50KDMpLHRoaXMudHJhY2tDb21tZW50JiYoZT1lLmNvbmNhdChuKSl9ZWxzZXtpZig2MCE9PXJ8fHRoaXMuaXNNb2R1bGUpYnJlYWs7aWYoXCIhLS1cIiE9PXRoaXMuc291cmNlLnNsaWNlKHRoaXMuaW5kZXgrMSx0aGlzLmluZGV4KzQpKWJyZWFrO3RoaXMuaW5kZXgrPTQsbj10aGlzLnNraXBTaW5nbGVMaW5lQ29tbWVudCg0KSx0aGlzLnRyYWNrQ29tbWVudCYmKGU9ZS5jb25jYXQobikpfX1yZXR1cm4gZX0sZS5wcm90b3R5cGUuaXNGdXR1cmVSZXNlcnZlZFdvcmQ9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcImVudW1cIjpjYXNlXCJleHBvcnRcIjpjYXNlXCJpbXBvcnRcIjpjYXNlXCJzdXBlclwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSxlLnByb3RvdHlwZS5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQ9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcImltcGxlbWVudHNcIjpjYXNlXCJpbnRlcmZhY2VcIjpjYXNlXCJwYWNrYWdlXCI6Y2FzZVwicHJpdmF0ZVwiOmNhc2VcInByb3RlY3RlZFwiOmNhc2VcInB1YmxpY1wiOmNhc2VcInN0YXRpY1wiOmNhc2VcInlpZWxkXCI6Y2FzZVwibGV0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LGUucHJvdG90eXBlLmlzUmVzdHJpY3RlZFdvcmQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCJldmFsXCI9PT1lfHxcImFyZ3VtZW50c1wiPT09ZX0sZS5wcm90b3R5cGUuaXNLZXl3b3JkPWZ1bmN0aW9uKGUpe3N3aXRjaChlLmxlbmd0aCl7Y2FzZSAyOnJldHVyblwiaWZcIj09PWV8fFwiaW5cIj09PWV8fFwiZG9cIj09PWU7Y2FzZSAzOnJldHVyblwidmFyXCI9PT1lfHxcImZvclwiPT09ZXx8XCJuZXdcIj09PWV8fFwidHJ5XCI9PT1lfHxcImxldFwiPT09ZTtjYXNlIDQ6cmV0dXJuXCJ0aGlzXCI9PT1lfHxcImVsc2VcIj09PWV8fFwiY2FzZVwiPT09ZXx8XCJ2b2lkXCI9PT1lfHxcIndpdGhcIj09PWV8fFwiZW51bVwiPT09ZTtjYXNlIDU6cmV0dXJuXCJ3aGlsZVwiPT09ZXx8XCJicmVha1wiPT09ZXx8XCJjYXRjaFwiPT09ZXx8XCJ0aHJvd1wiPT09ZXx8XCJjb25zdFwiPT09ZXx8XCJ5aWVsZFwiPT09ZXx8XCJjbGFzc1wiPT09ZXx8XCJzdXBlclwiPT09ZTtjYXNlIDY6cmV0dXJuXCJyZXR1cm5cIj09PWV8fFwidHlwZW9mXCI9PT1lfHxcImRlbGV0ZVwiPT09ZXx8XCJzd2l0Y2hcIj09PWV8fFwiZXhwb3J0XCI9PT1lfHxcImltcG9ydFwiPT09ZTtjYXNlIDc6cmV0dXJuXCJkZWZhdWx0XCI9PT1lfHxcImZpbmFsbHlcIj09PWV8fFwiZXh0ZW5kc1wiPT09ZTtjYXNlIDg6cmV0dXJuXCJmdW5jdGlvblwiPT09ZXx8XCJjb250aW51ZVwiPT09ZXx8XCJkZWJ1Z2dlclwiPT09ZTtjYXNlIDEwOnJldHVyblwiaW5zdGFuY2VvZlwiPT09ZTtkZWZhdWx0OnJldHVybiExfX0sZS5wcm90b3R5cGUuY29kZVBvaW50QXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zb3VyY2UuY2hhckNvZGVBdChlKTtpZih0Pj01NTI5NiYmdDw9NTYzMTkpe3ZhciByPXRoaXMuc291cmNlLmNoYXJDb2RlQXQoZSsxKTtyPj01NjMyMCYmcjw9NTczNDMmJih0PTEwMjQqKHQtNTUyOTYpK3ItNTYzMjArNjU1MzYpfXJldHVybiB0fSxlLnByb3RvdHlwZS5zY2FuSGV4RXNjYXBlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cInVcIj09PWU/NDoyLHI9MCxuPTA7bjx0Oysrbil7aWYodGhpcy5lb2YoKXx8IWkuQ2hhcmFjdGVyLmlzSGV4RGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpcmV0dXJuIG51bGw7cj0xNipyK2EodGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSl9cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocil9LGUucHJvdG90eXBlLnNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0sdD0wO2ZvcihcIn1cIj09PWUmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTshdGhpcy5lb2YoKSYmKGU9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSxpLkNoYXJhY3Rlci5pc0hleERpZ2l0KGUuY2hhckNvZGVBdCgwKSkpOyl0PTE2KnQrYShlKTtyZXR1cm4odD4xMTE0MTExfHxcIn1cIiE9PWUpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCksaS5DaGFyYWN0ZXIuZnJvbUNvZGVQb2ludCh0KX0sZS5wcm90b3R5cGUuZ2V0SWRlbnRpZmllcj1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmluZGV4Kys7IXRoaXMuZW9mKCk7KXt2YXIgdD10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO2lmKDkyPT09dClyZXR1cm4gdGhpcy5pbmRleD1lLHRoaXMuZ2V0Q29tcGxleElkZW50aWZpZXIoKTtpZih0Pj01NTI5NiYmdDw1NzM0MylyZXR1cm4gdGhpcy5pbmRleD1lLHRoaXMuZ2V0Q29tcGxleElkZW50aWZpZXIoKTtpZighaS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydCh0KSlicmVhazsrK3RoaXMuaW5kZXh9cmV0dXJuIHRoaXMuc291cmNlLnNsaWNlKGUsdGhpcy5pbmRleCl9LGUucHJvdG90eXBlLmdldENvbXBsZXhJZGVudGlmaWVyPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmNvZGVQb2ludEF0KHRoaXMuaW5kZXgpLHI9aS5DaGFyYWN0ZXIuZnJvbUNvZGVQb2ludCh0KTtmb3IodGhpcy5pbmRleCs9ci5sZW5ndGgsOTI9PT10JiYoMTE3IT09dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpLCsrdGhpcy5pbmRleCxcIntcIj09PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdPygrK3RoaXMuaW5kZXgsZT10aGlzLnNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlKCkpOm51bGwhPT0oZT10aGlzLnNjYW5IZXhFc2NhcGUoXCJ1XCIpKSYmXCJcXFxcXCIhPT1lJiZpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydChlLmNoYXJDb2RlQXQoMCkpfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCkscj1lKTshdGhpcy5lb2YoKSYmKHQ9dGhpcy5jb2RlUG9pbnRBdCh0aGlzLmluZGV4KSxpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KHQpKTspcis9ZT1pLkNoYXJhY3Rlci5mcm9tQ29kZVBvaW50KHQpLHRoaXMuaW5kZXgrPWUubGVuZ3RoLDkyPT09dCYmKHI9ci5zdWJzdHIoMCxyLmxlbmd0aC0xKSwxMTchPT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCksKyt0aGlzLmluZGV4LFwie1wiPT09dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0/KCsrdGhpcy5pbmRleCxlPXRoaXMuc2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGUoKSk6bnVsbCE9PShlPXRoaXMuc2NhbkhleEVzY2FwZShcInVcIikpJiZcIlxcXFxcIiE9PWUmJmkuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclBhcnQoZS5jaGFyQ29kZUF0KDApKXx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpLHIrPWUpO3JldHVybiByfSxlLnByb3RvdHlwZS5vY3RhbFRvRGVjaW1hbD1mdW5jdGlvbihlKXt2YXIgdD1cIjBcIiE9PWUscj1zKGUpO3JldHVybiF0aGlzLmVvZigpJiZpLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkmJih0PSEwLHI9OCpyK3ModGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSksXCIwMTIzXCIuaW5kZXhPZihlKT49MCYmIXRoaXMuZW9mKCkmJmkuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSYmKHI9OCpyK3ModGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSkpKSx7Y29kZTpyLG9jdGFsOnR9fSxlLnByb3RvdHlwZS5zY2FuSWRlbnRpZmllcj1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5pbmRleCxyPTkyPT09dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0KT90aGlzLmdldENvbXBsZXhJZGVudGlmaWVyKCk6dGhpcy5nZXRJZGVudGlmaWVyKCk7aWYoMyE9KGU9MT09PXIubGVuZ3RoPzM6dGhpcy5pc0tleXdvcmQocik/NDpcIm51bGxcIj09PXI/NTpcInRydWVcIj09PXJ8fFwiZmFsc2VcIj09PXI/MTozKSYmdCtyLmxlbmd0aCE9PXRoaXMuaW5kZXgpe3ZhciBuPXRoaXMuaW5kZXg7dGhpcy5pbmRleD10LHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5JbnZhbGlkRXNjYXBlZFJlc2VydmVkV29yZCksdGhpcy5pbmRleD1ufXJldHVybnt0eXBlOmUsdmFsdWU6cixsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5saW5lU3RhcnQsc3RhcnQ6dCxlbmQ6dGhpcy5pbmRleH19LGUucHJvdG90eXBlLnNjYW5QdW5jdHVhdG9yPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5pbmRleCx0PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdO3N3aXRjaCh0KXtjYXNlXCIoXCI6Y2FzZVwie1wiOlwie1wiPT09dCYmdGhpcy5jdXJseVN0YWNrLnB1c2goXCJ7XCIpLCsrdGhpcy5pbmRleDticmVhaztjYXNlXCIuXCI6Kyt0aGlzLmluZGV4LFwiLlwiPT09dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0mJlwiLlwiPT09dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsxXSYmKHRoaXMuaW5kZXgrPTIsdD1cIi4uLlwiKTticmVhaztjYXNlXCJ9XCI6Kyt0aGlzLmluZGV4LHRoaXMuY3VybHlTdGFjay5wb3AoKTticmVhaztjYXNlXCIpXCI6Y2FzZVwiO1wiOmNhc2VcIixcIjpjYXNlXCJbXCI6Y2FzZVwiXVwiOmNhc2VcIjpcIjpjYXNlXCI/XCI6Y2FzZVwiflwiOisrdGhpcy5pbmRleDticmVhaztkZWZhdWx0OlwiPj4+PVwiPT09KHQ9dGhpcy5zb3VyY2Uuc3Vic3RyKHRoaXMuaW5kZXgsNCkpP3RoaXMuaW5kZXgrPTQ6XCI9PT1cIj09PSh0PXQuc3Vic3RyKDAsMykpfHxcIiE9PVwiPT09dHx8XCI+Pj5cIj09PXR8fFwiPDw9XCI9PT10fHxcIj4+PVwiPT09dHx8XCIqKj1cIj09PXQ/dGhpcy5pbmRleCs9MzpcIiYmXCI9PT0odD10LnN1YnN0cigwLDIpKXx8XCJ8fFwiPT09dHx8XCI9PVwiPT09dHx8XCIhPVwiPT09dHx8XCIrPVwiPT09dHx8XCItPVwiPT09dHx8XCIqPVwiPT09dHx8XCIvPVwiPT09dHx8XCIrK1wiPT09dHx8XCItLVwiPT09dHx8XCI8PFwiPT09dHx8XCI+PlwiPT09dHx8XCImPVwiPT09dHx8XCJ8PVwiPT09dHx8XCJePVwiPT09dHx8XCIlPVwiPT09dHx8XCI8PVwiPT09dHx8XCI+PVwiPT09dHx8XCI9PlwiPT09dHx8XCIqKlwiPT09dD90aGlzLmluZGV4Kz0yOih0PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdLFwiPD49ISstKiUmfF4vXCIuaW5kZXhPZih0KT49MCYmKyt0aGlzLmluZGV4KX1yZXR1cm4gdGhpcy5pbmRleD09PWUmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSx7dHlwZTo3LHZhbHVlOnQsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0LHN0YXJ0OmUsZW5kOnRoaXMuaW5kZXh9fSxlLnByb3RvdHlwZS5zY2FuSGV4TGl0ZXJhbD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIjshdGhpcy5lb2YoKSYmaS5DaGFyYWN0ZXIuaXNIZXhEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKTspdCs9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtyZXR1cm4gMD09PXQubGVuZ3RoJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCksaS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSx7dHlwZTo2LHZhbHVlOnBhcnNlSW50KFwiMHhcIit0LDE2KSxsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5saW5lU3RhcnQsc3RhcnQ6ZSxlbmQ6dGhpcy5pbmRleH19LGUucHJvdG90eXBlLnNjYW5CaW5hcnlMaXRlcmFsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPVwiXCI7IXRoaXMuZW9mKCkmJihcIjBcIj09PSh0PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdKXx8XCIxXCI9PT10KTspcis9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtyZXR1cm4gMD09PXIubGVuZ3RoJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCksdGhpcy5lb2YoKXx8KHQ9dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSwoaS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQodCl8fGkuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHQpKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpKSx7dHlwZTo2LHZhbHVlOnBhcnNlSW50KHIsMiksbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0LHN0YXJ0OmUsZW5kOnRoaXMuaW5kZXh9fSxlLnByb3RvdHlwZS5zY2FuT2N0YWxMaXRlcmFsPWZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJcIixuPSExO2ZvcihpLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQoZS5jaGFyQ29kZUF0KDApKT8obj0hMCxyPVwiMFwiK3RoaXMuc291cmNlW3RoaXMuaW5kZXgrK10pOisrdGhpcy5pbmRleDshdGhpcy5lb2YoKSYmaS5DaGFyYWN0ZXIuaXNPY3RhbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpOylyKz10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO3JldHVybiBufHwwIT09ci5sZW5ndGh8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSwoaS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSl8fGkuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpLHt0eXBlOjYsdmFsdWU6cGFyc2VJbnQociw4KSxvY3RhbDpuLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDp0LGVuZDp0aGlzLmluZGV4fX0sZS5wcm90b3R5cGUuaXNJbXBsaWNpdE9jdGFsTGl0ZXJhbD1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLmluZGV4KzE7ZTx0aGlzLmxlbmd0aDsrK2Upe3ZhciB0PXRoaXMuc291cmNlW2VdO2lmKFwiOFwiPT09dHx8XCI5XCI9PT10KXJldHVybiExO2lmKCFpLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQodC5jaGFyQ29kZUF0KDApKSlyZXR1cm4hMH1yZXR1cm4hMH0sZS5wcm90b3R5cGUuc2Nhbk51bWVyaWNMaXRlcmFsPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5pbmRleCx0PXRoaXMuc291cmNlW2VdO24uYXNzZXJ0KGkuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHQuY2hhckNvZGVBdCgwKSl8fFwiLlwiPT09dCxcIk51bWVyaWMgbGl0ZXJhbCBtdXN0IHN0YXJ0IHdpdGggYSBkZWNpbWFsIGRpZ2l0IG9yIGEgZGVjaW1hbCBwb2ludFwiKTt2YXIgcj1cIlwiO2lmKFwiLlwiIT09dCl7aWYocj10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdLHQ9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0sXCIwXCI9PT1yKXtpZihcInhcIj09PXR8fFwiWFwiPT09dClyZXR1cm4rK3RoaXMuaW5kZXgsdGhpcy5zY2FuSGV4TGl0ZXJhbChlKTtpZihcImJcIj09PXR8fFwiQlwiPT09dClyZXR1cm4rK3RoaXMuaW5kZXgsdGhpcy5zY2FuQmluYXJ5TGl0ZXJhbChlKTtpZihcIm9cIj09PXR8fFwiT1wiPT09dClyZXR1cm4gdGhpcy5zY2FuT2N0YWxMaXRlcmFsKHQsZSk7aWYodCYmaS5DaGFyYWN0ZXIuaXNPY3RhbERpZ2l0KHQuY2hhckNvZGVBdCgwKSkmJnRoaXMuaXNJbXBsaWNpdE9jdGFsTGl0ZXJhbCgpKXJldHVybiB0aGlzLnNjYW5PY3RhbExpdGVyYWwodCxlKX1mb3IoO2kuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpOylyKz10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO3Q9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF19aWYoXCIuXCI9PT10KXtmb3Iocis9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtpLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKTspcis9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTt0PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdfWlmKFwiZVwiPT09dHx8XCJFXCI9PT10KWlmKHIrPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK10sXCIrXCIhPT0odD10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSkmJlwiLVwiIT09dHx8KHIrPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK10pLGkuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKWZvcig7aS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSk7KXIrPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107ZWxzZSB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7cmV0dXJuIGkuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCkse3R5cGU6Nix2YWx1ZTpwYXJzZUZsb2F0KHIpLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDplLGVuZDp0aGlzLmluZGV4fX0sZS5wcm90b3R5cGUuc2NhblN0cmluZ0xpdGVyYWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmluZGV4LHQ9dGhpcy5zb3VyY2VbZV07bi5hc3NlcnQoXCInXCI9PT10fHwnXCInPT09dCxcIlN0cmluZyBsaXRlcmFsIG11c3Qgc3RhcnRzIHdpdGggYSBxdW90ZVwiKSwrK3RoaXMuaW5kZXg7Zm9yKHZhciByPSExLGE9XCJcIjshdGhpcy5lb2YoKTspe3ZhciBzPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107aWYocz09PXQpe3Q9XCJcIjticmVha31pZihcIlxcXFxcIj09PXMpaWYoKHM9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSkmJmkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3Iocy5jaGFyQ29kZUF0KDApKSkrK3RoaXMubGluZU51bWJlcixcIlxcclwiPT09cyYmXCJcXG5cIj09PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdJiYrK3RoaXMuaW5kZXgsdGhpcy5saW5lU3RhcnQ9dGhpcy5pbmRleDtlbHNlIHN3aXRjaChzKXtjYXNlXCJ1XCI6aWYoXCJ7XCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSkrK3RoaXMuaW5kZXgsYSs9dGhpcy5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpO2Vsc2V7dmFyIHU9dGhpcy5zY2FuSGV4RXNjYXBlKHMpO251bGw9PT11JiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCksYSs9dX1icmVhaztjYXNlXCJ4XCI6dmFyIGw9dGhpcy5zY2FuSGV4RXNjYXBlKHMpO251bGw9PT1sJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKG8uTWVzc2FnZXMuSW52YWxpZEhleEVzY2FwZVNlcXVlbmNlKSxhKz1sO2JyZWFrO2Nhc2VcIm5cIjphKz1cIlxcblwiO2JyZWFrO2Nhc2VcInJcIjphKz1cIlxcclwiO2JyZWFrO2Nhc2VcInRcIjphKz1cIlxcdFwiO2JyZWFrO2Nhc2VcImJcIjphKz1cIlxcYlwiO2JyZWFrO2Nhc2VcImZcIjphKz1cIlxcZlwiO2JyZWFrO2Nhc2VcInZcIjphKz1cIlxcdlwiO2JyZWFrO2Nhc2VcIjhcIjpjYXNlXCI5XCI6YSs9cyx0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKCk7YnJlYWs7ZGVmYXVsdDppZihzJiZpLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQocy5jaGFyQ29kZUF0KDApKSl7dmFyIGM9dGhpcy5vY3RhbFRvRGVjaW1hbChzKTtyPWMub2N0YWx8fHIsYSs9U3RyaW5nLmZyb21DaGFyQ29kZShjLmNvZGUpfWVsc2UgYSs9c31lbHNle2lmKGkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3Iocy5jaGFyQ29kZUF0KDApKSlicmVhazthKz1zfX1yZXR1cm5cIlwiIT09dCYmKHRoaXMuaW5kZXg9ZSx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCkpLHt0eXBlOjgsdmFsdWU6YSxvY3RhbDpyLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDplLGVuZDp0aGlzLmluZGV4fX0sZS5wcm90b3R5cGUuc2NhblRlbXBsYXRlPWZ1bmN0aW9uKCl7dmFyIGU9XCJcIix0PSExLHI9dGhpcy5pbmRleCxuPVwiYFwiPT09dGhpcy5zb3VyY2Vbcl0sYT0hMSxzPTI7Zm9yKCsrdGhpcy5pbmRleDshdGhpcy5lb2YoKTspe3ZhciB1PXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107aWYoXCJgXCI9PT11KXtzPTEsYT0hMCx0PSEwO2JyZWFrfWlmKFwiJFwiPT09dSl7aWYoXCJ7XCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSl7dGhpcy5jdXJseVN0YWNrLnB1c2goXCIke1wiKSwrK3RoaXMuaW5kZXgsdD0hMDticmVha31lKz11fWVsc2UgaWYoXCJcXFxcXCI9PT11KWlmKHU9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSxpLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKHUuY2hhckNvZGVBdCgwKSkpKyt0aGlzLmxpbmVOdW1iZXIsXCJcXHJcIj09PXUmJlwiXFxuXCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSYmKyt0aGlzLmluZGV4LHRoaXMubGluZVN0YXJ0PXRoaXMuaW5kZXg7ZWxzZSBzd2l0Y2godSl7Y2FzZVwiblwiOmUrPVwiXFxuXCI7YnJlYWs7Y2FzZVwiclwiOmUrPVwiXFxyXCI7YnJlYWs7Y2FzZVwidFwiOmUrPVwiXFx0XCI7YnJlYWs7Y2FzZVwidVwiOmlmKFwie1wiPT09dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0pKyt0aGlzLmluZGV4LGUrPXRoaXMuc2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGUoKTtlbHNle3ZhciBsPXRoaXMuaW5kZXgsYz10aGlzLnNjYW5IZXhFc2NhcGUodSk7bnVsbCE9PWM/ZSs9YzoodGhpcy5pbmRleD1sLGUrPXUpfWJyZWFrO2Nhc2VcInhcIjp2YXIgaD10aGlzLnNjYW5IZXhFc2NhcGUodSk7bnVsbD09PWgmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5JbnZhbGlkSGV4RXNjYXBlU2VxdWVuY2UpLGUrPWg7YnJlYWs7Y2FzZVwiYlwiOmUrPVwiXFxiXCI7YnJlYWs7Y2FzZVwiZlwiOmUrPVwiXFxmXCI7YnJlYWs7Y2FzZVwidlwiOmUrPVwiXFx2XCI7YnJlYWs7ZGVmYXVsdDpcIjBcIj09PXU/KGkuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKG8uTWVzc2FnZXMuVGVtcGxhdGVPY3RhbExpdGVyYWwpLGUrPVwiXFwwXCIpOmkuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdCh1LmNoYXJDb2RlQXQoMCkpP3RoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5UZW1wbGF0ZU9jdGFsTGl0ZXJhbCk6ZSs9dX1lbHNlIGkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IodS5jaGFyQ29kZUF0KDApKT8oKyt0aGlzLmxpbmVOdW1iZXIsXCJcXHJcIj09PXUmJlwiXFxuXCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSYmKyt0aGlzLmluZGV4LHRoaXMubGluZVN0YXJ0PXRoaXMuaW5kZXgsZSs9XCJcXG5cIik6ZSs9dX1yZXR1cm4gdHx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpLG58fHRoaXMuY3VybHlTdGFjay5wb3AoKSx7dHlwZToxMCx2YWx1ZTp0aGlzLnNvdXJjZS5zbGljZShyKzEsdGhpcy5pbmRleC1zKSxjb29rZWQ6ZSxoZWFkOm4sdGFpbDphLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDpyLGVuZDp0aGlzLmluZGV4fX0sZS5wcm90b3R5cGUudGVzdFJlZ0V4cD1mdW5jdGlvbihlLHQpe3ZhciByPWUsbj10aGlzO3QuaW5kZXhPZihcInVcIik+PTAmJihyPXIucmVwbGFjZSgvXFxcXHVcXHsoWzAtOWEtZkEtRl0rKVxcfXxcXFxcdShbYS1mQS1GMC05XXs0fSkvZywoZnVuY3Rpb24oZSx0LHIpe3ZhciBpPXBhcnNlSW50KHR8fHIsMTYpO3JldHVybiBpPjExMTQxMTEmJm4udGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5JbnZhbGlkUmVnRXhwKSxpPD02NTUzNT9TdHJpbmcuZnJvbUNoYXJDb2RlKGkpOlwiXHVGRkZGXCJ9KSkucmVwbGFjZSgvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nLFwiXHVGRkZGXCIpKTt0cnl7UmVnRXhwKHIpfWNhdGNoKGUpe3RoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5JbnZhbGlkUmVnRXhwKX10cnl7cmV0dXJuIG5ldyBSZWdFeHAoZSx0KX1jYXRjaChlKXtyZXR1cm4gbnVsbH19LGUucHJvdG90eXBlLnNjYW5SZWdFeHBCb2R5PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF07bi5hc3NlcnQoXCIvXCI9PT1lLFwiUmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwgbXVzdCBzdGFydCB3aXRoIGEgc2xhc2hcIik7Zm9yKHZhciB0PXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK10scj0hMSxhPSExOyF0aGlzLmVvZigpOylpZih0Kz1lPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK10sXCJcXFxcXCI9PT1lKWU9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSxpLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGUuY2hhckNvZGVBdCgwKSkmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5VbnRlcm1pbmF0ZWRSZWdFeHApLHQrPWU7ZWxzZSBpZihpLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGUuY2hhckNvZGVBdCgwKSkpdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihvLk1lc3NhZ2VzLlVudGVybWluYXRlZFJlZ0V4cCk7ZWxzZSBpZihyKVwiXVwiPT09ZSYmKHI9ITEpO2Vsc2V7aWYoXCIvXCI9PT1lKXthPSEwO2JyZWFrfVwiW1wiPT09ZSYmKHI9ITApfXJldHVybiBhfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKG8uTWVzc2FnZXMuVW50ZXJtaW5hdGVkUmVnRXhwKSx0LnN1YnN0cigxLHQubGVuZ3RoLTIpfSxlLnByb3RvdHlwZS5zY2FuUmVnRXhwRmxhZ3M9ZnVuY3Rpb24oKXtmb3IodmFyIGU9XCJcIjshdGhpcy5lb2YoKTspe3ZhciB0PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdO2lmKCFpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KHQuY2hhckNvZGVBdCgwKSkpYnJlYWs7aWYoKyt0aGlzLmluZGV4LFwiXFxcXFwiIT09dHx8dGhpcy5lb2YoKSllKz10O2Vsc2UgaWYoXCJ1XCI9PT0odD10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSkpeysrdGhpcy5pbmRleDt2YXIgcj10aGlzLmluZGV4LG49dGhpcy5zY2FuSGV4RXNjYXBlKFwidVwiKTtpZihudWxsIT09bilmb3IoZSs9bjtyPHRoaXMuaW5kZXg7KytyKXRoaXMuc291cmNlW3JdO2Vsc2UgdGhpcy5pbmRleD1yLGUrPVwidVwiO3RoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oKX1lbHNlIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oKX1yZXR1cm4gZX0sZS5wcm90b3R5cGUuc2NhblJlZ0V4cD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaW5kZXgsdD10aGlzLnNjYW5SZWdFeHBCb2R5KCkscj10aGlzLnNjYW5SZWdFeHBGbGFncygpO3JldHVybnt0eXBlOjksdmFsdWU6XCJcIixwYXR0ZXJuOnQsZmxhZ3M6cixyZWdleDp0aGlzLnRlc3RSZWdFeHAodCxyKSxsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5saW5lU3RhcnQsc3RhcnQ6ZSxlbmQ6dGhpcy5pbmRleH19LGUucHJvdG90eXBlLmxleD1mdW5jdGlvbigpe2lmKHRoaXMuZW9mKCkpcmV0dXJue3R5cGU6Mix2YWx1ZTpcIlwiLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDp0aGlzLmluZGV4LGVuZDp0aGlzLmluZGV4fTt2YXIgZT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO3JldHVybiBpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydChlKT90aGlzLnNjYW5JZGVudGlmaWVyKCk6NDA9PT1lfHw0MT09PWV8fDU5PT09ZT90aGlzLnNjYW5QdW5jdHVhdG9yKCk6Mzk9PT1lfHwzND09PWU/dGhpcy5zY2FuU3RyaW5nTGl0ZXJhbCgpOjQ2PT09ZT9pLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgrMSkpP3RoaXMuc2Nhbk51bWVyaWNMaXRlcmFsKCk6dGhpcy5zY2FuUHVuY3R1YXRvcigpOmkuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KGUpP3RoaXMuc2Nhbk51bWVyaWNMaXRlcmFsKCk6OTY9PT1lfHwxMjU9PT1lJiZcIiR7XCI9PT10aGlzLmN1cmx5U3RhY2tbdGhpcy5jdXJseVN0YWNrLmxlbmd0aC0xXT90aGlzLnNjYW5UZW1wbGF0ZSgpOmU+PTU1Mjk2JiZlPDU3MzQzJiZpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydCh0aGlzLmNvZGVQb2ludEF0KHRoaXMuaW5kZXgpKT90aGlzLnNjYW5JZGVudGlmaWVyKCk6dGhpcy5zY2FuUHVuY3R1YXRvcigpfSxlfSgpO3QuU2Nhbm5lcj11fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVG9rZW5OYW1lPXt9LHQuVG9rZW5OYW1lWzFdPVwiQm9vbGVhblwiLHQuVG9rZW5OYW1lWzJdPVwiPGVuZD5cIix0LlRva2VuTmFtZVszXT1cIklkZW50aWZpZXJcIix0LlRva2VuTmFtZVs0XT1cIktleXdvcmRcIix0LlRva2VuTmFtZVs1XT1cIk51bGxcIix0LlRva2VuTmFtZVs2XT1cIk51bWVyaWNcIix0LlRva2VuTmFtZVs3XT1cIlB1bmN0dWF0b3JcIix0LlRva2VuTmFtZVs4XT1cIlN0cmluZ1wiLHQuVG9rZW5OYW1lWzldPVwiUmVndWxhckV4cHJlc3Npb25cIix0LlRva2VuTmFtZVsxMF09XCJUZW1wbGF0ZVwifSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuWEhUTUxFbnRpdGllcz17cXVvdDonXCInLGFtcDpcIiZcIixhcG9zOlwiJ1wiLGd0OlwiPlwiLG5ic3A6XCJcdTAwQTBcIixpZXhjbDpcIlx1MDBBMVwiLGNlbnQ6XCJcdTAwQTJcIixwb3VuZDpcIlx1MDBBM1wiLGN1cnJlbjpcIlx1MDBBNFwiLHllbjpcIlx1MDBBNVwiLGJydmJhcjpcIlx1MDBBNlwiLHNlY3Q6XCJcdTAwQTdcIix1bWw6XCJcdTAwQThcIixjb3B5OlwiXHUwMEE5XCIsb3JkZjpcIlx1MDBBQVwiLGxhcXVvOlwiXHUwMEFCXCIsbm90OlwiXHUwMEFDXCIsc2h5OlwiXHUwMEFEXCIscmVnOlwiXHUwMEFFXCIsbWFjcjpcIlx1MDBBRlwiLGRlZzpcIlx1MDBCMFwiLHBsdXNtbjpcIlx1MDBCMVwiLHN1cDI6XCJcdTAwQjJcIixzdXAzOlwiXHUwMEIzXCIsYWN1dGU6XCJcdTAwQjRcIixtaWNybzpcIlx1MDBCNVwiLHBhcmE6XCJcdTAwQjZcIixtaWRkb3Q6XCJcdTAwQjdcIixjZWRpbDpcIlx1MDBCOFwiLHN1cDE6XCJcdTAwQjlcIixvcmRtOlwiXHUwMEJBXCIscmFxdW86XCJcdTAwQkJcIixmcmFjMTQ6XCJcdTAwQkNcIixmcmFjMTI6XCJcdTAwQkRcIixmcmFjMzQ6XCJcdTAwQkVcIixpcXVlc3Q6XCJcdTAwQkZcIixBZ3JhdmU6XCJcdTAwQzBcIixBYWN1dGU6XCJcdTAwQzFcIixBY2lyYzpcIlx1MDBDMlwiLEF0aWxkZTpcIlx1MDBDM1wiLEF1bWw6XCJcdTAwQzRcIixBcmluZzpcIlx1MDBDNVwiLEFFbGlnOlwiXHUwMEM2XCIsQ2NlZGlsOlwiXHUwMEM3XCIsRWdyYXZlOlwiXHUwMEM4XCIsRWFjdXRlOlwiXHUwMEM5XCIsRWNpcmM6XCJcdTAwQ0FcIixFdW1sOlwiXHUwMENCXCIsSWdyYXZlOlwiXHUwMENDXCIsSWFjdXRlOlwiXHUwMENEXCIsSWNpcmM6XCJcdTAwQ0VcIixJdW1sOlwiXHUwMENGXCIsRVRIOlwiXHUwMEQwXCIsTnRpbGRlOlwiXHUwMEQxXCIsT2dyYXZlOlwiXHUwMEQyXCIsT2FjdXRlOlwiXHUwMEQzXCIsT2NpcmM6XCJcdTAwRDRcIixPdGlsZGU6XCJcdTAwRDVcIixPdW1sOlwiXHUwMEQ2XCIsdGltZXM6XCJcdTAwRDdcIixPc2xhc2g6XCJcdTAwRDhcIixVZ3JhdmU6XCJcdTAwRDlcIixVYWN1dGU6XCJcdTAwREFcIixVY2lyYzpcIlx1MDBEQlwiLFV1bWw6XCJcdTAwRENcIixZYWN1dGU6XCJcdTAwRERcIixUSE9STjpcIlx1MDBERVwiLHN6bGlnOlwiXHUwMERGXCIsYWdyYXZlOlwiXHUwMEUwXCIsYWFjdXRlOlwiXHUwMEUxXCIsYWNpcmM6XCJcdTAwRTJcIixhdGlsZGU6XCJcdTAwRTNcIixhdW1sOlwiXHUwMEU0XCIsYXJpbmc6XCJcdTAwRTVcIixhZWxpZzpcIlx1MDBFNlwiLGNjZWRpbDpcIlx1MDBFN1wiLGVncmF2ZTpcIlx1MDBFOFwiLGVhY3V0ZTpcIlx1MDBFOVwiLGVjaXJjOlwiXHUwMEVBXCIsZXVtbDpcIlx1MDBFQlwiLGlncmF2ZTpcIlx1MDBFQ1wiLGlhY3V0ZTpcIlx1MDBFRFwiLGljaXJjOlwiXHUwMEVFXCIsaXVtbDpcIlx1MDBFRlwiLGV0aDpcIlx1MDBGMFwiLG50aWxkZTpcIlx1MDBGMVwiLG9ncmF2ZTpcIlx1MDBGMlwiLG9hY3V0ZTpcIlx1MDBGM1wiLG9jaXJjOlwiXHUwMEY0XCIsb3RpbGRlOlwiXHUwMEY1XCIsb3VtbDpcIlx1MDBGNlwiLGRpdmlkZTpcIlx1MDBGN1wiLG9zbGFzaDpcIlx1MDBGOFwiLHVncmF2ZTpcIlx1MDBGOVwiLHVhY3V0ZTpcIlx1MDBGQVwiLHVjaXJjOlwiXHUwMEZCXCIsdXVtbDpcIlx1MDBGQ1wiLHlhY3V0ZTpcIlx1MDBGRFwiLHRob3JuOlwiXHUwMEZFXCIseXVtbDpcIlx1MDBGRlwiLE9FbGlnOlwiXHUwMTUyXCIsb2VsaWc6XCJcdTAxNTNcIixTY2Fyb246XCJcdTAxNjBcIixzY2Fyb246XCJcdTAxNjFcIixZdW1sOlwiXHUwMTc4XCIsZm5vZjpcIlx1MDE5MlwiLGNpcmM6XCJcdTAyQzZcIix0aWxkZTpcIlx1MDJEQ1wiLEFscGhhOlwiXHUwMzkxXCIsQmV0YTpcIlx1MDM5MlwiLEdhbW1hOlwiXHUwMzkzXCIsRGVsdGE6XCJcdTAzOTRcIixFcHNpbG9uOlwiXHUwMzk1XCIsWmV0YTpcIlx1MDM5NlwiLEV0YTpcIlx1MDM5N1wiLFRoZXRhOlwiXHUwMzk4XCIsSW90YTpcIlx1MDM5OVwiLEthcHBhOlwiXHUwMzlBXCIsTGFtYmRhOlwiXHUwMzlCXCIsTXU6XCJcdTAzOUNcIixOdTpcIlx1MDM5RFwiLFhpOlwiXHUwMzlFXCIsT21pY3JvbjpcIlx1MDM5RlwiLFBpOlwiXHUwM0EwXCIsUmhvOlwiXHUwM0ExXCIsU2lnbWE6XCJcdTAzQTNcIixUYXU6XCJcdTAzQTRcIixVcHNpbG9uOlwiXHUwM0E1XCIsUGhpOlwiXHUwM0E2XCIsQ2hpOlwiXHUwM0E3XCIsUHNpOlwiXHUwM0E4XCIsT21lZ2E6XCJcdTAzQTlcIixhbHBoYTpcIlx1MDNCMVwiLGJldGE6XCJcdTAzQjJcIixnYW1tYTpcIlx1MDNCM1wiLGRlbHRhOlwiXHUwM0I0XCIsZXBzaWxvbjpcIlx1MDNCNVwiLHpldGE6XCJcdTAzQjZcIixldGE6XCJcdTAzQjdcIix0aGV0YTpcIlx1MDNCOFwiLGlvdGE6XCJcdTAzQjlcIixrYXBwYTpcIlx1MDNCQVwiLGxhbWJkYTpcIlx1MDNCQlwiLG11OlwiXHUwM0JDXCIsbnU6XCJcdTAzQkRcIix4aTpcIlx1MDNCRVwiLG9taWNyb246XCJcdTAzQkZcIixwaTpcIlx1MDNDMFwiLHJobzpcIlx1MDNDMVwiLHNpZ21hZjpcIlx1MDNDMlwiLHNpZ21hOlwiXHUwM0MzXCIsdGF1OlwiXHUwM0M0XCIsdXBzaWxvbjpcIlx1MDNDNVwiLHBoaTpcIlx1MDNDNlwiLGNoaTpcIlx1MDNDN1wiLHBzaTpcIlx1MDNDOFwiLG9tZWdhOlwiXHUwM0M5XCIsdGhldGFzeW06XCJcdTAzRDFcIix1cHNpaDpcIlx1MDNEMlwiLHBpdjpcIlx1MDNENlwiLGVuc3A6XCJcdTIwMDJcIixlbXNwOlwiXHUyMDAzXCIsdGhpbnNwOlwiXHUyMDA5XCIsenduajpcIlx1MjAwQ1wiLHp3ajpcIlx1MjAwRFwiLGxybTpcIlx1MjAwRVwiLHJsbTpcIlx1MjAwRlwiLG5kYXNoOlwiXHUyMDEzXCIsbWRhc2g6XCJcdTIwMTRcIixsc3F1bzpcIlx1MjAxOFwiLHJzcXVvOlwiXHUyMDE5XCIsc2JxdW86XCJcdTIwMUFcIixsZHF1bzpcIlx1MjAxQ1wiLHJkcXVvOlwiXHUyMDFEXCIsYmRxdW86XCJcdTIwMUVcIixkYWdnZXI6XCJcdTIwMjBcIixEYWdnZXI6XCJcdTIwMjFcIixidWxsOlwiXHUyMDIyXCIsaGVsbGlwOlwiXHUyMDI2XCIscGVybWlsOlwiXHUyMDMwXCIscHJpbWU6XCJcdTIwMzJcIixQcmltZTpcIlx1MjAzM1wiLGxzYXF1bzpcIlx1MjAzOVwiLHJzYXF1bzpcIlx1MjAzQVwiLG9saW5lOlwiXHUyMDNFXCIsZnJhc2w6XCJcdTIwNDRcIixldXJvOlwiXHUyMEFDXCIsaW1hZ2U6XCJcdTIxMTFcIix3ZWllcnA6XCJcdTIxMThcIixyZWFsOlwiXHUyMTFDXCIsdHJhZGU6XCJcdTIxMjJcIixhbGVmc3ltOlwiXHUyMTM1XCIsbGFycjpcIlx1MjE5MFwiLHVhcnI6XCJcdTIxOTFcIixyYXJyOlwiXHUyMTkyXCIsZGFycjpcIlx1MjE5M1wiLGhhcnI6XCJcdTIxOTRcIixjcmFycjpcIlx1MjFCNVwiLGxBcnI6XCJcdTIxRDBcIix1QXJyOlwiXHUyMUQxXCIsckFycjpcIlx1MjFEMlwiLGRBcnI6XCJcdTIxRDNcIixoQXJyOlwiXHUyMUQ0XCIsZm9yYWxsOlwiXHUyMjAwXCIscGFydDpcIlx1MjIwMlwiLGV4aXN0OlwiXHUyMjAzXCIsZW1wdHk6XCJcdTIyMDVcIixuYWJsYTpcIlx1MjIwN1wiLGlzaW46XCJcdTIyMDhcIixub3RpbjpcIlx1MjIwOVwiLG5pOlwiXHUyMjBCXCIscHJvZDpcIlx1MjIwRlwiLHN1bTpcIlx1MjIxMVwiLG1pbnVzOlwiXHUyMjEyXCIsbG93YXN0OlwiXHUyMjE3XCIscmFkaWM6XCJcdTIyMUFcIixwcm9wOlwiXHUyMjFEXCIsaW5maW46XCJcdTIyMUVcIixhbmc6XCJcdTIyMjBcIixhbmQ6XCJcdTIyMjdcIixvcjpcIlx1MjIyOFwiLGNhcDpcIlx1MjIyOVwiLGN1cDpcIlx1MjIyQVwiLGludDpcIlx1MjIyQlwiLHRoZXJlNDpcIlx1MjIzNFwiLHNpbTpcIlx1MjIzQ1wiLGNvbmc6XCJcdTIyNDVcIixhc3ltcDpcIlx1MjI0OFwiLG5lOlwiXHUyMjYwXCIsZXF1aXY6XCJcdTIyNjFcIixsZTpcIlx1MjI2NFwiLGdlOlwiXHUyMjY1XCIsc3ViOlwiXHUyMjgyXCIsc3VwOlwiXHUyMjgzXCIsbnN1YjpcIlx1MjI4NFwiLHN1YmU6XCJcdTIyODZcIixzdXBlOlwiXHUyMjg3XCIsb3BsdXM6XCJcdTIyOTVcIixvdGltZXM6XCJcdTIyOTdcIixwZXJwOlwiXHUyMkE1XCIsc2RvdDpcIlx1MjJDNVwiLGxjZWlsOlwiXHUyMzA4XCIscmNlaWw6XCJcdTIzMDlcIixsZmxvb3I6XCJcdTIzMEFcIixyZmxvb3I6XCJcdTIzMEJcIixsb3o6XCJcdTI1Q0FcIixzcGFkZXM6XCJcdTI2NjBcIixjbHViczpcIlx1MjY2M1wiLGhlYXJ0czpcIlx1MjY2NVwiLGRpYW1zOlwiXHUyNjY2XCIsbGFuZzpcIlx1MjdFOFwiLHJhbmc6XCJcdTI3RTlcIn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEwKSxpPXIoMTIpLG89cigxMyksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLnZhbHVlcz1bXSx0aGlzLmN1cmx5PXRoaXMucGFyZW49LTF9cmV0dXJuIGUucHJvdG90eXBlLmJlZm9yZUZ1bmN0aW9uRXhwcmVzc2lvbj1mdW5jdGlvbihlKXtyZXR1cm5bXCIoXCIsXCJ7XCIsXCJbXCIsXCJpblwiLFwidHlwZW9mXCIsXCJpbnN0YW5jZW9mXCIsXCJuZXdcIixcInJldHVyblwiLFwiY2FzZVwiLFwiZGVsZXRlXCIsXCJ0aHJvd1wiLFwidm9pZFwiLFwiPVwiLFwiKz1cIixcIi09XCIsXCIqPVwiLFwiKio9XCIsXCIvPVwiLFwiJT1cIixcIjw8PVwiLFwiPj49XCIsXCI+Pj49XCIsXCImPVwiLFwifD1cIixcIl49XCIsXCIsXCIsXCIrXCIsXCItXCIsXCIqXCIsXCIqKlwiLFwiL1wiLFwiJVwiLFwiKytcIixcIi0tXCIsXCI8PFwiLFwiPj5cIixcIj4+PlwiLFwiJlwiLFwifFwiLFwiXlwiLFwiIVwiLFwiflwiLFwiJiZcIixcInx8XCIsXCI/XCIsXCI6XCIsXCI9PT1cIixcIj09XCIsXCI+PVwiLFwiPD1cIixcIjxcIixcIj5cIixcIiE9XCIsXCIhPT1cIl0uaW5kZXhPZihlKT49MH0sZS5wcm90b3R5cGUuaXNSZWdleFN0YXJ0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy52YWx1ZXNbdGhpcy52YWx1ZXMubGVuZ3RoLTFdLHQ9bnVsbCE9PWU7c3dpdGNoKGUpe2Nhc2VcInRoaXNcIjpjYXNlXCJdXCI6dD0hMTticmVhaztjYXNlXCIpXCI6dmFyIHI9dGhpcy52YWx1ZXNbdGhpcy5wYXJlbi0xXTt0PVwiaWZcIj09PXJ8fFwid2hpbGVcIj09PXJ8fFwiZm9yXCI9PT1yfHxcIndpdGhcIj09PXI7YnJlYWs7Y2FzZVwifVwiOmlmKHQ9ITEsXCJmdW5jdGlvblwiPT09dGhpcy52YWx1ZXNbdGhpcy5jdXJseS0zXSl0PSEhKG49dGhpcy52YWx1ZXNbdGhpcy5jdXJseS00XSkmJiF0aGlzLmJlZm9yZUZ1bmN0aW9uRXhwcmVzc2lvbihuKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXRoaXMudmFsdWVzW3RoaXMuY3VybHktNF0pe3ZhciBuO3Q9IShuPXRoaXMudmFsdWVzW3RoaXMuY3VybHktNV0pfHwhdGhpcy5iZWZvcmVGdW5jdGlvbkV4cHJlc3Npb24obil9fXJldHVybiB0fSxlLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUpezc9PT1lLnR5cGV8fDQ9PT1lLnR5cGU/KFwie1wiPT09ZS52YWx1ZT90aGlzLmN1cmx5PXRoaXMudmFsdWVzLmxlbmd0aDpcIihcIj09PWUudmFsdWUmJih0aGlzLnBhcmVuPXRoaXMudmFsdWVzLmxlbmd0aCksdGhpcy52YWx1ZXMucHVzaChlLnZhbHVlKSk6dGhpcy52YWx1ZXMucHVzaChudWxsKX0sZX0oKSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuZXJyb3JIYW5kbGVyPW5ldyBuLkVycm9ySGFuZGxlcix0aGlzLmVycm9ySGFuZGxlci50b2xlcmFudD0hIXQmJlwiYm9vbGVhblwiPT10eXBlb2YgdC50b2xlcmFudCYmdC50b2xlcmFudCx0aGlzLnNjYW5uZXI9bmV3IGkuU2Nhbm5lcihlLHRoaXMuZXJyb3JIYW5kbGVyKSx0aGlzLnNjYW5uZXIudHJhY2tDb21tZW50PSEhdCYmXCJib29sZWFuXCI9PXR5cGVvZiB0LmNvbW1lbnQmJnQuY29tbWVudCx0aGlzLnRyYWNrUmFuZ2U9ISF0JiZcImJvb2xlYW5cIj09dHlwZW9mIHQucmFuZ2UmJnQucmFuZ2UsdGhpcy50cmFja0xvYz0hIXQmJlwiYm9vbGVhblwiPT10eXBlb2YgdC5sb2MmJnQubG9jLHRoaXMuYnVmZmVyPVtdLHRoaXMucmVhZGVyPW5ldyBhfXJldHVybiBlLnByb3RvdHlwZS5lcnJvcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcnJvckhhbmRsZXIuZXJyb3JzfSxlLnByb3RvdHlwZS5nZXROZXh0VG9rZW49ZnVuY3Rpb24oKXtpZigwPT09dGhpcy5idWZmZXIubGVuZ3RoKXt2YXIgZT10aGlzLnNjYW5uZXIuc2NhbkNvbW1lbnRzKCk7aWYodGhpcy5zY2FubmVyLnRyYWNrQ29tbWVudClmb3IodmFyIHQ9MDt0PGUubGVuZ3RoOysrdCl7dmFyIHI9ZVt0XSxuPXRoaXMuc2Nhbm5lci5zb3VyY2Uuc2xpY2Uoci5zbGljZVswXSxyLnNsaWNlWzFdKSxpPXt0eXBlOnIubXVsdGlMaW5lP1wiQmxvY2tDb21tZW50XCI6XCJMaW5lQ29tbWVudFwiLHZhbHVlOm59O3RoaXMudHJhY2tSYW5nZSYmKGkucmFuZ2U9ci5yYW5nZSksdGhpcy50cmFja0xvYyYmKGkubG9jPXIubG9jKSx0aGlzLmJ1ZmZlci5wdXNoKGkpfWlmKCF0aGlzLnNjYW5uZXIuZW9mKCkpe3ZhciBhPXZvaWQgMDt0aGlzLnRyYWNrTG9jJiYoYT17c3RhcnQ6e2xpbmU6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0fSxlbmQ6e319KTt2YXIgcz1cIi9cIj09PXRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4XSYmdGhpcy5yZWFkZXIuaXNSZWdleFN0YXJ0KCk/dGhpcy5zY2FubmVyLnNjYW5SZWdFeHAoKTp0aGlzLnNjYW5uZXIubGV4KCk7dGhpcy5yZWFkZXIucHVzaChzKTt2YXIgdT17dHlwZTpvLlRva2VuTmFtZVtzLnR5cGVdLHZhbHVlOnRoaXMuc2Nhbm5lci5zb3VyY2Uuc2xpY2Uocy5zdGFydCxzLmVuZCl9O2lmKHRoaXMudHJhY2tSYW5nZSYmKHUucmFuZ2U9W3Muc3RhcnQscy5lbmRdKSx0aGlzLnRyYWNrTG9jJiYoYS5lbmQ9e2xpbmU6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0fSx1LmxvYz1hKSw5PT09cy50eXBlKXt2YXIgbD1zLnBhdHRlcm4sYz1zLmZsYWdzO3UucmVnZXg9e3BhdHRlcm46bCxmbGFnczpjfX10aGlzLmJ1ZmZlci5wdXNoKHUpfX1yZXR1cm4gdGhpcy5idWZmZXIuc2hpZnQoKX0sZX0oKTt0LlRva2VuaXplcj1zfV0pfSxlLmV4cG9ydHM9bigpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOCksaT1yKDUzKSxvPXIoNzYpLGE9cig1NCkscz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLHU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxsPXswOlwiXFxcXDBcIiw3OlwiXFxcXGFcIiw4OlwiXFxcXGJcIiw5OlwiXFxcXHRcIiwxMDpcIlxcXFxuXCIsMTE6XCJcXFxcdlwiLDEyOlwiXFxcXGZcIiwxMzpcIlxcXFxyXCIsMjc6XCJcXFxcZVwiLDM0OidcXFxcXCInLDkyOlwiXFxcXFxcXFxcIiwxMzM6XCJcXFxcTlwiLDE2MDpcIlxcXFxfXCIsODIzMjpcIlxcXFxMXCIsODIzMzpcIlxcXFxQXCJ9LGM9W1wieVwiLFwiWVwiLFwieWVzXCIsXCJZZXNcIixcIllFU1wiLFwib25cIixcIk9uXCIsXCJPTlwiLFwiblwiLFwiTlwiLFwibm9cIixcIk5vXCIsXCJOT1wiLFwib2ZmXCIsXCJPZmZcIixcIk9GRlwiXTtmdW5jdGlvbiBoKGUpe3ZhciB0LHIsbztpZih0PWUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCksZTw9MjU1KXI9XCJ4XCIsbz0yO2Vsc2UgaWYoZTw9NjU1MzUpcj1cInVcIixvPTQ7ZWxzZXtpZighKGU8PTQyOTQ5NjcyOTUpKXRocm93IG5ldyBpKFwiY29kZSBwb2ludCB3aXRoaW4gYSBzdHJpbmcgbWF5IG5vdCBiZSBncmVhdGVyIHRoYW4gMHhGRkZGRkZGRlwiKTtyPVwiVVwiLG89OH1yZXR1cm5cIlxcXFxcIityK24ucmVwZWF0KFwiMFwiLG8tdC5sZW5ndGgpK3R9ZnVuY3Rpb24gcChlKXt0aGlzLnNjaGVtYT1lLnNjaGVtYXx8byx0aGlzLmluZGVudD1NYXRoLm1heCgxLGUuaW5kZW50fHwyKSx0aGlzLm5vQXJyYXlJbmRlbnQ9ZS5ub0FycmF5SW5kZW50fHwhMSx0aGlzLnNraXBJbnZhbGlkPWUuc2tpcEludmFsaWR8fCExLHRoaXMuZmxvd0xldmVsPW4uaXNOb3RoaW5nKGUuZmxvd0xldmVsKT8tMTplLmZsb3dMZXZlbCx0aGlzLnN0eWxlTWFwPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYSxzLGw7aWYobnVsbD09PXQpcmV0dXJue307Zm9yKHI9e30saT0wLG89KG49T2JqZWN0LmtleXModCkpLmxlbmd0aDtpPG87aSs9MSlhPW5baV0scz1TdHJpbmcodFthXSksXCIhIVwiPT09YS5zbGljZSgwLDIpJiYoYT1cInRhZzp5YW1sLm9yZywyMDAyOlwiK2Euc2xpY2UoMikpLChsPWUuY29tcGlsZWRUeXBlTWFwLmZhbGxiYWNrW2FdKSYmdS5jYWxsKGwuc3R5bGVBbGlhc2VzLHMpJiYocz1sLnN0eWxlQWxpYXNlc1tzXSksclthXT1zO3JldHVybiByfSh0aGlzLnNjaGVtYSxlLnN0eWxlc3x8bnVsbCksdGhpcy5zb3J0S2V5cz1lLnNvcnRLZXlzfHwhMSx0aGlzLmxpbmVXaWR0aD1lLmxpbmVXaWR0aHx8ODAsdGhpcy5ub1JlZnM9ZS5ub1JlZnN8fCExLHRoaXMubm9Db21wYXRNb2RlPWUubm9Db21wYXRNb2RlfHwhMSx0aGlzLmNvbmRlbnNlRmxvdz1lLmNvbmRlbnNlRmxvd3x8ITEsdGhpcy5pbXBsaWNpdFR5cGVzPXRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQsdGhpcy5leHBsaWNpdFR5cGVzPXRoaXMuc2NoZW1hLmNvbXBpbGVkRXhwbGljaXQsdGhpcy50YWc9bnVsbCx0aGlzLnJlc3VsdD1cIlwiLHRoaXMuZHVwbGljYXRlcz1bXSx0aGlzLnVzZWREdXBsaWNhdGVzPW51bGx9ZnVuY3Rpb24gZihlLHQpe2Zvcih2YXIgcixpPW4ucmVwZWF0KFwiIFwiLHQpLG89MCxhPS0xLHM9XCJcIix1PWUubGVuZ3RoO288dTspLTE9PT0oYT1lLmluZGV4T2YoXCJcXG5cIixvKSk/KHI9ZS5zbGljZShvKSxvPXUpOihyPWUuc2xpY2UobyxhKzEpLG89YSsxKSxyLmxlbmd0aCYmXCJcXG5cIiE9PXImJihzKz1pKSxzKz1yO3JldHVybiBzfWZ1bmN0aW9uIGQoZSx0KXtyZXR1cm5cIlxcblwiK24ucmVwZWF0KFwiIFwiLGUuaW5kZW50KnQpfWZ1bmN0aW9uIG0oZSl7cmV0dXJuIDMyPT09ZXx8OT09PWV9ZnVuY3Rpb24geShlKXtyZXR1cm4gMzI8PWUmJmU8PTEyNnx8MTYxPD1lJiZlPD01NTI5NSYmODIzMiE9PWUmJjgyMzMhPT1lfHw1NzM0NDw9ZSYmZTw9NjU1MzMmJjY1Mjc5IT09ZXx8NjU1MzY8PWUmJmU8PTExMTQxMTF9ZnVuY3Rpb24gdihlLHQpe3JldHVybiB5KGUpJiY2NTI3OSE9PWUmJjQ0IT09ZSYmOTEhPT1lJiY5MyE9PWUmJjEyMyE9PWUmJjEyNSE9PWUmJjU4IT09ZSYmKDM1IT09ZXx8dCYmZnVuY3Rpb24oZSl7cmV0dXJuIHkoZSkmJiFtKGUpJiY2NTI3OSE9PWUmJjEzIT09ZSYmMTAhPT1lfSh0KSl9ZnVuY3Rpb24gXyhlKXtyZXR1cm4vXlxcbiogLy50ZXN0KGUpfWZ1bmN0aW9uIGcoZSx0LHIsbixpKXt2YXIgbyxhLHMsdSxsPSExLGM9ITEsaD0tMSE9PW4scD0tMSxmPXkodT1lLmNoYXJDb2RlQXQoMCkpJiY2NTI3OSE9PXUmJiFtKHUpJiY0NSE9PXUmJjYzIT09dSYmNTghPT11JiY0NCE9PXUmJjkxIT09dSYmOTMhPT11JiYxMjMhPT11JiYxMjUhPT11JiYzNSE9PXUmJjM4IT09dSYmNDIhPT11JiYzMyE9PXUmJjEyNCE9PXUmJjYxIT09dSYmNjIhPT11JiYzOSE9PXUmJjM0IT09dSYmMzchPT11JiY2NCE9PXUmJjk2IT09dSYmIW0oZS5jaGFyQ29kZUF0KGUubGVuZ3RoLTEpKTtpZih0KWZvcihvPTA7bzxlLmxlbmd0aDtvKyspe2lmKCF5KGE9ZS5jaGFyQ29kZUF0KG8pKSlyZXR1cm4gNTtzPW8+MD9lLmNoYXJDb2RlQXQoby0xKTpudWxsLGY9ZiYmdihhLHMpfWVsc2V7Zm9yKG89MDtvPGUubGVuZ3RoO28rKyl7aWYoMTA9PT0oYT1lLmNoYXJDb2RlQXQobykpKWw9ITAsaCYmKGM9Y3x8by1wLTE+biYmXCIgXCIhPT1lW3ArMV0scD1vKTtlbHNlIGlmKCF5KGEpKXJldHVybiA1O3M9bz4wP2UuY2hhckNvZGVBdChvLTEpOm51bGwsZj1mJiZ2KGEscyl9Yz1jfHxoJiZvLXAtMT5uJiZcIiBcIiE9PWVbcCsxXX1yZXR1cm4gbHx8Yz9yPjkmJl8oZSk/NTpjPzQ6MzpmJiYhaShlKT8xOjJ9ZnVuY3Rpb24gYihlLHQscixuKXtlLmR1bXA9ZnVuY3Rpb24oKXtpZigwPT09dC5sZW5ndGgpcmV0dXJuXCInJ1wiO2lmKCFlLm5vQ29tcGF0TW9kZSYmLTEhPT1jLmluZGV4T2YodCkpcmV0dXJuXCInXCIrdCtcIidcIjt2YXIgbz1lLmluZGVudCpNYXRoLm1heCgxLHIpLGE9LTE9PT1lLmxpbmVXaWR0aD8tMTpNYXRoLm1heChNYXRoLm1pbihlLmxpbmVXaWR0aCw0MCksZS5saW5lV2lkdGgtbykscz1ufHxlLmZsb3dMZXZlbD4tMSYmcj49ZS5mbG93TGV2ZWw7c3dpdGNoKGcodCxzLGUuaW5kZW50LGEsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHQpe3ZhciByLG47Zm9yKHI9MCxuPWUuaW1wbGljaXRUeXBlcy5sZW5ndGg7cjxuO3IrPTEpaWYoZS5pbXBsaWNpdFR5cGVzW3JdLnJlc29sdmUodCkpcmV0dXJuITA7cmV0dXJuITF9KGUsdCl9KSkpe2Nhc2UgMTpyZXR1cm4gdDtjYXNlIDI6cmV0dXJuXCInXCIrdC5yZXBsYWNlKC8nL2csXCInJ1wiKStcIidcIjtjYXNlIDM6cmV0dXJuXCJ8XCIreCh0LGUuaW5kZW50KSt3KGYodCxvKSk7Y2FzZSA0OnJldHVyblwiPlwiK3godCxlLmluZGVudCkrdyhmKGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpPS8oXFxuKykoW15cXG5dKikvZyxvPShzPWUuaW5kZXhPZihcIlxcblwiKSxzPS0xIT09cz9zOmUubGVuZ3RoLGkubGFzdEluZGV4PXMsRShlLnNsaWNlKDAscyksdCkpLGE9XCJcXG5cIj09PWVbMF18fFwiIFwiPT09ZVswXTt2YXIgcztmb3IoO249aS5leGVjKGUpOyl7dmFyIHU9blsxXSxsPW5bMl07cj1cIiBcIj09PWxbMF0sbys9dSsoYXx8cnx8XCJcIj09PWw/XCJcIjpcIlxcblwiKStFKGwsdCksYT1yfXJldHVybiBvfSh0LGEpLG8pKTtjYXNlIDU6cmV0dXJuJ1wiJytmdW5jdGlvbihlKXtmb3IodmFyIHQscixuLGk9XCJcIixvPTA7bzxlLmxlbmd0aDtvKyspKHQ9ZS5jaGFyQ29kZUF0KG8pKT49NTUyOTYmJnQ8PTU2MzE5JiYocj1lLmNoYXJDb2RlQXQobysxKSk+PTU2MzIwJiZyPD01NzM0Mz8oaSs9aCgxMDI0Kih0LTU1Mjk2KStyLTU2MzIwKzY1NTM2KSxvKyspOihuPWxbdF0saSs9IW4mJnkodCk/ZVtvXTpufHxoKHQpKTtyZXR1cm4gaX0odCkrJ1wiJztkZWZhdWx0OnRocm93IG5ldyBpKFwiaW1wb3NzaWJsZSBlcnJvcjogaW52YWxpZCBzY2FsYXIgc3R5bGVcIil9fSgpfWZ1bmN0aW9uIHgoZSx0KXt2YXIgcj1fKGUpP1N0cmluZyh0KTpcIlwiLG49XCJcXG5cIj09PWVbZS5sZW5ndGgtMV07cmV0dXJuIHIrKG4mJihcIlxcblwiPT09ZVtlLmxlbmd0aC0yXXx8XCJcXG5cIj09PWUpP1wiK1wiOm4/XCJcIjpcIi1cIikrXCJcXG5cIn1mdW5jdGlvbiB3KGUpe3JldHVyblwiXFxuXCI9PT1lW2UubGVuZ3RoLTFdP2Uuc2xpY2UoMCwtMSk6ZX1mdW5jdGlvbiBFKGUsdCl7aWYoXCJcIj09PWV8fFwiIFwiPT09ZVswXSlyZXR1cm4gZTtmb3IodmFyIHIsbixpPS8gW14gXS9nLG89MCxhPTAscz0wLHU9XCJcIjtyPWkuZXhlYyhlKTspKHM9ci5pbmRleCktbz50JiYobj1hPm8/YTpzLHUrPVwiXFxuXCIrZS5zbGljZShvLG4pLG89bisxKSxhPXM7cmV0dXJuIHUrPVwiXFxuXCIsZS5sZW5ndGgtbz50JiZhPm8/dSs9ZS5zbGljZShvLGEpK1wiXFxuXCIrZS5zbGljZShhKzEpOnUrPWUuc2xpY2UobyksdS5zbGljZSgxKX1mdW5jdGlvbiBEKGUsdCxyKXt2YXIgbixvLGEsbCxjLGg7Zm9yKGE9MCxsPShvPXI/ZS5leHBsaWNpdFR5cGVzOmUuaW1wbGljaXRUeXBlcykubGVuZ3RoO2E8bDthKz0xKWlmKCgoYz1vW2FdKS5pbnN0YW5jZU9mfHxjLnByZWRpY2F0ZSkmJighYy5pbnN0YW5jZU9mfHxcIm9iamVjdFwiPT10eXBlb2YgdCYmdCBpbnN0YW5jZW9mIGMuaW5zdGFuY2VPZikmJighYy5wcmVkaWNhdGV8fGMucHJlZGljYXRlKHQpKSl7aWYoZS50YWc9cj9jLnRhZzpcIj9cIixjLnJlcHJlc2VudCl7aWYoaD1lLnN0eWxlTWFwW2MudGFnXXx8Yy5kZWZhdWx0U3R5bGUsXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09cy5jYWxsKGMucmVwcmVzZW50KSluPWMucmVwcmVzZW50KHQsaCk7ZWxzZXtpZighdS5jYWxsKGMucmVwcmVzZW50LGgpKXRocm93IG5ldyBpKFwiITxcIitjLnRhZysnPiB0YWcgcmVzb2x2ZXIgYWNjZXB0cyBub3QgXCInK2grJ1wiIHN0eWxlJyk7bj1jLnJlcHJlc2VudFtoXSh0LGgpfWUuZHVtcD1ufXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIFMoZSx0LHIsbixvLGEpe2UudGFnPW51bGwsZS5kdW1wPXIsRChlLHIsITEpfHxEKGUsciwhMCk7dmFyIHU9cy5jYWxsKGUuZHVtcCk7biYmKG49ZS5mbG93TGV2ZWw8MHx8ZS5mbG93TGV2ZWw+dCk7dmFyIGwsYyxoPVwiW29iamVjdCBPYmplY3RdXCI9PT11fHxcIltvYmplY3QgQXJyYXldXCI9PT11O2lmKGgmJihjPS0xIT09KGw9ZS5kdXBsaWNhdGVzLmluZGV4T2YocikpKSwobnVsbCE9PWUudGFnJiZcIj9cIiE9PWUudGFnfHxjfHwyIT09ZS5pbmRlbnQmJnQ+MCkmJihvPSExKSxjJiZlLnVzZWREdXBsaWNhdGVzW2xdKWUuZHVtcD1cIipyZWZfXCIrbDtlbHNle2lmKGgmJmMmJiFlLnVzZWREdXBsaWNhdGVzW2xdJiYoZS51c2VkRHVwbGljYXRlc1tsXT0hMCksXCJbb2JqZWN0IE9iamVjdF1cIj09PXUpbiYmMCE9PU9iamVjdC5rZXlzKGUuZHVtcCkubGVuZ3RoPyghZnVuY3Rpb24oZSx0LHIsbil7dmFyIG8sYSxzLHUsbCxjLGg9XCJcIixwPWUudGFnLGY9T2JqZWN0LmtleXMocik7aWYoITA9PT1lLnNvcnRLZXlzKWYuc29ydCgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5zb3J0S2V5cylmLnNvcnQoZS5zb3J0S2V5cyk7ZWxzZSBpZihlLnNvcnRLZXlzKXRocm93IG5ldyBpKFwic29ydEtleXMgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBmdW5jdGlvblwiKTtmb3Iobz0wLGE9Zi5sZW5ndGg7bzxhO28rPTEpYz1cIlwiLG4mJjA9PT1vfHwoYys9ZChlLHQpKSx1PXJbcz1mW29dXSxTKGUsdCsxLHMsITAsITAsITApJiYoKGw9bnVsbCE9PWUudGFnJiZcIj9cIiE9PWUudGFnfHxlLmR1bXAmJmUuZHVtcC5sZW5ndGg+MTAyNCkmJihlLmR1bXAmJjEwPT09ZS5kdW1wLmNoYXJDb2RlQXQoMCk/Yys9XCI/XCI6Yys9XCI/IFwiKSxjKz1lLmR1bXAsbCYmKGMrPWQoZSx0KSksUyhlLHQrMSx1LCEwLGwpJiYoZS5kdW1wJiYxMD09PWUuZHVtcC5jaGFyQ29kZUF0KDApP2MrPVwiOlwiOmMrPVwiOiBcIixoKz1jKz1lLmR1bXApKTtlLnRhZz1wLGUuZHVtcD1ofHxcInt9XCJ9KGUsdCxlLmR1bXAsbyksYyYmKGUuZHVtcD1cIiZyZWZfXCIrbCtlLmR1bXApKTooIWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG8sYSxzLHU9XCJcIixsPWUudGFnLGM9T2JqZWN0LmtleXMocik7Zm9yKG49MCxpPWMubGVuZ3RoO248aTtuKz0xKXM9XCJcIiwwIT09biYmKHMrPVwiLCBcIiksZS5jb25kZW5zZUZsb3cmJihzKz0nXCInKSxhPXJbbz1jW25dXSxTKGUsdCxvLCExLCExKSYmKGUuZHVtcC5sZW5ndGg+MTAyNCYmKHMrPVwiPyBcIikscys9ZS5kdW1wKyhlLmNvbmRlbnNlRmxvdz8nXCInOlwiXCIpK1wiOlwiKyhlLmNvbmRlbnNlRmxvdz9cIlwiOlwiIFwiKSxTKGUsdCxhLCExLCExKSYmKHUrPXMrPWUuZHVtcCkpO2UudGFnPWwsZS5kdW1wPVwie1wiK3UrXCJ9XCJ9KGUsdCxlLmR1bXApLGMmJihlLmR1bXA9XCImcmVmX1wiK2wrXCIgXCIrZS5kdW1wKSk7ZWxzZSBpZihcIltvYmplY3QgQXJyYXldXCI9PT11KXt2YXIgcD1lLm5vQXJyYXlJbmRlbnQmJnQ+MD90LTE6dDtuJiYwIT09ZS5kdW1wLmxlbmd0aD8oIWZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpLG8sYT1cIlwiLHM9ZS50YWc7Zm9yKGk9MCxvPXIubGVuZ3RoO2k8bztpKz0xKVMoZSx0KzEscltpXSwhMCwhMCkmJihuJiYwPT09aXx8KGErPWQoZSx0KSksZS5kdW1wJiYxMD09PWUuZHVtcC5jaGFyQ29kZUF0KDApP2ErPVwiLVwiOmErPVwiLSBcIixhKz1lLmR1bXApO2UudGFnPXMsZS5kdW1wPWF8fFwiW11cIn0oZSxwLGUuZHVtcCxvKSxjJiYoZS5kdW1wPVwiJnJlZl9cIitsK2UuZHVtcCkpOighZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbz1cIlwiLGE9ZS50YWc7Zm9yKG49MCxpPXIubGVuZ3RoO248aTtuKz0xKVMoZSx0LHJbbl0sITEsITEpJiYoMCE9PW4mJihvKz1cIixcIisoZS5jb25kZW5zZUZsb3c/XCJcIjpcIiBcIikpLG8rPWUuZHVtcCk7ZS50YWc9YSxlLmR1bXA9XCJbXCIrbytcIl1cIn0oZSxwLGUuZHVtcCksYyYmKGUuZHVtcD1cIiZyZWZfXCIrbCtcIiBcIitlLmR1bXApKX1lbHNle2lmKFwiW29iamVjdCBTdHJpbmddXCIhPT11KXtpZihlLnNraXBJbnZhbGlkKXJldHVybiExO3Rocm93IG5ldyBpKFwidW5hY2NlcHRhYmxlIGtpbmQgb2YgYW4gb2JqZWN0IHRvIGR1bXAgXCIrdSl9XCI/XCIhPT1lLnRhZyYmYihlLGUuZHVtcCx0LGEpfW51bGwhPT1lLnRhZyYmXCI/XCIhPT1lLnRhZyYmKGUuZHVtcD1cIiE8XCIrZS50YWcrXCI+IFwiK2UuZHVtcCl9cmV0dXJuITB9ZnVuY3Rpb24gQyhlLHQpe3ZhciByLG4saT1bXSxvPVtdO2ZvcihmdW5jdGlvbiBlKHQscixuKXt2YXIgaSxvLGE7aWYobnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0KWlmKC0xIT09KG89ci5pbmRleE9mKHQpKSktMT09PW4uaW5kZXhPZihvKSYmbi5wdXNoKG8pO2Vsc2UgaWYoci5wdXNoKHQpLEFycmF5LmlzQXJyYXkodCkpZm9yKG89MCxhPXQubGVuZ3RoO288YTtvKz0xKWUodFtvXSxyLG4pO2Vsc2UgZm9yKGk9T2JqZWN0LmtleXModCksbz0wLGE9aS5sZW5ndGg7bzxhO28rPTEpZSh0W2lbb11dLHIsbil9KGUsaSxvKSxyPTAsbj1vLmxlbmd0aDtyPG47cis9MSl0LmR1cGxpY2F0ZXMucHVzaChpW29bcl1dKTt0LnVzZWREdXBsaWNhdGVzPW5ldyBBcnJheShuKX1mdW5jdGlvbiBBKGUsdCl7dmFyIHI9bmV3IHAodD10fHx7fSk7cmV0dXJuIHIubm9SZWZzfHxDKGUsciksUyhyLDAsZSwhMCwhMCk/ci5kdW1wK1wiXFxuXCI6XCJcIn1lLmV4cG9ydHMuZHVtcD1BLGUuZXhwb3J0cy5zYWZlRHVtcD1mdW5jdGlvbihlLHQpe3JldHVybiBBKGUsbi5leHRlbmQoe3NjaGVtYTphfSx0KSl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigzMSkscigzMikscigzMykscig2NCkscigxOSkscig2NSkscigyMCkscig2OCkscig5MikscigxNDQpLHIoMjIpLHIoOTQpLHIoMjMpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pLG89dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0sYT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9cig5MSksdT1yKDEpLGw9cigxODMpLGM9cigwKSxoPXIoNykscD1yKDk1KSxmPXIoNjkpLGQ9cigzKSxtPXIoMzA1KSx5PXIoMzA2KSx2PXIoMzA3KSxfPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLl9oYXNEZWNsYXJhdGlvbj0hMSxuLl9kb2NUeXBlTmFtZT1cIlwiLG4uX2hhc0RvY3VtZW50RWxlbWVudD0hMSxuLl9jdXJyZW50RWxlbWVudFNlcmlhbGl6ZWQ9ITEsbi5fb3BlblRhZ3M9W10sbi5fZW5kZWQ9ITEsbi5fZnJhZ21lbnQ9cixuLl9vcHRpb25zPXUuYXBwbHlEZWZhdWx0cyh0fHx7fSxzLkRlZmF1bHRYTUxCdWlsZGVyQ0JPcHRpb25zKSxuLl9idWlsZGVyT3B0aW9ucz17ZGVmYXVsdE5hbWVzcGFjZTpuLl9vcHRpb25zLmRlZmF1bHROYW1lc3BhY2UsbmFtZXNwYWNlQWxpYXM6bi5fb3B0aW9ucy5uYW1lc3BhY2VBbGlhc30sXCJqc29uXCI9PT1uLl9vcHRpb25zLmZvcm1hdD9uLl93cml0ZXI9bmV3IHkuSlNPTkNCV3JpdGVyKG4uX29wdGlvbnMpOlwieWFtbFwiPT09bi5fb3B0aW9ucy5mb3JtYXQ/bi5fd3JpdGVyPW5ldyB2LllBTUxDQldyaXRlcihuLl9vcHRpb25zKTpuLl93cml0ZXI9bmV3IG0uWE1MQ0JXcml0ZXIobi5fb3B0aW9ucyksdm9pZCAwIT09bi5fb3B0aW9ucy5kYXRhJiZuLm9uKFwiZGF0YVwiLG4uX29wdGlvbnMuZGF0YSksdm9pZCAwIT09bi5fb3B0aW9ucy5lbmQmJm4ub24oXCJlbmRcIixuLl9vcHRpb25zLmVuZCksdm9pZCAwIT09bi5fb3B0aW9ucy5lcnJvciYmbi5vbihcImVycm9yXCIsbi5fb3B0aW9ucy5lcnJvciksbi5fcHJlZml4TWFwPW5ldyBwLk5hbWVzcGFjZVByZWZpeE1hcCxuLl9wcmVmaXhNYXAuc2V0KFwieG1sXCIsaC5uYW1lc3BhY2UuWE1MKSxuLl9wcmVmaXhJbmRleD17dmFsdWU6MX0sbi5fcHVzaChuLl93cml0ZXIuZnJvbnRNYXR0ZXIoKSksbn1yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLmVsZT1mdW5jdGlvbihlLHQscil7dmFyIG4saTtpZih1LmlzT2JqZWN0KGUpfHx1LmlzU3RyaW5nKGUpJiYoL15cXHMqPC8udGVzdChlKXx8L15cXHMqW1xce1xcW10vLnRlc3QoZSl8fC9eKFxccyp8KCMuKil8KCUuKikpKi0tLS8udGVzdChlKSkpe3ZhciBhPWwuZnJhZ21lbnQoKS5zZXQodGhpcy5fb3B0aW9ucyk7dHJ5e2EuZWxlKGUpfWNhdGNoKGUpe3JldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLGUpLHRoaXN9dHJ5e2Zvcih2YXIgcz1vKGEubm9kZS5jaGlsZE5vZGVzKSxjPXMubmV4dCgpOyFjLmRvbmU7Yz1zLm5leHQoKSl7dmFyIGg9Yy52YWx1ZTt0aGlzLl9mcm9tTm9kZShoKX19Y2F0Y2goZSl7bj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YyYmIWMuZG9uZSYmKGk9cy5yZXR1cm4pJiZpLmNhbGwocyl9ZmluYWxseXtpZihuKXRocm93IG4uZXJyb3J9fXJldHVybiB0aGlzfWlmKHRoaXMuX3NlcmlhbGl6ZU9wZW5UYWcoITApLCF0aGlzLl9mcmFnbWVudCYmdGhpcy5faGFzRG9jdW1lbnRFbGVtZW50JiYwPT09dGhpcy5fd3JpdGVyLmxldmVsKXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkRvY3VtZW50IGNhbm5vdCBoYXZlIG11bHRpcGxlIGRvY3VtZW50IGVsZW1lbnQgbm9kZXMuXCIpKSx0aGlzO3RyeXt0aGlzLl9jdXJyZW50RWxlbWVudD1sLmZyYWdtZW50KHRoaXMuX2J1aWxkZXJPcHRpb25zKS5lbGUoZSx0LHIpfWNhdGNoKGUpe3JldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLGUpLHRoaXN9cmV0dXJuIHRoaXMuX2ZyYWdtZW50fHx0aGlzLl9oYXNEb2N1bWVudEVsZW1lbnR8fFwiXCI9PT10aGlzLl9kb2NUeXBlTmFtZXx8dGhpcy5fY3VycmVudEVsZW1lbnQubm9kZS5fcXVhbGlmaWVkTmFtZT09PXRoaXMuX2RvY1R5cGVOYW1lPyh0aGlzLl9jdXJyZW50RWxlbWVudFNlcmlhbGl6ZWQ9ITEsdGhpcy5fZnJhZ21lbnR8fCh0aGlzLl9oYXNEb2N1bWVudEVsZW1lbnQ9ITApLHRoaXMpOih0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkRvY3VtZW50IGVsZW1lbnQgbmFtZSBkb2VzIG5vdCBtYXRjaCBEb2NUeXBlIGRlY2xhcmF0aW9uIG5hbWUuXCIpKSx0aGlzKX0sdC5wcm90b3R5cGUuYXR0PWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10aGlzLl9jdXJyZW50RWxlbWVudClyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGFuIGF0dHJpYnV0ZSBub2RlIGFzIGNoaWxkIG9mIGEgZG9jdW1lbnQgbm9kZS5cIikpLHRoaXM7dHJ5e3RoaXMuX2N1cnJlbnRFbGVtZW50LmF0dChlLHQscil9Y2F0Y2goZSl7cmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpc31yZXR1cm4gdGhpc30sdC5wcm90b3R5cGUuY29tPWZ1bmN0aW9uKGUpe3ZhciB0O3RoaXMuX3NlcmlhbGl6ZU9wZW5UYWcoITApO3RyeXt0PWwuZnJhZ21lbnQodGhpcy5fYnVpbGRlck9wdGlvbnMpLmNvbShlKS5maXJzdCgpLm5vZGV9Y2F0Y2goZSl7cmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpc31yZXR1cm4hdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkfHxjLnhtbF9pc0xlZ2FsQ2hhcih0LmRhdGEpJiYtMT09PXQuZGF0YS5pbmRleE9mKFwiLS1cIikmJiF0LmRhdGEuZW5kc1dpdGgoXCItXCIpPyh0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5jb21tZW50KHQuZGF0YSkpLHRoaXMpOih0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkNvbW1lbnQgZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIikpLHRoaXMpfSx0LnByb3RvdHlwZS50eHQ9ZnVuY3Rpb24oZSl7aWYoIXRoaXMuX2ZyYWdtZW50JiZ2b2lkIDA9PT10aGlzLl9jdXJyZW50RWxlbWVudClyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGEgdGV4dCBub2RlIGFzIGNoaWxkIG9mIGEgZG9jdW1lbnQgbm9kZS5cIikpLHRoaXM7dmFyIHQ7dGhpcy5fc2VyaWFsaXplT3BlblRhZyghMCk7dHJ5e3Q9bC5mcmFnbWVudCh0aGlzLl9idWlsZGVyT3B0aW9ucykudHh0KGUpLmZpcnN0KCkubm9kZX1jYXRjaChlKXtyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixlKSx0aGlzfWlmKHRoaXMuX29wdGlvbnMud2VsbEZvcm1lZCYmIWMueG1sX2lzTGVnYWxDaGFyKHQuZGF0YSkpcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiVGV4dCBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSksdGhpczt2YXIgcj10LmRhdGEucmVwbGFjZSgvKD8hJihsdHxndHxhbXB8YXBvc3xxdW90KTspJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csXCImZ3Q7XCIpO3JldHVybiB0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci50ZXh0KHIpKSx0aGlzfSx0LnByb3RvdHlwZS5pbnM9ZnVuY3Rpb24oZSx0KXt2YXIgcjt2b2lkIDA9PT10JiYodD1cIlwiKSx0aGlzLl9zZXJpYWxpemVPcGVuVGFnKCEwKTt0cnl7cj1sLmZyYWdtZW50KHRoaXMuX2J1aWxkZXJPcHRpb25zKS5pbnMoZSx0KS5maXJzdCgpLm5vZGV9Y2F0Y2goZSl7cmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpc31yZXR1cm4gdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkJiYoLTEhPT1yLnRhcmdldC5pbmRleE9mKFwiOlwiKXx8L154bWwkL2kudGVzdChyLnRhcmdldCkpPyh0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gdGFyZ2V0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSksdGhpcyk6dGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkJiYhYy54bWxfaXNMZWdhbENoYXIoci5kYXRhKT8odGhpcy5lbWl0KFwiZXJyb3JcIixFcnJvcihcIlByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIikpLHRoaXMpOih0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5pbnN0cnVjdGlvbihyLnRhcmdldCxyLmRhdGEpKSx0aGlzKX0sdC5wcm90b3R5cGUuZGF0PWZ1bmN0aW9uKGUpe3ZhciB0O3RoaXMuX3NlcmlhbGl6ZU9wZW5UYWcoITApO3RyeXt0PWwuZnJhZ21lbnQodGhpcy5fYnVpbGRlck9wdGlvbnMpLmRhdChlKS5maXJzdCgpLm5vZGV9Y2F0Y2goZSl7cmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpc31yZXR1cm4gdGhpcy5fcHVzaCh0aGlzLl93cml0ZXIuY2RhdGEodC5kYXRhKSksdGhpc30sdC5wcm90b3R5cGUuZGVjPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT17dmVyc2lvbjpcIjEuMFwifSksdGhpcy5fZnJhZ21lbnQ/KHRoaXMuZW1pdChcImVycm9yXCIsRXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGFuIFhNTCBkZWNsYXJhdGlvbiBpbnRvIGEgZG9jdW1lbnQgZnJhZ21lbnQuXCIpKSx0aGlzKTp0aGlzLl9oYXNEZWNsYXJhdGlvbj8odGhpcy5lbWl0KFwiZXJyb3JcIixFcnJvcihcIlhNTCBkZWNsYXJhdGlvbiBpcyBhbHJlYWR5IGluc2VydGVkLlwiKSksdGhpcyk6KHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmRlY2xhcmF0aW9uKGUudmVyc2lvbnx8XCIxLjBcIixlLmVuY29kaW5nLGUuc3RhbmRhbG9uZSkpLHRoaXMuX2hhc0RlY2xhcmF0aW9uPSEwLHRoaXMpfSx0LnByb3RvdHlwZS5kdGQ9ZnVuY3Rpb24oZSl7aWYodGhpcy5fZnJhZ21lbnQpcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsRXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGEgRG9jVHlwZSBkZWNsYXJhdGlvbiBpbnRvIGEgZG9jdW1lbnQgZnJhZ21lbnQuXCIpKSx0aGlzO2lmKFwiXCIhPT10aGlzLl9kb2NUeXBlTmFtZSlyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJEb2NUeXBlIGRlY2xhcmF0aW9uIGlzIGFscmVhZHkgaW5zZXJ0ZWQuXCIpKSx0aGlzO2lmKHRoaXMuX2hhc0RvY3VtZW50RWxlbWVudClyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJDYW5ub3QgaW5zZXJ0IERvY1R5cGUgZGVjbGFyYXRpb24gYWZ0ZXIgZG9jdW1lbnQgZWxlbWVudC5cIikpLHRoaXM7dmFyIHQ7dHJ5e3Q9bC5jcmVhdGUoKS5kdGQoZSkuZmlyc3QoKS5ub2RlfWNhdGNoKGUpe3JldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLGUpLHRoaXN9cmV0dXJuIHRoaXMuX29wdGlvbnMud2VsbEZvcm1lZCYmIWMueG1sX2lzUHViaWRDaGFyKHQucHVibGljSWQpPyh0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkRvY1R5cGUgcHVibGljIGlkZW50aWZpZXIgZG9lcyBub3QgbWF0Y2ggUHViaWRDaGFyIGNvbnN0cnVjdCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSksdGhpcyk6dGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkJiYoIWMueG1sX2lzTGVnYWxDaGFyKHQuc3lzdGVtSWQpfHwtMSE9PXQuc3lzdGVtSWQuaW5kZXhPZignXCInKSYmLTEhPT10LnN5c3RlbUlkLmluZGV4T2YoXCInXCIpKT8odGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJEb2NUeXBlIHN5c3RlbSBpZGVudGlmaWVyIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSksdGhpcyk6KHRoaXMuX2RvY1R5cGVOYW1lPWUubmFtZSx0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5kb2NUeXBlKGUubmFtZSx0LnB1YmxpY0lkLHQuc3lzdGVtSWQpKSx0aGlzKX0sdC5wcm90b3R5cGUuaW1wb3J0PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1sLmZyYWdtZW50KCkuc2V0KHRoaXMuX29wdGlvbnMpO3RyeXtuLmltcG9ydChlKX1jYXRjaChlKXtyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixlKSx0aGlzfXRyeXtmb3IodmFyIGk9byhuLm5vZGUuY2hpbGROb2RlcyksYT1pLm5leHQoKTshYS5kb25lO2E9aS5uZXh0KCkpe3ZhciBzPWEudmFsdWU7dGhpcy5fZnJvbU5vZGUocyl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihyPWkucmV0dXJuKSYmci5jYWxsKGkpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gdGhpc30sdC5wcm90b3R5cGUudXA9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2VyaWFsaXplT3BlblRhZyghMSksdGhpcy5fc2VyaWFsaXplQ2xvc2VUYWcoKSx0aGlzfSx0LnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oKXtmb3IodGhpcy5fc2VyaWFsaXplT3BlblRhZyghMSk7dGhpcy5fb3BlblRhZ3MubGVuZ3RoPjA7KXRoaXMuX3NlcmlhbGl6ZUNsb3NlVGFnKCk7cmV0dXJuIHRoaXMuX3B1c2gobnVsbCksdGhpc30sdC5wcm90b3R5cGUuX3NlcmlhbGl6ZU9wZW5UYWc9ZnVuY3Rpb24oZSl7aWYoIXRoaXMuX2N1cnJlbnRFbGVtZW50U2VyaWFsaXplZCYmdm9pZCAwIT09dGhpcy5fY3VycmVudEVsZW1lbnQpe3ZhciByPXRoaXMuX2N1cnJlbnRFbGVtZW50Lm5vZGU7aWYoIXRoaXMuX29wdGlvbnMud2VsbEZvcm1lZHx8LTE9PT1yLmxvY2FsTmFtZS5pbmRleE9mKFwiOlwiKSYmYy54bWxfaXNOYW1lKHIubG9jYWxOYW1lKSl7dmFyIG49XCJcIixpPSExLG89dGhpcy5fcHJlZml4TWFwLmNvcHkoKSxhPXt9LHM9dGhpcy5fcmVjb3JkTmFtZXNwYWNlSW5mb3JtYXRpb24ocixvLGEpLHU9MD09PXRoaXMuX29wZW5UYWdzLmxlbmd0aD9udWxsOnRoaXMuX29wZW5UYWdzW3RoaXMuX29wZW5UYWdzLmxlbmd0aC0xXVsxXSxsPXIubmFtZXNwYWNlVVJJO2lmKG51bGw9PT1sJiYobD11KSx1PT09bCludWxsIT09cyYmKGk9ITApLG49bD09PWgubmFtZXNwYWNlLlhNTD9cInhtbDpcIityLmxvY2FsTmFtZTpyLmxvY2FsTmFtZSx0aGlzLl93cml0ZXIuYmVnaW5FbGVtZW50KG4pLHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLm9wZW5UYWdCZWdpbihuKSk7ZWxzZXt2YXIgcD1yLnByZWZpeCxmPW51bGw7aWYobnVsbD09PXAmJmw9PT1zfHwoZj1vLmdldChwLGwpKSxcInhtbG5zXCI9PT1wKXtpZih0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQpcmV0dXJuIHZvaWQgdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJBbiBlbGVtZW50IGNhbm5vdCBoYXZlIHRoZSAneG1sbnMnIHByZWZpeCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSk7Zj1wfW51bGwhPT1mPyhuPWYrXCI6XCIrci5sb2NhbE5hbWUsbnVsbCE9PXMmJnMhPT1oLm5hbWVzcGFjZS5YTUwmJih1PXN8fG51bGwpLHRoaXMuX3dyaXRlci5iZWdpbkVsZW1lbnQobiksdGhpcy5fcHVzaCh0aGlzLl93cml0ZXIub3BlblRhZ0JlZ2luKG4pKSk6bnVsbCE9PXA/KHAgaW4gYSYmKHA9dGhpcy5fZ2VuZXJhdGVQcmVmaXgobCxvLHRoaXMuX3ByZWZpeEluZGV4KSksby5zZXQocCxsKSxuKz1wK1wiOlwiK3IubG9jYWxOYW1lLHRoaXMuX3dyaXRlci5iZWdpbkVsZW1lbnQobiksdGhpcy5fcHVzaCh0aGlzLl93cml0ZXIub3BlblRhZ0JlZ2luKG4pKSx0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5hdHRyaWJ1dGUoXCJ4bWxuczpcIitwLHRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKGwsdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkKSkpLG51bGwhPT1zJiYodT1zfHxudWxsKSk6bnVsbD09PXN8fG51bGwhPT1zJiZzIT09bD8oaT0hMCxuKz1yLmxvY2FsTmFtZSx1PWwsdGhpcy5fd3JpdGVyLmJlZ2luRWxlbWVudChuKSx0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5vcGVuVGFnQmVnaW4obikpLHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmF0dHJpYnV0ZShcInhtbG5zXCIsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUobCx0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQpKSkpOihuKz1yLmxvY2FsTmFtZSx1PWwsdGhpcy5fd3JpdGVyLmJlZ2luRWxlbWVudChuKSx0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5vcGVuVGFnQmVnaW4obikpKX10aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVzKHIsbyx0aGlzLl9wcmVmaXhJbmRleCxhLGksdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkKTt2YXIgZD1sPT09aC5uYW1lc3BhY2UuSFRNTDtkJiYhZSYmdC5fVm9pZEVsZW1lbnROYW1lcy5oYXMoci5sb2NhbE5hbWUpPyh0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5vcGVuVGFnRW5kKG4sITAsITApKSx0aGlzLl93cml0ZXIuZW5kRWxlbWVudChuKSk6ZHx8ZT90aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5vcGVuVGFnRW5kKG4sITEsITEpKToodGhpcy5fcHVzaCh0aGlzLl93cml0ZXIub3BlblRhZ0VuZChuLCEwLCExKSksdGhpcy5fd3JpdGVyLmVuZEVsZW1lbnQobikpLHRoaXMuX2N1cnJlbnRFbGVtZW50U2VyaWFsaXplZD0hMCx0aGlzLl9vcGVuVGFncy5wdXNoKFtuLHUsdGhpcy5fcHJlZml4TWFwLGVdKSx0aGlzLl9pc1ByZWZpeE1hcE1vZGlmaWVkKHRoaXMuX3ByZWZpeE1hcCxvKSYmKHRoaXMuX3ByZWZpeE1hcD1vKSx0aGlzLl93cml0ZXIubGV2ZWwrK31lbHNlIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiTm9kZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSl9fSx0LnByb3RvdHlwZS5fc2VyaWFsaXplQ2xvc2VUYWc9ZnVuY3Rpb24oKXt0aGlzLl93cml0ZXIubGV2ZWwtLTt2YXIgZT10aGlzLl9vcGVuVGFncy5wb3AoKTtpZih2b2lkIDAhPT1lKXt2YXIgdD1hKGUsNCkscj10WzBdLG49KHRbMV0sdFsyXSksaT10WzNdO3RoaXMuX3ByZWZpeE1hcD1uLGkmJih0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5jbG9zZVRhZyhyKSksdGhpcy5fd3JpdGVyLmVuZEVsZW1lbnQocikpfWVsc2UgdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJMYXN0IGVsZW1lbnQgaXMgdW5kZWZpbmVkLlwiKSl9LHQucHJvdG90eXBlLl9wdXNoPWZ1bmN0aW9uKGUpe251bGw9PT1lPyh0aGlzLl9lbmRlZD0hMCx0aGlzLmVtaXQoXCJlbmRcIikpOnRoaXMuX2VuZGVkP3RoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiQ2Fubm90IHB1c2ggdG8gZW5kZWQgc3RyZWFtLlwiKSk6MCE9PWUubGVuZ3RoJiYodGhpcy5fd3JpdGVyLmhhc0RhdGE9ITAsdGhpcy5lbWl0KFwiZGF0YVwiLGUsdGhpcy5fd3JpdGVyLmxldmVsKSl9LHQucHJvdG90eXBlLl9mcm9tTm9kZT1mdW5jdGlvbihlKXt2YXIgdCxyLG4saTtpZihkLkd1YXJkLmlzRWxlbWVudE5vZGUoZSkpe3ZhciBhPWUucHJlZml4P2UucHJlZml4K1wiOlwiK2UubG9jYWxOYW1lOmUubG9jYWxOYW1lO251bGwhPT1lLm5hbWVzcGFjZVVSST90aGlzLmVsZShlLm5hbWVzcGFjZVVSSSxhKTp0aGlzLmVsZShhKTt0cnl7Zm9yKHZhciBzPW8oZS5hdHRyaWJ1dGVzKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dmFyIGw9dS52YWx1ZSxjPWwucHJlZml4P2wucHJlZml4K1wiOlwiK2wubG9jYWxOYW1lOmwubG9jYWxOYW1lO251bGwhPT1sLm5hbWVzcGFjZVVSST90aGlzLmF0dChsLm5hbWVzcGFjZVVSSSxjLGwudmFsdWUpOnRoaXMuYXR0KGMsbC52YWx1ZSl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihyPXMucmV0dXJuKSYmci5jYWxsKHMpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX10cnl7Zm9yKHZhciBoPW8oZS5jaGlsZE5vZGVzKSxwPWgubmV4dCgpOyFwLmRvbmU7cD1oLm5leHQoKSl7dmFyIGY9cC52YWx1ZTt0aGlzLl9mcm9tTm9kZShmKX19Y2F0Y2goZSl7bj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cCYmIXAuZG9uZSYmKGk9aC5yZXR1cm4pJiZpLmNhbGwoaCl9ZmluYWxseXtpZihuKXRocm93IG4uZXJyb3J9fXRoaXMudXAoKX1lbHNlIGQuR3VhcmQuaXNFeGNsdXNpdmVUZXh0Tm9kZShlKSYmZS5kYXRhP3RoaXMudHh0KGUuZGF0YSk6ZC5HdWFyZC5pc0NvbW1lbnROb2RlKGUpP3RoaXMuY29tKGUuZGF0YSk6ZC5HdWFyZC5pc0NEQVRBU2VjdGlvbk5vZGUoZSk/dGhpcy5kYXQoZS5kYXRhKTpkLkd1YXJkLmlzUHJvY2Vzc2luZ0luc3RydWN0aW9uTm9kZShlKSYmdGhpcy5pbnMoZS50YXJnZXQsZS5kYXRhKX0sdC5wcm90b3R5cGUuX3NlcmlhbGl6ZUF0dHJpYnV0ZXM9ZnVuY3Rpb24oZSx0LHIsbixpLGEpe3ZhciBzLHUsbD1hP25ldyBmLkxvY2FsTmFtZVNldDp2b2lkIDA7dHJ5e2Zvcih2YXIgcD1vKGUuYXR0cmlidXRlcyksZD1wLm5leHQoKTshZC5kb25lO2Q9cC5uZXh0KCkpe3ZhciBtPWQudmFsdWU7aWYoYXx8aXx8bnVsbCE9PW0ubmFtZXNwYWNlVVJJKXtpZihhJiZsJiZsLmhhcyhtLm5hbWVzcGFjZVVSSSxtLmxvY2FsTmFtZSkpcmV0dXJuIHZvaWQgdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJFbGVtZW50IGNvbnRhaW5zIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKTthJiZsJiZsLnNldChtLm5hbWVzcGFjZVVSSSxtLmxvY2FsTmFtZSk7dmFyIHk9bS5uYW1lc3BhY2VVUkksdj1udWxsO2lmKG51bGwhPT15KWlmKHY9dC5nZXQobS5wcmVmaXgseSkseT09PWgubmFtZXNwYWNlLlhNTE5TKXtpZihtLnZhbHVlPT09aC5uYW1lc3BhY2UuWE1MfHxudWxsPT09bS5wcmVmaXgmJml8fG51bGwhPT1tLnByZWZpeCYmKCEobS5sb2NhbE5hbWUgaW4gbil8fG5bbS5sb2NhbE5hbWVdIT09bS52YWx1ZSkmJnQuaGFzKG0ubG9jYWxOYW1lLG0udmFsdWUpKWNvbnRpbnVlO2lmKGEmJm0udmFsdWU9PT1oLm5hbWVzcGFjZS5YTUxOUylyZXR1cm4gdm9pZCB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlhNTE5TIG5hbWVzcGFjZSBpcyByZXNlcnZlZCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSk7aWYoYSYmXCJcIj09PW0udmFsdWUpcmV0dXJuIHZvaWQgdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJOYW1lc3BhY2UgcHJlZml4IGRlY2xhcmF0aW9ucyBjYW5ub3QgYmUgdXNlZCB0byB1bmRlY2xhcmUgYSBuYW1lc3BhY2UgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIikpO1wieG1sbnNcIj09PW0ucHJlZml4JiYodj1cInhtbG5zXCIpfWVsc2UgbnVsbD09PXYmJih2PW51bGw9PT1tLnByZWZpeHx8dC5oYXNQcmVmaXgobS5wcmVmaXgpJiYhdC5oYXMobS5wcmVmaXgseSk/dGhpcy5fZ2VuZXJhdGVQcmVmaXgoeSx0LHIpOm0ucHJlZml4LHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmF0dHJpYnV0ZShcInhtbG5zOlwiK3YsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUoeSx0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQpKSkpO2lmKGEmJigtMSE9PW0ubG9jYWxOYW1lLmluZGV4T2YoXCI6XCIpfHwhYy54bWxfaXNOYW1lKG0ubG9jYWxOYW1lKXx8XCJ4bWxuc1wiPT09bS5sb2NhbE5hbWUmJm51bGw9PT15KSlyZXR1cm4gdm9pZCB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSk7dGhpcy5fcHVzaCh0aGlzLl93cml0ZXIuYXR0cmlidXRlKChudWxsIT09dj92K1wiOlwiOlwiXCIpK20ubG9jYWxOYW1lLHRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKG0udmFsdWUsdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkKSkpfWVsc2UgdGhpcy5fcHVzaCh0aGlzLl93cml0ZXIuYXR0cmlidXRlKG0ubG9jYWxOYW1lLHRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKG0udmFsdWUsdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkKSkpfX1jYXRjaChlKXtzPXtlcnJvcjplfX1maW5hbGx5e3RyeXtkJiYhZC5kb25lJiYodT1wLnJldHVybikmJnUuY2FsbChwKX1maW5hbGx5e2lmKHMpdGhyb3cgcy5lcnJvcn19fSx0LnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCYmbnVsbCE9PWUmJiFjLnhtbF9pc0xlZ2FsQ2hhcihlKT8odGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlcnMgaW4gYXR0cmlidXRlIHZhbHVlLlwiKSksXCJcIik6bnVsbD09PWU/XCJcIjplLnJlcGxhY2UoLyg/ISYobHR8Z3R8YW1wfGFwb3N8cXVvdCk7KSYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvPi9nLFwiJmd0O1wiKS5yZXBsYWNlKC9cIi9nLFwiJnF1b3Q7XCIpfSx0LnByb3RvdHlwZS5fcmVjb3JkTmFtZXNwYWNlSW5mb3JtYXRpb249ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksYT1udWxsO3RyeXtmb3IodmFyIHM9byhlLmF0dHJpYnV0ZXMpLHU9cy5uZXh0KCk7IXUuZG9uZTt1PXMubmV4dCgpKXt2YXIgbD11LnZhbHVlLGM9bC5uYW1lc3BhY2VVUkkscD1sLnByZWZpeDtpZihjPT09aC5uYW1lc3BhY2UuWE1MTlMpe2lmKG51bGw9PT1wKXthPWwudmFsdWU7Y29udGludWV9dmFyIGY9bC5sb2NhbE5hbWUsZD1sLnZhbHVlO2lmKGQ9PT1oLm5hbWVzcGFjZS5YTUwpY29udGludWU7aWYoXCJcIj09PWQmJihkPW51bGwpLHQuaGFzKGYsZCkpY29udGludWU7dC5zZXQoZixkKSxyW2ZdPWR8fFwiXCJ9fX1jYXRjaChlKXtuPXtlcnJvcjplfX1maW5hbGx5e3RyeXt1JiYhdS5kb25lJiYoaT1zLnJldHVybikmJmkuY2FsbChzKX1maW5hbGx5e2lmKG4pdGhyb3cgbi5lcnJvcn19cmV0dXJuIGF9LHQucHJvdG90eXBlLl9nZW5lcmF0ZVByZWZpeD1mdW5jdGlvbihlLHQscil7dmFyIG49XCJuc1wiK3IudmFsdWU7cmV0dXJuIHIudmFsdWUrKyx0LnNldChuLGUpLG59LHQucHJvdG90eXBlLl9pc1ByZWZpeE1hcE1vZGlmaWVkPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5faXRlbXMsbj10Ll9pdGVtcyxpPWUuX251bGxJdGVtcyxvPXQuX251bGxJdGVtcztmb3IodmFyIGEgaW4gbil7dmFyIHM9clthXTtpZih2b2lkIDA9PT1zKXJldHVybiEwO3ZhciB1PW5bYV07aWYocy5sZW5ndGghPT11Lmxlbmd0aClyZXR1cm4hMDtmb3IodmFyIGw9MDtsPHMubGVuZ3RoO2wrKylpZihzW2xdIT09dVtsXSlyZXR1cm4hMH1pZihpLmxlbmd0aCE9PW8ubGVuZ3RoKXJldHVybiEwO2ZvcihsPTA7bDxpLmxlbmd0aDtsKyspaWYoaVtsXSE9PW9bbF0pcmV0dXJuITA7cmV0dXJuITF9LHQuX1ZvaWRFbGVtZW50TmFtZXM9bmV3IFNldChbXCJhcmVhXCIsXCJiYXNlXCIsXCJiYXNlZm9udFwiLFwiYmdzb3VuZFwiLFwiYnJcIixcImNvbFwiLFwiZW1iZWRcIixcImZyYW1lXCIsXCJoclwiLFwiaW1nXCIsXCJpbnB1dFwiLFwia2V5Z2VuXCIsXCJsaW5rXCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwicGFyYW1cIixcInNvdXJjZVwiLFwidHJhY2tcIixcIndiclwiXSksdH0ocigzMDgpLkV2ZW50RW1pdHRlcik7dC5YTUxCdWlsZGVyQ0JJbXBsPV99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDc0KTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3ZhciByPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiByLl9saW5lTGVuZ3RoPTAscn1yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLmZyb250TWF0dGVyPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sdC5wcm90b3R5cGUuZGVjbGFyYXRpb249ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXMuX2JlZ2luTGluZSgpK1wiPD94bWxcIjtyZXR1cm4gbis9JyB2ZXJzaW9uPVwiJytlKydcIicsdm9pZCAwIT09dCYmKG4rPScgZW5jb2Rpbmc9XCInK3QrJ1wiJyksdm9pZCAwIT09ciYmKG4rPScgc3RhbmRhbG9uZT1cIicrKHI/XCJ5ZXNcIjpcIm5vXCIpKydcIicpLG4rPVwiPz5cIn0sdC5wcm90b3R5cGUuZG9jVHlwZT1mdW5jdGlvbihlLHQscil7dmFyIG49dGhpcy5fYmVnaW5MaW5lKCk7cmV0dXJuIG4rPXQmJnI/XCI8IURPQ1RZUEUgXCIrZSsnIFBVQkxJQyBcIicrdCsnXCIgXCInK3IrJ1wiPic6dD9cIjwhRE9DVFlQRSBcIitlKycgUFVCTElDIFwiJyt0KydcIj4nOnI/XCI8IURPQ1RZUEUgXCIrZSsnIFNZU1RFTSBcIicrcisnXCI+JzpcIjwhRE9DVFlQRSBcIitlK1wiPlwifSx0LnByb3RvdHlwZS5jb21tZW50PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9iZWdpbkxpbmUoKStcIlxceDNjIS0tXCIrZStcIi0tXFx4M2VcIn0sdC5wcm90b3R5cGUudGV4dD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fYmVnaW5MaW5lKCkrZX0sdC5wcm90b3R5cGUuaW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD90aGlzLl9iZWdpbkxpbmUoKStcIjw/XCIrZStcIiBcIit0K1wiPz5cIjp0aGlzLl9iZWdpbkxpbmUoKStcIjw/XCIrZStcIj8+XCJ9LHQucHJvdG90eXBlLmNkYXRhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9iZWdpbkxpbmUoKStcIjwhW0NEQVRBW1wiK2UrXCJdXT5cIn0sdC5wcm90b3R5cGUub3BlblRhZ0JlZ2luPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9saW5lTGVuZ3RoKz0xK2UubGVuZ3RoLHRoaXMuX2JlZ2luTGluZSgpK1wiPFwiK2V9LHQucHJvdG90eXBlLm9wZW5UYWdFbmQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiByP1wiIC8+XCI6dD90aGlzLl93cml0ZXJPcHRpb25zLmFsbG93RW1wdHlUYWdzP1wiPjwvXCIrZStcIj5cIjp0aGlzLl93cml0ZXJPcHRpb25zLnNwYWNlQmVmb3JlU2xhc2g/XCIgLz5cIjpcIi8+XCI6XCI+XCJ9LHQucHJvdG90eXBlLmNsb3NlVGFnPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9iZWdpbkxpbmUoKStcIjwvXCIrZStcIj5cIn0sdC5wcm90b3R5cGUuYXR0cmlidXRlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZSsnPVwiJyt0KydcIic7cmV0dXJuIHRoaXMuX3dyaXRlck9wdGlvbnMucHJldHR5UHJpbnQmJnRoaXMuX3dyaXRlck9wdGlvbnMud2lkdGg+MCYmdGhpcy5fbGluZUxlbmd0aCsxK3IubGVuZ3RoPnRoaXMuX3dyaXRlck9wdGlvbnMud2lkdGg/KHI9dGhpcy5fYmVnaW5MaW5lKCkrdGhpcy5faW5kZW50KDEpK3IsdGhpcy5fbGluZUxlbmd0aD1yLmxlbmd0aCxyKToodGhpcy5fbGluZUxlbmd0aCs9MStyLmxlbmd0aCxcIiBcIityKX0sdC5wcm90b3R5cGUuYmVnaW5FbGVtZW50PWZ1bmN0aW9uKGUpe30sdC5wcm90b3R5cGUuZW5kRWxlbWVudD1mdW5jdGlvbihlKXt9LHQucHJvdG90eXBlLl9iZWdpbkxpbmU9ZnVuY3Rpb24oKXtpZih0aGlzLl93cml0ZXJPcHRpb25zLnByZXR0eVByaW50KXt2YXIgZT0odGhpcy5oYXNEYXRhP3RoaXMuX3dyaXRlck9wdGlvbnMubmV3bGluZTpcIlwiKSt0aGlzLl9pbmRlbnQodGhpcy5fd3JpdGVyT3B0aW9ucy5vZmZzZXQrdGhpcy5sZXZlbCk7cmV0dXJuIHRoaXMuX2xpbmVMZW5ndGg9ZS5sZW5ndGgsZX1yZXR1cm5cIlwifSx0LnByb3RvdHlwZS5faW5kZW50PWZ1bmN0aW9uKGUpe3JldHVybiBlPD0wP1wiXCI6dGhpcy5fd3JpdGVyT3B0aW9ucy5pbmRlbnQucmVwZWF0KGUpfSx0fShyKDExNCkuQmFzZUNCV3JpdGVyKTt0LlhNTENCV3JpdGVyPW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDc0KTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3ZhciByPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiByLl9oYXNDaGlsZHJlbj1bXSxyLl9hZGRpdGlvbmFsTGV2ZWw9MCxyfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuZnJvbnRNYXR0ZXI9ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSx0LnByb3RvdHlwZS5kZWNsYXJhdGlvbj1mdW5jdGlvbihlLHQscil7cmV0dXJuXCJcIn0sdC5wcm90b3R5cGUuZG9jVHlwZT1mdW5jdGlvbihlLHQscil7cmV0dXJuXCJcIn0sdC5wcm90b3R5cGUuY29tbWVudD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fY29tbWEoKSt0aGlzLl9iZWdpbkxpbmUoKStcIntcIit0aGlzLl9zZXAoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5jb21tZW50KSt0aGlzLl9zZXAoKSt0aGlzLl92YWwoZSkrdGhpcy5fc2VwKCkrXCJ9XCJ9LHQucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2NvbW1hKCkrdGhpcy5fYmVnaW5MaW5lKCkrXCJ7XCIrdGhpcy5fc2VwKCkrdGhpcy5fa2V5KHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQudGV4dCkrdGhpcy5fc2VwKCkrdGhpcy5fdmFsKGUpK3RoaXMuX3NlcCgpK1wifVwifSx0LnByb3RvdHlwZS5pbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9jb21tYSgpK3RoaXMuX2JlZ2luTGluZSgpK1wie1wiK3RoaXMuX3NlcCgpK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LmlucykrdGhpcy5fc2VwKCkrdGhpcy5fdmFsKHQ/ZStcIiBcIit0OmUpK3RoaXMuX3NlcCgpK1wifVwifSx0LnByb3RvdHlwZS5jZGF0YT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fY29tbWEoKSt0aGlzLl9iZWdpbkxpbmUoKStcIntcIit0aGlzLl9zZXAoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5jZGF0YSkrdGhpcy5fc2VwKCkrdGhpcy5fdmFsKGUpK3RoaXMuX3NlcCgpK1wifVwifSx0LnByb3RvdHlwZS5hdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fY29tbWEoKSt0aGlzLl9iZWdpbkxpbmUoMSkrXCJ7XCIrdGhpcy5fc2VwKCkrdGhpcy5fa2V5KHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQuYXR0K2UpK3RoaXMuX3NlcCgpK3RoaXMuX3ZhbCh0KSt0aGlzLl9zZXAoKStcIn1cIn0sdC5wcm90b3R5cGUub3BlblRhZ0JlZ2luPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2NvbW1hKCkrdGhpcy5fYmVnaW5MaW5lKCkrXCJ7XCIrdGhpcy5fc2VwKCkrdGhpcy5fa2V5KGUpK3RoaXMuX3NlcCgpK1wie1wiO3JldHVybiB0aGlzLl9hZGRpdGlvbmFsTGV2ZWwrKyx0aGlzLmhhc0RhdGE9ITAsdCs9dGhpcy5fYmVnaW5MaW5lKCkrdGhpcy5fa2V5KHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQudGV4dCkrdGhpcy5fc2VwKCkrXCJbXCIsdGhpcy5faGFzQ2hpbGRyZW4ucHVzaCghMSksdH0sdC5wcm90b3R5cGUub3BlblRhZ0VuZD1mdW5jdGlvbihlLHQscil7aWYodCl7dmFyIG49dGhpcy5fc2VwKCkrXCJdXCI7cmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxMZXZlbC0tLG4rPXRoaXMuX2JlZ2luTGluZSgpK1wifVwiK3RoaXMuX3NlcCgpK1wifVwifXJldHVyblwiXCJ9LHQucHJvdG90eXBlLmNsb3NlVGFnPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2JlZ2luTGluZSgpK1wiXVwiO3JldHVybiB0aGlzLl9hZGRpdGlvbmFsTGV2ZWwtLSx0Kz10aGlzLl9iZWdpbkxpbmUoKStcIn1cIit0aGlzLl9zZXAoKStcIn1cIn0sdC5wcm90b3R5cGUuYmVnaW5FbGVtZW50PWZ1bmN0aW9uKGUpe30sdC5wcm90b3R5cGUuZW5kRWxlbWVudD1mdW5jdGlvbihlKXt0aGlzLl9oYXNDaGlsZHJlbi5wb3AoKX0sdC5wcm90b3R5cGUuX2JlZ2luTGluZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MCksdGhpcy5fd3JpdGVyT3B0aW9ucy5wcmV0dHlQcmludD8odGhpcy5oYXNEYXRhP3RoaXMuX3dyaXRlck9wdGlvbnMubmV3bGluZTpcIlwiKSt0aGlzLl9pbmRlbnQodGhpcy5fd3JpdGVyT3B0aW9ucy5vZmZzZXQrdGhpcy5sZXZlbCtlKTpcIlwifSx0LnByb3RvdHlwZS5faW5kZW50PWZ1bmN0aW9uKGUpe3JldHVybiBlK3RoaXMuX2FkZGl0aW9uYWxMZXZlbDw9MD9cIlwiOnRoaXMuX3dyaXRlck9wdGlvbnMuaW5kZW50LnJlcGVhdChlK3RoaXMuX2FkZGl0aW9uYWxMZXZlbCl9LHQucHJvdG90eXBlLl9jb21tYT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2hhc0NoaWxkcmVuW3RoaXMuX2hhc0NoaWxkcmVuLmxlbmd0aC0xXT9cIixcIjpcIlwiO3JldHVybiB0aGlzLl9oYXNDaGlsZHJlbi5sZW5ndGg+MCYmKHRoaXMuX2hhc0NoaWxkcmVuW3RoaXMuX2hhc0NoaWxkcmVuLmxlbmd0aC0xXT0hMCksZX0sdC5wcm90b3R5cGUuX3NlcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0ZXJPcHRpb25zLnByZXR0eVByaW50P1wiIFwiOlwiXCJ9LHQucHJvdG90eXBlLl9rZXk9ZnVuY3Rpb24oZSl7cmV0dXJuJ1wiJytlKydcIjonfSx0LnByb3RvdHlwZS5fdmFsPWZ1bmN0aW9uKGUpe3JldHVybiBKU09OLnN0cmluZ2lmeShlKX0sdH0ocigxMTQpLkJhc2VDQldyaXRlcik7dC5KU09OQ0JXcml0ZXI9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoNzQpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIHI9ZS5jYWxsKHRoaXMsdCl8fHRoaXM7aWYoci5fcm9vdFdyaXR0ZW49ITEsci5fYWRkaXRpb25hbExldmVsPTAsdC5pbmRlbnQubGVuZ3RoPDIpdGhyb3cgbmV3IEVycm9yKFwiWUFNTCBpbmRlbnRlbnRhdGlvbiBzdHJpbmcgbXVzdCBiZSBhdCBsZWFzdCB0d28gY2hhcmFjdGVycyBsb25nLlwiKTtpZih0Lm9mZnNldDwwKXRocm93IG5ldyBFcnJvcihcIllBTUwgb2Zmc2V0IHNob3VsZCBiZSB6ZXJvIG9yIGEgcG9zaXRpdmUgbnVtYmVyLlwiKTtyZXR1cm4gcn1yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLmZyb250TWF0dGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2JlZ2luTGluZSgpK1wiLS0tXCJ9LHQucHJvdG90eXBlLmRlY2xhcmF0aW9uPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cIlwifSx0LnByb3RvdHlwZS5kb2NUeXBlPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cIlwifSx0LnByb3RvdHlwZS5jb21tZW50PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9iZWdpbkxpbmUoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5jb21tZW50KStcIiBcIit0aGlzLl92YWwoZSl9LHQucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2JlZ2luTGluZSgpK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LnRleHQpK1wiIFwiK3RoaXMuX3ZhbChlKX0sdC5wcm90b3R5cGUuaW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fYmVnaW5MaW5lKCkrdGhpcy5fa2V5KHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQuaW5zKStcIiBcIit0aGlzLl92YWwodD9lK1wiIFwiK3Q6ZSl9LHQucHJvdG90eXBlLmNkYXRhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9iZWdpbkxpbmUoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5jZGF0YSkrXCIgXCIrdGhpcy5fdmFsKGUpfSx0LnByb3RvdHlwZS5hdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXt0aGlzLl9hZGRpdGlvbmFsTGV2ZWwrKzt2YXIgcj10aGlzLl9iZWdpbkxpbmUoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5hdHQrZSkrXCIgXCIrdGhpcy5fdmFsKHQpO3JldHVybiB0aGlzLl9hZGRpdGlvbmFsTGV2ZWwtLSxyfSx0LnByb3RvdHlwZS5vcGVuVGFnQmVnaW49ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fYmVnaW5MaW5lKCkrdGhpcy5fa2V5KGUpO3JldHVybiB0aGlzLl9yb290V3JpdHRlbnx8KHRoaXMuX3Jvb3RXcml0dGVuPSEwKSx0aGlzLmhhc0RhdGE9ITAsdGhpcy5fYWRkaXRpb25hbExldmVsKyssdCs9dGhpcy5fYmVnaW5MaW5lKCEwKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC50ZXh0KX0sdC5wcm90b3R5cGUub3BlblRhZ0VuZD1mdW5jdGlvbihlLHQscil7cmV0dXJuIHQ/XCIgXCIrdGhpcy5fdmFsKFwiXCIpOlwiXCJ9LHQucHJvdG90eXBlLmNsb3NlVGFnPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9hZGRpdGlvbmFsTGV2ZWwtLSxcIlwifSx0LnByb3RvdHlwZS5iZWdpbkVsZW1lbnQ9ZnVuY3Rpb24oZSl7fSx0LnByb3RvdHlwZS5lbmRFbGVtZW50PWZ1bmN0aW9uKGUpe30sdC5wcm90b3R5cGUuX2JlZ2luTGluZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLCh0aGlzLmhhc0RhdGE/dGhpcy5fd3JpdGVyT3B0aW9ucy5uZXdsaW5lOlwiXCIpK3RoaXMuX2luZGVudCh0aGlzLl93cml0ZXJPcHRpb25zLm9mZnNldCt0aGlzLmxldmVsLGUpfSx0LnByb3RvdHlwZS5faW5kZW50PWZ1bmN0aW9uKGUsdCl7aWYoZSt0aGlzLl9hZGRpdGlvbmFsTGV2ZWw8PTApcmV0dXJuXCJcIjt2YXIgcj10aGlzLl93cml0ZXJPcHRpb25zLmluZGVudC5yZXBlYXQoZSt0aGlzLl9hZGRpdGlvbmFsTGV2ZWwpO3JldHVybiF0JiZ0aGlzLl9yb290V3JpdHRlbj9yLnN1YnN0cigwLHIubGVuZ3RoLTIpK1wiLVwiK3Iuc3Vic3RyKC0xLDEpOnJ9LHQucHJvdG90eXBlLl9rZXk9ZnVuY3Rpb24oZSl7cmV0dXJuJ1wiJytlKydcIjonfSx0LnByb3RvdHlwZS5fdmFsPWZ1bmN0aW9uKGUpe3JldHVybiBKU09OLnN0cmluZ2lmeShlKX0sdH0ocigxMTQpLkJhc2VDQldyaXRlcik7dC5ZQU1MQ0JXcml0ZXI9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9XCJvYmplY3RcIj09dHlwZW9mIFJlZmxlY3Q/UmVmbGVjdDpudWxsLG89aSYmXCJmdW5jdGlvblwiPT10eXBlb2YgaS5hcHBseT9pLmFwcGx5OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoZSx0LHIpfTtuPWkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGkub3duS2V5cz9pLm93bktleXM6T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSkpfTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSl9O3ZhciBhPU51bWJlci5pc05hTnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUhPWV9O2Z1bmN0aW9uIHMoKXtzLmluaXQuY2FsbCh0aGlzKX1lLmV4cG9ydHM9cyxzLkV2ZW50RW1pdHRlcj1zLHMucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLHMucHJvdG90eXBlLl9ldmVudHNDb3VudD0wLHMucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwO3ZhciB1PTEwO2Z1bmN0aW9uIGwoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKX1mdW5jdGlvbiBjKGUpe3JldHVybiB2b2lkIDA9PT1lLl9tYXhMaXN0ZW5lcnM/cy5kZWZhdWx0TWF4TGlzdGVuZXJzOmUuX21heExpc3RlbmVyc31mdW5jdGlvbiBoKGUsdCxyLG4pe3ZhciBpLG8sYSxzO2lmKGwociksdm9pZCAwPT09KG89ZS5fZXZlbnRzKT8obz1lLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSxlLl9ldmVudHNDb3VudD0wKToodm9pZCAwIT09by5uZXdMaXN0ZW5lciYmKGUuZW1pdChcIm5ld0xpc3RlbmVyXCIsdCxyLmxpc3RlbmVyP3IubGlzdGVuZXI6ciksbz1lLl9ldmVudHMpLGE9b1t0XSksdm9pZCAwPT09YSlhPW9bdF09ciwrK2UuX2V2ZW50c0NvdW50O2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYT9hPW9bdF09bj9bcixhXTpbYSxyXTpuP2EudW5zaGlmdChyKTphLnB1c2gociksKGk9YyhlKSk+MCYmYS5sZW5ndGg+aSYmIWEud2FybmVkKXthLndhcm5lZD0hMDt2YXIgdT1uZXcgRXJyb3IoXCJQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuIFwiK2EubGVuZ3RoK1wiIFwiK1N0cmluZyh0KStcIiBsaXN0ZW5lcnMgYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0XCIpO3UubmFtZT1cIk1heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZ1wiLHUuZW1pdHRlcj1lLHUudHlwZT10LHUuY291bnQ9YS5sZW5ndGgscz11LGNvbnNvbGUmJmNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKHMpfXJldHVybiBlfWZ1bmN0aW9uIHAoKXtpZighdGhpcy5maXJlZClyZXR1cm4gdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPSEwLDA9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk6dGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCxhcmd1bWVudHMpfWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPXtmaXJlZDohMSx3cmFwRm46dm9pZCAwLHRhcmdldDplLHR5cGU6dCxsaXN0ZW5lcjpyfSxpPXAuYmluZChuKTtyZXR1cm4gaS5saXN0ZW5lcj1yLG4ud3JhcEZuPWksaX1mdW5jdGlvbiBkKGUsdCxyKXt2YXIgbj1lLl9ldmVudHM7aWYodm9pZCAwPT09bilyZXR1cm5bXTt2YXIgaT1uW3RdO3JldHVybiB2b2lkIDA9PT1pP1tdOlwiZnVuY3Rpb25cIj09dHlwZW9mIGk/cj9baS5saXN0ZW5lcnx8aV06W2ldOnI/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW5ldyBBcnJheShlLmxlbmd0aCkscj0wO3I8dC5sZW5ndGg7KytyKXRbcl09ZVtyXS5saXN0ZW5lcnx8ZVtyXTtyZXR1cm4gdH0oaSk6eShpLGkubGVuZ3RoKX1mdW5jdGlvbiBtKGUpe3ZhciB0PXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT10KXt2YXIgcj10W2VdO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIpcmV0dXJuIDE7aWYodm9pZCAwIT09cilyZXR1cm4gci5sZW5ndGh9cmV0dXJuIDB9ZnVuY3Rpb24geShlLHQpe2Zvcih2YXIgcj1uZXcgQXJyYXkodCksbj0wO248dDsrK24pcltuXT1lW25dO3JldHVybiByfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLFwiZGVmYXVsdE1heExpc3RlbmVyc1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXQ6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGU8MHx8YShlKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7dT1lfX0pLHMuaW5pdD1mdW5jdGlvbigpe3ZvaWQgMCE9PXRoaXMuX2V2ZW50cyYmdGhpcy5fZXZlbnRzIT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKSx0aGlzLl9tYXhMaXN0ZW5lcnM9dGhpcy5fbWF4TGlzdGVuZXJzfHx2b2lkIDB9LHMucHJvdG90eXBlLnNldE1heExpc3RlbmVycz1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxhKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKTtyZXR1cm4gdGhpcy5fbWF4TGlzdGVuZXJzPWUsdGhpc30scy5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIGModGhpcyl9LHMucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXQucHVzaChhcmd1bWVudHNbcl0pO3ZhciBuPVwiZXJyb3JcIj09PWUsaT10aGlzLl9ldmVudHM7aWYodm9pZCAwIT09aSluPW4mJnZvaWQgMD09PWkuZXJyb3I7ZWxzZSBpZighbilyZXR1cm4hMTtpZihuKXt2YXIgYTtpZih0Lmxlbmd0aD4wJiYoYT10WzBdKSxhIGluc3RhbmNlb2YgRXJyb3IpdGhyb3cgYTt2YXIgcz1uZXcgRXJyb3IoXCJVbmhhbmRsZWQgZXJyb3IuXCIrKGE/XCIgKFwiK2EubWVzc2FnZStcIilcIjpcIlwiKSk7dGhyb3cgcy5jb250ZXh0PWEsc312YXIgdT1pW2VdO2lmKHZvaWQgMD09PXUpcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdSlvKHUsdGhpcyx0KTtlbHNle3ZhciBsPXUubGVuZ3RoLGM9eSh1LGwpO2ZvcihyPTA7cjxsOysrcilvKGNbcl0sdGhpcyx0KX1yZXR1cm4hMH0scy5wcm90b3R5cGUuYWRkTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaCh0aGlzLGUsdCwhMSl9LHMucHJvdG90eXBlLm9uPXMucHJvdG90eXBlLmFkZExpc3RlbmVyLHMucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBoKHRoaXMsZSx0LCEwKX0scy5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQpe3JldHVybiBsKHQpLHRoaXMub24oZSxmKHRoaXMsZSx0KSksdGhpc30scy5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBsKHQpLHRoaXMucHJlcGVuZExpc3RlbmVyKGUsZih0aGlzLGUsdCkpLHRoaXN9LHMucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYTtpZihsKHQpLHZvaWQgMD09PShuPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09KHI9bltlXSkpcmV0dXJuIHRoaXM7aWYocj09PXR8fHIubGlzdGVuZXI9PT10KTA9PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk6KGRlbGV0ZSBuW2VdLG4ucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSxyLmxpc3RlbmVyfHx0KSk7ZWxzZSBpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKXtmb3IoaT0tMSxvPXIubGVuZ3RoLTE7bz49MDtvLS0paWYocltvXT09PXR8fHJbb10ubGlzdGVuZXI9PT10KXthPXJbb10ubGlzdGVuZXIsaT1vO2JyZWFrfWlmKGk8MClyZXR1cm4gdGhpczswPT09aT9yLnNoaWZ0KCk6ZnVuY3Rpb24oZSx0KXtmb3IoO3QrMTxlLmxlbmd0aDt0KyspZVt0XT1lW3QrMV07ZS5wb3AoKX0ocixpKSwxPT09ci5sZW5ndGgmJihuW2VdPXJbMF0pLHZvaWQgMCE9PW4ucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSxhfHx0KX1yZXR1cm4gdGhpc30scy5wcm90b3R5cGUub2ZmPXMucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLHMucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdCxyLG47aWYodm9pZCAwPT09KHI9dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT1yLnJlbW92ZUxpc3RlbmVyKXJldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aD8odGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCk6dm9pZCAwIT09cltlXSYmKDA9PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk6ZGVsZXRlIHJbZV0pLHRoaXM7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpLG89T2JqZWN0LmtleXMocik7Zm9yKG49MDtuPG8ubGVuZ3RoOysrbilcInJlbW92ZUxpc3RlbmVyXCIhPT0oaT1vW25dKSYmdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoaSk7cmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKFwicmVtb3ZlTGlzdGVuZXJcIiksdGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCx0aGlzfWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHQ9cltlXSkpdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHQpO2Vsc2UgaWYodm9pZCAwIT09dClmb3Iobj10Lmxlbmd0aC0xO24+PTA7bi0tKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0W25dKTtyZXR1cm4gdGhpc30scy5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBkKHRoaXMsZSwhMCl9LHMucHJvdG90eXBlLnJhd0xpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gZCh0aGlzLGUsITEpfSxzLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmxpc3RlbmVyQ291bnQ/ZS5saXN0ZW5lckNvdW50KHQpOm0uY2FsbChlLHQpfSxzLnByb3RvdHlwZS5saXN0ZW5lckNvdW50PW0scy5wcm90b3R5cGUuZXZlbnROYW1lcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9ldmVudHNDb3VudD4wP24odGhpcy5fZXZlbnRzKTpbXX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDc3KTt0LmNyZWF0ZUNCPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbi5YTUxCdWlsZGVyQ0JJbXBsKGUpfSx0LmZyYWdtZW50Q0I9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBuLlhNTEJ1aWxkZXJDQkltcGwoZSwhMCl9fV0pfSkpOyIsICJpbXBvcnQgeyBFZGl0b3IsIE1hcmtkb3duVmlldywgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBBcGlUeXBlLCBERUZBVUxUX1NFVFRJTkdTLCBXb3JkcHJlc3NQbHVnaW5TZXR0aW5ncywgV29yZHByZXNzU2V0dGluZ1RhYiB9IGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBhZGRJY29ucyB9IGZyb20gJy4vaWNvbnMnO1xyXG5pbXBvcnQgeyBXb3JkUHJlc3NQdWJsaXNoVmlldywgV29yZFByZXNzUHVibGlzaFZpZXdUeXBlIH0gZnJvbSAnLi93cC1wdWJsaXNoLXZpZXcnO1xyXG5pbXBvcnQgeyBjcmVhdGVXb3JkUHJlc3NDbGllbnQgfSBmcm9tICcuL3dwLWNsaWVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JkcHJlc3NQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cclxuXHRzZXR0aW5nczogV29yZHByZXNzUGx1Z2luU2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdsb2FkaW5nIG9ic2lkaWFuLXdvcmRwcmVzcyBwbHVnaW4nKTtcclxuXHJcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuICAgIHRoaXMucmVnaXN0ZXJWaWV3KFxyXG4gICAgICBXb3JkUHJlc3NQdWJsaXNoVmlld1R5cGUsXHJcbiAgICAgIGxlYWYgPT4gbmV3IFdvcmRQcmVzc1B1Ymxpc2hWaWV3KGxlYWYsIHRoaXMpXHJcbiAgICApO1xyXG5cclxuICAgIGFkZEljb25zKCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVSaWJib25JY29uKCk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgaWQ6ICdwdWJsaXNoJyxcclxuICAgICAgbmFtZTogJ1B1Ymxpc2ggY3VycmVudCBkb2N1bWVudCcsXHJcbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGNyZWF0ZVdvcmRQcmVzc0NsaWVudCh0aGlzLmFwcCwgdGhpcywgQXBpVHlwZS5YTUxfUlBDKTtcclxuICAgICAgICBpZiAoY2xpZW50KSB7XHJcbiAgICAgICAgICBjbGllbnQubmV3UG9zdCgpLnRoZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgV29yZHByZXNzU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuICB1cGRhdGVSaWJib25JY29uKCk6IHZvaWQge1xyXG4gICAgY29uc3QgcmliYm9uSWNvblRpdGxlID0gJ1dvcmRQcmVzcyBQdWJsaXNoJztcclxuICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dSaWJib25JY29uKSB7XHJcbiAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignd3AtbG9nbycsIHJpYmJvbkljb25UaXRsZSwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlV29yZFByZXNzUHVibGlzaFZpZXcoKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBsZWZ0UmliYm9uOiBhbnkgPSB0aGlzLmFwcC53b3Jrc3BhY2UubGVmdFJpYmJvbjtcclxuICAgICAgY29uc3QgY2hpbGRyZW4gPSBsZWZ0UmliYm9uLnJpYmJvbkFjdGlvbnNFbC5jaGlsZHJlbjtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChjaGlsZHJlbi5pdGVtKGkpLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpID09PSByaWJib25JY29uVGl0bGUpIHtcclxuICAgICAgICAgIChjaGlsZHJlbi5pdGVtKGkpIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyB0b2dnbGVXb3JkUHJlc3NQdWJsaXNoVmlldygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShXb3JkUHJlc3NQdWJsaXNoVmlld1R5cGUpO1xyXG4gICAgaWYgKGV4aXN0aW5nLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihleGlzdGluZ1swXSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKS5zZXRWaWV3U3RhdGUoe1xyXG4gICAgICB0eXBlOiBXb3JkUHJlc3NQdWJsaXNoVmlld1R5cGUsXHJcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoV29yZFByZXNzUHVibGlzaFZpZXdUeXBlKVswXSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgV29yZHByZXNzUGx1Z2luIGZyb20gJy4vbWFpbic7XHJcblxyXG5leHBvcnQgY29uc3QgZW51bSBBcGlUeXBlIHtcclxuICBYTUxfUlBDID0gJ3htbC1ycGMnLFxyXG4gIFJlc3RBUEkgPSAncmVzdGFwaSdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gUmVzdEFwaVBsdWdpbiB7XHJcbiAgQXV0aGVudGljYXRpb25fbWluaU9yYW5nZSA9ICdtaW5pT3JhbmdlJ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvcmRwcmVzc1BsdWdpblNldHRpbmdzIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQVBJIHR5cGUuXHJcbiAgICovXHJcbiAgYXBpVHlwZTogQXBpVHlwZTtcclxuXHJcbiAgLyoqXHJcbiAgICogUGx1Z2luIGZvciBSRVNUIEFQSS5cclxuICAgKi9cclxuICByZXN0QXBpUGx1Z2luPzogUmVzdEFwaVBsdWdpbjtcclxuXHJcbiAgLyoqXHJcbiAgICogRW5kcG9pbnQuXHJcbiAgICovXHJcbiAgZW5kcG9pbnQ6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogV29yZFByZXNzIHVzZXIgbmFtZS5cclxuICAgKi9cclxuICB1c2VyTmFtZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZSB1c2VyIG5hbWUgdG8gbG9jYWwgZGF0YS5cclxuICAgKi9cclxuICBzYXZlVXNlck5hbWU6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgcGx1Z2luIGljb24gaW4gc2lkZS5cclxuICAgKi9cclxuICBzaG93UmliYm9uSWNvbjogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFdvcmRwcmVzc1BsdWdpblNldHRpbmdzID0ge1xyXG4gIGFwaVR5cGU6IEFwaVR5cGUuWE1MX1JQQyxcclxuICBlbmRwb2ludDogJycsXHJcbiAgc2F2ZVVzZXJOYW1lOiBmYWxzZSxcclxuICBzaG93UmliYm9uSWNvbjogZmFsc2VcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdvcmRwcmVzc1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHJcblx0Y29uc3RydWN0b3IoXHJcbiAgICBhcHA6IEFwcCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuICApIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1NldHRpbmdzIGZvciBXb3JkUHJlc3MgcGx1Z2luJyB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1dvcmRQcmVzcyBVUkwnKVxyXG5cdFx0XHQuc2V0RGVzYygnRnVsbCBwYXRoIG9mIGluc3RhbGxlZCBXb3JkUHJlc3MsIGZvciBleGFtcGxlLCBodHRwczovL2V4YW1wbGUuY29tL3dvcmRwcmVzcycpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignaHR0cHM6Ly9leGFtcGxlLmNvbS93b3JkcHJlc3MnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRwb2ludClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRwb2ludCA9IHZhbHVlO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdTYXZlIFVzZXIgTmFtZScpXHJcbiAgICAgIC5zZXREZXNjKGBJZiBlbmFibGVkLCB0aGUgV29yZFByZXNzIHVzZXIgbmFtZSB5b3UgdHlwZWQgd2lsbCBiZSBzYXZlZCBpbiBsb2NhbCBkYXRhLlxyXG5UaGlzIG1pZ2h0IGJlIHVzZXIgbmFtZSBkaXNjbG9zdXJlIGluIHN5bmNocm9uaXplIHNlcnZpY2VzLmApXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGVcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlVXNlck5hbWUpXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVVc2VyTmFtZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgKTtcclxuICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlVXNlck5hbWUpIHtcclxuICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoJ1dvcmRQcmVzcyBVc2VyIE5hbWUnKVxyXG4gICAgICAgIC5zZXREZXNjKCdVc2VyIG5hbWUgb2YgV29yZFByZXNzJylcclxuICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignVXNlciBuYW1lJylcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VyTmFtZSlcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlck5hbWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICB9KSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkZWxldGUgdGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlck5hbWU7XHJcbiAgICB9XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoJ0FQSSBUeXBlJylcclxuICAgICAgLnNldERlc2MoYFNlbGVjdCB3aGljaCBBUEkgeW91IHdhbnQgdG8gdXNlLlxyXG4tIFhNTC1SUEM6IEVuYWJsZWQgYnkgZGVmYXVsdCBidXQgc29tZSBob3N0IG1heSBkaXNhYmxlIGl0XHJcbi0gUkVTVCBBUElgKVxyXG4gICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgIC5hZGRPcHRpb24oQXBpVHlwZS5YTUxfUlBDLCAnWE1MLVJQQycpXHJcbiAgICAgICAgICAuYWRkT3B0aW9uKEFwaVR5cGUuUmVzdEFQSSwgJ1JFU1QgQVBJJylcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcGlUeXBlKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogQXBpVHlwZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcGlUeXBlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcGlUeXBlID09PSBBcGlUeXBlLlhNTF9SUEMpIHtcclxuICAgICAgLy8gc29tZXRoaW5nIGZvciBYTUwtUlBDXHJcbiAgICB9IGVsc2UgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmFwaVR5cGUgPT09IEFwaVR5cGUuUmVzdEFQSSkge1xyXG4gICAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLnJlc3RBcGlQbHVnaW4pIHtcclxuICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZXN0QXBpUGx1Z2luID0gUmVzdEFwaVBsdWdpbi5BdXRoZW50aWNhdGlvbl9taW5pT3JhbmdlO1xyXG4gICAgICB9XHJcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKCdSRVNUIEFQSSBQbHVnaW4nKVxyXG4gICAgICAgIC5zZXREZXNjKGBTZWxlY3Qgd2hpY2ggYXV0aCBwbHVnaW4gZm9yIFJFU1QgQVBJIHlvdSBpbnN0YWxsZWQuYClcclxuICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAuYWRkT3B0aW9uKFJlc3RBcGlQbHVnaW4uQXV0aGVudGljYXRpb25fbWluaU9yYW5nZSwgJ1dvcmRQcmVzcyBSRVNUIEFQSSBBdXRoZW50aWNhdGlvbiBieSBtaW5pT3JhbmdlJylcclxuICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlc3RBcGlQbHVnaW4pXHJcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IFJlc3RBcGlQbHVnaW4pID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZXN0QXBpUGx1Z2luID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKCdTaG93IGljb24gaW4gc2lkZWJhcicpXHJcbiAgICAgIC5zZXREZXNjKGBJZiBlbmFibGVkLCBhIGJ1dHRvbiB3aGljaCBvcGVucyBwdWJsaXNoIHBhbmVsIHdpbGwgYmUgYWRkZWQgdG8gdGhlIE9ic2lkaWFuIHNpZGViYXIuXHJcbkNoYW5nZXMgb25seSB0YWtlIGVmZmVjdCBvbiByZWxvYWQuYClcclxuICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dSaWJib25JY29uKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93UmliYm9uSWNvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi51cGRhdGVSaWJib25JY29uKCk7XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgKTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7IGFkZEljb24gfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5leHBvcnQgY29uc3QgaWNvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XHJcbiAgJ3dwLWxvZ28nOiBgXHJcbjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiPlxyXG4gIDxnIGZpbGw9XCJjdXJyZW50Q29sb3JcIj5cclxuICAgIDxwYXRoIGQ9XCJNIDcuMTA5Mzc1IDUwIEMgNy4xMDkzNzUgNjYuOTc2NTYyIDE2Ljk3NjU2MiA4MS42NDg0MzggMzEuMjgxMjUgODguNjAxNTYyIEwgMTAuODIwMzEyIDMyLjU0Mjk2OSBDIDguNDQxNDA2IDM3Ljg3ODkwNiA3LjEwOTM3NSA0My43ODEyNSA3LjEwOTM3NSA1MCBaIE0gNy4xMDkzNzUgNTAgXCIvPlxyXG4gICAgPHBhdGggZD1cIk0gNzguOTU3MDMxIDQ3LjgzNTkzOCBDIDc4Ljk1NzAzMSA0Mi41MzUxNTYgNzcuMDU0Njg4IDM4Ljg2MzI4MSA3NS40MjE4NzUgMzYuMDAzOTA2IEMgNzMuMjQ2MDk0IDMyLjQ3MjY1NiA3MS4yMDcwMzEgMjkuNDgwNDY5IDcxLjIwNzAzMSAyNS45NDUzMTIgQyA3MS4yMDcwMzEgMjIuMDAzOTA2IDc0LjE5OTIxOSAxOC4zMzIwMzEgNzguNDEwMTU2IDE4LjMzMjAzMSBDIDc4LjYwMTU2MiAxOC4zMzIwMzEgNzguNzgxMjUgMTguMzU1NDY5IDc4Ljk2ODc1IDE4LjM2NzE4OCBDIDcxLjMzNTkzOCAxMS4zNzUgNjEuMTY3OTY5IDcuMTA1NDY5IDUwIDcuMTA1NDY5IEMgMzUuMDE1NjI1IDcuMTA1NDY5IDIxLjgzMjAzMSAxNC43OTY4NzUgMTQuMTY0MDYyIDI2LjQ0MTQwNiBDIDE1LjE2Nzk2OSAyNi40NzI2NTYgMTYuMTE3MTg4IDI2LjQ5MjE4OCAxNi45MjE4NzUgMjYuNDkyMTg4IEMgMjEuNDEwMTU2IDI2LjQ5MjE4OCAyOC4zNTU0NjkgMjUuOTQ5MjE5IDI4LjM1NTQ2OSAyNS45NDkyMTkgQyAzMC42Njc5NjkgMjUuODEyNSAzMC45NDE0MDYgMjkuMjA3MDMxIDI4LjYyODkwNiAyOS40ODA0NjkgQyAyOC42Mjg5MDYgMjkuNDgwNDY5IDI2LjMwNDY4OCAyOS43NTM5MDYgMjMuNzIyNjU2IDI5Ljg5MDYyNSBMIDM5LjMzOTg0NCA3Ni4zNTE1NjIgTCA0OC43MjY1NjIgNDguMTk5MjE5IEwgNDIuMDQyOTY5IDI5Ljg4NjcxOSBDIDM5LjczNDM3NSAyOS43NTM5MDYgMzcuNTQ2ODc1IDI5LjQ4MDQ2OSAzNy41NDY4NzUgMjkuNDgwNDY5IEMgMzUuMjM0Mzc1IDI5LjM0Mzc1IDM1LjUwNzgxMiAyNS44MDg1OTQgMzcuODE2NDA2IDI1Ljk0NTMxMiBDIDM3LjgxNjQwNiAyNS45NDUzMTIgNDQuOTAyMzQ0IDI2LjQ5MjE4OCA0OS4xMTcxODggMjYuNDkyMTg4IEMgNTMuNjAxNTYyIDI2LjQ5MjE4OCA2MC41NDY4NzUgMjUuOTQ1MzEyIDYwLjU0Njg3NSAyNS45NDUzMTIgQyA2Mi44NTkzNzUgMjUuODA4NTk0IDYzLjEzMjgxMiAyOS4yMDcwMzEgNjAuODI0MjE5IDI5LjQ4MDQ2OSBDIDYwLjgyNDIxOSAyOS40ODA0NjkgNTguNDkyMTg4IDI5Ljc1MzkwNiA1NS45MTQwNjIgMjkuODg2NzE5IEwgNzEuNDE0MDYyIDc1Ljk5NjA5NCBMIDc1LjY5MTQwNiA2MS42OTkyMTkgQyA3Ny41NDY4NzUgNTUuNzY1NjI1IDc4Ljk1NzAzMSA1MS41MDc4MTIgNzguOTU3MDMxIDQ3LjgzNTkzOCBaIE0gNzguOTU3MDMxIDQ3LjgzNTkzOCBcIi8+XHJcbiAgICA8cGF0aCBkPVwiTSA1MC43NTM5MDYgNTMuNzUgTCAzNy44ODI4MTIgOTEuMTQ4NDM4IEMgNDEuNzI2NTYyIDkyLjI3NzM0NCA0NS43ODkwNjIgOTIuODk0NTMxIDUwIDkyLjg5NDUzMSBDIDU0Ljk5NjA5NCA5Mi44OTQ1MzEgNTkuNzg1MTU2IDkyLjAzMTI1IDY0LjI0NjA5NCA5MC40NjQ4NDQgQyA2NC4xMjg5MDYgOTAuMjgxMjUgNjQuMDI3MzQ0IDkwLjA4NTkzOCA2My45NDE0MDYgODkuODcxMDk0IFogTSA1MC43NTM5MDYgNTMuNzUgXCIvPlxyXG4gICAgPHBhdGggZD1cIk0gODcuNjM2NzE5IDI5LjQxNzk2OSBDIDg3LjgyNDIxOSAzMC43ODUxNTYgODcuOTI1NzgxIDMyLjI1MzkwNiA4Ny45MjU3ODEgMzMuODMyMDMxIEMgODcuOTI1NzgxIDM4LjE4MzU5NCA4Ny4xMTMyODEgNDMuMDc0MjE5IDg0LjY2Nzk2OSA0OS4xOTUzMTIgTCA3MS41NjI1IDg3LjA3NDIxOSBDIDg0LjMxNjQwNiA3OS42NDA2MjUgOTIuODk0NTMxIDY1LjgyNDIxOSA5Mi44OTQ1MzEgNTAgQyA5Mi44OTQ1MzEgNDIuNTQyOTY5IDkwLjk4ODI4MSAzNS41MzEyNSA4Ny42MzY3MTkgMjkuNDE3OTY5IFogTSA4Ny42MzY3MTkgMjkuNDE3OTY5IFwiLz5cclxuICAgIDxwYXRoIGQ9XCJNIDUwIDAgQyAyMi40MzM1OTQgMCAwIDIyLjQyOTY4OCAwIDUwIEMgMCA3Ny41NzAzMTIgMjIuNDMzNTk0IDEwMCA1MCAxMDAgQyA3Ny41NzAzMTIgMTAwIDEwMC4wMDM5MDYgNzcuNTcwMzEyIDEwMC4wMDM5MDYgNTAgQyAxMDAuMDAzOTA2IDIyLjQyOTY4OCA3Ny41NzAzMTIgMCA1MCAwIFogTSA1MCA5Ny43MDcwMzEgQyAyMy42OTUzMTIgOTcuNzA3MDMxIDIuMjkyOTY5IDc2LjMwNDY4OCAyLjI5Mjk2OSA1MCBDIDIuMjkyOTY5IDIzLjY5NTMxMiAyMy42OTUzMTIgMi4yOTI5NjkgNTAgMi4yOTI5NjkgQyA3Ni4zMDQ2ODggMi4yOTI5NjkgOTcuNzA3MDMxIDIzLjY5NTMxMiA5Ny43MDcwMzEgNTAgQyA5Ny43MDcwMzEgNzYuMzA0Njg4IDc2LjMwNDY4OCA5Ny43MDcwMzEgNTAgOTcuNzA3MDMxIFogTSA1MCA5Ny43MDcwMzEgXCIvPlxyXG4gIDwvZz5cclxuPC9zdmc+YFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZEljb25zID0gKCk6IHZvaWQgPT4ge1xyXG4gIE9iamVjdC5rZXlzKGljb25zKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIGFkZEljb24oa2V5LCBpY29uc1trZXldKTtcclxuICB9KTtcclxufTtcclxuIiwgImltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCwgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBXb3JkcHJlc3NQbHVnaW4gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgY3JlYXRlV29yZFByZXNzQ2xpZW50IH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5pbXBvcnQgeyBBcGlUeXBlIH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgY29uc3QgV29yZFByZXNzUHVibGlzaFZpZXdUeXBlID0gJ3dwLXB1Ymxpc2gtb3B0aW9ucyc7XHJcblxyXG5leHBvcnQgY2xhc3MgV29yZFByZXNzUHVibGlzaFZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgbGVhZjogV29ya3NwYWNlTGVhZixcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuICApIHtcclxuICAgIHN1cGVyKGxlYWYpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAnV29yZFByZXNzIFB1Ymxpc2gnO1xyXG4gIH1cclxuXHJcbiAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBXb3JkUHJlc3NQdWJsaXNoVmlld1R5cGU7XHJcbiAgfVxyXG5cclxuICBnZXRJY29uKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gJ3dwLWxvZ28nO1xyXG4gIH1cclxuXHJcbiAgbG9hZCgpOiB2b2lkIHtcclxuICAgIHN1cGVyLmxvYWQoKTtcclxuICAgIHRoaXMuZHJhdygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkcmF3KCk6IHZvaWQge1xyXG4gICAgY29uc3QgYWN0aW9uQnV0dG9uc0NvbnRyb2xEaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2Jyk7XHJcbiAgICBuZXcgQnV0dG9uQ29tcG9uZW50KGFjdGlvbkJ1dHRvbnNDb250cm9sRGl2KVxyXG4gICAgICAuc2V0QnV0dG9uVGV4dCgnUHVibGlzaCcpXHJcbiAgICAgIC5zZXRDbGFzcygnbW9kLWN0YScpXHJcbiAgICAgIC5vbkNsaWNrKCgpID0+IHtcclxuICAgICAgICBjb25zdCBjbGllbnQgPSBjcmVhdGVXb3JkUHJlc3NDbGllbnQodGhpcy5hcHAsIHRoaXMucGx1Z2luLCBBcGlUeXBlLlhNTF9SUEMpO1xyXG4gICAgICAgIGlmIChjbGllbnQpIHtcclxuICAgICAgICAgIGNsaWVudC5uZXdQb3N0KCkudGhlbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCAiLyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMjIsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkXG4gKi9cblxuLyoqXG4gKiBETyBOT1QgRURJVCBUSElTIEZJTEVcbiAqIFRoZSBjb2RlIGluIHRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBmaWxlcyBpbiAuL3NyYy9cbiAqL1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0cygpIHtcbiAgcmV0dXJuIHtcbiAgICBiYXNlVXJsOiBudWxsLFxuICAgIGJyZWFrczogZmFsc2UsXG4gICAgZXh0ZW5zaW9uczogbnVsbCxcbiAgICBnZm06IHRydWUsXG4gICAgaGVhZGVySWRzOiB0cnVlLFxuICAgIGhlYWRlclByZWZpeDogJycsXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuICAgIGxhbmdQcmVmaXg6ICdsYW5ndWFnZS0nLFxuICAgIG1hbmdsZTogdHJ1ZSxcbiAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgcmVuZGVyZXI6IG51bGwsXG4gICAgc2FuaXRpemU6IGZhbHNlLFxuICAgIHNhbml0aXplcjogbnVsbCxcbiAgICBzaWxlbnQ6IGZhbHNlLFxuICAgIHNtYXJ0TGlzdHM6IGZhbHNlLFxuICAgIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgICB0b2tlbml6ZXI6IG51bGwsXG4gICAgd2Fsa1Rva2VuczogbnVsbCxcbiAgICB4aHRtbDogZmFsc2VcbiAgfTtcbn1cblxubGV0IGRlZmF1bHRzID0gZ2V0RGVmYXVsdHMoKTtcblxuZnVuY3Rpb24gY2hhbmdlRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgZGVmYXVsdHMgPSBuZXdEZWZhdWx0cztcbn1cblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cbmNvbnN0IGVzY2FwZVRlc3QgPSAvWyY8PlwiJ10vO1xuY29uc3QgZXNjYXBlUmVwbGFjZSA9IC9bJjw+XCInXS9nO1xuY29uc3QgZXNjYXBlVGVzdE5vRW5jb2RlID0gL1s8PlwiJ118Jig/ISM/XFx3KzspLztcbmNvbnN0IGVzY2FwZVJlcGxhY2VOb0VuY29kZSA9IC9bPD5cIiddfCYoPyEjP1xcdys7KS9nO1xuY29uc3QgZXNjYXBlUmVwbGFjZW1lbnRzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnXG59O1xuY29uc3QgZ2V0RXNjYXBlUmVwbGFjZW1lbnQgPSAoY2gpID0+IGVzY2FwZVJlcGxhY2VtZW50c1tjaF07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCwgZW5jb2RlKSB7XG4gIGlmIChlbmNvZGUpIHtcbiAgICBpZiAoZXNjYXBlVGVzdC50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2UsIGdldEVzY2FwZVJlcGxhY2VtZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVzY2FwZVRlc3ROb0VuY29kZS50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2VOb0VuY29kZSwgZ2V0RXNjYXBlUmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBodG1sO1xufVxuXG5jb25zdCB1bmVzY2FwZVRlc3QgPSAvJigjKD86XFxkKyl8KD86I3hbMC05QS1GYS1mXSspfCg/OlxcdyspKTs/L2lnO1xuXG5mdW5jdGlvbiB1bmVzY2FwZShodG1sKSB7XG4gIC8vIGV4cGxpY2l0bHkgbWF0Y2ggZGVjaW1hbCwgaGV4LCBhbmQgbmFtZWQgSFRNTCBlbnRpdGllc1xuICByZXR1cm4gaHRtbC5yZXBsYWNlKHVuZXNjYXBlVGVzdCwgKF8sIG4pID0+IHtcbiAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChuID09PSAnY29sb24nKSByZXR1cm4gJzonO1xuICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICByZXR1cm4gbi5jaGFyQXQoMSkgPT09ICd4J1xuICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSlcbiAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKCtuLnN1YnN0cmluZygxKSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSk7XG59XG5cbmNvbnN0IGNhcmV0ID0gLyhefFteXFxbXSlcXF4vZztcbmZ1bmN0aW9uIGVkaXQocmVnZXgsIG9wdCkge1xuICByZWdleCA9IHJlZ2V4LnNvdXJjZSB8fCByZWdleDtcbiAgb3B0ID0gb3B0IHx8ICcnO1xuICBjb25zdCBvYmogPSB7XG4gICAgcmVwbGFjZTogKG5hbWUsIHZhbCkgPT4ge1xuICAgICAgdmFsID0gdmFsLnNvdXJjZSB8fCB2YWw7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZShjYXJldCwgJyQxJyk7XG4gICAgICByZWdleCA9IHJlZ2V4LnJlcGxhY2UobmFtZSwgdmFsKTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcbiAgICBnZXRSZWdleDogKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgsIG9wdCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub25Xb3JkQW5kQ29sb25UZXN0ID0gL1teXFx3Ol0vZztcbmNvbnN0IG9yaWdpbkluZGVwZW5kZW50VXJsID0gL14kfF5bYS16XVthLXowLTkrLi1dKjp8Xls/I10vaTtcbmZ1bmN0aW9uIGNsZWFuVXJsKHNhbml0aXplLCBiYXNlLCBocmVmKSB7XG4gIGlmIChzYW5pdGl6ZSkge1xuICAgIGxldCBwcm90O1xuICAgIHRyeSB7XG4gICAgICBwcm90ID0gZGVjb2RlVVJJQ29tcG9uZW50KHVuZXNjYXBlKGhyZWYpKVxuICAgICAgICAucmVwbGFjZShub25Xb3JkQW5kQ29sb25UZXN0LCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm90LmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCd2YnNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ2RhdGE6JykgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoYmFzZSAmJiAhb3JpZ2luSW5kZXBlbmRlbnRVcmwudGVzdChocmVmKSkge1xuICAgIGhyZWYgPSByZXNvbHZlVXJsKGJhc2UsIGhyZWYpO1xuICB9XG4gIHRyeSB7XG4gICAgaHJlZiA9IGVuY29kZVVSSShocmVmKS5yZXBsYWNlKC8lMjUvZywgJyUnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBocmVmO1xufVxuXG5jb25zdCBiYXNlVXJscyA9IHt9O1xuY29uc3QganVzdERvbWFpbiA9IC9eW146XSs6XFwvKlteL10qJC87XG5jb25zdCBwcm90b2NvbCA9IC9eKFteOl0rOilbXFxzXFxTXSokLztcbmNvbnN0IGRvbWFpbiA9IC9eKFteOl0rOlxcLypbXi9dKilbXFxzXFxTXSokLztcblxuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gIGlmICghYmFzZVVybHNbJyAnICsgYmFzZV0pIHtcbiAgICAvLyB3ZSBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgaW4gYmFzZSBhZnRlciB0aGUgbGFzdCBzbGFzaCBvZiBpdHMgcGF0aCBjb21wb25lbnQsXG4gICAgLy8gYnV0IHdlIG1pZ2h0IG5lZWQgdG8gYWRkIF90aGF0X1xuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tM1xuICAgIGlmIChqdXN0RG9tYWluLnRlc3QoYmFzZSkpIHtcbiAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVVybHNbJyAnICsgYmFzZV0gPSBydHJpbShiYXNlLCAnLycsIHRydWUpO1xuICAgIH1cbiAgfVxuICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG4gIGNvbnN0IHJlbGF0aXZlQmFzZSA9IGJhc2UuaW5kZXhPZignOicpID09PSAtMTtcblxuICBpZiAoaHJlZi5zdWJzdHJpbmcoMCwgMikgPT09ICcvLycpIHtcbiAgICBpZiAocmVsYXRpdmVCYXNlKSB7XG4gICAgICByZXR1cm4gaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShwcm90b2NvbCwgJyQxJykgKyBocmVmO1xuICB9IGVsc2UgaWYgKGhyZWYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICBpZiAocmVsYXRpdmVCYXNlKSB7XG4gICAgICByZXR1cm4gaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShkb21haW4sICckMScpICsgaHJlZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZSArIGhyZWY7XG4gIH1cbn1cblxuY29uc3Qgbm9vcFRlc3QgPSB7IGV4ZWM6IGZ1bmN0aW9uIG5vb3BUZXN0KCkge30gfTtcblxuZnVuY3Rpb24gbWVyZ2Uob2JqKSB7XG4gIGxldCBpID0gMSxcbiAgICB0YXJnZXQsXG4gICAga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBzcGxpdENlbGxzKHRhYmxlUm93LCBjb3VudCkge1xuICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAvLyBiZWZvcmUgaXQgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbSBhbiBlc2NhcGVkIHBpcGVcbiAgY29uc3Qgcm93ID0gdGFibGVSb3cucmVwbGFjZSgvXFx8L2csIChtYXRjaCwgb2Zmc2V0LCBzdHIpID0+IHtcbiAgICAgIGxldCBlc2NhcGVkID0gZmFsc2UsXG4gICAgICAgIGN1cnIgPSBvZmZzZXQ7XG4gICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICAgIC8vIG9kZCBudW1iZXIgb2Ygc2xhc2hlcyBtZWFucyB8IGlzIGVzY2FwZWRcbiAgICAgICAgLy8gc28gd2UgbGVhdmUgaXQgYWxvbmVcbiAgICAgICAgcmV0dXJuICd8JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFkZCBzcGFjZSBiZWZvcmUgdW5lc2NhcGVkIHxcbiAgICAgICAgcmV0dXJuICcgfCc7XG4gICAgICB9XG4gICAgfSksXG4gICAgY2VsbHMgPSByb3cuc3BsaXQoLyBcXHwvKTtcbiAgbGV0IGkgPSAwO1xuXG4gIC8vIEZpcnN0L2xhc3QgY2VsbCBpbiBhIHJvdyBjYW5ub3QgYmUgZW1wdHkgaWYgaXQgaGFzIG5vIGxlYWRpbmcvdHJhaWxpbmcgcGlwZVxuICBpZiAoIWNlbGxzWzBdLnRyaW0oKSkgeyBjZWxscy5zaGlmdCgpOyB9XG4gIGlmIChjZWxscy5sZW5ndGggPiAwICYmICFjZWxsc1tjZWxscy5sZW5ndGggLSAxXS50cmltKCkpIHsgY2VsbHMucG9wKCk7IH1cblxuICBpZiAoY2VsbHMubGVuZ3RoID4gY291bnQpIHtcbiAgICBjZWxscy5zcGxpY2UoY291bnQpO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChjZWxscy5sZW5ndGggPCBjb3VudCkgY2VsbHMucHVzaCgnJyk7XG4gIH1cblxuICBmb3IgKDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlIGlzIGlnbm9yZWQgcGVyIHRoZSBnZm0gc3BlY1xuICAgIGNlbGxzW2ldID0gY2VsbHNbaV0udHJpbSgpLnJlcGxhY2UoL1xcXFxcXHwvZywgJ3wnKTtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59XG5cbi8vIFJlbW92ZSB0cmFpbGluZyAnYydzLiBFcXVpdmFsZW50IHRvIHN0ci5yZXBsYWNlKC9jKiQvLCAnJykuXG4vLyAvYyokLyBpcyB2dWxuZXJhYmxlIHRvIFJFRE9TLlxuLy8gaW52ZXJ0OiBSZW1vdmUgc3VmZml4IG9mIG5vbi1jIGNoYXJzIGluc3RlYWQuIERlZmF1bHQgZmFsc2V5LlxuZnVuY3Rpb24gcnRyaW0oc3RyLCBjLCBpbnZlcnQpIHtcbiAgY29uc3QgbCA9IHN0ci5sZW5ndGg7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gTGVuZ3RoIG9mIHN1ZmZpeCBtYXRjaGluZyB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgbGV0IHN1ZmZMZW4gPSAwO1xuXG4gIC8vIFN0ZXAgbGVmdCB1bnRpbCB3ZSBmYWlsIHRvIG1hdGNoIHRoZSBpbnZlcnQgY29uZGl0aW9uLlxuICB3aGlsZSAoc3VmZkxlbiA8IGwpIHtcbiAgICBjb25zdCBjdXJyQ2hhciA9IHN0ci5jaGFyQXQobCAtIHN1ZmZMZW4gLSAxKTtcbiAgICBpZiAoY3VyckNoYXIgPT09IGMgJiYgIWludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSBpZiAoY3VyckNoYXIgIT09IGMgJiYgaW52ZXJ0KSB7XG4gICAgICBzdWZmTGVuKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyKDAsIGwgLSBzdWZmTGVuKTtcbn1cblxuZnVuY3Rpb24gZmluZENsb3NpbmdCcmFja2V0KHN0ciwgYikge1xuICBpZiAoc3RyLmluZGV4T2YoYlsxXSkgPT09IC0xKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGNvbnN0IGwgPSBzdHIubGVuZ3RoO1xuICBsZXQgbGV2ZWwgPSAwLFxuICAgIGkgPSAwO1xuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChzdHJbaV0gPT09ICdcXFxcJykge1xuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAoc3RyW2ldID09PSBiWzBdKSB7XG4gICAgICBsZXZlbCsrO1xuICAgIH0gZWxzZSBpZiAoc3RyW2ldID09PSBiWzFdKSB7XG4gICAgICBsZXZlbC0tO1xuICAgICAgaWYgKGxldmVsIDwgMCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KSB7XG4gIGlmIChvcHQgJiYgb3B0LnNhbml0aXplICYmICFvcHQuc2lsZW50KSB7XG4gICAgY29uc29sZS53YXJuKCdtYXJrZWQoKTogc2FuaXRpemUgYW5kIHNhbml0aXplciBwYXJhbWV0ZXJzIGFyZSBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMC43LjAsIHNob3VsZCBub3QgYmUgdXNlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFJlYWQgbW9yZSBoZXJlOiBodHRwczovL21hcmtlZC5qcy5vcmcvIy9VU0lOR19BRFZBTkNFRC5tZCNvcHRpb25zJyk7XG4gIH1cbn1cblxuLy8gY29waWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU0NTAxMTMvODA2Nzc3XG5mdW5jdGlvbiByZXBlYXRTdHJpbmcocGF0dGVybiwgY291bnQpIHtcbiAgaWYgKGNvdW50IDwgMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBsZXQgcmVzdWx0ID0gJyc7XG4gIHdoaWxlIChjb3VudCA+IDEpIHtcbiAgICBpZiAoY291bnQgJiAxKSB7XG4gICAgICByZXN1bHQgKz0gcGF0dGVybjtcbiAgICB9XG4gICAgY291bnQgPj49IDE7XG4gICAgcGF0dGVybiArPSBwYXR0ZXJuO1xuICB9XG4gIHJldHVybiByZXN1bHQgKyBwYXR0ZXJuO1xufVxuXG5mdW5jdGlvbiBvdXRwdXRMaW5rKGNhcCwgbGluaywgcmF3LCBsZXhlcikge1xuICBjb25zdCBocmVmID0gbGluay5ocmVmO1xuICBjb25zdCB0aXRsZSA9IGxpbmsudGl0bGUgPyBlc2NhcGUobGluay50aXRsZSkgOiBudWxsO1xuICBjb25zdCB0ZXh0ID0gY2FwWzFdLnJlcGxhY2UoL1xcXFwoW1xcW1xcXV0pL2csICckMScpO1xuXG4gIGlmIChjYXBbMF0uY2hhckF0KDApICE9PSAnIScpIHtcbiAgICBsZXhlci5zdGF0ZS5pbkxpbmsgPSB0cnVlO1xuICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgcmF3LFxuICAgICAgaHJlZixcbiAgICAgIHRpdGxlLFxuICAgICAgdGV4dCxcbiAgICAgIHRva2VuczogbGV4ZXIuaW5saW5lVG9rZW5zKHRleHQsIFtdKVxuICAgIH07XG4gICAgbGV4ZXIuc3RhdGUuaW5MaW5rID0gZmFsc2U7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnaW1hZ2UnLFxuICAgICAgcmF3LFxuICAgICAgaHJlZixcbiAgICAgIHRpdGxlLFxuICAgICAgdGV4dDogZXNjYXBlKHRleHQpXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRlbnRDb2RlQ29tcGVuc2F0aW9uKHJhdywgdGV4dCkge1xuICBjb25zdCBtYXRjaEluZGVudFRvQ29kZSA9IHJhdy5tYXRjaCgvXihcXHMrKSg/OmBgYCkvKTtcblxuICBpZiAobWF0Y2hJbmRlbnRUb0NvZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIGNvbnN0IGluZGVudFRvQ29kZSA9IG1hdGNoSW5kZW50VG9Db2RlWzFdO1xuXG4gIHJldHVybiB0ZXh0XG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5tYXAobm9kZSA9PiB7XG4gICAgICBjb25zdCBtYXRjaEluZGVudEluTm9kZSA9IG5vZGUubWF0Y2goL15cXHMrLyk7XG4gICAgICBpZiAobWF0Y2hJbmRlbnRJbk5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtpbmRlbnRJbk5vZGVdID0gbWF0Y2hJbmRlbnRJbk5vZGU7XG5cbiAgICAgIGlmIChpbmRlbnRJbk5vZGUubGVuZ3RoID49IGluZGVudFRvQ29kZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuc2xpY2UoaW5kZW50VG9Db2RlLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0pXG4gICAgLmpvaW4oJ1xcbicpO1xufVxuXG4vKipcbiAqIFRva2VuaXplclxuICovXG5jbGFzcyBUb2tlbml6ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBkZWZhdWx0cztcbiAgfVxuXG4gIHNwYWNlKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2submV3bGluZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCAmJiBjYXBbMF0ubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3NwYWNlJyxcbiAgICAgICAgcmF3OiBjYXBbMF1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgY29kZShzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmNvZGUuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHRleHQgPSBjYXBbMF0ucmVwbGFjZSgvXiB7MSw0fS9nbSwgJycpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgY29kZUJsb2NrU3R5bGU6ICdpbmRlbnRlZCcsXG4gICAgICAgIHRleHQ6ICF0aGlzLm9wdGlvbnMucGVkYW50aWNcbiAgICAgICAgICA/IHJ0cmltKHRleHQsICdcXG4nKVxuICAgICAgICAgIDogdGV4dFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmZW5jZXMoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5mZW5jZXMuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHJhdyA9IGNhcFswXTtcbiAgICAgIGNvbnN0IHRleHQgPSBpbmRlbnRDb2RlQ29tcGVuc2F0aW9uKHJhdywgY2FwWzNdIHx8ICcnKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICByYXcsXG4gICAgICAgIGxhbmc6IGNhcFsyXSA/IGNhcFsyXS50cmltKCkgOiBjYXBbMl0sXG4gICAgICAgIHRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgaGVhZGluZyhzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmhlYWRpbmcuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGxldCB0ZXh0ID0gY2FwWzJdLnRyaW0oKTtcblxuICAgICAgLy8gcmVtb3ZlIHRyYWlsaW5nICNzXG4gICAgICBpZiAoLyMkLy50ZXN0KHRleHQpKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWQgPSBydHJpbSh0ZXh0LCAnIycpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgdGV4dCA9IHRyaW1tZWQudHJpbSgpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0cmltbWVkIHx8IC8gJC8udGVzdCh0cmltbWVkKSkge1xuICAgICAgICAgIC8vIENvbW1vbk1hcmsgcmVxdWlyZXMgc3BhY2UgYmVmb3JlIHRyYWlsaW5nICNzXG4gICAgICAgICAgdGV4dCA9IHRyaW1tZWQudHJpbSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBkZXB0aDogY2FwWzFdLmxlbmd0aCxcbiAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgdG9rZW5zOiBbXVxuICAgICAgfTtcbiAgICAgIHRoaXMubGV4ZXIuaW5saW5lKHRva2VuLnRleHQsIHRva2VuLnRva2Vucyk7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgaHIoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5oci5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2hyJyxcbiAgICAgICAgcmF3OiBjYXBbMF1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgYmxvY2txdW90ZShzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmJsb2NrcXVvdGUuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHRleHQgPSBjYXBbMF0ucmVwbGFjZSgvXiAqPiA/L2dtLCAnJyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdibG9ja3F1b3RlJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRva2VuczogdGhpcy5sZXhlci5ibG9ja1Rva2Vucyh0ZXh0LCBbXSksXG4gICAgICAgIHRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgbGlzdChzcmMpIHtcbiAgICBsZXQgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5saXN0LmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgcmF3LCBpc3Rhc2ssIGlzY2hlY2tlZCwgaW5kZW50LCBpLCBibGFua0xpbmUsIGVuZHNXaXRoQmxhbmtMaW5lLFxuICAgICAgICBsaW5lLCBuZXh0TGluZSwgcmF3TGluZSwgaXRlbUNvbnRlbnRzLCBlbmRFYXJseTtcblxuICAgICAgbGV0IGJ1bGwgPSBjYXBbMV0udHJpbSgpO1xuICAgICAgY29uc3QgaXNvcmRlcmVkID0gYnVsbC5sZW5ndGggPiAxO1xuXG4gICAgICBjb25zdCBsaXN0ID0ge1xuICAgICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICAgIHJhdzogJycsXG4gICAgICAgIG9yZGVyZWQ6IGlzb3JkZXJlZCxcbiAgICAgICAgc3RhcnQ6IGlzb3JkZXJlZCA/ICtidWxsLnNsaWNlKDAsIC0xKSA6ICcnLFxuICAgICAgICBsb29zZTogZmFsc2UsXG4gICAgICAgIGl0ZW1zOiBbXVxuICAgICAgfTtcblxuICAgICAgYnVsbCA9IGlzb3JkZXJlZCA/IGBcXFxcZHsxLDl9XFxcXCR7YnVsbC5zbGljZSgtMSl9YCA6IGBcXFxcJHtidWxsfWA7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgYnVsbCA9IGlzb3JkZXJlZCA/IGJ1bGwgOiAnWyorLV0nO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgbmV4dCBsaXN0IGl0ZW1cbiAgICAgIGNvbnN0IGl0ZW1SZWdleCA9IG5ldyBSZWdFeHAoYF4oIHswLDN9JHtidWxsfSkoKD86IFteXFxcXG5dKik/KD86XFxcXG58JCkpYCk7XG5cbiAgICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgYnVsbGV0IHBvaW50IGNhbiBzdGFydCBhIG5ldyBMaXN0IEl0ZW1cbiAgICAgIHdoaWxlIChzcmMpIHtcbiAgICAgICAgZW5kRWFybHkgPSBmYWxzZTtcbiAgICAgICAgaWYgKCEoY2FwID0gaXRlbVJlZ2V4LmV4ZWMoc3JjKSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJ1bGVzLmJsb2NrLmhyLnRlc3Qoc3JjKSkgeyAvLyBFbmQgbGlzdCBpZiBidWxsZXQgd2FzIGFjdHVhbGx5IEhSIChwb3NzaWJseSBtb3ZlIGludG8gaXRlbVJlZ2V4PylcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJhdyA9IGNhcFswXTtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhyYXcubGVuZ3RoKTtcblxuICAgICAgICBsaW5lID0gY2FwWzJdLnNwbGl0KCdcXG4nLCAxKVswXTtcbiAgICAgICAgbmV4dExpbmUgPSBzcmMuc3BsaXQoJ1xcbicsIDEpWzBdO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgICBpbmRlbnQgPSAyO1xuICAgICAgICAgIGl0ZW1Db250ZW50cyA9IGxpbmUudHJpbUxlZnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmRlbnQgPSBjYXBbMl0uc2VhcmNoKC9bXiBdLyk7IC8vIEZpbmQgZmlyc3Qgbm9uLXNwYWNlIGNoYXJcbiAgICAgICAgICBpbmRlbnQgPSBpbmRlbnQgPiA0ID8gMSA6IGluZGVudDsgLy8gVHJlYXQgaW5kZW50ZWQgY29kZSBibG9ja3MgKD4gNCBzcGFjZXMpIGFzIGhhdmluZyBvbmx5IDEgaW5kZW50XG4gICAgICAgICAgaXRlbUNvbnRlbnRzID0gbGluZS5zbGljZShpbmRlbnQpO1xuICAgICAgICAgIGluZGVudCArPSBjYXBbMV0ubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgYmxhbmtMaW5lID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFsaW5lICYmIC9eICokLy50ZXN0KG5leHRMaW5lKSkgeyAvLyBJdGVtcyBiZWdpbiB3aXRoIGF0IG1vc3Qgb25lIGJsYW5rIGxpbmVcbiAgICAgICAgICByYXcgKz0gbmV4dExpbmUgKyAnXFxuJztcbiAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKG5leHRMaW5lLmxlbmd0aCArIDEpO1xuICAgICAgICAgIGVuZEVhcmx5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZW5kRWFybHkpIHtcbiAgICAgICAgICBjb25zdCBuZXh0QnVsbGV0UmVnZXggPSBuZXcgUmVnRXhwKGBeIHswLCR7TWF0aC5taW4oMywgaW5kZW50IC0gMSl9fSg/OlsqKy1dfFxcXFxkezEsOX1bLildKWApO1xuXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgZm9sbG93aW5nIGxpbmVzIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBMaXN0IEl0ZW1cbiAgICAgICAgICB3aGlsZSAoc3JjKSB7XG4gICAgICAgICAgICByYXdMaW5lID0gc3JjLnNwbGl0KCdcXG4nLCAxKVswXTtcbiAgICAgICAgICAgIGxpbmUgPSByYXdMaW5lO1xuXG4gICAgICAgICAgICAvLyBSZS1hbGlnbiB0byBmb2xsb3cgY29tbW9ubWFyayBuZXN0aW5nIHJ1bGVzXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoL14gezEsNH0oPz0oIHs0fSkqW14gXSkvZywgJyAgJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVuZCBsaXN0IGl0ZW0gaWYgZm91bmQgc3RhcnQgb2YgbmV3IGJ1bGxldFxuICAgICAgICAgICAgaWYgKG5leHRCdWxsZXRSZWdleC50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGluZS5zZWFyY2goL1teIF0vKSA+PSBpbmRlbnQgfHwgIWxpbmUudHJpbSgpKSB7IC8vIERlZGVudCBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgICBpdGVtQ29udGVudHMgKz0gJ1xcbicgKyBsaW5lLnNsaWNlKGluZGVudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFibGFua0xpbmUpIHsgLy8gVW50aWwgYmxhbmsgbGluZSwgaXRlbSBkb2Vzbid0IG5lZWQgaW5kZW50YXRpb25cbiAgICAgICAgICAgICAgaXRlbUNvbnRlbnRzICs9ICdcXG4nICsgbGluZTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIE90aGVyd2lzZSwgaW1wcm9wZXIgaW5kZW50YXRpb24gZW5kcyB0aGlzIGl0ZW1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghYmxhbmtMaW5lICYmICFsaW5lLnRyaW0oKSkgeyAvLyBDaGVjayBpZiBjdXJyZW50IGxpbmUgaXMgYmxhbmtcbiAgICAgICAgICAgICAgYmxhbmtMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmF3ICs9IHJhd0xpbmUgKyAnXFxuJztcbiAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcocmF3TGluZS5sZW5ndGggKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxpc3QubG9vc2UpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgcHJldmlvdXMgaXRlbSBlbmRlZCB3aXRoIGEgYmxhbmsgbGluZSwgdGhlIGxpc3QgaXMgbG9vc2VcbiAgICAgICAgICBpZiAoZW5kc1dpdGhCbGFua0xpbmUpIHtcbiAgICAgICAgICAgIGxpc3QubG9vc2UgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL1xcbiAqXFxuICokLy50ZXN0KHJhdykpIHtcbiAgICAgICAgICAgIGVuZHNXaXRoQmxhbmtMaW5lID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgdGFzayBsaXN0IGl0ZW1zXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgICAgICAgaXN0YXNrID0gL15cXFtbIHhYXVxcXSAvLmV4ZWMoaXRlbUNvbnRlbnRzKTtcbiAgICAgICAgICBpZiAoaXN0YXNrKSB7XG4gICAgICAgICAgICBpc2NoZWNrZWQgPSBpc3Rhc2tbMF0gIT09ICdbIF0gJztcbiAgICAgICAgICAgIGl0ZW1Db250ZW50cyA9IGl0ZW1Db250ZW50cy5yZXBsYWNlKC9eXFxbWyB4WF1cXF0gKy8sICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0Lml0ZW1zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdsaXN0X2l0ZW0nLFxuICAgICAgICAgIHJhdzogcmF3LFxuICAgICAgICAgIHRhc2s6ICEhaXN0YXNrLFxuICAgICAgICAgIGNoZWNrZWQ6IGlzY2hlY2tlZCxcbiAgICAgICAgICBsb29zZTogZmFsc2UsXG4gICAgICAgICAgdGV4dDogaXRlbUNvbnRlbnRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxpc3QucmF3ICs9IHJhdztcbiAgICAgIH1cblxuICAgICAgLy8gRG8gbm90IGNvbnN1bWUgbmV3bGluZXMgYXQgZW5kIG9mIGZpbmFsIGl0ZW0uIEFsdGVybmF0aXZlbHksIG1ha2UgaXRlbVJlZ2V4ICpzdGFydCogd2l0aCBhbnkgbmV3bGluZXMgdG8gc2ltcGxpZnkvc3BlZWQgdXAgZW5kc1dpdGhCbGFua0xpbmUgbG9naWNcbiAgICAgIGxpc3QuaXRlbXNbbGlzdC5pdGVtcy5sZW5ndGggLSAxXS5yYXcgPSByYXcudHJpbVJpZ2h0KCk7XG4gICAgICBsaXN0Lml0ZW1zW2xpc3QuaXRlbXMubGVuZ3RoIC0gMV0udGV4dCA9IGl0ZW1Db250ZW50cy50cmltUmlnaHQoKTtcbiAgICAgIGxpc3QucmF3ID0gbGlzdC5yYXcudHJpbVJpZ2h0KCk7XG5cbiAgICAgIGNvbnN0IGwgPSBsaXN0Lml0ZW1zLmxlbmd0aDtcblxuICAgICAgLy8gSXRlbSBjaGlsZCB0b2tlbnMgaGFuZGxlZCBoZXJlIGF0IGVuZCBiZWNhdXNlIHdlIG5lZWRlZCB0byBoYXZlIHRoZSBmaW5hbCBpdGVtIHRvIHRyaW0gaXQgZmlyc3RcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS50b3AgPSBmYWxzZTtcbiAgICAgICAgbGlzdC5pdGVtc1tpXS50b2tlbnMgPSB0aGlzLmxleGVyLmJsb2NrVG9rZW5zKGxpc3QuaXRlbXNbaV0udGV4dCwgW10pO1xuICAgICAgICBjb25zdCBzcGFjZXJzID0gbGlzdC5pdGVtc1tpXS50b2tlbnMuZmlsdGVyKHQgPT4gdC50eXBlID09PSAnc3BhY2UnKTtcbiAgICAgICAgY29uc3QgaGFzTXVsdGlwbGVMaW5lQnJlYWtzID0gc3BhY2Vycy5ldmVyeSh0ID0+IHtcbiAgICAgICAgICBjb25zdCBjaGFycyA9IHQucmF3LnNwbGl0KCcnKTtcbiAgICAgICAgICBsZXQgbGluZUJyZWFrcyA9IDA7XG4gICAgICAgICAgZm9yIChjb25zdCBjaGFyIG9mIGNoYXJzKSB7XG4gICAgICAgICAgICBpZiAoY2hhciA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgbGluZUJyZWFrcyArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpbmVCcmVha3MgPiAxKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFsaXN0Lmxvb3NlICYmIHNwYWNlcnMubGVuZ3RoICYmIGhhc011bHRpcGxlTGluZUJyZWFrcykge1xuICAgICAgICAgIC8vIEhhdmluZyBhIHNpbmdsZSBsaW5lIGJyZWFrIGRvZXNuJ3QgbWVhbiBhIGxpc3QgaXMgbG9vc2UuIEEgc2luZ2xlIGxpbmUgYnJlYWsgaXMgdGVybWluYXRpbmcgdGhlIGxhc3QgbGlzdCBpdGVtXG4gICAgICAgICAgbGlzdC5sb29zZSA9IHRydWU7XG4gICAgICAgICAgbGlzdC5pdGVtc1tpXS5sb29zZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuICB9XG5cbiAgaHRtbChzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmh0bWwuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBwcmU6ICF0aGlzLm9wdGlvbnMuc2FuaXRpemVyXG4gICAgICAgICAgJiYgKGNhcFsxXSA9PT0gJ3ByZScgfHwgY2FwWzFdID09PSAnc2NyaXB0JyB8fCBjYXBbMV0gPT09ICdzdHlsZScpLFxuICAgICAgICB0ZXh0OiBjYXBbMF1cbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNhbml0aXplKSB7XG4gICAgICAgIHRva2VuLnR5cGUgPSAncGFyYWdyYXBoJztcbiAgICAgICAgdG9rZW4udGV4dCA9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSkgOiBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgdG9rZW4udG9rZW5zID0gW107XG4gICAgICAgIHRoaXMubGV4ZXIuaW5saW5lKHRva2VuLnRleHQsIHRva2VuLnRva2Vucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgZGVmKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suZGVmLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBpZiAoY2FwWzNdKSBjYXBbM10gPSBjYXBbM10uc3Vic3RyaW5nKDEsIGNhcFszXS5sZW5ndGggLSAxKTtcbiAgICAgIGNvbnN0IHRhZyA9IGNhcFsxXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkZWYnLFxuICAgICAgICB0YWcsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBocmVmOiBjYXBbMl0sXG4gICAgICAgIHRpdGxlOiBjYXBbM11cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdGFibGUoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay50YWJsZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXSkubWFwKGMgPT4geyByZXR1cm4geyB0ZXh0OiBjIH07IH0pLFxuICAgICAgICBhbGlnbjogY2FwWzJdLnJlcGxhY2UoL14gKnxcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIHJvd3M6IGNhcFszXSAmJiBjYXBbM10udHJpbSgpID8gY2FwWzNdLnJlcGxhY2UoL1xcblsgXFx0XSokLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoaXRlbS5oZWFkZXIubGVuZ3RoID09PSBpdGVtLmFsaWduLmxlbmd0aCkge1xuICAgICAgICBpdGVtLnJhdyA9IGNhcFswXTtcblxuICAgICAgICBsZXQgbCA9IGl0ZW0uYWxpZ24ubGVuZ3RoO1xuICAgICAgICBsZXQgaSwgaiwgaywgcm93O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGwgPSBpdGVtLnJvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaXRlbS5yb3dzW2ldID0gc3BsaXRDZWxscyhpdGVtLnJvd3NbaV0sIGl0ZW0uaGVhZGVyLmxlbmd0aCkubWFwKGMgPT4geyByZXR1cm4geyB0ZXh0OiBjIH07IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFyc2UgY2hpbGQgdG9rZW5zIGluc2lkZSBoZWFkZXJzIGFuZCBjZWxsc1xuXG4gICAgICAgIC8vIGhlYWRlciBjaGlsZCB0b2tlbnNcbiAgICAgICAgbCA9IGl0ZW0uaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICAgIGl0ZW0uaGVhZGVyW2pdLnRva2VucyA9IFtdO1xuICAgICAgICAgIHRoaXMubGV4ZXIuaW5saW5lVG9rZW5zKGl0ZW0uaGVhZGVyW2pdLnRleHQsIGl0ZW0uaGVhZGVyW2pdLnRva2Vucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjZWxsIGNoaWxkIHRva2Vuc1xuICAgICAgICBsID0gaXRlbS5yb3dzLmxlbmd0aDtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICAgIHJvdyA9IGl0ZW0ucm93c1tqXTtcbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcm93Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICByb3dba10udG9rZW5zID0gW107XG4gICAgICAgICAgICB0aGlzLmxleGVyLmlubGluZVRva2Vucyhyb3dba10udGV4dCwgcm93W2tdLnRva2Vucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGhlYWRpbmcoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5saGVhZGluZy5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIGRlcHRoOiBjYXBbMl0uY2hhckF0KDApID09PSAnPScgPyAxIDogMixcbiAgICAgICAgdGV4dDogY2FwWzFdLFxuICAgICAgICB0b2tlbnM6IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5sZXhlci5pbmxpbmUodG9rZW4udGV4dCwgdG9rZW4udG9rZW5zKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gIH1cblxuICBwYXJhZ3JhcGgoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5wYXJhZ3JhcGguZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHRva2VuID0ge1xuICAgICAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQ6IGNhcFsxXS5jaGFyQXQoY2FwWzFdLmxlbmd0aCAtIDEpID09PSAnXFxuJ1xuICAgICAgICAgID8gY2FwWzFdLnNsaWNlKDAsIC0xKVxuICAgICAgICAgIDogY2FwWzFdLFxuICAgICAgICB0b2tlbnM6IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5sZXhlci5pbmxpbmUodG9rZW4udGV4dCwgdG9rZW4udG9rZW5zKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gIH1cblxuICB0ZXh0KHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2sudGV4dC5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQ6IGNhcFswXSxcbiAgICAgICAgdG9rZW5zOiBbXVxuICAgICAgfTtcbiAgICAgIHRoaXMubGV4ZXIuaW5saW5lKHRva2VuLnRleHQsIHRva2VuLnRva2Vucyk7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgZXNjYXBlKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmVzY2FwZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2VzY2FwZScsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICB0ZXh0OiBlc2NhcGUoY2FwWzFdKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB0YWcoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUudGFnLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBpZiAoIXRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rICYmIC9ePGEgL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5sZXhlci5zdGF0ZS5pbkxpbmsgJiYgL148XFwvYT4vaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrICYmIC9ePChwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrICYmIC9ePFxcLyhwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gJ3RleHQnXG4gICAgICAgICAgOiAnaHRtbCcsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBpbkxpbms6IHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rLFxuICAgICAgICBpblJhd0Jsb2NrOiB0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2ssXG4gICAgICAgIHRleHQ6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gKHRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pXG4gICAgICAgICAgICA6IGVzY2FwZShjYXBbMF0pKVxuICAgICAgICAgIDogY2FwWzBdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGxpbmsoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUubGluay5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdHJpbW1lZFVybCA9IGNhcFsyXS50cmltKCk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5wZWRhbnRpYyAmJiAvXjwvLnRlc3QodHJpbW1lZFVybCkpIHtcbiAgICAgICAgLy8gY29tbW9ubWFyayByZXF1aXJlcyBtYXRjaGluZyBhbmdsZSBicmFja2V0c1xuICAgICAgICBpZiAoISgvPiQvLnRlc3QodHJpbW1lZFVybCkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5kaW5nIGFuZ2xlIGJyYWNrZXQgY2Fubm90IGJlIGVzY2FwZWRcbiAgICAgICAgY29uc3QgcnRyaW1TbGFzaCA9IHJ0cmltKHRyaW1tZWRVcmwuc2xpY2UoMCwgLTEpLCAnXFxcXCcpO1xuICAgICAgICBpZiAoKHRyaW1tZWRVcmwubGVuZ3RoIC0gcnRyaW1TbGFzaC5sZW5ndGgpICUgMiA9PT0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZmluZCBjbG9zaW5nIHBhcmVudGhlc2lzXG4gICAgICAgIGNvbnN0IGxhc3RQYXJlbkluZGV4ID0gZmluZENsb3NpbmdCcmFja2V0KGNhcFsyXSwgJygpJyk7XG4gICAgICAgIGlmIChsYXN0UGFyZW5JbmRleCA+IC0xKSB7XG4gICAgICAgICAgY29uc3Qgc3RhcnQgPSBjYXBbMF0uaW5kZXhPZignIScpID09PSAwID8gNSA6IDQ7XG4gICAgICAgICAgY29uc3QgbGlua0xlbiA9IHN0YXJ0ICsgY2FwWzFdLmxlbmd0aCArIGxhc3RQYXJlbkluZGV4O1xuICAgICAgICAgIGNhcFsyXSA9IGNhcFsyXS5zdWJzdHJpbmcoMCwgbGFzdFBhcmVuSW5kZXgpO1xuICAgICAgICAgIGNhcFswXSA9IGNhcFswXS5zdWJzdHJpbmcoMCwgbGlua0xlbikudHJpbSgpO1xuICAgICAgICAgIGNhcFszXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgaHJlZiA9IGNhcFsyXTtcbiAgICAgIGxldCB0aXRsZSA9ICcnO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAvLyBzcGxpdCBwZWRhbnRpYyBocmVmIGFuZCB0aXRsZVxuICAgICAgICBjb25zdCBsaW5rID0gL14oW14nXCJdKlteXFxzXSlcXHMrKFsnXCJdKSguKilcXDIvLmV4ZWMoaHJlZik7XG5cbiAgICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgICBocmVmID0gbGlua1sxXTtcbiAgICAgICAgICB0aXRsZSA9IGxpbmtbM107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnNsaWNlKDEsIC0xKSA6ICcnO1xuICAgICAgfVxuXG4gICAgICBocmVmID0gaHJlZi50cmltKCk7XG4gICAgICBpZiAoL148Ly50ZXN0KGhyZWYpKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMgJiYgISgvPiQvLnRlc3QodHJpbW1lZFVybCkpKSB7XG4gICAgICAgICAgLy8gcGVkYW50aWMgYWxsb3dzIHN0YXJ0aW5nIGFuZ2xlIGJyYWNrZXQgd2l0aG91dCBlbmRpbmcgYW5nbGUgYnJhY2tldFxuICAgICAgICAgIGhyZWYgPSBocmVmLnNsaWNlKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhyZWYgPSBocmVmLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dExpbmsoY2FwLCB7XG4gICAgICAgIGhyZWY6IGhyZWYgPyBocmVmLnJlcGxhY2UodGhpcy5ydWxlcy5pbmxpbmUuX2VzY2FwZXMsICckMScpIDogaHJlZixcbiAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5fZXNjYXBlcywgJyQxJykgOiB0aXRsZVxuICAgICAgfSwgY2FwWzBdLCB0aGlzLmxleGVyKTtcbiAgICB9XG4gIH1cblxuICByZWZsaW5rKHNyYywgbGlua3MpIHtcbiAgICBsZXQgY2FwO1xuICAgIGlmICgoY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUucmVmbGluay5leGVjKHNyYykpXG4gICAgICAgIHx8IChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5ub2xpbmsuZXhlYyhzcmMpKSkge1xuICAgICAgbGV0IGxpbmsgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgbGluayA9IGxpbmtzW2xpbmsudG9Mb3dlckNhc2UoKV07XG4gICAgICBpZiAoIWxpbmsgfHwgIWxpbmsuaHJlZikge1xuICAgICAgICBjb25zdCB0ZXh0ID0gY2FwWzBdLmNoYXJBdCgwKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXRMaW5rKGNhcCwgbGluaywgY2FwWzBdLCB0aGlzLmxleGVyKTtcbiAgICB9XG4gIH1cblxuICBlbVN0cm9uZyhzcmMsIG1hc2tlZFNyYywgcHJldkNoYXIgPSAnJykge1xuICAgIGxldCBtYXRjaCA9IHRoaXMucnVsZXMuaW5saW5lLmVtU3Ryb25nLmxEZWxpbS5leGVjKHNyYyk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuO1xuXG4gICAgLy8gXyBjYW4ndCBiZSBiZXR3ZWVuIHR3byBhbHBoYW51bWVyaWNzLiBcXHB7TH1cXHB7Tn0gaW5jbHVkZXMgbm9uLWVuZ2xpc2ggYWxwaGFiZXQvbnVtYmVycyBhcyB3ZWxsXG4gICAgaWYgKG1hdGNoWzNdICYmIHByZXZDaGFyLm1hdGNoKC9bXFxwe0x9XFxwe059XS91KSkgcmV0dXJuO1xuXG4gICAgY29uc3QgbmV4dENoYXIgPSBtYXRjaFsxXSB8fCBtYXRjaFsyXSB8fCAnJztcblxuICAgIGlmICghbmV4dENoYXIgfHwgKG5leHRDaGFyICYmIChwcmV2Q2hhciA9PT0gJycgfHwgdGhpcy5ydWxlcy5pbmxpbmUucHVuY3R1YXRpb24uZXhlYyhwcmV2Q2hhcikpKSkge1xuICAgICAgY29uc3QgbExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aCAtIDE7XG4gICAgICBsZXQgckRlbGltLCByTGVuZ3RoLCBkZWxpbVRvdGFsID0gbExlbmd0aCwgbWlkRGVsaW1Ub3RhbCA9IDA7XG5cbiAgICAgIGNvbnN0IGVuZFJlZyA9IG1hdGNoWzBdWzBdID09PSAnKicgPyB0aGlzLnJ1bGVzLmlubGluZS5lbVN0cm9uZy5yRGVsaW1Bc3QgOiB0aGlzLnJ1bGVzLmlubGluZS5lbVN0cm9uZy5yRGVsaW1VbmQ7XG4gICAgICBlbmRSZWcubGFzdEluZGV4ID0gMDtcblxuICAgICAgLy8gQ2xpcCBtYXNrZWRTcmMgdG8gc2FtZSBzZWN0aW9uIG9mIHN0cmluZyBhcyBzcmMgKG1vdmUgdG8gbGV4ZXI/KVxuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKC0xICogc3JjLmxlbmd0aCArIGxMZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKG1hdGNoID0gZW5kUmVnLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICByRGVsaW0gPSBtYXRjaFsxXSB8fCBtYXRjaFsyXSB8fCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBtYXRjaFs2XTtcblxuICAgICAgICBpZiAoIXJEZWxpbSkgY29udGludWU7IC8vIHNraXAgc2luZ2xlICogaW4gX19hYmMqYWJjX19cblxuICAgICAgICByTGVuZ3RoID0gckRlbGltLmxlbmd0aDtcblxuICAgICAgICBpZiAobWF0Y2hbM10gfHwgbWF0Y2hbNF0pIHsgLy8gZm91bmQgYW5vdGhlciBMZWZ0IERlbGltXG4gICAgICAgICAgZGVsaW1Ub3RhbCArPSByTGVuZ3RoO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoWzVdIHx8IG1hdGNoWzZdKSB7IC8vIGVpdGhlciBMZWZ0IG9yIFJpZ2h0IERlbGltXG4gICAgICAgICAgaWYgKGxMZW5ndGggJSAzICYmICEoKGxMZW5ndGggKyByTGVuZ3RoKSAlIDMpKSB7XG4gICAgICAgICAgICBtaWREZWxpbVRvdGFsICs9IHJMZW5ndGg7XG4gICAgICAgICAgICBjb250aW51ZTsgLy8gQ29tbW9uTWFyayBFbXBoYXNpcyBSdWxlcyA5LTEwXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsaW1Ub3RhbCAtPSByTGVuZ3RoO1xuXG4gICAgICAgIGlmIChkZWxpbVRvdGFsID4gMCkgY29udGludWU7IC8vIEhhdmVuJ3QgZm91bmQgZW5vdWdoIGNsb3NpbmcgZGVsaW1pdGVyc1xuXG4gICAgICAgIC8vIFJlbW92ZSBleHRyYSBjaGFyYWN0ZXJzLiAqYSoqKiAtPiAqYSpcbiAgICAgICAgckxlbmd0aCA9IE1hdGgubWluKHJMZW5ndGgsIHJMZW5ndGggKyBkZWxpbVRvdGFsICsgbWlkRGVsaW1Ub3RhbCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGBlbWAgaWYgc21hbGxlc3QgZGVsaW1pdGVyIGhhcyBvZGQgY2hhciBjb3VudC4gKmEqKipcbiAgICAgICAgaWYgKE1hdGgubWluKGxMZW5ndGgsIHJMZW5ndGgpICUgMikge1xuICAgICAgICAgIGNvbnN0IHRleHQgPSBzcmMuc2xpY2UoMSwgbExlbmd0aCArIG1hdGNoLmluZGV4ICsgckxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdlbScsXG4gICAgICAgICAgICByYXc6IHNyYy5zbGljZSgwLCBsTGVuZ3RoICsgbWF0Y2guaW5kZXggKyByTGVuZ3RoICsgMSksXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2Vucyh0ZXh0LCBbXSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlICdzdHJvbmcnIGlmIHNtYWxsZXN0IGRlbGltaXRlciBoYXMgZXZlbiBjaGFyIGNvdW50LiAqKmEqKipcbiAgICAgICAgY29uc3QgdGV4dCA9IHNyYy5zbGljZSgyLCBsTGVuZ3RoICsgbWF0Y2guaW5kZXggKyByTGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ3N0cm9uZycsXG4gICAgICAgICAgcmF3OiBzcmMuc2xpY2UoMCwgbExlbmd0aCArIG1hdGNoLmluZGV4ICsgckxlbmd0aCArIDEpLFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2Vucyh0ZXh0LCBbXSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb2Rlc3BhbihzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5jb2RlLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgdGV4dCA9IGNhcFsyXS5yZXBsYWNlKC9cXG4vZywgJyAnKTtcbiAgICAgIGNvbnN0IGhhc05vblNwYWNlQ2hhcnMgPSAvW14gXS8udGVzdCh0ZXh0KTtcbiAgICAgIGNvbnN0IGhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzID0gL14gLy50ZXN0KHRleHQpICYmIC8gJC8udGVzdCh0ZXh0KTtcbiAgICAgIGlmIChoYXNOb25TcGFjZUNoYXJzICYmIGhhc1NwYWNlQ2hhcnNPbkJvdGhFbmRzKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygxLCB0ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgdGV4dCA9IGVzY2FwZSh0ZXh0LCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdjb2Rlc3BhbicsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICB0ZXh0XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGJyKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmJyLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnYnInLFxuICAgICAgICByYXc6IGNhcFswXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBkZWwoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUuZGVsLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZGVsJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQ6IGNhcFsyXSxcbiAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2VucyhjYXBbMl0sIFtdKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBhdXRvbGluayhzcmMsIG1hbmdsZSkge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmF1dG9saW5rLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgdGV4dCwgaHJlZjtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMub3B0aW9ucy5tYW5nbGUgPyBtYW5nbGUoY2FwWzFdKSA6IGNhcFsxXSk7XG4gICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgaHJlZixcbiAgICAgICAgdG9rZW5zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB1cmwoc3JjLCBtYW5nbGUpIHtcbiAgICBsZXQgY2FwO1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS51cmwuZXhlYyhzcmMpKSB7XG4gICAgICBsZXQgdGV4dCwgaHJlZjtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMub3B0aW9ucy5tYW5nbGUgPyBtYW5nbGUoY2FwWzBdKSA6IGNhcFswXSk7XG4gICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG8gZXh0ZW5kZWQgYXV0b2xpbmsgcGF0aCB2YWxpZGF0aW9uXG4gICAgICAgIGxldCBwcmV2Q2FwWmVybztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHByZXZDYXBaZXJvID0gY2FwWzBdO1xuICAgICAgICAgIGNhcFswXSA9IHRoaXMucnVsZXMuaW5saW5lLl9iYWNrcGVkYWwuZXhlYyhjYXBbMF0pWzBdO1xuICAgICAgICB9IHdoaWxlIChwcmV2Q2FwWmVybyAhPT0gY2FwWzBdKTtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMF0pO1xuICAgICAgICBpZiAoY2FwWzFdID09PSAnd3d3LicpIHtcbiAgICAgICAgICBocmVmID0gJ2h0dHA6Ly8nICsgdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgaHJlZixcbiAgICAgICAgdG9rZW5zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgcmF3OiB0ZXh0LFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBpbmxpbmVUZXh0KHNyYywgc21hcnR5cGFudHMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS50ZXh0LmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgdGV4dDtcbiAgICAgIGlmICh0aGlzLmxleGVyLnN0YXRlLmluUmF3QmxvY2spIHtcbiAgICAgICAgdGV4dCA9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZSA/ICh0aGlzLm9wdGlvbnMuc2FuaXRpemVyID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pIDogZXNjYXBlKGNhcFswXSkpIDogY2FwWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZSh0aGlzLm9wdGlvbnMuc21hcnR5cGFudHMgPyBzbWFydHlwYW50cyhjYXBbMF0pIDogY2FwWzBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQmxvY2stTGV2ZWwgR3JhbW1hclxuICovXG5jb25zdCBibG9jayA9IHtcbiAgbmV3bGluZTogL14oPzogKig/OlxcbnwkKSkrLyxcbiAgY29kZTogL14oIHs0fVteXFxuXSsoPzpcXG4oPzogKig/OlxcbnwkKSkqKT8pKy8sXG4gIGZlbmNlczogL14gezAsM30oYHszLH0oPz1bXmBcXG5dKlxcbil8fnszLH0pKFteXFxuXSopXFxuKD86fChbXFxzXFxTXSo/KVxcbikoPzogezAsM31cXDFbfmBdKiAqKD89XFxufCQpfCQpLyxcbiAgaHI6IC9eIHswLDN9KCg/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcKiAqKXszLH0pKD86XFxuK3wkKS8sXG4gIGhlYWRpbmc6IC9eIHswLDN9KCN7MSw2fSkoPz1cXHN8JCkoLiopKD86XFxuK3wkKS8sXG4gIGJsb2NrcXVvdGU6IC9eKCB7MCwzfT4gPyhwYXJhZ3JhcGh8W15cXG5dKikoPzpcXG58JCkpKy8sXG4gIGxpc3Q6IC9eKCB7MCwzfWJ1bGwpKCBbXlxcbl0rPyk/KD86XFxufCQpLyxcbiAgaHRtbDogJ14gezAsM30oPzonIC8vIG9wdGlvbmFsIGluZGVudGF0aW9uXG4gICAgKyAnPChzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKVtcXFxccz5dW1xcXFxzXFxcXFNdKj8oPzo8L1xcXFwxPlteXFxcXG5dKlxcXFxuK3wkKScgLy8gKDEpXG4gICAgKyAnfGNvbW1lbnRbXlxcXFxuXSooXFxcXG4rfCQpJyAvLyAoMilcbiAgICArICd8PFxcXFw/W1xcXFxzXFxcXFNdKj8oPzpcXFxcPz5cXFxcbip8JCknIC8vICgzKVxuICAgICsgJ3w8IVtBLVpdW1xcXFxzXFxcXFNdKj8oPzo+XFxcXG4qfCQpJyAvLyAoNClcbiAgICArICd8PCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qPyg/OlxcXFxdXFxcXF0+XFxcXG4qfCQpJyAvLyAoNSlcbiAgICArICd8PC8/KHRhZykoPzogK3xcXFxcbnwvPz4pW1xcXFxzXFxcXFNdKj8oPzooPzpcXFxcbiAqKStcXFxcbnwkKScgLy8gKDYpXG4gICAgKyAnfDwoPyFzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKShbYS16XVtcXFxcdy1dKikoPzphdHRyaWJ1dGUpKj8gKi8/Pig/PVsgXFxcXHRdKig/OlxcXFxufCQpKVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg3KSBvcGVuIHRhZ1xuICAgICsgJ3w8Lyg/IXNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWEpW2Etel1bXFxcXHctXSpcXFxccyo+KD89WyBcXFxcdF0qKD86XFxcXG58JCkpW1xcXFxzXFxcXFNdKj8oPzooPzpcXFxcbiAqKStcXFxcbnwkKScgLy8gKDcpIGNsb3NpbmcgdGFnXG4gICAgKyAnKScsXG4gIGRlZjogL14gezAsM31cXFsobGFiZWwpXFxdOiAqKD86XFxuICopPzw/KFteXFxzPl0rKT4/KD86KD86ICsoPzpcXG4gKik/fCAqXFxuICopKHRpdGxlKSk/ICooPzpcXG4rfCQpLyxcbiAgdGFibGU6IG5vb3BUZXN0LFxuICBsaGVhZGluZzogL14oW15cXG5dKylcXG4gezAsM30oPSt8LSspICooPzpcXG4rfCQpLyxcbiAgLy8gcmVnZXggdGVtcGxhdGUsIHBsYWNlaG9sZGVycyB3aWxsIGJlIHJlcGxhY2VkIGFjY29yZGluZyB0byBkaWZmZXJlbnQgcGFyYWdyYXBoXG4gIC8vIGludGVycnVwdGlvbiBydWxlcyBvZiBjb21tb25tYXJrIGFuZCB0aGUgb3JpZ2luYWwgbWFya2Rvd24gc3BlYzpcbiAgX3BhcmFncmFwaDogL14oW15cXG5dKyg/Olxcbig/IWhyfGhlYWRpbmd8bGhlYWRpbmd8YmxvY2txdW90ZXxmZW5jZXN8bGlzdHxodG1sfHRhYmxlfCArXFxuKVteXFxuXSspKikvLFxuICB0ZXh0OiAvXlteXFxuXSsvXG59O1xuXG5ibG9jay5fbGFiZWwgPSAvKD8hXFxzKlxcXSkoPzpcXFxcLnxbXlxcW1xcXVxcXFxdKSsvO1xuYmxvY2suX3RpdGxlID0gLyg/OlwiKD86XFxcXFwiP3xbXlwiXFxcXF0pKlwifCdbXidcXG5dKig/OlxcblteJ1xcbl0rKSpcXG4/J3xcXChbXigpXSpcXCkpLztcbmJsb2NrLmRlZiA9IGVkaXQoYmxvY2suZGVmKVxuICAucmVwbGFjZSgnbGFiZWwnLCBibG9jay5fbGFiZWwpXG4gIC5yZXBsYWNlKCd0aXRsZScsIGJsb2NrLl90aXRsZSlcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmJ1bGxldCA9IC8oPzpbKistXXxcXGR7MSw5fVsuKV0pLztcbmJsb2NrLmxpc3RJdGVtU3RhcnQgPSBlZGl0KC9eKCAqKShidWxsKSAqLylcbiAgLnJlcGxhY2UoJ2J1bGwnLCBibG9jay5idWxsZXQpXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5saXN0ID0gZWRpdChibG9jay5saXN0KVxuICAucmVwbGFjZSgvYnVsbC9nLCBibG9jay5idWxsZXQpXG4gIC5yZXBsYWNlKCdocicsICdcXFxcbisoPz1cXFxcMT8oPzooPzotICopezMsfXwoPzpfICopezMsfXwoPzpcXFxcKiAqKXszLH0pKD86XFxcXG4rfCQpKScpXG4gIC5yZXBsYWNlKCdkZWYnLCAnXFxcXG4rKD89JyArIGJsb2NrLmRlZi5zb3VyY2UgKyAnKScpXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5fdGFnID0gJ2FkZHJlc3N8YXJ0aWNsZXxhc2lkZXxiYXNlfGJhc2Vmb250fGJsb2NrcXVvdGV8Ym9keXxjYXB0aW9uJ1xuICArICd8Y2VudGVyfGNvbHxjb2xncm91cHxkZHxkZXRhaWxzfGRpYWxvZ3xkaXJ8ZGl2fGRsfGR0fGZpZWxkc2V0fGZpZ2NhcHRpb24nXG4gICsgJ3xmaWd1cmV8Zm9vdGVyfGZvcm18ZnJhbWV8ZnJhbWVzZXR8aFsxLTZdfGhlYWR8aGVhZGVyfGhyfGh0bWx8aWZyYW1lJ1xuICArICd8bGVnZW5kfGxpfGxpbmt8bWFpbnxtZW51fG1lbnVpdGVtfG1ldGF8bmF2fG5vZnJhbWVzfG9sfG9wdGdyb3VwfG9wdGlvbidcbiAgKyAnfHB8cGFyYW18c2VjdGlvbnxzb3VyY2V8c3VtbWFyeXx0YWJsZXx0Ym9keXx0ZHx0Zm9vdHx0aHx0aGVhZHx0aXRsZXx0cidcbiAgKyAnfHRyYWNrfHVsJztcbmJsb2NrLl9jb21tZW50ID0gLzwhLS0oPyEtPz4pW1xcc1xcU10qPyg/Oi0tPnwkKS87XG5ibG9jay5odG1sID0gZWRpdChibG9jay5odG1sLCAnaScpXG4gIC5yZXBsYWNlKCdjb21tZW50JywgYmxvY2suX2NvbW1lbnQpXG4gIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKVxuICAucmVwbGFjZSgnYXR0cmlidXRlJywgLyArW2EtekEtWjpfXVtcXHcuOi1dKig/OiAqPSAqXCJbXlwiXFxuXSpcInwgKj0gKidbXidcXG5dKid8ICo9ICpbXlxcc1wiJz08PmBdKyk/LylcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLnBhcmFncmFwaCA9IGVkaXQoYmxvY2suX3BhcmFncmFwaClcbiAgLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpXG4gIC5yZXBsYWNlKCdoZWFkaW5nJywgJyB7MCwzfSN7MSw2fSAnKVxuICAucmVwbGFjZSgnfGxoZWFkaW5nJywgJycpIC8vIHNldGV4IGhlYWRpbmdzIGRvbid0IGludGVycnVwdCBjb21tb25tYXJrIHBhcmFncmFwaHNcbiAgLnJlcGxhY2UoJ3x0YWJsZScsICcnKVxuICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgLnJlcGxhY2UoJ2ZlbmNlcycsICcgezAsM30oPzpgezMsfSg/PVteYFxcXFxuXSpcXFxcbil8fnszLH0pW15cXFxcbl0qXFxcXG4nKVxuICAucmVwbGFjZSgnbGlzdCcsICcgezAsM30oPzpbKistXXwxWy4pXSkgJykgLy8gb25seSBsaXN0cyBzdGFydGluZyBmcm9tIDEgY2FuIGludGVycnVwdFxuICAucmVwbGFjZSgnaHRtbCcsICc8Lz8oPzp0YWcpKD86ICt8XFxcXG58Lz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYXwhLS0pJylcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpIC8vIHBhcnMgY2FuIGJlIGludGVycnVwdGVkIGJ5IHR5cGUgKDYpIGh0bWwgYmxvY2tzXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5ibG9ja3F1b3RlID0gZWRpdChibG9jay5ibG9ja3F1b3RlKVxuICAucmVwbGFjZSgncGFyYWdyYXBoJywgYmxvY2sucGFyYWdyYXBoKVxuICAuZ2V0UmVnZXgoKTtcblxuLyoqXG4gKiBOb3JtYWwgQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLm5vcm1hbCA9IG1lcmdlKHt9LCBibG9jayk7XG5cbi8qKlxuICogR0ZNIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5nZm0gPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7XG4gIHRhYmxlOiAnXiAqKFteXFxcXG4gXS4qXFxcXHwuKilcXFxcbicgLy8gSGVhZGVyXG4gICAgKyAnIHswLDN9KD86XFxcXHwgKik/KDo/LSs6PyAqKD86XFxcXHwgKjo/LSs6PyAqKSopKD86XFxcXHwgKik/JyAvLyBBbGlnblxuICAgICsgJyg/OlxcXFxuKCg/Oig/ISAqXFxcXG58aHJ8aGVhZGluZ3xibG9ja3F1b3RlfGNvZGV8ZmVuY2VzfGxpc3R8aHRtbCkuKig/OlxcXFxufCQpKSopXFxcXG4qfCQpJyAvLyBDZWxsc1xufSk7XG5cbmJsb2NrLmdmbS50YWJsZSA9IGVkaXQoYmxvY2suZ2ZtLnRhYmxlKVxuICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnIHswLDN9I3sxLDZ9ICcpXG4gIC5yZXBsYWNlKCdibG9ja3F1b3RlJywgJyB7MCwzfT4nKVxuICAucmVwbGFjZSgnY29kZScsICcgezR9W15cXFxcbl0nKVxuICAucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpXG4gIC5yZXBsYWNlKCdsaXN0JywgJyB7MCwzfSg/OlsqKy1dfDFbLildKSAnKSAvLyBvbmx5IGxpc3RzIHN0YXJ0aW5nIGZyb20gMSBjYW4gaW50ZXJydXB0XG4gIC5yZXBsYWNlKCdodG1sJywgJzwvPyg/OnRhZykoPzogK3xcXFxcbnwvPz4pfDwoPzpzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhfCEtLSknKVxuICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykgLy8gdGFibGVzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suZ2ZtLnBhcmFncmFwaCA9IGVkaXQoYmxvY2suX3BhcmFncmFwaClcbiAgLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpXG4gIC5yZXBsYWNlKCdoZWFkaW5nJywgJyB7MCwzfSN7MSw2fSAnKVxuICAucmVwbGFjZSgnfGxoZWFkaW5nJywgJycpIC8vIHNldGV4IGhlYWRpbmdzIGRvbid0IGludGVycnVwdCBjb21tb25tYXJrIHBhcmFncmFwaHNcbiAgLnJlcGxhY2UoJ3RhYmxlJywgYmxvY2suZ2ZtLnRhYmxlKSAvLyBpbnRlcnJ1cHQgcGFyYWdyYXBocyB3aXRoIHRhYmxlXG4gIC5yZXBsYWNlKCdibG9ja3F1b3RlJywgJyB7MCwzfT4nKVxuICAucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpXG4gIC5yZXBsYWNlKCdsaXN0JywgJyB7MCwzfSg/OlsqKy1dfDFbLildKSAnKSAvLyBvbmx5IGxpc3RzIHN0YXJ0aW5nIGZyb20gMSBjYW4gaW50ZXJydXB0XG4gIC5yZXBsYWNlKCdodG1sJywgJzwvPyg/OnRhZykoPzogK3xcXFxcbnwvPz4pfDwoPzpzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhfCEtLSknKVxuICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykgLy8gcGFycyBjYW4gYmUgaW50ZXJydXB0ZWQgYnkgdHlwZSAoNikgaHRtbCBibG9ja3NcbiAgLmdldFJlZ2V4KCk7XG4vKipcbiAqIFBlZGFudGljIGdyYW1tYXIgKG9yaWdpbmFsIEpvaG4gR3J1YmVyJ3MgbG9vc2UgbWFya2Rvd24gc3BlY2lmaWNhdGlvbilcbiAqL1xuXG5ibG9jay5wZWRhbnRpYyA9IG1lcmdlKHt9LCBibG9jay5ub3JtYWwsIHtcbiAgaHRtbDogZWRpdChcbiAgICAnXiAqKD86Y29tbWVudCAqKD86XFxcXG58XFxcXHMqJCknXG4gICAgKyAnfDwodGFnKVtcXFxcc1xcXFxTXSs/PC9cXFxcMT4gKig/OlxcXFxuezIsfXxcXFxccyokKScgLy8gY2xvc2VkIHRhZ1xuICAgICsgJ3w8dGFnKD86XCJbXlwiXSpcInxcXCdbXlxcJ10qXFwnfFxcXFxzW15cXCdcIi8+XFxcXHNdKikqPy8/PiAqKD86XFxcXG57Mix9fFxcXFxzKiQpKScpXG4gICAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgICAucmVwbGFjZSgvdGFnL2csICcoPyEoPzonXG4gICAgICArICdhfGVtfHN0cm9uZ3xzbWFsbHxzfGNpdGV8cXxkZm58YWJicnxkYXRhfHRpbWV8Y29kZXx2YXJ8c2FtcHxrYmR8c3ViJ1xuICAgICAgKyAnfHN1cHxpfGJ8dXxtYXJrfHJ1Ynl8cnR8cnB8YmRpfGJkb3xzcGFufGJyfHdicnxpbnN8ZGVsfGltZyknXG4gICAgICArICdcXFxcYilcXFxcdysoPyE6fFteXFxcXHdcXFxcc0BdKkApXFxcXGInKVxuICAgIC5nZXRSZWdleCgpLFxuICBkZWY6IC9eICpcXFsoW15cXF1dKylcXF06ICo8PyhbXlxccz5dKyk+Pyg/OiArKFtcIihdW15cXG5dK1tcIildKSk/ICooPzpcXG4rfCQpLyxcbiAgaGVhZGluZzogL14oI3sxLDZ9KSguKikoPzpcXG4rfCQpLyxcbiAgZmVuY2VzOiBub29wVGVzdCwgLy8gZmVuY2VzIG5vdCBzdXBwb3J0ZWRcbiAgcGFyYWdyYXBoOiBlZGl0KGJsb2NrLm5vcm1hbC5fcGFyYWdyYXBoKVxuICAgIC5yZXBsYWNlKCdocicsIGJsb2NrLmhyKVxuICAgIC5yZXBsYWNlKCdoZWFkaW5nJywgJyAqI3sxLDZ9ICpbXlxcbl0nKVxuICAgIC5yZXBsYWNlKCdsaGVhZGluZycsIGJsb2NrLmxoZWFkaW5nKVxuICAgIC5yZXBsYWNlKCdibG9ja3F1b3RlJywgJyB7MCwzfT4nKVxuICAgIC5yZXBsYWNlKCd8ZmVuY2VzJywgJycpXG4gICAgLnJlcGxhY2UoJ3xsaXN0JywgJycpXG4gICAgLnJlcGxhY2UoJ3xodG1sJywgJycpXG4gICAgLmdldFJlZ2V4KClcbn0pO1xuXG4vKipcbiAqIElubGluZS1MZXZlbCBHcmFtbWFyXG4gKi9cbmNvbnN0IGlubGluZSA9IHtcbiAgZXNjYXBlOiAvXlxcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pLyxcbiAgYXV0b2xpbms6IC9ePChzY2hlbWU6W15cXHNcXHgwMC1cXHgxZjw+XSp8ZW1haWwpPi8sXG4gIHVybDogbm9vcFRlc3QsXG4gIHRhZzogJ15jb21tZW50J1xuICAgICsgJ3xePC9bYS16QS1aXVtcXFxcdzotXSpcXFxccyo+JyAvLyBzZWxmLWNsb3NpbmcgdGFnXG4gICAgKyAnfF48W2EtekEtWl1bXFxcXHctXSooPzphdHRyaWJ1dGUpKj9cXFxccyovPz4nIC8vIG9wZW4gdGFnXG4gICAgKyAnfF48XFxcXD9bXFxcXHNcXFxcU10qP1xcXFw/PicgLy8gcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiwgZS5nLiA8P3BocCA/PlxuICAgICsgJ3xePCFbYS16QS1aXStcXFxcc1tcXFxcc1xcXFxTXSo/PicgLy8gZGVjbGFyYXRpb24sIGUuZy4gPCFET0NUWVBFIGh0bWw+XG4gICAgKyAnfF48IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nLCAvLyBDREFUQSBzZWN0aW9uXG4gIGxpbms6IC9eIT9cXFsobGFiZWwpXFxdXFwoXFxzKihocmVmKSg/OlxccysodGl0bGUpKT9cXHMqXFwpLyxcbiAgcmVmbGluazogL14hP1xcWyhsYWJlbClcXF1cXFsocmVmKVxcXS8sXG4gIG5vbGluazogL14hP1xcWyhyZWYpXFxdKD86XFxbXFxdKT8vLFxuICByZWZsaW5rU2VhcmNoOiAncmVmbGlua3xub2xpbmsoPyFcXFxcKCknLFxuICBlbVN0cm9uZzoge1xuICAgIGxEZWxpbTogL14oPzpcXCorKD86KFtwdW5jdF9dKXxbXlxccypdKSl8Xl8rKD86KFtwdW5jdCpdKXwoW15cXHNfXSkpLyxcbiAgICAvLyAgICAgICAgKDEpIGFuZCAoMikgY2FuIG9ubHkgYmUgYSBSaWdodCBEZWxpbWl0ZXIuICgzKSBhbmQgKDQpIGNhbiBvbmx5IGJlIExlZnQuICAoNSkgYW5kICg2KSBjYW4gYmUgZWl0aGVyIExlZnQgb3IgUmlnaHQuXG4gICAgLy8gICAgICAgICgpIFNraXAgb3JwaGFuIGRlbGltIGluc2lkZSBzdHJvbmcgICAgKDEpICMqKiogICAgICAgICAgICAgICAgKDIpIGEqKiojLCBhKioqICAgICAgICAgICAgICAgICAgICgzKSAjKioqYSwgKioqYSAgICAgICAgICAgICAgICAgKDQpICoqKiMgICAgICAgICAgICAgICg1KSAjKioqIyAgICAgICAgICAgICAgICAgKDYpIGEqKiphXG4gICAgckRlbGltQXN0OiAvXlteXypdKj9cXF9cXF9bXl8qXSo/XFwqW15fKl0qPyg/PVxcX1xcXyl8W3B1bmN0X10oXFwqKykoPz1bXFxzXXwkKXxbXnB1bmN0Kl9cXHNdKFxcKispKD89W3B1bmN0X1xcc118JCl8W3B1bmN0X1xcc10oXFwqKykoPz1bXnB1bmN0Kl9cXHNdKXxbXFxzXShcXCorKSg/PVtwdW5jdF9dKXxbcHVuY3RfXShcXCorKSg/PVtwdW5jdF9dKXxbXnB1bmN0Kl9cXHNdKFxcKispKD89W15wdW5jdCpfXFxzXSkvLFxuICAgIHJEZWxpbVVuZDogL15bXl8qXSo/XFwqXFwqW15fKl0qP1xcX1teXypdKj8oPz1cXCpcXCopfFtwdW5jdCpdKFxcXyspKD89W1xcc118JCl8W15wdW5jdCpfXFxzXShcXF8rKSg/PVtwdW5jdCpcXHNdfCQpfFtwdW5jdCpcXHNdKFxcXyspKD89W15wdW5jdCpfXFxzXSl8W1xcc10oXFxfKykoPz1bcHVuY3QqXSl8W3B1bmN0Kl0oXFxfKykoPz1bcHVuY3QqXSkvIC8vIF4tIE5vdCBhbGxvd2VkIGZvciBfXG4gIH0sXG4gIGNvZGU6IC9eKGArKShbXmBdfFteYF1bXFxzXFxTXSo/W15gXSlcXDEoPyFgKS8sXG4gIGJyOiAvXiggezIsfXxcXFxcKVxcbig/IVxccyokKS8sXG4gIGRlbDogbm9vcFRlc3QsXG4gIHRleHQ6IC9eKGArfFteYF0pKD86KD89IHsyLH1cXG4pfFtcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCpfXXxcXGJffCQpfFteIF0oPz0gezIsfVxcbikpKS8sXG4gIHB1bmN0dWF0aW9uOiAvXihbXFxzcHVuY3R1YXRpb25dKS9cbn07XG5cbi8vIGxpc3Qgb2YgcHVuY3R1YXRpb24gbWFya3MgZnJvbSBDb21tb25NYXJrIHNwZWNcbi8vIHdpdGhvdXQgKiBhbmQgXyB0byBoYW5kbGUgdGhlIGRpZmZlcmVudCBlbXBoYXNpcyBtYXJrZXJzICogYW5kIF9cbmlubGluZS5fcHVuY3R1YXRpb24gPSAnIVwiIyQlJlxcJygpK1xcXFwtLiwvOjs8PT4/QFxcXFxbXFxcXF1gXnt8fX4nO1xuaW5saW5lLnB1bmN0dWF0aW9uID0gZWRpdChpbmxpbmUucHVuY3R1YXRpb24pLnJlcGxhY2UoL3B1bmN0dWF0aW9uL2csIGlubGluZS5fcHVuY3R1YXRpb24pLmdldFJlZ2V4KCk7XG5cbi8vIHNlcXVlbmNlcyBlbSBzaG91bGQgc2tpcCBvdmVyIFt0aXRsZV0obGluayksIGBjb2RlYCwgPGh0bWw+XG5pbmxpbmUuYmxvY2tTa2lwID0gL1xcW1teXFxdXSo/XFxdXFwoW15cXCldKj9cXCl8YFteYF0qP2B8PFtePl0qPz4vZztcbmlubGluZS5lc2NhcGVkRW1TdCA9IC9cXFxcXFwqfFxcXFxfL2c7XG5cbmlubGluZS5fY29tbWVudCA9IGVkaXQoYmxvY2suX2NvbW1lbnQpLnJlcGxhY2UoJyg/Oi0tPnwkKScsICctLT4nKS5nZXRSZWdleCgpO1xuXG5pbmxpbmUuZW1TdHJvbmcubERlbGltID0gZWRpdChpbmxpbmUuZW1TdHJvbmcubERlbGltKVxuICAucmVwbGFjZSgvcHVuY3QvZywgaW5saW5lLl9wdW5jdHVhdGlvbilcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5lbVN0cm9uZy5yRGVsaW1Bc3QgPSBlZGl0KGlubGluZS5lbVN0cm9uZy5yRGVsaW1Bc3QsICdnJylcbiAgLnJlcGxhY2UoL3B1bmN0L2csIGlubGluZS5fcHVuY3R1YXRpb24pXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuZW1TdHJvbmcuckRlbGltVW5kID0gZWRpdChpbmxpbmUuZW1TdHJvbmcuckRlbGltVW5kLCAnZycpXG4gIC5yZXBsYWNlKC9wdW5jdC9nLCBpbmxpbmUuX3B1bmN0dWF0aW9uKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9lc2NhcGVzID0gL1xcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pL2c7XG5cbmlubGluZS5fc2NoZW1lID0gL1thLXpBLVpdW2EtekEtWjAtOSsuLV17MSwzMX0vO1xuaW5saW5lLl9lbWFpbCA9IC9bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dKyhAKVthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrKD8hWy1fXSkvO1xuaW5saW5lLmF1dG9saW5rID0gZWRpdChpbmxpbmUuYXV0b2xpbmspXG4gIC5yZXBsYWNlKCdzY2hlbWUnLCBpbmxpbmUuX3NjaGVtZSlcbiAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLl9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5fYXR0cmlidXRlID0gL1xccytbYS16QS1aOl9dW1xcdy46LV0qKD86XFxzKj1cXHMqXCJbXlwiXSpcInxcXHMqPVxccyonW14nXSonfFxccyo9XFxzKlteXFxzXCInPTw+YF0rKT8vO1xuXG5pbmxpbmUudGFnID0gZWRpdChpbmxpbmUudGFnKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGlubGluZS5fY29tbWVudClcbiAgLnJlcGxhY2UoJ2F0dHJpYnV0ZScsIGlubGluZS5fYXR0cmlidXRlKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9sYWJlbCA9IC8oPzpcXFsoPzpcXFxcLnxbXlxcW1xcXVxcXFxdKSpcXF18XFxcXC58YFteYF0qYHxbXlxcW1xcXVxcXFxgXSkqPy87XG5pbmxpbmUuX2hyZWYgPSAvPCg/OlxcXFwufFteXFxuPD5cXFxcXSkrPnxbXlxcc1xceDAwLVxceDFmXSovO1xuaW5saW5lLl90aXRsZSA9IC9cIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnKD86XFxcXCc/fFteJ1xcXFxdKSonfFxcKCg/OlxcXFxcXCk/fFteKVxcXFxdKSpcXCkvO1xuXG5pbmxpbmUubGluayA9IGVkaXQoaW5saW5lLmxpbmspXG4gIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gIC5yZXBsYWNlKCdocmVmJywgaW5saW5lLl9ocmVmKVxuICAucmVwbGFjZSgndGl0bGUnLCBpbmxpbmUuX3RpdGxlKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLnJlZmxpbmsgPSBlZGl0KGlubGluZS5yZWZsaW5rKVxuICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAucmVwbGFjZSgncmVmJywgYmxvY2suX2xhYmVsKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLm5vbGluayA9IGVkaXQoaW5saW5lLm5vbGluaylcbiAgLnJlcGxhY2UoJ3JlZicsIGJsb2NrLl9sYWJlbClcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5yZWZsaW5rU2VhcmNoID0gZWRpdChpbmxpbmUucmVmbGlua1NlYXJjaCwgJ2cnKVxuICAucmVwbGFjZSgncmVmbGluaycsIGlubGluZS5yZWZsaW5rKVxuICAucmVwbGFjZSgnbm9saW5rJywgaW5saW5lLm5vbGluaylcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogTm9ybWFsIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLm5vcm1hbCA9IG1lcmdlKHt9LCBpbmxpbmUpO1xuXG4vKipcbiAqIFBlZGFudGljIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLnBlZGFudGljID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgc3Ryb25nOiB7XG4gICAgc3RhcnQ6IC9eX198XFwqXFwqLyxcbiAgICBtaWRkbGU6IC9eX18oPz1cXFMpKFtcXHNcXFNdKj9cXFMpX18oPyFfKXxeXFwqXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKlxcKig/IVxcKikvLFxuICAgIGVuZEFzdDogL1xcKlxcKig/IVxcKikvZyxcbiAgICBlbmRVbmQ6IC9fXyg/IV8pL2dcbiAgfSxcbiAgZW06IHtcbiAgICBzdGFydDogL15ffFxcKi8sXG4gICAgbWlkZGxlOiAvXigpXFwqKD89XFxTKShbXFxzXFxTXSo/XFxTKVxcKig/IVxcKil8Xl8oPz1cXFMpKFtcXHNcXFNdKj9cXFMpXyg/IV8pLyxcbiAgICBlbmRBc3Q6IC9cXCooPyFcXCopL2csXG4gICAgZW5kVW5kOiAvXyg/IV8pL2dcbiAgfSxcbiAgbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxcKCguKj8pXFwpLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpLFxuICByZWZsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFxzKlxcWyhbXlxcXV0qKVxcXS8pXG4gICAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogR0ZNIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLmdmbSA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gIGVzY2FwZTogZWRpdChpbmxpbmUuZXNjYXBlKS5yZXBsYWNlKCddKScsICd+fF0pJykuZ2V0UmVnZXgoKSxcbiAgX2V4dGVuZGVkX2VtYWlsOiAvW0EtWmEtejAtOS5fKy1dKyhAKVthLXpBLVowLTktX10rKD86XFwuW2EtekEtWjAtOS1fXSpbYS16QS1aMC05XSkrKD8hWy1fXSkvLFxuICB1cmw6IC9eKCg/OmZ0cHxodHRwcz8pOlxcL1xcL3x3d3dcXC4pKD86W2EtekEtWjAtOVxcLV0rXFwuPykrW15cXHM8XSp8XmVtYWlsLyxcbiAgX2JhY2twZWRhbDogLyg/OltePyEuLDo7Kl9+KCkmXSt8XFwoW14pXSpcXCl8Jig/IVthLXpBLVowLTldKzskKXxbPyEuLDo7Kl9+KV0rKD8hJCkpKy8sXG4gIGRlbDogL14ofn4/KSg/PVteXFxzfl0pKFtcXHNcXFNdKj9bXlxcc35dKVxcMSg/PVtefl18JCkvLFxuICB0ZXh0OiAvXihbYH5dK3xbXmB+XSkoPzooPz0gezIsfVxcbil8KD89W2EtekEtWjAtOS4hIyQlJicqK1xcLz0/X2B7XFx8fX4tXStAKXxbXFxzXFxTXSo/KD86KD89W1xcXFw8IVxcW2Aqfl9dfFxcYl98aHR0cHM/OlxcL1xcL3xmdHA6XFwvXFwvfHd3d1xcLnwkKXxbXiBdKD89IHsyLH1cXG4pfFteYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dKD89W2EtekEtWjAtOS4hIyQlJicqK1xcLz0/X2B7XFx8fX4tXStAKSkpL1xufSk7XG5cbmlubGluZS5nZm0udXJsID0gZWRpdChpbmxpbmUuZ2ZtLnVybCwgJ2knKVxuICAucmVwbGFjZSgnZW1haWwnLCBpbmxpbmUuZ2ZtLl9leHRlbmRlZF9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG4vKipcbiAqIEdGTSArIExpbmUgQnJlYWtzIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLmJyZWFrcyA9IG1lcmdlKHt9LCBpbmxpbmUuZ2ZtLCB7XG4gIGJyOiBlZGl0KGlubGluZS5icikucmVwbGFjZSgnezIsfScsICcqJykuZ2V0UmVnZXgoKSxcbiAgdGV4dDogZWRpdChpbmxpbmUuZ2ZtLnRleHQpXG4gICAgLnJlcGxhY2UoJ1xcXFxiXycsICdcXFxcYl98IHsyLH1cXFxcbicpXG4gICAgLnJlcGxhY2UoL1xcezIsXFx9L2csICcqJylcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogc21hcnR5cGFudHMgdGV4dCByZXBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBzbWFydHlwYW50cyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLy8gZW0tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tLS9nLCAnXFx1MjAxNCcpXG4gICAgLy8gZW4tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tL2csICdcXHUyMDEzJylcbiAgICAvLyBvcGVuaW5nIHNpbmdsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XCJcXHNdKScvZywgJyQxXFx1MjAxOCcpXG4gICAgLy8gY2xvc2luZyBzaW5nbGVzICYgYXBvc3Ryb3BoZXNcbiAgICAucmVwbGFjZSgvJy9nLCAnXFx1MjAxOScpXG4gICAgLy8gb3BlbmluZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1xcdTIwMThcXHNdKVwiL2csICckMVxcdTIwMWMnKVxuICAgIC8vIGNsb3NpbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC9cIi9nLCAnXFx1MjAxZCcpXG4gICAgLy8gZWxsaXBzZXNcbiAgICAucmVwbGFjZSgvXFwuezN9L2csICdcXHUyMDI2Jyk7XG59XG5cbi8qKlxuICogbWFuZ2xlIGVtYWlsIGFkZHJlc3Nlc1xuICovXG5mdW5jdGlvbiBtYW5nbGUodGV4dCkge1xuICBsZXQgb3V0ID0gJycsXG4gICAgaSxcbiAgICBjaDtcblxuICBjb25zdCBsID0gdGV4dC5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBjaCA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAgY2ggPSAneCcgKyBjaC50b1N0cmluZygxNik7XG4gICAgfVxuICAgIG91dCArPSAnJiMnICsgY2ggKyAnOyc7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEJsb2NrIExleGVyXG4gKi9cbmNsYXNzIExleGVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMudG9rZW5zID0gW107XG4gICAgdGhpcy50b2tlbnMubGlua3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7XG4gICAgdGhpcy5vcHRpb25zLnRva2VuaXplciA9IHRoaXMub3B0aW9ucy50b2tlbml6ZXIgfHwgbmV3IFRva2VuaXplcigpO1xuICAgIHRoaXMudG9rZW5pemVyID0gdGhpcy5vcHRpb25zLnRva2VuaXplcjtcbiAgICB0aGlzLnRva2VuaXplci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIHRoaXMudG9rZW5pemVyLmxleGVyID0gdGhpcztcbiAgICB0aGlzLmlubGluZVF1ZXVlID0gW107XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGluTGluazogZmFsc2UsXG4gICAgICBpblJhd0Jsb2NrOiBmYWxzZSxcbiAgICAgIHRvcDogdHJ1ZVxuICAgIH07XG5cbiAgICBjb25zdCBydWxlcyA9IHtcbiAgICAgIGJsb2NrOiBibG9jay5ub3JtYWwsXG4gICAgICBpbmxpbmU6IGlubGluZS5ub3JtYWxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgcnVsZXMuYmxvY2sgPSBibG9jay5wZWRhbnRpYztcbiAgICAgIHJ1bGVzLmlubGluZSA9IGlubGluZS5wZWRhbnRpYztcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICAgIHJ1bGVzLmJsb2NrID0gYmxvY2suZ2ZtO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5icmVha3MpIHtcbiAgICAgICAgcnVsZXMuaW5saW5lID0gaW5saW5lLmJyZWFrcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJ1bGVzLmlubGluZSA9IGlubGluZS5nZm07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudG9rZW5pemVyLnJ1bGVzID0gcnVsZXM7XG4gIH1cblxuICAvKipcbiAgICogRXhwb3NlIFJ1bGVzXG4gICAqL1xuICBzdGF0aWMgZ2V0IHJ1bGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBibG9jayxcbiAgICAgIGlubGluZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIExleCBNZXRob2RcbiAgICovXG4gIHN0YXRpYyBsZXgoc3JjLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGV4ZXIgPSBuZXcgTGV4ZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIGxleGVyLmxleChzcmMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBMZXggSW5saW5lIE1ldGhvZFxuICAgKi9cbiAgc3RhdGljIGxleElubGluZShzcmMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihvcHRpb25zKTtcbiAgICByZXR1cm4gbGV4ZXIuaW5saW5lVG9rZW5zKHNyYyk7XG4gIH1cblxuICAvKipcbiAgICogUHJlcHJvY2Vzc2luZ1xuICAgKi9cbiAgbGV4KHNyYykge1xuICAgIHNyYyA9IHNyY1xuICAgICAgLnJlcGxhY2UoL1xcclxcbnxcXHIvZywgJ1xcbicpXG4gICAgICAucmVwbGFjZSgvXFx0L2csICcgICAgJyk7XG5cbiAgICB0aGlzLmJsb2NrVG9rZW5zKHNyYywgdGhpcy50b2tlbnMpO1xuXG4gICAgbGV0IG5leHQ7XG4gICAgd2hpbGUgKG5leHQgPSB0aGlzLmlubGluZVF1ZXVlLnNoaWZ0KCkpIHtcbiAgICAgIHRoaXMuaW5saW5lVG9rZW5zKG5leHQuc3JjLCBuZXh0LnRva2Vucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudG9rZW5zO1xuICB9XG5cbiAgLyoqXG4gICAqIExleGluZ1xuICAgKi9cbiAgYmxvY2tUb2tlbnMoc3JjLCB0b2tlbnMgPSBbXSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgIHNyYyA9IHNyYy5yZXBsYWNlKC9eICskL2dtLCAnJyk7XG4gICAgfVxuICAgIGxldCB0b2tlbiwgbGFzdFRva2VuLCBjdXRTcmMsIGxhc3RQYXJhZ3JhcGhDbGlwcGVkO1xuXG4gICAgd2hpbGUgKHNyYykge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zXG4gICAgICAgICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLmJsb2NrXG4gICAgICAgICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLmJsb2NrLnNvbWUoKGV4dFRva2VuaXplcikgPT4ge1xuICAgICAgICAgIGlmICh0b2tlbiA9IGV4dFRva2VuaXplci5jYWxsKHsgbGV4ZXI6IHRoaXMgfSwgc3JjLCB0b2tlbnMpKSB7XG4gICAgICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIG5ld2xpbmVcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnNwYWNlKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgaWYgKHRva2VuLnJhdy5sZW5ndGggPT09IDEgJiYgdG9rZW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBpZiB0aGVyZSdzIGEgc2luZ2xlIFxcbiBhcyBhIHNwYWNlciwgaXQncyB0ZXJtaW5hdGluZyB0aGUgbGFzdCBsaW5lLFxuICAgICAgICAgIC8vIHNvIG1vdmUgaXQgdGhlcmUgc28gdGhhdCB3ZSBkb24ndCBnZXQgdW5lY2Vzc2FyeSBwYXJhZ3JhcGggdGFnc1xuICAgICAgICAgIHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0ucmF3ICs9ICdcXG4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gY29kZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuY29kZShzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIC8vIEFuIGluZGVudGVkIGNvZGUgYmxvY2sgY2Fubm90IGludGVycnVwdCBhIHBhcmFncmFwaC5cbiAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiAobGFzdFRva2VuLnR5cGUgPT09ICdwYXJhZ3JhcGgnIHx8IGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZmVuY2VzXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5mZW5jZXMoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBoZWFkaW5nXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5oZWFkaW5nKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaHJcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmhyKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gYmxvY2txdW90ZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYmxvY2txdW90ZShzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGxpc3RcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxpc3Qoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBodG1sXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5odG1sKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVmXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5kZWYoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdFRva2VuICYmIChsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcgfHwgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0JykpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy50b2tlbnMubGlua3NbdG9rZW4udGFnXSkge1xuICAgICAgICAgIHRoaXMudG9rZW5zLmxpbmtzW3Rva2VuLnRhZ10gPSB7XG4gICAgICAgICAgICBocmVmOiB0b2tlbi5ocmVmLFxuICAgICAgICAgICAgdGl0bGU6IHRva2VuLnRpdGxlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdGFibGUgKGdmbSlcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnRhYmxlKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gbGhlYWRpbmdcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmxoZWFkaW5nKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdG9wLWxldmVsIHBhcmFncmFwaFxuICAgICAgLy8gcHJldmVudCBwYXJhZ3JhcGggY29uc3VtaW5nIGV4dGVuc2lvbnMgYnkgY2xpcHBpbmcgJ3NyYycgdG8gZXh0ZW5zaW9uIHN0YXJ0XG4gICAgICBjdXRTcmMgPSBzcmM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRCbG9jaykge1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IEluZmluaXR5O1xuICAgICAgICBjb25zdCB0ZW1wU3JjID0gc3JjLnNsaWNlKDEpO1xuICAgICAgICBsZXQgdGVtcFN0YXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydEJsb2NrLmZvckVhY2goZnVuY3Rpb24oZ2V0U3RhcnRJbmRleCkge1xuICAgICAgICAgIHRlbXBTdGFydCA9IGdldFN0YXJ0SW5kZXguY2FsbCh7IGxleGVyOiB0aGlzIH0sIHRlbXBTcmMpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdGVtcFN0YXJ0ID09PSAnbnVtYmVyJyAmJiB0ZW1wU3RhcnQgPj0gMCkgeyBzdGFydEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCwgdGVtcFN0YXJ0KTsgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHN0YXJ0SW5kZXggPCBJbmZpbml0eSAmJiBzdGFydEluZGV4ID49IDApIHtcbiAgICAgICAgICBjdXRTcmMgPSBzcmMuc3Vic3RyaW5nKDAsIHN0YXJ0SW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUudG9wICYmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnBhcmFncmFwaChjdXRTcmMpKSkge1xuICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdFBhcmFncmFwaENsaXBwZWQgJiYgbGFzdFRva2VuLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZS5wb3AoKTtcbiAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlW3RoaXMuaW5saW5lUXVldWUubGVuZ3RoIC0gMV0uc3JjID0gbGFzdFRva2VuLnRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQYXJhZ3JhcGhDbGlwcGVkID0gKGN1dFNyYy5sZW5ndGggIT09IHNyYy5sZW5ndGgpO1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdGV4dFxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGV4dChzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0VG9rZW4gJiYgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gJ1xcbicgKyB0b2tlbi50ZXh0O1xuICAgICAgICAgIHRoaXMuaW5saW5lUXVldWUucG9wKCk7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBjb25zdCBlcnJNc2cgPSAnSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS50b3AgPSB0cnVlO1xuICAgIHJldHVybiB0b2tlbnM7XG4gIH1cblxuICBpbmxpbmUoc3JjLCB0b2tlbnMpIHtcbiAgICB0aGlzLmlubGluZVF1ZXVlLnB1c2goeyBzcmMsIHRva2VucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMZXhpbmcvQ29tcGlsaW5nXG4gICAqL1xuICBpbmxpbmVUb2tlbnMoc3JjLCB0b2tlbnMgPSBbXSkge1xuICAgIGxldCB0b2tlbiwgbGFzdFRva2VuLCBjdXRTcmM7XG5cbiAgICAvLyBTdHJpbmcgd2l0aCBsaW5rcyBtYXNrZWQgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIHdpdGggZW0gYW5kIHN0cm9uZ1xuICAgIGxldCBtYXNrZWRTcmMgPSBzcmM7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCBrZWVwUHJldkNoYXIsIHByZXZDaGFyO1xuXG4gICAgLy8gTWFzayBvdXQgcmVmbGlua3NcbiAgICBpZiAodGhpcy50b2tlbnMubGlua3MpIHtcbiAgICAgIGNvbnN0IGxpbmtzID0gT2JqZWN0LmtleXModGhpcy50b2tlbnMubGlua3MpO1xuICAgICAgaWYgKGxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChsaW5rcy5pbmNsdWRlcyhtYXRjaFswXS5zbGljZShtYXRjaFswXS5sYXN0SW5kZXhPZignWycpICsgMSwgLTEpKSkge1xuICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArIHJlcGVhdFN0cmluZygnYScsIG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmxhc3RJbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE1hc2sgb3V0IG90aGVyIGJsb2Nrc1xuICAgIHdoaWxlICgobWF0Y2ggPSB0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUuYmxvY2tTa2lwLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArIHJlcGVhdFN0cmluZygnYScsIG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5ibG9ja1NraXAubGFzdEluZGV4KTtcbiAgICB9XG5cbiAgICAvLyBNYXNrIG91dCBlc2NhcGVkIGVtICYgc3Ryb25nIGRlbGltaXRlcnNcbiAgICB3aGlsZSAoKG1hdGNoID0gdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmVzY2FwZWRFbVN0LmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICcrKycgKyBtYXNrZWRTcmMuc2xpY2UodGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmVzY2FwZWRFbVN0Lmxhc3RJbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHNyYykge1xuICAgICAgaWYgKCFrZWVwUHJldkNoYXIpIHtcbiAgICAgICAgcHJldkNoYXIgPSAnJztcbiAgICAgIH1cbiAgICAgIGtlZXBQcmV2Q2hhciA9IGZhbHNlO1xuXG4gICAgICAvLyBleHRlbnNpb25zXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnNcbiAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuaW5saW5lXG4gICAgICAgICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLmlubGluZS5zb21lKChleHRUb2tlbml6ZXIpID0+IHtcbiAgICAgICAgICBpZiAodG9rZW4gPSBleHRUb2tlbml6ZXIuY2FsbCh7IGxleGVyOiB0aGlzIH0sIHNyYywgdG9rZW5zKSkge1xuICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2NhcGVcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmVzY2FwZShzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHRhZ1xuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGFnKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiB0b2tlbi50eXBlID09PSAndGV4dCcgJiYgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gdG9rZW4ucmF3O1xuICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9IHRva2VuLnRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBsaW5rXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5saW5rKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVmbGluaywgbm9saW5rXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5yZWZsaW5rKHNyYywgdGhpcy50b2tlbnMubGlua3MpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0VG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gJ3RleHQnICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZW0gJiBzdHJvbmdcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmVtU3Ryb25nKHNyYywgbWFza2VkU3JjLCBwcmV2Q2hhcikpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gY29kZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuY29kZXNwYW4oc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBiclxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYnIoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBkZWwgKGdmbSlcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmRlbChzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGF1dG9saW5rXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5hdXRvbGluayhzcmMsIG1hbmdsZSkpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gdXJsIChnZm0pXG4gICAgICBpZiAoIXRoaXMuc3RhdGUuaW5MaW5rICYmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnVybChzcmMsIG1hbmdsZSkpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHRleHRcbiAgICAgIC8vIHByZXZlbnQgaW5saW5lVGV4dCBjb25zdW1pbmcgZXh0ZW5zaW9ucyBieSBjbGlwcGluZyAnc3JjJyB0byBleHRlbnNpb24gc3RhcnRcbiAgICAgIGN1dFNyYyA9IHNyYztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydElubGluZSkge1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IEluZmluaXR5O1xuICAgICAgICBjb25zdCB0ZW1wU3JjID0gc3JjLnNsaWNlKDEpO1xuICAgICAgICBsZXQgdGVtcFN0YXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydElubGluZS5mb3JFYWNoKGZ1bmN0aW9uKGdldFN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICB0ZW1wU3RhcnQgPSBnZXRTdGFydEluZGV4LmNhbGwoeyBsZXhlcjogdGhpcyB9LCB0ZW1wU3JjKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRlbXBTdGFydCA9PT0gJ251bWJlcicgJiYgdGVtcFN0YXJ0ID49IDApIHsgc3RhcnRJbmRleCA9IE1hdGgubWluKHN0YXJ0SW5kZXgsIHRlbXBTdGFydCk7IH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdGFydEluZGV4IDwgSW5maW5pdHkgJiYgc3RhcnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgY3V0U3JjID0gc3JjLnN1YnN0cmluZygwLCBzdGFydEluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmlubGluZVRleHQoY3V0U3JjLCBzbWFydHlwYW50cykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgaWYgKHRva2VuLnJhdy5zbGljZSgtMSkgIT09ICdfJykgeyAvLyBUcmFjayBwcmV2Q2hhciBiZWZvcmUgc3RyaW5nIG9mIF9fX18gc3RhcnRlZFxuICAgICAgICAgIHByZXZDaGFyID0gdG9rZW4ucmF3LnNsaWNlKC0xKTtcbiAgICAgICAgfVxuICAgICAgICBrZWVwUHJldkNoYXIgPSB0cnVlO1xuICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdFRva2VuICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNyYykge1xuICAgICAgICBjb25zdCBlcnJNc2cgPSAnSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxufVxuXG4vKipcbiAqIFJlbmRlcmVyXG4gKi9cbmNsYXNzIFJlbmRlcmVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7XG4gIH1cblxuICBjb2RlKGNvZGUsIGluZm9zdHJpbmcsIGVzY2FwZWQpIHtcbiAgICBjb25zdCBsYW5nID0gKGluZm9zdHJpbmcgfHwgJycpLm1hdGNoKC9cXFMqLylbMF07XG4gICAgaWYgKHRoaXMub3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICAgIGNvbnN0IG91dCA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHQoY29kZSwgbGFuZyk7XG4gICAgICBpZiAob3V0ICE9IG51bGwgJiYgb3V0ICE9PSBjb2RlKSB7XG4gICAgICAgIGVzY2FwZWQgPSB0cnVlO1xuICAgICAgICBjb2RlID0gb3V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UoL1xcbiQvLCAnJykgKyAnXFxuJztcblxuICAgIGlmICghbGFuZykge1xuICAgICAgcmV0dXJuICc8cHJlPjxjb2RlPidcbiAgICAgICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xuICAgIH1cblxuICAgIHJldHVybiAnPHByZT48Y29kZSBjbGFzcz1cIidcbiAgICAgICsgdGhpcy5vcHRpb25zLmxhbmdQcmVmaXhcbiAgICAgICsgZXNjYXBlKGxhbmcsIHRydWUpXG4gICAgICArICdcIj4nXG4gICAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZShjb2RlLCB0cnVlKSlcbiAgICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xuICB9XG5cbiAgYmxvY2txdW90ZShxdW90ZSkge1xuICAgIHJldHVybiAnPGJsb2NrcXVvdGU+XFxuJyArIHF1b3RlICsgJzwvYmxvY2txdW90ZT5cXG4nO1xuICB9XG5cbiAgaHRtbChodG1sKSB7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cblxuICBoZWFkaW5nKHRleHQsIGxldmVsLCByYXcsIHNsdWdnZXIpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcklkcykge1xuICAgICAgcmV0dXJuICc8aCdcbiAgICAgICAgKyBsZXZlbFxuICAgICAgICArICcgaWQ9XCInXG4gICAgICAgICsgdGhpcy5vcHRpb25zLmhlYWRlclByZWZpeFxuICAgICAgICArIHNsdWdnZXIuc2x1ZyhyYXcpXG4gICAgICAgICsgJ1wiPidcbiAgICAgICAgKyB0ZXh0XG4gICAgICAgICsgJzwvaCdcbiAgICAgICAgKyBsZXZlbFxuICAgICAgICArICc+XFxuJztcbiAgICB9XG4gICAgLy8gaWdub3JlIElEc1xuICAgIHJldHVybiAnPGgnICsgbGV2ZWwgKyAnPicgKyB0ZXh0ICsgJzwvaCcgKyBsZXZlbCArICc+XFxuJztcbiAgfVxuXG4gIGhyKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGhyLz5cXG4nIDogJzxocj5cXG4nO1xuICB9XG5cbiAgbGlzdChib2R5LCBvcmRlcmVkLCBzdGFydCkge1xuICAgIGNvbnN0IHR5cGUgPSBvcmRlcmVkID8gJ29sJyA6ICd1bCcsXG4gICAgICBzdGFydGF0dCA9IChvcmRlcmVkICYmIHN0YXJ0ICE9PSAxKSA/ICgnIHN0YXJ0PVwiJyArIHN0YXJ0ICsgJ1wiJykgOiAnJztcbiAgICByZXR1cm4gJzwnICsgdHlwZSArIHN0YXJ0YXR0ICsgJz5cXG4nICsgYm9keSArICc8LycgKyB0eXBlICsgJz5cXG4nO1xuICB9XG5cbiAgbGlzdGl0ZW0odGV4dCkge1xuICAgIHJldHVybiAnPGxpPicgKyB0ZXh0ICsgJzwvbGk+XFxuJztcbiAgfVxuXG4gIGNoZWNrYm94KGNoZWNrZWQpIHtcbiAgICByZXR1cm4gJzxpbnB1dCAnXG4gICAgICArIChjaGVja2VkID8gJ2NoZWNrZWQ9XCJcIiAnIDogJycpXG4gICAgICArICdkaXNhYmxlZD1cIlwiIHR5cGU9XCJjaGVja2JveFwiJ1xuICAgICAgKyAodGhpcy5vcHRpb25zLnhodG1sID8gJyAvJyA6ICcnKVxuICAgICAgKyAnPiAnO1xuICB9XG5cbiAgcGFyYWdyYXBoKHRleHQpIHtcbiAgICByZXR1cm4gJzxwPicgKyB0ZXh0ICsgJzwvcD5cXG4nO1xuICB9XG5cbiAgdGFibGUoaGVhZGVyLCBib2R5KSB7XG4gICAgaWYgKGJvZHkpIGJvZHkgPSAnPHRib2R5PicgKyBib2R5ICsgJzwvdGJvZHk+JztcblxuICAgIHJldHVybiAnPHRhYmxlPlxcbidcbiAgICAgICsgJzx0aGVhZD5cXG4nXG4gICAgICArIGhlYWRlclxuICAgICAgKyAnPC90aGVhZD5cXG4nXG4gICAgICArIGJvZHlcbiAgICAgICsgJzwvdGFibGU+XFxuJztcbiAgfVxuXG4gIHRhYmxlcm93KGNvbnRlbnQpIHtcbiAgICByZXR1cm4gJzx0cj5cXG4nICsgY29udGVudCArICc8L3RyPlxcbic7XG4gIH1cblxuICB0YWJsZWNlbGwoY29udGVudCwgZmxhZ3MpIHtcbiAgICBjb25zdCB0eXBlID0gZmxhZ3MuaGVhZGVyID8gJ3RoJyA6ICd0ZCc7XG4gICAgY29uc3QgdGFnID0gZmxhZ3MuYWxpZ25cbiAgICAgID8gJzwnICsgdHlwZSArICcgYWxpZ249XCInICsgZmxhZ3MuYWxpZ24gKyAnXCI+J1xuICAgICAgOiAnPCcgKyB0eXBlICsgJz4nO1xuICAgIHJldHVybiB0YWcgKyBjb250ZW50ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG4gIH1cblxuICAvLyBzcGFuIGxldmVsIHJlbmRlcmVyXG4gIHN0cm9uZyh0ZXh0KSB7XG4gICAgcmV0dXJuICc8c3Ryb25nPicgKyB0ZXh0ICsgJzwvc3Ryb25nPic7XG4gIH1cblxuICBlbSh0ZXh0KSB7XG4gICAgcmV0dXJuICc8ZW0+JyArIHRleHQgKyAnPC9lbT4nO1xuICB9XG5cbiAgY29kZXNwYW4odGV4dCkge1xuICAgIHJldHVybiAnPGNvZGU+JyArIHRleHQgKyAnPC9jb2RlPic7XG4gIH1cblxuICBicigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+JztcbiAgfVxuXG4gIGRlbCh0ZXh0KSB7XG4gICAgcmV0dXJuICc8ZGVsPicgKyB0ZXh0ICsgJzwvZGVsPic7XG4gIH1cblxuICBsaW5rKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gICAgaHJlZiA9IGNsZWFuVXJsKHRoaXMub3B0aW9ucy5zYW5pdGl6ZSwgdGhpcy5vcHRpb25zLmJhc2VVcmwsIGhyZWYpO1xuICAgIGlmIChocmVmID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgbGV0IG91dCA9ICc8YSBocmVmPVwiJyArIGVzY2FwZShocmVmKSArICdcIic7XG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBvdXQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuICAgIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgIGhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgICBpZiAoaHJlZiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgbGV0IG91dCA9ICc8aW1nIHNyYz1cIicgKyBocmVmICsgJ1wiIGFsdD1cIicgKyB0ZXh0ICsgJ1wiJztcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgICB9XG4gICAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHRleHQodGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG59XG5cbi8qKlxuICogVGV4dFJlbmRlcmVyXG4gKiByZXR1cm5zIG9ubHkgdGhlIHRleHR1YWwgcGFydCBvZiB0aGUgdG9rZW5cbiAqL1xuY2xhc3MgVGV4dFJlbmRlcmVyIHtcbiAgLy8gbm8gbmVlZCBmb3IgYmxvY2sgbGV2ZWwgcmVuZGVyZXJzXG4gIHN0cm9uZyh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBlbSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBjb2Rlc3Bhbih0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBkZWwodGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgaHRtbCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0KHRleHQpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIGxpbmsoaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG5cbiAgaW1hZ2UoaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG5cbiAgYnIoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogU2x1Z2dlciBnZW5lcmF0ZXMgaGVhZGVyIGlkXG4gKi9cbmNsYXNzIFNsdWdnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNlZW4gPSB7fTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC50cmltKClcbiAgICAgIC8vIHJlbW92ZSBodG1sIHRhZ3NcbiAgICAgIC5yZXBsYWNlKC88WyFcXC9hLXpdLio/Pi9pZywgJycpXG4gICAgICAvLyByZW1vdmUgdW53YW50ZWQgY2hhcnNcbiAgICAgIC5yZXBsYWNlKC9bXFx1MjAwMC1cXHUyMDZGXFx1MkUwMC1cXHUyRTdGXFxcXCchXCIjJCUmKCkqKywuLzo7PD0+P0BbXFxdXmB7fH1+XS9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHMvZywgJy0nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgbmV4dCBzYWZlICh1bmlxdWUpIHNsdWcgdG8gdXNlXG4gICAqL1xuICBnZXROZXh0U2FmZVNsdWcob3JpZ2luYWxTbHVnLCBpc0RyeVJ1bikge1xuICAgIGxldCBzbHVnID0gb3JpZ2luYWxTbHVnO1xuICAgIGxldCBvY2N1cmVuY2VBY2N1bXVsYXRvciA9IDA7XG4gICAgaWYgKHRoaXMuc2Vlbi5oYXNPd25Qcm9wZXJ0eShzbHVnKSkge1xuICAgICAgb2NjdXJlbmNlQWNjdW11bGF0b3IgPSB0aGlzLnNlZW5bb3JpZ2luYWxTbHVnXTtcbiAgICAgIGRvIHtcbiAgICAgICAgb2NjdXJlbmNlQWNjdW11bGF0b3IrKztcbiAgICAgICAgc2x1ZyA9IG9yaWdpbmFsU2x1ZyArICctJyArIG9jY3VyZW5jZUFjY3VtdWxhdG9yO1xuICAgICAgfSB3aGlsZSAodGhpcy5zZWVuLmhhc093blByb3BlcnR5KHNsdWcpKTtcbiAgICB9XG4gICAgaWYgKCFpc0RyeVJ1bikge1xuICAgICAgdGhpcy5zZWVuW29yaWdpbmFsU2x1Z10gPSBvY2N1cmVuY2VBY2N1bXVsYXRvcjtcbiAgICAgIHRoaXMuc2VlbltzbHVnXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiBzbHVnO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgc3RyaW5nIHRvIHVuaXF1ZSBpZFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuZHJ5cnVuIEdlbmVyYXRlcyB0aGUgbmV4dCB1bmlxdWUgc2x1ZyB3aXRob3V0IHVwZGF0aW5nIHRoZSBpbnRlcm5hbCBhY2N1bXVsYXRvci5cbiAgICovXG4gIHNsdWcodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHNsdWcgPSB0aGlzLnNlcmlhbGl6ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dFNhZmVTbHVnKHNsdWcsIG9wdGlvbnMuZHJ5cnVuKTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNpbmcgJiBDb21waWxpbmdcbiAqL1xuY2xhc3MgUGFyc2VyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7XG4gICAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICAgIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXI7XG4gICAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIHRoaXMudGV4dFJlbmRlcmVyID0gbmV3IFRleHRSZW5kZXJlcigpO1xuICAgIHRoaXMuc2x1Z2dlciA9IG5ldyBTbHVnZ2VyKCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIFBhcnNlIE1ldGhvZFxuICAgKi9cbiAgc3RhdGljIHBhcnNlKHRva2Vucywgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIHBhcnNlci5wYXJzZSh0b2tlbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBQYXJzZSBJbmxpbmUgTWV0aG9kXG4gICAqL1xuICBzdGF0aWMgcGFyc2VJbmxpbmUodG9rZW5zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKTtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlSW5saW5lKHRva2Vucyk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgTG9vcFxuICAgKi9cbiAgcGFyc2UodG9rZW5zLCB0b3AgPSB0cnVlKSB7XG4gICAgbGV0IG91dCA9ICcnLFxuICAgICAgaSxcbiAgICAgIGosXG4gICAgICBrLFxuICAgICAgbDIsXG4gICAgICBsMyxcbiAgICAgIHJvdyxcbiAgICAgIGNlbGwsXG4gICAgICBoZWFkZXIsXG4gICAgICBib2R5LFxuICAgICAgdG9rZW4sXG4gICAgICBvcmRlcmVkLFxuICAgICAgc3RhcnQsXG4gICAgICBsb29zZSxcbiAgICAgIGl0ZW1Cb2R5LFxuICAgICAgaXRlbSxcbiAgICAgIGNoZWNrZWQsXG4gICAgICB0YXNrLFxuICAgICAgY2hlY2tib3gsXG4gICAgICByZXQ7XG5cbiAgICBjb25zdCBsID0gdG9rZW5zLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgLy8gUnVuIGFueSByZW5kZXJlciBleHRlbnNpb25zXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXSkge1xuICAgICAgICByZXQgPSB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnNbdG9rZW4udHlwZV0uY2FsbCh7IHBhcnNlcjogdGhpcyB9LCB0b2tlbik7XG4gICAgICAgIGlmIChyZXQgIT09IGZhbHNlIHx8ICFbJ3NwYWNlJywgJ2hyJywgJ2hlYWRpbmcnLCAnY29kZScsICd0YWJsZScsICdibG9ja3F1b3RlJywgJ2xpc3QnLCAnaHRtbCcsICdwYXJhZ3JhcGgnLCAndGV4dCddLmluY2x1ZGVzKHRva2VuLnR5cGUpKSB7XG4gICAgICAgICAgb3V0ICs9IHJldCB8fCAnJztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3BhY2UnOiB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnaHInOiB7XG4gICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuaHIoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdoZWFkaW5nJzoge1xuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmhlYWRpbmcoXG4gICAgICAgICAgICB0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucyksXG4gICAgICAgICAgICB0b2tlbi5kZXB0aCxcbiAgICAgICAgICAgIHVuZXNjYXBlKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCB0aGlzLnRleHRSZW5kZXJlcikpLFxuICAgICAgICAgICAgdGhpcy5zbHVnZ2VyKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdjb2RlJzoge1xuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmNvZGUodG9rZW4udGV4dCxcbiAgICAgICAgICAgIHRva2VuLmxhbmcsXG4gICAgICAgICAgICB0b2tlbi5lc2NhcGVkKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0YWJsZSc6IHtcbiAgICAgICAgICBoZWFkZXIgPSAnJztcblxuICAgICAgICAgIC8vIGhlYWRlclxuICAgICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgICBsMiA9IHRva2VuLmhlYWRlci5sZW5ndGg7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGwyOyBqKyspIHtcbiAgICAgICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwoXG4gICAgICAgICAgICAgIHRoaXMucGFyc2VJbmxpbmUodG9rZW4uaGVhZGVyW2pdLnRva2VucyksXG4gICAgICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdG9rZW4uYWxpZ25bal0gfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGVhZGVyICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG5cbiAgICAgICAgICBib2R5ID0gJyc7XG4gICAgICAgICAgbDIgPSB0b2tlbi5yb3dzLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbDI7IGorKykge1xuICAgICAgICAgICAgcm93ID0gdG9rZW4ucm93c1tqXTtcblxuICAgICAgICAgICAgY2VsbCA9ICcnO1xuICAgICAgICAgICAgbDMgPSByb3cubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGwzOyBrKyspIHtcbiAgICAgICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlSW5saW5lKHJvd1trXS50b2tlbnMpLFxuICAgICAgICAgICAgICAgIHsgaGVhZGVyOiBmYWxzZSwgYWxpZ246IHRva2VuLmFsaWduW2tdIH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci50YWJsZShoZWFkZXIsIGJvZHkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOiB7XG4gICAgICAgICAgYm9keSA9IHRoaXMucGFyc2UodG9rZW4udG9rZW5zKTtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5ibG9ja3F1b3RlKGJvZHkpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2xpc3QnOiB7XG4gICAgICAgICAgb3JkZXJlZCA9IHRva2VuLm9yZGVyZWQ7XG4gICAgICAgICAgc3RhcnQgPSB0b2tlbi5zdGFydDtcbiAgICAgICAgICBsb29zZSA9IHRva2VuLmxvb3NlO1xuICAgICAgICAgIGwyID0gdG9rZW4uaXRlbXMubGVuZ3RoO1xuXG4gICAgICAgICAgYm9keSA9ICcnO1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsMjsgaisrKSB7XG4gICAgICAgICAgICBpdGVtID0gdG9rZW4uaXRlbXNbal07XG4gICAgICAgICAgICBjaGVja2VkID0gaXRlbS5jaGVja2VkO1xuICAgICAgICAgICAgdGFzayA9IGl0ZW0udGFzaztcblxuICAgICAgICAgICAgaXRlbUJvZHkgPSAnJztcbiAgICAgICAgICAgIGlmIChpdGVtLnRhc2spIHtcbiAgICAgICAgICAgICAgY2hlY2tib3ggPSB0aGlzLnJlbmRlcmVyLmNoZWNrYm94KGNoZWNrZWQpO1xuICAgICAgICAgICAgICBpZiAobG9vc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50b2tlbnMubGVuZ3RoID4gMCAmJiBpdGVtLnRva2Vuc1swXS50eXBlID09PSAncGFyYWdyYXBoJykge1xuICAgICAgICAgICAgICAgICAgaXRlbS50b2tlbnNbMF0udGV4dCA9IGNoZWNrYm94ICsgJyAnICsgaXRlbS50b2tlbnNbMF0udGV4dDtcbiAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRva2Vuc1swXS50b2tlbnMgJiYgaXRlbS50b2tlbnNbMF0udG9rZW5zLmxlbmd0aCA+IDAgJiYgaXRlbS50b2tlbnNbMF0udG9rZW5zWzBdLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnRva2Vuc1swXS50b2tlbnNbMF0udGV4dCA9IGNoZWNrYm94ICsgJyAnICsgaXRlbS50b2tlbnNbMF0udG9rZW5zWzBdLnRleHQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGl0ZW0udG9rZW5zLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGNoZWNrYm94XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbUJvZHkgKz0gY2hlY2tib3g7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbUJvZHkgKz0gdGhpcy5wYXJzZShpdGVtLnRva2VucywgbG9vc2UpO1xuICAgICAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGl0ZW1Cb2R5LCB0YXNrLCBjaGVja2VkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saXN0KGJvZHksIG9yZGVyZWQsIHN0YXJ0KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdodG1sJzoge1xuICAgICAgICAgIC8vIFRPRE8gcGFyc2UgaW5saW5lIGNvbnRlbnQgaWYgcGFyYW1ldGVyIG1hcmtkb3duPTFcbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5odG1sKHRva2VuLnRleHQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3BhcmFncmFwaCc6IHtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgIGJvZHkgPSB0b2tlbi50b2tlbnMgPyB0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucykgOiB0b2tlbi50ZXh0O1xuICAgICAgICAgIHdoaWxlIChpICsgMSA8IGwgJiYgdG9rZW5zW2kgKyAxXS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zWysraV07XG4gICAgICAgICAgICBib2R5ICs9ICdcXG4nICsgKHRva2VuLnRva2VucyA/IHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zKSA6IHRva2VuLnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gdG9wID8gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgoYm9keSkgOiBib2R5O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGNvbnN0IGVyck1zZyA9ICdUb2tlbiB3aXRoIFwiJyArIHRva2VuLnR5cGUgKyAnXCIgdHlwZSB3YXMgbm90IGZvdW5kLic7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBJbmxpbmUgVG9rZW5zXG4gICAqL1xuICBwYXJzZUlubGluZSh0b2tlbnMsIHJlbmRlcmVyKSB7XG4gICAgcmVuZGVyZXIgPSByZW5kZXJlciB8fCB0aGlzLnJlbmRlcmVyO1xuICAgIGxldCBvdXQgPSAnJyxcbiAgICAgIGksXG4gICAgICB0b2tlbixcbiAgICAgIHJldDtcblxuICAgIGNvbnN0IGwgPSB0b2tlbnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICAvLyBSdW4gYW55IHJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdKSB7XG4gICAgICAgIHJldCA9IHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXS5jYWxsKHsgcGFyc2VyOiB0aGlzIH0sIHRva2VuKTtcbiAgICAgICAgaWYgKHJldCAhPT0gZmFsc2UgfHwgIVsnZXNjYXBlJywgJ2h0bWwnLCAnbGluaycsICdpbWFnZScsICdzdHJvbmcnLCAnZW0nLCAnY29kZXNwYW4nLCAnYnInLCAnZGVsJywgJ3RleHQnXS5pbmNsdWRlcyh0b2tlbi50eXBlKSkge1xuICAgICAgICAgIG91dCArPSByZXQgfHwgJyc7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2VzY2FwZSc6IHtcbiAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIudGV4dCh0b2tlbi50ZXh0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdodG1sJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5odG1sKHRva2VuLnRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2xpbmsnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmxpbmsodG9rZW4uaHJlZiwgdG9rZW4udGl0bGUsIHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2ltYWdlJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5pbWFnZSh0b2tlbi5ocmVmLCB0b2tlbi50aXRsZSwgdG9rZW4udGV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnc3Ryb25nJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5zdHJvbmcodGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMsIHJlbmRlcmVyKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZW0nOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmVtKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2NvZGVzcGFuJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5jb2Rlc3Bhbih0b2tlbi50ZXh0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdicic6IHtcbiAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuYnIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdkZWwnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmRlbCh0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucywgcmVuZGVyZXIpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci50ZXh0KHRva2VuLnRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBjb25zdCBlcnJNc2cgPSAnVG9rZW4gd2l0aCBcIicgKyB0b2tlbi50eXBlICsgJ1wiIHR5cGUgd2FzIG5vdCBmb3VuZC4nO1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG59XG5cbi8qKlxuICogTWFya2VkXG4gKi9cbmZ1bmN0aW9uIG1hcmtlZChzcmMsIG9wdCwgY2FsbGJhY2spIHtcbiAgLy8gdGhyb3cgZXJyb3IgaW4gY2FzZSBvZiBub24gc3RyaW5nIGlucHV0XG4gIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgfVxuICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSAnXG4gICAgICArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0O1xuICAgIG9wdCA9IG51bGw7XG4gIH1cblxuICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuICBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KTtcblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBjb25zdCBoaWdobGlnaHQgPSBvcHQuaGlnaGxpZ2h0O1xuICAgIGxldCB0b2tlbnM7XG5cbiAgICB0cnkge1xuICAgICAgdG9rZW5zID0gTGV4ZXIubGV4KHNyYywgb3B0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZG9uZSA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgbGV0IG91dDtcblxuICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAob3B0LndhbGtUb2tlbnMpIHtcbiAgICAgICAgICAgIG1hcmtlZC53YWxrVG9rZW5zKHRva2Vucywgb3B0LndhbGtUb2tlbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgPSBQYXJzZXIucGFyc2UodG9rZW5zLCBvcHQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuXG4gICAgICByZXR1cm4gZXJyXG4gICAgICAgID8gY2FsbGJhY2soZXJyKVxuICAgICAgICA6IGNhbGxiYWNrKG51bGwsIG91dCk7XG4gICAgfTtcblxuICAgIGlmICghaGlnaGxpZ2h0IHx8IGhpZ2hsaWdodC5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSBvcHQuaGlnaGxpZ2h0O1xuXG4gICAgaWYgKCF0b2tlbnMubGVuZ3RoKSByZXR1cm4gZG9uZSgpO1xuXG4gICAgbGV0IHBlbmRpbmcgPSAwO1xuICAgIG1hcmtlZC53YWxrVG9rZW5zKHRva2VucywgZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgIGlmICh0b2tlbi50eXBlID09PSAnY29kZScpIHtcbiAgICAgICAgcGVuZGluZysrO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBoaWdobGlnaHQodG9rZW4udGV4dCwgdG9rZW4ubGFuZywgZnVuY3Rpb24oZXJyLCBjb2RlKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZSAhPSBudWxsICYmIGNvZGUgIT09IHRva2VuLnRleHQpIHtcbiAgICAgICAgICAgICAgdG9rZW4udGV4dCA9IGNvZGU7XG4gICAgICAgICAgICAgIHRva2VuLmVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwZW5kaW5nLS07XG4gICAgICAgICAgICBpZiAocGVuZGluZyA9PT0gMCkge1xuICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHBlbmRpbmcgPT09IDApIHtcbiAgICAgIGRvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHRva2VucyA9IExleGVyLmxleChzcmMsIG9wdCk7XG4gICAgaWYgKG9wdC53YWxrVG9rZW5zKSB7XG4gICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICB9XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkLic7XG4gICAgaWYgKG9wdC5zaWxlbnQpIHtcbiAgICAgIHJldHVybiAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnNcbiAqL1xuXG5tYXJrZWQub3B0aW9ucyA9XG5tYXJrZWQuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdCkge1xuICBtZXJnZShtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gIGNoYW5nZURlZmF1bHRzKG1hcmtlZC5kZWZhdWx0cyk7XG4gIHJldHVybiBtYXJrZWQ7XG59O1xuXG5tYXJrZWQuZ2V0RGVmYXVsdHMgPSBnZXREZWZhdWx0cztcblxubWFya2VkLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cbi8qKlxuICogVXNlIEV4dGVuc2lvblxuICovXG5cbm1hcmtlZC51c2UgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gIGNvbnN0IG9wdHMgPSBtZXJnZSh7fSwgLi4uYXJncyk7XG4gIGNvbnN0IGV4dGVuc2lvbnMgPSBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucyB8fCB7IHJlbmRlcmVyczoge30sIGNoaWxkVG9rZW5zOiB7fSB9O1xuICBsZXQgaGFzRXh0ZW5zaW9ucztcblxuICBhcmdzLmZvckVhY2goKHBhY2spID0+IHtcbiAgICAvLyA9PS0tIFBhcnNlIFwiYWRkb25cIiBleHRlbnNpb25zIC0tPT0gLy9cbiAgICBpZiAocGFjay5leHRlbnNpb25zKSB7XG4gICAgICBoYXNFeHRlbnNpb25zID0gdHJ1ZTtcbiAgICAgIHBhY2suZXh0ZW5zaW9ucy5mb3JFYWNoKChleHQpID0+IHtcbiAgICAgICAgaWYgKCFleHQubmFtZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXh0ZW5zaW9uIG5hbWUgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0LnJlbmRlcmVyKSB7IC8vIFJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgICAgICBjb25zdCBwcmV2UmVuZGVyZXIgPSBleHRlbnNpb25zLnJlbmRlcmVycyA/IGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA6IG51bGw7XG4gICAgICAgICAgaWYgKHByZXZSZW5kZXJlcikge1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBleHRlbnNpb24gd2l0aCBmdW5jIHRvIHJ1biBuZXcgZXh0ZW5zaW9uIGJ1dCBmYWxsIGJhY2sgaWYgZmFsc2VcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgbGV0IHJldCA9IGV4dC5yZW5kZXJlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGV4dC5yZW5kZXJlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dC50b2tlbml6ZXIpIHsgLy8gVG9rZW5pemVyIEV4dGVuc2lvbnNcbiAgICAgICAgICBpZiAoIWV4dC5sZXZlbCB8fCAoZXh0LmxldmVsICE9PSAnYmxvY2snICYmIGV4dC5sZXZlbCAhPT0gJ2lubGluZScpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHRlbnNpb24gbGV2ZWwgbXVzdCBiZSAnYmxvY2snIG9yICdpbmxpbmUnXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uc1tleHQubGV2ZWxdKSB7XG4gICAgICAgICAgICBleHRlbnNpb25zW2V4dC5sZXZlbF0udW5zaGlmdChleHQudG9rZW5pemVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHQubGV2ZWxdID0gW2V4dC50b2tlbml6ZXJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXh0LnN0YXJ0KSB7IC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGZvciBzdGFydCBvZiB0b2tlblxuICAgICAgICAgICAgaWYgKGV4dC5sZXZlbCA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9ucy5zdGFydEJsb2NrKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydEJsb2NrLnB1c2goZXh0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0QmxvY2sgPSBbZXh0LnN0YXJ0XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChleHQubGV2ZWwgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydElubGluZS5wdXNoKGV4dC5zdGFydCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydElubGluZSA9IFtleHQuc3RhcnRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHQuY2hpbGRUb2tlbnMpIHsgLy8gQ2hpbGQgdG9rZW5zIHRvIGJlIHZpc2l0ZWQgYnkgd2Fsa1Rva2Vuc1xuICAgICAgICAgIGV4dGVuc2lvbnMuY2hpbGRUb2tlbnNbZXh0Lm5hbWVdID0gZXh0LmNoaWxkVG9rZW5zO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyA9PS0tIFBhcnNlIFwib3ZlcndyaXRlXCIgZXh0ZW5zaW9ucyAtLT09IC8vXG4gICAgaWYgKHBhY2sucmVuZGVyZXIpIHtcbiAgICAgIGNvbnN0IHJlbmRlcmVyID0gbWFya2VkLmRlZmF1bHRzLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhY2sucmVuZGVyZXIpIHtcbiAgICAgICAgY29uc3QgcHJldlJlbmRlcmVyID0gcmVuZGVyZXJbcHJvcF07XG4gICAgICAgIC8vIFJlcGxhY2UgcmVuZGVyZXIgd2l0aCBmdW5jIHRvIHJ1biBleHRlbnNpb24sIGJ1dCBmYWxsIGJhY2sgaWYgZmFsc2VcbiAgICAgICAgcmVuZGVyZXJbcHJvcF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGxldCByZXQgPSBwYWNrLnJlbmRlcmVyW3Byb3BdLmFwcGx5KHJlbmRlcmVyLCBhcmdzKTtcbiAgICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0ID0gcHJldlJlbmRlcmVyLmFwcGx5KHJlbmRlcmVyLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIG9wdHMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB9XG4gICAgaWYgKHBhY2sudG9rZW5pemVyKSB7XG4gICAgICBjb25zdCB0b2tlbml6ZXIgPSBtYXJrZWQuZGVmYXVsdHMudG9rZW5pemVyIHx8IG5ldyBUb2tlbml6ZXIoKTtcbiAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBwYWNrLnRva2VuaXplcikge1xuICAgICAgICBjb25zdCBwcmV2VG9rZW5pemVyID0gdG9rZW5pemVyW3Byb3BdO1xuICAgICAgICAvLyBSZXBsYWNlIHRva2VuaXplciB3aXRoIGZ1bmMgdG8gcnVuIGV4dGVuc2lvbiwgYnV0IGZhbGwgYmFjayBpZiBmYWxzZVxuICAgICAgICB0b2tlbml6ZXJbcHJvcF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGxldCByZXQgPSBwYWNrLnRva2VuaXplcltwcm9wXS5hcHBseSh0b2tlbml6ZXIsIGFyZ3MpO1xuICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXQgPSBwcmV2VG9rZW5pemVyLmFwcGx5KHRva2VuaXplciwgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBvcHRzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICB9XG5cbiAgICAvLyA9PS0tIFBhcnNlIFdhbGtUb2tlbnMgZXh0ZW5zaW9ucyAtLT09IC8vXG4gICAgaWYgKHBhY2sud2Fsa1Rva2Vucykge1xuICAgICAgY29uc3Qgd2Fsa1Rva2VucyA9IG1hcmtlZC5kZWZhdWx0cy53YWxrVG9rZW5zO1xuICAgICAgb3B0cy53YWxrVG9rZW5zID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgcGFjay53YWxrVG9rZW5zLmNhbGwodGhpcywgdG9rZW4pO1xuICAgICAgICBpZiAod2Fsa1Rva2Vucykge1xuICAgICAgICAgIHdhbGtUb2tlbnMuY2FsbCh0aGlzLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGhhc0V4dGVuc2lvbnMpIHtcbiAgICAgIG9wdHMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gICAgfVxuXG4gICAgbWFya2VkLnNldE9wdGlvbnMob3B0cyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBSdW4gY2FsbGJhY2sgZm9yIGV2ZXJ5IHRva2VuXG4gKi9cblxubWFya2VkLndhbGtUb2tlbnMgPSBmdW5jdGlvbih0b2tlbnMsIGNhbGxiYWNrKSB7XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgY2FsbGJhY2suY2FsbChtYXJrZWQsIHRva2VuKTtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RhYmxlJzoge1xuICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdG9rZW4uaGVhZGVyKSB7XG4gICAgICAgICAgbWFya2VkLndhbGtUb2tlbnMoY2VsbC50b2tlbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0b2tlbi5yb3dzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIHJvdykge1xuICAgICAgICAgICAgbWFya2VkLndhbGtUb2tlbnMoY2VsbC50b2tlbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdsaXN0Jzoge1xuICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbi5pdGVtcywgY2FsbGJhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zICYmIG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zLmNoaWxkVG9rZW5zICYmIG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zLmNoaWxkVG9rZW5zW3Rva2VuLnR5cGVdKSB7IC8vIFdhbGsgYW55IGV4dGVuc2lvbnNcbiAgICAgICAgICBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucy5jaGlsZFRva2Vuc1t0b2tlbi50eXBlXS5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkVG9rZW5zKSB7XG4gICAgICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbltjaGlsZFRva2Vuc10sIGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2tlbi50b2tlbnMpIHtcbiAgICAgICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbi50b2tlbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBQYXJzZSBJbmxpbmVcbiAqL1xubWFya2VkLnBhcnNlSW5saW5lID0gZnVuY3Rpb24oc3JjLCBvcHQpIHtcbiAgLy8gdGhyb3cgZXJyb3IgaW4gY2FzZSBvZiBub24gc3RyaW5nIGlucHV0XG4gIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZC5wYXJzZUlubGluZSgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgfVxuICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZC5wYXJzZUlubGluZSgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSAnXG4gICAgICArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJyk7XG4gIH1cblxuICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuICBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KTtcblxuICB0cnkge1xuICAgIGNvbnN0IHRva2VucyA9IExleGVyLmxleElubGluZShzcmMsIG9wdCk7XG4gICAgaWYgKG9wdC53YWxrVG9rZW5zKSB7XG4gICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICB9XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZUlubGluZSh0b2tlbnMsIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkLic7XG4gICAgaWYgKG9wdC5zaWxlbnQpIHtcbiAgICAgIHJldHVybiAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHBvc2VcbiAqL1xubWFya2VkLlBhcnNlciA9IFBhcnNlcjtcbm1hcmtlZC5wYXJzZXIgPSBQYXJzZXIucGFyc2U7XG5tYXJrZWQuUmVuZGVyZXIgPSBSZW5kZXJlcjtcbm1hcmtlZC5UZXh0UmVuZGVyZXIgPSBUZXh0UmVuZGVyZXI7XG5tYXJrZWQuTGV4ZXIgPSBMZXhlcjtcbm1hcmtlZC5sZXhlciA9IExleGVyLmxleDtcbm1hcmtlZC5Ub2tlbml6ZXIgPSBUb2tlbml6ZXI7XG5tYXJrZWQuU2x1Z2dlciA9IFNsdWdnZXI7XG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5cbmNvbnN0IG9wdGlvbnMgPSBtYXJrZWQub3B0aW9ucztcbmNvbnN0IHNldE9wdGlvbnMgPSBtYXJrZWQuc2V0T3B0aW9ucztcbmNvbnN0IHVzZSA9IG1hcmtlZC51c2U7XG5jb25zdCB3YWxrVG9rZW5zID0gbWFya2VkLndhbGtUb2tlbnM7XG5jb25zdCBwYXJzZUlubGluZSA9IG1hcmtlZC5wYXJzZUlubGluZTtcbmNvbnN0IHBhcnNlID0gbWFya2VkO1xuY29uc3QgcGFyc2VyID0gUGFyc2VyLnBhcnNlO1xuY29uc3QgbGV4ZXIgPSBMZXhlci5sZXg7XG5cbmV4cG9ydCB7IExleGVyLCBQYXJzZXIsIFJlbmRlcmVyLCBTbHVnZ2VyLCBUZXh0UmVuZGVyZXIsIFRva2VuaXplciwgZGVmYXVsdHMsIGdldERlZmF1bHRzLCBsZXhlciwgbWFya2VkLCBvcHRpb25zLCBwYXJzZSwgcGFyc2VJbmxpbmUsIHBhcnNlciwgc2V0T3B0aW9ucywgdXNlLCB3YWxrVG9rZW5zIH07XG4iLCAiaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAneG1sYnVpbGRlcjInO1xyXG5pbXBvcnQgeyBYTUxCdWlsZGVyIH0gZnJvbSAneG1sYnVpbGRlcjIvbGliL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBnZXQsIGlzQXJyYXksIGlzRGF0ZSwgaXNOdW1iZXIsIGlzT2JqZWN0LCBpc1NhZmVJbnRlZ2VyIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgZm9ybWF0LCBwYXJzZSB9IGZyb20gJ2RhdGUtZm5zJztcclxuXHJcbmludGVyZmFjZSBYbWxScGNPcHRpb25zIHtcclxuICB1cmw6IFVSTDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFhtbFJwY0NsaWVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBYbWxScGNPcHRpb25zXHJcbiAgKSB7XHJcbiAgICBjb25zb2xlLmxvZyhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIG1ldGhvZENhbGwoXHJcbiAgICBtZXRob2Q6IHN0cmluZyxcclxuICAgIHBhcmFtczogdW5rbm93blxyXG4gICk6IFByb21pc2U8dW5rbm93bj4ge1xyXG4gICAgY29uc29sZS5sb2coYEVuZHBvaW50OiAke3RoaXMub3B0aW9ucy51cmwuaHJlZn14bWxycGMucGhwYCk7XHJcblxyXG4gICAgY29uc3QgeG1sID0gdGhpcy5vYmplY3RUb1htbChtZXRob2QsIHBhcmFtcykuZW5kKHsgcHJldHR5UHJpbnQ6IHRydWUgfSk7XHJcbiAgICBjb25zb2xlLmxvZyh4bWwpO1xyXG5cclxuICAgIHJldHVybiByZXF1ZXN0KHtcclxuICAgICAgdXJsOiBgJHt0aGlzLm9wdGlvbnMudXJsLmhyZWZ9eG1scnBjLnBocGAsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3htbCcsXHJcbiAgICAgICAgJ1VzZXItQWdlbnQnOiAnb2JzaWRpYW4ubWQnXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IHhtbFxyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlVG9PYmplY3QocmVzKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9iamVjdFRvWG1sKG1ldGhvZDogc3RyaW5nLCAuLi5vYmo6IHVua25vd25bXSk6IFhNTEJ1aWxkZXIge1xyXG4gICAgY29uc3QgeG1sID0gY3JlYXRlKHsgdmVyc2lvbjogJzEuMCcgfSlcclxuICAgICAgLmVsZSgnbWV0aG9kQ2FsbCcpXHJcbiAgICAgIC5lbGUoJ21ldGhvZE5hbWUnKS50eHQobWV0aG9kKS51cCgpXHJcbiAgICAgIC5lbGUoJ3BhcmFtcycpO1xyXG4gICAgb2JqLmZvckVhY2goaXQgPT4gdGhpcy5jcmVhdGVQYXJhbShpdCwgeG1sKSk7XHJcbiAgICByZXR1cm4geG1sO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVQYXJhbShvYmo6IHVua25vd24sIHhtbDogWE1MQnVpbGRlcik6IHZvaWQge1xyXG4gICAgY29uc3QgcGFyYW0gPSB4bWwuZWxlKCdwYXJhbScpO1xyXG4gICAgdGhpcy5jcmVhdGVWYWx1ZShvYmosIHBhcmFtKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlVmFsdWUoZGF0YTogdW5rbm93biwgcGFyYW06IFhNTEJ1aWxkZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHZhbHVlID0gcGFyYW0uZWxlKCd2YWx1ZScpO1xyXG4gICAgaWYgKGlzU2FmZUludGVnZXIoZGF0YSkpIHtcclxuICAgICAgdmFsdWUuZWxlKCdpNCcpLnR4dChkYXRhLnRvU3RyaW5nKCkpO1xyXG4gICAgfSBlbHNlIGlmIChpc051bWJlcihkYXRhKSkge1xyXG4gICAgICB2YWx1ZS5lbGUoJ2RvdWJsZScpLnR4dChkYXRhLnRvU3RyaW5nKCkpO1xyXG4gICAgfSBlbHNlIGlmIChpc0Jvb2xlYW4oZGF0YSkpIHtcclxuICAgICAgdmFsdWUuZWxlKCdib29sZWFuJykudHh0KGRhdGEgPyAnMScgOiAnMCcpO1xyXG4gICAgfSBlbHNlIGlmIChpc0RhdGUoZGF0YSkpIHtcclxuICAgICAgdmFsdWUuZWxlKCdkYXRlVGltZS5pc284NjAxJykudHh0KGZvcm1hdChkYXRhLCAneXl5eU1NZGRUSEg6bW06c3MnKSk7XHJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgY29uc3QgYXJyYXkgPSB2YWx1ZVxyXG4gICAgICAgIC5lbGUoJ2FycmF5JylcclxuICAgICAgICAuZWxlKCdkYXRhJyk7XHJcbiAgICAgIGRhdGEuZm9yRWFjaChpdCA9PiB0aGlzLmNyZWF0ZVZhbHVlKGl0LCBhcnJheSkpO1xyXG4gICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhKSkge1xyXG4gICAgICBjb25zdCBzdHJ1Y3QgPSB2YWx1ZS5lbGUoJ3N0cnVjdCcpO1xyXG4gICAgICBmb3IgKGNvbnN0IFsgcHJvcCwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XHJcbiAgICAgICAgY29uc3QgbWVtYmVyID0gc3RydWN0XHJcbiAgICAgICAgICAuZWxlKCdtZW1iZXInKVxyXG4gICAgICAgICAgLmVsZSgnbmFtZScpLnR4dChwcm9wKVxyXG4gICAgICAgICAgLnVwKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVWYWx1ZSh2YWx1ZSwgbWVtYmVyKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFsdWUuZWxlKCdzdHJpbmcnKS50eHQoZGF0YS50b1N0cmluZygpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVzcG9uc2VUb09iamVjdChyZXNwb25zZTogc3RyaW5nKTogdW5rbm93biB7XHJcbiAgICBjb25zdCByZXMgPSBjcmVhdGUocmVzcG9uc2UpLmVuZCh7IGZvcm1hdDogJ29iamVjdCcgfSk7XHJcbiAgICBpZiAoZ2V0KHJlcywgJ21ldGhvZFJlc3BvbnNlLnBhcmFtcycpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmZyb21WYWx1ZShnZXQocmVzLCAnbWV0aG9kUmVzcG9uc2UucGFyYW1zLnBhcmFtLnZhbHVlJykpO1xyXG4gICAgfSBlbHNlIGlmIChnZXQocmVzLCAnbWV0aG9kUmVzcG9uc2UuZmF1bHQnKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5mcm9tVmFsdWUoZ2V0KHJlcywgJ21ldGhvZFJlc3BvbnNlLmZhdWx0LnZhbHVlJykpO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFhNTC1SUEMgcmVzcG9uc2UuJyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZyb21WYWx1ZSh2YWx1ZTogdW5rbm93bik6IHVua25vd24ge1xyXG4gICAgaWYgKGdldCh2YWx1ZSwgJ2k0JykgfHwgZ2V0KHZhbHVlLCAnaW50JykpIHtcclxuICAgICAgcmV0dXJuIGdldCh2YWx1ZSwgJ2k0JykgfHwgZ2V0KHZhbHVlLCAnaW50Jyk7XHJcbiAgICB9IGVsc2UgaWYgKGdldCh2YWx1ZSwgJ2RvdWJsZScpKSB7XHJcbiAgICAgIHJldHVybiBnZXQodmFsdWUsICdkb3VibGUnKTtcclxuICAgIH0gZWxzZSBpZiAoZ2V0KHZhbHVlLCAnYm9vbGVhbicpKSB7XHJcbiAgICAgIHJldHVybiBnZXQodmFsdWUsICdib29sZWFuJykgPT09ICcxJztcclxuICAgIH0gZWxzZSBpZiAoZ2V0KHZhbHVlLCAnZGF0ZVRpbWUuaXNvODYwMScpKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZShnZXQodmFsdWUsICdkYXRlVGltZS5pc284NjAxJyksICd5eXl5TU1kZFRISDptbTpzcycsIG5ldyBEYXRlKCkpO1xyXG4gICAgfSBlbHNlIGlmIChnZXQodmFsdWUsICdhcnJheScpKSB7XHJcbiAgICAgIGNvbnN0IGFycmF5OiBhbnlbXSA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBnZXQodmFsdWUsICdhcnJheS5kYXRhLnZhbHVlJyk7XHJcbiAgICAgIGRhdGEuZm9yRWFjaCgoaXQ6IHVua25vd24pID0+IHtcclxuICAgICAgICBhcnJheS5wdXNoKHRoaXMuZnJvbVZhbHVlKGl0KSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9IGVsc2UgaWYgKGdldCh2YWx1ZSwgJ3N0cnVjdCcpKSB7XHJcbiAgICAgIGNvbnN0IHN0cnVjdDogYW55ID0ge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgY29uc3QgbWVtYmVycyA9IGdldCh2YWx1ZSwgJ3N0cnVjdC5tZW1iZXInKTtcclxuICAgICAgaWYgKGlzQXJyYXkobWVtYmVycykpIHtcclxuICAgICAgICBtZW1iZXJzLmZvckVhY2goKG1lbWJlcjogdW5rbm93bikgPT4ge1xyXG4gICAgICAgICAgc3RydWN0W2dldChtZW1iZXIsICduYW1lJyldID0gdGhpcy5mcm9tVmFsdWUoZ2V0KG1lbWJlciwgJ3ZhbHVlJykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0cnVjdFtnZXQobWVtYmVycywgJ25hbWUnKV0gPSB0aGlzLmZyb21WYWx1ZShnZXQobWVtYmVycywgJ3ZhbHVlJykpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzdHJ1Y3Q7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZ2V0KHZhbHVlLCAnc3RyaW5nJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsICIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwgImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCAiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCAiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsICIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCAiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsICJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuIiwgIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TWFwO1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5O1xuIiwgImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVG9TdHJpbmc7XG4iLCAiLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0cmltbWVkRW5kSW5kZXg7XG4iLCAiaW1wb3J0IHRyaW1tZWRFbmRJbmRleCBmcm9tICcuL190cmltbWVkRW5kSW5kZXguanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUcmltO1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsICJpbXBvcnQgYmFzZVRyaW0gZnJvbSAnLi9fYmFzZVRyaW0uanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9OdW1iZXI7XG4iLCAiaW1wb3J0IHRvTnVtYmVyIGZyb20gJy4vdG9OdW1iZXIuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEyLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0Zpbml0ZSgzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvRmluaXRlKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICB9XG4gIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gIH1cbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9GaW5pdGU7XG4iLCAiaW1wb3J0IHRvRmluaXRlIGZyb20gJy4vdG9GaW5pdGUuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0ludGVnZXI7XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRnVuY3Rpb247XG4iLCAiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNvcmVKc0RhdGE7XG4iLCAiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwgIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCAiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc01hc2tlZCBmcm9tICcuL19pc01hc2tlZC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNOYXRpdmU7XG4iLCAiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwgImltcG9ydCBiYXNlSXNOYXRpdmUgZnJvbSAnLi9fYmFzZUlzTmF0aXZlLmpzJztcbmltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL19nZXRWYWx1ZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5hdGl2ZTtcbiIsICIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG4iLCAiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG4iLCAiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVVdGlsO1xuIiwgImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNLZXk7XG4iLCAiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCAiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaENsZWFyO1xuIiwgIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hEZWxldGU7XG4iLCAiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hHZXQ7XG4iLCAiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hIYXM7XG4iLCAiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaFNldDtcbiIsICJpbXBvcnQgaGFzaENsZWFyIGZyb20gJy4vX2hhc2hDbGVhci5qcyc7XG5pbXBvcnQgaGFzaERlbGV0ZSBmcm9tICcuL19oYXNoRGVsZXRlLmpzJztcbmltcG9ydCBoYXNoR2V0IGZyb20gJy4vX2hhc2hHZXQuanMnO1xuaW1wb3J0IGhhc2hIYXMgZnJvbSAnLi9faGFzaEhhcy5qcyc7XG5pbXBvcnQgaGFzaFNldCBmcm9tICcuL19oYXNoU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2g7XG4iLCAiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVDbGVhcjtcbiIsICJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZjtcbiIsICJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlRGVsZXRlO1xuIiwgImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlR2V0O1xuIiwgImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUhhcztcbiIsICJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlU2V0O1xuIiwgImltcG9ydCBsaXN0Q2FjaGVDbGVhciBmcm9tICcuL19saXN0Q2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbGlzdENhY2hlRGVsZXRlIGZyb20gJy4vX2xpc3RDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbGlzdENhY2hlR2V0IGZyb20gJy4vX2xpc3RDYWNoZUdldC5qcyc7XG5pbXBvcnQgbGlzdENhY2hlSGFzIGZyb20gJy4vX2xpc3RDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbGlzdENhY2hlU2V0IGZyb20gJy4vX2xpc3RDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTGlzdENhY2hlO1xuIiwgImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgTWFwO1xuIiwgImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCAiaW1wb3J0IGlzS2V5YWJsZSBmcm9tICcuL19pc0tleWFibGUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE1hcERhdGE7XG4iLCAiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZURlbGV0ZTtcbiIsICJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUdldDtcbiIsICJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVIYXM7XG4iLCAiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVTZXQ7XG4iLCAiaW1wb3J0IG1hcENhY2hlQ2xlYXIgZnJvbSAnLi9fbWFwQ2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVEZWxldGUgZnJvbSAnLi9fbWFwQ2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IG1hcENhY2hlR2V0IGZyb20gJy4vX21hcENhY2hlR2V0LmpzJztcbmltcG9ydCBtYXBDYWNoZUhhcyBmcm9tICcuL19tYXBDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVTZXQgZnJvbSAnLi9fbWFwQ2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTWFwQ2FjaGU7XG4iLCAiaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwgImltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNhcHBlZDtcbiIsICJpbXBvcnQgbWVtb2l6ZUNhcHBlZCBmcm9tICcuL19tZW1vaXplQ2FwcGVkLmpzJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdUb1BhdGg7XG4iLCAiaW1wb3J0IGJhc2VUb1N0cmluZyBmcm9tICcuL19iYXNlVG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU3RyaW5nO1xuIiwgImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNLZXkgZnJvbSAnLi9faXNLZXkuanMnO1xuaW1wb3J0IHN0cmluZ1RvUGF0aCBmcm9tICcuL19zdHJpbmdUb1BhdGguanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYXN0UGF0aDtcbiIsICJpbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0tleTtcbiIsICJpbXBvcnQgY2FzdFBhdGggZnJvbSAnLi9fY2FzdFBhdGguanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldDtcbiIsICJpbXBvcnQgYmFzZUdldCBmcm9tICcuL19iYXNlR2V0LmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXQ7XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzRGF0ZTtcbiIsICJpbXBvcnQgYmFzZUlzRGF0ZSBmcm9tICcuL19iYXNlSXNEYXRlLmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgaXNEYXRlO1xuIiwgImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi90b0ludGVnZXIuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNJbnRlZ2VyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0ludGVnZXI7XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc051bWJlcigzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc051bWJlcjtcbiIsICJpbXBvcnQgaXNJbnRlZ2VyIGZyb20gJy4vaXNJbnRlZ2VyLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU2FmZUludGVnZXI7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwiZXNcIiAtbyAuL2BcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhZGQgfSBmcm9tICcuL2FkZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFmdGVyIH0gZnJvbSAnLi9hZnRlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFyeSB9IGZyb20gJy4vYXJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXNzaWduIH0gZnJvbSAnLi9hc3NpZ24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhc3NpZ25JbiB9IGZyb20gJy4vYXNzaWduSW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhc3NpZ25JbldpdGggfSBmcm9tICcuL2Fzc2lnbkluV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFzc2lnbldpdGggfSBmcm9tICcuL2Fzc2lnbldpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhdCB9IGZyb20gJy4vYXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhdHRlbXB0IH0gZnJvbSAnLi9hdHRlbXB0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYmVmb3JlIH0gZnJvbSAnLi9iZWZvcmUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBiaW5kIH0gZnJvbSAnLi9iaW5kLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYmluZEFsbCB9IGZyb20gJy4vYmluZEFsbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGJpbmRLZXkgfSBmcm9tICcuL2JpbmRLZXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjYW1lbENhc2UgfSBmcm9tICcuL2NhbWVsQ2FzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhcGl0YWxpemUgfSBmcm9tICcuL2NhcGl0YWxpemUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjYXN0QXJyYXkgfSBmcm9tICcuL2Nhc3RBcnJheS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNlaWwgfSBmcm9tICcuL2NlaWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjaGFpbiB9IGZyb20gJy4vY2hhaW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjaHVuayB9IGZyb20gJy4vY2h1bmsuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjbGFtcCB9IGZyb20gJy4vY2xhbXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjbG9uZSB9IGZyb20gJy4vY2xvbmUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjbG9uZURlZXAgfSBmcm9tICcuL2Nsb25lRGVlcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNsb25lRGVlcFdpdGggfSBmcm9tICcuL2Nsb25lRGVlcFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjbG9uZVdpdGggfSBmcm9tICcuL2Nsb25lV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvbW1pdCB9IGZyb20gJy4vY29tbWl0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29tcGFjdCB9IGZyb20gJy4vY29tcGFjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvbmNhdCB9IGZyb20gJy4vY29uY2F0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29uZCB9IGZyb20gJy4vY29uZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvbmZvcm1zIH0gZnJvbSAnLi9jb25mb3Jtcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvbmZvcm1zVG8gfSBmcm9tICcuL2NvbmZvcm1zVG8uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjb25zdGFudCB9IGZyb20gJy4vY29uc3RhbnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjb3VudEJ5IH0gZnJvbSAnLi9jb3VudEJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjdXJyeSB9IGZyb20gJy4vY3VycnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjdXJyeVJpZ2h0IH0gZnJvbSAnLi9jdXJyeVJpZ2h0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVib3VuY2UgfSBmcm9tICcuL2RlYm91bmNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVidXJyIH0gZnJvbSAnLi9kZWJ1cnIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWZhdWx0VG8gfSBmcm9tICcuL2RlZmF1bHRUby5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHRzIH0gZnJvbSAnLi9kZWZhdWx0cy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHRzRGVlcCB9IGZyb20gJy4vZGVmYXVsdHNEZWVwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmZXIgfSBmcm9tICcuL2RlZmVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVsYXkgfSBmcm9tICcuL2RlbGF5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGlmZmVyZW5jZSB9IGZyb20gJy4vZGlmZmVyZW5jZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRpZmZlcmVuY2VCeSB9IGZyb20gJy4vZGlmZmVyZW5jZUJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGlmZmVyZW5jZVdpdGggfSBmcm9tICcuL2RpZmZlcmVuY2VXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGl2aWRlIH0gZnJvbSAnLi9kaXZpZGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkcm9wIH0gZnJvbSAnLi9kcm9wLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZHJvcFJpZ2h0IH0gZnJvbSAnLi9kcm9wUmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkcm9wUmlnaHRXaGlsZSB9IGZyb20gJy4vZHJvcFJpZ2h0V2hpbGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkcm9wV2hpbGUgfSBmcm9tICcuL2Ryb3BXaGlsZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVhY2ggfSBmcm9tICcuL2VhY2guanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBlYWNoUmlnaHQgfSBmcm9tICcuL2VhY2hSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVuZHNXaXRoIH0gZnJvbSAnLi9lbmRzV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVudHJpZXMgfSBmcm9tICcuL2VudHJpZXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBlbnRyaWVzSW4gfSBmcm9tICcuL2VudHJpZXNJbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVxIH0gZnJvbSAnLi9lcS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVzY2FwZSB9IGZyb20gJy4vZXNjYXBlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXNjYXBlUmVnRXhwIH0gZnJvbSAnLi9lc2NhcGVSZWdFeHAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBldmVyeSB9IGZyb20gJy4vZXZlcnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBleHRlbmQgfSBmcm9tICcuL2V4dGVuZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV4dGVuZFdpdGggfSBmcm9tICcuL2V4dGVuZFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaWxsIH0gZnJvbSAnLi9maWxsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmlsdGVyIH0gZnJvbSAnLi9maWx0ZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaW5kIH0gZnJvbSAnLi9maW5kLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmluZEluZGV4IH0gZnJvbSAnLi9maW5kSW5kZXguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaW5kS2V5IH0gZnJvbSAnLi9maW5kS2V5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmluZExhc3QgfSBmcm9tICcuL2ZpbmRMYXN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmluZExhc3RJbmRleCB9IGZyb20gJy4vZmluZExhc3RJbmRleC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpbmRMYXN0S2V5IH0gZnJvbSAnLi9maW5kTGFzdEtleS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpcnN0IH0gZnJvbSAnLi9maXJzdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsYXRNYXAgfSBmcm9tICcuL2ZsYXRNYXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbGF0TWFwRGVlcCB9IGZyb20gJy4vZmxhdE1hcERlZXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbGF0TWFwRGVwdGggfSBmcm9tICcuL2ZsYXRNYXBEZXB0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsYXR0ZW4gfSBmcm9tICcuL2ZsYXR0ZW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbGF0dGVuRGVlcCB9IGZyb20gJy4vZmxhdHRlbkRlZXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbGF0dGVuRGVwdGggfSBmcm9tICcuL2ZsYXR0ZW5EZXB0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsaXAgfSBmcm9tICcuL2ZsaXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbG9vciB9IGZyb20gJy4vZmxvb3IuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbG93IH0gZnJvbSAnLi9mbG93LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmxvd1JpZ2h0IH0gZnJvbSAnLi9mbG93UmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmb3JFYWNoIH0gZnJvbSAnLi9mb3JFYWNoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZm9yRWFjaFJpZ2h0IH0gZnJvbSAnLi9mb3JFYWNoUmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmb3JJbiB9IGZyb20gJy4vZm9ySW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmb3JJblJpZ2h0IH0gZnJvbSAnLi9mb3JJblJpZ2h0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZm9yT3duIH0gZnJvbSAnLi9mb3JPd24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmb3JPd25SaWdodCB9IGZyb20gJy4vZm9yT3duUmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmcm9tUGFpcnMgfSBmcm9tICcuL2Zyb21QYWlycy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZ1bmN0aW9ucyB9IGZyb20gJy4vZnVuY3Rpb25zLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZnVuY3Rpb25zSW4gfSBmcm9tICcuL2Z1bmN0aW9uc0luLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2V0IH0gZnJvbSAnLi9nZXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBncm91cEJ5IH0gZnJvbSAnLi9ncm91cEJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ3QgfSBmcm9tICcuL2d0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ3RlIH0gZnJvbSAnLi9ndGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBoYXMgfSBmcm9tICcuL2hhcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhhc0luIH0gZnJvbSAnLi9oYXNJbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhlYWQgfSBmcm9tICcuL2hlYWQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpblJhbmdlIH0gZnJvbSAnLi9pblJhbmdlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW5jbHVkZXMgfSBmcm9tICcuL2luY2x1ZGVzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW5kZXhPZiB9IGZyb20gJy4vaW5kZXhPZi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGluaXRpYWwgfSBmcm9tICcuL2luaXRpYWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbnRlcnNlY3Rpb24gfSBmcm9tICcuL2ludGVyc2VjdGlvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludGVyc2VjdGlvbkJ5IH0gZnJvbSAnLi9pbnRlcnNlY3Rpb25CeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludGVyc2VjdGlvbldpdGggfSBmcm9tICcuL2ludGVyc2VjdGlvbldpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbnZlcnQgfSBmcm9tICcuL2ludmVydC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludmVydEJ5IH0gZnJvbSAnLi9pbnZlcnRCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludm9rZSB9IGZyb20gJy4vaW52b2tlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW52b2tlTWFwIH0gZnJvbSAnLi9pbnZva2VNYXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0FyZ3VtZW50cyB9IGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0FycmF5IH0gZnJvbSAnLi9pc0FycmF5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNBcnJheUJ1ZmZlciB9IGZyb20gJy4vaXNBcnJheUJ1ZmZlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJyYXlMaWtlIH0gZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJyYXlMaWtlT2JqZWN0IH0gZnJvbSAnLi9pc0FycmF5TGlrZU9iamVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQm9vbGVhbiB9IGZyb20gJy4vaXNCb29sZWFuLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNCdWZmZXIgfSBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNEYXRlIH0gZnJvbSAnLi9pc0RhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0VsZW1lbnQgfSBmcm9tICcuL2lzRWxlbWVudC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRW1wdHkgfSBmcm9tICcuL2lzRW1wdHkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0VxdWFsIH0gZnJvbSAnLi9pc0VxdWFsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNFcXVhbFdpdGggfSBmcm9tICcuL2lzRXF1YWxXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNFcnJvciB9IGZyb20gJy4vaXNFcnJvci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRmluaXRlIH0gZnJvbSAnLi9pc0Zpbml0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0ludGVnZXIgfSBmcm9tICcuL2lzSW50ZWdlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTGVuZ3RoIH0gZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTWFwIH0gZnJvbSAnLi9pc01hcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTWF0Y2ggfSBmcm9tICcuL2lzTWF0Y2guanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc01hdGNoV2l0aCB9IGZyb20gJy4vaXNNYXRjaFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc05hTiB9IGZyb20gJy4vaXNOYU4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc05hdGl2ZSB9IGZyb20gJy4vaXNOYXRpdmUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc05pbCB9IGZyb20gJy4vaXNOaWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc051bGwgfSBmcm9tICcuL2lzTnVsbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTnVtYmVyIH0gZnJvbSAnLi9pc051bWJlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzT2JqZWN0IH0gZnJvbSAnLi9pc09iamVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzT2JqZWN0TGlrZSB9IGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4vaXNQbGFpbk9iamVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzUmVnRXhwIH0gZnJvbSAnLi9pc1JlZ0V4cC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzU2FmZUludGVnZXIgfSBmcm9tICcuL2lzU2FmZUludGVnZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc1NldCB9IGZyb20gJy4vaXNTZXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc1N0cmluZyB9IGZyb20gJy4vaXNTdHJpbmcuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc1N5bWJvbCB9IGZyb20gJy4vaXNTeW1ib2wuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc1R5cGVkQXJyYXkgfSBmcm9tICcuL2lzVHlwZWRBcnJheS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzV2Vha01hcCB9IGZyb20gJy4vaXNXZWFrTWFwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNXZWFrU2V0IH0gZnJvbSAnLi9pc1dlYWtTZXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpdGVyYXRlZSB9IGZyb20gJy4vaXRlcmF0ZWUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBqb2luIH0gZnJvbSAnLi9qb2luLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMga2ViYWJDYXNlIH0gZnJvbSAnLi9rZWJhYkNhc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBrZXlCeSB9IGZyb20gJy4va2V5QnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBrZXlzIH0gZnJvbSAnLi9rZXlzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMga2V5c0luIH0gZnJvbSAnLi9rZXlzSW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsYXN0IH0gZnJvbSAnLi9sYXN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbGFzdEluZGV4T2YgfSBmcm9tICcuL2xhc3RJbmRleE9mLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbG9kYXNoIH0gZnJvbSAnLi93cmFwcGVyTG9kYXNoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbG93ZXJDYXNlIH0gZnJvbSAnLi9sb3dlckNhc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsb3dlckZpcnN0IH0gZnJvbSAnLi9sb3dlckZpcnN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbHQgfSBmcm9tICcuL2x0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbHRlIH0gZnJvbSAnLi9sdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtYXAgfSBmcm9tICcuL21hcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1hcEtleXMgfSBmcm9tICcuL21hcEtleXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtYXBWYWx1ZXMgfSBmcm9tICcuL21hcFZhbHVlcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1hdGNoZXMgfSBmcm9tICcuL21hdGNoZXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtYXRjaGVzUHJvcGVydHkgfSBmcm9tICcuL21hdGNoZXNQcm9wZXJ0eS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1heCB9IGZyb20gJy4vbWF4LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWF4QnkgfSBmcm9tICcuL21heEJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWVhbiB9IGZyb20gJy4vbWVhbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1lYW5CeSB9IGZyb20gJy4vbWVhbkJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWVtb2l6ZSB9IGZyb20gJy4vbWVtb2l6ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1lcmdlIH0gZnJvbSAnLi9tZXJnZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1lcmdlV2l0aCB9IGZyb20gJy4vbWVyZ2VXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWV0aG9kIH0gZnJvbSAnLi9tZXRob2QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZXRob2RPZiB9IGZyb20gJy4vbWV0aG9kT2YuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtaW4gfSBmcm9tICcuL21pbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1pbkJ5IH0gZnJvbSAnLi9taW5CeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1peGluIH0gZnJvbSAnLi9taXhpbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG11bHRpcGx5IH0gZnJvbSAnLi9tdWx0aXBseS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG5lZ2F0ZSB9IGZyb20gJy4vbmVnYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbmV4dCB9IGZyb20gJy4vbmV4dC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG5vb3AgfSBmcm9tICcuL25vb3AuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBub3cgfSBmcm9tICcuL25vdy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG50aCB9IGZyb20gJy4vbnRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbnRoQXJnIH0gZnJvbSAnLi9udGhBcmcuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvbWl0IH0gZnJvbSAnLi9vbWl0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb21pdEJ5IH0gZnJvbSAnLi9vbWl0QnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvbmNlIH0gZnJvbSAnLi9vbmNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3JkZXJCeSB9IGZyb20gJy4vb3JkZXJCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG92ZXIgfSBmcm9tICcuL292ZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvdmVyQXJncyB9IGZyb20gJy4vb3ZlckFyZ3MuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvdmVyRXZlcnkgfSBmcm9tICcuL292ZXJFdmVyeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG92ZXJTb21lIH0gZnJvbSAnLi9vdmVyU29tZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhZCB9IGZyb20gJy4vcGFkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFkRW5kIH0gZnJvbSAnLi9wYWRFbmQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYWRTdGFydCB9IGZyb20gJy4vcGFkU3RhcnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZUludCB9IGZyb20gJy4vcGFyc2VJbnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJ0aWFsIH0gZnJvbSAnLi9wYXJ0aWFsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFydGlhbFJpZ2h0IH0gZnJvbSAnLi9wYXJ0aWFsUmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJ0aXRpb24gfSBmcm9tICcuL3BhcnRpdGlvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBpY2sgfSBmcm9tICcuL3BpY2suanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwaWNrQnkgfSBmcm9tICcuL3BpY2tCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBsYW50IH0gZnJvbSAnLi9wbGFudC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByb3BlcnR5IH0gZnJvbSAnLi9wcm9wZXJ0eS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByb3BlcnR5T2YgfSBmcm9tICcuL3Byb3BlcnR5T2YuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwdWxsIH0gZnJvbSAnLi9wdWxsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHVsbEFsbCB9IGZyb20gJy4vcHVsbEFsbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHB1bGxBbGxCeSB9IGZyb20gJy4vcHVsbEFsbEJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHVsbEFsbFdpdGggfSBmcm9tICcuL3B1bGxBbGxXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHVsbEF0IH0gZnJvbSAnLi9wdWxsQXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByYW5kb20gfSBmcm9tICcuL3JhbmRvbS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJhbmdlIH0gZnJvbSAnLi9yYW5nZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJhbmdlUmlnaHQgfSBmcm9tICcuL3JhbmdlUmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZWFyZyB9IGZyb20gJy4vcmVhcmcuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZWR1Y2UgfSBmcm9tICcuL3JlZHVjZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlZHVjZVJpZ2h0IH0gZnJvbSAnLi9yZWR1Y2VSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlamVjdCB9IGZyb20gJy4vcmVqZWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVtb3ZlIH0gZnJvbSAnLi9yZW1vdmUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZXBlYXQgfSBmcm9tICcuL3JlcGVhdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlcGxhY2UgfSBmcm9tICcuL3JlcGxhY2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZXN0IH0gZnJvbSAnLi9yZXN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVzdWx0IH0gZnJvbSAnLi9yZXN1bHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZXZlcnNlIH0gZnJvbSAnLi9yZXZlcnNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcm91bmQgfSBmcm9tICcuL3JvdW5kLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2FtcGxlIH0gZnJvbSAnLi9zYW1wbGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzYW1wbGVTaXplIH0gZnJvbSAnLi9zYW1wbGVTaXplLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2V0IH0gZnJvbSAnLi9zZXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzZXRXaXRoIH0gZnJvbSAnLi9zZXRXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2h1ZmZsZSB9IGZyb20gJy4vc2h1ZmZsZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNpemUgfSBmcm9tICcuL3NpemUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzbGljZSB9IGZyb20gJy4vc2xpY2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzbmFrZUNhc2UgfSBmcm9tICcuL3NuYWtlQ2FzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvbWUgfSBmcm9tICcuL3NvbWUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0QnkgfSBmcm9tICcuL3NvcnRCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvcnRlZEluZGV4IH0gZnJvbSAnLi9zb3J0ZWRJbmRleC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvcnRlZEluZGV4QnkgfSBmcm9tICcuL3NvcnRlZEluZGV4QnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0ZWRJbmRleE9mIH0gZnJvbSAnLi9zb3J0ZWRJbmRleE9mLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc29ydGVkTGFzdEluZGV4IH0gZnJvbSAnLi9zb3J0ZWRMYXN0SW5kZXguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0ZWRMYXN0SW5kZXhCeSB9IGZyb20gJy4vc29ydGVkTGFzdEluZGV4QnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0ZWRMYXN0SW5kZXhPZiB9IGZyb20gJy4vc29ydGVkTGFzdEluZGV4T2YuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0ZWRVbmlxIH0gZnJvbSAnLi9zb3J0ZWRVbmlxLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc29ydGVkVW5pcUJ5IH0gZnJvbSAnLi9zb3J0ZWRVbmlxQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzcGxpdCB9IGZyb20gJy4vc3BsaXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzcHJlYWQgfSBmcm9tICcuL3NwcmVhZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0YXJ0Q2FzZSB9IGZyb20gJy4vc3RhcnRDYXNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3RhcnRzV2l0aCB9IGZyb20gJy4vc3RhcnRzV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0dWJBcnJheSB9IGZyb20gJy4vc3R1YkFycmF5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3R1YkZhbHNlIH0gZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHViT2JqZWN0IH0gZnJvbSAnLi9zdHViT2JqZWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3R1YlN0cmluZyB9IGZyb20gJy4vc3R1YlN0cmluZy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0dWJUcnVlIH0gZnJvbSAnLi9zdHViVHJ1ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN1YnRyYWN0IH0gZnJvbSAnLi9zdWJ0cmFjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN1bSB9IGZyb20gJy4vc3VtLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3VtQnkgfSBmcm9tICcuL3N1bUJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGFpbCB9IGZyb20gJy4vdGFpbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRha2UgfSBmcm9tICcuL3Rha2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0YWtlUmlnaHQgfSBmcm9tICcuL3Rha2VSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRha2VSaWdodFdoaWxlIH0gZnJvbSAnLi90YWtlUmlnaHRXaGlsZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRha2VXaGlsZSB9IGZyb20gJy4vdGFrZVdoaWxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGFwIH0gZnJvbSAnLi90YXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0ZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0ZW1wbGF0ZVNldHRpbmdzIH0gZnJvbSAnLi90ZW1wbGF0ZVNldHRpbmdzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGhyb3R0bGUgfSBmcm9tICcuL3Rocm90dGxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGhydSB9IGZyb20gJy4vdGhydS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRpbWVzIH0gZnJvbSAnLi90aW1lcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvQXJyYXkgfSBmcm9tICcuL3RvQXJyYXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b0Zpbml0ZSB9IGZyb20gJy4vdG9GaW5pdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b0ludGVnZXIgfSBmcm9tICcuL3RvSW50ZWdlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvSXRlcmF0b3IgfSBmcm9tICcuL3RvSXRlcmF0b3IuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b0pTT04gfSBmcm9tICcuL3RvSlNPTi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvTGVuZ3RoIH0gZnJvbSAnLi90b0xlbmd0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvTG93ZXIgfSBmcm9tICcuL3RvTG93ZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b051bWJlciB9IGZyb20gJy4vdG9OdW1iZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b1BhaXJzIH0gZnJvbSAnLi90b1BhaXJzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9QYWlyc0luIH0gZnJvbSAnLi90b1BhaXJzSW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b1BhdGggfSBmcm9tICcuL3RvUGF0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvUGxhaW5PYmplY3QgfSBmcm9tICcuL3RvUGxhaW5PYmplY3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b1NhZmVJbnRlZ2VyIH0gZnJvbSAnLi90b1NhZmVJbnRlZ2VyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9TdHJpbmcgfSBmcm9tICcuL3RvU3RyaW5nLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9VcHBlciB9IGZyb20gJy4vdG9VcHBlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRyYW5zZm9ybSB9IGZyb20gJy4vdHJhbnNmb3JtLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdHJpbSB9IGZyb20gJy4vdHJpbS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRyaW1FbmQgfSBmcm9tICcuL3RyaW1FbmQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0cmltU3RhcnQgfSBmcm9tICcuL3RyaW1TdGFydC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRydW5jYXRlIH0gZnJvbSAnLi90cnVuY2F0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuYXJ5IH0gZnJvbSAnLi91bmFyeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuZXNjYXBlIH0gZnJvbSAnLi91bmVzY2FwZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaW9uIH0gZnJvbSAnLi91bmlvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaW9uQnkgfSBmcm9tICcuL3VuaW9uQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bmlvbldpdGggfSBmcm9tICcuL3VuaW9uV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaXEgfSBmcm9tICcuL3VuaXEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bmlxQnkgfSBmcm9tICcuL3VuaXFCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaXFXaXRoIH0gZnJvbSAnLi91bmlxV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaXF1ZUlkIH0gZnJvbSAnLi91bmlxdWVJZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc2V0IH0gZnJvbSAnLi91bnNldC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuemlwIH0gZnJvbSAnLi91bnppcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuemlwV2l0aCB9IGZyb20gJy4vdW56aXBXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXBkYXRlIH0gZnJvbSAnLi91cGRhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1cGRhdGVXaXRoIH0gZnJvbSAnLi91cGRhdGVXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXBwZXJDYXNlIH0gZnJvbSAnLi91cHBlckNhc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1cHBlckZpcnN0IH0gZnJvbSAnLi91cHBlckZpcnN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsdWUgfSBmcm9tICcuL3ZhbHVlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsdWVPZiB9IGZyb20gJy4vdmFsdWVPZi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHZhbHVlcyB9IGZyb20gJy4vdmFsdWVzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsdWVzSW4gfSBmcm9tICcuL3ZhbHVlc0luLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd2l0aG91dCB9IGZyb20gJy4vd2l0aG91dC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdvcmRzIH0gZnJvbSAnLi93b3Jkcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdyYXAgfSBmcm9tICcuL3dyYXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3cmFwcGVyQXQgfSBmcm9tICcuL3dyYXBwZXJBdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdyYXBwZXJDaGFpbiB9IGZyb20gJy4vd3JhcHBlckNoYWluLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlckNvbW1pdCB9IGZyb20gJy4vY29tbWl0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlckxvZGFzaCB9IGZyb20gJy4vd3JhcHBlckxvZGFzaC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdyYXBwZXJOZXh0IH0gZnJvbSAnLi9uZXh0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlclBsYW50IH0gZnJvbSAnLi9wbGFudC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdyYXBwZXJSZXZlcnNlIH0gZnJvbSAnLi93cmFwcGVyUmV2ZXJzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdyYXBwZXJUb0l0ZXJhdG9yIH0gZnJvbSAnLi90b0l0ZXJhdG9yLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlclZhbHVlIH0gZnJvbSAnLi93cmFwcGVyVmFsdWUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB4b3IgfSBmcm9tICcuL3hvci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHhvckJ5IH0gZnJvbSAnLi94b3JCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHhvcldpdGggfSBmcm9tICcuL3hvcldpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB6aXAgfSBmcm9tICcuL3ppcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHppcE9iamVjdCB9IGZyb20gJy4vemlwT2JqZWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgemlwT2JqZWN0RGVlcCB9IGZyb20gJy4vemlwT2JqZWN0RGVlcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHppcFdpdGggfSBmcm9tICcuL3ppcFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbG9kYXNoLmRlZmF1bHQuanMnO1xuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsICJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCAiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCAiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwgImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBkYXRlP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLiBUaGUgZnVuY3Rpb24gd29ya3MgZm9yIGRhdGVzIHRyYW5zZmVycmVkIGFjcm9zcyBpZnJhbWVzLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwgImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwgInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsICJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCAidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiAodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsICJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwgImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsICJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwgImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCAiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mTmV4dFllYXIsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIGRpcnR5T3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsICJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIGRpcnR5T3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG5cbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cblxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCAiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwgImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsICJmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG5cbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuXG4gIHZhciBkYXRlVGltZUZvcm1hdDtcblxuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn1cblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwgInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9XG59IiwgImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IFx1MjZBMFx1RkUwRiBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIHNlY29uZCBhcmd1bWVudCBpcyBub3cgcmVxdWlyZWQgZm9yIHRoZSBzYWtlIG9mIGV4cGxpY2l0bmVzcy5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSkpXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSwgXCJ5eXl5LU1NLWRkJ1QnSEg6bW06c3MuU1NTeHh4XCIpXG4gKiAgIGBgYFxuICpcbiAqIC0gTmV3IGZvcm1hdCBzdHJpbmcgQVBJIGZvciBgZm9ybWF0YCBmdW5jdGlvblxuICogICB3aGljaCBpcyBiYXNlZCBvbiBbVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1XShodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlKS5cbiAqICAgU2VlIFt0aGlzIHBvc3RdKGh0dHBzOi8vYmxvZy5kYXRlLWZucy5vcmcvcG9zdC91bmljb2RlLXRva2Vucy1pbi1kYXRlLWZucy12Mi1zcmVhdHlraTkxamcpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogLSBDaGFyYWN0ZXJzIGFyZSBub3cgZXNjYXBlZCB1c2luZyBzaW5nbGUgcXVvdGUgc3ltYm9scyAoYCdgKSBpbnN0ZWFkIG9mIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZm9ybWF0U3RyID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKVsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGRpcnR5T2JqZWN0KSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Fzc2lnbiByZXF1aXJlcyB0aGF0IGlucHV0IHBhcmFtZXRlciBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIGRpcnR5T2JqZWN0ID0gZGlydHlPYmplY3QgfHwge307XG5cbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gZGlydHlPYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRpcnR5T2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSBkaXJ0eU9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VVRDRGF5KGRpcnR5RGF0ZSwgZGlydHlEYXksIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IHRvSW50ZWdlcihkaXJ0eURheSk7XG4gIHZhciBjdXJyZW50RGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIHJlbWFpbmRlciA9IGRheSAlIDc7XG4gIHZhciBkYXlJbmRleCA9IChyZW1haW5kZXIgKyA3KSAlIDc7XG4gIHZhciBkaWZmID0gKGRheUluZGV4IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gY3VycmVudERheTtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlmZik7XG4gIHJldHVybiBkYXRlO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRVVENJU09EYXkoZGlydHlEYXRlLCBkaXJ0eURheSkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRheSA9IHRvSW50ZWdlcihkaXJ0eURheSk7XG5cbiAgaWYgKGRheSAlIDcgPT09IDApIHtcbiAgICBkYXkgPSBkYXkgLSA3O1xuICB9XG5cbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBjdXJyZW50RGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIHJlbWFpbmRlciA9IGRheSAlIDc7XG4gIHZhciBkYXlJbmRleCA9IChyZW1haW5kZXIgKyA3KSAlIDc7XG4gIHZhciBkaWZmID0gKGRheUluZGV4IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gY3VycmVudERheTtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlmZik7XG4gIHJldHVybiBkYXRlO1xufSIsICJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VVRDSVNPV2VlayhkaXJ0eURhdGUsIGRpcnR5SVNPV2Vlaykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGlzb1dlZWsgPSB0b0ludGVnZXIoZGlydHlJU09XZWVrKTtcbiAgdmFyIGRpZmYgPSBnZXRVVENJU09XZWVrKGRhdGUpIC0gaXNvV2VlaztcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZiAqIDcpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCAiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eVdlZWssIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB3ZWVrID0gdG9JbnRlZ2VyKGRpcnR5V2Vlayk7XG4gIHZhciBkaWZmID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKSAtIHdlZWs7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYgKiA3KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHNldFVUQ0RheSBmcm9tIFwiLi4vLi4vLi4vX2xpYi9zZXRVVENEYXkvaW5kZXguanNcIjtcbmltcG9ydCBzZXRVVENJU09EYXkgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDSVNPRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgc2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9zZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9zZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9IT1VSID0gMzYwMDAwMDtcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDA7XG52YXIgTUlMTElTRUNPTkRTX0lOX1NFQ09ORCA9IDEwMDA7XG52YXIgbnVtZXJpY1BhdHRlcm5zID0ge1xuICBtb250aDogL14oMVswLTJdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTJcbiAgZGF0ZTogL14oM1swLTFdfFswLTJdP1xcZCkvLFxuICAvLyAwIHRvIDMxXG4gIGRheU9mWWVhcjogL14oMzZbMC02XXwzWzAtNV1cXGR8WzAtMl0/XFxkP1xcZCkvLFxuICAvLyAwIHRvIDM2NlxuICB3ZWVrOiAvXig1WzAtM118WzAtNF0/XFxkKS8sXG4gIC8vIDAgdG8gNTNcbiAgaG91cjIzaDogL14oMlswLTNdfFswLTFdP1xcZCkvLFxuICAvLyAwIHRvIDIzXG4gIGhvdXIyNGg6IC9eKDJbMC00XXxbMC0xXT9cXGQpLyxcbiAgLy8gMCB0byAyNFxuICBob3VyMTFoOiAvXigxWzAtMV18MD9cXGQpLyxcbiAgLy8gMCB0byAxMVxuICBob3VyMTJoOiAvXigxWzAtMl18MD9cXGQpLyxcbiAgLy8gMCB0byAxMlxuICBtaW51dGU6IC9eWzAtNV0/XFxkLyxcbiAgLy8gMCB0byA1OVxuICBzZWNvbmQ6IC9eWzAtNV0/XFxkLyxcbiAgLy8gMCB0byA1OVxuICBzaW5nbGVEaWdpdDogL15cXGQvLFxuICAvLyAwIHRvIDlcbiAgdHdvRGlnaXRzOiAvXlxcZHsxLDJ9LyxcbiAgLy8gMCB0byA5OVxuICB0aHJlZURpZ2l0czogL15cXGR7MSwzfS8sXG4gIC8vIDAgdG8gOTk5XG4gIGZvdXJEaWdpdHM6IC9eXFxkezEsNH0vLFxuICAvLyAwIHRvIDk5OTlcbiAgYW55RGlnaXRzU2lnbmVkOiAvXi0/XFxkKy8sXG4gIHNpbmdsZURpZ2l0U2lnbmVkOiAvXi0/XFxkLyxcbiAgLy8gMCB0byA5LCAtMCB0byAtOVxuICB0d29EaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSwyfS8sXG4gIC8vIDAgdG8gOTksIC0wIHRvIC05OVxuICB0aHJlZURpZ2l0c1NpZ25lZDogL14tP1xcZHsxLDN9LyxcbiAgLy8gMCB0byA5OTksIC0wIHRvIC05OTlcbiAgZm91ckRpZ2l0c1NpZ25lZDogL14tP1xcZHsxLDR9LyAvLyAwIHRvIDk5OTksIC0wIHRvIC05OTk5XG5cbn07XG52YXIgdGltZXpvbmVQYXR0ZXJucyA9IHtcbiAgYmFzaWNPcHRpb25hbE1pbnV0ZXM6IC9eKFsrLV0pKFxcZHsyfSkoXFxkezJ9KT98Wi8sXG4gIGJhc2ljOiAvXihbKy1dKShcXGR7Mn0pKFxcZHsyfSl8Wi8sXG4gIGJhc2ljT3B0aW9uYWxTZWNvbmRzOiAvXihbKy1dKShcXGR7Mn0pKFxcZHsyfSkoKFxcZHsyfSkpP3xaLyxcbiAgZXh0ZW5kZWQ6IC9eKFsrLV0pKFxcZHsyfSk6KFxcZHsyfSl8Wi8sXG4gIGV4dGVuZGVkT3B0aW9uYWxTZWNvbmRzOiAvXihbKy1dKShcXGR7Mn0pOihcXGR7Mn0pKDooXFxkezJ9KSk/fFovXG59O1xuXG5mdW5jdGlvbiBwYXJzZU51bWVyaWNQYXR0ZXJuKHBhdHRlcm4sIHN0cmluZywgdmFsdWVDYWxsYmFjaykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gocGF0dGVybik7XG5cbiAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gcGFyc2VJbnQobWF0Y2hSZXN1bHRbMF0sIDEwKTtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWVDYWxsYmFjayA/IHZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWUsXG4gICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoUmVzdWx0WzBdLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lem9uZVBhdHRlcm4ocGF0dGVybiwgc3RyaW5nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChwYXR0ZXJuKTtcblxuICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gSW5wdXQgaXMgJ1onXG5cblxuICBpZiAobWF0Y2hSZXN1bHRbMF0gPT09ICdaJykge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogMCxcbiAgICAgIHJlc3Q6IHN0cmluZy5zbGljZSgxKVxuICAgIH07XG4gIH1cblxuICB2YXIgc2lnbiA9IG1hdGNoUmVzdWx0WzFdID09PSAnKycgPyAxIDogLTE7XG4gIHZhciBob3VycyA9IG1hdGNoUmVzdWx0WzJdID8gcGFyc2VJbnQobWF0Y2hSZXN1bHRbMl0sIDEwKSA6IDA7XG4gIHZhciBtaW51dGVzID0gbWF0Y2hSZXN1bHRbM10gPyBwYXJzZUludChtYXRjaFJlc3VsdFszXSwgMTApIDogMDtcbiAgdmFyIHNlY29uZHMgPSBtYXRjaFJlc3VsdFs1XSA/IHBhcnNlSW50KG1hdGNoUmVzdWx0WzVdLCAxMCkgOiAwO1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBzaWduICogKGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArIHNlY29uZHMgKiBNSUxMSVNFQ09ORFNfSU5fU0VDT05EKSxcbiAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hSZXN1bHRbMF0ubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZUFueURpZ2l0c1NpZ25lZChzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmFueURpZ2l0c1NpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VORGlnaXRzKG4sIHN0cmluZywgdmFsdWVDYWxsYmFjaykge1xuICBzd2l0Y2ggKG4pIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuc2luZ2xlRGlnaXQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMudHdvRGlnaXRzLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnRocmVlRGlnaXRzLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmZvdXJEaWdpdHMsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obmV3IFJlZ0V4cCgnXlxcXFxkezEsJyArIG4gKyAnfScpLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlTkRpZ2l0c1NpZ25lZChuLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgc3dpdGNoIChuKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnNpbmdsZURpZ2l0U2lnbmVkLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnR3b0RpZ2l0c1NpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50aHJlZURpZ2l0c1NpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5mb3VyRGlnaXRzU2lnbmVkLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG5ldyBSZWdFeHAoJ14tP1xcXFxkezEsJyArIG4gKyAnfScpLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRheVBlcmlvZEVudW1Ub0hvdXJzKGVudW1WYWx1ZSkge1xuICBzd2l0Y2ggKGVudW1WYWx1ZSkge1xuICAgIGNhc2UgJ21vcm5pbmcnOlxuICAgICAgcmV0dXJuIDQ7XG5cbiAgICBjYXNlICdldmVuaW5nJzpcbiAgICAgIHJldHVybiAxNztcblxuICAgIGNhc2UgJ3BtJzpcbiAgICBjYXNlICdub29uJzpcbiAgICBjYXNlICdhZnRlcm5vb24nOlxuICAgICAgcmV0dXJuIDEyO1xuXG4gICAgY2FzZSAnYW0nOlxuICAgIGNhc2UgJ21pZG5pZ2h0JzpcbiAgICBjYXNlICduaWdodCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVR3b0RpZ2l0WWVhcih0d29EaWdpdFllYXIsIGN1cnJlbnRZZWFyKSB7XG4gIHZhciBpc0NvbW1vbkVyYSA9IGN1cnJlbnRZZWFyID4gMDsgLy8gQWJzb2x1dGUgbnVtYmVyIG9mIHRoZSBjdXJyZW50IHllYXI6XG4gIC8vIDEgLT4gMSBBQ1xuICAvLyAwIC0+IDEgQkNcbiAgLy8gLTEgLT4gMiBCQ1xuXG4gIHZhciBhYnNDdXJyZW50WWVhciA9IGlzQ29tbW9uRXJhID8gY3VycmVudFllYXIgOiAxIC0gY3VycmVudFllYXI7XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKGFic0N1cnJlbnRZZWFyIDw9IDUwKSB7XG4gICAgcmVzdWx0ID0gdHdvRGlnaXRZZWFyIHx8IDEwMDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcmFuZ2VFbmQgPSBhYnNDdXJyZW50WWVhciArIDUwO1xuICAgIHZhciByYW5nZUVuZENlbnR1cnkgPSBNYXRoLmZsb29yKHJhbmdlRW5kIC8gMTAwKSAqIDEwMDtcbiAgICB2YXIgaXNQcmV2aW91c0NlbnR1cnkgPSB0d29EaWdpdFllYXIgPj0gcmFuZ2VFbmQgJSAxMDA7XG4gICAgcmVzdWx0ID0gdHdvRGlnaXRZZWFyICsgcmFuZ2VFbmRDZW50dXJ5IC0gKGlzUHJldmlvdXNDZW50dXJ5ID8gMTAwIDogMCk7XG4gIH1cblxuICByZXR1cm4gaXNDb21tb25FcmEgPyByZXN1bHQgOiAxIC0gcmVzdWx0O1xufVxuXG52YXIgREFZU19JTl9NT05USCA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcbnZhciBEQVlTX0lOX01PTlRIX0xFQVBfWUVBUiA9IFszMSwgMjksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTsgLy8gVXNlciBmb3IgdmFsaWRhdGlvblxuXG5mdW5jdGlvbiBpc0xlYXBZZWFySW5kZXgoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCB5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwO1xufVxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8qIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHoqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgcGFyc2VgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICovXG5cblxudmFyIHBhcnNlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiB7XG4gICAgcHJpb3JpdHk6IDE0MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyBBRCwgQkNcbiAgICAgICAgY2FzZSAnRyc6XG4gICAgICAgIGNhc2UgJ0dHJzpcbiAgICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gQSwgQlxuXG4gICAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZmxhZ3MuZXJhID0gdmFsdWU7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHZhbHVlLCAwLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydSJywgJ3UnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gWWVhclxuICB5OiB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF9QYXR0ZXJuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICBwcmlvcml0eTogMTMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh5ZWFyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgICBpc1R3b0RpZ2l0WWVhcjogdG9rZW4gPT09ICd5eSdcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyg0LCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgICAgIGNhc2UgJ3lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd5ZWFyJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUuaXNUd29EaWdpdFllYXIgfHwgdmFsdWUueWVhciA+IDA7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBmbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgY3VycmVudFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG5cbiAgICAgIGlmICh2YWx1ZS5pc1R3b0RpZ2l0WWVhcikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZFR3b0RpZ2l0WWVhciA9IG5vcm1hbGl6ZVR3b0RpZ2l0WWVhcih2YWx1ZS55ZWFyLCBjdXJyZW50WWVhcik7XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIobm9ybWFsaXplZFR3b0RpZ2l0WWVhciwgMCwgMSk7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgfVxuXG4gICAgICB2YXIgeWVhciA9ICEoJ2VyYScgaW4gZmxhZ3MpIHx8IGZsYWdzLmVyYSA9PT0gMSA/IHZhbHVlLnllYXIgOiAxIC0gdmFsdWUueWVhcjtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3UnLCAndycsICdJJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWToge1xuICAgIHByaW9yaXR5OiAxMzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICAgIGlzVHdvRGlnaXRZZWFyOiB0b2tlbiA9PT0gJ1lZJ1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdZJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKDQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICAgICAgY2FzZSAnWW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3llYXInLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5pc1R3b0RpZ2l0WWVhciB8fCB2YWx1ZS55ZWFyID4gMDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIGZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgdmFyIGN1cnJlbnRZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmICh2YWx1ZS5pc1R3b0RpZ2l0WWVhcikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZFR3b0RpZ2l0WWVhciA9IG5vcm1hbGl6ZVR3b0RpZ2l0WWVhcih2YWx1ZS55ZWFyLCBjdXJyZW50WWVhcik7XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIobm9ybWFsaXplZFR3b0RpZ2l0WWVhciwgMCwgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB5ZWFyID0gISgnZXJhJyBpbiBmbGFncykgfHwgZmxhZ3MuZXJhID09PSAxID8gdmFsdWUueWVhciA6IDEgLSB2YWx1ZS55ZWFyO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ1EnLCAncScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnaScsICd0JywgJ1QnXVxuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiB7XG4gICAgcHJpb3JpdHk6IDEzMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIGlmICh0b2tlbiA9PT0gJ1InKSB7XG4gICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHNTaWduZWQoNCwgc3RyaW5nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0c1NpZ25lZCh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChfZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBmaXJzdFdlZWtPZlllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgICAgIGZpcnN0V2Vla09mWWVhci5zZXRVVENGdWxsWWVhcih2YWx1ZSwgMCwgNCk7XG4gICAgICBmaXJzdFdlZWtPZlllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gc3RhcnRPZlVUQ0lTT1dlZWsoZmlyc3RXZWVrT2ZZZWFyKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydHJywgJ3knLCAnWScsICd1JywgJ1EnLCAncScsICdNJywgJ0wnLCAndycsICdkJywgJ0QnLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXJcbiAgdToge1xuICAgIHByaW9yaXR5OiAxMzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBpZiAodG9rZW4gPT09ICd1Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKDQsIHN0cmluZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZU5EaWdpdHNTaWduZWQodG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIodmFsdWUsIDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ0cnLCAneScsICdZJywgJ1InLCAndycsICdJJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUToge1xuICAgIHByaW9yaXR5OiAxMjAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgY2FzZSAnUVEnOlxuICAgICAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSA0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgoKHZhbHVlIC0gMSkgKiAzLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydZJywgJ1InLCAncScsICdNJywgJ0wnLCAndycsICdJJywgJ2QnLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IHtcbiAgICBwcmlvcml0eTogMTIwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgICAgY2FzZSAncSc6XG4gICAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgICBjYXNlICdxbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgICBjYXNlICdxcXEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKCh2YWx1ZSAtIDEpICogMywgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnSScsICdkJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gTW9udGhcbiAgTToge1xuICAgIHByaW9yaXR5OiAxMTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAtIDE7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLm1vbnRoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cygyLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgICAgY2FzZSAnTW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ21vbnRoJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgICBjYXNlICdNTU1NJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDExO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgodmFsdWUsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdxJywgJ1EnLCAnTCcsICd3JywgJ0knLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiB7XG4gICAgcHJpb3JpdHk6IDExMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIC0gMTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMubW9udGgsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKDIsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgICBjYXNlICdMbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnbW9udGgnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgICBjYXNlICdMTEwnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMTE7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCh2YWx1ZSwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3EnLCAnUScsICdNJywgJ3cnLCAnSScsICdEJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiB7XG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMud2Vlaywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd3byc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSA1MztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBzdGFydE9mVVRDV2VlayhzZXRVVENXZWVrKGRhdGUsIHZhbHVlLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsneScsICdSJywgJ3UnLCAncScsICdRJywgJ00nLCAnTCcsICdJJywgJ2QnLCAnRCcsICdpJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSToge1xuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnSSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLndlZWssIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnSW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNTM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gc3RhcnRPZlVUQ0lTT1dlZWsoc2V0VVRDSVNPV2VlayhkYXRlLCB2YWx1ZSwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnWScsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAndycsICdkJywgJ0QnLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDoge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBzdWJQcmlvcml0eTogMSxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZGF0ZSwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdkbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChkYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgdmFyIGlzTGVhcFllYXIgPSBpc0xlYXBZZWFySW5kZXgoeWVhcik7XG4gICAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICAgIGlmIChpc0xlYXBZZWFyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IERBWVNfSU5fTU9OVEhfTEVBUF9ZRUFSW21vbnRoXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IERBWVNfSU5fTU9OVEhbbW9udGhdO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDRGF0ZSh2YWx1ZSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3EnLCAnUScsICd3JywgJ0knLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiB7XG4gICAgcHJpb3JpdHk6IDkwLFxuICAgIHN1YlByaW9yaXR5OiAxLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICBjYXNlICdERCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmRheU9mWWVhciwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdEbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChkYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgdmFyIGlzTGVhcFllYXIgPSBpc0xlYXBZZWFySW5kZXgoeWVhcik7XG5cbiAgICAgIGlmIChpc0xlYXBZZWFyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDM2NjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDM2NTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKDAsIHZhbHVlKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydZJywgJ1InLCAncScsICdRJywgJ00nLCAnTCcsICd3JywgJ0knLCAnZCcsICdFJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IHtcbiAgICBwcmlvcml0eTogOTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gVHVlXG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICBjYXNlICdFRSc6XG4gICAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVFxuXG4gICAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1XG5cbiAgICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlc2RheVxuXG4gICAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA2O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgZGF0ZSA9IHNldFVUQ0RheShkYXRlLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiB7XG4gICAgcHJpb3JpdHk6IDkwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciB3aG9sZVdlZWtEYXlzID0gTWF0aC5mbG9vcigodmFsdWUgLSAxKSAvIDcpICogNztcbiAgICAgICAgcmV0dXJuICh2YWx1ZSArIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgNikgJSA3ICsgd2hvbGVXZWVrRGF5cztcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gM1xuICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgY2FzZSAnZWUnOlxuICAgICAgICAgIC8vIDAzXG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDNyZFxuXG4gICAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdkYXknLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVcblxuICAgICAgICBjYXNlICdlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFRcblxuICAgICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdVxuXG4gICAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgICBjYXNlICdlZWVlJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIGRhdGUgPSBzZXRVVENEYXkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnRScsICdpJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzoge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2hvbGVXZWVrRGF5cyA9IE1hdGguZmxvb3IoKHZhbHVlIC0gMSkgLyA3KSAqIDc7XG4gICAgICAgIHJldHVybiAodmFsdWUgKyBvcHRpb25zLndlZWtTdGFydHNPbiArIDYpICUgNyArIHdob2xlV2Vla0RheXM7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDNcbiAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgICAvLyAwM1xuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAzcmRcblxuICAgICAgICBjYXNlICdjbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5JyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlXG5cbiAgICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDY7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gc2V0VVRDRGF5KGRhdGUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1InLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ0knLCAnZCcsICdEJywgJ0UnLCAnaScsICdlJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiB7XG4gICAgcHJpb3JpdHk6IDkwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gNztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gMlxuICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgY2FzZSAnaWknOlxuICAgICAgICAgIC8vIDAyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICAgIC8vIDJuZFxuXG4gICAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZVxuXG4gICAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVFxuXG4gICAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdVxuXG4gICAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlc2RheVxuXG4gICAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnLFxuICAgICAgICAgICAgdmFsdWVDYWxsYmFjazogdmFsdWVDYWxsYmFja1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIGRhdGUgPSBzZXRVVENJU09EYXkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnWScsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAndycsICdkJywgJ0QnLCAnRScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYToge1xuICAgIHByaW9yaXR5OiA4MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgY2FzZSAnYWEnOlxuICAgICAgICBjYXNlICdhYWEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoZGF5UGVyaW9kRW51bVRvSG91cnModmFsdWUpLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ2InLCAnQicsICdIJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodFxuICBiOiB7XG4gICAgcHJpb3JpdHk6IDgwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ2InOlxuICAgICAgICBjYXNlICdiYic6XG4gICAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdiYmJiJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENIb3VycyhkYXlQZXJpb2RFbnVtVG9Ib3Vycyh2YWx1ZSksIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnYScsICdCJywgJ0gnLCAnaycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IHtcbiAgICBwcmlvcml0eTogODAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnQic6XG4gICAgICAgIGNhc2UgJ0JCJzpcbiAgICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKGRheVBlcmlvZEVudW1Ub0hvdXJzKHZhbHVlKSwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydhJywgJ2InLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDoge1xuICAgIHByaW9yaXR5OiA3MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjEyaCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdobyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnaG91cidcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAxMjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgaXNQTSA9IGRhdGUuZ2V0VVRDSG91cnMoKSA+PSAxMjtcblxuICAgICAgaWYgKGlzUE0gJiYgdmFsdWUgPCAxMikge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlICsgMTIsIDAsIDAsIDApO1xuICAgICAgfSBlbHNlIGlmICghaXNQTSAmJiB2YWx1ZSA9PT0gMTIpIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUsIDAsIDAsIDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydIJywgJ0snLCAnaycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiB7XG4gICAgcHJpb3JpdHk6IDcwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMjNoLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0hvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDIzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnYScsICdiJywgJ2gnLCAnSycsICdrJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IHtcbiAgICBwcmlvcml0eTogNzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnSyc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmhvdXIxMWgsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnS28nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMTE7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGlzUE0gPSBkYXRlLmdldFVUQ0hvdXJzKCkgPj0gMTI7XG5cbiAgICAgIGlmIChpc1BNICYmIHZhbHVlIDwgMTIpIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSArIDEyLCAwLCAwLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUsIDAsIDAsIDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydoJywgJ0gnLCAnaycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiB7XG4gICAgcHJpb3JpdHk6IDcwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ2snOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMjRoLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ2tvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDI0O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBob3VycyA9IHZhbHVlIDw9IDI0ID8gdmFsdWUgJSAyNCA6IHZhbHVlO1xuICAgICAgZGF0ZS5zZXRVVENIb3Vycyhob3VycywgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydhJywgJ2InLCAnaCcsICdIJywgJ0snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IHtcbiAgICBwcmlvcml0eTogNjAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLm1pbnV0ZSwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdtbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDU5O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTWludXRlcyh2YWx1ZSwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnXVxuICB9LFxuICAvLyBTZWNvbmRcbiAgczoge1xuICAgIHByaW9yaXR5OiA1MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuc2Vjb25kLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3NvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNTk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENTZWNvbmRzKHZhbHVlLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiB7XG4gICAgcHJpb3JpdHk6IDMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgX21hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsdWUgKiBNYXRoLnBvdygxMCwgLXRva2VuLmxlbmd0aCArIDMpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTWlsbGlzZWNvbmRzKHZhbHVlKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gKzAwOjAwIGlzIGAnWidgKVxuICBYOiB7XG4gICAgcHJpb3JpdHk6IDEwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgX21hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdYJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpY09wdGlvbmFsTWludXRlcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdYWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWNPcHRpb25hbFNlY29uZHMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkT3B0aW9uYWxTZWNvbmRzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWCc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuZXh0ZW5kZWQsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBmbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBpZiAoZmxhZ3MudGltZXN0YW1wSXNTZXQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSAtIHZhbHVlKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnLCAneCddXG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMSlcbiAgeDoge1xuICAgIHByaW9yaXR5OiAxMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAneCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWNPcHRpb25hbE1pbnV0ZXMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAneHgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxTZWNvbmRzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5leHRlbmRlZE9wdGlvbmFsU2Vjb25kcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHgnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgaWYgKGZsYWdzLnRpbWVzdGFtcElzU2V0KSB7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSB2YWx1ZSk7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsndCcsICdUJywgJ1gnXVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiB7XG4gICAgcHJpb3JpdHk6IDQwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCBfdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiBwYXJzZUFueURpZ2l0c1NpZ25lZChzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoX2RhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gW25ldyBEYXRlKHZhbHVlICogMTAwMCksIHtcbiAgICAgICAgdGltZXN0YW1wSXNTZXQ6IHRydWVcbiAgICAgIH1dO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiAnKidcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiB7XG4gICAgcHJpb3JpdHk6IDIwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCBfdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiBwYXJzZUFueURpZ2l0c1NpZ25lZChzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoX2RhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gW25ldyBEYXRlKHZhbHVlKSwge1xuICAgICAgICB0aW1lc3RhbXBJc1NldDogdHJ1ZVxuICAgICAgfV07XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6ICcqJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgcGFyc2VyczsiLCAiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBhc3NpZ24gZnJvbSBcIi4uL19saWIvYXNzaWduL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcGFyc2VycyBmcm9tIFwiLi9fbGliL3BhcnNlcnMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgVElNRVpPTkVfVU5JVF9QUklPUklUWSA9IDEwOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgbm90V2hpdGVzcGFjZVJlZ0V4cCA9IC9cXFMvO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgcGFyc2VcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGRhdGUgcGFyc2VkIGZyb20gc3RyaW5nIHVzaW5nIHRoZSBnaXZlbiBmb3JtYXQgc3RyaW5nLlxuICpcbiAqID4gXHUyNkEwXHVGRTBGIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIGluIHRoZSBmb3JtYXQgc3RyaW5nIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICpcbiAqIEZvcm1hdCBvZiB0aGUgZm9ybWF0IHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNSBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIE5vdCBhbGwgdG9rZW5zIGFyZSBjb21wYXRpYmxlLiBDb21iaW5hdGlvbnMgdGhhdCBkb24ndCBtYWtlIHNlbnNlIG9yIGNvdWxkIGxlYWQgdG8gYnVncyBhcmUgcHJvaGliaXRlZFxuICogYW5kIHdpbGwgdGhyb3cgYFJhbmdlRXJyb3JgLiBGb3IgZXhhbXBsZSB1c2FnZSBvZiAyNC1ob3VyIGZvcm1hdCB0b2tlbiB3aXRoIEFNL1BNIHRva2VuIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHBhcnNlKCcyMyBBTScsICdISCBhJywgbmV3IERhdGUoKSlcbiAqIC8vPT4gUmFuZ2VFcnJvcjogVGhlIGZvcm1hdCBzdHJpbmcgbXVzdG4ndCBjb250YWluIGBISGAgYW5kIGBhYCBhdCB0aGUgc2FtZSB0aW1lXG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlIGNvbXBhdGliaWxpdHkgdGFibGU6IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0cy9kL2UvMlBBQ1gtMXZRT1BVM3hVaHBsbGw2ZHlvTW1WVVhIS2xfOENSRHM2X3VlTG1leDNTb3F3aHVvbGt1TjNPMDVsNHJxeDVoMWRLWDhlYjQ2VWwtQ0NTcnEvcHViaHRtbD9naWQ9MCZzaW5nbGU9dHJ1ZVxuICpcbiAqIEFjY2VwdGVkIGZvcm1hdCBzdHJpbmcgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFByaW9yfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDE0MCB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IDEzMCB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNywgOTk5OSAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDk5OTk5OTl0aCAgICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTIzLCA5OTkgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IDEzMCB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNywgOTAwMCAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDk5OTk5OTl0aCAgICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDQsNiAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTIzLCA5OTkgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNCw2ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IDEzMCB8IFIgICAgICAgfCAtNDMsIDEsIDE5MDAsIDIwMTcsIDk5OTksIC05OTk5ICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUiAgICAgIHwgLTQzLCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMSwgMTIzLCA5OTksIC05OTkgICAgICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMSwgMjAxNywgOTk5OSwgLTk5OTkgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiw0LDUgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgMTMwIHwgdSAgICAgICB8IC00MywgMSwgMTkwMCwgMjAxNywgOTk5OSwgLTk5OSAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCA5OSwgLTk5ICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxMjMsIDk5OSwgLTk5OSAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAyMDE3LCA5OTk5LCAtOTk5OSAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCAxMjAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCAxMjAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCAxMTAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCAxMTAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCAxMDAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCAxMDAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCAgOTAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCAgOTAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8ICA5MCB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCAgOTAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNSAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgIDkwIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8ICA5MCB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgODAgfCBhLi5hYWEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCAgODAgfCBiLi5iYmIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCAgODAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgNjAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgNTAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCAgNDAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8ICAzMCB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCAgMjAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8ICAxMCB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgIDEwIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCAgTkEgfCBQICAgICAgIHwgMDUvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFAgICAgICB8IE1heSAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQUCAgICAgfCBNYXkgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFBQICAgIHwgU3VuZGF5LCBNYXkgMjl0aCwgMTQ1MyAgICAgICAgICAgIHwgMiw1LDggfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgIE5BIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCAgTkEgfCBQcCAgICAgIHwgMDUvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBwcCAgICB8IE1heSAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQUHBwICAgfCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFBQcHAgIHwgU3VuZGF5LCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgIHwgMiw1LDggfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhci5cbiAqICAgIEluIGBmb3JtYXRgIGZ1bmN0aW9uLCB0aGV5IHdpbGwgcHJvZHVjZSBkaWZmZXJlbnQgcmVzdWx0OlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAgICBgcGFyc2VgIHdpbGwgdHJ5IHRvIG1hdGNoIGJvdGggZm9ybWF0dGluZyBhbmQgc3RhbmQtYWxvbmUgdW5pdHMgaW50ZXJjaGFuZ2FibHkuXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlOlxuICogICAgLSBmb3IgbnVtZXJpY2FsIHVuaXRzIChgeXl5eXl5eXlgKSBgcGFyc2VgIHdpbGwgdHJ5IHRvIG1hdGNoIGEgbnVtYmVyXG4gKiAgICAgIGFzIHdpZGUgYXMgdGhlIHNlcXVlbmNlXG4gKiAgICAtIGZvciB0ZXh0IHVuaXRzIChgTU1NTU1NTU1gKSBgcGFyc2VgIHdpbGwgdHJ5IHRvIG1hdGNoIHRoZSB3aWRlc3QgdmFyaWF0aW9uIG9mIHRoZSB1bml0LlxuICogICAgICBUaGVzZSB2YXJpYXRpb25zIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqIDMuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDQuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgd2lsbCB0cnkgdG8gZ3Vlc3MgdGhlIGNlbnR1cnkgb2YgdHdvIGRpZ2l0IHllYXIgYnkgcHJveGltaXR5IHdpdGggYHJlZmVyZW5jZURhdGVgOlxuICpcbiAqICAgIGBwYXJzZSgnNTAnLCAneXknLCBuZXcgRGF0ZSgyMDE4LCAwLCAxKSkgLy89PiBTYXQgSmFuIDAxIDIwNTAgMDA6MDA6MDBgXG4gKlxuICogICAgYHBhcnNlKCc3NScsICd5eScsIG5ldyBEYXRlKDIwMTgsIDAsIDEpKSAvLz0+IFdlZCBKYW4gMDEgMTk3NSAwMDowMDowMGBcbiAqXG4gKiAgICB3aGlsZSBgdXVgIHdpbGwganVzdCBhc3NpZ24gdGhlIHllYXIgYXMgaXM6XG4gKlxuICogICAgYHBhcnNlKCc1MCcsICd1dScsIG5ldyBEYXRlKDIwMTgsIDAsIDEpKSAvLz0+IFNhdCBKYW4gMDEgMDA1MCAwMDowMDowMGBcbiAqXG4gKiAgICBgcGFyc2UoJzc1JywgJ3V1JywgbmV3IERhdGUoMjAxOCwgMCwgMSkpIC8vPT4gVHVlIEphbiAwMSAwMDc1IDAwOjAwOjAwYFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW3NldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3NldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtzZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9zZXRXZWVrWWVhcn0pLlxuICpcbiAqIDUuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogNi4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogNy4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0aGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDguIGBQK2AgdG9rZW5zIGRvIG5vdCBoYXZlIGEgZGVmaW5lZCBwcmlvcml0eSBzaW5jZSB0aGV5IGFyZSBtZXJlbHkgYWxpYXNlcyB0byBvdGhlciB0b2tlbnMgYmFzZWRcbiAqICAgIG9uIHRoZSBnaXZlbiBsb2NhbGUuXG4gKlxuICogICAgdXNpbmcgYGVuLVVTYCBsb2NhbGU6IGBQYCA9PiBgTU0vZGQveXl5eWBcbiAqICAgIHVzaW5nIGBlbi1VU2AgbG9jYWxlOiBgcGAgPT4gYGhoOm1tIGFgXG4gKiAgICB1c2luZyBgcHQtQlJgIGxvY2FsZTogYFBgID0+IGBkZC9NTS95eXl5YFxuICogICAgdXNpbmcgYHB0LUJSYCBsb2NhbGU6IGBwYCA9PiBgSEg6bW1gXG4gKlxuICogVmFsdWVzIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGRhdGUgaW4gdGhlIGRlc2NlbmRpbmcgb3JkZXIgb2YgaXRzIHVuaXQncyBwcmlvcml0eS5cbiAqIFVuaXRzIG9mIGFuIGVxdWFsIHByaW9yaXR5IG92ZXJ3cml0ZSBlYWNoIG90aGVyIGluIHRoZSBvcmRlciBvZiBhcHBlYXJhbmNlLlxuICpcbiAqIElmIG5vIHZhbHVlcyBvZiBoaWdoZXIgcHJpb3JpdHkgYXJlIHBhcnNlZCAoZS5nLiB3aGVuIHBhcnNpbmcgc3RyaW5nICdKYW51YXJ5IDFzdCcgd2l0aG91dCBhIHllYXIpLFxuICogdGhlIHZhbHVlcyB3aWxsIGJlIHRha2VuIGZyb20gM3JkIGFyZ3VtZW50IGByZWZlcmVuY2VEYXRlYCB3aGljaCB3b3JrcyBhcyBhIGNvbnRleHQgb2YgcGFyc2luZy5cbiAqXG4gKiBgcmVmZXJlbmNlRGF0ZWAgbXVzdCBiZSBwYXNzZWQgZm9yIGNvcnJlY3Qgd29yayBvZiB0aGUgZnVuY3Rpb24uXG4gKiBJZiB5b3UncmUgbm90IHN1cmUgd2hpY2ggYHJlZmVyZW5jZURhdGVgIHRvIHN1cHBseSwgY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIERhdGU6XG4gKiBgcGFyc2UoJzAyLzExLzIwMTQnLCAnTU0vZGQveXl5eScsIG5ldyBEYXRlKCkpYFxuICogSW4gdGhpcyBjYXNlIHBhcnNpbmcgd2lsbCBiZSBkb25lIGluIHRoZSBjb250ZXh0IG9mIHRoZSBjdXJyZW50IGRhdGUuXG4gKiBJZiBgcmVmZXJlbmNlRGF0ZWAgaXMgYEludmFsaWQgRGF0ZWAgb3IgYSB2YWx1ZSBub3QgY29udmVydGlibGUgdG8gdmFsaWQgYERhdGVgLFxuICogdGhlbiBgSW52YWxpZCBEYXRlYCB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqIElmIGBmb3JtYXRTdHJpbmdgIG1hdGNoZXMgd2l0aCBgZGF0ZVN0cmluZ2AgYnV0IGRvZXMgbm90IHByb3ZpZGVzIHRva2VucywgYHJlZmVyZW5jZURhdGVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICogSWYgcGFyc2luZyBmYWlsZWQsIGBJbnZhbGlkIERhdGVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBPbGQgYHBhcnNlYCB3YXMgcmVuYW1lZCB0byBgdG9EYXRlYC5cbiAqICAgTm93IGBwYXJzZWAgaXMgYSBuZXcgZnVuY3Rpb24gd2hpY2ggcGFyc2VzIGEgc3RyaW5nIHVzaW5nIGEgcHJvdmlkZWQgZm9ybWF0LlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIHBhcnNlKCcyMDE2LTAxLTAxJylcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmQgKHRvRGF0ZSBubyBsb25nZXIgYWNjZXB0cyBhIHN0cmluZylcbiAqICAgdG9EYXRlKDEzOTIwOTg0MzAwMDApIC8vIFVuaXggdG8gdGltZXN0YW1wXG4gKiAgIHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpIC8vIENsb25pbmcgdGhlIGRhdGVcbiAqICAgcGFyc2UoJzIwMTYtMDEtMDEnLCAneXl5eS1NTS1kZCcsIG5ldyBEYXRlKCkpXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRlU3RyaW5nIC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdFN0cmluZyAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSByZWZlcmVuY2VEYXRlIC0gZGVmaW5lcyB2YWx1ZXMgbWlzc2luZyBmcm9tIHRoZSBwYXJzZWQgZGF0ZVN0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0gezF8MnwzfDR8NXw2fDd9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAzIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYG1hdGNoYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBQYXJzZSAxMSBGZWJydWFyeSAyMDE0IGZyb20gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2UoJzAyLzExLzIwMTQnLCAnTU0vZGQveXl5eScsIG5ldyBEYXRlKCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBQYXJzZSAyOHRoIG9mIEZlYnJ1YXJ5IGluIEVzcGVyYW50byBsb2NhbGUgaW4gdGhlIGNvbnRleHQgb2YgMjAxMCB5ZWFyOlxuICogaW1wb3J0IGVvIGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBwYXJzZSgnMjgtYSBkZSBmZWJydWFybycsIFwiZG8gJ2RlJyBNTU1NXCIsIG5ldyBEYXRlKDIwMTAsIDAsIDEpLCB7XG4gKiAgIGxvY2FsZTogZW9cbiAqIH0pXG4gKiAvLz0+IFN1biBGZWIgMjggMjAxMCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlKGRpcnR5RGF0ZVN0cmluZywgZGlydHlGb3JtYXRTdHJpbmcsIGRpcnR5UmVmZXJlbmNlRGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygzLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZVN0cmluZyA9IFN0cmluZyhkaXJ0eURhdGVTdHJpbmcpO1xuICB2YXIgZm9ybWF0U3RyaW5nID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyaW5nKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlO1xuXG4gIGlmICghbG9jYWxlLm1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbWF0Y2ggcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoZm9ybWF0U3RyaW5nID09PSAnJykge1xuICAgIGlmIChkYXRlU3RyaW5nID09PSAnJykge1xuICAgICAgcmV0dXJuIHRvRGF0ZShkaXJ0eVJlZmVyZW5jZURhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gIH1cblxuICB2YXIgc3ViRm5PcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlXG4gIH07IC8vIElmIHRpbWV6b25lIGlzbid0IHNwZWNpZmllZCwgaXQgd2lsbCBiZSBzZXQgdG8gdGhlIHN5c3RlbSB0aW1lem9uZVxuXG4gIHZhciBzZXR0ZXJzID0gW3tcbiAgICBwcmlvcml0eTogVElNRVpPTkVfVU5JVF9QUklPUklUWSxcbiAgICBzdWJQcmlvcml0eTogLTEsXG4gICAgc2V0OiBkYXRlVG9TeXN0ZW1UaW1lem9uZSxcbiAgICBpbmRleDogMFxuICB9XTtcbiAgdmFyIGk7XG4gIHZhciB0b2tlbnMgPSBmb3JtYXRTdHJpbmcubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBzdWJGbk9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApO1xuICB2YXIgdXNlZFRva2VucyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikpIHtcbiAgICAgIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdFN0cmluZywgZGlydHlEYXRlU3RyaW5nKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSkge1xuICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0U3RyaW5nLCBkaXJ0eURhdGVTdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHRva2VuWzBdO1xuICAgIHZhciBwYXJzZXIgPSBwYXJzZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChwYXJzZXIpIHtcbiAgICAgIHZhciBpbmNvbXBhdGlibGVUb2tlbnMgPSBwYXJzZXIuaW5jb21wYXRpYmxlVG9rZW5zO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShpbmNvbXBhdGlibGVUb2tlbnMpKSB7XG4gICAgICAgIHZhciBpbmNvbXBhdGlibGVUb2tlbiA9IHZvaWQgMDtcblxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdXNlZFRva2Vucy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICB2YXIgdXNlZFRva2VuID0gdXNlZFRva2Vuc1tfaV0udG9rZW47XG5cbiAgICAgICAgICBpZiAoaW5jb21wYXRpYmxlVG9rZW5zLmluZGV4T2YodXNlZFRva2VuKSAhPT0gLTEgfHwgdXNlZFRva2VuID09PSBmaXJzdENoYXJhY3Rlcikge1xuICAgICAgICAgICAgaW5jb21wYXRpYmxlVG9rZW4gPSB1c2VkVG9rZW5zW19pXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmNvbXBhdGlibGVUb2tlbikge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIGZvcm1hdCBzdHJpbmcgbXVzdG4ndCBjb250YWluIGBcIi5jb25jYXQoaW5jb21wYXRpYmxlVG9rZW4uZnVsbFRva2VuLCBcImAgYW5kIGBcIikuY29uY2F0KHRva2VuLCBcImAgYXQgdGhlIHNhbWUgdGltZVwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VyLmluY29tcGF0aWJsZVRva2VucyA9PT0gJyonICYmIHVzZWRUb2tlbnMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIGZvcm1hdCBzdHJpbmcgbXVzdG4ndCBjb250YWluIGBcIi5jb25jYXQodG9rZW4sIFwiYCBhbmQgYW55IG90aGVyIHRva2VuIGF0IHRoZSBzYW1lIHRpbWVcIikpO1xuICAgICAgfVxuXG4gICAgICB1c2VkVG9rZW5zLnB1c2goe1xuICAgICAgICB0b2tlbjogZmlyc3RDaGFyYWN0ZXIsXG4gICAgICAgIGZ1bGxUb2tlbjogdG9rZW5cbiAgICAgIH0pO1xuICAgICAgdmFyIHBhcnNlUmVzdWx0ID0gcGFyc2VyLnBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBsb2NhbGUubWF0Y2gsIHN1YkZuT3B0aW9ucyk7XG5cbiAgICAgIGlmICghcGFyc2VSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgICB9XG5cbiAgICAgIHNldHRlcnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiBwYXJzZXIucHJpb3JpdHksXG4gICAgICAgIHN1YlByaW9yaXR5OiBwYXJzZXIuc3ViUHJpb3JpdHkgfHwgMCxcbiAgICAgICAgc2V0OiBwYXJzZXIuc2V0LFxuICAgICAgICB2YWxpZGF0ZTogcGFyc2VyLnZhbGlkYXRlLFxuICAgICAgICB2YWx1ZTogcGFyc2VSZXN1bHQudmFsdWUsXG4gICAgICAgIGluZGV4OiBzZXR0ZXJzLmxlbmd0aFxuICAgICAgfSk7XG4gICAgICBkYXRlU3RyaW5nID0gcGFyc2VSZXN1bHQucmVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgICAgfSAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG5cblxuICAgICAgaWYgKHRva2VuID09PSBcIicnXCIpIHtcbiAgICAgICAgdG9rZW4gPSBcIidcIjtcbiAgICAgIH0gZWxzZSBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICAgIHRva2VuID0gY2xlYW5Fc2NhcGVkU3RyaW5nKHRva2VuKTtcbiAgICAgIH0gLy8gQ3V0IHRva2VuIGZyb20gc3RyaW5nLCBvciwgaWYgc3RyaW5nIGRvZXNuJ3QgbWF0Y2ggdGhlIHRva2VuLCByZXR1cm4gSW52YWxpZCBEYXRlXG5cblxuICAgICAgaWYgKGRhdGVTdHJpbmcuaW5kZXhPZih0b2tlbikgPT09IDApIHtcbiAgICAgICAgZGF0ZVN0cmluZyA9IGRhdGVTdHJpbmcuc2xpY2UodG9rZW4ubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBDaGVjayBpZiB0aGUgcmVtYWluaW5nIGlucHV0IGNvbnRhaW5zIHNvbWV0aGluZyBvdGhlciB0aGFuIHdoaXRlc3BhY2VcblxuXG4gIGlmIChkYXRlU3RyaW5nLmxlbmd0aCA+IDAgJiYgbm90V2hpdGVzcGFjZVJlZ0V4cC50ZXN0KGRhdGVTdHJpbmcpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdW5pcXVlUHJpb3JpdHlTZXR0ZXJzID0gc2V0dGVycy5tYXAoZnVuY3Rpb24gKHNldHRlcikge1xuICAgIHJldHVybiBzZXR0ZXIucHJpb3JpdHk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGE7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAocHJpb3JpdHksIGluZGV4LCBhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5pbmRleE9mKHByaW9yaXR5KSA9PT0gaW5kZXg7XG4gIH0pLm1hcChmdW5jdGlvbiAocHJpb3JpdHkpIHtcbiAgICByZXR1cm4gc2V0dGVycy5maWx0ZXIoZnVuY3Rpb24gKHNldHRlcikge1xuICAgICAgcmV0dXJuIHNldHRlci5wcmlvcml0eSA9PT0gcHJpb3JpdHk7XG4gICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGIuc3ViUHJpb3JpdHkgLSBhLnN1YlByaW9yaXR5O1xuICAgIH0pO1xuICB9KS5tYXAoZnVuY3Rpb24gKHNldHRlckFycmF5KSB7XG4gICAgcmV0dXJuIHNldHRlckFycmF5WzBdO1xuICB9KTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlSZWZlcmVuY2VEYXRlKTtcblxuICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzdcblxuXG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKGRhdGUsIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkpO1xuICB2YXIgZmxhZ3MgPSB7fTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdW5pcXVlUHJpb3JpdHlTZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNldHRlciA9IHVuaXF1ZVByaW9yaXR5U2V0dGVyc1tpXTtcblxuICAgIGlmIChzZXR0ZXIudmFsaWRhdGUgJiYgIXNldHRlci52YWxpZGF0ZSh1dGNEYXRlLCBzZXR0ZXIudmFsdWUsIHN1YkZuT3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBzZXR0ZXIuc2V0KHV0Y0RhdGUsIGZsYWdzLCBzZXR0ZXIudmFsdWUsIHN1YkZuT3B0aW9ucyk7IC8vIFJlc3VsdCBpcyB0dXBsZSAoZGF0ZSwgZmxhZ3MpXG5cbiAgICBpZiAocmVzdWx0WzBdKSB7XG4gICAgICB1dGNEYXRlID0gcmVzdWx0WzBdO1xuICAgICAgYXNzaWduKGZsYWdzLCByZXN1bHRbMV0pOyAvLyBSZXN1bHQgaXMgZGF0ZVxuICAgIH0gZWxzZSB7XG4gICAgICB1dGNEYXRlID0gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1dGNEYXRlO1xufVxuXG5mdW5jdGlvbiBkYXRlVG9TeXN0ZW1UaW1lem9uZShkYXRlLCBmbGFncykge1xuICBpZiAoZmxhZ3MudGltZXN0YW1wSXNTZXQpIHtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIHZhciBjb252ZXJ0ZWREYXRlID0gbmV3IERhdGUoMCk7XG4gIGNvbnZlcnRlZERhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgY29udmVydGVkRGF0ZS5zZXRIb3VycyhkYXRlLmdldFVUQ0hvdXJzKCksIGRhdGUuZ2V0VVRDTWludXRlcygpLCBkYXRlLmdldFVUQ1NlY29uZHMoKSwgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSk7XG4gIHJldHVybiBjb252ZXJ0ZWREYXRlO1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCAiaW1wb3J0IHsgQXBwLCBNYXJrZG93blZpZXcsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IFdvcmRwcmVzc1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBXcExvZ2luTW9kYWwgfSBmcm9tICcuL3dwLWxvZ2luLW1vZGFsJztcclxuaW1wb3J0IHsgV29yZFByZXNzQ2xpZW50LCBXb3JkUHJlc3NDbGllbnRSZXN1bHQsIFdvcmRQcmVzc0NsaWVudFJldHVybkNvZGUgfSBmcm9tICcuL3dwLWNsaWVudCc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RXb3JkUHJlc3NDbGllbnQgaW1wbGVtZW50cyBXb3JkUHJlc3NDbGllbnQge1xyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgYXBwOiBBcHAsXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuICApIHsgfVxyXG5cclxuICBhYnN0cmFjdCBwdWJsaXNoKFxyXG4gICAgdGl0bGU6IHN0cmluZyxcclxuICAgIGNvbnRlbnQ6IHN0cmluZyxcclxuICAgIHdwOiB7XHJcbiAgICAgIHVzZXJOYW1lOiBzdHJpbmcsXHJcbiAgICAgIHBhc3N3b3JkOiBzdHJpbmdcclxuICAgIH1cclxuICApOiBQcm9taXNlPFdvcmRQcmVzc0NsaWVudFJlc3VsdD47XHJcblxyXG4gIG5ld1Bvc3QoKTogUHJvbWlzZTxXb3JkUHJlc3NDbGllbnRSZXN1bHQ+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgd29ya3NwYWNlIH0gPSB0aGlzLmFwcDtcclxuICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHdvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcbiAgICAgIGlmICggYWN0aXZlVmlldyApIHtcclxuICAgICAgICBuZXcgV3BMb2dpbk1vZGFsKFxyXG4gICAgICAgICAgdGhpcy5hcHAsXHJcbiAgICAgICAgICB0aGlzLnBsdWdpbixcclxuICAgICAgICAgICh1c2VyTmFtZSwgcGFzc3dvcmQsIG1vZGFsKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnZhdWx0LnJlYWQoYWN0aXZlVmlldy5maWxlKVxyXG4gICAgICAgICAgICAgIC50aGVuKGNvbnRlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBhY3RpdmVWaWV3LmZpbGUuYmFzZW5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdWJsaXNoKHRpdGxlLCBjb250ZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgIHVzZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICBwYXNzd29yZFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5jb2RlID09PSBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlLkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXN1bHQuZGF0YSBhcyBhbnk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgUG9zdCBwdWJsaXNoZWQgZmFpbGVkIVxcbiR7ZGF0YS5jb2RlfTogJHtkYXRhLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdQb3N0IHB1Ymxpc2hlZCBzdWNjZXNzZnVsbHkhJyk7XHJcbiAgICAgICAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWFkaW5nIGZpbGUgY29udGVudCBmb3IgXFwnbmV3UG9zdFxcJyBmYWlsZWQ6ICcsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoZXJyb3IudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKS5vcGVuKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSAnVGhlcmUgaXMgbm8gZWRpdG9yIGZvdW5kLiBOb3RoaW5nIHdpbGwgYmUgcHVibGlzaGVkLic7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcclxuICAgICAgICByZWplY3QobmV3IEVycm9yKGVycm9yKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IFdvcmRwcmVzc1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5cclxuLyoqXHJcbiAqIFdvcmRQcmVzcyBsb2dpbiBtb2RhbCB3aXRoIHVzZXIgbmFtZSBhbmQgcGFzc3dvcmQgaW5wdXRzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdwTG9naW5Nb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBhcHA6IEFwcCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW4sXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uU3VibWl0OiAodXNlck5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgbW9kYWw6IE1vZGFsKSA9PiB2b2lkXHJcbiAgKSB7XHJcbiAgICBzdXBlcihhcHApO1xyXG4gIH1cclxuXHJcbiAgb25PcGVuKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblxyXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogJ1dvcmRQcmVzcyBMb2dpbicgfSk7XHJcblxyXG4gICAgbGV0IHBhc3N3b3JkID0gJyc7XHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKCdVc2VyIE5hbWUnKVxyXG4gICAgICAuc2V0RGVzYyhgVXNlciBuYW1lIGZvciAke3RoaXMucGx1Z2luLnNldHRpbmdzLmVuZHBvaW50fWApXHJcbiAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VyTmFtZSA/PyAnJylcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZVVzZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZXJOYW1lID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgLnNldE5hbWUoJ1Bhc3N3b3JkJylcclxuICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgcGFzc3dvcmQgPSB2YWx1ZTtcclxuICAgICAgICB9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxyXG4gICAgICAgIC5zZXRCdXR0b25UZXh0KCdQdWJsaXNoJylcclxuICAgICAgICAuc2V0Q2xhc3MoJ21vZC1jdGEnKVxyXG4gICAgICAgIC5vbkNsaWNrKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMub25TdWJtaXQodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlck5hbWUsIHBhc3N3b3JkLCB0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgb25DbG9zZSgpIHtcclxuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IG1hcmtlZCB9IGZyb20gJ21hcmtlZCc7XHJcbmltcG9ydCBXb3JkcHJlc3NQbHVnaW4gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgV29yZFByZXNzQ2xpZW50UmVzdWx0LCBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlIH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5pbXBvcnQgeyBYbWxScGNDbGllbnQgfSBmcm9tICcuL3htbHJwYy9jbGllbnQnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdFdvcmRQcmVzc0NsaWVudCB9IGZyb20gJy4vYWJzdHJhY3Qtd3AtY2xpZW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBXcFhtbFJwY0NsaWVudCBleHRlbmRzIEFic3RyYWN0V29yZFByZXNzQ2xpZW50IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBjbGllbnQ6IFhtbFJwY0NsaWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZWFkb25seSBhcHA6IEFwcCxcclxuICAgIHJlYWRvbmx5IHBsdWdpbjogV29yZHByZXNzUGx1Z2luXHJcbiAgKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBYbWxScGNDbGllbnQoe1xyXG4gICAgICB1cmw6IG5ldyBVUkwocGx1Z2luLnNldHRpbmdzLmVuZHBvaW50KVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaXNoKHRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgd3A6IHsgdXNlck5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9KTogUHJvbWlzZTxXb3JkUHJlc3NDbGllbnRSZXN1bHQ+IHtcclxuICAgIHJldHVybiB0aGlzLmNsaWVudC5tZXRob2RDYWxsKCd3cC5uZXdQb3N0JywgW1xyXG4gICAgICAwLFxyXG4gICAgICB3cC51c2VyTmFtZSxcclxuICAgICAgd3AucGFzc3dvcmQsXHJcbiAgICAgIHtcclxuICAgICAgICBwb3N0X3R5cGU6ICdwb3N0JyxcclxuICAgICAgICBwb3N0X3N0YXR1czogJ2RyYWZ0JyxcclxuICAgICAgICBwb3N0X3RpdGxlOiB0aXRsZSA/PyAnQSBwb3N0IGZyb20gT2JzaWRpYW4hJyxcclxuICAgICAgICBwb3N0X2NvbnRlbnQ6IG1hcmtlZC5wYXJzZShjb250ZW50KSA/PyAnJyxcclxuICAgICAgfVxyXG4gICAgXSlcclxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBhbnkpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICAgIGlmIChyZXNwb25zZS5mYXVsdENvZGUgJiYgcmVzcG9uc2UuZmF1bHRTdHJpbmcpIHtcclxuICAgICAgICAgIC8vIGl0IG1lYW5zIGVycm9yIGhhcHBlbnNcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvZGU6IFdvcmRQcmVzc0NsaWVudFJldHVybkNvZGUuRXJyb3IsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICBjb2RlOiByZXNwb25zZS5mYXVsdENvZGUsXHJcbiAgICAgICAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UuZmF1bHRTdHJpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29kZTogV29yZFByZXNzQ2xpZW50UmV0dXJuQ29kZS5PSyxcclxuICAgICAgICAgICAgZGF0YTogcmVzcG9uc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgV29yZFByZXNzQ2xpZW50UmVzdWx0IH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5pbXBvcnQgV29yZHByZXNzUGx1Z2luIGZyb20gJy4vbWFpbic7XHJcbmltcG9ydCB7IEFic3RyYWN0V29yZFByZXNzQ2xpZW50IH0gZnJvbSAnLi9hYnN0cmFjdC13cC1jbGllbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdwUmVzdE1pbmlPcmFuZ2VDbGllbnQgZXh0ZW5kcyBBYnN0cmFjdFdvcmRQcmVzc0NsaWVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcmVhZG9ubHkgYXBwOiBBcHAsXHJcbiAgICByZWFkb25seSBwbHVnaW46IFdvcmRwcmVzc1BsdWdpblxyXG4gICkge1xyXG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gIH1cclxuXHJcbiAgcHVibGlzaCh0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIHdwOiB7IHVzZXJOYW1lOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfSk6IFByb21pc2U8V29yZFByZXNzQ2xpZW50UmVzdWx0PiB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgV29yZHByZXNzUGx1Z2luIGZyb20gJy4vbWFpbic7XHJcbmltcG9ydCB7IEFwaVR5cGUsIFJlc3RBcGlQbHVnaW4gfSBmcm9tICcuL3NldHRpbmdzJztcclxuaW1wb3J0IHsgV3BYbWxScGNDbGllbnQgfSBmcm9tICcuL3dwLXhtbC1ycGMtY2xpZW50JztcclxuaW1wb3J0IHsgV3BSZXN0TWluaU9yYW5nZUNsaWVudCB9IGZyb20gJy4vd3AtcmVzdC1taW5pT3JhbmdlLWNsaWVudCc7XHJcblxyXG5leHBvcnQgZW51bSBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlIHtcclxuICBPSyxcclxuICBFcnJvclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvcmRQcmVzc0NsaWVudFJlc3VsdCB7XHJcbiAgY29kZTogV29yZFByZXNzQ2xpZW50UmV0dXJuQ29kZTtcclxuICBkYXRhOiB1bmtub3duO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvcmRQcmVzc0NsaWVudCB7XHJcbiAgbmV3UG9zdCgpOiBQcm9taXNlPFdvcmRQcmVzc0NsaWVudFJlc3VsdD47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVXb3JkUHJlc3NDbGllbnQoXHJcbiAgYXBwOiBBcHAsXHJcbiAgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW4sXHJcbiAgdHlwZTogQXBpVHlwZSxcclxuICBvcHRpb25zPzoge1xyXG4gICAgcmVzdFBsdWdpbjogUmVzdEFwaVBsdWdpblxyXG4gIH1cclxuKTogV29yZFByZXNzQ2xpZW50IHwgbnVsbCB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIEFwaVR5cGUuWE1MX1JQQzpcclxuICAgICAgcmV0dXJuIG5ldyBXcFhtbFJwY0NsaWVudChhcHAsIHBsdWdpbik7XHJcbiAgICBjYXNlIEFwaVR5cGUuUmVzdEFQSTpcclxuICAgICAgc3dpdGNoIChvcHRpb25zPy5yZXN0UGx1Z2luKSB7XHJcbiAgICAgICAgY2FzZSBSZXN0QXBpUGx1Z2luLkF1dGhlbnRpY2F0aW9uX21pbmlPcmFuZ2U6XHJcbiAgICAgICAgICByZXR1cm4gbmV3IFdwUmVzdE1pbmlPcmFuZ2VDbGllbnQoYXBwLCBwbHVnaW4pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBLEtBQUMsU0FBUyxHQUFFLEdBQUU7QUFBQyxNQUFVLE9BQU8sWUFBakIsWUFBMEIsQUFBVSxPQUFPLFdBQWpCLFdBQXdCLFFBQU8sVUFBUSxNQUFJLEFBQVksT0FBTyxVQUFuQixjQUEyQixPQUFPLE1BQUksT0FBTyxJQUFHLEtBQUcsQUFBVSxPQUFPLFlBQWpCLFdBQXlCLFNBQVEsY0FBWSxNQUFJLEVBQUUsY0FBWTtBQUFBLE1BQUssVUFBTSxXQUFVO0FBQUMsYUFBTyxTQUFTLEdBQUU7QUFBQyxZQUFJLElBQUU7QUFBRyxtQkFBVyxHQUFFO0FBQUMsY0FBRyxFQUFFO0FBQUcsbUJBQU8sRUFBRSxHQUFHO0FBQVEsY0FBSSxJQUFFLEVBQUUsS0FBRyxFQUFDLEdBQUUsR0FBRSxHQUFFLE9BQUcsU0FBUTtBQUFJLGlCQUFPLEVBQUUsR0FBRyxLQUFLLEVBQUUsU0FBUSxHQUFFLEVBQUUsU0FBUSxJQUFHLEVBQUUsSUFBRSxNQUFHLEVBQUU7QUFBQTtBQUFRLGVBQU8sRUFBRSxJQUFFLEdBQUUsRUFBRSxJQUFFLEdBQUUsRUFBRSxJQUFFLFNBQVMsSUFBRSxJQUFFLEdBQUU7QUFBQyxZQUFFLEVBQUUsSUFBRSxPQUFJLE9BQU8sZUFBZSxJQUFFLElBQUUsRUFBQyxZQUFXLE1BQUcsS0FBSTtBQUFBLFdBQUssRUFBRSxJQUFFLFNBQVMsSUFBRTtBQUFDLFVBQWEsT0FBTyxVQUFwQixlQUE0QixPQUFPLGVBQWEsT0FBTyxlQUFlLElBQUUsT0FBTyxhQUFZLEVBQUMsT0FBTSxhQUFXLE9BQU8sZUFBZSxJQUFFLGNBQWEsRUFBQyxPQUFNO0FBQUEsV0FBTSxFQUFFLElBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFHLElBQUUsTUFBSSxNQUFFLEVBQUUsTUFBSSxJQUFFO0FBQUUsbUJBQU87QUFBRSxjQUFHLElBQUUsTUFBRyxBQUFVLE9BQU8sTUFBakIsWUFBb0IsTUFBRyxHQUFFO0FBQVcsbUJBQU87QUFBRSxjQUFJLElBQUUsT0FBTyxPQUFPO0FBQU0sY0FBRyxFQUFFLEVBQUUsSUFBRyxPQUFPLGVBQWUsR0FBRSxXQUFVLEVBQUMsWUFBVyxNQUFHLE9BQU0sT0FBSSxJQUFFLE1BQUcsQUFBVSxPQUFPLE1BQWpCO0FBQW1CLHFCQUFRLEtBQUs7QUFBRSxnQkFBRSxFQUFFLEdBQUUsR0FBRSxTQUFTLElBQUU7QUFBQyx1QkFBTyxHQUFFO0FBQUEsZ0JBQUksS0FBSyxNQUFLO0FBQUksaUJBQU87QUFBQSxXQUFHLEVBQUUsSUFBRSxTQUFTLElBQUU7QUFBQyxjQUFJLEtBQUUsTUFBRyxHQUFFLGFBQVcsV0FBVTtBQUFDLG1CQUFPLEdBQUU7QUFBQSxjQUFTLFdBQVU7QUFBQyxtQkFBTztBQUFBO0FBQUcsaUJBQU8sRUFBRSxFQUFFLElBQUUsS0FBSSxLQUFHO0FBQUEsV0FBRyxFQUFFLElBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxPQUFPLFVBQVUsZUFBZSxLQUFLLElBQUU7QUFBQSxXQUFJLEVBQUUsSUFBRSxJQUFHLEVBQUUsRUFBRSxJQUFFO0FBQUEsUUFBTSxDQUFDLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLG1CQUFXLElBQUU7QUFBQyxtQkFBUSxNQUFLO0FBQUUsY0FBRSxlQUFlLE9BQUssR0FBRSxNQUFHLEdBQUU7QUFBQTtBQUFJLGVBQU8sZUFBZSxHQUFFLGNBQWEsRUFBQyxPQUFNLFNBQUssRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFLE9BQU0sRUFBRSxFQUFFLE1BQUssRUFBRSxFQUFFO0FBQUEsU0FBTyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsUUFBTSxLQUFLLFlBQVUsU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLEFBQVksT0FBTyxVQUFuQixjQUEyQixPQUFPLFVBQVMsS0FBRSxNQUFHLEdBQUUsS0FBRyxLQUFFO0FBQUUsY0FBRztBQUFFLG1CQUFPLEdBQUUsS0FBSztBQUFHLGNBQUcsTUFBRyxBQUFVLE9BQU8sR0FBRSxVQUFuQjtBQUEwQixtQkFBTSxFQUFDLE1BQUssV0FBVTtBQUFDLHFCQUFPLE1BQUcsTUFBRyxHQUFFLFVBQVMsTUFBRSxTQUFRLEVBQUMsT0FBTSxNQUFHLEdBQUUsT0FBSyxNQUFLLENBQUM7QUFBQTtBQUFLLGdCQUFNLElBQUksVUFBVSxLQUFFLDRCQUEwQjtBQUFBO0FBQW9DLGVBQU8sZUFBZSxHQUFFLGNBQWEsRUFBQyxPQUFNO0FBQUssWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLGVBQWEsRUFBRTtBQUFhLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxjQUFZLEVBQUU7QUFBWSxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsZUFBYSxFQUFFO0FBQWEsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLE9BQUssRUFBRTtBQUFLLFlBQUksSUFBRSxFQUFFO0FBQUssbUJBQVcsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFHLEVBQUU7QUFBRyxlQUFFLFFBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxxQkFBTyxHQUFFLEtBQUssSUFBRSxJQUFFO0FBQUE7QUFBQTtBQUFXLHFCQUFRLE1BQUs7QUFBRSxpQkFBRSxlQUFlLE9BQUksR0FBRSxLQUFLLElBQUUsSUFBRSxHQUFFO0FBQUE7QUFBSSxtQkFBVyxJQUFFO0FBQUMsY0FBSSxJQUFFO0FBQUUsY0FBRyxFQUFFO0FBQUcsbUJBQU87QUFBRSxjQUFHLEVBQUUsS0FBRztBQUFDLGdCQUFJLEtBQUU7QUFBRyxnQkFBRztBQUFDLHVCQUFRLEtBQUUsRUFBRSxLQUFHLEtBQUUsR0FBRSxRQUFPLENBQUMsR0FBRSxNQUFLLEtBQUUsR0FBRSxRQUFPO0FBQUMsb0JBQUksS0FBRSxHQUFFO0FBQU0sbUJBQUUsS0FBSyxFQUFFO0FBQUE7QUFBQSxxQkFBVyxJQUFOO0FBQVMsbUJBQUUsRUFBQyxPQUFNO0FBQUEsc0JBQUc7QUFBUSxrQkFBRztBQUFDLHNCQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSztBQUFBLHdCQUFHO0FBQVEsb0JBQUc7QUFBRSx3QkFBTSxHQUFFO0FBQUE7QUFBQTtBQUFPLG1CQUFPO0FBQUE7QUFBRSxjQUFHLEVBQUUsS0FBRztBQUFDLGlCQUFFO0FBQUcscUJBQVEsTUFBSztBQUFFLGtCQUFHLEdBQUUsZUFBZSxLQUFHO0FBQUMsb0JBQUksS0FBRSxHQUFFO0FBQUcsbUJBQUUsTUFBRyxFQUFFO0FBQUE7QUFBRyxtQkFBTztBQUFBO0FBQUUsaUJBQU87QUFBQTtBQUFFLG1CQUFXLElBQUU7QUFBQyxpQkFBTSxDQUFDLENBQUMsTUFBRyxBQUFzQixPQUFPLFVBQVUsU0FBUyxLQUFLLFFBQXJEO0FBQUE7QUFBd0QsbUJBQVcsSUFBRTtBQUFDLGNBQUksS0FBRSxPQUFPO0FBQUUsaUJBQU0sQ0FBQyxDQUFDLE1BQUksQ0FBYSxPQUFiLGNBQWdCLEFBQVcsT0FBWDtBQUFBO0FBQWMsbUJBQVcsSUFBRTtBQUFDLGlCQUFPLE1BQU0sUUFBUTtBQUFBO0FBQUcsbUJBQVcsSUFBRTtBQUFDLGlCQUFPLGNBQWE7QUFBQTtBQUFJLG1CQUFXLElBQUU7QUFBQyxpQkFBTyxjQUFhO0FBQUE7QUFBSSxtQkFBVyxJQUFFO0FBQUMsY0FBRyxFQUFFLEtBQUc7QUFBQyxnQkFBSSxLQUFFLE9BQU8sZUFBZSxLQUFHLEtBQUUsR0FBRTtBQUFZLG1CQUFPLE1BQUcsTUFBRyxBQUFZLE9BQU8sTUFBbkIsY0FBc0IsY0FBYSxNQUFHLFNBQVMsVUFBVSxTQUFTLEtBQUssUUFBSyxTQUFTLFVBQVUsU0FBUyxLQUFLO0FBQUE7QUFBUSxpQkFBTTtBQUFBO0FBQUcsVUFBRSxlQUFhLEVBQUUsY0FBYSxFQUFFLGFBQVcsU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBUSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsVUFBVSxRQUFPO0FBQUksZUFBRSxLQUFFLEtBQUcsVUFBVTtBQUFHLGlCQUFPLG9CQUFvQixHQUFFLFdBQVcsUUFBUyxTQUFTLElBQUU7QUFBQyxnQkFBRyxBQUFnQixPQUFoQixlQUFrQjtBQUFDLGtCQUFHLEFBQUssR0FBRSxRQUFRLFFBQWYsSUFBa0I7QUFBQyxvQkFBSSxLQUFFLE9BQU8seUJBQXlCLEdBQUUsV0FBVTtBQUFHLHNCQUFHLE9BQU8sZUFBZSxHQUFFLFdBQVUsTUFBSSxJQUFFO0FBQUE7QUFBRyxrQkFBSSxLQUFFLE9BQU8seUJBQXlCLEdBQUUsV0FBVTtBQUFHLG9CQUFHLE9BQU8sZUFBZSxHQUFFLFdBQVUsSUFBRTtBQUFBO0FBQUE7QUFBQSxXQUFRLEVBQUUsZ0JBQWMsWUFBVyxJQUFFLElBQUUsSUFBRTtBQUFDLFVBQVMsT0FBVCxVQUFhLE1BQUU7QUFBSSxjQUFJLEtBQUUsRUFBRSxNQUFHO0FBQUksaUJBQU8sRUFBRSxJQUFHLFNBQVMsSUFBRSxJQUFFO0FBQUMsY0FBRSxNQUFHLEdBQUUsTUFBRyxHQUFFLEdBQUUsS0FBRyxJQUFFLE1BQUksT0FBRyxBQUFTLEdBQUUsUUFBWCxXQUFpQixJQUFFLE1BQUc7QUFBQSxjQUFNO0FBQUEsV0FBRyxFQUFFLGVBQWEsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGFBQUUsUUFBUSxJQUFFO0FBQUEsV0FBSSxFQUFFLGdCQUFjLEdBQUUsRUFBRSxjQUFZLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEVBQUUsTUFBRyxHQUFFLE9BQUssR0FBRTtBQUFBLFdBQVEsRUFBRSxlQUFhLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEVBQUUsTUFBRyxHQUFFLE9BQUssT0FBTyxLQUFLLElBQUc7QUFBQSxXQUFRLEVBQUUsaUJBQWUsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLE1BQUcsR0FBRSxJQUFJLE1BQUcsR0FBRTtBQUFBLFdBQUksRUFBRSxvQkFBa0IsU0FBUyxJQUFFLElBQUU7QUFBQyxZQUFFLE1BQUcsR0FBRSxPQUFPLE1BQUcsT0FBTyxHQUFFO0FBQUEsV0FBSSxFQUFFLFFBQU0sR0FBRSxFQUFFLFlBQVUsU0FBUyxJQUFFO0FBQUMsaUJBQU0sQUFBVyxPQUFPLE1BQWxCO0FBQUEsV0FBcUIsRUFBRSxXQUFTLFNBQVMsSUFBRTtBQUFDLGlCQUFNLEFBQVUsT0FBTyxNQUFqQjtBQUFBLFdBQW9CLEVBQUUsV0FBUyxTQUFTLElBQUU7QUFBQyxpQkFBTSxBQUFVLE9BQU8sTUFBakI7QUFBQSxXQUFvQixFQUFFLGFBQVcsR0FBRSxFQUFFLFdBQVMsR0FBRSxFQUFFLFVBQVEsR0FBRSxFQUFFLFFBQU0sR0FBRSxFQUFFLFFBQU0sR0FBRSxFQUFFLFVBQVEsU0FBUyxJQUFFO0FBQUMsY0FBRyxFQUFFO0FBQUcsbUJBQU0sQ0FBQyxHQUFFO0FBQU8sY0FBRyxFQUFFO0FBQUcsbUJBQU0sQ0FBQyxHQUFFO0FBQUssY0FBRyxFQUFFO0FBQUcsbUJBQU0sQ0FBQyxHQUFFO0FBQUssY0FBRyxFQUFFLEtBQUc7QUFBQyxxQkFBUSxNQUFLO0FBQUUsa0JBQUcsR0FBRSxlQUFlO0FBQUcsdUJBQU07QUFBRyxtQkFBTTtBQUFBO0FBQUcsaUJBQU07QUFBQSxXQUFJLEVBQUUsZ0JBQWMsR0FBRSxFQUFFLGFBQVcsU0FBUyxJQUFFO0FBQUMsaUJBQU8sTUFBRyxBQUFZLE9BQU8sR0FBRSxPQUFPLGFBQTVCO0FBQUEsV0FBdUMsRUFBRSxXQUFTLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEVBQUUsR0FBRSxXQUFTLEdBQUUsWUFBVTtBQUFBLFdBQUcsRUFBRSxhQUFXLFNBQVMsSUFBRTtBQUFDLG1CQUFRLEtBQUUsSUFBSSxXQUFXLElBQUUsR0FBRSxTQUFRLEtBQUUsR0FBRSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sTUFBSTtBQUFDLGdCQUFJLEtBQUUsR0FBRSxXQUFXO0FBQUcsZ0JBQUcsS0FBRTtBQUFJLGlCQUFFLFFBQUs7QUFBQSxpQkFBTTtBQUFDLGtCQUFHLEtBQUU7QUFBSyxtQkFBRSxRQUFLLE1BQUcsSUFBRTtBQUFBLG1CQUFRO0FBQUMsb0JBQUcsS0FBRSxTQUFPLEtBQUUsT0FBTTtBQUFDLHNCQUFHLEVBQUUsTUFBRyxHQUFFO0FBQU8sMEJBQU0sSUFBSSxNQUFNO0FBQThCLHNCQUFJLEtBQUUsR0FBRSxXQUFXO0FBQUcsc0JBQUcsS0FBRSxTQUFPLEtBQUU7QUFBTSwwQkFBTSxJQUFJLE1BQU07QUFBZ0MsdUJBQUUsUUFBUSxTQUFLLE9BQUksTUFBSyxRQUFLLEtBQUcsR0FBRSxRQUFLLE1BQUcsS0FBRyxLQUFJLEdBQUUsUUFBSyxNQUFHLEtBQUcsS0FBRztBQUFBO0FBQVMscUJBQUUsUUFBSyxNQUFHLEtBQUc7QUFBSSxtQkFBRSxRQUFLLE1BQUcsSUFBRSxLQUFHO0FBQUE7QUFBSSxpQkFBRSxRQUFLLEtBQUcsS0FBRTtBQUFBO0FBQUE7QUFBSyxpQkFBTyxHQUFFLFNBQVMsR0FBRTtBQUFBLFdBQUksRUFBRSxhQUFXLFNBQVMsSUFBRTtBQUFDLG1CQUFRLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLFVBQVE7QUFBQyxnQkFBSSxLQUFFLEdBQUU7QUFBSyxnQkFBRyxLQUFFO0FBQUksa0JBQUcsS0FBRSxPQUFLLEtBQUUsS0FBSTtBQUFDLG9CQUFHLE1BQUcsR0FBRTtBQUFPLHdCQUFNLElBQUksTUFBTTtBQUErQixxQkFBRyxNQUFHLE9BQUksSUFBRSxLQUFHLEdBQUU7QUFBQSx5QkFBYSxLQUFFLE9BQUssS0FBRSxLQUFJO0FBQUMsb0JBQUcsS0FBRSxLQUFHLEdBQUU7QUFBTyx3QkFBTSxJQUFJLE1BQU07QUFBK0IscUJBQUcsTUFBRyxPQUFJLEtBQUksTUFBRyxHQUFFLFVBQU8sSUFBRSxLQUFHLEdBQUU7QUFBQSxxQkFBUztBQUFDLG9CQUFHLENBQUUsTUFBRSxPQUFLLEtBQUU7QUFBSyx3QkFBTSxJQUFJLE1BQU07QUFBNkIsb0JBQUcsS0FBRSxLQUFHLEdBQUU7QUFBTyx3QkFBTSxJQUFJLE1BQU07QUFBK0IscUJBQUcsS0FBRSxPQUFJLEtBQUksTUFBRyxHQUFFLFVBQU8sS0FBSSxNQUFHLEdBQUUsVUFBTyxJQUFFLEtBQUcsR0FBRTtBQUFBO0FBQUssZ0JBQUcsTUFBRztBQUFNLG9CQUFHLE9BQU8sYUFBYTtBQUFBLGlCQUFPO0FBQUMsa0JBQUcsQ0FBRSxPQUFHO0FBQVMsc0JBQU0sSUFBSSxNQUFNO0FBQW9DLG9CQUFHLE9BQU0sTUFBRyxPQUFPLGFBQWEsTUFBRyxLQUFHLFFBQU8sTUFBRyxPQUFPLGFBQWEsT0FBSyxLQUFFO0FBQUE7QUFBQTtBQUFRLGlCQUFPO0FBQUE7QUFBQSxTQUFJLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLGVBQU8sZUFBZSxHQUFFLGNBQWEsRUFBQyxPQUFNLFNBQUssU0FBUyxJQUFFO0FBQUMsYUFBRSxHQUFFLFNBQU8sS0FBRyxVQUFTLEdBQUUsR0FBRSxRQUFNLEtBQUcsU0FBUSxHQUFFLEdBQUUsUUFBTSxLQUFHO0FBQUEsVUFBUyxFQUFFLG9CQUFtQixHQUFFLG1CQUFpQixNQUFLLFNBQVMsSUFBRTtBQUFDLGFBQUUsR0FBRSxPQUFLLEtBQUcsUUFBTyxHQUFFLEdBQUUsWUFBVSxLQUFHLGFBQVksR0FBRSxHQUFFLFdBQVMsS0FBRyxZQUFXLEdBQUUsR0FBRSxXQUFTLEtBQUc7QUFBQSxVQUFZLEVBQUUsY0FBYSxHQUFFLGFBQVcsTUFBSyxTQUFTLElBQUU7QUFBQyxhQUFFLEdBQUUsVUFBUSxLQUFHLFdBQVUsR0FBRSxHQUFFLFlBQVUsS0FBRyxhQUFZLEdBQUUsR0FBRSxPQUFLLEtBQUcsUUFBTyxHQUFFLEdBQUUsUUFBTSxLQUFHLFNBQVEsR0FBRSxHQUFFLGtCQUFnQixLQUFHLG1CQUFrQixHQUFFLEdBQUUsU0FBTyxLQUFHLFVBQVMsR0FBRSxHQUFFLHdCQUFzQixLQUFHLHlCQUF3QixHQUFFLEdBQUUsVUFBUSxLQUFHLFdBQVUsR0FBRSxHQUFFLFdBQVMsS0FBRyxZQUFXLEdBQUUsR0FBRSxlQUFhLE1BQUksZ0JBQWUsR0FBRSxHQUFFLG1CQUFpQixNQUFJLG9CQUFtQixHQUFFLEdBQUUsV0FBUyxNQUFJO0FBQUEsVUFBWSxFQUFFLFlBQVcsR0FBRSxXQUFTLE1BQUssU0FBUyxJQUFFO0FBQUMsYUFBRSxHQUFFLGVBQWEsS0FBRyxnQkFBZSxHQUFFLEdBQUUsWUFBVSxLQUFHLGFBQVksR0FBRSxHQUFFLFlBQVUsS0FBRyxhQUFZLEdBQUUsR0FBRSxXQUFTLEtBQUcsWUFBVyxHQUFFLEdBQUUsY0FBWSxNQUFJLGVBQWMsR0FBRSxHQUFFLHlCQUF1QixNQUFJO0FBQUEsVUFBMEIsRUFBRSxZQUFXLEdBQUUsV0FBUyxNQUFLLFNBQVMsSUFBRTtBQUFDLGFBQUUsR0FBRSxTQUFPLEtBQUcsVUFBUyxHQUFFLEdBQUUsU0FBTyxLQUFHLFVBQVMsR0FBRSxHQUFFLE9BQUssS0FBRztBQUFBLFVBQVEsRUFBRSxnQkFBZSxHQUFFLGVBQWEsTUFBSyxTQUFTLElBQUU7QUFBQyxhQUFFLEdBQUUsTUFBSSxjQUFZLE9BQU0sR0FBRSxHQUFFLFVBQVEsS0FBRyxXQUFVLEdBQUUsR0FBRSxZQUFVLEtBQUcsYUFBWSxHQUFFLEdBQUUsT0FBSyxLQUFHLFFBQU8sR0FBRSxHQUFFLGVBQWEsS0FBRyxnQkFBZSxHQUFFLEdBQUUsa0JBQWdCLE1BQUksbUJBQWtCLEdBQUUsR0FBRSxTQUFPLE1BQUksVUFBUyxHQUFFLEdBQUUsd0JBQXNCLE1BQUkseUJBQXdCLEdBQUUsR0FBRSxVQUFRLE9BQUssV0FBVSxHQUFFLEdBQUUsV0FBUyxPQUFLLFlBQVcsR0FBRSxHQUFFLGVBQWEsT0FBSyxnQkFBZSxHQUFFLEdBQUUsbUJBQWlCLFFBQU0sb0JBQW1CLEdBQUUsR0FBRSxXQUFTLFFBQU07QUFBQSxVQUFZLEVBQUUsY0FBYSxHQUFFLGFBQVcsTUFBSyxTQUFTLElBQUU7QUFBQyxhQUFFLEdBQUUsZUFBYSxLQUFHLGdCQUFlLEdBQUUsR0FBRSxhQUFXLEtBQUcsY0FBYSxHQUFFLEdBQUUsV0FBUyxLQUFHLFlBQVcsR0FBRSxHQUFFLGFBQVcsS0FBRztBQUFBLFVBQWMsRUFBRSxnQkFBZSxHQUFFLGVBQWE7QUFBQSxTQUFNLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLGVBQU8sZUFBZSxHQUFFLGNBQWEsRUFBQyxPQUFNO0FBQUssWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLE9BQUssRUFBRTtBQUFLLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxRQUFNLEVBQUU7QUFBTSxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsV0FBUyxFQUFFO0FBQUEsU0FBVSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsSUFBSSxHQUFFLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRTtBQUFLLFVBQUUsVUFBUSxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUksSUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUUsR0FBRSxRQUFPLElBQUUsR0FBRSxRQUFPLElBQUUsR0FBRTtBQUFLLGNBQUcsS0FBRSxJQUFFLElBQUUsSUFBRSxFQUFFLE1BQUksRUFBRSxHQUFFLE1BQUssR0FBRSxNQUFJLElBQUk7QUFBVSxpQkFBSSxLQUFLLElBQUU7QUFBQyxrQkFBRyxJQUFFLEdBQUUsSUFBRyxJQUFFLEdBQUUsY0FBYSxLQUFFLEVBQUUsSUFBRSxPQUFLLEVBQUUsUUFBTSxHQUFFLElBQUcsQ0FBQyxFQUFFLElBQUUsSUFBRSxJQUFHLEtBQUUsTUFBSSxPQUFLLEdBQUUsR0FBRSxXQUFTLEFBQVMsTUFBVCxRQUFXO0FBQUMsb0JBQUcsT0FBTyxLQUFHLE9BQU87QUFBRTtBQUFTLGtCQUFFLEdBQUU7QUFBQTtBQUFHLGNBQUMsSUFBRSxRQUFNLEtBQUcsRUFBRSxTQUFPLEVBQUUsR0FBRSxRQUFPLE9BQUksRUFBRSxJQUFFLEdBQUUsR0FBRTtBQUFBO0FBQUE7QUFBQSxTQUFNLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxZQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxRQUFPLElBQUUsRUFBRSxRQUFPLElBQUUsSUFBRSxJQUFFLEtBQUcsRUFBRSxpQkFBZTtBQUFFLFVBQUUsVUFBUSxTQUFTLElBQUU7QUFBQyxpQkFBTyxFQUFFLEdBQUUsT0FBSyxNQUFHLEVBQUUsR0FBRSxNQUFHLEVBQUUsTUFBRyxFQUFFLE1BQUcsRUFBRSxNQUFHLEVBQUUsWUFBVSxNQUFJLEVBQUU7QUFBQTtBQUFBLFNBQUssU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9BQU07QUFBSyxZQUFJLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRSxLQUFJLElBQUUsV0FBVTtBQUFDLHdCQUFZO0FBQUMsaUJBQUssWUFBVSxFQUFDLG1CQUFrQixNQUFHLGdCQUFlLE1BQUcsT0FBTSxNQUFHLE9BQU0sUUFBSSxLQUFLLFVBQVEsTUFBSyxLQUFLLGdCQUFjLElBQUksRUFBRSxnQkFBYSxLQUFLLGFBQVcsSUFBSSxFQUFFO0FBQUE7QUFBYSxpQkFBTyxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUU7QUFBQyxnQkFBRyxBQUFTLE9BQVQsVUFBYSxNQUFFLE9BQUksRUFBRSxTQUFTO0FBQUcsdUJBQVEsTUFBSztBQUFFLHFCQUFLLFVBQVUsTUFBRyxHQUFFLE9BQUk7QUFBQTtBQUFRLHVCQUFRLE1BQUssS0FBSztBQUFVLHFCQUFLLFVBQVUsTUFBRztBQUFBLGFBQUcsT0FBTyxlQUFlLEdBQUUsV0FBVSxZQUFXLEVBQUMsS0FBSSxXQUFVO0FBQUMsbUJBQU8sS0FBSztBQUFBLGFBQVcsWUFBVyxNQUFHLGNBQWEsU0FBSyxPQUFPLGVBQWUsR0FBRSxXQUFVLFVBQVMsRUFBQyxLQUFJLFdBQVU7QUFBQyxtQkFBTyxBQUFPLEtBQUssWUFBWixRQUFzQixNQUFLLFVBQVEsRUFBRSxrQkFBaUIsS0FBSztBQUFBLGFBQVMsWUFBVyxNQUFHLGNBQWEsU0FBSyxPQUFPLGVBQWUsR0FBRSxXQUFVLGdCQUFlLEVBQUMsS0FBSSxXQUFVO0FBQUMsbUJBQU8sS0FBSztBQUFBLGFBQWUsWUFBVyxNQUFHLGNBQWEsU0FBSyxPQUFPLGVBQWUsR0FBRSxXQUFVLGFBQVksRUFBQyxLQUFJLFdBQVU7QUFBQyxtQkFBTyxLQUFLO0FBQUEsYUFBWSxZQUFXLE1BQUcsY0FBYSxTQUFLLE9BQU8sZUFBZSxJQUFFLFlBQVcsRUFBQyxLQUFJLFdBQVU7QUFBQyxtQkFBTyxHQUFFLGFBQVksSUFBRSxZQUFVLElBQUksT0FBRyxHQUFFO0FBQUEsYUFBVyxZQUFXLE1BQUcsY0FBYSxTQUFLO0FBQUE7QUFBSyxVQUFFLE1BQUksRUFBRTtBQUFBLFNBQVUsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxJQUFFLFFBQU0sS0FBSyxnQkFBYyxTQUFTLElBQUU7QUFBQyxjQUFHLE1BQUcsR0FBRTtBQUFXLG1CQUFPO0FBQUUsY0FBSSxLQUFFO0FBQUcsY0FBRyxBQUFNLE1BQU47QUFBUSxxQkFBUSxNQUFLO0FBQUUscUJBQU8sZUFBZSxLQUFLLElBQUUsT0FBSyxJQUFFLE1BQUcsR0FBRTtBQUFJLGlCQUFPLEdBQUUsVUFBUSxJQUFFO0FBQUE7QUFBRyxlQUFPLGVBQWUsR0FBRSxjQUFhLEVBQUMsT0FBTTtBQUFLLFlBQUksSUFBRSxFQUFFLEVBQUU7QUFBTSxVQUFFLFNBQU87QUFBRSxZQUFJLElBQUUsRUFBRSxFQUFFO0FBQU0sVUFBRSxPQUFLO0FBQUUsWUFBSSxJQUFFLEVBQUUsRUFBRTtBQUFNLFVBQUUsZUFBYTtBQUFFLFlBQUksSUFBRSxFQUFFLEVBQUU7QUFBSyxVQUFFLFlBQVU7QUFBRSxZQUFJLElBQUUsRUFBRSxFQUFFO0FBQU0sVUFBRSxPQUFLO0FBQUUsWUFBSSxJQUFFLEVBQUUsRUFBRTtBQUFNLFVBQUUsT0FBSztBQUFFLFlBQUksSUFBRSxFQUFFLEVBQUU7QUFBTSxVQUFFLE1BQUk7QUFBRSxZQUFJLElBQUUsRUFBRSxFQUFFO0FBQU0sVUFBRSxZQUFVO0FBQUUsWUFBSSxJQUFFLEVBQUUsRUFBRTtBQUFNLFVBQUUsUUFBTTtBQUFFLFlBQUksSUFBRSxFQUFFLEVBQUU7QUFBTSxVQUFFLE1BQUk7QUFBRSxZQUFJLElBQUUsRUFBRSxFQUFFO0FBQU0sVUFBRSxRQUFNO0FBQUUsWUFBSSxJQUFFLEVBQUUsRUFBRTtBQUFNLFVBQUUsU0FBTztBQUFBLFNBQUcsU0FBUyxHQUFFLEdBQUU7QUFBQyxVQUFFLFVBQVEsU0FBUyxJQUFFO0FBQUMsY0FBRztBQUFDLG1CQUFNLENBQUMsQ0FBQztBQUFBLG1CQUFVLElBQU47QUFBUyxtQkFBTTtBQUFBO0FBQUE7QUFBQSxTQUFNLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLFlBQUksR0FBRSxJQUFFLFFBQU0sS0FBSyxhQUFZLEtBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxLQUFFLE9BQU8sa0JBQWdCLEVBQUMsV0FBVSxnQkFBYyxTQUFPLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBRSxZQUFVO0FBQUEsZUFBSSxTQUFTLElBQUUsSUFBRTtBQUFDLHFCQUFRLE1BQUs7QUFBRSxpQkFBRSxlQUFlLE9BQUssSUFBRSxNQUFHLEdBQUU7QUFBQSxhQUFNLElBQUU7QUFBQSxXQUFJLFNBQVMsSUFBRSxJQUFFO0FBQUMsd0JBQVk7QUFBQyxpQkFBSyxjQUFZO0FBQUE7QUFBRSxZQUFFLElBQUUsS0FBRyxHQUFFLFlBQVUsQUFBTyxPQUFQLE9BQVMsT0FBTyxPQUFPLE1BQUksSUFBRSxZQUFVLEdBQUUsV0FBVSxJQUFJO0FBQUE7QUFBSyxlQUFPLGVBQWUsR0FBRSxjQUFhLEVBQUMsT0FBTTtBQUFLLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFLElBQUU7QUFBQyxZQUFTLE9BQVQsVUFBYSxNQUFFO0FBQUksZ0JBQUksS0FBRSxHQUFFLEtBQUssTUFBSyxPQUFJO0FBQUssbUJBQU8sR0FBRSxPQUFLLElBQUU7QUFBQTtBQUFFLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFPLFVBQUUsZUFBYTtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLHNCQUFxQixPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLHFCQUFtQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLHNCQUFxQiwwQ0FBd0MsT0FBSTtBQUFBO0FBQUssaUJBQU8sRUFBRSxJQUFFLEtBQUc7QUFBQSxVQUFHO0FBQUcsVUFBRSxxQkFBbUI7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyxzQkFBcUIsT0FBSTtBQUFBO0FBQUssaUJBQU8sRUFBRSxJQUFFLEtBQUc7QUFBQSxVQUFHO0FBQUcsVUFBRSxxQkFBbUI7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyw4QkFBNkIscUNBQW1DLE9BQUk7QUFBQTtBQUFLLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFHLFVBQUUsNkJBQTJCO0FBQUUsWUFBSSxJQUFFLFNBQVMsSUFBRTtBQUFDLHNCQUFXLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUksR0FBRSxLQUFLLE1BQUsscUJBQW9CLHFDQUFtQyxPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLG9CQUFrQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLHVCQUFzQixPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLHNCQUFvQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLHFCQUFvQix3Q0FBc0MsT0FBSTtBQUFBO0FBQUssaUJBQU8sRUFBRSxJQUFFLEtBQUc7QUFBQSxVQUFHO0FBQUcsVUFBRSxvQkFBa0I7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyw0QkFBMkIsaURBQStDLE9BQUk7QUFBQTtBQUFLLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFHLFVBQUUsMkJBQXlCO0FBQUUsWUFBSSxJQUFFLFNBQVMsSUFBRTtBQUFDLHNCQUFXLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUksR0FBRSxLQUFLLE1BQUssa0JBQWlCLGdFQUE4RCxPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLGlCQUFlO0FBQUUsWUFBSSxJQUFFLFNBQVMsSUFBRTtBQUFDLHNCQUFXLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUksR0FBRSxLQUFLLE1BQUssc0JBQXFCLDREQUEwRCxPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLHFCQUFtQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLG1CQUFrQixPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLGtCQUFnQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLHFCQUFvQixPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLG9CQUFrQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLGlCQUFnQixnQ0FBOEIsT0FBSTtBQUFBO0FBQUssaUJBQU8sRUFBRSxJQUFFLEtBQUc7QUFBQSxVQUFHO0FBQUcsVUFBRSxnQkFBYztBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLGdCQUFlLCtCQUE2QixPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLGVBQWE7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyxjQUFhLGdDQUE4QixPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLGFBQVc7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyxvQkFBbUIsK0NBQTZDLE9BQUk7QUFBQTtBQUFLLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFHLFVBQUUsbUJBQWlCO0FBQUUsWUFBSSxJQUFFLFNBQVMsSUFBRTtBQUFDLHNCQUFXLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUksR0FBRSxLQUFLLE1BQUssc0JBQXFCLGtDQUFnQyxPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLHFCQUFtQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLGdCQUFlLDhCQUE0QixPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLGVBQWE7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyx3QkFBdUIscUZBQW1GLE9BQUk7QUFBQTtBQUFLLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFHLFVBQUUsdUJBQXFCO0FBQUUsWUFBSSxJQUFFLFNBQVMsSUFBRTtBQUFDLHNCQUFXLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUksR0FBRSxLQUFLLE1BQUssa0JBQWlCLG1DQUFpQyxPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLGlCQUFlO0FBQUUsWUFBSSxJQUFFLFNBQVMsSUFBRTtBQUFDLHNCQUFXLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUksR0FBRSxLQUFLLE1BQUssdUJBQXNCLHVEQUFxRCxPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLHNCQUFvQjtBQUFFLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFJLEdBQUUsS0FBSyxNQUFLLHlCQUF3Qix1REFBcUQsT0FBSTtBQUFBO0FBQUssaUJBQU8sRUFBRSxJQUFFLEtBQUc7QUFBQSxVQUFHO0FBQUcsVUFBRSx3QkFBc0I7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyxpQkFBZ0IsdUNBQXFDLE9BQUk7QUFBQTtBQUFLLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFHLFVBQUUsZ0JBQWM7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyxrQkFBaUIsNENBQTBDLE9BQUk7QUFBQTtBQUFLLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFHLFVBQUUsaUJBQWU7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyxlQUFjLG9EQUFrRCxPQUFJO0FBQUE7QUFBSyxpQkFBTyxFQUFFLElBQUUsS0FBRztBQUFBLFVBQUc7QUFBRyxVQUFFLGNBQVk7QUFBRSxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLG1CQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsS0FBSSxHQUFFLEtBQUssTUFBSyx5QkFBd0IsNkNBQTJDLE9BQUk7QUFBQTtBQUFLLGlCQUFPLEVBQUUsSUFBRSxLQUFHO0FBQUEsVUFBRztBQUFHLFVBQUUsd0JBQXNCO0FBQUEsU0FBRyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsQ0FBQyxRQUFPLFdBQVUsYUFBWSxjQUFhLGFBQVksYUFBWSxnQkFBZSxpQkFBZ0IsSUFBRSxDQUFDLFVBQVMsWUFBVztBQUFXLFVBQUUsVUFBUSxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUksSUFBRTtBQUFFLGNBQUcsS0FBRSxNQUFHLElBQUcsT0FBTyxLQUFLLElBQUcsUUFBUyxTQUFTLElBQUU7QUFBQyxnQkFBRyxBQUFLLEVBQUUsUUFBUSxRQUFmO0FBQWtCLG9CQUFNLElBQUksRUFBRSxxQkFBbUIsS0FBRSxnQ0FBOEIsS0FBRTtBQUFBLGNBQW1CLEtBQUssTUFBSSxJQUFFLEtBQUssT0FBSyxHQUFFLFFBQU0sTUFBSyxLQUFLLFVBQVEsR0FBRSxXQUFTLFdBQVU7QUFBQyxtQkFBTTtBQUFBLGFBQUksS0FBSyxZQUFVLEdBQUUsYUFBVyxTQUFTLElBQUU7QUFBQyxtQkFBTztBQUFBLGFBQUcsS0FBSyxhQUFXLEdBQUUsY0FBWSxNQUFLLEtBQUssWUFBVSxHQUFFLGFBQVcsTUFBSyxLQUFLLFlBQVUsR0FBRSxhQUFXLE1BQUssS0FBSyxlQUFhLEdBQUUsZ0JBQWMsTUFBSyxLQUFLLGVBQWMsTUFBRSxHQUFFLGdCQUFjLE1BQUssSUFBRSxJQUFHLEFBQU8sT0FBUCxRQUFVLE9BQU8sS0FBSyxJQUFHLFFBQVMsU0FBUyxJQUFFO0FBQUMsZUFBRSxJQUFHLFFBQVMsU0FBUyxJQUFFO0FBQUMsZ0JBQUUsT0FBTyxPQUFJO0FBQUE7QUFBQSxjQUFRLElBQUcsQUFBSyxFQUFFLFFBQVEsS0FBSyxVQUFwQjtBQUEwQixrQkFBTSxJQUFJLEVBQUUsbUJBQWlCLEtBQUssT0FBSyx5QkFBdUIsS0FBRTtBQUFBO0FBQUEsU0FBa0IsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUMsVUFBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLFNBQVMsSUFBRTtBQUFDLG1CQUFPLE1BQUcsR0FBRSxRQUFNLFFBQU07QUFBQTtBQUFHLFlBQUUsVUFBUSxHQUFFLEFBQVUsT0FBTyxjQUFqQixZQUE2QixlQUFhLEdBQUUsQUFBVSxPQUFPLFVBQWpCLFlBQXlCLFdBQVMsR0FBRSxBQUFVLE9BQU8sUUFBakIsWUFBdUIsU0FBTyxHQUFFLEFBQVUsT0FBTyxNQUFqQixZQUFvQixPQUFJLFNBQVM7QUFBQSxXQUFtQixLQUFLLE1BQUssRUFBRTtBQUFBLFNBQU0sU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9BQU0sU0FBSyxFQUFFLGtCQUFnQixTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsaUJBQU8sZUFBZSxJQUFFLElBQUUsRUFBQyxVQUFTLE9BQUcsWUFBVyxNQUFHLGNBQWEsT0FBRyxPQUFNO0FBQUE7QUFBQSxTQUFNLFNBQVMsR0FBRSxHQUFFO0FBQUMsVUFBRSxVQUFRLFNBQVMsSUFBRTtBQUFDLGlCQUFNLEFBQVUsT0FBTyxNQUFqQixXQUFtQixBQUFPLE9BQVAsT0FBUyxBQUFZLE9BQU8sTUFBbkI7QUFBQTtBQUFBLFNBQXVCLFNBQVMsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEdBQUc7QUFBZSxVQUFFLFVBQVEsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLEtBQUssSUFBRTtBQUFBO0FBQUEsU0FBSyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLE9BQU87QUFBZSxVQUFFLElBQUUsSUFBRSxJQUFFLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFHLEVBQUUsS0FBRyxLQUFFLEVBQUUsSUFBRSxPQUFJLEVBQUUsS0FBRztBQUFFLGdCQUFHO0FBQUMscUJBQU8sRUFBRSxJQUFFLElBQUU7QUFBQSxxQkFBUyxJQUFOO0FBQUE7QUFBVSxjQUFHLFNBQVEsTUFBRyxTQUFRO0FBQUUsa0JBQU0sVUFBVTtBQUEyQixpQkFBTSxXQUFVLE1BQUksSUFBRSxNQUFHLEdBQUUsUUFBTztBQUFBO0FBQUEsU0FBSSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUU7QUFBRyxVQUFFLFVBQVEsQ0FBQyxFQUFHLFdBQVU7QUFBQyxpQkFBTyxBQUFHLE9BQU8sZUFBZSxJQUFHLEdBQUUsRUFBQyxLQUFJLFdBQVU7QUFBQyxtQkFBTztBQUFBLGVBQUssTUFBMUQ7QUFBQTtBQUFBLFNBQWlFLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLFlBQUksSUFBRSxRQUFNLEtBQUssWUFBVSxTQUFTLElBQUU7QUFBQyxjQUFJLEtBQUUsQUFBWSxPQUFPLFVBQW5CLGNBQTJCLE9BQU8sVUFBUyxLQUFFLE1BQUcsR0FBRSxLQUFHLEtBQUU7QUFBRSxjQUFHO0FBQUUsbUJBQU8sR0FBRSxLQUFLO0FBQUcsY0FBRyxNQUFHLEFBQVUsT0FBTyxHQUFFLFVBQW5CO0FBQTBCLG1CQUFNLEVBQUMsTUFBSyxXQUFVO0FBQUMscUJBQU8sTUFBRyxNQUFHLEdBQUUsVUFBUyxNQUFFLFNBQVEsRUFBQyxPQUFNLE1BQUcsR0FBRSxPQUFLLE1BQUssQ0FBQztBQUFBO0FBQUssZ0JBQU0sSUFBSSxVQUFVLEtBQUUsNEJBQTBCO0FBQUE7QUFBb0MsZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9BQU07QUFBSyxZQUFJLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRTtBQUFHLG1CQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBRyxBQUFTLE9BQVQsVUFBYSxNQUFFLFFBQUksTUFBRyxFQUFFLE1BQU0sY0FBYyxPQUFJLEVBQUUsTUFBTSxhQUFhLEdBQUUsZUFBYSxHQUFFLFdBQVc7QUFBWSxtQkFBTyxHQUFFLFdBQVc7QUFBWSxjQUFHLEdBQUU7QUFBWSxtQkFBTyxHQUFFO0FBQVksY0FBRyxPQUFJO0FBQUUsbUJBQU87QUFBSyxjQUFHLEdBQUU7QUFBYSxtQkFBTyxHQUFFO0FBQWEsbUJBQVEsS0FBRSxHQUFFLFNBQVEsTUFBRyxPQUFJLE1BQUc7QUFBQyxnQkFBRyxHQUFFO0FBQWEscUJBQU8sR0FBRTtBQUFhLGlCQUFFLEdBQUU7QUFBQTtBQUFRLGlCQUFPO0FBQUE7QUFBSyxxQkFBWTtBQUFDLGNBQUk7QUFBRSxpQkFBTyxNQUFFLElBQUksT0FBTyxZQUFVLFdBQVU7QUFBQyxtQkFBTSxFQUFDLE1BQUssV0FBVTtBQUFDLHFCQUFNLEVBQUMsTUFBSyxNQUFHLE9BQU07QUFBQTtBQUFBLGFBQVM7QUFBQTtBQUFFLG1CQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxVQUFTLE9BQVQsVUFBYSxNQUFFLFFBQUksQUFBUyxPQUFULFVBQWEsTUFBRTtBQUFJLG1CQUFRLEtBQUUsS0FBRSxLQUFFLEVBQUUsSUFBRSxJQUFFLEtBQUcsTUFBRyxNQUFHLENBQUMsR0FBRTtBQUFJLGlCQUFFLEVBQUUsSUFBRSxJQUFFO0FBQUcsaUJBQU87QUFBQTtBQUFFLG1CQUFXLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLFVBQVMsT0FBVCxVQUFhLE1BQUUsUUFBSSxBQUFTLE9BQVQsVUFBYSxNQUFFO0FBQUksbUJBQVEsS0FBRSxFQUFFLElBQUUsSUFBRSxLQUFHLE1BQUcsTUFBRyxDQUFDLEdBQUU7QUFBSSxpQkFBRSxFQUFFLElBQUUsSUFBRTtBQUFHLGlCQUFPO0FBQUE7QUFBRSxtQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSTtBQUFFLGlCQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsUUFBSSxBQUFTLE9BQVQsVUFBYSxNQUFFLFFBQUksTUFBRyxBQUFJLEdBQUUsVUFBVSxTQUFoQixJQUF1QixPQUFFLElBQUksT0FBTyxZQUFVLFdBQVU7QUFBQyxnQkFBSSxLQUFFLEtBQUUsS0FBRSxFQUFFLElBQUUsSUFBRTtBQUFHLG1CQUFNLEVBQUMsTUFBSyxXQUFVO0FBQUMscUJBQUssTUFBRyxNQUFHLENBQUMsR0FBRTtBQUFJLHFCQUFFLEVBQUUsSUFBRSxJQUFFO0FBQUcsa0JBQUcsQUFBTyxPQUFQO0FBQVMsdUJBQU0sRUFBQyxNQUFLLE1BQUcsT0FBTTtBQUFNLGtCQUFJLEtBQUUsRUFBQyxNQUFLLE9BQUcsT0FBTTtBQUFHLHFCQUFPLEtBQUUsRUFBRSxJQUFFLElBQUUsS0FBRztBQUFBO0FBQUEsYUFBSyxNQUFHO0FBQUE7QUFBSSxtQkFBVyxJQUFFLElBQUUsSUFBRTtBQUFDLFVBQVMsT0FBVCxVQUFhLE1BQUU7QUFBSSxtQkFBUSxLQUFFLEtBQUUsS0FBRSxHQUFFLFNBQVEsTUFBRyxNQUFHLENBQUMsR0FBRTtBQUFJLGlCQUFFLEdBQUU7QUFBUSxpQkFBTztBQUFBO0FBQUUsbUJBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLFVBQVMsT0FBVCxVQUFhLE1BQUU7QUFBSSxtQkFBUSxLQUFFLEdBQUUsU0FBUSxNQUFHLE1BQUcsQ0FBQyxHQUFFO0FBQUksaUJBQUUsR0FBRTtBQUFRLGlCQUFPO0FBQUE7QUFBRSxtQkFBVyxJQUFFO0FBQUMsaUJBQU8sRUFBRSxNQUFNLG1CQUFtQixNQUFHLElBQUUsRUFBRSxNQUFNLG9CQUFvQixNQUFHLEdBQUUsTUFBTSxTQUFPLEdBQUUsVUFBVTtBQUFBO0FBQUssbUJBQVcsSUFBRSxJQUFFO0FBQUMsY0FBRyxBQUFTLE9BQVQsVUFBYSxNQUFFLFFBQUksSUFBRTtBQUFDLGdCQUFJLEtBQUUsRUFBRSxJQUFFO0FBQUksbUJBQU8sRUFBRSxNQUFNLGFBQWEsTUFBRyxFQUFFLEdBQUUsT0FBTSxRQUFJO0FBQUE7QUFBRSxpQkFBTyxHQUFFLFVBQVEsRUFBRSxHQUFFLFdBQVM7QUFBQTtBQUFFLG1CQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxVQUFTLE9BQVQsVUFBYSxNQUFFLFFBQUksQUFBUyxPQUFULFVBQWEsTUFBRTtBQUFJLG1CQUFRLEtBQUUsS0FBRSxLQUFFLE1BQUcsRUFBRSxNQUFNLGFBQWEsTUFBRyxHQUFFLFFBQU0sR0FBRSxTQUFRLEFBQU8sT0FBUCxRQUFVO0FBQUMsZ0JBQUcsT0FBSTtBQUFFLHFCQUFNO0FBQUcsaUJBQUUsTUFBRyxFQUFFLE1BQU0sYUFBYSxNQUFHLEdBQUUsUUFBTSxHQUFFO0FBQUE7QUFBUSxpQkFBTTtBQUFBO0FBQUcsbUJBQVcsSUFBRTtBQUFDLG1CQUFRLEtBQUUsRUFBRSxLQUFHLEtBQUUsR0FBRSxLQUFFLEVBQUUsS0FBRyxBQUFPLE9BQVAsUUFBVTtBQUFDLGdCQUFHLE1BQUksT0FBSTtBQUFFLHFCQUFPO0FBQUUsaUJBQUUsRUFBRSxJQUFFO0FBQUE7QUFBRyxpQkFBTTtBQUFBO0FBQUcsVUFBRSw4QkFBNEIsR0FBRSxFQUFFLDZCQUEyQixHQUFFLEVBQUUsMEJBQXdCLEdBQUUsRUFBRSw2QkFBMkIsU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSTtBQUFFLGlCQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsUUFBSSxBQUFTLE9BQVQsVUFBYSxNQUFFLFFBQUksTUFBRyxBQUFJLEdBQUUsVUFBVSxTQUFoQixJQUF1QixPQUFFLElBQUksT0FBTyxZQUFVLFdBQVU7QUFBQyxnQkFBSSxLQUFFLEVBQUUsSUFBRSxJQUFFLElBQUcsU0FBUyxJQUFFO0FBQUMscUJBQU8sRUFBRSxNQUFNLGNBQWM7QUFBQSxlQUFNLE9BQU8sYUFBWSxLQUFFLEdBQUUsT0FBTztBQUFNLG1CQUFNLEVBQUMsTUFBSyxXQUFVO0FBQUMscUJBQUssTUFBRyxNQUFHLENBQUMsR0FBRTtBQUFJLHFCQUFFLEdBQUUsT0FBTztBQUFNLGtCQUFHLEFBQU8sT0FBUDtBQUFTLHVCQUFNLEVBQUMsTUFBSyxNQUFHLE9BQU07QUFBTSxrQkFBSSxLQUFFLEVBQUMsTUFBSyxPQUFHLE9BQU07QUFBRyxxQkFBTyxLQUFFLEdBQUUsT0FBTyxPQUFNO0FBQUE7QUFBQSxhQUFLLE1BQUc7QUFBQSxXQUFLLEVBQUUsdUJBQXFCLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJO0FBQUUsaUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxRQUFJLEdBQUUsV0FBUyxBQUFJLEdBQUUsUUFBUSxVQUFVLFNBQXhCLElBQStCLE9BQUUsSUFBSSxPQUFPLFlBQVUsV0FBVTtBQUFDLGdCQUFJLEtBQUUsR0FBRSxVQUFRLEdBQUUsUUFBUSxjQUFZO0FBQUssbUJBQU0sRUFBQyxNQUFLLFdBQVU7QUFBQyxxQkFBSyxNQUFJLE9BQUcsQ0FBQyxHQUFFLE9BQUksQ0FBQyxNQUFHLE9BQUk7QUFBSSxxQkFBRSxHQUFFO0FBQWEsa0JBQUcsQUFBTyxPQUFQO0FBQVMsdUJBQU0sRUFBQyxNQUFLLE1BQUcsT0FBTTtBQUFNLGtCQUFJLEtBQUUsRUFBQyxNQUFLLE9BQUcsT0FBTTtBQUFHLHFCQUFPLEtBQUUsR0FBRSxjQUFhO0FBQUE7QUFBQSxhQUFLLE1BQUc7QUFBQSxXQUFLLEVBQUUsNEJBQTBCLEdBQUUsRUFBRSwyQkFBeUIsR0FBRSxFQUFFLHdCQUFzQixTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSTtBQUFFLGlCQUFPLEFBQVMsT0FBVCxVQUFhLE1BQUUsUUFBSSxNQUFHLEdBQUUsVUFBVSxPQUFFLElBQUksT0FBTyxZQUFVLFdBQVU7QUFBQyxnQkFBSSxLQUFFLEVBQUUsSUFBRSxJQUFFO0FBQUcsbUJBQU0sRUFBQyxNQUFLLFdBQVU7QUFBQyxrQkFBRyxBQUFPLE9BQVA7QUFBUyx1QkFBTSxFQUFDLE1BQUssTUFBRyxPQUFNO0FBQU0sa0JBQUksS0FBRSxFQUFDLE1BQUssT0FBRyxPQUFNO0FBQUcscUJBQU8sS0FBRSxFQUFFLEdBQUUsSUFBRSxJQUFFLEtBQUc7QUFBQTtBQUFBLGFBQUssTUFBRztBQUFBLFdBQUssRUFBRSx5QkFBdUIsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFHLE9BQUk7QUFBRSxtQkFBTyxHQUFFO0FBQVEsbUJBQVEsS0FBRSxJQUFHLEtBQUUsSUFBRyxLQUFFLEVBQUUsSUFBRSxPQUFJLEFBQU8sT0FBUDtBQUFVLGVBQUUsS0FBSyxLQUFHLEtBQUUsRUFBRSxHQUFFLElBQUU7QUFBSSxtQkFBUSxLQUFFLEVBQUUsSUFBRSxPQUFJLEFBQU8sT0FBUDtBQUFVLGVBQUUsS0FBSyxLQUFHLEtBQUUsRUFBRSxHQUFFLElBQUU7QUFBSSxtQkFBUSxLQUFFLEdBQUUsUUFBTyxLQUFFLEdBQUUsUUFBTyxLQUFFLE1BQUssS0FBRSxLQUFLLElBQUksSUFBRSxLQUFHLEtBQUUsR0FBRSxNQUFJO0FBQUMsZ0JBQUksS0FBRSxHQUFFLEVBQUU7QUFBRyxnQkFBRyxPQUFJLEdBQUUsRUFBRTtBQUFHO0FBQU0saUJBQUU7QUFBQTtBQUFFLGlCQUFPO0FBQUEsV0FBRyxFQUFFLHdCQUFzQixTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUcsR0FBRTtBQUFZLG1CQUFPLEdBQUU7QUFBWSxjQUFHLEdBQUU7QUFBYSxtQkFBTyxHQUFFO0FBQWEscUJBQU87QUFBQyxnQkFBSSxLQUFFLEdBQUU7QUFBUSxnQkFBRyxBQUFPLE9BQVAsUUFBVSxPQUFJO0FBQUUscUJBQU87QUFBSyxnQkFBRyxHQUFFO0FBQWEscUJBQU8sR0FBRTtBQUFhLGlCQUFFO0FBQUE7QUFBQSxXQUFJLEVBQUUsd0JBQXNCLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sT0FBSSxLQUFFLE9BQUssR0FBRSxtQkFBa0IsTUFBRSxHQUFFLGtCQUFrQixhQUFXLEdBQUUsYUFBVyxLQUFFLEdBQUU7QUFBQSxXQUFTLEVBQUUscUJBQW1CLFlBQVcsSUFBRTtBQUFDLGNBQUksSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUUsa0JBQU8sR0FBRTtBQUFBLGlCQUFnQixFQUFFLFNBQVM7QUFBUyxrQkFBSSxLQUFFLE9BQUcsS0FBRTtBQUFHLGtCQUFHO0FBQUMseUJBQVEsS0FBRSxFQUFFLEdBQUUsWUFBVyxLQUFFLEdBQUUsUUFBTyxDQUFDLEdBQUUsTUFBSyxLQUFFLEdBQUUsUUFBTztBQUFDLDBCQUFPLEdBQUUsTUFBTTtBQUFBLHlCQUFnQixFQUFFLFNBQVM7QUFBQSx5QkFBMkIsRUFBRSxTQUFTO0FBQVE7QUFBQSx5QkFBVyxFQUFFLFNBQVM7QUFBYSwwQkFBRyxNQUFHO0FBQUUsK0JBQU07QUFBRywyQkFBRTtBQUFHO0FBQUEseUJBQVcsRUFBRSxTQUFTO0FBQVEsMEJBQUc7QUFBRSwrQkFBTTtBQUFHLDJCQUFFO0FBQUc7QUFBQTtBQUFjLDZCQUFNO0FBQUE7QUFBQTtBQUFBLHVCQUFXLElBQU47QUFBUyxxQkFBRSxFQUFDLE9BQU07QUFBQSx3QkFBRztBQUFRLG9CQUFHO0FBQUMsd0JBQUcsQ0FBQyxHQUFFLFFBQU8sTUFBRSxHQUFFLFdBQVMsR0FBRSxLQUFLO0FBQUEsMEJBQUc7QUFBUSxzQkFBRztBQUFFLDBCQUFNLEdBQUU7QUFBQTtBQUFBO0FBQU87QUFBQSxpQkFBVyxFQUFFLFNBQVM7QUFBQSxpQkFBc0IsRUFBRSxTQUFTO0FBQVEsa0JBQUc7QUFBQyx5QkFBUSxLQUFFLEVBQUUsR0FBRSxZQUFXLEtBQUUsR0FBRSxRQUFPLENBQUMsR0FBRSxNQUFLLEtBQUUsR0FBRSxRQUFPO0FBQUMsMEJBQU8sR0FBRSxNQUFNO0FBQUEseUJBQWdCLEVBQUUsU0FBUztBQUFBLHlCQUFhLEVBQUUsU0FBUztBQUFBLHlCQUFVLEVBQUUsU0FBUztBQUFBLHlCQUEyQixFQUFFLFNBQVM7QUFBQSx5QkFBVyxFQUFFLFNBQVM7QUFBUTtBQUFBO0FBQWMsNkJBQU07QUFBQTtBQUFBO0FBQUEsdUJBQVcsSUFBTjtBQUFTLHFCQUFFLEVBQUMsT0FBTTtBQUFBLHdCQUFHO0FBQVEsb0JBQUc7QUFBQyx3QkFBRyxDQUFDLEdBQUUsUUFBTyxNQUFFLEdBQUUsV0FBUyxHQUFFLEtBQUs7QUFBQSwwQkFBRztBQUFRLHNCQUFHO0FBQUUsMEJBQU0sR0FBRTtBQUFBO0FBQUE7QUFBTztBQUFBLGlCQUFXLEVBQUUsU0FBUztBQUFBLGlCQUFrQixFQUFFLFNBQVM7QUFBQSxpQkFBVSxFQUFFLFNBQVM7QUFBQSxpQkFBMkIsRUFBRSxTQUFTO0FBQUEsaUJBQVcsRUFBRSxTQUFTO0FBQVEscUJBQU0sQ0FBQyxHQUFFO0FBQUE7QUFBZ0IsY0FBRztBQUFDLHFCQUFRLEtBQUUsRUFBRSxHQUFFLFlBQVcsSUFBRSxHQUFFLFFBQU8sQ0FBQyxFQUFFLE1BQUssSUFBRSxHQUFFLFFBQU87QUFBQyxrQkFBRyxDQUFDLEdBQUUsRUFBRTtBQUFPLHVCQUFNO0FBQUE7QUFBQSxtQkFBVSxJQUFOO0FBQVMsaUJBQUUsRUFBQyxPQUFNO0FBQUEsb0JBQUc7QUFBUSxnQkFBRztBQUFDLG1CQUFHLENBQUMsRUFBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSztBQUFBLHNCQUFHO0FBQVEsa0JBQUc7QUFBRSxzQkFBTSxHQUFFO0FBQUE7QUFBQTtBQUFPLGlCQUFNO0FBQUEsV0FBSSxFQUFFLGtCQUFnQixHQUFFLEVBQUUsZUFBYSxTQUFTLElBQUU7QUFBQyxpQkFBTyxBQUFJLEVBQUUsUUFBTjtBQUFBLFdBQVUsRUFBRSxnQkFBYyxHQUFFLEVBQUUsc0JBQW9CLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLFVBQVMsT0FBVCxVQUFhLE1BQUUsUUFBSSxBQUFTLE9BQVQsVUFBYSxNQUFFO0FBQUksbUJBQVEsS0FBRSxFQUFFLElBQUUsSUFBRSxLQUFHLEFBQU8sT0FBUCxRQUFVO0FBQUMsZ0JBQUcsT0FBSTtBQUFFLHFCQUFNO0FBQUcsaUJBQUUsRUFBRSxJQUFFLElBQUUsSUFBRTtBQUFBO0FBQUcsaUJBQU07QUFBQSxXQUFJLEVBQUUsb0JBQWtCLEdBQUUsRUFBRSxpQ0FBK0IsWUFBVyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUcsQUFBUyxPQUFULFVBQWEsTUFBRSxRQUFJLEVBQUUsSUFBRSxJQUFFO0FBQUcsbUJBQU07QUFBRyxjQUFJLEtBQUUsRUFBRTtBQUFHLGlCQUFNLENBQUUsRUFBQyxFQUFFLE1BQU0sdUJBQXVCLE9BQUksQUFBTyxHQUFFLFVBQVQsUUFBZ0IsQ0FBQyxHQUFFLEdBQUUsT0FBTSxJQUFFO0FBQUEsV0FBSyxFQUFFLG1CQUFpQixTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsaUJBQU8sQUFBUyxPQUFULFVBQWEsTUFBRSxRQUFJLE9BQUksS0FBRSxBQUFPLEdBQUUsWUFBVCxRQUFrQixHQUFFLFlBQVUsR0FBRSxVQUFRLENBQUMsQ0FBQztBQUFBLFdBQUcsRUFBRSxtQkFBaUIsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsRUFBRSxLQUFHLEtBQUUsRUFBRTtBQUFHLGlCQUFNLEFBQUssT0FBTCxNQUFRLEFBQUssT0FBTCxNQUFTLEdBQUUsUUFBSyxFQUFFLE9BQUksS0FBRTtBQUFBLFdBQUksRUFBRSxtQkFBaUIsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsRUFBRSxLQUFHLEtBQUUsRUFBRTtBQUFHLGlCQUFNLEFBQUssT0FBTCxNQUFRLEFBQUssT0FBTCxNQUFTLEdBQUUsUUFBSyxFQUFFLE9BQUksS0FBRTtBQUFBLFdBQUksRUFBRSxrQkFBZ0IsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxHQUFFLFlBQVU7QUFBQSxXQUFHLEVBQUUsaUJBQWUsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxHQUFFLFlBQVU7QUFBQSxXQUFHLEVBQUUsdUJBQXFCLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEdBQUU7QUFBQSxXQUFrQixFQUFFLG1CQUFpQixTQUFTLElBQUU7QUFBQyxpQkFBTyxHQUFFO0FBQUEsV0FBYyxFQUFFLGtCQUFnQixTQUFTLElBQUU7QUFBQyxpQkFBTyxHQUFFO0FBQUEsV0FBYSxFQUFFLGlCQUFlLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEdBQUU7QUFBQSxXQUFZLEVBQUUsb0JBQWtCLEdBQUUsRUFBRSxhQUFXLFNBQVMsSUFBRTtBQUFDLG1CQUFRLEtBQUUsR0FBRSxBQUFPLEdBQUUscUJBQVQ7QUFBMkIsa0JBQUksS0FBRSxHQUFFO0FBQWlCLGlCQUFPO0FBQUEsV0FBRyxFQUFFLGdCQUFjLFNBQVMsSUFBRSxJQUFFO0FBQUMscUJBQU87QUFBQyxnQkFBRyxDQUFDLE1BQUcsQ0FBQyxFQUFFLE1BQU0sT0FBTztBQUFHLHFCQUFPO0FBQUUsZ0JBQUksS0FBRSxFQUFFO0FBQUcsZ0JBQUcsQ0FBQyxFQUFFLE1BQU0sYUFBYTtBQUFHLHFCQUFPO0FBQUUsZ0JBQUcsTUFBRyxFQUFFLE1BQU0sT0FBTyxPQUFJLEVBQUUsSUFBRSxJQUFFLE1BQUc7QUFBSSxxQkFBTztBQUFFLGlCQUFFLEdBQUU7QUFBQTtBQUFBO0FBQUEsU0FBUSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUU7QUFBSSxVQUFFLFVBQVEsU0FBUyxJQUFFO0FBQUMsY0FBRyxDQUFDLEVBQUU7QUFBRyxrQkFBTSxVQUFVLE9BQU8sTUFBRztBQUFxQixpQkFBTztBQUFBO0FBQUEsU0FBSSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxVQUFVO0FBQWtCLFVBQUUsVUFBUSxFQUFFLE9BQU0sU0FBUyxTQUFTLElBQUUsSUFBRTtBQUFDLFlBQUUsTUFBSyxFQUFDLE1BQUssa0JBQWlCLFFBQU8sRUFBRSxLQUFHLE9BQU0sR0FBRSxNQUFLO0FBQUEsV0FBTyxXQUFVO0FBQUMsY0FBSSxLQUFFLEVBQUUsT0FBTSxLQUFFLEdBQUUsUUFBTyxLQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUU7QUFBUSxpQkFBTSxDQUFDLE1BQUcsTUFBRyxHQUFFLFNBQVEsSUFBRSxTQUFPLFFBQU8sRUFBQyxPQUFNLFFBQU8sTUFBSyxVQUFLLEFBQVEsTUFBUixTQUFVLEVBQUMsT0FBTSxJQUFFLE1BQUssVUFBSSxBQUFVLE1BQVYsV0FBWSxFQUFDLE9BQU0sR0FBRSxLQUFHLE1BQUssVUFBSSxFQUFDLE9BQU0sQ0FBQyxJQUFFLEdBQUUsTUFBSSxNQUFLO0FBQUEsV0FBTSxXQUFVLEVBQUUsWUFBVSxFQUFFLE9BQU0sRUFBRSxTQUFRLEVBQUUsV0FBVSxFQUFFO0FBQUEsU0FBWSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUU7QUFBSyxhQUFHLEVBQUUsT0FBTyxXQUFVLFlBQVcsR0FBRSxFQUFDLFFBQU87QUFBQSxTQUFNLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxZQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRTtBQUFJLFVBQUUsVUFBUSxJQUFFLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLEVBQUUsSUFBRSxJQUFFLEVBQUUsR0FBRTtBQUFBLFlBQUssU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGlCQUFPLEdBQUUsTUFBRyxJQUFFO0FBQUE7QUFBQSxTQUFJLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLFlBQUksSUFBRSxFQUFFLEtBQUssUUFBTyxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsVUFBVTtBQUFtQixVQUFFLFFBQU8sVUFBVSxTQUFTLElBQUU7QUFBQyxZQUFFLE1BQUssRUFBQyxNQUFLLG1CQUFrQixRQUFPLE9BQU8sS0FBRyxPQUFNO0FBQUEsV0FBTyxXQUFVO0FBQUMsY0FBSSxJQUFFLEtBQUUsRUFBRSxPQUFNLEtBQUUsR0FBRSxRQUFPLEtBQUUsR0FBRTtBQUFNLGlCQUFPLE1BQUcsR0FBRSxTQUFPLEVBQUMsT0FBTSxRQUFPLE1BQUssU0FBSyxNQUFFLEVBQUUsSUFBRSxLQUFHLEdBQUUsU0FBTyxHQUFFLFFBQU8sRUFBQyxPQUFNLElBQUUsTUFBSztBQUFBO0FBQUEsU0FBUyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUUsYUFBWSxJQUFFLEVBQUUsZ0JBQWUsSUFBRSxFQUFFO0FBQU8saUJBQVEsS0FBSyxHQUFFO0FBQUMsY0FBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEtBQUcsRUFBRTtBQUFVLGNBQUcsR0FBRTtBQUFDLGdCQUFHLEVBQUUsT0FBSztBQUFFLGtCQUFHO0FBQUMsa0JBQUUsR0FBRSxHQUFFO0FBQUEsdUJBQVMsSUFBTjtBQUFTLGtCQUFFLEtBQUc7QUFBQTtBQUFFLGdCQUFHLEVBQUUsTUFBSSxFQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUU7QUFBRyx1QkFBUSxLQUFLO0FBQUUsb0JBQUcsRUFBRSxPQUFLLEVBQUU7QUFBRyxzQkFBRztBQUFDLHNCQUFFLEdBQUUsR0FBRSxFQUFFO0FBQUEsMkJBQVUsSUFBTjtBQUFTLHNCQUFFLEtBQUcsRUFBRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBTyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUU7QUFBSSxVQUFFLFVBQVEsU0FBUyxJQUFFO0FBQUMsaUJBQU8sRUFBRSxFQUFFO0FBQUE7QUFBQSxTQUFNLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxZQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxTQUFRLElBQUUsT0FBTyxRQUFRLE1BQU07QUFBVSxRQUFDLEdBQUUsVUFBUSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsQ0FBQyxDQUFDLE1BQUcsQ0FBQyxDQUFDLEdBQUUsUUFBTyxLQUFFLENBQUMsQ0FBQyxNQUFHLENBQUMsQ0FBQyxHQUFFLFlBQVcsSUFBRSxDQUFDLENBQUMsTUFBRyxDQUFDLENBQUMsR0FBRTtBQUFZLFVBQVksT0FBTyxNQUFu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S0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsSUFBSSxTQUFRLElBQUUsRUFBRSxXQUFVLElBQUUsRUFBRSxnQkFBZSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsVUFBVSxXQUFVLElBQUUsT0FBTyxXQUFVLElBQUUsRUFBRSxRQUFPLElBQUUsRUFBRSxRQUFPLGNBQWEsSUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLFlBQVcsSUFBRSxFQUFFLGVBQWMsSUFBRSxFQUFFLDhCQUE2QixJQUFFLEVBQUUsOEJBQTZCLEtBQUcsRUFBRSxRQUFPLEtBQUcsRUFBRSxTQUFRLEtBQUcsQ0FBQyxNQUFJLENBQUMsR0FBRyxhQUFXLENBQUMsR0FBRyxVQUFVLFdBQVUsS0FBRyxLQUFHLEVBQUcsV0FBVTtBQUFDLGlCQUFPLEFBQUcsRUFBRSxFQUFFLElBQUcsS0FBSSxFQUFDLEtBQUksV0FBVTtBQUFDLG1CQUFPLEVBQUUsTUFBSyxLQUFJLEVBQUMsT0FBTSxLQUFJO0FBQUEsZ0JBQU0sS0FBakU7QUFBQSxhQUFzRSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMs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RTtBQUFJLFVBQUUsVUFBUSxFQUFFO0FBQVksWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLFFBQU0sRUFBRTtBQUFVLFlBQUksSUFBRSxFQUFFO0FBQUksVUFBRSxjQUFZLEVBQUU7QUFBZ0IsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLGlCQUFlLEVBQUU7QUFBbUIsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLG1CQUFpQixFQUFFO0FBQXFCLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxpQkFBZSxFQUFFO0FBQW1CLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxlQUFhLEVBQUU7QUFBaUIsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLGFBQVcsRUFBRTtBQUFlLFlBQUksSUFBRSxFQUFFO0FBQUksVUFBRSxPQUFLLEVBQUU7QUFBUyxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsZUFBYSxFQUFFO0FBQWlCLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxXQUFTLEVBQUU7QUFBYSxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsaUJBQWUsRUFBRTtBQUFtQixZQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRTtBQUFLLFVBQUUsd0JBQXNCLEVBQUU7QUFBMEIsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLFFBQU0sRUFBRTtBQUFVLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxhQUFXLEVBQUU7QUFBZSxZQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRTtBQUFLLFVBQUUsY0FBWSxFQUFFO0FBQWdCLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxPQUFLLEVBQUU7QUFBUyxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsWUFBVSxFQUFFO0FBQWMsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLGFBQVcsRUFBRTtBQUFlLFlBQUksSUFBRSxFQUFFO0FBQUssVUFBRSxTQUFPLEVBQUU7QUFBVyxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsY0FBWSxFQUFFLGlC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LEVBQUUsS0FBRyxJQUFFLEVBQUU7QUFBTyxtQkFBTyxJQUFFLEtBQUcsS0FBRyxJQUFFLEtBQUUsS0FBRyxTQUFRLE1BQUUsRUFBRSxXQUFXLE1BQUksU0FBTyxLQUFFLFNBQU8sSUFBRSxNQUFJLEtBQUksS0FBRSxFQUFFLFdBQVcsSUFBRSxNQUFJLFNBQU8sSUFBRSxRQUFNLEtBQUUsRUFBRSxPQUFPLEtBQUcsS0FBRSxLQUFFLEVBQUUsTUFBTSxHQUFFLElBQUUsS0FBRyxJQUFFLFFBQU8sTUFBRSxTQUFPLE1BQUk7QUFBQTtBQUFBO0FBQVEsVUFBRSxVQUFRLEVBQUMsUUFBTyxFQUFFLFFBQUksUUFBTyxFQUFFO0FBQUEsU0FBTSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUU7QUFBSSxVQUFFLEVBQUMsUUFBTyxVQUFTLE1BQUssTUFBRyxRQUFPLEVBQUUsR0FBSSxXQUFVO0FBQUMsWUFBRTtBQUFBLGNBQU8sRUFBQyxNQUFLLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEVBQUUsRUFBRTtBQUFBO0FBQUEsU0FBUSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxLQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsVUFBUSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLEFBQUssR0FBRSxRQUFRLFdBQWYsSUFBc0IsSUFBRSxBQUFLLEdBQUUsUUFBUSxZQUFmLElBQXVCLElBQUUsSUFBRSxRQUFNLE9BQU0sSUFBRSxFQUFFLEtBQUcsSUFBRSxLQUFHLEVBQUUsV0FBVSxJQUFFLEdBQUUsSUFBRSxJQUFHLElBQUUs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LEVBQUUsS0FBRyxLQUFFLEVBQUU7QUFBRyxZQUFFLElBQUUsSUFBRyxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUUsTUFBSyxFQUFDLE1BQUssSUFBRSxRQUFPLElBQUUsT0FBTSxHQUFFLEtBQUcsTUFBSyxJQUFFLE1BQUs7QUFBQSxhQUFZLFdBQVU7QUFBQyxxQkFBUSxLQUFFLEdBQUUsT0FBTSxLQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUUsTUFBSyxNQUFHLEdBQUU7QUFBUyxtQkFBRSxHQUFFO0FBQVMsbUJBQU8sR0FBRSxVQUFTLElBQUUsT0FBSyxLQUFFLEtBQUUsR0FBRSxPQUFLLEdBQUUsTUFBTSxTQUFPLEFBQVEsTUFBUixTQUFVLEVBQUMsT0FBTSxHQUFFLEtBQUksTUFBSyxVQUFJLEFBQVUsTUFBVixXQUFZLEVBQUMsT0FBTSxHQUFFLE9BQU0sTUFBSyxVQUFJLEVBQUMsT0FBTSxDQUFDLEdBQUUsS0FBSSxHQUFFLFFBQU8sTUFBSyxVQUFLLElBQUUsU0FBTyxRQUFPLEVBQUMsT0FBTSxRQUFPLE1BQUs7QUFBQSxhQUFPLEtBQUUsWUFBVSxVQUFTLENBQUMsSUFBRSxPQUFJLEVBQUU7QUFBQTtBQUFBLFNBQU0sU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxHQUFFLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRSxJQUFJLEdBQUUsSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLEtBQUksSUFBRSxHQUFHLFVBQVMsSUFBRSxLQUFLLEtBQUksSUFBRSxFQUFFO0FBQVksVUFBRSxFQUFDLFFBQU8sVUFBUyxPQUFNLE1BQUcsUUFBTyxDQUFDLENBQUUsTUFBRyxLQUFJLEtBQUUsRUFBRSxPQUFPLFdBQVUsYUFBWSxDQUFDLEtBQUcsRUFBRSxjQUFZLENBQUMsS0FBRyxFQUFDLFVBQVMsU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLE9BQU8sRUFBRTtBQUFPLFlBQUU7QUFBRyxjQUFJLEtBQUUsVUFBVSxT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QUFFLE1BQUcsS0FBRTtBQUFFLGdCQUFJLEtBQUUsR0FBRTtBQUFPLGdCQUFHLEtBQUUsS0FBRztBQUFFLG9CQUFNLElBQUksVUFBVTtBQUFzQixpQkFBRSxLQUFFLEtBQUksTUFBRSxLQUFFO0FBQUcscUJBQVEsS0FBRSxHQUFFLEtBQUUsSUFBRSxFQUFFLElBQUU7QUFBQyxrQkFBSSxLQUFFLFNBQVMsR0FBRSxPQUFPLElBQUUsSUFBRSxJQUFHO0FBQUksa0JBQUcsTUFBTTtBQUFHLHVCQUFPO0FBQUUsaUJBQUUsS0FBRSxNQUFHO0FBQUE7QUFBRSxtQkFBTztBQUFBO0FBQUUscUJBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEVBQUUsRUFBRSxJQUFFLEdBQUUsU0FBTyxLQUFHLElBQUUsSUFBRTtBQUFBO0FBQUcscUJBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEVBQUUsU0FBUyxJQUFFO0FBQUMsdUJBQVEsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxFQUFFO0FBQUUsbUJBQUUsS0FBSyxNQUFJLEdBQUUsV0FBVztBQUFJLHFCQUFPO0FBQUEsY0FBRyxLQUFHLElBQUUsSUFBRTtBQUFBO0FBQUcscUJBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEVBQUUsSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFHLHFCQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxFQUFFLEVBQUUsS0FBRyxJQUFFLElBQUU7QUFBQTtBQUFHLHFCQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxFQUFFLFNBQVMsSUFBRSxJQUFFO0FBQUMsdUJBQVEsSUFBRSxJQUFFLElBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsVUFBUSxDQUFHLFFBQUcsS0FBRyxJQUFHLEVBQUU7QUFBRSxxQkFBRSxHQUFFLFdBQVcsS0FBRyxLQUFFLE1BQUcsR0FBRSxLQUFFLEtBQUUsS0FBSSxHQUFFLEtBQUssS0FBRyxHQUFFLEtBQUs7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TSxvQkFBRyxLQUFLLEtBQUUsRUFBRSxNQUFHO0FBQUUsbUJBQU87QUFBQSxhQUFHLEVBQUUsVUFBVSxZQUFVLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxFQUFFLElBQUUsR0FBRSxLQUFLLFNBQVEsS0FBSztBQUFBLGFBQUksRUFBRSxVQUFVLGVBQWEsU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUssU0FBUSxLQUFLLE1BQUcsS0FBSyxLQUFFLE1BQUk7QUFBQSxhQUFHLEVBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxFQUFFLElBQUUsR0FBRSxLQUFLLFNBQVEsS0FBSyxPQUFJLElBQUUsS0FBSyxLQUFFO0FBQUEsYUFBSSxFQUFFLFVBQVUsZUFBYSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxTQUFTLE1BQUssTUFBRyxLQUFLLEtBQUUsTUFBSSxJQUFFLEtBQUssS0FBRSxNQUFJLE1BQUksV0FBUyxLQUFLLEtBQUU7QUFBQSxhQUFJLEVBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxFQUFFLElBQUUsR0FBRSxLQUFLLFNBQVEsV0FBUyxLQUFLLE1BQUksTUFBSyxLQUFFLE1BQUksS0FBRyxLQUFLLEtBQUUsTUFBSSxJQUFFLEtBQUssS0FBRTtBQUFBLGFBQUssRUFBRSxVQUFVLFlBQVUsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGtCQUFHLEdBQUUsTUFBRyxHQUFFLE1BQUcsRUFBRSxJQUFFLElBQUUsS0FBSztBQUFRLHFCQUFRLEtBQUUsS0FBSyxLQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsRUFBRSxLQUFFLE1BQUksT0FBRztBQUFNLG9CQUFHLEtBQUssS0FBRSxNQUFHO0FBQUUsbUJBQU8sTUFBSSxPQUFHLFFBQU8sT0FBRyxLQUFLLElBQUksR0FBRSxJQUFFLE1BQUk7QUFBQSxhQUFHLEVBQUUsVUFBVSxZQUFVLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxrQkFBRyxHQUFFLE1BQUcsR0FBRSxNQUFHLEVBQUUsSUFBRSxJQUFFLEtBQUs7QUFBUSxxQkFBUSxLQUFFLElBQUUsS0FBRSxHQUFFLEtBQUUsS0FBSyxLQUFFLEVBQUUsS0FBRyxLQUFFLEtBQUksT0FBRztBQUFNLG9CQUFHLEtBQUssS0FBRSxFQUFFLE1BQUc7QUFBRSxtQkFBTyxNQUFJLE9BQUcsUUFBTyxPQUFHLEtBQUssSUFBSSxHQUFFLElBQUUsTUFBSTtBQUFBLGFBQUcsRUFBRSxVQUFVLFdBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUssU0FBUSxNQUFJLEtBQUssTUFBRyxLQUFJLE9BQUksS0FBSyxNQUFHLEtBQUcsS0FBSztBQUFBLGFBQUksRUFBRSxVQUFVLGNBQVksU0FBUyxJQUFFLElBQUU7QUFBQyxrQkFBRyxFQUFFLElBQUUsR0FBRSxLQUFLO0FBQVEsZ0JBQUksS0FBRSxLQUFLLE1BQUcsS0FBSyxLQUFFLE1BQUk7QUFBRSxtQkFBTyxRQUFNLEtBQUUsYUFBVyxLQUFFO0FBQUEsYUFBRyxFQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLGtCQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUs7QUFBUSxnQkFBSSxLQUFFLEtBQUssS0FBRSxLQUFHLEtBQUssT0FBSTtBQUFFLG1CQUFPLFFBQU0sS0FBRSxhQUFXLEtBQUU7QUFBQSxhQUFHLEVBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxFQUFFLElBQUUsR0FBRSxLQUFLLFNBQVEsS0FBSyxNQUFHLEtBQUssS0FBRSxNQUFJLElBQUUsS0FBSyxLQUFFLE1BQUksS0FBRyxLQUFLLEtBQUUsTUFBSTtBQUFBLGFBQUksRUFBRSxVQUFVLGNBQVksU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUssU0FBUSxLQUFLLE9BQUksS0FBRyxLQUFLLEtBQUUsTUFBSSxLQUFHLEtBQUssS0FBRSxNQUFJLElBQUUsS0FBSyxLQUFFO0FBQUEsYUFBSSxFQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxTQUFRLEVBQUUsS0FBSyxNQUFLLElBQUUsTUFBRyxJQUFHO0FBQUEsYUFBSSxFQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxTQUFRLEVBQUUsS0FBSyxNQUFLLElBQUUsT0FBRyxJQUFHO0FBQUEsYUFBSSxFQUFFLFVBQVUsZUFBYSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxTQUFRLEVBQUUsS0FBSyxNQUFLLElBQUUsTUFBRyxJQUFHO0FBQUEsYUFBSSxFQUFFLFVBQVUsZUFBYSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxTQUFRLEVBQUUsS0FBSyxNQUFLLElBQUUsT0FBRyxJQUFHO0FBQUEsYUFBSSxFQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFDLE1BQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsT0FBSSxFQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBSyxJQUFJLEdBQUUsSUFBRSxNQUFHLEdBQUU7QUFBRyxnQkFBSSxLQUFFLEdBQUUsS0FBRTtBQUFFLGlCQUFJLEtBQUssTUFBRyxNQUFJLElBQUUsRUFBRSxLQUFFLE1BQUksT0FBRztBQUFNLG1CQUFLLEtBQUUsTUFBRyxLQUFFLEtBQUU7QUFBSSxtQkFBTyxLQUFFO0FBQUEsYUFBRyxFQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFDLE1BQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsT0FBSSxFQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBSyxJQUFJLEdBQUUsSUFBRSxN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QkFBTyxRQUFRLElBQUksSUFBRSxJQUFFO0FBQUcsZ0JBQUksS0FBRSxPQUFPO0FBQUcsbUJBQU8sTUFBTSxNQUFHLFFBQVEsSUFBSSxJQUFFLElBQUUsTUFBRyxHQUFFLE9BQU8sT0FBSTtBQUFBLGFBQVEsR0FBRSxVQUFVLE1BQUksU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUcsQ0FBQyxFQUFFLFNBQVM7QUFBRyxxQkFBTyxRQUFRLElBQUksSUFBRSxJQUFFLElBQUU7QUFBRyxnQkFBSSxLQUFFLE9BQU87QUFBRyxtQkFBTyxNQUFNLE1BQUcsUUFBUSxJQUFJLElBQUUsSUFBRSxJQUFFLE1BQUcsTUFBRyxLQUFHLEtBQUUsR0FBRSxPQUFPLFVBQVMsSUFBRSxPQUFPLE1BQUcsSUFBRTtBQUFBLGFBQUssR0FBRSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsZ0JBQUksS0FBRSxJQUFJLEdBQUU7QUFBRyxtQkFBTyxHQUFFLFNBQU8sSUFBRTtBQUFBLGFBQUc7QUFBQTtBQUFLLFVBQUUscUJBQW1CO0FBQUEsU0FBRyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLEdBQUUsSUFBRSxRQUFNLEtBQUssYUFBWSxLQUFFLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sS0FBRSxPQUFPLGtCQUFnQixFQUFDLFdBQVUsZ0JBQWMsU0FBTyxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQUUsWUFBVTtBQUFBLGVBQUksU0FBUyxJQUFFLElBQUU7QUFBQyxxQkFBUSxNQUFLO0FBQUUsaUJBQUUsZUFBZSxPQUFLLElBQUUsTUFBRyxHQUFFO0FBQUEsYUFBTSxJQUFFO0FBQUEsV0FBSSxTQUFTLElBQUUsSUFBRTtBQUFDLHdCQUFZO0FBQUMsaUJBQUssY0FBWTtBQUFBO0FBQUUsWUFBRSxJQUFFLEtBQUcsR0FBRSxZQUFVLEFBQU8sT0FBUCxPQUFTLE9BQU8sT0FBTyxNQUFJLElBQUUsWUFBVSxHQUFFLFdBQVUsSUFBSTtBQUFBO0FBQUssZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9B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TyxLQUFLLGFBQVc7QUFBQSxhQUFTLFlBQVcsTUFBRyxjQUFhLFNBQUs7QUFBQTtBQUFLLFVBQUUsZUFBYTtBQUFBLFNBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9BQU07QUFBSyxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsWUFBVSxFQUFFO0FBQVUsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLFlBQVUsRUFBRTtBQUFVLFlBQUksSUFBRSxFQUFFO0FBQUksVUFBRSxlQUFhLEVBQUU7QUFBYSxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsYUFBVyxFQUFFO0FBQVcsWUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFFLGFBQVcsRUFBRTtBQUFBLFNBQVksU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsVUFBRSxLQUFJLEVBQUUsTUFBSyxFQUFFLEtBQUksRUFBRSxLQUFJLEVBQUU7QUFBSSxZQUFJLEdBQUUsSUFBRSxRQUFNLEtBQUssYUFBWSxLQUFFLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sS0FBRSxPQUFPLGtCQUFnQixFQUFDLFdBQVUsZ0JBQWMsU0FBTyxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQUUsWUFBVTtBQUFBLGVBQUksU0FBUyxJQUFFLElBQUU7QUFBQyxxQkFBUSxNQUFLO0FBQUUsaUJBQUUsZUFBZSxPQUFLLElBQUUsTUFBRyxHQUFFO0FBQUEsYUFBTSxJQUFFO0FBQUEsV0FBSSxTQUFTLElBQUUsSUFBRTtBQUFDLHdCQUFZO0FBQUMsaUJBQUssY0FBWTtBQUFBO0FBQUUsWUFBRSxJQUFFLEtBQUcsR0FBRSxZQUFVLEFBQU8sT0FBUCxPQUFTLE9BQU8sT0FBTyxNQUFJLElBQUUsWUFBVSxHQUFFLFdBQVUsSUFBSTtBQUFBO0FBQUssZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9BQU07QUFBSyxZQUFJLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRSxLQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRSxJQUFF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TUFBRyxLQUFHLEdBQUUsSUFBRSxLQUFHLEdBQUUsSUFBRSxJQUFHLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBRSxJQUFFLElBQUUsS0FBRyxHQUFFLElBQUUsR0FBRSxLQUFFO0FBQUcsZUFBSSxLQUFHLEdBQUUsSUFBRSxJQUFHLE1BQUcsQ0FBQyxLQUFHLEdBQUUsTUFBSSxDQUFDLEdBQUUsS0FBRyxHQUFFLElBQUUsR0FBRSxJQUFFLE1BQUksSUFBRSxHQUFFLEtBQUUsSUFBRyxLQUFHLEdBQUUsS0FBRztBQUFFO0FBQUMsZUFBSSxJQUFFLElBQUcsTUFBRyxDQUFDLEtBQUcsR0FBRSxNQUFJLENBQUMsR0FBRSxLQUFHLEdBQUUsSUFBRSxHQUFFLElBQUUsTUFBSSxJQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUcsR0FBRSxLQUFHO0FBQUU7QUFBQyxjQUFHLEFBQUksTUFBSjtBQUFNLGdCQUFFLElBQUU7QUFBQSxlQUFNO0FBQUMsZ0JBQUcsTUFBSTtBQUFFLHFCQUFPLElBQUUsTUFBSSxJQUFFLElBQUcsS0FBRSxLQUFHO0FBQUcsaUJBQUcsS0FBSyxJQUFJLEdBQUUsSUFBRyxLQUFHO0FBQUE7QUFBRSxpQkFBTyxLQUFFLEtBQUcsS0FBRyxJQUFFLEtBQUssSUFBSSxHQUFFLElBQUU7QUFBQSxXQUFJLEVBQUUsUUFBTSxTQUFTLElBQUUsSUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsY0FBSSxHQUFFLEdBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEdBQUUsSUFBRyxNQUFHLEtBQUcsR0FBRSxJQUFFLEtBQUcsR0FBRSxJQUFFLEFBQUssTUFBTCxLQUFPLEtBQUssSUFBSSxHQUFFLE9BQUssS0FBSyxJQUFJLEdBQUUsT0FBSyxHQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFHLElBQUUsS0FBRSxLQUFHLEFBQUksT0FBSixLQUFPLElBQUUsS0FBRSxJQUFFLElBQUU7QUFBRSxlQUFJLEtBQUUsS0FBSyxJQUFJLEtBQUcsTUFBTSxPQUFJLE9BQUks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QVUsU0FBUyxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUUsS0FBRSxHQUFFLFFBQVEsWUFBVyxLQUFJLElBQUUsR0FBRSxRQUFPLElBQUUsR0FBRSxJQUFFLEdBQUUsSUFBRTtBQUFHLGVBQUksS0FBRSxHQUFFLEtBQUUsR0FBRTtBQUFJLGlCQUFFLEtBQUcsS0FBRyxNQUFJLEdBQUUsS0FBSyxLQUFHLEtBQUcsTUFBSyxFQUFFLEtBQUssS0FBRyxJQUFFLE1BQUssRUFBRSxLQUFLLE1BQUksS0FBSSxJQUFFLEtBQUcsSUFBRSxFQUFFLFFBQVEsR0FBRSxPQUFPO0FBQUksaUJBQU8sQUFBSyxNQUFFLElBQUUsSUFBRSxPQUFYLElBQWUsR0FBRSxLQUFLLEtBQUcsS0FBRyxNQUFLLEVBQUUsS0FBSyxLQUFHLElBQUUsTUFBSyxFQUFFLEtBQUssTUFBSSxNQUFJLEFBQUssT0FBTCxLQUFRLEdBQUUsS0FBSyxLQUFHLEtBQUcsTUFBSyxFQUFFLEtBQUssS0FBRyxJQUFFLFFBQU0sQUFBSyxPQUFMLE1BQVEsRUFBRSxLQUFLLEtBQUcsSUFBRSxNQUFLLElBQUUsRUFBRSxPQUFLLEVBQUUsS0FBSyxLQUFHLElBQUksRUFBRSxLQUFHO0FBQUEsV0FBRyxXQUFVLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEtBQUcsRUFBRSxTQUFTO0FBQUEsV0FBSSxXQUFVLFNBQVMsSUFBRTtBQUFDLGNBQUksSUFBRSxJQUFFLEtBQUUsSUFBRyxLQUFFLEdBQUUsSUFBRSxHQUFFLFFBQU8sSUFBRTtBQUFFLGVBQUksS0FBRSxHQUFFLEtBQUUsR0FBRTtBQUFJLGlCQUFFLEtBQUcsS0FBRyxNQUFJLE9BQUcsRUFBRSxNQUFHLEtBQUcsS0FBSSxNQUFHLEVBQUUsTUFBRyxLQUFHLEtBQUksTUFBRyxFQUFFLE1BQUcsSUFBRSxLQUFJLE1BQUcsRUFBRSxLQUFHLE1BQUksS0FBRyxPQUFHLEtBQUcsR0FBRTtBQUFHLGlCQUFPLEFBQUssTUFBRSxJQUFFLE9BQVQsSUFBYSxPQUFHLEVBQUUsTUFBRyxLQUFHLEtBQUksTUFBRyxFQUFFLE1B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QUksUUFBTyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLFFBQU8sUUFBSSxNQUFLLFFBQUksT0FBTSxRQUFJLE9BQU0sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksTUFBSyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLE1BQUssUUFBSSxLQUFJLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLFFBQU8sUUFBSSxNQUFLLFFBQUksT0FBTSxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxNQUFLLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxPQUFNLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksUUFBTyxRQUFJLE1BQUssUUFBSSxPQUFNLFFBQUksT0FBTSxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxNQUFLLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksTUFBSyxRQUFJLEtBQUksUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksUUFBTyxRQUFJLE1BQUssUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLE1BQUssUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLE1BQUssUUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLFFBQU8sVUFBSSxRQUFPLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxTQUFRLFVBQUksTUFBSyxVQUFJLEtBQUksVUFBSSxPQUFNLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksSUFBRyxVQUFJLElBQUcsVUFBSSxJQUFHLFVBQUksU0FBUSxVQUFJLElBQUcsVUFBSSxLQUFJLFVBQUksT0FBTSxVQUFJLEtBQUksVUFBSSxTQUFRLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxLQUFJLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxTQUFRLFVBQUksTUFBSyxVQUFJLEtBQUksVUFBSSxPQUFNLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksSUFBRyxVQUFJLElBQUcsVUFBSSxJQUFHLFVBQUksU0FBUSxVQUFJLElBQUcsVUFBSSxLQUFJLFVBQUksUUFBTyxVQUFJLE9BQU0sVUFBSSxLQUFJLFVBQUksU0FBUSxVQUFJLEtBQUksVUFBSSxLQUFJLFVBQUksS0FBSSxVQUFJLE9BQU0sVUFBSSxVQUFTLFVBQUksT0FBTSxVQUFJLEtBQUksVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLFFBQU8sVUFBSSxNQUFLLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxLQUFJLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksUUFBTyxVQUFJLE1BQUssVUFBSSxRQUFPLFVBQUksUUFBTyxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksUUFBTyxVQUFJLFFBQU8sVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksUUFBTyxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksU0FBUSxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksUUFBTyxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLElBQUcsVUFBSSxNQUFLLFVBQUksS0FBSSxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksT0FBTSxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxJQUFHLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxLQUFJLFVBQUksUUFBTyxVQUFJLEtBQUksVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLElBQUcsVUFBSSxPQUFNLFVBQUksSUFBRyxVQUFJLElBQUcsVUFBSSxLQUFJLFVBQUksS0FBSSxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLFFBQU8sVUFBSSxRQUFPLFVBQUksS0FBSSxVQUFJLFFBQU8sVUFBSSxPQUFNLFVBQUksUUFBTyxVQUFJLE9BQU0sVUFBSSxNQUFLLFVBQUksTUFBSztBQUFBLGFBQU0sU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDO0FBQWEsbUJBQU8sZUFBZSxJQUFFLGNBQWEsRUFBQyxPQUFNO0FBQUssZ0JBQUksS0FBRSxHQUFFLEtBQUksSUFBRSxHQUFFLEtBQUksSUFBRSxHQUFFLEtBQUksSUFBRSxXQUFVO0FBQUMsNEJBQVk7QUFBQyxxQkFBSyxTQUFPLElBQUcsS0FBSyxRQUFNLEtBQUssUUFBTTtBQUFBO0FBQUcscUJBQU8sR0FBRSxVQUFVLDJCQUF5QixTQUFTLElBQUU7QUFBQyx1QkFBTSxDQUFDLEtBQUksS0FBSSxLQUFJLE1BQUssVUFBUyxjQUFhLE9BQU0sVUFBUyxRQUFPLFVBQVMsU0FBUSxRQUFPLEtBQUksTUFBSyxNQUFLLE1BQUssT0FBTSxNQUFLLE1BQUssT0FBTSxPQUFNLFFBQU8sTUFBSyxNQUFLLE1BQUssS0FBSSxLQUFJLEtBQUksS0FBSSxNQUFLLEtBQUksS0FBSSxNQUFLLE1BQUssTUFBSyxNQUFLLE9BQU0sS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLE1BQUssTUFBSyxLQUFJLEtBQUksT0FBTSxNQUFLLE1BQUssTUFBSyxLQUFJLEtBQUksTUFBSyxPQUFPLFFBQVEsT0FBSTtBQUFBLGlCQUFHLEdBQUUsVUFBVSxlQUFhLFdBQVU7QUFBQyxvQkFBSSxLQUFFLEtBQUssT0FBTyxLQUFLLE9BQU8sU0FBTyxJQUFHLEtBQUUsQUFBTyxPQUFQO0FBQVMsd0JBQU87QUFBQSx1QkFBTztBQUFBLHVCQUFXO0FBQUkseUJBQUU7QUFBRztBQUFBLHVCQUFVO0FBQUksd0JBQUksS0FBRSxLQUFLLE9BQU8sS0FBSyxRQUFNO0FBQUcseUJBQUUsQUFBTyxPQUFQLFFBQVUsQUFBVSxPQUFWLFdBQWEsQUFBUSxPQUFSLFNBQVcsQUFBUyxPQUFUO0FBQVc7QUFBQSx1QkFBVTtBQUFJLHdCQUFHLEtBQUUsT0FBRyxBQUFhLEtBQUssT0FBTyxLQUFLLFFBQU0sT0FBcEM7QUFBdUMsMkJBQUUsQ0FBQyxDQUFFLE1BQUUsS0FBSyxPQUFPLEtBQUssUUFBTSxPQUFLLENBQUMsS0FBSyx5QkFBeUI7QUFBQSw2QkFBVyxBQUFhLEtBQUssT0FBTyxLQUFLLFFBQU0sT0FBcEMsWUFBdUM7QUFBQywwQkFBSTtBQUFFLDJCQUFFLENBQUUsTUFBRSxLQUFLLE9BQU8sS0FBSyxRQUFNLE9BQUssQ0FBQyxLQUFLLHlCQUF5QjtBQUFBO0FBQUE7QUFBSSx1QkFBTztBQUFBLGlCQUFHLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRTtBQUFDLGdCQUFJLEdBQUUsU0FBTixLQUFZLEFBQUksR0FBRSxTQUFOLElBQVksQ0FBTSxHQUFFLFVBQVIsTUFBYyxLQUFLLFFBQU0sS0FBSyxPQUFPLFNBQU8sQUFBTSxHQUFFLFVBQVIsT0FBZ0IsTUFBSyxRQUFNLEtBQUssT0FBTyxTQUFRLEtBQUssT0FBTyxLQUFLLEdBQUUsVUFBUSxLQUFLLE9BQU8sS0FBSztBQUFBLGlCQUFPO0FBQUEsaUJBQUssSUFBRSxXQUFVO0FBQUMsMEJBQVcsSUFBRSxJQUFFO0FBQUMscUJBQUssZUFBYSxJQUFJLEdBQUUsZ0JBQWEsS0FBSyxhQUFhLFdBQVMsQ0FBQyxDQUFDLE1BQUcsQUFBVyxPQUFPLEdBQUUsWUFBcEIsYUFBOEIsR0FBRSxVQUFTLEtBQUssVUFBUSxJQUFJLEVBQUUsUUFBUSxJQUFFLEtBQUssZUFBYyxLQUFLLFFBQVEsZUFBYSxDQUFDLENBQUMsTUFBRyxBQUFXLE9BQU8sR0FBRSxXQUFwQixhQUE2QixHQUFFLFNBQVEsS0FBSyxhQUFXLENBQUMsQ0FBQyxNQUFHLEFBQVcsT0FBTyxHQUFFLFNBQXBCLGFBQTJCLEdBQUUsT0FBTSxLQUFLLFdBQVMsQ0FBQyxDQUFDLE1BQUcsQUFBVyxPQUFPLEdBQUUsT0FBcEIsYUFBeUIsR0FBRSxLQUFJLEtBQUssU0FBTyxJQUFHLEtBQUssU0FBTyxJQUFJO0FBQUE7QUFBRSxxQkFBTyxHQUFFLFVBQVUsU0FBTyxXQUFVO0FBQUMsdUJBQU8sS0FBSyxhQUFhO0FBQUEsaUJBQVEsR0FBRSxVQUFVLGVBQWEsV0FBVTtBQUFDLG9CQUFHLEFBQUksS0FBSyxPQUFPLFdBQWhCLEdBQXVCO0FBQUMsc0JBQUksS0FBRSxLQUFLLFFBQVE7QUFBZSxzQkFBRyxLQUFLLFFBQVE7QUFBYSw2QkFBUSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sRUFBRSxJQUFFO0FBQUMsMEJBQUksS0FBRSxHQUFFLEtBQUcsS0FBRSxLQUFLLFFBQVEsT0FBTyxNQUFNLEdBQUUsTUFBTSxJQUFHLEdBQUUsTUFBTSxLQUFJLEtBQUUsRUFBQyxNQUFLLEdBQUUsWUFBVSxpQkFBZSxlQUFjLE9BQU07QUFBRywyQkFBSyxjQUFhLElBQUUsUUFBTSxHQUFFLFFBQU8sS0FBSyxZQUFXLElBQUUsTUFBSSxHQUFFLE1BQUssS0FBSyxPQUFPLEtBQUs7QUFBQTtBQUFHLHNCQUFHLENBQUMsS0FBSyxRQUFRLE9BQU07QUFBQyx3QkFBSSxLQUFFO0FBQU8seUJBQUssWUFBVyxNQUFFLEVBQUMsT0FBTSxFQUFDLE1BQUssS0FBSyxRQUFRLFlBQVcsUUFBTyxLQUFLLFFBQVEsUUFBTSxLQUFLLFFBQVEsYUFBVyxLQUFJO0FBQUssd0JBQUksS0FBRSxBQUFNLEtBQUssUUFBUSxPQUFPLEtBQUssUUFBUSxXQUF2QyxPQUErQyxLQUFLLE9BQU8saUJBQWUsS0FBSyxRQUFRLGVBQWEsS0FBSyxRQUFRO0FBQU0seUJBQUssT0FBTyxLQUFLO0FBQUcsd0JBQUksSUFBRSxFQUFDLE1BQUssRUFBRSxVQUFVLEdBQUUsT0FBTSxPQUFNLEtBQUssUUFBUSxPQUFPLE1BQU0sR0FBRSxPQUFNLEdBQUU7QUFBTSx3QkFBRyxLQUFLLGNBQWEsR0FBRSxRQUFNLENBQUMsR0FBRSxPQUFNLEdBQUUsT0FBTSxLQUFLLFlBQVcsSUFBRSxNQUFJLEVBQUMsTUFBSyxLQUFLLFFBQVEsWUFBVyxRQUFPLEtBQUssUUFBUSxRQUFNLEtBQUssUUFBUSxhQUFXLEVBQUUsTUFBSSxLQUFHLEFBQUksR0FBRSxTQUFOLEdBQVc7QUFBQywwQkFBSSxJQUFFLEdBQUUsU0FBUSxJQUFFLEdBQUU7QUFBTSx3QkFBRSxRQUFNLEVBQUMsU0FBUSxHQUFFLE9BQU07QUFBQTtBQUFHLHlCQUFLLE9BQU8sS0FBSztBQUFBO0FBQUE7QUFBSSx1QkFBTyxLQUFLLE9BQU87QUFBQSxpQkFBUztBQUFBO0FBQUssZUFBRSxZQUFVO0FBQUE7QUFBQSxXQUFNLEVBQUUsVUFBUTtBQUFBLFNBQUssU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLE9BQU8sVUFBVSxVQUFTLElBQUUsT0FBTyxVQUFVLGdCQUFlLElBQUUsRUFBQyxHQUFFLE9BQU0sR0FBRSxPQUFNLEdBQUUsT0FBTSxHQUFFLE9BQU0sSUFBRyxPQUFNLElBQUcsT0FBTSxJQUFHLE9BQU0sSUFBRyxPQUFNLElBQUcsT0FBTSxJQUFHLE9BQU0sSUFBRyxRQUFPLEtBQUksT0FBTSxLQUFJLE9BQU0sTUFBSyxPQUFNLE1BQUssU0FBTyxJQUFFLENBQUMsS0FBSSxLQUFJLE9BQU0sT0FBTSxPQUFNLE1BQUssTUFBSyxNQUFLLEtBQUksS0FBSSxNQUFLLE1BQUssTUFBSyxPQUFNLE9BQU07QUFBTyxtQkFBVyxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUU7QUFBRSxjQUFHLEtBQUUsR0FBRSxTQUFTLElBQUksZUFBYyxNQUFHO0FBQUksaUJBQUUsS0FBSSxLQUFFO0FBQUEsbUJBQVUsTUFBRztBQUFNLGlCQUFFLEtBQUksS0FBRTtBQUFBLGVBQU07QUFBQyxnQkFBRyxDQUFFLE9BQUc7QUFBWSxvQkFBTSxJQUFJLEVBQUU7QUFBaUUsaUJBQUUsS0FBSSxLQUFFO0FBQUE7QUFBRSxpQkFBTSxPQUFLLEtBQUUsRUFBRSxPQUFPLEtBQUksS0FBRSxHQUFFLFVBQVE7QUFBQTtBQUFFLG1CQUFXLElBQUU7QUFBQyxlQUFLLFNBQU8sR0FBRSxVQUFRLEdBQUUsS0FBSyxTQUFPLEtBQUssSUFBSSxHQUFFLEdBQUUsVUFBUSxJQUFHLEtBQUssZ0JBQWMsR0FBRSxpQkFBZSxPQUFHLEtBQUssY0FBWSxHQUFFLGVBQWEsT0FBRyxLQUFLLFlBQVUsRUFBRSxVQUFVLEdBQUUsYUFBVyxLQUFHLEdBQUUsV0FBVSxLQUFLLFdBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBSSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFFLGdCQUFHLEFBQU8sT0FBUDtBQUFTLHFCQUFNO0FBQUcsaUJBQUksS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFHLE1BQUUsT0FBTyxLQUFLLEtBQUksUUFBTyxLQUFFLElBQUUsTUFBRztBQUFFLG1CQUFFLEdBQUUsS0FBRyxLQUFFLE9BQU8sR0FBRSxNQUFJLEFBQU8sR0FBRSxNQUFNLEdBQUUsT0FBakIsUUFBc0IsTUFBRSx1QkFBcUIsR0FBRSxNQUFNLEtBQUssTUFBRSxHQUFFLGdCQUFnQixTQUFTLFFBQUssRUFBRSxLQUFLLEdBQUUsY0FBYSxPQUFLLE1BQUUsR0FBRSxhQUFhLE1BQUksR0FBRSxNQUFHO0FBQUUsbUJBQU87QUFBQSxZQUFHLEtBQUssUUFBTyxHQUFFLFVBQVEsT0FBTSxLQUFLLFdBQVMsR0FBRSxZQUFVLE9BQUcsS0FBSyxZQUFVLEdBQUUsYUFBVyxJQUFHLEtBQUssU0FBTyxHQUFFLFVBQVEsT0FBRyxLQUFLLGVBQWEsR0FBRSxnQkFBYyxPQUFHLEtBQUssZUFBYSxHQUFFLGdCQUFjLE9BQUcsS0FBSyxnQkFBYyxLQUFLLE9BQU8sa0JBQWlCLEtBQUssZ0JBQWMsS0FBSyxPQUFPLGtCQUFpQixLQUFLLE1BQUksTUFBSyxLQUFLLFNBQU8sSUFBRyxLQUFLLGFBQVcsSUFBRyxLQUFLLGlCQUFlO0FBQUE7QUFBSyxtQkFBVyxJQUFFLElBQUU7QUFBQyxtQkFBUSxJQUFFLEtBQUUsRUFBRSxPQUFPLEtBQUksS0FBRyxLQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUUsSUFBRyxLQUFFLEdBQUUsUUFBTyxLQUFFO0FBQUcsWUFBTSxNQUFFLEdBQUUsUUFBUSxNQUFLLFNBQXZCLEtBQTRCLE1BQUUsR0FBRSxNQUFNLEtBQUcsS0FBRSxNQUFJLE1BQUUsR0FBRSxNQUFNLElBQUUsS0FBRSxJQUFHLEtBQUUsS0FBRSxJQUFHLEdBQUUsVUFBUSxBQUFPLE9BQVAsUUFBVyxPQUFHLEtBQUcsTUFBRztBQUFFLGlCQUFPO0FBQUE7QUFBRSxtQkFBVyxJQUFFLElBQUU7QUFBQyxpQkFBTSxPQUFLLEVBQUUsT0FBTyxLQUFJLEdBQUUsU0FBTztBQUFBO0FBQUcsbUJBQVcsSUFBRTtBQUFDLGlCQUFPLEFBQUssT0FBTCxNQUFRLEFBQUksT0FBSjtBQUFBO0FBQU0sbUJBQVcsSUFBRTtBQUFDLGlCQUFPLE1BQUksTUFBRyxNQUFHLE9BQUssT0FBSyxNQUFHLE1BQUcsU0FBTyxBQUFPLE9BQVAsUUFBVSxBQUFPLE9BQVAsUUFBVSxTQUFPLE1BQUcsTUFBRyxTQUFPLEFBQVEsT0FBUixTQUFXLFNBQU8sTUFBRyxNQUFHO0FBQUE7QUFBUSxtQkFBVyxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLE9BQUksQUFBUSxPQUFSLFNBQVcsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBTSxPQUFOLE9BQVMsQUFBTSxPQUFOLE9BQVMsQUFBSyxPQUFMLE1BQVMsQ0FBSyxPQUFMLE1BQVEsTUFBRyxTQUFTLElBQUU7QUFBQyxtQkFBTyxFQUFFLE9BQUksQ0FBQyxFQUFFLE9BQUksQUFBUSxPQUFSLFNBQVcsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMO0FBQUEsWUFBUTtBQUFBO0FBQUksbUJBQVcsSUFBRTtBQUFDLGlCQUFNLFFBQVEsS0FBSztBQUFBO0FBQUcsbUJBQVcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUUsSUFBRSxJQUFFLEtBQUUsT0FBRyxLQUFFLE9BQUcsS0FBRSxBQUFLLE9BQUwsSUFBTyxLQUFFLElBQUcsS0FBRSxFQUFFLEtBQUUsR0FBRSxXQUFXLE9BQUssQUFBUSxPQUFSLFNBQVcsQ0FBQyxFQUFFLE9BQUksQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBTSxPQUFOLE9BQVMsQUFBTSxPQUFOLE9BQVMsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBTSxPQUFOLE9BQVMsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQUFBSyxPQUFMLE1BQVEsQ0FBQyxFQUFFLEdBQUUsV0FBVyxHQUFFLFNBQU87QUFBSSxjQUFHO0FBQUUsaUJBQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLE1BQUk7QUFBQyxrQkFBRyxDQUFDLEVBQUUsS0FBRSxHQUFFLFdBQVc7QUFBSSx1QkFBTztBQUFFLG1CQUFFLEtBQUUsSUFBRSxHQUFFLFdBQVcsS0FBRSxLQUFHLE1BQUssS0FBRSxNQUFHLEVBQUUsSUFBRTtBQUFBO0FBQUEsZUFBTztBQUFDLGlCQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxNQUFJO0FBQUMsa0JBQUcsQUFBTSxNQUFFLEdBQUUsV0FBVyxTQUFyQjtBQUF5QixxQkFBRSxNQUFHLE1BQUksTUFBRSxNQUFHLEtBQUUsS0FBRSxJQUFFLE1BQUcsQUFBTSxHQUFFLEtBQUUsT0FBVixLQUFhLEtBQUU7QUFBQSx1QkFBVyxDQUFDLEVBQUU7QUFBRyx1QkFBTztBQUFFLG1CQUFFLEtBQUUsSUFBRSxHQUFFLFdBQVcsS0FBRSxLQUFHLE1BQUssS0FBRSxNQUFHLEVBQUUsSUFBRTtBQUFBO0FBQUcsaUJBQUUsTUFBRyxNQUFHLEtBQUUsS0FBRSxJQUFFLE1BQUcsQUFBTSxHQUFFLEtBQUUsT0FBVjtBQUFBO0FBQWEsaUJBQU8sTUFBRyxLQUFFLEtBQUUsS0FBRyxFQUFFLE1BQUcsSUFBRSxLQUFFLElBQUUsSUFBRSxNQUFHLENBQUMsR0FBRSxNQUFHLElBQUU7QUFBQTtBQUFFLG1CQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxhQUFFLE9BQUssV0FBVTtBQUFDLGdCQUFHLEFBQUksR0FBRSxXQUFOO0FBQWEscUJBQU07QUFBSyxnQkFBRyxDQUFDLEdBQUUsZ0JBQWMsQUFBSyxFQUFFLFFBQVEsUUFBZjtBQUFrQixxQkFBTSxNQUFJLEtBQUU7QUFBSSxnQkFBSSxLQUFFLEdBQUUsU0FBTyxLQUFLLElBQUksR0FBRSxLQUFHLEtBQUUsQUFBSyxHQUFFLGNBQVAsS0FBaUIsS0FBRyxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUUsV0FBVSxLQUFJLEdBQUUsWUFBVSxLQUFHLEtBQUUsTUFBRyxHQUFFLFlBQVUsTUFBSSxNQUFHLEdBQUU7QUFBVSxvQkFBTyxFQUFFLElBQUUsSUFBRSxHQUFFLFFBQU8sSUFBRyxTQUFTLElBQUU7QUFBQyxxQkFBTyxTQUFTLElBQUUsSUFBRTtBQUFDLG9CQUFJLElBQUU7QUFBRSxxQkFBSSxLQUFFLEdBQUUsS0FBRSxHQUFFLGNBQWMsUUFBTyxLQUFFLElBQUUsTUFBRztBQUFFLHNCQUFHLEdBQUUsY0FBYyxJQUFHLFFBQVE7QUFBRywyQkFBTTtBQUFHLHVCQUFNO0FBQUEsZ0JBQUksSUFBRTtBQUFBO0FBQUEsbUJBQVk7QUFBRSx1QkFBTztBQUFBLG1CQUFPO0FBQUUsdUJBQU0sTUFBSSxHQUFFLFFBQVEsTUFBSyxRQUFNO0FBQUEsbUJBQVM7QUFBRSx1QkFBTSxNQUFJLEVBQUUsSUFBRSxHQUFFLFVBQVEsRUFBRSxFQUFFLElBQUU7QUFBQSxtQkFBUztBQUFFLHVCQUFNLE1BQUksRUFBRSxJQUFFLEdBQUUsVUFBUSxFQUFFLEVBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxzQkFBSSxJQUFFLElBQUUsS0FBRSxrQkFBaUIsS0FBRyxNQUFFLEdBQUUsUUFBUSxPQUFNLEtBQUUsQUFBSyxPQUFMLEtBQU8sS0FBRSxHQUFFLFFBQU8sR0FBRSxZQUFVLElBQUUsRUFBRSxHQUFFLE1BQU0sR0FBRSxLQUFHLE1BQUksS0FBRSxBQUFPLEdBQUUsT0FBVCxRQUFhLEFBQU0sR0FBRSxPQUFSO0FBQVcsc0JBQUk7QUFBRSx5QkFBSyxLQUFFLEdBQUUsS0FBSyxPQUFJO0FBQUMsd0JBQUksS0FBRSxHQUFFLElBQUcsS0FBRSxHQUFFO0FBQUcseUJBQUUsQUFBTSxHQUFFLE9BQVIsS0FBVyxNQUFHLEtBQUcsT0FBRyxNQUFHLEFBQUssT0FBTCxLQUFPLEtBQUcsUUFBTSxFQUFFLElBQUUsS0FBRyxLQUFFO0FBQUE7QUFBRSx5QkFBTztBQUFBLGtCQUFHLElBQUUsS0FBRztBQUFBLG1CQUFTO0FBQUUsdUJBQU0sTUFBSSxTQUFTLElBQUU7QUFBQywyQkFBUSxJQUFFLElBQUUsSUFBRSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPO0FBQUksb0JBQUMsTUFBRSxHQUFFLFdBQVcsUUFBSyxTQUFPLE1BQUcsU0FBUSxNQUFFLEdBQUUsV0FBVyxLQUFFLE9BQUssU0FBTyxNQUFHLFFBQU8sT0FBRyxFQUFFLE9BQU0sTUFBRSxTQUFPLEtBQUUsUUFBTSxRQUFPLFFBQU0sTUFBRSxFQUFFLEtBQUcsTUFBRyxDQUFDLE1BQUcsRUFBRSxNQUFHLEdBQUUsTUFBRyxNQUFHLEVBQUU7QUFBSSx5QkFBTztBQUFBLGtCQUFHLE1BQUc7QUFBQTtBQUFZLHNCQUFNLElBQUksRUFBRTtBQUFBO0FBQUE7QUFBQTtBQUE4QyxtQkFBVyxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsRUFBRSxNQUFHLE9BQU8sTUFBRyxJQUFHLEtBQUUsQUFBTyxHQUFFLEdBQUUsU0FBTyxPQUFsQjtBQUFxQixpQkFBTyxLQUFHLE9BQUksQ0FBTyxHQUFFLEdBQUUsU0FBTyxPQUFsQixRQUFzQixBQUFPLE9BQVAsUUFBVSxNQUFJLEtBQUUsS0FBRyxPQUFLO0FBQUE7QUFBSyxtQkFBVyxJQUFFO0FBQUMsaUJBQU0sQUFBTyxHQUFFLEdBQUUsU0FBTyxPQUFsQixPQUFxQixHQUFFLE1BQU0sR0FBRSxNQUFJO0FBQUE7QUFBRSxtQkFBVyxJQUFFLElBQUU7QUFBQyxjQUFHLEFBQUssT0FBTCxNQUFRLEFBQU0sR0FBRSxPQUFSO0FBQVcsbUJBQU87QUFBRSxtQkFBUSxJQUFFLElBQUUsS0FBRSxVQUFTLEtBQUUsR0FBRSxLQUFFLEdBQUUsS0FBRSxHQUFFLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBSztBQUFJLFlBQUMsTUFBRSxHQUFFLFNBQU8sS0FBRSxNQUFJLE1BQUUsS0FBRSxLQUFFLEtBQUUsSUFBRSxNQUFHLE9BQUssR0FBRSxNQUFNLElBQUUsS0FBRyxLQUFFLEtBQUUsSUFBRyxLQUFFO0FBQUUsaUJBQU8sTUFBRyxNQUFLLEdBQUUsU0FBTyxLQUFFLE1BQUcsS0FBRSxLQUFFLE1BQUcsR0FBRSxNQUFNLElBQUUsTUFBRyxPQUFLLEdBQUUsTUFBTSxLQUFFLEtBQUcsTUFBRyxHQUFFLE1BQU0sS0FBRyxHQUFFLE1BQU07QUFBQTtBQUFHLG1CQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBRSxlQUFJLEtBQUUsR0FBRSxLQUFHLE1BQUUsS0FBRSxHQUFFLGdCQUFjLEdBQUUsZUFBZSxRQUFPLEtBQUUsSUFBRSxNQUFHO0FBQUUsZ0JBQUssT0FBRSxHQUFFLEtBQUksY0FBWSxHQUFFLGNBQWEsRUFBQyxHQUFFLGNBQVksQUFBVSxPQUFPLE1BQWpCLFlBQW9CLGNBQWEsR0FBRSxlQUFjLEVBQUMsR0FBRSxhQUFXLEdBQUUsVUFBVSxNQUFJO0FBQUMsa0JBQUcsR0FBRSxNQUFJLEtBQUUsR0FBRSxNQUFJLEtBQUksR0FBRSxXQUFVO0FBQUMsb0JBQUcsS0FBRSxHQUFFLFNBQVMsR0FBRSxRQUFNLEdBQUUsY0FBYSxBQUFzQixFQUFFLEtBQUssR0FBRSxlQUEvQjtBQUEwQyx1QkFBRSxHQUFFLFVBQVUsSUFBRTtBQUFBLHFCQUFPO0FBQUMsc0JBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRSxXQUFVO0FBQUcsMEJBQU0sSUFBSSxFQUFFLE9BQUssR0FBRSxNQUFJLGlDQUErQixLQUFFO0FBQVcsdUJBQUUsR0FBRSxVQUFVLElBQUcsSUFBRTtBQUFBO0FBQUcsbUJBQUUsT0FBSztBQUFBO0FBQUUscUJBQU07QUFBQTtBQUFHLGlCQUFNO0FBQUE7QUFBRyxtQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGFBQUUsTUFBSSxNQUFLLEdBQUUsT0FBSyxJQUFFLEVBQUUsSUFBRSxJQUFFLFVBQUssRUFBRSxJQUFFLElBQUU7QUFBSSxjQUFJLEtBQUUsRUFBRSxLQUFLLEdBQUU7QUFBTSxnQkFBSSxNQUFFLEdBQUUsWUFBVSxLQUFHLEdBQUUsWUFBVTtBQUFHLGNBQUksSUFBRSxJQUFFLEtBQUUsQUFBb0IsT0FBcEIscUJBQXVCLEFBQW1CLE9BQW5CO0FBQXFCLGNBQUcsTUFBSSxNQUFFLEFBQU0sTUFBRSxHQUFFLFdBQVcsUUFBUSxTQUE3QixLQUFtQyxDQUFPLEdBQUUsUUFBVCxRQUFjLEFBQU0sR0FBRSxRQUFSLE9BQWEsTUFBRyxBQUFJLEdBQUUsV0FBTixLQUFjLEtBQUUsTUFBSyxNQUFFLFFBQUksTUFBRyxHQUFFLGVBQWU7QUFBRyxlQUFFLE9BQUssVUFBUTtBQUFBLGVBQU07QUFBQyxnQkFBRyxNQUFHLE1BQUcsQ0FBQyxHQUFFLGVBQWUsT0FBSyxJQUFFLGVBQWUsTUFBRyxPQUFJLEFBQW9CLE9BQXBCO0FBQXNCLG9CQUFHLEFBQUksT0FBTyxLQUFLLEdBQUUsTUFBTSxXQUF4QixJQUFnQyxFQUFDLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG9CQUFJLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEtBQUUsSUFBRyxLQUFFLEdBQUUsS0FBSSxLQUFFLE9BQU8sS0FBSztBQUFHLG9CQUFHLEFBQUssR0FBRSxhQUFQO0FBQWdCLHFCQUFFO0FBQUEseUJBQWUsQUFBWSxPQUFPLEdBQUUsWUFBckI7QUFBOEIscUJBQUUsS0FBSyxHQUFFO0FBQUEseUJBQWtCLEdBQUU7QUFBUyx3QkFBTSxJQUFJLEVBQUU7QUFBNEMscUJBQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEtBQUUsSUFBRSxNQUFHO0FBQUUsdUJBQUUsSUFBRyxNQUFHLEFBQUksT0FBSixLQUFRLE9BQUcsRUFBRSxJQUFFLE1BQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxNQUFJLEVBQUUsSUFBRSxLQUFFLEdBQUUsSUFBRSxNQUFHLE1BQUcsU0FBTyxPQUFFLEFBQU8sR0FBRSxRQUFULFFBQWMsQUFBTSxHQUFFLFFBQVIsT0FBYSxHQUFFLFFBQU0sR0FBRSxLQUFLLFNBQU8sU0FBUSxJQUFFLFFBQU0sQUFBSyxHQUFFLEtBQUssV0FBVyxPQUF2QixLQUEwQixNQUFHLE1BQUksTUFBRyxPQUFNLE1BQUcsR0FBRSxNQUFLLE1BQUksT0FBRyxFQUFFLElBQUUsTUFBSSxFQUFFLElBQUUsS0FBRSxHQUFFLElBQUUsTUFBRyxPQUFLLElBQUUsUUFBTSxBQUFLLEdBQUUsS0FBSyxXQUFXLE9BQXZCLEtBQTBCLE1BQUcsTUFBSSxNQUFHLE1BQUssTUFBRyxNQUFHLEdBQUU7QUFBTyxtQkFBRSxNQUFJLElBQUUsR0FBRSxPQUFLLE1BQUc7QUFBQSxnQkFBTSxJQUFFLElBQUUsR0FBRSxNQUFLLEtBQUcsTUFBSSxJQUFFLE9BQUssVUFBUSxLQUFFLEdBQUUsU0FBUSxFQUFDLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxvQkFBSSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFJLEtBQUUsT0FBTyxLQUFLO0FBQUcscUJBQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEtBQUUsSUFBRSxNQUFHO0FBQUUsdUJBQUUsSUFBRyxBQUFJLE9BQUosS0FBUSxPQUFHLE9BQU0sR0FBRSxnQkFBZSxPQUFHLE1BQUssS0FBRSxHQUFFLEtBQUUsR0FBRSxNQUFJLEVBQUUsSUFBRSxJQUFFLElBQUUsT0FBRyxVQUFNLElBQUUsS0FBSyxTQUFPLFFBQU8sT0FBRyxPQUFNLE1BQUcsR0FBRSxPQUFNLElBQUUsZUFBYSxNQUFJLE1BQUksTUFBSyxJQUFFLGVBQWEsS0FBRyxNQUFLLEVBQUUsSUFBRSxJQUFFLElBQUUsT0FBRyxVQUFNLE9BQUcsTUFBRyxHQUFFO0FBQU8sbUJBQUUsTUFBSSxJQUFFLEdBQUUsT0FBSyxNQUFJLEtBQUU7QUFBQSxnQkFBSyxJQUFFLElBQUUsR0FBRSxPQUFNLE1BQUksSUFBRSxPQUFLLFVBQVEsS0FBRSxNQUFJLEdBQUU7QUFBQSxxQkFBZSxBQUFtQixPQUFuQixrQkFBcUI7QUFBQyxrQkFBSSxLQUFFLEdBQUUsaUJBQWUsS0FBRSxJQUFFLEtBQUUsSUFBRTtBQUFFLG9CQUFHLEFBQUksR0FBRSxLQUFLLFdBQVgsSUFBbUIsRUFBQyxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxvQkFBSSxJQUFFLElBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRTtBQUFJLHFCQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxLQUFFLElBQUUsTUFBRztBQUFFLG9CQUFFLElBQUUsS0FBRSxHQUFFLEdBQUUsS0FBRyxNQUFHLFNBQU0sT0FBRyxBQUFJLE9BQUosS0FBUSxPQUFHLEVBQUUsSUFBRSxNQUFJLEdBQUUsUUFBTSxBQUFLLEdBQUUsS0FBSyxXQUFXLE9BQXZCLEtBQTBCLE1BQUcsTUFBSSxNQUFHLE1BQUssTUFBRyxHQUFFO0FBQU0sbUJBQUUsTUFBSSxJQUFFLEdBQUUsT0FBSyxNQUFHO0FBQUEsZ0JBQU0sSUFBRSxJQUFFLEdBQUUsTUFBSyxLQUFHLE1BQUksSUFBRSxPQUFLLFVBQVEsS0FBRSxHQUFFLFNBQVEsRUFBQyxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsb0JBQUksSUFBRSxJQUFFLEtBQUUsSUFBRyxLQUFFLEdBQUU7QUFBSSxxQkFBSSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sS0FBRSxJQUFFLE1BQUc7QUFBRSxvQkFBRSxJQUFFLElBQUUsR0FBRSxLQUFHLE9BQUcsVUFBTSxDQUFJLE9BQUosS0FBUSxPQUFHLE1BQUssSUFBRSxlQUFhLEtBQUcsT0FBTSxNQUFHLEdBQUU7QUFBTSxtQkFBRSxNQUFJLElBQUUsR0FBRSxPQUFLLE1BQUksS0FBRTtBQUFBLGdCQUFLLElBQUUsSUFBRSxHQUFFLE9BQU0sTUFBSSxJQUFFLE9BQUssVUFBUSxLQUFFLE1BQUksR0FBRTtBQUFBLG1CQUFXO0FBQUMsa0JBQUcsQUFBb0IsT0FBcEIsbUJBQXNCO0FBQUMsb0JBQUcsR0FBRTtBQUFZLHlCQUFNO0FBQUcsc0JBQU0sSUFBSSxFQUFFLDRDQUEwQztBQUFBO0FBQUcsY0FBTSxHQUFFLFFBQVIsT0FBYSxFQUFFLElBQUUsR0FBRSxNQUFLLElBQUU7QUFBQTtBQUFHLFlBQU8sR0FBRSxRQUFULFFBQWMsQUFBTSxHQUFFLFFBQVIsT0FBYyxJQUFFLE9BQUssT0FBSyxHQUFFLE1BQUksT0FBSyxHQUFFO0FBQUE7QUFBTSxpQkFBTTtBQUFBO0FBQUcsbUJBQVcsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUUsS0FBRSxJQUFHLEtBQUU7QUFBRyxlQUFJLFlBQVcsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBSSxJQUFFLElBQUU7QUFBRSxnQkFBRyxBQUFPLE9BQVAsUUFBVSxBQUFVLE9BQU8sTUFBakI7QUFBbUIsa0JBQUcsQUFBTSxNQUFFLEdBQUUsUUFBUSxTQUFsQjtBQUFzQixnQkFBSyxHQUFFLFFBQVEsUUFBZixNQUFtQixHQUFFLEtBQUs7QUFBQSx1QkFBVyxHQUFFLEtBQUssS0FBRyxNQUFNLFFBQVE7QUFBRyxxQkFBSSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sS0FBRSxJQUFFLE1BQUc7QUFBRSxxQkFBRSxHQUFFLEtBQUcsSUFBRTtBQUFBO0FBQVEscUJBQUksS0FBRSxPQUFPLEtBQUssS0FBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sS0FBRSxJQUFFLE1BQUc7QUFBRSxxQkFBRSxHQUFFLEdBQUUsTUFBSSxJQUFFO0FBQUEsWUFBSSxJQUFFLElBQUUsS0FBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sS0FBRSxJQUFFLE1BQUc7QUFBRSxlQUFFLFdBQVcsS0FBSyxHQUFFLEdBQUU7QUFBSyxhQUFFLGlCQUFlLElBQUksTUFBTTtBQUFBO0FBQUcsbUJBQVcsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFLElBQUksRUFBRSxLQUFFLE1BQUc7QUFBSSxpQkFBTyxHQUFFLFVBQVEsRUFBRSxJQUFFLEtBQUcsRUFBRSxJQUFFLEdBQUUsSUFBRSxNQUFHLFFBQUksR0FBRSxPQUFLLE9BQUs7QUFBQTtBQUFHLFVBQUUsUUFBUSxPQUFLLEdBQUUsRUFBRSxRQUFRLFdBQVMsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLElBQUUsRUFBRSxPQUFPLEVBQUMsUUFBTyxLQUFHO0FBQUE7QUFBQSxTQUFNLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLFVBQUUsS0FBSSxFQUFFLEtBQUksRUFBRSxLQUFJLEVBQUUsS0FBSSxFQUFFLEtBQUksRUFBRSxLQUFJLEVBQUUsS0FBSSxFQUFFLEtBQUksRUFBRSxLQUFJLEVBQUUsTUFBSyxFQUFFLEtBQUksRUFBRSxLQUFJLEVBQUU7QUFBSSxZQUFJLEdBQUUsSUFBRSxRQUFNLEtBQUssYUFBWSxLQUFFLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sS0FBRSxPQUFPLGtCQUFnQixFQUFDLFdBQVUsZ0JBQWMsU0FBTyxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQUUsWUFBVTtBQUFBLGVBQUksU0FBUyxJQUFFLElBQUU7QUFBQyxxQkFBUSxNQUFLO0FBQUUsaUJBQUUsZUFBZSxPQUFLLElBQUUsTUFBRyxHQUFFO0FBQUEsYUFBTSxJQUFFO0FBQUEsV0FBSSxTQUFTLElBQUUsSUFBRTtBQUFDLHdCQUFZO0FBQUMsaUJBQUssY0FBWTtBQUFBO0FBQUUsWUFBRSxJQUFFLEtBQUcsR0FBRSxZQUFVLEFBQU8sT0FBUCxPQUFTLE9BQU8sT0FBTyxNQUFJLElBQUUsWUFBVSxHQUFFLFdBQVUsSUFBSTtBQUFBLFlBQUssSUFBRSxRQUFNLEtBQUssWUFBVSxTQUFTLElBQUU7QUFBQyxjQUFJLEtBQUUsQUFBWSxPQUFPLFVBQW5CLGNBQTJCLE9BQU8sVUFBUyxLQUFFLE1BQUcsR0FBRSxLQUFHLEtBQUU7QUFBRSxjQUFHO0FBQUUsbUJBQU8sR0FBRSxLQUFLO0FBQUcsY0FBRyxNQUFHLEFBQVUsT0FBTyxHQUFFLFVBQW5CO0FBQTBCLG1CQUFNLEVBQUMsTUFBSyxXQUFVO0FBQUMscUJBQU8sTUFBRyxNQUFHLEdBQUUsVUFBUyxNQUFFLFNBQVEsRUFBQyxPQUFNLE1BQUcsR0FBRSxPQUFLLE1BQUssQ0FBQztBQUFBO0FBQUssZ0JBQU0sSUFBSSxVQUFVLEtBQUUsNEJBQTBCO0FBQUEsV0FBb0MsSUFBRSxRQUFNLEtBQUssVUFBUSxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxBQUFZLE9BQU8sVUFBbkIsY0FBMkIsR0FBRSxPQUFPO0FBQVUsY0FBRyxDQUFDO0FBQUUsbUJBQU87QUFBRSxjQUFJLElBQUUsSUFBRSxLQUFFLEdBQUUsS0FBSyxLQUFHLEtBQUU7QUFBRyxjQUFHO0FBQUMsbUJBQU0sQ0FBUyxPQUFULFVBQVksT0FBSyxNQUFJLENBQUUsTUFBRSxHQUFFLFFBQVE7QUFBTSxpQkFBRSxLQUFLLEdBQUU7QUFBQSxtQkFBYSxJQUFOO0FBQVMsaUJBQUUsRUFBQyxPQUFNO0FBQUEsb0JBQUc7QUFBUSxnQkFBRztBQUFDLG9CQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSztBQUFBLHNCQUFHO0FBQVEsa0JBQUc7QUFBRSxzQkFBTSxHQUFFO0FBQUE7QUFBQTtBQUFPLGlCQUFPO0FBQUE7QUFBRyxlQUFPLGVBQWUsR0FBRSxjQUFhLEVBQUMsT0FBTTtBQUFLLFlBQUksSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLE1BQUssSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFLElBQUU7QUFBQyxZQUFTLE9BQVQsVUFBYSxNQUFFO0FBQUksZ0JBQUksS0FBRSxHQUFFLEtBQUssU0FBTztBQUFLLG1CQUFPLEdBQUUsa0JBQWdCLE9BQUcsR0FBRSxlQUFhLElBQUcsR0FBRSxzQkFBb0IsT0FBRyxHQUFFLDRCQUEwQixPQUFHLEdBQUUsWUFBVSxJQUFHLEdBQUUsU0FBTyxPQUFHLEdBQUUsWUFBVSxJQUFFLEdBQUUsV0FBUyxFQUFFLGNBQWMsTUFBRyxJQUFHLEVBQUUsNkJBQTRCLEdBQUUsa0JBQWdCLEVBQUMsa0JBQWlCLEdBQUUsU0FBUyxrQkFBaUIsZ0JBQWUsR0FBRSxTQUFTLGtCQUFnQixBQUFTLEdBQUUsU0FBUyxXQUFwQixTQUEyQixHQUFFLFVBQVEsSUFBSSxFQUFFLGFBQWEsR0FBRSxZQUFVLEFBQVMsR0FBRSxTQUFTLFdBQXBCLFNBQTJCLEdBQUUsVUFBUSxJQUFJLEVBQUUsYUFBYSxHQUFFLFlBQVUsR0FBRSxVQUFRLElBQUksRUFBRSxZQUFZLEdBQUUsV0FBVSxBQUFTLEdBQUUsU0FBUyxTQUFwQixVQUEwQixHQUFFLEdBQUcsUUFBTyxHQUFFLFNBQVMsT0FBTSxBQUFTLEdBQUUsU0FBUyxRQUFwQixVQUF5QixHQUFFLEdBQUcsT0FBTSxHQUFFLFNBQVMsTUFBSyxBQUFTLEdBQUUsU0FBUyxVQUFwQixVQUEyQixHQUFFLEdBQUcsU0FBUSxHQUFFLFNBQVMsUUFBTyxHQUFFLGFBQVcsSUFBSSxFQUFFLHNCQUFtQixHQUFFLFdBQVcsSUFBSSxPQUFNLEVBQUUsVUFBVSxNQUFLLEdBQUUsZUFBYSxFQUFDLE9BQU0sS0FBRyxHQUFFLE1BQU0sR0FBRSxRQUFRLGdCQUFlO0FBQUE7QUFBRSxpQkFBTyxFQUFFLElBQUUsS0FBRyxHQUFFLFVBQVUsTUFBSSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUksSUFBRTtBQUFFLGdCQUFHLEVBQUUsU0FBUyxPQUFJLEVBQUUsU0FBUyxPQUFLLFNBQVEsS0FBSyxPQUFJLGFBQWEsS0FBSyxPQUFJLHlCQUF5QixLQUFLLE1BQUk7QUFBQyxrQkFBSSxLQUFFLEVBQUUsV0FBVyxJQUFJLEtBQUs7QUFBVSxrQkFBRztBQUFDLG1CQUFFLElBQUk7QUFBQSx1QkFBUyxJQUFOO0FBQVMsdUJBQU8sS0FBSyxLQUFLLFNBQVEsS0FBRztBQUFBO0FBQUssa0JBQUc7QUFBQyx5QkFBUSxLQUFFLEVBQUUsR0FBRSxLQUFLLGFBQVksS0FBRSxHQUFFLFFBQU8sQ0FBQyxHQUFFLE1BQUssS0FBRSxHQUFFLFFBQU87QUFBQyxzQkFBSSxLQUFFLEdBQUU7QUFBTSx1QkFBSyxVQUFVO0FBQUE7QUFBQSx1QkFBVSxJQUFOO0FBQVMscUJBQUUsRUFBQyxPQUFNO0FBQUEsd0JBQUc7QUFBUSxvQkFBRztBQUFDLHdCQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSztBQUFBLDBCQUFHO0FBQVEsc0JBQUc7QUFBRSwwQkFBTSxHQUFFO0FBQUE7QUFBQTtBQUFPLHFCQUFPO0FBQUE7QUFBSyxnQkFBRyxLQUFLLGtCQUFrQixPQUFJLENBQUMsS0FBSyxhQUFXLEtBQUssdUJBQXFCLEFBQUksS0FBSyxRQUFRLFVBQWpCO0FBQXVCLHFCQUFPLEtBQUssS0FBSyxTQUFRLElBQUksTUFBTSwyREFBMEQ7QUFBSyxnQkFBRztBQUFDLG1CQUFLLGtCQUFnQixFQUFFLFNBQVMsS0FBSyxpQkFBaUIsSUFBSSxJQUFFLElBQUU7QUFBQSxxQkFBUyxJQUFOO0FBQVMscUJBQU8sS0FBSyxLQUFLLFNBQVEsS0FBRztBQUFBO0FBQUssbUJBQU8sS0FBSyxhQUFXLEtBQUssdUJBQXFCLEFBQUssS0FBSyxpQkFBVixNQUF3QixLQUFLLGdCQUFnQixLQUFLLG1CQUFpQixLQUFLLGVBQWMsTUFBSyw0QkFBMEIsT0FBRyxLQUFLLGFBQVksTUFBSyxzQkFBb0IsT0FBSSxRQUFPLE1BQUssS0FBSyxTQUFRLElBQUksTUFBTSxvRUFBbUU7QUFBQSxhQUFPLEdBQUUsVUFBVSxNQUFJLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBRyxBQUFTLEtBQUssb0JBQWQ7QUFBOEIscUJBQU8sS0FBSyxLQUFLLFNBQVEsSUFBSSxNQUFNLGtFQUFpRTtBQUFLLGdCQUFHO0FBQUMsbUJBQUssZ0JBQWdCLElBQUksSUFBRSxJQUFFO0FBQUEscUJBQVMsSUFBTjtBQUFTLHFCQUFPLEtBQUssS0FBSyxTQUFRLEtBQUc7QUFBQTtBQUFLLG1CQUFPO0FBQUEsYUFBTSxHQUFFLFVBQVUsTUFBSSxTQUFTLElBQUU7QUFBQyxnQkFBSTtBQUFFLGlCQUFLLGtCQUFrQjtBQUFJLGdCQUFHO0FBQUMsbUJBQUUsRUFBRSxTQUFTLEtBQUssaUJBQWlCLElBQUksSUFBRyxRQUFRO0FBQUEscUJBQVcsSUFBTjtBQUFTLHFCQUFPLEtBQUssS0FBSyxTQUFRLEtBQUc7QUFBQTtBQUFLLG1CQUFNLENBQUMsS0FBSyxTQUFTLGNBQVksRUFBRSxnQkFBZ0IsR0FBRSxTQUFPLEFBQUssR0FBRSxLQUFLLFFBQVEsVUFBcEIsTUFBMkIsQ0FBQyxHQUFFLEtBQUssU0FBUyxPQUFNLE1BQUssTUFBTSxLQUFLLFFBQVEsUUFBUSxHQUFFLFFBQU8sUUFBTyxNQUFLLEtBQUssU0FBUSxJQUFJLE1BQU0sc0VBQXFFO0FBQUEsYUFBTyxHQUFFLFVBQVUsTUFBSSxTQUFTLElBQUU7QUFBQyxnQkFBRyxDQUFDLEtBQUssYUFBVyxBQUFTLEtBQUssb0JBQWQ7QUFBOEIscUJBQU8sS0FBSyxLQUFLLFNBQVEsSUFBSSxNQUFNLDREQUEyRDtBQUFLLGdCQUFJO0FBQUUsaUJBQUssa0JBQWtCO0FBQUksZ0JBQUc7QUFBQyxtQkFBRSxFQUFFLFNBQVMsS0FBSyxpQkFBaUIsSUFBSSxJQUFHLFFBQVE7QUFBQSxxQkFBVyxJQUFOO0FBQVMscUJBQU8sS0FBSyxLQUFLLFNBQVEsS0FBRztBQUFBO0FBQUssZ0JBQUcsS0FBSyxTQUFTLGNBQVksQ0FBQyxFQUFFLGdCQUFnQixHQUFFO0FBQU0scUJBQU8sS0FBSyxLQUFLLFNBQVEsSUFBSSxNQUFNLG1FQUFrRTtBQUFLLGdCQUFJLEtBQUUsR0FBRSxLQUFLLFFBQVEsaUNBQWdDLFNBQVMsUUFBUSxNQUFLLFFBQVEsUUFBUSxNQUFLO0FBQVEsbUJBQU8sS0FBSyxNQUFNLEtBQUssUUFBUSxLQUFLLE1BQUk7QUFBQSxhQUFNLEdBQUUsVUFBVSxNQUFJLFNBQVMsSUFBRSxJQUFFO0FBQUMsZ0JBQUk7QUFBRSxZQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUksS0FBSyxrQkFBa0I7QUFBSSxnQkFBRztBQUFDLG1CQUFFLEVBQUUsU0FBUyxLQUFLLGlCQUFpQixJQUFJLElBQUUsSUFBRyxRQUFRO0FBQUEscUJBQVcsSUFBTjtBQUFTLHFCQUFPLEtBQUssS0FBSyxTQUFRLEtBQUc7QUFBQTtBQUFLLG1CQUFPLEtBQUssU0FBUyxjQUFhLENBQUssR0FBRSxPQUFPLFFBQVEsU0FBdEIsTUFBNEIsU0FBUyxLQUFLLEdBQUUsV0FBVSxNQUFLLEtBQUssU0FBUSxJQUFJLE1BQU0sdUZBQXNGLFFBQU0sS0FBSyxTQUFTLGNBQVksQ0FBQyxFQUFFLGdCQUFnQixHQUFFLFFBQU8sTUFBSyxLQUFLLFNBQVEsTUFBTSxxRkFBb0YsUUFBTyxNQUFLLE1BQU0sS0FBSyxRQUFRLFlBQVksR0FBRSxRQUFPLEdBQUUsUUFBTztBQUFBLGFBQU8sR0FBRSxVQUFVLE1BQUksU0FBUyxJQUFFO0FBQUMsZ0JBQUk7QUFBRSxpQkFBSyxrQkFBa0I7QUFBSSxnQkFBRztBQUFDLG1CQUFFLEVBQUUsU0FBUyxLQUFLLGlCQUFpQixJQUFJLElBQUcsUUFBUTtBQUFBLHFCQUFXLElBQU47QUFBUyxxQkFBTyxLQUFLLEtBQUssU0FBUSxLQUFHO0FBQUE7QUFBSyxtQkFBTyxLQUFLLE1BQU0sS0FBSyxRQUFRLE1BQU0sR0FBRSxRQUFPO0FBQUEsYUFBTSxHQUFFLFVBQVUsTUFBSSxTQUFTLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLEVBQUMsU0FBUSxVQUFRLEtBQUssWUFBVyxNQUFLLEtBQUssU0FBUSxNQUFNLGdFQUErRCxRQUFNLEtBQUssa0JBQWlCLE1BQUssS0FBSyxTQUFRLE1BQU0sMENBQXlDLFFBQU8sTUFBSyxNQUFNLEtBQUssUUFBUSxZQUFZLEdBQUUsV0FBUyxPQUFNLEdBQUUsVUFBUyxHQUFFLGNBQWEsS0FBSyxrQkFBZ0IsTUFBRztBQUFBLGFBQU8sR0FBRSxVQUFVLE1BQUksU0FBUyxJQUFFO0FBQUMsZ0JBQUcsS0FBSztBQUFVLHFCQUFPLEtBQUssS0FBSyxTQUFRLE1BQU0sbUVBQWtFO0FBQUssZ0JBQUcsQUFBSyxLQUFLLGlCQUFWO0FBQXVCLHFCQUFPLEtBQUssS0FBSyxTQUFRLElBQUksTUFBTSw4Q0FBNkM7QUFBSyxnQkFBRyxLQUFLO0FBQW9CLHFCQUFPLEtBQUssS0FBSyxTQUFRLElBQUksTUFBTSwrREFBOEQ7QUFBSyxnQkFBSTtBQUFFLGdCQUFHO0FBQUMsbUJBQUUsRUFBRSxTQUFTLElBQUksSUFBRyxRQUFRO0FBQUEscUJBQVcsSUFBTjtBQUFTLHFCQUFPLEtBQUssS0FBSyxTQUFRLEtBQUc7QUFBQTtBQUFLLG1CQUFPLEtBQUssU0FBUyxjQUFZLENBQUMsRUFBRSxnQkFBZ0IsR0FBRSxZQUFXLE1BQUssS0FBSyxTQUFRLElBQUksTUFBTSwwRkFBeUYsUUFBTSxLQUFLLFNBQVMsY0FBYSxFQUFDLEVBQUUsZ0JBQWdCLEdBQUUsYUFBVyxBQUFLLEdBQUUsU0FBUyxRQUFRLFNBQXhCLE1BQThCLEFBQUssR0FBRSxTQUFTLFFBQVEsU0FBeEIsTUFBK0IsTUFBSyxLQUFLLFNBQVEsSUFBSSxNQUFNLG1GQUFrRixRQUFPLE1BQUssZUFBYSxHQUFFLE1BQUssS0FBSyxNQUFNLEtBQUssUUFBUSxRQUFRLEdBQUUsTUFBSyxHQUFFLFVBQVMsR0FBRSxZQUFXO0FBQUEsYUFBTyxHQUFFLFVBQVUsU0FBTyxTQUFTLElBQUU7QUFBQyxnQkFBSSxJQUFFLElBQUUsS0FBRSxFQUFFLFdBQVcsSUFBSSxLQUFLO0FBQVUsZ0JBQUc7QUFBQyxpQkFBRSxPQUFPO0FBQUEscUJBQVMsSUFBTjtBQUFTLHFCQUFPLEtBQUssS0FBSyxTQUFRLEtBQUc7QUFBQTtBQUFLLGdCQUFHO0FBQUMsdUJBQVEsS0FBRSxFQUFFLEdBQUUsS0FBSyxhQUFZLEtBQUUsR0FBRSxRQUFPLENBQUMsR0FBRSxNQUFLLEtBQUUsR0FBRSxRQUFPO0FBQUMsb0JBQUksS0FBRSxHQUFFO0FBQU0scUJBQUssVUFBVTtBQUFBO0FBQUEscUJBQVUsSUFBTjtBQUFTLG1CQUFFLEVBQUMsT0FBTTtBQUFBLHNCQUFHO0FBQVEsa0JBQUc7QUFBQyxzQkFBRyxDQUFDLEdBQUUsUUFBTyxNQUFFLEdBQUUsV0FBUyxHQUFFLEtBQUs7QUFBQSx3QkFBRztBQUFRLG9CQUFHO0FBQUUsd0JBQU0sR0FBRTtBQUFBO0FBQUE7QUFBTyxtQkFBTztBQUFBLGFBQU0sR0FBRSxVQUFVLEtBQUcsV0FBVTtBQUFDLG1CQUFPLEtBQUssa0JBQWtCLFFBQUksS0FBSyxzQkFBcUI7QUFBQSxhQUFNLEdBQUUsVUFBVSxNQUFJLFdBQVU7QUFBQyxpQkFBSSxLQUFLLGtCQUFrQixRQUFJLEtBQUssVUFBVSxTQUFPO0FBQUcsbUJBQUs7QUFBcUIsbUJBQU8sS0FBSyxNQUFNLE9BQU07QUFBQSxhQUFNLEdBQUUsVUFBVSxvQkFBa0IsU0FBUyxJQUFFO0FBQUMsZ0JBQUcsQ0FBQyxLQUFLLDZCQUEyQixBQUFTLEtBQUssb0JBQWQsUUFBOEI7QUFBQyxrQkFBSSxLQUFFLEtBQUssZ0JBQWdCO0FBQUssa0JBQUcsQ0FBQyxLQUFLLFNBQVMsY0FBWSxBQUFLLEdBQUUsVUFBVSxRQUFRLFNBQXpCLE1BQStCLEVBQUUsV0FBVyxHQUFFLFlBQVc7QUFBQyxvQkFBSSxLQUFFLElBQUcsS0FBRSxPQUFHLEtBQUUsS0FBSyxXQUFXLFFBQU8sS0FBRSxJQUFHLEtBQUUsS0FBSyw0QkFBNEIsSUFBRSxJQUFFLEtBQUcsS0FBRSxBQUFJLEtBQUssVUFBVSxXQUFuQixJQUEwQixPQUFLLEtBQUssVUFBVSxLQUFLLFVBQVUsU0FBTyxHQUFHLElBQUcsS0FBRSxHQUFFO0FBQWEsb0JBQUcsQUFBTyxPQUFQLFFBQVcsTUFBRSxLQUFHLE9BQUk7QUFBRSxrQkFBTyxPQUFQLFFBQVcsTUFBRSxPQUFJLEtBQUUsT0FBSSxFQUFFLFVBQVUsTUFBSSxTQUFPLEdBQUUsWUFBVSxHQUFFLFdBQVUsS0FBSyxRQUFRLGFBQWEsS0FBRyxLQUFLLE1BQU0sS0FBSyxRQUFRLGFBQWE7QUFBQSxxQkFBUTtBQUFDLHNCQUFJLEtBQUUsR0FBRSxRQUFPLEtBQUU7QUFBSyxzQkFBRyxBQUFPLE9BQVAsUUFBVSxPQUFJLE1BQUksTUFBRSxHQUFFLElBQUksSUFBRSxNQUFJLEFBQVUsT0FBVixTQUFZO0FBQUMsd0JBQUcsS0FBSyxTQUFTO0FBQVcsNkJBQU8sS0FBSyxLQUFLLEtBQUssU0FBUSxJQUFJLE1BQU07QUFBc0UseUJBQUU7QUFBQTtBQUFFLGtCQUFPLE9BQVAsT0FBVSxNQUFFLEtBQUUsTUFBSSxHQUFFLFdBQVUsQUFBTyxPQUFQLFFBQVUsT0FBSSxFQUFFLFVBQVUsT0FBTSxNQUFFLE1BQUcsT0FBTSxLQUFLLFFBQVEsYUFBYSxLQUFHLEtBQUssTUFBTSxLQUFLLFFBQVEsYUFBYSxRQUFLLEFBQU8sT0FBUCxPQUFVLE9BQUssTUFBSSxNQUFFLEtBQUssZ0JBQWdCLElBQUUsSUFBRSxLQUFLLGdCQUFlLEdBQUUsSUFBSSxJQUFFLEtBQUcsTUFBRyxLQUFFLE1BQUksR0FBRSxXQUFVLEtBQUssUUFBUSxhQUFhLEtBQUcsS0FBSyxNQUFNLEtBQUssUUFBUSxhQUFhLE1BQUksS0FBSyxNQUFNLEtBQUssUUFBUSxVQUFVLFdBQVMsSUFBRSxLQUFLLHlCQUF5QixJQUFFLEtBQUssU0FBUyxlQUFjLEFBQU8sT0FBUCxRQUFXLE1BQUUsTUFBRyxTQUFPLEFBQU8sT0FBUCxRQUFVLEFBQU8sT0FBUCxRQUFVLE9BQUksS0FBRyxNQUFFLE1BQUcsTUFBRyxHQUFFLFdBQVUsS0FBRSxJQUFFLEtBQUssUUFBUSxhQUFhLEtBQUcsS0FBSyxNQUFNLEtBQUssUUFBUSxhQUFhLE1BQUksS0FBSyxNQUFNLEtBQUssUUFBUSxVQUFVLFNBQVEsS0FBSyx5QkFBeUIsSUFBRSxLQUFLLFNBQVMsaUJBQWdCLE9BQUcsR0FBRSxXQUFVLEtBQUUsSUFBRSxLQUFLLFFBQVEsYUFBYSxLQUFHLEtBQUssTUFBTSxLQUFLLFFBQVEsYUFBYTtBQUFBO0FBQUsscUJBQUsscUJBQXFCLElBQUUsSUFBRSxLQUFLLGNBQWEsSUFBRSxJQUFFLEtBQUssU0FBUztBQUFZLG9CQUFJLEtBQUUsT0FBSSxFQUFFLFVBQVU7QUFBSyxzQkFBRyxDQUFDLE1BQUcsR0FBRSxrQkFBa0IsSUFBSSxHQUFFLGFBQVksTUFBSyxNQUFNLEtBQUssUUFBUSxXQUFXLElBQUUsTUFBRyxRQUFLLEtBQUssUUFBUSxXQUFXLE9BQUksTUFBRyxLQUFFLEtBQUssTUFBTSxLQUFLLFFBQVEsV0FBVyxJQUFFLE9BQUcsVUFBTSxNQUFLLE1BQU0sS0FBSyxRQUFRLFdBQVcsSUFBRSxNQUFHLFNBQUssS0FBSyxRQUFRLFdBQVcsTUFBSSxLQUFLLDRCQUEwQixNQUFHLEtBQUssVUFBVSxLQUFLLENBQUMsSUFBRSxJQUFFLEtBQUssWUFBVyxNQUFJLEtBQUsscUJBQXFCLEtBQUssWUFBVyxPQUFLLE1BQUssYUFBVyxLQUFHLEtBQUssUUFBUTtBQUFBO0FBQWEscUJBQUssS0FBSyxTQUFRLElBQUksTUFBTTtBQUFBO0FBQUEsYUFBMEUsR0FBRSxVQUFVLHFCQUFtQixXQUFVO0FBQUMsaUJBQUssUUFBUTtBQUFRLGdCQUFJLEtBQUUsS0FBSyxVQUFVO0FBQU0sZ0JBQUcsQUFBUyxPQUFULFFBQVc7QUFBQyxrQkFBSSxLQUFFLEVBQUUsSUFBRSxJQUFHLEtBQUUsR0FBRSxJQUFHLEtBQUcsSUFBRSxJQUFHLEdBQUUsS0FBSSxLQUFFLEdBQUU7QUFBRyxtQkFBSyxhQUFXLElBQUUsTUFBSSxNQUFLLE1BQU0sS0FBSyxRQUFRLFNBQVMsTUFBSSxLQUFLLFFBQVEsV0FBVztBQUFBO0FBQVMsbUJBQUssS0FBSyxTQUFRLElBQUksTUFBTTtBQUFBLGFBQWdDLEdBQUUsVUFBVSxRQUFNLFNBQVMsSUFBRTtBQUFDLFlBQU8sT0FBUCxPQUFVLE1BQUssU0FBTyxNQUFHLEtBQUssS0FBSyxVQUFRLEtBQUssU0FBTyxLQUFLLEtBQUssU0FBUSxJQUFJLE1BQU0sbUNBQWlDLEFBQUksR0FBRSxXQUFOLEtBQWUsTUFBSyxRQUFRLFVBQVEsTUFBRyxLQUFLLEtBQUssUUFBTyxJQUFFLEtBQUssUUFBUTtBQUFBLGFBQVMsR0FBRSxVQUFVLFlBQVUsU0FBUyxJQUFFO0FBQUMsZ0JBQUksSUFBRSxJQUFFLElBQUU7QUFBRSxnQkFBRyxFQUFFLE1BQU0sY0FBYyxLQUFHO0FBQUMsa0JBQUksS0FBRSxHQUFFLFNBQU8sR0FBRSxTQUFPLE1BQUksR0FBRSxZQUFVLEdBQUU7QUFBVSxjQUFPLEdBQUUsaUJBQVQsT0FBc0IsS0FBSyxJQUFJLEdBQUUsY0FBYSxNQUFHLEtBQUssSUFBSTtBQUFHLGtCQUFHO0FBQUMseUJBQVEsS0FBRSxFQUFFLEdBQUUsYUFBWSxLQUFFLEdBQUUsUUFBTyxDQUFDLEdBQUUsTUFBSyxLQUFFLEdBQUUsUUFBTztBQUFDLHNCQUFJLEtBQUUsR0FBRSxPQUFNLEtBQUUsR0FBRSxTQUFPLEdBQUUsU0FBTyxNQUFJLEdBQUUsWUFBVSxHQUFFO0FBQVUsa0JBQU8sR0FBRSxpQkFBVCxPQUFzQixLQUFLLElBQUksR0FBRSxjQUFhLElBQUUsR0FBRSxTQUFPLEtBQUssSUFBSSxJQUFFLEdBQUU7QUFBQTtBQUFBLHVCQUFjLElBQU47QUFBUyxxQkFBRSxFQUFDLE9BQU07QUFBQSx3QkFBRztBQUFRLG9CQUFHO0FBQUMsd0JBQUcsQ0FBQyxHQUFFLFFBQU8sTUFBRSxHQUFFLFdBQVMsR0FBRSxLQUFLO0FBQUEsMEJBQUc7QUFBUSxzQkFBRztBQUFFLDBCQUFNLEdBQUU7QUFBQTtBQUFBO0FBQU8sa0JBQUc7QUFBQyx5QkFBUSxLQUFFLEVBQUUsR0FBRSxhQUFZLEtBQUUsR0FBRSxRQUFPLENBQUMsR0FBRSxNQUFLLEtBQUUsR0FBRSxRQUFPO0FBQUMsc0JBQUksS0FBRSxHQUFFO0FBQU0sdUJBQUssVUFBVTtBQUFBO0FBQUEsdUJBQVUsSUFBTjtBQUFTLHFCQUFFLEVBQUMsT0FBTTtBQUFBLHdCQUFHO0FBQVEsb0JBQUc7QUFBQyx3QkFBRyxDQUFDLEdBQUUsUUFBTyxNQUFFLEdBQUUsV0FBUyxHQUFFLEtBQUs7QUFBQSwwQkFBRztBQUFRLHNCQUFHO0FBQUUsMEJBQU0sR0FBRTtBQUFBO0FBQUE7QUFBTyxtQkFBSztBQUFBO0FBQVUsZ0JBQUUsTUFBTSxvQkFBb0IsT0FBSSxHQUFFLE9BQUssS0FBSyxJQUFJLEdBQUUsUUFBTSxFQUFFLE1BQU0sY0FBYyxNQUFHLEtBQUssSUFBSSxHQUFFLFFBQU0sRUFBRSxNQUFNLG1CQUFtQixNQUFHLEtBQUssSUFBSSxHQUFFLFFBQU0sRUFBRSxNQUFNLDRCQUE0QixPQUFJLEtBQUssSUFBSSxHQUFFLFFBQU8sR0FBRTtBQUFBLGFBQU8sR0FBRSxVQUFVLHVCQUFxQixTQUFTLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUksSUFBRSxJQUFFLEtBQUUsS0FBRSxJQUFJLEVBQUUsaUJBQWE7QUFBTyxnQkFBRztBQUFDLHVCQUFRLEtBQUUsRUFBRSxHQUFFLGFBQVksS0FBRSxHQUFFLFFBQU8sQ0FBQyxHQUFFLE1BQUssS0FBRSxHQUFFLFFBQU87QUFBQyxvQkFBSSxLQUFFLEdBQUU7QUFBTSxvQkFBRyxNQUFHLE1BQUcsQUFBTyxHQUFFLGlCQUFULE1BQXNCO0FBQUMsc0JBQUcsTUFBRyxNQUFHLEdBQUUsSUFBSSxHQUFFLGNBQWEsR0FBRTtBQUFXLDJCQUFPLEtBQUssS0FBSyxLQUFLLFNBQVEsSUFBSSxNQUFNO0FBQWtFLHdCQUFHLE1BQUcsR0FBRSxJQUFJLEdBQUUsY0FBYSxHQUFFO0FBQVcsc0JBQUksS0FBRSxHQUFFLGNBQWEsS0FBRTtBQUFLLHNCQUFHLEFBQU8sT0FBUDtBQUFTLHdCQUFHLEtBQUUsR0FBRSxJQUFJLEdBQUUsUUFBTyxLQUFHLE9BQUksRUFBRSxVQUFVLE9BQU07QUFBQywwQkFBRyxHQUFFLFVBQVEsRUFBRSxVQUFVLE9BQUssQUFBTyxHQUFFLFdBQVQsUUFBaUIsTUFBRyxBQUFPLEdBQUUsV0FBVCxRQUFrQixFQUFFLElBQUUsYUFBYSxPQUFJLEdBQUUsR0FBRSxlQUFhLEdBQUUsVUFBUSxHQUFFLElBQUksR0FBRSxXQUFVLEdBQUU7QUFBTztBQUFTLDBCQUFHLE1BQUcsR0FBRSxVQUFRLEVBQUUsVUFBVTtBQUFNLCtCQUFPLEtBQUssS0FBSyxLQUFLLFNBQVEsSUFBSSxNQUFNO0FBQXdELDBCQUFHLE1BQUcsQUFBSyxHQUFFLFVBQVA7QUFBYSwrQkFBTyxLQUFLLEtBQUssS0FBSyxTQUFRLElBQUksTUFBTTtBQUFrRyxzQkFBVSxHQUFFLFdBQVosV0FBcUIsTUFBRTtBQUFBO0FBQWMsc0JBQU8sT0FBUCxRQUFXLE1BQUUsQUFBTyxHQUFFLFdBQVQsUUFBaUIsR0FBRSxVQUFVLEdBQUUsV0FBUyxDQUFDLEdBQUUsSUFBSSxHQUFFLFFBQU8sTUFBRyxLQUFLLGdCQUFnQixJQUFFLElBQUUsTUFBRyxHQUFFLFFBQU8sS0FBSyxNQUFNLEtBQUssUUFBUSxVQUFVLFdBQVMsSUFBRSxLQUFLLHlCQUF5QixJQUFFLEtBQUssU0FBUztBQUFlLHNCQUFHLE1BQUksQ0FBSyxHQUFFLFVBQVUsUUFBUSxTQUF6QixNQUErQixDQUFDLEVBQUUsV0FBVyxHQUFFLGNBQVksQUFBVSxHQUFFLGNBQVosV0FBdUIsQUFBTyxPQUFQO0FBQVUsMkJBQU8sS0FBSyxLQUFLLEtBQUssU0FBUSxJQUFJLE1BQU07QUFBNkUsdUJBQUssTUFBTSxLQUFLLFFBQVEsVUFBVyxDQUFPLE9BQVAsT0FBUyxLQUFFLE1BQUksTUFBSSxHQUFFLFdBQVUsS0FBSyx5QkFBeUIsR0FBRSxPQUFNLEtBQUssU0FBUztBQUFBO0FBQW1CLHVCQUFLLE1BQU0sS0FBSyxRQUFRLFVBQVUsR0FBRSxXQUFVLEtBQUsseUJBQXlCLEdBQUUsT0FBTSxLQUFLLFNBQVM7QUFBQTtBQUFBLHFCQUFxQixJQUFOO0FBQVMsbUJBQUUsRUFBQyxPQUFNO0FBQUEsc0JBQUc7QUFBUSxrQkFBRztBQUFDLHNCQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSztBQUFBLHdCQUFHO0FBQVEsb0JBQUc7QUFBRSx3QkFBTSxHQUFFO0FBQUE7QUFBQTtBQUFBLGFBQVMsR0FBRSxVQUFVLDJCQUF5QixTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsQUFBTyxPQUFQLFFBQVUsQ0FBQyxFQUFFLGdCQUFnQixNQUFJLE1BQUssS0FBSyxTQUFRLElBQUksTUFBTSw0Q0FBMkMsTUFBSSxBQUFPLE9BQVAsT0FBUyxLQUFHLEdBQUUsUUFBUSxpQ0FBZ0MsU0FBUyxRQUFRLE1BQUssUUFBUSxRQUFRLE1BQUssUUFBUSxRQUFRLE1BQUs7QUFBQSxhQUFXLEdBQUUsVUFBVSw4QkFBNEIsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFJLElBQUUsSUFBRSxLQUFFO0FBQUssZ0JBQUc7QUFBQyx1QkFBUSxLQUFFLEVBQUUsR0FBRSxhQUFZLEtBQUUsR0FBRSxRQUFPLENBQUMsR0FBRSxNQUFLLEtBQUUsR0FBRSxRQUFPO0FBQUMsb0JBQUksS0FBRSxHQUFFLE9BQU0sS0FBRSxHQUFFLGNBQWEsS0FBRSxHQUFFO0FBQU8sb0JBQUcsT0FBSSxFQUFFLFVBQVUsT0FBTTtBQUFDLHNCQUFHLEFBQU8sT0FBUCxNQUFTO0FBQUMseUJBQUUsR0FBRTtBQUFNO0FBQUE7QUFBUyxzQkFBSSxLQUFFLEdBQUUsV0FBVSxLQUFFLEdBQUU7QUFBTSxzQkFBRyxPQUFJLEVBQUUsVUFBVTtBQUFJO0FBQVMsc0JBQUcsQUFBSyxPQUFMLE1BQVMsTUFBRSxPQUFNLEdBQUUsSUFBSSxJQUFFO0FBQUc7QUFBUyxxQkFBRSxJQUFJLElBQUUsS0FBRyxHQUFFLE1BQUcsTUFBRztBQUFBO0FBQUE7QUFBQSxxQkFBVyxJQUFOO0FBQVMsbUJBQUUsRUFBQyxPQUFNO0FBQUEsc0JBQUc7QUFBUSxrQkFBRztBQUFDLHNCQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSztBQUFBLHdCQUFHO0FBQVEsb0JBQUc7QUFBRSx3QkFBTSxHQUFFO0FBQUE7QUFBQTtBQUFPLG1CQUFPO0FBQUEsYUFBRyxHQUFFLFVBQVUsa0JBQWdCLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBSSxLQUFFLE9BQUssR0FBRTtBQUFNLG1CQUFPLEdBQUUsU0FBUSxHQUFFLElBQUksSUFBRSxLQUFHO0FBQUEsYUFBRyxHQUFFLFVBQVUsdUJBQXFCLFNBQVMsSUFBRSxJQUFFO0FBQUMsZ0JBQUksS0FBRSxHQUFFLFFBQU8sS0FBRSxHQUFFLFFBQU8sS0FBRSxHQUFFLFlBQVcsS0FBRSxHQUFFO0FBQVcscUJBQVEsTUFBSyxJQUFFO0FBQUMsa0JBQUksS0FBRSxHQUFFO0FBQUcsa0JBQUcsQUFBUyxPQUFUO0FBQVcsdUJBQU07QUFBRyxrQkFBSSxLQUFFLEdBQUU7QUFBRyxrQkFBRyxHQUFFLFdBQVMsR0FBRTtBQUFPLHVCQUFNO0FBQUcsdUJBQVEsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPO0FBQUksb0JBQUcsR0FBRSxRQUFLLEdBQUU7QUFBRyx5QkFBTTtBQUFBO0FBQUcsZ0JBQUcsR0FBRSxXQUFTLEdBQUU7QUFBTyxxQkFBTTtBQUFHLGlCQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTztBQUFJLGtCQUFHLEdBQUUsUUFBSyxHQUFFO0FBQUcsdUJBQU07QUFBRyxtQkFBTTtBQUFBLGFBQUksR0FBRSxvQkFBa0IsSUFBSSxJQUFJLENBQUMsUUFBTyxRQUFPLFlBQVcsV0FBVSxNQUFLLE9BQU0sU0FBUSxTQUFRLE1BQUssT0FBTSxTQUFRLFVBQVMsUUFBTyxZQUFXLFFBQU8sU0FBUSxVQUFTLFNBQVEsU0FBUTtBQUFBLFVBQUcsRUFBRSxLQUFLO0FBQWMsVUFBRSxtQkFBaUI7QUFBQSxTQUFHLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQztBQUFhLFVBQUU7QUFBSSxZQUFJLEdBQUUsSUFBRSxRQUFNLEtBQUssYUFBWSxLQUFFLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sS0FBRSxPQUFPLGtCQUFnQixFQUFDLFdBQVUsZ0JBQWMsU0FBTyxTQUFTLElBQUUsSUFBRTtBQUFDLGVBQUUsWUFBVTtBQUFBLGVBQUksU0FBUyxJQUFFLElBQUU7QUFBQyxxQkFBUSxNQUFLO0FBQUUsaUJBQUUsZUFBZSxPQUFLLElBQUUsTUFBRyxHQUFFO0FBQUEsYUFBTSxJQUFFO0FBQUEsV0FBSSxTQUFTLElBQUUsSUFBRTtBQUFDLHdCQUFZO0FBQUMsaUJBQUssY0FBWTtBQUFBO0FBQUUsWUFBRSxJQUFFLEtBQUcsR0FBRSxZQUFVLEFBQU8sT0FBUCxPQUFTLE9BQU8sT0FBTyxNQUFJLElBQUUsWUFBVSxHQUFFLFdBQVUsSUFBSTtBQUFBO0FBQUssZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9BQU07QUFBSyxZQUFJLElBQUUsU0FBUyxJQUFFO0FBQUMsc0JBQVcsSUFBRTtBQUFDLGdCQUFJLEtBQUUsR0FBRSxLQUFLLE1BQUssT0FBSTtBQUFLLG1CQUFPLEdBQUUsY0FBWSxHQUFFO0FBQUE7QUFBRSxpQkFBTyxFQUFFLElBQUUsS0FBRyxHQUFFLFVBQVUsY0FBWSxXQUFVO0FBQUMsbUJBQU07QUFBQSxhQUFJLEdBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBSSxLQUFFLEtBQUssZUFBYTtBQUFRLG1CQUFPLE1BQUcsZUFBYSxLQUFFLEtBQUksQUFBUyxPQUFULFVBQWEsT0FBRyxnQkFBYyxLQUFFLE1BQUssQUFBUyxPQUFULFVBQWEsT0FBRyxrQkFBaUIsTUFBRSxRQUFNLFFBQU0sTUFBSyxNQUFHO0FBQUEsYUFBTSxHQUFFLFVBQVUsVUFBUSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUksS0FBRSxLQUFLO0FBQWEsbUJBQU8sTUFBRyxNQUFHLEtBQUUsZUFBYSxLQUFFLGNBQVksS0FBRSxRQUFNLEtBQUUsT0FBSyxLQUFFLGVBQWEsS0FBRSxjQUFZLEtBQUUsT0FBSyxLQUFFLGVBQWEsS0FBRSxjQUFZLEtBQUUsT0FBSyxlQUFhLEtBQUU7QUFBQSxhQUFLLEdBQUUsVUFBVSxVQUFRLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEtBQUssZUFBYSxTQUFVLEtBQUU7QUFBQSxhQUFVLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEtBQUssZUFBYTtBQUFBLGFBQUcsR0FBRSxVQUFVLGNBQVksU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxLQUFFLEtBQUssZUFBYSxPQUFLLEtBQUUsTUFBSSxLQUFFLE9BQUssS0FBSyxlQUFhLE9BQUssS0FBRTtBQUFBLGFBQU0sR0FBRSxVQUFVLFFBQU0sU0FBUyxJQUFFO0FBQUMsbUJBQU8sS0FBSyxlQUFhLGNBQVksS0FBRTtBQUFBLGFBQU8sR0FBRSxVQUFVLGVBQWEsU0FBUyxJQUFFO0FBQUMsbUJBQU8sS0FBSyxlQUFhLElBQUUsR0FBRSxRQUFPLEtBQUssZUFBYSxNQUFJO0FBQUEsYUFBRyxHQUFFLFVBQVUsYUFBVyxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQU8sS0FBRSxRQUFNLEtBQUUsS0FBSyxlQUFlLGlCQUFlLFFBQU0sS0FBRSxNQUFJLEtBQUssZUFBZSxtQkFBaUIsUUFBTSxPQUFLO0FBQUEsYUFBSyxHQUFFLFVBQVUsV0FBUyxTQUFTLElBQUU7QUFBQyxtQkFBTyxLQUFLLGVBQWEsT0FBSyxLQUFFO0FBQUEsYUFBSyxHQUFFLFVBQVUsWUFBVSxTQUFTLElBQUUsSUFBRTtBQUFDLGdCQUFJLEtBQUUsS0FBRSxPQUFLLEtBQUU7QUFBSSxtQkFBTyxLQUFLLGVBQWUsZUFBYSxLQUFLLGVBQWUsUUFBTSxLQUFHLEtBQUssY0FBWSxJQUFFLEdBQUUsU0FBTyxLQUFLLGVBQWUsUUFBTyxNQUFFLEtBQUssZUFBYSxLQUFLLFFBQVEsS0FBRyxJQUFFLEtBQUssY0FBWSxHQUFFLFFBQU8sTUFBSSxNQUFLLGVBQWEsSUFBRSxHQUFFLFFBQU8sTUFBSTtBQUFBLGFBQUksR0FBRSxVQUFVLGVBQWEsU0FBUyxJQUFFO0FBQUEsYUFBRyxHQUFFLFVBQVUsYUFBVyxTQUFTLElBQUU7QUFBQSxhQUFHLEdBQUUsVUFBVSxhQUFXLFdBQVU7QUFBQyxnQkFBRyxLQUFLLGVBQWUsYUFBWTtBQUFDLGtCQUFJLEtBQUcsTUFBSyxVQUFRLEtBQUssZUFBZSxVQUFRLE1BQUksS0FBSyxRQUFRLEtBQUssZUFBZSxTQUFPLEtBQUs7QUFBTyxxQkFBTyxLQUFLLGNBQVksR0FBRSxRQUFPO0FBQUE7QUFBRSxtQkFBTTtBQUFBLGFBQUksR0FBRSxVQUFVLFVBQVEsU0FBUyxJQUFFO0FBQUMsbUJBQU8sTUFBRyxJQUFFLEtBQUcsS0FBSyxlQUFlLE9BQU8sT0FBTztBQUFBLGFBQUk7QUFBQSxVQUFHLEVBQUUsS0FBSztBQUFjLFVBQUUsY0FBWTtBQUFBLFNBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsVUFBRTtBQUFJLFlBQUksR0FBRSxJQUFFLFFBQU0sS0FBSyxhQUFZLEtBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxLQUFFLE9BQU8sa0JBQWdCLEVBQUMsV0FBVSxnQkFBYyxTQUFPLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBRSxZQUFVO0FBQUEsZUFBSSxTQUFTLElBQUUsSUFBRTtBQUFDLHFCQUFRLE1BQUs7QUFBRSxpQkFBRSxlQUFlLE9BQUssSUFBRSxNQUFHLEdBQUU7QUFBQSxhQUFNLElBQUU7QUFBQSxXQUFJLFNBQVMsSUFBRSxJQUFFO0FBQUMsd0JBQVk7QUFBQyxpQkFBSyxjQUFZO0FBQUE7QUFBRSxZQUFFLElBQUUsS0FBRyxHQUFFLFlBQVUsQUFBTyxPQUFQLE9BQVMsT0FBTyxPQUFPLE1BQUksSUFBRSxZQUFVLEdBQUUsV0FBVSxJQUFJO0FBQUE7QUFBSyxlQUFPLGVBQWUsR0FBRSxjQUFhLEVBQUMsT0FBTTtBQUFLLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsZ0JBQUksS0FBRSxHQUFFLEtBQUssTUFBSyxPQUFJO0FBQUssbUJBQU8sR0FBRSxlQUFhLElBQUcsR0FBRSxtQkFBaUIsR0FBRTtBQUFBO0FBQUUsaUJBQU8sRUFBRSxJQUFFLEtBQUcsR0FBRSxVQUFVLGNBQVksV0FBVTtBQUFDLG1CQUFNO0FBQUEsYUFBSSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQU07QUFBQSxhQUFJLEdBQUUsVUFBVSxVQUFRLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTTtBQUFBLGFBQUksR0FBRSxVQUFVLFVBQVEsU0FBUyxJQUFFO0FBQUMsbUJBQU8sS0FBSyxXQUFTLEtBQUssZUFBYSxNQUFJLEtBQUssU0FBTyxLQUFLLEtBQUssS0FBSyxnQkFBZ0IsUUFBUSxXQUFTLEtBQUssU0FBTyxLQUFLLEtBQUssTUFBRyxLQUFLLFNBQU87QUFBQSxhQUFLLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEtBQUssV0FBUyxLQUFLLGVBQWEsTUFBSSxLQUFLLFNBQU8sS0FBSyxLQUFLLEtBQUssZ0JBQWdCLFFBQVEsUUFBTSxLQUFLLFNBQU8sS0FBSyxLQUFLLE1BQUcsS0FBSyxTQUFPO0FBQUEsYUFBSyxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLEtBQUssV0FBUyxLQUFLLGVBQWEsTUFBSSxLQUFLLFNBQU8sS0FBSyxLQUFLLEtBQUssZ0JBQWdCLFFBQVEsT0FBSyxLQUFLLFNBQU8sS0FBSyxLQUFLLEtBQUUsS0FBRSxNQUFJLEtBQUUsTUFBRyxLQUFLLFNBQU87QUFBQSxhQUFLLEdBQUUsVUFBVSxRQUFNLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEtBQUssV0FBUyxLQUFLLGVBQWEsTUFBSSxLQUFLLFNBQU8sS0FBSyxLQUFLLEtBQUssZ0JBQWdCLFFBQVEsU0FBTyxLQUFLLFNBQU8sS0FBSyxLQUFLLE1BQUcsS0FBSyxTQUFPO0FBQUEsYUFBSyxHQUFFLFVBQVUsWUFBVSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLEtBQUssV0FBUyxLQUFLLFdBQVcsS0FBRyxNQUFJLEtBQUssU0FBTyxLQUFLLEtBQUssS0FBSyxnQkFBZ0IsUUFBUSxNQUFJLE1BQUcsS0FBSyxTQUFPLEtBQUssS0FBSyxNQUFHLEtBQUssU0FBTztBQUFBLGFBQUssR0FBRSxVQUFVLGVBQWEsU0FBUyxJQUFFO0FBQUMsZ0JBQUksS0FBRSxLQUFLLFdBQVMsS0FBSyxlQUFhLE1BQUksS0FBSyxTQUFPLEtBQUssS0FBSyxNQUFHLEtBQUssU0FBTztBQUFJLG1CQUFPLEtBQUssb0JBQW1CLEtBQUssVUFBUSxNQUFHLE1BQUcsS0FBSyxlQUFhLEtBQUssS0FBSyxLQUFLLGdCQUFnQixRQUFRLFFBQU0sS0FBSyxTQUFPLEtBQUksS0FBSyxhQUFhLEtBQUssUUFBSTtBQUFBLGFBQUcsR0FBRSxVQUFVLGFBQVcsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFHLElBQUU7QUFBQyxrQkFBSSxLQUFFLEtBQUssU0FBTztBQUFJLHFCQUFPLEtBQUssb0JBQW1CLE1BQUcsS0FBSyxlQUFhLE1BQUksS0FBSyxTQUFPO0FBQUE7QUFBSSxtQkFBTTtBQUFBLGFBQUksR0FBRSxVQUFVLFdBQVMsU0FBUyxJQUFFO0FBQUMsZ0JBQUksS0FBRSxLQUFLLGVBQWE7QUFBSSxtQkFBTyxLQUFLLG9CQUFtQixNQUFHLEtBQUssZUFBYSxNQUFJLEtBQUssU0FBTztBQUFBLGFBQUssR0FBRSxVQUFVLGVBQWEsU0FBUyxJQUFFO0FBQUEsYUFBRyxHQUFFLFVBQVUsYUFBVyxTQUFTLElBQUU7QUFBQyxpQkFBSyxhQUFhO0FBQUEsYUFBTyxHQUFFLFVBQVUsYUFBVyxTQUFTLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLElBQUcsS0FBSyxlQUFlLGNBQWEsTUFBSyxVQUFRLEtBQUssZUFBZSxVQUFRLE1BQUksS0FBSyxRQUFRLEtBQUssZUFBZSxTQUFPLEtBQUssUUFBTSxNQUFHO0FBQUEsYUFBSSxHQUFFLFVBQVUsVUFBUSxTQUFTLElBQUU7QUFBQyxtQkFBTyxLQUFFLEtBQUssb0JBQWtCLElBQUUsS0FBRyxLQUFLLGVBQWUsT0FBTyxPQUFPLEtBQUUsS0FBSztBQUFBLGFBQW1CLEdBQUUsVUFBVSxTQUFPLFdBQVU7QUFBQyxnQkFBSSxLQUFFLEtBQUssYUFBYSxLQUFLLGFBQWEsU0FBTyxLQUFHLE1BQUk7QUFBRyxtQkFBTyxLQUFLLGFBQWEsU0FBTyxLQUFJLE1BQUssYUFBYSxLQUFLLGFBQWEsU0FBTyxLQUFHLE9BQUk7QUFBQSxhQUFHLEdBQUUsVUFBVSxPQUFLLFdBQVU7QUFBQyxtQkFBTyxLQUFLLGVBQWUsY0FBWSxNQUFJO0FBQUEsYUFBSSxHQUFFLFVBQVUsT0FBSyxTQUFTLElBQUU7QUFBQyxtQkFBTSxNQUFJLEtBQUU7QUFBQSxhQUFNLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEtBQUssVUFBVTtBQUFBLGFBQUk7QUFBQSxVQUFHLEVBQUUsS0FBSztBQUFjLFVBQUUsZUFBYTtBQUFBLFNBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsVUFBRTtBQUFJLFlBQUksR0FBRSxJQUFFLFFBQU0sS0FBSyxhQUFZLEtBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxLQUFFLE9BQU8sa0JBQWdCLEVBQUMsV0FBVSxnQkFBYyxTQUFPLFNBQVMsSUFBRSxJQUFFO0FBQUMsZUFBRSxZQUFVO0FBQUEsZUFBSSxTQUFTLElBQUUsSUFBRTtBQUFDLHFCQUFRLE1BQUs7QUFBRSxpQkFBRSxlQUFlLE9BQUssSUFBRSxNQUFHLEdBQUU7QUFBQSxhQUFNLElBQUU7QUFBQSxXQUFJLFNBQVMsSUFBRSxJQUFFO0FBQUMsd0JBQVk7QUFBQyxpQkFBSyxjQUFZO0FBQUE7QUFBRSxZQUFFLElBQUUsS0FBRyxHQUFFLFlBQVUsQUFBTyxPQUFQLE9BQVMsT0FBTyxPQUFPLE1BQUksSUFBRSxZQUFVLEdBQUUsV0FBVSxJQUFJO0FBQUE7QUFBSyxlQUFPLGVBQWUsR0FBRSxjQUFhLEVBQUMsT0FBTTtBQUFLLFlBQUksSUFBRSxTQUFTLElBQUU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsZ0JBQUksS0FBRSxHQUFFLEtBQUssTUFBSyxPQUFJO0FBQUssZ0JBQUcsR0FBRSxlQUFhLE9BQUcsR0FBRSxtQkFBaUIsR0FBRSxHQUFFLE9BQU8sU0FBTztBQUFFLG9CQUFNLElBQUksTUFBTTtBQUFvRSxnQkFBRyxHQUFFLFNBQU87QUFBRSxvQkFBTSxJQUFJLE1BQU07QUFBb0QsbUJBQU87QUFBQTtBQUFFLGlCQUFPLEVBQUUsSUFBRSxLQUFHLEdBQUUsVUFBVSxjQUFZLFdBQVU7QUFBQyxtQkFBTyxLQUFLLGVBQWE7QUFBQSxhQUFPLEdBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTTtBQUFBLGFBQUksR0FBRSxVQUFVLFVBQVEsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFNO0FBQUEsYUFBSSxHQUFFLFVBQVUsVUFBUSxTQUFTLElBQUU7QUFBQyxtQkFBTyxLQUFLLGVBQWEsS0FBSyxLQUFLLEtBQUssZ0JBQWdCLFFBQVEsV0FBUyxNQUFJLEtBQUssS0FBSztBQUFBLGFBQUksR0FBRSxVQUFVLE9BQUssU0FBUyxJQUFFO0FBQUMsbUJBQU8sS0FBSyxlQUFhLEtBQUssS0FBSyxLQUFLLGdCQUFnQixRQUFRLFFBQU0sTUFBSSxLQUFLLEtBQUs7QUFBQSxhQUFJLEdBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sS0FBSyxlQUFhLEtBQUssS0FBSyxLQUFLLGdCQUFnQixRQUFRLE9BQUssTUFBSSxLQUFLLEtBQUssS0FBRSxLQUFFLE1BQUksS0FBRTtBQUFBLGFBQUksR0FBRSxVQUFVLFFBQU0sU0FBUyxJQUFFO0FBQUMsbUJBQU8sS0FBSyxlQUFhLEtBQUssS0FBSyxLQUFLLGdCQUFnQixRQUFRLFNBQU8sTUFBSSxLQUFLLEtBQUs7QUFBQSxhQUFJLEdBQUUsVUFBVSxZQUFVLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQUs7QUFBbUIsZ0JBQUksS0FBRSxLQUFLLGVBQWEsS0FBSyxLQUFLLEtBQUssZ0JBQWdCLFFBQVEsTUFBSSxNQUFHLE1BQUksS0FBSyxLQUFLO0FBQUcsbUJBQU8sS0FBSyxvQkFBbUI7QUFBQSxhQUFHLEdBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRTtBQUFDLGdCQUFJLEtBQUUsS0FBSyxlQUFhLEtBQUssS0FBSztBQUFHLG1CQUFPLEtBQUssZ0JBQWUsTUFBSyxlQUFhLE9BQUksS0FBSyxVQUFRLE1BQUcsS0FBSyxvQkFBbUIsTUFBRyxLQUFLLFdBQVcsUUFBSSxLQUFLLEtBQUssS0FBSyxnQkFBZ0IsUUFBUTtBQUFBLGFBQU8sR0FBRSxVQUFVLGFBQVcsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEtBQUUsTUFBSSxLQUFLLEtBQUssTUFBSTtBQUFBLGFBQUksR0FBRSxVQUFVLFdBQVMsU0FBUyxJQUFFO0FBQUMsbUJBQU8sS0FBSyxvQkFBbUI7QUFBQSxhQUFJLEdBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRTtBQUFBLGFBQUcsR0FBRSxVQUFVLGFBQVcsU0FBUyxJQUFFO0FBQUEsYUFBRyxHQUFFLFVBQVUsYUFBVyxTQUFTLElBQUU7QUFBQyxtQkFBTyxBQUFTLE9BQVQsVUFBYSxNQUFFLFFBQUssTUFBSyxVQUFRLEtBQUssZUFBZSxVQUFRLE1BQUksS0FBSyxRQUFRLEtBQUssZUFBZSxTQUFPLEtBQUssT0FBTTtBQUFBLGFBQUksR0FBRSxVQUFVLFVBQVEsU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBRyxLQUFFLEtBQUssb0JBQWtCO0FBQUUscUJBQU07QUFBRyxnQkFBSSxLQUFFLEtBQUssZUFBZSxPQUFPLE9BQU8sS0FBRSxLQUFLO0FBQWtCLG1CQUFNLENBQUMsTUFBRyxLQUFLLGVBQWEsR0FBRSxPQUFPLEdBQUUsR0FBRSxTQUFPLEtBQUcsTUFBSSxHQUFFLE9BQU8sSUFBRyxLQUFHO0FBQUEsYUFBRyxHQUFFLFVBQVUsT0FBSyxTQUFTLElBQUU7QUFBQyxtQkFBTSxNQUFJLEtBQUU7QUFBQSxhQUFNLEdBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEtBQUssVUFBVTtBQUFBLGFBQUk7QUFBQSxVQUFHLEVBQUUsS0FBSztBQUFjLFVBQUUsZUFBYTtBQUFBLFNBQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxHQUFFLElBQUUsQUFBVSxPQUFPLFdBQWpCLFdBQXlCLFVBQVEsTUFBSyxJQUFFLEtBQUcsQUFBWSxPQUFPLEVBQUUsU0FBckIsYUFBMkIsRUFBRSxRQUFNLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBTyxTQUFTLFVBQVUsTUFBTSxLQUFLLElBQUUsSUFBRTtBQUFBO0FBQUksWUFBRSxLQUFHLEFBQVksT0FBTyxFQUFFLFdBQXJCLGFBQTZCLEVBQUUsVUFBUSxPQUFPLHdCQUFzQixTQUFTLElBQUU7QUFBQyxpQkFBTyxPQUFPLG9CQUFvQixJQUFHLE9BQU8sT0FBTyxzQkFBc0I7QUFBQSxZQUFLLFNBQVMsSUFBRTtBQUFDLGlCQUFPLE9BQU8sb0JBQW9CO0FBQUE7QUFBSSxZQUFJLElBQUUsT0FBTyxTQUFPLFNBQVMsSUFBRTtBQUFDLGlCQUFPLE1BQUc7QUFBQTtBQUFHLHFCQUFZO0FBQUMsWUFBRSxLQUFLLEtBQUs7QUFBQTtBQUFNLFVBQUUsVUFBUSxHQUFFLEVBQUUsZUFBYSxHQUFFLEVBQUUsVUFBVSxVQUFRLFFBQU8sRUFBRSxVQUFVLGVBQWEsR0FBRSxFQUFFLFVBQVUsZ0JBQWM7QUFBTyxZQUFJLElBQUU7QUFBRyxtQkFBVyxJQUFFO0FBQUMsY0FBRyxBQUFZLE9BQU8sTUFBbkI7QUFBcUIsa0JBQU0sSUFBSSxVQUFVLHFFQUFtRSxPQUFPO0FBQUE7QUFBRyxtQkFBVyxJQUFFO0FBQUMsaUJBQU8sQUFBUyxHQUFFLGtCQUFYLFNBQXlCLEVBQUUsc0JBQW9CLEdBQUU7QUFBQTtBQUFjLG1CQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsSUFBRSxJQUFFO0FBQUUsY0FBRyxFQUFFLEtBQUcsQUFBVSxNQUFFLEdBQUUsYUFBZCxTQUF3QixNQUFFLEdBQUUsVUFBUSxPQUFPLE9BQU8sT0FBTSxHQUFFLGVBQWEsS0FBSSxDQUFTLEdBQUUsZ0JBQVgsVUFBeUIsSUFBRSxLQUFLLGVBQWMsSUFBRSxHQUFFLFdBQVMsR0FBRSxXQUFTLEtBQUcsS0FBRSxHQUFFLFVBQVMsS0FBRSxHQUFFLE1BQUksQUFBUyxPQUFUO0FBQVcsaUJBQUUsR0FBRSxNQUFHLElBQUUsRUFBRSxHQUFFO0FBQUEsbUJBQXFCLEFBQVksT0FBTyxNQUFuQixhQUFxQixLQUFFLEdBQUUsTUFBRyxLQUFFLENBQUMsSUFBRSxNQUFHLENBQUMsSUFBRSxNQUFHLEtBQUUsR0FBRSxRQUFRLE1BQUcsR0FBRSxLQUFLLEtBQUksTUFBRSxFQUFFLE9BQUksS0FBRyxHQUFFLFNBQU8sTUFBRyxDQUFDLEdBQUUsUUFBTztBQUFDLGVBQUUsU0FBTztBQUFHLGdCQUFJLEtBQUUsSUFBSSxNQUFNLGlEQUErQyxHQUFFLFNBQU8sTUFBSSxPQUFPLE1BQUc7QUFBcUUsZUFBRSxPQUFLLCtCQUE4QixHQUFFLFVBQVEsSUFBRSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU0sR0FBRSxRQUFPLEtBQUUsSUFBRSxXQUFTLFFBQVEsUUFBTSxRQUFRLEtBQUs7QUFBQTtBQUFHLGlCQUFPO0FBQUE7QUFBRSxxQkFBWTtBQUFDLGNBQUcsQ0FBQyxLQUFLO0FBQU0sbUJBQU8sS0FBSyxPQUFPLGVBQWUsS0FBSyxNQUFLLEtBQUssU0FBUSxLQUFLLFFBQU0sTUFBRyxBQUFJLFVBQVUsV0FBZCxJQUFxQixLQUFLLFNBQVMsS0FBSyxLQUFLLFVBQVEsS0FBSyxTQUFTLE1BQU0sS0FBSyxRQUFPO0FBQUE7QUFBVyxtQkFBVyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxFQUFDLE9BQU0sT0FBRyxRQUFPLFFBQU8sUUFBTyxJQUFFLE1BQUssSUFBRSxVQUFTLE1BQUcsS0FBRSxFQUFFLEtBQUs7QUFBRyxpQkFBTyxHQUFFLFdBQVMsSUFBRSxHQUFFLFNBQU8sSUFBRTtBQUFBO0FBQUUsbUJBQVcsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLEtBQUUsR0FBRTtBQUFRLGNBQUcsQUFBUyxPQUFUO0FBQVcsbUJBQU07QUFBRyxjQUFJLEtBQUUsR0FBRTtBQUFHLGlCQUFPLEFBQVMsT0FBVCxTQUFXLEtBQUcsQUFBWSxPQUFPLE1BQW5CLGFBQXFCLEtBQUUsQ0FBQyxHQUFFLFlBQVUsTUFBRyxDQUFDLE1BQUcsS0FBRSxTQUFTLElBQUU7QUFBQyxxQkFBUSxLQUFFLElBQUksTUFBTSxHQUFFLFNBQVEsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUU7QUFBRSxpQkFBRSxNQUFHLEdBQUUsSUFBRyxZQUFVLEdBQUU7QUFBRyxtQkFBTztBQUFBLFlBQUcsTUFBRyxFQUFFLElBQUUsR0FBRTtBQUFBO0FBQVEsbUJBQVcsSUFBRTtBQUFDLGNBQUksS0FBRSxLQUFLO0FBQVEsY0FBRyxBQUFTLE9BQVQsUUFBVztBQUFDLGdCQUFJLEtBQUUsR0FBRTtBQUFHLGdCQUFHLEFBQVksT0FBTyxNQUFuQjtBQUFxQixxQkFBTztBQUFFLGdCQUFHLEFBQVMsT0FBVDtBQUFXLHFCQUFPLEdBQUU7QUFBQTtBQUFPLGlCQUFPO0FBQUE7QUFBRSxtQkFBVyxJQUFFLElBQUU7QUFBQyxtQkFBUSxLQUFFLElBQUksTUFBTSxLQUFHLEtBQUUsR0FBRSxLQUFFLElBQUUsRUFBRTtBQUFFLGVBQUUsTUFBRyxHQUFFO0FBQUcsaUJBQU87QUFBQTtBQUFFLGVBQU8sZUFBZSxHQUFFLHVCQUFzQixFQUFDLFlBQVcsTUFBRyxLQUFJLFdBQVU7QUFBQyxpQkFBTztBQUFBLFdBQUcsS0FBSSxTQUFTLElBQUU7QUFBQyxjQUFHLEFBQVUsT0FBTyxNQUFqQixZQUFvQixLQUFFLEtBQUcsRUFBRTtBQUFHLGtCQUFNLElBQUksV0FBVyxvR0FBa0csS0FBRTtBQUFLLGNBQUU7QUFBQSxjQUFLLEVBQUUsT0FBSyxXQUFVO0FBQUMsVUFBUyxLQUFLLFlBQWQsVUFBdUIsS0FBSyxZQUFVLE9BQU8sZUFBZSxNQUFNLFdBQVUsTUFBSyxVQUFRLE9BQU8sT0FBTyxPQUFNLEtBQUssZUFBYSxJQUFHLEtBQUssZ0JBQWMsS0FBSyxpQkFBZTtBQUFBLFdBQVEsRUFBRSxVQUFVLGtCQUFnQixTQUFTLElBQUU7QUFBQyxjQUFHLEFBQVUsT0FBTyxNQUFqQixZQUFvQixLQUFFLEtBQUcsRUFBRTtBQUFHLGtCQUFNLElBQUksV0FBVyxrRkFBZ0YsS0FBRTtBQUFLLGlCQUFPLEtBQUssZ0JBQWMsSUFBRTtBQUFBLFdBQU0sRUFBRSxVQUFVLGtCQUFnQixXQUFVO0FBQUMsaUJBQU8sRUFBRTtBQUFBLFdBQU8sRUFBRSxVQUFVLE9BQUssU0FBUyxJQUFFO0FBQUMsbUJBQVEsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLFVBQVUsUUFBTztBQUFJLGVBQUUsS0FBSyxVQUFVO0FBQUksY0FBSSxLQUFFLEFBQVUsT0FBVixTQUFZLEtBQUUsS0FBSztBQUFRLGNBQUcsQUFBUyxPQUFUO0FBQVcsaUJBQUUsTUFBRyxBQUFTLEdBQUUsVUFBWDtBQUFBLG1CQUF5QixDQUFDO0FBQUUsbUJBQU07QUFBRyxjQUFHLElBQUU7QUFBQyxnQkFBSTtBQUFFLGdCQUFHLEdBQUUsU0FBTyxLQUFJLE1BQUUsR0FBRSxLQUFJLGNBQWE7QUFBTSxvQkFBTTtBQUFFLGdCQUFJLEtBQUUsSUFBSSxNQUFNLHFCQUFvQixNQUFFLE9BQUssR0FBRSxVQUFRLE1BQUk7QUFBSyxrQkFBTSxHQUFFLFVBQVEsSUFBRTtBQUFBO0FBQUUsY0FBSSxLQUFFLEdBQUU7QUFBRyxjQUFHLEFBQVMsT0FBVDtBQUFXLG1CQUFNO0FBQUcsY0FBRyxBQUFZLE9BQU8sTUFBbkI7QUFBcUIsY0FBRSxJQUFFLE1BQUs7QUFBQSxlQUFPO0FBQUMsZ0JBQUksS0FBRSxHQUFFLFFBQU8sS0FBRSxFQUFFLElBQUU7QUFBRyxpQkFBSSxLQUFFLEdBQUUsS0FBRSxJQUFFLEVBQUU7QUFBRSxnQkFBRSxHQUFFLEtBQUcsTUFBSztBQUFBO0FBQUcsaUJBQU07QUFBQSxXQUFJLEVBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sRUFBRSxNQUFLLElBQUUsSUFBRTtBQUFBLFdBQUssRUFBRSxVQUFVLEtBQUcsRUFBRSxVQUFVLGFBQVksRUFBRSxVQUFVLGtCQUFnQixTQUFTLElBQUUsSUFBRTtBQUFDLGlCQUFPLEVBQUUsTUFBSyxJQUFFLElBQUU7QUFBQSxXQUFLLEVBQUUsVUFBVSxPQUFLLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU8sRUFBRSxLQUFHLEtBQUssR0FBRyxJQUFFLEVBQUUsTUFBSyxJQUFFLE1BQUk7QUFBQSxXQUFNLEVBQUUsVUFBVSxzQkFBb0IsU0FBUyxJQUFFLElBQUU7QUFBQyxpQkFBTyxFQUFFLEtBQUcsS0FBSyxnQkFBZ0IsSUFBRSxFQUFFLE1BQUssSUFBRSxNQUFJO0FBQUEsV0FBTSxFQUFFLFVBQVUsaUJBQWUsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBRSxjQUFHLEVBQUUsS0FBRyxBQUFVLE1BQUUsS0FBSyxhQUFqQjtBQUEwQixtQkFBTztBQUFLLGNBQUcsQUFBVSxNQUFFLEdBQUUsU0FBZDtBQUFrQixtQkFBTztBQUFLLGNBQUcsT0FBSSxNQUFHLEdBQUUsYUFBVztBQUFFLFlBQUcsRUFBRSxLQUFLLGdCQUFWLElBQXVCLEtBQUssVUFBUSxPQUFPLE9BQU8sUUFBTyxRQUFPLEdBQUUsS0FBRyxHQUFFLGtCQUFnQixLQUFLLEtBQUssa0JBQWlCLElBQUUsR0FBRSxZQUFVO0FBQUEsbUJBQVksQUFBWSxPQUFPLE1BQW5CLFlBQXFCO0FBQUMsaUJBQUksS0FBRSxJQUFHLEtBQUUsR0FBRSxTQUFPLEdBQUUsTUFBRyxHQUFFO0FBQUksa0JBQUcsR0FBRSxRQUFLLE1BQUcsR0FBRSxJQUFHLGFBQVcsSUFBRTtBQUFDLHFCQUFFLEdBQUUsSUFBRyxVQUFTLEtBQUU7QUFBRTtBQUFBO0FBQU0sZ0JBQUcsS0FBRTtBQUFFLHFCQUFPO0FBQUssWUFBSSxPQUFKLElBQU0sR0FBRSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMscUJBQUssS0FBRSxJQUFFLEdBQUUsUUFBTztBQUFJLG1CQUFFLE1BQUcsR0FBRSxLQUFFO0FBQUcsaUJBQUU7QUFBQSxjQUFPLElBQUUsS0FBRyxBQUFJLEdBQUUsV0FBTixLQUFlLElBQUUsTUFBRyxHQUFFLEtBQUksQUFBUyxHQUFFLG1CQUFYLFVBQTJCLEtBQUssS0FBSyxrQkFBaUIsSUFBRSxNQUFHO0FBQUE7QUFBRyxpQkFBTztBQUFBLFdBQU0sRUFBRSxVQUFVLE1BQUksRUFBRSxVQUFVLGdCQUFlLEVBQUUsVUFBVSxxQkFBbUIsU0FBUyxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUU7QUFBRSxjQUFHLEFBQVUsTUFBRSxLQUFLLGFBQWpCO0FBQTBCLG1CQUFPO0FBQUssY0FBRyxBQUFTLEdBQUUsbUJBQVg7QUFBMEIsbUJBQU8sQUFBSSxVQUFVLFdBQWQsSUFBc0IsTUFBSyxVQUFRLE9BQU8sT0FBTyxPQUFNLEtBQUssZUFBYSxLQUFHLEFBQVMsR0FBRSxRQUFYLFVBQWdCLENBQUcsRUFBRSxLQUFLLGdCQUFWLElBQXVCLEtBQUssVUFBUSxPQUFPLE9BQU8sUUFBTSxPQUFPLEdBQUUsTUFBSTtBQUFLLGNBQUcsQUFBSSxVQUFVLFdBQWQsR0FBcUI7QUFBQyxnQkFBSSxJQUFFLEtBQUUsT0FBTyxLQUFLO0FBQUcsaUJBQUksS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUU7QUFBRSxjQUFvQixNQUFFLEdBQUUsU0FBeEIsb0JBQTZCLEtBQUssbUJBQW1CO0FBQUcsbUJBQU8sS0FBSyxtQkFBbUIsbUJBQWtCLEtBQUssVUFBUSxPQUFPLE9BQU8sT0FBTSxLQUFLLGVBQWEsR0FBRTtBQUFBO0FBQUssY0FBRyxBQUFZLE9BQU8sTUFBRSxHQUFFLFFBQXZCO0FBQTJCLGlCQUFLLGVBQWUsSUFBRTtBQUFBLG1CQUFXLEFBQVMsT0FBVDtBQUFXLGlCQUFJLEtBQUUsR0FBRSxTQUFPLEdBQUUsTUFBRyxHQUFFO0FBQUksbUJBQUssZUFBZSxJQUFFLEdBQUU7QUFBSSxpQkFBTztBQUFBLFdBQU0sRUFBRSxVQUFVLFlBQVUsU0FBUyxJQUFFO0FBQUMsaUJBQU8sRUFBRSxNQUFLLElBQUU7QUFBQSxXQUFLLEVBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEVBQUUsTUFBSyxJQUFFO0FBQUEsV0FBSyxFQUFFLGdCQUFjLFNBQVMsSUFBRSxJQUFFO0FBQUMsaUJBQU0sQUFBWSxPQUFPLEdBQUUsaUJBQXJCLGFBQW1DLEdBQUUsY0FBYyxNQUFHLEVBQUUsS0FBSyxJQUFFO0FBQUEsV0FBSSxFQUFFLFVBQVUsZ0JBQWMsR0FBRSxFQUFFLFVBQVUsYUFBVyxXQUFVO0FBQUMsaUJBQU8sS0FBSyxlQUFhLElBQUUsRUFBRSxLQUFLLFdBQVM7QUFBQTtBQUFBLFNBQUssU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDO0FBQWEsZUFBTyxlQUFlLEdBQUUsY0FBYSxFQUFDLE9BQU07QUFBSyxZQUFJLElBQUUsRUFBRTtBQUFJLFVBQUUsV0FBUyxTQUFTLElBQUU7QUFBQyxpQkFBTyxJQUFJLEVBQUUsaUJBQWlCO0FBQUEsV0FBSSxFQUFFLGFBQVcsU0FBUyxJQUFFO0FBQUMsaUJBQU8sSUFBSSxFQUFFLGlCQUFpQixJQUFFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDUHRuM1o7QUFBQTtBQUFBO0FBQUEsdUJBQTZDOzs7QUNBN0Msc0JBQStDO0FBR3hDLElBQVc7QUFBWCxVQUFXLFVBQVg7QUFDTCx3QkFBVTtBQUNWLHdCQUFVO0FBQUEsR0FGTTtBQUtYLElBQVc7QUFBWCxVQUFXLGdCQUFYO0FBQ0wsZ0RBQTRCO0FBQUEsR0FEWjtBQXFDWCxJQUFNLG1CQUE0QztBQUFBLEVBQ3ZELFNBQVMsUUFBUTtBQUFBLEVBQ2pCLFVBQVU7QUFBQSxFQUNWLGNBQWM7QUFBQSxFQUNkLGdCQUFnQjtBQUFBO0FBR1gsd0NBQWtDLGlDQUFpQjtBQUFBLEVBRXpELFlBQ0csS0FDaUIsUUFDakI7QUFDRixVQUFNLEtBQUs7QUFGUTtBQUFBO0FBQUEsRUFLcEIsVUFBZ0I7QUFDZixVQUFNLEVBQUMsZ0JBQWU7QUFFdEIsZ0JBQVk7QUFFVixnQkFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNO0FBRXJDLFFBQUksd0JBQVEsYUFDVixRQUFRLGlCQUNSLFFBQVEsZ0ZBQ1IsUUFBUSxVQUFRLEtBQ2YsZUFBZSxpQ0FDZixTQUFTLEtBQUssT0FBTyxTQUFTLFVBQzlCLFNBQVMsQ0FBTyxVQUFVO0FBQ3JCLFdBQUssT0FBTyxTQUFTLFdBQVc7QUFDaEMsWUFBTSxLQUFLLE9BQU87QUFBQTtBQUV4QixRQUFJLHdCQUFRLGFBQ1QsUUFBUSxrQkFDUixRQUFRO0FBQUEsOERBRVIsVUFBVSxDQUFDLFdBQ1YsT0FDRyxTQUFTLEtBQUssT0FBTyxTQUFTLGNBQzlCLFNBQVMsQ0FBTyxVQUFVO0FBQ3pCLFdBQUssT0FBTyxTQUFTLGVBQWU7QUFDcEMsWUFBTSxLQUFLLE9BQU87QUFDbEIsV0FBSztBQUFBO0FBR2IsUUFBSSxLQUFLLE9BQU8sU0FBUyxjQUFjO0FBQ3JDLFVBQUksd0JBQVEsYUFDVCxRQUFRLHVCQUNSLFFBQVEsMEJBQ1IsUUFBUSxVQUFRLEtBQ2QsZUFBZSxhQUNmLFNBQVMsS0FBSyxPQUFPLFNBQVMsVUFDOUIsU0FBUyxDQUFPLFVBQVU7QUFDekIsYUFBSyxPQUFPLFNBQVMsV0FBVztBQUNoQyxjQUFNLEtBQUssT0FBTztBQUFBO0FBQUEsV0FFbkI7QUFDTCxhQUFPLEtBQUssT0FBTyxTQUFTO0FBQUE7QUFFOUIsUUFBSSx3QkFBUSxhQUNULFFBQVEsWUFDUixRQUFRO0FBQUE7QUFBQSxhQUdSLFlBQVksQ0FBQyxhQUFhO0FBQ3pCLGVBQ0csVUFBVSxRQUFRLFNBQVMsV0FDM0IsVUFBVSxRQUFRLFNBQVMsWUFDM0IsU0FBUyxLQUFLLE9BQU8sU0FBUyxTQUM5QixTQUFTLENBQU8sVUFBbUI7QUFDbEMsYUFBSyxPQUFPLFNBQVMsVUFBVTtBQUMvQixjQUFNLEtBQUssT0FBTztBQUNsQixhQUFLO0FBQUE7QUFBQTtBQUdiLFFBQUksS0FBSyxPQUFPLFNBQVMsWUFBWSxRQUFRLFNBQVM7QUFBQSxlQUUzQyxLQUFLLE9BQU8sU0FBUyxZQUFZLFFBQVEsU0FBUztBQUMzRCxVQUFJLENBQUMsS0FBSyxPQUFPLFNBQVMsZUFBZTtBQUN2QyxhQUFLLE9BQU8sU0FBUyxnQkFBZ0IsY0FBYztBQUFBO0FBRXJELFVBQUksd0JBQVEsYUFDVCxRQUFRLG1CQUNSLFFBQVEsd0RBQ1IsWUFBWSxDQUFDLGFBQWE7QUFDekIsaUJBQ0csVUFBVSxjQUFjLDJCQUEyQixtREFDbkQsU0FBUyxLQUFLLE9BQU8sU0FBUyxlQUM5QixTQUFTLENBQU8sVUFBeUI7QUFDeEMsZUFBSyxPQUFPLFNBQVMsZ0JBQWdCO0FBQ3JDLGdCQUFNLEtBQUssT0FBTztBQUNsQixlQUFLO0FBQUE7QUFBQTtBQUFBO0FBSWYsUUFBSSx3QkFBUSxhQUNULFFBQVEsd0JBQ1IsUUFBUTtBQUFBLHNDQUVSLFVBQVUsQ0FBQyxXQUNWLE9BQ0csU0FBUyxLQUFLLE9BQU8sU0FBUyxnQkFDOUIsU0FBUyxDQUFPLFVBQVU7QUFDekIsV0FBSyxPQUFPLFNBQVMsaUJBQWlCO0FBQ3RDLFlBQU0sS0FBSyxPQUFPO0FBQ2xCLFdBQUs7QUFFTCxXQUFLLE9BQU87QUFBQTtBQUFBO0FBQUE7OztBQ3pKeEIsdUJBQXdCO0FBRWpCLElBQU0sUUFBZ0M7QUFBQSxFQUMzQyxXQUFXO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFZTixJQUFNLFdBQVcsTUFBWTtBQUNsQyxTQUFPLEtBQUssT0FBTyxRQUFRLENBQUMsUUFBUTtBQUNsQyxrQ0FBUSxLQUFLLE1BQU07QUFBQTtBQUFBOzs7QUNqQnZCLHVCQUF5RDs7O0FDV3pELHVCQUF1QjtBQUNyQixTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsSUFDVCxRQUFRO0FBQUEsSUFDUixZQUFZO0FBQUEsSUFDWixLQUFLO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxjQUFjO0FBQUEsSUFDZCxXQUFXO0FBQUEsSUFDWCxZQUFZO0FBQUEsSUFDWixRQUFRO0FBQUEsSUFDUixVQUFVO0FBQUEsSUFDVixVQUFVO0FBQUEsSUFDVixVQUFVO0FBQUEsSUFDVixXQUFXO0FBQUEsSUFDWCxRQUFRO0FBQUEsSUFDUixZQUFZO0FBQUEsSUFDWixhQUFhO0FBQUEsSUFDYixXQUFXO0FBQUEsSUFDWCxZQUFZO0FBQUEsSUFDWixPQUFPO0FBQUE7QUFBQTtBQUlYLElBQUksV0FBVztBQUVmLHdCQUF3QixhQUFhO0FBQ25DLGFBQVc7QUFBQTtBQU1iLElBQU0sYUFBYTtBQUNuQixJQUFNLGdCQUFnQjtBQUN0QixJQUFNLHFCQUFxQjtBQUMzQixJQUFNLHdCQUF3QjtBQUM5QixJQUFNLHFCQUFxQjtBQUFBLEVBQ3pCLEtBQUs7QUFBQSxFQUNMLEtBQUs7QUFBQSxFQUNMLEtBQUs7QUFBQSxFQUNMLEtBQUs7QUFBQSxFQUNMLEtBQUs7QUFBQTtBQUVQLElBQU0sdUJBQXVCLENBQUMsT0FBTyxtQkFBbUI7QUFDeEQsaUJBQWdCLE1BQU0sUUFBUTtBQUM1QixNQUFJLFFBQVE7QUFDVixRQUFJLFdBQVcsS0FBSyxPQUFPO0FBQ3pCLGFBQU8sS0FBSyxRQUFRLGVBQWU7QUFBQTtBQUFBLFNBRWhDO0FBQ0wsUUFBSSxtQkFBbUIsS0FBSyxPQUFPO0FBQ2pDLGFBQU8sS0FBSyxRQUFRLHVCQUF1QjtBQUFBO0FBQUE7QUFJL0MsU0FBTztBQUFBO0FBR1QsSUFBTSxlQUFlO0FBRXJCLGtCQUFrQixNQUFNO0FBRXRCLFNBQU8sS0FBSyxRQUFRLGNBQWMsQ0FBQyxHQUFHLE1BQU07QUFDMUMsUUFBSSxFQUFFO0FBQ04sUUFBSSxNQUFNO0FBQVMsYUFBTztBQUMxQixRQUFJLEVBQUUsT0FBTyxPQUFPLEtBQUs7QUFDdkIsYUFBTyxFQUFFLE9BQU8sT0FBTyxNQUNuQixPQUFPLGFBQWEsU0FBUyxFQUFFLFVBQVUsSUFBSSxPQUM3QyxPQUFPLGFBQWEsQ0FBQyxFQUFFLFVBQVU7QUFBQTtBQUV2QyxXQUFPO0FBQUE7QUFBQTtBQUlYLElBQU0sUUFBUTtBQUNkLGNBQWMsT0FBTyxLQUFLO0FBQ3hCLFVBQVEsTUFBTSxVQUFVO0FBQ3hCLFFBQU0sT0FBTztBQUNiLFFBQU0sTUFBTTtBQUFBLElBQ1YsU0FBUyxDQUFDLE1BQU0sUUFBUTtBQUN0QixZQUFNLElBQUksVUFBVTtBQUNwQixZQUFNLElBQUksUUFBUSxPQUFPO0FBQ3pCLGNBQVEsTUFBTSxRQUFRLE1BQU07QUFDNUIsYUFBTztBQUFBO0FBQUEsSUFFVCxVQUFVLE1BQU07QUFDZCxhQUFPLElBQUksT0FBTyxPQUFPO0FBQUE7QUFBQTtBQUc3QixTQUFPO0FBQUE7QUFHVCxJQUFNLHNCQUFzQjtBQUM1QixJQUFNLHVCQUF1QjtBQUM3QixrQkFBa0IsVUFBVSxNQUFNLE1BQU07QUFDdEMsTUFBSSxVQUFVO0FBQ1osUUFBSTtBQUNKLFFBQUk7QUFDRixhQUFPLG1CQUFtQixTQUFTLE9BQ2hDLFFBQVEscUJBQXFCLElBQzdCO0FBQUEsYUFDSSxHQUFQO0FBQ0EsYUFBTztBQUFBO0FBRVQsUUFBSSxLQUFLLFFBQVEsbUJBQW1CLEtBQUssS0FBSyxRQUFRLGlCQUFpQixLQUFLLEtBQUssUUFBUSxhQUFhLEdBQUc7QUFDdkcsYUFBTztBQUFBO0FBQUE7QUFHWCxNQUFJLFFBQVEsQ0FBQyxxQkFBcUIsS0FBSyxPQUFPO0FBQzVDLFdBQU8sV0FBVyxNQUFNO0FBQUE7QUFFMUIsTUFBSTtBQUNGLFdBQU8sVUFBVSxNQUFNLFFBQVEsUUFBUTtBQUFBLFdBQ2hDLEdBQVA7QUFDQSxXQUFPO0FBQUE7QUFFVCxTQUFPO0FBQUE7QUFHVCxJQUFNLFdBQVc7QUFDakIsSUFBTSxhQUFhO0FBQ25CLElBQU0sV0FBVztBQUNqQixJQUFNLFNBQVM7QUFFZixvQkFBb0IsTUFBTSxNQUFNO0FBQzlCLE1BQUksQ0FBQyxTQUFTLE1BQU0sT0FBTztBQUl6QixRQUFJLFdBQVcsS0FBSyxPQUFPO0FBQ3pCLGVBQVMsTUFBTSxRQUFRLE9BQU87QUFBQSxXQUN6QjtBQUNMLGVBQVMsTUFBTSxRQUFRLE1BQU0sTUFBTSxLQUFLO0FBQUE7QUFBQTtBQUc1QyxTQUFPLFNBQVMsTUFBTTtBQUN0QixRQUFNLGVBQWUsS0FBSyxRQUFRLFNBQVM7QUFFM0MsTUFBSSxLQUFLLFVBQVUsR0FBRyxPQUFPLE1BQU07QUFDakMsUUFBSSxjQUFjO0FBQ2hCLGFBQU87QUFBQTtBQUVULFdBQU8sS0FBSyxRQUFRLFVBQVUsUUFBUTtBQUFBLGFBQzdCLEtBQUssT0FBTyxPQUFPLEtBQUs7QUFDakMsUUFBSSxjQUFjO0FBQ2hCLGFBQU87QUFBQTtBQUVULFdBQU8sS0FBSyxRQUFRLFFBQVEsUUFBUTtBQUFBLFNBQy9CO0FBQ0wsV0FBTyxPQUFPO0FBQUE7QUFBQTtBQUlsQixJQUFNLFdBQVcsRUFBRSxNQUFNLHFCQUFvQjtBQUFBO0FBRTdDLGVBQWUsS0FBSztBQUNsQixNQUFJLElBQUksR0FDTixRQUNBO0FBRUYsU0FBTyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQ2hDLGFBQVMsVUFBVTtBQUNuQixTQUFLLE9BQU8sUUFBUTtBQUNsQixVQUFJLE9BQU8sVUFBVSxlQUFlLEtBQUssUUFBUSxNQUFNO0FBQ3JELFlBQUksT0FBTyxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBS3hCLFNBQU87QUFBQTtBQUdULG9CQUFvQixVQUFVLE9BQU87QUFHbkMsUUFBTSxNQUFNLFNBQVMsUUFBUSxPQUFPLENBQUMsUUFBTyxRQUFRLFFBQVE7QUFDeEQsUUFBSSxVQUFVLE9BQ1osT0FBTztBQUNULFdBQU8sRUFBRSxRQUFRLEtBQUssSUFBSSxVQUFVO0FBQU0sZ0JBQVUsQ0FBQztBQUNyRCxRQUFJLFNBQVM7QUFHWCxhQUFPO0FBQUEsV0FDRjtBQUVMLGFBQU87QUFBQTtBQUFBLE1BR1gsUUFBUSxJQUFJLE1BQU07QUFDcEIsTUFBSSxJQUFJO0FBR1IsTUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRO0FBQUUsVUFBTTtBQUFBO0FBQzlCLE1BQUksTUFBTSxTQUFTLEtBQUssQ0FBQyxNQUFNLE1BQU0sU0FBUyxHQUFHLFFBQVE7QUFBRSxVQUFNO0FBQUE7QUFFakUsTUFBSSxNQUFNLFNBQVMsT0FBTztBQUN4QixVQUFNLE9BQU87QUFBQSxTQUNSO0FBQ0wsV0FBTyxNQUFNLFNBQVM7QUFBTyxZQUFNLEtBQUs7QUFBQTtBQUcxQyxTQUFPLElBQUksTUFBTSxRQUFRLEtBQUs7QUFFNUIsVUFBTSxLQUFLLE1BQU0sR0FBRyxPQUFPLFFBQVEsU0FBUztBQUFBO0FBRTlDLFNBQU87QUFBQTtBQU1ULGVBQWUsS0FBSyxHQUFHLFFBQVE7QUFDN0IsUUFBTSxJQUFJLElBQUk7QUFDZCxNQUFJLE1BQU0sR0FBRztBQUNYLFdBQU87QUFBQTtBQUlULE1BQUksVUFBVTtBQUdkLFNBQU8sVUFBVSxHQUFHO0FBQ2xCLFVBQU0sV0FBVyxJQUFJLE9BQU8sSUFBSSxVQUFVO0FBQzFDLFFBQUksYUFBYSxLQUFLLENBQUMsUUFBUTtBQUM3QjtBQUFBLGVBQ1MsYUFBYSxLQUFLLFFBQVE7QUFDbkM7QUFBQSxXQUNLO0FBQ0w7QUFBQTtBQUFBO0FBSUosU0FBTyxJQUFJLE9BQU8sR0FBRyxJQUFJO0FBQUE7QUFHM0IsNEJBQTRCLEtBQUssR0FBRztBQUNsQyxNQUFJLElBQUksUUFBUSxFQUFFLFFBQVEsSUFBSTtBQUM1QixXQUFPO0FBQUE7QUFFVCxRQUFNLElBQUksSUFBSTtBQUNkLE1BQUksUUFBUSxHQUNWLElBQUk7QUFDTixTQUFPLElBQUksR0FBRyxLQUFLO0FBQ2pCLFFBQUksSUFBSSxPQUFPLE1BQU07QUFDbkI7QUFBQSxlQUNTLElBQUksT0FBTyxFQUFFLElBQUk7QUFDMUI7QUFBQSxlQUNTLElBQUksT0FBTyxFQUFFLElBQUk7QUFDMUI7QUFDQSxVQUFJLFFBQVEsR0FBRztBQUNiLGVBQU87QUFBQTtBQUFBO0FBQUE7QUFJYixTQUFPO0FBQUE7QUFHVCxrQ0FBa0MsS0FBSztBQUNyQyxNQUFJLE9BQU8sSUFBSSxZQUFZLENBQUMsSUFBSSxRQUFRO0FBQ3RDLFlBQVEsS0FBSztBQUFBO0FBQUE7QUFLakIsc0JBQXNCLFNBQVMsT0FBTztBQUNwQyxNQUFJLFFBQVEsR0FBRztBQUNiLFdBQU87QUFBQTtBQUVULE1BQUksU0FBUztBQUNiLFNBQU8sUUFBUSxHQUFHO0FBQ2hCLFFBQUksUUFBUSxHQUFHO0FBQ2IsZ0JBQVU7QUFBQTtBQUVaLGNBQVU7QUFDVixlQUFXO0FBQUE7QUFFYixTQUFPLFNBQVM7QUFBQTtBQUdsQixvQkFBb0IsS0FBSyxNQUFNLEtBQUssUUFBTztBQUN6QyxRQUFNLE9BQU8sS0FBSztBQUNsQixRQUFNLFFBQVEsS0FBSyxRQUFRLFFBQU8sS0FBSyxTQUFTO0FBQ2hELFFBQU0sT0FBTyxJQUFJLEdBQUcsUUFBUSxlQUFlO0FBRTNDLE1BQUksSUFBSSxHQUFHLE9BQU8sT0FBTyxLQUFLO0FBQzVCLFdBQU0sTUFBTSxTQUFTO0FBQ3JCLFVBQU0sUUFBUTtBQUFBLE1BQ1osTUFBTTtBQUFBLE1BQ047QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVEsT0FBTSxhQUFhLE1BQU07QUFBQTtBQUVuQyxXQUFNLE1BQU0sU0FBUztBQUNyQixXQUFPO0FBQUEsU0FDRjtBQUNMLFdBQU87QUFBQSxNQUNMLE1BQU07QUFBQSxNQUNOO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLE1BQU0sUUFBTztBQUFBO0FBQUE7QUFBQTtBQUtuQixnQ0FBZ0MsS0FBSyxNQUFNO0FBQ3pDLFFBQU0sb0JBQW9CLElBQUksTUFBTTtBQUVwQyxNQUFJLHNCQUFzQixNQUFNO0FBQzlCLFdBQU87QUFBQTtBQUdULFFBQU0sZUFBZSxrQkFBa0I7QUFFdkMsU0FBTyxLQUNKLE1BQU0sTUFDTixJQUFJLFVBQVE7QUFDWCxVQUFNLG9CQUFvQixLQUFLLE1BQU07QUFDckMsUUFBSSxzQkFBc0IsTUFBTTtBQUM5QixhQUFPO0FBQUE7QUFHVCxVQUFNLENBQUMsZ0JBQWdCO0FBRXZCLFFBQUksYUFBYSxVQUFVLGFBQWEsUUFBUTtBQUM5QyxhQUFPLEtBQUssTUFBTSxhQUFhO0FBQUE7QUFHakMsV0FBTztBQUFBLEtBRVIsS0FBSztBQUFBO0FBTVYsc0JBQWdCO0FBQUEsRUFDZCxZQUFZLFVBQVM7QUFDbkIsU0FBSyxVQUFVLFlBQVc7QUFBQTtBQUFBLEVBRzVCLE1BQU0sS0FBSztBQUNULFVBQU0sTUFBTSxLQUFLLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFDMUMsUUFBSSxPQUFPLElBQUksR0FBRyxTQUFTLEdBQUc7QUFDNUIsYUFBTztBQUFBLFFBQ0wsTUFBTTtBQUFBLFFBQ04sS0FBSyxJQUFJO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLZixLQUFLLEtBQUs7QUFDUixVQUFNLE1BQU0sS0FBSyxNQUFNLE1BQU0sS0FBSyxLQUFLO0FBQ3ZDLFFBQUksS0FBSztBQUNQLFlBQU0sT0FBTyxJQUFJLEdBQUcsUUFBUSxhQUFhO0FBQ3pDLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLEtBQUssSUFBSTtBQUFBLFFBQ1QsZ0JBQWdCO0FBQUEsUUFDaEIsTUFBTSxDQUFDLEtBQUssUUFBUSxXQUNoQixNQUFNLE1BQU0sUUFDWjtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1YsT0FBTyxLQUFLO0FBQ1YsVUFBTSxNQUFNLEtBQUssTUFBTSxNQUFNLE9BQU8sS0FBSztBQUN6QyxRQUFJLEtBQUs7QUFDUCxZQUFNLE1BQU0sSUFBSTtBQUNoQixZQUFNLE9BQU8sdUJBQXVCLEtBQUssSUFBSSxNQUFNO0FBRW5ELGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOO0FBQUEsUUFDQSxNQUFNLElBQUksS0FBSyxJQUFJLEdBQUcsU0FBUyxJQUFJO0FBQUEsUUFDbkM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtOLFFBQVEsS0FBSztBQUNYLFVBQU0sTUFBTSxLQUFLLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFDMUMsUUFBSSxLQUFLO0FBQ1AsVUFBSSxPQUFPLElBQUksR0FBRztBQUdsQixVQUFJLEtBQUssS0FBSyxPQUFPO0FBQ25CLGNBQU0sVUFBVSxNQUFNLE1BQU07QUFDNUIsWUFBSSxLQUFLLFFBQVEsVUFBVTtBQUN6QixpQkFBTyxRQUFRO0FBQUEsbUJBQ04sQ0FBQyxXQUFXLEtBQUssS0FBSyxVQUFVO0FBRXpDLGlCQUFPLFFBQVE7QUFBQTtBQUFBO0FBSW5CLFlBQU0sUUFBUTtBQUFBLFFBQ1osTUFBTTtBQUFBLFFBQ04sS0FBSyxJQUFJO0FBQUEsUUFDVCxPQUFPLElBQUksR0FBRztBQUFBLFFBQ2Q7QUFBQSxRQUNBLFFBQVE7QUFBQTtBQUVWLFdBQUssTUFBTSxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3BDLGFBQU87QUFBQTtBQUFBO0FBQUEsRUFJWCxHQUFHLEtBQUs7QUFDTixVQUFNLE1BQU0sS0FBSyxNQUFNLE1BQU0sR0FBRyxLQUFLO0FBQ3JDLFFBQUksS0FBSztBQUNQLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLEtBQUssSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2YsV0FBVyxLQUFLO0FBQ2QsVUFBTSxNQUFNLEtBQUssTUFBTSxNQUFNLFdBQVcsS0FBSztBQUM3QyxRQUFJLEtBQUs7QUFDUCxZQUFNLE9BQU8sSUFBSSxHQUFHLFFBQVEsWUFBWTtBQUV4QyxhQUFPO0FBQUEsUUFDTCxNQUFNO0FBQUEsUUFDTixLQUFLLElBQUk7QUFBQSxRQUNULFFBQVEsS0FBSyxNQUFNLFlBQVksTUFBTTtBQUFBLFFBQ3JDO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLTixLQUFLLEtBQUs7QUFDUixRQUFJLE1BQU0sS0FBSyxNQUFNLE1BQU0sS0FBSyxLQUFLO0FBQ3JDLFFBQUksS0FBSztBQUNQLFVBQUksS0FBSyxRQUFRLFdBQVcsUUFBUSxHQUFHLFdBQVcsbUJBQ2hELE1BQU0sVUFBVSxTQUFTLGNBQWM7QUFFekMsVUFBSSxPQUFPLElBQUksR0FBRztBQUNsQixZQUFNLFlBQVksS0FBSyxTQUFTO0FBRWhDLFlBQU0sT0FBTztBQUFBLFFBQ1gsTUFBTTtBQUFBLFFBQ04sS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBLFFBQ1QsT0FBTyxZQUFZLENBQUMsS0FBSyxNQUFNLEdBQUcsTUFBTTtBQUFBLFFBQ3hDLE9BQU87QUFBQSxRQUNQLE9BQU87QUFBQTtBQUdULGFBQU8sWUFBWSxhQUFhLEtBQUssTUFBTSxRQUFRLEtBQUs7QUFFeEQsVUFBSSxLQUFLLFFBQVEsVUFBVTtBQUN6QixlQUFPLFlBQVksT0FBTztBQUFBO0FBSTVCLFlBQU0sWUFBWSxJQUFJLE9BQU8sV0FBVztBQUd4QyxhQUFPLEtBQUs7QUFDVixtQkFBVztBQUNYLFlBQUksQ0FBRSxPQUFNLFVBQVUsS0FBSyxPQUFPO0FBQ2hDO0FBQUE7QUFHRixZQUFJLEtBQUssTUFBTSxNQUFNLEdBQUcsS0FBSyxNQUFNO0FBQ2pDO0FBQUE7QUFHRixjQUFNLElBQUk7QUFDVixjQUFNLElBQUksVUFBVSxJQUFJO0FBRXhCLGVBQU8sSUFBSSxHQUFHLE1BQU0sTUFBTSxHQUFHO0FBQzdCLG1CQUFXLElBQUksTUFBTSxNQUFNLEdBQUc7QUFFOUIsWUFBSSxLQUFLLFFBQVEsVUFBVTtBQUN6QixtQkFBUztBQUNULHlCQUFlLEtBQUs7QUFBQSxlQUNmO0FBQ0wsbUJBQVMsSUFBSSxHQUFHLE9BQU87QUFDdkIsbUJBQVMsU0FBUyxJQUFJLElBQUk7QUFDMUIseUJBQWUsS0FBSyxNQUFNO0FBQzFCLG9CQUFVLElBQUksR0FBRztBQUFBO0FBR25CLG9CQUFZO0FBRVosWUFBSSxDQUFDLFFBQVEsT0FBTyxLQUFLLFdBQVc7QUFDbEMsaUJBQU8sV0FBVztBQUNsQixnQkFBTSxJQUFJLFVBQVUsU0FBUyxTQUFTO0FBQ3RDLHFCQUFXO0FBQUE7QUFHYixZQUFJLENBQUMsVUFBVTtBQUNiLGdCQUFNLGtCQUFrQixJQUFJLE9BQU8sUUFBUSxLQUFLLElBQUksR0FBRyxTQUFTO0FBR2hFLGlCQUFPLEtBQUs7QUFDVixzQkFBVSxJQUFJLE1BQU0sTUFBTSxHQUFHO0FBQzdCLG1CQUFPO0FBR1AsZ0JBQUksS0FBSyxRQUFRLFVBQVU7QUFDekIscUJBQU8sS0FBSyxRQUFRLDJCQUEyQjtBQUFBO0FBSWpELGdCQUFJLGdCQUFnQixLQUFLLE9BQU87QUFDOUI7QUFBQTtBQUdGLGdCQUFJLEtBQUssT0FBTyxXQUFXLFVBQVUsQ0FBQyxLQUFLLFFBQVE7QUFDakQsOEJBQWdCLE9BQU8sS0FBSyxNQUFNO0FBQUEsdUJBQ3pCLENBQUMsV0FBVztBQUNyQiw4QkFBZ0IsT0FBTztBQUFBLG1CQUNsQjtBQUNMO0FBQUE7QUFHRixnQkFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLFFBQVE7QUFDOUIsMEJBQVk7QUFBQTtBQUdkLG1CQUFPLFVBQVU7QUFDakIsa0JBQU0sSUFBSSxVQUFVLFFBQVEsU0FBUztBQUFBO0FBQUE7QUFJekMsWUFBSSxDQUFDLEtBQUssT0FBTztBQUVmLGNBQUksbUJBQW1CO0FBQ3JCLGlCQUFLLFFBQVE7QUFBQSxxQkFDSixZQUFZLEtBQUssTUFBTTtBQUNoQyxnQ0FBb0I7QUFBQTtBQUFBO0FBS3hCLFlBQUksS0FBSyxRQUFRLEtBQUs7QUFDcEIsbUJBQVMsY0FBYyxLQUFLO0FBQzVCLGNBQUksUUFBUTtBQUNWLHdCQUFZLE9BQU8sT0FBTztBQUMxQiwyQkFBZSxhQUFhLFFBQVEsZ0JBQWdCO0FBQUE7QUFBQTtBQUl4RCxhQUFLLE1BQU0sS0FBSztBQUFBLFVBQ2QsTUFBTTtBQUFBLFVBQ047QUFBQSxVQUNBLE1BQU0sQ0FBQyxDQUFDO0FBQUEsVUFDUixTQUFTO0FBQUEsVUFDVCxPQUFPO0FBQUEsVUFDUCxNQUFNO0FBQUE7QUFHUixhQUFLLE9BQU87QUFBQTtBQUlkLFdBQUssTUFBTSxLQUFLLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSTtBQUM1QyxXQUFLLE1BQU0sS0FBSyxNQUFNLFNBQVMsR0FBRyxPQUFPLGFBQWE7QUFDdEQsV0FBSyxNQUFNLEtBQUssSUFBSTtBQUVwQixZQUFNLElBQUksS0FBSyxNQUFNO0FBR3JCLFdBQUssSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLO0FBQ3RCLGFBQUssTUFBTSxNQUFNLE1BQU07QUFDdkIsYUFBSyxNQUFNLEdBQUcsU0FBUyxLQUFLLE1BQU0sWUFBWSxLQUFLLE1BQU0sR0FBRyxNQUFNO0FBQ2xFLGNBQU0sVUFBVSxLQUFLLE1BQU0sR0FBRyxPQUFPLE9BQU8sT0FBSyxFQUFFLFNBQVM7QUFDNUQsY0FBTSx3QkFBd0IsUUFBUSxNQUFNLE9BQUs7QUFDL0MsZ0JBQU0sUUFBUSxFQUFFLElBQUksTUFBTTtBQUMxQixjQUFJLGFBQWE7QUFDakIscUJBQVcsUUFBUSxPQUFPO0FBQ3hCLGdCQUFJLFNBQVMsTUFBTTtBQUNqQiw0QkFBYztBQUFBO0FBRWhCLGdCQUFJLGFBQWEsR0FBRztBQUNsQixxQkFBTztBQUFBO0FBQUE7QUFJWCxpQkFBTztBQUFBO0FBR1QsWUFBSSxDQUFDLEtBQUssU0FBUyxRQUFRLFVBQVUsdUJBQXVCO0FBRTFELGVBQUssUUFBUTtBQUNiLGVBQUssTUFBTSxHQUFHLFFBQVE7QUFBQTtBQUFBO0FBSTFCLGFBQU87QUFBQTtBQUFBO0FBQUEsRUFJWCxLQUFLLEtBQUs7QUFDUixVQUFNLE1BQU0sS0FBSyxNQUFNLE1BQU0sS0FBSyxLQUFLO0FBQ3ZDLFFBQUksS0FBSztBQUNQLFlBQU0sUUFBUTtBQUFBLFFBQ1osTUFBTTtBQUFBLFFBQ04sS0FBSyxJQUFJO0FBQUEsUUFDVCxLQUFLLENBQUMsS0FBSyxRQUFRLGFBQ2IsS0FBSSxPQUFPLFNBQVMsSUFBSSxPQUFPLFlBQVksSUFBSSxPQUFPO0FBQUEsUUFDNUQsTUFBTSxJQUFJO0FBQUE7QUFFWixVQUFJLEtBQUssUUFBUSxVQUFVO0FBQ3pCLGNBQU0sT0FBTztBQUNiLGNBQU0sT0FBTyxLQUFLLFFBQVEsWUFBWSxLQUFLLFFBQVEsVUFBVSxJQUFJLE1BQU0sUUFBTyxJQUFJO0FBQ2xGLGNBQU0sU0FBUztBQUNmLGFBQUssTUFBTSxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQUE7QUFFdEMsYUFBTztBQUFBO0FBQUE7QUFBQSxFQUlYLElBQUksS0FBSztBQUNQLFVBQU0sTUFBTSxLQUFLLE1BQU0sTUFBTSxJQUFJLEtBQUs7QUFDdEMsUUFBSSxLQUFLO0FBQ1AsVUFBSSxJQUFJO0FBQUksWUFBSSxLQUFLLElBQUksR0FBRyxVQUFVLEdBQUcsSUFBSSxHQUFHLFNBQVM7QUFDekQsWUFBTSxNQUFNLElBQUksR0FBRyxjQUFjLFFBQVEsUUFBUTtBQUNqRCxhQUFPO0FBQUEsUUFDTCxNQUFNO0FBQUEsUUFDTjtBQUFBLFFBQ0EsS0FBSyxJQUFJO0FBQUEsUUFDVCxNQUFNLElBQUk7QUFBQSxRQUNWLE9BQU8sSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2pCLE1BQU0sS0FBSztBQUNULFVBQU0sTUFBTSxLQUFLLE1BQU0sTUFBTSxNQUFNLEtBQUs7QUFDeEMsUUFBSSxLQUFLO0FBQ1AsWUFBTSxPQUFPO0FBQUEsUUFDWCxNQUFNO0FBQUEsUUFDTixRQUFRLFdBQVcsSUFBSSxJQUFJLElBQUksT0FBSztBQUFFLGlCQUFPLEVBQUUsTUFBTTtBQUFBO0FBQUEsUUFDckQsT0FBTyxJQUFJLEdBQUcsUUFBUSxjQUFjLElBQUksTUFBTTtBQUFBLFFBQzlDLE1BQU0sSUFBSSxNQUFNLElBQUksR0FBRyxTQUFTLElBQUksR0FBRyxRQUFRLGFBQWEsSUFBSSxNQUFNLFFBQVE7QUFBQTtBQUdoRixVQUFJLEtBQUssT0FBTyxXQUFXLEtBQUssTUFBTSxRQUFRO0FBQzVDLGFBQUssTUFBTSxJQUFJO0FBRWYsWUFBSSxJQUFJLEtBQUssTUFBTTtBQUNuQixZQUFJLEdBQUcsR0FBRyxHQUFHO0FBQ2IsYUFBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDdEIsY0FBSSxZQUFZLEtBQUssS0FBSyxNQUFNLEtBQUs7QUFDbkMsaUJBQUssTUFBTSxLQUFLO0FBQUEscUJBQ1AsYUFBYSxLQUFLLEtBQUssTUFBTSxLQUFLO0FBQzNDLGlCQUFLLE1BQU0sS0FBSztBQUFBLHFCQUNQLFlBQVksS0FBSyxLQUFLLE1BQU0sS0FBSztBQUMxQyxpQkFBSyxNQUFNLEtBQUs7QUFBQSxpQkFDWDtBQUNMLGlCQUFLLE1BQU0sS0FBSztBQUFBO0FBQUE7QUFJcEIsWUFBSSxLQUFLLEtBQUs7QUFDZCxhQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSztBQUN0QixlQUFLLEtBQUssS0FBSyxXQUFXLEtBQUssS0FBSyxJQUFJLEtBQUssT0FBTyxRQUFRLElBQUksT0FBSztBQUFFLG1CQUFPLEVBQUUsTUFBTTtBQUFBO0FBQUE7QUFNeEYsWUFBSSxLQUFLLE9BQU87QUFDaEIsYUFBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDdEIsZUFBSyxPQUFPLEdBQUcsU0FBUztBQUN4QixlQUFLLE1BQU0sYUFBYSxLQUFLLE9BQU8sR0FBRyxNQUFNLEtBQUssT0FBTyxHQUFHO0FBQUE7QUFJOUQsWUFBSSxLQUFLLEtBQUs7QUFDZCxhQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSztBQUN0QixnQkFBTSxLQUFLLEtBQUs7QUFDaEIsZUFBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLFFBQVEsS0FBSztBQUMvQixnQkFBSSxHQUFHLFNBQVM7QUFDaEIsaUJBQUssTUFBTSxhQUFhLElBQUksR0FBRyxNQUFNLElBQUksR0FBRztBQUFBO0FBQUE7QUFJaEQsZUFBTztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2IsU0FBUyxLQUFLO0FBQ1osVUFBTSxNQUFNLEtBQUssTUFBTSxNQUFNLFNBQVMsS0FBSztBQUMzQyxRQUFJLEtBQUs7QUFDUCxZQUFNLFFBQVE7QUFBQSxRQUNaLE1BQU07QUFBQSxRQUNOLEtBQUssSUFBSTtBQUFBLFFBQ1QsT0FBTyxJQUFJLEdBQUcsT0FBTyxPQUFPLE1BQU0sSUFBSTtBQUFBLFFBQ3RDLE1BQU0sSUFBSTtBQUFBLFFBQ1YsUUFBUTtBQUFBO0FBRVYsV0FBSyxNQUFNLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDcEMsYUFBTztBQUFBO0FBQUE7QUFBQSxFQUlYLFVBQVUsS0FBSztBQUNiLFVBQU0sTUFBTSxLQUFLLE1BQU0sTUFBTSxVQUFVLEtBQUs7QUFDNUMsUUFBSSxLQUFLO0FBQ1AsWUFBTSxRQUFRO0FBQUEsUUFDWixNQUFNO0FBQUEsUUFDTixLQUFLLElBQUk7QUFBQSxRQUNULE1BQU0sSUFBSSxHQUFHLE9BQU8sSUFBSSxHQUFHLFNBQVMsT0FBTyxPQUN2QyxJQUFJLEdBQUcsTUFBTSxHQUFHLE1BQ2hCLElBQUk7QUFBQSxRQUNSLFFBQVE7QUFBQTtBQUVWLFdBQUssTUFBTSxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3BDLGFBQU87QUFBQTtBQUFBO0FBQUEsRUFJWCxLQUFLLEtBQUs7QUFDUixVQUFNLE1BQU0sS0FBSyxNQUFNLE1BQU0sS0FBSyxLQUFLO0FBQ3ZDLFFBQUksS0FBSztBQUNQLFlBQU0sUUFBUTtBQUFBLFFBQ1osTUFBTTtBQUFBLFFBQ04sS0FBSyxJQUFJO0FBQUEsUUFDVCxNQUFNLElBQUk7QUFBQSxRQUNWLFFBQVE7QUFBQTtBQUVWLFdBQUssTUFBTSxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3BDLGFBQU87QUFBQTtBQUFBO0FBQUEsRUFJWCxPQUFPLEtBQUs7QUFDVixVQUFNLE1BQU0sS0FBSyxNQUFNLE9BQU8sT0FBTyxLQUFLO0FBQzFDLFFBQUksS0FBSztBQUNQLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLEtBQUssSUFBSTtBQUFBLFFBQ1QsTUFBTSxRQUFPLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUt2QixJQUFJLEtBQUs7QUFDUCxVQUFNLE1BQU0sS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLO0FBQ3ZDLFFBQUksS0FBSztBQUNQLFVBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxVQUFVLFFBQVEsS0FBSyxJQUFJLEtBQUs7QUFDcEQsYUFBSyxNQUFNLE1BQU0sU0FBUztBQUFBLGlCQUNqQixLQUFLLE1BQU0sTUFBTSxVQUFVLFVBQVUsS0FBSyxJQUFJLEtBQUs7QUFDNUQsYUFBSyxNQUFNLE1BQU0sU0FBUztBQUFBO0FBRTVCLFVBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxjQUFjLGlDQUFpQyxLQUFLLElBQUksS0FBSztBQUNqRixhQUFLLE1BQU0sTUFBTSxhQUFhO0FBQUEsaUJBQ3JCLEtBQUssTUFBTSxNQUFNLGNBQWMsbUNBQW1DLEtBQUssSUFBSSxLQUFLO0FBQ3pGLGFBQUssTUFBTSxNQUFNLGFBQWE7QUFBQTtBQUdoQyxhQUFPO0FBQUEsUUFDTCxNQUFNLEtBQUssUUFBUSxXQUNmLFNBQ0E7QUFBQSxRQUNKLEtBQUssSUFBSTtBQUFBLFFBQ1QsUUFBUSxLQUFLLE1BQU0sTUFBTTtBQUFBLFFBQ3pCLFlBQVksS0FBSyxNQUFNLE1BQU07QUFBQSxRQUM3QixNQUFNLEtBQUssUUFBUSxXQUNkLEtBQUssUUFBUSxZQUNaLEtBQUssUUFBUSxVQUFVLElBQUksTUFDM0IsUUFBTyxJQUFJLE1BQ2IsSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2QsS0FBSyxLQUFLO0FBQ1IsVUFBTSxNQUFNLEtBQUssTUFBTSxPQUFPLEtBQUssS0FBSztBQUN4QyxRQUFJLEtBQUs7QUFDUCxZQUFNLGFBQWEsSUFBSSxHQUFHO0FBQzFCLFVBQUksQ0FBQyxLQUFLLFFBQVEsWUFBWSxLQUFLLEtBQUssYUFBYTtBQUVuRCxZQUFJLENBQUUsS0FBSyxLQUFLLGFBQWM7QUFDNUI7QUFBQTtBQUlGLGNBQU0sYUFBYSxNQUFNLFdBQVcsTUFBTSxHQUFHLEtBQUs7QUFDbEQsWUFBSyxZQUFXLFNBQVMsV0FBVyxVQUFVLE1BQU0sR0FBRztBQUNyRDtBQUFBO0FBQUEsYUFFRztBQUVMLGNBQU0saUJBQWlCLG1CQUFtQixJQUFJLElBQUk7QUFDbEQsWUFBSSxpQkFBaUIsSUFBSTtBQUN2QixnQkFBTSxRQUFRLElBQUksR0FBRyxRQUFRLFNBQVMsSUFBSSxJQUFJO0FBQzlDLGdCQUFNLFVBQVUsUUFBUSxJQUFJLEdBQUcsU0FBUztBQUN4QyxjQUFJLEtBQUssSUFBSSxHQUFHLFVBQVUsR0FBRztBQUM3QixjQUFJLEtBQUssSUFBSSxHQUFHLFVBQVUsR0FBRyxTQUFTO0FBQ3RDLGNBQUksS0FBSztBQUFBO0FBQUE7QUFHYixVQUFJLE9BQU8sSUFBSTtBQUNmLFVBQUksUUFBUTtBQUNaLFVBQUksS0FBSyxRQUFRLFVBQVU7QUFFekIsY0FBTSxPQUFPLGdDQUFnQyxLQUFLO0FBRWxELFlBQUksTUFBTTtBQUNSLGlCQUFPLEtBQUs7QUFDWixrQkFBUSxLQUFLO0FBQUE7QUFBQSxhQUVWO0FBQ0wsZ0JBQVEsSUFBSSxLQUFLLElBQUksR0FBRyxNQUFNLEdBQUcsTUFBTTtBQUFBO0FBR3pDLGFBQU8sS0FBSztBQUNaLFVBQUksS0FBSyxLQUFLLE9BQU87QUFDbkIsWUFBSSxLQUFLLFFBQVEsWUFBWSxDQUFFLEtBQUssS0FBSyxhQUFjO0FBRXJELGlCQUFPLEtBQUssTUFBTTtBQUFBLGVBQ2I7QUFDTCxpQkFBTyxLQUFLLE1BQU0sR0FBRztBQUFBO0FBQUE7QUFHekIsYUFBTyxXQUFXLEtBQUs7QUFBQSxRQUNyQixNQUFNLE9BQU8sS0FBSyxRQUFRLEtBQUssTUFBTSxPQUFPLFVBQVUsUUFBUTtBQUFBLFFBQzlELE9BQU8sUUFBUSxNQUFNLFFBQVEsS0FBSyxNQUFNLE9BQU8sVUFBVSxRQUFRO0FBQUEsU0FDaEUsSUFBSSxJQUFJLEtBQUs7QUFBQTtBQUFBO0FBQUEsRUFJcEIsUUFBUSxLQUFLLE9BQU87QUFDbEIsUUFBSTtBQUNKLFFBQUssT0FBTSxLQUFLLE1BQU0sT0FBTyxRQUFRLEtBQUssU0FDbEMsT0FBTSxLQUFLLE1BQU0sT0FBTyxPQUFPLEtBQUssT0FBTztBQUNqRCxVQUFJLE9BQVEsS0FBSSxNQUFNLElBQUksSUFBSSxRQUFRLFFBQVE7QUFDOUMsYUFBTyxNQUFNLEtBQUs7QUFDbEIsVUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLE1BQU07QUFDdkIsY0FBTSxPQUFPLElBQUksR0FBRyxPQUFPO0FBQzNCLGVBQU87QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLEtBQUs7QUFBQSxVQUNMO0FBQUE7QUFBQTtBQUdKLGFBQU8sV0FBVyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUs7QUFBQTtBQUFBO0FBQUEsRUFJOUMsU0FBUyxLQUFLLFdBQVcsV0FBVyxJQUFJO0FBQ3RDLFFBQUksU0FBUSxLQUFLLE1BQU0sT0FBTyxTQUFTLE9BQU8sS0FBSztBQUNuRCxRQUFJLENBQUM7QUFBTztBQUdaLFFBQUksT0FBTSxNQUFNLFNBQVMsTUFBTTtBQUFrQjtBQUVqRCxVQUFNLFdBQVcsT0FBTSxNQUFNLE9BQU0sTUFBTTtBQUV6QyxRQUFJLENBQUMsWUFBYSxZQUFhLGNBQWEsTUFBTSxLQUFLLE1BQU0sT0FBTyxZQUFZLEtBQUssWUFBYTtBQUNoRyxZQUFNLFVBQVUsT0FBTSxHQUFHLFNBQVM7QUFDbEMsVUFBSSxRQUFRLFNBQVMsYUFBYSxTQUFTLGdCQUFnQjtBQUUzRCxZQUFNLFNBQVMsT0FBTSxHQUFHLE9BQU8sTUFBTSxLQUFLLE1BQU0sT0FBTyxTQUFTLFlBQVksS0FBSyxNQUFNLE9BQU8sU0FBUztBQUN2RyxhQUFPLFlBQVk7QUFHbkIsa0JBQVksVUFBVSxNQUFNLEtBQUssSUFBSSxTQUFTO0FBRTlDLGFBQVEsVUFBUSxPQUFPLEtBQUssZUFBZSxNQUFNO0FBQy9DLGlCQUFTLE9BQU0sTUFBTSxPQUFNLE1BQU0sT0FBTSxNQUFNLE9BQU0sTUFBTSxPQUFNLE1BQU0sT0FBTTtBQUUzRSxZQUFJLENBQUM7QUFBUTtBQUViLGtCQUFVLE9BQU87QUFFakIsWUFBSSxPQUFNLE1BQU0sT0FBTSxJQUFJO0FBQ3hCLHdCQUFjO0FBQ2Q7QUFBQSxtQkFDUyxPQUFNLE1BQU0sT0FBTSxJQUFJO0FBQy9CLGNBQUksVUFBVSxLQUFLLENBQUcsWUFBVSxXQUFXLElBQUk7QUFDN0MsNkJBQWlCO0FBQ2pCO0FBQUE7QUFBQTtBQUlKLHNCQUFjO0FBRWQsWUFBSSxhQUFhO0FBQUc7QUFHcEIsa0JBQVUsS0FBSyxJQUFJLFNBQVMsVUFBVSxhQUFhO0FBR25ELFlBQUksS0FBSyxJQUFJLFNBQVMsV0FBVyxHQUFHO0FBQ2xDLGdCQUFNLFFBQU8sSUFBSSxNQUFNLEdBQUcsVUFBVSxPQUFNLFFBQVE7QUFDbEQsaUJBQU87QUFBQSxZQUNMLE1BQU07QUFBQSxZQUNOLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxPQUFNLFFBQVEsVUFBVTtBQUFBLFlBQ3BEO0FBQUEsWUFDQSxRQUFRLEtBQUssTUFBTSxhQUFhLE9BQU07QUFBQTtBQUFBO0FBSzFDLGNBQU0sT0FBTyxJQUFJLE1BQU0sR0FBRyxVQUFVLE9BQU0sUUFBUSxVQUFVO0FBQzVELGVBQU87QUFBQSxVQUNMLE1BQU07QUFBQSxVQUNOLEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxPQUFNLFFBQVEsVUFBVTtBQUFBLFVBQ3BEO0FBQUEsVUFDQSxRQUFRLEtBQUssTUFBTSxhQUFhLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTTlDLFNBQVMsS0FBSztBQUNaLFVBQU0sTUFBTSxLQUFLLE1BQU0sT0FBTyxLQUFLLEtBQUs7QUFDeEMsUUFBSSxLQUFLO0FBQ1AsVUFBSSxPQUFPLElBQUksR0FBRyxRQUFRLE9BQU87QUFDakMsWUFBTSxtQkFBbUIsT0FBTyxLQUFLO0FBQ3JDLFlBQU0sMEJBQTBCLEtBQUssS0FBSyxTQUFTLEtBQUssS0FBSztBQUM3RCxVQUFJLG9CQUFvQix5QkFBeUI7QUFDL0MsZUFBTyxLQUFLLFVBQVUsR0FBRyxLQUFLLFNBQVM7QUFBQTtBQUV6QyxhQUFPLFFBQU8sTUFBTTtBQUNwQixhQUFPO0FBQUEsUUFDTCxNQUFNO0FBQUEsUUFDTixLQUFLLElBQUk7QUFBQSxRQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLTixHQUFHLEtBQUs7QUFDTixVQUFNLE1BQU0sS0FBSyxNQUFNLE9BQU8sR0FBRyxLQUFLO0FBQ3RDLFFBQUksS0FBSztBQUNQLGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLEtBQUssSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2YsSUFBSSxLQUFLO0FBQ1AsVUFBTSxNQUFNLEtBQUssTUFBTSxPQUFPLElBQUksS0FBSztBQUN2QyxRQUFJLEtBQUs7QUFDUCxhQUFPO0FBQUEsUUFDTCxNQUFNO0FBQUEsUUFDTixLQUFLLElBQUk7QUFBQSxRQUNULE1BQU0sSUFBSTtBQUFBLFFBQ1YsUUFBUSxLQUFLLE1BQU0sYUFBYSxJQUFJLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUs5QyxTQUFTLEtBQUssU0FBUTtBQUNwQixVQUFNLE1BQU0sS0FBSyxNQUFNLE9BQU8sU0FBUyxLQUFLO0FBQzVDLFFBQUksS0FBSztBQUNQLFVBQUksTUFBTTtBQUNWLFVBQUksSUFBSSxPQUFPLEtBQUs7QUFDbEIsZUFBTyxRQUFPLEtBQUssUUFBUSxTQUFTLFFBQU8sSUFBSSxNQUFNLElBQUk7QUFDekQsZUFBTyxZQUFZO0FBQUEsYUFDZDtBQUNMLGVBQU8sUUFBTyxJQUFJO0FBQ2xCLGVBQU87QUFBQTtBQUdULGFBQU87QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLEtBQUssSUFBSTtBQUFBLFFBQ1Q7QUFBQSxRQUNBO0FBQUEsUUFDQSxRQUFRO0FBQUEsVUFDTjtBQUFBLFlBQ0UsTUFBTTtBQUFBLFlBQ04sS0FBSztBQUFBLFlBQ0w7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPVixJQUFJLEtBQUssU0FBUTtBQUNmLFFBQUk7QUFDSixRQUFJLE1BQU0sS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLLE1BQU07QUFDekMsVUFBSSxNQUFNO0FBQ1YsVUFBSSxJQUFJLE9BQU8sS0FBSztBQUNsQixlQUFPLFFBQU8sS0FBSyxRQUFRLFNBQVMsUUFBTyxJQUFJLE1BQU0sSUFBSTtBQUN6RCxlQUFPLFlBQVk7QUFBQSxhQUNkO0FBRUwsWUFBSTtBQUNKLFdBQUc7QUFDRCx3QkFBYyxJQUFJO0FBQ2xCLGNBQUksS0FBSyxLQUFLLE1BQU0sT0FBTyxXQUFXLEtBQUssSUFBSSxJQUFJO0FBQUEsaUJBQzVDLGdCQUFnQixJQUFJO0FBQzdCLGVBQU8sUUFBTyxJQUFJO0FBQ2xCLFlBQUksSUFBSSxPQUFPLFFBQVE7QUFDckIsaUJBQU8sWUFBWTtBQUFBLGVBQ2Q7QUFDTCxpQkFBTztBQUFBO0FBQUE7QUFHWCxhQUFPO0FBQUEsUUFDTCxNQUFNO0FBQUEsUUFDTixLQUFLLElBQUk7QUFBQSxRQUNUO0FBQUEsUUFDQTtBQUFBLFFBQ0EsUUFBUTtBQUFBLFVBQ047QUFBQSxZQUNFLE1BQU07QUFBQSxZQUNOLEtBQUs7QUFBQSxZQUNMO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT1YsV0FBVyxLQUFLLGNBQWE7QUFDM0IsVUFBTSxNQUFNLEtBQUssTUFBTSxPQUFPLEtBQUssS0FBSztBQUN4QyxRQUFJLEtBQUs7QUFDUCxVQUFJO0FBQ0osVUFBSSxLQUFLLE1BQU0sTUFBTSxZQUFZO0FBQy9CLGVBQU8sS0FBSyxRQUFRLFdBQVksS0FBSyxRQUFRLFlBQVksS0FBSyxRQUFRLFVBQVUsSUFBSSxNQUFNLFFBQU8sSUFBSSxNQUFPLElBQUk7QUFBQSxhQUMzRztBQUNMLGVBQU8sUUFBTyxLQUFLLFFBQVEsY0FBYyxhQUFZLElBQUksTUFBTSxJQUFJO0FBQUE7QUFFckUsYUFBTztBQUFBLFFBQ0wsTUFBTTtBQUFBLFFBQ04sS0FBSyxJQUFJO0FBQUEsUUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBU1IsSUFBTSxRQUFRO0FBQUEsRUFDWixTQUFTO0FBQUEsRUFDVCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixJQUFJO0FBQUEsRUFDSixTQUFTO0FBQUEsRUFDVCxZQUFZO0FBQUEsRUFDWixNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFVTixLQUFLO0FBQUEsRUFDTCxPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFHVixZQUFZO0FBQUEsRUFDWixNQUFNO0FBQUE7QUFHUixNQUFNLFNBQVM7QUFDZixNQUFNLFNBQVM7QUFDZixNQUFNLE1BQU0sS0FBSyxNQUFNLEtBQ3BCLFFBQVEsU0FBUyxNQUFNLFFBQ3ZCLFFBQVEsU0FBUyxNQUFNLFFBQ3ZCO0FBRUgsTUFBTSxTQUFTO0FBQ2YsTUFBTSxnQkFBZ0IsS0FBSyxpQkFDeEIsUUFBUSxRQUFRLE1BQU0sUUFDdEI7QUFFSCxNQUFNLE9BQU8sS0FBSyxNQUFNLE1BQ3JCLFFBQVEsU0FBUyxNQUFNLFFBQ3ZCLFFBQVEsTUFBTSxtRUFDZCxRQUFRLE9BQU8sWUFBWSxNQUFNLElBQUksU0FBUyxLQUM5QztBQUVILE1BQU0sT0FBTztBQU1iLE1BQU0sV0FBVztBQUNqQixNQUFNLE9BQU8sS0FBSyxNQUFNLE1BQU0sS0FDM0IsUUFBUSxXQUFXLE1BQU0sVUFDekIsUUFBUSxPQUFPLE1BQU0sTUFDckIsUUFBUSxhQUFhLDRFQUNyQjtBQUVILE1BQU0sWUFBWSxLQUFLLE1BQU0sWUFDMUIsUUFBUSxNQUFNLE1BQU0sSUFDcEIsUUFBUSxXQUFXLGlCQUNuQixRQUFRLGFBQWEsSUFDckIsUUFBUSxVQUFVLElBQ2xCLFFBQVEsY0FBYyxXQUN0QixRQUFRLFVBQVUsa0RBQ2xCLFFBQVEsUUFBUSwwQkFDaEIsUUFBUSxRQUFRLCtEQUNoQixRQUFRLE9BQU8sTUFBTSxNQUNyQjtBQUVILE1BQU0sYUFBYSxLQUFLLE1BQU0sWUFDM0IsUUFBUSxhQUFhLE1BQU0sV0FDM0I7QUFNSCxNQUFNLFNBQVMsTUFBTSxJQUFJO0FBTXpCLE1BQU0sTUFBTSxNQUFNLElBQUksTUFBTSxRQUFRO0FBQUEsRUFDbEMsT0FBTztBQUFBO0FBS1QsTUFBTSxJQUFJLFFBQVEsS0FBSyxNQUFNLElBQUksT0FDOUIsUUFBUSxNQUFNLE1BQU0sSUFDcEIsUUFBUSxXQUFXLGlCQUNuQixRQUFRLGNBQWMsV0FDdEIsUUFBUSxRQUFRLGNBQ2hCLFFBQVEsVUFBVSxrREFDbEIsUUFBUSxRQUFRLDBCQUNoQixRQUFRLFFBQVEsK0RBQ2hCLFFBQVEsT0FBTyxNQUFNLE1BQ3JCO0FBRUgsTUFBTSxJQUFJLFlBQVksS0FBSyxNQUFNLFlBQzlCLFFBQVEsTUFBTSxNQUFNLElBQ3BCLFFBQVEsV0FBVyxpQkFDbkIsUUFBUSxhQUFhLElBQ3JCLFFBQVEsU0FBUyxNQUFNLElBQUksT0FDM0IsUUFBUSxjQUFjLFdBQ3RCLFFBQVEsVUFBVSxrREFDbEIsUUFBUSxRQUFRLDBCQUNoQixRQUFRLFFBQVEsK0RBQ2hCLFFBQVEsT0FBTyxNQUFNLE1BQ3JCO0FBS0gsTUFBTSxXQUFXLE1BQU0sSUFBSSxNQUFNLFFBQVE7QUFBQSxFQUN2QyxNQUFNLEtBQ0osMElBR0MsUUFBUSxXQUFXLE1BQU0sVUFDekIsUUFBUSxRQUFRLHFLQUloQjtBQUFBLEVBQ0gsS0FBSztBQUFBLEVBQ0wsU0FBUztBQUFBLEVBQ1QsUUFBUTtBQUFBLEVBQ1IsV0FBVyxLQUFLLE1BQU0sT0FBTyxZQUMxQixRQUFRLE1BQU0sTUFBTSxJQUNwQixRQUFRLFdBQVcsbUJBQ25CLFFBQVEsWUFBWSxNQUFNLFVBQzFCLFFBQVEsY0FBYyxXQUN0QixRQUFRLFdBQVcsSUFDbkIsUUFBUSxTQUFTLElBQ2pCLFFBQVEsU0FBUyxJQUNqQjtBQUFBO0FBTUwsSUFBTSxTQUFTO0FBQUEsRUFDYixRQUFRO0FBQUEsRUFDUixVQUFVO0FBQUEsRUFDVixLQUFLO0FBQUEsRUFDTCxLQUFLO0FBQUEsRUFNTCxNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixlQUFlO0FBQUEsRUFDZixVQUFVO0FBQUEsSUFDUixRQUFRO0FBQUEsSUFHUixXQUFXO0FBQUEsSUFDWCxXQUFXO0FBQUE7QUFBQSxFQUViLE1BQU07QUFBQSxFQUNOLElBQUk7QUFBQSxFQUNKLEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLGFBQWE7QUFBQTtBQUtmLE9BQU8sZUFBZTtBQUN0QixPQUFPLGNBQWMsS0FBSyxPQUFPLGFBQWEsUUFBUSxnQkFBZ0IsT0FBTyxjQUFjO0FBRzNGLE9BQU8sWUFBWTtBQUNuQixPQUFPLGNBQWM7QUFFckIsT0FBTyxXQUFXLEtBQUssTUFBTSxVQUFVLFFBQVEsYUFBYSxPQUFPO0FBRW5FLE9BQU8sU0FBUyxTQUFTLEtBQUssT0FBTyxTQUFTLFFBQzNDLFFBQVEsVUFBVSxPQUFPLGNBQ3pCO0FBRUgsT0FBTyxTQUFTLFlBQVksS0FBSyxPQUFPLFNBQVMsV0FBVyxLQUN6RCxRQUFRLFVBQVUsT0FBTyxjQUN6QjtBQUVILE9BQU8sU0FBUyxZQUFZLEtBQUssT0FBTyxTQUFTLFdBQVcsS0FDekQsUUFBUSxVQUFVLE9BQU8sY0FDekI7QUFFSCxPQUFPLFdBQVc7QUFFbEIsT0FBTyxVQUFVO0FBQ2pCLE9BQU8sU0FBUztBQUNoQixPQUFPLFdBQVcsS0FBSyxPQUFPLFVBQzNCLFFBQVEsVUFBVSxPQUFPLFNBQ3pCLFFBQVEsU0FBUyxPQUFPLFFBQ3hCO0FBRUgsT0FBTyxhQUFhO0FBRXBCLE9BQU8sTUFBTSxLQUFLLE9BQU8sS0FDdEIsUUFBUSxXQUFXLE9BQU8sVUFDMUIsUUFBUSxhQUFhLE9BQU8sWUFDNUI7QUFFSCxPQUFPLFNBQVM7QUFDaEIsT0FBTyxRQUFRO0FBQ2YsT0FBTyxTQUFTO0FBRWhCLE9BQU8sT0FBTyxLQUFLLE9BQU8sTUFDdkIsUUFBUSxTQUFTLE9BQU8sUUFDeEIsUUFBUSxRQUFRLE9BQU8sT0FDdkIsUUFBUSxTQUFTLE9BQU8sUUFDeEI7QUFFSCxPQUFPLFVBQVUsS0FBSyxPQUFPLFNBQzFCLFFBQVEsU0FBUyxPQUFPLFFBQ3hCLFFBQVEsT0FBTyxNQUFNLFFBQ3JCO0FBRUgsT0FBTyxTQUFTLEtBQUssT0FBTyxRQUN6QixRQUFRLE9BQU8sTUFBTSxRQUNyQjtBQUVILE9BQU8sZ0JBQWdCLEtBQUssT0FBTyxlQUFlLEtBQy9DLFFBQVEsV0FBVyxPQUFPLFNBQzFCLFFBQVEsVUFBVSxPQUFPLFFBQ3pCO0FBTUgsT0FBTyxTQUFTLE1BQU0sSUFBSTtBQU0xQixPQUFPLFdBQVcsTUFBTSxJQUFJLE9BQU8sUUFBUTtBQUFBLEVBQ3pDLFFBQVE7QUFBQSxJQUNOLE9BQU87QUFBQSxJQUNQLFFBQVE7QUFBQSxJQUNSLFFBQVE7QUFBQSxJQUNSLFFBQVE7QUFBQTtBQUFBLEVBRVYsSUFBSTtBQUFBLElBQ0YsT0FBTztBQUFBLElBQ1AsUUFBUTtBQUFBLElBQ1IsUUFBUTtBQUFBLElBQ1IsUUFBUTtBQUFBO0FBQUEsRUFFVixNQUFNLEtBQUssMkJBQ1IsUUFBUSxTQUFTLE9BQU8sUUFDeEI7QUFBQSxFQUNILFNBQVMsS0FBSyxpQ0FDWCxRQUFRLFNBQVMsT0FBTyxRQUN4QjtBQUFBO0FBT0wsT0FBTyxNQUFNLE1BQU0sSUFBSSxPQUFPLFFBQVE7QUFBQSxFQUNwQyxRQUFRLEtBQUssT0FBTyxRQUFRLFFBQVEsTUFBTSxRQUFRO0FBQUEsRUFDbEQsaUJBQWlCO0FBQUEsRUFDakIsS0FBSztBQUFBLEVBQ0wsWUFBWTtBQUFBLEVBQ1osS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBO0FBR1IsT0FBTyxJQUFJLE1BQU0sS0FBSyxPQUFPLElBQUksS0FBSyxLQUNuQyxRQUFRLFNBQVMsT0FBTyxJQUFJLGlCQUM1QjtBQUtILE9BQU8sU0FBUyxNQUFNLElBQUksT0FBTyxLQUFLO0FBQUEsRUFDcEMsSUFBSSxLQUFLLE9BQU8sSUFBSSxRQUFRLFFBQVEsS0FBSztBQUFBLEVBQ3pDLE1BQU0sS0FBSyxPQUFPLElBQUksTUFDbkIsUUFBUSxRQUFRLGlCQUNoQixRQUFRLFdBQVcsS0FDbkI7QUFBQTtBQU1MLHFCQUFxQixNQUFNO0FBQ3pCLFNBQU8sS0FFSixRQUFRLFFBQVEsVUFFaEIsUUFBUSxPQUFPLFVBRWYsUUFBUSwyQkFBMkIsWUFFbkMsUUFBUSxNQUFNLFVBRWQsUUFBUSxnQ0FBZ0MsWUFFeEMsUUFBUSxNQUFNLFVBRWQsUUFBUSxVQUFVO0FBQUE7QUFNdkIsZ0JBQWdCLE1BQU07QUFDcEIsTUFBSSxNQUFNLElBQ1IsR0FDQTtBQUVGLFFBQU0sSUFBSSxLQUFLO0FBQ2YsT0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDdEIsU0FBSyxLQUFLLFdBQVc7QUFDckIsUUFBSSxLQUFLLFdBQVcsS0FBSztBQUN2QixXQUFLLE1BQU0sR0FBRyxTQUFTO0FBQUE7QUFFekIsV0FBTyxPQUFPLEtBQUs7QUFBQTtBQUdyQixTQUFPO0FBQUE7QUFNVCxrQkFBWTtBQUFBLEVBQ1YsWUFBWSxVQUFTO0FBQ25CLFNBQUssU0FBUztBQUNkLFNBQUssT0FBTyxRQUFRLE9BQU8sT0FBTztBQUNsQyxTQUFLLFVBQVUsWUFBVztBQUMxQixTQUFLLFFBQVEsWUFBWSxLQUFLLFFBQVEsYUFBYSxJQUFJO0FBQ3ZELFNBQUssWUFBWSxLQUFLLFFBQVE7QUFDOUIsU0FBSyxVQUFVLFVBQVUsS0FBSztBQUM5QixTQUFLLFVBQVUsUUFBUTtBQUN2QixTQUFLLGNBQWM7QUFDbkIsU0FBSyxRQUFRO0FBQUEsTUFDWCxRQUFRO0FBQUEsTUFDUixZQUFZO0FBQUEsTUFDWixLQUFLO0FBQUE7QUFHUCxVQUFNLFFBQVE7QUFBQSxNQUNaLE9BQU8sTUFBTTtBQUFBLE1BQ2IsUUFBUSxPQUFPO0FBQUE7QUFHakIsUUFBSSxLQUFLLFFBQVEsVUFBVTtBQUN6QixZQUFNLFFBQVEsTUFBTTtBQUNwQixZQUFNLFNBQVMsT0FBTztBQUFBLGVBQ2IsS0FBSyxRQUFRLEtBQUs7QUFDM0IsWUFBTSxRQUFRLE1BQU07QUFDcEIsVUFBSSxLQUFLLFFBQVEsUUFBUTtBQUN2QixjQUFNLFNBQVMsT0FBTztBQUFBLGFBQ2pCO0FBQ0wsY0FBTSxTQUFTLE9BQU87QUFBQTtBQUFBO0FBRzFCLFNBQUssVUFBVSxRQUFRO0FBQUE7QUFBQSxhQU1kLFFBQVE7QUFDakIsV0FBTztBQUFBLE1BQ0w7QUFBQSxNQUNBO0FBQUE7QUFBQTtBQUFBLFNBT0csSUFBSSxLQUFLLFVBQVM7QUFDdkIsVUFBTSxTQUFRLElBQUksTUFBTTtBQUN4QixXQUFPLE9BQU0sSUFBSTtBQUFBO0FBQUEsU0FNWixVQUFVLEtBQUssVUFBUztBQUM3QixVQUFNLFNBQVEsSUFBSSxNQUFNO0FBQ3hCLFdBQU8sT0FBTSxhQUFhO0FBQUE7QUFBQSxFQU01QixJQUFJLEtBQUs7QUFDUCxVQUFNLElBQ0gsUUFBUSxZQUFZLE1BQ3BCLFFBQVEsT0FBTztBQUVsQixTQUFLLFlBQVksS0FBSyxLQUFLO0FBRTNCLFFBQUk7QUFDSixXQUFPLE9BQU8sS0FBSyxZQUFZLFNBQVM7QUFDdEMsV0FBSyxhQUFhLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFHbkMsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQU1kLFlBQVksS0FBSyxTQUFTLElBQUk7QUFDNUIsUUFBSSxLQUFLLFFBQVEsVUFBVTtBQUN6QixZQUFNLElBQUksUUFBUSxVQUFVO0FBQUE7QUFFOUIsUUFBSSxPQUFPLFdBQVcsUUFBUTtBQUU5QixXQUFPLEtBQUs7QUFDVixVQUFJLEtBQUssUUFBUSxjQUNaLEtBQUssUUFBUSxXQUFXLFNBQ3hCLEtBQUssUUFBUSxXQUFXLE1BQU0sS0FBSyxDQUFDLGlCQUFpQjtBQUN0RCxZQUFJLFFBQVEsYUFBYSxLQUFLLEVBQUUsT0FBTyxRQUFRLEtBQUssU0FBUztBQUMzRCxnQkFBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLGlCQUFPLEtBQUs7QUFDWixpQkFBTztBQUFBO0FBRVQsZUFBTztBQUFBLFVBQ0w7QUFDSjtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxNQUFNLE1BQU07QUFDckMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLFlBQUksTUFBTSxJQUFJLFdBQVcsS0FBSyxPQUFPLFNBQVMsR0FBRztBQUcvQyxpQkFBTyxPQUFPLFNBQVMsR0FBRyxPQUFPO0FBQUEsZUFDNUI7QUFDTCxpQkFBTyxLQUFLO0FBQUE7QUFFZDtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxLQUFLLE1BQU07QUFDcEMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLG9CQUFZLE9BQU8sT0FBTyxTQUFTO0FBRW5DLFlBQUksYUFBYyxXQUFVLFNBQVMsZUFBZSxVQUFVLFNBQVMsU0FBUztBQUM5RSxvQkFBVSxPQUFPLE9BQU8sTUFBTTtBQUM5QixvQkFBVSxRQUFRLE9BQU8sTUFBTTtBQUMvQixlQUFLLFlBQVksS0FBSyxZQUFZLFNBQVMsR0FBRyxNQUFNLFVBQVU7QUFBQSxlQUN6RDtBQUNMLGlCQUFPLEtBQUs7QUFBQTtBQUVkO0FBQUE7QUFJRixVQUFJLFFBQVEsS0FBSyxVQUFVLE9BQU8sTUFBTTtBQUN0QyxjQUFNLElBQUksVUFBVSxNQUFNLElBQUk7QUFDOUIsZUFBTyxLQUFLO0FBQ1o7QUFBQTtBQUlGLFVBQUksUUFBUSxLQUFLLFVBQVUsUUFBUSxNQUFNO0FBQ3ZDLGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixlQUFPLEtBQUs7QUFDWjtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxHQUFHLE1BQU07QUFDbEMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLGVBQU8sS0FBSztBQUNaO0FBQUE7QUFJRixVQUFJLFFBQVEsS0FBSyxVQUFVLFdBQVcsTUFBTTtBQUMxQyxjQUFNLElBQUksVUFBVSxNQUFNLElBQUk7QUFDOUIsZUFBTyxLQUFLO0FBQ1o7QUFBQTtBQUlGLFVBQUksUUFBUSxLQUFLLFVBQVUsS0FBSyxNQUFNO0FBQ3BDLGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixlQUFPLEtBQUs7QUFDWjtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxLQUFLLE1BQU07QUFDcEMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLGVBQU8sS0FBSztBQUNaO0FBQUE7QUFJRixVQUFJLFFBQVEsS0FBSyxVQUFVLElBQUksTUFBTTtBQUNuQyxjQUFNLElBQUksVUFBVSxNQUFNLElBQUk7QUFDOUIsb0JBQVksT0FBTyxPQUFPLFNBQVM7QUFDbkMsWUFBSSxhQUFjLFdBQVUsU0FBUyxlQUFlLFVBQVUsU0FBUyxTQUFTO0FBQzlFLG9CQUFVLE9BQU8sT0FBTyxNQUFNO0FBQzlCLG9CQUFVLFFBQVEsT0FBTyxNQUFNO0FBQy9CLGVBQUssWUFBWSxLQUFLLFlBQVksU0FBUyxHQUFHLE1BQU0sVUFBVTtBQUFBLG1CQUNyRCxDQUFDLEtBQUssT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUN4QyxlQUFLLE9BQU8sTUFBTSxNQUFNLE9BQU87QUFBQSxZQUM3QixNQUFNLE1BQU07QUFBQSxZQUNaLE9BQU8sTUFBTTtBQUFBO0FBQUE7QUFHakI7QUFBQTtBQUlGLFVBQUksUUFBUSxLQUFLLFVBQVUsTUFBTSxNQUFNO0FBQ3JDLGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixlQUFPLEtBQUs7QUFDWjtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxTQUFTLE1BQU07QUFDeEMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLGVBQU8sS0FBSztBQUNaO0FBQUE7QUFLRixlQUFTO0FBQ1QsVUFBSSxLQUFLLFFBQVEsY0FBYyxLQUFLLFFBQVEsV0FBVyxZQUFZO0FBQ2pFLFlBQUksYUFBYTtBQUNqQixjQUFNLFVBQVUsSUFBSSxNQUFNO0FBQzFCLFlBQUk7QUFDSixhQUFLLFFBQVEsV0FBVyxXQUFXLFFBQVEsU0FBUyxlQUFlO0FBQ2pFLHNCQUFZLGNBQWMsS0FBSyxFQUFFLE9BQU8sUUFBUTtBQUNoRCxjQUFJLE9BQU8sY0FBYyxZQUFZLGFBQWEsR0FBRztBQUFFLHlCQUFhLEtBQUssSUFBSSxZQUFZO0FBQUE7QUFBQTtBQUUzRixZQUFJLGFBQWEsWUFBWSxjQUFjLEdBQUc7QUFDNUMsbUJBQVMsSUFBSSxVQUFVLEdBQUcsYUFBYTtBQUFBO0FBQUE7QUFHM0MsVUFBSSxLQUFLLE1BQU0sT0FBUSxTQUFRLEtBQUssVUFBVSxVQUFVLFVBQVU7QUFDaEUsb0JBQVksT0FBTyxPQUFPLFNBQVM7QUFDbkMsWUFBSSx3QkFBd0IsVUFBVSxTQUFTLGFBQWE7QUFDMUQsb0JBQVUsT0FBTyxPQUFPLE1BQU07QUFDOUIsb0JBQVUsUUFBUSxPQUFPLE1BQU07QUFDL0IsZUFBSyxZQUFZO0FBQ2pCLGVBQUssWUFBWSxLQUFLLFlBQVksU0FBUyxHQUFHLE1BQU0sVUFBVTtBQUFBLGVBQ3pEO0FBQ0wsaUJBQU8sS0FBSztBQUFBO0FBRWQsK0JBQXdCLE9BQU8sV0FBVyxJQUFJO0FBQzlDLGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QjtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxLQUFLLE1BQU07QUFDcEMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLG9CQUFZLE9BQU8sT0FBTyxTQUFTO0FBQ25DLFlBQUksYUFBYSxVQUFVLFNBQVMsUUFBUTtBQUMxQyxvQkFBVSxPQUFPLE9BQU8sTUFBTTtBQUM5QixvQkFBVSxRQUFRLE9BQU8sTUFBTTtBQUMvQixlQUFLLFlBQVk7QUFDakIsZUFBSyxZQUFZLEtBQUssWUFBWSxTQUFTLEdBQUcsTUFBTSxVQUFVO0FBQUEsZUFDekQ7QUFDTCxpQkFBTyxLQUFLO0FBQUE7QUFFZDtBQUFBO0FBR0YsVUFBSSxLQUFLO0FBQ1AsY0FBTSxTQUFTLDRCQUE0QixJQUFJLFdBQVc7QUFDMUQsWUFBSSxLQUFLLFFBQVEsUUFBUTtBQUN2QixrQkFBUSxNQUFNO0FBQ2Q7QUFBQSxlQUNLO0FBQ0wsZ0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBS3RCLFNBQUssTUFBTSxNQUFNO0FBQ2pCLFdBQU87QUFBQTtBQUFBLEVBR1QsT0FBTyxLQUFLLFFBQVE7QUFDbEIsU0FBSyxZQUFZLEtBQUssRUFBRSxLQUFLO0FBQUE7QUFBQSxFQU0vQixhQUFhLEtBQUssU0FBUyxJQUFJO0FBQzdCLFFBQUksT0FBTyxXQUFXO0FBR3RCLFFBQUksWUFBWTtBQUNoQixRQUFJO0FBQ0osUUFBSSxjQUFjO0FBR2xCLFFBQUksS0FBSyxPQUFPLE9BQU87QUFDckIsWUFBTSxRQUFRLE9BQU8sS0FBSyxLQUFLLE9BQU87QUFDdEMsVUFBSSxNQUFNLFNBQVMsR0FBRztBQUNwQixlQUFRLFVBQVEsS0FBSyxVQUFVLE1BQU0sT0FBTyxjQUFjLEtBQUssZUFBZSxNQUFNO0FBQ2xGLGNBQUksTUFBTSxTQUFTLE9BQU0sR0FBRyxNQUFNLE9BQU0sR0FBRyxZQUFZLE9BQU8sR0FBRyxNQUFNO0FBQ3JFLHdCQUFZLFVBQVUsTUFBTSxHQUFHLE9BQU0sU0FBUyxNQUFNLGFBQWEsS0FBSyxPQUFNLEdBQUcsU0FBUyxLQUFLLE1BQU0sVUFBVSxNQUFNLEtBQUssVUFBVSxNQUFNLE9BQU8sY0FBYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTXJLLFdBQVEsVUFBUSxLQUFLLFVBQVUsTUFBTSxPQUFPLFVBQVUsS0FBSyxlQUFlLE1BQU07QUFDOUUsa0JBQVksVUFBVSxNQUFNLEdBQUcsT0FBTSxTQUFTLE1BQU0sYUFBYSxLQUFLLE9BQU0sR0FBRyxTQUFTLEtBQUssTUFBTSxVQUFVLE1BQU0sS0FBSyxVQUFVLE1BQU0sT0FBTyxVQUFVO0FBQUE7QUFJM0osV0FBUSxVQUFRLEtBQUssVUFBVSxNQUFNLE9BQU8sWUFBWSxLQUFLLGVBQWUsTUFBTTtBQUNoRixrQkFBWSxVQUFVLE1BQU0sR0FBRyxPQUFNLFNBQVMsT0FBTyxVQUFVLE1BQU0sS0FBSyxVQUFVLE1BQU0sT0FBTyxZQUFZO0FBQUE7QUFHL0csV0FBTyxLQUFLO0FBQ1YsVUFBSSxDQUFDLGNBQWM7QUFDakIsbUJBQVc7QUFBQTtBQUViLHFCQUFlO0FBR2YsVUFBSSxLQUFLLFFBQVEsY0FDWixLQUFLLFFBQVEsV0FBVyxVQUN4QixLQUFLLFFBQVEsV0FBVyxPQUFPLEtBQUssQ0FBQyxpQkFBaUI7QUFDdkQsWUFBSSxRQUFRLGFBQWEsS0FBSyxFQUFFLE9BQU8sUUFBUSxLQUFLLFNBQVM7QUFDM0QsZ0JBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixpQkFBTyxLQUFLO0FBQ1osaUJBQU87QUFBQTtBQUVULGVBQU87QUFBQSxVQUNMO0FBQ0o7QUFBQTtBQUlGLFVBQUksUUFBUSxLQUFLLFVBQVUsT0FBTyxNQUFNO0FBQ3RDLGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixlQUFPLEtBQUs7QUFDWjtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLE1BQU07QUFDbkMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLG9CQUFZLE9BQU8sT0FBTyxTQUFTO0FBQ25DLFlBQUksYUFBYSxNQUFNLFNBQVMsVUFBVSxVQUFVLFNBQVMsUUFBUTtBQUNuRSxvQkFBVSxPQUFPLE1BQU07QUFDdkIsb0JBQVUsUUFBUSxNQUFNO0FBQUEsZUFDbkI7QUFDTCxpQkFBTyxLQUFLO0FBQUE7QUFFZDtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxLQUFLLE1BQU07QUFDcEMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLGVBQU8sS0FBSztBQUNaO0FBQUE7QUFJRixVQUFJLFFBQVEsS0FBSyxVQUFVLFFBQVEsS0FBSyxLQUFLLE9BQU8sUUFBUTtBQUMxRCxjQUFNLElBQUksVUFBVSxNQUFNLElBQUk7QUFDOUIsb0JBQVksT0FBTyxPQUFPLFNBQVM7QUFDbkMsWUFBSSxhQUFhLE1BQU0sU0FBUyxVQUFVLFVBQVUsU0FBUyxRQUFRO0FBQ25FLG9CQUFVLE9BQU8sTUFBTTtBQUN2QixvQkFBVSxRQUFRLE1BQU07QUFBQSxlQUNuQjtBQUNMLGlCQUFPLEtBQUs7QUFBQTtBQUVkO0FBQUE7QUFJRixVQUFJLFFBQVEsS0FBSyxVQUFVLFNBQVMsS0FBSyxXQUFXLFdBQVc7QUFDN0QsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLGVBQU8sS0FBSztBQUNaO0FBQUE7QUFJRixVQUFJLFFBQVEsS0FBSyxVQUFVLFNBQVMsTUFBTTtBQUN4QyxjQUFNLElBQUksVUFBVSxNQUFNLElBQUk7QUFDOUIsZUFBTyxLQUFLO0FBQ1o7QUFBQTtBQUlGLFVBQUksUUFBUSxLQUFLLFVBQVUsR0FBRyxNQUFNO0FBQ2xDLGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixlQUFPLEtBQUs7QUFDWjtBQUFBO0FBSUYsVUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLE1BQU07QUFDbkMsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLGVBQU8sS0FBSztBQUNaO0FBQUE7QUFJRixVQUFJLFFBQVEsS0FBSyxVQUFVLFNBQVMsS0FBSyxTQUFTO0FBQ2hELGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixlQUFPLEtBQUs7QUFDWjtBQUFBO0FBSUYsVUFBSSxDQUFDLEtBQUssTUFBTSxVQUFXLFNBQVEsS0FBSyxVQUFVLElBQUksS0FBSyxVQUFVO0FBQ25FLGNBQU0sSUFBSSxVQUFVLE1BQU0sSUFBSTtBQUM5QixlQUFPLEtBQUs7QUFDWjtBQUFBO0FBS0YsZUFBUztBQUNULFVBQUksS0FBSyxRQUFRLGNBQWMsS0FBSyxRQUFRLFdBQVcsYUFBYTtBQUNsRSxZQUFJLGFBQWE7QUFDakIsY0FBTSxVQUFVLElBQUksTUFBTTtBQUMxQixZQUFJO0FBQ0osYUFBSyxRQUFRLFdBQVcsWUFBWSxRQUFRLFNBQVMsZUFBZTtBQUNsRSxzQkFBWSxjQUFjLEtBQUssRUFBRSxPQUFPLFFBQVE7QUFDaEQsY0FBSSxPQUFPLGNBQWMsWUFBWSxhQUFhLEdBQUc7QUFBRSx5QkFBYSxLQUFLLElBQUksWUFBWTtBQUFBO0FBQUE7QUFFM0YsWUFBSSxhQUFhLFlBQVksY0FBYyxHQUFHO0FBQzVDLG1CQUFTLElBQUksVUFBVSxHQUFHLGFBQWE7QUFBQTtBQUFBO0FBRzNDLFVBQUksUUFBUSxLQUFLLFVBQVUsV0FBVyxRQUFRLGNBQWM7QUFDMUQsY0FBTSxJQUFJLFVBQVUsTUFBTSxJQUFJO0FBQzlCLFlBQUksTUFBTSxJQUFJLE1BQU0sUUFBUSxLQUFLO0FBQy9CLHFCQUFXLE1BQU0sSUFBSSxNQUFNO0FBQUE7QUFFN0IsdUJBQWU7QUFDZixvQkFBWSxPQUFPLE9BQU8sU0FBUztBQUNuQyxZQUFJLGFBQWEsVUFBVSxTQUFTLFFBQVE7QUFDMUMsb0JBQVUsT0FBTyxNQUFNO0FBQ3ZCLG9CQUFVLFFBQVEsTUFBTTtBQUFBLGVBQ25CO0FBQ0wsaUJBQU8sS0FBSztBQUFBO0FBRWQ7QUFBQTtBQUdGLFVBQUksS0FBSztBQUNQLGNBQU0sU0FBUyw0QkFBNEIsSUFBSSxXQUFXO0FBQzFELFlBQUksS0FBSyxRQUFRLFFBQVE7QUFDdkIsa0JBQVEsTUFBTTtBQUNkO0FBQUEsZUFDSztBQUNMLGdCQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUt0QixXQUFPO0FBQUE7QUFBQTtBQU9YLHFCQUFlO0FBQUEsRUFDYixZQUFZLFVBQVM7QUFDbkIsU0FBSyxVQUFVLFlBQVc7QUFBQTtBQUFBLEVBRzVCLEtBQUssTUFBTSxZQUFZLFNBQVM7QUFDOUIsVUFBTSxPQUFRLGVBQWMsSUFBSSxNQUFNLE9BQU87QUFDN0MsUUFBSSxLQUFLLFFBQVEsV0FBVztBQUMxQixZQUFNLE1BQU0sS0FBSyxRQUFRLFVBQVUsTUFBTTtBQUN6QyxVQUFJLE9BQU8sUUFBUSxRQUFRLE1BQU07QUFDL0Isa0JBQVU7QUFDVixlQUFPO0FBQUE7QUFBQTtBQUlYLFdBQU8sS0FBSyxRQUFRLE9BQU8sTUFBTTtBQUVqQyxRQUFJLENBQUMsTUFBTTtBQUNULGFBQU8sZ0JBQ0YsV0FBVSxPQUFPLFFBQU8sTUFBTSxTQUMvQjtBQUFBO0FBR04sV0FBTyx1QkFDSCxLQUFLLFFBQVEsYUFDYixRQUFPLE1BQU0sUUFDYixPQUNDLFdBQVUsT0FBTyxRQUFPLE1BQU0sU0FDL0I7QUFBQTtBQUFBLEVBR04sV0FBVyxPQUFPO0FBQ2hCLFdBQU8sbUJBQW1CLFFBQVE7QUFBQTtBQUFBLEVBR3BDLEtBQUssTUFBTTtBQUNULFdBQU87QUFBQTtBQUFBLEVBR1QsUUFBUSxNQUFNLE9BQU8sS0FBSyxTQUFTO0FBQ2pDLFFBQUksS0FBSyxRQUFRLFdBQVc7QUFDMUIsYUFBTyxPQUNILFFBQ0EsVUFDQSxLQUFLLFFBQVEsZUFDYixRQUFRLEtBQUssT0FDYixPQUNBLE9BQ0EsUUFDQSxRQUNBO0FBQUE7QUFHTixXQUFPLE9BQU8sUUFBUSxNQUFNLE9BQU8sUUFBUSxRQUFRO0FBQUE7QUFBQSxFQUdyRCxLQUFLO0FBQ0gsV0FBTyxLQUFLLFFBQVEsUUFBUSxZQUFZO0FBQUE7QUFBQSxFQUcxQyxLQUFLLE1BQU0sU0FBUyxPQUFPO0FBQ3pCLFVBQU0sT0FBTyxVQUFVLE9BQU8sTUFDNUIsV0FBWSxXQUFXLFVBQVUsSUFBTSxhQUFhLFFBQVEsTUFBTztBQUNyRSxXQUFPLE1BQU0sT0FBTyxXQUFXLFFBQVEsT0FBTyxPQUFPLE9BQU87QUFBQTtBQUFBLEVBRzlELFNBQVMsTUFBTTtBQUNiLFdBQU8sU0FBUyxPQUFPO0FBQUE7QUFBQSxFQUd6QixTQUFTLFNBQVM7QUFDaEIsV0FBTyxZQUNGLFdBQVUsZ0JBQWdCLE1BQzNCLGdDQUNDLE1BQUssUUFBUSxRQUFRLE9BQU8sTUFDN0I7QUFBQTtBQUFBLEVBR04sVUFBVSxNQUFNO0FBQ2QsV0FBTyxRQUFRLE9BQU87QUFBQTtBQUFBLEVBR3hCLE1BQU0sUUFBUSxNQUFNO0FBQ2xCLFFBQUk7QUFBTSxhQUFPLFlBQVksT0FBTztBQUVwQyxXQUFPLHVCQUVILFNBQ0EsZUFDQSxPQUNBO0FBQUE7QUFBQSxFQUdOLFNBQVMsU0FBUztBQUNoQixXQUFPLFdBQVcsVUFBVTtBQUFBO0FBQUEsRUFHOUIsVUFBVSxTQUFTLE9BQU87QUFDeEIsVUFBTSxPQUFPLE1BQU0sU0FBUyxPQUFPO0FBQ25DLFVBQU0sTUFBTSxNQUFNLFFBQ2QsTUFBTSxPQUFPLGFBQWEsTUFBTSxRQUFRLE9BQ3hDLE1BQU0sT0FBTztBQUNqQixXQUFPLE1BQU0sVUFBVSxPQUFPLE9BQU87QUFBQTtBQUFBLEVBSXZDLE9BQU8sTUFBTTtBQUNYLFdBQU8sYUFBYSxPQUFPO0FBQUE7QUFBQSxFQUc3QixHQUFHLE1BQU07QUFDUCxXQUFPLFNBQVMsT0FBTztBQUFBO0FBQUEsRUFHekIsU0FBUyxNQUFNO0FBQ2IsV0FBTyxXQUFXLE9BQU87QUFBQTtBQUFBLEVBRzNCLEtBQUs7QUFDSCxXQUFPLEtBQUssUUFBUSxRQUFRLFVBQVU7QUFBQTtBQUFBLEVBR3hDLElBQUksTUFBTTtBQUNSLFdBQU8sVUFBVSxPQUFPO0FBQUE7QUFBQSxFQUcxQixLQUFLLE1BQU0sT0FBTyxNQUFNO0FBQ3RCLFdBQU8sU0FBUyxLQUFLLFFBQVEsVUFBVSxLQUFLLFFBQVEsU0FBUztBQUM3RCxRQUFJLFNBQVMsTUFBTTtBQUNqQixhQUFPO0FBQUE7QUFFVCxRQUFJLE1BQU0sY0FBYyxRQUFPLFFBQVE7QUFDdkMsUUFBSSxPQUFPO0FBQ1QsYUFBTyxhQUFhLFFBQVE7QUFBQTtBQUU5QixXQUFPLE1BQU0sT0FBTztBQUNwQixXQUFPO0FBQUE7QUFBQSxFQUdULE1BQU0sTUFBTSxPQUFPLE1BQU07QUFDdkIsV0FBTyxTQUFTLEtBQUssUUFBUSxVQUFVLEtBQUssUUFBUSxTQUFTO0FBQzdELFFBQUksU0FBUyxNQUFNO0FBQ2pCLGFBQU87QUFBQTtBQUdULFFBQUksTUFBTSxlQUFlLE9BQU8sWUFBWSxPQUFPO0FBQ25ELFFBQUksT0FBTztBQUNULGFBQU8sYUFBYSxRQUFRO0FBQUE7QUFFOUIsV0FBTyxLQUFLLFFBQVEsUUFBUSxPQUFPO0FBQ25DLFdBQU87QUFBQTtBQUFBLEVBR1QsS0FBSyxNQUFNO0FBQ1QsV0FBTztBQUFBO0FBQUE7QUFRWCx5QkFBbUI7QUFBQSxFQUVqQixPQUFPLE1BQU07QUFDWCxXQUFPO0FBQUE7QUFBQSxFQUdULEdBQUcsTUFBTTtBQUNQLFdBQU87QUFBQTtBQUFBLEVBR1QsU0FBUyxNQUFNO0FBQ2IsV0FBTztBQUFBO0FBQUEsRUFHVCxJQUFJLE1BQU07QUFDUixXQUFPO0FBQUE7QUFBQSxFQUdULEtBQUssTUFBTTtBQUNULFdBQU87QUFBQTtBQUFBLEVBR1QsS0FBSyxNQUFNO0FBQ1QsV0FBTztBQUFBO0FBQUEsRUFHVCxLQUFLLE1BQU0sT0FBTyxNQUFNO0FBQ3RCLFdBQU8sS0FBSztBQUFBO0FBQUEsRUFHZCxNQUFNLE1BQU0sT0FBTyxNQUFNO0FBQ3ZCLFdBQU8sS0FBSztBQUFBO0FBQUEsRUFHZCxLQUFLO0FBQ0gsV0FBTztBQUFBO0FBQUE7QUFPWCxvQkFBYztBQUFBLEVBQ1osY0FBYztBQUNaLFNBQUssT0FBTztBQUFBO0FBQUEsRUFHZCxVQUFVLE9BQU87QUFDZixXQUFPLE1BQ0osY0FDQSxPQUVBLFFBQVEsbUJBQW1CLElBRTNCLFFBQVEsaUVBQWlFLElBQ3pFLFFBQVEsT0FBTztBQUFBO0FBQUEsRUFNcEIsZ0JBQWdCLGNBQWMsVUFBVTtBQUN0QyxRQUFJLE9BQU87QUFDWCxRQUFJLHVCQUF1QjtBQUMzQixRQUFJLEtBQUssS0FBSyxlQUFlLE9BQU87QUFDbEMsNkJBQXVCLEtBQUssS0FBSztBQUNqQyxTQUFHO0FBQ0Q7QUFDQSxlQUFPLGVBQWUsTUFBTTtBQUFBLGVBQ3JCLEtBQUssS0FBSyxlQUFlO0FBQUE7QUFFcEMsUUFBSSxDQUFDLFVBQVU7QUFDYixXQUFLLEtBQUssZ0JBQWdCO0FBQzFCLFdBQUssS0FBSyxRQUFRO0FBQUE7QUFFcEIsV0FBTztBQUFBO0FBQUEsRUFRVCxLQUFLLE9BQU8sV0FBVSxJQUFJO0FBQ3hCLFVBQU0sT0FBTyxLQUFLLFVBQVU7QUFDNUIsV0FBTyxLQUFLLGdCQUFnQixNQUFNLFNBQVE7QUFBQTtBQUFBO0FBTzlDLG1CQUFhO0FBQUEsRUFDWCxZQUFZLFVBQVM7QUFDbkIsU0FBSyxVQUFVLFlBQVc7QUFDMUIsU0FBSyxRQUFRLFdBQVcsS0FBSyxRQUFRLFlBQVksSUFBSTtBQUNyRCxTQUFLLFdBQVcsS0FBSyxRQUFRO0FBQzdCLFNBQUssU0FBUyxVQUFVLEtBQUs7QUFDN0IsU0FBSyxlQUFlLElBQUk7QUFDeEIsU0FBSyxVQUFVLElBQUk7QUFBQTtBQUFBLFNBTWQsTUFBTSxRQUFRLFVBQVM7QUFDNUIsVUFBTSxVQUFTLElBQUksT0FBTztBQUMxQixXQUFPLFFBQU8sTUFBTTtBQUFBO0FBQUEsU0FNZixZQUFZLFFBQVEsVUFBUztBQUNsQyxVQUFNLFVBQVMsSUFBSSxPQUFPO0FBQzFCLFdBQU8sUUFBTyxZQUFZO0FBQUE7QUFBQSxFQU01QixNQUFNLFFBQVEsTUFBTSxNQUFNO0FBQ3hCLFFBQUksTUFBTSxJQUNSLEdBQ0EsR0FDQSxHQUNBLElBQ0EsSUFDQSxLQUNBLE1BQ0EsUUFDQSxNQUNBLE9BQ0EsU0FDQSxPQUNBLE9BQ0EsVUFDQSxNQUNBLFNBQ0EsTUFDQSxVQUNBO0FBRUYsVUFBTSxJQUFJLE9BQU87QUFDakIsU0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDdEIsY0FBUSxPQUFPO0FBR2YsVUFBSSxLQUFLLFFBQVEsY0FBYyxLQUFLLFFBQVEsV0FBVyxhQUFhLEtBQUssUUFBUSxXQUFXLFVBQVUsTUFBTSxPQUFPO0FBQ2pILGNBQU0sS0FBSyxRQUFRLFdBQVcsVUFBVSxNQUFNLE1BQU0sS0FBSyxFQUFFLFFBQVEsUUFBUTtBQUMzRSxZQUFJLFFBQVEsU0FBUyxDQUFDLENBQUMsU0FBUyxNQUFNLFdBQVcsUUFBUSxTQUFTLGNBQWMsUUFBUSxRQUFRLGFBQWEsUUFBUSxTQUFTLE1BQU0sT0FBTztBQUN6SSxpQkFBTyxPQUFPO0FBQ2Q7QUFBQTtBQUFBO0FBSUosY0FBUSxNQUFNO0FBQUEsYUFDUCxTQUFTO0FBQ1o7QUFBQTtBQUFBLGFBRUcsTUFBTTtBQUNULGlCQUFPLEtBQUssU0FBUztBQUNyQjtBQUFBO0FBQUEsYUFFRyxXQUFXO0FBQ2QsaUJBQU8sS0FBSyxTQUFTLFFBQ25CLEtBQUssWUFBWSxNQUFNLFNBQ3ZCLE1BQU0sT0FDTixTQUFTLEtBQUssWUFBWSxNQUFNLFFBQVEsS0FBSyxnQkFDN0MsS0FBSztBQUNQO0FBQUE7QUFBQSxhQUVHLFFBQVE7QUFDWCxpQkFBTyxLQUFLLFNBQVMsS0FBSyxNQUFNLE1BQzlCLE1BQU0sTUFDTixNQUFNO0FBQ1I7QUFBQTtBQUFBLGFBRUcsU0FBUztBQUNaLG1CQUFTO0FBR1QsaUJBQU87QUFDUCxlQUFLLE1BQU0sT0FBTztBQUNsQixlQUFLLElBQUksR0FBRyxJQUFJLElBQUksS0FBSztBQUN2QixvQkFBUSxLQUFLLFNBQVMsVUFDcEIsS0FBSyxZQUFZLE1BQU0sT0FBTyxHQUFHLFNBQ2pDLEVBQUUsUUFBUSxNQUFNLE9BQU8sTUFBTSxNQUFNO0FBQUE7QUFHdkMsb0JBQVUsS0FBSyxTQUFTLFNBQVM7QUFFakMsaUJBQU87QUFDUCxlQUFLLE1BQU0sS0FBSztBQUNoQixlQUFLLElBQUksR0FBRyxJQUFJLElBQUksS0FBSztBQUN2QixrQkFBTSxNQUFNLEtBQUs7QUFFakIsbUJBQU87QUFDUCxpQkFBSyxJQUFJO0FBQ1QsaUJBQUssSUFBSSxHQUFHLElBQUksSUFBSSxLQUFLO0FBQ3ZCLHNCQUFRLEtBQUssU0FBUyxVQUNwQixLQUFLLFlBQVksSUFBSSxHQUFHLFNBQ3hCLEVBQUUsUUFBUSxPQUFPLE9BQU8sTUFBTSxNQUFNO0FBQUE7QUFJeEMsb0JBQVEsS0FBSyxTQUFTLFNBQVM7QUFBQTtBQUVqQyxpQkFBTyxLQUFLLFNBQVMsTUFBTSxRQUFRO0FBQ25DO0FBQUE7QUFBQSxhQUVHLGNBQWM7QUFDakIsaUJBQU8sS0FBSyxNQUFNLE1BQU07QUFDeEIsaUJBQU8sS0FBSyxTQUFTLFdBQVc7QUFDaEM7QUFBQTtBQUFBLGFBRUcsUUFBUTtBQUNYLG9CQUFVLE1BQU07QUFDaEIsa0JBQVEsTUFBTTtBQUNkLGtCQUFRLE1BQU07QUFDZCxlQUFLLE1BQU0sTUFBTTtBQUVqQixpQkFBTztBQUNQLGVBQUssSUFBSSxHQUFHLElBQUksSUFBSSxLQUFLO0FBQ3ZCLG1CQUFPLE1BQU0sTUFBTTtBQUNuQixzQkFBVSxLQUFLO0FBQ2YsbUJBQU8sS0FBSztBQUVaLHVCQUFXO0FBQ1gsZ0JBQUksS0FBSyxNQUFNO0FBQ2IseUJBQVcsS0FBSyxTQUFTLFNBQVM7QUFDbEMsa0JBQUksT0FBTztBQUNULG9CQUFJLEtBQUssT0FBTyxTQUFTLEtBQUssS0FBSyxPQUFPLEdBQUcsU0FBUyxhQUFhO0FBQ2pFLHVCQUFLLE9BQU8sR0FBRyxPQUFPLFdBQVcsTUFBTSxLQUFLLE9BQU8sR0FBRztBQUN0RCxzQkFBSSxLQUFLLE9BQU8sR0FBRyxVQUFVLEtBQUssT0FBTyxHQUFHLE9BQU8sU0FBUyxLQUFLLEtBQUssT0FBTyxHQUFHLE9BQU8sR0FBRyxTQUFTLFFBQVE7QUFDekcseUJBQUssT0FBTyxHQUFHLE9BQU8sR0FBRyxPQUFPLFdBQVcsTUFBTSxLQUFLLE9BQU8sR0FBRyxPQUFPLEdBQUc7QUFBQTtBQUFBLHVCQUV2RTtBQUNMLHVCQUFLLE9BQU8sUUFBUTtBQUFBLG9CQUNsQixNQUFNO0FBQUEsb0JBQ04sTUFBTTtBQUFBO0FBQUE7QUFBQSxxQkFHTDtBQUNMLDRCQUFZO0FBQUE7QUFBQTtBQUloQix3QkFBWSxLQUFLLE1BQU0sS0FBSyxRQUFRO0FBQ3BDLG9CQUFRLEtBQUssU0FBUyxTQUFTLFVBQVUsTUFBTTtBQUFBO0FBR2pELGlCQUFPLEtBQUssU0FBUyxLQUFLLE1BQU0sU0FBUztBQUN6QztBQUFBO0FBQUEsYUFFRyxRQUFRO0FBRVgsaUJBQU8sS0FBSyxTQUFTLEtBQUssTUFBTTtBQUNoQztBQUFBO0FBQUEsYUFFRyxhQUFhO0FBQ2hCLGlCQUFPLEtBQUssU0FBUyxVQUFVLEtBQUssWUFBWSxNQUFNO0FBQ3REO0FBQUE7QUFBQSxhQUVHLFFBQVE7QUFDWCxpQkFBTyxNQUFNLFNBQVMsS0FBSyxZQUFZLE1BQU0sVUFBVSxNQUFNO0FBQzdELGlCQUFPLElBQUksSUFBSSxLQUFLLE9BQU8sSUFBSSxHQUFHLFNBQVMsUUFBUTtBQUNqRCxvQkFBUSxPQUFPLEVBQUU7QUFDakIsb0JBQVEsT0FBUSxPQUFNLFNBQVMsS0FBSyxZQUFZLE1BQU0sVUFBVSxNQUFNO0FBQUE7QUFFeEUsaUJBQU8sTUFBTSxLQUFLLFNBQVMsVUFBVSxRQUFRO0FBQzdDO0FBQUE7QUFBQSxpQkFHTztBQUNQLGdCQUFNLFNBQVMsaUJBQWlCLE1BQU0sT0FBTztBQUM3QyxjQUFJLEtBQUssUUFBUSxRQUFRO0FBQ3ZCLG9CQUFRLE1BQU07QUFDZDtBQUFBLGlCQUNLO0FBQ0wsa0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNeEIsV0FBTztBQUFBO0FBQUEsRUFNVCxZQUFZLFFBQVEsVUFBVTtBQUM1QixlQUFXLFlBQVksS0FBSztBQUM1QixRQUFJLE1BQU0sSUFDUixHQUNBLE9BQ0E7QUFFRixVQUFNLElBQUksT0FBTztBQUNqQixTQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSztBQUN0QixjQUFRLE9BQU87QUFHZixVQUFJLEtBQUssUUFBUSxjQUFjLEtBQUssUUFBUSxXQUFXLGFBQWEsS0FBSyxRQUFRLFdBQVcsVUFBVSxNQUFNLE9BQU87QUFDakgsY0FBTSxLQUFLLFFBQVEsV0FBVyxVQUFVLE1BQU0sTUFBTSxLQUFLLEVBQUUsUUFBUSxRQUFRO0FBQzNFLFlBQUksUUFBUSxTQUFTLENBQUMsQ0FBQyxVQUFVLFFBQVEsUUFBUSxTQUFTLFVBQVUsTUFBTSxZQUFZLE1BQU0sT0FBTyxRQUFRLFNBQVMsTUFBTSxPQUFPO0FBQy9ILGlCQUFPLE9BQU87QUFDZDtBQUFBO0FBQUE7QUFJSixjQUFRLE1BQU07QUFBQSxhQUNQLFVBQVU7QUFDYixpQkFBTyxTQUFTLEtBQUssTUFBTTtBQUMzQjtBQUFBO0FBQUEsYUFFRyxRQUFRO0FBQ1gsaUJBQU8sU0FBUyxLQUFLLE1BQU07QUFDM0I7QUFBQTtBQUFBLGFBRUcsUUFBUTtBQUNYLGlCQUFPLFNBQVMsS0FBSyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssWUFBWSxNQUFNLFFBQVE7QUFDN0U7QUFBQTtBQUFBLGFBRUcsU0FBUztBQUNaLGlCQUFPLFNBQVMsTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPLE1BQU07QUFDckQ7QUFBQTtBQUFBLGFBRUcsVUFBVTtBQUNiLGlCQUFPLFNBQVMsT0FBTyxLQUFLLFlBQVksTUFBTSxRQUFRO0FBQ3REO0FBQUE7QUFBQSxhQUVHLE1BQU07QUFDVCxpQkFBTyxTQUFTLEdBQUcsS0FBSyxZQUFZLE1BQU0sUUFBUTtBQUNsRDtBQUFBO0FBQUEsYUFFRyxZQUFZO0FBQ2YsaUJBQU8sU0FBUyxTQUFTLE1BQU07QUFDL0I7QUFBQTtBQUFBLGFBRUcsTUFBTTtBQUNULGlCQUFPLFNBQVM7QUFDaEI7QUFBQTtBQUFBLGFBRUcsT0FBTztBQUNWLGlCQUFPLFNBQVMsSUFBSSxLQUFLLFlBQVksTUFBTSxRQUFRO0FBQ25EO0FBQUE7QUFBQSxhQUVHLFFBQVE7QUFDWCxpQkFBTyxTQUFTLEtBQUssTUFBTTtBQUMzQjtBQUFBO0FBQUEsaUJBRU87QUFDUCxnQkFBTSxTQUFTLGlCQUFpQixNQUFNLE9BQU87QUFDN0MsY0FBSSxLQUFLLFFBQVEsUUFBUTtBQUN2QixvQkFBUSxNQUFNO0FBQ2Q7QUFBQSxpQkFDSztBQUNMLGtCQUFNLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS3hCLFdBQU87QUFBQTtBQUFBO0FBT1gsZ0JBQWdCLEtBQUssS0FBSyxVQUFVO0FBRWxDLE1BQUksT0FBTyxRQUFRLGVBQWUsUUFBUSxNQUFNO0FBQzlDLFVBQU0sSUFBSSxNQUFNO0FBQUE7QUFFbEIsTUFBSSxPQUFPLFFBQVEsVUFBVTtBQUMzQixVQUFNLElBQUksTUFBTSwwQ0FDWixPQUFPLFVBQVUsU0FBUyxLQUFLLE9BQU87QUFBQTtBQUc1QyxNQUFJLE9BQU8sUUFBUSxZQUFZO0FBQzdCLGVBQVc7QUFDWCxVQUFNO0FBQUE7QUFHUixRQUFNLE1BQU0sSUFBSSxPQUFPLFVBQVUsT0FBTztBQUN4QywyQkFBeUI7QUFFekIsTUFBSSxVQUFVO0FBQ1osVUFBTSxZQUFZLElBQUk7QUFDdEIsUUFBSTtBQUVKLFFBQUk7QUFDRixlQUFTLE1BQU0sSUFBSSxLQUFLO0FBQUEsYUFDakIsR0FBUDtBQUNBLGFBQU8sU0FBUztBQUFBO0FBR2xCLFVBQU0sT0FBTyxTQUFTLEtBQUs7QUFDekIsVUFBSTtBQUVKLFVBQUksQ0FBQyxLQUFLO0FBQ1IsWUFBSTtBQUNGLGNBQUksSUFBSSxZQUFZO0FBQ2xCLG1CQUFPLFdBQVcsUUFBUSxJQUFJO0FBQUE7QUFFaEMsZ0JBQU0sT0FBTyxNQUFNLFFBQVE7QUFBQSxpQkFDcEIsR0FBUDtBQUNBLGdCQUFNO0FBQUE7QUFBQTtBQUlWLFVBQUksWUFBWTtBQUVoQixhQUFPLE1BQ0gsU0FBUyxPQUNULFNBQVMsTUFBTTtBQUFBO0FBR3JCLFFBQUksQ0FBQyxhQUFhLFVBQVUsU0FBUyxHQUFHO0FBQ3RDLGFBQU87QUFBQTtBQUdULFdBQU8sSUFBSTtBQUVYLFFBQUksQ0FBQyxPQUFPO0FBQVEsYUFBTztBQUUzQixRQUFJLFVBQVU7QUFDZCxXQUFPLFdBQVcsUUFBUSxTQUFTLE9BQU87QUFDeEMsVUFBSSxNQUFNLFNBQVMsUUFBUTtBQUN6QjtBQUNBLG1CQUFXLE1BQU07QUFDZixvQkFBVSxNQUFNLE1BQU0sTUFBTSxNQUFNLFNBQVMsS0FBSyxNQUFNO0FBQ3BELGdCQUFJLEtBQUs7QUFDUCxxQkFBTyxLQUFLO0FBQUE7QUFFZCxnQkFBSSxRQUFRLFFBQVEsU0FBUyxNQUFNLE1BQU07QUFDdkMsb0JBQU0sT0FBTztBQUNiLG9CQUFNLFVBQVU7QUFBQTtBQUdsQjtBQUNBLGdCQUFJLFlBQVksR0FBRztBQUNqQjtBQUFBO0FBQUE7QUFBQSxXQUdIO0FBQUE7QUFBQTtBQUlQLFFBQUksWUFBWSxHQUFHO0FBQ2pCO0FBQUE7QUFHRjtBQUFBO0FBR0YsTUFBSTtBQUNGLFVBQU0sU0FBUyxNQUFNLElBQUksS0FBSztBQUM5QixRQUFJLElBQUksWUFBWTtBQUNsQixhQUFPLFdBQVcsUUFBUSxJQUFJO0FBQUE7QUFFaEMsV0FBTyxPQUFPLE1BQU0sUUFBUTtBQUFBLFdBQ3JCLEdBQVA7QUFDQSxNQUFFLFdBQVc7QUFDYixRQUFJLElBQUksUUFBUTtBQUNkLGFBQU8sbUNBQ0gsUUFBTyxFQUFFLFVBQVUsSUFBSSxRQUN2QjtBQUFBO0FBRU4sVUFBTTtBQUFBO0FBQUE7QUFRVixPQUFPLFVBQ1AsT0FBTyxhQUFhLFNBQVMsS0FBSztBQUNoQyxRQUFNLE9BQU8sVUFBVTtBQUN2QixpQkFBZSxPQUFPO0FBQ3RCLFNBQU87QUFBQTtBQUdULE9BQU8sY0FBYztBQUVyQixPQUFPLFdBQVc7QUFNbEIsT0FBTyxNQUFNLFlBQVksTUFBTTtBQUM3QixRQUFNLE9BQU8sTUFBTSxJQUFJLEdBQUc7QUFDMUIsUUFBTSxhQUFhLE9BQU8sU0FBUyxjQUFjLEVBQUUsV0FBVyxJQUFJLGFBQWE7QUFDL0UsTUFBSTtBQUVKLE9BQUssUUFBUSxDQUFDLFNBQVM7QUFFckIsUUFBSSxLQUFLLFlBQVk7QUFDbkIsc0JBQWdCO0FBQ2hCLFdBQUssV0FBVyxRQUFRLENBQUMsUUFBUTtBQUMvQixZQUFJLENBQUMsSUFBSSxNQUFNO0FBQ2IsZ0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFFbEIsWUFBSSxJQUFJLFVBQVU7QUFDaEIsZ0JBQU0sZUFBZSxXQUFXLFlBQVksV0FBVyxVQUFVLElBQUksUUFBUTtBQUM3RSxjQUFJLGNBQWM7QUFFaEIsdUJBQVcsVUFBVSxJQUFJLFFBQVEsWUFBWSxPQUFNO0FBQ2pELGtCQUFJLE1BQU0sSUFBSSxTQUFTLE1BQU0sTUFBTTtBQUNuQyxrQkFBSSxRQUFRLE9BQU87QUFDakIsc0JBQU0sYUFBYSxNQUFNLE1BQU07QUFBQTtBQUVqQyxxQkFBTztBQUFBO0FBQUEsaUJBRUo7QUFDTCx1QkFBVyxVQUFVLElBQUksUUFBUSxJQUFJO0FBQUE7QUFBQTtBQUd6QyxZQUFJLElBQUksV0FBVztBQUNqQixjQUFJLENBQUMsSUFBSSxTQUFVLElBQUksVUFBVSxXQUFXLElBQUksVUFBVSxVQUFXO0FBQ25FLGtCQUFNLElBQUksTUFBTTtBQUFBO0FBRWxCLGNBQUksV0FBVyxJQUFJLFFBQVE7QUFDekIsdUJBQVcsSUFBSSxPQUFPLFFBQVEsSUFBSTtBQUFBLGlCQUM3QjtBQUNMLHVCQUFXLElBQUksU0FBUyxDQUFDLElBQUk7QUFBQTtBQUUvQixjQUFJLElBQUksT0FBTztBQUNiLGdCQUFJLElBQUksVUFBVSxTQUFTO0FBQ3pCLGtCQUFJLFdBQVcsWUFBWTtBQUN6QiwyQkFBVyxXQUFXLEtBQUssSUFBSTtBQUFBLHFCQUMxQjtBQUNMLDJCQUFXLGFBQWEsQ0FBQyxJQUFJO0FBQUE7QUFBQSx1QkFFdEIsSUFBSSxVQUFVLFVBQVU7QUFDakMsa0JBQUksV0FBVyxhQUFhO0FBQzFCLDJCQUFXLFlBQVksS0FBSyxJQUFJO0FBQUEscUJBQzNCO0FBQ0wsMkJBQVcsY0FBYyxDQUFDLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUt0QyxZQUFJLElBQUksYUFBYTtBQUNuQixxQkFBVyxZQUFZLElBQUksUUFBUSxJQUFJO0FBQUE7QUFBQTtBQUFBO0FBTTdDLFFBQUksS0FBSyxVQUFVO0FBQ2pCLFlBQU0sV0FBVyxPQUFPLFNBQVMsWUFBWSxJQUFJO0FBQ2pELGlCQUFXLFFBQVEsS0FBSyxVQUFVO0FBQ2hDLGNBQU0sZUFBZSxTQUFTO0FBRTlCLGlCQUFTLFFBQVEsSUFBSSxVQUFTO0FBQzVCLGNBQUksTUFBTSxLQUFLLFNBQVMsTUFBTSxNQUFNLFVBQVU7QUFDOUMsY0FBSSxRQUFRLE9BQU87QUFDakIsa0JBQU0sYUFBYSxNQUFNLFVBQVU7QUFBQTtBQUVyQyxpQkFBTztBQUFBO0FBQUE7QUFHWCxXQUFLLFdBQVc7QUFBQTtBQUVsQixRQUFJLEtBQUssV0FBVztBQUNsQixZQUFNLFlBQVksT0FBTyxTQUFTLGFBQWEsSUFBSTtBQUNuRCxpQkFBVyxRQUFRLEtBQUssV0FBVztBQUNqQyxjQUFNLGdCQUFnQixVQUFVO0FBRWhDLGtCQUFVLFFBQVEsSUFBSSxVQUFTO0FBQzdCLGNBQUksTUFBTSxLQUFLLFVBQVUsTUFBTSxNQUFNLFdBQVc7QUFDaEQsY0FBSSxRQUFRLE9BQU87QUFDakIsa0JBQU0sY0FBYyxNQUFNLFdBQVc7QUFBQTtBQUV2QyxpQkFBTztBQUFBO0FBQUE7QUFHWCxXQUFLLFlBQVk7QUFBQTtBQUluQixRQUFJLEtBQUssWUFBWTtBQUNuQixZQUFNLGNBQWEsT0FBTyxTQUFTO0FBQ25DLFdBQUssYUFBYSxTQUFTLE9BQU87QUFDaEMsYUFBSyxXQUFXLEtBQUssTUFBTTtBQUMzQixZQUFJLGFBQVk7QUFDZCxzQkFBVyxLQUFLLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFLNUIsUUFBSSxlQUFlO0FBQ2pCLFdBQUssYUFBYTtBQUFBO0FBR3BCLFdBQU8sV0FBVztBQUFBO0FBQUE7QUFRdEIsT0FBTyxhQUFhLFNBQVMsUUFBUSxVQUFVO0FBQzdDLGFBQVcsU0FBUyxRQUFRO0FBQzFCLGFBQVMsS0FBSyxRQUFRO0FBQ3RCLFlBQVEsTUFBTTtBQUFBLFdBQ1AsU0FBUztBQUNaLG1CQUFXLFFBQVEsTUFBTSxRQUFRO0FBQy9CLGlCQUFPLFdBQVcsS0FBSyxRQUFRO0FBQUE7QUFFakMsbUJBQVcsT0FBTyxNQUFNLE1BQU07QUFDNUIscUJBQVcsUUFBUSxLQUFLO0FBQ3RCLG1CQUFPLFdBQVcsS0FBSyxRQUFRO0FBQUE7QUFBQTtBQUduQztBQUFBO0FBQUEsV0FFRyxRQUFRO0FBQ1gsZUFBTyxXQUFXLE1BQU0sT0FBTztBQUMvQjtBQUFBO0FBQUEsZUFFTztBQUNQLFlBQUksT0FBTyxTQUFTLGNBQWMsT0FBTyxTQUFTLFdBQVcsZUFBZSxPQUFPLFNBQVMsV0FBVyxZQUFZLE1BQU0sT0FBTztBQUM5SCxpQkFBTyxTQUFTLFdBQVcsWUFBWSxNQUFNLE1BQU0sUUFBUSxTQUFTLGFBQWE7QUFDL0UsbUJBQU8sV0FBVyxNQUFNLGNBQWM7QUFBQTtBQUFBLG1CQUUvQixNQUFNLFFBQVE7QUFDdkIsaUJBQU8sV0FBVyxNQUFNLFFBQVE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBVTFDLE9BQU8sY0FBYyxTQUFTLEtBQUssS0FBSztBQUV0QyxNQUFJLE9BQU8sUUFBUSxlQUFlLFFBQVEsTUFBTTtBQUM5QyxVQUFNLElBQUksTUFBTTtBQUFBO0FBRWxCLE1BQUksT0FBTyxRQUFRLFVBQVU7QUFDM0IsVUFBTSxJQUFJLE1BQU0sc0RBQ1osT0FBTyxVQUFVLFNBQVMsS0FBSyxPQUFPO0FBQUE7QUFHNUMsUUFBTSxNQUFNLElBQUksT0FBTyxVQUFVLE9BQU87QUFDeEMsMkJBQXlCO0FBRXpCLE1BQUk7QUFDRixVQUFNLFNBQVMsTUFBTSxVQUFVLEtBQUs7QUFDcEMsUUFBSSxJQUFJLFlBQVk7QUFDbEIsYUFBTyxXQUFXLFFBQVEsSUFBSTtBQUFBO0FBRWhDLFdBQU8sT0FBTyxZQUFZLFFBQVE7QUFBQSxXQUMzQixHQUFQO0FBQ0EsTUFBRSxXQUFXO0FBQ2IsUUFBSSxJQUFJLFFBQVE7QUFDZCxhQUFPLG1DQUNILFFBQU8sRUFBRSxVQUFVLElBQUksUUFDdkI7QUFBQTtBQUVOLFVBQU07QUFBQTtBQUFBO0FBT1YsT0FBTyxTQUFTO0FBQ2hCLE9BQU8sU0FBUyxPQUFPO0FBQ3ZCLE9BQU8sV0FBVztBQUNsQixPQUFPLGVBQWU7QUFDdEIsT0FBTyxRQUFRO0FBQ2YsT0FBTyxRQUFRLE1BQU07QUFDckIsT0FBTyxZQUFZO0FBQ25CLE9BQU8sVUFBVTtBQUNqQixPQUFPLFFBQVE7QUFFZixJQUFNLFVBQVUsT0FBTztBQUN2QixJQUFNLGFBQWEsT0FBTztBQUMxQixJQUFNLE1BQU0sT0FBTztBQUNuQixJQUFNLGFBQWEsT0FBTztBQUMxQixJQUFNLGNBQWMsT0FBTztBQUUzQixJQUFNLFNBQVMsT0FBTztBQUN0QixJQUFNLFFBQVEsTUFBTTs7O0FDMW9GcEIsdUJBQXdCO0FBQ3hCLHlCQUF1Qjs7O0FDQXZCLElBQUksYUFBYSxPQUFPLFVBQVUsWUFBWSxVQUFVLE9BQU8sV0FBVyxVQUFVO0FBRXBGLElBQU8scUJBQVE7OztBQ0FmLElBQUksV0FBVyxPQUFPLFFBQVEsWUFBWSxRQUFRLEtBQUssV0FBVyxVQUFVO0FBRzVFLElBQUksT0FBTyxzQkFBYyxZQUFZLFNBQVM7QUFFOUMsSUFBTyxlQUFROzs7QUNMZixJQUFJLFVBQVMsYUFBSztBQUVsQixJQUFPLGlCQUFROzs7QUNGZixJQUFJLGNBQWMsT0FBTztBQUd6QixJQUFJLGlCQUFpQixZQUFZO0FBT2pDLElBQUksdUJBQXVCLFlBQVk7QUFHdkMsSUFBSSxpQkFBaUIsaUJBQVMsZUFBTyxjQUFjO0FBU25ELG1CQUFtQixPQUFPO0FBQ3hCLE1BQUksUUFBUSxlQUFlLEtBQUssT0FBTyxpQkFDbkMsTUFBTSxNQUFNO0FBRWhCLE1BQUk7QUFDRixVQUFNLGtCQUFrQjtBQUN4QixRQUFJLFdBQVc7QUFBQSxXQUNSLEdBQVA7QUFBQTtBQUVGLE1BQUksU0FBUyxxQkFBcUIsS0FBSztBQUN2QyxNQUFJLFVBQVU7QUFDWixRQUFJLE9BQU87QUFDVCxZQUFNLGtCQUFrQjtBQUFBLFdBQ25CO0FBQ0wsYUFBTyxNQUFNO0FBQUE7QUFBQTtBQUdqQixTQUFPO0FBQUE7QUFHVCxJQUFPLG9CQUFROzs7QUM1Q2YsSUFBSSxlQUFjLE9BQU87QUFPekIsSUFBSSx3QkFBdUIsYUFBWTtBQVN2Qyx3QkFBd0IsT0FBTztBQUM3QixTQUFPLHNCQUFxQixLQUFLO0FBQUE7QUFHbkMsSUFBTyx5QkFBUTs7O0FDaEJmLElBQUksVUFBVTtBQUFkLElBQ0ksZUFBZTtBQUduQixJQUFJLGtCQUFpQixpQkFBUyxlQUFPLGNBQWM7QUFTbkQsb0JBQW9CLE9BQU87QUFDekIsTUFBSSxTQUFTLE1BQU07QUFDakIsV0FBTyxVQUFVLFNBQVksZUFBZTtBQUFBO0FBRTlDLFNBQVEsbUJBQWtCLG1CQUFrQixPQUFPLFNBQy9DLGtCQUFVLFNBQ1YsdUJBQWU7QUFBQTtBQUdyQixJQUFPLHFCQUFROzs7QUNIZixzQkFBc0IsT0FBTztBQUMzQixTQUFPLFNBQVMsUUFBUSxPQUFPLFNBQVM7QUFBQTtBQUcxQyxJQUFPLHVCQUFROzs7QUN4QmYsSUFBSSxZQUFZO0FBbUJoQixrQkFBa0IsT0FBTztBQUN2QixTQUFPLE9BQU8sU0FBUyxZQUNwQixxQkFBYSxVQUFVLG1CQUFXLFVBQVU7QUFBQTtBQUdqRCxJQUFPLG1CQUFROzs7QUNuQmYsa0JBQWtCLE9BQU8sVUFBVTtBQUNqQyxNQUFJLFFBQVEsSUFDUixTQUFTLFNBQVMsT0FBTyxJQUFJLE1BQU0sUUFDbkMsU0FBUyxNQUFNO0FBRW5CLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsV0FBTyxTQUFTLFNBQVMsTUFBTSxRQUFRLE9BQU87QUFBQTtBQUVoRCxTQUFPO0FBQUE7QUFHVCxJQUFPLG1CQUFROzs7QUNHZixJQUFJLFVBQVUsTUFBTTtBQUVwQixJQUFPLGtCQUFROzs7QUNuQmYsSUFBSSxXQUFXLElBQUk7QUFHbkIsSUFBSSxjQUFjLGlCQUFTLGVBQU8sWUFBWTtBQUE5QyxJQUNJLGlCQUFpQixjQUFjLFlBQVksV0FBVztBQVUxRCxzQkFBc0IsT0FBTztBQUUzQixNQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzVCLFdBQU87QUFBQTtBQUVULE1BQUksZ0JBQVEsUUFBUTtBQUVsQixXQUFPLGlCQUFTLE9BQU8sZ0JBQWdCO0FBQUE7QUFFekMsTUFBSSxpQkFBUyxRQUFRO0FBQ25CLFdBQU8saUJBQWlCLGVBQWUsS0FBSyxTQUFTO0FBQUE7QUFFdkQsTUFBSSxTQUFVLFFBQVE7QUFDdEIsU0FBUSxVQUFVLE9BQVEsSUFBSSxTQUFVLENBQUMsV0FBWSxPQUFPO0FBQUE7QUFHOUQsSUFBTyx1QkFBUTs7O0FDbkNmLElBQUksZUFBZTtBQVVuQix5QkFBeUIsUUFBUTtBQUMvQixNQUFJLFFBQVEsT0FBTztBQUVuQixTQUFPLFdBQVcsYUFBYSxLQUFLLE9BQU8sT0FBTyxTQUFTO0FBQUE7QUFDM0QsU0FBTztBQUFBO0FBR1QsSUFBTywwQkFBUTs7O0FDZmYsSUFBSSxjQUFjO0FBU2xCLGtCQUFrQixRQUFRO0FBQ3hCLFNBQU8sU0FDSCxPQUFPLE1BQU0sR0FBRyx3QkFBZ0IsVUFBVSxHQUFHLFFBQVEsYUFBYSxNQUNsRTtBQUFBO0FBR04sSUFBTyxtQkFBUTs7O0FDT2Ysa0JBQWtCLE9BQU87QUFDdkIsTUFBSSxPQUFPLE9BQU87QUFDbEIsU0FBTyxTQUFTLFFBQVMsU0FBUSxZQUFZLFFBQVE7QUFBQTtBQUd2RCxJQUFPLG1CQUFROzs7QUN6QmYsSUFBSSxNQUFNLElBQUk7QUFHZCxJQUFJLGFBQWE7QUFHakIsSUFBSSxhQUFhO0FBR2pCLElBQUksWUFBWTtBQUdoQixJQUFJLGVBQWU7QUF5Qm5CLGtCQUFrQixPQUFPO0FBQ3ZCLE1BQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsV0FBTztBQUFBO0FBRVQsTUFBSSxpQkFBUyxRQUFRO0FBQ25CLFdBQU87QUFBQTtBQUVULE1BQUksaUJBQVMsUUFBUTtBQUNuQixRQUFJLFFBQVEsT0FBTyxNQUFNLFdBQVcsYUFBYSxNQUFNLFlBQVk7QUFDbkUsWUFBUSxpQkFBUyxTQUFVLFFBQVEsS0FBTTtBQUFBO0FBRTNDLE1BQUksT0FBTyxTQUFTLFVBQVU7QUFDNUIsV0FBTyxVQUFVLElBQUksUUFBUSxDQUFDO0FBQUE7QUFFaEMsVUFBUSxpQkFBUztBQUNqQixNQUFJLFdBQVcsV0FBVyxLQUFLO0FBQy9CLFNBQVEsWUFBWSxVQUFVLEtBQUssU0FDL0IsYUFBYSxNQUFNLE1BQU0sSUFBSSxXQUFXLElBQUksS0FDM0MsV0FBVyxLQUFLLFNBQVMsTUFBTSxDQUFDO0FBQUE7QUFHdkMsSUFBTyxtQkFBUTs7O0FDNURmLElBQUksWUFBVyxJQUFJO0FBQW5CLElBQ0ksY0FBYztBQXlCbEIsa0JBQWtCLE9BQU87QUFDdkIsTUFBSSxDQUFDLE9BQU87QUFDVixXQUFPLFVBQVUsSUFBSSxRQUFRO0FBQUE7QUFFL0IsVUFBUSxpQkFBUztBQUNqQixNQUFJLFVBQVUsYUFBWSxVQUFVLENBQUMsV0FBVTtBQUM3QyxRQUFJLE9BQVEsUUFBUSxJQUFJLEtBQUs7QUFDN0IsV0FBTyxPQUFPO0FBQUE7QUFFaEIsU0FBTyxVQUFVLFFBQVEsUUFBUTtBQUFBO0FBR25DLElBQU8sbUJBQVE7OztBQ2JmLG1CQUFtQixPQUFPO0FBQ3hCLE1BQUksU0FBUyxpQkFBUyxRQUNsQixZQUFZLFNBQVM7QUFFekIsU0FBTyxXQUFXLFNBQVUsWUFBWSxTQUFTLFlBQVksU0FBVTtBQUFBO0FBR3pFLElBQU8sb0JBQVE7OztBQy9CZixJQUFJLFdBQVc7QUFBZixJQUNJLFVBQVU7QUFEZCxJQUVJLFNBQVM7QUFGYixJQUdJLFdBQVc7QUFtQmYsb0JBQW9CLE9BQU87QUFDekIsTUFBSSxDQUFDLGlCQUFTLFFBQVE7QUFDcEIsV0FBTztBQUFBO0FBSVQsTUFBSSxNQUFNLG1CQUFXO0FBQ3JCLFNBQU8sT0FBTyxXQUFXLE9BQU8sVUFBVSxPQUFPLFlBQVksT0FBTztBQUFBO0FBR3RFLElBQU8scUJBQVE7OztBQ2pDZixJQUFJLGFBQWEsYUFBSztBQUV0QixJQUFPLHFCQUFROzs7QUNGZixJQUFJLGFBQWMsV0FBVztBQUMzQixNQUFJLE1BQU0sU0FBUyxLQUFLLHNCQUFjLG1CQUFXLFFBQVEsbUJBQVcsS0FBSyxZQUFZO0FBQ3JGLFNBQU8sTUFBTyxtQkFBbUIsTUFBTztBQUFBO0FBVTFDLGtCQUFrQixNQUFNO0FBQ3RCLFNBQU8sQ0FBQyxDQUFDLGNBQWUsY0FBYztBQUFBO0FBR3hDLElBQU8sbUJBQVE7OztBQ2xCZixJQUFJLFlBQVksU0FBUztBQUd6QixJQUFJLGVBQWUsVUFBVTtBQVM3QixrQkFBa0IsTUFBTTtBQUN0QixNQUFJLFFBQVEsTUFBTTtBQUNoQixRQUFJO0FBQ0YsYUFBTyxhQUFhLEtBQUs7QUFBQSxhQUNsQixHQUFQO0FBQUE7QUFDRixRQUFJO0FBQ0YsYUFBUSxPQUFPO0FBQUEsYUFDUixHQUFQO0FBQUE7QUFBQTtBQUVKLFNBQU87QUFBQTtBQUdULElBQU8sbUJBQVE7OztBQ2hCZixJQUFJLGVBQWU7QUFHbkIsSUFBSSxlQUFlO0FBR25CLElBQUksYUFBWSxTQUFTO0FBQXpCLElBQ0ksZUFBYyxPQUFPO0FBR3pCLElBQUksZ0JBQWUsV0FBVTtBQUc3QixJQUFJLGtCQUFpQixhQUFZO0FBR2pDLElBQUksYUFBYSxPQUFPLE1BQ3RCLGNBQWEsS0FBSyxpQkFBZ0IsUUFBUSxjQUFjLFFBQ3ZELFFBQVEsMERBQTBELFdBQVc7QUFXaEYsc0JBQXNCLE9BQU87QUFDM0IsTUFBSSxDQUFDLGlCQUFTLFVBQVUsaUJBQVMsUUFBUTtBQUN2QyxXQUFPO0FBQUE7QUFFVCxNQUFJLFVBQVUsbUJBQVcsU0FBUyxhQUFhO0FBQy9DLFNBQU8sUUFBUSxLQUFLLGlCQUFTO0FBQUE7QUFHL0IsSUFBTyx1QkFBUTs7O0FDdENmLGtCQUFrQixRQUFRLEtBQUs7QUFDN0IsU0FBTyxVQUFVLE9BQU8sU0FBWSxPQUFPO0FBQUE7QUFHN0MsSUFBTyxtQkFBUTs7O0FDRGYsbUJBQW1CLFFBQVEsS0FBSztBQUM5QixNQUFJLFFBQVEsaUJBQVMsUUFBUTtBQUM3QixTQUFPLHFCQUFhLFNBQVMsUUFBUTtBQUFBO0FBR3ZDLElBQU8sb0JBQVE7OztBQ2dCZixZQUFZLE9BQU8sT0FBTztBQUN4QixTQUFPLFVBQVUsU0FBVSxVQUFVLFNBQVMsVUFBVTtBQUFBO0FBRzFELElBQU8sYUFBUTs7O0FDN0JmLG1CQUFtQixNQUFNO0FBQ3ZCLFNBQU8sU0FBUyxPQUFPO0FBQ3JCLFdBQU8sS0FBSztBQUFBO0FBQUE7QUFJaEIsSUFBTyxvQkFBUTs7O0FDVmYsSUFBSSxjQUFjLE9BQU8sV0FBVyxZQUFZLFdBQVcsQ0FBQyxRQUFRLFlBQVk7QUFHaEYsSUFBSSxhQUFhLGVBQWUsT0FBTyxVQUFVLFlBQVksVUFBVSxDQUFDLE9BQU8sWUFBWTtBQUczRixJQUFJLGdCQUFnQixjQUFjLFdBQVcsWUFBWTtBQUd6RCxJQUFJLGNBQWMsaUJBQWlCLG1CQUFXO0FBRzlDLElBQUksV0FBWSxXQUFXO0FBQ3pCLE1BQUk7QUFFRixRQUFJLFFBQVEsY0FBYyxXQUFXLFdBQVcsV0FBVyxRQUFRLFFBQVE7QUFFM0UsUUFBSSxPQUFPO0FBQ1QsYUFBTztBQUFBO0FBSVQsV0FBTyxlQUFlLFlBQVksV0FBVyxZQUFZLFFBQVE7QUFBQSxXQUMxRCxHQUFQO0FBQUE7QUFBQTtBQUdKLElBQU8sbUJBQVE7OztBQ3pCZixJQUFJLGVBQWU7QUFBbkIsSUFDSSxnQkFBZ0I7QUFVcEIsZUFBZSxPQUFPLFFBQVE7QUFDNUIsTUFBSSxnQkFBUSxRQUFRO0FBQ2xCLFdBQU87QUFBQTtBQUVULE1BQUksT0FBTyxPQUFPO0FBQ2xCLE1BQUksUUFBUSxZQUFZLFFBQVEsWUFBWSxRQUFRLGFBQ2hELFNBQVMsUUFBUSxpQkFBUyxRQUFRO0FBQ3BDLFdBQU87QUFBQTtBQUVULFNBQU8sY0FBYyxLQUFLLFVBQVUsQ0FBQyxhQUFhLEtBQUssVUFDcEQsVUFBVSxRQUFRLFNBQVMsT0FBTztBQUFBO0FBR3ZDLElBQU8sZ0JBQVE7OztBQ3pCZixJQUFJLGVBQWUsa0JBQVUsUUFBUTtBQUVyQyxJQUFPLHVCQUFROzs7QUNJZixxQkFBcUI7QUFDbkIsT0FBSyxXQUFXLHVCQUFlLHFCQUFhLFFBQVE7QUFDcEQsT0FBSyxPQUFPO0FBQUE7QUFHZCxJQUFPLG9CQUFROzs7QUNKZixvQkFBb0IsS0FBSztBQUN2QixNQUFJLFNBQVMsS0FBSyxJQUFJLFFBQVEsT0FBTyxLQUFLLFNBQVM7QUFDbkQsT0FBSyxRQUFRLFNBQVMsSUFBSTtBQUMxQixTQUFPO0FBQUE7QUFHVCxJQUFPLHFCQUFROzs7QUNiZixJQUFJLGlCQUFpQjtBQUdyQixJQUFJLGVBQWMsT0FBTztBQUd6QixJQUFJLGtCQUFpQixhQUFZO0FBV2pDLGlCQUFpQixLQUFLO0FBQ3BCLE1BQUksT0FBTyxLQUFLO0FBQ2hCLE1BQUksc0JBQWM7QUFDaEIsUUFBSSxTQUFTLEtBQUs7QUFDbEIsV0FBTyxXQUFXLGlCQUFpQixTQUFZO0FBQUE7QUFFakQsU0FBTyxnQkFBZSxLQUFLLE1BQU0sT0FBTyxLQUFLLE9BQU87QUFBQTtBQUd0RCxJQUFPLGtCQUFROzs7QUMxQmYsSUFBSSxlQUFjLE9BQU87QUFHekIsSUFBSSxrQkFBaUIsYUFBWTtBQVdqQyxpQkFBaUIsS0FBSztBQUNwQixNQUFJLE9BQU8sS0FBSztBQUNoQixTQUFPLHVCQUFnQixLQUFLLFNBQVMsU0FBYSxnQkFBZSxLQUFLLE1BQU07QUFBQTtBQUc5RSxJQUFPLGtCQUFROzs7QUNuQmYsSUFBSSxrQkFBaUI7QUFZckIsaUJBQWlCLEtBQUssT0FBTztBQUMzQixNQUFJLE9BQU8sS0FBSztBQUNoQixPQUFLLFFBQVEsS0FBSyxJQUFJLE9BQU8sSUFBSTtBQUNqQyxPQUFLLE9BQVEsd0JBQWdCLFVBQVUsU0FBYSxrQkFBaUI7QUFDckUsU0FBTztBQUFBO0FBR1QsSUFBTyxrQkFBUTs7O0FDVGYsY0FBYyxTQUFTO0FBQ3JCLE1BQUksUUFBUSxJQUNSLFNBQVMsV0FBVyxPQUFPLElBQUksUUFBUTtBQUUzQyxPQUFLO0FBQ0wsU0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixRQUFJLFFBQVEsUUFBUTtBQUNwQixTQUFLLElBQUksTUFBTSxJQUFJLE1BQU07QUFBQTtBQUFBO0FBSzdCLEtBQUssVUFBVSxRQUFRO0FBQ3ZCLEtBQUssVUFBVSxZQUFZO0FBQzNCLEtBQUssVUFBVSxNQUFNO0FBQ3JCLEtBQUssVUFBVSxNQUFNO0FBQ3JCLEtBQUssVUFBVSxNQUFNO0FBRXJCLElBQU8sZUFBUTs7O0FDeEJmLDBCQUEwQjtBQUN4QixPQUFLLFdBQVc7QUFDaEIsT0FBSyxPQUFPO0FBQUE7QUFHZCxJQUFPLHlCQUFROzs7QUNGZixzQkFBc0IsT0FBTyxLQUFLO0FBQ2hDLE1BQUksU0FBUyxNQUFNO0FBQ25CLFNBQU8sVUFBVTtBQUNmLFFBQUksV0FBRyxNQUFNLFFBQVEsSUFBSSxNQUFNO0FBQzdCLGFBQU87QUFBQTtBQUFBO0FBR1gsU0FBTztBQUFBO0FBR1QsSUFBTyx1QkFBUTs7O0FDakJmLElBQUksYUFBYSxNQUFNO0FBR3ZCLElBQUksU0FBUyxXQUFXO0FBV3hCLHlCQUF5QixLQUFLO0FBQzVCLE1BQUksT0FBTyxLQUFLLFVBQ1osUUFBUSxxQkFBYSxNQUFNO0FBRS9CLE1BQUksUUFBUSxHQUFHO0FBQ2IsV0FBTztBQUFBO0FBRVQsTUFBSSxZQUFZLEtBQUssU0FBUztBQUM5QixNQUFJLFNBQVMsV0FBVztBQUN0QixTQUFLO0FBQUEsU0FDQTtBQUNMLFdBQU8sS0FBSyxNQUFNLE9BQU87QUFBQTtBQUUzQixJQUFFLEtBQUs7QUFDUCxTQUFPO0FBQUE7QUFHVCxJQUFPLDBCQUFROzs7QUN2QmYsc0JBQXNCLEtBQUs7QUFDekIsTUFBSSxPQUFPLEtBQUssVUFDWixRQUFRLHFCQUFhLE1BQU07QUFFL0IsU0FBTyxRQUFRLElBQUksU0FBWSxLQUFLLE9BQU87QUFBQTtBQUc3QyxJQUFPLHVCQUFROzs7QUNQZixzQkFBc0IsS0FBSztBQUN6QixTQUFPLHFCQUFhLEtBQUssVUFBVSxPQUFPO0FBQUE7QUFHNUMsSUFBTyx1QkFBUTs7O0FDSGYsc0JBQXNCLEtBQUssT0FBTztBQUNoQyxNQUFJLE9BQU8sS0FBSyxVQUNaLFFBQVEscUJBQWEsTUFBTTtBQUUvQixNQUFJLFFBQVEsR0FBRztBQUNiLE1BQUUsS0FBSztBQUNQLFNBQUssS0FBSyxDQUFDLEtBQUs7QUFBQSxTQUNYO0FBQ0wsU0FBSyxPQUFPLEtBQUs7QUFBQTtBQUVuQixTQUFPO0FBQUE7QUFHVCxJQUFPLHVCQUFROzs7QUNaZixtQkFBbUIsU0FBUztBQUMxQixNQUFJLFFBQVEsSUFDUixTQUFTLFdBQVcsT0FBTyxJQUFJLFFBQVE7QUFFM0MsT0FBSztBQUNMLFNBQU8sRUFBRSxRQUFRLFFBQVE7QUFDdkIsUUFBSSxRQUFRLFFBQVE7QUFDcEIsU0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNO0FBQUE7QUFBQTtBQUs3QixVQUFVLFVBQVUsUUFBUTtBQUM1QixVQUFVLFVBQVUsWUFBWTtBQUNoQyxVQUFVLFVBQVUsTUFBTTtBQUMxQixVQUFVLFVBQVUsTUFBTTtBQUMxQixVQUFVLFVBQVUsTUFBTTtBQUUxQixJQUFPLG9CQUFROzs7QUMzQmYsSUFBSSxPQUFNLGtCQUFVLGNBQU07QUFFMUIsSUFBTyxjQUFROzs7QUNLZix5QkFBeUI7QUFDdkIsT0FBSyxPQUFPO0FBQ1osT0FBSyxXQUFXO0FBQUEsSUFDZCxRQUFRLElBQUk7QUFBQSxJQUNaLE9BQU8sSUFBSyxnQkFBTztBQUFBLElBQ25CLFVBQVUsSUFBSTtBQUFBO0FBQUE7QUFJbEIsSUFBTyx3QkFBUTs7O0FDYmYsbUJBQW1CLE9BQU87QUFDeEIsTUFBSSxPQUFPLE9BQU87QUFDbEIsU0FBUSxRQUFRLFlBQVksUUFBUSxZQUFZLFFBQVEsWUFBWSxRQUFRLFlBQ3ZFLFVBQVUsY0FDVixVQUFVO0FBQUE7QUFHakIsSUFBTyxvQkFBUTs7O0FDSmYsb0JBQW9CLEtBQUssS0FBSztBQUM1QixNQUFJLE9BQU8sSUFBSTtBQUNmLFNBQU8sa0JBQVUsT0FDYixLQUFLLE9BQU8sT0FBTyxXQUFXLFdBQVcsVUFDekMsS0FBSztBQUFBO0FBR1gsSUFBTyxxQkFBUTs7O0FDTmYsd0JBQXdCLEtBQUs7QUFDM0IsTUFBSSxTQUFTLG1CQUFXLE1BQU0sS0FBSyxVQUFVO0FBQzdDLE9BQUssUUFBUSxTQUFTLElBQUk7QUFDMUIsU0FBTztBQUFBO0FBR1QsSUFBTyx5QkFBUTs7O0FDTmYscUJBQXFCLEtBQUs7QUFDeEIsU0FBTyxtQkFBVyxNQUFNLEtBQUssSUFBSTtBQUFBO0FBR25DLElBQU8sc0JBQVE7OztBQ0pmLHFCQUFxQixLQUFLO0FBQ3hCLFNBQU8sbUJBQVcsTUFBTSxLQUFLLElBQUk7QUFBQTtBQUduQyxJQUFPLHNCQUFROzs7QUNIZixxQkFBcUIsS0FBSyxPQUFPO0FBQy9CLE1BQUksT0FBTyxtQkFBVyxNQUFNLE1BQ3hCLE9BQU8sS0FBSztBQUVoQixPQUFLLElBQUksS0FBSztBQUNkLE9BQUssUUFBUSxLQUFLLFFBQVEsT0FBTyxJQUFJO0FBQ3JDLFNBQU87QUFBQTtBQUdULElBQU8sc0JBQVE7OztBQ1JmLGtCQUFrQixTQUFTO0FBQ3pCLE1BQUksUUFBUSxJQUNSLFNBQVMsV0FBVyxPQUFPLElBQUksUUFBUTtBQUUzQyxPQUFLO0FBQ0wsU0FBTyxFQUFFLFFBQVEsUUFBUTtBQUN2QixRQUFJLFFBQVEsUUFBUTtBQUNwQixTQUFLLElBQUksTUFBTSxJQUFJLE1BQU07QUFBQTtBQUFBO0FBSzdCLFNBQVMsVUFBVSxRQUFRO0FBQzNCLFNBQVMsVUFBVSxZQUFZO0FBQy9CLFNBQVMsVUFBVSxNQUFNO0FBQ3pCLFNBQVMsVUFBVSxNQUFNO0FBQ3pCLFNBQVMsVUFBVSxNQUFNO0FBRXpCLElBQU8sbUJBQVE7OztBQzVCZixJQUFJLGtCQUFrQjtBQThDdEIsaUJBQWlCLE1BQU0sVUFBVTtBQUMvQixNQUFJLE9BQU8sUUFBUSxjQUFlLFlBQVksUUFBUSxPQUFPLFlBQVksWUFBYTtBQUNwRixVQUFNLElBQUksVUFBVTtBQUFBO0FBRXRCLE1BQUksV0FBVyxXQUFXO0FBQ3hCLFFBQUksT0FBTyxXQUNQLE1BQU0sV0FBVyxTQUFTLE1BQU0sTUFBTSxRQUFRLEtBQUssSUFDbkQsUUFBUSxTQUFTO0FBRXJCLFFBQUksTUFBTSxJQUFJLE1BQU07QUFDbEIsYUFBTyxNQUFNLElBQUk7QUFBQTtBQUVuQixRQUFJLFNBQVMsS0FBSyxNQUFNLE1BQU07QUFDOUIsYUFBUyxRQUFRLE1BQU0sSUFBSSxLQUFLLFdBQVc7QUFDM0MsV0FBTztBQUFBO0FBRVQsV0FBUyxRQUFRLElBQUssU0FBUSxTQUFTO0FBQ3ZDLFNBQU87QUFBQTtBQUlULFFBQVEsUUFBUTtBQUVoQixJQUFPLGtCQUFROzs7QUNyRWYsSUFBSSxtQkFBbUI7QUFVdkIsdUJBQXVCLE1BQU07QUFDM0IsTUFBSSxTQUFTLGdCQUFRLE1BQU0sU0FBUyxLQUFLO0FBQ3ZDLFFBQUksTUFBTSxTQUFTLGtCQUFrQjtBQUNuQyxZQUFNO0FBQUE7QUFFUixXQUFPO0FBQUE7QUFHVCxNQUFJLFFBQVEsT0FBTztBQUNuQixTQUFPO0FBQUE7QUFHVCxJQUFPLHdCQUFROzs7QUN0QmYsSUFBSSxhQUFhO0FBR2pCLElBQUksZUFBZTtBQVNuQixJQUFJLGVBQWUsc0JBQWMsU0FBUyxRQUFRO0FBQ2hELE1BQUksU0FBUztBQUNiLE1BQUksT0FBTyxXQUFXLE9BQU8sSUFBWTtBQUN2QyxXQUFPLEtBQUs7QUFBQTtBQUVkLFNBQU8sUUFBUSxZQUFZLFNBQVMsUUFBTyxRQUFRLE9BQU8sV0FBVztBQUNuRSxXQUFPLEtBQUssUUFBUSxVQUFVLFFBQVEsY0FBYyxRQUFTLFVBQVU7QUFBQTtBQUV6RSxTQUFPO0FBQUE7QUFHVCxJQUFPLHVCQUFROzs7QUNIZixrQkFBa0IsT0FBTztBQUN2QixTQUFPLFNBQVMsT0FBTyxLQUFLLHFCQUFhO0FBQUE7QUFHM0MsSUFBTyxtQkFBUTs7O0FDZGYsa0JBQWtCLE9BQU8sUUFBUTtBQUMvQixNQUFJLGdCQUFRLFFBQVE7QUFDbEIsV0FBTztBQUFBO0FBRVQsU0FBTyxjQUFNLE9BQU8sVUFBVSxDQUFDLFNBQVMscUJBQWEsaUJBQVM7QUFBQTtBQUdoRSxJQUFPLG1CQUFROzs7QUNqQmYsSUFBSSxZQUFXLElBQUk7QUFTbkIsZUFBZSxPQUFPO0FBQ3BCLE1BQUksT0FBTyxTQUFTLFlBQVksaUJBQVMsUUFBUTtBQUMvQyxXQUFPO0FBQUE7QUFFVCxNQUFJLFNBQVUsUUFBUTtBQUN0QixTQUFRLFVBQVUsT0FBUSxJQUFJLFNBQVUsQ0FBQyxZQUFZLE9BQU87QUFBQTtBQUc5RCxJQUFPLGdCQUFROzs7QUNUZixpQkFBaUIsUUFBUSxNQUFNO0FBQzdCLFNBQU8saUJBQVMsTUFBTTtBQUV0QixNQUFJLFFBQVEsR0FDUixTQUFTLEtBQUs7QUFFbEIsU0FBTyxVQUFVLFFBQVEsUUFBUSxRQUFRO0FBQ3ZDLGFBQVMsT0FBTyxjQUFNLEtBQUs7QUFBQTtBQUU3QixTQUFRLFNBQVMsU0FBUyxTQUFVLFNBQVM7QUFBQTtBQUcvQyxJQUFPLGtCQUFROzs7QUNJZixhQUFhLFFBQVEsTUFBTSxjQUFjO0FBQ3ZDLE1BQUksU0FBUyxVQUFVLE9BQU8sU0FBWSxnQkFBUSxRQUFRO0FBQzFELFNBQU8sV0FBVyxTQUFZLGVBQWU7QUFBQTtBQUcvQyxJQUFPLGNBQVE7OztBQzVCZixJQUFJLFVBQVU7QUFTZCxvQkFBb0IsT0FBTztBQUN6QixTQUFPLHFCQUFhLFVBQVUsbUJBQVcsVUFBVTtBQUFBO0FBR3JELElBQU8scUJBQVE7OztBQ1pmLElBQUksYUFBYSxvQkFBWSxpQkFBUztBQW1CdEMsSUFBSSxTQUFTLGFBQWEsa0JBQVUsY0FBYztBQUVsRCxJQUFPLGlCQUFROzs7QUNFZixtQkFBbUIsT0FBTztBQUN4QixTQUFPLE9BQU8sU0FBUyxZQUFZLFNBQVMsa0JBQVU7QUFBQTtBQUd4RCxJQUFPLG9CQUFROzs7QUM1QmYsSUFBSSxZQUFZO0FBNEJoQixrQkFBa0IsT0FBTztBQUN2QixTQUFPLE9BQU8sU0FBUyxZQUNwQixxQkFBYSxVQUFVLG1CQUFXLFVBQVU7QUFBQTtBQUdqRCxJQUFPLG1CQUFROzs7QUNsQ2YsSUFBSSxtQkFBbUI7QUE2QnZCLHVCQUF1QixPQUFPO0FBQzVCLFNBQU8sa0JBQVUsVUFBVSxTQUFTLENBQUMsb0JBQW9CLFNBQVM7QUFBQTtBQUdwRSxJQUFPLHdCQUFRO0FDcENmOztBQ0FlLG9CQUFtQixhQUFhO0FBQzdDLE1BQUksZ0JBQWdCLFFBQVEsZ0JBQWdCLFFBQVEsZ0JBQWdCLE9BQU87QUFDekUsV0FBTztBQUFBO0FBR1QsTUFBSSxTQUFTLE9BQU87QUFFcEIsTUFBSSxNQUFNLFNBQVM7QUFDakIsV0FBTztBQUFBO0FBR1QsU0FBTyxTQUFTLElBQUksS0FBSyxLQUFLLFVBQVUsS0FBSyxNQUFNO0FBQUE7OztBQ1h0QyxzQkFBc0IsVUFBVSxNQUFNO0FBQ25ELE1BQUksS0FBSyxTQUFTLFVBQVU7QUFDMUIsVUFBTSxJQUFJLFVBQVUsV0FBVyxjQUFlLFlBQVcsSUFBSSxNQUFNLE1BQU0seUJBQXlCLEtBQUssU0FBUztBQUFBO0FBQUE7OztBQzhCckcsZ0JBQWdCLFVBQVU7QUFDdkMsZUFBYSxHQUFHO0FBQ2hCLE1BQUksU0FBUyxPQUFPLFVBQVUsU0FBUyxLQUFLO0FBRTVDLE1BQUksb0JBQW9CLFFBQVEsT0FBTyxhQUFhLFlBQVksV0FBVyxpQkFBaUI7QUFFMUYsV0FBTyxJQUFJLEtBQUssU0FBUztBQUFBLGFBQ2hCLE9BQU8sYUFBYSxZQUFZLFdBQVcsbUJBQW1CO0FBQ3ZFLFdBQU8sSUFBSSxLQUFLO0FBQUEsU0FDWDtBQUNMLFFBQUssUUFBTyxhQUFhLFlBQVksV0FBVyxzQkFBc0IsT0FBTyxZQUFZLGFBQWE7QUFFcEcsY0FBUSxLQUFLO0FBRWIsY0FBUSxLQUFLLElBQUksUUFBUTtBQUFBO0FBRzNCLFdBQU8sSUFBSSxLQUFLO0FBQUE7QUFBQTs7O0FDdkJMLHlCQUF5QixXQUFXLGFBQWE7QUFDOUQsZUFBYSxHQUFHO0FBQ2hCLE1BQUksWUFBWSxPQUFPLFdBQVc7QUFDbEMsTUFBSSxTQUFTLFdBQVU7QUFDdkIsU0FBTyxJQUFJLEtBQUssWUFBWTtBQUFBOzs7QUNuQmYseUNBQXlDLE1BQU07QUFDNUQsTUFBSSxVQUFVLElBQUksS0FBSyxLQUFLLElBQUksS0FBSyxlQUFlLEtBQUssWUFBWSxLQUFLLFdBQVcsS0FBSyxZQUFZLEtBQUssY0FBYyxLQUFLLGNBQWMsS0FBSztBQUNqSixVQUFRLGVBQWUsS0FBSztBQUM1QixTQUFPLEtBQUssWUFBWSxRQUFRO0FBQUE7OztBQ3dCbkIsaUJBQWdCLE9BQU87QUFDcEMsZUFBYSxHQUFHO0FBQ2hCLFNBQU8saUJBQWlCLFFBQVEsT0FBTyxVQUFVLFlBQVksT0FBTyxVQUFVLFNBQVMsS0FBSyxXQUFXO0FBQUE7OztBQ3FCMUYsaUJBQWlCLFdBQVc7QUFDekMsZUFBYSxHQUFHO0FBRWhCLE1BQUksQ0FBQyxRQUFPLGNBQWMsT0FBTyxjQUFjLFVBQVU7QUFDdkQsV0FBTztBQUFBO0FBR1QsTUFBSSxPQUFPLE9BQU87QUFDbEIsU0FBTyxDQUFDLE1BQU0sT0FBTztBQUFBOzs7QUNyRXZCLElBQUksdUJBQXVCO0FBQUEsRUFDekIsa0JBQWtCO0FBQUEsSUFDaEIsS0FBSztBQUFBLElBQ0wsT0FBTztBQUFBO0FBQUEsRUFFVCxVQUFVO0FBQUEsSUFDUixLQUFLO0FBQUEsSUFDTCxPQUFPO0FBQUE7QUFBQSxFQUVULGFBQWE7QUFBQSxFQUNiLGtCQUFrQjtBQUFBLElBQ2hCLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQTtBQUFBLEVBRVQsVUFBVTtBQUFBLElBQ1IsS0FBSztBQUFBLElBQ0wsT0FBTztBQUFBO0FBQUEsRUFFVCxhQUFhO0FBQUEsSUFDWCxLQUFLO0FBQUEsSUFDTCxPQUFPO0FBQUE7QUFBQSxFQUVULFFBQVE7QUFBQSxJQUNOLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQTtBQUFBLEVBRVQsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLElBQ0wsT0FBTztBQUFBO0FBQUEsRUFFVCxhQUFhO0FBQUEsSUFDWCxLQUFLO0FBQUEsSUFDTCxPQUFPO0FBQUE7QUFBQSxFQUVULFFBQVE7QUFBQSxJQUNOLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQTtBQUFBLEVBRVQsY0FBYztBQUFBLElBQ1osS0FBSztBQUFBLElBQ0wsT0FBTztBQUFBO0FBQUEsRUFFVCxTQUFTO0FBQUEsSUFDUCxLQUFLO0FBQUEsSUFDTCxPQUFPO0FBQUE7QUFBQSxFQUVULGFBQWE7QUFBQSxJQUNYLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQTtBQUFBLEVBRVQsUUFBUTtBQUFBLElBQ04sS0FBSztBQUFBLElBQ0wsT0FBTztBQUFBO0FBQUEsRUFFVCxZQUFZO0FBQUEsSUFDVixLQUFLO0FBQUEsSUFDTCxPQUFPO0FBQUE7QUFBQSxFQUVULGNBQWM7QUFBQSxJQUNaLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQTtBQUFBO0FBSVgsSUFBSSxpQkFBaUIsU0FBVSxPQUFPLE9BQU8sVUFBUztBQUNwRCxNQUFJO0FBQ0osTUFBSSxhQUFhLHFCQUFxQjtBQUV0QyxNQUFJLE9BQU8sZUFBZSxVQUFVO0FBQ2xDLGFBQVM7QUFBQSxhQUNBLFVBQVUsR0FBRztBQUN0QixhQUFTLFdBQVc7QUFBQSxTQUNmO0FBQ0wsYUFBUyxXQUFXLE1BQU0sUUFBUSxhQUFhLE1BQU07QUFBQTtBQUd2RCxNQUFJLGFBQVksUUFBUSxhQUFZLFVBQVUsU0FBUSxXQUFXO0FBQy9ELFFBQUksU0FBUSxjQUFjLFNBQVEsYUFBYSxHQUFHO0FBQ2hELGFBQU8sUUFBUTtBQUFBLFdBQ1Y7QUFDTCxhQUFPLFNBQVM7QUFBQTtBQUFBO0FBSXBCLFNBQU87QUFBQTtBQUdULElBQU8seUJBQVE7OztBQ3ZGQSwyQkFBMkIsTUFBTTtBQUM5QyxTQUFPLFdBQVk7QUFDakIsUUFBSSxXQUFVLFVBQVUsU0FBUyxLQUFLLFVBQVUsT0FBTyxTQUFZLFVBQVUsS0FBSztBQUVsRixRQUFJLFFBQVEsU0FBUSxRQUFRLE9BQU8sU0FBUSxTQUFTLEtBQUs7QUFDekQsUUFBSSxVQUFTLEtBQUssUUFBUSxVQUFVLEtBQUssUUFBUSxLQUFLO0FBQ3RELFdBQU87QUFBQTtBQUFBOzs7QUNMWCxJQUFJLGNBQWM7QUFBQSxFQUNoQixNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUE7QUFFVCxJQUFJLGNBQWM7QUFBQSxFQUNoQixNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUE7QUFFVCxJQUFJLGtCQUFrQjtBQUFBLEVBQ3BCLE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQSxFQUNSLE9BQU87QUFBQTtBQUVULElBQUksYUFBYTtBQUFBLEVBQ2YsTUFBTSxrQkFBa0I7QUFBQSxJQUN0QixTQUFTO0FBQUEsSUFDVCxjQUFjO0FBQUE7QUFBQSxFQUVoQixNQUFNLGtCQUFrQjtBQUFBLElBQ3RCLFNBQVM7QUFBQSxJQUNULGNBQWM7QUFBQTtBQUFBLEVBRWhCLFVBQVUsa0JBQWtCO0FBQUEsSUFDMUIsU0FBUztBQUFBLElBQ1QsY0FBYztBQUFBO0FBQUE7QUFHbEIsSUFBTyxxQkFBUTs7O0FDakNmLElBQUksdUJBQXVCO0FBQUEsRUFDekIsVUFBVTtBQUFBLEVBQ1YsV0FBVztBQUFBLEVBQ1gsT0FBTztBQUFBLEVBQ1AsVUFBVTtBQUFBLEVBQ1YsVUFBVTtBQUFBLEVBQ1YsT0FBTztBQUFBO0FBR1QsSUFBSSxpQkFBaUIsU0FBVSxPQUFPLE9BQU8sV0FBVyxVQUFVO0FBQ2hFLFNBQU8scUJBQXFCO0FBQUE7QUFHOUIsSUFBTyx5QkFBUTs7O0FDYkEseUJBQXlCLE1BQU07QUFDNUMsU0FBTyxTQUFVLFlBQVksY0FBYztBQUN6QyxRQUFJLFdBQVUsZ0JBQWdCO0FBQzlCLFFBQUksVUFBVSxTQUFRLFVBQVUsT0FBTyxTQUFRLFdBQVc7QUFDMUQsUUFBSTtBQUVKLFFBQUksWUFBWSxnQkFBZ0IsS0FBSyxrQkFBa0I7QUFDckQsVUFBSSxlQUFlLEtBQUssMEJBQTBCLEtBQUs7QUFDdkQsVUFBSSxRQUFRLFNBQVEsUUFBUSxPQUFPLFNBQVEsU0FBUztBQUNwRCxvQkFBYyxLQUFLLGlCQUFpQixVQUFVLEtBQUssaUJBQWlCO0FBQUEsV0FDL0Q7QUFDTCxVQUFJLGdCQUFnQixLQUFLO0FBRXpCLFVBQUksU0FBUyxTQUFRLFFBQVEsT0FBTyxTQUFRLFNBQVMsS0FBSztBQUUxRCxvQkFBYyxLQUFLLE9BQU8sV0FBVyxLQUFLLE9BQU87QUFBQTtBQUduRCxRQUFJLFFBQVEsS0FBSyxtQkFBbUIsS0FBSyxpQkFBaUIsY0FBYztBQUV4RSxXQUFPLFlBQVk7QUFBQTtBQUFBOzs7QUNuQnZCLElBQUksWUFBWTtBQUFBLEVBQ2QsUUFBUSxDQUFDLEtBQUs7QUFBQSxFQUNkLGFBQWEsQ0FBQyxNQUFNO0FBQUEsRUFDcEIsTUFBTSxDQUFDLGlCQUFpQjtBQUFBO0FBRTFCLElBQUksZ0JBQWdCO0FBQUEsRUFDbEIsUUFBUSxDQUFDLEtBQUssS0FBSyxLQUFLO0FBQUEsRUFDeEIsYUFBYSxDQUFDLE1BQU0sTUFBTSxNQUFNO0FBQUEsRUFDaEMsTUFBTSxDQUFDLGVBQWUsZUFBZSxlQUFlO0FBQUE7QUFNdEQsSUFBSSxjQUFjO0FBQUEsRUFDaEIsUUFBUSxDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBLEVBQ2hFLGFBQWEsQ0FBQyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU87QUFBQSxFQUMzRixNQUFNLENBQUMsV0FBVyxZQUFZLFNBQVMsU0FBUyxPQUFPLFFBQVEsUUFBUSxVQUFVLGFBQWEsV0FBVyxZQUFZO0FBQUE7QUFFdkgsSUFBSSxZQUFZO0FBQUEsRUFDZCxRQUFRLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQSxFQUN2QyxPQUFPLENBQUMsTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFBQSxFQUM1QyxhQUFhLENBQUMsT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU87QUFBQSxFQUN4RCxNQUFNLENBQUMsVUFBVSxVQUFVLFdBQVcsYUFBYSxZQUFZLFVBQVU7QUFBQTtBQUUzRSxJQUFJLGtCQUFrQjtBQUFBLEVBQ3BCLFFBQVE7QUFBQSxJQUNOLElBQUk7QUFBQSxJQUNKLElBQUk7QUFBQSxJQUNKLFVBQVU7QUFBQSxJQUNWLE1BQU07QUFBQSxJQUNOLFNBQVM7QUFBQSxJQUNULFdBQVc7QUFBQSxJQUNYLFNBQVM7QUFBQSxJQUNULE9BQU87QUFBQTtBQUFBLEVBRVQsYUFBYTtBQUFBLElBQ1gsSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osVUFBVTtBQUFBLElBQ1YsTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLElBQ1QsV0FBVztBQUFBLElBQ1gsU0FBUztBQUFBLElBQ1QsT0FBTztBQUFBO0FBQUEsRUFFVCxNQUFNO0FBQUEsSUFDSixJQUFJO0FBQUEsSUFDSixJQUFJO0FBQUEsSUFDSixVQUFVO0FBQUEsSUFDVixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFDVCxXQUFXO0FBQUEsSUFDWCxTQUFTO0FBQUEsSUFDVCxPQUFPO0FBQUE7QUFBQTtBQUdYLElBQUksNEJBQTRCO0FBQUEsRUFDOUIsUUFBUTtBQUFBLElBQ04sSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osVUFBVTtBQUFBLElBQ1YsTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLElBQ1QsV0FBVztBQUFBLElBQ1gsU0FBUztBQUFBLElBQ1QsT0FBTztBQUFBO0FBQUEsRUFFVCxhQUFhO0FBQUEsSUFDWCxJQUFJO0FBQUEsSUFDSixJQUFJO0FBQUEsSUFDSixVQUFVO0FBQUEsSUFDVixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFDVCxXQUFXO0FBQUEsSUFDWCxTQUFTO0FBQUEsSUFDVCxPQUFPO0FBQUE7QUFBQSxFQUVULE1BQU07QUFBQSxJQUNKLElBQUk7QUFBQSxJQUNKLElBQUk7QUFBQSxJQUNKLFVBQVU7QUFBQSxJQUNWLE1BQU07QUFBQSxJQUNOLFNBQVM7QUFBQSxJQUNULFdBQVc7QUFBQSxJQUNYLFNBQVM7QUFBQSxJQUNULE9BQU87QUFBQTtBQUFBO0FBSVgsSUFBSSxnQkFBZ0IsU0FBVSxhQUFhLFVBQVU7QUFDbkQsTUFBSSxTQUFTLE9BQU87QUFPcEIsTUFBSSxTQUFTLFNBQVM7QUFFdEIsTUFBSSxTQUFTLE1BQU0sU0FBUyxJQUFJO0FBQzlCLFlBQVEsU0FBUztBQUFBLFdBQ1Y7QUFDSCxlQUFPLFNBQVM7QUFBQSxXQUViO0FBQ0gsZUFBTyxTQUFTO0FBQUEsV0FFYjtBQUNILGVBQU8sU0FBUztBQUFBO0FBQUE7QUFJdEIsU0FBTyxTQUFTO0FBQUE7QUFHbEIsSUFBSSxXQUFXO0FBQUEsRUFDYjtBQUFBLEVBQ0EsS0FBSyxnQkFBZ0I7QUFBQSxJQUNuQixRQUFRO0FBQUEsSUFDUixjQUFjO0FBQUE7QUFBQSxFQUVoQixTQUFTLGdCQUFnQjtBQUFBLElBQ3ZCLFFBQVE7QUFBQSxJQUNSLGNBQWM7QUFBQSxJQUNkLGtCQUFrQixTQUFVLFNBQVM7QUFDbkMsYUFBTyxVQUFVO0FBQUE7QUFBQTtBQUFBLEVBR3JCLE9BQU8sZ0JBQWdCO0FBQUEsSUFDckIsUUFBUTtBQUFBLElBQ1IsY0FBYztBQUFBO0FBQUEsRUFFaEIsS0FBSyxnQkFBZ0I7QUFBQSxJQUNuQixRQUFRO0FBQUEsSUFDUixjQUFjO0FBQUE7QUFBQSxFQUVoQixXQUFXLGdCQUFnQjtBQUFBLElBQ3pCLFFBQVE7QUFBQSxJQUNSLGNBQWM7QUFBQSxJQUNkLGtCQUFrQjtBQUFBLElBQ2xCLHdCQUF3QjtBQUFBO0FBQUE7QUFHNUIsSUFBTyxtQkFBUTs7O0FDakpBLHNCQUFzQixNQUFNO0FBQ3pDLFNBQU8sU0FBVSxRQUFRO0FBQ3ZCLFFBQUksV0FBVSxVQUFVLFNBQVMsS0FBSyxVQUFVLE9BQU8sU0FBWSxVQUFVLEtBQUs7QUFDbEYsUUFBSSxRQUFRLFNBQVE7QUFDcEIsUUFBSSxlQUFlLFNBQVMsS0FBSyxjQUFjLFVBQVUsS0FBSyxjQUFjLEtBQUs7QUFDakYsUUFBSSxjQUFjLE9BQU8sTUFBTTtBQUUvQixRQUFJLENBQUMsYUFBYTtBQUNoQixhQUFPO0FBQUE7QUFHVCxRQUFJLGdCQUFnQixZQUFZO0FBQ2hDLFFBQUksZ0JBQWdCLFNBQVMsS0FBSyxjQUFjLFVBQVUsS0FBSyxjQUFjLEtBQUs7QUFDbEYsUUFBSSxNQUFNLE1BQU0sUUFBUSxpQkFBaUIsVUFBVSxlQUFlLFNBQVUsU0FBUztBQUNuRixhQUFPLFFBQVEsS0FBSztBQUFBLFNBQ2pCLFFBQVEsZUFBZSxTQUFVLFNBQVM7QUFDN0MsYUFBTyxRQUFRLEtBQUs7QUFBQTtBQUV0QixRQUFJO0FBQ0osWUFBUSxLQUFLLGdCQUFnQixLQUFLLGNBQWMsT0FBTztBQUN2RCxZQUFRLFNBQVEsZ0JBQWdCLFNBQVEsY0FBYyxTQUFTO0FBQy9ELFFBQUksT0FBTyxPQUFPLE1BQU0sY0FBYztBQUN0QyxXQUFPO0FBQUEsTUFDTDtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUE7QUFLTixpQkFBaUIsUUFBUSxXQUFXO0FBQ2xDLFdBQVMsT0FBTyxRQUFRO0FBQ3RCLFFBQUksT0FBTyxlQUFlLFFBQVEsVUFBVSxPQUFPLE9BQU87QUFDeEQsYUFBTztBQUFBO0FBQUE7QUFJWCxTQUFPO0FBQUE7QUFHVCxtQkFBbUIsT0FBTyxXQUFXO0FBQ25DLFdBQVMsTUFBTSxHQUFHLE1BQU0sTUFBTSxRQUFRLE9BQU87QUFDM0MsUUFBSSxVQUFVLE1BQU0sT0FBTztBQUN6QixhQUFPO0FBQUE7QUFBQTtBQUlYLFNBQU87QUFBQTs7O0FDOUNNLDZCQUE2QixNQUFNO0FBQ2hELFNBQU8sU0FBVSxRQUFRO0FBQ3ZCLFFBQUksV0FBVSxVQUFVLFNBQVMsS0FBSyxVQUFVLE9BQU8sU0FBWSxVQUFVLEtBQUs7QUFDbEYsUUFBSSxjQUFjLE9BQU8sTUFBTSxLQUFLO0FBQ3BDLFFBQUksQ0FBQztBQUFhLGFBQU87QUFDekIsUUFBSSxnQkFBZ0IsWUFBWTtBQUNoQyxRQUFJLGNBQWMsT0FBTyxNQUFNLEtBQUs7QUFDcEMsUUFBSSxDQUFDO0FBQWEsYUFBTztBQUN6QixRQUFJLFFBQVEsS0FBSyxnQkFBZ0IsS0FBSyxjQUFjLFlBQVksTUFBTSxZQUFZO0FBQ2xGLFlBQVEsU0FBUSxnQkFBZ0IsU0FBUSxjQUFjLFNBQVM7QUFDL0QsUUFBSSxPQUFPLE9BQU8sTUFBTSxjQUFjO0FBQ3RDLFdBQU87QUFBQSxNQUNMO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFBQTs7O0FDWE4sSUFBSSw0QkFBNEI7QUFDaEMsSUFBSSw0QkFBNEI7QUFDaEMsSUFBSSxtQkFBbUI7QUFBQSxFQUNyQixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUE7QUFFUixJQUFJLG1CQUFtQjtBQUFBLEVBQ3JCLEtBQUssQ0FBQyxPQUFPO0FBQUE7QUFFZixJQUFJLHVCQUF1QjtBQUFBLEVBQ3pCLFFBQVE7QUFBQSxFQUNSLGFBQWE7QUFBQSxFQUNiLE1BQU07QUFBQTtBQUVSLElBQUksdUJBQXVCO0FBQUEsRUFDekIsS0FBSyxDQUFDLE1BQU0sTUFBTSxNQUFNO0FBQUE7QUFFMUIsSUFBSSxxQkFBcUI7QUFBQSxFQUN2QixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUE7QUFFUixJQUFJLHFCQUFxQjtBQUFBLEVBQ3ZCLFFBQVEsQ0FBQyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU87QUFBQSxFQUN0RixLQUFLLENBQUMsUUFBUSxPQUFPLFNBQVMsUUFBUSxTQUFTLFNBQVMsU0FBUyxRQUFRLE9BQU8sT0FBTyxPQUFPO0FBQUE7QUFFaEcsSUFBSSxtQkFBbUI7QUFBQSxFQUNyQixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUE7QUFFUixJQUFJLG1CQUFtQjtBQUFBLEVBQ3JCLFFBQVEsQ0FBQyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTztBQUFBLEVBQ25ELEtBQUssQ0FBQyxRQUFRLE9BQU8sUUFBUSxPQUFPLFFBQVEsT0FBTztBQUFBO0FBRXJELElBQUkseUJBQXlCO0FBQUEsRUFDM0IsUUFBUTtBQUFBLEVBQ1IsS0FBSztBQUFBO0FBRVAsSUFBSSx5QkFBeUI7QUFBQSxFQUMzQixLQUFLO0FBQUEsSUFDSCxJQUFJO0FBQUEsSUFDSixJQUFJO0FBQUEsSUFDSixVQUFVO0FBQUEsSUFDVixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFDVCxXQUFXO0FBQUEsSUFDWCxTQUFTO0FBQUEsSUFDVCxPQUFPO0FBQUE7QUFBQTtBQUdYLElBQUksUUFBUTtBQUFBLEVBQ1YsZUFBZSxvQkFBb0I7QUFBQSxJQUNqQyxjQUFjO0FBQUEsSUFDZCxjQUFjO0FBQUEsSUFDZCxlQUFlLFNBQVUsT0FBTztBQUM5QixhQUFPLFNBQVMsT0FBTztBQUFBO0FBQUE7QUFBQSxFQUczQixLQUFLLGFBQWE7QUFBQSxJQUNoQixlQUFlO0FBQUEsSUFDZixtQkFBbUI7QUFBQSxJQUNuQixlQUFlO0FBQUEsSUFDZixtQkFBbUI7QUFBQTtBQUFBLEVBRXJCLFNBQVMsYUFBYTtBQUFBLElBQ3BCLGVBQWU7QUFBQSxJQUNmLG1CQUFtQjtBQUFBLElBQ25CLGVBQWU7QUFBQSxJQUNmLG1CQUFtQjtBQUFBLElBQ25CLGVBQWUsU0FBVSxPQUFPO0FBQzlCLGFBQU8sUUFBUTtBQUFBO0FBQUE7QUFBQSxFQUduQixPQUFPLGFBQWE7QUFBQSxJQUNsQixlQUFlO0FBQUEsSUFDZixtQkFBbUI7QUFBQSxJQUNuQixlQUFlO0FBQUEsSUFDZixtQkFBbUI7QUFBQTtBQUFBLEVBRXJCLEtBQUssYUFBYTtBQUFBLElBQ2hCLGVBQWU7QUFBQSxJQUNmLG1CQUFtQjtBQUFBLElBQ25CLGVBQWU7QUFBQSxJQUNmLG1CQUFtQjtBQUFBO0FBQUEsRUFFckIsV0FBVyxhQUFhO0FBQUEsSUFDdEIsZUFBZTtBQUFBLElBQ2YsbUJBQW1CO0FBQUEsSUFDbkIsZUFBZTtBQUFBLElBQ2YsbUJBQW1CO0FBQUE7QUFBQTtBQUd2QixJQUFPLGdCQUFROzs7QUNsRmYsSUFBSSxTQUFTO0FBQUEsRUFDWCxNQUFNO0FBQUEsRUFDTixnQkFBZ0I7QUFBQSxFQUNoQixZQUFZO0FBQUEsRUFDWixnQkFBZ0I7QUFBQSxFQUNoQixVQUFVO0FBQUEsRUFDVixPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsSUFDUCxjQUFjO0FBQUEsSUFHZCx1QkFBdUI7QUFBQTtBQUFBO0FBRzNCLElBQU8sZ0JBQVE7OztBQ0hBLHlCQUF5QixXQUFXLGFBQWE7QUFDOUQsZUFBYSxHQUFHO0FBQ2hCLE1BQUksU0FBUyxXQUFVO0FBQ3ZCLFNBQU8sZ0JBQWdCLFdBQVcsQ0FBQztBQUFBOzs7QUMzQnJDLElBQUksc0JBQXNCO0FBR1gseUJBQXlCLFdBQVc7QUFDakQsZUFBYSxHQUFHO0FBQ2hCLE1BQUksT0FBTyxPQUFPO0FBQ2xCLE1BQUksWUFBWSxLQUFLO0FBQ3JCLE9BQUssWUFBWSxHQUFHO0FBQ3BCLE9BQUssWUFBWSxHQUFHLEdBQUcsR0FBRztBQUMxQixNQUFJLHVCQUF1QixLQUFLO0FBQ2hDLE1BQUksYUFBYSxZQUFZO0FBQzdCLFNBQU8sS0FBSyxNQUFNLGFBQWEsdUJBQXVCO0FBQUE7OztBQ1R6QywyQkFBMkIsV0FBVztBQUNuRCxlQUFhLEdBQUc7QUFDaEIsTUFBSSxlQUFlO0FBQ25CLE1BQUksT0FBTyxPQUFPO0FBQ2xCLE1BQUksTUFBTSxLQUFLO0FBQ2YsTUFBSSxPQUFRLE9BQU0sZUFBZSxJQUFJLEtBQUssTUFBTTtBQUNoRCxPQUFLLFdBQVcsS0FBSyxlQUFlO0FBQ3BDLE9BQUssWUFBWSxHQUFHLEdBQUcsR0FBRztBQUMxQixTQUFPO0FBQUE7OztBQ1BNLDJCQUEyQixXQUFXO0FBQ25ELGVBQWEsR0FBRztBQUNoQixNQUFJLE9BQU8sT0FBTztBQUNsQixNQUFJLE9BQU8sS0FBSztBQUNoQixNQUFJLDRCQUE0QixJQUFJLEtBQUs7QUFDekMsNEJBQTBCLGVBQWUsT0FBTyxHQUFHLEdBQUc7QUFDdEQsNEJBQTBCLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDL0MsTUFBSSxrQkFBa0Isa0JBQWtCO0FBQ3hDLE1BQUksNEJBQTRCLElBQUksS0FBSztBQUN6Qyw0QkFBMEIsZUFBZSxNQUFNLEdBQUc7QUFDbEQsNEJBQTBCLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDL0MsTUFBSSxrQkFBa0Isa0JBQWtCO0FBRXhDLE1BQUksS0FBSyxhQUFhLGdCQUFnQixXQUFXO0FBQy9DLFdBQU8sT0FBTztBQUFBLGFBQ0wsS0FBSyxhQUFhLGdCQUFnQixXQUFXO0FBQ3RELFdBQU87QUFBQSxTQUNGO0FBQ0wsV0FBTyxPQUFPO0FBQUE7QUFBQTs7O0FDbEJILCtCQUErQixXQUFXO0FBQ3ZELGVBQWEsR0FBRztBQUNoQixNQUFJLE9BQU8sa0JBQWtCO0FBQzdCLE1BQUksa0JBQWtCLElBQUksS0FBSztBQUMvQixrQkFBZ0IsZUFBZSxNQUFNLEdBQUc7QUFDeEMsa0JBQWdCLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDckMsTUFBSSxPQUFPLGtCQUFrQjtBQUM3QixTQUFPO0FBQUE7OztBQ1JULElBQUksdUJBQXVCO0FBR1osdUJBQXVCLFdBQVc7QUFDL0MsZUFBYSxHQUFHO0FBQ2hCLE1BQUksT0FBTyxPQUFPO0FBQ2xCLE1BQUksT0FBTyxrQkFBa0IsTUFBTSxZQUFZLHNCQUFzQixNQUFNO0FBSTNFLFNBQU8sS0FBSyxNQUFNLE9BQU8sd0JBQXdCO0FBQUE7OztBQ1RwQyx3QkFBd0IsV0FBVyxjQUFjO0FBQzlELGVBQWEsR0FBRztBQUNoQixNQUFJLFdBQVUsZ0JBQWdCO0FBQzlCLE1BQUksVUFBUyxTQUFRO0FBQ3JCLE1BQUkscUJBQXFCLFdBQVUsUUFBTyxXQUFXLFFBQU8sUUFBUTtBQUNwRSxNQUFJLHNCQUFzQixzQkFBc0IsT0FBTyxJQUFJLFdBQVU7QUFDckUsTUFBSSxlQUFlLFNBQVEsZ0JBQWdCLE9BQU8sc0JBQXNCLFdBQVUsU0FBUTtBQUUxRixNQUFJLENBQUUsaUJBQWdCLEtBQUssZ0JBQWdCLElBQUk7QUFDN0MsVUFBTSxJQUFJLFdBQVc7QUFBQTtBQUd2QixNQUFJLE9BQU8sT0FBTztBQUNsQixNQUFJLE1BQU0sS0FBSztBQUNmLE1BQUksT0FBUSxPQUFNLGVBQWUsSUFBSSxLQUFLLE1BQU07QUFDaEQsT0FBSyxXQUFXLEtBQUssZUFBZTtBQUNwQyxPQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsU0FBTztBQUFBOzs7QUNoQk0sd0JBQXdCLFdBQVcsY0FBYztBQUM5RCxlQUFhLEdBQUc7QUFDaEIsTUFBSSxPQUFPLE9BQU87QUFDbEIsTUFBSSxPQUFPLEtBQUs7QUFDaEIsTUFBSSxXQUFVLGdCQUFnQjtBQUM5QixNQUFJLFVBQVMsU0FBUTtBQUNyQixNQUFJLDhCQUE4QixXQUFVLFFBQU8sV0FBVyxRQUFPLFFBQVE7QUFDN0UsTUFBSSwrQkFBK0IsK0JBQStCLE9BQU8sSUFBSSxXQUFVO0FBQ3ZGLE1BQUksd0JBQXdCLFNBQVEseUJBQXlCLE9BQU8sK0JBQStCLFdBQVUsU0FBUTtBQUVySCxNQUFJLENBQUUsMEJBQXlCLEtBQUsseUJBQXlCLElBQUk7QUFDL0QsVUFBTSxJQUFJLFdBQVc7QUFBQTtBQUd2QixNQUFJLHNCQUFzQixJQUFJLEtBQUs7QUFDbkMsc0JBQW9CLGVBQWUsT0FBTyxHQUFHLEdBQUc7QUFDaEQsc0JBQW9CLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDekMsTUFBSSxrQkFBa0IsZUFBZSxxQkFBcUI7QUFDMUQsTUFBSSxzQkFBc0IsSUFBSSxLQUFLO0FBQ25DLHNCQUFvQixlQUFlLE1BQU0sR0FBRztBQUM1QyxzQkFBb0IsWUFBWSxHQUFHLEdBQUcsR0FBRztBQUN6QyxNQUFJLGtCQUFrQixlQUFlLHFCQUFxQjtBQUUxRCxNQUFJLEtBQUssYUFBYSxnQkFBZ0IsV0FBVztBQUMvQyxXQUFPLE9BQU87QUFBQSxhQUNMLEtBQUssYUFBYSxnQkFBZ0IsV0FBVztBQUN0RCxXQUFPO0FBQUEsU0FDRjtBQUNMLFdBQU8sT0FBTztBQUFBO0FBQUE7OztBQzVCSCw0QkFBNEIsV0FBVyxjQUFjO0FBQ2xFLGVBQWEsR0FBRztBQUNoQixNQUFJLFdBQVUsZ0JBQWdCO0FBQzlCLE1BQUksVUFBUyxTQUFRO0FBQ3JCLE1BQUksOEJBQThCLFdBQVUsUUFBTyxXQUFXLFFBQU8sUUFBUTtBQUM3RSxNQUFJLCtCQUErQiwrQkFBK0IsT0FBTyxJQUFJLFdBQVU7QUFDdkYsTUFBSSx3QkFBd0IsU0FBUSx5QkFBeUIsT0FBTywrQkFBK0IsV0FBVSxTQUFRO0FBQ3JILE1BQUksT0FBTyxlQUFlLFdBQVc7QUFDckMsTUFBSSxZQUFZLElBQUksS0FBSztBQUN6QixZQUFVLGVBQWUsTUFBTSxHQUFHO0FBQ2xDLFlBQVUsWUFBWSxHQUFHLEdBQUcsR0FBRztBQUMvQixNQUFJLE9BQU8sZUFBZSxXQUFXO0FBQ3JDLFNBQU87QUFBQTs7O0FDZFQsSUFBSSx3QkFBdUI7QUFHWixvQkFBb0IsV0FBVyxVQUFTO0FBQ3JELGVBQWEsR0FBRztBQUNoQixNQUFJLE9BQU8sT0FBTztBQUNsQixNQUFJLE9BQU8sZUFBZSxNQUFNLFVBQVMsWUFBWSxtQkFBbUIsTUFBTSxVQUFTO0FBSXZGLFNBQU8sS0FBSyxNQUFNLE9BQU8seUJBQXdCO0FBQUE7OztBQ2RwQyx5QkFBeUIsUUFBUSxjQUFjO0FBQzVELE1BQUksT0FBTyxTQUFTLElBQUksTUFBTTtBQUM5QixNQUFJLFNBQVMsS0FBSyxJQUFJLFFBQVE7QUFFOUIsU0FBTyxPQUFPLFNBQVMsY0FBYztBQUNuQyxhQUFTLE1BQU07QUFBQTtBQUdqQixTQUFPLE9BQU87QUFBQTs7O0FDTWhCLElBQUksYUFBYTtBQUFBLEVBRWYsR0FBRyxTQUFVLE1BQU0sT0FBTztBQVN4QixRQUFJLGFBQWEsS0FBSztBQUV0QixRQUFJLE9BQU8sYUFBYSxJQUFJLGFBQWEsSUFBSTtBQUM3QyxXQUFPLGdCQUFnQixVQUFVLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUFBO0FBQUEsRUFHbkUsR0FBRyxTQUFVLE1BQU0sT0FBTztBQUN4QixRQUFJLFFBQVEsS0FBSztBQUNqQixXQUFPLFVBQVUsTUFBTSxPQUFPLFFBQVEsS0FBSyxnQkFBZ0IsUUFBUSxHQUFHO0FBQUE7QUFBQSxFQUd4RSxHQUFHLFNBQVUsTUFBTSxPQUFPO0FBQ3hCLFdBQU8sZ0JBQWdCLEtBQUssY0FBYyxNQUFNO0FBQUE7QUFBQSxFQUdsRCxHQUFHLFNBQVUsTUFBTSxPQUFPO0FBQ3hCLFFBQUkscUJBQXFCLEtBQUssZ0JBQWdCLE1BQU0sSUFBSSxPQUFPO0FBRS9ELFlBQVE7QUFBQSxXQUNEO0FBQUEsV0FDQTtBQUNILGVBQU8sbUJBQW1CO0FBQUEsV0FFdkI7QUFDSCxlQUFPO0FBQUEsV0FFSjtBQUNILGVBQU8sbUJBQW1CO0FBQUEsV0FFdkI7QUFBQTtBQUVILGVBQU8sdUJBQXVCLE9BQU8sU0FBUztBQUFBO0FBQUE7QUFBQSxFQUlwRCxHQUFHLFNBQVUsTUFBTSxPQUFPO0FBQ3hCLFdBQU8sZ0JBQWdCLEtBQUssZ0JBQWdCLE1BQU0sSUFBSSxNQUFNO0FBQUE7QUFBQSxFQUc5RCxHQUFHLFNBQVUsTUFBTSxPQUFPO0FBQ3hCLFdBQU8sZ0JBQWdCLEtBQUssZUFBZSxNQUFNO0FBQUE7QUFBQSxFQUduRCxHQUFHLFNBQVUsTUFBTSxPQUFPO0FBQ3hCLFdBQU8sZ0JBQWdCLEtBQUssaUJBQWlCLE1BQU07QUFBQTtBQUFBLEVBR3JELEdBQUcsU0FBVSxNQUFNLE9BQU87QUFDeEIsV0FBTyxnQkFBZ0IsS0FBSyxpQkFBaUIsTUFBTTtBQUFBO0FBQUEsRUFHckQsR0FBRyxTQUFVLE1BQU0sT0FBTztBQUN4QixRQUFJLGlCQUFpQixNQUFNO0FBQzNCLFFBQUksZUFBZSxLQUFLO0FBQ3hCLFFBQUksb0JBQW9CLEtBQUssTUFBTSxlQUFlLEtBQUssSUFBSSxJQUFJLGlCQUFpQjtBQUNoRixXQUFPLGdCQUFnQixtQkFBbUIsTUFBTTtBQUFBO0FBQUE7QUFHcEQsSUFBTywwQkFBUTs7O0FDNUVmLElBQUksZ0JBQWdCO0FBQUEsRUFDbEIsSUFBSTtBQUFBLEVBQ0osSUFBSTtBQUFBLEVBQ0osVUFBVTtBQUFBLEVBQ1YsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsV0FBVztBQUFBLEVBQ1gsU0FBUztBQUFBLEVBQ1QsT0FBTztBQUFBO0FBZ0RULElBQUksY0FBYTtBQUFBLEVBRWYsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFVO0FBQ2xDLFFBQUksTUFBTSxLQUFLLG1CQUFtQixJQUFJLElBQUk7QUFFMUMsWUFBUTtBQUFBLFdBRUQ7QUFBQSxXQUNBO0FBQUEsV0FDQTtBQUNILGVBQU8sVUFBUyxJQUFJLEtBQUs7QUFBQSxVQUN2QixPQUFPO0FBQUE7QUFBQSxXQUlOO0FBQ0gsZUFBTyxVQUFTLElBQUksS0FBSztBQUFBLFVBQ3ZCLE9BQU87QUFBQTtBQUFBLFdBSU47QUFBQTtBQUVILGVBQU8sVUFBUyxJQUFJLEtBQUs7QUFBQSxVQUN2QixPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLZixHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFFbEMsUUFBSSxVQUFVLE1BQU07QUFDbEIsVUFBSSxhQUFhLEtBQUs7QUFFdEIsVUFBSSxPQUFPLGFBQWEsSUFBSSxhQUFhLElBQUk7QUFDN0MsYUFBTyxVQUFTLGNBQWMsTUFBTTtBQUFBLFFBQ2xDLE1BQU07QUFBQTtBQUFBO0FBSVYsV0FBTyx3QkFBZ0IsRUFBRSxNQUFNO0FBQUE7QUFBQSxFQUdqQyxHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVUsVUFBUztBQUMzQyxRQUFJLGlCQUFpQixlQUFlLE1BQU07QUFFMUMsUUFBSSxXQUFXLGlCQUFpQixJQUFJLGlCQUFpQixJQUFJO0FBRXpELFFBQUksVUFBVSxNQUFNO0FBQ2xCLFVBQUksZUFBZSxXQUFXO0FBQzlCLGFBQU8sZ0JBQWdCLGNBQWM7QUFBQTtBQUl2QyxRQUFJLFVBQVUsTUFBTTtBQUNsQixhQUFPLFVBQVMsY0FBYyxVQUFVO0FBQUEsUUFDdEMsTUFBTTtBQUFBO0FBQUE7QUFLVixXQUFPLGdCQUFnQixVQUFVLE1BQU07QUFBQTtBQUFBLEVBR3pDLEdBQUcsU0FBVSxNQUFNLE9BQU87QUFDeEIsUUFBSSxjQUFjLGtCQUFrQjtBQUVwQyxXQUFPLGdCQUFnQixhQUFhLE1BQU07QUFBQTtBQUFBLEVBVzVDLEdBQUcsU0FBVSxNQUFNLE9BQU87QUFDeEIsUUFBSSxPQUFPLEtBQUs7QUFDaEIsV0FBTyxnQkFBZ0IsTUFBTSxNQUFNO0FBQUE7QUFBQSxFQUdyQyxHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFDbEMsUUFBSSxVQUFVLEtBQUssS0FBTSxNQUFLLGdCQUFnQixLQUFLO0FBRW5ELFlBQVE7QUFBQSxXQUVEO0FBQ0gsZUFBTyxPQUFPO0FBQUEsV0FHWDtBQUNILGVBQU8sZ0JBQWdCLFNBQVM7QUFBQSxXQUc3QjtBQUNILGVBQU8sVUFBUyxjQUFjLFNBQVM7QUFBQSxVQUNyQyxNQUFNO0FBQUE7QUFBQSxXQUlMO0FBQ0gsZUFBTyxVQUFTLFFBQVEsU0FBUztBQUFBLFVBQy9CLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFDSCxlQUFPLFVBQVMsUUFBUSxTQUFTO0FBQUEsVUFDL0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUFBO0FBRUgsZUFBTyxVQUFTLFFBQVEsU0FBUztBQUFBLFVBQy9CLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtqQixHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFDbEMsUUFBSSxVQUFVLEtBQUssS0FBTSxNQUFLLGdCQUFnQixLQUFLO0FBRW5ELFlBQVE7QUFBQSxXQUVEO0FBQ0gsZUFBTyxPQUFPO0FBQUEsV0FHWDtBQUNILGVBQU8sZ0JBQWdCLFNBQVM7QUFBQSxXQUc3QjtBQUNILGVBQU8sVUFBUyxjQUFjLFNBQVM7QUFBQSxVQUNyQyxNQUFNO0FBQUE7QUFBQSxXQUlMO0FBQ0gsZUFBTyxVQUFTLFFBQVEsU0FBUztBQUFBLFVBQy9CLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFDSCxlQUFPLFVBQVMsUUFBUSxTQUFTO0FBQUEsVUFDL0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUFBO0FBRUgsZUFBTyxVQUFTLFFBQVEsU0FBUztBQUFBLFVBQy9CLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtqQixHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFDbEMsUUFBSSxRQUFRLEtBQUs7QUFFakIsWUFBUTtBQUFBLFdBQ0Q7QUFBQSxXQUNBO0FBQ0gsZUFBTyx3QkFBZ0IsRUFBRSxNQUFNO0FBQUEsV0FHNUI7QUFDSCxlQUFPLFVBQVMsY0FBYyxRQUFRLEdBQUc7QUFBQSxVQUN2QyxNQUFNO0FBQUE7QUFBQSxXQUlMO0FBQ0gsZUFBTyxVQUFTLE1BQU0sT0FBTztBQUFBLFVBQzNCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFDSCxlQUFPLFVBQVMsTUFBTSxPQUFPO0FBQUEsVUFDM0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUFBO0FBRUgsZUFBTyxVQUFTLE1BQU0sT0FBTztBQUFBLFVBQzNCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtqQixHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFDbEMsUUFBSSxRQUFRLEtBQUs7QUFFakIsWUFBUTtBQUFBLFdBRUQ7QUFDSCxlQUFPLE9BQU8sUUFBUTtBQUFBLFdBR25CO0FBQ0gsZUFBTyxnQkFBZ0IsUUFBUSxHQUFHO0FBQUEsV0FHL0I7QUFDSCxlQUFPLFVBQVMsY0FBYyxRQUFRLEdBQUc7QUFBQSxVQUN2QyxNQUFNO0FBQUE7QUFBQSxXQUlMO0FBQ0gsZUFBTyxVQUFTLE1BQU0sT0FBTztBQUFBLFVBQzNCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFDSCxlQUFPLFVBQVMsTUFBTSxPQUFPO0FBQUEsVUFDM0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUFBO0FBRUgsZUFBTyxVQUFTLE1BQU0sT0FBTztBQUFBLFVBQzNCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtqQixHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVUsVUFBUztBQUMzQyxRQUFJLE9BQU8sV0FBVyxNQUFNO0FBRTVCLFFBQUksVUFBVSxNQUFNO0FBQ2xCLGFBQU8sVUFBUyxjQUFjLE1BQU07QUFBQSxRQUNsQyxNQUFNO0FBQUE7QUFBQTtBQUlWLFdBQU8sZ0JBQWdCLE1BQU0sTUFBTTtBQUFBO0FBQUEsRUFHckMsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFVO0FBQ2xDLFFBQUksVUFBVSxjQUFjO0FBRTVCLFFBQUksVUFBVSxNQUFNO0FBQ2xCLGFBQU8sVUFBUyxjQUFjLFNBQVM7QUFBQSxRQUNyQyxNQUFNO0FBQUE7QUFBQTtBQUlWLFdBQU8sZ0JBQWdCLFNBQVMsTUFBTTtBQUFBO0FBQUEsRUFHeEMsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFVO0FBQ2xDLFFBQUksVUFBVSxNQUFNO0FBQ2xCLGFBQU8sVUFBUyxjQUFjLEtBQUssY0FBYztBQUFBLFFBQy9DLE1BQU07QUFBQTtBQUFBO0FBSVYsV0FBTyx3QkFBZ0IsRUFBRSxNQUFNO0FBQUE7QUFBQSxFQUdqQyxHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFDbEMsUUFBSSxZQUFZLGdCQUFnQjtBQUVoQyxRQUFJLFVBQVUsTUFBTTtBQUNsQixhQUFPLFVBQVMsY0FBYyxXQUFXO0FBQUEsUUFDdkMsTUFBTTtBQUFBO0FBQUE7QUFJVixXQUFPLGdCQUFnQixXQUFXLE1BQU07QUFBQTtBQUFBLEVBRzFDLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVTtBQUNsQyxRQUFJLFlBQVksS0FBSztBQUVyQixZQUFRO0FBQUEsV0FFRDtBQUFBLFdBQ0E7QUFBQSxXQUNBO0FBQ0gsZUFBTyxVQUFTLElBQUksV0FBVztBQUFBLFVBQzdCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFDSCxlQUFPLFVBQVMsSUFBSSxXQUFXO0FBQUEsVUFDN0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUNILGVBQU8sVUFBUyxJQUFJLFdBQVc7QUFBQSxVQUM3QixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQSxXQUlSO0FBQUE7QUFFSCxlQUFPLFVBQVMsSUFBSSxXQUFXO0FBQUEsVUFDN0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2pCLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVSxVQUFTO0FBQzNDLFFBQUksWUFBWSxLQUFLO0FBQ3JCLFFBQUksaUJBQWtCLGFBQVksU0FBUSxlQUFlLEtBQUssS0FBSztBQUVuRSxZQUFRO0FBQUEsV0FFRDtBQUNILGVBQU8sT0FBTztBQUFBLFdBR1g7QUFDSCxlQUFPLGdCQUFnQixnQkFBZ0I7QUFBQSxXQUdwQztBQUNILGVBQU8sVUFBUyxjQUFjLGdCQUFnQjtBQUFBLFVBQzVDLE1BQU07QUFBQTtBQUFBLFdBR0w7QUFDSCxlQUFPLFVBQVMsSUFBSSxXQUFXO0FBQUEsVUFDN0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUNILGVBQU8sVUFBUyxJQUFJLFdBQVc7QUFBQSxVQUM3QixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQSxXQUlSO0FBQ0gsZUFBTyxVQUFTLElBQUksV0FBVztBQUFBLFVBQzdCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFBQTtBQUVILGVBQU8sVUFBUyxJQUFJLFdBQVc7QUFBQSxVQUM3QixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLakIsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFVLFVBQVM7QUFDM0MsUUFBSSxZQUFZLEtBQUs7QUFDckIsUUFBSSxpQkFBa0IsYUFBWSxTQUFRLGVBQWUsS0FBSyxLQUFLO0FBRW5FLFlBQVE7QUFBQSxXQUVEO0FBQ0gsZUFBTyxPQUFPO0FBQUEsV0FHWDtBQUNILGVBQU8sZ0JBQWdCLGdCQUFnQixNQUFNO0FBQUEsV0FHMUM7QUFDSCxlQUFPLFVBQVMsY0FBYyxnQkFBZ0I7QUFBQSxVQUM1QyxNQUFNO0FBQUE7QUFBQSxXQUdMO0FBQ0gsZUFBTyxVQUFTLElBQUksV0FBVztBQUFBLFVBQzdCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFDSCxlQUFPLFVBQVMsSUFBSSxXQUFXO0FBQUEsVUFDN0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUNILGVBQU8sVUFBUyxJQUFJLFdBQVc7QUFBQSxVQUM3QixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQSxXQUlSO0FBQUE7QUFFSCxlQUFPLFVBQVMsSUFBSSxXQUFXO0FBQUEsVUFDN0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2pCLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVTtBQUNsQyxRQUFJLFlBQVksS0FBSztBQUNyQixRQUFJLGVBQWUsY0FBYyxJQUFJLElBQUk7QUFFekMsWUFBUTtBQUFBLFdBRUQ7QUFDSCxlQUFPLE9BQU87QUFBQSxXQUdYO0FBQ0gsZUFBTyxnQkFBZ0IsY0FBYyxNQUFNO0FBQUEsV0FHeEM7QUFDSCxlQUFPLFVBQVMsY0FBYyxjQUFjO0FBQUEsVUFDMUMsTUFBTTtBQUFBO0FBQUEsV0FJTDtBQUNILGVBQU8sVUFBUyxJQUFJLFdBQVc7QUFBQSxVQUM3QixPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQSxXQUlSO0FBQ0gsZUFBTyxVQUFTLElBQUksV0FBVztBQUFBLFVBQzdCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBSVI7QUFDSCxlQUFPLFVBQVMsSUFBSSxXQUFXO0FBQUEsVUFDN0IsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FJUjtBQUFBO0FBRUgsZUFBTyxVQUFTLElBQUksV0FBVztBQUFBLFVBQzdCLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtqQixHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFDbEMsUUFBSSxRQUFRLEtBQUs7QUFDakIsUUFBSSxxQkFBcUIsUUFBUSxNQUFNLElBQUksT0FBTztBQUVsRCxZQUFRO0FBQUEsV0FDRDtBQUFBLFdBQ0E7QUFDSCxlQUFPLFVBQVMsVUFBVSxvQkFBb0I7QUFBQSxVQUM1QyxPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQSxXQUdSO0FBQ0gsZUFBTyxVQUFTLFVBQVUsb0JBQW9CO0FBQUEsVUFDNUMsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBLFdBQ1I7QUFBQSxXQUVBO0FBQ0gsZUFBTyxVQUFTLFVBQVUsb0JBQW9CO0FBQUEsVUFDNUMsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FHUjtBQUFBO0FBRUgsZUFBTyxVQUFTLFVBQVUsb0JBQW9CO0FBQUEsVUFDNUMsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2pCLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVTtBQUNsQyxRQUFJLFFBQVEsS0FBSztBQUNqQixRQUFJO0FBRUosUUFBSSxVQUFVLElBQUk7QUFDaEIsMkJBQXFCLGNBQWM7QUFBQSxlQUMxQixVQUFVLEdBQUc7QUFDdEIsMkJBQXFCLGNBQWM7QUFBQSxXQUM5QjtBQUNMLDJCQUFxQixRQUFRLE1BQU0sSUFBSSxPQUFPO0FBQUE7QUFHaEQsWUFBUTtBQUFBLFdBQ0Q7QUFBQSxXQUNBO0FBQ0gsZUFBTyxVQUFTLFVBQVUsb0JBQW9CO0FBQUEsVUFDNUMsT0FBTztBQUFBLFVBQ1AsU0FBUztBQUFBO0FBQUEsV0FHUjtBQUNILGVBQU8sVUFBUyxVQUFVLG9CQUFvQjtBQUFBLFVBQzVDLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQSxXQUNSO0FBQUEsV0FFQTtBQUNILGVBQU8sVUFBUyxVQUFVLG9CQUFvQjtBQUFBLFVBQzVDLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBR1I7QUFBQTtBQUVILGVBQU8sVUFBUyxVQUFVLG9CQUFvQjtBQUFBLFVBQzVDLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtqQixHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVU7QUFDbEMsUUFBSSxRQUFRLEtBQUs7QUFDakIsUUFBSTtBQUVKLFFBQUksU0FBUyxJQUFJO0FBQ2YsMkJBQXFCLGNBQWM7QUFBQSxlQUMxQixTQUFTLElBQUk7QUFDdEIsMkJBQXFCLGNBQWM7QUFBQSxlQUMxQixTQUFTLEdBQUc7QUFDckIsMkJBQXFCLGNBQWM7QUFBQSxXQUM5QjtBQUNMLDJCQUFxQixjQUFjO0FBQUE7QUFHckMsWUFBUTtBQUFBLFdBQ0Q7QUFBQSxXQUNBO0FBQUEsV0FDQTtBQUNILGVBQU8sVUFBUyxVQUFVLG9CQUFvQjtBQUFBLFVBQzVDLE9BQU87QUFBQSxVQUNQLFNBQVM7QUFBQTtBQUFBLFdBR1I7QUFDSCxlQUFPLFVBQVMsVUFBVSxvQkFBb0I7QUFBQSxVQUM1QyxPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQSxXQUdSO0FBQUE7QUFFSCxlQUFPLFVBQVMsVUFBVSxvQkFBb0I7QUFBQSxVQUM1QyxPQUFPO0FBQUEsVUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLakIsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFVO0FBQ2xDLFFBQUksVUFBVSxNQUFNO0FBQ2xCLFVBQUksUUFBUSxLQUFLLGdCQUFnQjtBQUNqQyxVQUFJLFVBQVU7QUFBRyxnQkFBUTtBQUN6QixhQUFPLFVBQVMsY0FBYyxPQUFPO0FBQUEsUUFDbkMsTUFBTTtBQUFBO0FBQUE7QUFJVixXQUFPLHdCQUFnQixFQUFFLE1BQU07QUFBQTtBQUFBLEVBR2pDLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVTtBQUNsQyxRQUFJLFVBQVUsTUFBTTtBQUNsQixhQUFPLFVBQVMsY0FBYyxLQUFLLGVBQWU7QUFBQSxRQUNoRCxNQUFNO0FBQUE7QUFBQTtBQUlWLFdBQU8sd0JBQWdCLEVBQUUsTUFBTTtBQUFBO0FBQUEsRUFHakMsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFVO0FBQ2xDLFFBQUksUUFBUSxLQUFLLGdCQUFnQjtBQUVqQyxRQUFJLFVBQVUsTUFBTTtBQUNsQixhQUFPLFVBQVMsY0FBYyxPQUFPO0FBQUEsUUFDbkMsTUFBTTtBQUFBO0FBQUE7QUFJVixXQUFPLGdCQUFnQixPQUFPLE1BQU07QUFBQTtBQUFBLEVBR3RDLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVTtBQUNsQyxRQUFJLFFBQVEsS0FBSztBQUNqQixRQUFJLFVBQVU7QUFBRyxjQUFRO0FBRXpCLFFBQUksVUFBVSxNQUFNO0FBQ2xCLGFBQU8sVUFBUyxjQUFjLE9BQU87QUFBQSxRQUNuQyxNQUFNO0FBQUE7QUFBQTtBQUlWLFdBQU8sZ0JBQWdCLE9BQU8sTUFBTTtBQUFBO0FBQUEsRUFHdEMsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFVO0FBQ2xDLFFBQUksVUFBVSxNQUFNO0FBQ2xCLGFBQU8sVUFBUyxjQUFjLEtBQUssaUJBQWlCO0FBQUEsUUFDbEQsTUFBTTtBQUFBO0FBQUE7QUFJVixXQUFPLHdCQUFnQixFQUFFLE1BQU07QUFBQTtBQUFBLEVBR2pDLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVTtBQUNsQyxRQUFJLFVBQVUsTUFBTTtBQUNsQixhQUFPLFVBQVMsY0FBYyxLQUFLLGlCQUFpQjtBQUFBLFFBQ2xELE1BQU07QUFBQTtBQUFBO0FBSVYsV0FBTyx3QkFBZ0IsRUFBRSxNQUFNO0FBQUE7QUFBQSxFQUdqQyxHQUFHLFNBQVUsTUFBTSxPQUFPO0FBQ3hCLFdBQU8sd0JBQWdCLEVBQUUsTUFBTTtBQUFBO0FBQUEsRUFHakMsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFXLFVBQVM7QUFDNUMsUUFBSSxlQUFlLFNBQVEsaUJBQWlCO0FBQzVDLFFBQUksaUJBQWlCLGFBQWE7QUFFbEMsUUFBSSxtQkFBbUIsR0FBRztBQUN4QixhQUFPO0FBQUE7QUFHVCxZQUFRO0FBQUEsV0FFRDtBQUNILGVBQU8sa0NBQWtDO0FBQUEsV0FLdEM7QUFBQSxXQUNBO0FBRUgsZUFBTyxlQUFlO0FBQUEsV0FLbkI7QUFBQSxXQUNBO0FBQUE7QUFHSCxlQUFPLGVBQWUsZ0JBQWdCO0FBQUE7QUFBQTtBQUFBLEVBSTVDLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVyxVQUFTO0FBQzVDLFFBQUksZUFBZSxTQUFRLGlCQUFpQjtBQUM1QyxRQUFJLGlCQUFpQixhQUFhO0FBRWxDLFlBQVE7QUFBQSxXQUVEO0FBQ0gsZUFBTyxrQ0FBa0M7QUFBQSxXQUt0QztBQUFBLFdBQ0E7QUFFSCxlQUFPLGVBQWU7QUFBQSxXQUtuQjtBQUFBLFdBQ0E7QUFBQTtBQUdILGVBQU8sZUFBZSxnQkFBZ0I7QUFBQTtBQUFBO0FBQUEsRUFJNUMsR0FBRyxTQUFVLE1BQU0sT0FBTyxXQUFXLFVBQVM7QUFDNUMsUUFBSSxlQUFlLFNBQVEsaUJBQWlCO0FBQzVDLFFBQUksaUJBQWlCLGFBQWE7QUFFbEMsWUFBUTtBQUFBLFdBRUQ7QUFBQSxXQUNBO0FBQUEsV0FDQTtBQUNILGVBQU8sUUFBUSxvQkFBb0IsZ0JBQWdCO0FBQUEsV0FHaEQ7QUFBQTtBQUVILGVBQU8sUUFBUSxlQUFlLGdCQUFnQjtBQUFBO0FBQUE7QUFBQSxFQUlwRCxHQUFHLFNBQVUsTUFBTSxPQUFPLFdBQVcsVUFBUztBQUM1QyxRQUFJLGVBQWUsU0FBUSxpQkFBaUI7QUFDNUMsUUFBSSxpQkFBaUIsYUFBYTtBQUVsQyxZQUFRO0FBQUEsV0FFRDtBQUFBLFdBQ0E7QUFBQSxXQUNBO0FBQ0gsZUFBTyxRQUFRLG9CQUFvQixnQkFBZ0I7QUFBQSxXQUdoRDtBQUFBO0FBRUgsZUFBTyxRQUFRLGVBQWUsZ0JBQWdCO0FBQUE7QUFBQTtBQUFBLEVBSXBELEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVyxVQUFTO0FBQzVDLFFBQUksZUFBZSxTQUFRLGlCQUFpQjtBQUM1QyxRQUFJLFlBQVksS0FBSyxNQUFNLGFBQWEsWUFBWTtBQUNwRCxXQUFPLGdCQUFnQixXQUFXLE1BQU07QUFBQTtBQUFBLEVBRzFDLEdBQUcsU0FBVSxNQUFNLE9BQU8sV0FBVyxVQUFTO0FBQzVDLFFBQUksZUFBZSxTQUFRLGlCQUFpQjtBQUM1QyxRQUFJLFlBQVksYUFBYTtBQUM3QixXQUFPLGdCQUFnQixXQUFXLE1BQU07QUFBQTtBQUFBO0FBSTVDLDZCQUE2QixRQUFRLGdCQUFnQjtBQUNuRCxNQUFJLE9BQU8sU0FBUyxJQUFJLE1BQU07QUFDOUIsTUFBSSxZQUFZLEtBQUssSUFBSTtBQUN6QixNQUFJLFFBQVEsS0FBSyxNQUFNLFlBQVk7QUFDbkMsTUFBSSxVQUFVLFlBQVk7QUFFMUIsTUFBSSxZQUFZLEdBQUc7QUFDakIsV0FBTyxPQUFPLE9BQU87QUFBQTtBQUd2QixNQUFJLFlBQVksa0JBQWtCO0FBQ2xDLFNBQU8sT0FBTyxPQUFPLFNBQVMsWUFBWSxnQkFBZ0IsU0FBUztBQUFBO0FBR3JFLDJDQUEyQyxRQUFRLGdCQUFnQjtBQUNqRSxNQUFJLFNBQVMsT0FBTyxHQUFHO0FBQ3JCLFFBQUksT0FBTyxTQUFTLElBQUksTUFBTTtBQUM5QixXQUFPLE9BQU8sZ0JBQWdCLEtBQUssSUFBSSxVQUFVLElBQUk7QUFBQTtBQUd2RCxTQUFPLGVBQWUsUUFBUTtBQUFBO0FBR2hDLHdCQUF3QixRQUFRLGdCQUFnQjtBQUM5QyxNQUFJLFlBQVksa0JBQWtCO0FBQ2xDLE1BQUksT0FBTyxTQUFTLElBQUksTUFBTTtBQUM5QixNQUFJLFlBQVksS0FBSyxJQUFJO0FBQ3pCLE1BQUksUUFBUSxnQkFBZ0IsS0FBSyxNQUFNLFlBQVksS0FBSztBQUN4RCxNQUFJLFVBQVUsZ0JBQWdCLFlBQVksSUFBSTtBQUM5QyxTQUFPLE9BQU8sUUFBUSxZQUFZO0FBQUE7QUFHcEMsSUFBTyxxQkFBUTs7O0FDajJCZiwyQkFBMkIsU0FBUyxhQUFZO0FBQzlDLFVBQVE7QUFBQSxTQUNEO0FBQ0gsYUFBTyxZQUFXLEtBQUs7QUFBQSxRQUNyQixPQUFPO0FBQUE7QUFBQSxTQUdOO0FBQ0gsYUFBTyxZQUFXLEtBQUs7QUFBQSxRQUNyQixPQUFPO0FBQUE7QUFBQSxTQUdOO0FBQ0gsYUFBTyxZQUFXLEtBQUs7QUFBQSxRQUNyQixPQUFPO0FBQUE7QUFBQSxTQUdOO0FBQUE7QUFFSCxhQUFPLFlBQVcsS0FBSztBQUFBLFFBQ3JCLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFLZiwyQkFBMkIsU0FBUyxhQUFZO0FBQzlDLFVBQVE7QUFBQSxTQUNEO0FBQ0gsYUFBTyxZQUFXLEtBQUs7QUFBQSxRQUNyQixPQUFPO0FBQUE7QUFBQSxTQUdOO0FBQ0gsYUFBTyxZQUFXLEtBQUs7QUFBQSxRQUNyQixPQUFPO0FBQUE7QUFBQSxTQUdOO0FBQ0gsYUFBTyxZQUFXLEtBQUs7QUFBQSxRQUNyQixPQUFPO0FBQUE7QUFBQSxTQUdOO0FBQUE7QUFFSCxhQUFPLFlBQVcsS0FBSztBQUFBLFFBQ3JCLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFLZiwrQkFBK0IsU0FBUyxhQUFZO0FBQ2xELE1BQUksY0FBYyxRQUFRLE1BQU0sZ0JBQWdCO0FBQ2hELE1BQUksY0FBYyxZQUFZO0FBQzlCLE1BQUksY0FBYyxZQUFZO0FBRTlCLE1BQUksQ0FBQyxhQUFhO0FBQ2hCLFdBQU8sa0JBQWtCLFNBQVM7QUFBQTtBQUdwQyxNQUFJO0FBRUosVUFBUTtBQUFBLFNBQ0Q7QUFDSCx1QkFBaUIsWUFBVyxTQUFTO0FBQUEsUUFDbkMsT0FBTztBQUFBO0FBRVQ7QUFBQSxTQUVHO0FBQ0gsdUJBQWlCLFlBQVcsU0FBUztBQUFBLFFBQ25DLE9BQU87QUFBQTtBQUVUO0FBQUEsU0FFRztBQUNILHVCQUFpQixZQUFXLFNBQVM7QUFBQSxRQUNuQyxPQUFPO0FBQUE7QUFFVDtBQUFBLFNBRUc7QUFBQTtBQUVILHVCQUFpQixZQUFXLFNBQVM7QUFBQSxRQUNuQyxPQUFPO0FBQUE7QUFFVDtBQUFBO0FBR0osU0FBTyxlQUFlLFFBQVEsWUFBWSxrQkFBa0IsYUFBYSxjQUFhLFFBQVEsWUFBWSxrQkFBa0IsYUFBYTtBQUFBO0FBRzNJLElBQUksaUJBQWlCO0FBQUEsRUFDbkIsR0FBRztBQUFBLEVBQ0gsR0FBRztBQUFBO0FBRUwsSUFBTyx5QkFBUTs7O0FDL0ZmLElBQUksMkJBQTJCLENBQUMsS0FBSztBQUNyQyxJQUFJLDBCQUEwQixDQUFDLE1BQU07QUFDOUIsbUNBQW1DLE9BQU87QUFDL0MsU0FBTyx5QkFBeUIsUUFBUSxXQUFXO0FBQUE7QUFFOUMsa0NBQWtDLE9BQU87QUFDOUMsU0FBTyx3QkFBd0IsUUFBUSxXQUFXO0FBQUE7QUFFN0MsNkJBQTZCLE9BQU8sU0FBUSxPQUFPO0FBQ3hELE1BQUksVUFBVSxRQUFRO0FBQ3BCLFVBQU0sSUFBSSxXQUFXLHFDQUFxQyxPQUFPLFNBQVEsMENBQTBDLE9BQU8sT0FBTztBQUFBLGFBQ3hILFVBQVUsTUFBTTtBQUN6QixVQUFNLElBQUksV0FBVyxpQ0FBaUMsT0FBTyxTQUFRLDBDQUEwQyxPQUFPLE9BQU87QUFBQSxhQUNwSCxVQUFVLEtBQUs7QUFDeEIsVUFBTSxJQUFJLFdBQVcsK0JBQStCLE9BQU8sU0FBUSxzREFBc0QsT0FBTyxPQUFPO0FBQUEsYUFDOUgsVUFBVSxNQUFNO0FBQ3pCLFVBQU0sSUFBSSxXQUFXLGlDQUFpQyxPQUFPLFNBQVEsc0RBQXNELE9BQU8sT0FBTztBQUFBO0FBQUE7OztBQ0s3SSxJQUFJLHlCQUF5QjtBQUc3QixJQUFJLDZCQUE2QjtBQUNqQyxJQUFJLHNCQUFzQjtBQUMxQixJQUFJLG9CQUFvQjtBQUN4QixJQUFJLGdDQUFnQztBQXlUckIsZ0JBQWdCLFdBQVcsZ0JBQWdCLGNBQWM7QUFDdEUsZUFBYSxHQUFHO0FBQ2hCLE1BQUksWUFBWSxPQUFPO0FBQ3ZCLE1BQUksV0FBVSxnQkFBZ0I7QUFDOUIsTUFBSSxVQUFTLFNBQVEsVUFBVTtBQUMvQixNQUFJLDhCQUE4QixRQUFPLFdBQVcsUUFBTyxRQUFRO0FBQ25FLE1BQUksK0JBQStCLCtCQUErQixPQUFPLElBQUksV0FBVTtBQUN2RixNQUFJLHdCQUF3QixTQUFRLHlCQUF5QixPQUFPLCtCQUErQixXQUFVLFNBQVE7QUFFckgsTUFBSSxDQUFFLDBCQUF5QixLQUFLLHlCQUF5QixJQUFJO0FBQy9ELFVBQU0sSUFBSSxXQUFXO0FBQUE7QUFHdkIsTUFBSSxxQkFBcUIsUUFBTyxXQUFXLFFBQU8sUUFBUTtBQUMxRCxNQUFJLHNCQUFzQixzQkFBc0IsT0FBTyxJQUFJLFdBQVU7QUFDckUsTUFBSSxlQUFlLFNBQVEsZ0JBQWdCLE9BQU8sc0JBQXNCLFdBQVUsU0FBUTtBQUUxRixNQUFJLENBQUUsaUJBQWdCLEtBQUssZ0JBQWdCLElBQUk7QUFDN0MsVUFBTSxJQUFJLFdBQVc7QUFBQTtBQUd2QixNQUFJLENBQUMsUUFBTyxVQUFVO0FBQ3BCLFVBQU0sSUFBSSxXQUFXO0FBQUE7QUFHdkIsTUFBSSxDQUFDLFFBQU8sWUFBWTtBQUN0QixVQUFNLElBQUksV0FBVztBQUFBO0FBR3ZCLE1BQUksZUFBZSxPQUFPO0FBRTFCLE1BQUksQ0FBQyxRQUFRLGVBQWU7QUFDMUIsVUFBTSxJQUFJLFdBQVc7QUFBQTtBQU12QixNQUFJLGlCQUFpQixnQ0FBZ0M7QUFDckQsTUFBSSxVQUFVLGdCQUFnQixjQUFjO0FBQzVDLE1BQUksbUJBQW1CO0FBQUEsSUFDckI7QUFBQSxJQUNBO0FBQUEsSUFDQSxRQUFRO0FBQUEsSUFDUixlQUFlO0FBQUE7QUFFakIsTUFBSSxTQUFTLFVBQVUsTUFBTSw0QkFBNEIsSUFBSSxTQUFVLFdBQVc7QUFDaEYsUUFBSSxpQkFBaUIsVUFBVTtBQUUvQixRQUFJLG1CQUFtQixPQUFPLG1CQUFtQixLQUFLO0FBQ3BELFVBQUksZ0JBQWdCLHVCQUFlO0FBQ25DLGFBQU8sY0FBYyxXQUFXLFFBQU8sWUFBWTtBQUFBO0FBR3JELFdBQU87QUFBQSxLQUNOLEtBQUssSUFBSSxNQUFNLHdCQUF3QixJQUFJLFNBQVUsV0FBVztBQUVqRSxRQUFJLGNBQWMsTUFBTTtBQUN0QixhQUFPO0FBQUE7QUFHVCxRQUFJLGlCQUFpQixVQUFVO0FBRS9CLFFBQUksbUJBQW1CLEtBQUs7QUFDMUIsYUFBTyxtQkFBbUI7QUFBQTtBQUc1QixRQUFJLFlBQVksbUJBQVc7QUFFM0IsUUFBSSxXQUFXO0FBQ2IsVUFBSSxDQUFDLFNBQVEsK0JBQStCLHlCQUF5QixZQUFZO0FBQy9FLDRCQUFvQixXQUFXLGdCQUFnQjtBQUFBO0FBR2pELFVBQUksQ0FBQyxTQUFRLGdDQUFnQywwQkFBMEIsWUFBWTtBQUNqRiw0QkFBb0IsV0FBVyxnQkFBZ0I7QUFBQTtBQUdqRCxhQUFPLFVBQVUsU0FBUyxXQUFXLFFBQU8sVUFBVTtBQUFBO0FBR3hELFFBQUksZUFBZSxNQUFNLGdDQUFnQztBQUN2RCxZQUFNLElBQUksV0FBVyxtRUFBbUUsaUJBQWlCO0FBQUE7QUFHM0csV0FBTztBQUFBLEtBQ04sS0FBSztBQUNSLFNBQU87QUFBQTtBQUdULDRCQUE0QixPQUFPO0FBQ2pDLFNBQU8sTUFBTSxNQUFNLHFCQUFxQixHQUFHLFFBQVEsbUJBQW1CO0FBQUE7OztBQy9hekQsZ0JBQWdCLFFBQVEsYUFBYTtBQUNsRCxNQUFJLFVBQVUsTUFBTTtBQUNsQixVQUFNLElBQUksVUFBVTtBQUFBO0FBR3RCLGdCQUFjLGVBQWU7QUFFN0IsV0FBUyxZQUFZLGFBQWE7QUFDaEMsUUFBSSxPQUFPLFVBQVUsZUFBZSxLQUFLLGFBQWEsV0FBVztBQUMvRCxhQUFPLFlBQVksWUFBWTtBQUFBO0FBQUE7QUFJbkMsU0FBTztBQUFBOzs7QUNSTSxtQkFBbUIsV0FBVyxVQUFVLGNBQWM7QUFDbkUsZUFBYSxHQUFHO0FBQ2hCLE1BQUksV0FBVSxnQkFBZ0I7QUFDOUIsTUFBSSxVQUFTLFNBQVE7QUFDckIsTUFBSSxxQkFBcUIsV0FBVSxRQUFPLFdBQVcsUUFBTyxRQUFRO0FBQ3BFLE1BQUksc0JBQXNCLHNCQUFzQixPQUFPLElBQUksV0FBVTtBQUNyRSxNQUFJLGVBQWUsU0FBUSxnQkFBZ0IsT0FBTyxzQkFBc0IsV0FBVSxTQUFRO0FBRTFGLE1BQUksQ0FBRSxpQkFBZ0IsS0FBSyxnQkFBZ0IsSUFBSTtBQUM3QyxVQUFNLElBQUksV0FBVztBQUFBO0FBR3ZCLE1BQUksT0FBTyxPQUFPO0FBQ2xCLE1BQUksTUFBTSxXQUFVO0FBQ3BCLE1BQUksYUFBYSxLQUFLO0FBQ3RCLE1BQUksWUFBWSxNQUFNO0FBQ3RCLE1BQUksV0FBWSxhQUFZLEtBQUs7QUFDakMsTUFBSSxPQUFRLFlBQVcsZUFBZSxJQUFJLEtBQUssTUFBTTtBQUNyRCxPQUFLLFdBQVcsS0FBSyxlQUFlO0FBQ3BDLFNBQU87QUFBQTs7O0FDbkJNLHNCQUFzQixXQUFXLFVBQVU7QUFDeEQsZUFBYSxHQUFHO0FBQ2hCLE1BQUksTUFBTSxXQUFVO0FBRXBCLE1BQUksTUFBTSxNQUFNLEdBQUc7QUFDakIsVUFBTSxNQUFNO0FBQUE7QUFHZCxNQUFJLGVBQWU7QUFDbkIsTUFBSSxPQUFPLE9BQU87QUFDbEIsTUFBSSxhQUFhLEtBQUs7QUFDdEIsTUFBSSxZQUFZLE1BQU07QUFDdEIsTUFBSSxXQUFZLGFBQVksS0FBSztBQUNqQyxNQUFJLE9BQVEsWUFBVyxlQUFlLElBQUksS0FBSyxNQUFNO0FBQ3JELE9BQUssV0FBVyxLQUFLLGVBQWU7QUFDcEMsU0FBTztBQUFBOzs7QUNkTSx1QkFBdUIsV0FBVyxjQUFjO0FBQzdELGVBQWEsR0FBRztBQUNoQixNQUFJLE9BQU8sT0FBTztBQUNsQixNQUFJLFVBQVUsV0FBVTtBQUN4QixNQUFJLE9BQU8sY0FBYyxRQUFRO0FBQ2pDLE9BQUssV0FBVyxLQUFLLGVBQWUsT0FBTztBQUMzQyxTQUFPO0FBQUE7OztBQ05NLG9CQUFvQixXQUFXLFdBQVcsVUFBUztBQUNoRSxlQUFhLEdBQUc7QUFDaEIsTUFBSSxPQUFPLE9BQU87QUFDbEIsTUFBSSxPQUFPLFdBQVU7QUFDckIsTUFBSSxPQUFPLFdBQVcsTUFBTSxZQUFXO0FBQ3ZDLE9BQUssV0FBVyxLQUFLLGVBQWUsT0FBTztBQUMzQyxTQUFPO0FBQUE7OztBQ0xULElBQUksdUJBQXVCO0FBQzNCLElBQUkseUJBQXlCO0FBQzdCLElBQUkseUJBQXlCO0FBQzdCLElBQUksa0JBQWtCO0FBQUEsRUFDcEIsT0FBTztBQUFBLEVBRVAsTUFBTTtBQUFBLEVBRU4sV0FBVztBQUFBLEVBRVgsTUFBTTtBQUFBLEVBRU4sU0FBUztBQUFBLEVBRVQsU0FBUztBQUFBLEVBRVQsU0FBUztBQUFBLEVBRVQsU0FBUztBQUFBLEVBRVQsUUFBUTtBQUFBLEVBRVIsUUFBUTtBQUFBLEVBRVIsYUFBYTtBQUFBLEVBRWIsV0FBVztBQUFBLEVBRVgsYUFBYTtBQUFBLEVBRWIsWUFBWTtBQUFBLEVBRVosaUJBQWlCO0FBQUEsRUFDakIsbUJBQW1CO0FBQUEsRUFFbkIsaUJBQWlCO0FBQUEsRUFFakIsbUJBQW1CO0FBQUEsRUFFbkIsa0JBQWtCO0FBQUE7QUFHcEIsSUFBSSxtQkFBbUI7QUFBQSxFQUNyQixzQkFBc0I7QUFBQSxFQUN0QixPQUFPO0FBQUEsRUFDUCxzQkFBc0I7QUFBQSxFQUN0QixVQUFVO0FBQUEsRUFDVix5QkFBeUI7QUFBQTtBQUczQiw2QkFBNkIsU0FBUyxRQUFRLGVBQWU7QUFDM0QsTUFBSSxjQUFjLE9BQU8sTUFBTTtBQUUvQixNQUFJLENBQUMsYUFBYTtBQUNoQixXQUFPO0FBQUE7QUFHVCxNQUFJLFFBQVEsU0FBUyxZQUFZLElBQUk7QUFDckMsU0FBTztBQUFBLElBQ0wsT0FBTyxnQkFBZ0IsY0FBYyxTQUFTO0FBQUEsSUFDOUMsTUFBTSxPQUFPLE1BQU0sWUFBWSxHQUFHO0FBQUE7QUFBQTtBQUl0Qyw4QkFBOEIsU0FBUyxRQUFRO0FBQzdDLE1BQUksY0FBYyxPQUFPLE1BQU07QUFFL0IsTUFBSSxDQUFDLGFBQWE7QUFDaEIsV0FBTztBQUFBO0FBSVQsTUFBSSxZQUFZLE9BQU8sS0FBSztBQUMxQixXQUFPO0FBQUEsTUFDTCxPQUFPO0FBQUEsTUFDUCxNQUFNLE9BQU8sTUFBTTtBQUFBO0FBQUE7QUFJdkIsTUFBSSxPQUFPLFlBQVksT0FBTyxNQUFNLElBQUk7QUFDeEMsTUFBSSxRQUFRLFlBQVksS0FBSyxTQUFTLFlBQVksSUFBSSxNQUFNO0FBQzVELE1BQUksVUFBVSxZQUFZLEtBQUssU0FBUyxZQUFZLElBQUksTUFBTTtBQUM5RCxNQUFJLFVBQVUsWUFBWSxLQUFLLFNBQVMsWUFBWSxJQUFJLE1BQU07QUFDOUQsU0FBTztBQUFBLElBQ0wsT0FBTyxPQUFRLFNBQVEsdUJBQXVCLFVBQVUseUJBQXlCLFVBQVU7QUFBQSxJQUMzRixNQUFNLE9BQU8sTUFBTSxZQUFZLEdBQUc7QUFBQTtBQUFBO0FBSXRDLDhCQUE4QixRQUFRLGVBQWU7QUFDbkQsU0FBTyxvQkFBb0IsZ0JBQWdCLGlCQUFpQixRQUFRO0FBQUE7QUFHdEUsc0JBQXNCLEdBQUcsUUFBUSxlQUFlO0FBQzlDLFVBQVE7QUFBQSxTQUNEO0FBQ0gsYUFBTyxvQkFBb0IsZ0JBQWdCLGFBQWEsUUFBUTtBQUFBLFNBRTdEO0FBQ0gsYUFBTyxvQkFBb0IsZ0JBQWdCLFdBQVcsUUFBUTtBQUFBLFNBRTNEO0FBQ0gsYUFBTyxvQkFBb0IsZ0JBQWdCLGFBQWEsUUFBUTtBQUFBLFNBRTdEO0FBQ0gsYUFBTyxvQkFBb0IsZ0JBQWdCLFlBQVksUUFBUTtBQUFBO0FBRy9ELGFBQU8sb0JBQW9CLElBQUksT0FBTyxZQUFZLElBQUksTUFBTSxRQUFRO0FBQUE7QUFBQTtBQUkxRSw0QkFBNEIsR0FBRyxRQUFRLGVBQWU7QUFDcEQsVUFBUTtBQUFBLFNBQ0Q7QUFDSCxhQUFPLG9CQUFvQixnQkFBZ0IsbUJBQW1CLFFBQVE7QUFBQSxTQUVuRTtBQUNILGFBQU8sb0JBQW9CLGdCQUFnQixpQkFBaUIsUUFBUTtBQUFBLFNBRWpFO0FBQ0gsYUFBTyxvQkFBb0IsZ0JBQWdCLG1CQUFtQixRQUFRO0FBQUEsU0FFbkU7QUFDSCxhQUFPLG9CQUFvQixnQkFBZ0Isa0JBQWtCLFFBQVE7QUFBQTtBQUdyRSxhQUFPLG9CQUFvQixJQUFJLE9BQU8sY0FBYyxJQUFJLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFJNUUsOEJBQThCLFdBQVc7QUFDdkMsVUFBUTtBQUFBLFNBQ0Q7QUFDSCxhQUFPO0FBQUEsU0FFSjtBQUNILGFBQU87QUFBQSxTQUVKO0FBQUEsU0FDQTtBQUFBLFNBQ0E7QUFDSCxhQUFPO0FBQUEsU0FFSjtBQUFBLFNBQ0E7QUFBQSxTQUNBO0FBQUE7QUFFSCxhQUFPO0FBQUE7QUFBQTtBQUliLCtCQUErQixjQUFjLGFBQWE7QUFDeEQsTUFBSSxjQUFjLGNBQWM7QUFLaEMsTUFBSSxpQkFBaUIsY0FBYyxjQUFjLElBQUk7QUFDckQsTUFBSTtBQUVKLE1BQUksa0JBQWtCLElBQUk7QUFDeEIsYUFBUyxnQkFBZ0I7QUFBQSxTQUNwQjtBQUNMLFFBQUksV0FBVyxpQkFBaUI7QUFDaEMsUUFBSSxrQkFBa0IsS0FBSyxNQUFNLFdBQVcsT0FBTztBQUNuRCxRQUFJLG9CQUFvQixnQkFBZ0IsV0FBVztBQUNuRCxhQUFTLGVBQWUsa0JBQW1CLHFCQUFvQixNQUFNO0FBQUE7QUFHdkUsU0FBTyxjQUFjLFNBQVMsSUFBSTtBQUFBO0FBR3BDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQ2pFLElBQUksMEJBQTBCLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJO0FBRTNFLHlCQUF5QixNQUFNO0FBQzdCLFNBQU8sT0FBTyxRQUFRLEtBQUssT0FBTyxNQUFNLEtBQUssT0FBTyxRQUFRO0FBQUE7QUErQzlELElBQUksVUFBVTtBQUFBLEVBRVosR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsY0FBUTtBQUFBLGFBRUQ7QUFBQSxhQUNBO0FBQUEsYUFDQTtBQUNILGlCQUFPLE9BQU0sSUFBSSxRQUFRO0FBQUEsWUFDdkIsT0FBTztBQUFBLGdCQUNILE9BQU0sSUFBSSxRQUFRO0FBQUEsWUFDdEIsT0FBTztBQUFBO0FBQUEsYUFJTjtBQUNILGlCQUFPLE9BQU0sSUFBSSxRQUFRO0FBQUEsWUFDdkIsT0FBTztBQUFBO0FBQUEsYUFJTjtBQUFBO0FBRUgsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsZ0JBQ0gsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsZ0JBQ0gsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFJZixLQUFLLFNBQVUsTUFBTSxPQUFPLE9BQU8sVUFBVTtBQUMzQyxZQUFNLE1BQU07QUFDWixXQUFLLGVBQWUsT0FBTyxHQUFHO0FBQzlCLFdBQUssWUFBWSxHQUFHLEdBQUcsR0FBRztBQUMxQixhQUFPO0FBQUE7QUFBQSxJQUVULG9CQUFvQixDQUFDLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFBQSxFQUd0QyxHQUFHO0FBQUEsSUFTRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQU8sVUFBVTtBQUMvQyxVQUFJLGdCQUFnQixTQUFVLE1BQU07QUFDbEMsZUFBTztBQUFBLFVBQ0w7QUFBQSxVQUNBLGdCQUFnQixVQUFVO0FBQUE7QUFBQTtBQUk5QixjQUFRO0FBQUEsYUFDRDtBQUNILGlCQUFPLGFBQWEsR0FBRyxRQUFRO0FBQUEsYUFFNUI7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQSxZQUNOO0FBQUE7QUFBQTtBQUlGLGlCQUFPLGFBQWEsTUFBTSxRQUFRLFFBQVE7QUFBQTtBQUFBO0FBQUEsSUFHaEQsVUFBVSxTQUFVLE9BQU8sT0FBTyxVQUFVO0FBQzFDLGFBQU8sTUFBTSxrQkFBa0IsTUFBTSxPQUFPO0FBQUE7QUFBQSxJQUU5QyxLQUFLLFNBQVUsTUFBTSxPQUFPLE9BQU8sVUFBVTtBQUMzQyxVQUFJLGNBQWMsS0FBSztBQUV2QixVQUFJLE1BQU0sZ0JBQWdCO0FBQ3hCLFlBQUkseUJBQXlCLHNCQUFzQixNQUFNLE1BQU07QUFDL0QsYUFBSyxlQUFlLHdCQUF3QixHQUFHO0FBQy9DLGFBQUssWUFBWSxHQUFHLEdBQUcsR0FBRztBQUMxQixlQUFPO0FBQUE7QUFHVCxVQUFJLE9BQU8sQ0FBRSxVQUFTLFVBQVUsTUFBTSxRQUFRLElBQUksTUFBTSxPQUFPLElBQUksTUFBTTtBQUN6RSxXQUFLLGVBQWUsTUFBTSxHQUFHO0FBQzdCLFdBQUssWUFBWSxHQUFHLEdBQUcsR0FBRztBQUMxQixhQUFPO0FBQUE7QUFBQSxJQUVULG9CQUFvQixDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFBQSxFQUdwRSxHQUFHO0FBQUEsSUFDRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQU8sVUFBVTtBQUMvQyxVQUFJLGdCQUFnQixTQUFVLE1BQU07QUFDbEMsZUFBTztBQUFBLFVBQ0w7QUFBQSxVQUNBLGdCQUFnQixVQUFVO0FBQUE7QUFBQTtBQUk5QixjQUFRO0FBQUEsYUFDRDtBQUNILGlCQUFPLGFBQWEsR0FBRyxRQUFRO0FBQUEsYUFFNUI7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQSxZQUNOO0FBQUE7QUFBQTtBQUlGLGlCQUFPLGFBQWEsTUFBTSxRQUFRLFFBQVE7QUFBQTtBQUFBO0FBQUEsSUFHaEQsVUFBVSxTQUFVLE9BQU8sT0FBTyxVQUFVO0FBQzFDLGFBQU8sTUFBTSxrQkFBa0IsTUFBTSxPQUFPO0FBQUE7QUFBQSxJQUU5QyxLQUFLLFNBQVUsTUFBTSxPQUFPLE9BQU8sVUFBUztBQUMxQyxVQUFJLGNBQWMsZUFBZSxNQUFNO0FBRXZDLFVBQUksTUFBTSxnQkFBZ0I7QUFDeEIsWUFBSSx5QkFBeUIsc0JBQXNCLE1BQU0sTUFBTTtBQUMvRCxhQUFLLGVBQWUsd0JBQXdCLEdBQUcsU0FBUTtBQUN2RCxhQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsZUFBTyxlQUFlLE1BQU07QUFBQTtBQUc5QixVQUFJLE9BQU8sQ0FBRSxVQUFTLFVBQVUsTUFBTSxRQUFRLElBQUksTUFBTSxPQUFPLElBQUksTUFBTTtBQUN6RSxXQUFLLGVBQWUsTUFBTSxHQUFHLFNBQVE7QUFDckMsV0FBSyxZQUFZLEdBQUcsR0FBRyxHQUFHO0FBQzFCLGFBQU8sZUFBZSxNQUFNO0FBQUE7QUFBQSxJQUU5QixvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHbkYsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFRLFVBQVU7QUFDaEQsVUFBSSxVQUFVLEtBQUs7QUFDakIsZUFBTyxtQkFBbUIsR0FBRztBQUFBO0FBRy9CLGFBQU8sbUJBQW1CLE1BQU0sUUFBUTtBQUFBO0FBQUEsSUFFMUMsS0FBSyxTQUFVLE9BQU8sUUFBUSxPQUFPLFVBQVU7QUFDN0MsVUFBSSxrQkFBa0IsSUFBSSxLQUFLO0FBQy9CLHNCQUFnQixlQUFlLE9BQU8sR0FBRztBQUN6QyxzQkFBZ0IsWUFBWSxHQUFHLEdBQUcsR0FBRztBQUNyQyxhQUFPLGtCQUFrQjtBQUFBO0FBQUEsSUFFM0Isb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFBQSxFQUc3RixHQUFHO0FBQUEsSUFDRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQVEsVUFBVTtBQUNoRCxVQUFJLFVBQVUsS0FBSztBQUNqQixlQUFPLG1CQUFtQixHQUFHO0FBQUE7QUFHL0IsYUFBTyxtQkFBbUIsTUFBTSxRQUFRO0FBQUE7QUFBQSxJQUUxQyxLQUFLLFNBQVUsTUFBTSxRQUFRLE9BQU8sVUFBVTtBQUM1QyxXQUFLLGVBQWUsT0FBTyxHQUFHO0FBQzlCLFdBQUssWUFBWSxHQUFHLEdBQUcsR0FBRztBQUMxQixhQUFPO0FBQUE7QUFBQSxJQUVULG9CQUFvQixDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBR3pFLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUVEO0FBQUEsYUFDQTtBQUVILGlCQUFPLGFBQWEsTUFBTSxRQUFRO0FBQUEsYUFHL0I7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQTtBQUFBLGFBSUw7QUFDSCxpQkFBTyxPQUFNLFFBQVEsUUFBUTtBQUFBLFlBQzNCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLFFBQVEsUUFBUTtBQUFBLFlBQzFCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBSVI7QUFDSCxpQkFBTyxPQUFNLFFBQVEsUUFBUTtBQUFBLFlBQzNCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBSVI7QUFBQTtBQUVILGlCQUFPLE9BQU0sUUFBUSxRQUFRO0FBQUEsWUFDM0IsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sUUFBUSxRQUFRO0FBQUEsWUFDMUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sUUFBUSxRQUFRO0FBQUEsWUFDMUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLElBSWpCLFVBQVUsU0FBVSxPQUFPLE9BQU8sVUFBVTtBQUMxQyxhQUFPLFNBQVMsS0FBSyxTQUFTO0FBQUE7QUFBQSxJQUVoQyxLQUFLLFNBQVUsTUFBTSxRQUFRLE9BQU8sVUFBVTtBQUM1QyxXQUFLLFlBQWEsU0FBUSxLQUFLLEdBQUc7QUFDbEMsV0FBSyxZQUFZLEdBQUcsR0FBRyxHQUFHO0FBQzFCLGFBQU87QUFBQTtBQUFBLElBRVQsb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHeEYsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsY0FBUTtBQUFBLGFBRUQ7QUFBQSxhQUNBO0FBRUgsaUJBQU8sYUFBYSxNQUFNLFFBQVE7QUFBQSxhQUcvQjtBQUNILGlCQUFPLE9BQU0sY0FBYyxRQUFRO0FBQUEsWUFDakMsTUFBTTtBQUFBO0FBQUEsYUFJTDtBQUNILGlCQUFPLE9BQU0sUUFBUSxRQUFRO0FBQUEsWUFDM0IsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sUUFBUSxRQUFRO0FBQUEsWUFDMUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBO0FBQUEsYUFJUjtBQUNILGlCQUFPLE9BQU0sUUFBUSxRQUFRO0FBQUEsWUFDM0IsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBO0FBQUEsYUFJUjtBQUFBO0FBRUgsaUJBQU8sT0FBTSxRQUFRLFFBQVE7QUFBQSxZQUMzQixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxRQUFRLFFBQVE7QUFBQSxZQUMxQixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxRQUFRLFFBQVE7QUFBQSxZQUMxQixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFJakIsVUFBVSxTQUFVLE9BQU8sT0FBTyxVQUFVO0FBQzFDLGFBQU8sU0FBUyxLQUFLLFNBQVM7QUFBQTtBQUFBLElBRWhDLEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFVO0FBQzVDLFdBQUssWUFBYSxTQUFRLEtBQUssR0FBRztBQUNsQyxXQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFBQSxFQUd4RixHQUFHO0FBQUEsSUFDRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQU8sVUFBVTtBQUMvQyxVQUFJLGdCQUFnQixTQUFVLE9BQU87QUFDbkMsZUFBTyxRQUFRO0FBQUE7QUFHakIsY0FBUTtBQUFBLGFBRUQ7QUFDSCxpQkFBTyxvQkFBb0IsZ0JBQWdCLE9BQU8sUUFBUTtBQUFBLGFBR3ZEO0FBQ0gsaUJBQU8sYUFBYSxHQUFHLFFBQVE7QUFBQSxhQUc1QjtBQUNILGlCQUFPLE9BQU0sY0FBYyxRQUFRO0FBQUEsWUFDakMsTUFBTTtBQUFBLFlBQ047QUFBQTtBQUFBLGFBSUM7QUFDSCxpQkFBTyxPQUFNLE1BQU0sUUFBUTtBQUFBLFlBQ3pCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLE1BQU0sUUFBUTtBQUFBLFlBQ3hCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBSVI7QUFDSCxpQkFBTyxPQUFNLE1BQU0sUUFBUTtBQUFBLFlBQ3pCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBSVI7QUFBQTtBQUVILGlCQUFPLE9BQU0sTUFBTSxRQUFRO0FBQUEsWUFDekIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sTUFBTSxRQUFRO0FBQUEsWUFDeEIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sTUFBTSxRQUFRO0FBQUEsWUFDeEIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLElBSWpCLFVBQVUsU0FBVSxPQUFPLE9BQU8sVUFBVTtBQUMxQyxhQUFPLFNBQVMsS0FBSyxTQUFTO0FBQUE7QUFBQSxJQUVoQyxLQUFLLFNBQVUsTUFBTSxRQUFRLE9BQU8sVUFBVTtBQUM1QyxXQUFLLFlBQVksT0FBTztBQUN4QixXQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHbkYsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsVUFBSSxnQkFBZ0IsU0FBVSxPQUFPO0FBQ25DLGVBQU8sUUFBUTtBQUFBO0FBR2pCLGNBQVE7QUFBQSxhQUVEO0FBQ0gsaUJBQU8sb0JBQW9CLGdCQUFnQixPQUFPLFFBQVE7QUFBQSxhQUd2RDtBQUNILGlCQUFPLGFBQWEsR0FBRyxRQUFRO0FBQUEsYUFHNUI7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQSxZQUNOO0FBQUE7QUFBQSxhQUlDO0FBQ0gsaUJBQU8sT0FBTSxNQUFNLFFBQVE7QUFBQSxZQUN6QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxNQUFNLFFBQVE7QUFBQSxZQUN4QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQ0gsaUJBQU8sT0FBTSxNQUFNLFFBQVE7QUFBQSxZQUN6QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQUE7QUFFSCxpQkFBTyxPQUFNLE1BQU0sUUFBUTtBQUFBLFlBQ3pCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLE1BQU0sUUFBUTtBQUFBLFlBQ3hCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLE1BQU0sUUFBUTtBQUFBLFlBQ3hCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlqQixVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVU7QUFDNUMsV0FBSyxZQUFZLE9BQU87QUFDeEIsV0FBSyxZQUFZLEdBQUcsR0FBRyxHQUFHO0FBQzFCLGFBQU87QUFBQTtBQUFBLElBRVQsb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBR25GLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUNEO0FBQ0gsaUJBQU8sb0JBQW9CLGdCQUFnQixNQUFNO0FBQUEsYUFFOUM7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQTtBQUFBO0FBSVIsaUJBQU8sYUFBYSxNQUFNLFFBQVE7QUFBQTtBQUFBO0FBQUEsSUFHeEMsVUFBVSxTQUFVLE9BQU8sT0FBTyxVQUFVO0FBQzFDLGFBQU8sU0FBUyxLQUFLLFNBQVM7QUFBQTtBQUFBLElBRWhDLEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFTO0FBQzNDLGFBQU8sZUFBZSxXQUFXLE1BQU0sT0FBTyxXQUFVO0FBQUE7QUFBQSxJQUUxRCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHbkYsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsY0FBUTtBQUFBLGFBQ0Q7QUFDSCxpQkFBTyxvQkFBb0IsZ0JBQWdCLE1BQU07QUFBQSxhQUU5QztBQUNILGlCQUFPLE9BQU0sY0FBYyxRQUFRO0FBQUEsWUFDakMsTUFBTTtBQUFBO0FBQUE7QUFJUixpQkFBTyxhQUFhLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFBQSxJQUd4QyxVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVM7QUFDM0MsYUFBTyxrQkFBa0IsY0FBYyxNQUFNLE9BQU8sV0FBVTtBQUFBO0FBQUEsSUFFaEUsb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHeEYsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsYUFBYTtBQUFBLElBQ2IsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsY0FBUTtBQUFBLGFBQ0Q7QUFDSCxpQkFBTyxvQkFBb0IsZ0JBQWdCLE1BQU07QUFBQSxhQUU5QztBQUNILGlCQUFPLE9BQU0sY0FBYyxRQUFRO0FBQUEsWUFDakMsTUFBTTtBQUFBO0FBQUE7QUFJUixpQkFBTyxhQUFhLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFBQSxJQUd4QyxVQUFVLFNBQVUsTUFBTSxPQUFPLFVBQVU7QUFDekMsVUFBSSxPQUFPLEtBQUs7QUFDaEIsVUFBSSxhQUFhLGdCQUFnQjtBQUNqQyxVQUFJLFFBQVEsS0FBSztBQUVqQixVQUFJLFlBQVk7QUFDZCxlQUFPLFNBQVMsS0FBSyxTQUFTLHdCQUF3QjtBQUFBLGFBQ2pEO0FBQ0wsZUFBTyxTQUFTLEtBQUssU0FBUyxjQUFjO0FBQUE7QUFBQTtBQUFBLElBR2hELEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFVO0FBQzVDLFdBQUssV0FBVztBQUNoQixXQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBRzlFLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLGFBQWE7QUFBQSxJQUNiLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUNEO0FBQUEsYUFDQTtBQUNILGlCQUFPLG9CQUFvQixnQkFBZ0IsV0FBVztBQUFBLGFBRW5EO0FBQ0gsaUJBQU8sT0FBTSxjQUFjLFFBQVE7QUFBQSxZQUNqQyxNQUFNO0FBQUE7QUFBQTtBQUlSLGlCQUFPLGFBQWEsTUFBTSxRQUFRO0FBQUE7QUFBQTtBQUFBLElBR3hDLFVBQVUsU0FBVSxNQUFNLE9BQU8sVUFBVTtBQUN6QyxVQUFJLE9BQU8sS0FBSztBQUNoQixVQUFJLGFBQWEsZ0JBQWdCO0FBRWpDLFVBQUksWUFBWTtBQUNkLGVBQU8sU0FBUyxLQUFLLFNBQVM7QUFBQSxhQUN6QjtBQUNMLGVBQU8sU0FBUyxLQUFLLFNBQVM7QUFBQTtBQUFBO0FBQUEsSUFHbEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVU7QUFDNUMsV0FBSyxZQUFZLEdBQUc7QUFDcEIsV0FBSyxZQUFZLEdBQUcsR0FBRyxHQUFHO0FBQzFCLGFBQU87QUFBQTtBQUFBLElBRVQsb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFBQSxFQUc3RixHQUFHO0FBQUEsSUFDRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQU8sVUFBVTtBQUMvQyxjQUFRO0FBQUEsYUFFRDtBQUFBLGFBQ0E7QUFBQSxhQUNBO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQUE7QUFFSCxpQkFBTyxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3ZCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlqQixVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVM7QUFDM0MsYUFBTyxVQUFVLE1BQU0sT0FBTztBQUM5QixXQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBR2hELEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFTO0FBQzlDLFVBQUksZ0JBQWdCLFNBQVUsT0FBTztBQUNuQyxZQUFJLGdCQUFnQixLQUFLLE1BQU8sU0FBUSxLQUFLLEtBQUs7QUFDbEQsZUFBUSxTQUFRLFNBQVEsZUFBZSxLQUFLLElBQUk7QUFBQTtBQUdsRCxjQUFRO0FBQUEsYUFFRDtBQUFBLGFBQ0E7QUFFSCxpQkFBTyxhQUFhLE1BQU0sUUFBUSxRQUFRO0FBQUEsYUFHdkM7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQSxZQUNOO0FBQUE7QUFBQSxhQUlDO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQUE7QUFFSCxpQkFBTyxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3ZCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlqQixVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVM7QUFDM0MsYUFBTyxVQUFVLE1BQU0sT0FBTztBQUM5QixXQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBRzdGLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFTO0FBQzlDLFVBQUksZ0JBQWdCLFNBQVUsT0FBTztBQUNuQyxZQUFJLGdCQUFnQixLQUFLLE1BQU8sU0FBUSxLQUFLLEtBQUs7QUFDbEQsZUFBUSxTQUFRLFNBQVEsZUFBZSxLQUFLLElBQUk7QUFBQTtBQUdsRCxjQUFRO0FBQUEsYUFFRDtBQUFBLGFBQ0E7QUFFSCxpQkFBTyxhQUFhLE1BQU0sUUFBUSxRQUFRO0FBQUEsYUFHdkM7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQSxZQUNOO0FBQUE7QUFBQSxhQUlDO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsZ0JBQ0wsT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUE7QUFBQSxhQUlSO0FBQUE7QUFFSCxpQkFBTyxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3ZCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlqQixVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVM7QUFDM0MsYUFBTyxVQUFVLE1BQU0sT0FBTztBQUM5QixXQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBRzdGLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLFVBQUksZ0JBQWdCLFNBQVUsT0FBTztBQUNuQyxZQUFJLFVBQVUsR0FBRztBQUNmLGlCQUFPO0FBQUE7QUFHVCxlQUFPO0FBQUE7QUFHVCxjQUFRO0FBQUEsYUFFRDtBQUFBLGFBQ0E7QUFFSCxpQkFBTyxhQUFhLE1BQU0sUUFBUTtBQUFBLGFBRy9CO0FBQ0gsaUJBQU8sT0FBTSxjQUFjLFFBQVE7QUFBQSxZQUNqQyxNQUFNO0FBQUE7QUFBQSxhQUlMO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsWUFDVDtBQUFBLGdCQUNJLE9BQU0sSUFBSSxRQUFRO0FBQUEsWUFDdEIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLFlBQ1Q7QUFBQSxnQkFDSSxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxZQUNUO0FBQUE7QUFBQSxhQUlDO0FBQ0gsaUJBQU8sT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN2QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsWUFDVDtBQUFBO0FBQUEsYUFJQztBQUNILGlCQUFPLE9BQU0sSUFBSSxRQUFRO0FBQUEsWUFDdkIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLFlBQ1Q7QUFBQSxnQkFDSSxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxZQUNUO0FBQUE7QUFBQSxhQUlDO0FBQUE7QUFFSCxpQkFBTyxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3ZCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxZQUNUO0FBQUEsZ0JBQ0ksT0FBTSxJQUFJLFFBQVE7QUFBQSxZQUN0QixPQUFPO0FBQUEsWUFDUCxTQUFTO0FBQUEsWUFDVDtBQUFBLGdCQUNJLE9BQU0sSUFBSSxRQUFRO0FBQUEsWUFDdEIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLFlBQ1Q7QUFBQSxnQkFDSSxPQUFNLElBQUksUUFBUTtBQUFBLFlBQ3RCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxZQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFJUixVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVM7QUFDM0MsYUFBTyxhQUFhLE1BQU0sT0FBTztBQUNqQyxXQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBRzdGLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUNEO0FBQUEsYUFDQTtBQUFBLGFBQ0E7QUFDSCxpQkFBTyxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzdCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzVCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBR1I7QUFDSCxpQkFBTyxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzdCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBR1I7QUFBQTtBQUVILGlCQUFPLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDN0IsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDNUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDNUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLElBSWpCLEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFVO0FBQzVDLFdBQUssWUFBWSxxQkFBcUIsUUFBUSxHQUFHLEdBQUc7QUFDcEQsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBR2hELEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUNEO0FBQUEsYUFDQTtBQUFBLGFBQ0E7QUFDSCxpQkFBTyxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzdCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzVCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBR1I7QUFDSCxpQkFBTyxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzdCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBR1I7QUFBQTtBQUVILGlCQUFPLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDN0IsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDNUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDNUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLElBSWpCLEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFVO0FBQzVDLFdBQUssWUFBWSxxQkFBcUIsUUFBUSxHQUFHLEdBQUc7QUFDcEQsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBR2hELEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUNEO0FBQUEsYUFDQTtBQUFBLGFBQ0E7QUFDSCxpQkFBTyxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzdCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQSxnQkFDTCxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzVCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBR1I7QUFDSCxpQkFBTyxPQUFNLFVBQVUsUUFBUTtBQUFBLFlBQzdCLE9BQU87QUFBQSxZQUNQLFNBQVM7QUFBQTtBQUFBLGFBR1I7QUFBQTtBQUVILGlCQUFPLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDN0IsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDNUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBLGdCQUNMLE9BQU0sVUFBVSxRQUFRO0FBQUEsWUFDNUIsT0FBTztBQUFBLFlBQ1AsU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBLElBSWpCLEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFVO0FBQzVDLFdBQUssWUFBWSxxQkFBcUIsUUFBUSxHQUFHLEdBQUc7QUFDcEQsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHdEMsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsY0FBUTtBQUFBLGFBQ0Q7QUFDSCxpQkFBTyxvQkFBb0IsZ0JBQWdCLFNBQVM7QUFBQSxhQUVqRDtBQUNILGlCQUFPLE9BQU0sY0FBYyxRQUFRO0FBQUEsWUFDakMsTUFBTTtBQUFBO0FBQUE7QUFJUixpQkFBTyxhQUFhLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFBQSxJQUd4QyxVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVU7QUFDNUMsVUFBSSxPQUFPLEtBQUssaUJBQWlCO0FBRWpDLFVBQUksUUFBUSxRQUFRLElBQUk7QUFDdEIsYUFBSyxZQUFZLFFBQVEsSUFBSSxHQUFHLEdBQUc7QUFBQSxpQkFDMUIsQ0FBQyxRQUFRLFVBQVUsSUFBSTtBQUNoQyxhQUFLLFlBQVksR0FBRyxHQUFHLEdBQUc7QUFBQSxhQUNyQjtBQUNMLGFBQUssWUFBWSxPQUFPLEdBQUcsR0FBRztBQUFBO0FBR2hDLGFBQU87QUFBQTtBQUFBLElBRVQsb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHM0MsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsY0FBUTtBQUFBLGFBQ0Q7QUFDSCxpQkFBTyxvQkFBb0IsZ0JBQWdCLFNBQVM7QUFBQSxhQUVqRDtBQUNILGlCQUFPLE9BQU0sY0FBYyxRQUFRO0FBQUEsWUFDakMsTUFBTTtBQUFBO0FBQUE7QUFJUixpQkFBTyxhQUFhLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFBQSxJQUd4QyxVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVU7QUFDNUMsV0FBSyxZQUFZLE9BQU8sR0FBRyxHQUFHO0FBQzlCLGFBQU87QUFBQTtBQUFBLElBRVQsb0JBQW9CLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBR3JELEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUNEO0FBQ0gsaUJBQU8sb0JBQW9CLGdCQUFnQixTQUFTO0FBQUEsYUFFakQ7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQTtBQUFBO0FBSVIsaUJBQU8sYUFBYSxNQUFNLFFBQVE7QUFBQTtBQUFBO0FBQUEsSUFHeEMsVUFBVSxTQUFVLE9BQU8sT0FBTyxVQUFVO0FBQzFDLGFBQU8sU0FBUyxLQUFLLFNBQVM7QUFBQTtBQUFBLElBRWhDLEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFVO0FBQzVDLFVBQUksT0FBTyxLQUFLLGlCQUFpQjtBQUVqQyxVQUFJLFFBQVEsUUFBUSxJQUFJO0FBQ3RCLGFBQUssWUFBWSxRQUFRLElBQUksR0FBRyxHQUFHO0FBQUEsYUFDOUI7QUFDTCxhQUFLLFlBQVksT0FBTyxHQUFHLEdBQUc7QUFBQTtBQUdoQyxhQUFPO0FBQUE7QUFBQSxJQUVULG9CQUFvQixDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBRzNDLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLE9BQU8sUUFBTyxVQUFVO0FBQy9DLGNBQVE7QUFBQSxhQUNEO0FBQ0gsaUJBQU8sb0JBQW9CLGdCQUFnQixTQUFTO0FBQUEsYUFFakQ7QUFDSCxpQkFBTyxPQUFNLGNBQWMsUUFBUTtBQUFBLFlBQ2pDLE1BQU07QUFBQTtBQUFBO0FBSVIsaUJBQU8sYUFBYSxNQUFNLFFBQVE7QUFBQTtBQUFBO0FBQUEsSUFHeEMsVUFBVSxTQUFVLE9BQU8sT0FBTyxVQUFVO0FBQzFDLGFBQU8sU0FBUyxLQUFLLFNBQVM7QUFBQTtBQUFBLElBRWhDLEtBQUssU0FBVSxNQUFNLFFBQVEsT0FBTyxVQUFVO0FBQzVDLFVBQUksUUFBUSxTQUFTLEtBQUssUUFBUSxLQUFLO0FBQ3ZDLFdBQUssWUFBWSxPQUFPLEdBQUcsR0FBRztBQUM5QixhQUFPO0FBQUE7QUFBQSxJQUVULG9CQUFvQixDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQUE7QUFBQSxFQUdyRCxHQUFHO0FBQUEsSUFDRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQU8sVUFBVTtBQUMvQyxjQUFRO0FBQUEsYUFDRDtBQUNILGlCQUFPLG9CQUFvQixnQkFBZ0IsUUFBUTtBQUFBLGFBRWhEO0FBQ0gsaUJBQU8sT0FBTSxjQUFjLFFBQVE7QUFBQSxZQUNqQyxNQUFNO0FBQUE7QUFBQTtBQUlSLGlCQUFPLGFBQWEsTUFBTSxRQUFRO0FBQUE7QUFBQTtBQUFBLElBR3hDLFVBQVUsU0FBVSxPQUFPLE9BQU8sVUFBVTtBQUMxQyxhQUFPLFNBQVMsS0FBSyxTQUFTO0FBQUE7QUFBQSxJQUVoQyxLQUFLLFNBQVUsTUFBTSxRQUFRLE9BQU8sVUFBVTtBQUM1QyxXQUFLLGNBQWMsT0FBTyxHQUFHO0FBQzdCLGFBQU87QUFBQTtBQUFBLElBRVQsb0JBQW9CLENBQUMsS0FBSztBQUFBO0FBQUEsRUFHNUIsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFPLFVBQVU7QUFDL0MsY0FBUTtBQUFBLGFBQ0Q7QUFDSCxpQkFBTyxvQkFBb0IsZ0JBQWdCLFFBQVE7QUFBQSxhQUVoRDtBQUNILGlCQUFPLE9BQU0sY0FBYyxRQUFRO0FBQUEsWUFDakMsTUFBTTtBQUFBO0FBQUE7QUFJUixpQkFBTyxhQUFhLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFBQSxJQUd4QyxVQUFVLFNBQVUsT0FBTyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxTQUFTLEtBQUssU0FBUztBQUFBO0FBQUEsSUFFaEMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVU7QUFDNUMsV0FBSyxjQUFjLE9BQU87QUFDMUIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLO0FBQUE7QUFBQSxFQUc1QixHQUFHO0FBQUEsSUFDRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQVEsVUFBVTtBQUNoRCxVQUFJLGdCQUFnQixTQUFVLE9BQU87QUFDbkMsZUFBTyxLQUFLLE1BQU0sUUFBUSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sU0FBUztBQUFBO0FBR3pELGFBQU8sYUFBYSxNQUFNLFFBQVEsUUFBUTtBQUFBO0FBQUEsSUFFNUMsS0FBSyxTQUFVLE1BQU0sUUFBUSxPQUFPLFVBQVU7QUFDNUMsV0FBSyxtQkFBbUI7QUFDeEIsYUFBTztBQUFBO0FBQUEsSUFFVCxvQkFBb0IsQ0FBQyxLQUFLO0FBQUE7QUFBQSxFQUc1QixHQUFHO0FBQUEsSUFDRCxVQUFVO0FBQUEsSUFDVixPQUFPLFNBQVUsUUFBUSxPQUFPLFFBQVEsVUFBVTtBQUNoRCxjQUFRO0FBQUEsYUFDRDtBQUNILGlCQUFPLHFCQUFxQixpQkFBaUIsc0JBQXNCO0FBQUEsYUFFaEU7QUFDSCxpQkFBTyxxQkFBcUIsaUJBQWlCLE9BQU87QUFBQSxhQUVqRDtBQUNILGlCQUFPLHFCQUFxQixpQkFBaUIsc0JBQXNCO0FBQUEsYUFFaEU7QUFDSCxpQkFBTyxxQkFBcUIsaUJBQWlCLHlCQUF5QjtBQUFBLGFBRW5FO0FBQUE7QUFFSCxpQkFBTyxxQkFBcUIsaUJBQWlCLFVBQVU7QUFBQTtBQUFBO0FBQUEsSUFHN0QsS0FBSyxTQUFVLE1BQU0sT0FBTyxPQUFPLFVBQVU7QUFDM0MsVUFBSSxNQUFNLGdCQUFnQjtBQUN4QixlQUFPO0FBQUE7QUFHVCxhQUFPLElBQUksS0FBSyxLQUFLLFlBQVk7QUFBQTtBQUFBLElBRW5DLG9CQUFvQixDQUFDLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHakMsR0FBRztBQUFBLElBQ0QsVUFBVTtBQUFBLElBQ1YsT0FBTyxTQUFVLFFBQVEsT0FBTyxRQUFRLFVBQVU7QUFDaEQsY0FBUTtBQUFBLGFBQ0Q7QUFDSCxpQkFBTyxxQkFBcUIsaUJBQWlCLHNCQUFzQjtBQUFBLGFBRWhFO0FBQ0gsaUJBQU8scUJBQXFCLGlCQUFpQixPQUFPO0FBQUEsYUFFakQ7QUFDSCxpQkFBTyxxQkFBcUIsaUJBQWlCLHNCQUFzQjtBQUFBLGFBRWhFO0FBQ0gsaUJBQU8scUJBQXFCLGlCQUFpQix5QkFBeUI7QUFBQSxhQUVuRTtBQUFBO0FBRUgsaUJBQU8scUJBQXFCLGlCQUFpQixVQUFVO0FBQUE7QUFBQTtBQUFBLElBRzdELEtBQUssU0FBVSxNQUFNLE9BQU8sT0FBTyxVQUFVO0FBQzNDLFVBQUksTUFBTSxnQkFBZ0I7QUFDeEIsZUFBTztBQUFBO0FBR1QsYUFBTyxJQUFJLEtBQUssS0FBSyxZQUFZO0FBQUE7QUFBQSxJQUVuQyxvQkFBb0IsQ0FBQyxLQUFLLEtBQUs7QUFBQTtBQUFBLEVBR2pDLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLFFBQVEsUUFBUSxVQUFVO0FBQ2pELGFBQU8scUJBQXFCO0FBQUE7QUFBQSxJQUU5QixLQUFLLFNBQVUsT0FBTyxRQUFRLE9BQU8sVUFBVTtBQUM3QyxhQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsTUFBTztBQUFBLFFBQzlCLGdCQUFnQjtBQUFBO0FBQUE7QUFBQSxJQUdwQixvQkFBb0I7QUFBQTtBQUFBLEVBR3RCLEdBQUc7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLE9BQU8sU0FBVSxRQUFRLFFBQVEsUUFBUSxVQUFVO0FBQ2pELGFBQU8scUJBQXFCO0FBQUE7QUFBQSxJQUU5QixLQUFLLFNBQVUsT0FBTyxRQUFRLE9BQU8sVUFBVTtBQUM3QyxhQUFPLENBQUMsSUFBSSxLQUFLLFFBQVE7QUFBQSxRQUN2QixnQkFBZ0I7QUFBQTtBQUFBO0FBQUEsSUFHcEIsb0JBQW9CO0FBQUE7QUFBQTtBQUd4QixJQUFPLGtCQUFROzs7QUNwOUNmLElBQUkseUJBQXlCO0FBWTdCLElBQUksMEJBQXlCO0FBRzdCLElBQUksOEJBQTZCO0FBQ2pDLElBQUksdUJBQXNCO0FBQzFCLElBQUkscUJBQW9CO0FBQ3hCLElBQUksc0JBQXNCO0FBQzFCLElBQUksaUNBQWdDO0FBZ1VyQixlQUFlLGlCQUFpQixtQkFBbUIsb0JBQW9CLGNBQWM7QUFDbEcsZUFBYSxHQUFHO0FBQ2hCLE1BQUksYUFBYSxPQUFPO0FBQ3hCLE1BQUksZUFBZSxPQUFPO0FBQzFCLE1BQUksV0FBVSxnQkFBZ0I7QUFDOUIsTUFBSSxVQUFTLFNBQVEsVUFBVTtBQUUvQixNQUFJLENBQUMsUUFBTyxPQUFPO0FBQ2pCLFVBQU0sSUFBSSxXQUFXO0FBQUE7QUFHdkIsTUFBSSw4QkFBOEIsUUFBTyxXQUFXLFFBQU8sUUFBUTtBQUNuRSxNQUFJLCtCQUErQiwrQkFBK0IsT0FBTyxJQUFJLFdBQVU7QUFDdkYsTUFBSSx3QkFBd0IsU0FBUSx5QkFBeUIsT0FBTywrQkFBK0IsV0FBVSxTQUFRO0FBRXJILE1BQUksQ0FBRSwwQkFBeUIsS0FBSyx5QkFBeUIsSUFBSTtBQUMvRCxVQUFNLElBQUksV0FBVztBQUFBO0FBR3ZCLE1BQUkscUJBQXFCLFFBQU8sV0FBVyxRQUFPLFFBQVE7QUFDMUQsTUFBSSxzQkFBc0Isc0JBQXNCLE9BQU8sSUFBSSxXQUFVO0FBQ3JFLE1BQUksZUFBZSxTQUFRLGdCQUFnQixPQUFPLHNCQUFzQixXQUFVLFNBQVE7QUFFMUYsTUFBSSxDQUFFLGlCQUFnQixLQUFLLGdCQUFnQixJQUFJO0FBQzdDLFVBQU0sSUFBSSxXQUFXO0FBQUE7QUFHdkIsTUFBSSxpQkFBaUIsSUFBSTtBQUN2QixRQUFJLGVBQWUsSUFBSTtBQUNyQixhQUFPLE9BQU87QUFBQSxXQUNUO0FBQ0wsYUFBTyxJQUFJLEtBQUs7QUFBQTtBQUFBO0FBSXBCLE1BQUksZUFBZTtBQUFBLElBQ2pCO0FBQUEsSUFDQTtBQUFBLElBQ0EsUUFBUTtBQUFBO0FBR1YsTUFBSSxVQUFVLENBQUM7QUFBQSxJQUNiLFVBQVU7QUFBQSxJQUNWLGFBQWE7QUFBQSxJQUNiLEtBQUs7QUFBQSxJQUNMLE9BQU87QUFBQTtBQUVULE1BQUk7QUFDSixNQUFJLFNBQVMsYUFBYSxNQUFNLDZCQUE0QixJQUFJLFNBQVUsV0FBVztBQUNuRixRQUFJLGtCQUFpQixVQUFVO0FBRS9CLFFBQUksb0JBQW1CLE9BQU8sb0JBQW1CLEtBQUs7QUFDcEQsVUFBSSxnQkFBZ0IsdUJBQWU7QUFDbkMsYUFBTyxjQUFjLFdBQVcsUUFBTyxZQUFZO0FBQUE7QUFHckQsV0FBTztBQUFBLEtBQ04sS0FBSyxJQUFJLE1BQU07QUFDbEIsTUFBSSxhQUFhO0FBRWpCLE9BQUssSUFBSSxHQUFHLElBQUksT0FBTyxRQUFRLEtBQUs7QUFDbEMsUUFBSSxRQUFRLE9BQU87QUFFbkIsUUFBSSxDQUFDLFNBQVEsK0JBQStCLHlCQUF5QixRQUFRO0FBQzNFLDBCQUFvQixPQUFPLGNBQWM7QUFBQTtBQUczQyxRQUFJLENBQUMsU0FBUSxnQ0FBZ0MsMEJBQTBCLFFBQVE7QUFDN0UsMEJBQW9CLE9BQU8sY0FBYztBQUFBO0FBRzNDLFFBQUksaUJBQWlCLE1BQU07QUFDM0IsUUFBSSxVQUFTLGdCQUFRO0FBRXJCLFFBQUksU0FBUTtBQUNWLFVBQUkscUJBQXFCLFFBQU87QUFFaEMsVUFBSSxNQUFNLFFBQVEscUJBQXFCO0FBQ3JDLFlBQUksb0JBQW9CO0FBRXhCLGlCQUFTLEtBQUssR0FBRyxLQUFLLFdBQVcsUUFBUSxNQUFNO0FBQzdDLGNBQUksWUFBWSxXQUFXLElBQUk7QUFFL0IsY0FBSSxtQkFBbUIsUUFBUSxlQUFlLE1BQU0sY0FBYyxnQkFBZ0I7QUFDaEYsZ0NBQW9CLFdBQVc7QUFDL0I7QUFBQTtBQUFBO0FBSUosWUFBSSxtQkFBbUI7QUFDckIsZ0JBQU0sSUFBSSxXQUFXLHNDQUFzQyxPQUFPLGtCQUFrQixXQUFXLFdBQVcsT0FBTyxPQUFPO0FBQUE7QUFBQSxpQkFFakgsUUFBTyx1QkFBdUIsT0FBTyxXQUFXLFFBQVE7QUFDakUsY0FBTSxJQUFJLFdBQVcsc0NBQXNDLE9BQU8sT0FBTztBQUFBO0FBRzNFLGlCQUFXLEtBQUs7QUFBQSxRQUNkLE9BQU87QUFBQSxRQUNQLFdBQVc7QUFBQTtBQUViLFVBQUksY0FBYyxRQUFPLE1BQU0sWUFBWSxPQUFPLFFBQU8sT0FBTztBQUVoRSxVQUFJLENBQUMsYUFBYTtBQUNoQixlQUFPLElBQUksS0FBSztBQUFBO0FBR2xCLGNBQVEsS0FBSztBQUFBLFFBQ1gsVUFBVSxRQUFPO0FBQUEsUUFDakIsYUFBYSxRQUFPLGVBQWU7QUFBQSxRQUNuQyxLQUFLLFFBQU87QUFBQSxRQUNaLFVBQVUsUUFBTztBQUFBLFFBQ2pCLE9BQU8sWUFBWTtBQUFBLFFBQ25CLE9BQU8sUUFBUTtBQUFBO0FBRWpCLG1CQUFhLFlBQVk7QUFBQSxXQUNwQjtBQUNMLFVBQUksZUFBZSxNQUFNLGlDQUFnQztBQUN2RCxjQUFNLElBQUksV0FBVyxtRUFBbUUsaUJBQWlCO0FBQUE7QUFJM0csVUFBSSxVQUFVLE1BQU07QUFDbEIsZ0JBQVE7QUFBQSxpQkFDQyxtQkFBbUIsS0FBSztBQUNqQyxnQkFBUSxvQkFBbUI7QUFBQTtBQUk3QixVQUFJLFdBQVcsUUFBUSxXQUFXLEdBQUc7QUFDbkMscUJBQWEsV0FBVyxNQUFNLE1BQU07QUFBQSxhQUMvQjtBQUNMLGVBQU8sSUFBSSxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBTXRCLE1BQUksV0FBVyxTQUFTLEtBQUssb0JBQW9CLEtBQUssYUFBYTtBQUNqRSxXQUFPLElBQUksS0FBSztBQUFBO0FBR2xCLE1BQUksd0JBQXdCLFFBQVEsSUFBSSxTQUFVLFNBQVE7QUFDeEQsV0FBTyxRQUFPO0FBQUEsS0FDYixLQUFLLFNBQVUsR0FBRyxHQUFHO0FBQ3RCLFdBQU8sSUFBSTtBQUFBLEtBQ1YsT0FBTyxTQUFVLFVBQVUsT0FBTyxPQUFPO0FBQzFDLFdBQU8sTUFBTSxRQUFRLGNBQWM7QUFBQSxLQUNsQyxJQUFJLFNBQVUsVUFBVTtBQUN6QixXQUFPLFFBQVEsT0FBTyxTQUFVLFNBQVE7QUFDdEMsYUFBTyxRQUFPLGFBQWE7QUFBQSxPQUMxQixLQUFLLFNBQVUsR0FBRyxHQUFHO0FBQ3RCLGFBQU8sRUFBRSxjQUFjLEVBQUU7QUFBQTtBQUFBLEtBRTFCLElBQUksU0FBVSxhQUFhO0FBQzVCLFdBQU8sWUFBWTtBQUFBO0FBRXJCLE1BQUksT0FBTyxPQUFPO0FBRWxCLE1BQUksTUFBTSxPQUFPO0FBQ2YsV0FBTyxJQUFJLEtBQUs7QUFBQTtBQU1sQixNQUFJLFVBQVUsZ0JBQWdCLE1BQU0sZ0NBQWdDO0FBQ3BFLE1BQUksUUFBUTtBQUVaLE9BQUssSUFBSSxHQUFHLElBQUksc0JBQXNCLFFBQVEsS0FBSztBQUNqRCxRQUFJLFNBQVMsc0JBQXNCO0FBRW5DLFFBQUksT0FBTyxZQUFZLENBQUMsT0FBTyxTQUFTLFNBQVMsT0FBTyxPQUFPLGVBQWU7QUFDNUUsYUFBTyxJQUFJLEtBQUs7QUFBQTtBQUdsQixRQUFJLFNBQVMsT0FBTyxJQUFJLFNBQVMsT0FBTyxPQUFPLE9BQU87QUFFdEQsUUFBSSxPQUFPLElBQUk7QUFDYixnQkFBVSxPQUFPO0FBQ2pCLGFBQU8sT0FBTyxPQUFPO0FBQUEsV0FDaEI7QUFDTCxnQkFBVTtBQUFBO0FBQUE7QUFJZCxTQUFPO0FBQUE7QUFHVCw4QkFBOEIsTUFBTSxPQUFPO0FBQ3pDLE1BQUksTUFBTSxnQkFBZ0I7QUFDeEIsV0FBTztBQUFBO0FBR1QsTUFBSSxnQkFBZ0IsSUFBSSxLQUFLO0FBQzdCLGdCQUFjLFlBQVksS0FBSyxrQkFBa0IsS0FBSyxlQUFlLEtBQUs7QUFDMUUsZ0JBQWMsU0FBUyxLQUFLLGVBQWUsS0FBSyxpQkFBaUIsS0FBSyxpQkFBaUIsS0FBSztBQUM1RixTQUFPO0FBQUE7QUFHVCw2QkFBNEIsT0FBTztBQUNqQyxTQUFPLE1BQU0sTUFBTSxzQkFBcUIsR0FBRyxRQUFRLG9CQUFtQjtBQUFBOzs7QXpHM2hCakUseUJBQW1CO0FBQUEsRUFFeEIsWUFDbUIsVUFDakI7QUFEaUI7QUFFakIsWUFBUSxJQUFJO0FBQUE7QUFBQSxFQUdkLFdBQ0UsUUFDQSxRQUNrQjtBQUNsQixZQUFRLElBQUksYUFBYSxLQUFLLFFBQVEsSUFBSTtBQUUxQyxVQUFNLE1BQU0sS0FBSyxZQUFZLFFBQVEsUUFBUSxJQUFJLEVBQUUsYUFBYTtBQUNoRSxZQUFRLElBQUk7QUFFWixXQUFPLDhCQUFRO0FBQUEsTUFDYixLQUFLLEdBQUcsS0FBSyxRQUFRLElBQUk7QUFBQSxNQUN6QixRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsUUFDUCxnQkFBZ0I7QUFBQSxRQUNoQixjQUFjO0FBQUE7QUFBQSxNQUVoQixNQUFNO0FBQUEsT0FFTCxLQUFLLFNBQU87QUFDWCxjQUFRLElBQUk7QUFDWixhQUFPLEtBQUssaUJBQWlCO0FBQUE7QUFBQTtBQUFBLEVBSTNCLFlBQVksV0FBbUIsS0FBNEI7QUFDakUsVUFBTSxNQUFNLCtCQUFPLEVBQUUsU0FBUyxTQUMzQixJQUFJLGNBQ0osSUFBSSxjQUFjLElBQUksUUFBUSxLQUM5QixJQUFJO0FBQ1AsUUFBSSxRQUFRLFFBQU0sS0FBSyxZQUFZLElBQUk7QUFDdkMsV0FBTztBQUFBO0FBQUEsRUFHRCxZQUFZLEtBQWMsS0FBdUI7QUFDdkQsVUFBTSxRQUFRLElBQUksSUFBSTtBQUN0QixTQUFLLFlBQVksS0FBSztBQUFBO0FBQUEsRUFHaEIsWUFBWSxNQUFlLE9BQXlCO0FBQzFELFVBQU0sUUFBUSxNQUFNLElBQUk7QUFDeEIsUUFBSSxzQkFBYyxPQUFPO0FBQ3ZCLFlBQU0sSUFBSSxNQUFNLElBQUksS0FBSztBQUFBLGVBQ2hCLGlCQUFTLE9BQU87QUFDekIsWUFBTSxJQUFJLFVBQVUsSUFBSSxLQUFLO0FBQUEsZUFDcEIsVUFBVSxPQUFPO0FBQzFCLFlBQU0sSUFBSSxXQUFXLElBQUksT0FBTyxNQUFNO0FBQUEsZUFDN0IsZUFBTyxPQUFPO0FBQ3ZCLFlBQU0sSUFBSSxvQkFBb0IsSUFBSSxPQUFPLE1BQU07QUFBQSxlQUN0QyxnQkFBUSxPQUFPO0FBQ3hCLFlBQU0sUUFBUSxNQUNYLElBQUksU0FDSixJQUFJO0FBQ1AsV0FBSyxRQUFRLFFBQU0sS0FBSyxZQUFZLElBQUk7QUFBQSxlQUMvQixpQkFBUyxPQUFPO0FBQ3pCLFlBQU0sU0FBUyxNQUFNLElBQUk7QUFDekIsaUJBQVcsQ0FBRSxNQUFNLFdBQVUsT0FBTyxRQUFRLE9BQU87QUFDakQsY0FBTSxTQUFTLE9BQ1osSUFBSSxVQUNKLElBQUksUUFBUSxJQUFJLE1BQ2hCO0FBQ0gsYUFBSyxZQUFZLFFBQU87QUFBQTtBQUFBLFdBRXJCO0FBQ0wsWUFBTSxJQUFJLFVBQVUsSUFBSSxLQUFLO0FBQUE7QUFBQTtBQUFBLEVBSXpCLGlCQUFpQixVQUEyQjtBQUNsRCxVQUFNLE1BQU0sK0JBQU8sVUFBVSxJQUFJLEVBQUUsUUFBUTtBQUMzQyxRQUFJLFlBQUksS0FBSywwQkFBMEI7QUFDckMsYUFBTyxLQUFLLFVBQVUsWUFBSSxLQUFLO0FBQUEsZUFDdEIsWUFBSSxLQUFLLHlCQUF5QjtBQUMzQyxhQUFPLEtBQUssVUFBVSxZQUFJLEtBQUs7QUFBQTtBQUVqQyxVQUFNLElBQUksTUFBTTtBQUFBO0FBQUEsRUFHVixVQUFVLE9BQXlCO0FBQ3pDLFFBQUksWUFBSSxPQUFPLFNBQVMsWUFBSSxPQUFPLFFBQVE7QUFDekMsYUFBTyxZQUFJLE9BQU8sU0FBUyxZQUFJLE9BQU87QUFBQSxlQUM3QixZQUFJLE9BQU8sV0FBVztBQUMvQixhQUFPLFlBQUksT0FBTztBQUFBLGVBQ1QsWUFBSSxPQUFPLFlBQVk7QUFDaEMsYUFBTyxZQUFJLE9BQU8sZUFBZTtBQUFBLGVBQ3hCLFlBQUksT0FBTyxxQkFBcUI7QUFDekMsYUFBTyxNQUFNLFlBQUksT0FBTyxxQkFBcUIscUJBQXFCLElBQUk7QUFBQSxlQUM3RCxZQUFJLE9BQU8sVUFBVTtBQUM5QixZQUFNLFFBQWU7QUFDckIsWUFBTSxPQUFPLFlBQUksT0FBTztBQUN4QixXQUFLLFFBQVEsQ0FBQyxPQUFnQjtBQUM1QixjQUFNLEtBQUssS0FBSyxVQUFVO0FBQUE7QUFFNUIsYUFBTztBQUFBLGVBQ0UsWUFBSSxPQUFPLFdBQVc7QUFDL0IsWUFBTSxTQUFjO0FBQ3BCLFlBQU0sVUFBVSxZQUFJLE9BQU87QUFDM0IsVUFBSSxnQkFBUSxVQUFVO0FBQ3BCLGdCQUFRLFFBQVEsQ0FBQyxXQUFvQjtBQUNuQyxpQkFBTyxZQUFJLFFBQVEsV0FBVyxLQUFLLFVBQVUsWUFBSSxRQUFRO0FBQUE7QUFBQSxhQUV0RDtBQUNMLGVBQU8sWUFBSSxTQUFTLFdBQVcsS0FBSyxVQUFVLFlBQUksU0FBUztBQUFBO0FBRTdELGFBQU87QUFBQSxXQUNGO0FBQ0wsYUFBTyxZQUFJLE9BQU87QUFBQTtBQUFBO0FBQUE7OztBMEczSHhCLHVCQUEwQzs7O0FDQTFDLHVCQUFvQztBQU03QixpQ0FBMkIsdUJBQU07QUFBQSxFQUV0QyxZQUNFLEtBQ2lCLFFBQ0EsVUFDakI7QUFDQSxVQUFNO0FBSFc7QUFDQTtBQUFBO0FBQUEsRUFLbkIsU0FBUztBQUNQLFVBQU0sRUFBRSxjQUFjO0FBRXRCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTTtBQUVqQyxRQUFJLFdBQVc7QUFDZixRQUFJLHlCQUFRLFdBQ1QsUUFBUSxhQUNSLFFBQVEsaUJBQWlCLEtBQUssT0FBTyxTQUFTLFlBQzlDLFFBQVEsVUFBSztBQXpCcEI7QUF5QnVCLGtCQUNkLFNBQVMsV0FBSyxPQUFPLFNBQVMsYUFBckIsWUFBaUMsSUFDMUMsU0FBUyxDQUFPLFVBQVU7QUFDekIsWUFBSSxLQUFLLE9BQU8sU0FBUyxjQUFjO0FBQ3JDLGVBQUssT0FBTyxTQUFTLFdBQVc7QUFDaEMsZ0JBQU0sS0FBSyxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBRzFCLFFBQUkseUJBQVEsV0FDVCxRQUFRLFlBQ1IsUUFBUSxVQUFRLEtBQ2QsU0FBUyxDQUFPLFVBQVU7QUFDekIsaUJBQVc7QUFBQTtBQUVqQixRQUFJLHlCQUFRLFdBQ1QsVUFBVSxZQUFVLE9BQ2xCLGNBQWMsV0FDZCxTQUFTLFdBQ1QsUUFBUSxNQUFNO0FBQ2IsV0FBSyxTQUFTLEtBQUssT0FBTyxTQUFTLFVBQVUsVUFBVTtBQUFBO0FBQUE7QUFBQSxFQUsvRCxVQUFVO0FBQ1IsVUFBTSxFQUFFLGNBQWM7QUFDdEIsY0FBVTtBQUFBO0FBQUE7OztBRDlDUCxvQ0FBa0U7QUFBQSxFQUU3RCxZQUNXLEtBQ0EsUUFDbkI7QUFGbUI7QUFDQTtBQUFBO0FBQUEsRUFZckIsVUFBMEM7QUFDeEMsV0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFDdEMsWUFBTSxFQUFFLGNBQWMsS0FBSztBQUMzQixZQUFNLGFBQWEsVUFBVSxvQkFBb0I7QUFDakQsVUFBSyxZQUFhO0FBQ2hCLFlBQUksYUFDRixLQUFLLEtBQ0wsS0FBSyxRQUNMLENBQUMsVUFBVSxVQUFVLFVBQVU7QUFDN0IsZUFBSyxJQUFJLE1BQU0sS0FBSyxXQUFXLE1BQzVCLEtBQUssYUFBVztBQUNmLGtCQUFNLFFBQVEsV0FBVyxLQUFLO0FBQzlCLG1CQUFPLEtBQUssUUFBUSxPQUFPLFNBQVM7QUFBQSxjQUNsQztBQUFBLGNBQ0E7QUFBQTtBQUFBLGFBR0gsS0FBSyxZQUFVO0FBQ2QsZ0JBQUksT0FBTyxTQUFTLDBCQUEwQixPQUFPO0FBQ25ELG9CQUFNLE9BQU8sT0FBTztBQUNwQixrQkFBSSx3QkFBTztBQUFBLEVBQTJCLEtBQUssU0FBUyxLQUFLO0FBQUEsbUJBQ3BEO0FBQ0wsa0JBQUksd0JBQU87QUFDWCxvQkFBTTtBQUFBO0FBRVIsbUJBQU87QUFBQSxhQUVSLE1BQU0sV0FBUztBQUNkLG9CQUFRLElBQUksK0NBQWlEO0FBQzdELGdCQUFJLHdCQUFPLE1BQU07QUFBQTtBQUFBLFdBR3ZCO0FBQUEsYUFDRztBQUNMLGNBQU0sUUFBUTtBQUNkLGdCQUFRLEtBQUs7QUFDYixlQUFPLElBQUksTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUVsRGxCLG1DQUE2Qix3QkFBd0I7QUFBQSxFQUkxRCxZQUNXLEtBQ0EsUUFDVDtBQUNBLFVBQU0sS0FBSztBQUhGO0FBQ0E7QUFHVCxTQUFLLFNBQVMsSUFBSSxhQUFhO0FBQUEsTUFDN0IsS0FBSyxJQUFJLElBQUksT0FBTyxTQUFTO0FBQUE7QUFBQTtBQUFBLEVBSWpDLFFBQVEsT0FBZSxTQUFpQixJQUE0RTtBQXJCdEg7QUFzQkksV0FBTyxLQUFLLE9BQU8sV0FBVyxjQUFjO0FBQUEsTUFDMUM7QUFBQSxNQUNBLEdBQUc7QUFBQSxNQUNILEdBQUc7QUFBQSxNQUNIO0FBQUEsUUFDRSxXQUFXO0FBQUEsUUFDWCxhQUFhO0FBQUEsUUFDYixZQUFZLHdCQUFTO0FBQUEsUUFDckIsY0FBYyxhQUFPLE1BQU0sYUFBYixZQUF5QjtBQUFBO0FBQUEsT0FHeEMsS0FBSyxDQUFDLGFBQWtCO0FBQ3ZCLFVBQUksU0FBUyxhQUFhLFNBQVMsYUFBYTtBQUU5QyxlQUFPO0FBQUEsVUFDTCxNQUFNLDBCQUEwQjtBQUFBLFVBQ2hDLE1BQU07QUFBQSxZQUNKLE1BQU0sU0FBUztBQUFBLFlBQ2YsU0FBUyxTQUFTO0FBQUE7QUFBQTtBQUFBLGFBR2pCO0FBQ0wsZUFBTztBQUFBLFVBQ0wsTUFBTSwwQkFBMEI7QUFBQSxVQUNoQyxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDekNYLDJDQUFxQyx3QkFBd0I7QUFBQSxFQUVsRSxZQUNXLEtBQ0EsUUFDVDtBQUNBLFVBQU0sS0FBSztBQUhGO0FBQ0E7QUFBQTtBQUFBLEVBS1gsUUFBUSxPQUFlLFNBQWlCLElBQTRFO0FBQ2xILFdBQU8sUUFBUSxRQUFRO0FBQUE7QUFBQTs7O0FDVHBCLElBQUs7QUFBTCxVQUFLLDRCQUFMO0FBQ0w7QUFDQTtBQUFBLEdBRlU7QUFjTCwrQkFDTCxLQUNBLFFBQ0EsTUFDQSxVQUd3QjtBQUN4QixVQUFRO0FBQUEsU0FDRCxRQUFRO0FBQ1gsYUFBTyxJQUFJLGVBQWUsS0FBSztBQUFBLFNBQzVCLFFBQVE7QUFDWCxjQUFRLHFDQUFTO0FBQUEsYUFDVixjQUFjO0FBQ2pCLGlCQUFPLElBQUksdUJBQXVCLEtBQUs7QUFBQTtBQUUzQyxhQUFPO0FBQUE7QUFFUCxhQUFPO0FBQUE7QUFBQTs7O0FoSGpDTixJQUFNLDJCQUEyQjtBQUVqQyx5Q0FBbUMsMEJBQVM7QUFBQSxFQUVqRCxZQUNFLE1BQ2lCLFFBQ2pCO0FBQ0EsVUFBTTtBQUZXO0FBQUE7QUFBQSxFQUtuQixpQkFBeUI7QUFDdkIsV0FBTztBQUFBO0FBQUEsRUFHVCxjQUFzQjtBQUNwQixXQUFPO0FBQUE7QUFBQSxFQUdULFVBQWtCO0FBQ2hCLFdBQU87QUFBQTtBQUFBLEVBR1QsT0FBYTtBQUNYLFVBQU07QUFDTixTQUFLO0FBQUE7QUFBQSxFQUdDLE9BQWE7QUFDbkIsVUFBTSwwQkFBMEIsS0FBSyxVQUFVLFNBQVM7QUFDeEQsUUFBSSxpQ0FBZ0IseUJBQ2pCLGNBQWMsV0FDZCxTQUFTLFdBQ1QsUUFBUSxNQUFNO0FBQ2IsWUFBTSxTQUFTLHNCQUFzQixLQUFLLEtBQUssS0FBSyxRQUFRLFFBQVE7QUFDcEUsVUFBSSxRQUFRO0FBQ1YsZUFBTyxVQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBSG5DM0Isb0NBQTZDLHdCQUFPO0FBQUEsRUFJN0MsU0FBUztBQUFBO0FBQ1osY0FBUSxJQUFJO0FBRWQsWUFBTSxLQUFLO0FBRVQsV0FBSyxhQUNILDBCQUNBLFVBQVEsSUFBSSxxQkFBcUIsTUFBTTtBQUd6QztBQUVBLFdBQUs7QUFFTCxXQUFLLFdBQVc7QUFBQSxRQUNkLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLGdCQUFnQixDQUFDLFFBQWdCLFNBQXVCO0FBQ3RELGdCQUFNLFNBQVMsc0JBQXNCLEtBQUssS0FBSyxNQUFNLFFBQVE7QUFDN0QsY0FBSSxRQUFRO0FBQ1YsbUJBQU8sVUFBVTtBQUFBO0FBQUE7QUFBQTtBQUt6QixXQUFLLGNBQWMsSUFBSSxvQkFBb0IsS0FBSyxLQUFLO0FBQUE7QUFBQTtBQUFBLEVBR3RELFdBQVc7QUFBQTtBQUFBLEVBR0wsZUFBZTtBQUFBO0FBQ3BCLFdBQUssV0FBVyxPQUFPLE9BQU8sSUFBSSxrQkFBa0IsTUFBTSxLQUFLO0FBQUE7QUFBQTtBQUFBLEVBRzFELGVBQWU7QUFBQTtBQUNwQixZQUFNLEtBQUssU0FBUyxLQUFLO0FBQUE7QUFBQTtBQUFBLEVBR3pCLG1CQUF5QjtBQUN2QixVQUFNLGtCQUFrQjtBQUN4QixRQUFJLEtBQUssU0FBUyxnQkFBZ0I7QUFDaEMsV0FBSyxjQUFjLFdBQVcsaUJBQWlCLE1BQU07QUFDbkQsYUFBSztBQUFBO0FBQUEsV0FFRjtBQUNMLFlBQU0sYUFBa0IsS0FBSyxJQUFJLFVBQVU7QUFDM0MsWUFBTSxXQUFXLFdBQVcsZ0JBQWdCO0FBQzVDLGVBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEtBQUs7QUFDeEMsWUFBSSxTQUFTLEtBQUssR0FBRyxhQUFhLGtCQUFrQixpQkFBaUI7QUFDbkUsVUFBQyxTQUFTLEtBQUssR0FBbUIsTUFBTSxVQUFVO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU01Qyw2QkFBNEM7QUFBQTtBQUN4RCxZQUFNLFdBQVcsS0FBSyxJQUFJLFVBQVUsZ0JBQWdCO0FBQ3BELFVBQUksU0FBUyxRQUFRO0FBQ25CLGFBQUssSUFBSSxVQUFVLFdBQVcsU0FBUztBQUN2QztBQUFBO0FBR0YsWUFBTSxLQUFLLElBQUksVUFBVSxhQUFhLE9BQU8sYUFBYTtBQUFBLFFBQ3hELE1BQU07QUFBQSxRQUNOLFFBQVE7QUFBQTtBQUdWLFdBQUssSUFBSSxVQUFVLFdBQVcsS0FBSyxJQUFJLFVBQVUsZ0JBQWdCLDBCQUEwQjtBQUFBO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
