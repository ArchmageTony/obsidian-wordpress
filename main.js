/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a3, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a3, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a3, prop, b2[prop]);
    }
  return a3;
};
var __spreadProps = (a3, b2) => __defProps(a3, __getOwnPropDescs(b2));
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e2) {
        reject(e2);
      }
    };
    var step = (x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/xmlbuilder2/lib/xmlbuilder2.min.js
var require_xmlbuilder2_min = __commonJS({
  "node_modules/xmlbuilder2/lib/xmlbuilder2.min.js"(exports2, module2) {
    !function(e2, t2) {
      typeof exports2 == "object" && typeof module2 == "object" ? module2.exports = t2() : typeof define == "function" && define.amd ? define([], t2) : typeof exports2 == "object" ? exports2.xmlbuilder2 = t2() : e2.xmlbuilder2 = t2();
    }(exports2, function() {
      return function(e2) {
        var t2 = {};
        function r(n) {
          if (t2[n])
            return t2[n].exports;
          var i2 = t2[n] = { i: n, l: false, exports: {} };
          return e2[n].call(i2.exports, i2, i2.exports, r), i2.l = true, i2.exports;
        }
        return r.m = e2, r.c = t2, r.d = function(e3, t3, n) {
          r.o(e3, t3) || Object.defineProperty(e3, t3, { enumerable: true, get: n });
        }, r.r = function(e3) {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
        }, r.t = function(e3, t3) {
          if (1 & t3 && (e3 = r(e3)), 8 & t3)
            return e3;
          if (4 & t3 && typeof e3 == "object" && e3 && e3.__esModule)
            return e3;
          var n = /* @__PURE__ */ Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e3 }), 2 & t3 && typeof e3 != "string")
            for (var i2 in e3)
              r.d(n, i2, function(t4) {
                return e3[t4];
              }.bind(null, i2));
          return n;
        }, r.n = function(e3) {
          var t3 = e3 && e3.__esModule ? function() {
            return e3.default;
          } : function() {
            return e3;
          };
          return r.d(t3, "a", t3), t3;
        }, r.o = function(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }, r.p = "", r(r.s = 184);
      }([function(e2, t2, r) {
        "use strict";
        function n(e3) {
          for (var r2 in e3)
            t2.hasOwnProperty(r2) || (t2[r2] = e3[r2]);
        }
        Object.defineProperty(t2, "__esModule", { value: true }), n(r(240)), n(r(251)), n(r(175)), n(r(107)), n(r(29)), n(r(73)), n(r(106)), n(r(30)), n(r(252)), n(r(52)), n(r(97)), n(r(253)), n(r(37)), n(r(51)), n(r(173)), n(r(176)), n(r(172)), n(r(108)), n(r(254)), n(r(255)), n(r(256)), n(r(72)), n(r(177)), n(r(105)), n(r(17)), n(r(257)), n(r(12)), n(r(174));
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(212);
        t2.FixedSizeSet = i2.FixedSizeSet;
        var o = r(213);
        t2.ObjectCache = o.ObjectCache;
        var a3 = r(214);
        t2.CompareCache = a3.CompareCache;
        var s3 = r(215);
        t2.Lazy = s3.Lazy;
        var u2 = r(216);
        function l(e3, t3, r2) {
          if (m3(e3))
            e3.forEach(function(e4, n3) {
              return t3.call(r2, n3, e4);
            });
          else
            for (var n2 in e3)
              e3.hasOwnProperty(n2) && t3.call(r2, n2, e3[n2]);
        }
        function c2(e3) {
          var t3, r2;
          if (h3(e3))
            return e3;
          if (f(e3)) {
            var i3 = [];
            try {
              for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                i3.push(c2(s4));
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return i3;
          }
          if (p(e3)) {
            i3 = {};
            for (var u3 in e3)
              if (e3.hasOwnProperty(u3)) {
                var l2 = e3[u3];
                i3[u3] = c2(l2);
              }
            return i3;
          }
          return e3;
        }
        function h3(e3) {
          return !!e3 && Object.prototype.toString.call(e3) === "[object Function]";
        }
        function p(e3) {
          var t3 = typeof e3;
          return !!e3 && (t3 === "function" || t3 === "object");
        }
        function f(e3) {
          return Array.isArray(e3);
        }
        function d3(e3) {
          return e3 instanceof Set;
        }
        function m3(e3) {
          return e3 instanceof Map;
        }
        function y3(e3) {
          if (p(e3)) {
            var t3 = Object.getPrototypeOf(e3), r2 = t3.constructor;
            return t3 && r2 && typeof r2 == "function" && r2 instanceof r2 && Function.prototype.toString.call(r2) === Function.prototype.toString.call(Object);
          }
          return false;
        }
        t2.StringWalker = u2.StringWalker, t2.applyMixin = function(e3, t3) {
          for (var r2 = [], n2 = 2; n2 < arguments.length; n2++)
            r2[n2 - 2] = arguments[n2];
          Object.getOwnPropertyNames(t3.prototype).forEach(function(n3) {
            if (n3 !== "constructor") {
              if (r2.indexOf(n3) !== -1) {
                var i3 = Object.getOwnPropertyDescriptor(e3.prototype, n3);
                i3 && Object.defineProperty(e3.prototype, "_" + n3, i3);
              }
              var o2 = Object.getOwnPropertyDescriptor(t3.prototype, n3);
              o2 && Object.defineProperty(e3.prototype, n3, o2);
            }
          });
        }, t2.applyDefaults = function e3(t3, r2, n2) {
          n2 === void 0 && (n2 = false);
          var i3 = c2(t3 || {});
          return l(r2, function(t4, r3) {
            y3(r3) ? i3[t4] = e3(i3[t4], r3, n2) : (n2 || i3[t4] === void 0) && (i3[t4] = r3);
          }), i3;
        }, t2.forEachArray = function(e3, t3, r2) {
          e3.forEach(t3, r2);
        }, t2.forEachObject = l, t2.arrayLength = function(e3) {
          return d3(e3) ? e3.size : e3.length;
        }, t2.objectLength = function(e3) {
          return m3(e3) ? e3.size : Object.keys(e3).length;
        }, t2.getObjectValue = function(e3, t3) {
          return m3(e3) ? e3.get(t3) : e3[t3];
        }, t2.removeObjectValue = function(e3, t3) {
          m3(e3) ? e3.delete(t3) : delete e3[t3];
        }, t2.clone = c2, t2.isBoolean = function(e3) {
          return typeof e3 == "boolean";
        }, t2.isNumber = function(e3) {
          return typeof e3 == "number";
        }, t2.isString = function(e3) {
          return typeof e3 == "string";
        }, t2.isFunction = h3, t2.isObject = p, t2.isArray = f, t2.isSet = d3, t2.isMap = m3, t2.isEmpty = function(e3) {
          if (f(e3))
            return !e3.length;
          if (d3(e3))
            return !e3.size;
          if (m3(e3))
            return !e3.size;
          if (p(e3)) {
            for (var t3 in e3)
              if (e3.hasOwnProperty(t3))
                return false;
            return true;
          }
          return false;
        }, t2.isPlainObject = y3, t2.isIterable = function(e3) {
          return e3 && typeof e3[Symbol.iterator] == "function";
        }, t2.getValue = function(e3) {
          return h3(e3.valueOf) ? e3.valueOf() : e3;
        }, t2.utf8Encode = function(e3) {
          for (var t3 = new Uint8Array(4 * e3.length), r2 = 0, n2 = 0; n2 < e3.length; n2++) {
            var i3 = e3.charCodeAt(n2);
            if (i3 < 128)
              t3[r2++] = i3;
            else {
              if (i3 < 2048)
                t3[r2++] = i3 >> 6 | 192;
              else {
                if (i3 > 55295 && i3 < 56320) {
                  if (++n2 >= e3.length)
                    throw new Error("Incomplete surrogate pair.");
                  var o2 = e3.charCodeAt(n2);
                  if (o2 < 56320 || o2 > 57343)
                    throw new Error("Invalid surrogate character.");
                  i3 = 65536 + ((1023 & i3) << 10) + (1023 & o2), t3[r2++] = i3 >> 18 | 240, t3[r2++] = i3 >> 12 & 63 | 128;
                } else
                  t3[r2++] = i3 >> 12 | 224;
                t3[r2++] = i3 >> 6 & 63 | 128;
              }
              t3[r2++] = 63 & i3 | 128;
            }
          }
          return t3.subarray(0, r2);
        }, t2.utf8Decode = function(e3) {
          for (var t3 = "", r2 = 0; r2 < e3.length; ) {
            var n2 = e3[r2++];
            if (n2 > 127)
              if (n2 > 191 && n2 < 224) {
                if (r2 >= e3.length)
                  throw new Error("Incomplete 2-byte sequence.");
                n2 = (31 & n2) << 6 | 63 & e3[r2++];
              } else if (n2 > 223 && n2 < 240) {
                if (r2 + 1 >= e3.length)
                  throw new Error("Incomplete 3-byte sequence.");
                n2 = (15 & n2) << 12 | (63 & e3[r2++]) << 6 | 63 & e3[r2++];
              } else {
                if (!(n2 > 239 && n2 < 248))
                  throw new Error("Unknown multi-byte start.");
                if (r2 + 2 >= e3.length)
                  throw new Error("Incomplete 4-byte sequence.");
                n2 = (7 & n2) << 18 | (63 & e3[r2++]) << 12 | (63 & e3[r2++]) << 6 | 63 & e3[r2++];
              }
            if (n2 <= 65535)
              t3 += String.fromCharCode(n2);
            else {
              if (!(n2 <= 1114111))
                throw new Error("Code point exceeds UTF-16 limit.");
              n2 -= 65536, t3 += String.fromCharCode(n2 >> 10 | 55296), t3 += String.fromCharCode(1023 & n2 | 56320);
            }
          }
          return t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), function(e3) {
          e3[e3.Before = 0] = "Before", e3[e3.Equal = 1] = "Equal", e3[e3.After = 2] = "After";
        }(t2.BoundaryPosition || (t2.BoundaryPosition = {})), function(e3) {
          e3[e3.None = 0] = "None", e3[e3.Capturing = 1] = "Capturing", e3[e3.AtTarget = 2] = "AtTarget", e3[e3.Bubbling = 3] = "Bubbling";
        }(t2.EventPhase || (t2.EventPhase = {})), function(e3) {
          e3[e3.Element = 1] = "Element", e3[e3.Attribute = 2] = "Attribute", e3[e3.Text = 3] = "Text", e3[e3.CData = 4] = "CData", e3[e3.EntityReference = 5] = "EntityReference", e3[e3.Entity = 6] = "Entity", e3[e3.ProcessingInstruction = 7] = "ProcessingInstruction", e3[e3.Comment = 8] = "Comment", e3[e3.Document = 9] = "Document", e3[e3.DocumentType = 10] = "DocumentType", e3[e3.DocumentFragment = 11] = "DocumentFragment", e3[e3.Notation = 12] = "Notation";
        }(t2.NodeType || (t2.NodeType = {})), function(e3) {
          e3[e3.Disconnected = 1] = "Disconnected", e3[e3.Preceding = 2] = "Preceding", e3[e3.Following = 4] = "Following", e3[e3.Contains = 8] = "Contains", e3[e3.ContainedBy = 16] = "ContainedBy", e3[e3.ImplementationSpecific = 32] = "ImplementationSpecific";
        }(t2.Position || (t2.Position = {})), function(e3) {
          e3[e3.Accept = 1] = "Accept", e3[e3.Reject = 2] = "Reject", e3[e3.Skip = 3] = "Skip";
        }(t2.FilterResult || (t2.FilterResult = {})), function(e3) {
          e3[e3.All = 4294967295] = "All", e3[e3.Element = 1] = "Element", e3[e3.Attribute = 2] = "Attribute", e3[e3.Text = 4] = "Text", e3[e3.CDataSection = 8] = "CDataSection", e3[e3.EntityReference = 16] = "EntityReference", e3[e3.Entity = 32] = "Entity", e3[e3.ProcessingInstruction = 64] = "ProcessingInstruction", e3[e3.Comment = 128] = "Comment", e3[e3.Document = 256] = "Document", e3[e3.DocumentType = 512] = "DocumentType", e3[e3.DocumentFragment = 1024] = "DocumentFragment", e3[e3.Notation = 2048] = "Notation";
        }(t2.WhatToShow || (t2.WhatToShow = {})), function(e3) {
          e3[e3.StartToStart = 0] = "StartToStart", e3[e3.StartToEnd = 1] = "StartToEnd", e3[e3.EndToEnd = 2] = "EndToEnd", e3[e3.EndToStart = 3] = "EndToStart";
        }(t2.HowToCompare || (t2.HowToCompare = {}));
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(241);
        t2.Cast = n.Cast;
        var i2 = r(150);
        t2.Guard = i2.Guard;
        var o = r(242);
        t2.EmptySet = o.EmptySet;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(55).f, o = r(21), a3 = r(25), s3 = r(80), u2 = r(119), l = r(123);
        e2.exports = function(e3, t3) {
          var r2, c2, h3, p, f, d3 = e3.target, m3 = e3.global, y3 = e3.stat;
          if (r2 = m3 ? n : y3 ? n[d3] || s3(d3, {}) : (n[d3] || {}).prototype)
            for (c2 in t3) {
              if (p = t3[c2], h3 = e3.noTargetGet ? (f = i2(r2, c2)) && f.value : r2[c2], !l(m3 ? c2 : d3 + (y3 ? "." : "#") + c2, e3.forced) && h3 !== void 0) {
                if (typeof p == typeof h3)
                  continue;
                u2(p, h3);
              }
              (e3.sham || h3 && h3.sham) && o(p, "sham", true), a3(r2, c2, p, e3);
            }
        };
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(81), o = r(14), a3 = r(58), s3 = r(86), u2 = r(124), l = i2("wks"), c2 = n.Symbol, h3 = u2 ? c2 : c2 && c2.withoutSetter || a3;
        e2.exports = function(e3) {
          return o(l, e3) || (s3 && o(c2, e3) ? l[e3] = c2[e3] : l[e3] = h3("Symbol." + e3)), l[e3];
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(1), i2 = r(29), o = function() {
          function e3() {
            this._features = { mutationObservers: true, customElements: true, slots: true, steps: true }, this._window = null, this._compareCache = new n.CompareCache(), this._rangeList = new n.FixedSizeSet();
          }
          return e3.prototype.setFeatures = function(e4) {
            if (e4 === void 0 && (e4 = true), n.isObject(e4))
              for (var t3 in e4)
                this._features[t3] = e4[t3] || false;
            else
              for (var t3 in this._features)
                this._features[t3] = e4;
          }, Object.defineProperty(e3.prototype, "features", { get: function() {
            return this._features;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "window", { get: function() {
            return this._window === null && (this._window = i2.create_window()), this._window;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "compareCache", { get: function() {
            return this._compareCache;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "rangeList", { get: function() {
            return this._rangeList;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3, "instance", { get: function() {
            return e3._instance || (e3._instance = new e3()), e3._instance;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.dom = o.instance;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__importStar || function(e3) {
          if (e3 && e3.__esModule)
            return e3;
          var t3 = {};
          if (e3 != null)
            for (var r2 in e3)
              Object.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          return t3.default = e3, t3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = n(r(228));
        t2.base64 = i2;
        var o = n(r(146));
        t2.byte = o;
        var a3 = n(r(147));
        t2.byteSequence = a3;
        var s3 = n(r(96));
        t2.codePoint = s3;
        var u2 = n(r(232));
        t2.json = u2;
        var l = n(r(233));
        t2.list = l;
        var c2 = n(r(234));
        t2.map = c2;
        var h3 = n(r(235));
        t2.namespace = h3;
        var p = n(r(236));
        t2.queue = p;
        var f = n(r(237));
        t2.set = f;
        var d3 = n(r(238));
        t2.stack = d3;
        var m3 = n(r(239));
        t2.string = m3;
      }, function(e2, t2) {
        e2.exports = function(e3) {
          try {
            return !!e3();
          } catch (e4) {
            return true;
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = e3.call(this, r2) || this;
            return n2.name = t4, n2;
          }
          return i2(t3, e3), t3;
        }(Error);
        t2.DOMException = o;
        var a3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "DOMStringSizeError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.DOMStringSizeError = a3;
        var s3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "WrongDocumentError", "The object is in the wrong document. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.WrongDocumentError = s3;
        var u2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NoDataAllowedError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NoDataAllowedError = u2;
        var l = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NoModificationAllowedError", "The object can not be modified. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NoModificationAllowedError = l;
        var c2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NotSupportedError", "The operation is not supported. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NotSupportedError = c2;
        var h3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InUseAttributeError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InUseAttributeError = h3;
        var p = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidStateError", "The object is in an invalid state. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidStateError = p;
        var f = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidModificationError", "The object can not be modified in this way. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidModificationError = f;
        var d3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NamespaceError", "The operation is not allowed by Namespaces in XML. [XMLNS] " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NamespaceError = d3;
        var m3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidAccessError", "The object does not support the operation or argument. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidAccessError = m3;
        var y3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "ValidationError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.ValidationError = y3;
        var v = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "TypeMismatchError", t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.TypeMismatchError = v;
        var _ = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "SecurityError", "The operation is insecure. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.SecurityError = _;
        var g = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NetworkError", "A network error occurred. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NetworkError = g;
        var b2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "AbortError", "The operation was aborted. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.AbortError = b2;
        var x2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "URLMismatchError", "The given URL does not match another URL. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.URLMismatchError = x2;
        var w2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "QuotaExceededError", "The quota has been exceeded. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.QuotaExceededError = w2;
        var E2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "TimeoutError", "The operation timed out. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.TimeoutError = E2;
        var D2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidNodeTypeError", "The supplied node is incorrect or has an incorrect ancestor for this operation. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidNodeTypeError = D2;
        var S3 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "DataCloneError", "The object can not be cloned. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.DataCloneError = S3;
        var C = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NotImplementedError", "The DOM method is not implemented by this module. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NotImplementedError = C;
        var A = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "HierarchyRequestError", "The operation would yield an incorrect node tree. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.HierarchyRequestError = A;
        var N = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "NotFoundError", "The object can not be found here. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.NotFoundError = N;
        var T2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "IndexSizeError", "The index is not in the allowed range. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.IndexSizeError = T2;
        var O2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "SyntaxError", "The string did not match the expected pattern. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.SyntaxError = O2;
        var F = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, "InvalidCharacterError", "The string contains invalid characters. " + t4) || this;
          }
          return i2(t3, e3), t3;
        }(o);
        t2.InvalidCharacterError = F;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(53), i2 = ["kind", "resolve", "construct", "instanceOf", "predicate", "represent", "defaultStyle", "styleAliases"], o = ["scalar", "sequence", "mapping"];
        e2.exports = function(e3, t3) {
          var r2, a3;
          if (t3 = t3 || {}, Object.keys(t3).forEach(function(t4) {
            if (i2.indexOf(t4) === -1)
              throw new n('Unknown option "' + t4 + '" is met in definition of "' + e3 + '" YAML type.');
          }), this.tag = e3, this.kind = t3.kind || null, this.resolve = t3.resolve || function() {
            return true;
          }, this.construct = t3.construct || function(e4) {
            return e4;
          }, this.instanceOf = t3.instanceOf || null, this.predicate = t3.predicate || null, this.represent = t3.represent || null, this.defaultStyle = t3.defaultStyle || null, this.styleAliases = (r2 = t3.styleAliases || null, a3 = {}, r2 !== null && Object.keys(r2).forEach(function(e4) {
            r2[e4].forEach(function(t4) {
              a3[String(t4)] = e4;
            });
          }), a3), o.indexOf(this.kind) === -1)
            throw new n('Unknown kind "' + this.kind + '" is specified for "' + e3 + '" YAML type.');
        };
      }, function(e2, t2, r) {
        (function(t3) {
          var r2 = function(e3) {
            return e3 && e3.Math == Math && e3;
          };
          e2.exports = r2(typeof globalThis == "object" && globalThis) || r2(typeof window == "object" && window) || r2(typeof self == "object" && self) || r2(typeof t3 == "object" && t3) || Function("return this")();
        }).call(this, r(78));
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.idl_defineConst = function(e3, t3, r2) {
          Object.defineProperty(e3, t3, { writable: false, enumerable: true, configurable: false, value: r2 });
        };
      }, function(e2, t2) {
        e2.exports = function(e3) {
          return typeof e3 == "object" ? e3 !== null : typeof e3 == "function";
        };
      }, function(e2, t2) {
        var r = {}.hasOwnProperty;
        e2.exports = function(e3, t3) {
          return r.call(e3, t3);
        };
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(115), o = r(18), a3 = r(56), s3 = Object.defineProperty;
        t2.f = n ? s3 : function(e3, t3, r2) {
          if (o(e3), t3 = a3(t3, true), o(r2), i2)
            try {
              return s3(e3, t3, r2);
            } catch (e4) {
            }
          if ("get" in r2 || "set" in r2)
            throw TypeError("Accessors not supported");
          return "value" in r2 && (e3[t3] = r2.value), e3;
        };
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !n(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(3), o = r(2);
        function a3(e3, t3, r2) {
          if (r2 === void 0 && (r2 = false), r2 && i2.Guard.isElementNode(t3) && i2.Guard.isShadowRoot(t3.shadowRoot) && t3.shadowRoot._firstChild)
            return t3.shadowRoot._firstChild;
          if (t3._firstChild)
            return t3._firstChild;
          if (t3 === e3)
            return null;
          if (t3._nextSibling)
            return t3._nextSibling;
          for (var n2 = t3._parent; n2 && n2 !== e3; ) {
            if (n2._nextSibling)
              return n2._nextSibling;
            n2 = n2._parent;
          }
          return null;
        }
        function s3() {
          var e3;
          return (e3 = {})[Symbol.iterator] = function() {
            return { next: function() {
              return { done: true, value: null };
            } };
          }, e3;
        }
        function u2(e3, t3, r2, n2) {
          t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false);
          for (var i3 = t3 ? e3 : a3(e3, e3, r2); i3 && n2 && !n2(i3); )
            i3 = a3(e3, i3, r2);
          return i3;
        }
        function l(e3, t3, r2, n2, i3) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = a3(e3, t3, n2); o2 && i3 && !i3(o2); )
            o2 = a3(e3, o2, n2);
          return o2;
        }
        function c2(e3, t3, r2, n2) {
          var i3;
          return t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), t3 || e3._children.size !== 0 ? ((i3 = {})[Symbol.iterator] = function() {
            var i4 = t3 ? e3 : a3(e3, e3, r2);
            return { next: function() {
              for (; i4 && n2 && !n2(i4); )
                i4 = a3(e3, i4, r2);
              if (i4 === null)
                return { done: true, value: null };
              var t4 = { done: false, value: i4 };
              return i4 = a3(e3, i4, r2), t4;
            } };
          }, i3) : s3();
        }
        function h3(e3, t3, r2) {
          t3 === void 0 && (t3 = false);
          for (var n2 = t3 ? e3 : e3._parent; n2 && r2 && !r2(n2); )
            n2 = n2._parent;
          return n2;
        }
        function p(e3, t3, r2, n2) {
          r2 === void 0 && (r2 = false);
          for (var i3 = t3._parent; i3 && n2 && !n2(i3); )
            i3 = i3._parent;
          return i3;
        }
        function f(e3) {
          return i2.Guard.isDocumentTypeNode(e3) ? 0 : i2.Guard.isCharacterDataNode(e3) ? e3._data.length : e3._children.size;
        }
        function d3(e3, t3) {
          if (t3 === void 0 && (t3 = false), t3) {
            var r2 = d3(e3, false);
            return i2.Guard.isShadowRoot(r2) ? d3(r2._host, true) : r2;
          }
          return e3._parent ? d3(e3._parent) : e3;
        }
        function m3(e3, t3, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = r2 ? e3 : n2 && i2.Guard.isShadowRoot(e3) ? e3._host : e3._parent; o2 !== null; ) {
            if (o2 === t3)
              return true;
            o2 = n2 && i2.Guard.isShadowRoot(o2) ? o2._host : o2._parent;
          }
          return false;
        }
        function y3(e3) {
          for (var t3 = d3(e3), r2 = 0, n2 = u2(t3); n2 !== null; ) {
            if (r2++, n2 === e3)
              return r2;
            n2 = l(t3, n2);
          }
          return -1;
        }
        t2.tree_getFirstDescendantNode = u2, t2.tree_getNextDescendantNode = l, t2.tree_getDescendantNodes = c2, t2.tree_getDescendantElements = function(e3, t3, r2, n2) {
          var o2;
          return t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), t3 || e3._children.size !== 0 ? ((o2 = {})[Symbol.iterator] = function() {
            var o3 = c2(e3, t3, r2, function(e4) {
              return i2.Guard.isElementNode(e4);
            })[Symbol.iterator](), a4 = o3.next().value;
            return { next: function() {
              for (; a4 && n2 && !n2(a4); )
                a4 = o3.next().value;
              if (a4 === null)
                return { done: true, value: null };
              var e4 = { done: false, value: a4 };
              return a4 = o3.next().value, e4;
            } };
          }, o2) : s3();
        }, t2.tree_getSiblingNodes = function(e3, t3, r2) {
          var n2;
          return t3 === void 0 && (t3 = false), e3._parent && e3._parent._children.size !== 0 ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = e3._parent ? e3._parent._firstChild : null;
            return { next: function() {
              for (; n3 && (r2 && !r2(n3) || !t3 && n3 === e3); )
                n3 = n3._nextSibling;
              if (n3 === null)
                return { done: true, value: null };
              var i3 = { done: false, value: n3 };
              return n3 = n3._nextSibling, i3;
            } };
          }, n2) : s3();
        }, t2.tree_getFirstAncestorNode = h3, t2.tree_getNextAncestorNode = p, t2.tree_getAncestorNodes = function(e3, t3, r2) {
          var n2;
          return t3 === void 0 && (t3 = false), t3 || e3._parent ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = h3(e3, t3, r2);
            return { next: function() {
              if (n3 === null)
                return { done: true, value: null };
              var e4 = { done: false, value: n3 };
              return n3 = p(0, n3, t3, r2), e4;
            } };
          }, n2) : s3();
        }, t2.tree_getCommonAncestor = function(e3, t3) {
          if (e3 === t3)
            return e3._parent;
          for (var r2 = [], n2 = [], i3 = h3(e3, true); i3 !== null; )
            r2.push(i3), i3 = p(0, i3, true);
          for (var o2 = h3(t3, true); o2 !== null; )
            n2.push(o2), o2 = p(0, o2, true);
          for (var a4 = r2.length, s4 = n2.length, u3 = null, l2 = Math.min(a4, s4); l2 > 0; l2--) {
            var c3 = r2[--a4];
            if (c3 !== n2[--s4])
              break;
            u3 = c3;
          }
          return u3;
        }, t2.tree_getFollowingNode = function(e3, t3) {
          if (t3._firstChild)
            return t3._firstChild;
          if (t3._nextSibling)
            return t3._nextSibling;
          for (; ; ) {
            var r2 = t3._parent;
            if (r2 === null || r2 === e3)
              return null;
            if (r2._nextSibling)
              return r2._nextSibling;
            t3 = r2;
          }
        }, t2.tree_getPrecedingNode = function(e3, t3) {
          return t3 === e3 ? null : t3._previousSibling ? (t3 = t3._previousSibling)._lastChild ? t3._lastChild : t3 : t3._parent;
        }, t2.tree_isConstrained = function e3(t3) {
          var r2, i3, a4, s4, u3, l2;
          switch (t3._nodeType) {
            case o.NodeType.Document:
              var c3 = false, h4 = false;
              try {
                for (var p2 = n(t3._children), f2 = p2.next(); !f2.done; f2 = p2.next()) {
                  switch (f2.value._nodeType) {
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.Comment:
                      break;
                    case o.NodeType.DocumentType:
                      if (c3 || h4)
                        return false;
                      c3 = true;
                      break;
                    case o.NodeType.Element:
                      if (h4)
                        return false;
                      h4 = true;
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  f2 && !f2.done && (i3 = p2.return) && i3.call(p2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              break;
            case o.NodeType.DocumentFragment:
            case o.NodeType.Element:
              try {
                for (var d4 = n(t3._children), m4 = d4.next(); !m4.done; m4 = d4.next()) {
                  switch (m4.value._nodeType) {
                    case o.NodeType.Element:
                    case o.NodeType.Text:
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.CData:
                    case o.NodeType.Comment:
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e4) {
                a4 = { error: e4 };
              } finally {
                try {
                  m4 && !m4.done && (s4 = d4.return) && s4.call(d4);
                } finally {
                  if (a4)
                    throw a4.error;
                }
              }
              break;
            case o.NodeType.DocumentType:
            case o.NodeType.Text:
            case o.NodeType.ProcessingInstruction:
            case o.NodeType.CData:
            case o.NodeType.Comment:
              return !t3.hasChildNodes();
          }
          try {
            for (var y4 = n(t3._children), v = y4.next(); !v.done; v = y4.next()) {
              if (!e3(v.value))
                return false;
            }
          } catch (e4) {
            u3 = { error: e4 };
          } finally {
            try {
              v && !v.done && (l2 = y4.return) && l2.call(y4);
            } finally {
              if (u3)
                throw u3.error;
            }
          }
          return true;
        }, t2.tree_nodeLength = f, t2.tree_isEmpty = function(e3) {
          return f(e3) === 0;
        }, t2.tree_rootNode = d3, t2.tree_isDescendantOf = function(e3, t3, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var i3 = u2(e3, r2, n2); i3 !== null; ) {
            if (i3 === t3)
              return true;
            i3 = l(e3, i3, r2, n2);
          }
          return false;
        }, t2.tree_isAncestorOf = m3, t2.tree_isHostIncludingAncestorOf = function e3(t3, r2, n2) {
          if (n2 === void 0 && (n2 = false), m3(t3, r2, n2))
            return true;
          var o2 = d3(t3);
          return !(!i2.Guard.isDocumentFragmentNode(o2) || o2._host === null || !e3(o2._host, r2, n2));
        }, t2.tree_isSiblingOf = function(e3, t3, r2) {
          return r2 === void 0 && (r2 = false), e3 !== t3 ? e3._parent !== null && e3._parent === t3._parent : !!r2;
        }, t2.tree_isPreceding = function(e3, t3) {
          var r2 = y3(e3), n2 = y3(t3);
          return r2 !== -1 && n2 !== -1 && (d3(e3) === d3(t3) && n2 < r2);
        }, t2.tree_isFollowing = function(e3, t3) {
          var r2 = y3(e3), n2 = y3(t3);
          return r2 !== -1 && n2 !== -1 && (d3(e3) === d3(t3) && n2 > r2);
        }, t2.tree_isParentOf = function(e3, t3) {
          return e3._parent === t3;
        }, t2.tree_isChildOf = function(e3, t3) {
          return t3._parent === e3;
        }, t2.tree_previousSibling = function(e3) {
          return e3._previousSibling;
        }, t2.tree_nextSibling = function(e3) {
          return e3._nextSibling;
        }, t2.tree_firstChild = function(e3) {
          return e3._firstChild;
        }, t2.tree_lastChild = function(e3) {
          return e3._lastChild;
        }, t2.tree_treePosition = y3, t2.tree_index = function(e3) {
          for (var t3 = 0; e3._previousSibling !== null; )
            t3++, e3 = e3._previousSibling;
          return t3;
        }, t2.tree_retarget = function(e3, t3) {
          for (; ; ) {
            if (!e3 || !i2.Guard.isNode(e3))
              return e3;
            var r2 = d3(e3);
            if (!i2.Guard.isShadowRoot(r2))
              return e3;
            if (t3 && i2.Guard.isNode(t3) && m3(r2, t3, true, true))
              return e3;
            e3 = r2.host;
          }
        };
      }, function(e2, t2, r) {
        var n = r(13);
        e2.exports = function(e3) {
          if (!n(e3))
            throw TypeError(String(e3) + " is not an object");
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(24), i2 = r(130), o = r(49), a3 = r(43), s3 = r(88), u2 = a3.set, l = a3.getterFor("Array Iterator");
        e2.exports = s3(Array, "Array", function(e3, t3) {
          u2(this, { type: "Array Iterator", target: n(e3), index: 0, kind: t3 });
        }, function() {
          var e3 = l(this), t3 = e3.target, r2 = e3.kind, n2 = e3.index++;
          return !t3 || n2 >= t3.length ? (e3.target = void 0, { value: void 0, done: true }) : r2 == "keys" ? { value: n2, done: false } : r2 == "values" ? { value: t3[n2], done: false } : { value: [n2, t3[n2]], done: false };
        }, "values"), o.Arguments = o.Array, i2("keys"), i2("values"), i2("entries");
      }, function(e2, t2, r) {
        var n = r(90), i2 = r(25), o = r(202);
        n || i2(Object.prototype, "toString", o, { unsafe: true });
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(15), o = r(40);
        e2.exports = n ? function(e3, t3, r2) {
          return i2.f(e3, t3, o(1, r2));
        } : function(e3, t3, r2) {
          return e3[t3] = r2, e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(137).charAt, i2 = r(43), o = r(88), a3 = i2.set, s3 = i2.getterFor("String Iterator");
        o(String, "String", function(e3) {
          a3(this, { type: "String Iterator", string: String(e3), index: 0 });
        }, function() {
          var e3, t3 = s3(this), r2 = t3.string, i3 = t3.index;
          return i3 >= r2.length ? { value: void 0, done: true } : (e3 = n(r2, i3), t3.index += e3.length, { value: e3, done: false });
        });
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(203), o = r(19), a3 = r(21), s3 = r(5), u2 = s3("iterator"), l = s3("toStringTag"), c2 = o.values;
        for (var h3 in i2) {
          var p = n[h3], f = p && p.prototype;
          if (f) {
            if (f[u2] !== c2)
              try {
                a3(f, u2, c2);
              } catch (e3) {
                f[u2] = c2;
              }
            if (f[l] || a3(f, l, h3), i2[h3]) {
              for (var d3 in o)
                if (f[d3] !== o[d3])
                  try {
                    a3(f, d3, o[d3]);
                  } catch (e3) {
                    f[d3] = o[d3];
                  }
            }
          }
        }
      }, function(e2, t2, r) {
        var n = r(41), i2 = r(35);
        e2.exports = function(e3) {
          return n(i2(e3));
        };
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(21), o = r(14), a3 = r(80), s3 = r(117), u2 = r(43), l = u2.get, c2 = u2.enforce, h3 = String(String).split("String");
        (e2.exports = function(e3, t3, r2, s4) {
          var u3 = !!s4 && !!s4.unsafe, l2 = !!s4 && !!s4.enumerable, p = !!s4 && !!s4.noTargetGet;
          typeof r2 == "function" && (typeof t3 != "string" || o(r2, "name") || i2(r2, "name", t3), c2(r2).source = h3.join(typeof t3 == "string" ? t3 : "")), e3 !== n ? (u3 ? !p && e3[t3] && (l2 = true) : delete e3[t3], l2 ? e3[t3] = r2 : i2(e3, t3, r2)) : l2 ? e3[t3] = r2 : a3(t3, r2);
        })(Function.prototype, "toString", function() {
          return typeof this == "function" && l(this).source || s3(this);
        });
      }, function(e2, t2, r) {
        var n = r(47), i2 = Math.min;
        e2.exports = function(e3) {
          return e3 > 0 ? i2(n(e3), 9007199254740991) : 0;
        };
      }, function(e2, t2, r) {
        var n = r(35);
        e2.exports = function(e3) {
          return Object(n(e3));
        };
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(8), o = r(14), a3 = Object.defineProperty, s3 = {}, u2 = function(e3) {
          throw e3;
        };
        e2.exports = function(e3, t3) {
          if (o(s3, e3))
            return s3[e3];
          t3 || (t3 = {});
          var r2 = [][e3], l = !!o(t3, "ACCESSORS") && t3.ACCESSORS, c2 = o(t3, 0) ? t3[0] : u2, h3 = o(t3, 1) ? t3[1] : void 0;
          return s3[e3] = !!r2 && !i2(function() {
            if (l && !n)
              return true;
            var e4 = { length: -1 };
            l ? a3(e4, 1, { enumerable: true, get: u2 }) : e4[1] = 1, r2.call(e4, c2, h3);
          });
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(148), i2 = r(149), o = r(151), a3 = r(98), s3 = r(153), u2 = r(154), l = r(155), c2 = r(99), h3 = r(100), p = r(156), f = r(157), d3 = r(101), m3 = r(158), y3 = r(159), v = r(160), _ = r(161), g = r(162), b2 = r(163), x2 = r(164), w2 = r(165), E2 = r(166), D2 = r(167), S3 = r(168), C = r(169), A = r(170);
        t2.create_domImplementation = function(e3) {
          return n.DOMImplementationImpl._create(e3);
        }, t2.create_window = function() {
          return i2.WindowImpl._create();
        }, t2.create_xmlDocument = function() {
          return new o.XMLDocumentImpl();
        }, t2.create_document = function() {
          return new a3.DocumentImpl();
        }, t2.create_abortController = function() {
          return new s3.AbortControllerImpl();
        }, t2.create_abortSignal = function() {
          return u2.AbortSignalImpl._create();
        }, t2.create_documentType = function(e3, t3, r2, n2) {
          return l.DocumentTypeImpl._create(e3, t3, r2, n2);
        }, t2.create_element = function(e3, t3, r2, n2) {
          return c2.ElementImpl._create(e3, t3, r2, n2);
        }, t2.create_htmlElement = function(e3, t3, r2, n2) {
          return c2.ElementImpl._create(e3, t3, r2, n2);
        }, t2.create_htmlUnknownElement = function(e3, t3, r2, n2) {
          return c2.ElementImpl._create(e3, t3, r2, n2);
        }, t2.create_documentFragment = function(e3) {
          return h3.DocumentFragmentImpl._create(e3);
        }, t2.create_shadowRoot = function(e3, t3) {
          return p.ShadowRootImpl._create(e3, t3);
        }, t2.create_attr = function(e3, t3) {
          return f.AttrImpl._create(e3, t3);
        }, t2.create_text = function(e3, t3) {
          return d3.TextImpl._create(e3, t3);
        }, t2.create_cdataSection = function(e3, t3) {
          return m3.CDATASectionImpl._create(e3, t3);
        }, t2.create_comment = function(e3, t3) {
          return y3.CommentImpl._create(e3, t3);
        }, t2.create_processingInstruction = function(e3, t3, r2) {
          return v.ProcessingInstructionImpl._create(e3, t3, r2);
        }, t2.create_htmlCollection = function(e3, t3) {
          return t3 === void 0 && (t3 = function() {
            return true;
          }), _.HTMLCollectionImpl._create(e3, t3);
        }, t2.create_nodeList = function(e3) {
          return g.NodeListImpl._create(e3);
        }, t2.create_nodeListStatic = function(e3, t3) {
          return b2.NodeListStaticImpl._create(e3, t3);
        }, t2.create_namedNodeMap = function(e3) {
          return x2.NamedNodeMapImpl._create(e3);
        }, t2.create_range = function(e3, t3) {
          return w2.RangeImpl._create(e3, t3);
        }, t2.create_nodeIterator = function(e3, t3, r2) {
          return E2.NodeIteratorImpl._create(e3, t3, r2);
        }, t2.create_treeWalker = function(e3, t3) {
          return D2.TreeWalkerImpl._create(e3, t3);
        }, t2.create_nodeFilter = function() {
          return S3.NodeFilterImpl._create();
        }, t2.create_mutationRecord = function(e3, t3, r2, n2, i3, o2, a4, s4, u3) {
          return C.MutationRecordImpl._create(e3, t3, r2, n2, i3, o2, a4, s4, u3);
        }, t2.create_domTokenList = function(e3, t3) {
          return A.DOMTokenListImpl._create(e3, t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(17), a3 = r(3), s3 = r(72), u2 = /* @__PURE__ */ new Map();
        function l(e3, t3) {
          if (t3 !== e3._root && o.tree_isAncestorOf(e3._reference, t3, true)) {
            if (e3._pointerBeforeReference)
              for (; ; ) {
                var r2 = o.tree_getFollowingNode(e3._root, t3);
                if (r2 !== null && o.tree_isDescendantOf(e3._root, r2, true) && !o.tree_isDescendantOf(t3, r2, true))
                  return void (e3._reference = r2);
                if (r2 === null)
                  return void (e3._pointerBeforeReference = false);
              }
            if (t3._previousSibling === null)
              t3._parent !== null && (e3._reference = t3._parent);
            else {
              for (var n2 = t3._previousSibling, i3 = o.tree_getFirstDescendantNode(t3._previousSibling, true, false); i3 !== null; )
                i3 !== null && (n2 = i3), i3 = o.tree_getNextDescendantNode(t3._previousSibling, i3, true, false);
              e3._reference = n2;
            }
          }
        }
        function c2(e3, t3, r2, n2, i3) {
          if (a3.Guard.isSlot(e3) && t3 === "name" && i3 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e3._name = n2 === null || n2 === "" ? "" : n2, s3.shadowTree_assignSlotablesForATree(o.tree_rootNode(e3));
          }
        }
        function h3(e3, t3, r2, n2, i3) {
          if (a3.Guard.isSlotable(e3) && t3 === "slot" && i3 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e3._name = n2 === null || n2 === "" ? "" : n2, s3.shadowTree_isAssigned(e3) && s3.shadowTree_assignSlotables(e3._assignedSlot), s3.shadowTree_assignASlot(e3);
          }
        }
        function p(e3, t3, r2, n2) {
          t3 === "id" && n2 === null && (e3._uniqueIdentifier = r2 || void 0);
        }
        t2.dom_runRemovingSteps = function(e3, t3) {
        }, t2.dom_runCloningSteps = function(e3, t3, r2, n2) {
        }, t2.dom_runAdoptingSteps = function(e3, t3) {
        }, t2.dom_runAttributeChangeSteps = function(e3, t3, r2, o2, a4) {
          var s4, u3;
          i2.dom.features.slots && (h3.call(e3, e3, t3, r2, o2, a4), c2.call(e3, e3, t3, r2, o2, a4)), p.call(e3, e3, t3, o2, a4);
          try {
            for (var l2 = n(e3._attributeChangeSteps), f = l2.next(); !f.done; f = l2.next()) {
              f.value.call(e3, e3, t3, r2, o2, a4);
            }
          } catch (e4) {
            s4 = { error: e4 };
          } finally {
            try {
              f && !f.done && (u3 = l2.return) && u3.call(l2);
            } finally {
              if (s4)
                throw s4.error;
            }
          }
        }, t2.dom_runInsertionSteps = function(e3) {
        }, t2.dom_runNodeIteratorPreRemovingSteps = function(e3, t3) {
          l.call(e3, e3, t3);
        }, t2.dom_hasSupportedTokens = function(e3) {
          return u2.has(e3);
        }, t2.dom_getSupportedTokens = function(e3) {
          return u2.get(e3) || /* @__PURE__ */ new Set();
        }, t2.dom_runEventConstructingSteps = function(e3) {
        }, t2.dom_runChildTextContentChangeSteps = function(e3) {
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(11), o = r(46), a3 = r(44), s3 = r(16), u2 = r(86), l = r(124), c2 = r(8), h3 = r(14), p = r(59), f = r(13), d3 = r(18), m3 = r(27), y3 = r(24), v = r(56), _ = r(40), g = r(60), b2 = r(61), x2 = r(82), w2 = r(190), E2 = r(85), D2 = r(55), S3 = r(15), C = r(79), A = r(21), N = r(25), T2 = r(81), O2 = r(57), F = r(45), k2 = r(58), P = r(5), I2 = r(125), L2 = r(126), M3 = r(62), B2 = r(43), j = r(36).forEach, R2 = O2("hidden"), z2 = P("toPrimitive"), U = B2.set, G2 = B2.getterFor("Symbol"), X2 = Object.prototype, q2 = i2.Symbol, W = o("JSON", "stringify"), H3 = D2.f, J = S3.f, Y2 = w2.f, V = C.f, K2 = T2("symbols"), $ = T2("op-symbols"), Q2 = T2("string-to-symbol-registry"), Z = T2("symbol-to-string-registry"), ee = T2("wks"), te = i2.QObject, re = !te || !te.prototype || !te.prototype.findChild, ne = s3 && c2(function() {
          return g(J({}, "a", { get: function() {
            return J(this, "a", { value: 7 }).a;
          } })).a != 7;
        }) ? function(e3, t3, r2) {
          var n2 = H3(X2, t3);
          n2 && delete X2[t3], J(e3, t3, r2), n2 && e3 !== X2 && J(X2, t3, n2);
        } : J, ie = function(e3, t3) {
          var r2 = K2[e3] = g(q2.prototype);
          return U(r2, { type: "Symbol", tag: e3, description: t3 }), s3 || (r2.description = t3), r2;
        }, oe = l ? function(e3) {
          return typeof e3 == "symbol";
        } : function(e3) {
          return Object(e3) instanceof q2;
        }, ae = function(e3, t3, r2) {
          e3 === X2 && ae($, t3, r2), d3(e3);
          var n2 = v(t3, true);
          return d3(r2), h3(K2, n2) ? (r2.enumerable ? (h3(e3, R2) && e3[R2][n2] && (e3[R2][n2] = false), r2 = g(r2, { enumerable: _(0, false) })) : (h3(e3, R2) || J(e3, R2, _(1, {})), e3[R2][n2] = true), ne(e3, n2, r2)) : J(e3, n2, r2);
        }, se = function(e3, t3) {
          d3(e3);
          var r2 = y3(t3), n2 = b2(r2).concat(he(r2));
          return j(n2, function(t4) {
            s3 && !ue.call(r2, t4) || ae(e3, t4, r2[t4]);
          }), e3;
        }, ue = function(e3) {
          var t3 = v(e3, true), r2 = V.call(this, t3);
          return !(this === X2 && h3(K2, t3) && !h3($, t3)) && (!(r2 || !h3(this, t3) || !h3(K2, t3) || h3(this, R2) && this[R2][t3]) || r2);
        }, le = function(e3, t3) {
          var r2 = y3(e3), n2 = v(t3, true);
          if (r2 !== X2 || !h3(K2, n2) || h3($, n2)) {
            var i3 = H3(r2, n2);
            return !i3 || !h3(K2, n2) || h3(r2, R2) && r2[R2][n2] || (i3.enumerable = true), i3;
          }
        }, ce = function(e3) {
          var t3 = Y2(y3(e3)), r2 = [];
          return j(t3, function(e4) {
            h3(K2, e4) || h3(F, e4) || r2.push(e4);
          }), r2;
        }, he = function(e3) {
          var t3 = e3 === X2, r2 = Y2(t3 ? $ : y3(e3)), n2 = [];
          return j(r2, function(e4) {
            !h3(K2, e4) || t3 && !h3(X2, e4) || n2.push(K2[e4]);
          }), n2;
        };
        (u2 || (N((q2 = function() {
          if (this instanceof q2)
            throw TypeError("Symbol is not a constructor");
          var e3 = arguments.length && arguments[0] !== void 0 ? String(arguments[0]) : void 0, t3 = k2(e3), r2 = function(e4) {
            this === X2 && r2.call($, e4), h3(this, R2) && h3(this[R2], t3) && (this[R2][t3] = false), ne(this, t3, _(1, e4));
          };
          return s3 && re && ne(X2, t3, { configurable: true, set: r2 }), ie(t3, e3);
        }).prototype, "toString", function() {
          return G2(this).tag;
        }), N(q2, "withoutSetter", function(e3) {
          return ie(k2(e3), e3);
        }), C.f = ue, S3.f = ae, D2.f = le, x2.f = w2.f = ce, E2.f = he, I2.f = function(e3) {
          return ie(P(e3), e3);
        }, s3 && (J(q2.prototype, "description", { configurable: true, get: function() {
          return G2(this).description;
        } }), a3 || N(X2, "propertyIsEnumerable", ue, { unsafe: true }))), n({ global: true, wrap: true, forced: !u2, sham: !u2 }, { Symbol: q2 }), j(b2(ee), function(e3) {
          L2(e3);
        }), n({ target: "Symbol", stat: true, forced: !u2 }, { for: function(e3) {
          var t3 = String(e3);
          if (h3(Q2, t3))
            return Q2[t3];
          var r2 = q2(t3);
          return Q2[t3] = r2, Z[r2] = t3, r2;
        }, keyFor: function(e3) {
          if (!oe(e3))
            throw TypeError(e3 + " is not a symbol");
          if (h3(Z, e3))
            return Z[e3];
        }, useSetter: function() {
          re = true;
        }, useSimple: function() {
          re = false;
        } }), n({ target: "Object", stat: true, forced: !u2, sham: !s3 }, { create: function(e3, t3) {
          return t3 === void 0 ? g(e3) : se(g(e3), t3);
        }, defineProperty: ae, defineProperties: se, getOwnPropertyDescriptor: le }), n({ target: "Object", stat: true, forced: !u2 }, { getOwnPropertyNames: ce, getOwnPropertySymbols: he }), n({ target: "Object", stat: true, forced: c2(function() {
          E2.f(1);
        }) }, { getOwnPropertySymbols: function(e3) {
          return E2.f(m3(e3));
        } }), W) && n({ target: "JSON", stat: true, forced: !u2 || c2(function() {
          var e3 = q2();
          return W([e3]) != "[null]" || W({ a: e3 }) != "{}" || W(Object(e3)) != "{}";
        }) }, { stringify: function(e3, t3, r2) {
          for (var n2, i3 = [e3], o2 = 1; arguments.length > o2; )
            i3.push(arguments[o2++]);
          if (n2 = t3, (f(t3) || e3 !== void 0) && !oe(e3))
            return p(t3) || (t3 = function(e4, t4) {
              if (typeof n2 == "function" && (t4 = n2.call(this, e4, t4)), !oe(t4))
                return t4;
            }), i3[1] = t3, W.apply(null, i3);
        } });
        q2.prototype[z2] || A(q2.prototype, z2, q2.prototype.valueOf), M3(q2, "Symbol"), F[R2] = true;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(16), o = r(11), a3 = r(14), s3 = r(13), u2 = r(15).f, l = r(119), c2 = o.Symbol;
        if (i2 && typeof c2 == "function" && (!("description" in c2.prototype) || c2().description !== void 0)) {
          var h3 = {}, p = function() {
            var e3 = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]), t3 = this instanceof p ? new c2(e3) : e3 === void 0 ? c2() : c2(e3);
            return e3 === "" && (h3[t3] = true), t3;
          };
          l(p, c2);
          var f = p.prototype = c2.prototype;
          f.constructor = p;
          var d3 = f.toString, m3 = String(c2("test")) == "Symbol(test)", y3 = /^Symbol\((.*)\)[^)]+$/;
          u2(f, "description", { configurable: true, get: function() {
            var e3 = s3(this) ? this.valueOf() : this, t3 = d3.call(e3);
            if (a3(h3, e3))
              return "";
            var r2 = m3 ? t3.slice(7, -1) : t3.replace(y3, "$1");
            return r2 === "" ? void 0 : r2;
          } }), n({ global: true, forced: true }, { Symbol: p });
        }
      }, function(e2, t2, r) {
        r(126)("iterator");
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(2), u2 = r(70), l = r(3), c2 = r(9), h3 = r(0), p = r(152), f = r(12), d3 = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._parent = null, t4._firstChild = null, t4._lastChild = null, t4._previousSibling = null, t4._nextSibling = null, t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "_childNodes", { get: function() {
            return this.__childNodes || (this.__childNodes = h3.create_nodeList(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverride || a3.dom.window._associatedDocument;
          }, set: function(e4) {
            this._nodeDocumentOverride = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_registeredObserverList", { get: function() {
            return this.__registeredObserverList || (this.__registeredObserverList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nodeType", { get: function() {
            return this._nodeType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nodeName", { get: function() {
            return l.Guard.isElementNode(this) ? this._htmlUppercasedQualifiedName : l.Guard.isAttrNode(this) ? this._qualifiedName : l.Guard.isExclusiveTextNode(this) ? "#text" : l.Guard.isCDATASectionNode(this) ? "#cdata-section" : l.Guard.isProcessingInstructionNode(this) ? this._target : l.Guard.isCommentNode(this) ? "#comment" : l.Guard.isDocumentNode(this) ? "#document" : l.Guard.isDocumentTypeNode(this) ? this._name : l.Guard.isDocumentFragmentNode(this) ? "#document-fragment" : "";
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "baseURI", { get: function() {
            return p.urlSerializer(this._nodeDocument._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "isConnected", { get: function() {
            return l.Guard.isElementNode(this) && h3.shadowTree_isConnected(this);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "ownerDocument", { get: function() {
            return this._nodeType === s3.NodeType.Document ? null : this._nodeDocument;
          }, enumerable: true, configurable: true }), t3.prototype.getRootNode = function(e4) {
            return h3.tree_rootNode(this, !!e4 && e4.composed);
          }, Object.defineProperty(t3.prototype, "parentNode", { get: function() {
            return this._nodeType === s3.NodeType.Attribute ? null : this._parent;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "parentElement", { get: function() {
            return this._parent && l.Guard.isElementNode(this._parent) ? this._parent : null;
          }, enumerable: true, configurable: true }), t3.prototype.hasChildNodes = function() {
            return this._firstChild !== null;
          }, Object.defineProperty(t3.prototype, "childNodes", { get: function() {
            return this._childNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstChild", { get: function() {
            return this._firstChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastChild", { get: function() {
            return this._lastChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nodeValue", { get: function() {
            return l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e4) {
            e4 === null && (e4 = ""), l.Guard.isAttrNode(this) ? h3.attr_setAnExistingAttributeValue(this, e4) : l.Guard.isCharacterDataNode(this) && h3.characterData_replaceData(this, 0, this._data.length, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "textContent", { get: function() {
            return l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h3.text_descendantTextContent(this) : l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e4) {
            e4 === null && (e4 = ""), l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h3.node_stringReplaceAll(e4, this) : l.Guard.isAttrNode(this) ? h3.attr_setAnExistingAttributeValue(this, e4) : l.Guard.isCharacterDataNode(this) && h3.characterData_replaceData(this, 0, h3.tree_nodeLength(this), e4);
          }, enumerable: true, configurable: true }), t3.prototype.normalize = function() {
            for (var e4, t4, r2, n2, i3 = [], s4 = h3.tree_getFirstDescendantNode(this, false, false, function(e5) {
              return l.Guard.isExclusiveTextNode(e5);
            }); s4 !== null; )
              i3.push(s4), s4 = h3.tree_getNextDescendantNode(this, s4, false, false, function(e5) {
                return l.Guard.isExclusiveTextNode(e5);
              });
            for (var u3 = 0; u3 < i3.length; u3++) {
              var c3 = i3[u3];
              if (c3._parent !== null) {
                var p2 = h3.tree_nodeLength(c3);
                if (p2 !== 0) {
                  var f2 = [], d4 = "";
                  try {
                    for (var m3 = (e4 = void 0, o(h3.text_contiguousExclusiveTextNodes(c3))), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                      var v = y3.value;
                      f2.push(v), d4 += v._data;
                    }
                  } catch (t5) {
                    e4 = { error: t5 };
                  } finally {
                    try {
                      y3 && !y3.done && (t4 = m3.return) && t4.call(m3);
                    } finally {
                      if (e4)
                        throw e4.error;
                    }
                  }
                  if (h3.characterData_replaceData(c3, p2, 0, d4), a3.dom.rangeList.size !== 0)
                    for (var _ = c3._nextSibling; _ !== null && l.Guard.isExclusiveTextNode(_); ) {
                      var g = _, b2 = h3.tree_index(g);
                      try {
                        for (var x2 = (r2 = void 0, o(a3.dom.rangeList)), w2 = x2.next(); !w2.done; w2 = x2.next()) {
                          var E2 = w2.value;
                          E2._start[0] === g && (E2._start[0] = c3, E2._start[1] += p2), E2._end[0] === g && (E2._end[0] = c3, E2._end[1] += p2), E2._start[0] === g._parent && E2._start[1] === b2 && (E2._start[0] = c3, E2._start[1] = p2), E2._end[0] === g._parent && E2._end[1] === b2 && (E2._end[0] = c3, E2._end[1] = p2);
                        }
                      } catch (e5) {
                        r2 = { error: e5 };
                      } finally {
                        try {
                          w2 && !w2.done && (n2 = x2.return) && n2.call(x2);
                        } finally {
                          if (r2)
                            throw r2.error;
                        }
                      }
                      p2 += h3.tree_nodeLength(_), _ = _._nextSibling;
                    }
                  for (var D2 = 0; D2 < f2.length; D2++) {
                    (v = f2[D2])._parent !== null && h3.mutation_remove(v, v._parent);
                  }
                } else
                  h3.mutation_remove(c3, c3._parent);
              }
            }
          }, t3.prototype.cloneNode = function(e4) {
            if (e4 === void 0 && (e4 = false), l.Guard.isShadowRoot(this))
              throw new c2.NotSupportedError();
            return h3.node_clone(this, null, e4);
          }, t3.prototype.isEqualNode = function(e4) {
            return e4 === void 0 && (e4 = null), e4 !== null && h3.node_equals(this, e4);
          }, t3.prototype.isSameNode = function(e4) {
            return e4 === void 0 && (e4 = null), this === e4;
          }, t3.prototype.compareDocumentPosition = function(e4) {
            if (e4 === this)
              return 0;
            var t4 = e4, r2 = this, n2 = null, i3 = null;
            if (l.Guard.isAttrNode(t4) && (t4 = (n2 = t4)._element), l.Guard.isAttrNode(r2) && (r2 = (i3 = r2)._element, n2 && t4 && t4 === r2))
              for (var o2 = 0; o2 < r2._attributeList.length; o2++) {
                var u3 = r2._attributeList[o2];
                if (h3.node_equals(u3, n2))
                  return s3.Position.ImplementationSpecific | s3.Position.Preceding;
                if (h3.node_equals(u3, i3))
                  return s3.Position.ImplementationSpecific | s3.Position.Following;
              }
            return t4 === null || r2 === null || h3.tree_rootNode(t4) !== h3.tree_rootNode(r2) ? s3.Position.Disconnected | s3.Position.ImplementationSpecific | (a3.dom.compareCache.check(this, e4) ? s3.Position.Preceding : s3.Position.Following) : !n2 && h3.tree_isAncestorOf(r2, t4) || i3 && t4 === r2 ? s3.Position.Contains | s3.Position.Preceding : !i3 && h3.tree_isDescendantOf(r2, t4) || n2 && t4 === r2 ? s3.Position.ContainedBy | s3.Position.Following : h3.tree_isPreceding(r2, t4) ? s3.Position.Preceding : s3.Position.Following;
          }, t3.prototype.contains = function(e4) {
            return e4 !== null && h3.tree_isDescendantOf(this, e4, true);
          }, t3.prototype.lookupPrefix = function(e4) {
            return e4 ? l.Guard.isElementNode(this) ? h3.node_locateANamespacePrefix(this, e4) : l.Guard.isDocumentNode(this) ? this.documentElement === null ? null : h3.node_locateANamespacePrefix(this.documentElement, e4) : l.Guard.isDocumentTypeNode(this) || l.Guard.isDocumentFragmentNode(this) ? null : l.Guard.isAttrNode(this) ? this._element === null ? null : h3.node_locateANamespacePrefix(this._element, e4) : this._parent !== null && l.Guard.isElementNode(this._parent) ? h3.node_locateANamespacePrefix(this._parent, e4) : null : null;
          }, t3.prototype.lookupNamespaceURI = function(e4) {
            return h3.node_locateANamespace(this, e4 || null);
          }, t3.prototype.isDefaultNamespace = function(e4) {
            return e4 || (e4 = null), h3.node_locateANamespace(this, null) === e4;
          }, t3.prototype.insertBefore = function(e4, t4) {
            return h3.mutation_preInsert(e4, this, t4);
          }, t3.prototype.appendChild = function(e4) {
            return h3.mutation_append(e4, this);
          }, t3.prototype.replaceChild = function(e4, t4) {
            return h3.mutation_replace(t4, e4, this);
          }, t3.prototype.removeChild = function(e4) {
            return h3.mutation_preRemove(e4, this);
          }, t3.prototype._getTheParent = function(e4) {
            return l.Guard.isSlotable(this) && h3.shadowTree_isAssigned(this) ? this._assignedSlot : this._parent;
          }, t3.ELEMENT_NODE = 1, t3.ATTRIBUTE_NODE = 2, t3.TEXT_NODE = 3, t3.CDATA_SECTION_NODE = 4, t3.ENTITY_REFERENCE_NODE = 5, t3.ENTITY_NODE = 6, t3.PROCESSING_INSTRUCTION_NODE = 7, t3.COMMENT_NODE = 8, t3.DOCUMENT_NODE = 9, t3.DOCUMENT_TYPE_NODE = 10, t3.DOCUMENT_FRAGMENT_NODE = 11, t3.NOTATION_NODE = 12, t3.DOCUMENT_POSITION_DISCONNECTED = 1, t3.DOCUMENT_POSITION_PRECEDING = 2, t3.DOCUMENT_POSITION_FOLLOWING = 4, t3.DOCUMENT_POSITION_CONTAINS = 8, t3.DOCUMENT_POSITION_CONTAINED_BY = 16, t3.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32, t3;
        }(u2.EventTargetImpl);
        t2.NodeImpl = d3, d3.prototype._children = new l.EmptySet(), f.idl_defineConst(d3.prototype, "ELEMENT_NODE", 1), f.idl_defineConst(d3.prototype, "ATTRIBUTE_NODE", 2), f.idl_defineConst(d3.prototype, "TEXT_NODE", 3), f.idl_defineConst(d3.prototype, "CDATA_SECTION_NODE", 4), f.idl_defineConst(d3.prototype, "ENTITY_REFERENCE_NODE", 5), f.idl_defineConst(d3.prototype, "ENTITY_NODE", 6), f.idl_defineConst(d3.prototype, "PROCESSING_INSTRUCTION_NODE", 7), f.idl_defineConst(d3.prototype, "COMMENT_NODE", 8), f.idl_defineConst(d3.prototype, "DOCUMENT_NODE", 9), f.idl_defineConst(d3.prototype, "DOCUMENT_TYPE_NODE", 10), f.idl_defineConst(d3.prototype, "DOCUMENT_FRAGMENT_NODE", 11), f.idl_defineConst(d3.prototype, "NOTATION_NODE", 12), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_DISCONNECTED", 1), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_PRECEDING", 2), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_FOLLOWING", 4), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_CONTAINS", 8), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_CONTAINED_BY", 16), f.idl_defineConst(d3.prototype, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", 32);
      }, function(e2, t2) {
        e2.exports = function(e3) {
          if (e3 == null)
            throw TypeError("Can't call method on " + e3);
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(87), i2 = r(41), o = r(27), a3 = r(26), s3 = r(128), u2 = [].push, l = function(e3) {
          var t3 = e3 == 1, r2 = e3 == 2, l2 = e3 == 3, c2 = e3 == 4, h3 = e3 == 6, p = e3 == 5 || h3;
          return function(f, d3, m3, y3) {
            for (var v, _, g = o(f), b2 = i2(g), x2 = n(d3, m3, 3), w2 = a3(b2.length), E2 = 0, D2 = y3 || s3, S3 = t3 ? D2(f, w2) : r2 ? D2(f, 0) : void 0; w2 > E2; E2++)
              if ((p || E2 in b2) && (_ = x2(v = b2[E2], E2, g), e3)) {
                if (t3)
                  S3[E2] = _;
                else if (_)
                  switch (e3) {
                    case 3:
                      return true;
                    case 5:
                      return v;
                    case 6:
                      return E2;
                    case 2:
                      u2.call(S3, v);
                  }
                else if (c2)
                  return false;
              }
            return h3 ? -1 : l2 || c2 ? c2 : S3;
          };
        };
        e2.exports = { forEach: l(0), map: l(1), filter: l(2), some: l(3), every: l(4), find: l(5), findIndex: l(6) };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(9), u2 = r(2), l = r(3), c2 = r(1), h3 = r(7), p = r(73), f = r(17), d3 = r(172), m3 = r(72), y3 = r(51), v = r(30), _ = r(106);
        function g(e3, t3, r2) {
          var i3, o2, a4, l2, c3, h4, p2, d4, m4 = t3._nodeType, y4 = e3._nodeType, v2 = r2 ? r2._nodeType : null;
          if (m4 !== u2.NodeType.Document && m4 !== u2.NodeType.DocumentFragment && m4 !== u2.NodeType.Element)
            throw new s3.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + t3.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(t3, e3, true))
            throw new s3.HierarchyRequestError("The node to be inserted cannot be an inclusive ancestor of parent node. Node is " + e3.nodeName + ", parent node is " + t3.nodeName + ".");
          if (r2 !== null && r2._parent !== t3)
            throw new s3.NotFoundError("The reference child node cannot be found under parent node. Child node is " + r2.nodeName + ", parent node is " + t3.nodeName + ".");
          if (y4 !== u2.NodeType.DocumentFragment && y4 !== u2.NodeType.DocumentType && y4 !== u2.NodeType.Element && y4 !== u2.NodeType.Text && y4 !== u2.NodeType.ProcessingInstruction && y4 !== u2.NodeType.CData && y4 !== u2.NodeType.Comment)
            throw new s3.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + e3.nodeName + ".");
          if (y4 === u2.NodeType.Text && m4 === u2.NodeType.Document)
            throw new s3.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + e3.nodeName + ".");
          if (y4 === u2.NodeType.DocumentType && m4 !== u2.NodeType.Document)
            throw new s3.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + t3.nodeName + ".");
          if (m4 === u2.NodeType.Document) {
            if (y4 === u2.NodeType.DocumentFragment) {
              var _2 = 0;
              try {
                for (var g2 = n(e3._children), b3 = g2.next(); !b3.done; b3 = g2.next()) {
                  var x3 = b3.value;
                  if (x3._nodeType === u2.NodeType.Element)
                    _2++;
                  else if (x3._nodeType === u2.NodeType.Text)
                    throw new s3.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + x3.nodeName + ".");
                }
              } catch (e4) {
                i3 = { error: e4 };
              } finally {
                try {
                  b3 && !b3.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
              if (_2 > 1)
                throw new s3.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + _2 + " element nodes.");
              if (_2 === 1) {
                try {
                  for (var w3 = n(t3._children), E2 = w3.next(); !E2.done; E2 = w3.next()) {
                    if (E2.value._nodeType === u2.NodeType.Element)
                      throw new s3.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e4) {
                  a4 = { error: e4 };
                } finally {
                  try {
                    E2 && !E2.done && (l2 = w3.return) && l2.call(w3);
                  } finally {
                    if (a4)
                      throw a4.error;
                  }
                }
                if (r2) {
                  if (v2 === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  for (var D2 = r2._nextSibling; D2; ) {
                    if (D2._nodeType === u2.NodeType.DocumentType)
                      throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node.");
                    D2 = D2._nextSibling;
                  }
                }
              }
            } else if (y4 === u2.NodeType.Element) {
              try {
                for (var S3 = n(t3._children), C = S3.next(); !C.done; C = S3.next()) {
                  if (C.value._nodeType === u2.NodeType.Element)
                    throw new s3.HierarchyRequestError("Document already has a document element node. Node is " + e3.nodeName + ".");
                }
              } catch (e4) {
                c3 = { error: e4 };
              } finally {
                try {
                  C && !C.done && (h4 = S3.return) && h4.call(S3);
                } finally {
                  if (c3)
                    throw c3.error;
                }
              }
              if (r2) {
                if (v2 === u2.NodeType.DocumentType)
                  throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e3.nodeName + ".");
                for (D2 = r2._nextSibling; D2; ) {
                  if (D2._nodeType === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e3.nodeName + ".");
                  D2 = D2._nextSibling;
                }
              }
            } else if (y4 === u2.NodeType.DocumentType) {
              try {
                for (var A = n(t3._children), N = A.next(); !N.done; N = A.next()) {
                  if (N.value._nodeType === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Document already has a document type node. Node is " + e3.nodeName + ".");
                }
              } catch (e4) {
                p2 = { error: e4 };
              } finally {
                try {
                  N && !N.done && (d4 = A.return) && d4.call(A);
                } finally {
                  if (p2)
                    throw p2.error;
                }
              }
              if (r2)
                for (var T2 = r2._previousSibling; T2; ) {
                  if (T2._nodeType === u2.NodeType.Element)
                    throw new s3.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e3.nodeName + ".");
                  T2 = T2._previousSibling;
                }
              else
                for (T2 = t3._firstChild; T2; ) {
                  if (T2._nodeType === u2.NodeType.Element)
                    throw new s3.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e3.nodeName + ".");
                  T2 = T2._nextSibling;
                }
            }
          }
        }
        function b2(e3, t3, r2) {
          g(e3, t3, r2);
          var n2 = r2;
          return n2 === e3 && (n2 = e3._nextSibling), _.document_adopt(e3, t3._nodeDocument), x2(e3, t3, n2), e3;
        }
        function x2(e3, t3, r2, i3) {
          var s4, d4;
          if (r2 !== null || e3._nodeType === u2.NodeType.DocumentFragment) {
            var _2 = e3._nodeType === u2.NodeType.DocumentFragment ? e3._children.size : 1;
            if (r2 !== null && a3.dom.rangeList.size !== 0) {
              var g2 = f.tree_index(r2);
              try {
                for (var b3 = n(a3.dom.rangeList), x3 = b3.next(); !x3.done; x3 = b3.next()) {
                  var E2 = x3.value;
                  E2._start[0] === t3 && E2._start[1] > g2 && (E2._start[1] += _2), E2._end[0] === t3 && E2._end[1] > g2 && (E2._end[1] += _2);
                }
              } catch (e4) {
                s4 = { error: e4 };
              } finally {
                try {
                  x3 && !x3.done && (d4 = b3.return) && d4.call(b3);
                } finally {
                  if (s4)
                    throw s4.error;
                }
              }
            }
            var D2 = e3._nodeType === u2.NodeType.DocumentFragment ? new (Array.bind.apply(Array, o([void 0], e3._children)))() : [e3];
            if (e3._nodeType === u2.NodeType.DocumentFragment)
              for (; e3._firstChild; )
                w2(e3._firstChild, e3, true);
            a3.dom.features.mutationObservers && e3._nodeType === u2.NodeType.DocumentFragment && y3.observer_queueTreeMutationRecord(e3, [], D2, null, null);
            for (var S3 = r2 ? r2._previousSibling : t3._lastChild, C = r2 === null ? -1 : f.tree_index(r2), A = 0; A < D2.length; A++) {
              var N = D2[A];
              if (l.Guard.isElementNode(N) && (l.Guard.isDocumentNode(t3) && (t3._documentElement = N), N._nodeDocument._hasNamespaces || N._namespace === null && N._namespacePrefix === null || (N._nodeDocument._hasNamespaces = true)), N._parent = t3, r2 === null ? h3.set.append(t3._children, N) : (h3.set.insert(t3._children, N, C), C++), t3._firstChild === null)
                N._previousSibling = null, N._nextSibling = null, t3._firstChild = N, t3._lastChild = N;
              else {
                var T2 = r2 ? r2._previousSibling : t3._lastChild, O2 = r2 || null;
                N._previousSibling = T2, N._nextSibling = O2, T2 && (T2._nextSibling = N), O2 && (O2._previousSibling = N), T2 || (t3._firstChild = N), O2 || (t3._lastChild = N);
              }
              a3.dom.features.slots && t3._shadowRoot !== null && l.Guard.isSlotable(N) && m3.shadowTree_assignASlot(N), a3.dom.features.steps && l.Guard.isTextNode(N) && v.dom_runChildTextContentChangeSteps(t3), a3.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t3)) && l.Guard.isSlot(t3) && c2.isEmpty(t3._assignedNodes) && m3.shadowTree_signalASlotChange(t3), a3.dom.features.slots && m3.shadowTree_assignSlotablesForATree(f.tree_rootNode(N));
              for (var F = f.tree_getFirstDescendantNode(N, true, true); F !== null; )
                a3.dom.features.steps && v.dom_runInsertionSteps(F), a3.dom.features.customElements && l.Guard.isElementNode(F) && m3.shadowTree_isConnected(F) && (l.Guard.isCustomElementNode(F) ? p.customElement_enqueueACustomElementCallbackReaction(F, "connectedCallback", []) : p.customElement_tryToUpgrade(F)), F = f.tree_getNextDescendantNode(N, F, true, true);
            }
            a3.dom.features.mutationObservers && (i3 || y3.observer_queueTreeMutationRecord(t3, D2, [], S3, r2));
          } else
            !function(e4, t4, r3) {
              var n2 = t4._lastChild;
              l.Guard.isElementNode(e4) && (l.Guard.isDocumentNode(t4) && (t4._documentElement = e4), e4._nodeDocument._hasNamespaces || e4._namespace === null && e4._namespacePrefix === null || (e4._nodeDocument._hasNamespaces = true));
              if (e4._parent = t4, t4._children.add(e4), t4._firstChild === null)
                e4._previousSibling = null, e4._nextSibling = null, t4._firstChild = e4, t4._lastChild = e4;
              else {
                var i4 = t4._lastChild;
                e4._previousSibling = i4, e4._nextSibling = null, i4 && (i4._nextSibling = e4), i4 || (t4._firstChild = e4), t4._lastChild = e4;
              }
              a3.dom.features.slots && t4._shadowRoot !== null && l.Guard.isSlotable(e4) && m3.shadowTree_assignASlot(e4);
              a3.dom.features.steps && l.Guard.isTextNode(e4) && v.dom_runChildTextContentChangeSteps(t4);
              a3.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t4)) && l.Guard.isSlot(t4) && c2.isEmpty(t4._assignedNodes) && m3.shadowTree_signalASlotChange(t4);
              a3.dom.features.slots && m3.shadowTree_assignSlotablesForATree(f.tree_rootNode(e4));
              a3.dom.features.steps && v.dom_runInsertionSteps(e4);
              a3.dom.features.customElements && l.Guard.isElementNode(e4) && m3.shadowTree_isConnected(e4) && (l.Guard.isCustomElementNode(e4) ? p.customElement_enqueueACustomElementCallbackReaction(e4, "connectedCallback", []) : p.customElement_tryToUpgrade(e4));
              a3.dom.features.mutationObservers && (r3 || y3.observer_queueTreeMutationRecord(t4, [e4], [], n2, null));
            }(e3, t3, i3);
        }
        function w2(e3, t3, r2) {
          var i3, o2, s4, u3, h4, _2, g2, b3;
          if (a3.dom.rangeList.size !== 0) {
            var x3 = f.tree_index(e3);
            try {
              for (var w3 = n(a3.dom.rangeList), E2 = w3.next(); !E2.done; E2 = w3.next()) {
                var D2 = E2.value;
                f.tree_isDescendantOf(e3, D2._start[0], true) && (D2._start = [t3, x3]), f.tree_isDescendantOf(e3, D2._end[0], true) && (D2._end = [t3, x3]), D2._start[0] === t3 && D2._start[1] > x3 && D2._start[1]--, D2._end[0] === t3 && D2._end[1] > x3 && D2._end[1]--;
              }
            } catch (e4) {
              i3 = { error: e4 };
            } finally {
              try {
                E2 && !E2.done && (o2 = w3.return) && o2.call(w3);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            try {
              for (var S3 = n(a3.dom.rangeList), C = S3.next(); !C.done; C = S3.next()) {
                (D2 = C.value)._start[0] === t3 && D2._start[1] > x3 && (D2._start[1] -= 1), D2._end[0] === t3 && D2._end[1] > x3 && (D2._end[1] -= 1);
              }
            } catch (e4) {
              s4 = { error: e4 };
            } finally {
              try {
                C && !C.done && (u3 = S3.return) && u3.call(S3);
              } finally {
                if (s4)
                  throw s4.error;
              }
            }
          }
          if (a3.dom.features.steps)
            try {
              for (var A = n(d3.nodeIterator_iteratorList()), N = A.next(); !N.done; N = A.next()) {
                var T2 = N.value;
                T2._root._nodeDocument === e3._nodeDocument && v.dom_runNodeIteratorPreRemovingSteps(T2, e3);
              }
            } catch (e4) {
              h4 = { error: e4 };
            } finally {
              try {
                N && !N.done && (_2 = A.return) && _2.call(A);
              } finally {
                if (h4)
                  throw h4.error;
              }
            }
          var O2 = e3._previousSibling, F = e3._nextSibling;
          l.Guard.isDocumentNode(t3) && l.Guard.isElementNode(e3) && (t3._documentElement = null), e3._parent = null, t3._children.delete(e3);
          var k2 = e3._previousSibling, P = e3._nextSibling;
          (e3._previousSibling = null, e3._nextSibling = null, k2 && (k2._nextSibling = P), P && (P._previousSibling = k2), k2 || (t3._firstChild = P), P || (t3._lastChild = k2), a3.dom.features.slots && l.Guard.isSlotable(e3) && e3._assignedSlot !== null && m3.shadowTree_isAssigned(e3) && m3.shadowTree_assignSlotables(e3._assignedSlot), a3.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t3)) && l.Guard.isSlot(t3) && c2.isEmpty(t3._assignedNodes) && m3.shadowTree_signalASlotChange(t3), a3.dom.features.slots) && (f.tree_getFirstDescendantNode(e3, true, false, function(e4) {
            return l.Guard.isSlot(e4);
          }) !== null && (m3.shadowTree_assignSlotablesForATree(f.tree_rootNode(t3)), m3.shadowTree_assignSlotablesForATree(e3)));
          a3.dom.features.steps && v.dom_runRemovingSteps(e3, t3), a3.dom.features.customElements && l.Guard.isCustomElementNode(e3) && p.customElement_enqueueACustomElementCallbackReaction(e3, "disconnectedCallback", []);
          for (var I2 = f.tree_getFirstDescendantNode(e3, false, true); I2 !== null; )
            a3.dom.features.steps && v.dom_runRemovingSteps(I2, e3), a3.dom.features.customElements && l.Guard.isCustomElementNode(I2) && p.customElement_enqueueACustomElementCallbackReaction(I2, "disconnectedCallback", []), I2 = f.tree_getNextDescendantNode(e3, I2, false, true);
          if (a3.dom.features.mutationObservers)
            for (var L2 = f.tree_getFirstAncestorNode(t3, true); L2 !== null; ) {
              try {
                for (var M3 = (g2 = void 0, n(L2._registeredObserverList)), B2 = M3.next(); !B2.done; B2 = M3.next()) {
                  var j = B2.value;
                  j.options.subtree && e3._registeredObserverList.push({ observer: j.observer, options: j.options, source: j });
                }
              } catch (e4) {
                g2 = { error: e4 };
              } finally {
                try {
                  B2 && !B2.done && (b3 = M3.return) && b3.call(M3);
                } finally {
                  if (g2)
                    throw g2.error;
                }
              }
              L2 = f.tree_getNextAncestorNode(t3, L2, true);
            }
          a3.dom.features.mutationObservers && (r2 || y3.observer_queueTreeMutationRecord(t3, [], [e3], O2, F)), a3.dom.features.steps && l.Guard.isTextNode(e3) && v.dom_runChildTextContentChangeSteps(t3);
        }
        t2.mutation_ensurePreInsertionValidity = g, t2.mutation_preInsert = b2, t2.mutation_insert = x2, t2.mutation_append = function(e3, t3) {
          return b2(e3, t3, null);
        }, t2.mutation_replace = function(e3, t3, r2) {
          var i3, o2, l2, c3, h4, p2, d4, m4;
          if (r2._nodeType !== u2.NodeType.Document && r2._nodeType !== u2.NodeType.DocumentFragment && r2._nodeType !== u2.NodeType.Element)
            throw new s3.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + r2.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(r2, t3, true))
            throw new s3.HierarchyRequestError("The node to be inserted cannot be an ancestor of parent node. Node is " + t3.nodeName + ", parent node is " + r2.nodeName + ".");
          if (e3._parent !== r2)
            throw new s3.NotFoundError("The reference child node cannot be found under parent node. Child node is " + e3.nodeName + ", parent node is " + r2.nodeName + ".");
          if (t3._nodeType !== u2.NodeType.DocumentFragment && t3._nodeType !== u2.NodeType.DocumentType && t3._nodeType !== u2.NodeType.Element && t3._nodeType !== u2.NodeType.Text && t3._nodeType !== u2.NodeType.ProcessingInstruction && t3._nodeType !== u2.NodeType.CData && t3._nodeType !== u2.NodeType.Comment)
            throw new s3.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + t3.nodeName + ".");
          if (t3._nodeType === u2.NodeType.Text && r2._nodeType === u2.NodeType.Document)
            throw new s3.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + t3.nodeName + ".");
          if (t3._nodeType === u2.NodeType.DocumentType && r2._nodeType !== u2.NodeType.Document)
            throw new s3.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + r2.nodeName + ".");
          if (r2._nodeType === u2.NodeType.Document) {
            if (t3._nodeType === u2.NodeType.DocumentFragment) {
              var v2 = 0;
              try {
                for (var g2 = n(t3._children), b3 = g2.next(); !b3.done; b3 = g2.next()) {
                  var E2 = b3.value;
                  if (E2._nodeType === u2.NodeType.Element)
                    v2++;
                  else if (E2._nodeType === u2.NodeType.Text)
                    throw new s3.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + E2.nodeName + ".");
                }
              } catch (e4) {
                i3 = { error: e4 };
              } finally {
                try {
                  b3 && !b3.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
              if (v2 > 1)
                throw new s3.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + v2 + " element nodes.");
              if (v2 === 1) {
                try {
                  for (var D2 = n(r2._children), S3 = D2.next(); !S3.done; S3 = D2.next()) {
                    if ((F = S3.value)._nodeType === u2.NodeType.Element && F !== e3)
                      throw new s3.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e4) {
                  l2 = { error: e4 };
                } finally {
                  try {
                    S3 && !S3.done && (c3 = D2.return) && c3.call(D2);
                  } finally {
                    if (l2)
                      throw l2.error;
                  }
                }
                for (var C = e3._nextSibling; C; ) {
                  if (C._nodeType === u2.NodeType.DocumentType)
                    throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  C = C._nextSibling;
                }
              }
            } else if (t3._nodeType === u2.NodeType.Element) {
              try {
                for (var A = n(r2._children), N = A.next(); !N.done; N = A.next()) {
                  if ((F = N.value)._nodeType === u2.NodeType.Element && F !== e3)
                    throw new s3.HierarchyRequestError("Document already has a document element node. Node is " + t3.nodeName + ".");
                }
              } catch (e4) {
                h4 = { error: e4 };
              } finally {
                try {
                  N && !N.done && (p2 = A.return) && p2.call(A);
                } finally {
                  if (h4)
                    throw h4.error;
                }
              }
              for (C = e3._nextSibling; C; ) {
                if (C._nodeType === u2.NodeType.DocumentType)
                  throw new s3.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + t3.nodeName + ".");
                C = C._nextSibling;
              }
            } else if (t3._nodeType === u2.NodeType.DocumentType) {
              try {
                for (var T2 = n(r2._children), O2 = T2.next(); !O2.done; O2 = T2.next()) {
                  var F;
                  if ((F = O2.value)._nodeType === u2.NodeType.DocumentType && F !== e3)
                    throw new s3.HierarchyRequestError("Document already has a document type node. Node is " + t3.nodeName + ".");
                }
              } catch (e4) {
                d4 = { error: e4 };
              } finally {
                try {
                  O2 && !O2.done && (m4 = T2.return) && m4.call(T2);
                } finally {
                  if (d4)
                    throw d4.error;
                }
              }
              for (var k2 = e3._previousSibling; k2; ) {
                if (k2._nodeType === u2.NodeType.Element)
                  throw new s3.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + t3.nodeName + ".");
                k2 = k2._previousSibling;
              }
            }
          }
          var P = e3._nextSibling;
          P === t3 && (P = t3._nextSibling);
          var I2 = e3._previousSibling;
          _.document_adopt(t3, r2._nodeDocument);
          var L2 = [];
          e3._parent !== null && (L2.push(e3), w2(e3, e3._parent, true));
          var M3 = [];
          return t3._nodeType === u2.NodeType.DocumentFragment ? M3 = Array.from(t3._children) : M3.push(t3), x2(t3, r2, P, true), a3.dom.features.mutationObservers && y3.observer_queueTreeMutationRecord(r2, M3, L2, I2, P), e3;
        }, t2.mutation_replaceAll = function(e3, t3) {
          var r2, i3;
          e3 !== null && _.document_adopt(e3, t3._nodeDocument);
          var o2 = Array.from(t3._children), s4 = [];
          e3 && e3._nodeType === u2.NodeType.DocumentFragment ? s4 = Array.from(e3._children) : e3 !== null && s4.push(e3);
          try {
            for (var l2 = n(o2), c3 = l2.next(); !c3.done; c3 = l2.next()) {
              w2(c3.value, t3, true);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (i3 = l2.return) && i3.call(l2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e3 !== null && x2(e3, t3, null, true), a3.dom.features.mutationObservers && y3.observer_queueTreeMutationRecord(t3, s4, o2, null, null);
        }, t2.mutation_preRemove = function(e3, t3) {
          if (e3._parent !== t3)
            throw new s3.NotFoundError("The child node cannot be found under parent node. Child node is " + e3.nodeName + ", parent node is " + t3.nodeName + ".");
          return w2(e3, t3), e3;
        }, t2.mutation_remove = w2;
      }, function(e2, t2, r) {
        "use strict";
        function n(e3) {
          return e3 == null;
        }
        e2.exports.isNothing = n, e2.exports.isObject = function(e3) {
          return typeof e3 == "object" && e3 !== null;
        }, e2.exports.toArray = function(e3) {
          return Array.isArray(e3) ? e3 : n(e3) ? [] : [e3];
        }, e2.exports.repeat = function(e3, t3) {
          var r2, n2 = "";
          for (r2 = 0; r2 < t3; r2 += 1)
            n2 += e3;
          return n2;
        }, e2.exports.isNegativeZero = function(e3) {
          return e3 === 0 && Number.NEGATIVE_INFINITY === 1 / e3;
        }, e2.exports.extend = function(e3, t3) {
          var r2, n2, i2, o;
          if (t3)
            for (r2 = 0, n2 = (o = Object.keys(t3)).length; r2 < n2; r2 += 1)
              e3[i2 = o[r2]] = t3[i2];
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(53), o = r(10);
        function a3(e3, t3, r2) {
          var n2 = [];
          return e3.include.forEach(function(e4) {
            r2 = a3(e4, t3, r2);
          }), e3[t3].forEach(function(e4) {
            r2.forEach(function(t4, r3) {
              t4.tag === e4.tag && t4.kind === e4.kind && n2.push(r3);
            }), r2.push(e4);
          }), r2.filter(function(e4, t4) {
            return n2.indexOf(t4) === -1;
          });
        }
        function s3(e3) {
          this.include = e3.include || [], this.implicit = e3.implicit || [], this.explicit = e3.explicit || [], this.implicit.forEach(function(e4) {
            if (e4.loadKind && e4.loadKind !== "scalar")
              throw new i2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }), this.compiledImplicit = a3(this, "implicit", []), this.compiledExplicit = a3(this, "explicit", []), this.compiledTypeMap = function() {
            var e4, t3, r2 = { scalar: {}, sequence: {}, mapping: {}, fallback: {} };
            function n2(e5) {
              r2[e5.kind][e5.tag] = r2.fallback[e5.tag] = e5;
            }
            for (e4 = 0, t3 = arguments.length; e4 < t3; e4 += 1)
              arguments[e4].forEach(n2);
            return r2;
          }(this.compiledImplicit, this.compiledExplicit);
        }
        s3.DEFAULT = null, s3.create = function() {
          var e3, t3;
          switch (arguments.length) {
            case 1:
              e3 = s3.DEFAULT, t3 = arguments[0];
              break;
            case 2:
              e3 = arguments[0], t3 = arguments[1];
              break;
            default:
              throw new i2("Wrong number of arguments for Schema.create function");
          }
          if (e3 = n.toArray(e3), t3 = n.toArray(t3), !e3.every(function(e4) {
            return e4 instanceof s3;
          }))
            throw new i2("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
          if (!t3.every(function(e4) {
            return e4 instanceof o;
          }))
            throw new i2("Specified list of YAML types (or a single Type object) contains a non-Type object.");
          return new s3({ include: e3, explicit: t3 });
        }, e2.exports = s3;
      }, function(e2, t2) {
        e2.exports = function(e3, t3) {
          return { enumerable: !(1 & e3), configurable: !(2 & e3), writable: !(4 & e3), value: t3 };
        };
      }, function(e2, t2, r) {
        var n = r(8), i2 = r(42), o = "".split;
        e2.exports = n(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(e3) {
          return i2(e3) == "String" ? o.call(e3, "") : Object(e3);
        } : Object;
      }, function(e2, t2) {
        var r = {}.toString;
        e2.exports = function(e3) {
          return r.call(e3).slice(8, -1);
        };
      }, function(e2, t2, r) {
        var n, i2, o, a3 = r(186), s3 = r(11), u2 = r(13), l = r(21), c2 = r(14), h3 = r(57), p = r(45), f = s3.WeakMap;
        if (a3) {
          var d3 = new f(), m3 = d3.get, y3 = d3.has, v = d3.set;
          n = function(e3, t3) {
            return v.call(d3, e3, t3), t3;
          }, i2 = function(e3) {
            return m3.call(d3, e3) || {};
          }, o = function(e3) {
            return y3.call(d3, e3);
          };
        } else {
          var _ = h3("state");
          p[_] = true, n = function(e3, t3) {
            return l(e3, _, t3), t3;
          }, i2 = function(e3) {
            return c2(e3, _) ? e3[_] : {};
          }, o = function(e3) {
            return c2(e3, _);
          };
        }
        e2.exports = { set: n, get: i2, has: o, enforce: function(e3) {
          return o(e3) ? i2(e3) : n(e3, {});
        }, getterFor: function(e3) {
          return function(t3) {
            var r2;
            if (!u2(t3) || (r2 = i2(t3)).type !== e3)
              throw TypeError("Incompatible receiver, " + e3 + " required");
            return r2;
          };
        } };
      }, function(e2, t2) {
        e2.exports = false;
      }, function(e2, t2) {
        e2.exports = {};
      }, function(e2, t2, r) {
        var n = r(120), i2 = r(11), o = function(e3) {
          return typeof e3 == "function" ? e3 : void 0;
        };
        e2.exports = function(e3, t3) {
          return arguments.length < 2 ? o(n[e3]) || o(i2[e3]) : n[e3] && n[e3][t3] || i2[e3] && i2[e3][t3];
        };
      }, function(e2, t2) {
        var r = Math.ceil, n = Math.floor;
        e2.exports = function(e3) {
          return isNaN(e3 = +e3) ? 0 : (e3 > 0 ? n : r)(e3);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(8);
        e2.exports = function(e3, t3) {
          var r2 = [][e3];
          return !!r2 && n(function() {
            r2.call(null, t3 || function() {
              throw 1;
            }, 1);
          });
        };
      }, function(e2, t2) {
        e2.exports = {};
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(220), r(64), r(19), r(65), r(20), r(68), r(66), r(92), r(144), r(22), r(94), r(23);
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(2), s3 = r(69), u2 = r(95), l = r(7), c2 = r(0), h3 = function() {
          function e3(e4) {
            this.level = 0, this._builderOptions = e4;
          }
          return e3.prototype.declaration = function(e4, t3, r2) {
          }, e3.prototype.docType = function(e4, t3, r2) {
          }, e3.prototype.comment = function(e4) {
          }, e3.prototype.text = function(e4) {
          }, e3.prototype.instruction = function(e4, t3) {
          }, e3.prototype.cdata = function(e4) {
          }, e3.prototype.openTagBegin = function(e4) {
          }, e3.prototype.openTagEnd = function(e4, t3, r2) {
          }, e3.prototype.closeTag = function(e4) {
          }, e3.prototype.attributes = function(e4) {
            var t3, r2;
            try {
              for (var i3 = n(e4), o2 = i3.next(); !o2.done; o2 = i3.next()) {
                var a4 = o2.value;
                this.attribute(a4[1] === null ? a4[2] : a4[1] + ":" + a4[2], a4[3]);
              }
            } catch (e5) {
              t3 = { error: e5 };
            } finally {
              try {
                o2 && !o2.done && (r2 = i3.return) && r2.call(i3);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          }, e3.prototype.attribute = function(e4, t3) {
          }, e3.prototype.beginElement = function(e4) {
          }, e3.prototype.endElement = function(e4) {
          }, e3.prototype.serializeNode = function(e4, t3) {
            var r2 = e4._nodeDocument !== void 0 && e4._nodeDocument._hasNamespaces;
            if (this.level = 0, this.currentNode = e4, r2) {
              var n2 = new u2.NamespacePrefixMap();
              n2.set("xml", l.namespace.XML);
              this._serializeNodeNS(e4, null, n2, { value: 1 }, t3);
            } else
              this._serializeNode(e4, t3);
          }, e3.prototype._serializeNodeNS = function(e4, t3, r2, n2, i3) {
            switch (this.currentNode = e4, e4.nodeType) {
              case a3.NodeType.Element:
                this._serializeElementNS(e4, t3, r2, n2, i3);
                break;
              case a3.NodeType.Document:
                this._serializeDocumentNS(e4, t3, r2, n2, i3);
                break;
              case a3.NodeType.Comment:
                this._serializeComment(e4, i3);
                break;
              case a3.NodeType.Text:
                this._serializeText(e4, i3);
                break;
              case a3.NodeType.DocumentFragment:
                this._serializeDocumentFragmentNS(e4, t3, r2, n2, i3);
                break;
              case a3.NodeType.DocumentType:
                this._serializeDocumentType(e4, i3);
                break;
              case a3.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e4, i3);
                break;
              case a3.NodeType.CData:
                this._serializeCData(e4, i3);
                break;
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeNode = function(e4, t3) {
            switch (this.currentNode = e4, e4.nodeType) {
              case a3.NodeType.Element:
                this._serializeElement(e4, t3);
                break;
              case a3.NodeType.Document:
                this._serializeDocument(e4, t3);
                break;
              case a3.NodeType.Comment:
                this._serializeComment(e4, t3);
                break;
              case a3.NodeType.Text:
                this._serializeText(e4, t3);
                break;
              case a3.NodeType.DocumentFragment:
                this._serializeDocumentFragment(e4, t3);
                break;
              case a3.NodeType.DocumentType:
                this._serializeDocumentType(e4, t3);
                break;
              case a3.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e4, t3);
                break;
              case a3.NodeType.CData:
                this._serializeCData(e4, t3);
                break;
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeElementNS = function(t3, r2, i3, a4, s4) {
            var u3, h4, p = [];
            if (s4 && (t3.localName.indexOf(":") !== -1 || !c2.xml_isName(t3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var f = "", d3 = false, m3 = false, y3 = i3.copy(), v = {}, _ = this._recordNamespaceInformation(t3, y3, v), g = r2, b2 = t3.namespaceURI;
            if (g === b2)
              _ !== null && (m3 = true), f = b2 === l.namespace.XML ? "xml:" + t3.localName : t3.localName, this.beginElement(f), this.openTagBegin(f);
            else {
              var x2 = t3.prefix, w2 = null;
              if (x2 === null && b2 === _ || (w2 = y3.get(x2, b2)), x2 === "xmlns") {
                if (s4)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                w2 = x2;
              }
              w2 !== null ? (f = w2 + ":" + t3.localName, _ !== null && _ !== l.namespace.XML && (g = _ || null), this.beginElement(f), this.openTagBegin(f)) : x2 !== null ? (x2 in v && (x2 = this._generatePrefix(b2, y3, a4)), y3.set(x2, b2), f += x2 + ":" + t3.localName, this.beginElement(f), this.openTagBegin(f), p.push([null, "xmlns", x2, this._serializeAttributeValue(b2, s4)]), _ !== null && (g = _ || null)) : _ === null || _ !== null && _ !== b2 ? (m3 = true, f += t3.localName, g = b2, this.beginElement(f), this.openTagBegin(f), p.push([null, null, "xmlns", this._serializeAttributeValue(b2, s4)])) : (f += t3.localName, g = b2, this.beginElement(f), this.openTagBegin(f));
            }
            p.push.apply(p, o(this._serializeAttributesNS(t3, y3, a4, v, m3, s4))), this.attributes(p);
            var E2 = b2 === l.namespace.HTML;
            if (E2 && t3.childNodes.length === 0 && e3._VoidElementNames.has(t3.localName) ? (this.openTagEnd(f, true, true), this.endElement(f), d3 = true) : E2 || t3.childNodes.length !== 0 ? this.openTagEnd(f, false, false) : (this.openTagEnd(f, true, false), this.endElement(f), d3 = true), !d3) {
              if (E2 && t3.localName === "template")
                ;
              else
                try {
                  for (var D2 = n(t3.childNodes), S3 = D2.next(); !S3.done; S3 = D2.next()) {
                    var C = S3.value;
                    this.level++, this._serializeNodeNS(C, g, y3, a4, s4), this.level--;
                  }
                } catch (e4) {
                  u3 = { error: e4 };
                } finally {
                  try {
                    S3 && !S3.done && (h4 = D2.return) && h4.call(D2);
                  } finally {
                    if (u3)
                      throw u3.error;
                  }
                }
              this.closeTag(f), this.endElement(f);
            }
          }, e3.prototype._serializeElement = function(e4, t3) {
            var r2, i3;
            if (t3 && (e4.localName.indexOf(":") !== -1 || !c2.xml_isName(e4.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a4 = e4.localName;
            this.beginElement(a4), this.openTagBegin(a4);
            var s4 = this._serializeAttributes(e4, t3);
            if (this.attributes(s4), e4.hasChildNodes() ? this.openTagEnd(a4, false, false) : (this.openTagEnd(a4, true, false), this.endElement(a4), o2 = true), !o2) {
              try {
                for (var u3 = n(e4._children), l2 = u3.next(); !l2.done; l2 = u3.next()) {
                  var h4 = l2.value;
                  this.level++, this._serializeNode(h4, t3), this.level--;
                }
              } catch (e5) {
                r2 = { error: e5 };
              } finally {
                try {
                  l2 && !l2.done && (i3 = u3.return) && i3.call(u3);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              this.closeTag(a4), this.endElement(a4);
            }
          }, e3.prototype._serializeDocumentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4;
            if (o2 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var u3 = n(e4.childNodes), l2 = u3.next(); !l2.done; l2 = u3.next()) {
                var c3 = l2.value;
                this._serializeNodeNS(c3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                l2 && !l2.done && (s4 = u3.return) && s4.call(u3);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
          }, e3.prototype._serializeDocument = function(e4, t3) {
            var r2, i3;
            if (t3 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var o2 = n(e4._children), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                this._serializeNode(s4, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (i3 = o2.return) && i3.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype._serializeComment = function(e4, t3) {
            if (t3 && (!c2.xml_isLegalChar(e4.data) || e4.data.indexOf("--") !== -1 || e4.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            this.comment(e4.data);
          }, e3.prototype._serializeText = function(e4, t3) {
            if (t3 && !c2.xml_isLegalChar(e4.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            var r2 = e4.data.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            this.text(r2);
          }, e3.prototype._serializeDocumentFragmentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4;
            try {
              for (var u3 = n(e4.childNodes), l2 = u3.next(); !l2.done; l2 = u3.next()) {
                var c3 = l2.value;
                this._serializeNodeNS(c3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                l2 && !l2.done && (s4 = u3.return) && s4.call(u3);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
          }, e3.prototype._serializeDocumentFragment = function(e4, t3) {
            var r2, i3;
            try {
              for (var o2 = n(e4._children), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                this._serializeNode(s4, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (i3 = o2.return) && i3.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype._serializeDocumentType = function(e4, t3) {
            if (t3 && !c2.xml_isPubidChar(e4.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t3 && (!c2.xml_isLegalChar(e4.systemId) || e4.systemId.indexOf('"') !== -1 && e4.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            this.docType(e4.name, e4.publicId, e4.systemId);
          }, e3.prototype._serializeProcessingInstruction = function(e4, t3) {
            if (t3 && (e4.target.indexOf(":") !== -1 || /^xml$/i.test(e4.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t3 && (!c2.xml_isLegalChar(e4.data) || e4.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            this.instruction(e4.target, e4.data);
          }, e3.prototype._serializeCData = function(e4, t3) {
            if (t3 && e4.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            this.cdata(e4.data);
          }, e3.prototype._serializeAttributesNS = function(e4, t3, r2, i3, o2, a4) {
            var u3, h4, p = [], f = a4 ? new s3.LocalNameSet() : void 0;
            try {
              for (var d3 = n(e4.attributes), m3 = d3.next(); !m3.done; m3 = d3.next()) {
                var y3 = m3.value;
                if (a4 || o2 || y3.namespaceURI !== null) {
                  if (a4 && f && f.has(y3.namespaceURI, y3.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  a4 && f && f.set(y3.namespaceURI, y3.localName);
                  var v = y3.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t3.get(y3.prefix, v), v === l.namespace.XMLNS) {
                      if (y3.value === l.namespace.XML || y3.prefix === null && o2 || y3.prefix !== null && (!(y3.localName in i3) || i3[y3.localName] !== y3.value) && t3.has(y3.localName, y3.value))
                        continue;
                      if (a4 && y3.value === l.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (a4 && y3.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y3.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (_ = y3.prefix === null || t3.hasPrefix(y3.prefix) && !t3.has(y3.prefix, v) ? this._generatePrefix(v, t3, r2) : y3.prefix, p.push([null, "xmlns", _, this._serializeAttributeValue(v, a4)]));
                  if (_ !== null && _, a4 && (y3.localName.indexOf(":") !== -1 || !c2.xml_isName(y3.localName) || y3.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p.push([v, _, y3.localName, this._serializeAttributeValue(y3.value, a4)]);
                } else
                  p.push([null, null, y3.localName, this._serializeAttributeValue(y3.value, a4)]);
              }
            } catch (e5) {
              u3 = { error: e5 };
            } finally {
              try {
                m3 && !m3.done && (h4 = d3.return) && h4.call(d3);
              } finally {
                if (u3)
                  throw u3.error;
              }
            }
            return p;
          }, e3.prototype._serializeAttributes = function(e4, t3) {
            var r2, i3, o2 = [], a4 = t3 ? {} : void 0;
            try {
              for (var s4 = n(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var l2 = u3.value;
                if (t3) {
                  if (t3 && a4 && l2.localName in a4)
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  if (t3 && a4 && (a4[l2.localName] = true), t3 && (l2.localName.indexOf(":") !== -1 || !c2.xml_isName(l2.localName)))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t3)]);
                } else
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t3)]);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3.prototype._recordNamespaceInformation = function(e4, t3, r2) {
            var i3, o2, a4 = null;
            try {
              for (var s4 = n(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var c3 = u3.value, h4 = c3.namespaceURI, p = c3.prefix;
                if (h4 === l.namespace.XMLNS) {
                  if (p === null) {
                    a4 = c3.value;
                    continue;
                  }
                  var f = c3.localName, d3 = c3.value;
                  if (d3 === l.namespace.XML)
                    continue;
                  if (d3 === "" && (d3 = null), t3.has(f, d3))
                    continue;
                  t3.set(f, d3), r2[f] = d3 || "";
                }
              }
            } catch (e5) {
              i3 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (o2 = s4.return) && o2.call(s4);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            return a4;
          }, e3.prototype._generatePrefix = function(e4, t3, r2) {
            var n2 = "ns" + r2.value.toString();
            return r2.value++, t3.set(n2, e4), n2;
          }, e3.prototype._serializeAttributeValue = function(e4, t3) {
            if (t3 && e4 !== null && !c2.xml_isLegalChar(e4))
              throw new Error("Invalid characters in attribute value.");
            return e4 === null ? "" : e4.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, e3._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e3;
        }();
        t2.BaseWriter = h3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(6), a3 = r(3), s3 = r(7), u2 = r(29), l = r(17), c2 = r(97);
        function h3() {
          var e3 = o.dom.window;
          e3._mutationObserverMicrotaskQueued || (e3._mutationObserverMicrotaskQueued = true, Promise.resolve().then(function() {
            p();
          }));
        }
        function p() {
          var e3, t3, r2, i3, u3 = o.dom.window;
          u3._mutationObserverMicrotaskQueued = false;
          var l2 = s3.set.clone(u3._mutationObservers), h4 = s3.set.clone(u3._signalSlots);
          s3.set.empty(u3._signalSlots);
          var p2 = function(e4) {
            var t4 = s3.list.clone(e4._recordQueue);
            s3.list.empty(e4._recordQueue);
            for (var r3 = 0; r3 < e4._nodeList.length; r3++) {
              var n2 = e4._nodeList[r3];
              s3.list.remove(n2._registeredObserverList, function(t5) {
                return a3.Guard.isTransientRegisteredObserver(t5) && t5.observer === e4;
              });
            }
            if (!s3.list.isEmpty(t4))
              try {
                e4._callback.call(e4, t4, e4);
              } catch (e5) {
              }
          };
          try {
            for (var f2 = n(l2), d3 = f2.next(); !d3.done; d3 = f2.next()) {
              p2(d3.value);
            }
          } catch (t4) {
            e3 = { error: t4 };
          } finally {
            try {
              d3 && !d3.done && (t3 = f2.return) && t3.call(f2);
            } finally {
              if (e3)
                throw e3.error;
            }
          }
          if (o.dom.features.slots)
            try {
              for (var m3 = n(h4), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                var v = y3.value;
                c2.event_fireAnEvent("slotchange", v, void 0, { bubbles: true });
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                y3 && !y3.done && (i3 = m3.return) && i3.call(m3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
        }
        function f(e3, t3, r2, o2, a4, s4, c3, p2, f2) {
          for (var d3, m3, y3 = /* @__PURE__ */ new Map(), v = l.tree_getFirstAncestorNode(t3, true); v !== null; ) {
            for (var _ = 0; _ < v._registeredObserverList.length; _++) {
              var g = v._registeredObserverList[_], b2 = g.options;
              if ((v === t3 || b2.subtree) && ((e3 !== "attributes" || b2.attributes) && (e3 !== "attributes" || !b2.attributeFilter || b2.attributeFilter.indexOf(r2 || "") && o2 === null) && (e3 !== "characterData" || b2.characterData) && (e3 !== "childList" || b2.childList))) {
                var x2 = g.observer;
                y3.has(x2) || y3.set(x2, null), (e3 === "attributes" && b2.attributeOldValue || e3 === "characterData" && b2.characterDataOldValue) && y3.set(x2, a4);
              }
            }
            v = l.tree_getNextAncestorNode(t3, v, true);
          }
          try {
            for (var w2 = n(y3), E2 = w2.next(); !E2.done; E2 = w2.next()) {
              var D2 = i2(E2.value, 2), S3 = D2[0], C = D2[1], A = u2.create_mutationRecord(e3, t3, u2.create_nodeListStatic(t3, s4), u2.create_nodeListStatic(t3, c3), p2, f2, r2, o2, C);
              S3._recordQueue.push(A);
            }
          } catch (e4) {
            d3 = { error: e4 };
          } finally {
            try {
              E2 && !E2.done && (m3 = w2.return) && m3.call(w2);
            } finally {
              if (d3)
                throw d3.error;
            }
          }
          h3();
        }
        t2.observer_queueAMutationObserverMicrotask = h3, t2.observer_notifyMutationObservers = p, t2.observer_queueMutationRecord = f, t2.observer_queueTreeMutationRecord = function(e3, t3, r2, n2, i3) {
          f("childList", e3, null, null, null, t3, r2, n2, i3);
        }, t2.observer_queueAttributeMutationRecord = function(e3, t3, r2, n2) {
          f("attributes", e3, t3, r2, n2, [], [], null, null);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(6), i2 = r(7), o = r(3), a3 = r(9), s3 = r(29), u2 = r(73), l = r(51), c2 = r(30), h3 = r(37), p = r(106);
        function f(e3, t3, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t3, e3._localName, e3._namespace, e3._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t3) && u2.customElement_enqueueACustomElementCallbackReaction(t3, "attributeChangedCallback", [e3._localName, e3._value, r2, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(t3, e3._localName, e3._value, r2, e3._namespace), e3._value = r2;
        }
        function d3(e3, t3) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t3, e3._localName, e3._namespace, null), n.dom.features.customElements && o.Guard.isCustomElementNode(t3) && u2.customElement_enqueueACustomElementCallbackReaction(t3, "attributeChangedCallback", [e3._localName, null, e3._value, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(t3, e3._localName, null, e3._value, e3._namespace), t3._attributeList._asArray().push(e3), e3._element = t3, t3._nodeDocument._hasNamespaces || e3._namespace === null && e3._namespacePrefix === null && e3._localName !== "xmlns" || (t3._nodeDocument._hasNamespaces = true);
        }
        function m3(e3, t3) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t3, e3._localName, e3._namespace, e3._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t3) && u2.customElement_enqueueACustomElementCallbackReaction(t3, "attributeChangedCallback", [e3._localName, e3._value, null, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(t3, e3._localName, e3._value, null, e3._namespace);
          var r2 = t3._attributeList._asArray().indexOf(e3);
          t3._attributeList._asArray().splice(r2, 1), e3._element = null;
        }
        function y3(e3, t3, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(r2, e3._localName, e3._namespace, e3._value), n.dom.features.customElements && o.Guard.isCustomElementNode(r2) && u2.customElement_enqueueACustomElementCallbackReaction(r2, "attributeChangedCallback", [e3._localName, e3._value, t3._value, e3._namespace]), n.dom.features.steps && c2.dom_runAttributeChangeSteps(r2, e3._localName, e3._value, t3._value, e3._namespace);
          var i3 = r2._attributeList._asArray().indexOf(e3);
          i3 !== -1 && (r2._attributeList._asArray()[i3] = t3), e3._element = null, t3._element = r2, r2._nodeDocument._hasNamespaces || t3._namespace === null && t3._namespacePrefix === null && t3._localName !== "xmlns" || (r2._nodeDocument._hasNamespaces = true);
        }
        function v(e3, t3) {
          return t3._namespace === i2.namespace.HTML && t3._nodeDocument._type === "html" && (e3 = e3.toLowerCase()), t3._attributeList._asArray().find(function(t4) {
            return t4._qualifiedName === e3;
          }) || null;
        }
        function _(e3, t3, r2) {
          var n2 = e3 || null;
          return r2._attributeList._asArray().find(function(e4) {
            return e4._namespace === n2 && e4._localName === t3;
          }) || null;
        }
        t2.element_has = function(e3, t3) {
          return t3._attributeList._asArray().indexOf(e3) !== -1;
        }, t2.element_change = f, t2.element_append = d3, t2.element_remove = m3, t2.element_replace = y3, t2.element_getAnAttributeByName = v, t2.element_getAnAttributeByNamespaceAndLocalName = _, t2.element_getAnAttributeValue = function(e3, t3, r2) {
          r2 === void 0 && (r2 = "");
          var n2 = _(r2, t3, e3);
          return n2 === null ? "" : n2._value;
        }, t2.element_setAnAttribute = function(e3, t3) {
          if (e3._element !== null && e3._element !== t3)
            throw new a3.InUseAttributeError("This attribute already exists in the document: " + e3._qualifiedName + " as a child of " + e3._element._qualifiedName + ".");
          var r2 = _(e3._namespace || "", e3._localName, t3);
          return r2 === e3 ? e3 : (r2 !== null ? y3(r2, e3, t3) : d3(e3, t3), r2);
        }, t2.element_setAnAttributeValue = function(e3, t3, r2, n2, i3) {
          n2 === void 0 && (n2 = null), i3 === void 0 && (i3 = null);
          var o2 = _(i3 || "", t3, e3);
          if (o2 === null) {
            var a4 = s3.create_attr(e3._nodeDocument, t3);
            return a4._namespace = i3, a4._namespacePrefix = n2, a4._value = r2, void d3(a4, e3);
          }
          f(o2, e3, r2);
        }, t2.element_removeAnAttributeByName = function(e3, t3) {
          var r2 = v(e3, t3);
          return r2 !== null && m3(r2, t3), r2;
        }, t2.element_removeAnAttributeByNamespaceAndLocalName = function(e3, t3, r2) {
          var n2 = _(e3, t3, r2);
          return n2 !== null && m3(n2, r2), n2;
        }, t2.element_createAnElement = function(e3, t3, r2, o2, l2, c3) {
          o2 === void 0 && (o2 = null), l2 === void 0 && (l2 = null), c3 === void 0 && (c3 = false);
          var h4 = null;
          if (!n.dom.features.customElements)
            return (h4 = s3.create_element(e3, t3, r2, o2))._customElementState = "uncustomized", h4._customElementDefinition = null, h4._is = l2, h4;
          var f2 = u2.customElement_lookUpACustomElementDefinition(e3, r2, t3, l2);
          if (f2 !== null && f2.name !== f2.localName)
            (h4 = new (p.document_elementInterface(t3, i2.namespace.HTML))())._localName = t3, h4._namespace = i2.namespace.HTML, h4._namespacePrefix = o2, h4._customElementState = "undefined", h4._customElementDefinition = null, h4._is = l2, h4._nodeDocument = e3, c3 ? u2.customElement_upgrade(f2, h4) : u2.customElement_enqueueACustomElementUpgradeReaction(h4, f2);
          else if (f2 !== null)
            if (c3)
              try {
                var d4 = new (0, f2.constructor)();
                if (console.assert(d4._customElementState !== void 0), console.assert(d4._customElementDefinition !== void 0), console.assert(d4._namespace === i2.namespace.HTML), d4._attributeList.length !== 0)
                  throw new a3.NotSupportedError("Custom element already has attributes.");
                if (d4._children.size !== 0)
                  throw new a3.NotSupportedError("Custom element already has child nodes.");
                if (d4._parent !== null)
                  throw new a3.NotSupportedError("Custom element already has a parent node.");
                if (d4._nodeDocument !== e3)
                  throw new a3.NotSupportedError("Custom element is already in a document.");
                if (d4._localName !== t3)
                  throw new a3.NotSupportedError("Custom element has a different local name.");
                d4._namespacePrefix = o2, d4._is = null;
              } catch (r3) {
                (h4 = s3.create_htmlUnknownElement(e3, t3, i2.namespace.HTML, o2))._customElementState = "failed", h4._customElementDefinition = null, h4._is = null;
              }
            else
              (h4 = s3.create_htmlElement(e3, t3, i2.namespace.HTML, o2))._customElementState = "undefined", h4._customElementDefinition = null, h4._is = null, u2.customElement_enqueueACustomElementUpgradeReaction(h4, f2);
          else {
            (h4 = new (p.document_elementInterface(t3, r2))())._localName = t3, h4._namespace = r2, h4._namespacePrefix = o2, h4._customElementState = "uncustomized", h4._customElementDefinition = null, h4._is = l2, h4._nodeDocument = e3, r2 !== i2.namespace.HTML || l2 === null && !u2.customElement_isValidCustomElementName(t3) || (h4._customElementState = "undefined");
          }
          if (h4 === null)
            throw new Error("Unable to create element.");
          return h4;
        }, t2.element_insertAdjacent = function(e3, t3, r2) {
          switch (t3.toLowerCase()) {
            case "beforebegin":
              return e3._parent === null ? null : h3.mutation_preInsert(r2, e3._parent, e3);
            case "afterbegin":
              return h3.mutation_preInsert(r2, e3, e3._firstChild);
            case "beforeend":
              return h3.mutation_preInsert(r2, e3, null);
            case "afterend":
              return e3._parent === null ? null : h3.mutation_preInsert(r2, e3._parent, e3._nextSibling);
            default:
              throw new a3.SyntaxError(`Invalid 'where' argument. "beforebegin", "afterbegin", "beforeend" or "afterend" expected`);
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        function n(e3, t3) {
          Error.call(this), this.name = "YAMLException", this.reason = e3, this.mark = t3, this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : ""), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack || "";
        }
        n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n.prototype.toString = function(e3) {
          var t3 = this.name + ": ";
          return t3 += this.reason || "(unknown reason)", !e3 && this.mark && (t3 += " " + this.mark.toString()), t3;
        }, e2.exports = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ include: [r(181)], implicit: [r(293), r(294)], explicit: [r(295), r(296), r(297), r(298)] });
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(79), o = r(40), a3 = r(24), s3 = r(56), u2 = r(14), l = r(115), c2 = Object.getOwnPropertyDescriptor;
        t2.f = n ? c2 : function(e3, t3) {
          if (e3 = a3(e3), t3 = s3(t3, true), l)
            try {
              return c2(e3, t3);
            } catch (e4) {
            }
          if (u2(e3, t3))
            return o(!i2.f.call(e3, t3), e3[t3]);
        };
      }, function(e2, t2, r) {
        var n = r(13);
        e2.exports = function(e3, t3) {
          if (!n(e3))
            return e3;
          var r2, i2;
          if (t3 && typeof (r2 = e3.toString) == "function" && !n(i2 = r2.call(e3)))
            return i2;
          if (typeof (r2 = e3.valueOf) == "function" && !n(i2 = r2.call(e3)))
            return i2;
          if (!t3 && typeof (r2 = e3.toString) == "function" && !n(i2 = r2.call(e3)))
            return i2;
          throw TypeError("Can't convert object to primitive value");
        };
      }, function(e2, t2, r) {
        var n = r(81), i2 = r(58), o = n("keys");
        e2.exports = function(e3) {
          return o[e3] || (o[e3] = i2(e3));
        };
      }, function(e2, t2) {
        var r = 0, n = Math.random();
        e2.exports = function(e3) {
          return "Symbol(" + String(e3 === void 0 ? "" : e3) + ")_" + (++r + n).toString(36);
        };
      }, function(e2, t2, r) {
        var n = r(42);
        e2.exports = Array.isArray || function(e3) {
          return n(e3) == "Array";
        };
      }, function(e2, t2, r) {
        var n, i2 = r(18), o = r(188), a3 = r(84), s3 = r(45), u2 = r(189), l = r(116), c2 = r(57), h3 = c2("IE_PROTO"), p = function() {
        }, f = function(e3) {
          return "<script>" + e3 + "<\/script>";
        }, d3 = function() {
          try {
            n = document.domain && new ActiveXObject("htmlfile");
          } catch (e4) {
          }
          var e3, t3;
          d3 = n ? function(e4) {
            e4.write(f("")), e4.close();
            var t4 = e4.parentWindow.Object;
            return e4 = null, t4;
          }(n) : ((t3 = l("iframe")).style.display = "none", u2.appendChild(t3), t3.src = String("javascript:"), (e3 = t3.contentWindow.document).open(), e3.write(f("document.F=Object")), e3.close(), e3.F);
          for (var r2 = a3.length; r2--; )
            delete d3.prototype[a3[r2]];
          return d3();
        };
        s3[h3] = true, e2.exports = Object.create || function(e3, t3) {
          var r2;
          return e3 !== null ? (p.prototype = i2(e3), r2 = new p(), p.prototype = null, r2[h3] = e3) : r2 = d3(), t3 === void 0 ? r2 : o(r2, t3);
        };
      }, function(e2, t2, r) {
        var n = r(121), i2 = r(84);
        e2.exports = Object.keys || function(e3) {
          return n(e3, i2);
        };
      }, function(e2, t2, r) {
        var n = r(15).f, i2 = r(14), o = r(5)("toStringTag");
        e2.exports = function(e3, t3, r2) {
          e3 && !i2(e3 = r2 ? e3 : e3.prototype, o) && n(e3, o, { configurable: true, value: t3 });
        };
      }, function(e2, t2, r) {
        var n = r(8), i2 = r(5), o = r(129), a3 = i2("species");
        e2.exports = function(e3) {
          return o >= 51 || !n(function() {
            var t3 = [];
            return (t3.constructor = {})[a3] = function() {
              return { foo: 1 };
            }, t3[e3](Boolean).foo !== 1;
          });
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(122).indexOf, o = r(48), a3 = r(28), s3 = [].indexOf, u2 = !!s3 && 1 / [1].indexOf(1, -0) < 0, l = o("indexOf"), c2 = a3("indexOf", { ACCESSORS: true, 1: 0 });
        n({ target: "Array", proto: true, forced: u2 || !l || !c2 }, { indexOf: function(e3) {
          return u2 ? s3.apply(this, arguments) || 0 : i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(15).f, o = Function.prototype, a3 = o.toString, s3 = /^\s*function ([^ (]*)/;
        n && !("name" in o) && i2(o, "name", { configurable: true, get: function() {
          try {
            return a3.call(this).match(s3)[1];
          } catch (e3) {
            return "";
          }
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(25), i2 = r(18), o = r(8), a3 = r(136), s3 = RegExp.prototype, u2 = s3.toString, l = o(function() {
          return u2.call({ source: "a", flags: "b" }) != "/a/b";
        }), c2 = u2.name != "toString";
        (l || c2) && n(RegExp.prototype, "toString", function() {
          var e3 = i2(this), t3 = String(e3.source), r2 = e3.flags;
          return "/" + t3 + "/" + String(r2 === void 0 && e3 instanceof RegExp && !("flags" in s3) ? a3.call(e3) : r2);
        }, { unsafe: true });
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(138), r(20), r(66), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(1), s3 = r(2), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._writerOptions = a3.applyDefaults(r2, { format: "object", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            return this._currentList = [], this._currentIndex = 0, this._listRegister = [this._currentList], this.serializeNode(e4, this._writerOptions.wellFormed), this._process(this._currentList, this._writerOptions);
          }, t3.prototype._process = function(e4, t4) {
            var r2, n2, i3, o2, u3, l, c2;
            if (e4.length === 0)
              return {};
            for (var h3 = {}, p = false, f = 0, d3 = 0, m3 = 0, y3 = 0, v = 0; v < e4.length; v++) {
              var _ = e4[v];
              switch (I2 = Object.keys(_)[0]) {
                case "@":
                  continue;
                case "#":
                  f++;
                  break;
                case "!":
                  d3++;
                  break;
                case "?":
                  m3++;
                  break;
                case "$":
                  y3++;
                  break;
                default:
                  h3[I2] ? p = true : h3[I2] = true;
              }
            }
            var g = this._getAttrKey(), b2 = this._getNodeKey(s3.NodeType.Text), x2 = this._getNodeKey(s3.NodeType.Comment), w2 = this._getNodeKey(s3.NodeType.ProcessingInstruction), E2 = this._getNodeKey(s3.NodeType.CData);
            if (f === 1 && e4.length === 1 && a3.isString(e4[0]["#"]))
              return e4[0]["#"];
            if (p) {
              var D2 = {};
              for (v = 0; v < e4.length; v++) {
                _ = e4[v];
                if ((I2 = Object.keys(_)[0]) === "@") {
                  var S3 = _["@"];
                  (L2 = Object.keys(S3)).length === 1 ? D2[g + L2[0]] = S3[L2[0]] : D2[g] = _["@"];
                }
              }
              var C = [];
              for (v = 0; v < e4.length; v++) {
                _ = e4[v];
                switch (I2 = Object.keys(_)[0]) {
                  case "@":
                    break;
                  case "#":
                    C.push(((r2 = {})[b2] = _["#"], r2));
                    break;
                  case "!":
                    C.push(((n2 = {})[x2] = _["!"], n2));
                    break;
                  case "?":
                    C.push(((i3 = {})[w2] = _["?"], i3));
                    break;
                  case "$":
                    C.push(((o2 = {})[E2] = _.$, o2));
                    break;
                  default:
                    if ((B2 = _)[I2].length !== 0 && a3.isArray(B2[I2][0])) {
                      for (var A = [], N = B2[I2], T2 = 0; T2 < N.length; T2++)
                        A.push(this._process(N[T2], t4));
                      C.push(((u3 = {})[I2] = A, u3));
                    } else
                      t4.verbose ? C.push(((l = {})[I2] = [this._process(B2[I2], t4)], l)) : C.push(((c2 = {})[I2] = this._process(B2[I2], t4), c2));
                }
              }
              return D2[b2] = C, D2;
            }
            var O2 = 1, F = 1, k2 = 1, P = 1;
            for (D2 = {}, v = 0; v < e4.length; v++) {
              var I2;
              _ = e4[v];
              switch (I2 = Object.keys(_)[0]) {
                case "@":
                  S3 = _["@"];
                  var L2 = Object.keys(S3);
                  if (t4.group && L2.length !== 1)
                    D2[g] = S3;
                  else
                    for (var M3 in S3)
                      D2[g + M3] = S3[M3];
                  break;
                case "#":
                  O2 = this._processSpecItem(_["#"], D2, t4.group, b2, f, O2);
                  break;
                case "!":
                  F = this._processSpecItem(_["!"], D2, t4.group, x2, d3, F);
                  break;
                case "?":
                  k2 = this._processSpecItem(_["?"], D2, t4.group, w2, m3, k2);
                  break;
                case "$":
                  P = this._processSpecItem(_.$, D2, t4.group, E2, y3, P);
                  break;
                default:
                  var B2;
                  if ((B2 = _)[I2].length !== 0 && a3.isArray(B2[I2][0])) {
                    A = [], N = B2[I2];
                    for (var j = 0; j < N.length; j++)
                      A.push(this._process(N[j], t4));
                    D2[I2] = A;
                  } else
                    t4.verbose ? D2[I2] = [this._process(B2[I2], t4)] : D2[I2] = this._process(B2[I2], t4);
              }
            }
            return D2;
          }, t3.prototype._processSpecItem = function(e4, t4, r2, n2, i3, s4) {
            var u3, l;
            if (!r2 && a3.isArray(e4) && i3 + e4.length > 2)
              try {
                for (var c2 = o(e4), h3 = c2.next(); !h3.done; h3 = c2.next()) {
                  var p = h3.value;
                  t4[n2 + (s4++).toString()] = p;
                }
              } catch (e5) {
                u3 = { error: e5 };
              } finally {
                try {
                  h3 && !h3.done && (l = c2.return) && l.call(c2);
                } finally {
                  if (u3)
                    throw u3.error;
                }
              }
            else
              t4[i3 > 1 ? n2 + (s4++).toString() : n2] = e4;
            return s4;
          }, t3.prototype.beginElement = function(e4) {
            var t4, r2, n2 = [];
            if (this._currentList.length === 0)
              this._currentList.push(((t4 = {})[e4] = n2, t4));
            else {
              var i3 = this._currentList[this._currentList.length - 1];
              if (this._isElementNode(i3, e4))
                if (i3[e4].length !== 0 && a3.isArray(i3[e4][0]))
                  i3[e4].push(n2);
                else
                  i3[e4] = [i3[e4], n2];
              else
                this._currentList.push(((r2 = {})[e4] = n2, r2));
            }
            this._currentIndex++, this._listRegister.length > this._currentIndex ? this._listRegister[this._currentIndex] = n2 : this._listRegister.push(n2), this._currentList = n2;
          }, t3.prototype.endElement = function() {
            this._currentList = this._listRegister[--this._currentIndex];
          }, t3.prototype.attribute = function(e4, t4) {
            var r2, n2;
            if (this._currentList.length === 0)
              this._currentList.push({ "@": (r2 = {}, r2[e4] = t4, r2) });
            else {
              var i3 = this._currentList[this._currentList.length - 1];
              this._isAttrNode(i3) ? i3["@"][e4] = t4 : this._currentList.push({ "@": (n2 = {}, n2[e4] = t4, n2) });
            }
          }, t3.prototype.comment = function(e4) {
            if (this._currentList.length === 0)
              this._currentList.push({ "!": e4 });
            else {
              var t4 = this._currentList[this._currentList.length - 1];
              this._isCommentNode(t4) ? a3.isArray(t4["!"]) ? t4["!"].push(e4) : t4["!"] = [t4["!"], e4] : this._currentList.push({ "!": e4 });
            }
          }, t3.prototype.text = function(e4) {
            if (this._currentList.length === 0)
              this._currentList.push({ "#": e4 });
            else {
              var t4 = this._currentList[this._currentList.length - 1];
              this._isTextNode(t4) ? a3.isArray(t4["#"]) ? t4["#"].push(e4) : t4["#"] = [t4["#"], e4] : this._currentList.push({ "#": e4 });
            }
          }, t3.prototype.instruction = function(e4, t4) {
            var r2 = t4 === "" ? e4 : e4 + " " + t4;
            if (this._currentList.length === 0)
              this._currentList.push({ "?": r2 });
            else {
              var n2 = this._currentList[this._currentList.length - 1];
              this._isInstructionNode(n2) ? a3.isArray(n2["?"]) ? n2["?"].push(r2) : n2["?"] = [n2["?"], r2] : this._currentList.push({ "?": r2 });
            }
          }, t3.prototype.cdata = function(e4) {
            if (this._currentList.length === 0)
              this._currentList.push({ $: e4 });
            else {
              var t4 = this._currentList[this._currentList.length - 1];
              this._isCDATANode(t4) ? a3.isArray(t4.$) ? t4.$.push(e4) : t4.$ = [t4.$, e4] : this._currentList.push({ $: e4 });
            }
          }, t3.prototype._isAttrNode = function(e4) {
            return "@" in e4;
          }, t3.prototype._isTextNode = function(e4) {
            return "#" in e4;
          }, t3.prototype._isCommentNode = function(e4) {
            return "!" in e4;
          }, t3.prototype._isInstructionNode = function(e4) {
            return "?" in e4;
          }, t3.prototype._isCDATANode = function(e4) {
            return "$" in e4;
          }, t3.prototype._isElementNode = function(e4, t4) {
            return t4 in e4;
          }, t3.prototype._getAttrKey = function() {
            return this._builderOptions.convert.att;
          }, t3.prototype._getNodeKey = function(e4) {
            switch (e4) {
              case s3.NodeType.Comment:
                return this._builderOptions.convert.comment;
              case s3.NodeType.Text:
                return this._builderOptions.convert.text;
              case s3.NodeType.ProcessingInstruction:
                return this._builderOptions.convert.ins;
              case s3.NodeType.CData:
                return this._builderOptions.convert.cdata;
              default:
                throw new Error("Invalid node type.");
            }
          }, t3;
        }(r(50).BaseWriter);
        t2.ObjectWriter = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(93);
        n({ target: "RegExp", proto: true, forced: /./.exec !== i2 }, { exec: i2 });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
            this._items = {}, this._nullItems = {};
          }
          return e3.prototype.set = function(e4, t3) {
            e4 === null ? this._nullItems[t3] = true : (this._items[e4] || (this._items[e4] = {}), this._items[e4][t3] = true);
          }, e3.prototype.has = function(e4, t3) {
            return e4 === null ? this._nullItems[t3] === true : !!this._items[e4] && this._items[e4][t3] === true;
          }, e3;
        }();
        t2.LocalNameSet = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(9), o = r(3), a3 = r(0), s3 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "_eventListenerList", { get: function() {
            return this.__eventListenerList || (this.__eventListenerList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_eventHandlerMap", { get: function() {
            return this.__eventHandlerMap || (this.__eventHandlerMap = {});
          }, enumerable: true, configurable: true }), e3.prototype.addEventListener = function(e4, t3, r2) {
            r2 === void 0 && (r2 = { passive: false, once: false, capture: false });
            var i3, s4 = n(a3.eventTarget_flattenMore(r2), 3), u2 = s4[0], l = s4[1], c2 = s4[2];
            t3 && (i3 = o.Guard.isEventListener(t3) ? t3 : { handleEvent: t3 }, a3.eventTarget_addEventListener(this, { type: e4, callback: i3, capture: u2, passive: l, once: c2, removed: false }));
          }, e3.prototype.removeEventListener = function(e4, t3, r2) {
            r2 === void 0 && (r2 = { capture: false });
            var n2 = a3.eventTarget_flatten(r2);
            if (t3)
              for (var i3 = 0; i3 < this._eventListenerList.length; i3++) {
                var s4 = this._eventListenerList[i3];
                if (s4.type === e4 && s4.capture === n2) {
                  if (o.Guard.isEventListener(t3) && s4.callback === t3) {
                    a3.eventTarget_removeEventListener(this, s4, i3);
                    break;
                  }
                  if (t3 && s4.callback.handleEvent === t3) {
                    a3.eventTarget_removeEventListener(this, s4, i3);
                    break;
                  }
                }
              }
          }, e3.prototype.dispatchEvent = function(e4) {
            if (e4._dispatchFlag || !e4._initializedFlag)
              throw new i2.InvalidStateError();
            return e4._isTrusted = false, a3.event_dispatch(e4, this);
          }, e3.prototype._getTheParent = function(e4) {
            return null;
          }, e3;
        }();
        t2.EventTargetImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(34), a3 = r(0), s3 = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this) || this;
            return r2._data = t4, r2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "data", { get: function() {
            return this._data;
          }, set: function(e4) {
            a3.characterData_replaceData(this, 0, this._data.length, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "length", { get: function() {
            return this._data.length;
          }, enumerable: true, configurable: true }), t3.prototype.substringData = function(e4, t4) {
            return a3.characterData_substringData(this, e4, t4);
          }, t3.prototype.appendData = function(e4) {
            return a3.characterData_replaceData(this, this._data.length, 0, e4);
          }, t3.prototype.insertData = function(e4, t4) {
            a3.characterData_replaceData(this, e4, 0, t4);
          }, t3.prototype.deleteData = function(e4, t4) {
            a3.characterData_replaceData(this, e4, t4, "");
          }, t3.prototype.replaceData = function(e4, t4, r2) {
            a3.characterData_replaceData(this, e4, t4, r2);
          }, Object.defineProperty(t3.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.before = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.after = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.replaceWith = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3;
        }(o.NodeImpl);
        t2.CharacterDataImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(3), u2 = r(1), l = r(17), c2 = r(51);
        function h3(e3) {
          a3.dom.window._signalSlots.add(e3), c2.observer_queueAMutationObserverMicrotask();
        }
        function p(e3, t3) {
          t3 === void 0 && (t3 = false);
          var r2 = s3.Cast.asNode(e3)._parent;
          if (r2 === null)
            return null;
          var n2 = r2._shadowRoot || null;
          if (n2 === null)
            return null;
          if (t3 && n2._mode !== "open")
            return null;
          for (var i3 = l.tree_getFirstDescendantNode(n2, false, true, function(e4) {
            return s3.Guard.isSlot(e4);
          }); i3 !== null; ) {
            if (i3._name === e3._name)
              return i3;
            i3 = l.tree_getNextDescendantNode(n2, i3, false, true, function(e4) {
              return s3.Guard.isSlot(e4);
            });
          }
          return null;
        }
        function f(e3) {
          var t3, r2, i3 = [], o2 = l.tree_rootNode(e3);
          if (!s3.Guard.isShadowRoot(o2))
            return i3;
          var a4 = o2._host;
          try {
            for (var u3 = n(a4._children), c3 = u3.next(); !c3.done; c3 = u3.next()) {
              var h4 = c3.value;
              if (s3.Guard.isSlotable(h4))
                p(h4) === e3 && i3.push(h4);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (r2 = u3.return) && r2.call(u3);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function d3(e3) {
          var t3, r2, i3 = f(e3);
          if (i3.length === e3._assignedNodes.length) {
            for (var o2 = true, a4 = 0; a4 < i3.length; a4++)
              if (i3[a4] !== e3._assignedNodes[a4]) {
                o2 = false;
                break;
              }
            o2 || h3(e3);
          }
          e3._assignedNodes = i3;
          try {
            for (var s4 = n(i3), u3 = s4.next(); !u3.done; u3 = s4.next()) {
              u3.value._assignedSlot = e3;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              u3 && !u3.done && (r2 = s4.return) && r2.call(s4);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
        }
        t2.shadowTree_signalASlotChange = h3, t2.shadowTree_isConnected = function(e3) {
          return s3.Guard.isDocumentNode(l.tree_rootNode(e3, true));
        }, t2.shadowTree_isAssigned = function(e3) {
          return e3._assignedSlot !== null;
        }, t2.shadowTree_findASlot = p, t2.shadowTree_findSlotables = f, t2.shadowTree_findFlattenedSlotables = function e3(t3) {
          var r2, i3, a4, c3, h4 = [], p2 = l.tree_rootNode(t3);
          if (!s3.Guard.isShadowRoot(p2))
            return h4;
          var d4 = f(t3);
          if (u2.isEmpty(d4))
            try {
              for (var m3 = n(t3._children), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                var v = y3.value;
                s3.Guard.isSlotable(v) && d4.push(v);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                y3 && !y3.done && (i3 = m3.return) && i3.call(m3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          try {
            for (var _ = n(d4), g = _.next(); !g.done; g = _.next()) {
              var b2 = g.value;
              if (s3.Guard.isSlot(b2) && s3.Guard.isShadowRoot(l.tree_rootNode(b2))) {
                var x2 = e3(b2);
                h4.push.apply(h4, o(x2));
              } else
                h4.push(b2);
            }
          } catch (e4) {
            a4 = { error: e4 };
          } finally {
            try {
              g && !g.done && (c3 = _.return) && c3.call(_);
            } finally {
              if (a4)
                throw a4.error;
            }
          }
          return h4;
        }, t2.shadowTree_assignSlotables = d3, t2.shadowTree_assignSlotablesForATree = function(e3) {
          for (var t3 = l.tree_getFirstDescendantNode(e3, true, false, function(e4) {
            return s3.Guard.isSlot(e4);
          }); t3 !== null; )
            d3(t3), t3 = l.tree_getNextDescendantNode(e3, t3, true, false, function(e4) {
              return s3.Guard.isSlot(e4);
            });
        }, t2.shadowTree_assignASlot = function(e3) {
          var t3 = p(e3);
          t3 !== null && d3(t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = /[a-z]([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*-([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*/, i2 = /* @__PURE__ */ new Set(["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"]), o = /* @__PURE__ */ new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]), a3 = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), s3 = /* @__PURE__ */ new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]);
        t2.customElement_isValidCustomElementName = function(e3) {
          return !!n.test(e3) && !i2.has(e3);
        }, t2.customElement_isValidElementName = function(e3) {
          return o.has(e3);
        }, t2.customElement_isVoidElementName = function(e3) {
          return a3.has(e3);
        }, t2.customElement_isValidShadowHostName = function(e3) {
          return s3.has(e3);
        }, t2.customElement_enqueueACustomElementUpgradeReaction = function(e3, t3) {
        }, t2.customElement_enqueueACustomElementCallbackReaction = function(e3, t3, r2) {
        }, t2.customElement_upgrade = function(e3, t3) {
        }, t2.customElement_tryToUpgrade = function(e3) {
        }, t2.customElement_lookUpACustomElementDefinition = function(e3, t3, r2, n2) {
          return null;
        };
      }, function(e2, t2, r) {
        r(4)({ target: "String", proto: true }, { repeat: r(259) });
      }, function(e2, t2, r) {
        "use strict";
        r(278), r(68), r(179), r(94), Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(109), i2 = function() {
          function e3(e4) {
            this._builderOptions = e4, e4.parser && Object.assign(this, e4.parser);
          }
          return e3.prototype._docType = function(e4, t3, r2, n2) {
            return e4.dtd({ name: t3, pubID: r2, sysID: n2 });
          }, e3.prototype._comment = function(e4, t3) {
            return e4.com(t3);
          }, e3.prototype._text = function(e4, t3) {
            return e4.txt(t3);
          }, e3.prototype._instruction = function(e4, t3, r2) {
            return e4.ins(t3, r2);
          }, e3.prototype._cdata = function(e4, t3) {
            return e4.dat(t3);
          }, e3.prototype._element = function(e4, t3, r2) {
            return t3 === void 0 ? e4.ele(r2) : e4.ele(t3, r2);
          }, e3.prototype._attribute = function(e4, t3, r2, n2) {
            return t3 === void 0 ? e4.att(r2, n2) : e4.att(t3, r2, n2);
          }, e3.prototype._sanitize = function(e4) {
            return n.sanitizeInput(e4, this._builderOptions.invalidCharReplacement);
          }, e3.prototype._decodeText = function(t3) {
            return t3 == null ? t3 : t3.replace(/&(quot|amp|apos|lt|gt);/g, function(t4, r2) {
              return e3._entityTable[r2];
            }).replace(/&#(?:x([a-fA-F0-9]+)|([0-9]+));/g, function(e4, t4, r2) {
              return String.fromCodePoint(parseInt(t4 || r2, t4 ? 16 : 10));
            });
          }, e3.prototype._decodeAttributeValue = function(e4) {
            return this._decodeText(e4);
          }, e3.prototype.parse = function(e4, t3) {
            return this._parse(e4, t3);
          }, e3.prototype.docType = function(e4, t3, r2, n2) {
            return this._docType(e4, t3, r2, n2);
          }, e3.prototype.comment = function(e4, t3) {
            return this._comment(e4, t3);
          }, e3.prototype.text = function(e4, t3) {
            return this._text(e4, t3);
          }, e3.prototype.instruction = function(e4, t3, r2) {
            return this._instruction(e4, t3, r2);
          }, e3.prototype.cdata = function(e4, t3) {
            return this._cdata(e4, t3);
          }, e3.prototype.element = function(e4, t3, r2) {
            return this._element(e4, t3, r2);
          }, e3.prototype.attribute = function(e4, t3, r2, n2) {
            return this._attribute(e4, t3, r2, n2);
          }, e3.prototype.sanitize = function(e4) {
            return this._sanitize(e4);
          }, e3._entityTable = { lt: "<", gt: ">", amp: "&", quot: '"', apos: "'" }, e3;
        }();
        t2.BaseReader = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = n.DEFAULT = new n({ include: [r(54)], explicit: [r(299), r(300), r(301)] });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(185);
        t2.XMLBuilderImpl = n.XMLBuilderImpl;
        var i2 = r(304);
        t2.XMLBuilderCBImpl = i2.XMLBuilderCBImpl;
        var o = r(183);
        t2.builder = o.builder, t2.create = o.create, t2.fragment = o.fragment, t2.convert = o.convert;
        var a3 = r(309);
        t2.createCB = a3.createCB, t2.fragmentCB = a3.fragmentCB;
      }, function(e2, t2) {
        var r;
        r = function() {
          return this;
        }();
        try {
          r = r || new Function("return this")();
        } catch (e3) {
          typeof window == "object" && (r = window);
        }
        e2.exports = r;
      }, function(e2, t2, r) {
        "use strict";
        var n = {}.propertyIsEnumerable, i2 = Object.getOwnPropertyDescriptor, o = i2 && !n.call({ 1: 2 }, 1);
        t2.f = o ? function(e3) {
          var t3 = i2(this, e3);
          return !!t3 && t3.enumerable;
        } : n;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(21);
        e2.exports = function(e3, t3) {
          try {
            i2(n, e3, t3);
          } catch (r2) {
            n[e3] = t3;
          }
          return t3;
        };
      }, function(e2, t2, r) {
        var n = r(44), i2 = r(118);
        (e2.exports = function(e3, t3) {
          return i2[e3] || (i2[e3] = t3 !== void 0 ? t3 : {});
        })("versions", []).push({ version: "3.6.5", mode: n ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
      }, function(e2, t2, r) {
        var n = r(121), i2 = r(84).concat("length", "prototype");
        t2.f = Object.getOwnPropertyNames || function(e3) {
          return n(e3, i2);
        };
      }, function(e2, t2, r) {
        var n = r(47), i2 = Math.max, o = Math.min;
        e2.exports = function(e3, t3) {
          var r2 = n(e3);
          return r2 < 0 ? i2(r2 + t3, 0) : o(r2, t3);
        };
      }, function(e2, t2) {
        e2.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      }, function(e2, t2) {
        t2.f = Object.getOwnPropertySymbols;
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !!Object.getOwnPropertySymbols && !n(function() {
          return !String(Symbol());
        });
      }, function(e2, t2, r) {
        var n = r(127);
        e2.exports = function(e3, t3, r2) {
          if (n(e3), t3 === void 0)
            return e3;
          switch (r2) {
            case 0:
              return function() {
                return e3.call(t3);
              };
            case 1:
              return function(r3) {
                return e3.call(t3, r3);
              };
            case 2:
              return function(r3, n2) {
                return e3.call(t3, r3, n2);
              };
            case 3:
              return function(r3, n2, i2) {
                return e3.call(t3, r3, n2, i2);
              };
          }
          return function() {
            return e3.apply(t3, arguments);
          };
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(195), o = r(132), a3 = r(133), s3 = r(62), u2 = r(21), l = r(25), c2 = r(5), h3 = r(44), p = r(49), f = r(131), d3 = f.IteratorPrototype, m3 = f.BUGGY_SAFARI_ITERATORS, y3 = c2("iterator"), v = function() {
          return this;
        };
        e2.exports = function(e3, t3, r2, c3, f2, _, g) {
          i2(r2, t3, c3);
          var b2, x2, w2, E2 = function(e4) {
            if (e4 === f2 && N)
              return N;
            if (!m3 && e4 in C)
              return C[e4];
            switch (e4) {
              case "keys":
              case "values":
              case "entries":
                return function() {
                  return new r2(this, e4);
                };
            }
            return function() {
              return new r2(this);
            };
          }, D2 = t3 + " Iterator", S3 = false, C = e3.prototype, A = C[y3] || C["@@iterator"] || f2 && C[f2], N = !m3 && A || E2(f2), T2 = t3 == "Array" && C.entries || A;
          if (T2 && (b2 = o(T2.call(new e3())), d3 !== Object.prototype && b2.next && (h3 || o(b2) === d3 || (a3 ? a3(b2, d3) : typeof b2[y3] != "function" && u2(b2, y3, v)), s3(b2, D2, true, true), h3 && (p[D2] = v))), f2 == "values" && A && A.name !== "values" && (S3 = true, N = function() {
            return A.call(this);
          }), h3 && !g || C[y3] === N || u2(C, y3, N), p[t3] = N, f2)
            if (x2 = { values: E2("values"), keys: _ ? N : E2("keys"), entries: E2("entries") }, g)
              for (w2 in x2)
                (m3 || S3 || !(w2 in C)) && l(C, w2, x2[w2]);
            else
              n({ target: t3, proto: true, forced: m3 || S3 }, x2);
          return x2;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(13), o = r(59), a3 = r(83), s3 = r(26), u2 = r(24), l = r(134), c2 = r(5), h3 = r(63), p = r(28), f = h3("slice"), d3 = p("slice", { ACCESSORS: true, 0: 0, 1: 2 }), m3 = c2("species"), y3 = [].slice, v = Math.max;
        n({ target: "Array", proto: true, forced: !f || !d3 }, { slice: function(e3, t3) {
          var r2, n2, c3, h4 = u2(this), p2 = s3(h4.length), f2 = a3(e3, p2), d4 = a3(t3 === void 0 ? p2 : t3, p2);
          if (o(h4) && (typeof (r2 = h4.constructor) != "function" || r2 !== Array && !o(r2.prototype) ? i2(r2) && (r2 = r2[m3]) === null && (r2 = void 0) : r2 = void 0, r2 === Array || r2 === void 0))
            return y3.call(h4, f2, d4);
          for (n2 = new (r2 === void 0 ? Array : r2)(v(d4 - f2, 0)), c3 = 0; f2 < d4; f2++, c3++)
            f2 in h4 && l(n2, c3, h4[f2]);
          return n2.length = c3, n2;
        } });
      }, function(e2, t2, r) {
        var n = {};
        n[r(5)("toStringTag")] = "z", e2.exports = String(n) === "[object z]";
      }, function(e2, t2, r) {
        "use strict";
        r(19), r(138), r(20), r(92), r(22), r(23), Object.defineProperty(t2, "__esModule", { value: true }), t2.DefaultBuilderOptions = { version: "1.0", encoding: void 0, standalone: void 0, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" }, invalidCharReplacement: void 0, parser: void 0 }, t2.XMLBuilderOptionKeys = new Set(Object.keys(t2.DefaultBuilderOptions)), t2.DefaultXMLBuilderCBOptions = { format: "xml", wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, spaceBeforeSlash: false, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" } };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(139), i2 = r(143);
        e2.exports = n("Set", function(e3) {
          return function() {
            return e3(this, arguments.length ? arguments[0] : void 0);
          };
        }, i2);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2, o = r(136), a3 = r(221), s3 = RegExp.prototype.exec, u2 = String.prototype.replace, l = s3, c2 = (n = /a/, i2 = /b*/g, s3.call(n, "a"), s3.call(i2, "a"), n.lastIndex !== 0 || i2.lastIndex !== 0), h3 = a3.UNSUPPORTED_Y || a3.BROKEN_CARET, p = /()??/.exec("")[1] !== void 0;
        (c2 || p || h3) && (l = function(e3) {
          var t3, r2, n2, i3, a4 = this, l2 = h3 && a4.sticky, f = o.call(a4), d3 = a4.source, m3 = 0, y3 = e3;
          return l2 && ((f = f.replace("y", "")).indexOf("g") === -1 && (f += "g"), y3 = String(e3).slice(a4.lastIndex), a4.lastIndex > 0 && (!a4.multiline || a4.multiline && e3[a4.lastIndex - 1] !== "\n") && (d3 = "(?: " + d3 + ")", y3 = " " + y3, m3++), r2 = new RegExp("^(?:" + d3 + ")", f)), p && (r2 = new RegExp("^" + d3 + "$(?!\\s)", f)), c2 && (t3 = a4.lastIndex), n2 = s3.call(l2 ? r2 : a4, y3), l2 ? n2 ? (n2.input = n2.input.slice(m3), n2[0] = n2[0].slice(m3), n2.index = a4.lastIndex, a4.lastIndex += n2[0].length) : a4.lastIndex = 0 : c2 && n2 && (a4.lastIndex = a4.global ? n2.index + n2[0].length : t3), p && n2 && n2.length > 1 && u2.call(n2[0], r2, function() {
            for (i3 = 1; i3 < arguments.length - 2; i3++)
              arguments[i3] === void 0 && (n2[i3] = void 0);
          }), n2;
        }), e2.exports = l;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(225), i2 = r(18), o = r(27), a3 = r(26), s3 = r(47), u2 = r(35), l = r(226), c2 = r(227), h3 = Math.max, p = Math.min, f = Math.floor, d3 = /\$([$&'`]|\d\d?|<[^>]*>)/g, m3 = /\$([$&'`]|\d\d?)/g;
        n("replace", 2, function(e3, t3, r2, n2) {
          var y3 = n2.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, v = n2.REPLACE_KEEPS_$0, _ = y3 ? "$" : "$0";
          return [function(r3, n3) {
            var i3 = u2(this), o2 = r3 == null ? void 0 : r3[e3];
            return o2 !== void 0 ? o2.call(r3, i3, n3) : t3.call(String(i3), r3, n3);
          }, function(e4, n3) {
            if (!y3 && v || typeof n3 == "string" && n3.indexOf(_) === -1) {
              var o2 = r2(t3, e4, this, n3);
              if (o2.done)
                return o2.value;
            }
            var u3 = i2(e4), f2 = String(this), d4 = typeof n3 == "function";
            d4 || (n3 = String(n3));
            var m4 = u3.global;
            if (m4) {
              var b2 = u3.unicode;
              u3.lastIndex = 0;
            }
            for (var x2 = []; ; ) {
              var w2 = c2(u3, f2);
              if (w2 === null)
                break;
              if (x2.push(w2), !m4)
                break;
              String(w2[0]) === "" && (u3.lastIndex = l(f2, a3(u3.lastIndex), b2));
            }
            for (var E2, D2 = "", S3 = 0, C = 0; C < x2.length; C++) {
              w2 = x2[C];
              for (var A = String(w2[0]), N = h3(p(s3(w2.index), f2.length), 0), T2 = [], O2 = 1; O2 < w2.length; O2++)
                T2.push((E2 = w2[O2]) === void 0 ? E2 : String(E2));
              var F = w2.groups;
              if (d4) {
                var k2 = [A].concat(T2, N, f2);
                F !== void 0 && k2.push(F);
                var P = String(n3.apply(void 0, k2));
              } else
                P = g(A, f2, N, T2, F, n3);
              N >= S3 && (D2 += f2.slice(S3, N) + P, S3 = N + A.length);
            }
            return D2 + f2.slice(S3);
          }];
          function g(e4, r3, n3, i3, a4, s4) {
            var u3 = n3 + e4.length, l2 = i3.length, c3 = m3;
            return a4 !== void 0 && (a4 = o(a4), c3 = d3), t3.call(s4, c3, function(t4, o2) {
              var s5;
              switch (o2.charAt(0)) {
                case "$":
                  return "$";
                case "&":
                  return e4;
                case "`":
                  return r3.slice(0, n3);
                case "'":
                  return r3.slice(u3);
                case "<":
                  s5 = a4[o2.slice(1, -1)];
                  break;
                default:
                  var c4 = +o2;
                  if (c4 === 0)
                    return t4;
                  if (c4 > l2) {
                    var h4 = f(c4 / 10);
                    return h4 === 0 ? t4 : h4 <= l2 ? i3[h4 - 1] === void 0 ? o2.charAt(1) : i3[h4 - 1] + o2.charAt(1) : t4;
                  }
                  s5 = i3[c4 - 1];
              }
              return s5 === void 0 ? "" : s5;
            });
          }
        });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
            this._items = {}, this._nullItems = [];
          }
          return e3.prototype.copy = function() {
            var t3 = new e3();
            for (var r2 in this._items)
              t3._items[r2] = this._items[r2].slice(0);
            return t3._nullItems = this._nullItems.slice(0), t3;
          }, e3.prototype.get = function(e4, t3) {
            var r2 = t3 === null ? this._nullItems : this._items[t3] || null;
            if (r2 === null)
              return null;
            for (var n2 = null, i2 = 0; i2 < r2.length; i2++)
              if ((n2 = r2[i2]) === e4)
                return n2;
            return n2;
          }, e3.prototype.has = function(e4, t3) {
            var r2 = t3 === null ? this._nullItems : this._items[t3] || null;
            return r2 !== null && r2.indexOf(e4) !== -1;
          }, e3.prototype.hasPrefix = function(e4) {
            if (this._nullItems.indexOf(e4) !== -1)
              return true;
            for (var t3 in this._items)
              if (this._items[t3].indexOf(e4) !== -1)
                return true;
            return false;
          }, e3.prototype.set = function(e4, t3) {
            var r2 = t3 === null ? this._nullItems : this._items[t3] || null;
            t3 !== null && r2 === null ? this._items[t3] = [e4] : r2.push(e4);
          }, e3;
        }();
        t2.NamespacePrefixMap = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Surrogate = /[\uD800-\uDFFF]/, t2.ScalarValue = /[\uD800-\uDFFF]/, t2.NonCharacter = /[\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]/, t2.ASCIICodePoint = /[\u0000-\u007F]/, t2.ASCIITabOrNewLine = /[\t\n\r]/, t2.ASCIIWhiteSpace = /[\t\n\f\r ]/, t2.C0Control = /[\u0000-\u001F]/, t2.C0ControlOrSpace = /[\u0000-\u001F ]/, t2.Control = /[\u0000-\u001F\u007F-\u009F]/, t2.ASCIIDigit = /[0-9]/, t2.ASCIIUpperHexDigit = /[0-9A-F]/, t2.ASCIILowerHexDigit = /[0-9a-f]/, t2.ASCIIHexDigit = /[0-9A-Fa-f]/, t2.ASCIIUpperAlpha = /[A-Z]/, t2.ASCIILowerAlpha = /[a-z]/, t2.ASCIIAlpha = /[A-Za-z]/, t2.ASCIIAlphanumeric = /[0-9A-Za-z]/;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(2), u2 = r(3), l = r(171), c2 = r(104), h3 = r(9), p = r(17), f = r(72), d3 = r(30);
        function m3(e3, t3) {
          t3 === void 0 && (t3 = void 0), t3 === void 0 && (t3 = null);
          var r2 = y3(e3, t3, new Date(), {});
          return r2._isTrusted = true, r2;
        }
        function y3(e3, t3, r2, n2) {
          var i3 = new e3("");
          return i3._initializedFlag = true, i3._timeStamp = r2.getTime(), Object.assign(i3, n2), a3.dom.features.steps && d3.dom_runEventConstructingSteps(i3), i3;
        }
        function v(e3, t3, r2, i3) {
          var o2, a4, l2, c3;
          r2 === void 0 && (r2 = false), i3 === void 0 && (i3 = { value: false });
          var h4 = false;
          e3._dispatchFlag = true;
          var d4 = t3;
          if (r2) {
            var m4 = t3._associatedDocument;
            u2.Guard.isDocumentNode(m4) && (d4 = m4);
          }
          var y4 = null, v2 = p.tree_retarget(e3._relatedTarget, t3);
          if (t3 !== v2 || t3 === e3._relatedTarget) {
            var b3 = [];
            try {
              for (var x3 = n(e3._touchTargetList), w3 = x3.next(); !w3.done; w3 = x3.next()) {
                var E3 = w3.value;
                b3.push(p.tree_retarget(E3, t3));
              }
            } catch (e4) {
              o2 = { error: e4 };
            } finally {
              try {
                w3 && !w3.done && (a4 = x3.return) && a4.call(x3);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
            _(e3, t3, d4, v2, b3, false);
            var D3 = u2.Guard.isMouseEvent(e3) && e3._type === "click";
            D3 && t3._activationBehavior !== void 0 && (y4 = t3);
            for (var S3 = u2.Guard.isSlotable(t3) && f.shadowTree_isAssigned(t3) ? t3 : null, C = false, A = t3._getTheParent(e3); A !== null && u2.Guard.isNode(A); ) {
              if (S3 !== null) {
                if (!u2.Guard.isSlot(A))
                  throw new Error("Parent node of a slotable should be a slot.");
                S3 = null;
                var N = p.tree_rootNode(A, true);
                u2.Guard.isShadowRoot(N) && N._mode === "closed" && (C = true);
              }
              u2.Guard.isSlotable(A) && f.shadowTree_isAssigned(A) && (S3 = A), v2 = p.tree_retarget(e3._relatedTarget, A), b3 = [];
              try {
                for (var T2 = (l2 = void 0, n(e3._touchTargetList)), O2 = T2.next(); !O2.done; O2 = T2.next()) {
                  E3 = O2.value;
                  b3.push(p.tree_retarget(E3, A));
                }
              } catch (e4) {
                l2 = { error: e4 };
              } finally {
                try {
                  O2 && !O2.done && (c3 = T2.return) && c3.call(T2);
                } finally {
                  if (l2)
                    throw l2.error;
                }
              }
              u2.Guard.isWindow(A) || u2.Guard.isNode(A) && u2.Guard.isNode(t3) && p.tree_isAncestorOf(p.tree_rootNode(t3, true), A, true, true) ? (D3 && e3._bubbles && y4 === null && A._activationBehavior && (y4 = A), _(e3, A, null, v2, b3, C)) : A === v2 ? A = null : (t3 = A, D3 && y4 === null && t3._activationBehavior && (y4 = t3), _(e3, A, t3, v2, b3, C)), A !== null && (A = A._getTheParent(e3)), C = false;
            }
            for (var F = null, k2 = e3._path, P = k2.length - 1; P >= 0; P--) {
              if ((L2 = k2[P]).shadowAdjustedTarget !== null) {
                F = L2;
                break;
              }
            }
            if (F !== null)
              if (u2.Guard.isNode(F.shadowAdjustedTarget) && u2.Guard.isShadowRoot(p.tree_rootNode(F.shadowAdjustedTarget, true)))
                h4 = true;
              else if (u2.Guard.isNode(F.relatedTarget) && u2.Guard.isShadowRoot(p.tree_rootNode(F.relatedTarget, true)))
                h4 = true;
              else
                for (var I2 = 0; I2 < F.touchTargetList.length; I2++) {
                  var L2 = F.touchTargetList[I2];
                  if (u2.Guard.isNode(L2) && u2.Guard.isShadowRoot(p.tree_rootNode(L2, true))) {
                    h4 = true;
                    break;
                  }
                }
            y4 !== null && y4._legacyPreActivationBehavior !== void 0 && y4._legacyPreActivationBehavior(e3);
            for (P = k2.length - 1; P >= 0; P--) {
              (L2 = k2[P]).shadowAdjustedTarget !== null ? e3._eventPhase = s3.EventPhase.AtTarget : e3._eventPhase = s3.EventPhase.Capturing, g(L2, e3, "capturing", i3);
            }
            for (P = 0; P < k2.length; P++) {
              if ((L2 = k2[P]).shadowAdjustedTarget !== null)
                e3._eventPhase = s3.EventPhase.AtTarget;
              else {
                if (!e3._bubbles)
                  continue;
                e3._eventPhase = s3.EventPhase.Bubbling;
              }
              g(L2, e3, "bubbling", i3);
            }
          }
          return e3._eventPhase = s3.EventPhase.None, e3._currentTarget = null, e3._path = [], e3._dispatchFlag = false, e3._stopPropagationFlag = false, e3._stopImmediatePropagationFlag = false, h4 && (e3._target = null, e3._relatedTarget = null, e3._touchTargetList = []), y4 !== null && (e3._canceledFlag || y4._activationBehavior === void 0 ? y4._legacyCanceledActivationBehavior !== void 0 && y4._legacyCanceledActivationBehavior(e3) : y4._activationBehavior(e3)), !e3._canceledFlag;
        }
        function _(e3, t3, r2, n2, i3, o2) {
          var a4 = false;
          u2.Guard.isNode(t3) && u2.Guard.isShadowRoot(p.tree_rootNode(t3)) && (a4 = true);
          var s4 = false;
          u2.Guard.isShadowRoot(t3) && t3._mode === "closed" && (s4 = true), e3._path.push({ invocationTarget: t3, invocationTargetInShadowTree: a4, shadowAdjustedTarget: r2, relatedTarget: n2, touchTargetList: i3, rootOfClosedTree: s4, slotInClosedTree: o2 });
        }
        function g(e3, t3, r2, n2) {
          n2 === void 0 && (n2 = { value: false });
          for (var i3 = t3._path, a4 = -1, s4 = 0; s4 < i3.length; s4++)
            if (i3[s4] === e3) {
              a4 = s4;
              break;
            }
          if (a4 !== -1) {
            var u3 = i3[a4];
            (u3.shadowAdjustedTarget !== null || a4 > 0 && (u3 = i3[a4 - 1]).shadowAdjustedTarget !== null) && (t3._target = u3.shadowAdjustedTarget);
          }
          if (t3._relatedTarget = e3.relatedTarget, t3._touchTargetList = e3.touchTargetList, !t3._stopPropagationFlag) {
            t3._currentTarget = e3.invocationTarget;
            var l2 = t3._currentTarget._eventListenerList, c3 = new (Array.bind.apply(Array, o([void 0], l2)))();
            if (!b2(t3, c3, r2, e3, n2) && t3._isTrusted) {
              var h4 = t3._type;
              h4 === "animationend" ? t3._type = "webkitAnimationEnd" : h4 === "animationiteration" ? t3._type = "webkitAnimationIteration" : h4 === "animationstart" ? t3._type = "webkitAnimationStart" : h4 === "transitionend" && (t3._type = "webkitTransitionEnd"), b2(t3, c3, r2, e3, n2), t3._type = h4;
            }
          }
        }
        function b2(e3, t3, r2, n2, i3) {
          i3 === void 0 && (i3 = { value: false });
          for (var o2 = false, a4 = 0; a4 < t3.length; a4++) {
            var s4 = t3[a4];
            if (!s4.removed) {
              if (e3._type !== s4.type)
                continue;
              if (o2 = true, r2 === "capturing" && !s4.capture)
                continue;
              if (r2 === "bubbling" && s4.capture)
                continue;
              if (s4.once && e3._currentTarget !== null) {
                for (var l2 = e3._currentTarget, c3 = -1, h4 = 0; h4 < l2._eventListenerList.length; h4++)
                  if (l2._eventListenerList[h4] === s4) {
                    c3 = h4;
                    break;
                  }
                c3 !== -1 && l2._eventListenerList.splice(c3, 1);
              }
              var p2 = void 0, f2 = void 0;
              u2.Guard.isWindow(p2) && (f2 = p2._currentEvent, n2.invocationTargetInShadowTree === false && (p2._currentEvent = e3)), s4.passive && (e3._inPassiveListenerFlag = true);
              try {
                s4.callback.handleEvent.call(e3._currentTarget, e3);
              } catch (e4) {
                i3.value = true;
              }
              if (s4.passive && (e3._inPassiveListenerFlag = false), u2.Guard.isWindow(p2) && (p2._currentEvent = f2), e3._stopImmediatePropagationFlag)
                return o2;
            }
          }
          return o2;
        }
        function x2(e3, t3) {
          return null;
        }
        function w2(e3, t3) {
          return null;
        }
        function E2(e3, t3) {
        }
        function D2(e3, t3) {
        }
        t2.event_setTheCanceledFlag = function(e3) {
          e3._cancelable && !e3._inPassiveListenerFlag && (e3._canceledFlag = true);
        }, t2.event_initialize = function(e3, t3, r2, n2) {
          e3._initializedFlag = true, e3._stopPropagationFlag = false, e3._stopImmediatePropagationFlag = false, e3._canceledFlag = false, e3._isTrusted = false, e3._target = null, e3._type = t3, e3._bubbles = r2, e3._cancelable = n2;
        }, t2.event_createAnEvent = m3, t2.event_innerEventCreationSteps = y3, t2.event_dispatch = v, t2.event_appendToAnEventPath = _, t2.event_invoke = g, t2.event_innerInvoke = b2, t2.event_fireAnEvent = function(e3, t3, r2, n2, i3) {
          r2 === void 0 && (r2 = c2.EventImpl);
          var o2 = m3(r2);
          if (o2._type = e3, n2)
            for (var a4 in n2) {
              o2[a4] = n2[a4];
            }
          return v(o2, t3, i3);
        }, t2.event_createLegacyEvent = function(e3) {
          var t3 = null;
          switch (e3.toLowerCase()) {
            case "beforeunloadevent":
            case "compositionevent":
              break;
            case "customevent":
              t3 = l.CustomEventImpl;
              break;
            case "devicemotionevent":
            case "deviceorientationevent":
            case "dragevent":
              break;
            case "event":
            case "events":
              t3 = c2.EventImpl;
          }
          if (t3 === null)
            throw new h3.NotSupportedError("Event constructor not found for interface " + e3 + ".");
          var r2 = new t3("");
          return r2._type = "", r2._timeStamp = new Date().getTime(), r2._isTrusted = false, r2._initializedFlag = false, r2;
        }, t2.event_getterEventHandlerIDLAttribute = function(e3, t3) {
          return null;
        }, t2.event_setterEventHandlerIDLAttribute = function(e3, t3, r2) {
        }, t2.event_determineTheTargetOfAnEventHandler = x2, t2.event_getTheCurrentValueOfAnEventHandler = w2, t2.event_activateAnEventHandler = E2, t2.event_deactivateAnEventHandler = D2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a3 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(6), u2 = r(2), l = r(9), c2 = r(34), h3 = r(3), p = r(1), f = r(7), d3 = r(152), m3 = r(0), y3 = r(12), v = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._children = /* @__PURE__ */ new Set(), t4._encoding = { name: "UTF-8", labels: ["unicode-1-1-utf-8", "utf-8", "utf8"] }, t4._contentType = "application/xml", t4._URL = { scheme: "about", username: "", password: "", host: null, port: null, path: ["blank"], query: null, fragment: null, _cannotBeABaseURLFlag: true, _blobURLEntry: null }, t4._origin = null, t4._type = "xml", t4._mode = "no-quirks", t4._documentElement = null, t4._hasNamespaces = false, t4._nodeDocumentOverwrite = null, t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverwrite || this;
          }, set: function(e4) {
            this._nodeDocumentOverwrite = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "implementation", { get: function() {
            return this._implementation || (this._implementation = m3.create_domImplementation(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "URL", { get: function() {
            return d3.urlSerializer(this._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "documentURI", { get: function() {
            return this.URL;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "origin", { get: function() {
            return "null";
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "compatMode", { get: function() {
            return this._mode === "quirks" ? "BackCompat" : "CSS1Compat";
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "characterSet", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "charset", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "inputEncoding", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "contentType", { get: function() {
            return this._contentType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "doctype", { get: function() {
            var e4, t4;
            try {
              for (var r2 = o(this._children), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                var i3 = n2.value;
                if (h3.Guard.isDocumentTypeNode(i3))
                  return i3;
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                n2 && !n2.done && (t4 = r2.return) && t4.call(r2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "documentElement", { get: function() {
            return this._documentElement;
          }, enumerable: true, configurable: true }), t3.prototype.getElementsByTagName = function(e4) {
            return m3.node_listOfElementsWithQualifiedName(e4, this);
          }, t3.prototype.getElementsByTagNameNS = function(e4, t4) {
            return m3.node_listOfElementsWithNamespace(e4, t4, this);
          }, t3.prototype.getElementsByClassName = function(e4) {
            return m3.node_listOfElementsWithClassNames(e4, this);
          }, t3.prototype.createElement = function(e4, t4) {
            if (!m3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            this._type === "html" && (e4 = e4.toLowerCase());
            var r2 = null;
            t4 !== void 0 && (r2 = p.isString(t4) ? t4 : t4.is);
            var n2 = this._type === "html" || this._contentType === "application/xhtml+xml" ? f.namespace.HTML : null;
            return m3.element_createAnElement(this, e4, n2, null, r2, true);
          }, t3.prototype.createElementNS = function(e4, t4, r2) {
            return m3.document_internalCreateElementNS(this, e4, t4, r2);
          }, t3.prototype.createDocumentFragment = function() {
            return m3.create_documentFragment(this);
          }, t3.prototype.createTextNode = function(e4) {
            return m3.create_text(this, e4);
          }, t3.prototype.createCDATASection = function(e4) {
            if (this._type === "html")
              throw new l.NotSupportedError();
            if (e4.indexOf("]]>") !== -1)
              throw new l.InvalidCharacterError();
            return m3.create_cdataSection(this, e4);
          }, t3.prototype.createComment = function(e4) {
            return m3.create_comment(this, e4);
          }, t3.prototype.createProcessingInstruction = function(e4, t4) {
            if (!m3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            if (t4.indexOf("?>") !== -1)
              throw new l.InvalidCharacterError();
            return m3.create_processingInstruction(this, e4, t4);
          }, t3.prototype.importNode = function(e4, t4) {
            if (t4 === void 0 && (t4 = false), h3.Guard.isDocumentNode(e4) || h3.Guard.isShadowRoot(e4))
              throw new l.NotSupportedError();
            return m3.node_clone(e4, this, t4);
          }, t3.prototype.adoptNode = function(e4) {
            if (h3.Guard.isDocumentNode(e4))
              throw new l.NotSupportedError();
            if (h3.Guard.isShadowRoot(e4))
              throw new l.HierarchyRequestError();
            return m3.document_adopt(e4, this), e4;
          }, t3.prototype.createAttribute = function(e4) {
            if (!m3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            return this._type === "html" && (e4 = e4.toLowerCase()), m3.create_attr(this, e4);
          }, t3.prototype.createAttributeNS = function(e4, t4) {
            var r2 = a3(m3.namespace_validateAndExtract(e4, t4), 3), n2 = r2[0], i3 = r2[1], o2 = r2[2], s4 = m3.create_attr(this, o2);
            return s4._namespace = n2, s4._namespacePrefix = i3, s4;
          }, t3.prototype.createEvent = function(e4) {
            return m3.event_createLegacyEvent(e4);
          }, t3.prototype.createRange = function() {
            var e4 = m3.create_range();
            return e4._start = [this, 0], e4._end = [this, 0], e4;
          }, t3.prototype.createNodeIterator = function(e4, t4, r2) {
            t4 === void 0 && (t4 = u2.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m3.create_nodeIterator(e4, e4, true);
            return n2._whatToShow = t4, n2._iteratorCollection = m3.create_nodeList(e4), p.isFunction(r2) ? (n2._filter = m3.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t3.prototype.createTreeWalker = function(e4, t4, r2) {
            t4 === void 0 && (t4 = u2.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m3.create_treeWalker(e4, e4);
            return n2._whatToShow = t4, p.isFunction(r2) ? (n2._filter = m3.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t3.prototype._getTheParent = function(e4) {
            return e4._type === "load" ? null : s3.dom.window;
          }, t3.prototype.getElementById = function(e4) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t3.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.prepend = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.append = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelector = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelectorAll = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3;
        }(c2.NodeImpl);
        t2.DocumentImpl = v, y3.idl_defineConst(v.prototype, "_nodeType", u2.NodeType.Document);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a3 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(2), u2 = r(34), l = r(9), c2 = r(7), h3 = r(0), p = r(12), f = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._children = /* @__PURE__ */ new Set(), t4._namespace = null, t4._namespacePrefix = null, t4._localName = "", t4._customElementState = "undefined", t4._customElementDefinition = null, t4._is = null, t4._shadowRoot = null, t4._attributeList = h3.create_namedNodeMap(t4), t4._attributeChangeSteps = [], t4._name = "", t4._assignedSlot = null, t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "tagName", { get: function() {
            return this._htmlUppercasedQualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "id", { get: function() {
            return h3.element_getAnAttributeValue(this, "id");
          }, set: function(e4) {
            h3.element_setAnAttributeValue(this, "id", e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "className", { get: function() {
            return h3.element_getAnAttributeValue(this, "class");
          }, set: function(e4) {
            h3.element_setAnAttributeValue(this, "class", e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "classList", { get: function() {
            var e4 = h3.element_getAnAttributeByName("class", this);
            return e4 === null && (e4 = h3.create_attr(this._nodeDocument, "class")), h3.create_domTokenList(this, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "slot", { get: function() {
            return h3.element_getAnAttributeValue(this, "slot");
          }, set: function(e4) {
            h3.element_setAnAttributeValue(this, "slot", e4);
          }, enumerable: true, configurable: true }), t3.prototype.hasAttributes = function() {
            return this._attributeList.length !== 0;
          }, Object.defineProperty(t3.prototype, "attributes", { get: function() {
            return this._attributeList;
          }, enumerable: true, configurable: true }), t3.prototype.getAttributeNames = function() {
            var e4, t4, r2 = [];
            try {
              for (var n2 = o(this._attributeList), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                var a4 = i3.value;
                r2.push(a4._qualifiedName);
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                i3 && !i3.done && (t4 = n2.return) && t4.call(n2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r2;
          }, t3.prototype.getAttribute = function(e4) {
            var t4 = h3.element_getAnAttributeByName(e4, this);
            return t4 ? t4._value : null;
          }, t3.prototype.getAttributeNS = function(e4, t4) {
            var r2 = h3.element_getAnAttributeByNamespaceAndLocalName(e4, t4, this);
            return r2 ? r2._value : null;
          }, t3.prototype.setAttribute = function(e4, t4) {
            if (!h3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i3 = this._attributeList[n2];
              if (i3._qualifiedName === e4) {
                r2 = i3;
                break;
              }
            }
            if (r2 === null)
              return (r2 = h3.create_attr(this._nodeDocument, e4))._value = t4, void h3.element_append(r2, this);
            h3.element_change(r2, this, t4);
          }, t3.prototype.setAttributeNS = function(e4, t4, r2) {
            var n2 = a3(h3.namespace_validateAndExtract(e4, t4), 3), i3 = n2[0], o2 = n2[1], s4 = n2[2];
            h3.element_setAnAttributeValue(this, s4, r2, o2, i3);
          }, t3.prototype.removeAttribute = function(e4) {
            h3.element_removeAnAttributeByName(e4, this);
          }, t3.prototype.removeAttributeNS = function(e4, t4) {
            h3.element_removeAnAttributeByNamespaceAndLocalName(e4, t4, this);
          }, t3.prototype.hasAttribute = function(e4) {
            this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toLowerCase());
            for (var t4 = 0; t4 < this._attributeList.length; t4++) {
              if (this._attributeList[t4]._qualifiedName === e4)
                return true;
            }
            return false;
          }, t3.prototype.toggleAttribute = function(e4, t4) {
            if (!h3.xml_isName(e4))
              throw new l.InvalidCharacterError();
            this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i3 = this._attributeList[n2];
              if (i3._qualifiedName === e4) {
                r2 = i3;
                break;
              }
            }
            return r2 === null ? (t4 === void 0 || t4 === true) && ((r2 = h3.create_attr(this._nodeDocument, e4))._value = "", h3.element_append(r2, this), true) : t4 !== void 0 && t4 !== false || (h3.element_removeAnAttributeByName(e4, this), false);
          }, t3.prototype.hasAttributeNS = function(e4, t4) {
            for (var r2 = e4 || null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i3 = this._attributeList[n2];
              if (i3._namespace === r2 && i3._localName === t4)
                return true;
            }
            return false;
          }, t3.prototype.getAttributeNode = function(e4) {
            return h3.element_getAnAttributeByName(e4, this);
          }, t3.prototype.getAttributeNodeNS = function(e4, t4) {
            return h3.element_getAnAttributeByNamespaceAndLocalName(e4, t4, this);
          }, t3.prototype.setAttributeNode = function(e4) {
            return h3.element_setAnAttribute(e4, this);
          }, t3.prototype.setAttributeNodeNS = function(e4) {
            return h3.element_setAnAttribute(e4, this);
          }, t3.prototype.removeAttributeNode = function(e4) {
            for (var t4 = false, r2 = 0; r2 < this._attributeList.length; r2++) {
              if (this._attributeList[r2] === e4) {
                t4 = true;
                break;
              }
            }
            if (!t4)
              throw new l.NotFoundError();
            return h3.element_remove(e4, this), e4;
          }, t3.prototype.attachShadow = function(e4) {
            if (this._namespace !== c2.namespace.HTML)
              throw new l.NotSupportedError();
            if (!h3.customElement_isValidCustomElementName(this._localName) && !h3.customElement_isValidShadowHostName(this._localName))
              throw new l.NotSupportedError();
            if (h3.customElement_isValidCustomElementName(this._localName) || this._is !== null) {
              var t4 = h3.customElement_lookUpACustomElementDefinition(this._nodeDocument, this._namespace, this._localName, this._is);
              if (t4 !== null && t4.disableShadow === true)
                throw new l.NotSupportedError();
            }
            if (this._shadowRoot !== null)
              throw new l.NotSupportedError();
            var r2 = h3.create_shadowRoot(this._nodeDocument, this);
            return r2._mode = e4.mode, this._shadowRoot = r2, r2;
          }, Object.defineProperty(t3.prototype, "shadowRoot", { get: function() {
            var e4 = this._shadowRoot;
            return e4 === null || e4.mode === "closed" ? null : e4;
          }, enumerable: true, configurable: true }), t3.prototype.closest = function(e4) {
            throw new l.NotImplementedError();
          }, t3.prototype.matches = function(e4) {
            throw new l.NotImplementedError();
          }, t3.prototype.webkitMatchesSelector = function(e4) {
            return this.matches(e4);
          }, t3.prototype.getElementsByTagName = function(e4) {
            return h3.node_listOfElementsWithQualifiedName(e4, this);
          }, t3.prototype.getElementsByTagNameNS = function(e4, t4) {
            return h3.node_listOfElementsWithNamespace(e4, t4, this);
          }, t3.prototype.getElementsByClassName = function(e4) {
            return h3.node_listOfElementsWithClassNames(e4, this);
          }, t3.prototype.insertAdjacentElement = function(e4, t4) {
            return h3.element_insertAdjacent(this, e4, t4);
          }, t3.prototype.insertAdjacentText = function(e4, t4) {
            var r2 = h3.create_text(this._nodeDocument, t4);
            h3.element_insertAdjacent(this, e4, r2);
          }, Object.defineProperty(t3.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_htmlUppercasedQualifiedName", { get: function() {
            var e4 = this._qualifiedName;
            return this._namespace === c2.namespace.HTML && this._nodeDocument._type === "html" && (e4 = e4.toUpperCase()), e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.prepend = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.append = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelector = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelectorAll = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, Object.defineProperty(t3.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.before = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.after = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.replaceWith = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, Object.defineProperty(t3.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2, n2, i3) {
            n2 === void 0 && (n2 = null), i3 === void 0 && (i3 = null);
            var o2 = new t3();
            return o2._localName = r2, o2._namespace = n2, o2._namespacePrefix = i3, o2._nodeDocument = e4, o2;
          }, t3;
        }(u2.NodeImpl);
        t2.ElementImpl = f, p.idl_defineConst(f.prototype, "_nodeType", s3.NodeType.Element);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(34), s3 = r(12), u2 = function(e3) {
          function t3(t4) {
            t4 === void 0 && (t4 = null);
            var r2 = e3.call(this) || this;
            return r2._children = /* @__PURE__ */ new Set(), r2._host = t4, r2;
          }
          return i2(t3, e3), t3.prototype.getElementById = function(e4) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t3.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t3.prototype.prepend = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.append = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelector = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3.prototype.querySelectorAll = function(e4) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(a3.NodeImpl);
        t2.DocumentFragmentImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.DocumentFragment);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(2), s3 = r(71), u2 = r(0), l = r(12), c2 = function(e3) {
          function t3(t4) {
            t4 === void 0 && (t4 = "");
            var r2 = e3.call(this, t4) || this;
            return r2._name = "", r2._assignedSlot = null, r2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "wholeText", { get: function() {
            var e4, t4, r2 = "";
            try {
              for (var n2 = o(u2.text_contiguousTextNodes(this, true)), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                r2 += i3.value._data;
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                i3 && !i3.done && (t4 = n2.return) && t4.call(n2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), t3.prototype.splitText = function(e4) {
            return u2.text_split(this, e4);
          }, Object.defineProperty(t3.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(s3.CharacterDataImpl);
        t2.TextImpl = c2, l.idl_defineConst(c2.prototype, "_nodeType", a3.NodeType.Text);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "_startNode", { get: function() {
            return this._start[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_startOffset", { get: function() {
            return this._start[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_endNode", { get: function() {
            return this._end[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_endOffset", { get: function() {
            return this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_collapsed", { get: function() {
            return this._start[0] === this._end[0] && this._start[1] === this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "startContainer", { get: function() {
            return this._startNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "startOffset", { get: function() {
            return this._startOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "endContainer", { get: function() {
            return this._endNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "endOffset", { get: function() {
            return this._endOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "collapsed", { get: function() {
            return this._collapsed;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.AbstractRangeImpl = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = function() {
          function e3(e4) {
            this._activeFlag = false, this._root = e4, this._whatToShow = n.WhatToShow.All, this._filter = null;
          }
          return Object.defineProperty(e3.prototype, "root", { get: function() {
            return this._root;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "whatToShow", { get: function() {
            return this._whatToShow;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "filter", { get: function() {
            return this._filter;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.TraverserImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(0), o = r(12), a3 = function() {
          function e3(e4, t3) {
            this._target = null, this._relatedTarget = null, this._touchTargetList = [], this._path = [], this._currentTarget = null, this._eventPhase = n.EventPhase.None, this._stopPropagationFlag = false, this._stopImmediatePropagationFlag = false, this._canceledFlag = false, this._inPassiveListenerFlag = false, this._composedFlag = false, this._initializedFlag = false, this._dispatchFlag = false, this._isTrusted = false, this._bubbles = false, this._cancelable = false, this._type = e4, t3 && (this._bubbles = t3.bubbles || false, this._cancelable = t3.cancelable || false, this._composedFlag = t3.composed || false), this._initializedFlag = true, this._timeStamp = new Date().getTime();
          }
          return Object.defineProperty(e3.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "srcElement", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "currentTarget", { get: function() {
            return this._currentTarget;
          }, enumerable: true, configurable: true }), e3.prototype.composedPath = function() {
            var e4 = [], t3 = this._path;
            if (t3.length === 0)
              return e4;
            var r2 = this._currentTarget;
            if (r2 === null)
              throw new Error("Event currentTarget is null.");
            e4.push(r2);
            for (var n2 = 0, i3 = 0, o2 = t3.length - 1; o2 >= 0; ) {
              if (t3[o2].rootOfClosedTree && i3++, t3[o2].invocationTarget === r2) {
                n2 = o2;
                break;
              }
              t3[o2].slotInClosedTree && i3--, o2--;
            }
            var a4 = i3, s3 = i3;
            for (o2 = n2 - 1; o2 >= 0; )
              t3[o2].rootOfClosedTree && a4++, a4 <= s3 && e4.unshift(t3[o2].invocationTarget), t3[o2].slotInClosedTree && --a4 < s3 && (s3 = a4), o2--;
            for (a4 = i3, s3 = i3, o2 = n2 + 1; o2 < t3.length; )
              t3[o2].slotInClosedTree && a4++, a4 <= s3 && e4.push(t3[o2].invocationTarget), t3[o2].rootOfClosedTree && --a4 < s3 && (s3 = a4), o2++;
            return e4;
          }, Object.defineProperty(e3.prototype, "eventPhase", { get: function() {
            return this._eventPhase;
          }, enumerable: true, configurable: true }), e3.prototype.stopPropagation = function() {
            this._stopPropagationFlag = true;
          }, Object.defineProperty(e3.prototype, "cancelBubble", { get: function() {
            return this._stopPropagationFlag;
          }, set: function(e4) {
            e4 && this.stopPropagation();
          }, enumerable: true, configurable: true }), e3.prototype.stopImmediatePropagation = function() {
            this._stopPropagationFlag = true, this._stopImmediatePropagationFlag = true;
          }, Object.defineProperty(e3.prototype, "bubbles", { get: function() {
            return this._bubbles;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "cancelable", { get: function() {
            return this._cancelable;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "returnValue", { get: function() {
            return !this._canceledFlag;
          }, set: function(e4) {
            e4 || i2.event_setTheCanceledFlag(this);
          }, enumerable: true, configurable: true }), e3.prototype.preventDefault = function() {
            i2.event_setTheCanceledFlag(this);
          }, Object.defineProperty(e3.prototype, "defaultPrevented", { get: function() {
            return this._canceledFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "composed", { get: function() {
            return this._composedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "isTrusted", { get: function() {
            return this._isTrusted;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "timeStamp", { get: function() {
            return this._timeStamp;
          }, enumerable: true, configurable: true }), e3.prototype.initEvent = function(e4, t3, r2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), this._dispatchFlag || i2.event_initialize(this, e4, t3, r2);
          }, e3.NONE = 0, e3.CAPTURING_PHASE = 1, e3.AT_TARGET = 2, e3.BUBBLING_PHASE = 3, e3;
        }();
        t2.EventImpl = a3, o.idl_defineConst(a3.prototype, "NONE", 0), o.idl_defineConst(a3.prototype, "CAPTURING_PHASE", 1), o.idl_defineConst(a3.prototype, "AT_TARGET", 2), o.idl_defineConst(a3.prototype, "BUBBLING_PHASE", 3);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(9);
        t2.traversal_filter = function(e3, t3) {
          if (e3._activeFlag)
            throw new i2.InvalidStateError();
          var r2 = 1 << t3._nodeType - 1;
          if ((e3.whatToShow & r2) == 0)
            return n.FilterResult.Skip;
          if (!e3.filter)
            return n.FilterResult.Accept;
          e3._activeFlag = true;
          var o = n.FilterResult.Reject;
          try {
            o = e3.filter.acceptNode(t3);
          } catch (t4) {
            throw e3._activeFlag = false, t4;
          }
          return e3._activeFlag = false, o;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(6), a3 = r(3), s3 = r(1), u2 = r(99), l = r(73), c2 = r(17), h3 = r(173), p = r(30), f = r(52), d3 = r(37);
        t2.document_elementInterface = function(e3, t3) {
          return u2.ElementImpl;
        }, t2.document_internalCreateElementNS = function(e3, t3, r2, i3) {
          var o2 = n(h3.namespace_validateAndExtract(t3, r2), 3), a4 = o2[0], u3 = o2[1], l2 = o2[2], c3 = null;
          return i3 !== void 0 && (c3 = s3.isString(i3) ? i3 : i3.is), f.element_createAnElement(e3, l2, a4, u3, c3, true);
        }, t2.document_adopt = function(e3, t3) {
          var r2, n2;
          if (e3._nodeDocument !== t3 || e3._parent !== null) {
            var s4 = e3._nodeDocument;
            if (e3._parent && d3.mutation_remove(e3, e3._parent), t3 !== s4)
              for (var u3 = c2.tree_getFirstDescendantNode(e3, true, true); u3 !== null; ) {
                if (u3._nodeDocument = t3, a3.Guard.isElementNode(u3))
                  try {
                    for (var h4 = (r2 = void 0, i2(u3._attributeList._asArray())), f2 = h4.next(); !f2.done; f2 = h4.next()) {
                      f2.value._nodeDocument = t3;
                    }
                  } catch (e4) {
                    r2 = { error: e4 };
                  } finally {
                    try {
                      f2 && !f2.done && (n2 = h4.return) && n2.call(h4);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                o.dom.features.customElements && a3.Guard.isElementNode(u3) && u3._customElementState === "custom" && l.customElement_enqueueACustomElementCallbackReaction(u3, "adoptedCallback", [s4, t3]), o.dom.features.steps && p.dom_runAdoptingSteps(u3, s4), u3 = c2.tree_getNextDescendantNode(e3, u3, true, true);
              }
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(9), s3 = r(17), u2 = r(51), l = r(30);
        t2.characterData_replaceData = function(e3, t3, r2, c2) {
          var h3, p, f = s3.tree_nodeLength(e3);
          if (t3 > f)
            throw new a3.IndexSizeError("Offset exceeds character data length. Offset: " + t3 + ", Length: " + f + ", Node is " + e3.nodeName + ".");
          t3 + r2 > f && (r2 = f - t3), i2.dom.features.mutationObservers && u2.observer_queueMutationRecord("characterData", e3, null, null, e3._data, [], [], null, null);
          var d3 = e3._data.substring(0, t3) + c2 + e3._data.substring(t3 + r2);
          e3._data = d3;
          try {
            for (var m3 = n(i2.dom.rangeList), y3 = m3.next(); !y3.done; y3 = m3.next()) {
              var v = y3.value;
              v._start[0] === e3 && v._start[1] > t3 && v._start[1] <= t3 + r2 && (v._start[1] = t3), v._end[0] === e3 && v._end[1] > t3 && v._end[1] <= t3 + r2 && (v._end[1] = t3), v._start[0] === e3 && v._start[1] > t3 + r2 && (v._start[1] += c2.length - r2), v._end[0] === e3 && v._end[1] > t3 + r2 && (v._end[1] += c2.length - r2);
            }
          } catch (e4) {
            h3 = { error: e4 };
          } finally {
            try {
              y3 && !y3.done && (p = m3.return) && p.call(m3);
            } finally {
              if (h3)
                throw h3.error;
            }
          }
          i2.dom.features.steps && o.Guard.isTextNode(e3) && e3._parent !== null && l.dom_runChildTextContentChangeSteps(e3._parent);
        }, t2.characterData_substringData = function(e3, t3, r2) {
          var n2 = s3.tree_nodeLength(e3);
          if (t3 > n2)
            throw new a3.IndexSizeError("Offset exceeds character data length. Offset: " + t3 + ", Length: " + n2 + ", Node is " + e3.nodeName + ".");
          return t3 + r2 > n2 ? e3._data.substr(t3) : e3._data.substr(t3, r2);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(n(arguments[t3]));
          return e3;
        }, o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(7);
        function s3(e3) {
          var t3 = a3.string.splitAStringOnASCIIWhitespace(e3);
          return new Set(t3);
        }
        function u2(e3) {
          return i2(e3).join(" ");
        }
        t2.orderedSet_parse = s3, t2.orderedSet_serialize = u2, t2.orderedSet_sanitize = function(e3) {
          return u2(s3(e3));
        }, t2.orderedSet_contains = function(e3, t3, r2) {
          var n2, i3, a4, s4;
          try {
            for (var u3 = o(t3), l = u3.next(); !l.done; l = u3.next()) {
              var c2 = l.value, h3 = false;
              try {
                for (var p = (a4 = void 0, o(e3)), f = p.next(); !f.done; f = p.next()) {
                  var d3 = f.value;
                  if (r2) {
                    if (d3 === c2) {
                      h3 = true;
                      break;
                    }
                  } else if (d3.toUpperCase() === c2.toUpperCase()) {
                    h3 = true;
                    break;
                  }
                }
              } catch (e4) {
                a4 = { error: e4 };
              } finally {
                try {
                  f && !f.done && (s4 = p.return) && s4.call(p);
                } finally {
                  if (a4)
                    throw a4.error;
                }
              }
              if (!h3)
                return false;
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (i3 = u3.return) && i3.call(u3);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          return true;
        };
      }, function(e2, t2, r) {
        "use strict";
        r(179), Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(262), i2 = r(110), o = r(1);
        i2.dom.setFeatures(false), t2.createDocument = function() {
          var e3 = new n.DOMImplementation().createDocument(null, "root", null);
          return e3.documentElement && e3.removeChild(e3.documentElement), e3;
        }, t2.sanitizeInput = function(e3, t3) {
          if (e3 == null)
            return e3;
          if (t3 === void 0)
            return e3 + "";
          var r2 = "";
          e3 += "";
          for (var n2 = 0; n2 < e3.length; n2++) {
            var i3 = e3.charCodeAt(n2);
            if (i3 === 9 || i3 === 10 || i3 === 13 || i3 >= 32 && i3 <= 55295 || i3 >= 57344 && i3 <= 65533)
              r2 += e3.charAt(n2);
            else if (i3 >= 55296 && i3 <= 56319 && n2 < e3.length - 1) {
              var a3 = e3.charCodeAt(n2 + 1);
              a3 >= 56320 && a3 <= 57343 ? (i3 = 1024 * (i3 - 55296) + a3 - 56320 + 65536, r2 += String.fromCodePoint(i3), n2++) : r2 += o.isString(t3) ? t3 : t3(e3.charAt(n2), n2, e3);
            } else
              r2 += o.isString(t3) ? t3 : t3(e3.charAt(n2), n2, e3);
          }
          return r2;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(1), i2 = r(153);
        t2.AbortController = i2.AbortControllerImpl;
        var o = r(154);
        t2.AbortSignal = o.AbortSignalImpl;
        var a3 = r(102);
        t2.AbstractRange = a3.AbstractRangeImpl;
        var s3 = r(157);
        t2.Attr = s3.AttrImpl;
        var u2 = r(158);
        t2.CDATASection = u2.CDATASectionImpl;
        var l = r(71);
        t2.CharacterData = l.CharacterDataImpl;
        var c2 = r(263), h3 = r(159);
        t2.Comment = h3.CommentImpl;
        var p = r(171);
        t2.CustomEvent = p.CustomEventImpl;
        var f = r(100);
        t2.DocumentFragment = f.DocumentFragmentImpl;
        var d3 = r(98);
        t2.Document = d3.DocumentImpl;
        var m3 = r(264), y3 = r(155);
        t2.DocumentType = y3.DocumentTypeImpl;
        var v = r(6);
        t2.dom = v.dom;
        var _ = r(148);
        t2.DOMImplementation = _.DOMImplementationImpl;
        var g = r(170);
        t2.DOMTokenList = g.DOMTokenListImpl;
        var b2 = r(99);
        t2.Element = b2.ElementImpl;
        var x2 = r(104);
        t2.Event = x2.EventImpl;
        var w2 = r(70);
        t2.EventTarget = w2.EventTargetImpl;
        var E2 = r(161);
        t2.HTMLCollection = E2.HTMLCollectionImpl;
        var D2 = r(265);
        t2.MutationObserver = D2.MutationObserverImpl;
        var S3 = r(169);
        t2.MutationRecord = S3.MutationRecordImpl;
        var C = r(164);
        t2.NamedNodeMap = C.NamedNodeMapImpl;
        var A = r(168);
        t2.NodeFilter = A.NodeFilterImpl;
        var N = r(34);
        t2.Node = N.NodeImpl;
        var T2 = r(166);
        t2.NodeIterator = T2.NodeIteratorImpl;
        var O2 = r(162);
        t2.NodeList = O2.NodeListImpl;
        var F = r(163);
        t2.NodeListStatic = F.NodeListStaticImpl;
        var k2 = r(266), P = r(267), I2 = r(268), L2 = r(160);
        t2.ProcessingInstruction = L2.ProcessingInstructionImpl;
        var M3 = r(165);
        t2.Range = M3.RangeImpl;
        var B2 = r(156);
        t2.ShadowRoot = B2.ShadowRootImpl;
        var j = r(269), R2 = r(270);
        t2.StaticRange = R2.StaticRangeImpl;
        var z2 = r(101);
        t2.Text = z2.TextImpl;
        var U = r(103);
        t2.Traverser = U.TraverserImpl;
        var G2 = r(167);
        t2.TreeWalker = G2.TreeWalkerImpl;
        var X2 = r(149);
        t2.Window = X2.WindowImpl;
        var q2 = r(151);
        t2.XMLDocument = q2.XMLDocumentImpl, n.applyMixin(b2.ElementImpl, c2.ChildNodeImpl), n.applyMixin(l.CharacterDataImpl, c2.ChildNodeImpl), n.applyMixin(y3.DocumentTypeImpl, c2.ChildNodeImpl), n.applyMixin(d3.DocumentImpl, m3.DocumentOrShadowRootImpl), n.applyMixin(B2.ShadowRootImpl, m3.DocumentOrShadowRootImpl), n.applyMixin(b2.ElementImpl, k2.NonDocumentTypeChildNodeImpl), n.applyMixin(l.CharacterDataImpl, k2.NonDocumentTypeChildNodeImpl), n.applyMixin(d3.DocumentImpl, P.NonElementParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, P.NonElementParentNodeImpl), n.applyMixin(d3.DocumentImpl, I2.ParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, I2.ParentNodeImpl), n.applyMixin(b2.ElementImpl, I2.ParentNodeImpl), n.applyMixin(z2.TextImpl, j.SlotableImpl), n.applyMixin(b2.ElementImpl, j.SlotableImpl);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), function(e3) {
          e3[e3.EOF = 0] = "EOF", e3[e3.Declaration = 1] = "Declaration", e3[e3.DocType = 2] = "DocType", e3[e3.Element = 3] = "Element", e3[e3.Text = 4] = "Text", e3[e3.CDATA = 5] = "CDATA", e3[e3.PI = 6] = "PI", e3[e3.Comment = 7] = "Comment", e3[e3.ClosingTag = 8] = "ClosingTag";
        }(t2.TokenType || (t2.TokenType = {}));
      }, function(e2, t2, r) {
        "use strict";
        r(64), r(20), r(66);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(1), a3 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            var r2 = this, n2 = this._builderOptions, i3 = null;
            return o.isFunction(t4) ? i3 = this.parse(e4, t4.apply(this)) : o.isArray(t4) || o.isSet(t4) ? o.forEachArray(t4, function(t5) {
              return i3 = r2.parse(e4, t5);
            }, this) : o.isMap(t4) || o.isObject(t4) ? o.forEachObject(t4, function(t5, a4) {
              if (o.isFunction(a4) && (a4 = a4.apply(r2)), n2.ignoreConverters || t5.indexOf(n2.convert.att) !== 0)
                if (n2.ignoreConverters || t5.indexOf(n2.convert.text) !== 0)
                  if (n2.ignoreConverters || t5.indexOf(n2.convert.cdata) !== 0)
                    if (n2.ignoreConverters || t5.indexOf(n2.convert.comment) !== 0)
                      if (n2.ignoreConverters || t5.indexOf(n2.convert.ins) !== 0)
                        if ((o.isArray(a4) || o.isSet(a4)) && o.isEmpty(a4))
                          ;
                        else if ((o.isMap(a4) || o.isObject(a4)) && o.isEmpty(a4))
                          i3 = r2.element(e4, void 0, r2.sanitize(t5)) || i3;
                        else if (n2.keepNullNodes || a4 != null)
                          if (o.isArray(a4) || o.isSet(a4))
                            o.forEachArray(a4, function(n3) {
                              var o2 = {};
                              o2[t5] = n3, i3 = r2.parse(e4, o2);
                            }, r2);
                          else if (o.isMap(a4) || o.isObject(a4)) {
                            (s3 = r2.element(e4, void 0, r2.sanitize(t5))) && (i3 = s3, r2.parse(s3, a4));
                          } else if (a4 != null && a4 !== "") {
                            var s3;
                            (s3 = r2.element(e4, void 0, r2.sanitize(t5))) && (i3 = s3, r2.text(s3, r2._decodeText(r2.sanitize(a4))));
                          } else
                            i3 = r2.element(e4, void 0, r2.sanitize(t5)) || i3;
                        else
                          ;
                      else if (o.isString(a4)) {
                        var u2 = a4.indexOf(" "), l = u2 === -1 ? a4 : a4.substr(0, u2), c2 = u2 === -1 ? "" : a4.substr(u2 + 1);
                        i3 = r2.instruction(e4, r2.sanitize(l), r2.sanitize(c2)) || i3;
                      } else
                        o.isArray(a4) || o.isSet(a4) ? o.forEachArray(a4, function(t6) {
                          var n3 = t6.indexOf(" "), o2 = n3 === -1 ? t6 : t6.substr(0, n3), a5 = n3 === -1 ? "" : t6.substr(n3 + 1);
                          i3 = r2.instruction(e4, r2.sanitize(o2), r2.sanitize(a5)) || i3;
                        }, r2) : o.forEachObject(a4, function(t6, n3) {
                          return i3 = r2.instruction(e4, r2.sanitize(t6), r2.sanitize(n3)) || i3;
                        }, r2);
                    else
                      o.isArray(a4) || o.isSet(a4) ? o.forEachArray(a4, function(t6) {
                        return i3 = r2.comment(e4, r2.sanitize(t6)) || i3;
                      }, r2) : i3 = r2.comment(e4, r2.sanitize(a4)) || i3;
                  else
                    o.isArray(a4) || o.isSet(a4) ? o.forEachArray(a4, function(t6) {
                      return i3 = r2.cdata(e4, r2.sanitize(t6)) || i3;
                    }, r2) : i3 = r2.cdata(e4, r2.sanitize(a4)) || i3;
                else
                  i3 = o.isMap(a4) || o.isObject(a4) ? r2.parse(e4, a4) : r2.text(e4, r2._decodeText(r2.sanitize(a4))) || i3;
              else if (t5 === n2.convert.att) {
                if (o.isArray(a4) || o.isSet(a4))
                  throw new Error("Invalid attribute: " + a4.toString() + ". " + e4._debugInfo());
                o.forEachObject(a4, function(t6, n3) {
                  i3 = r2.attribute(e4, void 0, r2.sanitize(t6), r2._decodeAttributeValue(r2.sanitize(n3))) || i3;
                });
              } else
                i3 = r2.attribute(e4, void 0, r2.sanitize(t5.substr(n2.convert.att.length)), r2._decodeAttributeValue(r2.sanitize(a4))) || i3;
            }, this) : (n2.keepNullNodes || t4 != null) && (i3 = this.text(e4, this._decodeText(this.sanitize(t4))) || i3), i3 || e4;
          }, t3;
        }(r(75).BaseReader);
        t2.ObjectReader = a3;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ explicit: [r(286), r(287), r(288)] });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function(e3) {
          this.level = 0, this._builderOptions = e3, this._writerOptions = e3;
        };
        t2.BaseCBWriter = n;
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(8), o = r(116);
        e2.exports = !n && !i2(function() {
          return Object.defineProperty(o("div"), "a", { get: function() {
            return 7;
          } }).a != 7;
        });
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(13), o = n.document, a3 = i2(o) && i2(o.createElement);
        e2.exports = function(e3) {
          return a3 ? o.createElement(e3) : {};
        };
      }, function(e2, t2, r) {
        var n = r(118), i2 = Function.toString;
        typeof n.inspectSource != "function" && (n.inspectSource = function(e3) {
          return i2.call(e3);
        }), e2.exports = n.inspectSource;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(80), o = n["__core-js_shared__"] || i2("__core-js_shared__", {});
        e2.exports = o;
      }, function(e2, t2, r) {
        var n = r(14), i2 = r(187), o = r(55), a3 = r(15);
        e2.exports = function(e3, t3) {
          for (var r2 = i2(t3), s3 = a3.f, u2 = o.f, l = 0; l < r2.length; l++) {
            var c2 = r2[l];
            n(e3, c2) || s3(e3, c2, u2(t3, c2));
          }
        };
      }, function(e2, t2, r) {
        var n = r(11);
        e2.exports = n;
      }, function(e2, t2, r) {
        var n = r(14), i2 = r(24), o = r(122).indexOf, a3 = r(45);
        e2.exports = function(e3, t3) {
          var r2, s3 = i2(e3), u2 = 0, l = [];
          for (r2 in s3)
            !n(a3, r2) && n(s3, r2) && l.push(r2);
          for (; t3.length > u2; )
            n(s3, r2 = t3[u2++]) && (~o(l, r2) || l.push(r2));
          return l;
        };
      }, function(e2, t2, r) {
        var n = r(24), i2 = r(26), o = r(83), a3 = function(e3) {
          return function(t3, r2, a4) {
            var s3, u2 = n(t3), l = i2(u2.length), c2 = o(a4, l);
            if (e3 && r2 != r2) {
              for (; l > c2; )
                if ((s3 = u2[c2++]) != s3)
                  return true;
            } else
              for (; l > c2; c2++)
                if ((e3 || c2 in u2) && u2[c2] === r2)
                  return e3 || c2 || 0;
            return !e3 && -1;
          };
        };
        e2.exports = { includes: a3(true), indexOf: a3(false) };
      }, function(e2, t2, r) {
        var n = r(8), i2 = /#|\.prototype\./, o = function(e3, t3) {
          var r2 = s3[a3(e3)];
          return r2 == l || r2 != u2 && (typeof t3 == "function" ? n(t3) : !!t3);
        }, a3 = o.normalize = function(e3) {
          return String(e3).replace(i2, ".").toLowerCase();
        }, s3 = o.data = {}, u2 = o.NATIVE = "N", l = o.POLYFILL = "P";
        e2.exports = o;
      }, function(e2, t2, r) {
        var n = r(86);
        e2.exports = n && !Symbol.sham && typeof Symbol.iterator == "symbol";
      }, function(e2, t2, r) {
        var n = r(5);
        t2.f = n;
      }, function(e2, t2, r) {
        var n = r(120), i2 = r(14), o = r(125), a3 = r(15).f;
        e2.exports = function(e3) {
          var t3 = n.Symbol || (n.Symbol = {});
          i2(t3, e3) || a3(t3, e3, { value: o.f(e3) });
        };
      }, function(e2, t2) {
        e2.exports = function(e3) {
          if (typeof e3 != "function")
            throw TypeError(String(e3) + " is not a function");
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(13), i2 = r(59), o = r(5)("species");
        e2.exports = function(e3, t3) {
          var r2;
          return i2(e3) && (typeof (r2 = e3.constructor) != "function" || r2 !== Array && !i2(r2.prototype) ? n(r2) && (r2 = r2[o]) === null && (r2 = void 0) : r2 = void 0), new (r2 === void 0 ? Array : r2)(t3 === 0 ? 0 : t3);
        };
      }, function(e2, t2, r) {
        var n, i2, o = r(11), a3 = r(193), s3 = o.process, u2 = s3 && s3.versions, l = u2 && u2.v8;
        l ? i2 = (n = l.split("."))[0] + n[1] : a3 && (!(n = a3.match(/Edge\/(\d+)/)) || n[1] >= 74) && (n = a3.match(/Chrome\/(\d+)/)) && (i2 = n[1]), e2.exports = i2 && +i2;
      }, function(e2, t2, r) {
        var n = r(5), i2 = r(60), o = r(15), a3 = n("unscopables"), s3 = Array.prototype;
        s3[a3] == null && o.f(s3, a3, { configurable: true, value: i2(null) }), e2.exports = function(e3) {
          s3[a3][e3] = true;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n, i2, o, a3 = r(132), s3 = r(21), u2 = r(14), l = r(5), c2 = r(44), h3 = l("iterator"), p = false;
        [].keys && ("next" in (o = [].keys()) ? (i2 = a3(a3(o))) !== Object.prototype && (n = i2) : p = true), n == null && (n = {}), c2 || u2(n, h3) || s3(n, h3, function() {
          return this;
        }), e2.exports = { IteratorPrototype: n, BUGGY_SAFARI_ITERATORS: p };
      }, function(e2, t2, r) {
        var n = r(14), i2 = r(27), o = r(57), a3 = r(196), s3 = o("IE_PROTO"), u2 = Object.prototype;
        e2.exports = a3 ? Object.getPrototypeOf : function(e3) {
          return e3 = i2(e3), n(e3, s3) ? e3[s3] : typeof e3.constructor == "function" && e3 instanceof e3.constructor ? e3.constructor.prototype : e3 instanceof Object ? u2 : null;
        };
      }, function(e2, t2, r) {
        var n = r(18), i2 = r(197);
        e2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var e3, t3 = false, r2 = {};
          try {
            (e3 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r2, []), t3 = r2 instanceof Array;
          } catch (e4) {
          }
          return function(r3, o) {
            return n(r3), i2(o), t3 ? e3.call(r3, o) : r3.__proto__ = o, r3;
          };
        }() : void 0);
      }, function(e2, t2, r) {
        "use strict";
        var n = r(56), i2 = r(15), o = r(40);
        e2.exports = function(e3, t3, r2) {
          var a3 = n(t3);
          a3 in e3 ? i2.f(e3, a3, o(0, r2)) : e3[a3] = r2;
        };
      }, function(e2, t2, r) {
        var n = r(90), i2 = r(42), o = r(5)("toStringTag"), a3 = i2(function() {
          return arguments;
        }()) == "Arguments";
        e2.exports = n ? i2 : function(e3) {
          var t3, r2, n2;
          return e3 === void 0 ? "Undefined" : e3 === null ? "Null" : typeof (r2 = function(e4, t4) {
            try {
              return e4[t4];
            } catch (e5) {
            }
          }(t3 = Object(e3), o)) == "string" ? r2 : a3 ? i2(t3) : (n2 = i2(t3)) == "Object" && typeof t3.callee == "function" ? "Arguments" : n2;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(18);
        e2.exports = function() {
          var e3 = n(this), t3 = "";
          return e3.global && (t3 += "g"), e3.ignoreCase && (t3 += "i"), e3.multiline && (t3 += "m"), e3.dotAll && (t3 += "s"), e3.unicode && (t3 += "u"), e3.sticky && (t3 += "y"), t3;
        };
      }, function(e2, t2, r) {
        var n = r(47), i2 = r(35), o = function(e3) {
          return function(t3, r2) {
            var o2, a3, s3 = String(i2(t3)), u2 = n(r2), l = s3.length;
            return u2 < 0 || u2 >= l ? e3 ? "" : void 0 : (o2 = s3.charCodeAt(u2)) < 55296 || o2 > 56319 || u2 + 1 === l || (a3 = s3.charCodeAt(u2 + 1)) < 56320 || a3 > 57343 ? e3 ? s3.charAt(u2) : o2 : e3 ? s3.slice(u2, u2 + 2) : a3 - 56320 + (o2 - 55296 << 10) + 65536;
          };
        };
        e2.exports = { codeAt: o(false), charAt: o(true) };
      }, function(e2, t2, r) {
        var n = r(4), i2 = r(27), o = r(61);
        n({ target: "Object", stat: true, forced: r(8)(function() {
          o(1);
        }) }, { keys: function(e3) {
          return o(i2(e3));
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(11), o = r(123), a3 = r(25), s3 = r(140), u2 = r(141), l = r(142), c2 = r(13), h3 = r(8), p = r(208), f = r(62), d3 = r(209);
        e2.exports = function(e3, t3, r2) {
          var m3 = e3.indexOf("Map") !== -1, y3 = e3.indexOf("Weak") !== -1, v = m3 ? "set" : "add", _ = i2[e3], g = _ && _.prototype, b2 = _, x2 = {}, w2 = function(e4) {
            var t4 = g[e4];
            a3(g, e4, e4 == "add" ? function(e5) {
              return t4.call(this, e5 === 0 ? 0 : e5), this;
            } : e4 == "delete" ? function(e5) {
              return !(y3 && !c2(e5)) && t4.call(this, e5 === 0 ? 0 : e5);
            } : e4 == "get" ? function(e5) {
              return y3 && !c2(e5) ? void 0 : t4.call(this, e5 === 0 ? 0 : e5);
            } : e4 == "has" ? function(e5) {
              return !(y3 && !c2(e5)) && t4.call(this, e5 === 0 ? 0 : e5);
            } : function(e5, r3) {
              return t4.call(this, e5 === 0 ? 0 : e5, r3), this;
            });
          };
          if (o(e3, typeof _ != "function" || !(y3 || g.forEach && !h3(function() {
            new _().entries().next();
          }))))
            b2 = r2.getConstructor(t3, e3, m3, v), s3.REQUIRED = true;
          else if (o(e3, true)) {
            var E2 = new b2(), D2 = E2[v](y3 ? {} : -0, 1) != E2, S3 = h3(function() {
              E2.has(1);
            }), C = p(function(e4) {
              new _(e4);
            }), A = !y3 && h3(function() {
              for (var e4 = new _(), t4 = 5; t4--; )
                e4[v](t4, t4);
              return !e4.has(-0);
            });
            C || ((b2 = t3(function(t4, r3) {
              l(t4, b2, e3);
              var n2 = d3(new _(), t4, b2);
              return r3 != null && u2(r3, n2[v], n2, m3), n2;
            })).prototype = g, g.constructor = b2), (S3 || A) && (w2("delete"), w2("has"), m3 && w2("get")), (A || D2) && w2(v), y3 && g.clear && delete g.clear;
          }
          return x2[e3] = b2, n({ global: true, forced: b2 != _ }, x2), f(b2, e3), y3 || r2.setStrong(b2, e3, m3), b2;
        };
      }, function(e2, t2, r) {
        var n = r(45), i2 = r(13), o = r(14), a3 = r(15).f, s3 = r(58), u2 = r(204), l = s3("meta"), c2 = 0, h3 = Object.isExtensible || function() {
          return true;
        }, p = function(e3) {
          a3(e3, l, { value: { objectID: "O" + ++c2, weakData: {} } });
        }, f = e2.exports = { REQUIRED: false, fastKey: function(e3, t3) {
          if (!i2(e3))
            return typeof e3 == "symbol" ? e3 : (typeof e3 == "string" ? "S" : "P") + e3;
          if (!o(e3, l)) {
            if (!h3(e3))
              return "F";
            if (!t3)
              return "E";
            p(e3);
          }
          return e3[l].objectID;
        }, getWeakData: function(e3, t3) {
          if (!o(e3, l)) {
            if (!h3(e3))
              return true;
            if (!t3)
              return false;
            p(e3);
          }
          return e3[l].weakData;
        }, onFreeze: function(e3) {
          return u2 && f.REQUIRED && h3(e3) && !o(e3, l) && p(e3), e3;
        } };
        n[l] = true;
      }, function(e2, t2, r) {
        var n = r(18), i2 = r(205), o = r(26), a3 = r(87), s3 = r(206), u2 = r(207), l = function(e3, t3) {
          this.stopped = e3, this.result = t3;
        };
        (e2.exports = function(e3, t3, r2, c2, h3) {
          var p, f, d3, m3, y3, v, _, g = a3(t3, r2, c2 ? 2 : 1);
          if (h3)
            p = e3;
          else {
            if (typeof (f = s3(e3)) != "function")
              throw TypeError("Target is not iterable");
            if (i2(f)) {
              for (d3 = 0, m3 = o(e3.length); m3 > d3; d3++)
                if ((y3 = c2 ? g(n(_ = e3[d3])[0], _[1]) : g(e3[d3])) && y3 instanceof l)
                  return y3;
              return new l(false);
            }
            p = f.call(e3);
          }
          for (v = p.next; !(_ = v.call(p)).done; )
            if (typeof (y3 = u2(p, g, _.value, c2)) == "object" && y3 && y3 instanceof l)
              return y3;
          return new l(false);
        }).stop = function(e3) {
          return new l(true, e3);
        };
      }, function(e2, t2) {
        e2.exports = function(e3, t3, r) {
          if (!(e3 instanceof t3))
            throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(15).f, i2 = r(60), o = r(210), a3 = r(87), s3 = r(142), u2 = r(141), l = r(88), c2 = r(211), h3 = r(16), p = r(140).fastKey, f = r(43), d3 = f.set, m3 = f.getterFor;
        e2.exports = { getConstructor: function(e3, t3, r2, l2) {
          var c3 = e3(function(e4, n2) {
            s3(e4, c3, t3), d3(e4, { type: t3, index: i2(null), first: void 0, last: void 0, size: 0 }), h3 || (e4.size = 0), n2 != null && u2(n2, e4[l2], e4, r2);
          }), f2 = m3(t3), y3 = function(e4, t4, r3) {
            var n2, i3, o2 = f2(e4), a4 = v(e4, t4);
            return a4 ? a4.value = r3 : (o2.last = a4 = { index: i3 = p(t4, true), key: t4, value: r3, previous: n2 = o2.last, next: void 0, removed: false }, o2.first || (o2.first = a4), n2 && (n2.next = a4), h3 ? o2.size++ : e4.size++, i3 !== "F" && (o2.index[i3] = a4)), e4;
          }, v = function(e4, t4) {
            var r3, n2 = f2(e4), i3 = p(t4);
            if (i3 !== "F")
              return n2.index[i3];
            for (r3 = n2.first; r3; r3 = r3.next)
              if (r3.key == t4)
                return r3;
          };
          return o(c3.prototype, { clear: function() {
            for (var e4 = f2(this), t4 = e4.index, r3 = e4.first; r3; )
              r3.removed = true, r3.previous && (r3.previous = r3.previous.next = void 0), delete t4[r3.index], r3 = r3.next;
            e4.first = e4.last = void 0, h3 ? e4.size = 0 : this.size = 0;
          }, delete: function(e4) {
            var t4 = f2(this), r3 = v(this, e4);
            if (r3) {
              var n2 = r3.next, i3 = r3.previous;
              delete t4.index[r3.index], r3.removed = true, i3 && (i3.next = n2), n2 && (n2.previous = i3), t4.first == r3 && (t4.first = n2), t4.last == r3 && (t4.last = i3), h3 ? t4.size-- : this.size--;
            }
            return !!r3;
          }, forEach: function(e4) {
            for (var t4, r3 = f2(this), n2 = a3(e4, arguments.length > 1 ? arguments[1] : void 0, 3); t4 = t4 ? t4.next : r3.first; )
              for (n2(t4.value, t4.key, this); t4 && t4.removed; )
                t4 = t4.previous;
          }, has: function(e4) {
            return !!v(this, e4);
          } }), o(c3.prototype, r2 ? { get: function(e4) {
            var t4 = v(this, e4);
            return t4 && t4.value;
          }, set: function(e4, t4) {
            return y3(this, e4 === 0 ? 0 : e4, t4);
          } } : { add: function(e4) {
            return y3(this, e4 = e4 === 0 ? 0 : e4, e4);
          } }), h3 && n(c3.prototype, "size", { get: function() {
            return f2(this).size;
          } }), c3;
        }, setStrong: function(e3, t3, r2) {
          var n2 = t3 + " Iterator", i3 = m3(t3), o2 = m3(n2);
          l(e3, t3, function(e4, t4) {
            d3(this, { type: n2, target: e4, state: i3(e4), kind: t4, last: void 0 });
          }, function() {
            for (var e4 = o2(this), t4 = e4.kind, r3 = e4.last; r3 && r3.removed; )
              r3 = r3.previous;
            return e4.target && (e4.last = r3 = r3 ? r3.next : e4.state.first) ? t4 == "keys" ? { value: r3.key, done: false } : t4 == "values" ? { value: r3.value, done: false } : { value: [r3.key, r3.value], done: false } : (e4.target = void 0, { value: void 0, done: true });
          }, r2 ? "entries" : "values", !r2, true), c2(t3);
        } };
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = r(4), o = r(55).f, a3 = r(26), s3 = r(222), u2 = r(35), l = r(224), c2 = r(44), h3 = "".endsWith, p = Math.min, f = l("endsWith");
        i2({ target: "String", proto: true, forced: !!(c2 || f || (n = o(String.prototype, "endsWith"), !n || n.writable)) && !f }, { endsWith: function(e3) {
          var t3 = String(u2(this));
          s3(e3);
          var r2 = arguments.length > 1 ? arguments[1] : void 0, n2 = a3(t3.length), i3 = r2 === void 0 ? n2 : p(a3(r2), n2), o2 = String(e3);
          return h3 ? h3.call(t3, o2, i3) : t3.slice(i3 - o2.length, i3) === o2;
        } });
      }, function(e2, t2, r) {
        "use strict";
        (function(e3) {
          var n = r(229), i2 = r(230), o = r(231);
          function a3() {
            return u2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
          }
          function s3(e4, t3) {
            if (a3() < t3)
              throw new RangeError("Invalid typed array length");
            return u2.TYPED_ARRAY_SUPPORT ? (e4 = new Uint8Array(t3)).__proto__ = u2.prototype : (e4 === null && (e4 = new u2(t3)), e4.length = t3), e4;
          }
          function u2(e4, t3, r2) {
            if (!(u2.TYPED_ARRAY_SUPPORT || this instanceof u2))
              return new u2(e4, t3, r2);
            if (typeof e4 == "number") {
              if (typeof t3 == "string")
                throw new Error("If encoding is specified then the first argument must be a string");
              return h3(this, e4);
            }
            return l(this, e4, t3, r2);
          }
          function l(e4, t3, r2, n2) {
            if (typeof t3 == "number")
              throw new TypeError('"value" argument must not be a number');
            return typeof ArrayBuffer != "undefined" && t3 instanceof ArrayBuffer ? function(e5, t4, r3, n3) {
              if (t4.byteLength, r3 < 0 || t4.byteLength < r3)
                throw new RangeError("'offset' is out of bounds");
              if (t4.byteLength < r3 + (n3 || 0))
                throw new RangeError("'length' is out of bounds");
              t4 = r3 === void 0 && n3 === void 0 ? new Uint8Array(t4) : n3 === void 0 ? new Uint8Array(t4, r3) : new Uint8Array(t4, r3, n3);
              u2.TYPED_ARRAY_SUPPORT ? (e5 = t4).__proto__ = u2.prototype : e5 = p(e5, t4);
              return e5;
            }(e4, t3, r2, n2) : typeof t3 == "string" ? function(e5, t4, r3) {
              typeof r3 == "string" && r3 !== "" || (r3 = "utf8");
              if (!u2.isEncoding(r3))
                throw new TypeError('"encoding" must be a valid string encoding');
              var n3 = 0 | d3(t4, r3), i3 = (e5 = s3(e5, n3)).write(t4, r3);
              i3 !== n3 && (e5 = e5.slice(0, i3));
              return e5;
            }(e4, t3, r2) : function(e5, t4) {
              if (u2.isBuffer(t4)) {
                var r3 = 0 | f(t4.length);
                return (e5 = s3(e5, r3)).length === 0 || t4.copy(e5, 0, 0, r3), e5;
              }
              if (t4) {
                if (typeof ArrayBuffer != "undefined" && t4.buffer instanceof ArrayBuffer || "length" in t4)
                  return typeof t4.length != "number" || (n3 = t4.length) != n3 ? s3(e5, 0) : p(e5, t4);
                if (t4.type === "Buffer" && o(t4.data))
                  return p(e5, t4.data);
              }
              var n3;
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }(e4, t3);
          }
          function c2(e4) {
            if (typeof e4 != "number")
              throw new TypeError('"size" argument must be a number');
            if (e4 < 0)
              throw new RangeError('"size" argument must not be negative');
          }
          function h3(e4, t3) {
            if (c2(t3), e4 = s3(e4, t3 < 0 ? 0 : 0 | f(t3)), !u2.TYPED_ARRAY_SUPPORT)
              for (var r2 = 0; r2 < t3; ++r2)
                e4[r2] = 0;
            return e4;
          }
          function p(e4, t3) {
            var r2 = t3.length < 0 ? 0 : 0 | f(t3.length);
            e4 = s3(e4, r2);
            for (var n2 = 0; n2 < r2; n2 += 1)
              e4[n2] = 255 & t3[n2];
            return e4;
          }
          function f(e4) {
            if (e4 >= a3())
              throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a3().toString(16) + " bytes");
            return 0 | e4;
          }
          function d3(e4, t3) {
            if (u2.isBuffer(e4))
              return e4.length;
            if (typeof ArrayBuffer != "undefined" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(e4) || e4 instanceof ArrayBuffer))
              return e4.byteLength;
            typeof e4 != "string" && (e4 = "" + e4);
            var r2 = e4.length;
            if (r2 === 0)
              return 0;
            for (var n2 = false; ; )
              switch (t3) {
                case "ascii":
                case "latin1":
                case "binary":
                  return r2;
                case "utf8":
                case "utf-8":
                case void 0:
                  return z2(e4).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return 2 * r2;
                case "hex":
                  return r2 >>> 1;
                case "base64":
                  return U(e4).length;
                default:
                  if (n2)
                    return z2(e4).length;
                  t3 = ("" + t3).toLowerCase(), n2 = true;
              }
          }
          function m3(e4, t3, r2) {
            var n2 = false;
            if ((t3 === void 0 || t3 < 0) && (t3 = 0), t3 > this.length)
              return "";
            if ((r2 === void 0 || r2 > this.length) && (r2 = this.length), r2 <= 0)
              return "";
            if ((r2 >>>= 0) <= (t3 >>>= 0))
              return "";
            for (e4 || (e4 = "utf8"); ; )
              switch (e4) {
                case "hex":
                  return T2(this, t3, r2);
                case "utf8":
                case "utf-8":
                  return C(this, t3, r2);
                case "ascii":
                  return A(this, t3, r2);
                case "latin1":
                case "binary":
                  return N(this, t3, r2);
                case "base64":
                  return S3(this, t3, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return O2(this, t3, r2);
                default:
                  if (n2)
                    throw new TypeError("Unknown encoding: " + e4);
                  e4 = (e4 + "").toLowerCase(), n2 = true;
              }
          }
          function y3(e4, t3, r2) {
            var n2 = e4[t3];
            e4[t3] = e4[r2], e4[r2] = n2;
          }
          function v(e4, t3, r2, n2, i3) {
            if (e4.length === 0)
              return -1;
            if (typeof r2 == "string" ? (n2 = r2, r2 = 0) : r2 > 2147483647 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), r2 = +r2, isNaN(r2) && (r2 = i3 ? 0 : e4.length - 1), r2 < 0 && (r2 = e4.length + r2), r2 >= e4.length) {
              if (i3)
                return -1;
              r2 = e4.length - 1;
            } else if (r2 < 0) {
              if (!i3)
                return -1;
              r2 = 0;
            }
            if (typeof t3 == "string" && (t3 = u2.from(t3, n2)), u2.isBuffer(t3))
              return t3.length === 0 ? -1 : _(e4, t3, r2, n2, i3);
            if (typeof t3 == "number")
              return t3 &= 255, u2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? i3 ? Uint8Array.prototype.indexOf.call(e4, t3, r2) : Uint8Array.prototype.lastIndexOf.call(e4, t3, r2) : _(e4, [t3], r2, n2, i3);
            throw new TypeError("val must be string, number or Buffer");
          }
          function _(e4, t3, r2, n2, i3) {
            var o2, a4 = 1, s4 = e4.length, u3 = t3.length;
            if (n2 !== void 0 && ((n2 = String(n2).toLowerCase()) === "ucs2" || n2 === "ucs-2" || n2 === "utf16le" || n2 === "utf-16le")) {
              if (e4.length < 2 || t3.length < 2)
                return -1;
              a4 = 2, s4 /= 2, u3 /= 2, r2 /= 2;
            }
            function l2(e5, t4) {
              return a4 === 1 ? e5[t4] : e5.readUInt16BE(t4 * a4);
            }
            if (i3) {
              var c3 = -1;
              for (o2 = r2; o2 < s4; o2++)
                if (l2(e4, o2) === l2(t3, c3 === -1 ? 0 : o2 - c3)) {
                  if (c3 === -1 && (c3 = o2), o2 - c3 + 1 === u3)
                    return c3 * a4;
                } else
                  c3 !== -1 && (o2 -= o2 - c3), c3 = -1;
            } else
              for (r2 + u3 > s4 && (r2 = s4 - u3), o2 = r2; o2 >= 0; o2--) {
                for (var h4 = true, p2 = 0; p2 < u3; p2++)
                  if (l2(e4, o2 + p2) !== l2(t3, p2)) {
                    h4 = false;
                    break;
                  }
                if (h4)
                  return o2;
              }
            return -1;
          }
          function g(e4, t3, r2, n2) {
            r2 = Number(r2) || 0;
            var i3 = e4.length - r2;
            n2 ? (n2 = Number(n2)) > i3 && (n2 = i3) : n2 = i3;
            var o2 = t3.length;
            if (o2 % 2 != 0)
              throw new TypeError("Invalid hex string");
            n2 > o2 / 2 && (n2 = o2 / 2);
            for (var a4 = 0; a4 < n2; ++a4) {
              var s4 = parseInt(t3.substr(2 * a4, 2), 16);
              if (isNaN(s4))
                return a4;
              e4[r2 + a4] = s4;
            }
            return a4;
          }
          function b2(e4, t3, r2, n2) {
            return G2(z2(t3, e4.length - r2), e4, r2, n2);
          }
          function x2(e4, t3, r2, n2) {
            return G2(function(e5) {
              for (var t4 = [], r3 = 0; r3 < e5.length; ++r3)
                t4.push(255 & e5.charCodeAt(r3));
              return t4;
            }(t3), e4, r2, n2);
          }
          function w2(e4, t3, r2, n2) {
            return x2(e4, t3, r2, n2);
          }
          function E2(e4, t3, r2, n2) {
            return G2(U(t3), e4, r2, n2);
          }
          function D2(e4, t3, r2, n2) {
            return G2(function(e5, t4) {
              for (var r3, n3, i3, o2 = [], a4 = 0; a4 < e5.length && !((t4 -= 2) < 0); ++a4)
                r3 = e5.charCodeAt(a4), n3 = r3 >> 8, i3 = r3 % 256, o2.push(i3), o2.push(n3);
              return o2;
            }(t3, e4.length - r2), e4, r2, n2);
          }
          function S3(e4, t3, r2) {
            return t3 === 0 && r2 === e4.length ? n.fromByteArray(e4) : n.fromByteArray(e4.slice(t3, r2));
          }
          function C(e4, t3, r2) {
            r2 = Math.min(e4.length, r2);
            for (var n2 = [], i3 = t3; i3 < r2; ) {
              var o2, a4, s4, u3, l2 = e4[i3], c3 = null, h4 = l2 > 239 ? 4 : l2 > 223 ? 3 : l2 > 191 ? 2 : 1;
              if (i3 + h4 <= r2)
                switch (h4) {
                  case 1:
                    l2 < 128 && (c3 = l2);
                    break;
                  case 2:
                    (192 & (o2 = e4[i3 + 1])) == 128 && (u3 = (31 & l2) << 6 | 63 & o2) > 127 && (c3 = u3);
                    break;
                  case 3:
                    o2 = e4[i3 + 1], a4 = e4[i3 + 2], (192 & o2) == 128 && (192 & a4) == 128 && (u3 = (15 & l2) << 12 | (63 & o2) << 6 | 63 & a4) > 2047 && (u3 < 55296 || u3 > 57343) && (c3 = u3);
                    break;
                  case 4:
                    o2 = e4[i3 + 1], a4 = e4[i3 + 2], s4 = e4[i3 + 3], (192 & o2) == 128 && (192 & a4) == 128 && (192 & s4) == 128 && (u3 = (15 & l2) << 18 | (63 & o2) << 12 | (63 & a4) << 6 | 63 & s4) > 65535 && u3 < 1114112 && (c3 = u3);
                }
              c3 === null ? (c3 = 65533, h4 = 1) : c3 > 65535 && (c3 -= 65536, n2.push(c3 >>> 10 & 1023 | 55296), c3 = 56320 | 1023 & c3), n2.push(c3), i3 += h4;
            }
            return function(e5) {
              var t4 = e5.length;
              if (t4 <= 4096)
                return String.fromCharCode.apply(String, e5);
              var r3 = "", n3 = 0;
              for (; n3 < t4; )
                r3 += String.fromCharCode.apply(String, e5.slice(n3, n3 += 4096));
              return r3;
            }(n2);
          }
          t2.Buffer = u2, t2.SlowBuffer = function(e4) {
            +e4 != e4 && (e4 = 0);
            return u2.alloc(+e4);
          }, t2.INSPECT_MAX_BYTES = 50, u2.TYPED_ARRAY_SUPPORT = e3.TYPED_ARRAY_SUPPORT !== void 0 ? e3.TYPED_ARRAY_SUPPORT : function() {
            try {
              var e4 = new Uint8Array(1);
              return e4.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                return 42;
              } }, e4.foo() === 42 && typeof e4.subarray == "function" && e4.subarray(1, 1).byteLength === 0;
            } catch (e5) {
              return false;
            }
          }(), t2.kMaxLength = a3(), u2.poolSize = 8192, u2._augment = function(e4) {
            return e4.__proto__ = u2.prototype, e4;
          }, u2.from = function(e4, t3, r2) {
            return l(null, e4, t3, r2);
          }, u2.TYPED_ARRAY_SUPPORT && (u2.prototype.__proto__ = Uint8Array.prototype, u2.__proto__ = Uint8Array, typeof Symbol != "undefined" && Symbol.species && u2[Symbol.species] === u2 && Object.defineProperty(u2, Symbol.species, { value: null, configurable: true })), u2.alloc = function(e4, t3, r2) {
            return function(e5, t4, r3, n2) {
              return c2(t4), t4 <= 0 ? s3(e5, t4) : r3 !== void 0 ? typeof n2 == "string" ? s3(e5, t4).fill(r3, n2) : s3(e5, t4).fill(r3) : s3(e5, t4);
            }(null, e4, t3, r2);
          }, u2.allocUnsafe = function(e4) {
            return h3(null, e4);
          }, u2.allocUnsafeSlow = function(e4) {
            return h3(null, e4);
          }, u2.isBuffer = function(e4) {
            return !(e4 == null || !e4._isBuffer);
          }, u2.compare = function(e4, t3) {
            if (!u2.isBuffer(e4) || !u2.isBuffer(t3))
              throw new TypeError("Arguments must be Buffers");
            if (e4 === t3)
              return 0;
            for (var r2 = e4.length, n2 = t3.length, i3 = 0, o2 = Math.min(r2, n2); i3 < o2; ++i3)
              if (e4[i3] !== t3[i3]) {
                r2 = e4[i3], n2 = t3[i3];
                break;
              }
            return r2 < n2 ? -1 : n2 < r2 ? 1 : 0;
          }, u2.isEncoding = function(e4) {
            switch (String(e4).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, u2.concat = function(e4, t3) {
            if (!o(e4))
              throw new TypeError('"list" argument must be an Array of Buffers');
            if (e4.length === 0)
              return u2.alloc(0);
            var r2;
            if (t3 === void 0)
              for (t3 = 0, r2 = 0; r2 < e4.length; ++r2)
                t3 += e4[r2].length;
            var n2 = u2.allocUnsafe(t3), i3 = 0;
            for (r2 = 0; r2 < e4.length; ++r2) {
              var a4 = e4[r2];
              if (!u2.isBuffer(a4))
                throw new TypeError('"list" argument must be an Array of Buffers');
              a4.copy(n2, i3), i3 += a4.length;
            }
            return n2;
          }, u2.byteLength = d3, u2.prototype._isBuffer = true, u2.prototype.swap16 = function() {
            var e4 = this.length;
            if (e4 % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t3 = 0; t3 < e4; t3 += 2)
              y3(this, t3, t3 + 1);
            return this;
          }, u2.prototype.swap32 = function() {
            var e4 = this.length;
            if (e4 % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t3 = 0; t3 < e4; t3 += 4)
              y3(this, t3, t3 + 3), y3(this, t3 + 1, t3 + 2);
            return this;
          }, u2.prototype.swap64 = function() {
            var e4 = this.length;
            if (e4 % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t3 = 0; t3 < e4; t3 += 8)
              y3(this, t3, t3 + 7), y3(this, t3 + 1, t3 + 6), y3(this, t3 + 2, t3 + 5), y3(this, t3 + 3, t3 + 4);
            return this;
          }, u2.prototype.toString = function() {
            var e4 = 0 | this.length;
            return e4 === 0 ? "" : arguments.length === 0 ? C(this, 0, e4) : m3.apply(this, arguments);
          }, u2.prototype.equals = function(e4) {
            if (!u2.isBuffer(e4))
              throw new TypeError("Argument must be a Buffer");
            return this === e4 || u2.compare(this, e4) === 0;
          }, u2.prototype.inspect = function() {
            var e4 = "", r2 = t2.INSPECT_MAX_BYTES;
            return this.length > 0 && (e4 = this.toString("hex", 0, r2).match(/.{2}/g).join(" "), this.length > r2 && (e4 += " ... ")), "<Buffer " + e4 + ">";
          }, u2.prototype.compare = function(e4, t3, r2, n2, i3) {
            if (!u2.isBuffer(e4))
              throw new TypeError("Argument must be a Buffer");
            if (t3 === void 0 && (t3 = 0), r2 === void 0 && (r2 = e4 ? e4.length : 0), n2 === void 0 && (n2 = 0), i3 === void 0 && (i3 = this.length), t3 < 0 || r2 > e4.length || n2 < 0 || i3 > this.length)
              throw new RangeError("out of range index");
            if (n2 >= i3 && t3 >= r2)
              return 0;
            if (n2 >= i3)
              return -1;
            if (t3 >= r2)
              return 1;
            if (this === e4)
              return 0;
            for (var o2 = (i3 >>>= 0) - (n2 >>>= 0), a4 = (r2 >>>= 0) - (t3 >>>= 0), s4 = Math.min(o2, a4), l2 = this.slice(n2, i3), c3 = e4.slice(t3, r2), h4 = 0; h4 < s4; ++h4)
              if (l2[h4] !== c3[h4]) {
                o2 = l2[h4], a4 = c3[h4];
                break;
              }
            return o2 < a4 ? -1 : a4 < o2 ? 1 : 0;
          }, u2.prototype.includes = function(e4, t3, r2) {
            return this.indexOf(e4, t3, r2) !== -1;
          }, u2.prototype.indexOf = function(e4, t3, r2) {
            return v(this, e4, t3, r2, true);
          }, u2.prototype.lastIndexOf = function(e4, t3, r2) {
            return v(this, e4, t3, r2, false);
          }, u2.prototype.write = function(e4, t3, r2, n2) {
            if (t3 === void 0)
              n2 = "utf8", r2 = this.length, t3 = 0;
            else if (r2 === void 0 && typeof t3 == "string")
              n2 = t3, r2 = this.length, t3 = 0;
            else {
              if (!isFinite(t3))
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t3 |= 0, isFinite(r2) ? (r2 |= 0, n2 === void 0 && (n2 = "utf8")) : (n2 = r2, r2 = void 0);
            }
            var i3 = this.length - t3;
            if ((r2 === void 0 || r2 > i3) && (r2 = i3), e4.length > 0 && (r2 < 0 || t3 < 0) || t3 > this.length)
              throw new RangeError("Attempt to write outside buffer bounds");
            n2 || (n2 = "utf8");
            for (var o2 = false; ; )
              switch (n2) {
                case "hex":
                  return g(this, e4, t3, r2);
                case "utf8":
                case "utf-8":
                  return b2(this, e4, t3, r2);
                case "ascii":
                  return x2(this, e4, t3, r2);
                case "latin1":
                case "binary":
                  return w2(this, e4, t3, r2);
                case "base64":
                  return E2(this, e4, t3, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return D2(this, e4, t3, r2);
                default:
                  if (o2)
                    throw new TypeError("Unknown encoding: " + n2);
                  n2 = ("" + n2).toLowerCase(), o2 = true;
              }
          }, u2.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          };
          function A(e4, t3, r2) {
            var n2 = "";
            r2 = Math.min(e4.length, r2);
            for (var i3 = t3; i3 < r2; ++i3)
              n2 += String.fromCharCode(127 & e4[i3]);
            return n2;
          }
          function N(e4, t3, r2) {
            var n2 = "";
            r2 = Math.min(e4.length, r2);
            for (var i3 = t3; i3 < r2; ++i3)
              n2 += String.fromCharCode(e4[i3]);
            return n2;
          }
          function T2(e4, t3, r2) {
            var n2 = e4.length;
            (!t3 || t3 < 0) && (t3 = 0), (!r2 || r2 < 0 || r2 > n2) && (r2 = n2);
            for (var i3 = "", o2 = t3; o2 < r2; ++o2)
              i3 += R2(e4[o2]);
            return i3;
          }
          function O2(e4, t3, r2) {
            for (var n2 = e4.slice(t3, r2), i3 = "", o2 = 0; o2 < n2.length; o2 += 2)
              i3 += String.fromCharCode(n2[o2] + 256 * n2[o2 + 1]);
            return i3;
          }
          function F(e4, t3, r2) {
            if (e4 % 1 != 0 || e4 < 0)
              throw new RangeError("offset is not uint");
            if (e4 + t3 > r2)
              throw new RangeError("Trying to access beyond buffer length");
          }
          function k2(e4, t3, r2, n2, i3, o2) {
            if (!u2.isBuffer(e4))
              throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t3 > i3 || t3 < o2)
              throw new RangeError('"value" argument is out of bounds');
            if (r2 + n2 > e4.length)
              throw new RangeError("Index out of range");
          }
          function P(e4, t3, r2, n2) {
            t3 < 0 && (t3 = 65535 + t3 + 1);
            for (var i3 = 0, o2 = Math.min(e4.length - r2, 2); i3 < o2; ++i3)
              e4[r2 + i3] = (t3 & 255 << 8 * (n2 ? i3 : 1 - i3)) >>> 8 * (n2 ? i3 : 1 - i3);
          }
          function I2(e4, t3, r2, n2) {
            t3 < 0 && (t3 = 4294967295 + t3 + 1);
            for (var i3 = 0, o2 = Math.min(e4.length - r2, 4); i3 < o2; ++i3)
              e4[r2 + i3] = t3 >>> 8 * (n2 ? i3 : 3 - i3) & 255;
          }
          function L2(e4, t3, r2, n2, i3, o2) {
            if (r2 + n2 > e4.length)
              throw new RangeError("Index out of range");
            if (r2 < 0)
              throw new RangeError("Index out of range");
          }
          function M3(e4, t3, r2, n2, o2) {
            return o2 || L2(e4, 0, r2, 4), i2.write(e4, t3, r2, n2, 23, 4), r2 + 4;
          }
          function B2(e4, t3, r2, n2, o2) {
            return o2 || L2(e4, 0, r2, 8), i2.write(e4, t3, r2, n2, 52, 8), r2 + 8;
          }
          u2.prototype.slice = function(e4, t3) {
            var r2, n2 = this.length;
            if ((e4 = ~~e4) < 0 ? (e4 += n2) < 0 && (e4 = 0) : e4 > n2 && (e4 = n2), (t3 = t3 === void 0 ? n2 : ~~t3) < 0 ? (t3 += n2) < 0 && (t3 = 0) : t3 > n2 && (t3 = n2), t3 < e4 && (t3 = e4), u2.TYPED_ARRAY_SUPPORT)
              (r2 = this.subarray(e4, t3)).__proto__ = u2.prototype;
            else {
              var i3 = t3 - e4;
              r2 = new u2(i3, void 0);
              for (var o2 = 0; o2 < i3; ++o2)
                r2[o2] = this[o2 + e4];
            }
            return r2;
          }, u2.prototype.readUIntLE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = this[e4], i3 = 1, o2 = 0; ++o2 < t3 && (i3 *= 256); )
              n2 += this[e4 + o2] * i3;
            return n2;
          }, u2.prototype.readUIntBE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = this[e4 + --t3], i3 = 1; t3 > 0 && (i3 *= 256); )
              n2 += this[e4 + --t3] * i3;
            return n2;
          }, u2.prototype.readUInt8 = function(e4, t3) {
            return t3 || F(e4, 1, this.length), this[e4];
          }, u2.prototype.readUInt16LE = function(e4, t3) {
            return t3 || F(e4, 2, this.length), this[e4] | this[e4 + 1] << 8;
          }, u2.prototype.readUInt16BE = function(e4, t3) {
            return t3 || F(e4, 2, this.length), this[e4] << 8 | this[e4 + 1];
          }, u2.prototype.readUInt32LE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), (this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16) + 16777216 * this[e4 + 3];
          }, u2.prototype.readUInt32BE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), 16777216 * this[e4] + (this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3]);
          }, u2.prototype.readIntLE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = this[e4], i3 = 1, o2 = 0; ++o2 < t3 && (i3 *= 256); )
              n2 += this[e4 + o2] * i3;
            return n2 >= (i3 *= 128) && (n2 -= Math.pow(2, 8 * t3)), n2;
          }, u2.prototype.readIntBE = function(e4, t3, r2) {
            e4 |= 0, t3 |= 0, r2 || F(e4, t3, this.length);
            for (var n2 = t3, i3 = 1, o2 = this[e4 + --n2]; n2 > 0 && (i3 *= 256); )
              o2 += this[e4 + --n2] * i3;
            return o2 >= (i3 *= 128) && (o2 -= Math.pow(2, 8 * t3)), o2;
          }, u2.prototype.readInt8 = function(e4, t3) {
            return t3 || F(e4, 1, this.length), 128 & this[e4] ? -1 * (255 - this[e4] + 1) : this[e4];
          }, u2.prototype.readInt16LE = function(e4, t3) {
            t3 || F(e4, 2, this.length);
            var r2 = this[e4] | this[e4 + 1] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u2.prototype.readInt16BE = function(e4, t3) {
            t3 || F(e4, 2, this.length);
            var r2 = this[e4 + 1] | this[e4] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u2.prototype.readInt32LE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16 | this[e4 + 3] << 24;
          }, u2.prototype.readInt32BE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), this[e4] << 24 | this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3];
          }, u2.prototype.readFloatLE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), i2.read(this, e4, true, 23, 4);
          }, u2.prototype.readFloatBE = function(e4, t3) {
            return t3 || F(e4, 4, this.length), i2.read(this, e4, false, 23, 4);
          }, u2.prototype.readDoubleLE = function(e4, t3) {
            return t3 || F(e4, 8, this.length), i2.read(this, e4, true, 52, 8);
          }, u2.prototype.readDoubleBE = function(e4, t3) {
            return t3 || F(e4, 8, this.length), i2.read(this, e4, false, 52, 8);
          }, u2.prototype.writeUIntLE = function(e4, t3, r2, n2) {
            (e4 = +e4, t3 |= 0, r2 |= 0, n2) || k2(this, e4, t3, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i3 = 1, o2 = 0;
            for (this[t3] = 255 & e4; ++o2 < r2 && (i3 *= 256); )
              this[t3 + o2] = e4 / i3 & 255;
            return t3 + r2;
          }, u2.prototype.writeUIntBE = function(e4, t3, r2, n2) {
            (e4 = +e4, t3 |= 0, r2 |= 0, n2) || k2(this, e4, t3, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i3 = r2 - 1, o2 = 1;
            for (this[t3 + i3] = 255 & e4; --i3 >= 0 && (o2 *= 256); )
              this[t3 + i3] = e4 / o2 & 255;
            return t3 + r2;
          }, u2.prototype.writeUInt8 = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 1, 255, 0), u2.TYPED_ARRAY_SUPPORT || (e4 = Math.floor(e4)), this[t3] = 255 & e4, t3 + 1;
          }, u2.prototype.writeUInt16LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 65535, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8) : P(this, e4, t3, true), t3 + 2;
          }, u2.prototype.writeUInt16BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 65535, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4) : P(this, e4, t3, false), t3 + 2;
          }, u2.prototype.writeUInt32LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 4294967295, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3 + 3] = e4 >>> 24, this[t3 + 2] = e4 >>> 16, this[t3 + 1] = e4 >>> 8, this[t3] = 255 & e4) : I2(this, e4, t3, true), t3 + 4;
          }, u2.prototype.writeUInt32BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 4294967295, 0), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4) : I2(this, e4, t3, false), t3 + 4;
          }, u2.prototype.writeIntLE = function(e4, t3, r2, n2) {
            if (e4 = +e4, t3 |= 0, !n2) {
              var i3 = Math.pow(2, 8 * r2 - 1);
              k2(this, e4, t3, r2, i3 - 1, -i3);
            }
            var o2 = 0, a4 = 1, s4 = 0;
            for (this[t3] = 255 & e4; ++o2 < r2 && (a4 *= 256); )
              e4 < 0 && s4 === 0 && this[t3 + o2 - 1] !== 0 && (s4 = 1), this[t3 + o2] = (e4 / a4 >> 0) - s4 & 255;
            return t3 + r2;
          }, u2.prototype.writeIntBE = function(e4, t3, r2, n2) {
            if (e4 = +e4, t3 |= 0, !n2) {
              var i3 = Math.pow(2, 8 * r2 - 1);
              k2(this, e4, t3, r2, i3 - 1, -i3);
            }
            var o2 = r2 - 1, a4 = 1, s4 = 0;
            for (this[t3 + o2] = 255 & e4; --o2 >= 0 && (a4 *= 256); )
              e4 < 0 && s4 === 0 && this[t3 + o2 + 1] !== 0 && (s4 = 1), this[t3 + o2] = (e4 / a4 >> 0) - s4 & 255;
            return t3 + r2;
          }, u2.prototype.writeInt8 = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 1, 127, -128), u2.TYPED_ARRAY_SUPPORT || (e4 = Math.floor(e4)), e4 < 0 && (e4 = 255 + e4 + 1), this[t3] = 255 & e4, t3 + 1;
          }, u2.prototype.writeInt16LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 32767, -32768), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8) : P(this, e4, t3, true), t3 + 2;
          }, u2.prototype.writeInt16BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 2, 32767, -32768), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4) : P(this, e4, t3, false), t3 + 2;
          }, u2.prototype.writeInt32LE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 2147483647, -2147483648), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8, this[t3 + 2] = e4 >>> 16, this[t3 + 3] = e4 >>> 24) : I2(this, e4, t3, true), t3 + 4;
          }, u2.prototype.writeInt32BE = function(e4, t3, r2) {
            return e4 = +e4, t3 |= 0, r2 || k2(this, e4, t3, 4, 2147483647, -2147483648), e4 < 0 && (e4 = 4294967295 + e4 + 1), u2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4) : I2(this, e4, t3, false), t3 + 4;
          }, u2.prototype.writeFloatLE = function(e4, t3, r2) {
            return M3(this, e4, t3, true, r2);
          }, u2.prototype.writeFloatBE = function(e4, t3, r2) {
            return M3(this, e4, t3, false, r2);
          }, u2.prototype.writeDoubleLE = function(e4, t3, r2) {
            return B2(this, e4, t3, true, r2);
          }, u2.prototype.writeDoubleBE = function(e4, t3, r2) {
            return B2(this, e4, t3, false, r2);
          }, u2.prototype.copy = function(e4, t3, r2, n2) {
            if (r2 || (r2 = 0), n2 || n2 === 0 || (n2 = this.length), t3 >= e4.length && (t3 = e4.length), t3 || (t3 = 0), n2 > 0 && n2 < r2 && (n2 = r2), n2 === r2)
              return 0;
            if (e4.length === 0 || this.length === 0)
              return 0;
            if (t3 < 0)
              throw new RangeError("targetStart out of bounds");
            if (r2 < 0 || r2 >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (n2 < 0)
              throw new RangeError("sourceEnd out of bounds");
            n2 > this.length && (n2 = this.length), e4.length - t3 < n2 - r2 && (n2 = e4.length - t3 + r2);
            var i3, o2 = n2 - r2;
            if (this === e4 && r2 < t3 && t3 < n2)
              for (i3 = o2 - 1; i3 >= 0; --i3)
                e4[i3 + t3] = this[i3 + r2];
            else if (o2 < 1e3 || !u2.TYPED_ARRAY_SUPPORT)
              for (i3 = 0; i3 < o2; ++i3)
                e4[i3 + t3] = this[i3 + r2];
            else
              Uint8Array.prototype.set.call(e4, this.subarray(r2, r2 + o2), t3);
            return o2;
          }, u2.prototype.fill = function(e4, t3, r2, n2) {
            if (typeof e4 == "string") {
              if (typeof t3 == "string" ? (n2 = t3, t3 = 0, r2 = this.length) : typeof r2 == "string" && (n2 = r2, r2 = this.length), e4.length === 1) {
                var i3 = e4.charCodeAt(0);
                i3 < 256 && (e4 = i3);
              }
              if (n2 !== void 0 && typeof n2 != "string")
                throw new TypeError("encoding must be a string");
              if (typeof n2 == "string" && !u2.isEncoding(n2))
                throw new TypeError("Unknown encoding: " + n2);
            } else
              typeof e4 == "number" && (e4 &= 255);
            if (t3 < 0 || this.length < t3 || this.length < r2)
              throw new RangeError("Out of range index");
            if (r2 <= t3)
              return this;
            var o2;
            if (t3 >>>= 0, r2 = r2 === void 0 ? this.length : r2 >>> 0, e4 || (e4 = 0), typeof e4 == "number")
              for (o2 = t3; o2 < r2; ++o2)
                this[o2] = e4;
            else {
              var a4 = u2.isBuffer(e4) ? e4 : z2(new u2(e4, n2).toString()), s4 = a4.length;
              for (o2 = 0; o2 < r2 - t3; ++o2)
                this[o2 + t3] = a4[o2 % s4];
            }
            return this;
          };
          var j = /[^+\/0-9A-Za-z-_]/g;
          function R2(e4) {
            return e4 < 16 ? "0" + e4.toString(16) : e4.toString(16);
          }
          function z2(e4, t3) {
            var r2;
            t3 = t3 || 1 / 0;
            for (var n2 = e4.length, i3 = null, o2 = [], a4 = 0; a4 < n2; ++a4) {
              if ((r2 = e4.charCodeAt(a4)) > 55295 && r2 < 57344) {
                if (!i3) {
                  if (r2 > 56319) {
                    (t3 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  if (a4 + 1 === n2) {
                    (t3 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  i3 = r2;
                  continue;
                }
                if (r2 < 56320) {
                  (t3 -= 3) > -1 && o2.push(239, 191, 189), i3 = r2;
                  continue;
                }
                r2 = 65536 + (i3 - 55296 << 10 | r2 - 56320);
              } else
                i3 && (t3 -= 3) > -1 && o2.push(239, 191, 189);
              if (i3 = null, r2 < 128) {
                if ((t3 -= 1) < 0)
                  break;
                o2.push(r2);
              } else if (r2 < 2048) {
                if ((t3 -= 2) < 0)
                  break;
                o2.push(r2 >> 6 | 192, 63 & r2 | 128);
              } else if (r2 < 65536) {
                if ((t3 -= 3) < 0)
                  break;
                o2.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              } else {
                if (!(r2 < 1114112))
                  throw new Error("Invalid code point");
                if ((t3 -= 4) < 0)
                  break;
                o2.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              }
            }
            return o2;
          }
          function U(e4) {
            return n.toByteArray(function(e5) {
              if ((e5 = function(e6) {
                return e6.trim ? e6.trim() : e6.replace(/^\s+|\s+$/g, "");
              }(e5).replace(j, "")).length < 2)
                return "";
              for (; e5.length % 4 != 0; )
                e5 += "=";
              return e5;
            }(e4));
          }
          function G2(e4, t3, r2, n2) {
            for (var i3 = 0; i3 < n2 && !(i3 + r2 >= t3.length || i3 >= e4.length); ++i3)
              t3[i3 + r2] = e4[i3];
            return i3;
          }
        }).call(this, r(78));
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.isASCIIByte = function(e3) {
          return e3 >= 0 && e3 <= 127;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o = r2.call(e3), a3 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o.next()).done; )
              a3.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o.return) && r2.call(o);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a3;
        }, i2 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(n(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.length = function(e3) {
          return e3.length;
        }, t2.byteLowercase = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3[t3];
            r2 >= 65 && r2 <= 90 && (e3[t3] = r2 + 32);
          }
        }, t2.byteUppercase = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3[t3];
            r2 >= 97 && r2 <= 122 && (e3[t3] = r2 - 32);
          }
        }, t2.byteCaseInsensitiveMatch = function(e3, t3) {
          if (e3.length !== t3.length)
            return false;
          for (var r2 = 0; r2 < e3.length; r2++) {
            var n2 = e3[r2], i3 = t3[r2];
            if (n2 >= 65 && n2 <= 90 && (n2 += 32), i3 >= 65 && i3 <= 90 && (i3 += 32), n2 !== i3)
              return false;
          }
          return true;
        }, t2.startsWith = function(e3, t3) {
          for (var r2 = 0; ; ) {
            if (r2 >= e3.length)
              return false;
            if (r2 >= t3.length)
              return true;
            if (e3[r2] !== t3[r2])
              return false;
            r2++;
          }
        }, t2.byteLessThan = function(e3, t3) {
          for (var r2 = 0; ; ) {
            if (r2 >= e3.length)
              return false;
            if (r2 >= t3.length)
              return true;
            var n2 = e3[r2], i3 = t3[r2];
            if (n2 < i3)
              return true;
            if (n2 > i3)
              return false;
            r2++;
          }
        }, t2.isomorphicDecode = function(e3) {
          return String.fromCodePoint.apply(String, i2(e3));
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(6), i2 = r(7), o = r(0), a3 = r(12), s3 = function() {
          function e3(e4) {
            this._associatedDocument = e4 || n.dom.window.document;
          }
          return e3.prototype.createDocumentType = function(e4, t3, r2) {
            return o.namespace_validate(e4), o.create_documentType(this._associatedDocument, e4, t3, r2);
          }, e3.prototype.createDocument = function(e4, t3, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = o.create_xmlDocument(), a4 = null;
            return t3 && (a4 = o.document_internalCreateElementNS(n2, e4, t3)), r2 && n2.appendChild(r2), a4 && n2.appendChild(a4), n2._origin = this._associatedDocument._origin, e4 === i2.namespace.HTML ? n2._contentType = "application/xhtml+xml" : e4 === i2.namespace.SVG ? n2._contentType = "image/svg+xml" : n2._contentType = "application/xml", n2;
          }, e3.prototype.createHTMLDocument = function(e4) {
            var t3 = o.create_document();
            t3._type = "html", t3._contentType = "text/html", t3.appendChild(o.create_documentType(t3, "html", "", ""));
            var r2 = o.element_createAnElement(t3, "html", i2.namespace.HTML);
            t3.appendChild(r2);
            var n2 = o.element_createAnElement(t3, "head", i2.namespace.HTML);
            if (r2.appendChild(n2), e4 !== void 0) {
              var a4 = o.element_createAnElement(t3, "title", i2.namespace.HTML);
              n2.appendChild(a4);
              var s4 = o.create_text(t3, e4);
              a4.appendChild(s4);
            }
            var u2 = o.element_createAnElement(t3, "body", i2.namespace.HTML);
            return r2.appendChild(u2), t3._origin = this._associatedDocument._origin, t3;
          }, e3.prototype.hasFeature = function() {
            return true;
          }, e3._create = function(t3) {
            return new e3(t3);
          }, e3;
        }();
        t2.DOMImplementationImpl = s3, a3.idl_defineConst(s3.prototype, "_ID", "@oozcitak/dom");
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(70), a3 = r(1), s3 = r(0), u2 = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._signalSlots = /* @__PURE__ */ new Set(), t4._mutationObserverMicrotaskQueued = false, t4._mutationObservers = /* @__PURE__ */ new Set(), t4._iteratorList = new a3.FixedSizeSet(), t4._associatedDocument = s3.create_document(), t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "document", { get: function() {
            return this._associatedDocument;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "event", { get: function() {
            return this._currentEvent;
          }, enumerable: true, configurable: true }), t3._create = function() {
            return new t3();
          }, t3;
        }(o.EventTargetImpl);
        t2.WindowImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = function() {
          function e3() {
          }
          return e3.isNode = function(e4) {
            return !!e4 && e4._nodeType !== void 0;
          }, e3.isDocumentNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Document;
          }, e3.isDocumentTypeNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.DocumentType;
          }, e3.isDocumentFragmentNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.DocumentFragment;
          }, e3.isAttrNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Attribute;
          }, e3.isCharacterDataNode = function(t3) {
            if (!e3.isNode(t3))
              return false;
            var r2 = t3._nodeType;
            return r2 === n.NodeType.Text || r2 === n.NodeType.ProcessingInstruction || r2 === n.NodeType.Comment || r2 === n.NodeType.CData;
          }, e3.isTextNode = function(t3) {
            return e3.isNode(t3) && (t3._nodeType === n.NodeType.Text || t3._nodeType === n.NodeType.CData);
          }, e3.isExclusiveTextNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Text;
          }, e3.isCDATASectionNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.CData;
          }, e3.isCommentNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Comment;
          }, e3.isProcessingInstructionNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.ProcessingInstruction;
          }, e3.isElementNode = function(t3) {
            return e3.isNode(t3) && t3._nodeType === n.NodeType.Element;
          }, e3.isCustomElementNode = function(t3) {
            return e3.isElementNode(t3) && t3._customElementState === "custom";
          }, e3.isShadowRoot = function(e4) {
            return !!e4 && e4.host !== void 0;
          }, e3.isMouseEvent = function(e4) {
            return !!e4 && e4.screenX !== void 0 && e4.screenY != null;
          }, e3.isSlotable = function(t3) {
            return !!t3 && t3._name !== void 0 && t3._assignedSlot !== void 0 && (e3.isTextNode(t3) || e3.isElementNode(t3));
          }, e3.isSlot = function(t3) {
            return !!t3 && t3._name !== void 0 && t3._assignedNodes !== void 0 && e3.isElementNode(t3);
          }, e3.isWindow = function(e4) {
            return !!e4 && e4.navigator !== void 0;
          }, e3.isEventListener = function(e4) {
            return !!e4 && e4.handleEvent !== void 0;
          }, e3.isRegisteredObserver = function(e4) {
            return !!e4 && e4.observer !== void 0 && e4.options !== void 0;
          }, e3.isTransientRegisteredObserver = function(t3) {
            return !!t3 && t3.source !== void 0 && e3.isRegisteredObserver(t3);
          }, e3;
        }();
        t2.Guard = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3() {
            return e3.call(this) || this;
          }
          return i2(t3, e3), t3;
        }(r(98).DocumentImpl);
        t2.XMLDocumentImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o, a3 = r(1), s3 = r(243), u2 = r(7), l = r(244), c2 = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, h3 = /[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, p = /[ "<>`]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, f = /[ "<>`#?{}]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, d3 = /[ "<>`#?{}/:;=@\[\]\\\^\|]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, m3 = /[0-9A-Za-z!\$&-\/:;=\?@_~\xA0-\uD7FF\uE000-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDC00-\uDFFD]/, y3 = /[\0\t\f\r #%/:?@\[\\\]]/;
        function v(e3) {
          o !== void 0 && o.call(null, "Validation Error: " + e3);
        }
        function _() {
          return { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
        }
        function g(e3) {
          return e3 in c2;
        }
        function b2(e3) {
          return g(e3.scheme);
        }
        function x2(e3) {
          return c2[e3] || null;
        }
        function w2(e3) {
          return e3.username !== "" || e3.password !== "";
        }
        function E2(e3, t3) {
          var r2, i3;
          t3 === void 0 && (t3 = false);
          var o2 = e3.scheme + ":";
          if (e3.host !== null ? (o2 += "//", w2(e3) && (o2 += e3.username, e3.password !== "" && (o2 += ":" + e3.password), o2 += "@"), o2 += D2(e3.host), e3.port !== null && (o2 += ":" + e3.port)) : e3.host === null && e3.scheme === "file" && (o2 += "//"), e3._cannotBeABaseURLFlag)
            o2 += e3.path[0];
          else
            try {
              for (var a4 = n(e3.path), s4 = a4.next(); !s4.done; s4 = a4.next()) {
                o2 += "/" + s4.value;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          return e3.query !== null && (o2 += "?" + e3.query), t3 || e3.fragment === null || (o2 += "#" + e3.fragment), o2;
        }
        function D2(e3) {
          return a3.isNumber(e3) ? S3(e3) : a3.isArray(e3) ? "[" + C(e3) + "]" : e3;
        }
        function S3(e3) {
          for (var t3 = "", r2 = e3, n2 = 1; n2 <= 4; n2++)
            t3 = (r2 % 256).toString() + t3, n2 !== 4 && (t3 = "." + t3), r2 = Math.floor(r2 / 256);
          return t3;
        }
        function C(e3) {
          for (var t3 = "", r2 = null, n2 = -1, i3 = 0, o2 = 0, a4 = 0; a4 < 8; a4++)
            if (e3[a4] === 0) {
              i3 = 1;
              for (var s4 = a4 + 1; s4 < 8 && e3[s4] === 0; s4++)
                i3++;
              i3 > o2 && (o2 = i3, n2 = a4);
            }
          o2 > 1 && (r2 = n2);
          for (var u3 = false, l2 = 0; l2 < 8; l2++)
            u3 && e3[l2] === 0 || (u3 && (u3 = false), r2 !== l2 ? (t3 += e3[l2].toString(16), l2 !== 7 && (t3 += ":")) : (t3 += l2 === 0 ? "::" : ":", u3 = true));
          return t3;
        }
        function A(e3, t3, r2, i3, o2) {
          var l2, c3, y4, _2;
          if (i3 === void 0) {
            i3 = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
            var E3 = /^[\u0000-\u001F\u0020]+/, D3 = /[\u0000-\u001F\u0020]+$/;
            (E3.test(e3) || D3.test(e3)) && v("Input string contains leading or trailing control characters or space."), e3 = (e3 = e3.replace(E3, "")).replace(D3, "");
          }
          var S4 = /[\u0009\u000A\u000D]/g;
          S4.test(e3) && v("Input string contains tab or newline characters."), e3 = e3.replace(S4, "");
          var C2 = o2 === void 0 ? s3.ParserState.SchemeStart : o2;
          t3 === void 0 && (t3 = null);
          for (var A2 = r2 === void 0 || r2 === "replacement" || r2 === "UTF-16BE" || r2 === "UTF-16LE" ? "UTF-8" : r2, L3 = "", M4 = false, B3 = false, j2 = false, R3 = new a3.StringWalker(e3); ; ) {
            switch (C2) {
              case s3.ParserState.SchemeStart:
                if (u2.codePoint.ASCIIAlpha.test(R3.c()))
                  L3 += R3.c().toLowerCase(), C2 = s3.ParserState.Scheme;
                else {
                  if (o2 !== void 0)
                    return v("Invalid scheme start character."), null;
                  C2 = s3.ParserState.NoScheme, R3.pointer--;
                }
                break;
              case s3.ParserState.Scheme:
                if (u2.codePoint.ASCIIAlphanumeric.test(R3.c()) || R3.c() === "+" || R3.c() === "-" || R3.c() === ".")
                  L3 += R3.c().toLowerCase();
                else {
                  if (R3.c() !== ":") {
                    if (o2 === void 0) {
                      L3 = "", C2 = s3.ParserState.NoScheme, R3.pointer = 0;
                      continue;
                    }
                    return v("Invalid input string."), null;
                  }
                  if (o2 !== void 0) {
                    if (g(i3.scheme) && !g(L3))
                      return i3;
                    if (!g(i3.scheme) && g(L3))
                      return i3;
                    if ((w2(i3) || i3.port !== null) && L3 === "file")
                      return i3;
                    if (i3.scheme === "file" && (i3.host === "" || i3.host === null))
                      return i3;
                  }
                  if (i3.scheme = L3, o2 !== void 0)
                    return i3.port === x2(i3.scheme) && (i3.port = null), i3;
                  L3 = "", i3.scheme === "file" ? (R3.remaining().startsWith("//") || v("Invalid file URL scheme, '//' expected."), C2 = s3.ParserState.File) : b2(i3) && t3 !== null && t3.scheme === i3.scheme ? C2 = s3.ParserState.SpecialRelativeOrAuthority : b2(i3) ? C2 = s3.ParserState.SpecialAuthoritySlashes : R3.remaining().startsWith("/") ? (C2 = s3.ParserState.PathOrAuthority, R3.pointer++) : (i3._cannotBeABaseURLFlag = true, i3.path.push(""), C2 = s3.ParserState.CannotBeABaseURLPath);
                }
                break;
              case s3.ParserState.NoScheme:
                if (t3 === null || t3._cannotBeABaseURLFlag && R3.c() !== "#")
                  return v("Invalid input string."), null;
                t3._cannotBeABaseURLFlag && R3.c() === "#" ? (i3.scheme = t3.scheme, i3.path = u2.list.clone(t3.path), i3.query = t3.query, i3.fragment = "", i3._cannotBeABaseURLFlag = true, C2 = s3.ParserState.Fragment) : t3.scheme !== "file" ? (C2 = s3.ParserState.Relative, R3.pointer--) : (C2 = s3.ParserState.File, R3.pointer--);
                break;
              case s3.ParserState.SpecialRelativeOrAuthority:
                R3.c() === "/" && R3.remaining().startsWith("/") ? (C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes, R3.pointer++) : (v("Invalid input string."), C2 = s3.ParserState.Relative, R3.pointer--);
                break;
              case s3.ParserState.PathOrAuthority:
                R3.c() === "/" ? C2 = s3.ParserState.Authority : (C2 = s3.ParserState.Path, R3.pointer--);
                break;
              case s3.ParserState.Relative:
                if (t3 === null)
                  throw new Error("Invalid parser state. Base URL is null.");
                switch (i3.scheme = t3.scheme, R3.c()) {
                  case "":
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.query = t3.query;
                    break;
                  case "/":
                    C2 = s3.ParserState.RelativeSlash;
                    break;
                  case "?":
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.query = "", C2 = s3.ParserState.Query;
                    break;
                  case "#":
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.query = t3.query, i3.fragment = "", C2 = s3.ParserState.Fragment;
                    break;
                  default:
                    b2(i3) && R3.c() === "\\" ? (v("Invalid input string."), C2 = s3.ParserState.RelativeSlash) : (i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, i3.path = u2.list.clone(t3.path), i3.path.length !== 0 && i3.path.splice(i3.path.length - 1, 1), C2 = s3.ParserState.Path, R3.pointer--);
                }
                break;
              case s3.ParserState.RelativeSlash:
                if (!b2(i3) || R3.c() !== "/" && R3.c() !== "\\")
                  if (R3.c() === "/")
                    C2 = s3.ParserState.Authority;
                  else {
                    if (t3 === null)
                      throw new Error("Invalid parser state. Base URL is null.");
                    i3.username = t3.username, i3.password = t3.password, i3.host = t3.host, i3.port = t3.port, C2 = s3.ParserState.Path, R3.pointer--;
                  }
                else
                  R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes;
                break;
              case s3.ParserState.SpecialAuthoritySlashes:
                R3.c() === "/" && R3.remaining().startsWith("/") ? (C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes, R3.pointer++) : (v("Expected '//'."), C2 = s3.ParserState.SpecialAuthorityIgnoreSlashes, R3.pointer--);
                break;
              case s3.ParserState.SpecialAuthorityIgnoreSlashes:
                R3.c() !== "/" && R3.c() !== "\\" ? (C2 = s3.ParserState.Authority, R3.pointer--) : v("Unexpected '/' or '\\'.");
                break;
              case s3.ParserState.Authority:
                if (R3.c() === "@") {
                  v("Unexpected '@'."), M4 && (L3 = "%40" + L3), M4 = true;
                  try {
                    for (var U2 = (l2 = void 0, n(L3)), G3 = U2.next(); !G3.done; G3 = U2.next()) {
                      var q3 = G3.value;
                      if (q3 !== ":" || j2) {
                        var W2 = X2(q3, d3);
                        j2 ? i3.password += W2 : i3.username += W2;
                      } else
                        j2 = true;
                    }
                  } catch (e4) {
                    l2 = { error: e4 };
                  } finally {
                    try {
                      G3 && !G3.done && (c3 = U2.return) && c3.call(U2);
                    } finally {
                      if (l2)
                        throw l2.error;
                    }
                  }
                  L3 = "";
                } else if (R3.c() === "" || R3.c() === "/" || R3.c() === "?" || R3.c() === "#" || b2(i3) && R3.c() === "\\") {
                  if (M4 && L3 === "")
                    return v("Invalid input string."), null;
                  R3.pointer -= L3.length + 1, L3 = "", C2 = s3.ParserState.Host;
                } else
                  L3 += R3.c();
                break;
              case s3.ParserState.Host:
              case s3.ParserState.Hostname:
                if (o2 !== void 0 && i3.scheme === "file")
                  R3.pointer--, C2 = s3.ParserState.FileHost;
                else if (R3.c() !== ":" || B3)
                  if (R3.c() === "" || R3.c() === "/" || R3.c() === "?" || R3.c() === "#" || b2(i3) && R3.c() === "\\") {
                    if (R3.pointer--, b2(i3) && L3 === "")
                      return v("Invalid input string."), null;
                    if (o2 !== void 0 && L3 === "" && (w2(i3) || i3.port !== null))
                      return v("Invalid input string."), i3;
                    if ((J = I2(L3, !b2(i3))) === null)
                      return null;
                    if (i3.host = J, L3 = "", C2 = s3.ParserState.PathStart, o2 !== void 0)
                      return i3;
                  } else
                    R3.c() === "[" && (B3 = true), R3.c() === "]" && (B3 = false), L3 += R3.c();
                else {
                  if (L3 === "")
                    return v("Invalid input string."), null;
                  if ((J = I2(L3, !b2(i3))) === null)
                    return null;
                  if (i3.host = J, L3 = "", C2 = s3.ParserState.Port, o2 === s3.ParserState.Hostname)
                    return i3;
                }
                break;
              case s3.ParserState.Port:
                if (u2.codePoint.ASCIIDigit.test(R3.c()))
                  L3 += R3.c();
                else {
                  if (!(R3.c() === "" || R3.c() === "/" || R3.c() === "?" || R3.c() === "#" || b2(i3) && R3.c() === "\\" || o2))
                    return v("Invalid input string."), null;
                  if (L3 !== "" && L3 !== "") {
                    var H4 = parseInt(L3, 10);
                    if (H4 > Math.pow(2, 16) - 1)
                      return v("Invalid port number."), null;
                    i3.port = H4 === x2(i3.scheme) ? null : H4, L3 = "";
                  }
                  if (o2 !== void 0)
                    return i3;
                  C2 = s3.ParserState.PathStart, R3.pointer--;
                }
                break;
              case s3.ParserState.File:
                if (i3.scheme = "file", R3.c() === "/" || R3.c() === "\\")
                  R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.FileSlash;
                else if (t3 !== null && t3.scheme === "file")
                  switch (R3.c()) {
                    case "":
                      i3.host = t3.host, i3.path = u2.list.clone(t3.path), i3.query = t3.query;
                      break;
                    case "?":
                      i3.host = t3.host, i3.path = u2.list.clone(t3.path), i3.query = "", C2 = s3.ParserState.Query;
                      break;
                    case "#":
                      i3.host = t3.host, i3.path = u2.list.clone(t3.path), i3.query = t3.query, i3.fragment = "", C2 = s3.ParserState.Fragment;
                      break;
                    default:
                      P(R3.substring()) ? v("Unexpected windows drive letter in input string.") : (i3.host = t3.host, i3.path = u2.list.clone(t3.path), O2(i3)), C2 = s3.ParserState.Path, R3.pointer--;
                  }
                else
                  C2 = s3.ParserState.Path, R3.pointer--;
                break;
              case s3.ParserState.FileSlash:
                R3.c() === "/" || R3.c() === "\\" ? (R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.FileHost) : (t3 === null || t3.scheme !== "file" || P(R3.substring()) || (F(t3.path[0]) ? i3.path.push(t3.path[0]) : i3.host = t3.host), C2 = s3.ParserState.Path, R3.pointer--);
                break;
              case s3.ParserState.FileHost:
                if (R3.c() === "" || R3.c() === "/" || R3.c() === "\\" || R3.c() === "?" || R3.c() === "#")
                  if (R3.pointer--, o2 === void 0 && k2(L3))
                    v("Unexpected windows drive letter in input string."), C2 = s3.ParserState.Path;
                  else if (L3 === "") {
                    if (i3.host = "", o2 !== void 0)
                      return i3;
                    C2 = s3.ParserState.PathStart;
                  } else {
                    var J;
                    if ((J = I2(L3, !b2(i3))) === null)
                      return null;
                    if (J === "localhost" && (J = ""), i3.host = J, o2 !== void 0)
                      return i3;
                    L3 = "", C2 = s3.ParserState.PathStart;
                  }
                else
                  L3 += R3.c();
                break;
              case s3.ParserState.PathStart:
                b2(i3) ? (R3.c() === "\\" && v("Invalid input string."), C2 = s3.ParserState.Path, R3.c() !== "/" && R3.c() !== "\\" && R3.pointer--) : o2 === void 0 && R3.c() === "?" ? (i3.query = "", C2 = s3.ParserState.Query) : o2 === void 0 && R3.c() === "#" ? (i3.fragment = "", C2 = s3.ParserState.Fragment) : R3.c() !== "" && (C2 = s3.ParserState.Path, R3.c() !== "/" && R3.pointer--);
                break;
              case s3.ParserState.Path:
                if (R3.c() === "" || R3.c() === "/" || b2(i3) && R3.c() === "\\" || o2 === void 0 && (R3.c() === "?" || R3.c() === "#")) {
                  if (b2(i3) && R3.c() === "\\" && v("Invalid input string."), T2(L3))
                    O2(i3), R3.c() === "/" || b2(i3) && R3.c() === "\\" || i3.path.push("");
                  else if (!N(L3) || R3.c() === "/" || b2(i3) && R3.c() === "\\") {
                    if (!N(L3)) {
                      if (i3.scheme === "file" && i3.path.length === 0 && k2(L3)) {
                        i3.host !== null && i3.host !== "" && (v("Invalid input string."), i3.host = "");
                        var Y2 = Array.from(L3);
                        L3 = Y2.slice(0, 1) + ":" + Y2.slice(2);
                      }
                      i3.path.push(L3);
                    }
                  } else
                    i3.path.push("");
                  if (L3 = "", i3.scheme === "file" && (R3.c() === "" || R3.c() === "?" || R3.c() === "#"))
                    for (; i3.path.length > 1 && i3.path[0] === ""; )
                      v("Invalid input string."), i3.path.splice(0, 1);
                  R3.c() === "?" && (i3.query = "", C2 = s3.ParserState.Query), R3.c() === "#" && (i3.fragment = "", C2 = s3.ParserState.Fragment);
                } else
                  m3.test(R3.c()) || R3.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R3.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R3.remaining()) || v("Percent encoded character must be followed by two hex digits."), L3 += X2(R3.c(), f);
                break;
              case s3.ParserState.CannotBeABaseURLPath:
                R3.c() === "?" ? (i3.query = "", C2 = s3.ParserState.Query) : R3.c() === "#" ? (i3.fragment = "", C2 = s3.ParserState.Fragment) : (R3.c() === "" || m3.test(R3.c()) || R3.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R3.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R3.remaining()) || v("Percent encoded character must be followed by two hex digits."), R3.c() !== "" && (i3.path[0] += X2(R3.c(), h3)));
                break;
              case s3.ParserState.Query:
                if (A2 === "UTF-8" || b2(i3) && i3.scheme !== "ws" && i3.scheme !== "wss" || (A2 = "UTF-8"), o2 === void 0 && R3.c() === "#")
                  i3.fragment = "", C2 = s3.ParserState.Fragment;
                else if (R3.c() !== "") {
                  if (m3.test(R3.c()) || R3.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R3.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R3.remaining()) || v("Percent encoded character must be followed by two hex digits."), A2.toUpperCase() !== "UTF-8")
                    throw new Error("Only UTF-8 encoding is supported.");
                  var V = a3.utf8Encode(R3.c());
                  if (V.length >= 3 && V[0] === 38 && V[1] === 35 && V[V.length - 1] === 59)
                    V = V.subarray(2, V.length - 1), i3.query += "%26%23" + u2.byteSequence.isomorphicDecode(V) + "%3B";
                  else
                    try {
                      for (var K2 = (y4 = void 0, n(V)), $ = K2.next(); !$.done; $ = K2.next()) {
                        var Q2 = $.value;
                        Q2 < 33 || Q2 > 126 || Q2 === 34 || Q2 === 35 || Q2 === 60 || Q2 === 62 || Q2 === 39 && b2(i3) ? i3.query += z2(Q2) : i3.query += String.fromCharCode(Q2);
                      }
                    } catch (e4) {
                      y4 = { error: e4 };
                    } finally {
                      try {
                        $ && !$.done && (_2 = K2.return) && _2.call(K2);
                      } finally {
                        if (y4)
                          throw y4.error;
                      }
                    }
                }
                break;
              case s3.ParserState.Fragment:
                R3.c() === "" || (R3.c() === "\0" ? v("NULL character in input string.") : (m3.test(R3.c()) || R3.c() === "%" || v("Unexpected character in fragment string."), R3.c() !== "%" || /^[A-Za-z0-9][A-Za-z0-9]/.test(R3.remaining()) || v("Unexpected character in fragment string."), i3.fragment += X2(R3.c(), p)));
            }
            if (R3.eof)
              break;
            R3.pointer++;
          }
          return i3;
        }
        function N(e3) {
          return e3 === "." || e3.toLowerCase() === "%2e";
        }
        function T2(e3) {
          var t3 = e3.toLowerCase();
          return t3 === ".." || t3 === ".%2e" || t3 === "%2e." || t3 === "%2e%2e";
        }
        function O2(e3) {
          var t3 = e3.path;
          t3.length !== 0 && (e3.scheme === "file" && t3.length === 1 && F(t3[0]) || e3.path.splice(e3.path.length - 1, 1));
        }
        function F(e3) {
          return e3.length >= 2 && u2.codePoint.ASCIIAlpha.test(e3[0]) && e3[1] === ":";
        }
        function k2(e3) {
          return e3.length >= 2 && u2.codePoint.ASCIIAlpha.test(e3[0]) && (e3[1] === ":" || e3[1] === "|");
        }
        function P(e3) {
          return e3.length >= 2 && k2(e3) && (e3.length === 2 || e3[2] === "/" || e3[2] === "\\" || e3[2] === "?" || e3[2] === "#");
        }
        function I2(e3, t3) {
          if (t3 === void 0 && (t3 = false), e3.startsWith("["))
            return e3.endsWith("]") ? B2(e3.substring(1, e3.length - 1)) : (v("Expected ']' after '['."), null);
          if (t3)
            return j(e3);
          var r2 = H3(a3.utf8Decode(G2(e3)));
          if (r2 === null)
            return v("Invalid domain."), null;
          if (y3.test(r2))
            return v("Invalid domain."), null;
          var n2 = M3(r2);
          return n2 === null || a3.isNumber(n2) ? n2 : r2;
        }
        function L2(e3, t3) {
          t3 === void 0 && (t3 = { value: false });
          var r2 = 10;
          return e3.startsWith("0x") || e3.startsWith("0X") ? (t3.value = true, e3 = e3.substr(2), r2 = 16) : e3.length >= 2 && e3[0] === "0" && (t3.value = true, e3 = e3.substr(1), r2 = 8), e3 === "" ? 0 : (r2 === 10 ? /^[0-9]+$/ : r2 === 16 ? /^[0-9A-Fa-f]+$/ : /^[0-7]+$/).test(e3) ? parseInt(e3, r2) : null;
        }
        function M3(e3) {
          var t3, r2, i3, o2, a4 = { value: false }, s4 = e3.split(".");
          if (s4[s4.length - 1] === "" && (a4.value = true, s4.length > 1 && s4.pop()), s4.length > 4)
            return e3;
          var u3 = [];
          try {
            for (var l2 = n(s4), c3 = l2.next(); !c3.done; c3 = l2.next()) {
              var h4 = c3.value;
              if (h4 === "")
                return e3;
              if ((_2 = L2(h4, a4)) === null)
                return e3;
              u3.push(_2);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          a4.value && v("Invalid IP v4 address.");
          for (var p2 = 0; p2 < u3.length; p2++) {
            if (u3[p2] > 255 && (v("Invalid IP v4 address."), p2 < u3.length - 1))
              return null;
          }
          if (u3[u3.length - 1] >= Math.pow(256, 5 - u3.length))
            return v("Invalid IP v4 address."), null;
          var f2 = u3[u3.length - 1];
          u3.pop();
          var d4 = 0;
          try {
            for (var m4 = n(u3), y4 = m4.next(); !y4.done; y4 = m4.next()) {
              var _2;
              f2 += (_2 = y4.value) * Math.pow(256, 3 - d4), d4++;
            }
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              y4 && !y4.done && (o2 = m4.return) && o2.call(m4);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return f2;
        }
        function B2(e3) {
          var t3, r2 = [0, 0, 0, 0, 0, 0, 0, 0], n2 = 0, o2 = null, s4 = new a3.StringWalker(e3);
          if (s4.c() === ":") {
            if (!s4.remaining().startsWith(":"))
              return v("Invalid IP v6 address."), null;
            s4.pointer += 2, o2 = n2 += 1;
          }
          for (; s4.c() !== ""; ) {
            if (n2 === 8)
              return v("Invalid IP v6 address."), null;
            if (s4.c() !== ":") {
              for (var l2 = 0, c3 = 0; c3 < 4 && u2.codePoint.ASCIIHexDigit.test(s4.c()); )
                l2 = 16 * l2 + parseInt(s4.c(), 16), s4.pointer++, c3++;
              if (s4.c() === ".") {
                if (c3 === 0)
                  return v("Invalid IP v6 address."), null;
                if (s4.pointer -= c3, n2 > 6)
                  return v("Invalid IP v6 address."), null;
                for (var h4 = 0; s4.c() !== ""; ) {
                  var p2 = null;
                  if (h4 > 0) {
                    if (!(s4.c() === "." && h4 < 4))
                      return v("Invalid IP v6 address."), null;
                    s4.pointer++;
                  }
                  if (!u2.codePoint.ASCIIDigit.test(s4.c()))
                    return v("Invalid IP v6 address."), null;
                  for (; u2.codePoint.ASCIIDigit.test(s4.c()); ) {
                    var f2 = parseInt(s4.c(), 10);
                    if (p2 === null)
                      p2 = f2;
                    else {
                      if (p2 === 0)
                        return v("Invalid IP v6 address."), null;
                      p2 = 10 * p2 + f2;
                    }
                    if (p2 > 255)
                      return v("Invalid IP v6 address."), null;
                    s4.pointer++;
                  }
                  if (p2 === null)
                    return v("Invalid IP v6 address."), null;
                  r2[n2] = 256 * r2[n2] + p2, ++h4 !== 2 && h4 !== 4 || n2++;
                }
                if (h4 !== 4)
                  return v("Invalid IP v6 address."), null;
                break;
              }
              if (s4.c() === ":") {
                if (s4.pointer++, s4.c() === "")
                  return v("Invalid IP v6 address."), null;
              } else if (s4.c() !== "")
                return v("Invalid IP v6 address."), null;
              r2[n2] = l2, n2++;
            } else {
              if (o2 !== null)
                return v("Invalid IP v6 address."), null;
              s4.pointer++, o2 = ++n2;
            }
          }
          if (o2 !== null) {
            var d4 = n2 - o2;
            for (n2 = 7; n2 !== 0 && d4 > 0; )
              t3 = i2([r2[o2 + d4 - 1], r2[n2]], 2), r2[n2] = t3[0], r2[o2 + d4 - 1] = t3[1], n2--, d4--;
          } else if (o2 === null && n2 !== 8)
            return v("Invalid IP v6 address."), null;
          return r2;
        }
        function j(e3) {
          var t3, r2;
          if (/[\x00\t\f\r #/:?@\[\\\]]/.test(e3))
            return v("Invalid host string."), null;
          var i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              i3 += X2(a4.value, h3);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function R2(e3) {
          return null;
        }
        function z2(e3) {
          return "%" + ("00" + e3.toString(16).toUpperCase()).slice(-2);
        }
        function U(e3) {
          for (var t3 = function(e4) {
            return e4 >= 48 && e4 <= 57 || e4 >= 65 && e4 <= 70 || e4 >= 97 && e4 <= 102;
          }, r2 = new Uint8Array(e3.length), n2 = 0, i3 = 0; i3 < e3.length; i3++) {
            var o2 = e3[i3];
            if (o2 !== 37)
              r2[n2] = o2, n2++;
            else if (o2 === 37 && i3 >= e3.length - 2)
              r2[n2] = o2, n2++;
            else if (o2 !== 37 || t3(e3[i3 + 1]) && t3(e3[i3 + 2])) {
              var s4 = parseInt(a3.utf8Decode(Uint8Array.of(e3[i3 + 1], e3[i3 + 2])), 16);
              r2[n2] = s4, n2++, i3 += 2;
            } else
              r2[n2] = o2, n2++;
          }
          return r2.subarray(0, n2);
        }
        function G2(e3) {
          return U(a3.utf8Encode(e3));
        }
        function X2(e3, t3) {
          var r2, i3;
          if (!t3.test(e3))
            return e3;
          var o2 = a3.utf8Encode(e3), s4 = "";
          try {
            for (var u3 = n(o2), l2 = u3.next(); !l2.done; l2 = u3.next()) {
              s4 += z2(l2.value);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              l2 && !l2.done && (i3 = u3.return) && i3.call(u3);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return s4;
        }
        function q2(e3) {
          var t3, r2, i3, o2, s4 = [], u3 = [];
          try {
            for (var l2 = n(e3), c3 = l2.next(); !c3.done; c3 = l2.next()) {
              var h4 = c3.value;
              h4 === 38 ? (s4.push(Uint8Array.from(u3)), u3 = []) : u3.push(h4);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              c3 && !c3.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          u3.length !== 0 && s4.push(Uint8Array.from(u3));
          var p2 = [];
          try {
            for (var f2 = n(s4), d4 = f2.next(); !d4.done; d4 = f2.next()) {
              var m4 = d4.value;
              if (m4.length !== 0) {
                for (var y4 = m4.indexOf(61), v2 = y4 !== -1 ? m4.slice(0, y4) : m4, _2 = y4 !== -1 ? m4.slice(y4 + 1) : new Uint8Array(), g2 = 0; g2 < v2.length; g2++)
                  v2[g2] === 43 && (v2[g2] = 32);
                for (g2 = 0; g2 < _2.length; g2++)
                  _2[g2] === 43 && (_2[g2] = 32);
                var b3 = a3.utf8Decode(v2), x3 = a3.utf8Decode(_2);
                p2.push([b3, x3]);
              }
            }
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              d4 && !d4.done && (o2 = f2.return) && o2.call(f2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return p2;
        }
        function W(e3) {
          var t3, r2, i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value;
              i3 += s4 === 32 ? "+" : s4 === 42 || s4 === 45 || s4 === 46 || s4 >= 48 && s4 <= 57 || s4 >= 65 && s4 <= 90 || s4 === 95 || s4 >= 97 && s4 <= 122 ? String.fromCodePoint(s4) : z2(s4);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function H3(e3, t3) {
          t3 === void 0 && (t3 = false);
          var r2 = l.domainToASCII(e3);
          return r2 === "" ? (v("Invalid domain name."), null) : r2;
        }
        t2.setValidationErrorCallback = function(e3) {
          o = e3;
        }, t2.newURL = _, t2.isSpecialScheme = g, t2.isSpecial = b2, t2.defaultPort = x2, t2.includesCredentials = w2, t2.cannotHaveAUsernamePasswordPort = function(e3) {
          return e3.host === null || e3.host === "" || e3._cannotBeABaseURLFlag || e3.scheme === "file";
        }, t2.urlSerializer = E2, t2.hostSerializer = D2, t2.iPv4Serializer = S3, t2.iPv6Serializer = C, t2.urlParser = function(e3, t3, r2) {
          var n2 = A(e3, t3, r2);
          return n2 === null ? null : (n2.scheme !== "blob" || (n2._blobURLEntry = null), n2);
        }, t2.basicURLParser = A, t2.setTheUsername = function(e3, t3) {
          var r2, i3, o2 = "";
          try {
            for (var a4 = n(t3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              o2 += X2(s4.value, d3);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e3.username = o2;
        }, t2.setThePassword = function(e3, t3) {
          var r2, i3, o2 = "";
          try {
            for (var a4 = n(t3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              o2 += X2(s4.value, d3);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e3.password = o2;
        }, t2.isSingleDotPathSegment = N, t2.isDoubleDotPathSegment = T2, t2.shorten = O2, t2.isNormalizedWindowsDriveLetter = F, t2.isWindowsDriveLetter = k2, t2.startsWithAWindowsDriveLetter = P, t2.hostParser = I2, t2.iPv4NumberParser = L2, t2.iPv4Parser = M3, t2.iPv6Parser = B2, t2.opaqueHostParser = j, t2.resolveABlobURL = R2, t2.percentEncode = z2, t2.percentDecode = U, t2.stringPercentDecode = G2, t2.utf8PercentEncode = X2, t2.hostEquals = function(e3, t3) {
          return e3 === t3;
        }, t2.urlEquals = function(e3, t3, r2) {
          return r2 === void 0 && (r2 = false), E2(e3, r2) === E2(t3, r2);
        }, t2.urlEncodedStringParser = function(e3) {
          return q2(a3.utf8Encode(e3));
        }, t2.urlEncodedParser = q2, t2.urlEncodedByteSerializer = W, t2.urlEncodedSerializer = function(e3, t3) {
          var r2, i3;
          if ((t3 === void 0 || t3 === "replacement" || t3 === "UTF-16BE" || t3 === "UTF-16LE" ? "UTF-8" : t3).toUpperCase() !== "UTF-8")
            throw new Error("Only UTF-8 encoding is supported.");
          var o2 = "";
          try {
            for (var s4 = n(e3), u3 = s4.next(); !u3.done; u3 = s4.next()) {
              var l2 = u3.value, c3 = W(a3.utf8Encode(l2[0])), h4 = l2[1];
              h4 = W(a3.utf8Encode(h4)), o2 !== "" && (o2 += "&"), o2 += c3 + "=" + h4;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.origin = function e3(t3) {
          switch (t3.scheme) {
            case "blob":
              t3._blobURLEntry;
              var r2 = A(t3.path[0]);
              return r2 === null ? s3.OpaqueOrigin : e3(r2);
            case "ftp":
            case "http":
            case "https":
            case "ws":
            case "wss":
              return [t3.scheme, t3.host === null ? "" : t3.host, t3.port, null];
            case "file":
            default:
              return s3.OpaqueOrigin;
          }
        }, t2.domainToASCII = H3, t2.domainToUnicode = function(e3, t3) {
          t3 === void 0 && (t3 = false);
          var r2 = l.domainToUnicode(e3);
          return r2 === "" && v("Invalid domain name."), r2;
        }, t2.asciiSerializationOfAnOrigin = function(e3) {
          if (e3[0] === "" && e3[1] === "" && e3[2] === null && e3[3] === null)
            return "null";
          var t3 = e3[0] + "://" + D2(e3[1]);
          return e3[2] !== null && (t3 += ":" + e3[2].toString()), t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(0), i2 = function() {
          function e3() {
            this._signal = n.create_abortSignal();
          }
          return Object.defineProperty(e3.prototype, "signal", { get: function() {
            return this._signal;
          }, enumerable: true, configurable: true }), e3.prototype.abort = function() {
            n.abort_signalAbort(this._signal);
          }, e3;
        }();
        t2.AbortControllerImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(70), a3 = r(0), s3 = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this;
            return t4._abortedFlag = false, t4._abortAlgorithms = /* @__PURE__ */ new Set(), t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "aborted", { get: function() {
            return this._abortedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "onabort", { get: function() {
            return a3.event_getterEventHandlerIDLAttribute(this, "onabort");
          }, set: function(e4) {
            a3.event_setterEventHandlerIDLAttribute(this, "onabort", e4);
          }, enumerable: true, configurable: true }), t3._create = function() {
            return new t3();
          }, t3;
        }(o.EventTargetImpl);
        t2.AbortSignalImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(34), s3 = r(12), u2 = function(e3) {
          function t3(t4, r2, n2) {
            var i3 = e3.call(this) || this;
            return i3._name = "", i3._publicId = "", i3._systemId = "", i3._name = t4, i3._publicId = r2, i3._systemId = n2, i3;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "name", { get: function() {
            return this._name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "publicId", { get: function() {
            return this._publicId;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "systemId", { get: function() {
            return this._systemId;
          }, enumerable: true, configurable: true }), t3.prototype.before = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.after = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.replaceWith = function() {
            for (var e4 = [], t4 = 0; t4 < arguments.length; t4++)
              e4[t4] = arguments[t4];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t3._create = function(e4, r2, n2, i3) {
            n2 === void 0 && (n2 = ""), i3 === void 0 && (i3 = "");
            var o2 = new t3(r2, n2, i3);
            return o2._nodeDocument = e4, o2;
          }, t3;
        }(a3.NodeImpl);
        t2.DocumentTypeImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.DocumentType);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(100), a3 = r(1), s3 = r(0), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this) || this;
            return n2._host = t4, n2._mode = r2, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "mode", { get: function() {
            return this._mode;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "host", { get: function() {
            return this._host;
          }, enumerable: true, configurable: true }), t3.prototype._getTheParent = function(e4) {
            return e4._composedFlag || a3.isEmpty(e4._path) || s3.tree_rootNode(e4._path[0].invocationTarget) !== this ? this._host : null;
          }, t3._create = function(e4, r2) {
            return new t3(r2, "closed");
          }, t3;
        }(o.DocumentFragmentImpl);
        t2.ShadowRootImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(34), s3 = r(0), u2 = r(12), l = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this) || this;
            return r2._namespace = null, r2._namespacePrefix = null, r2._element = null, r2._value = "", r2._localName = t4, r2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "ownerElement", { get: function() {
            return this._element;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "name", { get: function() {
            return this._qualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "value", { get: function() {
            return this._value;
          }, set: function(e4) {
            s3.attr_setAnExistingAttributeValue(this, e4);
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix !== null ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2) {
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(a3.NodeImpl);
        t2.AttrImpl = l, u2.idl_defineConst(l.prototype, "_nodeType", o.NodeType.Attribute), u2.idl_defineConst(l.prototype, "specified", true);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(101), a3 = r(2), s3 = r(12), u2 = function(e3) {
          function t3(t4) {
            return e3.call(this, t4) || this;
          }
          return i2(t3, e3), t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(o.TextImpl);
        t2.CDATASectionImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", a3.NodeType.CData);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(71), s3 = r(12), u2 = function(e3) {
          function t3(t4) {
            return t4 === void 0 && (t4 = ""), e3.call(this, t4) || this;
          }
          return i2(t3, e3), t3._create = function(e4, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t3(r2);
            return n2._nodeDocument = e4, n2;
          }, t3;
        }(a3.CharacterDataImpl);
        t2.CommentImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.Comment);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(71), s3 = r(12), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, r2) || this;
            return n2._target = t4, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), t3._create = function(e4, r2, n2) {
            var i3 = new t3(r2, n2);
            return i3._nodeDocument = e4, i3;
          }, t3;
        }(a3.CharacterDataImpl);
        t2.ProcessingInstructionImpl = u2, s3.idl_defineConst(u2.prototype, "_nodeType", o.NodeType.ProcessingInstruction);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(7), i2 = r(0), o = r(3), a3 = r(1), s3 = function() {
          function e3(e4, t3) {
            return this._live = true, this._root = e4, this._filter = t3, new Proxy(this, this);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            for (var e4 = this, t3 = 0, r2 = i2.tree_getFirstDescendantNode(this._root, false, false, function(t4) {
              return o.Guard.isElementNode(t4) && e4._filter(t4);
            }); r2 !== null; )
              t3++, r2 = i2.tree_getNextDescendantNode(this._root, r2, false, false, function(t4) {
                return o.Guard.isElementNode(t4) && e4._filter(t4);
              });
            return t3;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            for (var t3 = this, r2 = 0, n2 = i2.tree_getFirstDescendantNode(this._root, false, false, function(e5) {
              return o.Guard.isElementNode(e5) && t3._filter(e5);
            }); n2 !== null; ) {
              if (r2 === e4)
                return n2;
              r2++, n2 = i2.tree_getNextDescendantNode(this._root, n2, false, false, function(e5) {
                return o.Guard.isElementNode(e5) && t3._filter(e5);
              });
            }
            return null;
          }, e3.prototype.namedItem = function(e4) {
            var t3 = this;
            if (e4 === "")
              return null;
            for (var r2 = i2.tree_getFirstDescendantNode(this._root, false, false, function(e5) {
              return o.Guard.isElementNode(e5) && t3._filter(e5);
            }); r2 != null; ) {
              if (r2._uniqueIdentifier === e4)
                return r2;
              if (r2._namespace === n.namespace.HTML)
                for (var a4 = 0; a4 < r2._attributeList.length; a4++) {
                  var s4 = r2._attributeList[a4];
                  if (s4._localName === "name" && s4._namespace === null && s4._namespacePrefix === null && s4._value === e4)
                    return r2;
                }
              r2 = i2.tree_getNextDescendantNode(this._root, r2, false, false, function(e5) {
                return o.Guard.isElementNode(e5) && t3._filter(e5);
              });
            }
            return null;
          }, e3.prototype[Symbol.iterator] = function() {
            var e4 = this._root, t3 = this._filter, r2 = i2.tree_getFirstDescendantNode(e4, false, false, function(e5) {
              return o.Guard.isElementNode(e5) && t3(e5);
            });
            return { next: function() {
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = i2.tree_getNextDescendantNode(e4, r2, false, false, function(e5) {
                return o.Guard.isElementNode(e5) && t3(e5);
              }), n2;
            } };
          }, e3.prototype.get = function(t3, r2, n2) {
            if (!a3.isString(r2) || e3.reservedNames.indexOf(r2) !== -1)
              return Reflect.get(t3, r2, n2);
            var i3 = Number(r2);
            return isNaN(i3) ? t3.namedItem(r2) || void 0 : t3.item(i3) || void 0;
          }, e3.prototype.set = function(t3, r2, n2, o2) {
            if (!a3.isString(r2) || e3.reservedNames.indexOf(r2) !== -1)
              return Reflect.set(t3, r2, n2, o2);
            var s4 = Number(r2), u2 = isNaN(s4) ? t3.namedItem(r2) || void 0 : t3.item(s4) || void 0;
            return !(!u2 || !u2._parent) && (i2.mutation_replace(u2, n2, u2._parent), true);
          }, e3._create = function(t3, r2) {
            return r2 === void 0 && (r2 = function() {
              return true;
            }), new e3(t3, r2);
          }, e3.reservedNames = ["_root", "_live", "_filter", "length", "item", "namedItem", "get", "set"], e3;
        }();
        t2.HTMLCollectionImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(1), a3 = r(0), s3 = function() {
          function e3(e4) {
            return this._live = true, this._filter = null, this._length = 0, this._root = e4, new Proxy(this, this);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._root._children.size;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            if (e4 < 0 || e4 > this.length - 1)
              return null;
            if (e4 < this.length / 2) {
              for (var t3 = 0, r2 = this._root._firstChild; r2 !== null && t3 !== e4; )
                r2 = r2._nextSibling, t3++;
              return r2;
            }
            for (t3 = this.length - 1, r2 = this._root._lastChild; r2 !== null && t3 !== e4; )
              r2 = r2._previousSibling, t3--;
            return r2;
          }, e3.prototype.keys = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = 0;
              return { next: function() {
                return e5 === this.length ? { done: true, value: null } : { done: false, value: e5++ };
              }.bind(this) };
            }.bind(this), e4;
          }, e3.prototype.values = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator]();
              return { next: function() {
                return e5.next();
              } };
            }.bind(this), e4;
          }, e3.prototype.entries = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator](), t3 = 0;
              return { next: function() {
                var r2 = e5.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t3++, r2.value] };
              } };
            }.bind(this), e4;
          }, e3.prototype[Symbol.iterator] = function() {
            return this._root._children[Symbol.iterator]();
          }, e3.prototype.forEach = function(e4, t3) {
            var r2, o2;
            t3 === void 0 && (t3 = i2.dom.window);
            var a4 = 0;
            try {
              for (var s4 = n(this._root._children), u2 = s4.next(); !u2.done; u2 = s4.next()) {
                var l = u2.value;
                e4.call(t3, l, a4++, this);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u2 && !u2.done && (o2 = s4.return) && o2.call(s4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype.get = function(e4, t3, r2) {
            if (!o.isString(t3))
              return Reflect.get(e4, t3, r2);
            var n2 = Number(t3);
            return isNaN(n2) ? Reflect.get(e4, t3, r2) : e4.item(n2) || void 0;
          }, e3.prototype.set = function(e4, t3, r2, n2) {
            if (!o.isString(t3))
              return Reflect.set(e4, t3, r2, n2);
            var i3 = Number(t3);
            if (isNaN(i3))
              return Reflect.set(e4, t3, r2, n2);
            var s4 = e4.item(i3) || void 0;
            return !!s4 && (!!s4._parent && (a3.mutation_replace(s4, r2, s4._parent), true));
          }, e3._create = function(t3) {
            return new e3(t3);
          }, e3;
        }();
        t2.NodeListImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(1), a3 = function() {
          function e3(e4) {
            return this._live = false, this._items = [], this._length = 0, this._root = e4, this._items = [], this._filter = function(e5) {
              return true;
            }, new Proxy(this, this);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._items.length;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            return e4 < 0 || e4 > this.length - 1 ? null : this._items[e4];
          }, e3.prototype.keys = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = 0;
              return { next: function() {
                return e5 === this.length ? { done: true, value: null } : { done: false, value: e5++ };
              }.bind(this) };
            }.bind(this), e4;
          }, e3.prototype.values = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator]();
              return { next: function() {
                return e5.next();
              } };
            }.bind(this), e4;
          }, e3.prototype.entries = function() {
            var e4;
            return (e4 = {})[Symbol.iterator] = function() {
              var e5 = this[Symbol.iterator](), t3 = 0;
              return { next: function() {
                var r2 = e5.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t3++, r2.value] };
              } };
            }.bind(this), e4;
          }, e3.prototype[Symbol.iterator] = function() {
            var e4 = this._items[Symbol.iterator]();
            return { next: function() {
              return e4.next();
            } };
          }, e3.prototype.forEach = function(e4, t3) {
            var r2, o2;
            t3 === void 0 && (t3 = i2.dom.window);
            var a4 = 0;
            try {
              for (var s3 = n(this._items), u2 = s3.next(); !u2.done; u2 = s3.next()) {
                var l = u2.value;
                e4.call(t3, l, a4++, this);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u2 && !u2.done && (o2 = s3.return) && o2.call(s3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e3.prototype.get = function(e4, t3, r2) {
            if (!o.isString(t3))
              return Reflect.get(e4, t3, r2);
            var n2 = Number(t3);
            return isNaN(n2) ? Reflect.get(e4, t3, r2) : e4._items[n2] || void 0;
          }, e3.prototype.set = function(e4, t3, r2, n2) {
            if (!o.isString(t3))
              return Reflect.set(e4, t3, r2, n2);
            var i3 = Number(t3);
            return isNaN(i3) ? Reflect.set(e4, t3, r2, n2) : i3 >= 0 && i3 < e4._items.length && (e4._items[i3] = r2, true);
          }, e3._create = function(t3, r2) {
            var n2 = new e3(t3);
            return n2._items = r2, n2;
          }, e3;
        }();
        t2.NodeListStaticImpl = a3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(9), a3 = r(0), s3 = function(e3) {
          function t3(r2) {
            var n2 = e3.call(this) || this;
            return n2._element = r2, Object.setPrototypeOf(n2, t3.prototype), n2;
          }
          return i2(t3, e3), t3.prototype._asArray = function() {
            return this;
          }, t3.prototype.item = function(e4) {
            return this[e4] || null;
          }, t3.prototype.getNamedItem = function(e4) {
            return a3.element_getAnAttributeByName(e4, this._element);
          }, t3.prototype.getNamedItemNS = function(e4, t4) {
            return a3.element_getAnAttributeByNamespaceAndLocalName(e4 || "", t4, this._element);
          }, t3.prototype.setNamedItem = function(e4) {
            return a3.element_setAnAttribute(e4, this._element);
          }, t3.prototype.setNamedItemNS = function(e4) {
            return a3.element_setAnAttribute(e4, this._element);
          }, t3.prototype.removeNamedItem = function(e4) {
            var t4 = a3.element_removeAnAttributeByName(e4, this._element);
            if (t4 === null)
              throw new o.NotFoundError();
            return t4;
          }, t3.prototype.removeNamedItemNS = function(e4, t4) {
            var r2 = a3.element_removeAnAttributeByNamespaceAndLocalName(e4 || "", t4, this._element);
            if (r2 === null)
              throw new o.NotFoundError();
            return r2;
          }, t3._create = function(e4) {
            return new t3(e4);
          }, t3;
        }(Array);
        t2.NamedNodeMapImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(6), s3 = r(2), u2 = r(102), l = r(9), c2 = r(0), h3 = r(12), p = r(3), f = function(e3) {
          function t3() {
            var t4 = e3.call(this) || this, r2 = a3.dom.window._associatedDocument;
            return t4._start = [r2, 0], t4._end = [r2, 0], a3.dom.rangeList.add(t4), t4;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "commonAncestorContainer", { get: function() {
            for (var e4 = this._start[0]; !c2.tree_isAncestorOf(this._end[0], e4, true); ) {
              if (e4._parent === null)
                throw new Error("Parent node  is null.");
              e4 = e4._parent;
            }
            return e4;
          }, enumerable: true, configurable: true }), t3.prototype.setStart = function(e4, t4) {
            c2.range_setTheStart(this, e4, t4);
          }, t3.prototype.setEnd = function(e4, t4) {
            c2.range_setTheEnd(this, e4, t4);
          }, t3.prototype.setStartBefore = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheStart(this, t4, c2.tree_index(e4));
          }, t3.prototype.setStartAfter = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheStart(this, t4, c2.tree_index(e4) + 1);
          }, t3.prototype.setEndBefore = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheEnd(this, t4, c2.tree_index(e4));
          }, t3.prototype.setEndAfter = function(e4) {
            var t4 = e4._parent;
            if (t4 === null)
              throw new l.InvalidNodeTypeError();
            c2.range_setTheEnd(this, t4, c2.tree_index(e4) + 1);
          }, t3.prototype.collapse = function(e4) {
            e4 ? this._end = this._start : this._start = this._end;
          }, t3.prototype.selectNode = function(e4) {
            c2.range_select(e4, this);
          }, t3.prototype.selectNodeContents = function(e4) {
            if (p.Guard.isDocumentTypeNode(e4))
              throw new l.InvalidNodeTypeError();
            var t4 = c2.tree_nodeLength(e4);
            this._start = [e4, 0], this._end = [e4, t4];
          }, t3.prototype.compareBoundaryPoints = function(e4, t4) {
            if (e4 !== s3.HowToCompare.StartToStart && e4 !== s3.HowToCompare.StartToEnd && e4 !== s3.HowToCompare.EndToEnd && e4 !== s3.HowToCompare.EndToStart)
              throw new l.NotSupportedError();
            if (c2.range_root(this) !== c2.range_root(t4))
              throw new l.WrongDocumentError();
            var r2, n2;
            switch (e4) {
              case s3.HowToCompare.StartToStart:
                r2 = this._start, n2 = t4._start;
                break;
              case s3.HowToCompare.StartToEnd:
                r2 = this._end, n2 = t4._start;
                break;
              case s3.HowToCompare.EndToEnd:
                r2 = this._end, n2 = t4._end;
                break;
              case s3.HowToCompare.EndToStart:
                r2 = this._start, n2 = t4._end;
                break;
              default:
                throw new l.NotSupportedError();
            }
            var i3 = c2.boundaryPoint_position(r2, n2);
            return i3 === s3.BoundaryPosition.Before ? -1 : i3 === s3.BoundaryPosition.After ? 1 : 0;
          }, t3.prototype.deleteContents = function() {
            var e4, t4, r2, n2;
            if (!c2.range_collapsed(this)) {
              var i3 = this._startNode, a4 = this._startOffset, s4 = this._endNode, u3 = this._endOffset;
              if (i3 === s4 && p.Guard.isCharacterDataNode(i3))
                c2.characterData_replaceData(i3, a4, u3 - a4, "");
              else {
                var l2, h4, f2 = [];
                try {
                  for (var d3 = o(c2.range_getContainedNodes(this)), m3 = d3.next(); !m3.done; m3 = d3.next()) {
                    var y3 = (b2 = m3.value)._parent;
                    y3 !== null && c2.range_isContained(y3, this) || f2.push(b2);
                  }
                } catch (t5) {
                  e4 = { error: t5 };
                } finally {
                  try {
                    m3 && !m3.done && (t4 = d3.return) && t4.call(d3);
                  } finally {
                    if (e4)
                      throw e4.error;
                  }
                }
                if (c2.tree_isAncestorOf(s4, i3, true))
                  l2 = i3, h4 = a4;
                else {
                  for (var v = i3; v._parent !== null && !c2.tree_isAncestorOf(s4, v._parent, true); )
                    v = v._parent;
                  if (v._parent === null)
                    throw new Error("Parent node is null.");
                  l2 = v._parent, h4 = c2.tree_index(v) + 1;
                }
                p.Guard.isCharacterDataNode(i3) && c2.characterData_replaceData(i3, a4, c2.tree_nodeLength(i3) - a4, "");
                try {
                  for (var _ = o(f2), g = _.next(); !g.done; g = _.next()) {
                    var b2;
                    (b2 = g.value)._parent && c2.mutation_remove(b2, b2._parent);
                  }
                } catch (e5) {
                  r2 = { error: e5 };
                } finally {
                  try {
                    g && !g.done && (n2 = _.return) && n2.call(_);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
                p.Guard.isCharacterDataNode(s4) && c2.characterData_replaceData(s4, 0, u3, ""), this._start = [l2, h4], this._end = [l2, h4];
              }
            }
          }, t3.prototype.extractContents = function() {
            return c2.range_extract(this);
          }, t3.prototype.cloneContents = function() {
            return c2.range_cloneTheContents(this);
          }, t3.prototype.insertNode = function(e4) {
            return c2.range_insert(e4, this);
          }, t3.prototype.surroundContents = function(e4) {
            var t4, r2;
            try {
              for (var n2 = o(c2.range_getPartiallyContainedNodes(this)), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                var a4 = i3.value;
                if (!p.Guard.isTextNode(a4))
                  throw new l.InvalidStateError();
              }
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                i3 && !i3.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            if (p.Guard.isDocumentNode(e4) || p.Guard.isDocumentTypeNode(e4) || p.Guard.isDocumentFragmentNode(e4))
              throw new l.InvalidNodeTypeError();
            var s4 = c2.range_extract(this);
            e4._children.size !== 0 && c2.mutation_replaceAll(null, e4), c2.range_insert(e4, this), c2.mutation_append(s4, e4), c2.range_select(e4, this);
          }, t3.prototype.cloneRange = function() {
            return c2.create_range(this._start, this._end);
          }, t3.prototype.detach = function() {
            a3.dom.rangeList.delete(this);
          }, t3.prototype.isPointInRange = function(e4, t4) {
            if (c2.tree_rootNode(e4) !== c2.range_root(this))
              return false;
            if (p.Guard.isDocumentTypeNode(e4))
              throw new l.InvalidNodeTypeError();
            if (t4 > c2.tree_nodeLength(e4))
              throw new l.IndexSizeError();
            var r2 = [e4, t4];
            return c2.boundaryPoint_position(r2, this._start) !== s3.BoundaryPosition.Before && c2.boundaryPoint_position(r2, this._end) !== s3.BoundaryPosition.After;
          }, t3.prototype.comparePoint = function(e4, t4) {
            if (c2.tree_rootNode(e4) !== c2.range_root(this))
              throw new l.WrongDocumentError();
            if (p.Guard.isDocumentTypeNode(e4))
              throw new l.InvalidNodeTypeError();
            if (t4 > c2.tree_nodeLength(e4))
              throw new l.IndexSizeError();
            var r2 = [e4, t4];
            return c2.boundaryPoint_position(r2, this._start) === s3.BoundaryPosition.Before ? -1 : c2.boundaryPoint_position(r2, this._end) === s3.BoundaryPosition.After ? 1 : 0;
          }, t3.prototype.intersectsNode = function(e4) {
            if (c2.tree_rootNode(e4) !== c2.range_root(this))
              return false;
            var t4 = e4._parent;
            if (t4 === null)
              return true;
            var r2 = c2.tree_index(e4);
            return c2.boundaryPoint_position([t4, r2], this._end) === s3.BoundaryPosition.Before && c2.boundaryPoint_position([t4, r2 + 1], this._start) === s3.BoundaryPosition.After;
          }, t3.prototype.toString = function() {
            var e4, t4, r2 = "";
            if (this._startNode === this._endNode && p.Guard.isTextNode(this._startNode))
              return this._startNode._data.substring(this._startOffset, this._endOffset);
            p.Guard.isTextNode(this._startNode) && (r2 += this._startNode._data.substring(this._startOffset));
            try {
              for (var n2 = o(c2.range_getContainedNodes(this)), i3 = n2.next(); !i3.done; i3 = n2.next()) {
                var a4 = i3.value;
                p.Guard.isTextNode(a4) && (r2 += a4._data);
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                i3 && !i3.done && (t4 = n2.return) && t4.call(n2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return p.Guard.isTextNode(this._endNode) && (r2 += this._endNode._data.substring(0, this._endOffset)), r2;
          }, t3._create = function(e4, r2) {
            var n2 = new t3();
            return e4 && (n2._start = e4), r2 && (n2._end = r2), n2;
          }, t3.START_TO_START = 0, t3.START_TO_END = 1, t3.END_TO_END = 2, t3.END_TO_START = 3, t3;
        }(u2.AbstractRangeImpl);
        t2.RangeImpl = f, h3.idl_defineConst(f.prototype, "START_TO_START", 0), h3.idl_defineConst(f.prototype, "START_TO_END", 1), h3.idl_defineConst(f.prototype, "END_TO_END", 2), h3.idl_defineConst(f.prototype, "END_TO_START", 3);
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(103), a3 = r(0), s3 = function(e3) {
          function t3(t4, r2, n2) {
            var i3 = e3.call(this, t4) || this;
            return i3._iteratorCollection = void 0, i3._reference = r2, i3._pointerBeforeReference = n2, a3.nodeIterator_iteratorList().add(i3), i3;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "referenceNode", { get: function() {
            return this._reference;
          }, enumerable: true, configurable: true }), Object.defineProperty(t3.prototype, "pointerBeforeReferenceNode", { get: function() {
            return this._pointerBeforeReference;
          }, enumerable: true, configurable: true }), t3.prototype.nextNode = function() {
            return a3.nodeIterator_traverse(this, true);
          }, t3.prototype.previousNode = function() {
            return a3.nodeIterator_traverse(this, false);
          }, t3.prototype.detach = function() {
            a3.nodeIterator_iteratorList().delete(this);
          }, t3._create = function(e4, r2, n2) {
            return new t3(e4, r2, n2);
          }, t3;
        }(o.TraverserImpl);
        t2.NodeIteratorImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(2), a3 = r(103), s3 = r(0), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._current = r2, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "currentNode", { get: function() {
            return this._current;
          }, set: function(e4) {
            this._current = e4;
          }, enumerable: true, configurable: true }), t3.prototype.parentNode = function() {
            for (var e4 = this._current; e4 !== null && e4 !== this._root; )
              if ((e4 = e4._parent) !== null && s3.traversal_filter(this, e4) === o.FilterResult.Accept)
                return this._current = e4, e4;
            return null;
          }, t3.prototype.firstChild = function() {
            return s3.treeWalker_traverseChildren(this, true);
          }, t3.prototype.lastChild = function() {
            return s3.treeWalker_traverseChildren(this, false);
          }, t3.prototype.nextSibling = function() {
            return s3.treeWalker_traverseSiblings(this, true);
          }, t3.prototype.previousNode = function() {
            for (var e4 = this._current; e4 !== this._root; ) {
              for (var t4 = e4._previousSibling; t4; ) {
                e4 = t4;
                for (var r2 = s3.traversal_filter(this, e4); r2 !== o.FilterResult.Reject && e4._lastChild; )
                  e4 = e4._lastChild, r2 = s3.traversal_filter(this, e4);
                if (r2 === o.FilterResult.Accept)
                  return this._current = e4, e4;
                t4 = e4._previousSibling;
              }
              if (e4 === this._root || e4._parent === null)
                return null;
              if (e4 = e4._parent, s3.traversal_filter(this, e4) === o.FilterResult.Accept)
                return this._current = e4, e4;
            }
            return null;
          }, t3.prototype.previousSibling = function() {
            return s3.treeWalker_traverseSiblings(this, false);
          }, t3.prototype.nextNode = function() {
            for (var e4 = this._current, t4 = o.FilterResult.Accept; ; ) {
              for (; t4 !== o.FilterResult.Reject && e4._firstChild; )
                if (e4 = e4._firstChild, (t4 = s3.traversal_filter(this, e4)) === o.FilterResult.Accept)
                  return this._current = e4, e4;
              for (var r2 = null, n2 = e4; n2 !== null; ) {
                if (n2 === this._root)
                  return null;
                if ((r2 = n2._nextSibling) !== null) {
                  e4 = r2;
                  break;
                }
                n2 = n2._parent;
              }
              if ((t4 = s3.traversal_filter(this, e4)) === o.FilterResult.Accept)
                return this._current = e4, e4;
            }
          }, t3._create = function(e4, r2) {
            return new t3(e4, r2);
          }, t3;
        }(a3.TraverserImpl);
        t2.TreeWalkerImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(12), o = function() {
          function e3() {
          }
          return e3.prototype.acceptNode = function(e4) {
            return n.FilterResult.Accept;
          }, e3._create = function() {
            return new e3();
          }, e3.FILTER_ACCEPT = 1, e3.FILTER_REJECT = 2, e3.FILTER_SKIP = 3, e3.SHOW_ALL = 4294967295, e3.SHOW_ELEMENT = 1, e3.SHOW_ATTRIBUTE = 2, e3.SHOW_TEXT = 4, e3.SHOW_CDATA_SECTION = 8, e3.SHOW_ENTITY_REFERENCE = 16, e3.SHOW_ENTITY = 32, e3.SHOW_PROCESSING_INSTRUCTION = 64, e3.SHOW_COMMENT = 128, e3.SHOW_DOCUMENT = 256, e3.SHOW_DOCUMENT_TYPE = 512, e3.SHOW_DOCUMENT_FRAGMENT = 1024, e3.SHOW_NOTATION = 2048, e3;
        }();
        t2.NodeFilterImpl = o, i2.idl_defineConst(o.prototype, "FILTER_ACCEPT", 1), i2.idl_defineConst(o.prototype, "FILTER_REJECT", 2), i2.idl_defineConst(o.prototype, "FILTER_SKIP", 3), i2.idl_defineConst(o.prototype, "SHOW_ALL", 4294967295), i2.idl_defineConst(o.prototype, "SHOW_ELEMENT", 1), i2.idl_defineConst(o.prototype, "SHOW_ATTRIBUTE", 2), i2.idl_defineConst(o.prototype, "SHOW_TEXT", 4), i2.idl_defineConst(o.prototype, "SHOW_CDATA_SECTION", 8), i2.idl_defineConst(o.prototype, "SHOW_ENTITY_REFERENCE", 16), i2.idl_defineConst(o.prototype, "SHOW_ENTITY", 32), i2.idl_defineConst(o.prototype, "SHOW_PROCESSING_INSTRUCTION", 64), i2.idl_defineConst(o.prototype, "SHOW_COMMENT", 128), i2.idl_defineConst(o.prototype, "SHOW_DOCUMENT", 256), i2.idl_defineConst(o.prototype, "SHOW_DOCUMENT_TYPE", 512), i2.idl_defineConst(o.prototype, "SHOW_DOCUMENT_FRAGMENT", 1024), i2.idl_defineConst(o.prototype, "SHOW_NOTATION", 2048);
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4, t3, r2, n2, i2, o, a3, s3, u2) {
            this._type = e4, this._target = t3, this._addedNodes = r2, this._removedNodes = n2, this._previousSibling = i2, this._nextSibling = o, this._attributeName = a3, this._attributeNamespace = s3, this._oldValue = u2;
          }
          return Object.defineProperty(e3.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "addedNodes", { get: function() {
            return this._addedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "removedNodes", { get: function() {
            return this._removedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "attributeName", { get: function() {
            return this._attributeName;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "attributeNamespace", { get: function() {
            return this._attributeNamespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "oldValue", { get: function() {
            return this._oldValue;
          }, enumerable: true, configurable: true }), e3._create = function(t3, r2, n2, i2, o, a3, s3, u2, l) {
            return new e3(t3, r2, n2, i2, o, a3, s3, u2, l);
          }, e3;
        }();
        t2.MutationRecordImpl = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(9), a3 = r(7), s3 = r(0), u2 = function() {
          function e3(e4, t3) {
            this._element = e4, this._attribute = t3, this._tokenSet = /* @__PURE__ */ new Set();
            var r2 = t3._localName, n2 = s3.element_getAnAttributeValue(e4, r2), o2 = this;
            this._element._attributeChangeSteps.push(function(e5, t4, r3, n3, i3) {
              t4 === o2._attribute._localName && i3 === null && (n3 ? o2._tokenSet = s3.orderedSet_parse(n3) : o2._tokenSet.clear());
            }), i2.dom.features.steps && s3.dom_runAttributeChangeSteps(e4, r2, n2, n2, null);
          }
          return Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._tokenSet.size;
          }, enumerable: true, configurable: true }), e3.prototype.item = function(e4) {
            var t3, r2, i3 = 0;
            try {
              for (var o2 = n(this._tokenSet), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s4 = a4.value;
                if (i3 === e4)
                  return s4;
                i3++;
              }
            } catch (e5) {
              t3 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return null;
          }, e3.prototype.contains = function(e4) {
            return this._tokenSet.has(e4);
          }, e3.prototype.add = function() {
            for (var e4, t3, r2 = [], i3 = 0; i3 < arguments.length; i3++)
              r2[i3] = arguments[i3];
            try {
              for (var u3 = n(r2), l = u3.next(); !l.done; l = u3.next()) {
                var c2 = l.value;
                if (c2 === "")
                  throw new o.SyntaxError("Cannot add an empty token.");
                if (a3.codePoint.ASCIIWhiteSpace.test(c2))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.add(c2);
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                l && !l.done && (t3 = u3.return) && t3.call(u3);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            s3.tokenList_updateSteps(this);
          }, e3.prototype.remove = function() {
            for (var e4, t3, r2 = [], i3 = 0; i3 < arguments.length; i3++)
              r2[i3] = arguments[i3];
            try {
              for (var u3 = n(r2), l = u3.next(); !l.done; l = u3.next()) {
                var c2 = l.value;
                if (c2 === "")
                  throw new o.SyntaxError("Cannot remove an empty token.");
                if (a3.codePoint.ASCIIWhiteSpace.test(c2))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.delete(c2);
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                l && !l.done && (t3 = u3.return) && t3.call(u3);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            s3.tokenList_updateSteps(this);
          }, e3.prototype.toggle = function(e4, t3) {
            if (t3 === void 0 && (t3 = void 0), e4 === "")
              throw new o.SyntaxError("Cannot toggle an empty token.");
            if (a3.codePoint.ASCIIWhiteSpace.test(e4))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return this._tokenSet.has(e4) ? t3 !== void 0 && t3 !== false || (this._tokenSet.delete(e4), s3.tokenList_updateSteps(this), false) : (t3 === void 0 || t3 === true) && (this._tokenSet.add(e4), s3.tokenList_updateSteps(this), true);
          }, e3.prototype.replace = function(e4, t3) {
            if (e4 === "" || t3 === "")
              throw new o.SyntaxError("Cannot replace an empty token.");
            if (a3.codePoint.ASCIIWhiteSpace.test(e4) || a3.codePoint.ASCIIWhiteSpace.test(t3))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return !!this._tokenSet.has(e4) && (a3.set.replace(this._tokenSet, e4, t3), s3.tokenList_updateSteps(this), true);
          }, e3.prototype.supports = function(e4) {
            return s3.tokenList_validationSteps(this, e4);
          }, Object.defineProperty(e3.prototype, "value", { get: function() {
            return s3.tokenList_serializeSteps(this);
          }, set: function(e4) {
            s3.element_setAnAttributeValue(this._element, this._attribute._localName, e4);
          }, enumerable: true, configurable: true }), e3.prototype[Symbol.iterator] = function() {
            var e4 = this._tokenSet[Symbol.iterator]();
            return { next: function() {
              return e4.next();
            } };
          }, e3._create = function(t3, r2) {
            return new e3(t3, r2);
          }, e3;
        }();
        t2.DOMTokenListImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(104), a3 = r(0), s3 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4, r2) || this;
            return n2._detail = null, n2._detail = r2 && r2.detail || null, n2;
          }
          return i2(t3, e3), Object.defineProperty(t3.prototype, "detail", { get: function() {
            return this._detail;
          }, enumerable: true, configurable: true }), t3.prototype.initCustomEvent = function(e4, t4, r2, n2) {
            t4 === void 0 && (t4 = false), r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = null), this._dispatchFlag || (a3.event_initialize(this, e4, t4, r2), this._detail = n2);
          }, t3;
        }(o.EventImpl);
        t2.CustomEventImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(6), i2 = r(2), o = r(105), a3 = r(17);
        t2.nodeIterator_traverse = function(e3, t3) {
          for (var r2 = e3._reference, n2 = e3._pointerBeforeReference; ; ) {
            if (t3)
              if (n2)
                n2 = false;
              else {
                var s3 = a3.tree_getFollowingNode(e3._root, r2);
                if (!s3)
                  return null;
                r2 = s3;
              }
            else if (n2) {
              var u2 = a3.tree_getPrecedingNode(e3.root, r2);
              if (!u2)
                return null;
              r2 = u2;
            } else
              n2 = true;
            if (o.traversal_filter(e3, r2) === i2.FilterResult.Accept)
              break;
          }
          return e3._reference = r2, e3._pointerBeforeReference = n2, r2;
        }, t2.nodeIterator_iteratorList = function() {
          return n.dom.window._iteratorList;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(9), i2 = r(7), o = r(174);
        function a3(e3) {
          if (!o.xml_isName(e3))
            throw new n.InvalidCharacterError("Invalid XML name: " + e3);
          if (!o.xml_isQName(e3))
            throw new n.InvalidCharacterError("Invalid XML qualified name: " + e3 + ".");
        }
        t2.namespace_validate = a3, t2.namespace_validateAndExtract = function(e3, t3) {
          e3 || (e3 = null), a3(t3);
          var r2 = t3.split(":"), o2 = r2.length === 2 ? r2[0] : null, s3 = r2.length === 2 ? r2[1] : t3;
          if (o2 && e3 === null)
            throw new n.NamespaceError("Qualified name includes a prefix but the namespace is null.");
          if (o2 === "xml" && e3 !== i2.namespace.XML)
            throw new n.NamespaceError('Qualified name includes the "xml" prefix but the namespace is not the XML namespace.');
          if (e3 !== i2.namespace.XMLNS && (o2 === "xmlns" || t3 === "xmlns"))
            throw new n.NamespaceError('Qualified name includes the "xmlns" prefix but the namespace is not the XMLNS namespace.');
          if (e3 === i2.namespace.XMLNS && o2 !== "xmlns" && t3 !== "xmlns")
            throw new n.NamespaceError('Qualified name does not include the "xmlns" prefix but the namespace is the XMLNS namespace.');
          return [e3, o2, s3];
        }, t2.namespace_extractQName = function(e3) {
          a3(e3);
          var t3 = e3.split(":");
          return [t3.length === 2 ? t3[0] : null, t3.length === 2 ? t3[1] : e3];
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.xml_isName = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3.charCodeAt(t3);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 === 58 || r2 === 95 || r2 >= 192 && r2 <= 214 || r2 >= 216 && r2 <= 246 || r2 >= 248 && r2 <= 767 || r2 >= 880 && r2 <= 893 || r2 >= 895 && r2 <= 8191 || r2 >= 8204 && r2 <= 8205 || r2 >= 8304 && r2 <= 8591 || r2 >= 11264 && r2 <= 12271 || r2 >= 12289 && r2 <= 55295 || r2 >= 63744 && r2 <= 64975 || r2 >= 65008 && r2 <= 65533) && (t3 === 0 || !(r2 === 45 || r2 === 46 || r2 >= 48 && r2 <= 57 || r2 === 183 || r2 >= 768 && r2 <= 879 || r2 >= 8255 && r2 <= 8256))) {
              if (r2 >= 55296 && r2 <= 56319 && t3 < e3.length - 1) {
                var n = e3.charCodeAt(t3 + 1);
                if (n >= 56320 && n <= 57343 && (t3++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 983039))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t2.xml_isQName = function(e3) {
          for (var t3 = false, r2 = 0; r2 < e3.length; r2++) {
            var n = e3.charCodeAt(r2);
            if (!(n >= 97 && n <= 122 || n >= 65 && n <= 90 || n === 95 || n >= 192 && n <= 214 || n >= 216 && n <= 246 || n >= 248 && n <= 767 || n >= 880 && n <= 893 || n >= 895 && n <= 8191 || n >= 8204 && n <= 8205 || n >= 8304 && n <= 8591 || n >= 11264 && n <= 12271 || n >= 12289 && n <= 55295 || n >= 63744 && n <= 64975 || n >= 65008 && n <= 65533) && (r2 === 0 || !(n === 45 || n === 46 || n >= 48 && n <= 57 || n === 183 || n >= 768 && n <= 879 || n >= 8255 && n <= 8256))) {
              if (r2 === 0 || n !== 58) {
                if (n >= 55296 && n <= 56319 && r2 < e3.length - 1) {
                  var i2 = e3.charCodeAt(r2 + 1);
                  if (i2 >= 56320 && i2 <= 57343 && (r2++, (n = 1024 * (n - 55296) + i2 - 56320 + 65536) >= 65536 && n <= 983039))
                    continue;
                }
                return false;
              }
              if (t3)
                return false;
              if (r2 === e3.length - 1)
                return false;
              t3 = true;
            }
          }
          return true;
        }, t2.xml_isLegalChar = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3.charCodeAt(t3);
            if (!(r2 === 9 || r2 === 10 || r2 === 13 || r2 >= 32 && r2 <= 55295 || r2 >= 57344 && r2 <= 65533)) {
              if (r2 >= 55296 && r2 <= 56319 && t3 < e3.length - 1) {
                var n = e3.charCodeAt(t3 + 1);
                if (n >= 56320 && n <= 57343 && (t3++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 1114111))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t2.xml_isPubidChar = function(e3) {
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r2 = e3.charCodeAt(t3);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 >= 39 && r2 <= 59 || r2 === 32 || r2 === 13 || r2 === 10 || r2 >= 35 && r2 <= 37 || r2 === 33 || r2 === 61 || r2 === 63 || r2 === 64 || r2 === 95))
              return false;
          }
          return true;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(17);
        t2.boundaryPoint_position = function e3(t3, r2) {
          var o = t3[0], a3 = t3[1], s3 = r2[0], u2 = r2[1];
          if (console.assert(i2.tree_rootNode(o) === i2.tree_rootNode(s3), "Boundary points must share the same root node."), o === s3)
            return a3 === u2 ? n.BoundaryPosition.Equal : a3 < u2 ? n.BoundaryPosition.Before : n.BoundaryPosition.After;
          if (i2.tree_isFollowing(s3, o)) {
            var l = e3([s3, u2], [o, a3]);
            if (l === n.BoundaryPosition.Before)
              return n.BoundaryPosition.After;
            if (l === n.BoundaryPosition.After)
              return n.BoundaryPosition.Before;
          }
          if (i2.tree_isAncestorOf(s3, o)) {
            for (var c2 = s3; !i2.tree_isChildOf(o, c2); )
              c2._parent !== null && (c2 = c2._parent);
            if (i2.tree_index(c2) < a3)
              return n.BoundaryPosition.After;
          }
          return n.BoundaryPosition.Before;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(7), s3 = r(29), u2 = r(108), l = r(30), c2 = r(37), h3 = r(52);
        t2.node_stringReplaceAll = function(e3, t3) {
          var r2 = null;
          e3 !== "" && (r2 = s3.create_text(t3._nodeDocument, e3)), c2.mutation_replaceAll(r2, t3);
        }, t2.node_clone = function e3(t3, r2, a4) {
          var u3, p, f, d3, m3;
          if (r2 === void 0 && (r2 = null), a4 === void 0 && (a4 = false), r2 === null && (r2 = t3._nodeDocument), o.Guard.isElementNode(t3)) {
            m3 = h3.element_createAnElement(r2, t3._localName, t3._namespace, t3._namespacePrefix, t3._is, false);
            try {
              for (var y3 = n(t3._attributeList), v = y3.next(); !v.done; v = y3.next()) {
                var _ = e3(v.value, r2);
                h3.element_append(_, m3);
              }
            } catch (e4) {
              u3 = { error: e4 };
            } finally {
              try {
                v && !v.done && (p = y3.return) && p.call(y3);
              } finally {
                if (u3)
                  throw u3.error;
              }
            }
          } else if (o.Guard.isDocumentNode(t3)) {
            var g = s3.create_document();
            g._encoding = t3._encoding, g._contentType = t3._contentType, g._URL = t3._URL, g._origin = t3._origin, g._type = t3._type, g._mode = t3._mode, m3 = g;
          } else if (o.Guard.isDocumentTypeNode(t3)) {
            m3 = s3.create_documentType(r2, t3._name, t3._publicId, t3._systemId);
          } else if (o.Guard.isAttrNode(t3)) {
            var b2 = s3.create_attr(r2, t3.localName);
            b2._namespace = t3._namespace, b2._namespacePrefix = t3._namespacePrefix, b2._value = t3._value, m3 = b2;
          } else
            m3 = o.Guard.isExclusiveTextNode(t3) ? s3.create_text(r2, t3._data) : o.Guard.isCDATASectionNode(t3) ? s3.create_cdataSection(r2, t3._data) : o.Guard.isCommentNode(t3) ? s3.create_comment(r2, t3._data) : o.Guard.isProcessingInstructionNode(t3) ? s3.create_processingInstruction(r2, t3._target, t3._data) : o.Guard.isDocumentFragmentNode(t3) ? s3.create_documentFragment(r2) : Object.create(t3);
          if (o.Guard.isDocumentNode(m3) ? (m3._nodeDocument = m3, r2 = m3) : m3._nodeDocument = r2, i2.dom.features.steps && l.dom_runCloningSteps(m3, t3, r2, a4), a4)
            try {
              for (var x2 = n(t3._children), w2 = x2.next(); !w2.done; w2 = x2.next()) {
                var E2 = e3(w2.value, r2, true);
                c2.mutation_append(E2, m3);
              }
            } catch (e4) {
              f = { error: e4 };
            } finally {
              try {
                w2 && !w2.done && (d3 = x2.return) && d3.call(x2);
              } finally {
                if (f)
                  throw f.error;
              }
            }
          return m3;
        }, t2.node_equals = function e3(t3, r2) {
          var i3, a4, s4, u3;
          if (t3._nodeType !== r2._nodeType)
            return false;
          if (o.Guard.isDocumentTypeNode(t3) && o.Guard.isDocumentTypeNode(r2)) {
            if (t3._name !== r2._name || t3._publicId !== r2._publicId || t3._systemId !== r2._systemId)
              return false;
          } else if (o.Guard.isElementNode(t3) && o.Guard.isElementNode(r2)) {
            if (t3._namespace !== r2._namespace || t3._namespacePrefix !== r2._namespacePrefix || t3._localName !== r2._localName || t3._attributeList.length !== r2._attributeList.length)
              return false;
          } else if (o.Guard.isAttrNode(t3) && o.Guard.isAttrNode(r2)) {
            if (t3._namespace !== r2._namespace || t3._localName !== r2._localName || t3._value !== r2._value)
              return false;
          } else if (o.Guard.isProcessingInstructionNode(t3) && o.Guard.isProcessingInstructionNode(r2)) {
            if (t3._target !== r2._target || t3._data !== r2._data)
              return false;
          } else if (o.Guard.isCharacterDataNode(t3) && o.Guard.isCharacterDataNode(r2) && t3._data !== r2._data)
            return false;
          if (o.Guard.isElementNode(t3) && o.Guard.isElementNode(r2)) {
            var l2 = {};
            try {
              for (var c3 = n(t3._attributeList), h4 = c3.next(); !h4.done; h4 = c3.next()) {
                l2[(d3 = h4.value)._localName] = d3;
              }
            } catch (e4) {
              i3 = { error: e4 };
            } finally {
              try {
                h4 && !h4.done && (a4 = c3.return) && a4.call(c3);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            try {
              for (var p = n(r2._attributeList), f = p.next(); !f.done; f = p.next()) {
                var d3, m3 = f.value;
                if (!(d3 = l2[m3._localName]))
                  return false;
                if (!e3(d3, m3))
                  return false;
              }
            } catch (e4) {
              s4 = { error: e4 };
            } finally {
              try {
                f && !f.done && (u3 = p.return) && u3.call(p);
              } finally {
                if (s4)
                  throw s4.error;
              }
            }
          }
          if (t3._children.size !== r2._children.size)
            return false;
          for (var y3 = t3._children[Symbol.iterator](), v = r2._children[Symbol.iterator](), _ = y3.next(), g = v.next(); !_.done && !g.done; ) {
            if (!e3(_.value, g.value))
              return false;
            _ = y3.next(), g = v.next();
          }
          return true;
        }, t2.node_listOfElementsWithQualifiedName = function(e3, t3) {
          return e3 === "*" ? s3.create_htmlCollection(t3) : t3._nodeDocument._type === "html" ? s3.create_htmlCollection(t3, function(t4) {
            return t4._namespace === a3.namespace.HTML && t4._qualifiedName === e3.toLowerCase() || t4._namespace !== a3.namespace.HTML && t4._qualifiedName === e3;
          }) : s3.create_htmlCollection(t3, function(t4) {
            return t4._qualifiedName === e3;
          });
        }, t2.node_listOfElementsWithNamespace = function(e3, t3, r2) {
          return e3 === "" && (e3 = null), e3 === "*" && t3 === "*" ? s3.create_htmlCollection(r2) : e3 === "*" ? s3.create_htmlCollection(r2, function(e4) {
            return e4._localName === t3;
          }) : t3 === "*" ? s3.create_htmlCollection(r2, function(t4) {
            return t4._namespace === e3;
          }) : s3.create_htmlCollection(r2, function(r3) {
            return r3._localName === t3 && r3._namespace === e3;
          });
        }, t2.node_listOfElementsWithClassNames = function(e3, t3) {
          var r2 = u2.orderedSet_parse(e3);
          if (r2.size === 0)
            return s3.create_htmlCollection(t3, function() {
              return false;
            });
          var n2 = t3._nodeDocument._mode !== "quirks";
          return s3.create_htmlCollection(t3, function(e4) {
            var t4 = e4.classList;
            return u2.orderedSet_contains(t4._tokenSet, r2, n2);
          });
        }, t2.node_locateANamespacePrefix = function e3(t3, r2) {
          if (t3._namespace === r2 && t3._namespacePrefix !== null)
            return t3._namespacePrefix;
          for (var n2 = 0; n2 < t3._attributeList.length; n2++) {
            var i3 = t3._attributeList[n2];
            if (i3._namespacePrefix === "xmlns" && i3._value === r2)
              return i3._localName;
          }
          return t3._parent && o.Guard.isElementNode(t3._parent) ? e3(t3._parent, r2) : null;
        }, t2.node_locateANamespace = function e3(t3, r2) {
          if (o.Guard.isElementNode(t3)) {
            if (t3._namespace !== null && t3._namespacePrefix === r2)
              return t3._namespace;
            for (var n2 = 0; n2 < t3._attributeList.length; n2++) {
              var i3 = t3._attributeList[n2];
              if (i3._namespace === a3.namespace.XMLNS && i3._namespacePrefix === "xmlns" && i3._localName === r2)
                return i3._value || null;
              if (r2 === null && i3._namespace === a3.namespace.XMLNS && i3._namespacePrefix === null && i3._localName === "xmlns")
                return i3._value || null;
            }
            return t3.parentElement === null ? null : e3(t3.parentElement, r2);
          }
          return o.Guard.isDocumentNode(t3) ? t3.documentElement === null ? null : e3(t3.documentElement, r2) : o.Guard.isDocumentTypeNode(t3) || o.Guard.isDocumentFragmentNode(t3) ? null : o.Guard.isAttrNode(t3) ? t3._element === null ? null : e3(t3._element, r2) : t3._parent && o.Guard.isElementNode(t3._parent) ? e3(t3._parent, r2) : null;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(9), s3 = r(29), u2 = r(17), l = r(107), c2 = r(37);
        t2.text_contiguousTextNodes = function(e3, t3) {
          var r2;
          return t3 === void 0 && (t3 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e3; r3 && o.Guard.isTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t3 && r3 === e3 && (r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t2.text_contiguousExclusiveTextNodes = function(e3, t3) {
          var r2;
          return t3 === void 0 && (t3 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e3; r3 && o.Guard.isExclusiveTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t3 && r3 === e3 && (r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t2.text_descendantTextContent = function(e3) {
          for (var t3 = "", r2 = u2.tree_getFirstDescendantNode(e3, false, false, function(e4) {
            return o.Guard.isTextNode(e4);
          }); r2 !== null; )
            t3 += r2._data, r2 = u2.tree_getNextDescendantNode(e3, r2, false, false, function(e4) {
              return o.Guard.isTextNode(e4);
            });
          return t3;
        }, t2.text_split = function(e3, t3) {
          var r2, o2, h3 = e3._data.length;
          if (t3 > h3)
            throw new a3.IndexSizeError();
          var p = h3 - t3, f = l.characterData_substringData(e3, t3, p), d3 = s3.create_text(e3._nodeDocument, f), m3 = e3._parent;
          if (m3 !== null) {
            c2.mutation_insert(d3, m3, e3._nextSibling);
            try {
              for (var y3 = n(i2.dom.rangeList), v = y3.next(); !v.done; v = y3.next()) {
                var _ = v.value;
                _._start[0] === e3 && _._start[1] > t3 && (_._start[0] = d3, _._start[1] -= t3), _._end[0] === e3 && _._end[1] > t3 && (_._end[0] = d3, _._end[1] -= t3);
                var g = u2.tree_index(e3);
                _._start[0] === m3 && _._start[1] === g + 1 && _._start[1]++, _._end[0] === m3 && _._end[1] === g + 1 && _._end[1]++;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                v && !v.done && (o2 = y3.return) && o2.call(y3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return l.characterData_replaceData(e3, t3, p, ""), d3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(41), o = r(24), a3 = r(48), s3 = [].join, u2 = i2 != Object, l = a3("join", ",");
        n({ target: "Array", proto: true, forced: u2 || !l }, { join: function(e3) {
          return s3.call(o(this), e3 === void 0 ? "," : e3);
        } });
      }, function(e2, t2, r) {
        var n = r(4), i2 = r(83), o = String.fromCharCode, a3 = String.fromCodePoint;
        n({ target: "String", stat: true, forced: !!a3 && a3.length != 1 }, { fromCodePoint: function(e3) {
          for (var t3, r2 = [], n2 = arguments.length, a4 = 0; n2 > a4; ) {
            if (t3 = +arguments[a4++], i2(t3, 1114111) !== t3)
              throw RangeError(t3 + " is not a valid code point");
            r2.push(t3 < 65536 ? o(t3) : o(55296 + ((t3 -= 65536) >> 10), t3 % 1024 + 56320));
          }
          return r2.join("");
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a3 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a3.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(111), o = function() {
          function e3(e4, t3) {
            this._options = { skipWhitespaceOnlyText: false }, this.err = { line: -1, col: -1, index: -1, str: "" }, this._str = e4, this._index = 0, this._length = e4.length, t3 && (this._options.skipWhitespaceOnlyText = t3.skipWhitespaceOnlyText || false);
          }
          return e3.prototype.nextToken = function() {
            if (this.eof())
              return { type: i2.TokenType.EOF };
            var t3 = this.skipIfStartsWith("<") ? this.openBracket() : this.text();
            return this._options.skipWhitespaceOnlyText && t3.type === i2.TokenType.Text && e3.isWhiteSpaceToken(t3) && (t3 = this.nextToken()), t3;
          }, e3.prototype.openBracket = function() {
            return this.skipIfStartsWith("?") ? this.skipIfStartsWith("xml") ? e3.isSpace(this._str[this._index]) ? this.declaration() : (this.seek(-3), this.pi()) : this.pi() : this.skipIfStartsWith("!") ? this.skipIfStartsWith("--") ? this.comment() : this.skipIfStartsWith("[CDATA[") ? this.cdata() : this.skipIfStartsWith("DOCTYPE") ? this.doctype() : void this.throwError("Invalid '!' in opening tag.") : this.skipIfStartsWith("/") ? this.closeTag() : this.openTag();
          }, e3.prototype.declaration = function() {
            for (var e4 = "", t3 = "", r2 = ""; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith("?>"))
                return { type: i2.TokenType.Declaration, version: e4, encoding: t3, standalone: r2 };
              var o2 = n(this.attribute(), 2), a3 = o2[0], s3 = o2[1];
              a3 === "version" ? e4 = s3 : a3 === "encoding" ? t3 = s3 : a3 === "standalone" ? r2 = s3 : this.throwError("Invalid attribute name: " + a3);
            }
            this.throwError("Missing declaration end symbol `?>`");
          }, e3.prototype.doctype = function() {
            var e4 = "", t3 = "";
            this.skipSpace();
            var r2 = this.takeUntil2("[", ">", true);
            return this.skipSpace(), this.skipIfStartsWith("PUBLIC") ? (e4 = this.quotedString(), t3 = this.quotedString()) : this.skipIfStartsWith("SYSTEM") && (t3 = this.quotedString()), this.skipSpace(), this.skipIfStartsWith("[") && (this.skipUntil("]"), this.skipIfStartsWith("]") || this.throwError("Missing end bracket of DTD internal subset")), this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing doctype end symbol `>`"), { type: i2.TokenType.DocType, name: r2, pubId: e4, sysId: t3 };
          }, e3.prototype.pi = function() {
            var e4 = this.takeUntilStartsWith("?>", true);
            if (this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.skipSpace(), this.skipIfStartsWith("?>"))
              return { type: i2.TokenType.PI, target: e4, data: "" };
            var t3 = this.takeUntilStartsWith("?>");
            return this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.seek(2), { type: i2.TokenType.PI, target: e4, data: t3 };
          }, e3.prototype.text = function() {
            var e4 = this.takeUntil("<");
            return { type: i2.TokenType.Text, data: e4 };
          }, e3.prototype.comment = function() {
            var e4 = this.takeUntilStartsWith("-->");
            return this.eof() && this.throwError("Missing comment end symbol `-->`"), this.seek(3), { type: i2.TokenType.Comment, data: e4 };
          }, e3.prototype.cdata = function() {
            var e4 = this.takeUntilStartsWith("]]>");
            return this.eof() && this.throwError("Missing CDATA end symbol `]>`"), this.seek(3), { type: i2.TokenType.CDATA, data: e4 };
          }, e3.prototype.openTag = function() {
            this.skipSpace();
            var e4 = this.takeUntil2(">", "/", true);
            if (this.skipSpace(), this.skipIfStartsWith(">"))
              return { type: i2.TokenType.Element, name: e4, attributes: [], selfClosing: false };
            if (this.skipIfStartsWith("/>"))
              return { type: i2.TokenType.Element, name: e4, attributes: [], selfClosing: true };
            for (var t3 = []; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith(">"))
                return { type: i2.TokenType.Element, name: e4, attributes: t3, selfClosing: false };
              if (this.skipIfStartsWith("/>"))
                return { type: i2.TokenType.Element, name: e4, attributes: t3, selfClosing: true };
              var r2 = this.attribute();
              t3.push(r2);
            }
            this.throwError("Missing opening element tag end symbol `>`");
          }, e3.prototype.closeTag = function() {
            this.skipSpace();
            var e4 = this.takeUntil(">", true);
            return this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing closing element tag end symbol `>`"), { type: i2.TokenType.ClosingTag, name: e4 };
          }, e3.prototype.attribute = function() {
            this.skipSpace();
            var e4 = this.takeUntil("=", true);
            return this.skipSpace(), this.skipIfStartsWith("=") || this.throwError("Missing equals sign before attribute value"), [e4, this.quotedString()];
          }, e3.prototype.quotedString = function() {
            this.skipSpace();
            var t3 = this.take(1);
            e3.isQuote(t3) || this.throwError("Missing start quote character before quoted value");
            var r2 = this.takeUntil(t3);
            return this.skipIfStartsWith(t3) || this.throwError("Missing end quote character after quoted value"), r2;
          }, e3.prototype.eof = function() {
            return this._index >= this._length;
          }, e3.prototype.skipIfStartsWith = function(e4) {
            var t3 = e4.length;
            if (t3 === 1)
              return this._str[this._index] === e4 && (this._index++, true);
            for (var r2 = 0; r2 < t3; r2++)
              if (this._str[this._index + r2] !== e4[r2])
                return false;
            return this._index += t3, true;
          }, e3.prototype.seek = function(e4) {
            this._index += e4, this._index < 0 && (this._index = 0), this._index > this._length && (this._index = this._length);
          }, e3.prototype.skipSpace = function() {
            for (; !this.eof() && e3.isSpace(this._str[this._index]); )
              this._index++;
          }, e3.prototype.take = function(e4) {
            if (e4 === 1)
              return this._str[this._index++];
            var t3 = this._index;
            return this.seek(e4), this._str.slice(t3, this._index);
          }, e3.prototype.takeUntil = function(t3, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index; this._index < this._length; ) {
              var i3 = this._str[this._index];
              if (i3 === t3 || r2 && e3.isSpace(i3))
                break;
              this._index++;
            }
            return this._str.slice(n2, this._index);
          }, e3.prototype.takeUntil2 = function(t3, r2, n2) {
            n2 === void 0 && (n2 = false);
            for (var i3 = this._index; this._index < this._length; ) {
              var o2 = this._str[this._index];
              if (o2 === t3 || o2 === r2 || n2 && e3.isSpace(o2))
                break;
              this._index++;
            }
            return this._str.slice(i3, this._index);
          }, e3.prototype.takeUntilStartsWith = function(t3, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index, i3 = t3.length; this._index < this._length; ) {
              for (var o2 = true, a3 = 0; a3 < i3; a3++) {
                var s3 = this._str[this._index + a3], u2 = t3[a3];
                if (r2 && e3.isSpace(s3))
                  return this._str.slice(n2, this._index);
                if (s3 !== u2) {
                  this._index++, o2 = false;
                  break;
                }
              }
              if (o2)
                return this._str.slice(n2, this._index);
            }
            return this._index = this._length, this._str.slice(n2);
          }, e3.prototype.skipUntil = function(e4) {
            for (; this._index < this._length; ) {
              if (this._str[this._index] === e4)
                break;
              this._index++;
            }
          }, e3.isWhiteSpaceToken = function(e4) {
            for (var t3 = e4.data, r2 = 0; r2 < t3.length; r2++) {
              var n2 = t3[r2];
              if (n2 !== " " && n2 !== "\n" && n2 !== "\r" && n2 !== "	" && n2 !== "\f")
                return false;
            }
            return true;
          }, e3.isSpace = function(e4) {
            return e4 === " " || e4 === "\n" || e4 === "\r" || e4 === "	";
          }, e3.isQuote = function(e4) {
            return e4 === '"' || e4 === "'";
          }, e3.prototype.throwError = function(e4) {
            for (var t3 = /\r\n|\r|\n/g, r2 = null, n2 = 0, i3 = 0, o2 = this._str.length; (r2 = t3.exec(this._str)) !== null && r2 !== null; )
              if (n2++, r2.index < this._index && (i3 = t3.lastIndex), r2.index > this._index) {
                o2 = r2.index;
                break;
              }
            throw this.err = { line: n2, col: this._index - i3, index: this._index, str: this._str.substring(i3, o2) }, new Error(e4 + "\nIndex: " + this.err.index + "\nLn: " + this.err.line + ", Col: " + this.err.col + "\nInput: " + this.err.str);
          }, e3.prototype[Symbol.iterator] = function() {
            return this._index = 0, { next: function() {
              var e4 = this.nextToken();
              return e4.type === i2.TokenType.EOF ? { done: true, value: null } : { done: false, value: e4 };
            }.bind(this) };
          }, e3;
        }();
        t2.XMLStringLexer = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ include: [r(182)] });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(39);
        e2.exports = new n({ include: [r(113)], implicit: [r(289), r(290), r(291), r(292)] });
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(91), i2 = r(1), o = r(3), a3 = r(77), s3 = r(109);
        function u2(e3, t3) {
          var r2 = c2(e3 === void 0 || l(e3) ? e3 : n.DefaultBuilderOptions), i3 = l(e3) ? t3 : e3, o2 = s3.createDocument();
          h3(o2, r2);
          var u3 = new a3.XMLBuilderImpl(o2);
          return i3 !== void 0 && u3.ele(i3), u3;
        }
        function l(e3) {
          if (!i2.isPlainObject(e3))
            return false;
          for (var t3 in e3)
            if (e3.hasOwnProperty(t3) && !n.XMLBuilderOptionKeys.has(t3))
              return false;
          return true;
        }
        function c2(e3) {
          e3 === void 0 && (e3 = {});
          var t3 = i2.applyDefaults(e3, n.DefaultBuilderOptions);
          if (t3.convert.att.length === 0 || t3.convert.ins.length === 0 || t3.convert.text.length === 0 || t3.convert.cdata.length === 0 || t3.convert.comment.length === 0)
            throw new Error("JS object converter strings cannot be zero length.");
          return t3;
        }
        function h3(e3, t3, r2) {
          var n2 = e3;
          n2._xmlBuilderOptions = t3, n2._isFragment = r2;
        }
        t2.builder = function(e3, t3) {
          var r2 = c2(l(e3) ? e3 : n.DefaultBuilderOptions), s4 = o.Guard.isNode(e3) || i2.isArray(e3) ? e3 : t3;
          if (s4 === void 0)
            throw new Error("Invalid arguments.");
          if (i2.isArray(s4)) {
            for (var u3 = [], h4 = 0; h4 < s4.length; h4++) {
              var p = new a3.XMLBuilderImpl(s4[h4]);
              p.set(r2), u3.push(p);
            }
            return u3;
          }
          var f = new a3.XMLBuilderImpl(s4);
          return f.set(r2), f;
        }, t2.create = u2, t2.fragment = function(e3, t3) {
          var r2 = c2(e3 === void 0 || l(e3) ? e3 : n.DefaultBuilderOptions), i3 = l(e3) ? t3 : e3, o2 = s3.createDocument();
          h3(o2, r2, true);
          var u3 = new a3.XMLBuilderImpl(o2.createDocumentFragment());
          return i3 !== void 0 && u3.ele(i3), u3;
        }, t2.convert = function(e3, t3, r2) {
          var i3, o2, a4;
          return l(e3) && t3 !== void 0 ? (i3 = e3, o2 = t3, a4 = r2) : (i3 = n.DefaultBuilderOptions, o2 = e3, a4 = t3 || void 0), u2(i3, o2).end(a4);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(77);
        t2.builder = n.builder, t2.create = n.create, t2.fragment = n.fragment, t2.convert = n.convert, t2.createCB = n.createCB, t2.fragmentCB = n.fragmentCB;
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(191), r(192), r(194), r(64), r(19), r(198), r(199), r(89), r(201), r(65), r(20), r(66), r(22), r(23);
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(91), a3 = r(1), s3 = r(217), u2 = r(2), l = r(3), c2 = r(0), h3 = r(109), p = r(7), f = r(276), d3 = function() {
          function e3(e4) {
            this._domNode = e4;
          }
          return Object.defineProperty(e3.prototype, "node", { get: function() {
            return this._domNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "options", { get: function() {
            return this._options;
          }, enumerable: true, configurable: true }), e3.prototype.set = function(e4) {
            return this._options = a3.applyDefaults(a3.applyDefaults(this._options, e4, true), o.DefaultBuilderOptions), this;
          }, e3.prototype.ele = function(t3, r2, i3) {
            var o2, s4, u3, l2, p2, d4;
            if (a3.isObject(t3))
              return new f.ObjectReader(this._options).parse(this, t3);
            if (t3 !== null && /^\s*</.test(t3))
              return new f.XMLReader(this._options).parse(this, t3);
            if (t3 !== null && /^\s*[\{\[]/.test(t3))
              return new f.JSONReader(this._options).parse(this, t3);
            if (t3 !== null && /^(\s*|(#.*)|(%.*))*---/.test(t3))
              return new f.YAMLReader(this._options).parse(this, t3);
            if ((t3 === null || a3.isString(t3)) && a3.isString(r2))
              l2 = (o2 = n([t3, r2, i3], 3))[0], p2 = o2[1], d4 = o2[2];
            else {
              if (t3 === null)
                throw new Error("Element name cannot be null. " + this._debugInfo());
              l2 = (s4 = n([void 0, t3, a3.isObject(r2) ? r2 : void 0], 3))[0], p2 = s4[1], d4 = s4[2];
            }
            if (d4 && (d4 = a3.getValue(d4)), l2 = (u3 = n(this._extractNamespace(h3.sanitizeInput(l2, this._options.invalidCharReplacement), h3.sanitizeInput(p2, this._options.invalidCharReplacement), true), 2))[0], p2 = u3[1], l2 === void 0) {
              var m3 = n(c2.namespace_extractQName(p2), 1)[0];
              l2 = this.node.lookupNamespaceURI(m3);
            }
            var y3 = l2 != null ? this._doc.createElementNS(l2, p2) : this._doc.createElement(p2);
            this.node.appendChild(y3);
            var v = new e3(y3), _ = this._doc.doctype;
            if (y3 === this._doc.documentElement && _ !== null) {
              var g = this._doc.implementation.createDocumentType(this._doc.documentElement.tagName, _.publicId, _.systemId);
              this._doc.replaceChild(g, _);
            }
            return d4 && !a3.isEmpty(d4) && v.att(d4), v;
          }, e3.prototype.remove = function() {
            var e4 = this.up();
            return e4.node.removeChild(this.node), e4;
          }, e3.prototype.att = function(e4, t3, r2) {
            var i3, o2, s4, u3, f2, d4, m3 = this;
            if (a3.isMap(e4) || a3.isObject(e4))
              return a3.forEachObject(e4, function(e5, t4) {
                return m3.att(e5, t4);
              }, this), this;
            if (e4 != null && (e4 = a3.getValue(e4 + "")), t3 != null && (t3 = a3.getValue(t3 + "")), r2 != null && (r2 = a3.getValue(r2 + "")), e4 !== null && !a3.isString(e4) || !a3.isString(t3) || r2 !== null && !a3.isString(r2)) {
              if (!a3.isString(e4) || t3 != null && !a3.isString(t3))
                throw new Error("Attribute name and value not specified. " + this._debugInfo());
              u3 = (o2 = n([void 0, e4, t3], 3))[0], f2 = o2[1], d4 = o2[2];
            } else
              u3 = (i3 = n([e4, t3, r2], 3))[0], f2 = i3[1], d4 = i3[2];
            if (this._options.keepNullAttributes && d4 == null)
              d4 = "";
            else if (d4 == null)
              return this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be assigned to an element node.");
            var y3 = this.node;
            u3 = (s4 = n(this._extractNamespace(u3, f2, false), 2))[0], f2 = s4[1], f2 = h3.sanitizeInput(f2, this._options.invalidCharReplacement), u3 = h3.sanitizeInput(u3, this._options.invalidCharReplacement), d4 = h3.sanitizeInput(d4, this._options.invalidCharReplacement);
            var v = n(c2.namespace_extractQName(f2), 2), _ = v[0], g = v[1], b2 = n(c2.namespace_extractQName(y3.prefix ? y3.prefix + ":" + y3.localName : y3.localName), 1)[0], x2 = null;
            return _ === "xmlns" ? (u3 = p.namespace.XMLNS, y3.namespaceURI === null && b2 === g && (x2 = d4)) : _ === null && g === "xmlns" && b2 === null && (u3 = p.namespace.XMLNS, x2 = d4), x2 !== null && (this._updateNamespace(x2), y3 = this.node), u3 !== void 0 ? y3.setAttributeNS(u3, f2, d4) : y3.setAttribute(f2, d4), this;
          }, e3.prototype.removeAtt = function(e4, t3) {
            var r2, n2, i3 = this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be removed from an element node.");
            if (e4 = a3.getValue(e4), t3 !== void 0 && (t3 = a3.getValue(t3)), e4 !== null && t3 === void 0)
              n2 = e4;
            else {
              if (e4 !== null && !a3.isString(e4) || t3 === void 0)
                throw new Error("Attribute namespace must be a string. " + this._debugInfo());
              r2 = e4, n2 = t3;
            }
            return a3.isArray(n2) || a3.isSet(n2) ? a3.forEachArray(n2, function(e5) {
              return r2 === void 0 ? i3.removeAtt(e5) : i3.removeAtt(r2, e5);
            }, this) : r2 !== void 0 ? (n2 = h3.sanitizeInput(n2, this._options.invalidCharReplacement), r2 = h3.sanitizeInput(r2, this._options.invalidCharReplacement), this.node.removeAttributeNS(r2, n2)) : (n2 = h3.sanitizeInput(n2, this._options.invalidCharReplacement), this.node.removeAttribute(n2)), this;
          }, e3.prototype.txt = function(e4) {
            if (e4 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e4 = "";
            }
            var t3 = this._doc.createTextNode(h3.sanitizeInput(e4, this._options.invalidCharReplacement));
            return this.node.appendChild(t3), this;
          }, e3.prototype.com = function(e4) {
            if (e4 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e4 = "";
            }
            var t3 = this._doc.createComment(h3.sanitizeInput(e4, this._options.invalidCharReplacement));
            return this.node.appendChild(t3), this;
          }, e3.prototype.dat = function(e4) {
            if (e4 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e4 = "";
            }
            var t3 = this._doc.createCDATASection(h3.sanitizeInput(e4, this._options.invalidCharReplacement));
            return this.node.appendChild(t3), this;
          }, e3.prototype.ins = function(e4, t3) {
            var r2 = this;
            if (t3 === void 0 && (t3 = ""), t3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              t3 = "";
            }
            if (a3.isArray(e4) || a3.isSet(e4))
              a3.forEachArray(e4, function(e5) {
                var t4 = (e5 += "").indexOf(" "), n3 = t4 === -1 ? e5 : e5.substr(0, t4), i3 = t4 === -1 ? "" : e5.substr(t4 + 1);
                r2.ins(n3, i3);
              }, this);
            else if (a3.isMap(e4) || a3.isObject(e4))
              a3.forEachObject(e4, function(e5, t4) {
                return r2.ins(e5, t4);
              }, this);
            else {
              var n2 = this._doc.createProcessingInstruction(h3.sanitizeInput(e4, this._options.invalidCharReplacement), h3.sanitizeInput(t3, this._options.invalidCharReplacement));
              this.node.appendChild(n2);
            }
            return this;
          }, e3.prototype.dec = function(e4) {
            return this._options.version = e4.version || "1.0", this._options.encoding = e4.encoding, this._options.standalone = e4.standalone, this;
          }, e3.prototype.dtd = function(e4) {
            var t3 = h3.sanitizeInput(e4 && e4.name || (this._doc.documentElement ? this._doc.documentElement.tagName : "ROOT"), this._options.invalidCharReplacement), r2 = h3.sanitizeInput(e4 && e4.pubID || "", this._options.invalidCharReplacement), n2 = h3.sanitizeInput(e4 && e4.sysID || "", this._options.invalidCharReplacement);
            if (this._doc.documentElement !== null && t3 !== this._doc.documentElement.tagName)
              throw new Error("DocType name does not match document element name.");
            var i3 = this._doc.implementation.createDocumentType(t3, r2, n2);
            return this._doc.doctype !== null ? this._doc.replaceChild(i3, this._doc.doctype) : this._doc.insertBefore(i3, this._doc.documentElement), this;
          }, e3.prototype.import = function(t3) {
            var r2, o2, a4 = this._domNode, s4 = this._doc, u3 = t3.node;
            if (l.Guard.isDocumentNode(u3)) {
              var h4 = u3.documentElement;
              if (h4 === null)
                throw new Error("Imported document has no document element node. " + this._debugInfo());
              var p2 = s4.importNode(h4, true);
              a4.appendChild(p2);
              var f2 = n(c2.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d4 = a4.lookupNamespaceURI(f2);
              new e3(p2)._updateNamespace(d4);
            } else if (l.Guard.isDocumentFragmentNode(u3))
              try {
                for (var m3 = i2(u3.childNodes), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                  var v = y3.value;
                  p2 = s4.importNode(v, true);
                  if (a4.appendChild(p2), l.Guard.isElementNode(p2)) {
                    f2 = n(c2.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d4 = a4.lookupNamespaceURI(f2);
                    new e3(p2)._updateNamespace(d4);
                  }
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  y3 && !y3.done && (o2 = m3.return) && o2.call(m3);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            else {
              p2 = s4.importNode(u3, true);
              if (a4.appendChild(p2), l.Guard.isElementNode(p2)) {
                f2 = n(c2.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d4 = a4.lookupNamespaceURI(f2);
                new e3(p2)._updateNamespace(d4);
              }
            }
            return this;
          }, e3.prototype.doc = function() {
            if (this._doc._isFragment) {
              for (var t3 = this.node; t3 && t3.nodeType !== u2.NodeType.DocumentFragment; )
                t3 = t3.parentNode;
              if (t3 === null)
                throw new Error("Node has no parent node while searching for document fragment ancestor. " + this._debugInfo());
              return new e3(t3);
            }
            return new e3(this._doc);
          }, e3.prototype.root = function() {
            var t3 = this._doc.documentElement;
            if (!t3)
              throw new Error("Document root element is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.up = function() {
            var t3 = this._domNode.parentNode;
            if (!t3)
              throw new Error("Parent node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.prev = function() {
            var t3 = this._domNode.previousSibling;
            if (!t3)
              throw new Error("Previous sibling node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.next = function() {
            var t3 = this._domNode.nextSibling;
            if (!t3)
              throw new Error("Next sibling node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.first = function() {
            var t3 = this._domNode.firstChild;
            if (!t3)
              throw new Error("First child node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.last = function() {
            var t3 = this._domNode.lastChild;
            if (!t3)
              throw new Error("Last child node is null. " + this._debugInfo());
            return new e3(t3);
          }, e3.prototype.each = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
              t3.call(i3, new e3(o2[0]), o2[1], o2[2]), o2 = a4;
            }
            return this;
          }, e3.prototype.map = function(e4, t3, r2, n2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false);
            var i3 = [];
            return this.each(function(t4, r3, o2) {
              return i3.push(e4.call(n2, t4, r3, o2));
            }, t3, r2), i3;
          }, e3.prototype.reduce = function(e4, t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            var o2 = t3;
            return this.each(function(t4, r3, n3) {
              return o2 = e4.call(i3, o2, t4, r3, n3);
            }, r2, n2), o2;
          }, e3.prototype.find = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = new e3(o2[0]);
              if (t3.call(i3, a4, o2[1], o2[2]))
                return a4;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
          }, e3.prototype.filter = function(e4, t3, r2, n2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false);
            var i3 = [];
            return this.each(function(t4, r3, o2) {
              e4.call(n2, t4, r3, o2) && i3.push(t4);
            }, t3, r2), i3;
          }, e3.prototype.every = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = new e3(o2[0]);
              if (!t3.call(i3, a4, o2[1], o2[2]))
                return false;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return true;
          }, e3.prototype.some = function(t3, r2, n2, i3) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a4 = new e3(o2[0]);
              if (t3.call(i3, a4, o2[1], o2[2]))
                return true;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return false;
          }, e3.prototype.toArray = function(e4, t3) {
            e4 === void 0 && (e4 = false), t3 === void 0 && (t3 = false);
            var r2 = [];
            return this.each(function(e5) {
              return r2.push(e5);
            }, e4, t3), r2;
          }, e3.prototype.toString = function(e4) {
            return (e4 = e4 || {}).format === void 0 && (e4.format = "xml"), this._serialize(e4);
          }, e3.prototype.toObject = function(e4) {
            return (e4 = e4 || {}).format === void 0 && (e4.format = "object"), this._serialize(e4);
          }, e3.prototype.end = function(e4) {
            return (e4 = e4 || {}).format === void 0 && (e4.format = "xml"), this.doc()._serialize(e4);
          }, e3.prototype._getFirstDescendantNode = function(e4, t3, r2) {
            return t3 ? [this._domNode, 0, 0] : r2 ? this._getNextDescendantNode(e4, e4, r2, 0, 0) : [this._domNode.firstChild, 0, 1];
          }, e3.prototype._getNextDescendantNode = function(e4, t3, r2, n2, i3) {
            if (!r2)
              return e4 === t3 ? [t3.firstChild, 0, i3 + 1] : [t3.nextSibling, n2 + 1, i3];
            if (t3.firstChild)
              return [t3.firstChild, 0, i3 + 1];
            if (t3 === e4)
              return [null, -1, -1];
            if (t3.nextSibling)
              return [t3.nextSibling, n2 + 1, i3];
            for (var o2 = t3.parentNode; o2 && o2 !== e4; ) {
              if (o2.nextSibling)
                return [o2.nextSibling, c2.tree_index(o2.nextSibling), i3 - 1];
              o2 = o2.parentNode, i3--;
            }
            return [null, -1, -1];
          }, e3.prototype._serialize = function(e4) {
            if (e4.format === "xml")
              return new s3.XMLWriter(this._options, e4).serialize(this.node);
            if (e4.format === "map")
              return new s3.MapWriter(this._options, e4).serialize(this.node);
            if (e4.format === "object")
              return new s3.ObjectWriter(this._options, e4).serialize(this.node);
            if (e4.format === "json")
              return new s3.JSONWriter(this._options, e4).serialize(this.node);
            if (e4.format === "yaml")
              return new s3.YAMLWriter(this._options, e4).serialize(this.node);
            throw new Error("Invalid writer format: " + e4.format + ". " + this._debugInfo());
          }, e3.prototype._extractNamespace = function(e4, t3, r2) {
            var n2 = t3.indexOf("@");
            if (n2 > 0 && (e4 === void 0 && (e4 = t3.slice(n2 + 1)), t3 = t3.slice(0, n2)), e4 === void 0)
              e4 = r2 ? this._options.defaultNamespace.ele : this._options.defaultNamespace.att;
            else if (e4 !== null && e4[0] === "@") {
              var i3 = e4.slice(1);
              if ((e4 = this._options.namespaceAlias[i3]) === void 0)
                throw new Error("Namespace alias `" + i3 + "` is not defined. " + this._debugInfo());
            }
            return [e4, t3];
          }, e3.prototype._updateNamespace = function(t3) {
            var r2, o2, a4, s4, u3 = this._domNode;
            if (l.Guard.isElementNode(u3) && t3 !== null && u3.namespaceURI !== t3) {
              var h4 = n(c2.namespace_extractQName(u3.prefix ? u3.prefix + ":" + u3.localName : u3.localName), 2), p2 = h4[0], f2 = h4[1], d4 = c2.create_element(this._doc, f2, t3, p2);
              try {
                for (var m3 = i2(u3.attributes), y3 = m3.next(); !y3.done; y3 = m3.next()) {
                  var v = y3.value, _ = v.prefix ? v.prefix + ":" + v.localName : v.localName, g = n(c2.namespace_extractQName(_), 1)[0], b2 = v.namespaceURI;
                  b2 === null && g !== null && (b2 = u3.lookupNamespaceURI(g)), b2 === null ? d4.setAttribute(_, v.value) : d4.setAttributeNS(b2, _, v.value);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  y3 && !y3.done && (o2 = m3.return) && o2.call(m3);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              var x2 = u3.parentNode;
              if (x2 === null)
                throw new Error("Parent node is null." + this._debugInfo());
              x2.replaceChild(d4, u3), this._domNode = d4;
              try {
                for (var w2 = i2(u3.childNodes), E2 = w2.next(); !E2.done; E2 = w2.next()) {
                  var D2 = E2.value.cloneNode(true);
                  if (d4.appendChild(D2), l.Guard.isElementNode(D2)) {
                    var S3 = n(c2.namespace_extractQName(D2.prefix ? D2.prefix + ":" + D2.localName : D2.localName), 1)[0], C = d4.lookupNamespaceURI(S3);
                    new e3(D2)._updateNamespace(C);
                  }
                }
              } catch (e4) {
                a4 = { error: e4 };
              } finally {
                try {
                  E2 && !E2.done && (s4 = w2.return) && s4.call(w2);
                } finally {
                  if (a4)
                    throw a4.error;
                }
              }
            }
          }, Object.defineProperty(e3.prototype, "_doc", { get: function() {
            var e4 = this.node;
            if (l.Guard.isDocumentNode(e4))
              return e4;
            var t3 = e4.ownerDocument;
            if (!t3)
              throw new Error("Owner document is null. " + this._debugInfo());
            return t3;
          }, enumerable: true, configurable: true }), e3.prototype._debugInfo = function(e4) {
            var t3 = this.node, r2 = t3.parentNode;
            e4 = e4 || t3.nodeName;
            var n2 = r2 ? r2.nodeName : "";
            return n2 ? "node: <" + e4 + ">, parent: <" + n2 + ">" : "node: <" + e4 + ">";
          }, Object.defineProperty(e3.prototype, "_options", { get: function() {
            var e4 = this._doc;
            if (e4._xmlBuilderOptions === void 0)
              throw new Error("Builder options is not set.");
            return e4._xmlBuilderOptions;
          }, set: function(e4) {
            this._doc._xmlBuilderOptions = e4;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.XMLBuilderImpl = d3;
      }, function(e2, t2, r) {
        var n = r(11), i2 = r(117), o = n.WeakMap;
        e2.exports = typeof o == "function" && /native code/.test(i2(o));
      }, function(e2, t2, r) {
        var n = r(46), i2 = r(82), o = r(85), a3 = r(18);
        e2.exports = n("Reflect", "ownKeys") || function(e3) {
          var t3 = i2.f(a3(e3)), r2 = o.f;
          return r2 ? t3.concat(r2(e3)) : t3;
        };
      }, function(e2, t2, r) {
        var n = r(16), i2 = r(15), o = r(18), a3 = r(61);
        e2.exports = n ? Object.defineProperties : function(e3, t3) {
          o(e3);
          for (var r2, n2 = a3(t3), s3 = n2.length, u2 = 0; s3 > u2; )
            i2.f(e3, r2 = n2[u2++], t3[r2]);
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(46);
        e2.exports = n("document", "documentElement");
      }, function(e2, t2, r) {
        var n = r(24), i2 = r(82).f, o = {}.toString, a3 = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        e2.exports.f = function(e3) {
          return a3 && o.call(e3) == "[object Window]" ? function(e4) {
            try {
              return i2(e4);
            } catch (e5) {
              return a3.slice();
            }
          }(e3) : i2(n(e3));
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).every, o = r(48), a3 = r(28), s3 = o("every"), u2 = a3("every");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { every: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).filter, o = r(63), a3 = r(28), s3 = o("filter"), u2 = a3("filter");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { filter: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        var n = r(46);
        e2.exports = n("navigator", "userAgent") || "";
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).find, o = r(130), a3 = r(28), s3 = true, u2 = a3("find");
        "find" in [] && Array(1).find(function() {
          s3 = false;
        }), n({ target: "Array", proto: true, forced: s3 || !u2 }, { find: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } }), o("find");
      }, function(e2, t2, r) {
        "use strict";
        var n = r(131).IteratorPrototype, i2 = r(60), o = r(40), a3 = r(62), s3 = r(49), u2 = function() {
          return this;
        };
        e2.exports = function(e3, t3, r2) {
          var l = t3 + " Iterator";
          return e3.prototype = i2(n, { next: o(1, r2) }), a3(e3, l, false, true), s3[l] = u2, e3;
        };
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !n(function() {
          function e3() {
          }
          return e3.prototype.constructor = null, Object.getPrototypeOf(new e3()) !== e3.prototype;
        });
      }, function(e2, t2, r) {
        var n = r(13);
        e2.exports = function(e3) {
          if (!n(e3) && e3 !== null)
            throw TypeError("Can't set " + String(e3) + " as a prototype");
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).map, o = r(63), a3 = r(28), s3 = o("map"), u2 = a3("map");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { map: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(200).left, o = r(48), a3 = r(28), s3 = o("reduce"), u2 = a3("reduce", { 1: 0 });
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { reduce: function(e3) {
          return i2(this, e3, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        var n = r(127), i2 = r(27), o = r(41), a3 = r(26), s3 = function(e3) {
          return function(t3, r2, s4, u2) {
            n(r2);
            var l = i2(t3), c2 = o(l), h3 = a3(l.length), p = e3 ? h3 - 1 : 0, f = e3 ? -1 : 1;
            if (s4 < 2)
              for (; ; ) {
                if (p in c2) {
                  u2 = c2[p], p += f;
                  break;
                }
                if (p += f, e3 ? p < 0 : h3 <= p)
                  throw TypeError("Reduce of empty array with no initial value");
              }
            for (; e3 ? p >= 0 : h3 > p; p += f)
              p in c2 && (u2 = r2(u2, c2[p], p, l));
            return u2;
          };
        };
        e2.exports = { left: s3(false), right: s3(true) };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(36).some, o = r(48), a3 = r(28), s3 = o("some"), u2 = a3("some");
        n({ target: "Array", proto: true, forced: !s3 || !u2 }, { some: function(e3) {
          return i2(this, e3, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(90), i2 = r(135);
        e2.exports = n ? {}.toString : function() {
          return "[object " + i2(this) + "]";
        };
      }, function(e2, t2) {
        e2.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
      }, function(e2, t2, r) {
        var n = r(8);
        e2.exports = !n(function() {
          return Object.isExtensible(Object.preventExtensions({}));
        });
      }, function(e2, t2, r) {
        var n = r(5), i2 = r(49), o = n("iterator"), a3 = Array.prototype;
        e2.exports = function(e3) {
          return e3 !== void 0 && (i2.Array === e3 || a3[o] === e3);
        };
      }, function(e2, t2, r) {
        var n = r(135), i2 = r(49), o = r(5)("iterator");
        e2.exports = function(e3) {
          if (e3 != null)
            return e3[o] || e3["@@iterator"] || i2[n(e3)];
        };
      }, function(e2, t2, r) {
        var n = r(18);
        e2.exports = function(e3, t3, r2, i2) {
          try {
            return i2 ? t3(n(r2)[0], r2[1]) : t3(r2);
          } catch (t4) {
            var o = e3.return;
            throw o !== void 0 && n(o.call(e3)), t4;
          }
        };
      }, function(e2, t2, r) {
        var n = r(5)("iterator"), i2 = false;
        try {
          var o = 0, a3 = { next: function() {
            return { done: !!o++ };
          }, return: function() {
            i2 = true;
          } };
          a3[n] = function() {
            return this;
          }, Array.from(a3, function() {
            throw 2;
          });
        } catch (e3) {
        }
        e2.exports = function(e3, t3) {
          if (!t3 && !i2)
            return false;
          var r2 = false;
          try {
            var o2 = {};
            o2[n] = function() {
              return { next: function() {
                return { done: r2 = true };
              } };
            }, e3(o2);
          } catch (e4) {
          }
          return r2;
        };
      }, function(e2, t2, r) {
        var n = r(13), i2 = r(133);
        e2.exports = function(e3, t3, r2) {
          var o, a3;
          return i2 && typeof (o = t3.constructor) == "function" && o !== r2 && n(a3 = o.prototype) && a3 !== r2.prototype && i2(e3, a3), e3;
        };
      }, function(e2, t2, r) {
        var n = r(25);
        e2.exports = function(e3, t3, r2) {
          for (var i2 in t3)
            n(e3, i2, t3[i2], r2);
          return e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(46), i2 = r(15), o = r(5), a3 = r(16), s3 = o("species");
        e2.exports = function(e3) {
          var t3 = n(e3), r2 = i2.f;
          a3 && t3 && !t3[s3] && r2(t3, s3, { configurable: true, get: function() {
            return this;
          } });
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a3 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s3(0), throw: s3(1), return: s3(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s3(o3) {
            return function(s4) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a3; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a3.label++, { value: o4[1], done: false };
                      case 5:
                        a3.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a3.ops.pop(), a3.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a3.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a3 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a3.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a3.label < i3[1]) {
                          a3.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a3.label < i3[2]) {
                          a3.label = i3[2], a3.ops.push(o4);
                          break;
                        }
                        i3[2] && a3.ops.pop(), a3.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a3);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s4]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function() {
          function e3(e4) {
            e4 === void 0 && (e4 = 1e3), this._items = /* @__PURE__ */ new Set(), this._limit = e4;
          }
          return e3.prototype.add = function(e4) {
            if (this._items.add(e4), this._items.size > this._limit) {
              var t3 = this._items.values().next();
              t3.done || this._items.delete(t3.value);
            }
            return this;
          }, e3.prototype.delete = function(e4) {
            return this._items.delete(e4);
          }, e3.prototype.has = function(e4) {
            return this._items.has(e4);
          }, e3.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e3.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e3.prototype.forEach = function(e4, t3) {
            var r2 = this;
            this._items.forEach(function(n2) {
              return e4.call(t3, n2, n2, r2);
            });
          }, e3.prototype.keys = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.keys())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.values = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.values())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.entries = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.entries())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype[Symbol.iterator] = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items)];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, Object.defineProperty(e3.prototype, Symbol.toStringTag, { get: function() {
            return "FixedSizeSet";
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.FixedSizeSet = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a3 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s3(0), throw: s3(1), return: s3(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s3(o3) {
            return function(s4) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a3; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a3.label++, { value: o4[1], done: false };
                      case 5:
                        a3.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a3.ops.pop(), a3.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a3.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a3 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a3.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a3.label < i3[1]) {
                          a3.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a3.label < i3[2]) {
                          a3.label = i3[2], a3.ops.push(o4);
                          break;
                        }
                        i3[2] && a3.ops.pop(), a3.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a3);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s4]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function() {
          function e3(e4) {
            e4 === void 0 && (e4 = 1e3), this._items = /* @__PURE__ */ new Map(), this._limit = e4;
          }
          return e3.prototype.get = function(e4) {
            return this._items.get(e4);
          }, e3.prototype.set = function(e4, t3) {
            if (this._items.set(e4, t3), this._items.size > this._limit) {
              var r2 = this._items.keys().next();
              r2.done || this._items.delete(r2.value);
            }
          }, e3.prototype.delete = function(e4) {
            return this._items.delete(e4);
          }, e3.prototype.has = function(e4) {
            return this._items.has(e4);
          }, e3.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e3.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e3.prototype.forEach = function(e4, t3) {
            this._items.forEach(function(r2, n2) {
              return e4.call(t3, n2, r2);
            });
          }, e3.prototype.keys = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.keys())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.values = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.values())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype.entries = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items.entries())];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, e3.prototype[Symbol.iterator] = function() {
            return n(this, function(e4) {
              switch (e4.label) {
                case 0:
                  return [5, i2(this._items)];
                case 1:
                  return e4.sent(), [2];
              }
            });
          }, Object.defineProperty(e3.prototype, Symbol.toStringTag, { get: function() {
            return "ObjectCache";
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.ObjectCache = o;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4) {
            e4 === void 0 && (e4 = 1e3), this._items = /* @__PURE__ */ new Map(), this._limit = e4;
          }
          return e3.prototype.check = function(e4, t3) {
            if (this._items.get(e4) === t3)
              return true;
            if (this._items.get(t3) === e4)
              return false;
            var r2 = Math.random() < 0.5;
            if (r2 ? this._items.set(e4, t3) : this._items.set(t3, e4), this._items.size > this._limit) {
              var n2 = this._items.keys().next();
              n2.done || this._items.delete(n2.value);
            }
            return r2;
          }, e3;
        }();
        t2.CompareCache = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4) {
            this._initialized = false, this._value = void 0, this._initFunc = e4;
          }
          return Object.defineProperty(e3.prototype, "value", { get: function() {
            return this._initialized || (this._value = this._initFunc(), this._initialized = true), this._value;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.Lazy = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3(e4) {
            this._pointer = 0, this._chars = Array.from(e4), this._length = this._chars.length;
          }
          return Object.defineProperty(e3.prototype, "eof", { get: function() {
            return this._pointer >= this._length;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "length", { get: function() {
            return this._length;
          }, enumerable: true, configurable: true }), e3.prototype.codePoint = function() {
            if (this._codePoint === void 0)
              if (this.eof)
                this._codePoint = -1;
              else {
                var e4 = this._chars[this._pointer].codePointAt(0);
                this._codePoint = e4 !== void 0 ? e4 : -1;
              }
            return this._codePoint;
          }, e3.prototype.c = function() {
            return this._c === void 0 && (this._c = this.eof ? "" : this._chars[this._pointer]), this._c;
          }, e3.prototype.remaining = function() {
            return this._remaining === void 0 && (this._remaining = this.eof ? "" : this._chars.slice(this._pointer + 1).join("")), this._remaining;
          }, e3.prototype.substring = function() {
            return this._substring === void 0 && (this._substring = this.eof ? "" : this._chars.slice(this._pointer).join("")), this._substring;
          }, Object.defineProperty(e3.prototype, "pointer", { get: function() {
            return this._pointer;
          }, set: function(e4) {
            e4 !== this._pointer && (this._pointer = e4, this._codePoint = void 0, this._c = void 0, this._remaining = void 0, this._substring = void 0);
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.StringWalker = n;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(218);
        t2.MapWriter = n.MapWriter;
        var i2 = r(258);
        t2.XMLWriter = i2.XMLWriter;
        var o = r(67);
        t2.ObjectWriter = o.ObjectWriter;
        var a3 = r(260);
        t2.JSONWriter = a3.JSONWriter;
        var s3 = r(261);
        t2.YAMLWriter = s3.YAMLWriter;
      }, function(e2, t2, r) {
        "use strict";
        r(19), r(219), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(1), a3 = r(67), s3 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._writerOptions = o.applyDefaults(r2, { format: "map", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            var t4 = o.applyDefaults(this._writerOptions, { format: "object", wellFormed: false, verbose: false }), r2 = new a3.ObjectWriter(this._builderOptions, t4).serialize(e4);
            return this._convertObject(r2);
          }, t3.prototype._convertObject = function(e4) {
            if (o.isArray(e4)) {
              for (var t4 = 0; t4 < e4.length; t4++)
                e4[t4] = this._convertObject(e4[t4]);
              return e4;
            }
            if (o.isObject(e4)) {
              var r2 = /* @__PURE__ */ new Map();
              for (var n2 in e4)
                r2.set(n2, this._convertObject(e4[n2]));
              return r2;
            }
            return e4;
          }, t3;
        }(r(50).BaseWriter);
        t2.MapWriter = s3;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(139), i2 = r(143);
        e2.exports = n("Map", function(e3) {
          return function() {
            return e3(this, arguments.length ? arguments[0] : void 0);
          };
        }, i2);
      }, function(e2, t2, r) {
        "use strict";
        var n = r(4), i2 = r(8), o = r(59), a3 = r(13), s3 = r(27), u2 = r(26), l = r(134), c2 = r(128), h3 = r(63), p = r(5), f = r(129), d3 = p("isConcatSpreadable"), m3 = f >= 51 || !i2(function() {
          var e3 = [];
          return e3[d3] = false, e3.concat()[0] !== e3;
        }), y3 = h3("concat"), v = function(e3) {
          if (!a3(e3))
            return false;
          var t3 = e3[d3];
          return t3 !== void 0 ? !!t3 : o(e3);
        };
        n({ target: "Array", proto: true, forced: !m3 || !y3 }, { concat: function(e3) {
          var t3, r2, n2, i3, o2, a4 = s3(this), h4 = c2(a4, 0), p2 = 0;
          for (t3 = -1, n2 = arguments.length; t3 < n2; t3++)
            if (v(o2 = t3 === -1 ? a4 : arguments[t3])) {
              if (p2 + (i3 = u2(o2.length)) > 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              for (r2 = 0; r2 < i3; r2++, p2++)
                r2 in o2 && l(h4, p2, o2[r2]);
            } else {
              if (p2 >= 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              l(h4, p2++, o2);
            }
          return h4.length = p2, h4;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(8);
        function i2(e3, t3) {
          return RegExp(e3, t3);
        }
        t2.UNSUPPORTED_Y = n(function() {
          var e3 = i2("a", "y");
          return e3.lastIndex = 2, e3.exec("abcd") != null;
        }), t2.BROKEN_CARET = n(function() {
          var e3 = i2("^r", "gy");
          return e3.lastIndex = 2, e3.exec("str") != null;
        });
      }, function(e2, t2, r) {
        var n = r(223);
        e2.exports = function(e3) {
          if (n(e3))
            throw TypeError("The method doesn't accept regular expressions");
          return e3;
        };
      }, function(e2, t2, r) {
        var n = r(13), i2 = r(42), o = r(5)("match");
        e2.exports = function(e3) {
          var t3;
          return n(e3) && ((t3 = e3[o]) !== void 0 ? !!t3 : i2(e3) == "RegExp");
        };
      }, function(e2, t2, r) {
        var n = r(5)("match");
        e2.exports = function(e3) {
          var t3 = /./;
          try {
            "/./"[e3](t3);
          } catch (r2) {
            try {
              return t3[n] = false, "/./"[e3](t3);
            } catch (e4) {
            }
          }
          return false;
        };
      }, function(e2, t2, r) {
        "use strict";
        r(68);
        var n = r(25), i2 = r(8), o = r(5), a3 = r(93), s3 = r(21), u2 = o("species"), l = !i2(function() {
          var e3 = /./;
          return e3.exec = function() {
            var e4 = [];
            return e4.groups = { a: "7" }, e4;
          }, "".replace(e3, "$<a>") !== "7";
        }), c2 = "a".replace(/./, "$0") === "$0", h3 = o("replace"), p = !!/./[h3] && /./[h3]("a", "$0") === "", f = !i2(function() {
          var e3 = /(?:)/, t3 = e3.exec;
          e3.exec = function() {
            return t3.apply(this, arguments);
          };
          var r2 = "ab".split(e3);
          return r2.length !== 2 || r2[0] !== "a" || r2[1] !== "b";
        });
        e2.exports = function(e3, t3, r2, h4) {
          var d3 = o(e3), m3 = !i2(function() {
            var t4 = {};
            return t4[d3] = function() {
              return 7;
            }, ""[e3](t4) != 7;
          }), y3 = m3 && !i2(function() {
            var t4 = false, r3 = /a/;
            return e3 === "split" && ((r3 = {}).constructor = {}, r3.constructor[u2] = function() {
              return r3;
            }, r3.flags = "", r3[d3] = /./[d3]), r3.exec = function() {
              return t4 = true, null;
            }, r3[d3](""), !t4;
          });
          if (!m3 || !y3 || e3 === "replace" && (!l || !c2 || p) || e3 === "split" && !f) {
            var v = /./[d3], _ = r2(d3, ""[e3], function(e4, t4, r3, n2, i3) {
              return t4.exec === a3 ? m3 && !i3 ? { done: true, value: v.call(t4, r3, n2) } : { done: true, value: e4.call(r3, t4, n2) } : { done: false };
            }, { REPLACE_KEEPS_$0: c2, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: p }), g = _[0], b2 = _[1];
            n(String.prototype, e3, g), n(RegExp.prototype, d3, t3 == 2 ? function(e4, t4) {
              return b2.call(e4, this, t4);
            } : function(e4) {
              return b2.call(e4, this);
            });
          }
          h4 && s3(RegExp.prototype[d3], "sham", true);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(137).charAt;
        e2.exports = function(e3, t3, r2) {
          return t3 + (r2 ? n(e3, t3).length : 1);
        };
      }, function(e2, t2, r) {
        var n = r(42), i2 = r(93);
        e2.exports = function(e3, t3) {
          var r2 = e3.exec;
          if (typeof r2 == "function") {
            var o = r2.call(e3, t3);
            if (typeof o != "object")
              throw TypeError("RegExp exec method returned something other than an Object or null");
            return o;
          }
          if (n(e3) !== "RegExp")
            throw TypeError("RegExp#exec called on incompatible receiver");
          return i2.call(e3, t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        (function(e3) {
          Object.defineProperty(t2, "__esModule", { value: true });
          var n = r(96);
          t2.forgivingBase64Encode = function(t3) {
            return e3.from(t3).toString("base64");
          }, t2.forgivingBase64Decode = function(t3) {
            return t3 === "" ? "" : ((t3 = t3.replace(n.ASCIIWhiteSpace, "")).length % 4 == 0 && (t3.endsWith("==") ? t3 = t3.substr(0, t3.length - 2) : t3.endsWith("=") && (t3 = t3.substr(0, t3.length - 1))), t3.length % 4 == 1 ? null : /[0-9A-Za-z+/]/.test(t3) ? e3.from(t3, "base64").toString("utf8") : null);
          };
        }).call(this, r(145).Buffer);
      }, function(e2, t2, r) {
        "use strict";
        t2.byteLength = function(e3) {
          var t3 = l(e3), r2 = t3[0], n2 = t3[1];
          return 3 * (r2 + n2) / 4 - n2;
        }, t2.toByteArray = function(e3) {
          var t3, r2, n2 = l(e3), a4 = n2[0], s4 = n2[1], u3 = new o(function(e4, t4, r3) {
            return 3 * (t4 + r3) / 4 - r3;
          }(0, a4, s4)), c3 = 0, h3 = s4 > 0 ? a4 - 4 : a4;
          for (r2 = 0; r2 < h3; r2 += 4)
            t3 = i2[e3.charCodeAt(r2)] << 18 | i2[e3.charCodeAt(r2 + 1)] << 12 | i2[e3.charCodeAt(r2 + 2)] << 6 | i2[e3.charCodeAt(r2 + 3)], u3[c3++] = t3 >> 16 & 255, u3[c3++] = t3 >> 8 & 255, u3[c3++] = 255 & t3;
          s4 === 2 && (t3 = i2[e3.charCodeAt(r2)] << 2 | i2[e3.charCodeAt(r2 + 1)] >> 4, u3[c3++] = 255 & t3);
          s4 === 1 && (t3 = i2[e3.charCodeAt(r2)] << 10 | i2[e3.charCodeAt(r2 + 1)] << 4 | i2[e3.charCodeAt(r2 + 2)] >> 2, u3[c3++] = t3 >> 8 & 255, u3[c3++] = 255 & t3);
          return u3;
        }, t2.fromByteArray = function(e3) {
          for (var t3, r2 = e3.length, i3 = r2 % 3, o2 = [], a4 = 0, s4 = r2 - i3; a4 < s4; a4 += 16383)
            o2.push(c2(e3, a4, a4 + 16383 > s4 ? s4 : a4 + 16383));
          i3 === 1 ? (t3 = e3[r2 - 1], o2.push(n[t3 >> 2] + n[t3 << 4 & 63] + "==")) : i3 === 2 && (t3 = (e3[r2 - 2] << 8) + e3[r2 - 1], o2.push(n[t3 >> 10] + n[t3 >> 4 & 63] + n[t3 << 2 & 63] + "="));
          return o2.join("");
        };
        for (var n = [], i2 = [], o = typeof Uint8Array != "undefined" ? Uint8Array : Array, a3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s3 = 0, u2 = a3.length; s3 < u2; ++s3)
          n[s3] = a3[s3], i2[a3.charCodeAt(s3)] = s3;
        function l(e3) {
          var t3 = e3.length;
          if (t3 % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
          var r2 = e3.indexOf("=");
          return r2 === -1 && (r2 = t3), [r2, r2 === t3 ? 0 : 4 - r2 % 4];
        }
        function c2(e3, t3, r2) {
          for (var i3, o2, a4 = [], s4 = t3; s4 < r2; s4 += 3)
            i3 = (e3[s4] << 16 & 16711680) + (e3[s4 + 1] << 8 & 65280) + (255 & e3[s4 + 2]), a4.push(n[(o2 = i3) >> 18 & 63] + n[o2 >> 12 & 63] + n[o2 >> 6 & 63] + n[63 & o2]);
          return a4.join("");
        }
        i2["-".charCodeAt(0)] = 62, i2["_".charCodeAt(0)] = 63;
      }, function(e2, t2) {
        t2.read = function(e3, t3, r, n, i2) {
          var o, a3, s3 = 8 * i2 - n - 1, u2 = (1 << s3) - 1, l = u2 >> 1, c2 = -7, h3 = r ? i2 - 1 : 0, p = r ? -1 : 1, f = e3[t3 + h3];
          for (h3 += p, o = f & (1 << -c2) - 1, f >>= -c2, c2 += s3; c2 > 0; o = 256 * o + e3[t3 + h3], h3 += p, c2 -= 8)
            ;
          for (a3 = o & (1 << -c2) - 1, o >>= -c2, c2 += n; c2 > 0; a3 = 256 * a3 + e3[t3 + h3], h3 += p, c2 -= 8)
            ;
          if (o === 0)
            o = 1 - l;
          else {
            if (o === u2)
              return a3 ? NaN : 1 / 0 * (f ? -1 : 1);
            a3 += Math.pow(2, n), o -= l;
          }
          return (f ? -1 : 1) * a3 * Math.pow(2, o - n);
        }, t2.write = function(e3, t3, r, n, i2, o) {
          var a3, s3, u2, l = 8 * o - i2 - 1, c2 = (1 << l) - 1, h3 = c2 >> 1, p = i2 === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = n ? 0 : o - 1, d3 = n ? 1 : -1, m3 = t3 < 0 || t3 === 0 && 1 / t3 < 0 ? 1 : 0;
          for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (s3 = isNaN(t3) ? 1 : 0, a3 = c2) : (a3 = Math.floor(Math.log(t3) / Math.LN2), t3 * (u2 = Math.pow(2, -a3)) < 1 && (a3--, u2 *= 2), (t3 += a3 + h3 >= 1 ? p / u2 : p * Math.pow(2, 1 - h3)) * u2 >= 2 && (a3++, u2 /= 2), a3 + h3 >= c2 ? (s3 = 0, a3 = c2) : a3 + h3 >= 1 ? (s3 = (t3 * u2 - 1) * Math.pow(2, i2), a3 += h3) : (s3 = t3 * Math.pow(2, h3 - 1) * Math.pow(2, i2), a3 = 0)); i2 >= 8; e3[r + f] = 255 & s3, f += d3, s3 /= 256, i2 -= 8)
            ;
          for (a3 = a3 << i2 | s3, l += i2; l > 0; e3[r + f] = 255 & a3, f += d3, a3 /= 256, l -= 8)
            ;
          e3[r + f - d3] |= 128 * m3;
        };
      }, function(e2, t2) {
        var r = {}.toString;
        e2.exports = Array.isArray || function(e3) {
          return r.call(e3) == "[object Array]";
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(1);
        function o(e3) {
          var t3, r2;
          if (e3 === null || i2.isString(e3) || i2.isNumber(e3))
            return e3;
          if (i2.isArray(e3)) {
            var a3 = new Array();
            try {
              for (var s3 = n(e3), u2 = s3.next(); !u2.done; u2 = s3.next()) {
                var l = u2.value;
                a3.push(o(l));
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (r2 = s3.return) && r2.call(s3);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return a3;
          }
          if (i2.isObject(e3)) {
            a3 = /* @__PURE__ */ new Map();
            for (var c2 in e3)
              if (e3.hasOwnProperty(c2)) {
                var h3 = e3[c2];
                a3.set(c2, o(h3));
              }
            return a3;
          }
          return e3;
        }
        t2.parseJSONFromBytes = function(e3) {
          var t3 = i2.utf8Decode(e3);
          return JSON.parse.call(void 0, t3);
        }, t2.serializeJSONToBytes = function(e3) {
          var t3 = JSON.stringify.call(void 0, e3);
          return i2.utf8Encode(t3);
        }, t2.parseJSONIntoInfraValues = function(e3) {
          return o(JSON.parse.call(void 0, e3));
        }, t2.convertAJSONDerivedJavaScriptValueToAnInfraValue = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a4 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s4(0), throw: s4(1), return: s4(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s4(o3) {
            return function(s5) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a4; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a4.label++, { value: o4[1], done: false };
                      case 5:
                        a4.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a4.ops.pop(), a4.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a4.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a4 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a4.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a4.label < i3[1]) {
                          a4.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a4.label < i3[2]) {
                          a4.label = i3[2], a4.ops.push(o4);
                          break;
                        }
                        i3[2] && a4.ops.pop(), a4.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a4);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s5]);
            };
          }
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        }, a3 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(1);
        t2.append = function(e3, t3) {
          e3.push(t3);
        }, t2.extend = function(e3, t3) {
          e3.push.apply(e3, o(t3));
        }, t2.prepend = function(e3, t3) {
          e3.unshift(t3);
        }, t2.replace = function(e3, t3, r2) {
          var n2, i3, o2 = 0;
          try {
            for (var u2 = a3(e3), l = u2.next(); !l.done; l = u2.next()) {
              var c2 = l.value;
              if (s3.isFunction(t3))
                t3.call(null, c2) && (e3[o2] = r2);
              else if (c2 === t3)
                return void (e3[o2] = r2);
              o2++;
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (i3 = u2.return) && i3.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
        }, t2.insert = function(e3, t3, r2) {
          e3.splice(r2, 0, t3);
        }, t2.remove = function(e3, t3) {
          for (var r2 = e3.length; r2--; ) {
            var n2 = e3[r2];
            if (s3.isFunction(t3))
              t3.call(null, n2) && e3.splice(r2, 1);
            else if (n2 === t3)
              return void e3.splice(r2, 1);
          }
        }, t2.empty = function(e3) {
          e3.length = 0;
        }, t2.contains = function(e3, t3) {
          var r2, n2;
          try {
            for (var i3 = a3(e3), o2 = i3.next(); !o2.done; o2 = i3.next()) {
              var u2 = o2.value;
              if (s3.isFunction(t3)) {
                if (t3.call(null, u2))
                  return true;
              } else if (u2 === t3)
                return true;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              o2 && !o2.done && (n2 = i3.return) && n2.call(i3);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t2.size = function(e3, t3) {
          var r2, n2;
          if (t3 === void 0)
            return e3.length;
          var i3 = 0;
          try {
            for (var o2 = a3(e3), s4 = o2.next(); !s4.done; s4 = o2.next()) {
              var u2 = s4.value;
              t3.call(null, u2) && i3++;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return i3;
        }, t2.isEmpty = function(e3) {
          return e3.length === 0;
        }, t2.forEach = function(e3, t3) {
          var r2, i3, o2, s4, u2, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t3 !== void 0 ? [3, 2] : [5, a3(e3)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = a3(e3), i3 = r2.next(), n2.label = 3;
              case 3:
                return i3.done ? [3, 6] : (o2 = i3.value, t3.call(null, o2) ? [4, o2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return i3 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s4 = n2.sent(), u2 = { error: s4 }, [3, 9];
              case 8:
                try {
                  i3 && !i3.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u2)
                    throw u2.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t2.clone = function(e3) {
          return new (Array.bind.apply(Array, o([void 0], e3)))();
        }, t2.sortInAscendingOrder = function(e3, t3) {
          return e3.sort(function(e4, r2) {
            return t3.call(null, e4, r2) ? -1 : 1;
          });
        }, t2.sortInDescendingOrder = function(e3, t3) {
          return e3.sort(function(e4, r2) {
            return t3.call(null, e4, r2) ? 1 : -1;
          });
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a4 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s4(0), throw: s4(1), return: s4(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s4(o3) {
            return function(s5) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a4; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a4.label++, { value: o4[1], done: false };
                      case 5:
                        a4.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a4.ops.pop(), a4.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a4.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a4 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a4.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a4.label < i3[1]) {
                          a4.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a4.label < i3[2]) {
                          a4.label = i3[2], a4.ops.push(o4);
                          break;
                        }
                        i3[2] && a4.ops.pop(), a4.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a4);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s5]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, a3 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(o(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(1);
        t2.get = function(e3, t3) {
          return e3.get(t3);
        }, t2.set = function(e3, t3, r2) {
          e3.set(t3, r2);
        }, t2.remove = function(e3, t3) {
          var r2, n2, o2, a4;
          if (s3.isFunction(t3)) {
            var u2 = [];
            try {
              for (var l = i2(e3), c2 = l.next(); !c2.done; c2 = l.next()) {
                var h3 = c2.value;
                t3.call(null, h3) && u2.push(h3[0]);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i2(u2), f = p.next(); !f.done; f = p.next()) {
                var d3 = f.value;
                e3.delete(d3);
              }
            } catch (e4) {
              o2 = { error: e4 };
            } finally {
              try {
                f && !f.done && (a4 = p.return) && a4.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e3.delete(t3);
        }, t2.contains = function(e3, t3) {
          var r2, n2;
          if (s3.isFunction(t3)) {
            try {
              for (var o2 = i2(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var u2 = a4.value;
                if (t3.call(null, u2))
                  return true;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                a4 && !a4.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return false;
          }
          return e3.has(t3);
        }, t2.keys = function(e3) {
          return new Set(e3.keys());
        }, t2.values = function(e3) {
          return a3(e3.values());
        }, t2.size = function(e3, t3) {
          var r2, n2;
          if (t3 === void 0)
            return e3.size;
          var o2 = 0;
          try {
            for (var a4 = i2(e3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              var u2 = s4.value;
              t3.call(null, u2) && o2++;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = a4.return) && n2.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.isEmpty = function(e3) {
          return e3.size === 0;
        }, t2.forEach = function(e3, t3) {
          var r2, o2, a4, s4, u2, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t3 !== void 0 ? [3, 2] : [5, i2(e3)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i2(e3), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a4 = o2.value, t3.call(null, a4) ? [4, a4] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s4 = n2.sent(), u2 = { error: s4 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u2)
                    throw u2.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t2.clone = function(e3) {
          return new Map(e3);
        }, t2.sortInAscendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? -1 : 1;
          }), new Map(r2);
        }, t2.sortInDescendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? 1 : -1;
          }), new Map(r2);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.HTML = "http://www.w3.org/1999/xhtml", t2.XML = "http://www.w3.org/XML/1998/namespace", t2.XMLNS = "http://www.w3.org/2000/xmlns/", t2.MathML = "http://www.w3.org/1998/Math/MathML", t2.SVG = "http://www.w3.org/2000/svg", t2.XLink = "http://www.w3.org/1999/xlink";
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.enqueue = function(e3, t3) {
          e3.push(t3);
        }, t2.dequeue = function(e3) {
          return e3.shift() || null;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__generator || function(e3, t3) {
          var r2, n2, i3, o2, a4 = { label: 0, sent: function() {
            if (1 & i3[0])
              throw i3[1];
            return i3[1];
          }, trys: [], ops: [] };
          return o2 = { next: s4(0), throw: s4(1), return: s4(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s4(o3) {
            return function(s5) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a4; )
                  try {
                    if (r2 = 1, n2 && (i3 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i3 = n2.return) && i3.call(n2), 0) : n2.next) && !(i3 = i3.call(n2, o4[1])).done)
                      return i3;
                    switch (n2 = 0, i3 && (o4 = [2 & o4[0], i3.value]), o4[0]) {
                      case 0:
                      case 1:
                        i3 = o4;
                        break;
                      case 4:
                        return a4.label++, { value: o4[1], done: false };
                      case 5:
                        a4.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a4.ops.pop(), a4.trys.pop();
                        continue;
                      default:
                        if (!(i3 = a4.trys, (i3 = i3.length > 0 && i3[i3.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a4 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i3 || o4[1] > i3[0] && o4[1] < i3[3])) {
                          a4.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a4.label < i3[1]) {
                          a4.label = i3[1], i3 = o4;
                          break;
                        }
                        if (i3 && a4.label < i3[2]) {
                          a4.label = i3[2], a4.ops.push(o4);
                          break;
                        }
                        i3[2] && a4.ops.pop(), a4.trys.pop();
                        continue;
                    }
                    o4 = t3.call(e3, a4);
                  } catch (e4) {
                    o4 = [6, e4], n2 = 0;
                  } finally {
                    r2 = i3 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s5]);
            };
          }
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, a3 = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(o(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(1);
        function u2(e3, t3) {
          var r2, n2;
          try {
            for (var o2 = i2(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value;
              if (!t3.has(s4))
                return false;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return true;
        }
        t2.append = function(e3, t3) {
          e3.add(t3);
        }, t2.extend = function(e3, t3) {
          t3.forEach(e3.add, e3);
        }, t2.prepend = function(e3, t3) {
          var r2 = new Set(e3);
          e3.clear(), e3.add(t3), r2.forEach(e3.add, e3);
        }, t2.replace = function(e3, t3, r2) {
          var n2, o2, a4 = /* @__PURE__ */ new Set();
          try {
            for (var u3 = i2(e3), l = u3.next(); !l.done; l = u3.next()) {
              var c2 = l.value;
              s3.isFunction(t3) ? t3.call(null, c2) ? a4.add(r2) : a4.add(c2) : c2 === t3 ? a4.add(r2) : a4.add(c2);
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (o2 = u3.return) && o2.call(u3);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e3.clear(), a4.forEach(e3.add, e3);
        }, t2.insert = function(e3, t3, r2) {
          var n2, o2, a4 = /* @__PURE__ */ new Set(), s4 = 0;
          try {
            for (var u3 = i2(e3), l = u3.next(); !l.done; l = u3.next()) {
              var c2 = l.value;
              s4 === r2 && a4.add(t3), a4.add(c2), s4++;
            }
          } catch (e4) {
            n2 = { error: e4 };
          } finally {
            try {
              l && !l.done && (o2 = u3.return) && o2.call(u3);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e3.clear(), a4.forEach(e3.add, e3);
        }, t2.remove = function(e3, t3) {
          var r2, n2, o2, a4;
          if (s3.isFunction(t3)) {
            var u3 = [];
            try {
              for (var l = i2(e3), c2 = l.next(); !c2.done; c2 = l.next()) {
                var h3 = c2.value;
                t3.call(null, h3) && u3.push(h3);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i2(u3), f = p.next(); !f.done; f = p.next()) {
                var d3 = f.value;
                e3.delete(d3);
              }
            } catch (e4) {
              o2 = { error: e4 };
            } finally {
              try {
                f && !f.done && (a4 = p.return) && a4.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e3.delete(t3);
        }, t2.empty = function(e3) {
          e3.clear();
        }, t2.contains = function(e3, t3) {
          var r2, n2;
          if (!s3.isFunction(t3))
            return e3.has(t3);
          try {
            for (var o2 = i2(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var u3 = a4.value;
              if (t3.call(null, u3))
                return true;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t2.size = function(e3, t3) {
          var r2, n2;
          if (t3 === void 0)
            return e3.size;
          var o2 = 0;
          try {
            for (var a4 = i2(e3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              var u3 = s4.value;
              t3.call(null, u3) && o2++;
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = a4.return) && n2.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.isEmpty = function(e3) {
          return e3.size === 0;
        }, t2.forEach = function(e3, t3) {
          var r2, o2, a4, s4, u3, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t3 !== void 0 ? [3, 2] : [5, i2(e3)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i2(e3), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a4 = o2.value, t3.call(null, a4) ? [4, a4] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s4 = n2.sent(), u3 = { error: s4 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u3)
                    throw u3.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t2.clone = function(e3) {
          return new Set(e3);
        }, t2.sortInAscendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? -1 : 1;
          }), new Set(r2);
        }, t2.sortInDescendingOrder = function(e3, t3) {
          var r2 = new (Array.bind.apply(Array, a3([void 0], e3)))();
          return r2.sort(function(e4, r3) {
            return t3.call(null, e4, r3) ? 1 : -1;
          }), new Set(r2);
        }, t2.isSubsetOf = u2, t2.isSupersetOf = function(e3, t3) {
          return u2(t3, e3);
        }, t2.intersection = function(e3, t3) {
          var r2, n2, o2 = /* @__PURE__ */ new Set();
          try {
            for (var a4 = i2(e3), s4 = a4.next(); !s4.done; s4 = a4.next()) {
              var u3 = s4.value;
              t3.has(u3) && o2.add(u3);
            }
          } catch (e4) {
            r2 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (n2 = a4.return) && n2.call(a4);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t2.union = function(e3, t3) {
          var r2 = new Set(e3);
          return t3.forEach(r2.add, r2), r2;
        }, t2.range = function(e3, t3) {
          for (var r2 = /* @__PURE__ */ new Set(), n2 = e3; n2 <= t3; n2++)
            r2.add(n2);
          return r2;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.push = function(e3, t3) {
          e3.push(t3);
        }, t2.pop = function(e3) {
          return e3.pop() || null;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(96), o = r(147), a3 = r(146), s3 = r(1);
        function u2(e3, t3) {
          for (var r2 = 0; ; ) {
            var n2 = r2 < e3.length ? e3.charCodeAt(r2) : null, i3 = r2 < t3.length ? t3.charCodeAt(r2) : null;
            if (n2 === null)
              return true;
            if (n2 !== i3)
              return false;
            r2++;
          }
        }
        function l(e3) {
          var t3, r2, i3 = Array.from(e3), o2 = new Uint8Array(i3.length), a4 = 0;
          try {
            for (var s4 = n(e3), u3 = s4.next(); !u3.done; u3 = s4.next()) {
              var l2 = u3.value.codePointAt(0);
              console.assert(l2 !== void 0 && l2 <= 255, "isomorphicEncode requires string bytes to be less than or equal to 0x00FF."), l2 !== void 0 && l2 <= 255 && (o2[a4++] = l2);
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              u3 && !u3.done && (r2 = s4.return) && r2.call(s4);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return o2;
        }
        function c2(e3) {
          return /^[\u0000-\u007F]*$/.test(e3);
        }
        function h3(e3) {
          var t3, r2, i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value, u3 = s4.codePointAt(0);
              i3 += u3 !== void 0 && u3 >= 65 && u3 <= 90 ? String.fromCodePoint(u3 + 32) : s4;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }
        function p(e3) {
          return e3.replace(/^[\t\n\f\r ]+/, "").replace(/[\t\n\f\r ]+$/, "");
        }
        function f(e3, t3, r2) {
          if (!s3.isArray(t3))
            return f(e3, Array.from(t3), r2);
          for (var n2 = ""; r2.position < t3.length && e3.call(null, t3[r2.position]); )
            n2 += t3[r2.position], r2.position++;
          return n2;
        }
        function d3(e3, t3) {
          f(function(e4) {
            return i2.ASCIIWhiteSpace.test(e4);
          }, e3, t3);
        }
        t2.isCodeUnitPrefix = u2, t2.isCodeUnitLessThan = function(e3, t3) {
          if (u2(t3, e3))
            return false;
          if (u2(e3, t3))
            return true;
          for (var r2 = 0; r2 < Math.min(e3.length, t3.length); r2++) {
            var n2 = e3.charCodeAt(r2), i3 = t3.charCodeAt(r2);
            if (n2 !== i3)
              return n2 < i3;
          }
          return false;
        }, t2.isomorphicEncode = l, t2.isASCIIString = c2, t2.asciiLowercase = h3, t2.asciiUppercase = function(e3) {
          var t3, r2, i3 = "";
          try {
            for (var o2 = n(e3), a4 = o2.next(); !a4.done; a4 = o2.next()) {
              var s4 = a4.value, u3 = s4.codePointAt(0);
              i3 += u3 !== void 0 && u3 >= 97 && u3 <= 122 ? String.fromCodePoint(u3 - 32) : s4;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              a4 && !a4.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return i3;
        }, t2.asciiCaseInsensitiveMatch = function(e3, t3) {
          return h3(e3) === h3(t3);
        }, t2.asciiEncode = function(e3) {
          return console.assert(c2(e3), "asciiEncode requires an ASCII string."), l(e3);
        }, t2.asciiDecode = function(e3) {
          var t3, r2;
          try {
            for (var i3 = n(e3), s4 = i3.next(); !s4.done; s4 = i3.next()) {
              var u3 = s4.value;
              console.assert(a3.isASCIIByte(u3), "asciiDecode requires an ASCII byte sequence.");
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              s4 && !s4.done && (r2 = i3.return) && r2.call(i3);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          return o.isomorphicDecode(e3);
        }, t2.stripNewlines = function(e3) {
          return e3.replace(/[\n\r]/g, "");
        }, t2.normalizeNewlines = function(e3) {
          return e3.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        }, t2.stripLeadingAndTrailingASCIIWhitespace = p, t2.stripAndCollapseASCIIWhitespace = function(e3) {
          return p(e3.replace(/[\t\n\f\r ]{2,}/g, " "));
        }, t2.collectASequenceOfCodePoints = f, t2.skipASCIIWhitespace = d3, t2.strictlySplit = function e3(t3, r2) {
          if (!s3.isArray(t3))
            return e3(Array.from(t3), r2);
          var n2 = { position: 0 }, i3 = [], o2 = f(function(e4) {
            return r2 !== e4;
          }, t3, n2);
          for (i3.push(o2); n2.position < t3.length; )
            console.assert(t3[n2.position] === r2, "strictlySplit found no delimiter in input string."), n2.position++, o2 = f(function(e4) {
              return r2 !== e4;
            }, t3, n2), i3.push(o2);
          return i3;
        }, t2.splitAStringOnASCIIWhitespace = function e3(t3) {
          if (!s3.isArray(t3))
            return e3(Array.from(t3));
          var r2 = { position: 0 }, n2 = [];
          for (d3(t3, r2); r2.position < t3.length; ) {
            var o2 = f(function(e4) {
              return !i2.ASCIIWhiteSpace.test(e4);
            }, t3, r2);
            n2.push(o2), d3(t3, r2);
          }
          return n2;
        }, t2.splitAStringOnCommas = function e3(t3) {
          if (!s3.isArray(t3))
            return e3(Array.from(t3));
          for (var r2 = { position: 0 }, n2 = []; r2.position < t3.length; ) {
            var i3 = f(function(e4) {
              return e4 !== ",";
            }, t3, r2);
            n2.push(p(i3)), r2.position < t3.length && (console.assert(t3[r2.position] === ",", "splitAStringOnCommas found no delimiter in input string."), r2.position++);
          }
          return n2;
        }, t2.concatenate = function(e3, t3) {
          return t3 === void 0 && (t3 = ""), e3.length === 0 ? "" : e3.join(t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(97);
        t2.abort_add = function(e3, t3) {
          t3._abortedFlag || t3._abortAlgorithms.add(e3);
        }, t2.abort_remove = function(e3, t3) {
          t3._abortAlgorithms.delete(e3);
        }, t2.abort_signalAbort = function(e3) {
          var t3, r2;
          if (!e3._abortedFlag) {
            e3._abortedFlag = true;
            try {
              for (var o = n(e3._abortAlgorithms), a3 = o.next(); !a3.done; a3 = o.next()) {
                a3.value.call(e3);
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                a3 && !a3.done && (r2 = o.return) && r2.call(o);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            e3._abortAlgorithms.clear(), i2.event_fireAnEvent("abort", e3);
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(150), i2 = function() {
          function e3() {
          }
          return e3.asNode = function(e4) {
            if (n.Guard.isNode(e4))
              return e4;
            throw new Error("Invalid object. Node expected.");
          }, e3;
        }();
        t2.Cast = i2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "size", { get: function() {
            return 0;
          }, enumerable: true, configurable: true }), e3.prototype.add = function(e4) {
            throw new Error("Cannot add to an empty set.");
          }, e3.prototype.clear = function() {
          }, e3.prototype.delete = function(e4) {
            return false;
          }, e3.prototype.forEach = function(e4, t3) {
          }, e3.prototype.has = function(e4) {
            return false;
          }, e3.prototype[Symbol.iterator] = function() {
            return new i2();
          }, e3.prototype.entries = function() {
            return new i2();
          }, e3.prototype.keys = function() {
            return new i2();
          }, e3.prototype.values = function() {
            return new i2();
          }, Object.defineProperty(e3.prototype, Symbol.toStringTag, { get: function() {
            return "EmptySet";
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.EmptySet = n;
        var i2 = function() {
          function e3() {
          }
          return e3.prototype[Symbol.iterator] = function() {
            return this;
          }, e3.prototype.next = function() {
            return { done: true, value: null };
          }, e3;
        }();
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), function(e3) {
          e3[e3.SchemeStart = 0] = "SchemeStart", e3[e3.Scheme = 1] = "Scheme", e3[e3.NoScheme = 2] = "NoScheme", e3[e3.SpecialRelativeOrAuthority = 3] = "SpecialRelativeOrAuthority", e3[e3.PathOrAuthority = 4] = "PathOrAuthority", e3[e3.Relative = 5] = "Relative", e3[e3.RelativeSlash = 6] = "RelativeSlash", e3[e3.SpecialAuthoritySlashes = 7] = "SpecialAuthoritySlashes", e3[e3.SpecialAuthorityIgnoreSlashes = 8] = "SpecialAuthorityIgnoreSlashes", e3[e3.Authority = 9] = "Authority", e3[e3.Host = 10] = "Host", e3[e3.Hostname = 11] = "Hostname", e3[e3.Port = 12] = "Port", e3[e3.File = 13] = "File", e3[e3.FileSlash = 14] = "FileSlash", e3[e3.FileHost = 15] = "FileHost", e3[e3.PathStart = 16] = "PathStart", e3[e3.Path = 17] = "Path", e3[e3.CannotBeABaseURLPath = 18] = "CannotBeABaseURLPath", e3[e3.Query = 19] = "Query", e3[e3.Fragment = 20] = "Fragment";
        }(t2.ParserState || (t2.ParserState = {})), t2.OpaqueOrigin = ["", "", null, null];
      }, function(e2, t2, r) {
        "use strict";
        var n = r(245), i2 = r(247);
        function o() {
          this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
        }
        t2.parse = g, t2.resolve = function(e3, t3) {
          return g(e3, false, true).resolve(t3);
        }, t2.resolveObject = function(e3, t3) {
          return e3 ? g(e3, false, true).resolveObject(t3) : t3;
        }, t2.format = function(e3) {
          i2.isString(e3) && (e3 = g(e3));
          return e3 instanceof o ? e3.format() : o.prototype.format.call(e3);
        }, t2.Url = o;
        var a3 = /^([a-z0-9.+-]+:)/i, s3 = /:[0-9]*$/, u2 = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]), c2 = ["'"].concat(l), h3 = ["%", "/", "?", ";", "#"].concat(c2), p = ["/", "?", "#"], f = /^[+a-z0-9A-Z_-]{0,63}$/, d3 = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, m3 = { javascript: true, "javascript:": true }, y3 = { javascript: true, "javascript:": true }, v = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, _ = r(248);
        function g(e3, t3, r2) {
          if (e3 && i2.isObject(e3) && e3 instanceof o)
            return e3;
          var n2 = new o();
          return n2.parse(e3, t3, r2), n2;
        }
        o.prototype.parse = function(e3, t3, r2) {
          if (!i2.isString(e3))
            throw new TypeError("Parameter 'url' must be a string, not " + typeof e3);
          var o2 = e3.indexOf("?"), s4 = o2 !== -1 && o2 < e3.indexOf("#") ? "?" : "#", l2 = e3.split(s4);
          l2[0] = l2[0].replace(/\\/g, "/");
          var g2 = e3 = l2.join(s4);
          if (g2 = g2.trim(), !r2 && e3.split("#").length === 1) {
            var b2 = u2.exec(g2);
            if (b2)
              return this.path = g2, this.href = g2, this.pathname = b2[1], b2[2] ? (this.search = b2[2], this.query = t3 ? _.parse(this.search.substr(1)) : this.search.substr(1)) : t3 && (this.search = "", this.query = {}), this;
          }
          var x2 = a3.exec(g2);
          if (x2) {
            var w2 = (x2 = x2[0]).toLowerCase();
            this.protocol = w2, g2 = g2.substr(x2.length);
          }
          if (r2 || x2 || g2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var E2 = g2.substr(0, 2) === "//";
            !E2 || x2 && y3[x2] || (g2 = g2.substr(2), this.slashes = true);
          }
          if (!y3[x2] && (E2 || x2 && !v[x2])) {
            for (var D2, S3, C = -1, A = 0; A < p.length; A++) {
              (N = g2.indexOf(p[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            (S3 = C === -1 ? g2.lastIndexOf("@") : g2.lastIndexOf("@", C)) !== -1 && (D2 = g2.slice(0, S3), g2 = g2.slice(S3 + 1), this.auth = decodeURIComponent(D2)), C = -1;
            for (A = 0; A < h3.length; A++) {
              var N;
              (N = g2.indexOf(h3[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            C === -1 && (C = g2.length), this.host = g2.slice(0, C), g2 = g2.slice(C), this.parseHost(), this.hostname = this.hostname || "";
            var T2 = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
            if (!T2)
              for (var O2 = this.hostname.split(/\./), F = (A = 0, O2.length); A < F; A++) {
                var k2 = O2[A];
                if (k2 && !k2.match(f)) {
                  for (var P = "", I2 = 0, L2 = k2.length; I2 < L2; I2++)
                    k2.charCodeAt(I2) > 127 ? P += "x" : P += k2[I2];
                  if (!P.match(f)) {
                    var M3 = O2.slice(0, A), B2 = O2.slice(A + 1), j = k2.match(d3);
                    j && (M3.push(j[1]), B2.unshift(j[2])), B2.length && (g2 = "/" + B2.join(".") + g2), this.hostname = M3.join(".");
                    break;
                  }
                }
              }
            this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T2 || (this.hostname = n.toASCII(this.hostname));
            var R2 = this.port ? ":" + this.port : "", z2 = this.hostname || "";
            this.host = z2 + R2, this.href += this.host, T2 && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), g2[0] !== "/" && (g2 = "/" + g2));
          }
          if (!m3[w2])
            for (A = 0, F = c2.length; A < F; A++) {
              var U = c2[A];
              if (g2.indexOf(U) !== -1) {
                var G2 = encodeURIComponent(U);
                G2 === U && (G2 = escape(U)), g2 = g2.split(U).join(G2);
              }
            }
          var X2 = g2.indexOf("#");
          X2 !== -1 && (this.hash = g2.substr(X2), g2 = g2.slice(0, X2));
          var q2 = g2.indexOf("?");
          if (q2 !== -1 ? (this.search = g2.substr(q2), this.query = g2.substr(q2 + 1), t3 && (this.query = _.parse(this.query)), g2 = g2.slice(0, q2)) : t3 && (this.search = "", this.query = {}), g2 && (this.pathname = g2), v[w2] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
            R2 = this.pathname || "";
            var W = this.search || "";
            this.path = R2 + W;
          }
          return this.href = this.format(), this;
        }, o.prototype.format = function() {
          var e3 = this.auth || "";
          e3 && (e3 = (e3 = encodeURIComponent(e3)).replace(/%3A/i, ":"), e3 += "@");
          var t3 = this.protocol || "", r2 = this.pathname || "", n2 = this.hash || "", o2 = false, a4 = "";
          this.host ? o2 = e3 + this.host : this.hostname && (o2 = e3 + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (o2 += ":" + this.port)), this.query && i2.isObject(this.query) && Object.keys(this.query).length && (a4 = _.stringify(this.query));
          var s4 = this.search || a4 && "?" + a4 || "";
          return t3 && t3.substr(-1) !== ":" && (t3 += ":"), this.slashes || (!t3 || v[t3]) && o2 !== false ? (o2 = "//" + (o2 || ""), r2 && r2.charAt(0) !== "/" && (r2 = "/" + r2)) : o2 || (o2 = ""), n2 && n2.charAt(0) !== "#" && (n2 = "#" + n2), s4 && s4.charAt(0) !== "?" && (s4 = "?" + s4), t3 + o2 + (r2 = r2.replace(/[?#]/g, function(e4) {
            return encodeURIComponent(e4);
          })) + (s4 = s4.replace("#", "%23")) + n2;
        }, o.prototype.resolve = function(e3) {
          return this.resolveObject(g(e3, false, true)).format();
        }, o.prototype.resolveObject = function(e3) {
          if (i2.isString(e3)) {
            var t3 = new o();
            t3.parse(e3, false, true), e3 = t3;
          }
          for (var r2 = new o(), n2 = Object.keys(this), a4 = 0; a4 < n2.length; a4++) {
            var s4 = n2[a4];
            r2[s4] = this[s4];
          }
          if (r2.hash = e3.hash, e3.href === "")
            return r2.href = r2.format(), r2;
          if (e3.slashes && !e3.protocol) {
            for (var u3 = Object.keys(e3), l2 = 0; l2 < u3.length; l2++) {
              var c3 = u3[l2];
              c3 !== "protocol" && (r2[c3] = e3[c3]);
            }
            return v[r2.protocol] && r2.hostname && !r2.pathname && (r2.path = r2.pathname = "/"), r2.href = r2.format(), r2;
          }
          if (e3.protocol && e3.protocol !== r2.protocol) {
            if (!v[e3.protocol]) {
              for (var h4 = Object.keys(e3), p2 = 0; p2 < h4.length; p2++) {
                var f2 = h4[p2];
                r2[f2] = e3[f2];
              }
              return r2.href = r2.format(), r2;
            }
            if (r2.protocol = e3.protocol, e3.host || y3[e3.protocol])
              r2.pathname = e3.pathname;
            else {
              for (var d4 = (e3.pathname || "").split("/"); d4.length && !(e3.host = d4.shift()); )
                ;
              e3.host || (e3.host = ""), e3.hostname || (e3.hostname = ""), d4[0] !== "" && d4.unshift(""), d4.length < 2 && d4.unshift(""), r2.pathname = d4.join("/");
            }
            if (r2.search = e3.search, r2.query = e3.query, r2.host = e3.host || "", r2.auth = e3.auth, r2.hostname = e3.hostname || e3.host, r2.port = e3.port, r2.pathname || r2.search) {
              var m4 = r2.pathname || "", _2 = r2.search || "";
              r2.path = m4 + _2;
            }
            return r2.slashes = r2.slashes || e3.slashes, r2.href = r2.format(), r2;
          }
          var g2 = r2.pathname && r2.pathname.charAt(0) === "/", b2 = e3.host || e3.pathname && e3.pathname.charAt(0) === "/", x2 = b2 || g2 || r2.host && e3.pathname, w2 = x2, E2 = r2.pathname && r2.pathname.split("/") || [], D2 = (d4 = e3.pathname && e3.pathname.split("/") || [], r2.protocol && !v[r2.protocol]);
          if (D2 && (r2.hostname = "", r2.port = null, r2.host && (E2[0] === "" ? E2[0] = r2.host : E2.unshift(r2.host)), r2.host = "", e3.protocol && (e3.hostname = null, e3.port = null, e3.host && (d4[0] === "" ? d4[0] = e3.host : d4.unshift(e3.host)), e3.host = null), x2 = x2 && (d4[0] === "" || E2[0] === "")), b2)
            r2.host = e3.host || e3.host === "" ? e3.host : r2.host, r2.hostname = e3.hostname || e3.hostname === "" ? e3.hostname : r2.hostname, r2.search = e3.search, r2.query = e3.query, E2 = d4;
          else if (d4.length)
            E2 || (E2 = []), E2.pop(), E2 = E2.concat(d4), r2.search = e3.search, r2.query = e3.query;
          else if (!i2.isNullOrUndefined(e3.search)) {
            if (D2)
              r2.hostname = r2.host = E2.shift(), (T2 = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T2.shift(), r2.host = r2.hostname = T2.shift());
            return r2.search = e3.search, r2.query = e3.query, i2.isNull(r2.pathname) && i2.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.href = r2.format(), r2;
          }
          if (!E2.length)
            return r2.pathname = null, r2.search ? r2.path = "/" + r2.search : r2.path = null, r2.href = r2.format(), r2;
          for (var S3 = E2.slice(-1)[0], C = (r2.host || e3.host || E2.length > 1) && (S3 === "." || S3 === "..") || S3 === "", A = 0, N = E2.length; N >= 0; N--)
            (S3 = E2[N]) === "." ? E2.splice(N, 1) : S3 === ".." ? (E2.splice(N, 1), A++) : A && (E2.splice(N, 1), A--);
          if (!x2 && !w2)
            for (; A--; A)
              E2.unshift("..");
          !x2 || E2[0] === "" || E2[0] && E2[0].charAt(0) === "/" || E2.unshift(""), C && E2.join("/").substr(-1) !== "/" && E2.push("");
          var T2, O2 = E2[0] === "" || E2[0] && E2[0].charAt(0) === "/";
          D2 && (r2.hostname = r2.host = O2 ? "" : E2.length ? E2.shift() : "", (T2 = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T2.shift(), r2.host = r2.hostname = T2.shift()));
          return (x2 = x2 || r2.host && E2.length) && !O2 && E2.unshift(""), E2.length ? r2.pathname = E2.join("/") : (r2.pathname = null, r2.path = null), i2.isNull(r2.pathname) && i2.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.auth = e3.auth || r2.auth, r2.slashes = r2.slashes || e3.slashes, r2.href = r2.format(), r2;
        }, o.prototype.parseHost = function() {
          var e3 = this.host, t3 = s3.exec(e3);
          t3 && ((t3 = t3[0]) !== ":" && (this.port = t3.substr(1)), e3 = e3.substr(0, e3.length - t3.length)), e3 && (this.hostname = e3);
        };
      }, function(e2, t2, r) {
        (function(e3, n) {
          var i2;
          !function(o) {
            t2 && t2.nodeType, e3 && e3.nodeType;
            var a3 = typeof n == "object" && n;
            a3.global !== a3 && a3.window !== a3 && a3.self;
            var s3, u2 = 2147483647, l = /^xn--/, c2 = /[^\x20-\x7E]/, h3 = /[\x2E\u3002\uFF0E\uFF61]/g, p = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, f = Math.floor, d3 = String.fromCharCode;
            function m3(e4) {
              throw new RangeError(p[e4]);
            }
            function y3(e4, t3) {
              for (var r2 = e4.length, n2 = []; r2--; )
                n2[r2] = t3(e4[r2]);
              return n2;
            }
            function v(e4, t3) {
              var r2 = e4.split("@"), n2 = "";
              return r2.length > 1 && (n2 = r2[0] + "@", e4 = r2[1]), n2 + y3((e4 = e4.replace(h3, ".")).split("."), t3).join(".");
            }
            function _(e4) {
              for (var t3, r2, n2 = [], i3 = 0, o2 = e4.length; i3 < o2; )
                (t3 = e4.charCodeAt(i3++)) >= 55296 && t3 <= 56319 && i3 < o2 ? (64512 & (r2 = e4.charCodeAt(i3++))) == 56320 ? n2.push(((1023 & t3) << 10) + (1023 & r2) + 65536) : (n2.push(t3), i3--) : n2.push(t3);
              return n2;
            }
            function g(e4) {
              return y3(e4, function(e5) {
                var t3 = "";
                return e5 > 65535 && (t3 += d3((e5 -= 65536) >>> 10 & 1023 | 55296), e5 = 56320 | 1023 & e5), t3 += d3(e5);
              }).join("");
            }
            function b2(e4, t3) {
              return e4 + 22 + 75 * (e4 < 26) - ((t3 != 0) << 5);
            }
            function x2(e4, t3, r2) {
              var n2 = 0;
              for (e4 = r2 ? f(e4 / 700) : e4 >> 1, e4 += f(e4 / t3); e4 > 455; n2 += 36)
                e4 = f(e4 / 35);
              return f(n2 + 36 * e4 / (e4 + 38));
            }
            function w2(e4) {
              var t3, r2, n2, i3, o2, a4, s4, l2, c3, h4, p2, d4 = [], y4 = e4.length, v2 = 0, _2 = 128, b3 = 72;
              for ((r2 = e4.lastIndexOf("-")) < 0 && (r2 = 0), n2 = 0; n2 < r2; ++n2)
                e4.charCodeAt(n2) >= 128 && m3("not-basic"), d4.push(e4.charCodeAt(n2));
              for (i3 = r2 > 0 ? r2 + 1 : 0; i3 < y4; ) {
                for (o2 = v2, a4 = 1, s4 = 36; i3 >= y4 && m3("invalid-input"), ((l2 = (p2 = e4.charCodeAt(i3++)) - 48 < 10 ? p2 - 22 : p2 - 65 < 26 ? p2 - 65 : p2 - 97 < 26 ? p2 - 97 : 36) >= 36 || l2 > f((u2 - v2) / a4)) && m3("overflow"), v2 += l2 * a4, !(l2 < (c3 = s4 <= b3 ? 1 : s4 >= b3 + 26 ? 26 : s4 - b3)); s4 += 36)
                  a4 > f(u2 / (h4 = 36 - c3)) && m3("overflow"), a4 *= h4;
                b3 = x2(v2 - o2, t3 = d4.length + 1, o2 == 0), f(v2 / t3) > u2 - _2 && m3("overflow"), _2 += f(v2 / t3), v2 %= t3, d4.splice(v2++, 0, _2);
              }
              return g(d4);
            }
            function E2(e4) {
              var t3, r2, n2, i3, o2, a4, s4, l2, c3, h4, p2, y4, v2, g2, w3, E3 = [];
              for (y4 = (e4 = _(e4)).length, t3 = 128, r2 = 0, o2 = 72, a4 = 0; a4 < y4; ++a4)
                (p2 = e4[a4]) < 128 && E3.push(d3(p2));
              for (n2 = i3 = E3.length, i3 && E3.push("-"); n2 < y4; ) {
                for (s4 = u2, a4 = 0; a4 < y4; ++a4)
                  (p2 = e4[a4]) >= t3 && p2 < s4 && (s4 = p2);
                for (s4 - t3 > f((u2 - r2) / (v2 = n2 + 1)) && m3("overflow"), r2 += (s4 - t3) * v2, t3 = s4, a4 = 0; a4 < y4; ++a4)
                  if ((p2 = e4[a4]) < t3 && ++r2 > u2 && m3("overflow"), p2 == t3) {
                    for (l2 = r2, c3 = 36; !(l2 < (h4 = c3 <= o2 ? 1 : c3 >= o2 + 26 ? 26 : c3 - o2)); c3 += 36)
                      w3 = l2 - h4, g2 = 36 - h4, E3.push(d3(b2(h4 + w3 % g2, 0))), l2 = f(w3 / g2);
                    E3.push(d3(b2(l2, 0))), o2 = x2(r2, v2, n2 == i3), r2 = 0, ++n2;
                  }
                ++r2, ++t3;
              }
              return E3.join("");
            }
            s3 = { version: "1.4.1", ucs2: { decode: _, encode: g }, decode: w2, encode: E2, toASCII: function(e4) {
              return v(e4, function(e5) {
                return c2.test(e5) ? "xn--" + E2(e5) : e5;
              });
            }, toUnicode: function(e4) {
              return v(e4, function(e5) {
                return l.test(e5) ? w2(e5.slice(4).toLowerCase()) : e5;
              });
            } }, (i2 = function() {
              return s3;
            }.call(t2, r, t2, e3)) === void 0 || (e3.exports = i2);
          }();
        }).call(this, r(246)(e2), r(78));
      }, function(e2, t2) {
        e2.exports = function(e3) {
          return e3.webpackPolyfill || (e3.deprecate = function() {
          }, e3.paths = [], e3.children || (e3.children = []), Object.defineProperty(e3, "loaded", { enumerable: true, get: function() {
            return e3.l;
          } }), Object.defineProperty(e3, "id", { enumerable: true, get: function() {
            return e3.i;
          } }), e3.webpackPolyfill = 1), e3;
        };
      }, function(e2, t2, r) {
        "use strict";
        e2.exports = { isString: function(e3) {
          return typeof e3 == "string";
        }, isObject: function(e3) {
          return typeof e3 == "object" && e3 !== null;
        }, isNull: function(e3) {
          return e3 === null;
        }, isNullOrUndefined: function(e3) {
          return e3 == null;
        } };
      }, function(e2, t2, r) {
        "use strict";
        t2.decode = t2.parse = r(249), t2.encode = t2.stringify = r(250);
      }, function(e2, t2, r) {
        "use strict";
        function n(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }
        e2.exports = function(e3, t3, r2, o) {
          t3 = t3 || "&", r2 = r2 || "=";
          var a3 = {};
          if (typeof e3 != "string" || e3.length === 0)
            return a3;
          var s3 = /\+/g;
          e3 = e3.split(t3);
          var u2 = 1e3;
          o && typeof o.maxKeys == "number" && (u2 = o.maxKeys);
          var l = e3.length;
          u2 > 0 && l > u2 && (l = u2);
          for (var c2 = 0; c2 < l; ++c2) {
            var h3, p, f, d3, m3 = e3[c2].replace(s3, "%20"), y3 = m3.indexOf(r2);
            y3 >= 0 ? (h3 = m3.substr(0, y3), p = m3.substr(y3 + 1)) : (h3 = m3, p = ""), f = decodeURIComponent(h3), d3 = decodeURIComponent(p), n(a3, f) ? i2(a3[f]) ? a3[f].push(d3) : a3[f] = [a3[f], d3] : a3[f] = d3;
          }
          return a3;
        };
        var i2 = Array.isArray || function(e3) {
          return Object.prototype.toString.call(e3) === "[object Array]";
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = function(e3) {
          switch (typeof e3) {
            case "string":
              return e3;
            case "boolean":
              return e3 ? "true" : "false";
            case "number":
              return isFinite(e3) ? e3 : "";
            default:
              return "";
          }
        };
        e2.exports = function(e3, t3, r2, s3) {
          return t3 = t3 || "&", r2 = r2 || "=", e3 === null && (e3 = void 0), typeof e3 == "object" ? o(a3(e3), function(a4) {
            var s4 = encodeURIComponent(n(a4)) + r2;
            return i2(e3[a4]) ? o(e3[a4], function(e4) {
              return s4 + encodeURIComponent(n(e4));
            }).join(t3) : s4 + encodeURIComponent(n(e3[a4]));
          }).join(t3) : s3 ? encodeURIComponent(n(s3)) + r2 + encodeURIComponent(n(e3)) : "";
        };
        var i2 = Array.isArray || function(e3) {
          return Object.prototype.toString.call(e3) === "[object Array]";
        };
        function o(e3, t3) {
          if (e3.map)
            return e3.map(t3);
          for (var r2 = [], n2 = 0; n2 < e3.length; n2++)
            r2.push(t3(e3[n2], n2));
          return r2;
        }
        var a3 = Object.keys || function(e3) {
          var t3 = [];
          for (var r2 in e3)
            Object.prototype.hasOwnProperty.call(e3, r2) && t3.push(r2);
          return t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(52);
        t2.attr_setAnExistingAttributeValue = function(e3, t3) {
          e3._element === null ? e3._value = t3 : n.element_change(e3, e3._element, t3);
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(108), i2 = r(30), o = r(52);
        t2.tokenList_validationSteps = function(e3, t3) {
          if (!i2.dom_hasSupportedTokens(e3._attribute._localName))
            throw new TypeError("There are no supported tokens defined for attribute name: '" + e3._attribute._localName + "'.");
          return i2.dom_getSupportedTokens(e3._attribute._localName).has(t3.toLowerCase());
        }, t2.tokenList_updateSteps = function(e3) {
          (e3._element.hasAttribute(e3._attribute._localName) || e3._tokenSet.size !== 0) && o.element_setAnAttributeValue(e3._element, e3._attribute._localName, n.orderedSet_serialize(e3._tokenSet));
        }, t2.tokenList_serializeSteps = function(e3) {
          return o.element_getAnAttributeValue(e3._element, e3._attribute._localName);
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(1);
        function o(e3) {
          return i2.isBoolean(e3) ? e3 : e3.capture || false;
        }
        t2.eventTarget_flatten = o, t2.eventTarget_flattenMore = function(e3) {
          var t3 = o(e3), r2 = false, n2 = false;
          return i2.isBoolean(e3) || (r2 = e3.once || false, n2 = e3.passive || false), [t3, n2, r2];
        }, t2.eventTarget_addEventListener = function(e3, t3) {
          if (t3.callback !== null) {
            for (var r2 = 0; r2 < e3._eventListenerList.length; r2++) {
              var n2 = e3._eventListenerList[r2];
              if (n2.type === t3.type && n2.callback.handleEvent === t3.callback.handleEvent && n2.capture === t3.capture)
                return;
            }
            e3._eventListenerList.push(t3);
          }
        }, t2.eventTarget_removeEventListener = function(e3, t3, r2) {
          t3.removed = true, e3._eventListenerList.splice(r2, 1);
        }, t2.eventTarget_removeAllEventListeners = function(e3) {
          var t3, r2;
          try {
            for (var i3 = n(e3._eventListenerList), o2 = i3.next(); !o2.done; o2 = i3.next()) {
              o2.value.removed = true;
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              o2 && !o2.done && (r2 = i3.return) && r2.call(i3);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
          e3._eventListenerList.length = 0;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(1), o = r(29);
        t2.parentNode_convertNodesIntoANode = function(e3, t3) {
          for (var r2, a3, s3 = null, u2 = 0; u2 < e3.length; u2++) {
            var l = e3[u2];
            if (i2.isString(l)) {
              var c2 = o.create_text(t3, l);
              e3[u2] = c2;
            }
          }
          if (e3.length === 1)
            s3 = e3[0];
          else {
            var h3 = s3 = o.create_documentFragment(t3);
            try {
              for (var p = n(e3), f = p.next(); !f.done; f = p.next()) {
                l = f.value;
                h3.appendChild(l);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                f && !f.done && (a3 = p.return) && a3.call(p);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return s3;
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i2 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, o = this && this.__spread || function() {
          for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
            e3 = e3.concat(i2(arguments[t3]));
          return e3;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(2), s3 = r(9), u2 = r(3), l = r(29), c2 = r(17), h3 = r(175), p = r(107), f = r(176), d3 = r(37), m3 = r(177);
        function y3(e3) {
          return e3._startNode === e3._endNode && e3._startOffset === e3._endOffset;
        }
        function v(e3) {
          return c2.tree_rootNode(e3._startNode);
        }
        function _(e3, t3) {
          return c2.tree_rootNode(e3) === v(t3) && h3.boundaryPoint_position([e3, 0], t3._start) === a3.BoundaryPosition.After && h3.boundaryPoint_position([e3, c2.tree_nodeLength(e3)], t3._end) === a3.BoundaryPosition.Before;
        }
        function g(e3, t3) {
          var r2 = c2.tree_isAncestorOf(t3._startNode, e3, true), n2 = c2.tree_isAncestorOf(t3._endNode, e3, true);
          return r2 && !n2 || !r2 && n2;
        }
        function b2(e3) {
          var t3, r2, i3, a4, h4, m4, v2 = l.create_documentFragment(e3._startNode._nodeDocument);
          if (y3(e3))
            return v2;
          var x2 = e3._startNode, w2 = e3._startOffset, E2 = e3._endNode, D2 = e3._endOffset;
          if (x2 === E2 && u2.Guard.isCharacterDataNode(x2))
            return (R2 = f.node_clone(x2))._data = p.characterData_substringData(x2, w2, D2 - w2), d3.mutation_append(R2, v2), p.characterData_replaceData(x2, w2, D2 - w2, ""), v2;
          for (var S3 = x2; !c2.tree_isAncestorOf(E2, S3, true); ) {
            if (S3._parent === null)
              throw new Error("Parent node  is null.");
            S3 = S3._parent;
          }
          var C = null;
          if (!c2.tree_isAncestorOf(E2, x2, true))
            try {
              for (var A = n(S3._children), N = A.next(); !N.done; N = A.next()) {
                if (g(k2 = N.value, e3)) {
                  C = k2;
                  break;
                }
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                N && !N.done && (r2 = A.return) && r2.call(A);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          var T2 = null;
          if (!c2.tree_isAncestorOf(x2, E2, true))
            for (var O2 = o(S3._children), F = O2.length - 1; F > 0; F--) {
              var k2;
              if (g(k2 = O2[F], e3)) {
                T2 = k2;
                break;
              }
            }
          var P, I2, L2 = [];
          try {
            for (var M3 = n(S3._children), B2 = M3.next(); !B2.done; B2 = M3.next()) {
              if (_(X2 = B2.value, e3)) {
                if (u2.Guard.isDocumentTypeNode(X2))
                  throw new s3.HierarchyRequestError();
                L2.push(X2);
              }
            }
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              B2 && !B2.done && (a4 = M3.return) && a4.call(M3);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          if (c2.tree_isAncestorOf(E2, x2, true))
            P = x2, I2 = w2;
          else {
            for (var j = x2; j._parent !== null && !c2.tree_isAncestorOf(E2, j._parent); )
              j = j._parent;
            if (j._parent === null)
              throw new Error("Parent node is null.");
            P = j._parent, I2 = 1 + c2.tree_index(j);
          }
          if (u2.Guard.isCharacterDataNode(C))
            (R2 = f.node_clone(x2))._data = p.characterData_substringData(x2, w2, c2.tree_nodeLength(x2) - w2), d3.mutation_append(R2, v2), p.characterData_replaceData(x2, w2, c2.tree_nodeLength(x2) - w2, "");
          else if (C !== null) {
            var R2 = f.node_clone(C);
            d3.mutation_append(R2, v2);
            var z2 = b2(l.create_range([x2, w2], [C, c2.tree_nodeLength(C)]));
            d3.mutation_append(z2, R2);
          }
          try {
            for (var U = n(L2), G2 = U.next(); !G2.done; G2 = U.next()) {
              var X2 = G2.value;
              d3.mutation_append(X2, v2);
            }
          } catch (e4) {
            h4 = { error: e4 };
          } finally {
            try {
              G2 && !G2.done && (m4 = U.return) && m4.call(U);
            } finally {
              if (h4)
                throw h4.error;
            }
          }
          if (u2.Guard.isCharacterDataNode(T2))
            (R2 = f.node_clone(E2))._data = p.characterData_substringData(E2, 0, D2), d3.mutation_append(R2, v2), p.characterData_replaceData(E2, 0, D2, "");
          else if (T2 !== null) {
            R2 = f.node_clone(T2);
            d3.mutation_append(R2, v2);
            z2 = b2(l.create_range([T2, 0], [E2, D2]));
            d3.mutation_append(z2, R2);
          }
          return e3._start = [P, I2], e3._end = [P, I2], v2;
        }
        t2.range_collapsed = y3, t2.range_root = v, t2.range_isContained = _, t2.range_isPartiallyContained = g, t2.range_setTheStart = function(e3, t3, r2) {
          if (u2.Guard.isDocumentTypeNode(t3))
            throw new s3.InvalidNodeTypeError();
          if (r2 > c2.tree_nodeLength(t3))
            throw new s3.IndexSizeError();
          var n2 = [t3, r2];
          v(e3) === c2.tree_rootNode(t3) && h3.boundaryPoint_position(n2, e3._end) !== a3.BoundaryPosition.After || (e3._end = n2), e3._start = n2;
        }, t2.range_setTheEnd = function(e3, t3, r2) {
          if (u2.Guard.isDocumentTypeNode(t3))
            throw new s3.InvalidNodeTypeError();
          if (r2 > c2.tree_nodeLength(t3))
            throw new s3.IndexSizeError();
          var n2 = [t3, r2];
          v(e3) === c2.tree_rootNode(t3) && h3.boundaryPoint_position(n2, e3._start) !== a3.BoundaryPosition.Before || (e3._start = n2), e3._end = n2;
        }, t2.range_select = function(e3, t3) {
          var r2 = e3._parent;
          if (r2 === null)
            throw new s3.InvalidNodeTypeError();
          var n2 = c2.tree_index(e3);
          t3._start = [r2, n2], t3._end = [r2, n2 + 1];
        }, t2.range_extract = b2, t2.range_cloneTheContents = function e3(t3) {
          var r2, i3, a4, h4, m4, v2, x2 = l.create_documentFragment(t3._startNode._nodeDocument);
          if (y3(t3))
            return x2;
          var w2 = t3._startNode, E2 = t3._startOffset, D2 = t3._endNode, S3 = t3._endOffset;
          w2 === D2 && u2.Guard.isCharacterDataNode(w2) && ((B2 = f.node_clone(w2))._data = p.characterData_substringData(w2, E2, S3 - E2), d3.mutation_append(B2, x2));
          for (var C = w2; !c2.tree_isAncestorOf(D2, C, true); ) {
            if (C._parent === null)
              throw new Error("Parent node  is null.");
            C = C._parent;
          }
          var A = null;
          if (!c2.tree_isAncestorOf(D2, w2, true))
            try {
              for (var N = n(C._children), T2 = N.next(); !T2.done; T2 = N.next()) {
                if (g(P = T2.value, t3)) {
                  A = P;
                  break;
                }
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                T2 && !T2.done && (i3 = N.return) && i3.call(N);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          var O2 = null;
          if (!c2.tree_isAncestorOf(w2, D2, true))
            for (var F = o(C._children), k2 = F.length - 1; k2 > 0; k2--) {
              var P;
              if (g(P = F[k2], t3)) {
                O2 = P;
                break;
              }
            }
          var I2 = [];
          try {
            for (var L2 = n(C._children), M3 = L2.next(); !M3.done; M3 = L2.next()) {
              if (_(U = M3.value, t3)) {
                if (u2.Guard.isDocumentTypeNode(U))
                  throw new s3.HierarchyRequestError();
                I2.push(U);
              }
            }
          } catch (e4) {
            a4 = { error: e4 };
          } finally {
            try {
              M3 && !M3.done && (h4 = L2.return) && h4.call(L2);
            } finally {
              if (a4)
                throw a4.error;
            }
          }
          if (u2.Guard.isCharacterDataNode(A))
            (B2 = f.node_clone(w2))._data = p.characterData_substringData(w2, E2, c2.tree_nodeLength(w2) - E2), d3.mutation_append(B2, x2);
          else if (A !== null) {
            var B2 = f.node_clone(A);
            d3.mutation_append(B2, x2);
            var j = e3(l.create_range([w2, E2], [A, c2.tree_nodeLength(A)]));
            d3.mutation_append(j, B2);
          }
          try {
            for (var R2 = n(I2), z2 = R2.next(); !z2.done; z2 = R2.next()) {
              var U = z2.value, B2 = f.node_clone(U);
              d3.mutation_append(B2, x2);
            }
          } catch (e4) {
            m4 = { error: e4 };
          } finally {
            try {
              z2 && !z2.done && (v2 = R2.return) && v2.call(R2);
            } finally {
              if (m4)
                throw m4.error;
            }
          }
          if (u2.Guard.isCharacterDataNode(O2))
            (B2 = f.node_clone(D2))._data = p.characterData_substringData(D2, 0, S3), d3.mutation_append(B2, x2);
          else if (O2 !== null) {
            B2 = f.node_clone(O2);
            x2.append(B2);
            j = b2(l.create_range([O2, 0], [D2, S3]));
            d3.mutation_append(j, B2);
          }
          return x2;
        }, t2.range_insert = function(e3, t3) {
          var r2, i3;
          if (u2.Guard.isProcessingInstructionNode(t3._startNode) || u2.Guard.isCommentNode(t3._startNode) || u2.Guard.isTextNode(t3._startNode) && t3._startNode._parent === null || t3._startNode === e3)
            throw new s3.HierarchyRequestError();
          var o2, a4 = null;
          if (u2.Guard.isTextNode(t3._startNode))
            a4 = t3._startNode;
          else {
            var l2 = 0;
            try {
              for (var h4 = n(t3._startNode._children), p2 = h4.next(); !p2.done; p2 = h4.next()) {
                var f2 = p2.value;
                if (l2 === t3._startOffset) {
                  a4 = f2;
                  break;
                }
                l2++;
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                p2 && !p2.done && (i3 = h4.return) && i3.call(h4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          if (a4 === null)
            o2 = t3._startNode;
          else {
            if (a4._parent === null)
              throw new Error("Parent node is null.");
            o2 = a4._parent;
          }
          d3.mutation_ensurePreInsertionValidity(e3, o2, a4), u2.Guard.isTextNode(t3._startNode) && (a4 = m3.text_split(t3._startNode, t3._startOffset)), e3 === a4 && (a4 = e3._nextSibling), e3._parent !== null && d3.mutation_remove(e3, e3._parent);
          var v2 = a4 === null ? c2.tree_nodeLength(o2) : c2.tree_index(a4);
          u2.Guard.isDocumentFragmentNode(e3) ? v2 += c2.tree_nodeLength(e3) : v2++, d3.mutation_preInsert(e3, o2, a4), y3(t3) && (t3._end = [o2, v2]);
        }, t2.range_getContainedNodes = function(e3) {
          var t3;
          return (t3 = {})[Symbol.iterator] = function() {
            var t4 = e3.commonAncestorContainer, r2 = c2.tree_getFirstDescendantNode(t4);
            return { next: function() {
              for (; r2 && !_(r2, e3); )
                r2 = c2.tree_getNextDescendantNode(t4, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c2.tree_getNextDescendantNode(t4, r2), n2;
            } };
          }, t3;
        }, t2.range_getPartiallyContainedNodes = function(e3) {
          var t3;
          return (t3 = {})[Symbol.iterator] = function() {
            var t4 = e3.commonAncestorContainer, r2 = c2.tree_getFirstDescendantNode(t4);
            return { next: function() {
              for (; r2 && !g(r2, e3); )
                r2 = c2.tree_getNextDescendantNode(t4, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c2.tree_getNextDescendantNode(t4, r2), n2;
            } };
          }, t3;
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(9);
        t2.selectors_scopeMatchASelectorsString = function(e3, t3) {
          throw new n.NotSupportedError();
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(2), i2 = r(105);
        t2.treeWalker_traverseChildren = function(e3, t3) {
          for (var r2 = t3 ? e3._current._firstChild : e3._current._lastChild; r2 !== null; ) {
            var o = i2.traversal_filter(e3, r2);
            if (o === n.FilterResult.Accept)
              return e3._current = r2, r2;
            if (o === n.FilterResult.Skip) {
              var a3 = t3 ? r2._firstChild : r2._lastChild;
              if (a3 !== null) {
                r2 = a3;
                continue;
              }
            }
            for (; r2 !== null; ) {
              var s3 = t3 ? r2._nextSibling : r2._previousSibling;
              if (s3 !== null) {
                r2 = s3;
                break;
              }
              var u2 = r2._parent;
              if (u2 === null || u2 === e3._root || u2 === e3._current)
                return null;
              r2 = u2;
            }
          }
          return null;
        }, t2.treeWalker_traverseSiblings = function(e3, t3) {
          var r2 = e3._current;
          if (r2 === e3._root)
            return null;
          for (; ; ) {
            for (var o = t3 ? r2._nextSibling : r2._previousSibling; o !== null; ) {
              r2 = o;
              var a3 = i2.traversal_filter(e3, r2);
              if (a3 === n.FilterResult.Accept)
                return e3._current = r2, r2;
              o = t3 ? r2._firstChild : r2._lastChild, a3 !== n.FilterResult.Reject && o !== null || (o = t3 ? r2._nextSibling : r2._previousSibling);
            }
            if ((r2 = r2._parent) === null || r2 === e3._root)
              return null;
            if (i2.traversal_filter(e3, r2) === n.FilterResult.Accept)
              return null;
          }
        };
      }, function(e2, t2, r) {
        "use strict";
        r(89), r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(1), a3 = r(2), s3 = r(50), u2 = r(3), l = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._indentation = {}, n2._lengthToLastNewline = 0, n2._writerOptions = o.applyDefaults(r2, { wellFormed: false, headless: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, indentTextOnlyNodes: false, spaceBeforeSlash: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            return this._refs = { suppressPretty: false, emptyNode: false, markup: "" }, e4.nodeType !== a3.NodeType.Document || this._writerOptions.headless || this.declaration(this._builderOptions.version, this._builderOptions.encoding, this._builderOptions.standalone), this.serializeNode(e4, this._writerOptions.wellFormed), this._writerOptions.prettyPrint && this._refs.markup.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (this._refs.markup = this._refs.markup.slice(0, -this._writerOptions.newline.length)), this._refs.markup;
          }, t3.prototype.declaration = function(e4, t4, r2) {
            this._beginLine(), this._refs.markup += '<?xml version="' + e4 + '"', t4 !== void 0 && (this._refs.markup += ' encoding="' + t4 + '"'), r2 !== void 0 && (this._refs.markup += ' standalone="' + (r2 ? "yes" : "no") + '"'), this._refs.markup += "?>", this._endLine();
          }, t3.prototype.docType = function(e4, t4, r2) {
            this._beginLine(), this._refs.markup += t4 && r2 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '" "' + r2 + '">' : t4 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '">' : r2 ? "<!DOCTYPE " + e4 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e4 + ">", this._endLine();
          }, t3.prototype.openTagBegin = function(e4) {
            this._beginLine(), this._refs.markup += "<" + e4;
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            if (this._refs.suppressPretty = false, this._refs.emptyNode = false, this._writerOptions.prettyPrint && !t4 && !r2) {
              for (var n2 = true, i3 = true, o2 = this.currentNode.firstChild, a4 = 0, s4 = 0; o2; ) {
                if (u2.Guard.isExclusiveTextNode(o2))
                  s4++;
                else {
                  if (!u2.Guard.isCDATASectionNode(o2)) {
                    n2 = false, i3 = false;
                    break;
                  }
                  a4++;
                }
                o2.data !== "" && (i3 = false), o2 = o2.nextSibling;
              }
              this._refs.suppressPretty = !this._writerOptions.indentTextOnlyNodes && n2 && (a4 <= 1 && s4 === 0 || a4 === 0), this._refs.emptyNode = i3;
            }
            (r2 || t4 || this._refs.emptyNode) && this._writerOptions.allowEmptyTags ? this._refs.markup += "></" + e4 + ">" : this._refs.markup += r2 ? " />" : t4 || this._refs.emptyNode ? this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">", this._endLine();
          }, t3.prototype.closeTag = function(e4) {
            this._refs.emptyNode || (this._beginLine(), this._refs.markup += "</" + e4 + ">"), this._refs.suppressPretty = false, this._refs.emptyNode = false, this._endLine();
          }, t3.prototype.attribute = function(e4, t4) {
            var r2 = e4 + '="' + t4 + '"';
            this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._refs.markup.length - this._lengthToLastNewline + 1 + r2.length > this._writerOptions.width ? (this._endLine(), this._beginLine(), this._refs.markup += this._indent(1) + r2) : this._refs.markup += " " + r2;
          }, t3.prototype.text = function(e4) {
            e4 !== "" && (this._beginLine(), this._refs.markup += e4, this._endLine());
          }, t3.prototype.cdata = function(e4) {
            e4 !== "" && (this._beginLine(), this._refs.markup += "<![CDATA[" + e4 + "]]>", this._endLine());
          }, t3.prototype.comment = function(e4) {
            this._beginLine(), this._refs.markup += "<!--" + e4 + "-->", this._endLine();
          }, t3.prototype.instruction = function(e4, t4) {
            this._beginLine(), this._refs.markup += "<?" + (t4 === "" ? e4 : e4 + " " + t4) + "?>", this._endLine();
          }, t3.prototype._beginLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._indent(this._writerOptions.offset + this.level));
          }, t3.prototype._endLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._writerOptions.newline, this._lengthToLastNewline = this._refs.markup.length);
          }, t3.prototype._indent = function(e4) {
            if (e4 <= 0)
              return "";
            if (this._indentation[e4] !== void 0)
              return this._indentation[e4];
            var t4 = this._writerOptions.indent.repeat(e4);
            return this._indentation[e4] = t4, t4;
          }, t3;
        }(s3.BaseWriter);
        t2.XMLWriter = l;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(47), i2 = r(35);
        e2.exports = "".repeat || function(e3) {
          var t3 = String(i2(this)), r2 = "", o = n(e3);
          if (o < 0 || o == 1 / 0)
            throw RangeError("Wrong number of repetitions");
          for (; o > 0; (o >>>= 1) && (t3 += t3))
            1 & o && (r2 += t3);
          return r2;
        };
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(67), s3 = r(1), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            return n2._writerOptions = s3.applyDefaults(r2, { wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            var t4 = s3.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a3.ObjectWriter(this._builderOptions, t4).serialize(e4);
            return this._beginLine(this._writerOptions, 0) + this._convertObject(r2, this._writerOptions);
          }, t3.prototype._convertObject = function(e4, t4, r2) {
            var n2, i3, a4 = this;
            r2 === void 0 && (r2 = 0);
            var u3 = "", l = this._isLeafNode(e4);
            if (s3.isArray(e4)) {
              u3 += "[";
              var c2 = e4.length, h3 = 0;
              try {
                for (var p = o(e4), f = p.next(); !f.done; f = p.next()) {
                  var d3 = f.value;
                  u3 += this._endLine(t4, r2 + 1) + this._beginLine(t4, r2 + 1) + this._convertObject(d3, t4, r2 + 1), h3 < c2 - 1 && (u3 += ","), h3++;
                }
              } catch (e5) {
                n2 = { error: e5 };
              } finally {
                try {
                  f && !f.done && (i3 = p.return) && i3.call(p);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              u3 += this._endLine(t4, r2) + this._beginLine(t4, r2), u3 += "]";
            } else if (s3.isObject(e4)) {
              u3 += "{";
              var m3 = s3.objectLength(e4), y3 = 0;
              s3.forEachObject(e4, function(e5, n3) {
                l && t4.prettyPrint ? u3 += " " : u3 += a4._endLine(t4, r2 + 1) + a4._beginLine(t4, r2 + 1), u3 += a4._key(e5), t4.prettyPrint && (u3 += " "), u3 += a4._convertObject(n3, t4, r2 + 1), y3 < m3 - 1 && (u3 += ","), y3++;
              }, this), l && t4.prettyPrint ? u3 += " " : u3 += this._endLine(t4, r2) + this._beginLine(t4, r2), u3 += "}";
            } else
              u3 += this._val(e4);
            return u3;
          }, t3.prototype._beginLine = function(e4, t4) {
            if (!e4.prettyPrint)
              return "";
            var r2 = e4.offset + t4 + 1;
            return r2 > 0 ? new Array(r2).join(e4.indent) : "";
          }, t3.prototype._endLine = function(e4, t4) {
            return e4.prettyPrint ? e4.newline : "";
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3.prototype._isLeafNode = function(e4) {
            return this._descendantCount(e4) <= 1;
          }, t3.prototype._descendantCount = function(e4, t4) {
            var r2 = this;
            return t4 === void 0 && (t4 = 0), s3.isArray(e4) ? s3.forEachArray(e4, function(e5) {
              return t4 += r2._descendantCount(e5, t4);
            }, this) : s3.isObject(e4) ? s3.forEachObject(e4, function(e5, n2) {
              return t4 += r2._descendantCount(n2, t4);
            }, this) : t4++, t4;
          }, t3;
        }(r(50).BaseWriter);
        t2.JSONWriter = u2;
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(89), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var a3 = r(67), s3 = r(1), u2 = function(e3) {
          function t3(t4, r2) {
            var n2 = e3.call(this, t4) || this;
            if (n2._writerOptions = s3.applyDefaults(r2, { wellFormed: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2._writerOptions.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (n2._writerOptions.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return n2;
          }
          return i2(t3, e3), t3.prototype.serialize = function(e4) {
            var t4 = s3.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a3.ObjectWriter(this._builderOptions, t4).serialize(e4), n2 = this._beginLine(this._writerOptions, 0) + "---" + this._endLine(this._writerOptions) + this._convertObject(r2, this._writerOptions, 0);
            return n2.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (n2 = n2.slice(0, -this._writerOptions.newline.length)), n2;
          }, t3.prototype._convertObject = function(e4, t4, r2, n2) {
            var i3, a4, u3 = this;
            n2 === void 0 && (n2 = false);
            var l = "";
            if (s3.isArray(e4))
              try {
                for (var c2 = o(e4), h3 = c2.next(); !h3.done; h3 = c2.next()) {
                  var p = h3.value;
                  l += this._beginLine(t4, r2, true), s3.isObject(p) ? s3.isEmpty(p) ? l += '""' + this._endLine(t4) : l += this._convertObject(p, t4, r2, true) : l += this._val(p) + this._endLine(t4);
                }
              } catch (e5) {
                i3 = { error: e5 };
              } finally {
                try {
                  h3 && !h3.done && (a4 = c2.return) && a4.call(c2);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
            else
              s3.forEachObject(e4, function(e5, i4) {
                n2 ? (l += u3._key(e5), n2 = false) : l += u3._beginLine(t4, r2) + u3._key(e5), s3.isObject(i4) ? s3.isEmpty(i4) ? l += ' ""' + u3._endLine(t4) : l += u3._endLine(t4) + u3._convertObject(i4, t4, r2 + 1) : l += " " + u3._val(i4) + u3._endLine(t4);
              }, this);
            return l;
          }, t3.prototype._beginLine = function(e4, t4, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e4.offset + t4 + 1, i3 = new Array(n2).join(e4.indent);
            return r2 ? i3.substr(0, i3.length - 2) + "-" + i3.substr(-1, 1) : i3;
          }, t3.prototype._endLine = function(e4) {
            return e4.newline;
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3;
        }(r(50).BaseWriter);
        t2.YAMLWriter = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), r(110).dom.setFeatures(true);
        var n = r(110);
        t2.DOMImplementation = n.DOMImplementation;
        var i2 = r(271);
        t2.DOMParser = i2.DOMParser;
        var o = r(274);
        t2.XMLSerializer = o.XMLSerializer;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(3), i2 = r(0), o = function() {
          function e3() {
          }
          return e3.prototype.before = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2 !== null) {
              for (var a3 = r2._previousSibling, s3 = true; s3 && a3; ) {
                s3 = false;
                for (var u2 = 0; u2 < e4.length; u2++) {
                  var l = e4[u2];
                  if (l === a3) {
                    a3 = a3._previousSibling, s3 = true;
                    break;
                  }
                }
              }
              var c2 = i2.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
              a3 = a3 === null ? o2._firstChild : a3._nextSibling, i2.mutation_preInsert(c2, o2, a3);
            }
          }, e3.prototype.after = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a3 = r2._nextSibling, s3 = true; s3 && a3; ) {
                s3 = false;
                for (var u2 = 0; u2 < e4.length; u2++) {
                  var l = e4[u2];
                  if (l === a3) {
                    a3 = a3._nextSibling, s3 = true;
                    break;
                  }
                }
              }
              var c2 = i2.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
              i2.mutation_preInsert(c2, o2, a3);
            }
          }, e3.prototype.replaceWith = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a3 = r2._nextSibling, s3 = true; s3 && a3; ) {
                s3 = false;
                for (var u2 = 0; u2 < e4.length; u2++) {
                  var l = e4[u2];
                  if (l === a3) {
                    a3 = a3._nextSibling, s3 = true;
                    break;
                  }
                }
              }
              var c2 = i2.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
              r2._parent === o2 ? i2.mutation_replace(r2, c2, o2) : i2.mutation_preInsert(c2, o2, a3);
            }
          }, e3.prototype.remove = function() {
            var e4 = n.Cast.asNode(this), t3 = e4._parent;
            t3 && i2.mutation_remove(e4, t3);
          }, e3;
        }();
        t2.ChildNodeImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = function() {
        };
        t2.DocumentOrShadowRootImpl = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(6), o = r(3), a3 = r(7), s3 = function() {
          function e3(e4) {
            this._nodeList = [], this._recordQueue = [], this._callback = e4;
            var t3 = i2.dom.window;
            a3.set.append(t3._mutationObservers, this);
          }
          return e3.prototype.observe = function(e4, t3) {
            var r2, i3;
            if ((t3 = t3 || { childList: false, subtree: false }).attributeOldValue === void 0 && t3.attributeFilter === void 0 || t3.attributes !== void 0 || (t3.attributes = true), t3.characterDataOldValue !== void 0 && t3.characterData === void 0 && (t3.characterData = true), !t3.childList && !t3.attributes && !t3.characterData)
              throw new TypeError();
            if (t3.attributeOldValue && !t3.attributes)
              throw new TypeError();
            if (t3.attributeFilter !== void 0 && !t3.attributes)
              throw new TypeError();
            if (t3.characterDataOldValue && !t3.characterData)
              throw new TypeError();
            var s4 = false, u2 = t3, l = function(e5) {
              var t4, r3;
              if (e5.observer === c2) {
                s4 = true;
                try {
                  for (var i4 = (t4 = void 0, n(c2._nodeList)), l2 = i4.next(); !l2.done; l2 = i4.next()) {
                    var h4 = l2.value;
                    a3.list.remove(h4._registeredObserverList, function(t5) {
                      return o.Guard.isTransientRegisteredObserver(t5) && t5.source === e5;
                    });
                  }
                } catch (e6) {
                  t4 = { error: e6 };
                } finally {
                  try {
                    l2 && !l2.done && (r3 = i4.return) && r3.call(i4);
                  } finally {
                    if (t4)
                      throw t4.error;
                  }
                }
                e5.options = u2;
              }
            }, c2 = this;
            try {
              for (var h3 = n(e4._registeredObserverList), p = h3.next(); !p.done; p = h3.next()) {
                l(p.value);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                p && !p.done && (i3 = h3.return) && i3.call(h3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            s4 || (e4._registeredObserverList.push({ observer: this, options: t3 }), this._nodeList.push(e4));
          }, e3.prototype.disconnect = function() {
            var e4, t3, r2 = this;
            try {
              for (var i3 = n(this._nodeList), o2 = i3.next(); !o2.done; o2 = i3.next()) {
                var s4 = o2.value;
                a3.list.remove(s4._registeredObserverList, function(e5) {
                  return e5.observer === r2;
                });
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (t3 = i3.return) && t3.call(i3);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            this._recordQueue = [];
          }, e3.prototype.takeRecords = function() {
            var e4 = this._recordQueue;
            return this._recordQueue = [], e4;
          }, e3;
        }();
        t2.MutationObserverImpl = s3;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(3), i2 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "previousElementSibling", { get: function() {
            for (var e4 = n.Cast.asNode(this)._previousSibling; e4; ) {
              if (n.Guard.isElementNode(e4))
                return e4;
              e4 = e4._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "nextElementSibling", { get: function() {
            for (var e4 = n.Cast.asNode(this)._nextSibling; e4; ) {
              if (n.Guard.isElementNode(e4))
                return e4;
              e4 = e4._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.NonDocumentTypeChildNodeImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(3), i2 = r(0), o = function() {
          function e3() {
          }
          return e3.prototype.getElementById = function(e4) {
            for (var t3 = i2.tree_getFirstDescendantNode(n.Cast.asNode(this), false, false, function(e5) {
              return n.Guard.isElementNode(e5);
            }); t3 !== null; ) {
              if (t3._uniqueIdentifier === e4)
                return t3;
              t3 = i2.tree_getNextDescendantNode(n.Cast.asNode(this), t3, false, false, function(e5) {
                return n.Guard.isElementNode(e5);
              });
            }
            return null;
          }, e3;
        }();
        t2.NonElementParentNodeImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(3), o = r(0), a3 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "children", { get: function() {
            return o.create_htmlCollection(i2.Cast.asNode(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "firstElementChild", { get: function() {
            for (var e4 = i2.Cast.asNode(this)._firstChild; e4; ) {
              if (i2.Guard.isElementNode(e4))
                return e4;
              e4 = e4._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "lastElementChild", { get: function() {
            for (var e4 = i2.Cast.asNode(this)._lastChild; e4; ) {
              if (i2.Guard.isElementNode(e4))
                return e4;
              e4 = e4._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "childElementCount", { get: function() {
            var e4, t3, r2 = 0;
            try {
              for (var o2 = n(i2.Cast.asNode(this)._children), a4 = o2.next(); !a4.done; a4 = o2.next()) {
                var s3 = a4.value;
                i2.Guard.isElementNode(s3) && r2++;
              }
            } catch (t4) {
              e4 = { error: t4 };
            } finally {
              try {
                a4 && !a4.done && (t3 = o2.return) && t3.call(o2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), e3.prototype.prepend = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = i2.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
            o.mutation_preInsert(n2, r2, r2._firstChild);
          }, e3.prototype.append = function() {
            for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
              e4[t3] = arguments[t3];
            var r2 = i2.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e4, r2._nodeDocument);
            o.mutation_append(n2, r2);
          }, e3.prototype.querySelector = function(e4) {
            var t3 = i2.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e4, t3);
            return r2.length === 0 ? null : r2[0];
          }, e3.prototype.querySelectorAll = function(e4) {
            var t3 = i2.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e4, t3);
            return o.create_nodeListStatic(t3, r2);
          }, e3;
        }();
        t2.ParentNodeImpl = a3;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(0), i2 = function() {
          function e3() {
          }
          return Object.defineProperty(e3.prototype, "_name", { get: function() {
            return this.__name || "";
          }, set: function(e4) {
            this.__name = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "_assignedSlot", { get: function() {
            return this.__assignedSlot || null;
          }, set: function(e4) {
            this.__assignedSlot = e4;
          }, enumerable: true, configurable: true }), Object.defineProperty(e3.prototype, "assignedSlot", { get: function() {
            return n.shadowTree_findASlot(this, true);
          }, enumerable: true, configurable: true }), e3;
        }();
        t2.SlotableImpl = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(102), a3 = r(9), s3 = r(3), u2 = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this) || this;
            if (s3.Guard.isDocumentTypeNode(t4.startContainer) || s3.Guard.isAttrNode(t4.startContainer) || s3.Guard.isDocumentTypeNode(t4.endContainer) || s3.Guard.isAttrNode(t4.endContainer))
              throw new a3.InvalidNodeTypeError();
            return r2._start = [t4.startContainer, t4.startOffset], r2._end = [t4.endContainer, t4.endOffset], r2;
          }
          return i2(t3, e3), t3;
        }(o.AbstractRangeImpl);
        t2.StaticRangeImpl = u2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(272);
        t2.DOMParser = n.DOMParserImpl;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(0), i2 = r(273), o = function() {
          function e3() {
          }
          return e3.prototype.parseFromString = function(e4, t3) {
            if (t3 === "text/html")
              throw new Error("HTML parser not implemented.");
            try {
              return (r2 = new i2.XMLParserImpl().parse(e4))._contentType = t3, r2;
            } catch (e5) {
              var r2, o2 = "http://www.mozilla.org/newlayout/xml/parsererror.xml", a3 = (r2 = n.create_xmlDocument()).createElementNS(o2, "parsererror"), s3 = r2.createElementNS(o2, "error");
              return s3.setAttribute("message", e5.message), a3.appendChild(s3), r2.appendChild(a3), r2;
            }
          }, e3;
        }();
        t2.DOMParserImpl = o;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, i2 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(180), a3 = r(111), s3 = r(7), u2 = r(0), l = r(69), c2 = function() {
          function e3() {
          }
          return e3.prototype.parse = function(e4) {
            for (var t3, r2, c3, h3, p = new o.XMLStringLexer(e4, { skipWhitespaceOnlyText: true }), f = u2.create_document(), d3 = f, m3 = p.nextToken(); m3.type !== a3.TokenType.EOF; ) {
              switch (m3.type) {
                case a3.TokenType.Declaration:
                  var y3 = m3;
                  if (y3.version !== "1.0")
                    throw new Error("Invalid xml version: " + y3.version);
                  break;
                case a3.TokenType.DocType:
                  var v = m3;
                  if (!u2.xml_isPubidChar(v.pubId))
                    throw new Error("DocType public identifier does not match PubidChar construct.");
                  if (!u2.xml_isLegalChar(v.sysId) || v.sysId.indexOf('"') !== -1 && v.sysId.indexOf("'") !== -1)
                    throw new Error("DocType system identifier contains invalid characters.");
                  d3.appendChild(f.implementation.createDocumentType(v.name, v.pubId, v.sysId));
                  break;
                case a3.TokenType.CDATA:
                  var _ = m3;
                  if (!u2.xml_isLegalChar(_.data) || _.data.indexOf("]]>") !== -1)
                    throw new Error("CDATA contains invalid characters.");
                  d3.appendChild(f.createCDATASection(_.data));
                  break;
                case a3.TokenType.Comment:
                  var g = m3;
                  if (!u2.xml_isLegalChar(g.data) || g.data.indexOf("--") !== -1 || g.data.endsWith("-"))
                    throw new Error("Comment data contains invalid characters.");
                  d3.appendChild(f.createComment(g.data));
                  break;
                case a3.TokenType.PI:
                  var b2 = m3;
                  if (b2.target.indexOf(":") !== -1 || /^xml$/i.test(b2.target))
                    throw new Error("Processing instruction target contains invalid characters.");
                  if (!u2.xml_isLegalChar(b2.data) || b2.data.indexOf("?>") !== -1)
                    throw new Error("Processing instruction data contains invalid characters.");
                  d3.appendChild(f.createProcessingInstruction(b2.target, b2.data));
                  break;
                case a3.TokenType.Text:
                  var x2 = m3;
                  if (!u2.xml_isLegalChar(x2.data))
                    throw new Error("Text data contains invalid characters.");
                  d3.appendChild(f.createTextNode(this._decodeText(x2.data)));
                  break;
                case a3.TokenType.Element:
                  var w2 = m3, E2 = n(u2.namespace_extractQName(w2.name), 2), D2 = E2[0], S3 = E2[1];
                  if (S3.indexOf(":") !== -1 || !u2.xml_isName(S3))
                    throw new Error("Node local name contains invalid characters.");
                  if (D2 === "xmlns")
                    throw new Error("An element cannot have the 'xmlns' prefix.");
                  var C = d3.lookupNamespaceURI(D2), A = {};
                  try {
                    for (var N = (t3 = void 0, i2(w2.attributes)), T2 = N.next(); !T2.done; T2 = N.next()) {
                      var O2 = n(T2.value, 2), F = O2[0], k2 = O2[1];
                      if (F === "xmlns")
                        C = k2;
                      else {
                        var P = n(u2.namespace_extractQName(F), 2), I2 = P[0], L2 = P[1];
                        I2 === "xmlns" && (L2 === D2 && (C = k2), A[L2] = k2);
                      }
                    }
                  } catch (e5) {
                    t3 = { error: e5 };
                  } finally {
                    try {
                      T2 && !T2.done && (r2 = N.return) && r2.call(N);
                    } finally {
                      if (t3)
                        throw t3.error;
                    }
                  }
                  var M3 = C !== null ? f.createElementNS(C, w2.name) : f.createElement(w2.name);
                  d3.appendChild(M3);
                  var B2 = new l.LocalNameSet();
                  try {
                    for (var j = (c3 = void 0, i2(w2.attributes)), R2 = j.next(); !R2.done; R2 = j.next()) {
                      var z2 = n(R2.value, 2), U = (F = z2[0], k2 = z2[1], n(u2.namespace_extractQName(F), 2)), G2 = (I2 = U[0], L2 = U[1], null);
                      if (I2 === "xmlns" || I2 === null && L2 === "xmlns" ? G2 = s3.namespace.XMLNS : (G2 = M3.lookupNamespaceURI(I2)) !== null && M3.isDefaultNamespace(G2) ? G2 = null : G2 === null && I2 !== null && (G2 = A[I2] || null), B2.has(G2, L2))
                        throw new Error("Element contains duplicate attributes.");
                      if (B2.set(G2, L2), G2 === s3.namespace.XMLNS && k2 === s3.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved.");
                      if (L2.indexOf(":") !== -1 || !u2.xml_isName(L2))
                        throw new Error("Attribute local name contains invalid characters.");
                      if (I2 === "xmlns" && k2 === "")
                        throw new Error("Empty XML namespace is not allowed.");
                      G2 !== null ? M3.setAttributeNS(G2, F, this._decodeAttributeValue(k2)) : M3.setAttribute(F, this._decodeAttributeValue(k2));
                    }
                  } catch (e5) {
                    c3 = { error: e5 };
                  } finally {
                    try {
                      R2 && !R2.done && (h3 = j.return) && h3.call(j);
                    } finally {
                      if (c3)
                        throw c3.error;
                    }
                  }
                  w2.selfClosing || (d3 = M3);
                  break;
                case a3.TokenType.ClosingTag:
                  if (m3.name !== d3.nodeName)
                    throw new Error("Closing tag name does not match opening tag name.");
                  d3._parent && (d3 = d3._parent);
              }
              m3 = p.nextToken();
            }
            return f;
          }, e3.prototype._decodeText = function(e4) {
            return e4 == null ? e4 : e4.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e3.prototype._decodeAttributeValue = function(e4) {
            return e4 == null ? e4 : e4.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e3;
        }();
        t2.XMLParserImpl = c2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(275);
        t2.XMLSerializer = n.XMLSerializerImpl;
      }, function(e2, t2, r) {
        "use strict";
        var n = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var i2 = r(2), o = r(69), a3 = r(95), s3 = r(9), u2 = r(7), l = r(0), c2 = function() {
          function e3() {
          }
          return e3.prototype.serializeToString = function(e4) {
            return this._xmlSerialization(e4, false);
          }, e3.prototype._xmlSerialization = function(e4, t3) {
            if (e4._nodeDocument === void 0 || e4._nodeDocument._hasNamespaces) {
              var r2 = new a3.NamespacePrefixMap();
              r2.set("xml", u2.namespace.XML);
              try {
                return this._serializeNodeNS(e4, null, r2, { value: 1 }, t3);
              } catch (e5) {
                throw new s3.InvalidStateError();
              }
            } else
              try {
                return this._serializeNode(e4, t3);
              } catch (e5) {
                throw new s3.InvalidStateError();
              }
          }, e3.prototype._serializeNodeNS = function(e4, t3, r2, n2, o2) {
            switch (e4.nodeType) {
              case i2.NodeType.Element:
                return this._serializeElementNS(e4, t3, r2, n2, o2);
              case i2.NodeType.Document:
                return this._serializeDocumentNS(e4, t3, r2, n2, o2);
              case i2.NodeType.Comment:
                return this._serializeComment(e4, o2);
              case i2.NodeType.Text:
                return this._serializeText(e4, o2);
              case i2.NodeType.DocumentFragment:
                return this._serializeDocumentFragmentNS(e4, t3, r2, n2, o2);
              case i2.NodeType.DocumentType:
                return this._serializeDocumentType(e4, o2);
              case i2.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e4, o2);
              case i2.NodeType.CData:
                return this._serializeCData(e4, o2);
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeNode = function(e4, t3) {
            switch (e4.nodeType) {
              case i2.NodeType.Element:
                return this._serializeElement(e4, t3);
              case i2.NodeType.Document:
                return this._serializeDocument(e4, t3);
              case i2.NodeType.Comment:
                return this._serializeComment(e4, t3);
              case i2.NodeType.Text:
                return this._serializeText(e4, t3);
              case i2.NodeType.DocumentFragment:
                return this._serializeDocumentFragment(e4, t3);
              case i2.NodeType.DocumentType:
                return this._serializeDocumentType(e4, t3);
              case i2.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e4, t3);
              case i2.NodeType.CData:
                return this._serializeCData(e4, t3);
              default:
                throw new Error("Unknown node type: " + e4.nodeType);
            }
          }, e3.prototype._serializeElementNS = function(t3, r2, i3, o2, a4) {
            var s4, c3;
            if (a4 && (t3.localName.indexOf(":") !== -1 || !l.xml_isName(t3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var h3 = "<", p = "", f = false, d3 = false, m3 = i3.copy(), y3 = {}, v = this._recordNamespaceInformation(t3, m3, y3), _ = r2, g = t3.namespaceURI;
            if (_ === g)
              v !== null && (d3 = true), h3 += p = g === u2.namespace.XML ? "xml:" + t3.localName : t3.localName;
            else {
              var b2 = t3.prefix, x2 = null;
              if (b2 === null && g === v || (x2 = m3.get(b2, g)), b2 === "xmlns") {
                if (a4)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                x2 = b2;
              }
              x2 !== null ? (p = x2 + ":" + t3.localName, v !== null && v !== u2.namespace.XML && (_ = v || null), h3 += p) : b2 !== null ? (b2 in y3 && (b2 = this._generatePrefix(g, m3, o2)), m3.set(b2, g), h3 += p += b2 + ":" + t3.localName, h3 += " xmlns:" + b2 + '="' + this._serializeAttributeValue(g, a4) + '"', v !== null && (_ = v || null)) : v === null || v !== null && v !== g ? (d3 = true, _ = g, h3 += p += t3.localName, h3 += ' xmlns="' + this._serializeAttributeValue(g, a4) + '"') : (_ = g, h3 += p += t3.localName);
            }
            h3 += this._serializeAttributesNS(t3, m3, o2, y3, d3, a4);
            var w2 = g === u2.namespace.HTML;
            if (w2 && t3.childNodes.length === 0 && e3._VoidElementNames.has(t3.localName) ? (h3 += " /", f = true) : w2 || t3.childNodes.length !== 0 || (h3 += "/", f = true), h3 += ">", f)
              return h3;
            if (w2 && t3.localName === "template")
              ;
            else
              try {
                for (var E2 = n(t3._children || t3.childNodes), D2 = E2.next(); !D2.done; D2 = E2.next()) {
                  var S3 = D2.value;
                  h3 += this._serializeNodeNS(S3, _, m3, o2, a4);
                }
              } catch (e4) {
                s4 = { error: e4 };
              } finally {
                try {
                  D2 && !D2.done && (c3 = E2.return) && c3.call(E2);
                } finally {
                  if (s4)
                    throw s4.error;
                }
              }
            return h3 += "</" + p + ">";
          }, e3.prototype._serializeDocumentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4;
            if (o2 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var u3 = "";
            try {
              for (var l2 = n(e4._children || e4.childNodes), c3 = l2.next(); !c3.done; c3 = l2.next()) {
                var h3 = c3.value;
                u3 += this._serializeNodeNS(h3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                c3 && !c3.done && (s4 = l2.return) && s4.call(l2);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
            return u3;
          }, e3.prototype._serializeComment = function(e4, t3) {
            if (t3 && (!l.xml_isLegalChar(e4.data) || e4.data.indexOf("--") !== -1 || e4.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            return "<!--" + e4.data + "-->";
          }, e3.prototype._serializeText = function(e4, t3) {
            if (t3 && !l.xml_isLegalChar(e4.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            for (var r2 = "", n2 = 0; n2 < e4.data.length; n2++) {
              var i3 = e4.data[n2];
              r2 += i3 === "&" ? "&amp;" : i3 === "<" ? "&lt;" : i3 === ">" ? "&gt;" : i3;
            }
            return r2;
          }, e3.prototype._serializeDocumentFragmentNS = function(e4, t3, r2, i3, o2) {
            var a4, s4, u3 = "";
            try {
              for (var l2 = n(e4._children || e4.childNodes), c3 = l2.next(); !c3.done; c3 = l2.next()) {
                var h3 = c3.value;
                u3 += this._serializeNodeNS(h3, t3, r2, i3, o2);
              }
            } catch (e5) {
              a4 = { error: e5 };
            } finally {
              try {
                c3 && !c3.done && (s4 = l2.return) && s4.call(l2);
              } finally {
                if (a4)
                  throw a4.error;
              }
            }
            return u3;
          }, e3.prototype._serializeDocumentType = function(e4, t3) {
            if (t3 && !l.xml_isPubidChar(e4.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t3 && (!l.xml_isLegalChar(e4.systemId) || e4.systemId.indexOf('"') !== -1 && e4.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            return e4.publicId && e4.systemId ? "<!DOCTYPE " + e4.name + ' PUBLIC "' + e4.publicId + '" "' + e4.systemId + '">' : e4.publicId ? "<!DOCTYPE " + e4.name + ' PUBLIC "' + e4.publicId + '">' : e4.systemId ? "<!DOCTYPE " + e4.name + ' SYSTEM "' + e4.systemId + '">' : "<!DOCTYPE " + e4.name + ">";
          }, e3.prototype._serializeProcessingInstruction = function(e4, t3) {
            if (t3 && (e4.target.indexOf(":") !== -1 || /^xml$/i.test(e4.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t3 && (!l.xml_isLegalChar(e4.data) || e4.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            return "<?" + (e4.data === "" ? e4.target : e4.target + " " + e4.data) + "?>";
          }, e3.prototype._serializeCData = function(e4, t3) {
            if (t3 && e4.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            return "<![CDATA[" + e4.data + "]]>";
          }, e3.prototype._serializeAttributesNS = function(e4, t3, r2, i3, a4, s4) {
            var c3, h3, p = "", f = s4 ? new o.LocalNameSet() : void 0;
            try {
              for (var d3 = n(e4.attributes), m3 = d3.next(); !m3.done; m3 = d3.next()) {
                var y3 = m3.value;
                if (a4 || s4 || y3.namespaceURI !== null) {
                  if (s4 && f && f.has(y3.namespaceURI, y3.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  s4 && f && f.set(y3.namespaceURI, y3.localName);
                  var v = y3.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t3.get(y3.prefix, v), v === u2.namespace.XMLNS) {
                      if (y3.value === u2.namespace.XML || y3.prefix === null && a4 || y3.prefix !== null && (!(y3.localName in i3) || i3[y3.localName] !== y3.value) && t3.has(y3.localName, y3.value))
                        continue;
                      if (s4 && y3.value === u2.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (s4 && y3.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y3.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (p += " xmlns:" + (_ = y3.prefix === null || t3.hasPrefix(y3.prefix) && !t3.has(y3.prefix, v) ? this._generatePrefix(v, t3, r2) : y3.prefix) + '="' + this._serializeAttributeValue(v, s4) + '"');
                  if (p += " ", _ !== null && (p += _ + ":"), s4 && (y3.localName.indexOf(":") !== -1 || !l.xml_isName(y3.localName) || y3.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p += y3.localName + '="' + this._serializeAttributeValue(y3.value, s4) + '"';
                } else
                  p += " " + y3.localName + '="' + this._serializeAttributeValue(y3.value, s4) + '"';
              }
            } catch (e5) {
              c3 = { error: e5 };
            } finally {
              try {
                m3 && !m3.done && (h3 = d3.return) && h3.call(d3);
              } finally {
                if (c3)
                  throw c3.error;
              }
            }
            return p;
          }, e3.prototype._recordNamespaceInformation = function(e4, t3, r2) {
            var i3, o2, a4 = null;
            try {
              for (var s4 = n(e4.attributes), l2 = s4.next(); !l2.done; l2 = s4.next()) {
                var c3 = l2.value, h3 = c3.namespaceURI, p = c3.prefix;
                if (h3 === u2.namespace.XMLNS) {
                  if (p === null) {
                    a4 = c3.value;
                    continue;
                  }
                  var f = c3.localName, d3 = c3.value;
                  if (d3 === u2.namespace.XML)
                    continue;
                  if (d3 === "" && (d3 = null), t3.has(f, d3))
                    continue;
                  t3.set(f, d3), r2[f] = d3 || "";
                }
              }
            } catch (e5) {
              i3 = { error: e5 };
            } finally {
              try {
                l2 && !l2.done && (o2 = s4.return) && o2.call(s4);
              } finally {
                if (i3)
                  throw i3.error;
              }
            }
            return a4;
          }, e3.prototype._generatePrefix = function(e4, t3, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t3.set(n2, e4), n2;
          }, e3.prototype._serializeAttributeValue = function(e4, t3) {
            if (t3 && e4 !== null && !l.xml_isLegalChar(e4))
              throw new Error("Invalid characters in attribute value.");
            if (e4 === null)
              return "";
            for (var r2 = "", n2 = 0; n2 < e4.length; n2++) {
              var i3 = e4[n2];
              r2 += i3 === '"' ? "&quot;" : i3 === "&" ? "&amp;" : i3 === "<" ? "&lt;" : i3 === ">" ? "&gt;" : i3;
            }
            return r2;
          }, e3.prototype._serializeElement = function(e4, t3) {
            var r2, i3;
            if (t3 && (e4.localName.indexOf(":") !== -1 || !l.xml_isName(e4.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a4 = e4.localName, s4 = "<" + a4;
            if (s4 += this._serializeAttributes(e4, t3), e4._children.size === 0 && (s4 += "/", o2 = true), s4 += ">", o2)
              return s4;
            try {
              for (var u3 = n(e4._children), c3 = u3.next(); !c3.done; c3 = u3.next()) {
                var h3 = c3.value;
                s4 += this._serializeNode(h3, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                c3 && !c3.done && (i3 = u3.return) && i3.call(u3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return s4 += "</" + a4 + ">";
          }, e3.prototype._serializeDocument = function(e4, t3) {
            var r2, i3;
            if (t3 && e4.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var o2 = "";
            try {
              for (var a4 = n(e4._children), s4 = a4.next(); !s4.done; s4 = a4.next()) {
                var u3 = s4.value;
                o2 += this._serializeNode(u3, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3.prototype._serializeDocumentFragment = function(e4, t3) {
            var r2, i3, o2 = "";
            try {
              for (var a4 = n(e4._children), s4 = a4.next(); !s4.done; s4 = a4.next()) {
                var u3 = s4.value;
                o2 += this._serializeNode(u3, t3);
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                s4 && !s4.done && (i3 = a4.return) && i3.call(a4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3.prototype._serializeAttributes = function(e4, t3) {
            var r2, i3, o2 = "", a4 = t3 ? {} : void 0;
            try {
              for (var s4 = n(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var c3 = u3.value;
                if (t3 && a4 && c3.localName in a4)
                  throw new Error("Element contains duplicate attributes (well-formed required).");
                if (t3 && a4 && (a4[c3.localName] = true), t3 && (c3.localName.indexOf(":") !== -1 || !l.xml_isName(c3.localName)))
                  throw new Error("Attribute local name contains invalid characters (well-formed required).");
                o2 += " " + c3.localName + '="' + this._serializeAttributeValue(c3.value, t3) + '"';
              }
            } catch (e5) {
              r2 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e3._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e3;
        }();
        t2.XMLSerializerImpl = c2;
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(277);
        t2.XMLReader = n.XMLReader;
        var i2 = r(112);
        t2.ObjectReader = i2.ObjectReader;
        var o = r(280);
        t2.JSONReader = o.JSONReader;
        var a3 = r(281);
        t2.YAMLReader = a3.YAMLReader;
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(65), r(20), r(22), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        }, a3 = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(180), u2 = r(111), l = r(7), c2 = r(0), h3 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            for (var r2, n2, i3, h4, p = new s3.XMLStringLexer(t4, { skipWhitespaceOnlyText: true }), f = e4, d3 = e4, m3 = p.nextToken(); m3.type !== u2.TokenType.EOF; ) {
              switch (m3.type) {
                case u2.TokenType.Declaration:
                  var y3 = m3, v = this.sanitize(y3.version);
                  if (v !== "1.0")
                    throw new Error("Invalid xml version: " + v);
                  var _ = { version: v };
                  y3.encoding && (_.encoding = this.sanitize(y3.encoding)), y3.standalone && (_.standalone = this.sanitize(y3.standalone) === "yes"), d3.set(_);
                  break;
                case u2.TokenType.DocType:
                  var g = m3;
                  d3 = this.docType(d3, this.sanitize(g.name), this.sanitize(g.pubId), this.sanitize(g.sysId)) || d3;
                  break;
                case u2.TokenType.CDATA:
                  var b2 = m3;
                  d3 = this.cdata(d3, this.sanitize(b2.data)) || d3;
                  break;
                case u2.TokenType.Comment:
                  var x2 = m3;
                  d3 = this.comment(d3, this.sanitize(x2.data)) || d3;
                  break;
                case u2.TokenType.PI:
                  var w2 = m3;
                  d3 = this.instruction(d3, this.sanitize(w2.target), this.sanitize(w2.data)) || d3;
                  break;
                case u2.TokenType.Text:
                  var E2 = m3;
                  d3 = this.text(d3, this._decodeText(this.sanitize(E2.data))) || d3;
                  break;
                case u2.TokenType.Element:
                  var D2 = m3, S3 = this.sanitize(D2.name), C = o(c2.namespace_extractQName(S3), 1)[0], A = d3.node.lookupNamespaceURI(C), N = {};
                  try {
                    for (var T2 = (r2 = void 0, a3(D2.attributes)), O2 = T2.next(); !O2.done; O2 = T2.next()) {
                      var F = o(O2.value, 2), k2 = F[0], P = F[1];
                      if (k2 = this.sanitize(k2), P = this.sanitize(P), k2 === "xmlns")
                        A = P;
                      else {
                        var I2 = o(c2.namespace_extractQName(k2), 2), L2 = I2[0], M3 = I2[1];
                        L2 === "xmlns" && (M3 === C && (A = P), N[M3] = P);
                      }
                    }
                  } catch (e5) {
                    r2 = { error: e5 };
                  } finally {
                    try {
                      O2 && !O2.done && (n2 = T2.return) && n2.call(T2);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                  var B2 = A !== null ? this.element(d3, A, S3) : this.element(d3, void 0, S3);
                  if (B2 === void 0)
                    break;
                  d3.node === e4.node && (f = B2);
                  try {
                    for (var j = (i3 = void 0, a3(D2.attributes)), R2 = j.next(); !R2.done; R2 = j.next()) {
                      var z2 = o(R2.value, 2);
                      k2 = z2[0], P = z2[1];
                      k2 = this.sanitize(k2), P = this.sanitize(P);
                      var U = o(c2.namespace_extractQName(k2), 2), G2 = (L2 = U[0], M3 = U[1], null);
                      L2 === "xmlns" || L2 === null && M3 === "xmlns" ? G2 = l.namespace.XMLNS : (G2 = B2.node.lookupNamespaceURI(L2)) !== null && B2.node.isDefaultNamespace(G2) ? G2 = null : G2 === null && L2 !== null && (G2 = N[L2] || null), G2 !== null ? this.attribute(B2, G2, k2, this._decodeAttributeValue(P)) : this.attribute(B2, void 0, k2, this._decodeAttributeValue(P));
                    }
                  } catch (e5) {
                    i3 = { error: e5 };
                  } finally {
                    try {
                      R2 && !R2.done && (h4 = j.return) && h4.call(j);
                    } finally {
                      if (i3)
                        throw i3.error;
                    }
                  }
                  D2.selfClosing || (d3 = B2);
                  break;
                case u2.TokenType.ClosingTag:
                  d3.node.parentNode && (d3 = d3.up());
              }
              m3 = p.nextToken();
            }
            return f;
          }, t3;
        }(r(75).BaseReader);
        t2.XMLReader = h3;
      }, function(e2, t2, r) {
        var n = r(4), i2 = r(279);
        n({ target: "Object", stat: true, forced: Object.assign !== i2 }, { assign: i2 });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(16), i2 = r(8), o = r(61), a3 = r(85), s3 = r(79), u2 = r(27), l = r(41), c2 = Object.assign, h3 = Object.defineProperty;
        e2.exports = !c2 || i2(function() {
          if (n && c2({ b: 1 }, c2(h3({}, "a", { enumerable: true, get: function() {
            h3(this, "b", { value: 3, enumerable: false });
          } }), { b: 2 })).b !== 1)
            return true;
          var e3 = {}, t3 = {}, r2 = Symbol();
          return e3[r2] = 7, "abcdefghijklmnopqrst".split("").forEach(function(e4) {
            t3[e4] = e4;
          }), c2({}, e3)[r2] != 7 || o(c2({}, t3)).join("") != "abcdefghijklmnopqrst";
        }) ? function(e3, t3) {
          for (var r2 = u2(e3), i3 = arguments.length, c3 = 1, h4 = a3.f, p = s3.f; i3 > c3; )
            for (var f, d3 = l(arguments[c3++]), m3 = h4 ? o(d3).concat(h4(d3)) : o(d3), y3 = m3.length, v = 0; y3 > v; )
              f = m3[v++], n && !p.call(d3, f) || (r2[f] = d3[f]);
          return r2;
        } : c2;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(112), a3 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            return new o.ObjectReader(this._builderOptions).parse(e4, JSON.parse(t4));
          }, t3;
        }(r(75).BaseReader);
        t2.JSONReader = a3;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = r(112), a3 = r(75), s3 = r(282), u2 = function(e3) {
          function t3() {
            return e3 !== null && e3.apply(this, arguments) || this;
          }
          return i2(t3, e3), t3.prototype._parse = function(e4, t4) {
            var r2 = s3.safeLoad(t4);
            if (r2 === void 0)
              throw new Error("Unable to parse YAML document.");
            return new o.ObjectReader(this._builderOptions).parse(e4, r2);
          }, t3;
        }(a3.BaseReader);
        t2.YAMLReader = u2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(283);
        e2.exports = n;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(284), i2 = r(303);
        function o(e3) {
          return function() {
            throw new Error("Function " + e3 + " is deprecated and cannot be used.");
          };
        }
        e2.exports.Type = r(10), e2.exports.Schema = r(39), e2.exports.FAILSAFE_SCHEMA = r(113), e2.exports.JSON_SCHEMA = r(182), e2.exports.CORE_SCHEMA = r(181), e2.exports.DEFAULT_SAFE_SCHEMA = r(54), e2.exports.DEFAULT_FULL_SCHEMA = r(76), e2.exports.load = n.load, e2.exports.loadAll = n.loadAll, e2.exports.safeLoad = n.safeLoad, e2.exports.safeLoadAll = n.safeLoadAll, e2.exports.dump = i2.dump, e2.exports.safeDump = i2.safeDump, e2.exports.YAMLException = r(53), e2.exports.MINIMAL_SCHEMA = r(113), e2.exports.SAFE_SCHEMA = r(54), e2.exports.DEFAULT_SCHEMA = r(76), e2.exports.scan = o("scan"), e2.exports.parse = o("parse"), e2.exports.compose = o("compose"), e2.exports.addConstructor = o("addConstructor");
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(53), o = r(285), a3 = r(54), s3 = r(76), u2 = Object.prototype.hasOwnProperty, l = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, c2 = /[\x85\u2028\u2029]/, h3 = /[,\[\]\{\}]/, p = /^(?:!|!!|![a-z\-]+!)$/i, f = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
        function d3(e3) {
          return Object.prototype.toString.call(e3);
        }
        function m3(e3) {
          return e3 === 10 || e3 === 13;
        }
        function y3(e3) {
          return e3 === 9 || e3 === 32;
        }
        function v(e3) {
          return e3 === 9 || e3 === 32 || e3 === 10 || e3 === 13;
        }
        function _(e3) {
          return e3 === 44 || e3 === 91 || e3 === 93 || e3 === 123 || e3 === 125;
        }
        function g(e3) {
          var t3;
          return 48 <= e3 && e3 <= 57 ? e3 - 48 : 97 <= (t3 = 32 | e3) && t3 <= 102 ? t3 - 97 + 10 : -1;
        }
        function b2(e3) {
          return e3 === 48 ? "\0" : e3 === 97 ? "\x07" : e3 === 98 ? "\b" : e3 === 116 || e3 === 9 ? "	" : e3 === 110 ? "\n" : e3 === 118 ? "\v" : e3 === 102 ? "\f" : e3 === 114 ? "\r" : e3 === 101 ? "\x1B" : e3 === 32 ? " " : e3 === 34 ? '"' : e3 === 47 ? "/" : e3 === 92 ? "\\" : e3 === 78 ? "\x85" : e3 === 95 ? "\xA0" : e3 === 76 ? "\u2028" : e3 === 80 ? "\u2029" : "";
        }
        function x2(e3) {
          return e3 <= 65535 ? String.fromCharCode(e3) : String.fromCharCode(55296 + (e3 - 65536 >> 10), 56320 + (e3 - 65536 & 1023));
        }
        for (var w2 = new Array(256), E2 = new Array(256), D2 = 0; D2 < 256; D2++)
          w2[D2] = b2(D2) ? 1 : 0, E2[D2] = b2(D2);
        function S3(e3, t3) {
          this.input = e3, this.filename = t3.filename || null, this.schema = t3.schema || s3, this.onWarning = t3.onWarning || null, this.legacy = t3.legacy || false, this.json = t3.json || false, this.listener = t3.listener || null, this.implicitTypes = this.schema.compiledImplicit, this.typeMap = this.schema.compiledTypeMap, this.length = e3.length, this.position = 0, this.line = 0, this.lineStart = 0, this.lineIndent = 0, this.documents = [];
        }
        function C(e3, t3) {
          return new i2(t3, new o(e3.filename, e3.input, e3.position, e3.line, e3.position - e3.lineStart));
        }
        function A(e3, t3) {
          throw C(e3, t3);
        }
        function N(e3, t3) {
          e3.onWarning && e3.onWarning.call(null, C(e3, t3));
        }
        var T2 = { YAML: function(e3, t3, r2) {
          var n2, i3, o2;
          e3.version !== null && A(e3, "duplication of %YAML directive"), r2.length !== 1 && A(e3, "YAML directive accepts exactly one argument"), (n2 = /^([0-9]+)\.([0-9]+)$/.exec(r2[0])) === null && A(e3, "ill-formed argument of the YAML directive"), i3 = parseInt(n2[1], 10), o2 = parseInt(n2[2], 10), i3 !== 1 && A(e3, "unacceptable YAML version of the document"), e3.version = r2[0], e3.checkLineBreaks = o2 < 2, o2 !== 1 && o2 !== 2 && N(e3, "unsupported YAML version of the document");
        }, TAG: function(e3, t3, r2) {
          var n2, i3;
          r2.length !== 2 && A(e3, "TAG directive accepts exactly two arguments"), n2 = r2[0], i3 = r2[1], p.test(n2) || A(e3, "ill-formed tag handle (first argument) of the TAG directive"), u2.call(e3.tagMap, n2) && A(e3, 'there is a previously declared suffix for "' + n2 + '" tag handle'), f.test(i3) || A(e3, "ill-formed tag prefix (second argument) of the TAG directive"), e3.tagMap[n2] = i3;
        } };
        function O2(e3, t3, r2, n2) {
          var i3, o2, a4, s4;
          if (t3 < r2) {
            if (s4 = e3.input.slice(t3, r2), n2)
              for (i3 = 0, o2 = s4.length; i3 < o2; i3 += 1)
                (a4 = s4.charCodeAt(i3)) === 9 || 32 <= a4 && a4 <= 1114111 || A(e3, "expected valid JSON character");
            else
              l.test(s4) && A(e3, "the stream contains non-printable characters");
            e3.result += s4;
          }
        }
        function F(e3, t3, r2, i3) {
          var o2, a4, s4, l2;
          for (n.isObject(r2) || A(e3, "cannot merge mappings; the provided source object is unacceptable"), s4 = 0, l2 = (o2 = Object.keys(r2)).length; s4 < l2; s4 += 1)
            a4 = o2[s4], u2.call(t3, a4) || (t3[a4] = r2[a4], i3[a4] = true);
        }
        function k2(e3, t3, r2, n2, i3, o2, a4, s4) {
          var l2, c3;
          if (Array.isArray(i3))
            for (l2 = 0, c3 = (i3 = Array.prototype.slice.call(i3)).length; l2 < c3; l2 += 1)
              Array.isArray(i3[l2]) && A(e3, "nested arrays are not supported inside keys"), typeof i3 == "object" && d3(i3[l2]) === "[object Object]" && (i3[l2] = "[object Object]");
          if (typeof i3 == "object" && d3(i3) === "[object Object]" && (i3 = "[object Object]"), i3 = String(i3), t3 === null && (t3 = {}), n2 === "tag:yaml.org,2002:merge")
            if (Array.isArray(o2))
              for (l2 = 0, c3 = o2.length; l2 < c3; l2 += 1)
                F(e3, t3, o2[l2], r2);
            else
              F(e3, t3, o2, r2);
          else
            e3.json || u2.call(r2, i3) || !u2.call(t3, i3) || (e3.line = a4 || e3.line, e3.position = s4 || e3.position, A(e3, "duplicated mapping key")), t3[i3] = o2, delete r2[i3];
          return t3;
        }
        function P(e3) {
          var t3;
          (t3 = e3.input.charCodeAt(e3.position)) === 10 ? e3.position++ : t3 === 13 ? (e3.position++, e3.input.charCodeAt(e3.position) === 10 && e3.position++) : A(e3, "a line break is expected"), e3.line += 1, e3.lineStart = e3.position;
        }
        function I2(e3, t3, r2) {
          for (var n2 = 0, i3 = e3.input.charCodeAt(e3.position); i3 !== 0; ) {
            for (; y3(i3); )
              i3 = e3.input.charCodeAt(++e3.position);
            if (t3 && i3 === 35)
              do {
                i3 = e3.input.charCodeAt(++e3.position);
              } while (i3 !== 10 && i3 !== 13 && i3 !== 0);
            if (!m3(i3))
              break;
            for (P(e3), i3 = e3.input.charCodeAt(e3.position), n2++, e3.lineIndent = 0; i3 === 32; )
              e3.lineIndent++, i3 = e3.input.charCodeAt(++e3.position);
          }
          return r2 !== -1 && n2 !== 0 && e3.lineIndent < r2 && N(e3, "deficient indentation"), n2;
        }
        function L2(e3) {
          var t3, r2 = e3.position;
          return !((t3 = e3.input.charCodeAt(r2)) !== 45 && t3 !== 46 || t3 !== e3.input.charCodeAt(r2 + 1) || t3 !== e3.input.charCodeAt(r2 + 2) || (r2 += 3, (t3 = e3.input.charCodeAt(r2)) !== 0 && !v(t3)));
        }
        function M3(e3, t3) {
          t3 === 1 ? e3.result += " " : t3 > 1 && (e3.result += n.repeat("\n", t3 - 1));
        }
        function B2(e3, t3) {
          var r2, n2, i3 = e3.tag, o2 = e3.anchor, a4 = [], s4 = false;
          for (e3.anchor !== null && (e3.anchorMap[e3.anchor] = a4), n2 = e3.input.charCodeAt(e3.position); n2 !== 0 && n2 === 45 && v(e3.input.charCodeAt(e3.position + 1)); )
            if (s4 = true, e3.position++, I2(e3, true, -1) && e3.lineIndent <= t3)
              a4.push(null), n2 = e3.input.charCodeAt(e3.position);
            else if (r2 = e3.line, z2(e3, t3, 3, false, true), a4.push(e3.result), I2(e3, true, -1), n2 = e3.input.charCodeAt(e3.position), (e3.line === r2 || e3.lineIndent > t3) && n2 !== 0)
              A(e3, "bad indentation of a sequence entry");
            else if (e3.lineIndent < t3)
              break;
          return !!s4 && (e3.tag = i3, e3.anchor = o2, e3.kind = "sequence", e3.result = a4, true);
        }
        function j(e3) {
          var t3, r2, n2, i3, o2 = false, a4 = false;
          if ((i3 = e3.input.charCodeAt(e3.position)) !== 33)
            return false;
          if (e3.tag !== null && A(e3, "duplication of a tag property"), (i3 = e3.input.charCodeAt(++e3.position)) === 60 ? (o2 = true, i3 = e3.input.charCodeAt(++e3.position)) : i3 === 33 ? (a4 = true, r2 = "!!", i3 = e3.input.charCodeAt(++e3.position)) : r2 = "!", t3 = e3.position, o2) {
            do {
              i3 = e3.input.charCodeAt(++e3.position);
            } while (i3 !== 0 && i3 !== 62);
            e3.position < e3.length ? (n2 = e3.input.slice(t3, e3.position), i3 = e3.input.charCodeAt(++e3.position)) : A(e3, "unexpected end of the stream within a verbatim tag");
          } else {
            for (; i3 !== 0 && !v(i3); )
              i3 === 33 && (a4 ? A(e3, "tag suffix cannot contain exclamation marks") : (r2 = e3.input.slice(t3 - 1, e3.position + 1), p.test(r2) || A(e3, "named tag handle cannot contain such characters"), a4 = true, t3 = e3.position + 1)), i3 = e3.input.charCodeAt(++e3.position);
            n2 = e3.input.slice(t3, e3.position), h3.test(n2) && A(e3, "tag suffix cannot contain flow indicator characters");
          }
          return n2 && !f.test(n2) && A(e3, "tag name cannot contain such characters: " + n2), o2 ? e3.tag = n2 : u2.call(e3.tagMap, r2) ? e3.tag = e3.tagMap[r2] + n2 : r2 === "!" ? e3.tag = "!" + n2 : r2 === "!!" ? e3.tag = "tag:yaml.org,2002:" + n2 : A(e3, 'undeclared tag handle "' + r2 + '"'), true;
        }
        function R2(e3) {
          var t3, r2;
          if ((r2 = e3.input.charCodeAt(e3.position)) !== 38)
            return false;
          for (e3.anchor !== null && A(e3, "duplication of an anchor property"), r2 = e3.input.charCodeAt(++e3.position), t3 = e3.position; r2 !== 0 && !v(r2) && !_(r2); )
            r2 = e3.input.charCodeAt(++e3.position);
          return e3.position === t3 && A(e3, "name of an anchor node must contain at least one character"), e3.anchor = e3.input.slice(t3, e3.position), true;
        }
        function z2(e3, t3, r2, i3, o2) {
          var a4, s4, l2, c3, h4, p2, f2, d4, b3 = 1, D3 = false, S4 = false;
          if (e3.listener !== null && e3.listener("open", e3), e3.tag = null, e3.anchor = null, e3.kind = null, e3.result = null, a4 = s4 = l2 = r2 === 4 || r2 === 3, i3 && I2(e3, true, -1) && (D3 = true, e3.lineIndent > t3 ? b3 = 1 : e3.lineIndent === t3 ? b3 = 0 : e3.lineIndent < t3 && (b3 = -1)), b3 === 1)
            for (; j(e3) || R2(e3); )
              I2(e3, true, -1) ? (D3 = true, l2 = a4, e3.lineIndent > t3 ? b3 = 1 : e3.lineIndent === t3 ? b3 = 0 : e3.lineIndent < t3 && (b3 = -1)) : l2 = false;
          if (l2 && (l2 = D3 || o2), b3 !== 1 && r2 !== 4 || (f2 = r2 === 1 || r2 === 2 ? t3 : t3 + 1, d4 = e3.position - e3.lineStart, b3 === 1 ? l2 && (B2(e3, d4) || function(e4, t4, r3) {
            var n2, i4, o3, a5, s5, u3 = e4.tag, l3 = e4.anchor, c4 = {}, h5 = {}, p3 = null, f3 = null, d5 = null, m4 = false, _2 = false;
            for (e4.anchor !== null && (e4.anchorMap[e4.anchor] = c4), s5 = e4.input.charCodeAt(e4.position); s5 !== 0; ) {
              if (n2 = e4.input.charCodeAt(e4.position + 1), o3 = e4.line, a5 = e4.position, s5 !== 63 && s5 !== 58 || !v(n2)) {
                if (!z2(e4, r3, 2, false, true))
                  break;
                if (e4.line === o3) {
                  for (s5 = e4.input.charCodeAt(e4.position); y3(s5); )
                    s5 = e4.input.charCodeAt(++e4.position);
                  if (s5 === 58)
                    v(s5 = e4.input.charCodeAt(++e4.position)) || A(e4, "a whitespace character is expected after the key-value separator within a block mapping"), m4 && (k2(e4, c4, h5, p3, f3, null), p3 = f3 = d5 = null), _2 = true, m4 = false, i4 = false, p3 = e4.tag, f3 = e4.result;
                  else {
                    if (!_2)
                      return e4.tag = u3, e4.anchor = l3, true;
                    A(e4, "can not read an implicit mapping pair; a colon is missed");
                  }
                } else {
                  if (!_2)
                    return e4.tag = u3, e4.anchor = l3, true;
                  A(e4, "can not read a block mapping entry; a multiline key may not be an implicit key");
                }
              } else
                s5 === 63 ? (m4 && (k2(e4, c4, h5, p3, f3, null), p3 = f3 = d5 = null), _2 = true, m4 = true, i4 = true) : m4 ? (m4 = false, i4 = true) : A(e4, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"), e4.position += 1, s5 = n2;
              if ((e4.line === o3 || e4.lineIndent > t4) && (z2(e4, t4, 4, true, i4) && (m4 ? f3 = e4.result : d5 = e4.result), m4 || (k2(e4, c4, h5, p3, f3, d5, o3, a5), p3 = f3 = d5 = null), I2(e4, true, -1), s5 = e4.input.charCodeAt(e4.position)), e4.lineIndent > t4 && s5 !== 0)
                A(e4, "bad indentation of a mapping entry");
              else if (e4.lineIndent < t4)
                break;
            }
            return m4 && k2(e4, c4, h5, p3, f3, null), _2 && (e4.tag = u3, e4.anchor = l3, e4.kind = "mapping", e4.result = c4), _2;
          }(e3, d4, f2)) || function(e4, t4) {
            var r3, n2, i4, o3, a5, s5, u3, l3, c4, h5, p3 = true, f3 = e4.tag, d5 = e4.anchor, m4 = {};
            if ((h5 = e4.input.charCodeAt(e4.position)) === 91)
              i4 = 93, s5 = false, n2 = [];
            else {
              if (h5 !== 123)
                return false;
              i4 = 125, s5 = true, n2 = {};
            }
            for (e4.anchor !== null && (e4.anchorMap[e4.anchor] = n2), h5 = e4.input.charCodeAt(++e4.position); h5 !== 0; ) {
              if (I2(e4, true, t4), (h5 = e4.input.charCodeAt(e4.position)) === i4)
                return e4.position++, e4.tag = f3, e4.anchor = d5, e4.kind = s5 ? "mapping" : "sequence", e4.result = n2, true;
              p3 || A(e4, "missed comma between flow collection entries"), c4 = null, o3 = a5 = false, h5 === 63 && v(e4.input.charCodeAt(e4.position + 1)) && (o3 = a5 = true, e4.position++, I2(e4, true, t4)), r3 = e4.line, z2(e4, t4, 1, false, true), l3 = e4.tag, u3 = e4.result, I2(e4, true, t4), h5 = e4.input.charCodeAt(e4.position), !a5 && e4.line !== r3 || h5 !== 58 || (o3 = true, h5 = e4.input.charCodeAt(++e4.position), I2(e4, true, t4), z2(e4, t4, 1, false, true), c4 = e4.result), s5 ? k2(e4, n2, m4, l3, u3, c4) : o3 ? n2.push(k2(e4, null, m4, l3, u3, c4)) : n2.push(u3), I2(e4, true, t4), (h5 = e4.input.charCodeAt(e4.position)) === 44 ? (p3 = true, h5 = e4.input.charCodeAt(++e4.position)) : p3 = false;
            }
            A(e4, "unexpected end of the stream within a flow collection");
          }(e3, f2) ? S4 = true : (s4 && function(e4, t4) {
            var r3, i4, o3, a5, s5, u3 = 1, l3 = false, c4 = false, h5 = t4, p3 = 0, f3 = false;
            if ((a5 = e4.input.charCodeAt(e4.position)) === 124)
              i4 = false;
            else {
              if (a5 !== 62)
                return false;
              i4 = true;
            }
            for (e4.kind = "scalar", e4.result = ""; a5 !== 0; )
              if ((a5 = e4.input.charCodeAt(++e4.position)) === 43 || a5 === 45)
                u3 === 1 ? u3 = a5 === 43 ? 3 : 2 : A(e4, "repeat of a chomping mode identifier");
              else {
                if (!((o3 = 48 <= (s5 = a5) && s5 <= 57 ? s5 - 48 : -1) >= 0))
                  break;
                o3 === 0 ? A(e4, "bad explicit indentation width of a block scalar; it cannot be less than one") : c4 ? A(e4, "repeat of an indentation width identifier") : (h5 = t4 + o3 - 1, c4 = true);
              }
            if (y3(a5)) {
              do {
                a5 = e4.input.charCodeAt(++e4.position);
              } while (y3(a5));
              if (a5 === 35)
                do {
                  a5 = e4.input.charCodeAt(++e4.position);
                } while (!m3(a5) && a5 !== 0);
            }
            for (; a5 !== 0; ) {
              for (P(e4), e4.lineIndent = 0, a5 = e4.input.charCodeAt(e4.position); (!c4 || e4.lineIndent < h5) && a5 === 32; )
                e4.lineIndent++, a5 = e4.input.charCodeAt(++e4.position);
              if (!c4 && e4.lineIndent > h5 && (h5 = e4.lineIndent), m3(a5))
                p3++;
              else {
                if (e4.lineIndent < h5) {
                  u3 === 3 ? e4.result += n.repeat("\n", l3 ? 1 + p3 : p3) : u3 === 1 && l3 && (e4.result += "\n");
                  break;
                }
                for (i4 ? y3(a5) ? (f3 = true, e4.result += n.repeat("\n", l3 ? 1 + p3 : p3)) : f3 ? (f3 = false, e4.result += n.repeat("\n", p3 + 1)) : p3 === 0 ? l3 && (e4.result += " ") : e4.result += n.repeat("\n", p3) : e4.result += n.repeat("\n", l3 ? 1 + p3 : p3), l3 = true, c4 = true, p3 = 0, r3 = e4.position; !m3(a5) && a5 !== 0; )
                  a5 = e4.input.charCodeAt(++e4.position);
                O2(e4, r3, e4.position, false);
              }
            }
            return true;
          }(e3, f2) || function(e4, t4) {
            var r3, n2, i4;
            if ((r3 = e4.input.charCodeAt(e4.position)) !== 39)
              return false;
            for (e4.kind = "scalar", e4.result = "", e4.position++, n2 = i4 = e4.position; (r3 = e4.input.charCodeAt(e4.position)) !== 0; )
              if (r3 === 39) {
                if (O2(e4, n2, e4.position, true), (r3 = e4.input.charCodeAt(++e4.position)) !== 39)
                  return true;
                n2 = e4.position, e4.position++, i4 = e4.position;
              } else
                m3(r3) ? (O2(e4, n2, i4, true), M3(e4, I2(e4, false, t4)), n2 = i4 = e4.position) : e4.position === e4.lineStart && L2(e4) ? A(e4, "unexpected end of the document within a single quoted scalar") : (e4.position++, i4 = e4.position);
            A(e4, "unexpected end of the stream within a single quoted scalar");
          }(e3, f2) || function(e4, t4) {
            var r3, n2, i4, o3, a5, s5, u3;
            if ((s5 = e4.input.charCodeAt(e4.position)) !== 34)
              return false;
            for (e4.kind = "scalar", e4.result = "", e4.position++, r3 = n2 = e4.position; (s5 = e4.input.charCodeAt(e4.position)) !== 0; ) {
              if (s5 === 34)
                return O2(e4, r3, e4.position, true), e4.position++, true;
              if (s5 === 92) {
                if (O2(e4, r3, e4.position, true), m3(s5 = e4.input.charCodeAt(++e4.position)))
                  I2(e4, false, t4);
                else if (s5 < 256 && w2[s5])
                  e4.result += E2[s5], e4.position++;
                else if ((a5 = (u3 = s5) === 120 ? 2 : u3 === 117 ? 4 : u3 === 85 ? 8 : 0) > 0) {
                  for (i4 = a5, o3 = 0; i4 > 0; i4--)
                    (a5 = g(s5 = e4.input.charCodeAt(++e4.position))) >= 0 ? o3 = (o3 << 4) + a5 : A(e4, "expected hexadecimal character");
                  e4.result += x2(o3), e4.position++;
                } else
                  A(e4, "unknown escape sequence");
                r3 = n2 = e4.position;
              } else
                m3(s5) ? (O2(e4, r3, n2, true), M3(e4, I2(e4, false, t4)), r3 = n2 = e4.position) : e4.position === e4.lineStart && L2(e4) ? A(e4, "unexpected end of the document within a double quoted scalar") : (e4.position++, n2 = e4.position);
            }
            A(e4, "unexpected end of the stream within a double quoted scalar");
          }(e3, f2) ? S4 = true : !function(e4) {
            var t4, r3, n2;
            if ((n2 = e4.input.charCodeAt(e4.position)) !== 42)
              return false;
            for (n2 = e4.input.charCodeAt(++e4.position), t4 = e4.position; n2 !== 0 && !v(n2) && !_(n2); )
              n2 = e4.input.charCodeAt(++e4.position);
            return e4.position === t4 && A(e4, "name of an alias node must contain at least one character"), r3 = e4.input.slice(t4, e4.position), e4.anchorMap.hasOwnProperty(r3) || A(e4, 'unidentified alias "' + r3 + '"'), e4.result = e4.anchorMap[r3], I2(e4, true, -1), true;
          }(e3) ? function(e4, t4, r3) {
            var n2, i4, o3, a5, s5, u3, l3, c4, h5 = e4.kind, p3 = e4.result;
            if (v(c4 = e4.input.charCodeAt(e4.position)) || _(c4) || c4 === 35 || c4 === 38 || c4 === 42 || c4 === 33 || c4 === 124 || c4 === 62 || c4 === 39 || c4 === 34 || c4 === 37 || c4 === 64 || c4 === 96)
              return false;
            if ((c4 === 63 || c4 === 45) && (v(n2 = e4.input.charCodeAt(e4.position + 1)) || r3 && _(n2)))
              return false;
            for (e4.kind = "scalar", e4.result = "", i4 = o3 = e4.position, a5 = false; c4 !== 0; ) {
              if (c4 === 58) {
                if (v(n2 = e4.input.charCodeAt(e4.position + 1)) || r3 && _(n2))
                  break;
              } else if (c4 === 35) {
                if (v(e4.input.charCodeAt(e4.position - 1)))
                  break;
              } else {
                if (e4.position === e4.lineStart && L2(e4) || r3 && _(c4))
                  break;
                if (m3(c4)) {
                  if (s5 = e4.line, u3 = e4.lineStart, l3 = e4.lineIndent, I2(e4, false, -1), e4.lineIndent >= t4) {
                    a5 = true, c4 = e4.input.charCodeAt(e4.position);
                    continue;
                  }
                  e4.position = o3, e4.line = s5, e4.lineStart = u3, e4.lineIndent = l3;
                  break;
                }
              }
              a5 && (O2(e4, i4, o3, false), M3(e4, e4.line - s5), i4 = o3 = e4.position, a5 = false), y3(c4) || (o3 = e4.position + 1), c4 = e4.input.charCodeAt(++e4.position);
            }
            return O2(e4, i4, o3, false), !!e4.result || (e4.kind = h5, e4.result = p3, false);
          }(e3, f2, r2 === 1) && (S4 = true, e3.tag === null && (e3.tag = "?")) : (S4 = true, e3.tag === null && e3.anchor === null || A(e3, "alias node should not have any properties")), e3.anchor !== null && (e3.anchorMap[e3.anchor] = e3.result)) : b3 === 0 && (S4 = l2 && B2(e3, d4))), e3.tag !== null && e3.tag !== "!")
            if (e3.tag === "?") {
              for (e3.result !== null && e3.kind !== "scalar" && A(e3, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + e3.kind + '"'), c3 = 0, h4 = e3.implicitTypes.length; c3 < h4; c3 += 1)
                if ((p2 = e3.implicitTypes[c3]).resolve(e3.result)) {
                  e3.result = p2.construct(e3.result), e3.tag = p2.tag, e3.anchor !== null && (e3.anchorMap[e3.anchor] = e3.result);
                  break;
                }
            } else
              u2.call(e3.typeMap[e3.kind || "fallback"], e3.tag) ? (p2 = e3.typeMap[e3.kind || "fallback"][e3.tag], e3.result !== null && p2.kind !== e3.kind && A(e3, "unacceptable node kind for !<" + e3.tag + '> tag; it should be "' + p2.kind + '", not "' + e3.kind + '"'), p2.resolve(e3.result) ? (e3.result = p2.construct(e3.result), e3.anchor !== null && (e3.anchorMap[e3.anchor] = e3.result)) : A(e3, "cannot resolve a node with !<" + e3.tag + "> explicit tag")) : A(e3, "unknown tag !<" + e3.tag + ">");
          return e3.listener !== null && e3.listener("close", e3), e3.tag !== null || e3.anchor !== null || S4;
        }
        function U(e3) {
          var t3, r2, n2, i3, o2 = e3.position, a4 = false;
          for (e3.version = null, e3.checkLineBreaks = e3.legacy, e3.tagMap = {}, e3.anchorMap = {}; (i3 = e3.input.charCodeAt(e3.position)) !== 0 && (I2(e3, true, -1), i3 = e3.input.charCodeAt(e3.position), !(e3.lineIndent > 0 || i3 !== 37)); ) {
            for (a4 = true, i3 = e3.input.charCodeAt(++e3.position), t3 = e3.position; i3 !== 0 && !v(i3); )
              i3 = e3.input.charCodeAt(++e3.position);
            for (n2 = [], (r2 = e3.input.slice(t3, e3.position)).length < 1 && A(e3, "directive name must not be less than one character in length"); i3 !== 0; ) {
              for (; y3(i3); )
                i3 = e3.input.charCodeAt(++e3.position);
              if (i3 === 35) {
                do {
                  i3 = e3.input.charCodeAt(++e3.position);
                } while (i3 !== 0 && !m3(i3));
                break;
              }
              if (m3(i3))
                break;
              for (t3 = e3.position; i3 !== 0 && !v(i3); )
                i3 = e3.input.charCodeAt(++e3.position);
              n2.push(e3.input.slice(t3, e3.position));
            }
            i3 !== 0 && P(e3), u2.call(T2, r2) ? T2[r2](e3, r2, n2) : N(e3, 'unknown document directive "' + r2 + '"');
          }
          I2(e3, true, -1), e3.lineIndent === 0 && e3.input.charCodeAt(e3.position) === 45 && e3.input.charCodeAt(e3.position + 1) === 45 && e3.input.charCodeAt(e3.position + 2) === 45 ? (e3.position += 3, I2(e3, true, -1)) : a4 && A(e3, "directives end mark is expected"), z2(e3, e3.lineIndent - 1, 4, false, true), I2(e3, true, -1), e3.checkLineBreaks && c2.test(e3.input.slice(o2, e3.position)) && N(e3, "non-ASCII line breaks are interpreted as content"), e3.documents.push(e3.result), e3.position === e3.lineStart && L2(e3) ? e3.input.charCodeAt(e3.position) === 46 && (e3.position += 3, I2(e3, true, -1)) : e3.position < e3.length - 1 && A(e3, "end of the stream or a document separator is expected");
        }
        function G2(e3, t3) {
          t3 = t3 || {}, (e3 = String(e3)).length !== 0 && (e3.charCodeAt(e3.length - 1) !== 10 && e3.charCodeAt(e3.length - 1) !== 13 && (e3 += "\n"), e3.charCodeAt(0) === 65279 && (e3 = e3.slice(1)));
          var r2 = new S3(e3, t3), n2 = e3.indexOf("\0");
          for (n2 !== -1 && (r2.position = n2, A(r2, "null byte is not allowed in input")), r2.input += "\0"; r2.input.charCodeAt(r2.position) === 32; )
            r2.lineIndent += 1, r2.position += 1;
          for (; r2.position < r2.length - 1; )
            U(r2);
          return r2.documents;
        }
        function X2(e3, t3, r2) {
          t3 !== null && typeof t3 == "object" && r2 === void 0 && (r2 = t3, t3 = null);
          var n2 = G2(e3, r2);
          if (typeof t3 != "function")
            return n2;
          for (var i3 = 0, o2 = n2.length; i3 < o2; i3 += 1)
            t3(n2[i3]);
        }
        function q2(e3, t3) {
          var r2 = G2(e3, t3);
          if (r2.length !== 0) {
            if (r2.length === 1)
              return r2[0];
            throw new i2("expected a single document in the stream, but found more");
          }
        }
        e2.exports.loadAll = X2, e2.exports.load = q2, e2.exports.safeLoadAll = function(e3, t3, r2) {
          return typeof t3 == "object" && t3 !== null && r2 === void 0 && (r2 = t3, t3 = null), X2(e3, t3, n.extend({ schema: a3 }, r2));
        }, e2.exports.safeLoad = function(e3, t3) {
          return q2(e3, n.extend({ schema: a3 }, t3));
        };
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38);
        function i2(e3, t3, r2, n2, i3) {
          this.name = e3, this.buffer = t3, this.position = r2, this.line = n2, this.column = i3;
        }
        i2.prototype.getSnippet = function(e3, t3) {
          var r2, i3, o, a3, s3;
          if (!this.buffer)
            return null;
          for (e3 = e3 || 4, t3 = t3 || 75, r2 = "", i3 = this.position; i3 > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(i3 - 1)) === -1; )
            if (i3 -= 1, this.position - i3 > t3 / 2 - 1) {
              r2 = " ... ", i3 += 5;
              break;
            }
          for (o = "", a3 = this.position; a3 < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(a3)) === -1; )
            if ((a3 += 1) - this.position > t3 / 2 - 1) {
              o = " ... ", a3 -= 5;
              break;
            }
          return s3 = this.buffer.slice(i3, a3), n.repeat(" ", e3) + r2 + s3 + o + "\n" + n.repeat(" ", e3 + this.position - i3 + r2.length) + "^";
        }, i2.prototype.toString = function(e3) {
          var t3, r2 = "";
          return this.name && (r2 += 'in "' + this.name + '" '), r2 += "at line " + (this.line + 1) + ", column " + (this.column + 1), e3 || (t3 = this.getSnippet()) && (r2 += ":\n" + t3), r2;
        }, e2.exports = i2;
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:str", { kind: "scalar", construct: function(e3) {
          return e3 !== null ? e3 : "";
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:seq", { kind: "sequence", construct: function(e3) {
          return e3 !== null ? e3 : [];
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:map", { kind: "mapping", construct: function(e3) {
          return e3 !== null ? e3 : {};
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:null", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3 = e3.length;
          return t3 === 1 && e3 === "~" || t3 === 4 && (e3 === "null" || e3 === "Null" || e3 === "NULL");
        }, construct: function() {
          return null;
        }, predicate: function(e3) {
          return e3 === null;
        }, represent: { canonical: function() {
          return "~";
        }, lowercase: function() {
          return "null";
        }, uppercase: function() {
          return "NULL";
        }, camelcase: function() {
          return "Null";
        } }, defaultStyle: "lowercase" });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:bool", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          var t3 = e3.length;
          return t3 === 4 && (e3 === "true" || e3 === "True" || e3 === "TRUE") || t3 === 5 && (e3 === "false" || e3 === "False" || e3 === "FALSE");
        }, construct: function(e3) {
          return e3 === "true" || e3 === "True" || e3 === "TRUE";
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Boolean]";
        }, represent: { lowercase: function(e3) {
          return e3 ? "true" : "false";
        }, uppercase: function(e3) {
          return e3 ? "TRUE" : "FALSE";
        }, camelcase: function(e3) {
          return e3 ? "True" : "False";
        } }, defaultStyle: "lowercase" });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(10);
        function o(e3) {
          return 48 <= e3 && e3 <= 55;
        }
        function a3(e3) {
          return 48 <= e3 && e3 <= 57;
        }
        e2.exports = new i2("tag:yaml.org,2002:int", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          var t3, r2, n2 = e3.length, i3 = 0, s3 = false;
          if (!n2)
            return false;
          if ((t3 = e3[i3]) !== "-" && t3 !== "+" || (t3 = e3[++i3]), t3 === "0") {
            if (i3 + 1 === n2)
              return true;
            if ((t3 = e3[++i3]) === "b") {
              for (i3++; i3 < n2; i3++)
                if ((t3 = e3[i3]) !== "_") {
                  if (t3 !== "0" && t3 !== "1")
                    return false;
                  s3 = true;
                }
              return s3 && t3 !== "_";
            }
            if (t3 === "x") {
              for (i3++; i3 < n2; i3++)
                if ((t3 = e3[i3]) !== "_") {
                  if (!(48 <= (r2 = e3.charCodeAt(i3)) && r2 <= 57 || 65 <= r2 && r2 <= 70 || 97 <= r2 && r2 <= 102))
                    return false;
                  s3 = true;
                }
              return s3 && t3 !== "_";
            }
            for (; i3 < n2; i3++)
              if ((t3 = e3[i3]) !== "_") {
                if (!o(e3.charCodeAt(i3)))
                  return false;
                s3 = true;
              }
            return s3 && t3 !== "_";
          }
          if (t3 === "_")
            return false;
          for (; i3 < n2; i3++)
            if ((t3 = e3[i3]) !== "_") {
              if (t3 === ":")
                break;
              if (!a3(e3.charCodeAt(i3)))
                return false;
              s3 = true;
            }
          return !(!s3 || t3 === "_") && (t3 !== ":" || /^(:[0-5]?[0-9])+$/.test(e3.slice(i3)));
        }, construct: function(e3) {
          var t3, r2, n2 = e3, i3 = 1, o2 = [];
          return n2.indexOf("_") !== -1 && (n2 = n2.replace(/_/g, "")), (t3 = n2[0]) !== "-" && t3 !== "+" || (t3 === "-" && (i3 = -1), t3 = (n2 = n2.slice(1))[0]), n2 === "0" ? 0 : t3 === "0" ? n2[1] === "b" ? i3 * parseInt(n2.slice(2), 2) : n2[1] === "x" ? i3 * parseInt(n2, 16) : i3 * parseInt(n2, 8) : n2.indexOf(":") !== -1 ? (n2.split(":").forEach(function(e4) {
            o2.unshift(parseInt(e4, 10));
          }), n2 = 0, r2 = 1, o2.forEach(function(e4) {
            n2 += e4 * r2, r2 *= 60;
          }), i3 * n2) : i3 * parseInt(n2, 10);
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Number]" && e3 % 1 == 0 && !n.isNegativeZero(e3);
        }, represent: { binary: function(e3) {
          return e3 >= 0 ? "0b" + e3.toString(2) : "-0b" + e3.toString(2).slice(1);
        }, octal: function(e3) {
          return e3 >= 0 ? "0" + e3.toString(8) : "-0" + e3.toString(8).slice(1);
        }, decimal: function(e3) {
          return e3.toString(10);
        }, hexadecimal: function(e3) {
          return e3 >= 0 ? "0x" + e3.toString(16).toUpperCase() : "-0x" + e3.toString(16).toUpperCase().slice(1);
        } }, defaultStyle: "decimal", styleAliases: { binary: [2, "bin"], octal: [8, "oct"], decimal: [10, "dec"], hexadecimal: [16, "hex"] } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(10), o = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
        var a3 = /^[-+]?[0-9]+e/;
        e2.exports = new i2("tag:yaml.org,2002:float", { kind: "scalar", resolve: function(e3) {
          return e3 !== null && !(!o.test(e3) || e3[e3.length - 1] === "_");
        }, construct: function(e3) {
          var t3, r2, n2, i3;
          return r2 = (t3 = e3.replace(/_/g, "").toLowerCase())[0] === "-" ? -1 : 1, i3 = [], "+-".indexOf(t3[0]) >= 0 && (t3 = t3.slice(1)), t3 === ".inf" ? r2 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : t3 === ".nan" ? NaN : t3.indexOf(":") >= 0 ? (t3.split(":").forEach(function(e4) {
            i3.unshift(parseFloat(e4, 10));
          }), t3 = 0, n2 = 1, i3.forEach(function(e4) {
            t3 += e4 * n2, n2 *= 60;
          }), r2 * t3) : r2 * parseFloat(t3, 10);
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Number]" && (e3 % 1 != 0 || n.isNegativeZero(e3));
        }, represent: function(e3, t3) {
          var r2;
          if (isNaN(e3))
            switch (t3) {
              case "lowercase":
                return ".nan";
              case "uppercase":
                return ".NAN";
              case "camelcase":
                return ".NaN";
            }
          else if (Number.POSITIVE_INFINITY === e3)
            switch (t3) {
              case "lowercase":
                return ".inf";
              case "uppercase":
                return ".INF";
              case "camelcase":
                return ".Inf";
            }
          else if (Number.NEGATIVE_INFINITY === e3)
            switch (t3) {
              case "lowercase":
                return "-.inf";
              case "uppercase":
                return "-.INF";
              case "camelcase":
                return "-.Inf";
            }
          else if (n.isNegativeZero(e3))
            return "-0.0";
          return r2 = e3.toString(10), a3.test(r2) ? r2.replace("e", ".e") : r2;
        }, defaultStyle: "lowercase" });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"), o = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
        e2.exports = new n("tag:yaml.org,2002:timestamp", { kind: "scalar", resolve: function(e3) {
          return e3 !== null && (i2.exec(e3) !== null || o.exec(e3) !== null);
        }, construct: function(e3) {
          var t3, r2, n2, a3, s3, u2, l, c2, h3 = 0, p = null;
          if ((t3 = i2.exec(e3)) === null && (t3 = o.exec(e3)), t3 === null)
            throw new Error("Date resolve error");
          if (r2 = +t3[1], n2 = +t3[2] - 1, a3 = +t3[3], !t3[4])
            return new Date(Date.UTC(r2, n2, a3));
          if (s3 = +t3[4], u2 = +t3[5], l = +t3[6], t3[7]) {
            for (h3 = t3[7].slice(0, 3); h3.length < 3; )
              h3 += "0";
            h3 = +h3;
          }
          return t3[9] && (p = 6e4 * (60 * +t3[10] + +(t3[11] || 0)), t3[9] === "-" && (p = -p)), c2 = new Date(Date.UTC(r2, n2, a3, s3, u2, l, h3)), p && c2.setTime(c2.getTime() - p), c2;
        }, instanceOf: Date, represent: function(e3) {
          return e3.toISOString();
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:merge", { kind: "scalar", resolve: function(e3) {
          return e3 === "<<" || e3 === null;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n;
        try {
          n = r(145).Buffer;
        } catch (e3) {
        }
        var i2 = r(10), o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
        e2.exports = new i2("tag:yaml.org,2002:binary", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          var t3, r2, n2 = 0, i3 = e3.length, a3 = o;
          for (r2 = 0; r2 < i3; r2++)
            if (!((t3 = a3.indexOf(e3.charAt(r2))) > 64)) {
              if (t3 < 0)
                return false;
              n2 += 6;
            }
          return n2 % 8 == 0;
        }, construct: function(e3) {
          var t3, r2, i3 = e3.replace(/[\r\n=]/g, ""), a3 = i3.length, s3 = o, u2 = 0, l = [];
          for (t3 = 0; t3 < a3; t3++)
            t3 % 4 == 0 && t3 && (l.push(u2 >> 16 & 255), l.push(u2 >> 8 & 255), l.push(255 & u2)), u2 = u2 << 6 | s3.indexOf(i3.charAt(t3));
          return (r2 = a3 % 4 * 6) === 0 ? (l.push(u2 >> 16 & 255), l.push(u2 >> 8 & 255), l.push(255 & u2)) : r2 === 18 ? (l.push(u2 >> 10 & 255), l.push(u2 >> 2 & 255)) : r2 === 12 && l.push(u2 >> 4 & 255), n ? n.from ? n.from(l) : new n(l) : l;
        }, predicate: function(e3) {
          return n && n.isBuffer(e3);
        }, represent: function(e3) {
          var t3, r2, n2 = "", i3 = 0, a3 = e3.length, s3 = o;
          for (t3 = 0; t3 < a3; t3++)
            t3 % 3 == 0 && t3 && (n2 += s3[i3 >> 18 & 63], n2 += s3[i3 >> 12 & 63], n2 += s3[i3 >> 6 & 63], n2 += s3[63 & i3]), i3 = (i3 << 8) + e3[t3];
          return (r2 = a3 % 3) === 0 ? (n2 += s3[i3 >> 18 & 63], n2 += s3[i3 >> 12 & 63], n2 += s3[i3 >> 6 & 63], n2 += s3[63 & i3]) : r2 === 2 ? (n2 += s3[i3 >> 10 & 63], n2 += s3[i3 >> 4 & 63], n2 += s3[i3 << 2 & 63], n2 += s3[64]) : r2 === 1 && (n2 += s3[i3 >> 2 & 63], n2 += s3[i3 << 4 & 63], n2 += s3[64], n2 += s3[64]), n2;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = Object.prototype.hasOwnProperty, o = Object.prototype.toString;
        e2.exports = new n("tag:yaml.org,2002:omap", { kind: "sequence", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3, r2, n2, a3, s3, u2 = [], l = e3;
          for (t3 = 0, r2 = l.length; t3 < r2; t3 += 1) {
            if (n2 = l[t3], s3 = false, o.call(n2) !== "[object Object]")
              return false;
            for (a3 in n2)
              if (i2.call(n2, a3)) {
                if (s3)
                  return false;
                s3 = true;
              }
            if (!s3)
              return false;
            if (u2.indexOf(a3) !== -1)
              return false;
            u2.push(a3);
          }
          return true;
        }, construct: function(e3) {
          return e3 !== null ? e3 : [];
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = Object.prototype.toString;
        e2.exports = new n("tag:yaml.org,2002:pairs", { kind: "sequence", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3, r2, n2, o, a3, s3 = e3;
          for (a3 = new Array(s3.length), t3 = 0, r2 = s3.length; t3 < r2; t3 += 1) {
            if (n2 = s3[t3], i2.call(n2) !== "[object Object]")
              return false;
            if ((o = Object.keys(n2)).length !== 1)
              return false;
            a3[t3] = [o[0], n2[o[0]]];
          }
          return true;
        }, construct: function(e3) {
          if (e3 === null)
            return [];
          var t3, r2, n2, i3, o, a3 = e3;
          for (o = new Array(a3.length), t3 = 0, r2 = a3.length; t3 < r2; t3 += 1)
            n2 = a3[t3], i3 = Object.keys(n2), o[t3] = [i3[0], n2[i3[0]]];
          return o;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10), i2 = Object.prototype.hasOwnProperty;
        e2.exports = new n("tag:yaml.org,2002:set", { kind: "mapping", resolve: function(e3) {
          if (e3 === null)
            return true;
          var t3, r2 = e3;
          for (t3 in r2)
            if (i2.call(r2, t3) && r2[t3] !== null)
              return false;
          return true;
        }, construct: function(e3) {
          return e3 !== null ? e3 : {};
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:js/undefined", { kind: "scalar", resolve: function() {
          return true;
        }, construct: function() {
        }, predicate: function(e3) {
          return e3 === void 0;
        }, represent: function() {
          return "";
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n = r(10);
        e2.exports = new n("tag:yaml.org,2002:js/regexp", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          if (e3.length === 0)
            return false;
          var t3 = e3, r2 = /\/([gim]*)$/.exec(e3), n2 = "";
          if (t3[0] === "/") {
            if (r2 && (n2 = r2[1]), n2.length > 3)
              return false;
            if (t3[t3.length - n2.length - 1] !== "/")
              return false;
          }
          return true;
        }, construct: function(e3) {
          var t3 = e3, r2 = /\/([gim]*)$/.exec(e3), n2 = "";
          return t3[0] === "/" && (r2 && (n2 = r2[1]), t3 = t3.slice(1, t3.length - n2.length - 1)), new RegExp(t3, n2);
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object RegExp]";
        }, represent: function(e3) {
          var t3 = "/" + e3.source + "/";
          return e3.global && (t3 += "g"), e3.multiline && (t3 += "m"), e3.ignoreCase && (t3 += "i"), t3;
        } });
      }, function(e2, t2, r) {
        "use strict";
        var n;
        try {
          n = r(302);
        } catch (e3) {
          typeof window != "undefined" && (n = window.esprima);
        }
        var i2 = r(10);
        e2.exports = new i2("tag:yaml.org,2002:js/function", { kind: "scalar", resolve: function(e3) {
          if (e3 === null)
            return false;
          try {
            var t3 = "(" + e3 + ")", r2 = n.parse(t3, { range: true });
            return r2.type === "Program" && r2.body.length === 1 && r2.body[0].type === "ExpressionStatement" && (r2.body[0].expression.type === "ArrowFunctionExpression" || r2.body[0].expression.type === "FunctionExpression");
          } catch (e4) {
            return false;
          }
        }, construct: function(e3) {
          var t3, r2 = "(" + e3 + ")", i3 = n.parse(r2, { range: true }), o = [];
          if (i3.type !== "Program" || i3.body.length !== 1 || i3.body[0].type !== "ExpressionStatement" || i3.body[0].expression.type !== "ArrowFunctionExpression" && i3.body[0].expression.type !== "FunctionExpression")
            throw new Error("Failed to resolve function");
          return i3.body[0].expression.params.forEach(function(e4) {
            o.push(e4.name);
          }), t3 = i3.body[0].expression.body.range, i3.body[0].expression.body.type === "BlockStatement" ? new Function(o, r2.slice(t3[0] + 1, t3[1] - 1)) : new Function(o, "return " + r2.slice(t3[0], t3[1]));
        }, predicate: function(e3) {
          return Object.prototype.toString.call(e3) === "[object Function]";
        }, represent: function(e3) {
          return e3.toString();
        } });
      }, function(e2, t2, r) {
        var n;
        n = function() {
          return function(e3) {
            var t3 = {};
            function r2(n2) {
              if (t3[n2])
                return t3[n2].exports;
              var i2 = t3[n2] = { exports: {}, id: n2, loaded: false };
              return e3[n2].call(i2.exports, i2, i2.exports, r2), i2.loaded = true, i2.exports;
            }
            return r2.m = e3, r2.c = t3, r2.p = "", r2(0);
          }([function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(1), i2 = r2(3), o = r2(8), a3 = r2(15);
            function s3(e4, t4, r3) {
              var a4 = null, s4 = function(e5, t5) {
                r3 && r3(e5, t5), a4 && a4.visit(e5, t5);
              }, u3 = typeof r3 == "function" ? s4 : null, l = false;
              if (t4) {
                l = typeof t4.comment == "boolean" && t4.comment;
                var c2 = typeof t4.attachComment == "boolean" && t4.attachComment;
                (l || c2) && ((a4 = new n2.CommentHandler()).attach = c2, t4.comment = true, u3 = s4);
              }
              var h3, p = false;
              t4 && typeof t4.sourceType == "string" && (p = t4.sourceType === "module"), h3 = t4 && typeof t4.jsx == "boolean" && t4.jsx ? new i2.JSXParser(e4, t4, u3) : new o.Parser(e4, t4, u3);
              var f = p ? h3.parseModule() : h3.parseScript();
              return l && a4 && (f.comments = a4.comments), h3.config.tokens && (f.tokens = h3.tokens), h3.config.tolerant && (f.errors = h3.errorHandler.errors), f;
            }
            t3.parse = s3, t3.parseModule = function(e4, t4, r3) {
              var n3 = t4 || {};
              return n3.sourceType = "module", s3(e4, n3, r3);
            }, t3.parseScript = function(e4, t4, r3) {
              var n3 = t4 || {};
              return n3.sourceType = "script", s3(e4, n3, r3);
            }, t3.tokenize = function(e4, t4, r3) {
              var n3, i3 = new a3.Tokenizer(e4, t4);
              n3 = [];
              try {
                for (; ; ) {
                  var o2 = i3.getNextToken();
                  if (!o2)
                    break;
                  r3 && (o2 = r3(o2)), n3.push(o2);
                }
              } catch (e5) {
                i3.errorHandler.tolerate(e5);
              }
              return i3.errorHandler.tolerant && (n3.errors = i3.errors()), n3;
            };
            var u2 = r2(2);
            t3.Syntax = u2.Syntax, t3.version = "4.0.1";
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(2), i2 = function() {
              function e4() {
                this.attach = false, this.comments = [], this.stack = [], this.leading = [], this.trailing = [];
              }
              return e4.prototype.insertInnerComments = function(e5, t4) {
                if (e5.type === n2.Syntax.BlockStatement && e5.body.length === 0) {
                  for (var r3 = [], i3 = this.leading.length - 1; i3 >= 0; --i3) {
                    var o = this.leading[i3];
                    t4.end.offset >= o.start && (r3.unshift(o.comment), this.leading.splice(i3, 1), this.trailing.splice(i3, 1));
                  }
                  r3.length && (e5.innerComments = r3);
                }
              }, e4.prototype.findTrailingComments = function(e5) {
                var t4 = [];
                if (this.trailing.length > 0) {
                  for (var r3 = this.trailing.length - 1; r3 >= 0; --r3) {
                    var n3 = this.trailing[r3];
                    n3.start >= e5.end.offset && t4.unshift(n3.comment);
                  }
                  return this.trailing.length = 0, t4;
                }
                var i3 = this.stack[this.stack.length - 1];
                if (i3 && i3.node.trailingComments) {
                  var o = i3.node.trailingComments[0];
                  o && o.range[0] >= e5.end.offset && (t4 = i3.node.trailingComments, delete i3.node.trailingComments);
                }
                return t4;
              }, e4.prototype.findLeadingComments = function(e5) {
                for (var t4, r3 = []; this.stack.length > 0 && ((o = this.stack[this.stack.length - 1]) && o.start >= e5.start.offset); )
                  t4 = o.node, this.stack.pop();
                if (t4) {
                  for (var n3 = (t4.leadingComments ? t4.leadingComments.length : 0) - 1; n3 >= 0; --n3) {
                    var i3 = t4.leadingComments[n3];
                    i3.range[1] <= e5.start.offset && (r3.unshift(i3), t4.leadingComments.splice(n3, 1));
                  }
                  return t4.leadingComments && t4.leadingComments.length === 0 && delete t4.leadingComments, r3;
                }
                for (n3 = this.leading.length - 1; n3 >= 0; --n3) {
                  var o;
                  (o = this.leading[n3]).start <= e5.start.offset && (r3.unshift(o.comment), this.leading.splice(n3, 1));
                }
                return r3;
              }, e4.prototype.visitNode = function(e5, t4) {
                if (!(e5.type === n2.Syntax.Program && e5.body.length > 0)) {
                  this.insertInnerComments(e5, t4);
                  var r3 = this.findTrailingComments(t4), i3 = this.findLeadingComments(t4);
                  i3.length > 0 && (e5.leadingComments = i3), r3.length > 0 && (e5.trailingComments = r3), this.stack.push({ node: e5, start: t4.start.offset });
                }
              }, e4.prototype.visitComment = function(e5, t4) {
                var r3 = e5.type[0] === "L" ? "Line" : "Block", n3 = { type: r3, value: e5.value };
                if (e5.range && (n3.range = e5.range), e5.loc && (n3.loc = e5.loc), this.comments.push(n3), this.attach) {
                  var i3 = { comment: { type: r3, value: e5.value, range: [t4.start.offset, t4.end.offset] }, start: t4.start.offset };
                  e5.loc && (i3.comment.loc = e5.loc), e5.type = r3, this.leading.push(i3), this.trailing.push(i3);
                }
              }, e4.prototype.visit = function(e5, t4) {
                e5.type === "LineComment" || e5.type === "BlockComment" ? this.visitComment(e5, t4) : this.attach && this.visitNode(e5, t4);
              }, e4;
            }();
            t3.CommentHandler = i2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.Syntax = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DoWhileStatement: "DoWhileStatement", DebuggerStatement: "DebuggerStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForOfStatement: "ForOfStatement", ForInStatement: "ForInStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchCase: "SwitchCase", SwitchStatement: "SwitchStatement", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" };
          }, function(e3, t3, r2) {
            "use strict";
            var n2, i2 = this && this.__extends || (n2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
              e4.__proto__ = t4;
            } || function(e4, t4) {
              for (var r3 in t4)
                t4.hasOwnProperty(r3) && (e4[r3] = t4[r3]);
            }, function(e4, t4) {
              function r3() {
                this.constructor = e4;
              }
              n2(e4, t4), e4.prototype = t4 === null ? Object.create(t4) : (r3.prototype = t4.prototype, new r3());
            });
            Object.defineProperty(t3, "__esModule", { value: true });
            var o = r2(4), a3 = r2(5), s3 = r2(6), u2 = r2(7), l = r2(8), c2 = r2(13), h3 = r2(14);
            function p(e4) {
              var t4;
              switch (e4.type) {
                case s3.JSXSyntax.JSXIdentifier:
                  t4 = e4.name;
                  break;
                case s3.JSXSyntax.JSXNamespacedName:
                  var r3 = e4;
                  t4 = p(r3.namespace) + ":" + p(r3.name);
                  break;
                case s3.JSXSyntax.JSXMemberExpression:
                  var n3 = e4;
                  t4 = p(n3.object) + "." + p(n3.property);
              }
              return t4;
            }
            c2.TokenName[100] = "JSXIdentifier", c2.TokenName[101] = "JSXText";
            var f = function(e4) {
              function t4(t5, r3, n3) {
                return e4.call(this, t5, r3, n3) || this;
              }
              return i2(t4, e4), t4.prototype.parsePrimaryExpression = function() {
                return this.match("<") ? this.parseJSXRoot() : e4.prototype.parsePrimaryExpression.call(this);
              }, t4.prototype.startJSX = function() {
                this.scanner.index = this.startMarker.index, this.scanner.lineNumber = this.startMarker.line, this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
              }, t4.prototype.finishJSX = function() {
                this.nextToken();
              }, t4.prototype.reenterJSX = function() {
                this.startJSX(), this.expectJSX("}"), this.config.tokens && this.tokens.pop();
              }, t4.prototype.createJSXNode = function() {
                return this.collectComments(), { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t4.prototype.createJSXChildNode = function() {
                return { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t4.prototype.scanXHTMLEntity = function(e5) {
                for (var t5 = "&", r3 = true, n3 = false, i3 = false, a4 = false; !this.scanner.eof() && r3 && !n3; ) {
                  var s4 = this.scanner.source[this.scanner.index];
                  if (s4 === e5)
                    break;
                  if (n3 = s4 === ";", t5 += s4, ++this.scanner.index, !n3)
                    switch (t5.length) {
                      case 2:
                        i3 = s4 === "#";
                        break;
                      case 3:
                        i3 && (r3 = (a4 = s4 === "x") || o.Character.isDecimalDigit(s4.charCodeAt(0)), i3 = i3 && !a4);
                        break;
                      default:
                        r3 = (r3 = r3 && !(i3 && !o.Character.isDecimalDigit(s4.charCodeAt(0)))) && !(a4 && !o.Character.isHexDigit(s4.charCodeAt(0)));
                    }
                }
                if (r3 && n3 && t5.length > 2) {
                  var u3 = t5.substr(1, t5.length - 2);
                  i3 && u3.length > 1 ? t5 = String.fromCharCode(parseInt(u3.substr(1), 10)) : a4 && u3.length > 2 ? t5 = String.fromCharCode(parseInt("0" + u3.substr(1), 16)) : i3 || a4 || !h3.XHTMLEntities[u3] || (t5 = h3.XHTMLEntities[u3]);
                }
                return t5;
              }, t4.prototype.lexJSX = function() {
                var e5 = this.scanner.source.charCodeAt(this.scanner.index);
                if (e5 === 60 || e5 === 62 || e5 === 47 || e5 === 58 || e5 === 61 || e5 === 123 || e5 === 125)
                  return { type: 7, value: s4 = this.scanner.source[this.scanner.index++], lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index - 1, end: this.scanner.index };
                if (e5 === 34 || e5 === 39) {
                  for (var t5 = this.scanner.index, r3 = this.scanner.source[this.scanner.index++], n3 = ""; !this.scanner.eof() && (u3 = this.scanner.source[this.scanner.index++]) !== r3; )
                    n3 += u3 === "&" ? this.scanXHTMLEntity(r3) : u3;
                  return { type: 8, value: n3, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t5, end: this.scanner.index };
                }
                if (e5 === 46) {
                  var i3 = this.scanner.source.charCodeAt(this.scanner.index + 1), a4 = this.scanner.source.charCodeAt(this.scanner.index + 2), s4 = i3 === 46 && a4 === 46 ? "..." : ".";
                  return t5 = this.scanner.index, this.scanner.index += s4.length, { type: 7, value: s4, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t5, end: this.scanner.index };
                }
                if (e5 === 96)
                  return { type: 10, value: "", lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index, end: this.scanner.index };
                if (o.Character.isIdentifierStart(e5) && e5 !== 92) {
                  for (t5 = this.scanner.index, ++this.scanner.index; !this.scanner.eof(); ) {
                    var u3 = this.scanner.source.charCodeAt(this.scanner.index);
                    if (o.Character.isIdentifierPart(u3) && u3 !== 92)
                      ++this.scanner.index;
                    else {
                      if (u3 !== 45)
                        break;
                      ++this.scanner.index;
                    }
                  }
                  return { type: 100, value: this.scanner.source.slice(t5, this.scanner.index), lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t5, end: this.scanner.index };
                }
                return this.scanner.lex();
              }, t4.prototype.nextJSXToken = function() {
                this.collectComments(), this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                var e5 = this.lexJSX();
                return this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.config.tokens && this.tokens.push(this.convertToken(e5)), e5;
              }, t4.prototype.nextJSXText = function() {
                this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                for (var e5 = this.scanner.index, t5 = ""; !this.scanner.eof(); ) {
                  var r3 = this.scanner.source[this.scanner.index];
                  if (r3 === "{" || r3 === "<")
                    break;
                  ++this.scanner.index, t5 += r3, o.Character.isLineTerminator(r3.charCodeAt(0)) && (++this.scanner.lineNumber, r3 === "\r" && this.scanner.source[this.scanner.index] === "\n" && ++this.scanner.index, this.scanner.lineStart = this.scanner.index);
                }
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                var n3 = { type: 101, value: t5, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: e5, end: this.scanner.index };
                return t5.length > 0 && this.config.tokens && this.tokens.push(this.convertToken(n3)), n3;
              }, t4.prototype.peekJSXToken = function() {
                var e5 = this.scanner.saveState();
                this.scanner.scanComments();
                var t5 = this.lexJSX();
                return this.scanner.restoreState(e5), t5;
              }, t4.prototype.expectJSX = function(e5) {
                var t5 = this.nextJSXToken();
                t5.type === 7 && t5.value === e5 || this.throwUnexpectedToken(t5);
              }, t4.prototype.matchJSX = function(e5) {
                var t5 = this.peekJSXToken();
                return t5.type === 7 && t5.value === e5;
              }, t4.prototype.parseJSXIdentifier = function() {
                var e5 = this.createJSXNode(), t5 = this.nextJSXToken();
                return t5.type !== 100 && this.throwUnexpectedToken(t5), this.finalize(e5, new a3.JSXIdentifier(t5.value));
              }, t4.prototype.parseJSXElementName = function() {
                var e5 = this.createJSXNode(), t5 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var r3 = t5;
                  this.expectJSX(":");
                  var n3 = this.parseJSXIdentifier();
                  t5 = this.finalize(e5, new a3.JSXNamespacedName(r3, n3));
                } else if (this.matchJSX("."))
                  for (; this.matchJSX("."); ) {
                    var i3 = t5;
                    this.expectJSX(".");
                    var o2 = this.parseJSXIdentifier();
                    t5 = this.finalize(e5, new a3.JSXMemberExpression(i3, o2));
                  }
                return t5;
              }, t4.prototype.parseJSXAttributeName = function() {
                var e5, t5 = this.createJSXNode(), r3 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var n3 = r3;
                  this.expectJSX(":");
                  var i3 = this.parseJSXIdentifier();
                  e5 = this.finalize(t5, new a3.JSXNamespacedName(n3, i3));
                } else
                  e5 = r3;
                return e5;
              }, t4.prototype.parseJSXStringLiteralAttribute = function() {
                var e5 = this.createJSXNode(), t5 = this.nextJSXToken();
                t5.type !== 8 && this.throwUnexpectedToken(t5);
                var r3 = this.getTokenRaw(t5);
                return this.finalize(e5, new u2.Literal(t5.value, r3));
              }, t4.prototype.parseJSXExpressionAttribute = function() {
                var e5 = this.createJSXNode();
                this.expectJSX("{"), this.finishJSX(), this.match("}") && this.tolerateError("JSX attributes must only be assigned a non-empty expression");
                var t5 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e5, new a3.JSXExpressionContainer(t5));
              }, t4.prototype.parseJSXAttributeValue = function() {
                return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
              }, t4.prototype.parseJSXNameValueAttribute = function() {
                var e5 = this.createJSXNode(), t5 = this.parseJSXAttributeName(), r3 = null;
                return this.matchJSX("=") && (this.expectJSX("="), r3 = this.parseJSXAttributeValue()), this.finalize(e5, new a3.JSXAttribute(t5, r3));
              }, t4.prototype.parseJSXSpreadAttribute = function() {
                var e5 = this.createJSXNode();
                this.expectJSX("{"), this.expectJSX("..."), this.finishJSX();
                var t5 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e5, new a3.JSXSpreadAttribute(t5));
              }, t4.prototype.parseJSXAttributes = function() {
                for (var e5 = []; !this.matchJSX("/") && !this.matchJSX(">"); ) {
                  var t5 = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                  e5.push(t5);
                }
                return e5;
              }, t4.prototype.parseJSXOpeningElement = function() {
                var e5 = this.createJSXNode();
                this.expectJSX("<");
                var t5 = this.parseJSXElementName(), r3 = this.parseJSXAttributes(), n3 = this.matchJSX("/");
                return n3 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e5, new a3.JSXOpeningElement(t5, n3, r3));
              }, t4.prototype.parseJSXBoundaryElement = function() {
                var e5 = this.createJSXNode();
                if (this.expectJSX("<"), this.matchJSX("/")) {
                  this.expectJSX("/");
                  var t5 = this.parseJSXElementName();
                  return this.expectJSX(">"), this.finalize(e5, new a3.JSXClosingElement(t5));
                }
                var r3 = this.parseJSXElementName(), n3 = this.parseJSXAttributes(), i3 = this.matchJSX("/");
                return i3 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e5, new a3.JSXOpeningElement(r3, i3, n3));
              }, t4.prototype.parseJSXEmptyExpression = function() {
                var e5 = this.createJSXChildNode();
                return this.collectComments(), this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.finalize(e5, new a3.JSXEmptyExpression());
              }, t4.prototype.parseJSXExpressionContainer = function() {
                var e5, t5 = this.createJSXNode();
                return this.expectJSX("{"), this.matchJSX("}") ? (e5 = this.parseJSXEmptyExpression(), this.expectJSX("}")) : (this.finishJSX(), e5 = this.parseAssignmentExpression(), this.reenterJSX()), this.finalize(t5, new a3.JSXExpressionContainer(e5));
              }, t4.prototype.parseJSXChildren = function() {
                for (var e5 = []; !this.scanner.eof(); ) {
                  var t5 = this.createJSXChildNode(), r3 = this.nextJSXText();
                  if (r3.start < r3.end) {
                    var n3 = this.getTokenRaw(r3), i3 = this.finalize(t5, new a3.JSXText(r3.value, n3));
                    e5.push(i3);
                  }
                  if (this.scanner.source[this.scanner.index] !== "{")
                    break;
                  var o2 = this.parseJSXExpressionContainer();
                  e5.push(o2);
                }
                return e5;
              }, t4.prototype.parseComplexJSXElement = function(e5) {
                for (var t5 = []; !this.scanner.eof(); ) {
                  e5.children = e5.children.concat(this.parseJSXChildren());
                  var r3 = this.createJSXChildNode(), n3 = this.parseJSXBoundaryElement();
                  if (n3.type === s3.JSXSyntax.JSXOpeningElement) {
                    var i3 = n3;
                    if (i3.selfClosing) {
                      var o2 = this.finalize(r3, new a3.JSXElement(i3, [], null));
                      e5.children.push(o2);
                    } else
                      t5.push(e5), e5 = { node: r3, opening: i3, closing: null, children: [] };
                  }
                  if (n3.type === s3.JSXSyntax.JSXClosingElement) {
                    e5.closing = n3;
                    var u3 = p(e5.opening.name);
                    if (u3 !== p(e5.closing.name) && this.tolerateError("Expected corresponding JSX closing tag for %0", u3), !(t5.length > 0))
                      break;
                    o2 = this.finalize(e5.node, new a3.JSXElement(e5.opening, e5.children, e5.closing)), (e5 = t5[t5.length - 1]).children.push(o2), t5.pop();
                  }
                }
                return e5;
              }, t4.prototype.parseJSXElement = function() {
                var e5 = this.createJSXNode(), t5 = this.parseJSXOpeningElement(), r3 = [], n3 = null;
                if (!t5.selfClosing) {
                  var i3 = this.parseComplexJSXElement({ node: e5, opening: t5, closing: n3, children: r3 });
                  r3 = i3.children, n3 = i3.closing;
                }
                return this.finalize(e5, new a3.JSXElement(t5, r3, n3));
              }, t4.prototype.parseJSXRoot = function() {
                this.config.tokens && this.tokens.pop(), this.startJSX();
                var e5 = this.parseJSXElement();
                return this.finishJSX(), e5;
              }, t4.prototype.isStartOfExpression = function() {
                return e4.prototype.isStartOfExpression.call(this) || this.match("<");
              }, t4;
            }(l.Parser);
            t3.JSXParser = f;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var r2 = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ };
            t3.Character = { fromCodePoint: function(e4) {
              return e4 < 65536 ? String.fromCharCode(e4) : String.fromCharCode(55296 + (e4 - 65536 >> 10)) + String.fromCharCode(56320 + (e4 - 65536 & 1023));
            }, isWhiteSpace: function(e4) {
              return e4 === 32 || e4 === 9 || e4 === 11 || e4 === 12 || e4 === 160 || e4 >= 5760 && [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(e4) >= 0;
            }, isLineTerminator: function(e4) {
              return e4 === 10 || e4 === 13 || e4 === 8232 || e4 === 8233;
            }, isIdentifierStart: function(e4) {
              return e4 === 36 || e4 === 95 || e4 >= 65 && e4 <= 90 || e4 >= 97 && e4 <= 122 || e4 === 92 || e4 >= 128 && r2.NonAsciiIdentifierStart.test(t3.Character.fromCodePoint(e4));
            }, isIdentifierPart: function(e4) {
              return e4 === 36 || e4 === 95 || e4 >= 65 && e4 <= 90 || e4 >= 97 && e4 <= 122 || e4 >= 48 && e4 <= 57 || e4 === 92 || e4 >= 128 && r2.NonAsciiIdentifierPart.test(t3.Character.fromCodePoint(e4));
            }, isDecimalDigit: function(e4) {
              return e4 >= 48 && e4 <= 57;
            }, isHexDigit: function(e4) {
              return e4 >= 48 && e4 <= 57 || e4 >= 65 && e4 <= 70 || e4 >= 97 && e4 <= 102;
            }, isOctalDigit: function(e4) {
              return e4 >= 48 && e4 <= 55;
            } };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(6), i2 = function(e4) {
              this.type = n2.JSXSyntax.JSXClosingElement, this.name = e4;
            };
            t3.JSXClosingElement = i2;
            var o = function(e4, t4, r3) {
              this.type = n2.JSXSyntax.JSXElement, this.openingElement = e4, this.children = t4, this.closingElement = r3;
            };
            t3.JSXElement = o;
            var a3 = function() {
              this.type = n2.JSXSyntax.JSXEmptyExpression;
            };
            t3.JSXEmptyExpression = a3;
            var s3 = function(e4) {
              this.type = n2.JSXSyntax.JSXExpressionContainer, this.expression = e4;
            };
            t3.JSXExpressionContainer = s3;
            var u2 = function(e4) {
              this.type = n2.JSXSyntax.JSXIdentifier, this.name = e4;
            };
            t3.JSXIdentifier = u2;
            var l = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXMemberExpression, this.object = e4, this.property = t4;
            };
            t3.JSXMemberExpression = l;
            var c2 = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXAttribute, this.name = e4, this.value = t4;
            };
            t3.JSXAttribute = c2;
            var h3 = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXNamespacedName, this.namespace = e4, this.name = t4;
            };
            t3.JSXNamespacedName = h3;
            var p = function(e4, t4, r3) {
              this.type = n2.JSXSyntax.JSXOpeningElement, this.name = e4, this.selfClosing = t4, this.attributes = r3;
            };
            t3.JSXOpeningElement = p;
            var f = function(e4) {
              this.type = n2.JSXSyntax.JSXSpreadAttribute, this.argument = e4;
            };
            t3.JSXSpreadAttribute = f;
            var d3 = function(e4, t4) {
              this.type = n2.JSXSyntax.JSXText, this.value = e4, this.raw = t4;
            };
            t3.JSXText = d3;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.JSXSyntax = { JSXAttribute: "JSXAttribute", JSXClosingElement: "JSXClosingElement", JSXElement: "JSXElement", JSXEmptyExpression: "JSXEmptyExpression", JSXExpressionContainer: "JSXExpressionContainer", JSXIdentifier: "JSXIdentifier", JSXMemberExpression: "JSXMemberExpression", JSXNamespacedName: "JSXNamespacedName", JSXOpeningElement: "JSXOpeningElement", JSXSpreadAttribute: "JSXSpreadAttribute", JSXText: "JSXText" };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(2), i2 = function(e4) {
              this.type = n2.Syntax.ArrayExpression, this.elements = e4;
            };
            t3.ArrayExpression = i2;
            var o = function(e4) {
              this.type = n2.Syntax.ArrayPattern, this.elements = e4;
            };
            t3.ArrayPattern = o;
            var a3 = function(e4, t4, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e4, this.body = t4, this.generator = false, this.expression = r3, this.async = false;
            };
            t3.ArrowFunctionExpression = a3;
            var s3 = function(e4, t4, r3) {
              this.type = n2.Syntax.AssignmentExpression, this.operator = e4, this.left = t4, this.right = r3;
            };
            t3.AssignmentExpression = s3;
            var u2 = function(e4, t4) {
              this.type = n2.Syntax.AssignmentPattern, this.left = e4, this.right = t4;
            };
            t3.AssignmentPattern = u2;
            var l = function(e4, t4, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e4, this.body = t4, this.generator = false, this.expression = r3, this.async = true;
            };
            t3.AsyncArrowFunctionExpression = l;
            var c2 = function(e4, t4, r3) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e4, this.params = t4, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t3.AsyncFunctionDeclaration = c2;
            var h3 = function(e4, t4, r3) {
              this.type = n2.Syntax.FunctionExpression, this.id = e4, this.params = t4, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t3.AsyncFunctionExpression = h3;
            var p = function(e4) {
              this.type = n2.Syntax.AwaitExpression, this.argument = e4;
            };
            t3.AwaitExpression = p;
            var f = function(e4, t4, r3) {
              var i3 = e4 === "||" || e4 === "&&";
              this.type = i3 ? n2.Syntax.LogicalExpression : n2.Syntax.BinaryExpression, this.operator = e4, this.left = t4, this.right = r3;
            };
            t3.BinaryExpression = f;
            var d3 = function(e4) {
              this.type = n2.Syntax.BlockStatement, this.body = e4;
            };
            t3.BlockStatement = d3;
            var m3 = function(e4) {
              this.type = n2.Syntax.BreakStatement, this.label = e4;
            };
            t3.BreakStatement = m3;
            var y3 = function(e4, t4) {
              this.type = n2.Syntax.CallExpression, this.callee = e4, this.arguments = t4;
            };
            t3.CallExpression = y3;
            var v = function(e4, t4) {
              this.type = n2.Syntax.CatchClause, this.param = e4, this.body = t4;
            };
            t3.CatchClause = v;
            var _ = function(e4) {
              this.type = n2.Syntax.ClassBody, this.body = e4;
            };
            t3.ClassBody = _;
            var g = function(e4, t4, r3) {
              this.type = n2.Syntax.ClassDeclaration, this.id = e4, this.superClass = t4, this.body = r3;
            };
            t3.ClassDeclaration = g;
            var b2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ClassExpression, this.id = e4, this.superClass = t4, this.body = r3;
            };
            t3.ClassExpression = b2;
            var x2 = function(e4, t4) {
              this.type = n2.Syntax.MemberExpression, this.computed = true, this.object = e4, this.property = t4;
            };
            t3.ComputedMemberExpression = x2;
            var w2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ConditionalExpression, this.test = e4, this.consequent = t4, this.alternate = r3;
            };
            t3.ConditionalExpression = w2;
            var E2 = function(e4) {
              this.type = n2.Syntax.ContinueStatement, this.label = e4;
            };
            t3.ContinueStatement = E2;
            var D2 = function() {
              this.type = n2.Syntax.DebuggerStatement;
            };
            t3.DebuggerStatement = D2;
            var S3 = function(e4, t4) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e4, this.directive = t4;
            };
            t3.Directive = S3;
            var C = function(e4, t4) {
              this.type = n2.Syntax.DoWhileStatement, this.body = e4, this.test = t4;
            };
            t3.DoWhileStatement = C;
            var A = function() {
              this.type = n2.Syntax.EmptyStatement;
            };
            t3.EmptyStatement = A;
            var N = function(e4) {
              this.type = n2.Syntax.ExportAllDeclaration, this.source = e4;
            };
            t3.ExportAllDeclaration = N;
            var T2 = function(e4) {
              this.type = n2.Syntax.ExportDefaultDeclaration, this.declaration = e4;
            };
            t3.ExportDefaultDeclaration = T2;
            var O2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ExportNamedDeclaration, this.declaration = e4, this.specifiers = t4, this.source = r3;
            };
            t3.ExportNamedDeclaration = O2;
            var F = function(e4, t4) {
              this.type = n2.Syntax.ExportSpecifier, this.exported = t4, this.local = e4;
            };
            t3.ExportSpecifier = F;
            var k2 = function(e4) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e4;
            };
            t3.ExpressionStatement = k2;
            var P = function(e4, t4, r3) {
              this.type = n2.Syntax.ForInStatement, this.left = e4, this.right = t4, this.body = r3, this.each = false;
            };
            t3.ForInStatement = P;
            var I2 = function(e4, t4, r3) {
              this.type = n2.Syntax.ForOfStatement, this.left = e4, this.right = t4, this.body = r3;
            };
            t3.ForOfStatement = I2;
            var L2 = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.ForStatement, this.init = e4, this.test = t4, this.update = r3, this.body = i3;
            };
            t3.ForStatement = L2;
            var M3 = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e4, this.params = t4, this.body = r3, this.generator = i3, this.expression = false, this.async = false;
            };
            t3.FunctionDeclaration = M3;
            var B2 = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.FunctionExpression, this.id = e4, this.params = t4, this.body = r3, this.generator = i3, this.expression = false, this.async = false;
            };
            t3.FunctionExpression = B2;
            var j = function(e4) {
              this.type = n2.Syntax.Identifier, this.name = e4;
            };
            t3.Identifier = j;
            var R2 = function(e4, t4, r3) {
              this.type = n2.Syntax.IfStatement, this.test = e4, this.consequent = t4, this.alternate = r3;
            };
            t3.IfStatement = R2;
            var z2 = function(e4, t4) {
              this.type = n2.Syntax.ImportDeclaration, this.specifiers = e4, this.source = t4;
            };
            t3.ImportDeclaration = z2;
            var U = function(e4) {
              this.type = n2.Syntax.ImportDefaultSpecifier, this.local = e4;
            };
            t3.ImportDefaultSpecifier = U;
            var G2 = function(e4) {
              this.type = n2.Syntax.ImportNamespaceSpecifier, this.local = e4;
            };
            t3.ImportNamespaceSpecifier = G2;
            var X2 = function(e4, t4) {
              this.type = n2.Syntax.ImportSpecifier, this.local = e4, this.imported = t4;
            };
            t3.ImportSpecifier = X2;
            var q2 = function(e4, t4) {
              this.type = n2.Syntax.LabeledStatement, this.label = e4, this.body = t4;
            };
            t3.LabeledStatement = q2;
            var W = function(e4, t4) {
              this.type = n2.Syntax.Literal, this.value = e4, this.raw = t4;
            };
            t3.Literal = W;
            var H3 = function(e4, t4) {
              this.type = n2.Syntax.MetaProperty, this.meta = e4, this.property = t4;
            };
            t3.MetaProperty = H3;
            var J = function(e4, t4, r3, i3, o2) {
              this.type = n2.Syntax.MethodDefinition, this.key = e4, this.computed = t4, this.value = r3, this.kind = i3, this.static = o2;
            };
            t3.MethodDefinition = J;
            var Y2 = function(e4) {
              this.type = n2.Syntax.Program, this.body = e4, this.sourceType = "module";
            };
            t3.Module = Y2;
            var V = function(e4, t4) {
              this.type = n2.Syntax.NewExpression, this.callee = e4, this.arguments = t4;
            };
            t3.NewExpression = V;
            var K2 = function(e4) {
              this.type = n2.Syntax.ObjectExpression, this.properties = e4;
            };
            t3.ObjectExpression = K2;
            var $ = function(e4) {
              this.type = n2.Syntax.ObjectPattern, this.properties = e4;
            };
            t3.ObjectPattern = $;
            var Q2 = function(e4, t4, r3, i3, o2, a4) {
              this.type = n2.Syntax.Property, this.key = t4, this.computed = r3, this.value = i3, this.kind = e4, this.method = o2, this.shorthand = a4;
            };
            t3.Property = Q2;
            var Z = function(e4, t4, r3, i3) {
              this.type = n2.Syntax.Literal, this.value = e4, this.raw = t4, this.regex = { pattern: r3, flags: i3 };
            };
            t3.RegexLiteral = Z;
            var ee = function(e4) {
              this.type = n2.Syntax.RestElement, this.argument = e4;
            };
            t3.RestElement = ee;
            var te = function(e4) {
              this.type = n2.Syntax.ReturnStatement, this.argument = e4;
            };
            t3.ReturnStatement = te;
            var re = function(e4) {
              this.type = n2.Syntax.Program, this.body = e4, this.sourceType = "script";
            };
            t3.Script = re;
            var ne = function(e4) {
              this.type = n2.Syntax.SequenceExpression, this.expressions = e4;
            };
            t3.SequenceExpression = ne;
            var ie = function(e4) {
              this.type = n2.Syntax.SpreadElement, this.argument = e4;
            };
            t3.SpreadElement = ie;
            var oe = function(e4, t4) {
              this.type = n2.Syntax.MemberExpression, this.computed = false, this.object = e4, this.property = t4;
            };
            t3.StaticMemberExpression = oe;
            var ae = function() {
              this.type = n2.Syntax.Super;
            };
            t3.Super = ae;
            var se = function(e4, t4) {
              this.type = n2.Syntax.SwitchCase, this.test = e4, this.consequent = t4;
            };
            t3.SwitchCase = se;
            var ue = function(e4, t4) {
              this.type = n2.Syntax.SwitchStatement, this.discriminant = e4, this.cases = t4;
            };
            t3.SwitchStatement = ue;
            var le = function(e4, t4) {
              this.type = n2.Syntax.TaggedTemplateExpression, this.tag = e4, this.quasi = t4;
            };
            t3.TaggedTemplateExpression = le;
            var ce = function(e4, t4) {
              this.type = n2.Syntax.TemplateElement, this.value = e4, this.tail = t4;
            };
            t3.TemplateElement = ce;
            var he = function(e4, t4) {
              this.type = n2.Syntax.TemplateLiteral, this.quasis = e4, this.expressions = t4;
            };
            t3.TemplateLiteral = he;
            var pe = function() {
              this.type = n2.Syntax.ThisExpression;
            };
            t3.ThisExpression = pe;
            var fe = function(e4) {
              this.type = n2.Syntax.ThrowStatement, this.argument = e4;
            };
            t3.ThrowStatement = fe;
            var de = function(e4, t4, r3) {
              this.type = n2.Syntax.TryStatement, this.block = e4, this.handler = t4, this.finalizer = r3;
            };
            t3.TryStatement = de;
            var me = function(e4, t4) {
              this.type = n2.Syntax.UnaryExpression, this.operator = e4, this.argument = t4, this.prefix = true;
            };
            t3.UnaryExpression = me;
            var ye = function(e4, t4, r3) {
              this.type = n2.Syntax.UpdateExpression, this.operator = e4, this.argument = t4, this.prefix = r3;
            };
            t3.UpdateExpression = ye;
            var ve = function(e4, t4) {
              this.type = n2.Syntax.VariableDeclaration, this.declarations = e4, this.kind = t4;
            };
            t3.VariableDeclaration = ve;
            var _e = function(e4, t4) {
              this.type = n2.Syntax.VariableDeclarator, this.id = e4, this.init = t4;
            };
            t3.VariableDeclarator = _e;
            var ge = function(e4, t4) {
              this.type = n2.Syntax.WhileStatement, this.test = e4, this.body = t4;
            };
            t3.WhileStatement = ge;
            var be = function(e4, t4) {
              this.type = n2.Syntax.WithStatement, this.object = e4, this.body = t4;
            };
            t3.WithStatement = be;
            var xe = function(e4, t4) {
              this.type = n2.Syntax.YieldExpression, this.argument = e4, this.delegate = t4;
            };
            t3.YieldExpression = xe;
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(9), i2 = r2(10), o = r2(11), a3 = r2(7), s3 = r2(12), u2 = r2(2), l = r2(13), c2 = function() {
              function e4(e5, t4, r3) {
                t4 === void 0 && (t4 = {}), this.config = { range: typeof t4.range == "boolean" && t4.range, loc: typeof t4.loc == "boolean" && t4.loc, source: null, tokens: typeof t4.tokens == "boolean" && t4.tokens, comment: typeof t4.comment == "boolean" && t4.comment, tolerant: typeof t4.tolerant == "boolean" && t4.tolerant }, this.config.loc && t4.source && t4.source !== null && (this.config.source = String(t4.source)), this.delegate = r3, this.errorHandler = new i2.ErrorHandler(), this.errorHandler.tolerant = this.config.tolerant, this.scanner = new s3.Scanner(e5, this.errorHandler), this.scanner.trackComment = this.config.comment, this.operatorPrecedence = { ")": 0, ";": 0, ",": 0, "=": 0, "]": 0, "||": 1, "&&": 2, "|": 3, "^": 4, "&": 5, "==": 6, "!=": 6, "===": 6, "!==": 6, "<": 7, ">": 7, "<=": 7, ">=": 7, "<<": 8, ">>": 8, ">>>": 8, "+": 9, "-": 9, "*": 11, "/": 11, "%": 11 }, this.lookahead = { type: 2, value: "", lineNumber: this.scanner.lineNumber, lineStart: 0, start: 0, end: 0 }, this.hasLineTerminator = false, this.context = { isModule: false, await: false, allowIn: true, allowStrictDirective: true, allowYield: true, firstCoverInitializedNameError: null, isAssignmentTarget: false, isBindingElement: false, inFunctionBody: false, inIteration: false, inSwitch: false, labelSet: {}, strict: false }, this.tokens = [], this.startMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.lastMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.nextToken(), this.lastMarker = { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }
              return e4.prototype.throwError = function(e5) {
                for (var t4 = [], r3 = 1; r3 < arguments.length; r3++)
                  t4[r3 - 1] = arguments[r3];
                var i3 = Array.prototype.slice.call(arguments, 1), o2 = e5.replace(/%(\d)/g, function(e6, t5) {
                  return n2.assert(t5 < i3.length, "Message reference must be in range"), i3[t5];
                }), a4 = this.lastMarker.index, s4 = this.lastMarker.line, u3 = this.lastMarker.column + 1;
                throw this.errorHandler.createError(a4, s4, u3, o2);
              }, e4.prototype.tolerateError = function(e5) {
                for (var t4 = [], r3 = 1; r3 < arguments.length; r3++)
                  t4[r3 - 1] = arguments[r3];
                var i3 = Array.prototype.slice.call(arguments, 1), o2 = e5.replace(/%(\d)/g, function(e6, t5) {
                  return n2.assert(t5 < i3.length, "Message reference must be in range"), i3[t5];
                }), a4 = this.lastMarker.index, s4 = this.scanner.lineNumber, u3 = this.lastMarker.column + 1;
                this.errorHandler.tolerateError(a4, s4, u3, o2);
              }, e4.prototype.unexpectedTokenError = function(e5, t4) {
                var r3, n3 = t4 || o.Messages.UnexpectedToken;
                if (e5 ? (t4 || (n3 = e5.type === 2 ? o.Messages.UnexpectedEOS : e5.type === 3 ? o.Messages.UnexpectedIdentifier : e5.type === 6 ? o.Messages.UnexpectedNumber : e5.type === 8 ? o.Messages.UnexpectedString : e5.type === 10 ? o.Messages.UnexpectedTemplate : o.Messages.UnexpectedToken, e5.type === 4 && (this.scanner.isFutureReservedWord(e5.value) ? n3 = o.Messages.UnexpectedReserved : this.context.strict && this.scanner.isStrictModeReservedWord(e5.value) && (n3 = o.Messages.StrictReservedWord))), r3 = e5.value) : r3 = "ILLEGAL", n3 = n3.replace("%0", r3), e5 && typeof e5.lineNumber == "number") {
                  var i3 = e5.start, a4 = e5.lineNumber, s4 = this.lastMarker.index - this.lastMarker.column, u3 = e5.start - s4 + 1;
                  return this.errorHandler.createError(i3, a4, u3, n3);
                }
                return i3 = this.lastMarker.index, a4 = this.lastMarker.line, u3 = this.lastMarker.column + 1, this.errorHandler.createError(i3, a4, u3, n3);
              }, e4.prototype.throwUnexpectedToken = function(e5, t4) {
                throw this.unexpectedTokenError(e5, t4);
              }, e4.prototype.tolerateUnexpectedToken = function(e5, t4) {
                this.errorHandler.tolerate(this.unexpectedTokenError(e5, t4));
              }, e4.prototype.collectComments = function() {
                if (this.config.comment) {
                  var e5 = this.scanner.scanComments();
                  if (e5.length > 0 && this.delegate)
                    for (var t4 = 0; t4 < e5.length; ++t4) {
                      var r3 = e5[t4], n3 = void 0;
                      n3 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: this.scanner.source.slice(r3.slice[0], r3.slice[1]) }, this.config.range && (n3.range = r3.range), this.config.loc && (n3.loc = r3.loc);
                      var i3 = { start: { line: r3.loc.start.line, column: r3.loc.start.column, offset: r3.range[0] }, end: { line: r3.loc.end.line, column: r3.loc.end.column, offset: r3.range[1] } };
                      this.delegate(n3, i3);
                    }
                } else
                  this.scanner.scanComments();
              }, e4.prototype.getTokenRaw = function(e5) {
                return this.scanner.source.slice(e5.start, e5.end);
              }, e4.prototype.convertToken = function(e5) {
                var t4 = { type: l.TokenName[e5.type], value: this.getTokenRaw(e5) };
                if (this.config.range && (t4.range = [e5.start, e5.end]), this.config.loc && (t4.loc = { start: { line: this.startMarker.line, column: this.startMarker.column }, end: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart } }), e5.type === 9) {
                  var r3 = e5.pattern, n3 = e5.flags;
                  t4.regex = { pattern: r3, flags: n3 };
                }
                return t4;
              }, e4.prototype.nextToken = function() {
                var e5 = this.lookahead;
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.collectComments(), this.scanner.index !== this.startMarker.index && (this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart);
                var t4 = this.scanner.lex();
                return this.hasLineTerminator = e5.lineNumber !== t4.lineNumber, t4 && this.context.strict && t4.type === 3 && this.scanner.isStrictModeReservedWord(t4.value) && (t4.type = 4), this.lookahead = t4, this.config.tokens && t4.type !== 2 && this.tokens.push(this.convertToken(t4)), e5;
              }, e4.prototype.nextRegexToken = function() {
                this.collectComments();
                var e5 = this.scanner.scanRegExp();
                return this.config.tokens && (this.tokens.pop(), this.tokens.push(this.convertToken(e5))), this.lookahead = e5, this.nextToken(), e5;
              }, e4.prototype.createNode = function() {
                return { index: this.startMarker.index, line: this.startMarker.line, column: this.startMarker.column };
              }, e4.prototype.startNode = function(e5, t4) {
                t4 === void 0 && (t4 = 0);
                var r3 = e5.start - e5.lineStart, n3 = e5.lineNumber;
                return r3 < 0 && (r3 += t4, n3--), { index: e5.start, line: n3, column: r3 };
              }, e4.prototype.finalize = function(e5, t4) {
                if (this.config.range && (t4.range = [e5.index, this.lastMarker.index]), this.config.loc && (t4.loc = { start: { line: e5.line, column: e5.column }, end: { line: this.lastMarker.line, column: this.lastMarker.column } }, this.config.source && (t4.loc.source = this.config.source)), this.delegate) {
                  var r3 = { start: { line: e5.line, column: e5.column, offset: e5.index }, end: { line: this.lastMarker.line, column: this.lastMarker.column, offset: this.lastMarker.index } };
                  this.delegate(t4, r3);
                }
                return t4;
              }, e4.prototype.expect = function(e5) {
                var t4 = this.nextToken();
                t4.type === 7 && t4.value === e5 || this.throwUnexpectedToken(t4);
              }, e4.prototype.expectCommaSeparator = function() {
                if (this.config.tolerant) {
                  var e5 = this.lookahead;
                  e5.type === 7 && e5.value === "," ? this.nextToken() : e5.type === 7 && e5.value === ";" ? (this.nextToken(), this.tolerateUnexpectedToken(e5)) : this.tolerateUnexpectedToken(e5, o.Messages.UnexpectedToken);
                } else
                  this.expect(",");
              }, e4.prototype.expectKeyword = function(e5) {
                var t4 = this.nextToken();
                t4.type === 4 && t4.value === e5 || this.throwUnexpectedToken(t4);
              }, e4.prototype.match = function(e5) {
                return this.lookahead.type === 7 && this.lookahead.value === e5;
              }, e4.prototype.matchKeyword = function(e5) {
                return this.lookahead.type === 4 && this.lookahead.value === e5;
              }, e4.prototype.matchContextualKeyword = function(e5) {
                return this.lookahead.type === 3 && this.lookahead.value === e5;
              }, e4.prototype.matchAssign = function() {
                if (this.lookahead.type !== 7)
                  return false;
                var e5 = this.lookahead.value;
                return e5 === "=" || e5 === "*=" || e5 === "**=" || e5 === "/=" || e5 === "%=" || e5 === "+=" || e5 === "-=" || e5 === "<<=" || e5 === ">>=" || e5 === ">>>=" || e5 === "&=" || e5 === "^=" || e5 === "|=";
              }, e4.prototype.isolateCoverGrammar = function(e5) {
                var t4 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i3 = e5.call(this);
                return this.context.firstCoverInitializedNameError !== null && this.throwUnexpectedToken(this.context.firstCoverInitializedNameError), this.context.isBindingElement = t4, this.context.isAssignmentTarget = r3, this.context.firstCoverInitializedNameError = n3, i3;
              }, e4.prototype.inheritCoverGrammar = function(e5) {
                var t4 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i3 = e5.call(this);
                return this.context.isBindingElement = this.context.isBindingElement && t4, this.context.isAssignmentTarget = this.context.isAssignmentTarget && r3, this.context.firstCoverInitializedNameError = n3 || this.context.firstCoverInitializedNameError, i3;
              }, e4.prototype.consumeSemicolon = function() {
                this.match(";") ? this.nextToken() : this.hasLineTerminator || (this.lookahead.type === 2 || this.match("}") || this.throwUnexpectedToken(this.lookahead), this.lastMarker.index = this.startMarker.index, this.lastMarker.line = this.startMarker.line, this.lastMarker.column = this.startMarker.column);
              }, e4.prototype.parsePrimaryExpression = function() {
                var e5, t4, r3, n3 = this.createNode();
                switch (this.lookahead.type) {
                  case 3:
                    (this.context.isModule || this.context.await) && this.lookahead.value === "await" && this.tolerateUnexpectedToken(this.lookahead), e5 = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(n3, new a3.Identifier(this.nextToken().value));
                    break;
                  case 6:
                  case 8:
                    this.context.strict && this.lookahead.octal && this.tolerateUnexpectedToken(this.lookahead, o.Messages.StrictOctalLiteral), this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t4 = this.nextToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.Literal(t4.value, r3));
                    break;
                  case 1:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t4 = this.nextToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.Literal(t4.value === "true", r3));
                    break;
                  case 5:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t4 = this.nextToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.Literal(null, r3));
                    break;
                  case 10:
                    e5 = this.parseTemplateLiteral();
                    break;
                  case 7:
                    switch (this.lookahead.value) {
                      case "(":
                        this.context.isBindingElement = false, e5 = this.inheritCoverGrammar(this.parseGroupExpression);
                        break;
                      case "[":
                        e5 = this.inheritCoverGrammar(this.parseArrayInitializer);
                        break;
                      case "{":
                        e5 = this.inheritCoverGrammar(this.parseObjectInitializer);
                        break;
                      case "/":
                      case "/=":
                        this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.scanner.index = this.startMarker.index, t4 = this.nextRegexToken(), r3 = this.getTokenRaw(t4), e5 = this.finalize(n3, new a3.RegexLiteral(t4.regex, r3, t4.pattern, t4.flags));
                        break;
                      default:
                        e5 = this.throwUnexpectedToken(this.nextToken());
                    }
                    break;
                  case 4:
                    !this.context.strict && this.context.allowYield && this.matchKeyword("yield") ? e5 = this.parseIdentifierName() : !this.context.strict && this.matchKeyword("let") ? e5 = this.finalize(n3, new a3.Identifier(this.nextToken().value)) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.matchKeyword("function") ? e5 = this.parseFunctionExpression() : this.matchKeyword("this") ? (this.nextToken(), e5 = this.finalize(n3, new a3.ThisExpression())) : e5 = this.matchKeyword("class") ? this.parseClassExpression() : this.throwUnexpectedToken(this.nextToken()));
                    break;
                  default:
                    e5 = this.throwUnexpectedToken(this.nextToken());
                }
                return e5;
              }, e4.prototype.parseSpreadElement = function() {
                var e5 = this.createNode();
                this.expect("...");
                var t4 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                return this.finalize(e5, new a3.SpreadElement(t4));
              }, e4.prototype.parseArrayInitializer = function() {
                var e5 = this.createNode(), t4 = [];
                for (this.expect("["); !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), t4.push(null);
                  else if (this.match("...")) {
                    var r3 = this.parseSpreadElement();
                    this.match("]") || (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.expect(",")), t4.push(r3);
                  } else
                    t4.push(this.inheritCoverGrammar(this.parseAssignmentExpression)), this.match("]") || this.expect(",");
                return this.expect("]"), this.finalize(e5, new a3.ArrayExpression(t4));
              }, e4.prototype.parsePropertyMethod = function(e5) {
                this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                var t4 = this.context.strict, r3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = e5.simple;
                var n3 = this.isolateCoverGrammar(this.parseFunctionSourceElements);
                return this.context.strict && e5.firstRestricted && this.tolerateUnexpectedToken(e5.firstRestricted, e5.message), this.context.strict && e5.stricted && this.tolerateUnexpectedToken(e5.stricted, e5.message), this.context.strict = t4, this.context.allowStrictDirective = r3, n3;
              }, e4.prototype.parsePropertyMethodFunction = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters(), n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, false));
              }, e4.prototype.parsePropertyMethodAsyncFunction = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield, r3 = this.context.await;
                this.context.allowYield = false, this.context.await = true;
                var n3 = this.parseFormalParameters(), i3 = this.parsePropertyMethod(n3);
                return this.context.allowYield = t4, this.context.await = r3, this.finalize(e5, new a3.AsyncFunctionExpression(null, n3.params, i3));
              }, e4.prototype.parseObjectPropertyKey = function() {
                var e5, t4 = this.createNode(), r3 = this.nextToken();
                switch (r3.type) {
                  case 8:
                  case 6:
                    this.context.strict && r3.octal && this.tolerateUnexpectedToken(r3, o.Messages.StrictOctalLiteral);
                    var n3 = this.getTokenRaw(r3);
                    e5 = this.finalize(t4, new a3.Literal(r3.value, n3));
                    break;
                  case 3:
                  case 1:
                  case 5:
                  case 4:
                    e5 = this.finalize(t4, new a3.Identifier(r3.value));
                    break;
                  case 7:
                    r3.value === "[" ? (e5 = this.isolateCoverGrammar(this.parseAssignmentExpression), this.expect("]")) : e5 = this.throwUnexpectedToken(r3);
                    break;
                  default:
                    e5 = this.throwUnexpectedToken(r3);
                }
                return e5;
              }, e4.prototype.isPropertyKey = function(e5, t4) {
                return e5.type === u2.Syntax.Identifier && e5.name === t4 || e5.type === u2.Syntax.Literal && e5.value === t4;
              }, e4.prototype.parseObjectProperty = function(e5) {
                var t4, r3 = this.createNode(), n3 = this.lookahead, i3 = null, s4 = null, u3 = false, l2 = false, c3 = false, h3 = false;
                if (n3.type === 3) {
                  var p = n3.value;
                  this.nextToken(), u3 = this.match("["), i3 = (h3 = !(this.hasLineTerminator || p !== "async" || this.match(":") || this.match("(") || this.match("*") || this.match(","))) ? this.parseObjectPropertyKey() : this.finalize(r3, new a3.Identifier(p));
                } else
                  this.match("*") ? this.nextToken() : (u3 = this.match("["), i3 = this.parseObjectPropertyKey());
                var f = this.qualifiedPropertyName(this.lookahead);
                if (n3.type === 3 && !h3 && n3.value === "get" && f)
                  t4 = "get", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), this.context.allowYield = false, s4 = this.parseGetterMethod();
                else if (n3.type === 3 && !h3 && n3.value === "set" && f)
                  t4 = "set", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseSetterMethod();
                else if (n3.type === 7 && n3.value === "*" && f)
                  t4 = "init", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseGeneratorMethod(), l2 = true;
                else if (i3 || this.throwUnexpectedToken(this.lookahead), t4 = "init", this.match(":") && !h3)
                  !u3 && this.isPropertyKey(i3, "__proto__") && (e5.value && this.tolerateError(o.Messages.DuplicateProtoProperty), e5.value = true), this.nextToken(), s4 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                else if (this.match("("))
                  s4 = h3 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true;
                else if (n3.type === 3)
                  if (p = this.finalize(r3, new a3.Identifier(n3.value)), this.match("=")) {
                    this.context.firstCoverInitializedNameError = this.lookahead, this.nextToken(), c3 = true;
                    var d3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    s4 = this.finalize(r3, new a3.AssignmentPattern(p, d3));
                  } else
                    c3 = true, s4 = p;
                else
                  this.throwUnexpectedToken(this.nextToken());
                return this.finalize(r3, new a3.Property(t4, i3, u3, s4, l2, c3));
              }, e4.prototype.parseObjectInitializer = function() {
                var e5 = this.createNode();
                this.expect("{");
                for (var t4 = [], r3 = { value: false }; !this.match("}"); )
                  t4.push(this.parseObjectProperty(r3)), this.match("}") || this.expectCommaSeparator();
                return this.expect("}"), this.finalize(e5, new a3.ObjectExpression(t4));
              }, e4.prototype.parseTemplateHead = function() {
                n2.assert(this.lookahead.head, "Template literal must start with a template head");
                var e5 = this.createNode(), t4 = this.nextToken(), r3 = t4.value, i3 = t4.cooked;
                return this.finalize(e5, new a3.TemplateElement({ raw: r3, cooked: i3 }, t4.tail));
              }, e4.prototype.parseTemplateElement = function() {
                this.lookahead.type !== 10 && this.throwUnexpectedToken();
                var e5 = this.createNode(), t4 = this.nextToken(), r3 = t4.value, n3 = t4.cooked;
                return this.finalize(e5, new a3.TemplateElement({ raw: r3, cooked: n3 }, t4.tail));
              }, e4.prototype.parseTemplateLiteral = function() {
                var e5 = this.createNode(), t4 = [], r3 = [], n3 = this.parseTemplateHead();
                for (r3.push(n3); !n3.tail; )
                  t4.push(this.parseExpression()), n3 = this.parseTemplateElement(), r3.push(n3);
                return this.finalize(e5, new a3.TemplateLiteral(r3, t4));
              }, e4.prototype.reinterpretExpressionAsPattern = function(e5) {
                switch (e5.type) {
                  case u2.Syntax.Identifier:
                  case u2.Syntax.MemberExpression:
                  case u2.Syntax.RestElement:
                  case u2.Syntax.AssignmentPattern:
                    break;
                  case u2.Syntax.SpreadElement:
                    e5.type = u2.Syntax.RestElement, this.reinterpretExpressionAsPattern(e5.argument);
                    break;
                  case u2.Syntax.ArrayExpression:
                    e5.type = u2.Syntax.ArrayPattern;
                    for (var t4 = 0; t4 < e5.elements.length; t4++)
                      e5.elements[t4] !== null && this.reinterpretExpressionAsPattern(e5.elements[t4]);
                    break;
                  case u2.Syntax.ObjectExpression:
                    for (e5.type = u2.Syntax.ObjectPattern, t4 = 0; t4 < e5.properties.length; t4++)
                      this.reinterpretExpressionAsPattern(e5.properties[t4].value);
                    break;
                  case u2.Syntax.AssignmentExpression:
                    e5.type = u2.Syntax.AssignmentPattern, delete e5.operator, this.reinterpretExpressionAsPattern(e5.left);
                }
              }, e4.prototype.parseGroupExpression = function() {
                var e5;
                if (this.expect("("), this.match(")"))
                  this.nextToken(), this.match("=>") || this.expect("=>"), e5 = { type: "ArrowParameterPlaceHolder", params: [], async: false };
                else {
                  var t4 = this.lookahead, r3 = [];
                  if (this.match("..."))
                    e5 = this.parseRestElement(r3), this.expect(")"), this.match("=>") || this.expect("=>"), e5 = { type: "ArrowParameterPlaceHolder", params: [e5], async: false };
                  else {
                    var n3 = false;
                    if (this.context.isBindingElement = true, e5 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.match(",")) {
                      var i3 = [];
                      for (this.context.isAssignmentTarget = false, i3.push(e5); this.lookahead.type !== 2 && this.match(","); ) {
                        if (this.nextToken(), this.match(")")) {
                          this.nextToken();
                          for (var o2 = 0; o2 < i3.length; o2++)
                            this.reinterpretExpressionAsPattern(i3[o2]);
                          n3 = true, e5 = { type: "ArrowParameterPlaceHolder", params: i3, async: false };
                        } else if (this.match("...")) {
                          for (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), i3.push(this.parseRestElement(r3)), this.expect(")"), this.match("=>") || this.expect("=>"), this.context.isBindingElement = false, o2 = 0; o2 < i3.length; o2++)
                            this.reinterpretExpressionAsPattern(i3[o2]);
                          n3 = true, e5 = { type: "ArrowParameterPlaceHolder", params: i3, async: false };
                        } else
                          i3.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                        if (n3)
                          break;
                      }
                      n3 || (e5 = this.finalize(this.startNode(t4), new a3.SequenceExpression(i3)));
                    }
                    if (!n3) {
                      if (this.expect(")"), this.match("=>") && (e5.type === u2.Syntax.Identifier && e5.name === "yield" && (n3 = true, e5 = { type: "ArrowParameterPlaceHolder", params: [e5], async: false }), !n3)) {
                        if (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), e5.type === u2.Syntax.SequenceExpression)
                          for (o2 = 0; o2 < e5.expressions.length; o2++)
                            this.reinterpretExpressionAsPattern(e5.expressions[o2]);
                        else
                          this.reinterpretExpressionAsPattern(e5);
                        e5 = { type: "ArrowParameterPlaceHolder", params: e5.type === u2.Syntax.SequenceExpression ? e5.expressions : [e5], async: false };
                      }
                      this.context.isBindingElement = false;
                    }
                  }
                }
                return e5;
              }, e4.prototype.parseArguments = function() {
                this.expect("(");
                var e5 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t4 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                    if (e5.push(t4), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e5;
              }, e4.prototype.isIdentifierName = function(e5) {
                return e5.type === 3 || e5.type === 4 || e5.type === 1 || e5.type === 5;
              }, e4.prototype.parseIdentifierName = function() {
                var e5 = this.createNode(), t4 = this.nextToken();
                return this.isIdentifierName(t4) || this.throwUnexpectedToken(t4), this.finalize(e5, new a3.Identifier(t4.value));
              }, e4.prototype.parseNewExpression = function() {
                var e5, t4 = this.createNode(), r3 = this.parseIdentifierName();
                if (n2.assert(r3.name === "new", "New expression must start with `new`"), this.match("."))
                  if (this.nextToken(), this.lookahead.type === 3 && this.context.inFunctionBody && this.lookahead.value === "target") {
                    var i3 = this.parseIdentifierName();
                    e5 = new a3.MetaProperty(r3, i3);
                  } else
                    this.throwUnexpectedToken(this.lookahead);
                else {
                  var o2 = this.isolateCoverGrammar(this.parseLeftHandSideExpression), s4 = this.match("(") ? this.parseArguments() : [];
                  e5 = new a3.NewExpression(o2, s4), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return this.finalize(t4, e5);
              }, e4.prototype.parseAsyncArgument = function() {
                var e5 = this.parseAssignmentExpression();
                return this.context.firstCoverInitializedNameError = null, e5;
              }, e4.prototype.parseAsyncArguments = function() {
                this.expect("(");
                var e5 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t4 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                    if (e5.push(t4), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e5;
              }, e4.prototype.parseLeftHandSideExpressionAllowCall = function() {
                var e5, t4 = this.lookahead, r3 = this.matchContextualKeyword("async"), n3 = this.context.allowIn;
                for (this.context.allowIn = true, this.matchKeyword("super") && this.context.inFunctionBody ? (e5 = this.createNode(), this.nextToken(), e5 = this.finalize(e5, new a3.Super()), this.match("(") || this.match(".") || this.match("[") || this.throwUnexpectedToken(this.lookahead)) : e5 = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match(".")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect(".");
                    var i3 = this.parseIdentifierName();
                    e5 = this.finalize(this.startNode(t4), new a3.StaticMemberExpression(e5, i3));
                  } else if (this.match("(")) {
                    var o2 = r3 && t4.lineNumber === this.lookahead.lineNumber;
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = false;
                    var s4 = o2 ? this.parseAsyncArguments() : this.parseArguments();
                    if (e5 = this.finalize(this.startNode(t4), new a3.CallExpression(e5, s4)), o2 && this.match("=>")) {
                      for (var u3 = 0; u3 < s4.length; ++u3)
                        this.reinterpretExpressionAsPattern(s4[u3]);
                      e5 = { type: "ArrowParameterPlaceHolder", params: s4, async: true };
                    }
                  } else if (this.match("["))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("["), i3 = this.isolateCoverGrammar(this.parseExpression), this.expect("]"), e5 = this.finalize(this.startNode(t4), new a3.ComputedMemberExpression(e5, i3));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var l2 = this.parseTemplateLiteral();
                    e5 = this.finalize(this.startNode(t4), new a3.TaggedTemplateExpression(e5, l2));
                  }
                return this.context.allowIn = n3, e5;
              }, e4.prototype.parseSuper = function() {
                var e5 = this.createNode();
                return this.expectKeyword("super"), this.match("[") || this.match(".") || this.throwUnexpectedToken(this.lookahead), this.finalize(e5, new a3.Super());
              }, e4.prototype.parseLeftHandSideExpression = function() {
                n2.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
                for (var e5 = this.startNode(this.lookahead), t4 = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match("[")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("[");
                    var r3 = this.isolateCoverGrammar(this.parseExpression);
                    this.expect("]"), t4 = this.finalize(e5, new a3.ComputedMemberExpression(t4, r3));
                  } else if (this.match("."))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("."), r3 = this.parseIdentifierName(), t4 = this.finalize(e5, new a3.StaticMemberExpression(t4, r3));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var i3 = this.parseTemplateLiteral();
                    t4 = this.finalize(e5, new a3.TaggedTemplateExpression(t4, i3));
                  }
                return t4;
              }, e4.prototype.parseUpdateExpression = function() {
                var e5, t4 = this.lookahead;
                if (this.match("++") || this.match("--")) {
                  var r3 = this.startNode(t4), n3 = this.nextToken();
                  e5 = this.inheritCoverGrammar(this.parseUnaryExpression), this.context.strict && e5.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(e5.name) && this.tolerateError(o.Messages.StrictLHSPrefix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment);
                  var i3 = true;
                  e5 = this.finalize(r3, new a3.UpdateExpression(n3.value, e5, i3)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else if (e5 = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall), !this.hasLineTerminator && this.lookahead.type === 7 && (this.match("++") || this.match("--"))) {
                  this.context.strict && e5.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(e5.name) && this.tolerateError(o.Messages.StrictLHSPostfix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var s4 = this.nextToken().value;
                  i3 = false, e5 = this.finalize(this.startNode(t4), new a3.UpdateExpression(s4, e5, i3));
                }
                return e5;
              }, e4.prototype.parseAwaitExpression = function() {
                var e5 = this.createNode();
                this.nextToken();
                var t4 = this.parseUnaryExpression();
                return this.finalize(e5, new a3.AwaitExpression(t4));
              }, e4.prototype.parseUnaryExpression = function() {
                var e5;
                if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                  var t4 = this.startNode(this.lookahead), r3 = this.nextToken();
                  e5 = this.inheritCoverGrammar(this.parseUnaryExpression), e5 = this.finalize(t4, new a3.UnaryExpression(r3.value, e5)), this.context.strict && e5.operator === "delete" && e5.argument.type === u2.Syntax.Identifier && this.tolerateError(o.Messages.StrictDelete), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else
                  e5 = this.context.await && this.matchContextualKeyword("await") ? this.parseAwaitExpression() : this.parseUpdateExpression();
                return e5;
              }, e4.prototype.parseExponentiationExpression = function() {
                var e5 = this.lookahead, t4 = this.inheritCoverGrammar(this.parseUnaryExpression);
                if (t4.type !== u2.Syntax.UnaryExpression && this.match("**")) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var r3 = t4, n3 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                  t4 = this.finalize(this.startNode(e5), new a3.BinaryExpression("**", r3, n3));
                }
                return t4;
              }, e4.prototype.binaryPrecedence = function(e5) {
                var t4 = e5.value;
                return e5.type === 7 ? this.operatorPrecedence[t4] || 0 : e5.type === 4 && (t4 === "instanceof" || this.context.allowIn && t4 === "in") ? 7 : 0;
              }, e4.prototype.parseBinaryExpression = function() {
                var e5 = this.lookahead, t4 = this.inheritCoverGrammar(this.parseExponentiationExpression), r3 = this.lookahead, n3 = this.binaryPrecedence(r3);
                if (n3 > 0) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  for (var i3 = [e5, this.lookahead], o2 = t4, s4 = this.isolateCoverGrammar(this.parseExponentiationExpression), u3 = [o2, r3.value, s4], l2 = [n3]; !((n3 = this.binaryPrecedence(this.lookahead)) <= 0); ) {
                    for (; u3.length > 2 && n3 <= l2[l2.length - 1]; ) {
                      s4 = u3.pop();
                      var c3 = u3.pop();
                      l2.pop(), o2 = u3.pop(), i3.pop();
                      var h3 = this.startNode(i3[i3.length - 1]);
                      u3.push(this.finalize(h3, new a3.BinaryExpression(c3, o2, s4)));
                    }
                    u3.push(this.nextToken().value), l2.push(n3), i3.push(this.lookahead), u3.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                  }
                  var p = u3.length - 1;
                  t4 = u3[p];
                  for (var f = i3.pop(); p > 1; ) {
                    var d3 = i3.pop(), m3 = f && f.lineStart;
                    h3 = this.startNode(d3, m3), c3 = u3[p - 1], t4 = this.finalize(h3, new a3.BinaryExpression(c3, u3[p - 2], t4)), p -= 2, f = d3;
                  }
                }
                return t4;
              }, e4.prototype.parseConditionalExpression = function() {
                var e5 = this.lookahead, t4 = this.inheritCoverGrammar(this.parseBinaryExpression);
                if (this.match("?")) {
                  this.nextToken();
                  var r3 = this.context.allowIn;
                  this.context.allowIn = true;
                  var n3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowIn = r3, this.expect(":");
                  var i3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  t4 = this.finalize(this.startNode(e5), new a3.ConditionalExpression(t4, n3, i3)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return t4;
              }, e4.prototype.checkPatternParam = function(e5, t4) {
                switch (t4.type) {
                  case u2.Syntax.Identifier:
                    this.validateParam(e5, t4, t4.name);
                    break;
                  case u2.Syntax.RestElement:
                    this.checkPatternParam(e5, t4.argument);
                    break;
                  case u2.Syntax.AssignmentPattern:
                    this.checkPatternParam(e5, t4.left);
                    break;
                  case u2.Syntax.ArrayPattern:
                    for (var r3 = 0; r3 < t4.elements.length; r3++)
                      t4.elements[r3] !== null && this.checkPatternParam(e5, t4.elements[r3]);
                    break;
                  case u2.Syntax.ObjectPattern:
                    for (r3 = 0; r3 < t4.properties.length; r3++)
                      this.checkPatternParam(e5, t4.properties[r3].value);
                }
                e5.simple = e5.simple && t4 instanceof a3.Identifier;
              }, e4.prototype.reinterpretAsCoverFormalsList = function(e5) {
                var t4, r3 = [e5], n3 = false;
                switch (e5.type) {
                  case u2.Syntax.Identifier:
                    break;
                  case "ArrowParameterPlaceHolder":
                    r3 = e5.params, n3 = e5.async;
                    break;
                  default:
                    return null;
                }
                t4 = { simple: true, paramSet: {} };
                for (var i3 = 0; i3 < r3.length; ++i3)
                  (a4 = r3[i3]).type === u2.Syntax.AssignmentPattern ? a4.right.type === u2.Syntax.YieldExpression && (a4.right.argument && this.throwUnexpectedToken(this.lookahead), a4.right.type = u2.Syntax.Identifier, a4.right.name = "yield", delete a4.right.argument, delete a4.right.delegate) : n3 && a4.type === u2.Syntax.Identifier && a4.name === "await" && this.throwUnexpectedToken(this.lookahead), this.checkPatternParam(t4, a4), r3[i3] = a4;
                if (this.context.strict || !this.context.allowYield)
                  for (i3 = 0; i3 < r3.length; ++i3) {
                    var a4;
                    (a4 = r3[i3]).type === u2.Syntax.YieldExpression && this.throwUnexpectedToken(this.lookahead);
                  }
                if (t4.message === o.Messages.StrictParamDupe) {
                  var s4 = this.context.strict ? t4.stricted : t4.firstRestricted;
                  this.throwUnexpectedToken(s4, t4.message);
                }
                return { simple: t4.simple, params: r3, stricted: t4.stricted, firstRestricted: t4.firstRestricted, message: t4.message };
              }, e4.prototype.parseAssignmentExpression = function() {
                var e5;
                if (!this.context.allowYield && this.matchKeyword("yield"))
                  e5 = this.parseYieldExpression();
                else {
                  var t4 = this.lookahead, r3 = t4;
                  if (e5 = this.parseConditionalExpression(), r3.type === 3 && r3.lineNumber === this.lookahead.lineNumber && r3.value === "async" && (this.lookahead.type === 3 || this.matchKeyword("yield"))) {
                    var n3 = this.parsePrimaryExpression();
                    this.reinterpretExpressionAsPattern(n3), e5 = { type: "ArrowParameterPlaceHolder", params: [n3], async: true };
                  }
                  if (e5.type === "ArrowParameterPlaceHolder" || this.match("=>")) {
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                    var i3 = e5.async, s4 = this.reinterpretAsCoverFormalsList(e5);
                    if (s4) {
                      this.hasLineTerminator && this.tolerateUnexpectedToken(this.lookahead), this.context.firstCoverInitializedNameError = null;
                      var l2 = this.context.strict, c3 = this.context.allowStrictDirective;
                      this.context.allowStrictDirective = s4.simple;
                      var h3 = this.context.allowYield, p = this.context.await;
                      this.context.allowYield = true, this.context.await = i3;
                      var f = this.startNode(t4);
                      this.expect("=>");
                      var d3 = void 0;
                      if (this.match("{")) {
                        var m3 = this.context.allowIn;
                        this.context.allowIn = true, d3 = this.parseFunctionSourceElements(), this.context.allowIn = m3;
                      } else
                        d3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      var y3 = d3.type !== u2.Syntax.BlockStatement;
                      this.context.strict && s4.firstRestricted && this.throwUnexpectedToken(s4.firstRestricted, s4.message), this.context.strict && s4.stricted && this.tolerateUnexpectedToken(s4.stricted, s4.message), e5 = i3 ? this.finalize(f, new a3.AsyncArrowFunctionExpression(s4.params, d3, y3)) : this.finalize(f, new a3.ArrowFunctionExpression(s4.params, d3, y3)), this.context.strict = l2, this.context.allowStrictDirective = c3, this.context.allowYield = h3, this.context.await = p;
                    }
                  } else if (this.matchAssign()) {
                    if (this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.strict && e5.type === u2.Syntax.Identifier) {
                      var v = e5;
                      this.scanner.isRestrictedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictLHSAssignment), this.scanner.isStrictModeReservedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord);
                    }
                    this.match("=") ? this.reinterpretExpressionAsPattern(e5) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false);
                    var _ = (r3 = this.nextToken()).value, g = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    e5 = this.finalize(this.startNode(t4), new a3.AssignmentExpression(_, e5, g)), this.context.firstCoverInitializedNameError = null;
                  }
                }
                return e5;
              }, e4.prototype.parseExpression = function() {
                var e5 = this.lookahead, t4 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                if (this.match(",")) {
                  var r3 = [];
                  for (r3.push(t4); this.lookahead.type !== 2 && this.match(","); )
                    this.nextToken(), r3.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                  t4 = this.finalize(this.startNode(e5), new a3.SequenceExpression(r3));
                }
                return t4;
              }, e4.prototype.parseStatementListItem = function() {
                var e5;
                if (this.context.isAssignmentTarget = true, this.context.isBindingElement = true, this.lookahead.type === 4)
                  switch (this.lookahead.value) {
                    case "export":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalExportDeclaration), e5 = this.parseExportDeclaration();
                      break;
                    case "import":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalImportDeclaration), e5 = this.parseImportDeclaration();
                      break;
                    case "const":
                      e5 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "function":
                      e5 = this.parseFunctionDeclaration();
                      break;
                    case "class":
                      e5 = this.parseClassDeclaration();
                      break;
                    case "let":
                      e5 = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
                      break;
                    default:
                      e5 = this.parseStatement();
                  }
                else
                  e5 = this.parseStatement();
                return e5;
              }, e4.prototype.parseBlock = function() {
                var e5 = this.createNode();
                this.expect("{");
                for (var t4 = []; !this.match("}"); )
                  t4.push(this.parseStatementListItem());
                return this.expect("}"), this.finalize(e5, new a3.BlockStatement(t4));
              }, e4.prototype.parseLexicalBinding = function(e5, t4) {
                var r3 = this.createNode(), n3 = this.parsePattern([], e5);
                this.context.strict && n3.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(n3.name) && this.tolerateError(o.Messages.StrictVarName);
                var i3 = null;
                return e5 === "const" ? this.matchKeyword("in") || this.matchContextualKeyword("of") || (this.match("=") ? (this.nextToken(), i3 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : this.throwError(o.Messages.DeclarationMissingInitializer, "const")) : (!t4.inFor && n3.type !== u2.Syntax.Identifier || this.match("=")) && (this.expect("="), i3 = this.isolateCoverGrammar(this.parseAssignmentExpression)), this.finalize(r3, new a3.VariableDeclarator(n3, i3));
              }, e4.prototype.parseBindingList = function(e5, t4) {
                for (var r3 = [this.parseLexicalBinding(e5, t4)]; this.match(","); )
                  this.nextToken(), r3.push(this.parseLexicalBinding(e5, t4));
                return r3;
              }, e4.prototype.isLexicalDeclaration = function() {
                var e5 = this.scanner.saveState();
                this.scanner.scanComments();
                var t4 = this.scanner.lex();
                return this.scanner.restoreState(e5), t4.type === 3 || t4.type === 7 && t4.value === "[" || t4.type === 7 && t4.value === "{" || t4.type === 4 && t4.value === "let" || t4.type === 4 && t4.value === "yield";
              }, e4.prototype.parseLexicalDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.nextToken().value;
                n2.assert(r3 === "let" || r3 === "const", "Lexical declaration must be either let or const");
                var i3 = this.parseBindingList(r3, e5);
                return this.consumeSemicolon(), this.finalize(t4, new a3.VariableDeclaration(i3, r3));
              }, e4.prototype.parseBindingRestElement = function(e5, t4) {
                var r3 = this.createNode();
                this.expect("...");
                var n3 = this.parsePattern(e5, t4);
                return this.finalize(r3, new a3.RestElement(n3));
              }, e4.prototype.parseArrayPattern = function(e5, t4) {
                var r3 = this.createNode();
                this.expect("[");
                for (var n3 = []; !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), n3.push(null);
                  else {
                    if (this.match("...")) {
                      n3.push(this.parseBindingRestElement(e5, t4));
                      break;
                    }
                    n3.push(this.parsePatternWithDefault(e5, t4)), this.match("]") || this.expect(",");
                  }
                return this.expect("]"), this.finalize(r3, new a3.ArrayPattern(n3));
              }, e4.prototype.parsePropertyPattern = function(e5, t4) {
                var r3, n3, i3 = this.createNode(), o2 = false, s4 = false;
                if (this.lookahead.type === 3) {
                  var u3 = this.lookahead;
                  r3 = this.parseVariableIdentifier();
                  var l2 = this.finalize(i3, new a3.Identifier(u3.value));
                  if (this.match("=")) {
                    e5.push(u3), s4 = true, this.nextToken();
                    var c3 = this.parseAssignmentExpression();
                    n3 = this.finalize(this.startNode(u3), new a3.AssignmentPattern(l2, c3));
                  } else
                    this.match(":") ? (this.expect(":"), n3 = this.parsePatternWithDefault(e5, t4)) : (e5.push(u3), s4 = true, n3 = l2);
                } else
                  o2 = this.match("["), r3 = this.parseObjectPropertyKey(), this.expect(":"), n3 = this.parsePatternWithDefault(e5, t4);
                return this.finalize(i3, new a3.Property("init", r3, o2, n3, false, s4));
              }, e4.prototype.parseObjectPattern = function(e5, t4) {
                var r3 = this.createNode(), n3 = [];
                for (this.expect("{"); !this.match("}"); )
                  n3.push(this.parsePropertyPattern(e5, t4)), this.match("}") || this.expect(",");
                return this.expect("}"), this.finalize(r3, new a3.ObjectPattern(n3));
              }, e4.prototype.parsePattern = function(e5, t4) {
                var r3;
                return this.match("[") ? r3 = this.parseArrayPattern(e5, t4) : this.match("{") ? r3 = this.parseObjectPattern(e5, t4) : (!this.matchKeyword("let") || t4 !== "const" && t4 !== "let" || this.tolerateUnexpectedToken(this.lookahead, o.Messages.LetInLexicalBinding), e5.push(this.lookahead), r3 = this.parseVariableIdentifier(t4)), r3;
              }, e4.prototype.parsePatternWithDefault = function(e5, t4) {
                var r3 = this.lookahead, n3 = this.parsePattern(e5, t4);
                if (this.match("=")) {
                  this.nextToken();
                  var i3 = this.context.allowYield;
                  this.context.allowYield = true;
                  var o2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowYield = i3, n3 = this.finalize(this.startNode(r3), new a3.AssignmentPattern(n3, o2));
                }
                return n3;
              }, e4.prototype.parseVariableIdentifier = function(e5) {
                var t4 = this.createNode(), r3 = this.nextToken();
                return r3.type === 4 && r3.value === "yield" ? this.context.strict ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : this.context.allowYield || this.throwUnexpectedToken(r3) : r3.type !== 3 ? this.context.strict && r3.type === 4 && this.scanner.isStrictModeReservedWord(r3.value) ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : (this.context.strict || r3.value !== "let" || e5 !== "var") && this.throwUnexpectedToken(r3) : (this.context.isModule || this.context.await) && r3.type === 3 && r3.value === "await" && this.tolerateUnexpectedToken(r3), this.finalize(t4, new a3.Identifier(r3.value));
              }, e4.prototype.parseVariableDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.parsePattern([], "var");
                this.context.strict && r3.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictVarName);
                var n3 = null;
                return this.match("=") ? (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : r3.type === u2.Syntax.Identifier || e5.inFor || this.expect("="), this.finalize(t4, new a3.VariableDeclarator(r3, n3));
              }, e4.prototype.parseVariableDeclarationList = function(e5) {
                var t4 = { inFor: e5.inFor }, r3 = [];
                for (r3.push(this.parseVariableDeclaration(t4)); this.match(","); )
                  this.nextToken(), r3.push(this.parseVariableDeclaration(t4));
                return r3;
              }, e4.prototype.parseVariableStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("var");
                var t4 = this.parseVariableDeclarationList({ inFor: false });
                return this.consumeSemicolon(), this.finalize(e5, new a3.VariableDeclaration(t4, "var"));
              }, e4.prototype.parseEmptyStatement = function() {
                var e5 = this.createNode();
                return this.expect(";"), this.finalize(e5, new a3.EmptyStatement());
              }, e4.prototype.parseExpressionStatement = function() {
                var e5 = this.createNode(), t4 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e5, new a3.ExpressionStatement(t4));
              }, e4.prototype.parseIfClause = function() {
                return this.context.strict && this.matchKeyword("function") && this.tolerateError(o.Messages.StrictFunction), this.parseStatement();
              }, e4.prototype.parseIfStatement = function() {
                var e5, t4 = this.createNode(), r3 = null;
                this.expectKeyword("if"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e5 = this.finalize(this.createNode(), new a3.EmptyStatement())) : (this.expect(")"), e5 = this.parseIfClause(), this.matchKeyword("else") && (this.nextToken(), r3 = this.parseIfClause())), this.finalize(t4, new a3.IfStatement(n3, e5, r3));
              }, e4.prototype.parseDoWhileStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("do");
                var t4 = this.context.inIteration;
                this.context.inIteration = true;
                var r3 = this.parseStatement();
                this.context.inIteration = t4, this.expectKeyword("while"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? this.tolerateUnexpectedToken(this.nextToken()) : (this.expect(")"), this.match(";") && this.nextToken()), this.finalize(e5, new a3.DoWhileStatement(r3, n3));
              }, e4.prototype.parseWhileStatement = function() {
                var e5, t4 = this.createNode();
                this.expectKeyword("while"), this.expect("(");
                var r3 = this.parseExpression();
                if (!this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), e5 = this.finalize(this.createNode(), new a3.EmptyStatement());
                else {
                  this.expect(")");
                  var n3 = this.context.inIteration;
                  this.context.inIteration = true, e5 = this.parseStatement(), this.context.inIteration = n3;
                }
                return this.finalize(t4, new a3.WhileStatement(r3, e5));
              }, e4.prototype.parseForStatement = function() {
                var e5, t4, r3, n3 = null, i3 = null, s4 = null, l2 = true, c3 = this.createNode();
                if (this.expectKeyword("for"), this.expect("("), this.match(";"))
                  this.nextToken();
                else if (this.matchKeyword("var")) {
                  n3 = this.createNode(), this.nextToken();
                  var h3 = this.context.allowIn;
                  this.context.allowIn = false;
                  var p = this.parseVariableDeclarationList({ inFor: true });
                  if (this.context.allowIn = h3, p.length === 1 && this.matchKeyword("in")) {
                    var f = p[0];
                    f.init && (f.id.type === u2.Syntax.ArrayPattern || f.id.type === u2.Syntax.ObjectPattern || this.context.strict) && this.tolerateError(o.Messages.ForInOfLoopInitializer, "for-in"), n3 = this.finalize(n3, new a3.VariableDeclaration(p, "var")), this.nextToken(), e5 = n3, t4 = this.parseExpression(), n3 = null;
                  } else
                    p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a3.VariableDeclaration(p, "var")), this.nextToken(), e5 = n3, t4 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (n3 = this.finalize(n3, new a3.VariableDeclaration(p, "var")), this.expect(";"));
                } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                  n3 = this.createNode();
                  var d3 = this.nextToken().value;
                  this.context.strict || this.lookahead.value !== "in" ? (h3 = this.context.allowIn, this.context.allowIn = false, p = this.parseBindingList(d3, { inFor: true }), this.context.allowIn = h3, p.length === 1 && p[0].init === null && this.matchKeyword("in") ? (n3 = this.finalize(n3, new a3.VariableDeclaration(p, d3)), this.nextToken(), e5 = n3, t4 = this.parseExpression(), n3 = null) : p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a3.VariableDeclaration(p, d3)), this.nextToken(), e5 = n3, t4 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (this.consumeSemicolon(), n3 = this.finalize(n3, new a3.VariableDeclaration(p, d3)))) : (n3 = this.finalize(n3, new a3.Identifier(d3)), this.nextToken(), e5 = n3, t4 = this.parseExpression(), n3 = null);
                } else {
                  var m3 = this.lookahead;
                  if (h3 = this.context.allowIn, this.context.allowIn = false, n3 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.context.allowIn = h3, this.matchKeyword("in"))
                    this.context.isAssignmentTarget && n3.type !== u2.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForIn), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e5 = n3, t4 = this.parseExpression(), n3 = null;
                  else if (this.matchContextualKeyword("of"))
                    this.context.isAssignmentTarget && n3.type !== u2.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForLoop), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e5 = n3, t4 = this.parseAssignmentExpression(), n3 = null, l2 = false;
                  else {
                    if (this.match(",")) {
                      for (var y3 = [n3]; this.match(","); )
                        this.nextToken(), y3.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                      n3 = this.finalize(this.startNode(m3), new a3.SequenceExpression(y3));
                    }
                    this.expect(";");
                  }
                }
                if (e5 === void 0 && (this.match(";") || (i3 = this.parseExpression()), this.expect(";"), this.match(")") || (s4 = this.parseExpression())), !this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), r3 = this.finalize(this.createNode(), new a3.EmptyStatement());
                else {
                  this.expect(")");
                  var v = this.context.inIteration;
                  this.context.inIteration = true, r3 = this.isolateCoverGrammar(this.parseStatement), this.context.inIteration = v;
                }
                return e5 === void 0 ? this.finalize(c3, new a3.ForStatement(n3, i3, s4, r3)) : l2 ? this.finalize(c3, new a3.ForInStatement(e5, t4, r3)) : this.finalize(c3, new a3.ForOfStatement(e5, t4, r3));
              }, e4.prototype.parseContinueStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("continue");
                var t4 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier();
                  t4 = r3;
                  var n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name);
                }
                return this.consumeSemicolon(), t4 !== null || this.context.inIteration || this.throwError(o.Messages.IllegalContinue), this.finalize(e5, new a3.ContinueStatement(t4));
              }, e4.prototype.parseBreakStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("break");
                var t4 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier(), n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name), t4 = r3;
                }
                return this.consumeSemicolon(), t4 !== null || this.context.inIteration || this.context.inSwitch || this.throwError(o.Messages.IllegalBreak), this.finalize(e5, new a3.BreakStatement(t4));
              }, e4.prototype.parseReturnStatement = function() {
                this.context.inFunctionBody || this.tolerateError(o.Messages.IllegalReturn);
                var e5 = this.createNode();
                this.expectKeyword("return");
                var t4 = (this.match(";") || this.match("}") || this.hasLineTerminator || this.lookahead.type === 2) && this.lookahead.type !== 8 && this.lookahead.type !== 10 ? null : this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e5, new a3.ReturnStatement(t4));
              }, e4.prototype.parseWithStatement = function() {
                this.context.strict && this.tolerateError(o.Messages.StrictModeWith);
                var e5, t4 = this.createNode();
                this.expectKeyword("with"), this.expect("(");
                var r3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e5 = this.finalize(this.createNode(), new a3.EmptyStatement())) : (this.expect(")"), e5 = this.parseStatement()), this.finalize(t4, new a3.WithStatement(r3, e5));
              }, e4.prototype.parseSwitchCase = function() {
                var e5, t4 = this.createNode();
                this.matchKeyword("default") ? (this.nextToken(), e5 = null) : (this.expectKeyword("case"), e5 = this.parseExpression()), this.expect(":");
                for (var r3 = []; !(this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")); )
                  r3.push(this.parseStatementListItem());
                return this.finalize(t4, new a3.SwitchCase(e5, r3));
              }, e4.prototype.parseSwitchStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("switch"), this.expect("(");
                var t4 = this.parseExpression();
                this.expect(")");
                var r3 = this.context.inSwitch;
                this.context.inSwitch = true;
                var n3 = [], i3 = false;
                for (this.expect("{"); !this.match("}"); ) {
                  var s4 = this.parseSwitchCase();
                  s4.test === null && (i3 && this.throwError(o.Messages.MultipleDefaultsInSwitch), i3 = true), n3.push(s4);
                }
                return this.expect("}"), this.context.inSwitch = r3, this.finalize(e5, new a3.SwitchStatement(t4, n3));
              }, e4.prototype.parseLabelledStatement = function() {
                var e5, t4 = this.createNode(), r3 = this.parseExpression();
                if (r3.type === u2.Syntax.Identifier && this.match(":")) {
                  this.nextToken();
                  var n3 = r3, i3 = "$" + n3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, i3) && this.throwError(o.Messages.Redeclaration, "Label", n3.name), this.context.labelSet[i3] = true;
                  var s4 = void 0;
                  if (this.matchKeyword("class"))
                    this.tolerateUnexpectedToken(this.lookahead), s4 = this.parseClassDeclaration();
                  else if (this.matchKeyword("function")) {
                    var l2 = this.lookahead, c3 = this.parseFunctionDeclaration();
                    this.context.strict ? this.tolerateUnexpectedToken(l2, o.Messages.StrictFunction) : c3.generator && this.tolerateUnexpectedToken(l2, o.Messages.GeneratorInLegacyContext), s4 = c3;
                  } else
                    s4 = this.parseStatement();
                  delete this.context.labelSet[i3], e5 = new a3.LabeledStatement(n3, s4);
                } else
                  this.consumeSemicolon(), e5 = new a3.ExpressionStatement(r3);
                return this.finalize(t4, e5);
              }, e4.prototype.parseThrowStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("throw"), this.hasLineTerminator && this.throwError(o.Messages.NewlineAfterThrow);
                var t4 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e5, new a3.ThrowStatement(t4));
              }, e4.prototype.parseCatchClause = function() {
                var e5 = this.createNode();
                this.expectKeyword("catch"), this.expect("("), this.match(")") && this.throwUnexpectedToken(this.lookahead);
                for (var t4 = [], r3 = this.parsePattern(t4), n3 = {}, i3 = 0; i3 < t4.length; i3++) {
                  var s4 = "$" + t4[i3].value;
                  Object.prototype.hasOwnProperty.call(n3, s4) && this.tolerateError(o.Messages.DuplicateBinding, t4[i3].value), n3[s4] = true;
                }
                this.context.strict && r3.type === u2.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictCatchVariable), this.expect(")");
                var l2 = this.parseBlock();
                return this.finalize(e5, new a3.CatchClause(r3, l2));
              }, e4.prototype.parseFinallyClause = function() {
                return this.expectKeyword("finally"), this.parseBlock();
              }, e4.prototype.parseTryStatement = function() {
                var e5 = this.createNode();
                this.expectKeyword("try");
                var t4 = this.parseBlock(), r3 = this.matchKeyword("catch") ? this.parseCatchClause() : null, n3 = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
                return r3 || n3 || this.throwError(o.Messages.NoCatchOrFinally), this.finalize(e5, new a3.TryStatement(t4, r3, n3));
              }, e4.prototype.parseDebuggerStatement = function() {
                var e5 = this.createNode();
                return this.expectKeyword("debugger"), this.consumeSemicolon(), this.finalize(e5, new a3.DebuggerStatement());
              }, e4.prototype.parseStatement = function() {
                var e5;
                switch (this.lookahead.type) {
                  case 1:
                  case 5:
                  case 6:
                  case 8:
                  case 10:
                  case 9:
                    e5 = this.parseExpressionStatement();
                    break;
                  case 7:
                    var t4 = this.lookahead.value;
                    e5 = t4 === "{" ? this.parseBlock() : t4 === "(" ? this.parseExpressionStatement() : t4 === ";" ? this.parseEmptyStatement() : this.parseExpressionStatement();
                    break;
                  case 3:
                    e5 = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                    break;
                  case 4:
                    switch (this.lookahead.value) {
                      case "break":
                        e5 = this.parseBreakStatement();
                        break;
                      case "continue":
                        e5 = this.parseContinueStatement();
                        break;
                      case "debugger":
                        e5 = this.parseDebuggerStatement();
                        break;
                      case "do":
                        e5 = this.parseDoWhileStatement();
                        break;
                      case "for":
                        e5 = this.parseForStatement();
                        break;
                      case "function":
                        e5 = this.parseFunctionDeclaration();
                        break;
                      case "if":
                        e5 = this.parseIfStatement();
                        break;
                      case "return":
                        e5 = this.parseReturnStatement();
                        break;
                      case "switch":
                        e5 = this.parseSwitchStatement();
                        break;
                      case "throw":
                        e5 = this.parseThrowStatement();
                        break;
                      case "try":
                        e5 = this.parseTryStatement();
                        break;
                      case "var":
                        e5 = this.parseVariableStatement();
                        break;
                      case "while":
                        e5 = this.parseWhileStatement();
                        break;
                      case "with":
                        e5 = this.parseWithStatement();
                        break;
                      default:
                        e5 = this.parseExpressionStatement();
                    }
                    break;
                  default:
                    e5 = this.throwUnexpectedToken(this.lookahead);
                }
                return e5;
              }, e4.prototype.parseFunctionSourceElements = function() {
                var e5 = this.createNode();
                this.expect("{");
                var t4 = this.parseDirectivePrologues(), r3 = this.context.labelSet, n3 = this.context.inIteration, i3 = this.context.inSwitch, o2 = this.context.inFunctionBody;
                for (this.context.labelSet = {}, this.context.inIteration = false, this.context.inSwitch = false, this.context.inFunctionBody = true; this.lookahead.type !== 2 && !this.match("}"); )
                  t4.push(this.parseStatementListItem());
                return this.expect("}"), this.context.labelSet = r3, this.context.inIteration = n3, this.context.inSwitch = i3, this.context.inFunctionBody = o2, this.finalize(e5, new a3.BlockStatement(t4));
              }, e4.prototype.validateParam = function(e5, t4, r3) {
                var n3 = "$" + r3;
                this.context.strict ? (this.scanner.isRestrictedWord(r3) && (e5.stricted = t4, e5.message = o.Messages.StrictParamName), Object.prototype.hasOwnProperty.call(e5.paramSet, n3) && (e5.stricted = t4, e5.message = o.Messages.StrictParamDupe)) : e5.firstRestricted || (this.scanner.isRestrictedWord(r3) ? (e5.firstRestricted = t4, e5.message = o.Messages.StrictParamName) : this.scanner.isStrictModeReservedWord(r3) ? (e5.firstRestricted = t4, e5.message = o.Messages.StrictReservedWord) : Object.prototype.hasOwnProperty.call(e5.paramSet, n3) && (e5.stricted = t4, e5.message = o.Messages.StrictParamDupe)), typeof Object.defineProperty == "function" ? Object.defineProperty(e5.paramSet, n3, { value: true, enumerable: true, writable: true, configurable: true }) : e5.paramSet[n3] = true;
              }, e4.prototype.parseRestElement = function(e5) {
                var t4 = this.createNode();
                this.expect("...");
                var r3 = this.parsePattern(e5);
                return this.match("=") && this.throwError(o.Messages.DefaultRestParameter), this.match(")") || this.throwError(o.Messages.ParameterAfterRestParameter), this.finalize(t4, new a3.RestElement(r3));
              }, e4.prototype.parseFormalParameter = function(e5) {
                for (var t4 = [], r3 = this.match("...") ? this.parseRestElement(t4) : this.parsePatternWithDefault(t4), n3 = 0; n3 < t4.length; n3++)
                  this.validateParam(e5, t4[n3], t4[n3].value);
                e5.simple = e5.simple && r3 instanceof a3.Identifier, e5.params.push(r3);
              }, e4.prototype.parseFormalParameters = function(e5) {
                var t4;
                if (t4 = { simple: true, params: [], firstRestricted: e5 }, this.expect("("), !this.match(")"))
                  for (t4.paramSet = {}; this.lookahead.type !== 2 && (this.parseFormalParameter(t4), !this.match(")")) && (this.expect(","), !this.match(")")); )
                    ;
                return this.expect(")"), { simple: t4.simple, params: t4.params, stricted: t4.stricted, firstRestricted: t4.firstRestricted, message: t4.message };
              }, e4.prototype.matchAsyncFunction = function() {
                var e5 = this.matchContextualKeyword("async");
                if (e5) {
                  var t4 = this.scanner.saveState();
                  this.scanner.scanComments();
                  var r3 = this.scanner.lex();
                  this.scanner.restoreState(t4), e5 = t4.lineNumber === r3.lineNumber && r3.type === 4 && r3.value === "function";
                }
                return e5;
              }, e4.prototype.parseFunctionDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.matchContextualKeyword("async");
                r3 && this.nextToken(), this.expectKeyword("function");
                var n3, i3 = !r3 && this.match("*");
                i3 && this.nextToken();
                var s4 = null, u3 = null;
                if (!e5 || !this.match("(")) {
                  var l2 = this.lookahead;
                  s4 = this.parseVariableIdentifier(), this.context.strict ? this.scanner.isRestrictedWord(l2.value) && this.tolerateUnexpectedToken(l2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(l2.value) ? (u3 = l2, n3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(l2.value) && (u3 = l2, n3 = o.Messages.StrictReservedWord);
                }
                var c3 = this.context.await, h3 = this.context.allowYield;
                this.context.await = r3, this.context.allowYield = !i3;
                var p = this.parseFormalParameters(u3), f = p.params, d3 = p.stricted;
                u3 = p.firstRestricted, p.message && (n3 = p.message);
                var m3 = this.context.strict, y3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = p.simple;
                var v = this.parseFunctionSourceElements();
                return this.context.strict && u3 && this.throwUnexpectedToken(u3, n3), this.context.strict && d3 && this.tolerateUnexpectedToken(d3, n3), this.context.strict = m3, this.context.allowStrictDirective = y3, this.context.await = c3, this.context.allowYield = h3, r3 ? this.finalize(t4, new a3.AsyncFunctionDeclaration(s4, f, v)) : this.finalize(t4, new a3.FunctionDeclaration(s4, f, v, i3));
              }, e4.prototype.parseFunctionExpression = function() {
                var e5 = this.createNode(), t4 = this.matchContextualKeyword("async");
                t4 && this.nextToken(), this.expectKeyword("function");
                var r3, n3 = !t4 && this.match("*");
                n3 && this.nextToken();
                var i3, s4 = null, u3 = this.context.await, l2 = this.context.allowYield;
                if (this.context.await = t4, this.context.allowYield = !n3, !this.match("(")) {
                  var c3 = this.lookahead;
                  s4 = this.context.strict || n3 || !this.matchKeyword("yield") ? this.parseVariableIdentifier() : this.parseIdentifierName(), this.context.strict ? this.scanner.isRestrictedWord(c3.value) && this.tolerateUnexpectedToken(c3, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(c3.value) ? (i3 = c3, r3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(c3.value) && (i3 = c3, r3 = o.Messages.StrictReservedWord);
                }
                var h3 = this.parseFormalParameters(i3), p = h3.params, f = h3.stricted;
                i3 = h3.firstRestricted, h3.message && (r3 = h3.message);
                var d3 = this.context.strict, m3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = h3.simple;
                var y3 = this.parseFunctionSourceElements();
                return this.context.strict && i3 && this.throwUnexpectedToken(i3, r3), this.context.strict && f && this.tolerateUnexpectedToken(f, r3), this.context.strict = d3, this.context.allowStrictDirective = m3, this.context.await = u3, this.context.allowYield = l2, t4 ? this.finalize(e5, new a3.AsyncFunctionExpression(s4, p, y3)) : this.finalize(e5, new a3.FunctionExpression(s4, p, y3, n3));
              }, e4.prototype.parseDirective = function() {
                var e5 = this.lookahead, t4 = this.createNode(), r3 = this.parseExpression(), n3 = r3.type === u2.Syntax.Literal ? this.getTokenRaw(e5).slice(1, -1) : null;
                return this.consumeSemicolon(), this.finalize(t4, n3 ? new a3.Directive(r3, n3) : new a3.ExpressionStatement(r3));
              }, e4.prototype.parseDirectivePrologues = function() {
                for (var e5 = null, t4 = []; ; ) {
                  var r3 = this.lookahead;
                  if (r3.type !== 8)
                    break;
                  var n3 = this.parseDirective();
                  t4.push(n3);
                  var i3 = n3.directive;
                  if (typeof i3 != "string")
                    break;
                  i3 === "use strict" ? (this.context.strict = true, e5 && this.tolerateUnexpectedToken(e5, o.Messages.StrictOctalLiteral), this.context.allowStrictDirective || this.tolerateUnexpectedToken(r3, o.Messages.IllegalLanguageModeDirective)) : !e5 && r3.octal && (e5 = r3);
                }
                return t4;
              }, e4.prototype.qualifiedPropertyName = function(e5) {
                switch (e5.type) {
                  case 3:
                  case 8:
                  case 1:
                  case 5:
                  case 6:
                  case 4:
                    return true;
                  case 7:
                    return e5.value === "[";
                }
                return false;
              }, e4.prototype.parseGetterMethod = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length > 0 && this.tolerateError(o.Messages.BadGetterArity);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, false));
              }, e4.prototype.parseSetterMethod = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length !== 1 ? this.tolerateError(o.Messages.BadSetterArity) : r3.params[0] instanceof a3.RestElement && this.tolerateError(o.Messages.BadSetterRestParameter);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, false));
              }, e4.prototype.parseGeneratorMethod = function() {
                var e5 = this.createNode(), t4 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                this.context.allowYield = false;
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t4, this.finalize(e5, new a3.FunctionExpression(null, r3.params, n3, true));
              }, e4.prototype.isStartOfExpression = function() {
                var e5 = true, t4 = this.lookahead.value;
                switch (this.lookahead.type) {
                  case 7:
                    e5 = t4 === "[" || t4 === "(" || t4 === "{" || t4 === "+" || t4 === "-" || t4 === "!" || t4 === "~" || t4 === "++" || t4 === "--" || t4 === "/" || t4 === "/=";
                    break;
                  case 4:
                    e5 = t4 === "class" || t4 === "delete" || t4 === "function" || t4 === "let" || t4 === "new" || t4 === "super" || t4 === "this" || t4 === "typeof" || t4 === "void" || t4 === "yield";
                }
                return e5;
              }, e4.prototype.parseYieldExpression = function() {
                var e5 = this.createNode();
                this.expectKeyword("yield");
                var t4 = null, r3 = false;
                if (!this.hasLineTerminator) {
                  var n3 = this.context.allowYield;
                  this.context.allowYield = false, (r3 = this.match("*")) ? (this.nextToken(), t4 = this.parseAssignmentExpression()) : this.isStartOfExpression() && (t4 = this.parseAssignmentExpression()), this.context.allowYield = n3;
                }
                return this.finalize(e5, new a3.YieldExpression(t4, r3));
              }, e4.prototype.parseClassElement = function(e5) {
                var t4 = this.lookahead, r3 = this.createNode(), n3 = "", i3 = null, s4 = null, u3 = false, l2 = false, c3 = false, h3 = false;
                if (this.match("*"))
                  this.nextToken();
                else if (u3 = this.match("["), (i3 = this.parseObjectPropertyKey()).name === "static" && (this.qualifiedPropertyName(this.lookahead) || this.match("*")) && (t4 = this.lookahead, c3 = true, u3 = this.match("["), this.match("*") ? this.nextToken() : i3 = this.parseObjectPropertyKey()), t4.type === 3 && !this.hasLineTerminator && t4.value === "async") {
                  var p = this.lookahead.value;
                  p !== ":" && p !== "(" && p !== "*" && (h3 = true, t4 = this.lookahead, i3 = this.parseObjectPropertyKey(), t4.type === 3 && t4.value === "constructor" && this.tolerateUnexpectedToken(t4, o.Messages.ConstructorIsAsync));
                }
                var f = this.qualifiedPropertyName(this.lookahead);
                return t4.type === 3 ? t4.value === "get" && f ? (n3 = "get", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), this.context.allowYield = false, s4 = this.parseGetterMethod()) : t4.value === "set" && f && (n3 = "set", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseSetterMethod()) : t4.type === 7 && t4.value === "*" && f && (n3 = "init", u3 = this.match("["), i3 = this.parseObjectPropertyKey(), s4 = this.parseGeneratorMethod(), l2 = true), !n3 && i3 && this.match("(") && (n3 = "init", s4 = h3 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true), n3 || this.throwUnexpectedToken(this.lookahead), n3 === "init" && (n3 = "method"), u3 || (c3 && this.isPropertyKey(i3, "prototype") && this.throwUnexpectedToken(t4, o.Messages.StaticPrototype), !c3 && this.isPropertyKey(i3, "constructor") && ((n3 !== "method" || !l2 || s4 && s4.generator) && this.throwUnexpectedToken(t4, o.Messages.ConstructorSpecialMethod), e5.value ? this.throwUnexpectedToken(t4, o.Messages.DuplicateConstructor) : e5.value = true, n3 = "constructor")), this.finalize(r3, new a3.MethodDefinition(i3, u3, s4, n3, c3));
              }, e4.prototype.parseClassElementList = function() {
                var e5 = [], t4 = { value: false };
                for (this.expect("{"); !this.match("}"); )
                  this.match(";") ? this.nextToken() : e5.push(this.parseClassElement(t4));
                return this.expect("}"), e5;
              }, e4.prototype.parseClassBody = function() {
                var e5 = this.createNode(), t4 = this.parseClassElementList();
                return this.finalize(e5, new a3.ClassBody(t4));
              }, e4.prototype.parseClassDeclaration = function(e5) {
                var t4 = this.createNode(), r3 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var n3 = e5 && this.lookahead.type !== 3 ? null : this.parseVariableIdentifier(), i3 = null;
                this.matchKeyword("extends") && (this.nextToken(), i3 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var o2 = this.parseClassBody();
                return this.context.strict = r3, this.finalize(t4, new a3.ClassDeclaration(n3, i3, o2));
              }, e4.prototype.parseClassExpression = function() {
                var e5 = this.createNode(), t4 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var r3 = this.lookahead.type === 3 ? this.parseVariableIdentifier() : null, n3 = null;
                this.matchKeyword("extends") && (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var i3 = this.parseClassBody();
                return this.context.strict = t4, this.finalize(e5, new a3.ClassExpression(r3, n3, i3));
              }, e4.prototype.parseModule = function() {
                this.context.strict = true, this.context.isModule = true, this.scanner.isModule = true;
                for (var e5 = this.createNode(), t4 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t4.push(this.parseStatementListItem());
                return this.finalize(e5, new a3.Module(t4));
              }, e4.prototype.parseScript = function() {
                for (var e5 = this.createNode(), t4 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t4.push(this.parseStatementListItem());
                return this.finalize(e5, new a3.Script(t4));
              }, e4.prototype.parseModuleSpecifier = function() {
                var e5 = this.createNode();
                this.lookahead.type !== 8 && this.throwError(o.Messages.InvalidModuleSpecifier);
                var t4 = this.nextToken(), r3 = this.getTokenRaw(t4);
                return this.finalize(e5, new a3.Literal(t4.value, r3));
              }, e4.prototype.parseImportSpecifier = function() {
                var e5, t4, r3 = this.createNode();
                return this.lookahead.type === 3 ? (t4 = e5 = this.parseVariableIdentifier(), this.matchContextualKeyword("as") && (this.nextToken(), t4 = this.parseVariableIdentifier())) : (t4 = e5 = this.parseIdentifierName(), this.matchContextualKeyword("as") ? (this.nextToken(), t4 = this.parseVariableIdentifier()) : this.throwUnexpectedToken(this.nextToken())), this.finalize(r3, new a3.ImportSpecifier(t4, e5));
              }, e4.prototype.parseNamedImports = function() {
                this.expect("{");
                for (var e5 = []; !this.match("}"); )
                  e5.push(this.parseImportSpecifier()), this.match("}") || this.expect(",");
                return this.expect("}"), e5;
              }, e4.prototype.parseImportDefaultSpecifier = function() {
                var e5 = this.createNode(), t4 = this.parseIdentifierName();
                return this.finalize(e5, new a3.ImportDefaultSpecifier(t4));
              }, e4.prototype.parseImportNamespaceSpecifier = function() {
                var e5 = this.createNode();
                this.expect("*"), this.matchContextualKeyword("as") || this.throwError(o.Messages.NoAsAfterImportNamespace), this.nextToken();
                var t4 = this.parseIdentifierName();
                return this.finalize(e5, new a3.ImportNamespaceSpecifier(t4));
              }, e4.prototype.parseImportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalImportDeclaration);
                var e5, t4 = this.createNode();
                this.expectKeyword("import");
                var r3 = [];
                if (this.lookahead.type === 8)
                  e5 = this.parseModuleSpecifier();
                else {
                  if (this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.isIdentifierName(this.lookahead) && !this.matchKeyword("default") ? (r3.push(this.parseImportDefaultSpecifier()), this.match(",") && (this.nextToken(), this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.throwUnexpectedToken(this.lookahead))) : this.throwUnexpectedToken(this.nextToken()), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken(), e5 = this.parseModuleSpecifier();
                }
                return this.consumeSemicolon(), this.finalize(t4, new a3.ImportDeclaration(r3, e5));
              }, e4.prototype.parseExportSpecifier = function() {
                var e5 = this.createNode(), t4 = this.parseIdentifierName(), r3 = t4;
                return this.matchContextualKeyword("as") && (this.nextToken(), r3 = this.parseIdentifierName()), this.finalize(e5, new a3.ExportSpecifier(t4, r3));
              }, e4.prototype.parseExportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalExportDeclaration);
                var e5, t4 = this.createNode();
                if (this.expectKeyword("export"), this.matchKeyword("default"))
                  if (this.nextToken(), this.matchKeyword("function")) {
                    var r3 = this.parseFunctionDeclaration(true);
                    e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3));
                  } else
                    this.matchKeyword("class") ? (r3 = this.parseClassDeclaration(true), e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3))) : this.matchContextualKeyword("async") ? (r3 = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression(), e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3))) : (this.matchContextualKeyword("from") && this.throwError(o.Messages.UnexpectedToken, this.lookahead.value), r3 = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression(), this.consumeSemicolon(), e5 = this.finalize(t4, new a3.ExportDefaultDeclaration(r3)));
                else if (this.match("*")) {
                  if (this.nextToken(), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken();
                  var i3 = this.parseModuleSpecifier();
                  this.consumeSemicolon(), e5 = this.finalize(t4, new a3.ExportAllDeclaration(i3));
                } else if (this.lookahead.type === 4) {
                  switch (r3 = void 0, this.lookahead.value) {
                    case "let":
                    case "const":
                      r3 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "var":
                    case "class":
                    case "function":
                      r3 = this.parseStatementListItem();
                      break;
                    default:
                      this.throwUnexpectedToken(this.lookahead);
                  }
                  e5 = this.finalize(t4, new a3.ExportNamedDeclaration(r3, [], null));
                } else if (this.matchAsyncFunction())
                  r3 = this.parseFunctionDeclaration(), e5 = this.finalize(t4, new a3.ExportNamedDeclaration(r3, [], null));
                else {
                  var s4 = [], u3 = null, l2 = false;
                  for (this.expect("{"); !this.match("}"); )
                    l2 = l2 || this.matchKeyword("default"), s4.push(this.parseExportSpecifier()), this.match("}") || this.expect(",");
                  this.expect("}"), this.matchContextualKeyword("from") ? (this.nextToken(), u3 = this.parseModuleSpecifier(), this.consumeSemicolon()) : l2 ? (n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause, this.throwError(n3, this.lookahead.value)) : this.consumeSemicolon(), e5 = this.finalize(t4, new a3.ExportNamedDeclaration(null, s4, u3));
                }
                return e5;
              }, e4;
            }();
            t3.Parser = c2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.assert = function(e4, t4) {
              if (!e4)
                throw new Error("ASSERT: " + t4);
            };
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var r2 = function() {
              function e4() {
                this.errors = [], this.tolerant = false;
              }
              return e4.prototype.recordError = function(e5) {
                this.errors.push(e5);
              }, e4.prototype.tolerate = function(e5) {
                if (!this.tolerant)
                  throw e5;
                this.recordError(e5);
              }, e4.prototype.constructError = function(e5, t4) {
                var r3 = new Error(e5);
                try {
                  throw r3;
                } catch (e6) {
                  Object.create && Object.defineProperty && (r3 = Object.create(e6), Object.defineProperty(r3, "column", { value: t4 }));
                }
                return r3;
              }, e4.prototype.createError = function(e5, t4, r3, n2) {
                var i2 = "Line " + t4 + ": " + n2, o = this.constructError(i2, r3);
                return o.index = e5, o.lineNumber = t4, o.description = n2, o;
              }, e4.prototype.throwError = function(e5, t4, r3, n2) {
                throw this.createError(e5, t4, r3, n2);
              }, e4.prototype.tolerateError = function(e5, t4, r3, n2) {
                var i2 = this.createError(e5, t4, r3, n2);
                if (!this.tolerant)
                  throw i2;
                this.recordError(i2);
              }, e4;
            }();
            t3.ErrorHandler = r2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.Messages = { BadGetterArity: "Getter must not have any formal parameters", BadSetterArity: "Setter must have exactly one formal parameter", BadSetterRestParameter: "Setter function argument must not be a rest parameter", ConstructorIsAsync: "Class constructor may not be an async method", ConstructorSpecialMethod: "Class constructor may not be an accessor", DeclarationMissingInitializer: "Missing initializer in %0 declaration", DefaultRestParameter: "Unexpected token =", DuplicateBinding: "Duplicate binding %0", DuplicateConstructor: "A class may only have one constructor", DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals", ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer", GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts", IllegalBreak: "Illegal break statement", IllegalContinue: "Illegal continue statement", IllegalExportDeclaration: "Unexpected token", IllegalImportDeclaration: "Unexpected token", IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list", IllegalReturn: "Illegal return statement", InvalidEscapedReservedWord: "Keyword must not contain escaped characters", InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence", InvalidLHSInAssignment: "Invalid left-hand side in assignment", InvalidLHSInForIn: "Invalid left-hand side in for-in", InvalidLHSInForLoop: "Invalid left-hand side in for-loop", InvalidModuleSpecifier: "Unexpected token", InvalidRegExp: "Invalid regular expression", LetInLexicalBinding: "let is disallowed as a lexically bound name", MissingFromClause: "Unexpected token", MultipleDefaultsInSwitch: "More than one default clause in switch statement", NewlineAfterThrow: "Illegal newline after throw", NoAsAfterImportNamespace: "Unexpected token", NoCatchOrFinally: "Missing catch or finally after try", ParameterAfterRestParameter: "Rest parameter must be last formal parameter", Redeclaration: "%0 '%1' has already been declared", StaticPrototype: "Classes may not have static property named prototype", StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode", StrictDelete: "Delete of an unqualified identifier in strict mode.", StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block", StrictFunctionName: "Function name may not be eval or arguments in strict mode", StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictModeWith: "Strict mode code may not include a with statement", StrictOctalLiteral: "Octal literals are not allowed in strict mode.", StrictParamDupe: "Strict mode function may not have duplicate parameter names", StrictParamName: "Parameter name eval or arguments is not allowed in strict mode", StrictReservedWord: "Use of future reserved word in strict mode", StrictVarName: "Variable name may not be eval or arguments in strict mode", TemplateOctalLiteral: "Octal literals are not allowed in template strings.", UnexpectedEOS: "Unexpected end of input", UnexpectedIdentifier: "Unexpected identifier", UnexpectedNumber: "Unexpected number", UnexpectedReserved: "Unexpected reserved word", UnexpectedString: "Unexpected string", UnexpectedTemplate: "Unexpected quasi %0", UnexpectedToken: "Unexpected token %0", UnexpectedTokenIllegal: "Unexpected token ILLEGAL", UnknownLabel: "Undefined label '%0'", UnterminatedRegExp: "Invalid regular expression: missing /" };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(9), i2 = r2(4), o = r2(11);
            function a3(e4) {
              return "0123456789abcdef".indexOf(e4.toLowerCase());
            }
            function s3(e4) {
              return "01234567".indexOf(e4);
            }
            var u2 = function() {
              function e4(e5, t4) {
                this.source = e5, this.errorHandler = t4, this.trackComment = false, this.isModule = false, this.length = e5.length, this.index = 0, this.lineNumber = e5.length > 0 ? 1 : 0, this.lineStart = 0, this.curlyStack = [];
              }
              return e4.prototype.saveState = function() {
                return { index: this.index, lineNumber: this.lineNumber, lineStart: this.lineStart };
              }, e4.prototype.restoreState = function(e5) {
                this.index = e5.index, this.lineNumber = e5.lineNumber, this.lineStart = e5.lineStart;
              }, e4.prototype.eof = function() {
                return this.index >= this.length;
              }, e4.prototype.throwUnexpectedToken = function(e5) {
                return e5 === void 0 && (e5 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, e5);
              }, e4.prototype.tolerateUnexpectedToken = function(e5) {
                e5 === void 0 && (e5 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, e5);
              }, e4.prototype.skipSingleLineComment = function(e5) {
                var t4, r3, n3 = [];
                for (this.trackComment && (n3 = [], t4 = this.index - e5, r3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - e5 }, end: {} }); !this.eof(); ) {
                  var o2 = this.source.charCodeAt(this.index);
                  if (++this.index, i2.Character.isLineTerminator(o2)) {
                    if (this.trackComment) {
                      r3.end = { line: this.lineNumber, column: this.index - this.lineStart - 1 };
                      var a4 = { multiLine: false, slice: [t4 + e5, this.index - 1], range: [t4, this.index - 1], loc: r3 };
                      n3.push(a4);
                    }
                    return o2 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, n3;
                  }
                }
                return this.trackComment && (r3.end = { line: this.lineNumber, column: this.index - this.lineStart }, a4 = { multiLine: false, slice: [t4 + e5, this.index], range: [t4, this.index], loc: r3 }, n3.push(a4)), n3;
              }, e4.prototype.skipMultiLineComment = function() {
                var e5, t4, r3 = [];
                for (this.trackComment && (r3 = [], e5 = this.index - 2, t4 = { start: { line: this.lineNumber, column: this.index - this.lineStart - 2 }, end: {} }); !this.eof(); ) {
                  var n3 = this.source.charCodeAt(this.index);
                  if (i2.Character.isLineTerminator(n3))
                    n3 === 13 && this.source.charCodeAt(this.index + 1) === 10 && ++this.index, ++this.lineNumber, ++this.index, this.lineStart = this.index;
                  else if (n3 === 42) {
                    if (this.source.charCodeAt(this.index + 1) === 47) {
                      if (this.index += 2, this.trackComment) {
                        t4.end = { line: this.lineNumber, column: this.index - this.lineStart };
                        var o2 = { multiLine: true, slice: [e5 + 2, this.index - 2], range: [e5, this.index], loc: t4 };
                        r3.push(o2);
                      }
                      return r3;
                    }
                    ++this.index;
                  } else
                    ++this.index;
                }
                return this.trackComment && (t4.end = { line: this.lineNumber, column: this.index - this.lineStart }, o2 = { multiLine: true, slice: [e5 + 2, this.index], range: [e5, this.index], loc: t4 }, r3.push(o2)), this.tolerateUnexpectedToken(), r3;
              }, e4.prototype.scanComments = function() {
                var e5;
                this.trackComment && (e5 = []);
                for (var t4 = this.index === 0; !this.eof(); ) {
                  var r3 = this.source.charCodeAt(this.index);
                  if (i2.Character.isWhiteSpace(r3))
                    ++this.index;
                  else if (i2.Character.isLineTerminator(r3))
                    ++this.index, r3 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, t4 = true;
                  else if (r3 === 47)
                    if ((r3 = this.source.charCodeAt(this.index + 1)) === 47) {
                      this.index += 2;
                      var n3 = this.skipSingleLineComment(2);
                      this.trackComment && (e5 = e5.concat(n3)), t4 = true;
                    } else {
                      if (r3 !== 42)
                        break;
                      this.index += 2, n3 = this.skipMultiLineComment(), this.trackComment && (e5 = e5.concat(n3));
                    }
                  else if (t4 && r3 === 45) {
                    if (this.source.charCodeAt(this.index + 1) !== 45 || this.source.charCodeAt(this.index + 2) !== 62)
                      break;
                    this.index += 3, n3 = this.skipSingleLineComment(3), this.trackComment && (e5 = e5.concat(n3));
                  } else {
                    if (r3 !== 60 || this.isModule)
                      break;
                    if (this.source.slice(this.index + 1, this.index + 4) !== "!--")
                      break;
                    this.index += 4, n3 = this.skipSingleLineComment(4), this.trackComment && (e5 = e5.concat(n3));
                  }
                }
                return e5;
              }, e4.prototype.isFutureReservedWord = function(e5) {
                switch (e5) {
                  case "enum":
                  case "export":
                  case "import":
                  case "super":
                    return true;
                  default:
                    return false;
                }
              }, e4.prototype.isStrictModeReservedWord = function(e5) {
                switch (e5) {
                  case "implements":
                  case "interface":
                  case "package":
                  case "private":
                  case "protected":
                  case "public":
                  case "static":
                  case "yield":
                  case "let":
                    return true;
                  default:
                    return false;
                }
              }, e4.prototype.isRestrictedWord = function(e5) {
                return e5 === "eval" || e5 === "arguments";
              }, e4.prototype.isKeyword = function(e5) {
                switch (e5.length) {
                  case 2:
                    return e5 === "if" || e5 === "in" || e5 === "do";
                  case 3:
                    return e5 === "var" || e5 === "for" || e5 === "new" || e5 === "try" || e5 === "let";
                  case 4:
                    return e5 === "this" || e5 === "else" || e5 === "case" || e5 === "void" || e5 === "with" || e5 === "enum";
                  case 5:
                    return e5 === "while" || e5 === "break" || e5 === "catch" || e5 === "throw" || e5 === "const" || e5 === "yield" || e5 === "class" || e5 === "super";
                  case 6:
                    return e5 === "return" || e5 === "typeof" || e5 === "delete" || e5 === "switch" || e5 === "export" || e5 === "import";
                  case 7:
                    return e5 === "default" || e5 === "finally" || e5 === "extends";
                  case 8:
                    return e5 === "function" || e5 === "continue" || e5 === "debugger";
                  case 10:
                    return e5 === "instanceof";
                  default:
                    return false;
                }
              }, e4.prototype.codePointAt = function(e5) {
                var t4 = this.source.charCodeAt(e5);
                if (t4 >= 55296 && t4 <= 56319) {
                  var r3 = this.source.charCodeAt(e5 + 1);
                  r3 >= 56320 && r3 <= 57343 && (t4 = 1024 * (t4 - 55296) + r3 - 56320 + 65536);
                }
                return t4;
              }, e4.prototype.scanHexEscape = function(e5) {
                for (var t4 = e5 === "u" ? 4 : 2, r3 = 0, n3 = 0; n3 < t4; ++n3) {
                  if (this.eof() || !i2.Character.isHexDigit(this.source.charCodeAt(this.index)))
                    return null;
                  r3 = 16 * r3 + a3(this.source[this.index++]);
                }
                return String.fromCharCode(r3);
              }, e4.prototype.scanUnicodeCodePointEscape = function() {
                var e5 = this.source[this.index], t4 = 0;
                for (e5 === "}" && this.throwUnexpectedToken(); !this.eof() && (e5 = this.source[this.index++], i2.Character.isHexDigit(e5.charCodeAt(0))); )
                  t4 = 16 * t4 + a3(e5);
                return (t4 > 1114111 || e5 !== "}") && this.throwUnexpectedToken(), i2.Character.fromCodePoint(t4);
              }, e4.prototype.getIdentifier = function() {
                for (var e5 = this.index++; !this.eof(); ) {
                  var t4 = this.source.charCodeAt(this.index);
                  if (t4 === 92)
                    return this.index = e5, this.getComplexIdentifier();
                  if (t4 >= 55296 && t4 < 57343)
                    return this.index = e5, this.getComplexIdentifier();
                  if (!i2.Character.isIdentifierPart(t4))
                    break;
                  ++this.index;
                }
                return this.source.slice(e5, this.index);
              }, e4.prototype.getComplexIdentifier = function() {
                var e5, t4 = this.codePointAt(this.index), r3 = i2.Character.fromCodePoint(t4);
                for (this.index += r3.length, t4 === 92 && (this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e5 = this.scanUnicodeCodePointEscape()) : (e5 = this.scanHexEscape("u")) !== null && e5 !== "\\" && i2.Character.isIdentifierStart(e5.charCodeAt(0)) || this.throwUnexpectedToken(), r3 = e5); !this.eof() && (t4 = this.codePointAt(this.index), i2.Character.isIdentifierPart(t4)); )
                  r3 += e5 = i2.Character.fromCodePoint(t4), this.index += e5.length, t4 === 92 && (r3 = r3.substr(0, r3.length - 1), this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e5 = this.scanUnicodeCodePointEscape()) : (e5 = this.scanHexEscape("u")) !== null && e5 !== "\\" && i2.Character.isIdentifierPart(e5.charCodeAt(0)) || this.throwUnexpectedToken(), r3 += e5);
                return r3;
              }, e4.prototype.octalToDecimal = function(e5) {
                var t4 = e5 !== "0", r3 = s3(e5);
                return !this.eof() && i2.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (t4 = true, r3 = 8 * r3 + s3(this.source[this.index++]), "0123".indexOf(e5) >= 0 && !this.eof() && i2.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (r3 = 8 * r3 + s3(this.source[this.index++]))), { code: r3, octal: t4 };
              }, e4.prototype.scanIdentifier = function() {
                var e5, t4 = this.index, r3 = this.source.charCodeAt(t4) === 92 ? this.getComplexIdentifier() : this.getIdentifier();
                if ((e5 = r3.length === 1 ? 3 : this.isKeyword(r3) ? 4 : r3 === "null" ? 5 : r3 === "true" || r3 === "false" ? 1 : 3) != 3 && t4 + r3.length !== this.index) {
                  var n3 = this.index;
                  this.index = t4, this.tolerateUnexpectedToken(o.Messages.InvalidEscapedReservedWord), this.index = n3;
                }
                return { type: e5, value: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t4, end: this.index };
              }, e4.prototype.scanPunctuator = function() {
                var e5 = this.index, t4 = this.source[this.index];
                switch (t4) {
                  case "(":
                  case "{":
                    t4 === "{" && this.curlyStack.push("{"), ++this.index;
                    break;
                  case ".":
                    ++this.index, this.source[this.index] === "." && this.source[this.index + 1] === "." && (this.index += 2, t4 = "...");
                    break;
                  case "}":
                    ++this.index, this.curlyStack.pop();
                    break;
                  case ")":
                  case ";":
                  case ",":
                  case "[":
                  case "]":
                  case ":":
                  case "?":
                  case "~":
                    ++this.index;
                    break;
                  default:
                    (t4 = this.source.substr(this.index, 4)) === ">>>=" ? this.index += 4 : (t4 = t4.substr(0, 3)) === "===" || t4 === "!==" || t4 === ">>>" || t4 === "<<=" || t4 === ">>=" || t4 === "**=" ? this.index += 3 : (t4 = t4.substr(0, 2)) === "&&" || t4 === "||" || t4 === "==" || t4 === "!=" || t4 === "+=" || t4 === "-=" || t4 === "*=" || t4 === "/=" || t4 === "++" || t4 === "--" || t4 === "<<" || t4 === ">>" || t4 === "&=" || t4 === "|=" || t4 === "^=" || t4 === "%=" || t4 === "<=" || t4 === ">=" || t4 === "=>" || t4 === "**" ? this.index += 2 : (t4 = this.source[this.index], "<>=!+-*%&|^/".indexOf(t4) >= 0 && ++this.index);
                }
                return this.index === e5 && this.throwUnexpectedToken(), { type: 7, value: t4, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanHexLiteral = function(e5) {
                for (var t4 = ""; !this.eof() && i2.Character.isHexDigit(this.source.charCodeAt(this.index)); )
                  t4 += this.source[this.index++];
                return t4.length === 0 && this.throwUnexpectedToken(), i2.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseInt("0x" + t4, 16), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanBinaryLiteral = function(e5) {
                for (var t4, r3 = ""; !this.eof() && ((t4 = this.source[this.index]) === "0" || t4 === "1"); )
                  r3 += this.source[this.index++];
                return r3.length === 0 && this.throwUnexpectedToken(), this.eof() || (t4 = this.source.charCodeAt(this.index), (i2.Character.isIdentifierStart(t4) || i2.Character.isDecimalDigit(t4)) && this.throwUnexpectedToken()), { type: 6, value: parseInt(r3, 2), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanOctalLiteral = function(e5, t4) {
                var r3 = "", n3 = false;
                for (i2.Character.isOctalDigit(e5.charCodeAt(0)) ? (n3 = true, r3 = "0" + this.source[this.index++]) : ++this.index; !this.eof() && i2.Character.isOctalDigit(this.source.charCodeAt(this.index)); )
                  r3 += this.source[this.index++];
                return n3 || r3.length !== 0 || this.throwUnexpectedToken(), (i2.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || i2.Character.isDecimalDigit(this.source.charCodeAt(this.index))) && this.throwUnexpectedToken(), { type: 6, value: parseInt(r3, 8), octal: n3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t4, end: this.index };
              }, e4.prototype.isImplicitOctalLiteral = function() {
                for (var e5 = this.index + 1; e5 < this.length; ++e5) {
                  var t4 = this.source[e5];
                  if (t4 === "8" || t4 === "9")
                    return false;
                  if (!i2.Character.isOctalDigit(t4.charCodeAt(0)))
                    return true;
                }
                return true;
              }, e4.prototype.scanNumericLiteral = function() {
                var e5 = this.index, t4 = this.source[e5];
                n2.assert(i2.Character.isDecimalDigit(t4.charCodeAt(0)) || t4 === ".", "Numeric literal must start with a decimal digit or a decimal point");
                var r3 = "";
                if (t4 !== ".") {
                  if (r3 = this.source[this.index++], t4 = this.source[this.index], r3 === "0") {
                    if (t4 === "x" || t4 === "X")
                      return ++this.index, this.scanHexLiteral(e5);
                    if (t4 === "b" || t4 === "B")
                      return ++this.index, this.scanBinaryLiteral(e5);
                    if (t4 === "o" || t4 === "O")
                      return this.scanOctalLiteral(t4, e5);
                    if (t4 && i2.Character.isOctalDigit(t4.charCodeAt(0)) && this.isImplicitOctalLiteral())
                      return this.scanOctalLiteral(t4, e5);
                  }
                  for (; i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t4 = this.source[this.index];
                }
                if (t4 === ".") {
                  for (r3 += this.source[this.index++]; i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t4 = this.source[this.index];
                }
                if (t4 === "e" || t4 === "E")
                  if (r3 += this.source[this.index++], (t4 = this.source[this.index]) !== "+" && t4 !== "-" || (r3 += this.source[this.index++]), i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)))
                    for (; i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                      r3 += this.source[this.index++];
                  else
                    this.throwUnexpectedToken();
                return i2.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseFloat(r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanStringLiteral = function() {
                var e5 = this.index, t4 = this.source[e5];
                n2.assert(t4 === "'" || t4 === '"', "String literal must starts with a quote"), ++this.index;
                for (var r3 = false, a4 = ""; !this.eof(); ) {
                  var s4 = this.source[this.index++];
                  if (s4 === t4) {
                    t4 = "";
                    break;
                  }
                  if (s4 === "\\")
                    if ((s4 = this.source[this.index++]) && i2.Character.isLineTerminator(s4.charCodeAt(0)))
                      ++this.lineNumber, s4 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (s4) {
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, a4 += this.scanUnicodeCodePointEscape();
                          else {
                            var u3 = this.scanHexEscape(s4);
                            u3 === null && this.throwUnexpectedToken(), a4 += u3;
                          }
                          break;
                        case "x":
                          var l = this.scanHexEscape(s4);
                          l === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), a4 += l;
                          break;
                        case "n":
                          a4 += "\n";
                          break;
                        case "r":
                          a4 += "\r";
                          break;
                        case "t":
                          a4 += "	";
                          break;
                        case "b":
                          a4 += "\b";
                          break;
                        case "f":
                          a4 += "\f";
                          break;
                        case "v":
                          a4 += "\v";
                          break;
                        case "8":
                        case "9":
                          a4 += s4, this.tolerateUnexpectedToken();
                          break;
                        default:
                          if (s4 && i2.Character.isOctalDigit(s4.charCodeAt(0))) {
                            var c2 = this.octalToDecimal(s4);
                            r3 = c2.octal || r3, a4 += String.fromCharCode(c2.code);
                          } else
                            a4 += s4;
                      }
                  else {
                    if (i2.Character.isLineTerminator(s4.charCodeAt(0)))
                      break;
                    a4 += s4;
                  }
                }
                return t4 !== "" && (this.index = e5, this.throwUnexpectedToken()), { type: 8, value: a4, octal: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.scanTemplate = function() {
                var e5 = "", t4 = false, r3 = this.index, n3 = this.source[r3] === "`", a4 = false, s4 = 2;
                for (++this.index; !this.eof(); ) {
                  var u3 = this.source[this.index++];
                  if (u3 === "`") {
                    s4 = 1, a4 = true, t4 = true;
                    break;
                  }
                  if (u3 === "$") {
                    if (this.source[this.index] === "{") {
                      this.curlyStack.push("${"), ++this.index, t4 = true;
                      break;
                    }
                    e5 += u3;
                  } else if (u3 === "\\")
                    if (u3 = this.source[this.index++], i2.Character.isLineTerminator(u3.charCodeAt(0)))
                      ++this.lineNumber, u3 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (u3) {
                        case "n":
                          e5 += "\n";
                          break;
                        case "r":
                          e5 += "\r";
                          break;
                        case "t":
                          e5 += "	";
                          break;
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, e5 += this.scanUnicodeCodePointEscape();
                          else {
                            var l = this.index, c2 = this.scanHexEscape(u3);
                            c2 !== null ? e5 += c2 : (this.index = l, e5 += u3);
                          }
                          break;
                        case "x":
                          var h3 = this.scanHexEscape(u3);
                          h3 === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), e5 += h3;
                          break;
                        case "b":
                          e5 += "\b";
                          break;
                        case "f":
                          e5 += "\f";
                          break;
                        case "v":
                          e5 += "\v";
                          break;
                        default:
                          u3 === "0" ? (i2.Character.isDecimalDigit(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral), e5 += "\0") : i2.Character.isOctalDigit(u3.charCodeAt(0)) ? this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral) : e5 += u3;
                      }
                  else
                    i2.Character.isLineTerminator(u3.charCodeAt(0)) ? (++this.lineNumber, u3 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index, e5 += "\n") : e5 += u3;
                }
                return t4 || this.throwUnexpectedToken(), n3 || this.curlyStack.pop(), { type: 10, value: this.source.slice(r3 + 1, this.index - s4), cooked: e5, head: n3, tail: a4, lineNumber: this.lineNumber, lineStart: this.lineStart, start: r3, end: this.index };
              }, e4.prototype.testRegExp = function(e5, t4) {
                var r3 = e5, n3 = this;
                t4.indexOf("u") >= 0 && (r3 = r3.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function(e6, t5, r4) {
                  var i3 = parseInt(t5 || r4, 16);
                  return i3 > 1114111 && n3.throwUnexpectedToken(o.Messages.InvalidRegExp), i3 <= 65535 ? String.fromCharCode(i3) : "\uFFFF";
                }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "\uFFFF"));
                try {
                  RegExp(r3);
                } catch (e6) {
                  this.throwUnexpectedToken(o.Messages.InvalidRegExp);
                }
                try {
                  return new RegExp(e5, t4);
                } catch (e6) {
                  return null;
                }
              }, e4.prototype.scanRegExpBody = function() {
                var e5 = this.source[this.index];
                n2.assert(e5 === "/", "Regular expression literal must start with a slash");
                for (var t4 = this.source[this.index++], r3 = false, a4 = false; !this.eof(); )
                  if (t4 += e5 = this.source[this.index++], e5 === "\\")
                    e5 = this.source[this.index++], i2.Character.isLineTerminator(e5.charCodeAt(0)) && this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t4 += e5;
                  else if (i2.Character.isLineTerminator(e5.charCodeAt(0)))
                    this.throwUnexpectedToken(o.Messages.UnterminatedRegExp);
                  else if (r3)
                    e5 === "]" && (r3 = false);
                  else {
                    if (e5 === "/") {
                      a4 = true;
                      break;
                    }
                    e5 === "[" && (r3 = true);
                  }
                return a4 || this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t4.substr(1, t4.length - 2);
              }, e4.prototype.scanRegExpFlags = function() {
                for (var e5 = ""; !this.eof(); ) {
                  var t4 = this.source[this.index];
                  if (!i2.Character.isIdentifierPart(t4.charCodeAt(0)))
                    break;
                  if (++this.index, t4 !== "\\" || this.eof())
                    e5 += t4;
                  else if ((t4 = this.source[this.index]) === "u") {
                    ++this.index;
                    var r3 = this.index, n3 = this.scanHexEscape("u");
                    if (n3 !== null)
                      for (e5 += n3; r3 < this.index; ++r3)
                        this.source[r3];
                    else
                      this.index = r3, e5 += "u";
                    this.tolerateUnexpectedToken();
                  } else
                    this.tolerateUnexpectedToken();
                }
                return e5;
              }, e4.prototype.scanRegExp = function() {
                var e5 = this.index, t4 = this.scanRegExpBody(), r3 = this.scanRegExpFlags();
                return { type: 9, value: "", pattern: t4, flags: r3, regex: this.testRegExp(t4, r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e5, end: this.index };
              }, e4.prototype.lex = function() {
                if (this.eof())
                  return { type: 2, value: "", lineNumber: this.lineNumber, lineStart: this.lineStart, start: this.index, end: this.index };
                var e5 = this.source.charCodeAt(this.index);
                return i2.Character.isIdentifierStart(e5) ? this.scanIdentifier() : e5 === 40 || e5 === 41 || e5 === 59 ? this.scanPunctuator() : e5 === 39 || e5 === 34 ? this.scanStringLiteral() : e5 === 46 ? i2.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1)) ? this.scanNumericLiteral() : this.scanPunctuator() : i2.Character.isDecimalDigit(e5) ? this.scanNumericLiteral() : e5 === 96 || e5 === 125 && this.curlyStack[this.curlyStack.length - 1] === "${" ? this.scanTemplate() : e5 >= 55296 && e5 < 57343 && i2.Character.isIdentifierStart(this.codePointAt(this.index)) ? this.scanIdentifier() : this.scanPunctuator();
              }, e4;
            }();
            t3.Scanner = u2;
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.TokenName = {}, t3.TokenName[1] = "Boolean", t3.TokenName[2] = "<end>", t3.TokenName[3] = "Identifier", t3.TokenName[4] = "Keyword", t3.TokenName[5] = "Null", t3.TokenName[6] = "Numeric", t3.TokenName[7] = "Punctuator", t3.TokenName[8] = "String", t3.TokenName[9] = "RegularExpression", t3.TokenName[10] = "Template";
          }, function(e3, t3) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true }), t3.XHTMLEntities = { quot: '"', amp: "&", apos: "'", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666", lang: "\u27E8", rang: "\u27E9" };
          }, function(e3, t3, r2) {
            "use strict";
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r2(10), i2 = r2(12), o = r2(13), a3 = function() {
              function e4() {
                this.values = [], this.curly = this.paren = -1;
              }
              return e4.prototype.beforeFunctionExpression = function(e5) {
                return ["(", "{", "[", "in", "typeof", "instanceof", "new", "return", "case", "delete", "throw", "void", "=", "+=", "-=", "*=", "**=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ",", "+", "-", "*", "**", "/", "%", "++", "--", "<<", ">>", ">>>", "&", "|", "^", "!", "~", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!=="].indexOf(e5) >= 0;
              }, e4.prototype.isRegexStart = function() {
                var e5 = this.values[this.values.length - 1], t4 = e5 !== null;
                switch (e5) {
                  case "this":
                  case "]":
                    t4 = false;
                    break;
                  case ")":
                    var r3 = this.values[this.paren - 1];
                    t4 = r3 === "if" || r3 === "while" || r3 === "for" || r3 === "with";
                    break;
                  case "}":
                    if (t4 = false, this.values[this.curly - 3] === "function")
                      t4 = !!(n3 = this.values[this.curly - 4]) && !this.beforeFunctionExpression(n3);
                    else if (this.values[this.curly - 4] === "function") {
                      var n3;
                      t4 = !(n3 = this.values[this.curly - 5]) || !this.beforeFunctionExpression(n3);
                    }
                }
                return t4;
              }, e4.prototype.push = function(e5) {
                e5.type === 7 || e5.type === 4 ? (e5.value === "{" ? this.curly = this.values.length : e5.value === "(" && (this.paren = this.values.length), this.values.push(e5.value)) : this.values.push(null);
              }, e4;
            }(), s3 = function() {
              function e4(e5, t4) {
                this.errorHandler = new n2.ErrorHandler(), this.errorHandler.tolerant = !!t4 && typeof t4.tolerant == "boolean" && t4.tolerant, this.scanner = new i2.Scanner(e5, this.errorHandler), this.scanner.trackComment = !!t4 && typeof t4.comment == "boolean" && t4.comment, this.trackRange = !!t4 && typeof t4.range == "boolean" && t4.range, this.trackLoc = !!t4 && typeof t4.loc == "boolean" && t4.loc, this.buffer = [], this.reader = new a3();
              }
              return e4.prototype.errors = function() {
                return this.errorHandler.errors;
              }, e4.prototype.getNextToken = function() {
                if (this.buffer.length === 0) {
                  var e5 = this.scanner.scanComments();
                  if (this.scanner.trackComment)
                    for (var t4 = 0; t4 < e5.length; ++t4) {
                      var r3 = e5[t4], n3 = this.scanner.source.slice(r3.slice[0], r3.slice[1]), i3 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: n3 };
                      this.trackRange && (i3.range = r3.range), this.trackLoc && (i3.loc = r3.loc), this.buffer.push(i3);
                    }
                  if (!this.scanner.eof()) {
                    var a4 = void 0;
                    this.trackLoc && (a4 = { start: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, end: {} });
                    var s4 = this.scanner.source[this.scanner.index] === "/" && this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.lex();
                    this.reader.push(s4);
                    var u2 = { type: o.TokenName[s4.type], value: this.scanner.source.slice(s4.start, s4.end) };
                    if (this.trackRange && (u2.range = [s4.start, s4.end]), this.trackLoc && (a4.end = { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, u2.loc = a4), s4.type === 9) {
                      var l = s4.pattern, c2 = s4.flags;
                      u2.regex = { pattern: l, flags: c2 };
                    }
                    this.buffer.push(u2);
                  }
                }
                return this.buffer.shift();
              }, e4;
            }();
            t3.Tokenizer = s3;
          }]);
        }, e2.exports = n();
      }, function(e2, t2, r) {
        "use strict";
        var n = r(38), i2 = r(53), o = r(76), a3 = r(54), s3 = Object.prototype.toString, u2 = Object.prototype.hasOwnProperty, l = { 0: "\\0", 7: "\\a", 8: "\\b", 9: "\\t", 10: "\\n", 11: "\\v", 12: "\\f", 13: "\\r", 27: "\\e", 34: '\\"', 92: "\\\\", 133: "\\N", 160: "\\_", 8232: "\\L", 8233: "\\P" }, c2 = ["y", "Y", "yes", "Yes", "YES", "on", "On", "ON", "n", "N", "no", "No", "NO", "off", "Off", "OFF"];
        function h3(e3) {
          var t3, r2, o2;
          if (t3 = e3.toString(16).toUpperCase(), e3 <= 255)
            r2 = "x", o2 = 2;
          else if (e3 <= 65535)
            r2 = "u", o2 = 4;
          else {
            if (!(e3 <= 4294967295))
              throw new i2("code point within a string may not be greater than 0xFFFFFFFF");
            r2 = "U", o2 = 8;
          }
          return "\\" + r2 + n.repeat("0", o2 - t3.length) + t3;
        }
        function p(e3) {
          this.schema = e3.schema || o, this.indent = Math.max(1, e3.indent || 2), this.noArrayIndent = e3.noArrayIndent || false, this.skipInvalid = e3.skipInvalid || false, this.flowLevel = n.isNothing(e3.flowLevel) ? -1 : e3.flowLevel, this.styleMap = function(e4, t3) {
            var r2, n2, i3, o2, a4, s4, l2;
            if (t3 === null)
              return {};
            for (r2 = {}, i3 = 0, o2 = (n2 = Object.keys(t3)).length; i3 < o2; i3 += 1)
              a4 = n2[i3], s4 = String(t3[a4]), a4.slice(0, 2) === "!!" && (a4 = "tag:yaml.org,2002:" + a4.slice(2)), (l2 = e4.compiledTypeMap.fallback[a4]) && u2.call(l2.styleAliases, s4) && (s4 = l2.styleAliases[s4]), r2[a4] = s4;
            return r2;
          }(this.schema, e3.styles || null), this.sortKeys = e3.sortKeys || false, this.lineWidth = e3.lineWidth || 80, this.noRefs = e3.noRefs || false, this.noCompatMode = e3.noCompatMode || false, this.condenseFlow = e3.condenseFlow || false, this.implicitTypes = this.schema.compiledImplicit, this.explicitTypes = this.schema.compiledExplicit, this.tag = null, this.result = "", this.duplicates = [], this.usedDuplicates = null;
        }
        function f(e3, t3) {
          for (var r2, i3 = n.repeat(" ", t3), o2 = 0, a4 = -1, s4 = "", u3 = e3.length; o2 < u3; )
            (a4 = e3.indexOf("\n", o2)) === -1 ? (r2 = e3.slice(o2), o2 = u3) : (r2 = e3.slice(o2, a4 + 1), o2 = a4 + 1), r2.length && r2 !== "\n" && (s4 += i3), s4 += r2;
          return s4;
        }
        function d3(e3, t3) {
          return "\n" + n.repeat(" ", e3.indent * t3);
        }
        function m3(e3) {
          return e3 === 32 || e3 === 9;
        }
        function y3(e3) {
          return 32 <= e3 && e3 <= 126 || 161 <= e3 && e3 <= 55295 && e3 !== 8232 && e3 !== 8233 || 57344 <= e3 && e3 <= 65533 && e3 !== 65279 || 65536 <= e3 && e3 <= 1114111;
        }
        function v(e3, t3) {
          return y3(e3) && e3 !== 65279 && e3 !== 44 && e3 !== 91 && e3 !== 93 && e3 !== 123 && e3 !== 125 && e3 !== 58 && (e3 !== 35 || t3 && function(e4) {
            return y3(e4) && !m3(e4) && e4 !== 65279 && e4 !== 13 && e4 !== 10;
          }(t3));
        }
        function _(e3) {
          return /^\n* /.test(e3);
        }
        function g(e3, t3, r2, n2, i3) {
          var o2, a4, s4, u3, l2 = false, c3 = false, h4 = n2 !== -1, p2 = -1, f2 = y3(u3 = e3.charCodeAt(0)) && u3 !== 65279 && !m3(u3) && u3 !== 45 && u3 !== 63 && u3 !== 58 && u3 !== 44 && u3 !== 91 && u3 !== 93 && u3 !== 123 && u3 !== 125 && u3 !== 35 && u3 !== 38 && u3 !== 42 && u3 !== 33 && u3 !== 124 && u3 !== 61 && u3 !== 62 && u3 !== 39 && u3 !== 34 && u3 !== 37 && u3 !== 64 && u3 !== 96 && !m3(e3.charCodeAt(e3.length - 1));
          if (t3)
            for (o2 = 0; o2 < e3.length; o2++) {
              if (!y3(a4 = e3.charCodeAt(o2)))
                return 5;
              s4 = o2 > 0 ? e3.charCodeAt(o2 - 1) : null, f2 = f2 && v(a4, s4);
            }
          else {
            for (o2 = 0; o2 < e3.length; o2++) {
              if ((a4 = e3.charCodeAt(o2)) === 10)
                l2 = true, h4 && (c3 = c3 || o2 - p2 - 1 > n2 && e3[p2 + 1] !== " ", p2 = o2);
              else if (!y3(a4))
                return 5;
              s4 = o2 > 0 ? e3.charCodeAt(o2 - 1) : null, f2 = f2 && v(a4, s4);
            }
            c3 = c3 || h4 && o2 - p2 - 1 > n2 && e3[p2 + 1] !== " ";
          }
          return l2 || c3 ? r2 > 9 && _(e3) ? 5 : c3 ? 4 : 3 : f2 && !i3(e3) ? 1 : 2;
        }
        function b2(e3, t3, r2, n2) {
          e3.dump = function() {
            if (t3.length === 0)
              return "''";
            if (!e3.noCompatMode && c2.indexOf(t3) !== -1)
              return "'" + t3 + "'";
            var o2 = e3.indent * Math.max(1, r2), a4 = e3.lineWidth === -1 ? -1 : Math.max(Math.min(e3.lineWidth, 40), e3.lineWidth - o2), s4 = n2 || e3.flowLevel > -1 && r2 >= e3.flowLevel;
            switch (g(t3, s4, e3.indent, a4, function(t4) {
              return function(e4, t5) {
                var r3, n3;
                for (r3 = 0, n3 = e4.implicitTypes.length; r3 < n3; r3 += 1)
                  if (e4.implicitTypes[r3].resolve(t5))
                    return true;
                return false;
              }(e3, t4);
            })) {
              case 1:
                return t3;
              case 2:
                return "'" + t3.replace(/'/g, "''") + "'";
              case 3:
                return "|" + x2(t3, e3.indent) + w2(f(t3, o2));
              case 4:
                return ">" + x2(t3, e3.indent) + w2(f(function(e4, t4) {
                  var r3, n3, i3 = /(\n+)([^\n]*)/g, o3 = (s5 = e4.indexOf("\n"), s5 = s5 !== -1 ? s5 : e4.length, i3.lastIndex = s5, E2(e4.slice(0, s5), t4)), a5 = e4[0] === "\n" || e4[0] === " ";
                  var s5;
                  for (; n3 = i3.exec(e4); ) {
                    var u3 = n3[1], l2 = n3[2];
                    r3 = l2[0] === " ", o3 += u3 + (a5 || r3 || l2 === "" ? "" : "\n") + E2(l2, t4), a5 = r3;
                  }
                  return o3;
                }(t3, a4), o2));
              case 5:
                return '"' + function(e4) {
                  for (var t4, r3, n3, i3 = "", o3 = 0; o3 < e4.length; o3++)
                    (t4 = e4.charCodeAt(o3)) >= 55296 && t4 <= 56319 && (r3 = e4.charCodeAt(o3 + 1)) >= 56320 && r3 <= 57343 ? (i3 += h3(1024 * (t4 - 55296) + r3 - 56320 + 65536), o3++) : (n3 = l[t4], i3 += !n3 && y3(t4) ? e4[o3] : n3 || h3(t4));
                  return i3;
                }(t3) + '"';
              default:
                throw new i2("impossible error: invalid scalar style");
            }
          }();
        }
        function x2(e3, t3) {
          var r2 = _(e3) ? String(t3) : "", n2 = e3[e3.length - 1] === "\n";
          return r2 + (n2 && (e3[e3.length - 2] === "\n" || e3 === "\n") ? "+" : n2 ? "" : "-") + "\n";
        }
        function w2(e3) {
          return e3[e3.length - 1] === "\n" ? e3.slice(0, -1) : e3;
        }
        function E2(e3, t3) {
          if (e3 === "" || e3[0] === " ")
            return e3;
          for (var r2, n2, i3 = / [^ ]/g, o2 = 0, a4 = 0, s4 = 0, u3 = ""; r2 = i3.exec(e3); )
            (s4 = r2.index) - o2 > t3 && (n2 = a4 > o2 ? a4 : s4, u3 += "\n" + e3.slice(o2, n2), o2 = n2 + 1), a4 = s4;
          return u3 += "\n", e3.length - o2 > t3 && a4 > o2 ? u3 += e3.slice(o2, a4) + "\n" + e3.slice(a4 + 1) : u3 += e3.slice(o2), u3.slice(1);
        }
        function D2(e3, t3, r2) {
          var n2, o2, a4, l2, c3, h4;
          for (a4 = 0, l2 = (o2 = r2 ? e3.explicitTypes : e3.implicitTypes).length; a4 < l2; a4 += 1)
            if (((c3 = o2[a4]).instanceOf || c3.predicate) && (!c3.instanceOf || typeof t3 == "object" && t3 instanceof c3.instanceOf) && (!c3.predicate || c3.predicate(t3))) {
              if (e3.tag = r2 ? c3.tag : "?", c3.represent) {
                if (h4 = e3.styleMap[c3.tag] || c3.defaultStyle, s3.call(c3.represent) === "[object Function]")
                  n2 = c3.represent(t3, h4);
                else {
                  if (!u2.call(c3.represent, h4))
                    throw new i2("!<" + c3.tag + '> tag resolver accepts not "' + h4 + '" style');
                  n2 = c3.represent[h4](t3, h4);
                }
                e3.dump = n2;
              }
              return true;
            }
          return false;
        }
        function S3(e3, t3, r2, n2, o2, a4) {
          e3.tag = null, e3.dump = r2, D2(e3, r2, false) || D2(e3, r2, true);
          var u3 = s3.call(e3.dump);
          n2 && (n2 = e3.flowLevel < 0 || e3.flowLevel > t3);
          var l2, c3, h4 = u3 === "[object Object]" || u3 === "[object Array]";
          if (h4 && (c3 = (l2 = e3.duplicates.indexOf(r2)) !== -1), (e3.tag !== null && e3.tag !== "?" || c3 || e3.indent !== 2 && t3 > 0) && (o2 = false), c3 && e3.usedDuplicates[l2])
            e3.dump = "*ref_" + l2;
          else {
            if (h4 && c3 && !e3.usedDuplicates[l2] && (e3.usedDuplicates[l2] = true), u3 === "[object Object]")
              n2 && Object.keys(e3.dump).length !== 0 ? (!function(e4, t4, r3, n3) {
                var o3, a5, s4, u4, l3, c4, h5 = "", p3 = e4.tag, f2 = Object.keys(r3);
                if (e4.sortKeys === true)
                  f2.sort();
                else if (typeof e4.sortKeys == "function")
                  f2.sort(e4.sortKeys);
                else if (e4.sortKeys)
                  throw new i2("sortKeys must be a boolean or a function");
                for (o3 = 0, a5 = f2.length; o3 < a5; o3 += 1)
                  c4 = "", n3 && o3 === 0 || (c4 += d3(e4, t4)), u4 = r3[s4 = f2[o3]], S3(e4, t4 + 1, s4, true, true, true) && ((l3 = e4.tag !== null && e4.tag !== "?" || e4.dump && e4.dump.length > 1024) && (e4.dump && e4.dump.charCodeAt(0) === 10 ? c4 += "?" : c4 += "? "), c4 += e4.dump, l3 && (c4 += d3(e4, t4)), S3(e4, t4 + 1, u4, true, l3) && (e4.dump && e4.dump.charCodeAt(0) === 10 ? c4 += ":" : c4 += ": ", h5 += c4 += e4.dump));
                e4.tag = p3, e4.dump = h5 || "{}";
              }(e3, t3, e3.dump, o2), c3 && (e3.dump = "&ref_" + l2 + e3.dump)) : (!function(e4, t4, r3) {
                var n3, i3, o3, a5, s4, u4 = "", l3 = e4.tag, c4 = Object.keys(r3);
                for (n3 = 0, i3 = c4.length; n3 < i3; n3 += 1)
                  s4 = "", n3 !== 0 && (s4 += ", "), e4.condenseFlow && (s4 += '"'), a5 = r3[o3 = c4[n3]], S3(e4, t4, o3, false, false) && (e4.dump.length > 1024 && (s4 += "? "), s4 += e4.dump + (e4.condenseFlow ? '"' : "") + ":" + (e4.condenseFlow ? "" : " "), S3(e4, t4, a5, false, false) && (u4 += s4 += e4.dump));
                e4.tag = l3, e4.dump = "{" + u4 + "}";
              }(e3, t3, e3.dump), c3 && (e3.dump = "&ref_" + l2 + " " + e3.dump));
            else if (u3 === "[object Array]") {
              var p2 = e3.noArrayIndent && t3 > 0 ? t3 - 1 : t3;
              n2 && e3.dump.length !== 0 ? (!function(e4, t4, r3, n3) {
                var i3, o3, a5 = "", s4 = e4.tag;
                for (i3 = 0, o3 = r3.length; i3 < o3; i3 += 1)
                  S3(e4, t4 + 1, r3[i3], true, true) && (n3 && i3 === 0 || (a5 += d3(e4, t4)), e4.dump && e4.dump.charCodeAt(0) === 10 ? a5 += "-" : a5 += "- ", a5 += e4.dump);
                e4.tag = s4, e4.dump = a5 || "[]";
              }(e3, p2, e3.dump, o2), c3 && (e3.dump = "&ref_" + l2 + e3.dump)) : (!function(e4, t4, r3) {
                var n3, i3, o3 = "", a5 = e4.tag;
                for (n3 = 0, i3 = r3.length; n3 < i3; n3 += 1)
                  S3(e4, t4, r3[n3], false, false) && (n3 !== 0 && (o3 += "," + (e4.condenseFlow ? "" : " ")), o3 += e4.dump);
                e4.tag = a5, e4.dump = "[" + o3 + "]";
              }(e3, p2, e3.dump), c3 && (e3.dump = "&ref_" + l2 + " " + e3.dump));
            } else {
              if (u3 !== "[object String]") {
                if (e3.skipInvalid)
                  return false;
                throw new i2("unacceptable kind of an object to dump " + u3);
              }
              e3.tag !== "?" && b2(e3, e3.dump, t3, a4);
            }
            e3.tag !== null && e3.tag !== "?" && (e3.dump = "!<" + e3.tag + "> " + e3.dump);
          }
          return true;
        }
        function C(e3, t3) {
          var r2, n2, i3 = [], o2 = [];
          for (function e4(t4, r3, n3) {
            var i4, o3, a4;
            if (t4 !== null && typeof t4 == "object")
              if ((o3 = r3.indexOf(t4)) !== -1)
                n3.indexOf(o3) === -1 && n3.push(o3);
              else if (r3.push(t4), Array.isArray(t4))
                for (o3 = 0, a4 = t4.length; o3 < a4; o3 += 1)
                  e4(t4[o3], r3, n3);
              else
                for (i4 = Object.keys(t4), o3 = 0, a4 = i4.length; o3 < a4; o3 += 1)
                  e4(t4[i4[o3]], r3, n3);
          }(e3, i3, o2), r2 = 0, n2 = o2.length; r2 < n2; r2 += 1)
            t3.duplicates.push(i3[o2[r2]]);
          t3.usedDuplicates = new Array(n2);
        }
        function A(e3, t3) {
          var r2 = new p(t3 = t3 || {});
          return r2.noRefs || C(e3, r2), S3(r2, 0, e3, true, true) ? r2.dump + "\n" : "";
        }
        e2.exports.dump = A, e2.exports.safeDump = function(e3, t3) {
          return A(e3, n.extend({ schema: a3 }, t3));
        };
      }, function(e2, t2, r) {
        "use strict";
        r(31), r(32), r(33), r(64), r(19), r(65), r(20), r(68), r(92), r(144), r(22), r(94), r(23);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        }), o = this && this.__values || function(e3) {
          var t3 = typeof Symbol == "function" && Symbol.iterator, r2 = t3 && e3[t3], n2 = 0;
          if (r2)
            return r2.call(e3);
          if (e3 && typeof e3.length == "number")
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a3 = this && this.__read || function(e3, t3) {
          var r2 = typeof Symbol == "function" && e3[Symbol.iterator];
          if (!r2)
            return e3;
          var n2, i3, o2 = r2.call(e3), a4 = [];
          try {
            for (; (t3 === void 0 || t3-- > 0) && !(n2 = o2.next()).done; )
              a4.push(n2.value);
          } catch (e4) {
            i3 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i3)
                throw i3.error;
            }
          }
          return a4;
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s3 = r(91), u2 = r(1), l = r(183), c2 = r(0), h3 = r(7), p = r(95), f = r(69), d3 = r(3), m3 = r(305), y3 = r(306), v = r(307), _ = function(e3) {
          function t3(t4, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e3.call(this) || this;
            return n2._hasDeclaration = false, n2._docTypeName = "", n2._hasDocumentElement = false, n2._currentElementSerialized = false, n2._openTags = [], n2._ended = false, n2._fragment = r2, n2._options = u2.applyDefaults(t4 || {}, s3.DefaultXMLBuilderCBOptions), n2._builderOptions = { defaultNamespace: n2._options.defaultNamespace, namespaceAlias: n2._options.namespaceAlias }, n2._options.format === "json" ? n2._writer = new y3.JSONCBWriter(n2._options) : n2._options.format === "yaml" ? n2._writer = new v.YAMLCBWriter(n2._options) : n2._writer = new m3.XMLCBWriter(n2._options), n2._options.data !== void 0 && n2.on("data", n2._options.data), n2._options.end !== void 0 && n2.on("end", n2._options.end), n2._options.error !== void 0 && n2.on("error", n2._options.error), n2._prefixMap = new p.NamespacePrefixMap(), n2._prefixMap.set("xml", h3.namespace.XML), n2._prefixIndex = { value: 1 }, n2._push(n2._writer.frontMatter()), n2;
          }
          return i2(t3, e3), t3.prototype.ele = function(e4, t4, r2) {
            var n2, i3;
            if (u2.isObject(e4) || u2.isString(e4) && (/^\s*</.test(e4) || /^\s*[\{\[]/.test(e4) || /^(\s*|(#.*)|(%.*))*---/.test(e4))) {
              var a4 = l.fragment().set(this._options);
              try {
                a4.ele(e4);
              } catch (e5) {
                return this.emit("error", e5), this;
              }
              try {
                for (var s4 = o(a4.node.childNodes), c3 = s4.next(); !c3.done; c3 = s4.next()) {
                  var h4 = c3.value;
                  this._fromNode(h4);
                }
              } catch (e5) {
                n2 = { error: e5 };
              } finally {
                try {
                  c3 && !c3.done && (i3 = s4.return) && i3.call(s4);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              return this;
            }
            if (this._serializeOpenTag(true), !this._fragment && this._hasDocumentElement && this._writer.level === 0)
              return this.emit("error", new Error("Document cannot have multiple document element nodes.")), this;
            try {
              this._currentElement = l.fragment(this._builderOptions).ele(e4, t4, r2);
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._fragment || this._hasDocumentElement || this._docTypeName === "" || this._currentElement.node._qualifiedName === this._docTypeName ? (this._currentElementSerialized = false, this._fragment || (this._hasDocumentElement = true), this) : (this.emit("error", new Error("Document element name does not match DocType declaration name.")), this);
          }, t3.prototype.att = function(e4, t4, r2) {
            if (this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert an attribute node as child of a document node.")), this;
            try {
              this._currentElement.att(e4, t4, r2);
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this;
          }, t3.prototype.com = function(e4) {
            var t4;
            this._serializeOpenTag(true);
            try {
              t4 = l.fragment(this._builderOptions).com(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return !this._options.wellFormed || c2.xml_isLegalChar(t4.data) && t4.data.indexOf("--") === -1 && !t4.data.endsWith("-") ? (this._push(this._writer.comment(t4.data)), this) : (this.emit("error", new Error("Comment data contains invalid characters (well-formed required).")), this);
          }, t3.prototype.txt = function(e4) {
            if (!this._fragment && this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert a text node as child of a document node.")), this;
            var t4;
            this._serializeOpenTag(true);
            try {
              t4 = l.fragment(this._builderOptions).txt(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            if (this._options.wellFormed && !c2.xml_isLegalChar(t4.data))
              return this.emit("error", new Error("Text data contains invalid characters (well-formed required).")), this;
            var r2 = t4.data.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            return this._push(this._writer.text(r2)), this;
          }, t3.prototype.ins = function(e4, t4) {
            var r2;
            t4 === void 0 && (t4 = ""), this._serializeOpenTag(true);
            try {
              r2 = l.fragment(this._builderOptions).ins(e4, t4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._options.wellFormed && (r2.target.indexOf(":") !== -1 || /^xml$/i.test(r2.target)) ? (this.emit("error", new Error("Processing instruction target contains invalid characters (well-formed required).")), this) : this._options.wellFormed && !c2.xml_isLegalChar(r2.data) ? (this.emit("error", Error("Processing instruction data contains invalid characters (well-formed required).")), this) : (this._push(this._writer.instruction(r2.target, r2.data)), this);
          }, t3.prototype.dat = function(e4) {
            var t4;
            this._serializeOpenTag(true);
            try {
              t4 = l.fragment(this._builderOptions).dat(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._push(this._writer.cdata(t4.data)), this;
          }, t3.prototype.dec = function(e4) {
            return e4 === void 0 && (e4 = { version: "1.0" }), this._fragment ? (this.emit("error", Error("Cannot insert an XML declaration into a document fragment.")), this) : this._hasDeclaration ? (this.emit("error", Error("XML declaration is already inserted.")), this) : (this._push(this._writer.declaration(e4.version || "1.0", e4.encoding, e4.standalone)), this._hasDeclaration = true, this);
          }, t3.prototype.dtd = function(e4) {
            if (this._fragment)
              return this.emit("error", Error("Cannot insert a DocType declaration into a document fragment.")), this;
            if (this._docTypeName !== "")
              return this.emit("error", new Error("DocType declaration is already inserted.")), this;
            if (this._hasDocumentElement)
              return this.emit("error", new Error("Cannot insert DocType declaration after document element.")), this;
            var t4;
            try {
              t4 = l.create().dtd(e4).first().node;
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            return this._options.wellFormed && !c2.xml_isPubidChar(t4.publicId) ? (this.emit("error", new Error("DocType public identifier does not match PubidChar construct (well-formed required).")), this) : this._options.wellFormed && (!c2.xml_isLegalChar(t4.systemId) || t4.systemId.indexOf('"') !== -1 && t4.systemId.indexOf("'") !== -1) ? (this.emit("error", new Error("DocType system identifier contains invalid characters (well-formed required).")), this) : (this._docTypeName = e4.name, this._push(this._writer.docType(e4.name, t4.publicId, t4.systemId)), this);
          }, t3.prototype.import = function(e4) {
            var t4, r2, n2 = l.fragment().set(this._options);
            try {
              n2.import(e4);
            } catch (e5) {
              return this.emit("error", e5), this;
            }
            try {
              for (var i3 = o(n2.node.childNodes), a4 = i3.next(); !a4.done; a4 = i3.next()) {
                var s4 = a4.value;
                this._fromNode(s4);
              }
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                a4 && !a4.done && (r2 = i3.return) && r2.call(i3);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            return this;
          }, t3.prototype.up = function() {
            return this._serializeOpenTag(false), this._serializeCloseTag(), this;
          }, t3.prototype.end = function() {
            for (this._serializeOpenTag(false); this._openTags.length > 0; )
              this._serializeCloseTag();
            return this._push(null), this;
          }, t3.prototype._serializeOpenTag = function(e4) {
            if (!this._currentElementSerialized && this._currentElement !== void 0) {
              var r2 = this._currentElement.node;
              if (!this._options.wellFormed || r2.localName.indexOf(":") === -1 && c2.xml_isName(r2.localName)) {
                var n2 = "", i3 = false, o2 = this._prefixMap.copy(), a4 = {}, s4 = this._recordNamespaceInformation(r2, o2, a4), u3 = this._openTags.length === 0 ? null : this._openTags[this._openTags.length - 1][1], l2 = r2.namespaceURI;
                if (l2 === null && (l2 = u3), u3 === l2)
                  s4 !== null && (i3 = true), n2 = l2 === h3.namespace.XML ? "xml:" + r2.localName : r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2));
                else {
                  var p2 = r2.prefix, f2 = null;
                  if (p2 === null && l2 === s4 || (f2 = o2.get(p2, l2)), p2 === "xmlns") {
                    if (this._options.wellFormed)
                      return void this.emit("error", new Error("An element cannot have the 'xmlns' prefix (well-formed required)."));
                    f2 = p2;
                  }
                  f2 !== null ? (n2 = f2 + ":" + r2.localName, s4 !== null && s4 !== h3.namespace.XML && (u3 = s4 || null), this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2))) : p2 !== null ? (p2 in a4 && (p2 = this._generatePrefix(l2, o2, this._prefixIndex)), o2.set(p2, l2), n2 += p2 + ":" + r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns:" + p2, this._serializeAttributeValue(l2, this._options.wellFormed))), s4 !== null && (u3 = s4 || null)) : s4 === null || s4 !== null && s4 !== l2 ? (i3 = true, n2 += r2.localName, u3 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns", this._serializeAttributeValue(l2, this._options.wellFormed)))) : (n2 += r2.localName, u3 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)));
                }
                this._serializeAttributes(r2, o2, this._prefixIndex, a4, i3, this._options.wellFormed);
                var d4 = l2 === h3.namespace.HTML;
                d4 && !e4 && t3._VoidElementNames.has(r2.localName) ? (this._push(this._writer.openTagEnd(n2, true, true)), this._writer.endElement(n2)) : d4 || e4 ? this._push(this._writer.openTagEnd(n2, false, false)) : (this._push(this._writer.openTagEnd(n2, true, false)), this._writer.endElement(n2)), this._currentElementSerialized = true, this._openTags.push([n2, u3, this._prefixMap, e4]), this._isPrefixMapModified(this._prefixMap, o2) && (this._prefixMap = o2), this._writer.level++;
              } else
                this.emit("error", new Error("Node local name contains invalid characters (well-formed required)."));
            }
          }, t3.prototype._serializeCloseTag = function() {
            this._writer.level--;
            var e4 = this._openTags.pop();
            if (e4 !== void 0) {
              var t4 = a3(e4, 4), r2 = t4[0], n2 = (t4[1], t4[2]), i3 = t4[3];
              this._prefixMap = n2, i3 && (this._push(this._writer.closeTag(r2)), this._writer.endElement(r2));
            } else
              this.emit("error", new Error("Last element is undefined."));
          }, t3.prototype._push = function(e4) {
            e4 === null ? (this._ended = true, this.emit("end")) : this._ended ? this.emit("error", new Error("Cannot push to ended stream.")) : e4.length !== 0 && (this._writer.hasData = true, this.emit("data", e4, this._writer.level));
          }, t3.prototype._fromNode = function(e4) {
            var t4, r2, n2, i3;
            if (d3.Guard.isElementNode(e4)) {
              var a4 = e4.prefix ? e4.prefix + ":" + e4.localName : e4.localName;
              e4.namespaceURI !== null ? this.ele(e4.namespaceURI, a4) : this.ele(a4);
              try {
                for (var s4 = o(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                  var l2 = u3.value, c3 = l2.prefix ? l2.prefix + ":" + l2.localName : l2.localName;
                  l2.namespaceURI !== null ? this.att(l2.namespaceURI, c3, l2.value) : this.att(c3, l2.value);
                }
              } catch (e5) {
                t4 = { error: e5 };
              } finally {
                try {
                  u3 && !u3.done && (r2 = s4.return) && r2.call(s4);
                } finally {
                  if (t4)
                    throw t4.error;
                }
              }
              try {
                for (var h4 = o(e4.childNodes), p2 = h4.next(); !p2.done; p2 = h4.next()) {
                  var f2 = p2.value;
                  this._fromNode(f2);
                }
              } catch (e5) {
                n2 = { error: e5 };
              } finally {
                try {
                  p2 && !p2.done && (i3 = h4.return) && i3.call(h4);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              this.up();
            } else
              d3.Guard.isExclusiveTextNode(e4) && e4.data ? this.txt(e4.data) : d3.Guard.isCommentNode(e4) ? this.com(e4.data) : d3.Guard.isCDATASectionNode(e4) ? this.dat(e4.data) : d3.Guard.isProcessingInstructionNode(e4) && this.ins(e4.target, e4.data);
          }, t3.prototype._serializeAttributes = function(e4, t4, r2, n2, i3, a4) {
            var s4, u3, l2 = a4 ? new f.LocalNameSet() : void 0;
            try {
              for (var p2 = o(e4.attributes), d4 = p2.next(); !d4.done; d4 = p2.next()) {
                var m4 = d4.value;
                if (a4 || i3 || m4.namespaceURI !== null) {
                  if (a4 && l2 && l2.has(m4.namespaceURI, m4.localName))
                    return void this.emit("error", new Error("Element contains duplicate attributes (well-formed required)."));
                  a4 && l2 && l2.set(m4.namespaceURI, m4.localName);
                  var y4 = m4.namespaceURI, v2 = null;
                  if (y4 !== null)
                    if (v2 = t4.get(m4.prefix, y4), y4 === h3.namespace.XMLNS) {
                      if (m4.value === h3.namespace.XML || m4.prefix === null && i3 || m4.prefix !== null && (!(m4.localName in n2) || n2[m4.localName] !== m4.value) && t4.has(m4.localName, m4.value))
                        continue;
                      if (a4 && m4.value === h3.namespace.XMLNS)
                        return void this.emit("error", new Error("XMLNS namespace is reserved (well-formed required)."));
                      if (a4 && m4.value === "")
                        return void this.emit("error", new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required)."));
                      m4.prefix === "xmlns" && (v2 = "xmlns");
                    } else
                      v2 === null && (v2 = m4.prefix === null || t4.hasPrefix(m4.prefix) && !t4.has(m4.prefix, y4) ? this._generatePrefix(y4, t4, r2) : m4.prefix, this._push(this._writer.attribute("xmlns:" + v2, this._serializeAttributeValue(y4, this._options.wellFormed))));
                  if (a4 && (m4.localName.indexOf(":") !== -1 || !c2.xml_isName(m4.localName) || m4.localName === "xmlns" && y4 === null))
                    return void this.emit("error", new Error("Attribute local name contains invalid characters (well-formed required)."));
                  this._push(this._writer.attribute((v2 !== null ? v2 + ":" : "") + m4.localName, this._serializeAttributeValue(m4.value, this._options.wellFormed)));
                } else
                  this._push(this._writer.attribute(m4.localName, this._serializeAttributeValue(m4.value, this._options.wellFormed)));
              }
            } catch (e5) {
              s4 = { error: e5 };
            } finally {
              try {
                d4 && !d4.done && (u3 = p2.return) && u3.call(p2);
              } finally {
                if (s4)
                  throw s4.error;
              }
            }
          }, t3.prototype._serializeAttributeValue = function(e4, t4) {
            return t4 && e4 !== null && !c2.xml_isLegalChar(e4) ? (this.emit("error", new Error("Invalid characters in attribute value.")), "") : e4 === null ? "" : e4.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, t3.prototype._recordNamespaceInformation = function(e4, t4, r2) {
            var n2, i3, a4 = null;
            try {
              for (var s4 = o(e4.attributes), u3 = s4.next(); !u3.done; u3 = s4.next()) {
                var l2 = u3.value, c3 = l2.namespaceURI, p2 = l2.prefix;
                if (c3 === h3.namespace.XMLNS) {
                  if (p2 === null) {
                    a4 = l2.value;
                    continue;
                  }
                  var f2 = l2.localName, d4 = l2.value;
                  if (d4 === h3.namespace.XML)
                    continue;
                  if (d4 === "" && (d4 = null), t4.has(f2, d4))
                    continue;
                  t4.set(f2, d4), r2[f2] = d4 || "";
                }
              }
            } catch (e5) {
              n2 = { error: e5 };
            } finally {
              try {
                u3 && !u3.done && (i3 = s4.return) && i3.call(s4);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return a4;
          }, t3.prototype._generatePrefix = function(e4, t4, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t4.set(n2, e4), n2;
          }, t3.prototype._isPrefixMapModified = function(e4, t4) {
            var r2 = e4._items, n2 = t4._items, i3 = e4._nullItems, o2 = t4._nullItems;
            for (var a4 in n2) {
              var s4 = r2[a4];
              if (s4 === void 0)
                return true;
              var u3 = n2[a4];
              if (s4.length !== u3.length)
                return true;
              for (var l2 = 0; l2 < s4.length; l2++)
                if (s4[l2] !== u3[l2])
                  return true;
            }
            if (i3.length !== o2.length)
              return true;
            for (l2 = 0; l2 < i3.length; l2++)
              if (i3[l2] !== o2[l2])
                return true;
            return false;
          }, t3._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), t3;
        }(r(308).EventEmitter);
        t2.XMLBuilderCBImpl = _;
      }, function(e2, t2, r) {
        "use strict";
        r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this, t4) || this;
            return r2._lineLength = 0, r2;
          }
          return i2(t3, e3), t3.prototype.frontMatter = function() {
            return "";
          }, t3.prototype.declaration = function(e4, t4, r2) {
            var n2 = this._beginLine() + "<?xml";
            return n2 += ' version="' + e4 + '"', t4 !== void 0 && (n2 += ' encoding="' + t4 + '"'), r2 !== void 0 && (n2 += ' standalone="' + (r2 ? "yes" : "no") + '"'), n2 += "?>";
          }, t3.prototype.docType = function(e4, t4, r2) {
            var n2 = this._beginLine();
            return n2 += t4 && r2 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '" "' + r2 + '">' : t4 ? "<!DOCTYPE " + e4 + ' PUBLIC "' + t4 + '">' : r2 ? "<!DOCTYPE " + e4 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e4 + ">";
          }, t3.prototype.comment = function(e4) {
            return this._beginLine() + "<!--" + e4 + "-->";
          }, t3.prototype.text = function(e4) {
            return this._beginLine() + e4;
          }, t3.prototype.instruction = function(e4, t4) {
            return t4 ? this._beginLine() + "<?" + e4 + " " + t4 + "?>" : this._beginLine() + "<?" + e4 + "?>";
          }, t3.prototype.cdata = function(e4) {
            return this._beginLine() + "<![CDATA[" + e4 + "]]>";
          }, t3.prototype.openTagBegin = function(e4) {
            return this._lineLength += 1 + e4.length, this._beginLine() + "<" + e4;
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            return r2 ? " />" : t4 ? this._writerOptions.allowEmptyTags ? "></" + e4 + ">" : this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">";
          }, t3.prototype.closeTag = function(e4) {
            return this._beginLine() + "</" + e4 + ">";
          }, t3.prototype.attribute = function(e4, t4) {
            var r2 = e4 + '="' + t4 + '"';
            return this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._lineLength + 1 + r2.length > this._writerOptions.width ? (r2 = this._beginLine() + this._indent(1) + r2, this._lineLength = r2.length, r2) : (this._lineLength += 1 + r2.length, " " + r2);
          }, t3.prototype.beginElement = function(e4) {
          }, t3.prototype.endElement = function(e4) {
          }, t3.prototype._beginLine = function() {
            if (this._writerOptions.prettyPrint) {
              var e4 = (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level);
              return this._lineLength = e4.length, e4;
            }
            return "";
          }, t3.prototype._indent = function(e4) {
            return e4 <= 0 ? "" : this._writerOptions.indent.repeat(e4);
          }, t3;
        }(r(114).BaseCBWriter);
        t2.XMLCBWriter = o;
      }, function(e2, t2, r) {
        "use strict";
        r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this, t4) || this;
            return r2._hasChildren = [], r2._additionalLevel = 0, r2;
          }
          return i2(t3, e3), t3.prototype.frontMatter = function() {
            return "";
          }, t3.prototype.declaration = function(e4, t4, r2) {
            return "";
          }, t3.prototype.docType = function(e4, t4, r2) {
            return "";
          }, t3.prototype.comment = function(e4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.comment) + this._sep() + this._val(e4) + this._sep() + "}";
          }, t3.prototype.text = function(e4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.text) + this._sep() + this._val(e4) + this._sep() + "}";
          }, t3.prototype.instruction = function(e4, t4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.ins) + this._sep() + this._val(t4 ? e4 + " " + t4 : e4) + this._sep() + "}";
          }, t3.prototype.cdata = function(e4) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.cdata) + this._sep() + this._val(e4) + this._sep() + "}";
          }, t3.prototype.attribute = function(e4, t4) {
            return this._comma() + this._beginLine(1) + "{" + this._sep() + this._key(this._builderOptions.convert.att + e4) + this._sep() + this._val(t4) + this._sep() + "}";
          }, t3.prototype.openTagBegin = function(e4) {
            var t4 = this._comma() + this._beginLine() + "{" + this._sep() + this._key(e4) + this._sep() + "{";
            return this._additionalLevel++, this.hasData = true, t4 += this._beginLine() + this._key(this._builderOptions.convert.text) + this._sep() + "[", this._hasChildren.push(false), t4;
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            if (t4) {
              var n2 = this._sep() + "]";
              return this._additionalLevel--, n2 += this._beginLine() + "}" + this._sep() + "}";
            }
            return "";
          }, t3.prototype.closeTag = function(e4) {
            var t4 = this._beginLine() + "]";
            return this._additionalLevel--, t4 += this._beginLine() + "}" + this._sep() + "}";
          }, t3.prototype.beginElement = function(e4) {
          }, t3.prototype.endElement = function(e4) {
            this._hasChildren.pop();
          }, t3.prototype._beginLine = function(e4) {
            return e4 === void 0 && (e4 = 0), this._writerOptions.prettyPrint ? (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level + e4) : "";
          }, t3.prototype._indent = function(e4) {
            return e4 + this._additionalLevel <= 0 ? "" : this._writerOptions.indent.repeat(e4 + this._additionalLevel);
          }, t3.prototype._comma = function() {
            var e4 = this._hasChildren[this._hasChildren.length - 1] ? "," : "";
            return this._hasChildren.length > 0 && (this._hasChildren[this._hasChildren.length - 1] = true), e4;
          }, t3.prototype._sep = function() {
            return this._writerOptions.prettyPrint ? " " : "";
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3;
        }(r(114).BaseCBWriter);
        t2.JSONCBWriter = o;
      }, function(e2, t2, r) {
        "use strict";
        r(74);
        var n, i2 = this && this.__extends || (n = function(e3, t3) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r2 in t4)
              t4.hasOwnProperty(r2) && (e4[r2] = t4[r2]);
          })(e3, t3);
        }, function(e3, t3) {
          function r2() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r2.prototype = t3.prototype, new r2());
        });
        Object.defineProperty(t2, "__esModule", { value: true });
        var o = function(e3) {
          function t3(t4) {
            var r2 = e3.call(this, t4) || this;
            if (r2._rootWritten = false, r2._additionalLevel = 0, t4.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (t4.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return r2;
          }
          return i2(t3, e3), t3.prototype.frontMatter = function() {
            return this._beginLine() + "---";
          }, t3.prototype.declaration = function(e4, t4, r2) {
            return "";
          }, t3.prototype.docType = function(e4, t4, r2) {
            return "";
          }, t3.prototype.comment = function(e4) {
            return this._beginLine() + this._key(this._builderOptions.convert.comment) + " " + this._val(e4);
          }, t3.prototype.text = function(e4) {
            return this._beginLine() + this._key(this._builderOptions.convert.text) + " " + this._val(e4);
          }, t3.prototype.instruction = function(e4, t4) {
            return this._beginLine() + this._key(this._builderOptions.convert.ins) + " " + this._val(t4 ? e4 + " " + t4 : e4);
          }, t3.prototype.cdata = function(e4) {
            return this._beginLine() + this._key(this._builderOptions.convert.cdata) + " " + this._val(e4);
          }, t3.prototype.attribute = function(e4, t4) {
            this._additionalLevel++;
            var r2 = this._beginLine() + this._key(this._builderOptions.convert.att + e4) + " " + this._val(t4);
            return this._additionalLevel--, r2;
          }, t3.prototype.openTagBegin = function(e4) {
            var t4 = this._beginLine() + this._key(e4);
            return this._rootWritten || (this._rootWritten = true), this.hasData = true, this._additionalLevel++, t4 += this._beginLine(true) + this._key(this._builderOptions.convert.text);
          }, t3.prototype.openTagEnd = function(e4, t4, r2) {
            return t4 ? " " + this._val("") : "";
          }, t3.prototype.closeTag = function(e4) {
            return this._additionalLevel--, "";
          }, t3.prototype.beginElement = function(e4) {
          }, t3.prototype.endElement = function(e4) {
          }, t3.prototype._beginLine = function(e4) {
            return e4 === void 0 && (e4 = false), (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level, e4);
          }, t3.prototype._indent = function(e4, t4) {
            if (e4 + this._additionalLevel <= 0)
              return "";
            var r2 = this._writerOptions.indent.repeat(e4 + this._additionalLevel);
            return !t4 && this._rootWritten ? r2.substr(0, r2.length - 2) + "-" + r2.substr(-1, 1) : r2;
          }, t3.prototype._key = function(e4) {
            return '"' + e4 + '":';
          }, t3.prototype._val = function(e4) {
            return JSON.stringify(e4);
          }, t3;
        }(r(114).BaseCBWriter);
        t2.YAMLCBWriter = o;
      }, function(e2, t2, r) {
        "use strict";
        var n, i2 = typeof Reflect == "object" ? Reflect : null, o = i2 && typeof i2.apply == "function" ? i2.apply : function(e3, t3, r2) {
          return Function.prototype.apply.call(e3, t3, r2);
        };
        n = i2 && typeof i2.ownKeys == "function" ? i2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
          return Object.getOwnPropertyNames(e3).concat(Object.getOwnPropertySymbols(e3));
        } : function(e3) {
          return Object.getOwnPropertyNames(e3);
        };
        var a3 = Number.isNaN || function(e3) {
          return e3 != e3;
        };
        function s3() {
          s3.init.call(this);
        }
        e2.exports = s3, s3.EventEmitter = s3, s3.prototype._events = void 0, s3.prototype._eventsCount = 0, s3.prototype._maxListeners = void 0;
        var u2 = 10;
        function l(e3) {
          if (typeof e3 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e3);
        }
        function c2(e3) {
          return e3._maxListeners === void 0 ? s3.defaultMaxListeners : e3._maxListeners;
        }
        function h3(e3, t3, r2, n2) {
          var i3, o2, a4, s4;
          if (l(r2), (o2 = e3._events) === void 0 ? (o2 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (o2.newListener !== void 0 && (e3.emit("newListener", t3, r2.listener ? r2.listener : r2), o2 = e3._events), a4 = o2[t3]), a4 === void 0)
            a4 = o2[t3] = r2, ++e3._eventsCount;
          else if (typeof a4 == "function" ? a4 = o2[t3] = n2 ? [r2, a4] : [a4, r2] : n2 ? a4.unshift(r2) : a4.push(r2), (i3 = c2(e3)) > 0 && a4.length > i3 && !a4.warned) {
            a4.warned = true;
            var u3 = new Error("Possible EventEmitter memory leak detected. " + a4.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u3.name = "MaxListenersExceededWarning", u3.emitter = e3, u3.type = t3, u3.count = a4.length, s4 = u3, console && console.warn && console.warn(s4);
          }
          return e3;
        }
        function p() {
          if (!this.fired)
            return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
        }
        function f(e3, t3, r2) {
          var n2 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: r2 }, i3 = p.bind(n2);
          return i3.listener = r2, n2.wrapFn = i3, i3;
        }
        function d3(e3, t3, r2) {
          var n2 = e3._events;
          if (n2 === void 0)
            return [];
          var i3 = n2[t3];
          return i3 === void 0 ? [] : typeof i3 == "function" ? r2 ? [i3.listener || i3] : [i3] : r2 ? function(e4) {
            for (var t4 = new Array(e4.length), r3 = 0; r3 < t4.length; ++r3)
              t4[r3] = e4[r3].listener || e4[r3];
            return t4;
          }(i3) : y3(i3, i3.length);
        }
        function m3(e3) {
          var t3 = this._events;
          if (t3 !== void 0) {
            var r2 = t3[e3];
            if (typeof r2 == "function")
              return 1;
            if (r2 !== void 0)
              return r2.length;
          }
          return 0;
        }
        function y3(e3, t3) {
          for (var r2 = new Array(t3), n2 = 0; n2 < t3; ++n2)
            r2[n2] = e3[n2];
          return r2;
        }
        Object.defineProperty(s3, "defaultMaxListeners", { enumerable: true, get: function() {
          return u2;
        }, set: function(e3) {
          if (typeof e3 != "number" || e3 < 0 || a3(e3))
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + ".");
          u2 = e3;
        } }), s3.init = function() {
          this._events !== void 0 && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }, s3.prototype.setMaxListeners = function(e3) {
          if (typeof e3 != "number" || e3 < 0 || a3(e3))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + ".");
          return this._maxListeners = e3, this;
        }, s3.prototype.getMaxListeners = function() {
          return c2(this);
        }, s3.prototype.emit = function(e3) {
          for (var t3 = [], r2 = 1; r2 < arguments.length; r2++)
            t3.push(arguments[r2]);
          var n2 = e3 === "error", i3 = this._events;
          if (i3 !== void 0)
            n2 = n2 && i3.error === void 0;
          else if (!n2)
            return false;
          if (n2) {
            var a4;
            if (t3.length > 0 && (a4 = t3[0]), a4 instanceof Error)
              throw a4;
            var s4 = new Error("Unhandled error." + (a4 ? " (" + a4.message + ")" : ""));
            throw s4.context = a4, s4;
          }
          var u3 = i3[e3];
          if (u3 === void 0)
            return false;
          if (typeof u3 == "function")
            o(u3, this, t3);
          else {
            var l2 = u3.length, c3 = y3(u3, l2);
            for (r2 = 0; r2 < l2; ++r2)
              o(c3[r2], this, t3);
          }
          return true;
        }, s3.prototype.addListener = function(e3, t3) {
          return h3(this, e3, t3, false);
        }, s3.prototype.on = s3.prototype.addListener, s3.prototype.prependListener = function(e3, t3) {
          return h3(this, e3, t3, true);
        }, s3.prototype.once = function(e3, t3) {
          return l(t3), this.on(e3, f(this, e3, t3)), this;
        }, s3.prototype.prependOnceListener = function(e3, t3) {
          return l(t3), this.prependListener(e3, f(this, e3, t3)), this;
        }, s3.prototype.removeListener = function(e3, t3) {
          var r2, n2, i3, o2, a4;
          if (l(t3), (n2 = this._events) === void 0)
            return this;
          if ((r2 = n2[e3]) === void 0)
            return this;
          if (r2 === t3 || r2.listener === t3)
            --this._eventsCount == 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete n2[e3], n2.removeListener && this.emit("removeListener", e3, r2.listener || t3));
          else if (typeof r2 != "function") {
            for (i3 = -1, o2 = r2.length - 1; o2 >= 0; o2--)
              if (r2[o2] === t3 || r2[o2].listener === t3) {
                a4 = r2[o2].listener, i3 = o2;
                break;
              }
            if (i3 < 0)
              return this;
            i3 === 0 ? r2.shift() : function(e4, t4) {
              for (; t4 + 1 < e4.length; t4++)
                e4[t4] = e4[t4 + 1];
              e4.pop();
            }(r2, i3), r2.length === 1 && (n2[e3] = r2[0]), n2.removeListener !== void 0 && this.emit("removeListener", e3, a4 || t3);
          }
          return this;
        }, s3.prototype.off = s3.prototype.removeListener, s3.prototype.removeAllListeners = function(e3) {
          var t3, r2, n2;
          if ((r2 = this._events) === void 0)
            return this;
          if (r2.removeListener === void 0)
            return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : r2[e3] !== void 0 && (--this._eventsCount == 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete r2[e3]), this;
          if (arguments.length === 0) {
            var i3, o2 = Object.keys(r2);
            for (n2 = 0; n2 < o2.length; ++n2)
              (i3 = o2[n2]) !== "removeListener" && this.removeAllListeners(i3);
            return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
          }
          if (typeof (t3 = r2[e3]) == "function")
            this.removeListener(e3, t3);
          else if (t3 !== void 0)
            for (n2 = t3.length - 1; n2 >= 0; n2--)
              this.removeListener(e3, t3[n2]);
          return this;
        }, s3.prototype.listeners = function(e3) {
          return d3(this, e3, true);
        }, s3.prototype.rawListeners = function(e3) {
          return d3(this, e3, false);
        }, s3.listenerCount = function(e3, t3) {
          return typeof e3.listenerCount == "function" ? e3.listenerCount(t3) : m3.call(e3, t3);
        }, s3.prototype.listenerCount = m3, s3.prototype.eventNames = function() {
          return this._eventsCount > 0 ? n(this._events) : [];
        };
      }, function(e2, t2, r) {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r(77);
        t2.createCB = function(e3) {
          return new n.XMLBuilderCBImpl(e3);
        }, t2.fragmentCB = function(e3) {
          return new n.XMLBuilderCBImpl(e3, true);
        };
      }]);
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WordpressPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  lang: "auto",
  apiType: "xml-rpc" /* XML_RPC */,
  endpoint: "",
  saveUserName: false,
  savePassword: false,
  showRibbonIcon: false,
  defaultPostStatus: "draft" /* Draft */
};
var WordpressSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const t2 = (key, vars) => {
      return this.plugin.i18n.t(key, vars);
    };
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: t2("settings_title") });
    new import_obsidian.Setting(containerEl).setName(t2("settings_url")).setDesc(t2("settings_urlDesc")).addText((text) => text.setPlaceholder(t2("settings_urlPlaceholder")).setValue(this.plugin.settings.endpoint).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.endpoint = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName(t2("settings_apiType")).setDesc(t2("settings_apiTypeDesc")).addDropdown((dropdown) => {
      dropdown.addOption("xml-rpc" /* XML_RPC */, t2("settings_apiTypeXmlRpc")).addOption("miniOrange" /* RestAPI_miniOrange */, t2("settings_apiTypeRestMiniOrange")).setValue(this.plugin.settings.apiType).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.apiType = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName(t2("settings_showRibbonIcon")).setDesc(t2("settings_showRibbonIconDesc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showRibbonIcon = value;
      yield this.plugin.saveSettings();
      this.display();
      this.plugin.updateRibbonIcon();
    })));
    new import_obsidian.Setting(containerEl).setName(t2("settings_defaultPostStatus")).setDesc(t2("settings_defaultPostStatusDesc")).addDropdown((dropdown) => {
      dropdown.addOption("draft" /* Draft */, t2("settings_defaultPostStatusDraft")).addOption("publish" /* Publish */, t2("settings_defaultPostStatusPublish")).setValue(this.plugin.settings.defaultPostStatus).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.defaultPostStatus = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
  }
};

// src/icons.ts
var import_obsidian2 = require("obsidian");
var icons = {
  "wp-logo": `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <g fill="currentColor">
    <path d="M 7.109375 50 C 7.109375 66.976562 16.976562 81.648438 31.28125 88.601562 L 10.820312 32.542969 C 8.441406 37.878906 7.109375 43.78125 7.109375 50 Z M 7.109375 50 "/>
    <path d="M 78.957031 47.835938 C 78.957031 42.535156 77.054688 38.863281 75.421875 36.003906 C 73.246094 32.472656 71.207031 29.480469 71.207031 25.945312 C 71.207031 22.003906 74.199219 18.332031 78.410156 18.332031 C 78.601562 18.332031 78.78125 18.355469 78.96875 18.367188 C 71.335938 11.375 61.167969 7.105469 50 7.105469 C 35.015625 7.105469 21.832031 14.796875 14.164062 26.441406 C 15.167969 26.472656 16.117188 26.492188 16.921875 26.492188 C 21.410156 26.492188 28.355469 25.949219 28.355469 25.949219 C 30.667969 25.8125 30.941406 29.207031 28.628906 29.480469 C 28.628906 29.480469 26.304688 29.753906 23.722656 29.890625 L 39.339844 76.351562 L 48.726562 48.199219 L 42.042969 29.886719 C 39.734375 29.753906 37.546875 29.480469 37.546875 29.480469 C 35.234375 29.34375 35.507812 25.808594 37.816406 25.945312 C 37.816406 25.945312 44.902344 26.492188 49.117188 26.492188 C 53.601562 26.492188 60.546875 25.945312 60.546875 25.945312 C 62.859375 25.808594 63.132812 29.207031 60.824219 29.480469 C 60.824219 29.480469 58.492188 29.753906 55.914062 29.886719 L 71.414062 75.996094 L 75.691406 61.699219 C 77.546875 55.765625 78.957031 51.507812 78.957031 47.835938 Z M 78.957031 47.835938 "/>
    <path d="M 50.753906 53.75 L 37.882812 91.148438 C 41.726562 92.277344 45.789062 92.894531 50 92.894531 C 54.996094 92.894531 59.785156 92.03125 64.246094 90.464844 C 64.128906 90.28125 64.027344 90.085938 63.941406 89.871094 Z M 50.753906 53.75 "/>
    <path d="M 87.636719 29.417969 C 87.824219 30.785156 87.925781 32.253906 87.925781 33.832031 C 87.925781 38.183594 87.113281 43.074219 84.667969 49.195312 L 71.5625 87.074219 C 84.316406 79.640625 92.894531 65.824219 92.894531 50 C 92.894531 42.542969 90.988281 35.53125 87.636719 29.417969 Z M 87.636719 29.417969 "/>
    <path d="M 50 0 C 22.433594 0 0 22.429688 0 50 C 0 77.570312 22.433594 100 50 100 C 77.570312 100 100.003906 77.570312 100.003906 50 C 100.003906 22.429688 77.570312 0 50 0 Z M 50 97.707031 C 23.695312 97.707031 2.292969 76.304688 2.292969 50 C 2.292969 23.695312 23.695312 2.292969 50 2.292969 C 76.304688 2.292969 97.707031 23.695312 97.707031 50 C 97.707031 76.304688 76.304688 97.707031 50 97.707031 Z M 50 97.707031 "/>
  </g>
</svg>`
};
var addIcons = () => {
  Object.keys(icons).forEach((key) => {
    (0, import_obsidian2.addIcon)(key, icons[key]);
  });
};

// src/wp-clients.ts
var import_obsidian8 = require("obsidian");

// src/xmlrpc-client.ts
var import_obsidian3 = require("obsidian");
var import_xmlbuilder2 = __toESM(require_xmlbuilder2_min());

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var arrayMap_default = arrayMap;

// node_modules/lodash-es/isArray.js
var isArray = Array.isArray;
var isArray_default = isArray;

// node_modules/lodash-es/_baseToString.js
var INFINITY = 1 / 0;
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_default(value)) {
    return arrayMap_default(value, baseToString) + "";
  }
  if (isSymbol_default(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
var baseToString_default = baseToString;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/toFinite.js
var INFINITY2 = 1 / 0;
var MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_default(value);
  if (value === INFINITY2 || value === -INFINITY2) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_default = toFinite;

// node_modules/lodash-es/toInteger.js
function toInteger(value) {
  var result = toFinite_default(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_default = toInteger;

// node_modules/lodash-es/identity.js
function identity(value) {
  return value;
}
var identity_default = identity;

// node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;

// node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e2) {
    }
    try {
      return func + "";
    } catch (e2) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto2 = Function.prototype;
var objectProto3 = Object.prototype;
var funcToString2 = funcProto2.toString;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value)) {
    return false;
  }
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/lodash-es/_apply.js
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var apply_default = apply;

// node_modules/lodash-es/_shortOut.js
var HOT_COUNT = 800;
var HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var shortOut_default = shortOut;

// node_modules/lodash-es/constant.js
function constant(value) {
  return function() {
    return value;
  };
}
var constant_default = constant;

// node_modules/lodash-es/_defineProperty.js
var defineProperty = function() {
  try {
    var func = getNative_default(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e2) {
  }
}();
var defineProperty_default = defineProperty;

// node_modules/lodash-es/_baseSetToString.js
var baseSetToString = !defineProperty_default ? identity_default : function(func, string) {
  return defineProperty_default(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant_default(string),
    "writable": true
  });
};
var baseSetToString_default = baseSetToString;

// node_modules/lodash-es/_setToString.js
var setToString = shortOut_default(baseSetToString_default);
var setToString_default = setToString;

// node_modules/lodash-es/_isIndex.js
var MAX_SAFE_INTEGER = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var isIndex_default = isIndex;

// node_modules/lodash-es/_baseAssignValue.js
function baseAssignValue(object, key, value) {
  if (key == "__proto__" && defineProperty_default) {
    defineProperty_default(object, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object[key] = value;
  }
}
var baseAssignValue_default = baseAssignValue;

// node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/lodash-es/_assignValue.js
var objectProto4 = Object.prototype;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty3.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) {
    baseAssignValue_default(object, key, value);
  }
}
var assignValue_default = assignValue;

// node_modules/lodash-es/_copyObject.js
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1, length = props.length;
  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue_default(object, key, newValue);
    } else {
      assignValue_default(object, key, newValue);
    }
  }
  return object;
}
var copyObject_default = copyObject;

// node_modules/lodash-es/_overRest.js
var nativeMax = Math.max;
function overRest(func, start, transform) {
  start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply_default(func, this, otherArgs);
  };
}
var overRest_default = overRest;

// node_modules/lodash-es/_baseRest.js
function baseRest(func, start) {
  return setToString_default(overRest_default(func, start, identity_default), func + "");
}
var baseRest_default = baseRest;

// node_modules/lodash-es/isLength.js
var MAX_SAFE_INTEGER2 = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
}
var isLength_default = isLength;

// node_modules/lodash-es/isArrayLike.js
function isArrayLike(value) {
  return value != null && isLength_default(value.length) && !isFunction_default(value);
}
var isArrayLike_default = isArrayLike;

// node_modules/lodash-es/_isIterateeCall.js
function isIterateeCall(value, index, object) {
  if (!isObject_default(object)) {
    return false;
  }
  var type = typeof index;
  if (type == "number" ? isArrayLike_default(object) && isIndex_default(index, object.length) : type == "string" && index in object) {
    return eq_default(object[index], value);
  }
  return false;
}
var isIterateeCall_default = isIterateeCall;

// node_modules/lodash-es/_createAssigner.js
function createAssigner(assigner) {
  return baseRest_default(function(object, sources) {
    var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall_default(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}
var createAssigner_default = createAssigner;

// node_modules/lodash-es/_isPrototype.js
var objectProto5 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto5;
  return value === proto;
}
var isPrototype_default = isPrototype;

// node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee) {
  var index = -1, result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
var baseTimes_default = baseTimes;

// node_modules/lodash-es/_baseIsArguments.js
var argsTag = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
}
var baseIsArguments_default = baseIsArguments;

// node_modules/lodash-es/isArguments.js
var objectProto6 = Object.prototype;
var hasOwnProperty4 = objectProto6.hasOwnProperty;
var propertyIsEnumerable = objectProto6.propertyIsEnumerable;
var isArguments = baseIsArguments_default(function() {
  return arguments;
}()) ? baseIsArguments_default : function(value) {
  return isObjectLike_default(value) && hasOwnProperty4.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
var isArguments_default = isArguments;

// node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return false;
}
var stubFalse_default = stubFalse;

// node_modules/lodash-es/isBuffer.js
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer2 = moduleExports ? root_default.Buffer : void 0;
var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse_default;
var isBuffer_default = isBuffer;

// node_modules/lodash-es/_baseIsTypedArray.js
var argsTag2 = "[object Arguments]";
var arrayTag = "[object Array]";
var boolTag = "[object Boolean]";
var dateTag = "[object Date]";
var errorTag = "[object Error]";
var funcTag2 = "[object Function]";
var mapTag = "[object Map]";
var numberTag = "[object Number]";
var objectTag = "[object Object]";
var regexpTag = "[object RegExp]";
var setTag = "[object Set]";
var stringTag = "[object String]";
var weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]";
var dataViewTag = "[object DataView]";
var float32Tag = "[object Float32Array]";
var float64Tag = "[object Float64Array]";
var int8Tag = "[object Int8Array]";
var int16Tag = "[object Int16Array]";
var int32Tag = "[object Int32Array]";
var uint8Tag = "[object Uint8Array]";
var uint8ClampedTag = "[object Uint8ClampedArray]";
var uint16Tag = "[object Uint16Array]";
var uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value) {
  return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
}
var baseIsTypedArray_default = baseIsTypedArray;

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/lodash-es/_nodeUtil.js
var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
var freeProcess = moduleExports2 && freeGlobal_default.process;
var nodeUtil = function() {
  try {
    var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e2) {
  }
}();
var nodeUtil_default = nodeUtil;

// node_modules/lodash-es/isTypedArray.js
var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
var isTypedArray_default = isTypedArray;

// node_modules/lodash-es/_arrayLikeKeys.js
var objectProto7 = Object.prototype;
var hasOwnProperty5 = objectProto7.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty5.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var arrayLikeKeys_default = arrayLikeKeys;

// node_modules/lodash-es/_overArg.js
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var overArg_default = overArg;

// node_modules/lodash-es/_nativeKeys.js
var nativeKeys = overArg_default(Object.keys, Object);
var nativeKeys_default = nativeKeys;

// node_modules/lodash-es/_baseKeys.js
var objectProto8 = Object.prototype;
var hasOwnProperty6 = objectProto8.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype_default(object)) {
    return nativeKeys_default(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty6.call(object, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
var baseKeys_default = baseKeys;

// node_modules/lodash-es/keys.js
function keys(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
}
var keys_default = keys;

// node_modules/lodash-es/_nativeKeysIn.js
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}
var nativeKeysIn_default = nativeKeysIn;

// node_modules/lodash-es/_baseKeysIn.js
var objectProto9 = Object.prototype;
var hasOwnProperty7 = objectProto9.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject_default(object)) {
    return nativeKeysIn_default(object);
  }
  var isProto = isPrototype_default(object), result = [];
  for (var key in object) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty7.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}
var baseKeysIn_default = baseKeysIn;

// node_modules/lodash-es/keysIn.js
function keysIn(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object, true) : baseKeysIn_default(object);
}
var keysIn_default = keysIn;

// node_modules/lodash-es/assignInWith.js
var assignInWith = createAssigner_default(function(object, source, srcIndex, customizer) {
  copyObject_default(source, keysIn_default(source), object, customizer);
});
var assignInWith_default = assignInWith;

// node_modules/lodash-es/_isKey.js
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
var reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_default(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var isKey_default = isKey;

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var hashDelete_default = hashDelete;

// node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto10 = Object.prototype;
var hasOwnProperty8 = objectProto10.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty8.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/lodash-es/_hashHas.js
var objectProto11 = Object.prototype;
var hasOwnProperty9 = objectProto11.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty9.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
  return this;
}
var hashSet_default = hashSet;

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_default(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var listCacheSet_default = listCacheSet;

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/lodash-es/memoize.js
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
memoize.Cache = MapCache_default;
var memoize_default = memoize;

// node_modules/lodash-es/_memoizeCapped.js
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_default(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var memoizeCapped_default = memoizeCapped;

// node_modules/lodash-es/_stringToPath.js
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match2, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
  });
  return result;
});
var stringToPath_default = stringToPath;

// node_modules/lodash-es/toString.js
function toString(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString;

// node_modules/lodash-es/_castPath.js
function castPath(value, object) {
  if (isArray_default(value)) {
    return value;
  }
  return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
}
var castPath_default = castPath;

// node_modules/lodash-es/_toKey.js
var INFINITY3 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_default(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
}
var toKey_default = toKey;

// node_modules/lodash-es/_baseGet.js
function baseGet(object, path) {
  path = castPath_default(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey_default(path[index++])];
  }
  return index && index == length ? object : void 0;
}
var baseGet_default = baseGet;

// node_modules/lodash-es/get.js
function get(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet_default(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_default = get;

// node_modules/lodash-es/_getPrototype.js
var getPrototype = overArg_default(Object.getPrototypeOf, Object);
var getPrototype_default = getPrototype;

// node_modules/lodash-es/isPlainObject.js
var objectTag2 = "[object Object]";
var funcProto3 = Function.prototype;
var objectProto12 = Object.prototype;
var funcToString3 = funcProto3.toString;
var hasOwnProperty10 = objectProto12.hasOwnProperty;
var objectCtorString = funcToString3.call(Object);
function isPlainObject(value) {
  if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag2) {
    return false;
  }
  var proto = getPrototype_default(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty10.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString3.call(Ctor) == objectCtorString;
}
var isPlainObject_default = isPlainObject;

// node_modules/lodash-es/isError.js
var domExcTag = "[object DOMException]";
var errorTag2 = "[object Error]";
function isError(value) {
  if (!isObjectLike_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == errorTag2 || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject_default(value);
}
var isError_default = isError;

// node_modules/lodash-es/attempt.js
var attempt = baseRest_default(function(func, args) {
  try {
    return apply_default(func, void 0, args);
  } catch (e2) {
    return isError_default(e2) ? e2 : new Error(e2);
  }
});
var attempt_default = attempt;

// node_modules/lodash-es/_basePropertyOf.js
function basePropertyOf(object) {
  return function(key) {
    return object == null ? void 0 : object[key];
  };
}
var basePropertyOf_default = basePropertyOf;

// node_modules/lodash-es/_escapeHtmlChar.js
var htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var escapeHtmlChar = basePropertyOf_default(htmlEscapes);
var escapeHtmlChar_default = escapeHtmlChar;

// node_modules/lodash-es/escape.js
var reUnescapedHtml = /[&<>"']/g;
var reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
function escape2(string) {
  string = toString_default(string);
  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar_default) : string;
}
var escape_default = escape2;

// node_modules/lodash-es/_baseValues.js
function baseValues(object, props) {
  return arrayMap_default(props, function(key) {
    return object[key];
  });
}
var baseValues_default = baseValues;

// node_modules/lodash-es/isBoolean.js
var boolTag2 = "[object Boolean]";
function isBoolean(value) {
  return value === true || value === false || isObjectLike_default(value) && baseGetTag_default(value) == boolTag2;
}
var isBoolean_default = isBoolean;

// node_modules/lodash-es/_baseIsDate.js
var dateTag2 = "[object Date]";
function baseIsDate(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == dateTag2;
}
var baseIsDate_default = baseIsDate;

// node_modules/lodash-es/isDate.js
var nodeIsDate = nodeUtil_default && nodeUtil_default.isDate;
var isDate = nodeIsDate ? baseUnary_default(nodeIsDate) : baseIsDate_default;
var isDate_default = isDate;

// node_modules/lodash-es/isInteger.js
function isInteger(value) {
  return typeof value == "number" && value == toInteger_default(value);
}
var isInteger_default = isInteger;

// node_modules/lodash-es/isNumber.js
var numberTag2 = "[object Number]";
function isNumber(value) {
  return typeof value == "number" || isObjectLike_default(value) && baseGetTag_default(value) == numberTag2;
}
var isNumber_default = isNumber;

// node_modules/lodash-es/isSafeInteger.js
var MAX_SAFE_INTEGER3 = 9007199254740991;
function isSafeInteger(value) {
  return isInteger_default(value) && value >= -MAX_SAFE_INTEGER3 && value <= MAX_SAFE_INTEGER3;
}
var isSafeInteger_default = isSafeInteger;

// node_modules/lodash-es/_customDefaultsAssignIn.js
var objectProto13 = Object.prototype;
var hasOwnProperty11 = objectProto13.hasOwnProperty;
function customDefaultsAssignIn(objValue, srcValue, key, object) {
  if (objValue === void 0 || eq_default(objValue, objectProto13[key]) && !hasOwnProperty11.call(object, key)) {
    return srcValue;
  }
  return objValue;
}
var customDefaultsAssignIn_default = customDefaultsAssignIn;

// node_modules/lodash-es/_escapeStringChar.js
var stringEscapes = {
  "\\": "\\",
  "'": "'",
  "\n": "n",
  "\r": "r",
  "\u2028": "u2028",
  "\u2029": "u2029"
};
function escapeStringChar(chr) {
  return "\\" + stringEscapes[chr];
}
var escapeStringChar_default = escapeStringChar;

// node_modules/lodash-es/_reInterpolate.js
var reInterpolate = /<%=([\s\S]+?)%>/g;
var reInterpolate_default = reInterpolate;

// node_modules/lodash-es/_reEscape.js
var reEscape = /<%-([\s\S]+?)%>/g;
var reEscape_default = reEscape;

// node_modules/lodash-es/_reEvaluate.js
var reEvaluate = /<%([\s\S]+?)%>/g;
var reEvaluate_default = reEvaluate;

// node_modules/lodash-es/templateSettings.js
var templateSettings = {
  "escape": reEscape_default,
  "evaluate": reEvaluate_default,
  "interpolate": reInterpolate_default,
  "variable": "",
  "imports": {
    "_": { "escape": escape_default }
  }
};
var templateSettings_default = templateSettings;

// node_modules/lodash-es/template.js
var INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
var reEmptyStringLeading = /\b__p \+= '';/g;
var reEmptyStringMiddle = /\b(__p \+=) '' \+/g;
var reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
var reNoMatch = /($^)/;
var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
var objectProto14 = Object.prototype;
var hasOwnProperty12 = objectProto14.hasOwnProperty;
function template(string, options2, guard) {
  var settings = templateSettings_default.imports._.templateSettings || templateSettings_default;
  if (guard && isIterateeCall_default(string, options2, guard)) {
    options2 = void 0;
  }
  string = toString_default(string);
  options2 = assignInWith_default({}, options2, settings, customDefaultsAssignIn_default);
  var imports = assignInWith_default({}, options2.imports, settings.imports, customDefaultsAssignIn_default), importsKeys = keys_default(imports), importsValues = baseValues_default(imports, importsKeys);
  var isEscaping, isEvaluating, index = 0, interpolate = options2.interpolate || reNoMatch, source = "__p += '";
  var reDelimiters = RegExp((options2.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate_default ? reEsTemplate : reNoMatch).source + "|" + (options2.evaluate || reNoMatch).source + "|$", "g");
  var sourceURL = hasOwnProperty12.call(options2, "sourceURL") ? "//# sourceURL=" + (options2.sourceURL + "").replace(/\s/g, " ") + "\n" : "";
  string.replace(reDelimiters, function(match2, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    interpolateValue || (interpolateValue = esTemplateValue);
    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar_default);
    if (escapeValue) {
      isEscaping = true;
      source += "' +\n__e(" + escapeValue + ") +\n'";
    }
    if (evaluateValue) {
      isEvaluating = true;
      source += "';\n" + evaluateValue + ";\n__p += '";
    }
    if (interpolateValue) {
      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    }
    index = offset + match2.length;
    return match2;
  });
  source += "';\n";
  var variable = hasOwnProperty12.call(options2, "variable") && options2.variable;
  if (!variable) {
    source = "with (obj) {\n" + source + "\n}\n";
  } else if (reForbiddenIdentifierChars.test(variable)) {
    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
  }
  source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
  source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
  var result = attempt_default(function() {
    return Function(importsKeys, sourceURL + "return " + source).apply(void 0, importsValues);
  });
  result.source = source;
  if (isError_default(result)) {
    throw result;
  }
  return result;
}
var template_default = template;

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger2(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger2(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/isDate/index.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function isDate2(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof2(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate2(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger2(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options2) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger2((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options2) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger2((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options2);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options2);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options2) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger2((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options2);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options2);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options2) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options2).getTime() - startOfUTCWeekYear(date, options2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  Y: function Y(date, token, localize2, options2) {
    var signedWeekYear = getUTCWeekYear(date, options2);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function w(date, token, localize2, options2) {
    var week = getUTCWeek(date, options2);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function e(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function c(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  X: function X(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function x(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function O(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function z(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function t(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function T(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options2) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options2 !== null && options2 !== void 0 && options2.addSuffix) {
    if (options2.comparison && options2.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options2.width ? String(options2.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options2) {
    var context = options2 !== null && options2 !== void 0 && options2.context ? String(options2.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options2 !== null && options2 !== void 0 && options2.width ? String(options2.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options2 !== null && options2 !== void 0 && options2.width ? String(options2.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options2.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options2) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger2((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale2 = options2.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger2((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale3 = options2.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, object) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  for (var property in object) {
    if (Object.prototype.hasOwnProperty.call(object, property)) {
      ;
      target[property] = object[property];
    }
  }
  return target;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
function _typeof3(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof3 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof3 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof3(obj);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof3(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /* @__PURE__ */ function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
}();
var ValueSetter = /* @__PURE__ */ function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate(utcDate, options2) {
      return this.validateValue(utcDate, this.value, options2);
    }
  }, {
    key: "set",
    value: function set(utcDate, flags, options2) {
      return this.setValue(utcDate, flags, this.value, options2);
    }
  }]);
  return ValueSetter2;
}(Setter);
var DateToSystemTimezoneSetter = /* @__PURE__ */ function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set(date, flags) {
      if (flags.timestampIsSet) {
        return date;
      }
      var convertedDate = new Date(0);
      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
}(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
var Parser = /* @__PURE__ */ function() {
  function Parser3() {
    _classCallCheck2(this, Parser3);
  }
  _createClass2(Parser3, [{
    key: "run",
    value: function run(dateString, token, match2, options2) {
      var result = this.parse(dateString, token, match2, options2);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser3;
}();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
function _typeof4(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof4 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof4 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof4(obj);
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  return Constructor;
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _possibleConstructorReturn2(self2, call) {
  if (call && (_typeof4(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized2(self2);
}
function _assertThisInitialized2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf2(o);
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var EraParser = /* @__PURE__ */ function(_Parser) {
  _inherits2(EraParser2, _Parser);
  var _super = _createSuper2(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck3(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty2(_assertThisInitialized2(_this), "priority", 140);
    _defineProperty2(_assertThisInitialized2(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass3(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return EraParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  date: /^(3[0-1]|[0-2]?\d)/,
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  week: /^(5[0-3]|[0-4]?\d)/,
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  hour11h: /^(1[0-1]|0?\d)/,
  hour12h: /^(1[0-2]|0?\d)/,
  minute: /^[0-5]?\d/,
  second: /^[0-5]?\d/,
  singleDigit: /^\d/,
  twoDigits: /^\d{1,2}/,
  threeDigits: /^\d{1,3}/,
  fourDigits: /^\d{1,4}/,
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  twoDigitsSigned: /^-?\d{1,2}/,
  threeDigitsSigned: /^-?\d{1,3}/,
  fourDigitsSigned: /^-?\d{1,4}/
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
function _typeof5(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof5 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof5 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof5(obj);
}
function _classCallCheck4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties4(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties4(Constructor, staticProps);
  return Constructor;
}
function _inherits3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf3(subClass, superClass);
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn3(this, result);
  };
}
function _possibleConstructorReturn3(self2, call) {
  if (call && (_typeof5(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized3(self2);
}
function _assertThisInitialized3(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf3(o) {
  _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf3(o);
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var YearParser = /* @__PURE__ */ function(_Parser) {
  _inherits3(YearParser2, _Parser);
  var _super = _createSuper3(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck4(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty3(_assertThisInitialized3(_this), "priority", 130);
    _defineProperty3(_assertThisInitialized3(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass4(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return YearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
function _typeof6(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof6 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof6 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof6(obj);
}
function _classCallCheck5(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties5(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass5(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties5(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties5(Constructor, staticProps);
  return Constructor;
}
function _inherits4(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf4(subClass, superClass);
}
function _setPrototypeOf4(o, p) {
  _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf4(o, p);
}
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf4(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf4(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn4(this, result);
  };
}
function _possibleConstructorReturn4(self2, call) {
  if (call && (_typeof6(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized4(self2);
}
function _assertThisInitialized4(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf4(o) {
  _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf4(o);
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits4(LocalWeekYearParser2, _Parser);
  var _super = _createSuper4(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck5(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty4(_assertThisInitialized4(_this), "priority", 130);
    _defineProperty4(_assertThisInitialized4(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass5(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set(date, flags, value, options2) {
      var currentYear = getUTCWeekYear(date, options2);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options2.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options2);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options2.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options2);
    }
  }]);
  return LocalWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
function _typeof7(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof7 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof7 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof7(obj);
}
function _classCallCheck6(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties6(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass6(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties6(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties6(Constructor, staticProps);
  return Constructor;
}
function _inherits5(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf5(subClass, superClass);
}
function _setPrototypeOf5(o, p) {
  _setPrototypeOf5 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf5(o, p);
}
function _createSuper5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf5(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf5(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn5(this, result);
  };
}
function _possibleConstructorReturn5(self2, call) {
  if (call && (_typeof7(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized5(self2);
}
function _assertThisInitialized5(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf5(o) {
  _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf5(o);
}
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOWeekYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits5(ISOWeekYearParser2, _Parser);
  var _super = _createSuper5(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck6(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty5(_assertThisInitialized5(_this), "priority", 130);
    _defineProperty5(_assertThisInitialized5(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass6(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
function _typeof8(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof8 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof8 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof8(obj);
}
function _classCallCheck7(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties7(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass7(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties7(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties7(Constructor, staticProps);
  return Constructor;
}
function _inherits6(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf6(subClass, superClass);
}
function _setPrototypeOf6(o, p) {
  _setPrototypeOf6 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf6(o, p);
}
function _createSuper6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf6(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf6(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn6(this, result);
  };
}
function _possibleConstructorReturn6(self2, call) {
  if (call && (_typeof8(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized6(self2);
}
function _assertThisInitialized6(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct6() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf6(o) {
  _getPrototypeOf6 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf6(o);
}
function _defineProperty6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ExtendedYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits6(ExtendedYearParser2, _Parser);
  var _super = _createSuper6(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck7(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty6(_assertThisInitialized6(_this), "priority", 130);
    _defineProperty6(_assertThisInitialized6(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass7(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ExtendedYearParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
function _typeof9(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof9 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof9 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof9(obj);
}
function _classCallCheck8(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties8(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass8(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties8(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties8(Constructor, staticProps);
  return Constructor;
}
function _inherits7(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf7(subClass, superClass);
}
function _setPrototypeOf7(o, p) {
  _setPrototypeOf7 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf7(o, p);
}
function _createSuper7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf7(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf7(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn7(this, result);
  };
}
function _possibleConstructorReturn7(self2, call) {
  if (call && (_typeof9(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized7(self2);
}
function _assertThisInitialized7(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct7() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf7(o) {
  _getPrototypeOf7 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf7(o);
}
function _defineProperty7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var QuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits7(QuarterParser2, _Parser);
  var _super = _createSuper7(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck8(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty7(_assertThisInitialized7(_this), "priority", 120);
    _defineProperty7(_assertThisInitialized7(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass8(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return QuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
function _typeof10(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof10 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof10 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof10(obj);
}
function _classCallCheck9(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties9(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass9(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties9(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties9(Constructor, staticProps);
  return Constructor;
}
function _inherits8(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf8(subClass, superClass);
}
function _setPrototypeOf8(o, p) {
  _setPrototypeOf8 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf8(o, p);
}
function _createSuper8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf8(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf8(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn8(this, result);
  };
}
function _possibleConstructorReturn8(self2, call) {
  if (call && (_typeof10(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized8(self2);
}
function _assertThisInitialized8(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct8() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf8(o) {
  _getPrototypeOf8 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf8(o);
}
function _defineProperty8(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneQuarterParser = /* @__PURE__ */ function(_Parser) {
  _inherits8(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper8(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck9(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty8(_assertThisInitialized8(_this), "priority", 120);
    _defineProperty8(_assertThisInitialized8(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass9(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneQuarterParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
function _typeof11(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof11 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof11 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof11(obj);
}
function _classCallCheck10(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties10(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass10(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties10(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties10(Constructor, staticProps);
  return Constructor;
}
function _inherits9(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf9(subClass, superClass);
}
function _setPrototypeOf9(o, p) {
  _setPrototypeOf9 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf9(o, p);
}
function _createSuper9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf9(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf9(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn9(this, result);
  };
}
function _possibleConstructorReturn9(self2, call) {
  if (call && (_typeof11(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized9(self2);
}
function _assertThisInitialized9(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct9() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf9(o) {
  _getPrototypeOf9 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf9(o);
}
function _defineProperty9(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits9(MonthParser2, _Parser);
  var _super = _createSuper9(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck10(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty9(_assertThisInitialized9(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty9(_assertThisInitialized9(_this), "priority", 110);
    return _this;
  }
  _createClass10(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return MonthParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
function _typeof12(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof12 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof12 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof12(obj);
}
function _classCallCheck11(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties11(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass11(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties11(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties11(Constructor, staticProps);
  return Constructor;
}
function _inherits10(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf10(subClass, superClass);
}
function _setPrototypeOf10(o, p) {
  _setPrototypeOf10 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf10(o, p);
}
function _createSuper10(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct10();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf10(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf10(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn10(this, result);
  };
}
function _possibleConstructorReturn10(self2, call) {
  if (call && (_typeof12(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized10(self2);
}
function _assertThisInitialized10(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct10() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf10(o) {
  _getPrototypeOf10 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf10(o);
}
function _defineProperty10(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneMonthParser = /* @__PURE__ */ function(_Parser) {
  _inherits10(StandAloneMonthParser2, _Parser);
  var _super = _createSuper10(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck11(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty10(_assertThisInitialized10(_this), "priority", 110);
    _defineProperty10(_assertThisInitialized10(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass11(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneMonthParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options2) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger2(dirtyWeek);
  var diff = getUTCWeek(date, options2) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
function _typeof13(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof13 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof13 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof13(obj);
}
function _classCallCheck12(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties12(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass12(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties12(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties12(Constructor, staticProps);
  return Constructor;
}
function _inherits11(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf11(subClass, superClass);
}
function _setPrototypeOf11(o, p) {
  _setPrototypeOf11 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf11(o, p);
}
function _createSuper11(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct11();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf11(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf11(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn11(this, result);
  };
}
function _possibleConstructorReturn11(self2, call) {
  if (call && (_typeof13(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized11(self2);
}
function _assertThisInitialized11(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct11() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf11(o) {
  _getPrototypeOf11 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf11(o);
}
function _defineProperty11(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits11(LocalWeekParser2, _Parser);
  var _super = _createSuper11(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck12(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty11(_assertThisInitialized11(_this), "priority", 100);
    _defineProperty11(_assertThisInitialized11(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass12(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      return startOfUTCWeek(setUTCWeek(date, value, options2), options2);
    }
  }]);
  return LocalWeekParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger2(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
function _typeof14(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof14 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof14 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof14(obj);
}
function _classCallCheck13(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties13(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass13(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties13(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties13(Constructor, staticProps);
  return Constructor;
}
function _inherits12(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf12(subClass, superClass);
}
function _setPrototypeOf12(o, p) {
  _setPrototypeOf12 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf12(o, p);
}
function _createSuper12(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct12();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf12(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf12(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn12(this, result);
  };
}
function _possibleConstructorReturn12(self2, call) {
  if (call && (_typeof14(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized12(self2);
}
function _assertThisInitialized12(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct12() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf12(o) {
  _getPrototypeOf12 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf12(o);
}
function _defineProperty12(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOWeekParser = /* @__PURE__ */ function(_Parser) {
  _inherits12(ISOWeekParser2, _Parser);
  var _super = _createSuper12(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck13(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty12(_assertThisInitialized12(_this), "priority", 100);
    _defineProperty12(_assertThisInitialized12(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass13(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value));
    }
  }]);
  return ISOWeekParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
function _typeof15(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof15 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof15 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof15(obj);
}
function _classCallCheck14(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties14(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass14(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties14(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties14(Constructor, staticProps);
  return Constructor;
}
function _inherits13(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf13(subClass, superClass);
}
function _setPrototypeOf13(o, p) {
  _setPrototypeOf13 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf13(o, p);
}
function _createSuper13(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct13();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf13(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf13(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn13(this, result);
  };
}
function _possibleConstructorReturn13(self2, call) {
  if (call && (_typeof15(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized13(self2);
}
function _assertThisInitialized13(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct13() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf13(o) {
  _getPrototypeOf13 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf13(o);
}
function _defineProperty13(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = /* @__PURE__ */ function(_Parser) {
  _inherits13(DateParser2, _Parser);
  var _super = _createSuper13(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck14(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty13(_assertThisInitialized13(_this), "priority", 90);
    _defineProperty13(_assertThisInitialized13(_this), "subPriority", 1);
    _defineProperty13(_assertThisInitialized13(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass14(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DateParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
function _typeof16(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof16 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof16 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof16(obj);
}
function _classCallCheck15(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties15(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass15(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties15(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties15(Constructor, staticProps);
  return Constructor;
}
function _inherits14(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf14(subClass, superClass);
}
function _setPrototypeOf14(o, p) {
  _setPrototypeOf14 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf14(o, p);
}
function _createSuper14(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct14();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf14(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf14(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn14(this, result);
  };
}
function _possibleConstructorReturn14(self2, call) {
  if (call && (_typeof16(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized14(self2);
}
function _assertThisInitialized14(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct14() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf14(o) {
  _getPrototypeOf14 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf14(o);
}
function _defineProperty14(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayOfYearParser = /* @__PURE__ */ function(_Parser) {
  _inherits14(DayOfYearParser2, _Parser);
  var _super = _createSuper14(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck15(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty14(_assertThisInitialized14(_this), "priority", 90);
    _defineProperty14(_assertThisInitialized14(_this), "subpriority", 1);
    _defineProperty14(_assertThisInitialized14(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass15(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(date, value) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayOfYearParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options2) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger2((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale = options2.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger2(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
function _typeof17(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof17 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof17 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof17(obj);
}
function _classCallCheck16(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties16(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass16(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties16(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties16(Constructor, staticProps);
  return Constructor;
}
function _inherits15(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf15(subClass, superClass);
}
function _setPrototypeOf15(o, p) {
  _setPrototypeOf15 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf15(o, p);
}
function _createSuper15(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct15();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf15(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf15(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn15(this, result);
  };
}
function _possibleConstructorReturn15(self2, call) {
  if (call && (_typeof17(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized15(self2);
}
function _assertThisInitialized15(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct15() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf15(o) {
  _getPrototypeOf15 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf15(o);
}
function _defineProperty15(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayParser = /* @__PURE__ */ function(_Parser) {
  _inherits15(DayParser2, _Parser);
  var _super = _createSuper15(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck16(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty15(_assertThisInitialized15(_this), "priority", 90);
    _defineProperty15(_assertThisInitialized15(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass16(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return DayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
function _typeof18(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof18 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof18 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof18(obj);
}
function _classCallCheck17(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties17(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass17(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties17(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties17(Constructor, staticProps);
  return Constructor;
}
function _inherits16(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf16(subClass, superClass);
}
function _setPrototypeOf16(o, p) {
  _setPrototypeOf16 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf16(o, p);
}
function _createSuper16(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct16();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf16(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf16(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn16(this, result);
  };
}
function _possibleConstructorReturn16(self2, call) {
  if (call && (_typeof18(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized16(self2);
}
function _assertThisInitialized16(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct16() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf16(o) {
  _getPrototypeOf16 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf16(o);
}
function _defineProperty16(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits16(LocalDayParser2, _Parser);
  var _super = _createSuper16(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck17(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty16(_assertThisInitialized16(_this), "priority", 90);
    _defineProperty16(_assertThisInitialized16(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass17(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options2) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return LocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
function _typeof19(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof19 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof19 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof19(obj);
}
function _classCallCheck18(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties18(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass18(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties18(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties18(Constructor, staticProps);
  return Constructor;
}
function _inherits17(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf17(subClass, superClass);
}
function _setPrototypeOf17(o, p) {
  _setPrototypeOf17 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf17(o, p);
}
function _createSuper17(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct17();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf17(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf17(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn17(this, result);
  };
}
function _possibleConstructorReturn17(self2, call) {
  if (call && (_typeof19(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized17(self2);
}
function _assertThisInitialized17(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct17() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf17(o) {
  _getPrototypeOf17 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf17(o);
}
function _defineProperty17(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StandAloneLocalDayParser = /* @__PURE__ */ function(_Parser) {
  _inherits17(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper17(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck18(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty17(_assertThisInitialized17(_this), "priority", 90);
    _defineProperty17(_assertThisInitialized17(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass18(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options2) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return StandAloneLocalDayParser2;
}(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger2(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
function _typeof20(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof20 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof20 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof20(obj);
}
function _classCallCheck19(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties19(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass19(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties19(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties19(Constructor, staticProps);
  return Constructor;
}
function _inherits18(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf18(subClass, superClass);
}
function _setPrototypeOf18(o, p) {
  _setPrototypeOf18 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf18(o, p);
}
function _createSuper18(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct18();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf18(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf18(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn18(this, result);
  };
}
function _possibleConstructorReturn18(self2, call) {
  if (call && (_typeof20(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized18(self2);
}
function _assertThisInitialized18(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct18() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf18(o) {
  _getPrototypeOf18 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf18(o);
}
function _defineProperty18(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISODayParser = /* @__PURE__ */ function(_Parser) {
  _inherits18(ISODayParser2, _Parser);
  var _super = _createSuper18(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck19(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty18(_assertThisInitialized18(_this), "priority", 90);
    _defineProperty18(_assertThisInitialized18(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass19(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date = setUTCISODay(date, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }
  }]);
  return ISODayParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
function _typeof21(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof21 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof21 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof21(obj);
}
function _classCallCheck20(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties20(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass20(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties20(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties20(Constructor, staticProps);
  return Constructor;
}
function _inherits19(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf19(subClass, superClass);
}
function _setPrototypeOf19(o, p) {
  _setPrototypeOf19 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf19(o, p);
}
function _createSuper19(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct19();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf19(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf19(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn19(this, result);
  };
}
function _possibleConstructorReturn19(self2, call) {
  if (call && (_typeof21(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized19(self2);
}
function _assertThisInitialized19(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct19() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf19(o) {
  _getPrototypeOf19 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf19(o);
}
function _defineProperty19(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var AMPMParser = /* @__PURE__ */ function(_Parser) {
  _inherits19(AMPMParser2, _Parser);
  var _super = _createSuper19(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck20(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty19(_assertThisInitialized19(_this), "priority", 80);
    _defineProperty19(_assertThisInitialized19(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass20(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
function _typeof22(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof22 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof22 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof22(obj);
}
function _classCallCheck21(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties21(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass21(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties21(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties21(Constructor, staticProps);
  return Constructor;
}
function _inherits20(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf20(subClass, superClass);
}
function _setPrototypeOf20(o, p) {
  _setPrototypeOf20 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf20(o, p);
}
function _createSuper20(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct20();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf20(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf20(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn20(this, result);
  };
}
function _possibleConstructorReturn20(self2, call) {
  if (call && (_typeof22(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized20(self2);
}
function _assertThisInitialized20(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct20() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf20(o) {
  _getPrototypeOf20 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf20(o);
}
function _defineProperty20(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var AMPMMidnightParser = /* @__PURE__ */ function(_Parser) {
  _inherits20(AMPMMidnightParser2, _Parser);
  var _super = _createSuper20(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck21(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty20(_assertThisInitialized20(_this), "priority", 80);
    _defineProperty20(_assertThisInitialized20(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass21(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return AMPMMidnightParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
function _typeof23(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof23 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof23 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof23(obj);
}
function _classCallCheck22(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties22(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass22(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties22(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties22(Constructor, staticProps);
  return Constructor;
}
function _inherits21(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf21(subClass, superClass);
}
function _setPrototypeOf21(o, p) {
  _setPrototypeOf21 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf21(o, p);
}
function _createSuper21(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct21();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf21(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf21(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn21(this, result);
  };
}
function _possibleConstructorReturn21(self2, call) {
  if (call && (_typeof23(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized21(self2);
}
function _assertThisInitialized21(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct21() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf21(o) {
  _getPrototypeOf21 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf21(o);
}
function _defineProperty21(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DayPeriodParser = /* @__PURE__ */ function(_Parser) {
  _inherits21(DayPeriodParser2, _Parser);
  var _super = _createSuper21(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck22(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty21(_assertThisInitialized21(_this), "priority", 80);
    _defineProperty21(_assertThisInitialized21(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass22(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }
  }]);
  return DayPeriodParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
function _typeof24(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof24 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof24 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof24(obj);
}
function _classCallCheck23(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties23(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass23(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties23(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties23(Constructor, staticProps);
  return Constructor;
}
function _inherits22(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf22(subClass, superClass);
}
function _setPrototypeOf22(o, p) {
  _setPrototypeOf22 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf22(o, p);
}
function _createSuper22(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct22();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf22(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf22(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn22(this, result);
  };
}
function _possibleConstructorReturn22(self2, call) {
  if (call && (_typeof24(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized22(self2);
}
function _assertThisInitialized22(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct22() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf22(o) {
  _getPrototypeOf22 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf22(o);
}
function _defineProperty22(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour1to12Parser = /* @__PURE__ */ function(_Parser) {
  _inherits22(Hour1to12Parser2, _Parser);
  var _super = _createSuper22(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck23(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty22(_assertThisInitialized22(_this), "priority", 70);
    _defineProperty22(_assertThisInitialized22(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass23(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour1to12Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
function _typeof25(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof25 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof25 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof25(obj);
}
function _classCallCheck24(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties24(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass24(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties24(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties24(Constructor, staticProps);
  return Constructor;
}
function _inherits23(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf23(subClass, superClass);
}
function _setPrototypeOf23(o, p) {
  _setPrototypeOf23 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf23(o, p);
}
function _createSuper23(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct23();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf23(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf23(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn23(this, result);
  };
}
function _possibleConstructorReturn23(self2, call) {
  if (call && (_typeof25(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized23(self2);
}
function _assertThisInitialized23(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct23() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf23(o) {
  _getPrototypeOf23 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf23(o);
}
function _defineProperty23(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour0to23Parser = /* @__PURE__ */ function(_Parser) {
  _inherits23(Hour0to23Parser2, _Parser);
  var _super = _createSuper23(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck24(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty23(_assertThisInitialized23(_this), "priority", 70);
    _defineProperty23(_assertThisInitialized23(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass24(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    }
  }]);
  return Hour0to23Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
function _typeof26(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof26 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof26 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof26(obj);
}
function _classCallCheck25(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties25(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass25(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties25(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties25(Constructor, staticProps);
  return Constructor;
}
function _inherits24(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf24(subClass, superClass);
}
function _setPrototypeOf24(o, p) {
  _setPrototypeOf24 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf24(o, p);
}
function _createSuper24(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct24();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf24(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf24(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn24(this, result);
  };
}
function _possibleConstructorReturn24(self2, call) {
  if (call && (_typeof26(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized24(self2);
}
function _assertThisInitialized24(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct24() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf24(o) {
  _getPrototypeOf24 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf24(o);
}
function _defineProperty24(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour0To11Parser = /* @__PURE__ */ function(_Parser) {
  _inherits24(Hour0To11Parser2, _Parser);
  var _super = _createSuper24(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck25(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty24(_assertThisInitialized24(_this), "priority", 70);
    _defineProperty24(_assertThisInitialized24(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass25(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    }
  }]);
  return Hour0To11Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
function _typeof27(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof27 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof27 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof27(obj);
}
function _classCallCheck26(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties26(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass26(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties26(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties26(Constructor, staticProps);
  return Constructor;
}
function _inherits25(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf25(subClass, superClass);
}
function _setPrototypeOf25(o, p) {
  _setPrototypeOf25 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf25(o, p);
}
function _createSuper25(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct25();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf25(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf25(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn25(this, result);
  };
}
function _possibleConstructorReturn25(self2, call) {
  if (call && (_typeof27(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized25(self2);
}
function _assertThisInitialized25(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct25() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf25(o) {
  _getPrototypeOf25 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf25(o);
}
function _defineProperty25(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Hour1To24Parser = /* @__PURE__ */ function(_Parser) {
  _inherits25(Hour1To24Parser2, _Parser);
  var _super = _createSuper25(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck26(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty25(_assertThisInitialized25(_this), "priority", 70);
    _defineProperty25(_assertThisInitialized25(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass26(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    }
  }]);
  return Hour1To24Parser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
function _typeof28(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof28 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof28 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof28(obj);
}
function _classCallCheck27(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties27(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass27(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties27(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties27(Constructor, staticProps);
  return Constructor;
}
function _inherits26(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf26(subClass, superClass);
}
function _setPrototypeOf26(o, p) {
  _setPrototypeOf26 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf26(o, p);
}
function _createSuper26(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct26();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf26(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf26(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn26(this, result);
  };
}
function _possibleConstructorReturn26(self2, call) {
  if (call && (_typeof28(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized26(self2);
}
function _assertThisInitialized26(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct26() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf26(o) {
  _getPrototypeOf26 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf26(o);
}
function _defineProperty26(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MinuteParser = /* @__PURE__ */ function(_Parser) {
  _inherits26(MinuteParser2, _Parser);
  var _super = _createSuper26(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck27(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty26(_assertThisInitialized26(_this), "priority", 60);
    _defineProperty26(_assertThisInitialized26(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass27(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    }
  }]);
  return MinuteParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
function _typeof29(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof29 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof29 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof29(obj);
}
function _classCallCheck28(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties28(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass28(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties28(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties28(Constructor, staticProps);
  return Constructor;
}
function _inherits27(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf27(subClass, superClass);
}
function _setPrototypeOf27(o, p) {
  _setPrototypeOf27 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf27(o, p);
}
function _createSuper27(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct27();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf27(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf27(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn27(this, result);
  };
}
function _possibleConstructorReturn27(self2, call) {
  if (call && (_typeof29(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized27(self2);
}
function _assertThisInitialized27(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct27() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf27(o) {
  _getPrototypeOf27 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf27(o);
}
function _defineProperty27(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var SecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits27(SecondParser2, _Parser);
  var _super = _createSuper27(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck28(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty27(_assertThisInitialized27(_this), "priority", 50);
    _defineProperty27(_assertThisInitialized27(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass28(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCSeconds(value, 0);
      return date;
    }
  }]);
  return SecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
function _typeof30(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof30 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof30 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof30(obj);
}
function _classCallCheck29(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties29(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass29(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties29(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties29(Constructor, staticProps);
  return Constructor;
}
function _inherits28(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf28(subClass, superClass);
}
function _setPrototypeOf28(o, p) {
  _setPrototypeOf28 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf28(o, p);
}
function _createSuper28(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct28();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf28(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf28(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn28(this, result);
  };
}
function _possibleConstructorReturn28(self2, call) {
  if (call && (_typeof30(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized28(self2);
}
function _assertThisInitialized28(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct28() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf28(o) {
  _getPrototypeOf28 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf28(o);
}
function _defineProperty28(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var FractionOfSecondParser = /* @__PURE__ */ function(_Parser) {
  _inherits28(FractionOfSecondParser2, _Parser);
  var _super = _createSuper28(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck29(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty28(_assertThisInitialized28(_this), "priority", 30);
    _defineProperty28(_assertThisInitialized28(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass29(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set(date, _flags, value) {
      date.setUTCMilliseconds(value);
      return date;
    }
  }]);
  return FractionOfSecondParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
function _typeof31(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof31 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof31 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof31(obj);
}
function _classCallCheck30(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties30(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass30(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties30(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties30(Constructor, staticProps);
  return Constructor;
}
function _inherits29(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf29(subClass, superClass);
}
function _setPrototypeOf29(o, p) {
  _setPrototypeOf29 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf29(o, p);
}
function _createSuper29(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct29();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf29(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf29(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn29(this, result);
  };
}
function _possibleConstructorReturn29(self2, call) {
  if (call && (_typeof31(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized29(self2);
}
function _assertThisInitialized29(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct29() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf29(o) {
  _getPrototypeOf29 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf29(o);
}
function _defineProperty29(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOTimezoneWithZParser = /* @__PURE__ */ function(_Parser) {
  _inherits29(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper29(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck30(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty29(_assertThisInitialized29(_this), "priority", 10);
    _defineProperty29(_assertThisInitialized29(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass30(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
function _typeof32(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof32 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof32 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof32(obj);
}
function _classCallCheck31(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties31(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass31(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties31(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties31(Constructor, staticProps);
  return Constructor;
}
function _inherits30(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf30(subClass, superClass);
}
function _setPrototypeOf30(o, p) {
  _setPrototypeOf30 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf30(o, p);
}
function _createSuper30(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct30();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf30(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf30(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn30(this, result);
  };
}
function _possibleConstructorReturn30(self2, call) {
  if (call && (_typeof32(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized30(self2);
}
function _assertThisInitialized30(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct30() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf30(o) {
  _getPrototypeOf30 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf30(o);
}
function _defineProperty30(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ISOTimezoneParser = /* @__PURE__ */ function(_Parser) {
  _inherits30(ISOTimezoneParser2, _Parser);
  var _super = _createSuper30(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck31(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty30(_assertThisInitialized30(_this), "priority", 10);
    _defineProperty30(_assertThisInitialized30(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass31(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set(date, flags, value) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
function _typeof33(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof33 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof33 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof33(obj);
}
function _classCallCheck32(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties32(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass32(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties32(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties32(Constructor, staticProps);
  return Constructor;
}
function _inherits31(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf31(subClass, superClass);
}
function _setPrototypeOf31(o, p) {
  _setPrototypeOf31 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf31(o, p);
}
function _createSuper31(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct31();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf31(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf31(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn31(this, result);
  };
}
function _possibleConstructorReturn31(self2, call) {
  if (call && (_typeof33(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized31(self2);
}
function _assertThisInitialized31(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct31() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf31(o) {
  _getPrototypeOf31 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf31(o);
}
function _defineProperty31(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TimestampSecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits31(TimestampSecondsParser2, _Parser);
  var _super = _createSuper31(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck32(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty31(_assertThisInitialized31(_this), "priority", 40);
    _defineProperty31(_assertThisInitialized31(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass32(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
function _typeof34(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof34 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof34 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof34(obj);
}
function _classCallCheck33(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties33(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass33(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties33(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties33(Constructor, staticProps);
  return Constructor;
}
function _inherits32(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  if (superClass)
    _setPrototypeOf32(subClass, superClass);
}
function _setPrototypeOf32(o, p) {
  _setPrototypeOf32 = Object.setPrototypeOf || function _setPrototypeOf33(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf32(o, p);
}
function _createSuper32(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct32();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf32(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf32(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn32(this, result);
  };
}
function _possibleConstructorReturn32(self2, call) {
  if (call && (_typeof34(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized32(self2);
}
function _assertThisInitialized32(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _isNativeReflectConstruct32() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _getPrototypeOf32(o) {
  _getPrototypeOf32 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf33(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf32(o);
}
function _defineProperty32(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var TimestampMillisecondsParser = /* @__PURE__ */ function(_Parser) {
  _inherits32(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper32(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck33(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty32(_assertThisInitialized32(_this), "priority", 20);
    _defineProperty32(_assertThisInitialized32(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass33(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
}(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/date-fns/esm/parse/index.js
function _typeof35(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof35 = function _typeof36(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof35 = function _typeof36(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof35(obj);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i2 >= o.length)
          return { done: true };
        return { done: false, value: o[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s3() {
    it = o[Symbol.iterator]();
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options2) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options2 === null || options2 === void 0 ? void 0 : options2.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var firstWeekContainsDate = toInteger2((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options2 === null || options2 === void 0 ? void 0 : options2.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options2 === null || options2 === void 0 ? void 0 : (_options$locale2 = options2.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger2((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options2 === null || options2 === void 0 ? void 0 : options2.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options2 === null || options2 === void 0 ? void 0 : (_options$locale3 = options2.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [new DateToSystemTimezoneSetter()];
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter in longFormatters_default) {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  var _iterator = _createForOfIteratorHelper(tokens), _step;
  try {
    var _loop = function _loop2() {
      var token = _step.value;
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!(options2 !== null && options2 !== void 0 && options2.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser2 = parsers[firstCharacter];
      if (parser2) {
        var incompatibleTokens = parser2.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser2.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser2.run(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return {
            v: new Date(NaN)
          };
        }
        setters.push(parseResult.setter);
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString2(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return {
            v: new Date(NaN)
          };
        }
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_typeof35(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a3, b2) {
    return b2 - a3;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a3, b2) {
      return b2.subPriority - a3.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions)) {
        return new Date(NaN);
      }
      var result = setter.set(utcDate, flags, subFnOptions);
      if (Array.isArray(result)) {
        utcDate = result[0];
        assign(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// src/xmlrpc-client.ts
var XmlRpcClient = class {
  constructor(options2) {
    this.options = options2;
    console.log(options2);
  }
  methodCall(method, params) {
    console.log(`Endpoint: ${this.options.url.href}xmlrpc.php`);
    const xml = this.objectToXml(method, params).end({ prettyPrint: true });
    console.log(xml);
    return (0, import_obsidian3.request)({
      url: `${this.options.url.href}xmlrpc.php`,
      method: "POST",
      headers: {
        "Content-Type": "text/xml",
        "User-Agent": "obsidian.md"
      },
      body: xml
    }).then((res) => {
      console.log(res);
      return this.responseToObject(res);
    });
  }
  objectToXml(method, ...obj) {
    const xml = (0, import_xmlbuilder2.create)({ version: "1.0" }).ele("methodCall").ele("methodName").txt(method).up().ele("params");
    obj.forEach((it) => this.createParam(it, xml));
    return xml;
  }
  createParam(obj, xml) {
    const param = xml.ele("param");
    this.createValue(obj, param);
  }
  createValue(data, param) {
    const value = param.ele("value");
    if (isSafeInteger_default(data)) {
      value.ele("i4").txt(data.toString());
    } else if (isNumber_default(data)) {
      value.ele("double").txt(data.toString());
    } else if (isBoolean_default(data)) {
      value.ele("boolean").txt(data ? "1" : "0");
    } else if (isDate_default(data)) {
      value.ele("dateTime.iso8601").txt(format(data, "yyyyMMddTHH:mm:ss"));
    } else if (isArray_default(data)) {
      const array = value.ele("array").ele("data");
      data.forEach((it) => this.createValue(it, array));
    } else if (isObject_default(data)) {
      const struct = value.ele("struct");
      for (const [prop, value2] of Object.entries(data)) {
        const member = struct.ele("member").ele("name").txt(prop).up();
        this.createValue(value2, member);
      }
    } else {
      value.ele("string").dat(data.toString());
    }
  }
  responseToObject(response) {
    const res = (0, import_xmlbuilder2.create)(response).end({ format: "object" });
    if (get_default(res, "methodResponse.params")) {
      return this.fromValue(get_default(res, "methodResponse.params.param.value"));
    } else if (get_default(res, "methodResponse.fault")) {
      return this.fromValue(get_default(res, "methodResponse.fault.value"));
    }
    throw new Error("Invalid XML-RPC response.");
  }
  fromValue(value) {
    if (get_default(value, "i4") || get_default(value, "int")) {
      return get_default(value, "i4") || get_default(value, "int");
    } else if (get_default(value, "double")) {
      return get_default(value, "double");
    } else if (get_default(value, "boolean")) {
      return get_default(value, "boolean") === "1";
    } else if (get_default(value, "dateTime.iso8601")) {
      const datetime = get_default(value, "dateTime.iso8601");
      if (datetime) {
        return parse(datetime, "yyyyMMddTHH:mm:ss", new Date());
      } else {
        return new Date();
      }
    } else if (get_default(value, "array")) {
      const array = [];
      const data = get_default(value, "array.data.value");
      if (isArray_default(data)) {
        data.forEach((it) => {
          array.push(this.fromValue(it));
        });
      } else {
        array.push(this.fromValue(data));
      }
      return array;
    } else if (get_default(value, "struct")) {
      const struct = {};
      const members = get_default(value, "struct.member");
      if (isArray_default(members)) {
        members.forEach((member) => {
          const name = get_default(member, "name");
          if (name) {
            struct[name] = this.fromValue(get_default(member, "value"));
          }
        });
      } else {
        const name = get_default(members, "name");
        if (name) {
          struct[name] = this.fromValue(get_default(members, "value"));
        }
      }
      return struct;
    } else {
      return get_default(value, "string");
    }
  }
};

// src/abstract-wp-client.ts
var import_obsidian6 = require("obsidian");

// src/wp-login-modal.ts
var import_obsidian4 = require("obsidian");
var WpLoginModal = class extends import_obsidian4.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const t2 = (key, vars) => {
      return this.plugin.i18n.t(key, vars);
    };
    const { contentEl } = this;
    contentEl.createEl("h1", { text: t2("loginModal_title") });
    new import_obsidian4.Setting(contentEl).setName(t2("loginModal_username")).setDesc(t2("loginModal_usernameDesc", { url: this.plugin.settings.endpoint })).addText((text) => {
      var _a;
      return text.setValue((_a = this.plugin.settings.userName) != null ? _a : "").onChange((value) => __async(this, null, function* () {
        if (this.plugin.settings.saveUserName) {
          this.plugin.settings.userName = value;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian4.Setting(contentEl).setName(t2("loginModal_password")).setDesc(t2("loginModal_passwordDesc", { url: this.plugin.settings.endpoint })).addText((text) => {
      var _a;
      return text.setValue((_a = this.plugin.settings.password) != null ? _a : "").onChange((value) => __async(this, null, function* () {
        if (this.plugin.settings.savePassword) {
          this.plugin.settings.password = value;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian4.Setting(contentEl).setName(t2("loginModal_rememberUsername")).setDesc(t2("loginModal_rememberUsernameDesc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.saveUserName).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.saveUserName = value;
      if (!this.plugin.settings.saveUserName) {
        delete this.plugin.settings.userName;
      }
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(contentEl).setName(t2("loginModal_rememberPassword")).setDesc(t2("loginModal_rememberPasswordDesc")).addToggle((toggle) => toggle.setValue(this.plugin.settings.savePassword).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.savePassword = value;
      if (!this.plugin.settings.savePassword) {
        delete this.plugin.settings.password;
      }
      yield this.plugin.saveSettings();
    })));
    new import_obsidian4.Setting(contentEl).addButton((button) => button.setButtonText(t2("loginModal_loginButtonText")).setCta().onClick(() => {
      this.onSubmit(this.plugin.settings.userName, this.plugin.settings.password, this);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// node_modules/marked/lib/marked.esm.js
function getDefaults() {
  return {
    async: false,
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: "",
    highlight: null,
    langPrefix: "language-",
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
var defaults = getDefaults();
function changeDefaults(newDefaults) {
  defaults = newDefaults;
}
var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, "g");
var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape3(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
var caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = typeof regex === "string" ? regex : regex.source;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
var nonWordAndColonTest = /[^\w:]/g;
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    let prot;
    try {
      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, "").toLowerCase();
    } catch (e2) {
      return null;
    }
    if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, "%");
  } catch (e2) {
    return null;
  }
  return href;
}
var baseUrls = {};
var justDomain = /^[^:]+:\/*[^/]*$/;
var protocol = /^([^:]+:)[\s\S]*$/;
var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(base, href) {
  if (!baseUrls[" " + base]) {
    if (justDomain.test(base)) {
      baseUrls[" " + base] = base + "/";
    } else {
      baseUrls[" " + base] = rtrim(base, "/", true);
    }
  }
  base = baseUrls[" " + base];
  const relativeBase = base.indexOf(":") === -1;
  if (href.substring(0, 2) === "//") {
    if (relativeBase) {
      return href;
    }
    return base.replace(protocol, "$1") + href;
  } else if (href.charAt(0) === "/") {
    if (relativeBase) {
      return href;
    }
    return base.replace(domain, "$1") + href;
  } else {
    return base + href;
  }
}
var noopTest = { exec: function noopTest2() {
} };
function merge(obj) {
  let i2 = 1, target, key;
  for (; i2 < arguments.length; i2++) {
    target = arguments[i2];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }
  return obj;
}
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match2, offset, str) => {
    let escaped = false, curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i2 = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count)
      cells.push("");
  }
  for (; i2 < cells.length; i2++) {
    cells[i2] = cells[i2].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c2, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c2 && !invert) {
      suffLen++;
    } else if (currChar !== c2 && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b2) {
  if (str.indexOf(b2[1]) === -1) {
    return -1;
  }
  const l = str.length;
  let level = 0, i2 = 0;
  for (; i2 < l; i2++) {
    if (str[i2] === "\\") {
      i2++;
    } else if (str[i2] === b2[0]) {
      level++;
    } else if (str[i2] === b2[1]) {
      level--;
      if (level < 0) {
        return i2;
      }
    }
  }
  return -1;
}
function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
  }
}
function repeatString(pattern, count) {
  if (count < 1) {
    return "";
  }
  let result = "";
  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }
    count >>= 1;
    pattern += pattern;
  }
  return result + pattern;
}
function outputLink(cap, link, raw, lexer2) {
  const href = link.href;
  const title = link.title ? escape3(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer2.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href,
      title,
      text,
      tokens: lexer2.inlineTokens(text)
    };
    lexer2.state.inLink = false;
    return token;
  }
  return {
    type: "image",
    raw,
    href,
    title,
    text: escape3(text)
  };
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return text.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var Tokenizer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text, "\n") : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, "#");
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ *>[ \t]?/gm, "");
      const top = this.lexer.state.top;
      this.lexer.state.top = true;
      const tokens = this.lexer.blockTokens(text);
      this.lexer.state.top = top;
      return {
        type: "blockquote",
        raw: cap[0],
        tokens,
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let raw, istask, ischecked, indent, i2, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
      while (src) {
        endEarly = false;
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split("\n", 1)[0];
        nextLine = src.split("\n", 1)[0];
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))`);
          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
          while (src) {
            rawLine = src.split("\n", 1)[0];
            line = rawLine;
            if (this.options.pedantic) {
              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (fencesBeginRegex.test(line)) {
              break;
            }
            if (headingBeginRegex.test(line)) {
              break;
            }
            if (nextBulletRegex.test(line)) {
              break;
            }
            if (hrRegex.test(src)) {
              break;
            }
            if (line.search(/[^ ]/) >= indent || !line.trim()) {
              itemContents += "\n" + line.slice(indent);
            } else if (!blankLine) {
              itemContents += "\n" + line;
            } else {
              break;
            }
            if (!blankLine && !line.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      const l = list.items.length;
      for (i2 = 0; i2 < l; i2++) {
        this.lexer.state.top = false;
        list.items[i2].tokens = this.lexer.blockTokens(list.items[i2].text, []);
        if (!list.loose) {
          const spacers = list.items[i2].tokens.filter((t2) => t2.type === "space");
          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t2) => /\n.*\n/.test(t2.raw));
          list.loose = hasMultipleLineBreaks;
        }
      }
      if (list.loose) {
        for (i2 = 0; i2 < l; i2++) {
          list.items[i2].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
        text: cap[0]
      };
      if (this.options.sanitize) {
        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape3(cap[0]);
        token.type = "paragraph";
        token.text = text;
        token.tokens = this.lexer.inline(text);
      }
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
      return {
        type: "def",
        tag,
        raw: cap[0],
        href,
        title
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      const item = {
        type: "table",
        header: splitCells(cap[1]).map((c2) => {
          return { text: c2 };
        }),
        align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        let l = item.align.length;
        let i2, j, k2, row;
        for (i2 = 0; i2 < l; i2++) {
          if (/^ *-+: *$/.test(item.align[i2])) {
            item.align[i2] = "right";
          } else if (/^ *:-+: *$/.test(item.align[i2])) {
            item.align[i2] = "center";
          } else if (/^ *:-+ *$/.test(item.align[i2])) {
            item.align[i2] = "left";
          } else {
            item.align[i2] = null;
          }
        }
        l = item.rows.length;
        for (i2 = 0; i2 < l; i2++) {
          item.rows[i2] = splitCells(item.rows[i2], item.header.length).map((c2) => {
            return { text: c2 };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = this.lexer.inline(item.header[j].text);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k2 = 0; k2 < row.length; k2++) {
            row[k2].tokens = this.lexer.inline(row[k2].text);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: this.lexer.inline(cap[1])
      };
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
      return {
        type: "paragraph",
        raw: cap[0],
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      return {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: this.lexer.inline(cap[0])
      };
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape3(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: this.options.sanitize ? "text" : "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape3(cap[0]) : cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link) {
        const text = cap[0].charAt(0);
        return {
          type: "text",
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match2 = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match2)
      return;
    if (match2[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match2[1] || match2[2] || "";
    if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
      const lLength = match2[0].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match2[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match2 = endReg.exec(maskedSrc)) != null) {
        rDelim = match2[1] || match2[2] || match2[3] || match2[4] || match2[5] || match2[6];
        if (!rDelim)
          continue;
        rLength = rDelim.length;
        if (match2[3] || match2[4]) {
          delimTotal += rLength;
          continue;
        } else if (match2[5] || match2[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        const raw = src.slice(0, lLength + match2.index + (match2[0].length - rDelim.length) + rLength);
        if (Math.min(lLength, rLength) % 2) {
          const text2 = raw.slice(1, -1);
          return {
            type: "em",
            raw,
            text: text2,
            tokens: this.lexer.inlineTokens(text2)
          };
        }
        const text = raw.slice(2, -2);
        return {
          type: "strong",
          raw,
          text,
          tokens: this.lexer.inlineTokens(text)
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape3(text, true);
      return {
        type: "codespan",
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2])
      };
    }
  }
  autolink(src, mangle2) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href;
      if (cap[2] === "@") {
        text = escape3(this.options.mangle ? mangle2(cap[1]) : cap[1]);
        href = "mailto:" + text;
      } else {
        text = escape3(cap[1]);
        href = text;
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src, mangle2) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href;
      if (cap[2] === "@") {
        text = escape3(this.options.mangle ? mangle2(cap[0]) : cap[0]);
        href = "mailto:" + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape3(cap[0]);
        if (cap[1] === "www.") {
          href = "http://" + cap[0];
        } else {
          href = cap[0];
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src, smartypants2) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape3(cap[0]) : cap[0];
      } else {
        text = escape3(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text
      };
    }
  }
};
var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = merge({}, block);
block.gfm = merge({}, block.normal, {
  table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
});
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = merge({}, block.normal, {
  html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
});
var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    rDelimAst: /^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline.escapedEmSt = /(?:^|[^\\])(?:\\\\)*\\[*_]/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = merge({}, inline);
inline.pedantic = merge({}, inline.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
});
inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
});
function smartypants(text) {
  return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
}
function mangle(text) {
  let out = "", i2, ch;
  const l = text.length;
  for (i2 = 0; i2 < l; i2++) {
    ch = text.charCodeAt(i2);
    if (Math.random() > 0.5) {
      ch = "x" + ch.toString(16);
    }
    out += "&#" + ch + ";";
  }
  return out;
}
var Lexer = class {
  constructor(options2) {
    this.tokens = [];
    this.tokens.links = /* @__PURE__ */ Object.create(null);
    this.options = options2 || defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  static get rules() {
    return {
      block,
      inline
    };
  }
  static lex(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.lex(src);
  }
  static lexInline(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n");
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
    } else {
      src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
        return leading + "    ".repeat(tabs.length);
      });
    }
    let token, lastToken, cutSrc, lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) {
          tokens[tokens.length - 1].raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens = []) {
    this.inlineQueue.push({ src, tokens });
    return tokens;
  }
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match2;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match2 = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match2[0].slice(match2[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match2 = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match2 = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index + match2[0].length - 2) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var Renderer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  code(code, infostring, escaped) {
    const lang = (infostring || "").match(/\S*/)[0];
    if (this.options.highlight) {
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape3(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="' + this.options.langPrefix + escape3(lang) + '">' + (escaped ? code : escape3(code, true)) + "</code></pre>\n";
  }
  blockquote(quote) {
    return `<blockquote>
${quote}</blockquote>
`;
  }
  html(html) {
    return html;
  }
  heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      const id = this.options.headerPrefix + slugger.slug(raw);
      return `<h${level} id="${id}">${text}</h${level}>
`;
    }
    return `<h${level}>${text}</h${level}>
`;
  }
  hr() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  }
  list(body, ordered, start) {
    const type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
  }
  listitem(text) {
    return `<li>${text}</li>
`;
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
  }
  paragraph(text) {
    return `<p>${text}</p>
`;
  }
  table(header, body) {
    if (body)
      body = `<tbody>${body}</tbody>`;
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow(content) {
    return `<tr>
${content}</tr>
`;
  }
  tablecell(content, flags) {
    const type = flags.header ? "th" : "td";
    const tag = flags.align ? `<${type} align="${flags.align}">` : `<${type}>`;
    return tag + content + `</${type}>
`;
  }
  strong(text) {
    return `<strong>${text}</strong>`;
  }
  em(text) {
    return `<em>${text}</em>`;
  }
  codespan(text) {
    return `<code>${text}</code>`;
  }
  br() {
    return this.options.xhtml ? "<br/>" : "<br>";
  }
  del(text) {
    return `<del>${text}</del>`;
  }
  link(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<a href="' + href + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text + "</a>";
    return out;
  }
  image(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = `<img src="${href}" alt="${text}"`;
    if (title) {
      out += ` title="${title}"`;
    }
    out += this.options.xhtml ? "/>" : ">";
    return out;
  }
  text(text) {
    return text;
  }
};
var TextRenderer = class {
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href, title, text) {
    return "" + text;
  }
  image(href, title, text) {
    return "" + text;
  }
  br() {
    return "";
  }
};
var Slugger = class {
  constructor() {
    this.seen = {};
  }
  serialize(value) {
    return value.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
  }
  getNextSafeSlug(originalSlug, isDryRun) {
    let slug = originalSlug;
    let occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];
      do {
        occurenceAccumulator++;
        slug = originalSlug + "-" + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }
    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }
    return slug;
  }
  slug(value, options2 = {}) {
    const slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options2.dryrun);
  }
};
var Parser2 = class {
  constructor(options2) {
    this.options = options2 || defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
  }
  static parse(tokens, options2) {
    const parser2 = new Parser2(options2);
    return parser2.parse(tokens);
  }
  static parseInline(tokens, options2) {
    const parser2 = new Parser2(options2);
    return parser2.parseInline(tokens);
  }
  parse(tokens, top = true) {
    let out = "", i2, j, k2, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
    const l = tokens.length;
    for (i2 = 0; i2 < l; i2++) {
      token = tokens[i2];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
          continue;
        }
        case "code": {
          out += this.renderer.code(token.text, token.lang, token.escaped);
          continue;
        }
        case "table": {
          header = "";
          cell = "";
          l2 = token.header.length;
          for (j = 0; j < l2; j++) {
            cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), { header: true, align: token.align[j] });
          }
          header += this.renderer.tablerow(cell);
          body = "";
          l2 = token.rows.length;
          for (j = 0; j < l2; j++) {
            row = token.rows[j];
            cell = "";
            l3 = row.length;
            for (k2 = 0; k2 < l3; k2++) {
              cell += this.renderer.tablecell(this.parseInline(row[k2].tokens), { header: false, align: token.align[k2] });
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          body = this.parse(token.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          ordered = token.ordered;
          start = token.start;
          loose = token.loose;
          l2 = token.items.length;
          body = "";
          for (j = 0; j < l2; j++) {
            item = token.items[j];
            checked = item.checked;
            task = item.task;
            itemBody = "";
            if (item.task) {
              checkbox = this.renderer.checkbox(checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox
                  });
                }
              } else {
                itemBody += checkbox;
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          out += this.renderer.html(token.text);
          continue;
        }
        case "paragraph": {
          out += this.renderer.paragraph(this.parseInline(token.tokens));
          continue;
        }
        case "text": {
          body = token.tokens ? this.parseInline(token.tokens) : token.text;
          while (i2 + 1 < l && tokens[i2 + 1].type === "text") {
            token = tokens[++i2];
            body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    let out = "", i2, token, ret;
    const l = tokens.length;
    for (i2 = 0; i2 < l; i2++) {
      token = tokens[i2];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          out += renderer.text(token.text);
          break;
        }
        case "html": {
          out += renderer.html(token.text);
          break;
        }
        case "link": {
          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
          break;
        }
        case "image": {
          out += renderer.image(token.href, token.title, token.text);
          break;
        }
        case "strong": {
          out += renderer.strong(this.parseInline(token.tokens, renderer));
          break;
        }
        case "em": {
          out += renderer.em(this.parseInline(token.tokens, renderer));
          break;
        }
        case "codespan": {
          out += renderer.codespan(token.text);
          break;
        }
        case "br": {
          out += renderer.br();
          break;
        }
        case "del": {
          out += renderer.del(this.parseInline(token.tokens, renderer));
          break;
        }
        case "text": {
          out += renderer.text(token.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
function marked(src, opt, callback) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  if (typeof opt === "function") {
    callback = opt;
    opt = null;
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  if (callback) {
    const highlight = opt.highlight;
    let tokens;
    try {
      tokens = Lexer.lex(src, opt);
    } catch (e2) {
      return callback(e2);
    }
    const done = function(err) {
      let out;
      if (!err) {
        try {
          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }
          out = Parser2.parse(tokens, opt);
        } catch (e2) {
          err = e2;
        }
      }
      opt.highlight = highlight;
      return err ? callback(err) : callback(null, out);
    };
    if (!highlight || highlight.length < 3) {
      return done();
    }
    delete opt.highlight;
    if (!tokens.length)
      return done();
    let pending = 0;
    marked.walkTokens(tokens, function(token) {
      if (token.type === "code") {
        pending++;
        setTimeout(() => {
          highlight(token.text, token.lang, function(err, code) {
            if (err) {
              return done(err);
            }
            if (code != null && code !== token.text) {
              token.text = code;
              token.escaped = true;
            }
            pending--;
            if (pending === 0) {
              done();
            }
          });
        }, 0);
      }
    });
    if (pending === 0) {
      done();
    }
    return;
  }
  function onError(e2) {
    e2.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape3(e2.message + "", true) + "</pre>";
    }
    throw e2;
  }
  try {
    const tokens = Lexer.lex(src, opt);
    if (opt.walkTokens) {
      if (opt.async) {
        return Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => {
          return Parser2.parse(tokens, opt);
        }).catch(onError);
      }
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser2.parse(tokens, opt);
  } catch (e2) {
    onError(e2);
  }
}
marked.options = marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = defaults;
marked.use = function(...args) {
  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
  args.forEach((pack) => {
    const opts = merge({}, pack);
    opts.async = marked.defaults.async || opts.async;
    if (pack.extensions) {
      pack.extensions.forEach((ext) => {
        if (!ext.name) {
          throw new Error("extension name required");
        }
        if (ext.renderer) {
          const prevRenderer = extensions.renderers[ext.name];
          if (prevRenderer) {
            extensions.renderers[ext.name] = function(...args2) {
              let ret = ext.renderer.apply(this, args2);
              if (ret === false) {
                ret = prevRenderer.apply(this, args2);
              }
              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }
        if (ext.tokenizer) {
          if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
            throw new Error("extension level must be 'block' or 'inline'");
          }
          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }
          if (ext.start) {
            if (ext.level === "block") {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === "inline") {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }
        if (ext.childTokens) {
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
      opts.extensions = extensions;
    }
    if (pack.renderer) {
      const renderer = marked.defaults.renderer || new Renderer();
      for (const prop in pack.renderer) {
        const prevRenderer = renderer[prop];
        renderer[prop] = (...args2) => {
          let ret = pack.renderer[prop].apply(renderer, args2);
          if (ret === false) {
            ret = prevRenderer.apply(renderer, args2);
          }
          return ret;
        };
      }
      opts.renderer = renderer;
    }
    if (pack.tokenizer) {
      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
      for (const prop in pack.tokenizer) {
        const prevTokenizer = tokenizer[prop];
        tokenizer[prop] = (...args2) => {
          let ret = pack.tokenizer[prop].apply(tokenizer, args2);
          if (ret === false) {
            ret = prevTokenizer.apply(tokenizer, args2);
          }
          return ret;
        };
      }
      opts.tokenizer = tokenizer;
    }
    if (pack.walkTokens) {
      const walkTokens2 = marked.defaults.walkTokens;
      opts.walkTokens = function(token) {
        let values = [];
        values.push(pack.walkTokens.call(this, token));
        if (walkTokens2) {
          values = values.concat(walkTokens2.call(this, token));
        }
        return values;
      };
    }
    marked.setOptions(opts);
  });
};
marked.walkTokens = function(tokens, callback) {
  let values = [];
  for (const token of tokens) {
    values = values.concat(callback.call(marked, token));
    switch (token.type) {
      case "table": {
        for (const cell of token.header) {
          values = values.concat(marked.walkTokens(cell.tokens, callback));
        }
        for (const row of token.rows) {
          for (const cell of row) {
            values = values.concat(marked.walkTokens(cell.tokens, callback));
          }
        }
        break;
      }
      case "list": {
        values = values.concat(marked.walkTokens(token.items, callback));
        break;
      }
      default: {
        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
            values = values.concat(marked.walkTokens(token[childTokens], callback));
          });
        } else if (token.tokens) {
          values = values.concat(marked.walkTokens(token.tokens, callback));
        }
      }
    }
  }
  return values;
};
marked.parseInline = function(src, opt) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked.parseInline(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  try {
    const tokens = Lexer.lexInline(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser2.parseInline(tokens, opt);
  } catch (e2) {
    e2.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape3(e2.message + "", true) + "</pre>";
    }
    throw e2;
  }
};
marked.Parser = Parser2;
marked.parser = Parser2.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parser = Parser2.parse;
var lexer = Lexer.lex;

// src/wp-publish-modal.ts
var import_obsidian5 = require("obsidian");
var WpPublishModal = class extends import_obsidian5.Modal {
  constructor(app, plugin, categories, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.categories = categories;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const t2 = (key, vars) => {
      return this.plugin.i18n.t(key, vars);
    };
    const params = {
      status: this.plugin.settings.defaultPostStatus,
      categories: [1]
    };
    const { contentEl } = this;
    contentEl.createEl("h1", { text: t2("publishModal_title") });
    new import_obsidian5.Setting(contentEl).setName(t2("publishModal_postStatus")).addDropdown((dropdown) => {
      dropdown.addOption("draft" /* Draft */, t2("publishModal_postStatusDraft")).addOption("publish" /* Publish */, t2("publishModal_postStatusPublish")).setValue(this.plugin.settings.defaultPostStatus).onChange((value) => __async(this, null, function* () {
        params.status = value;
      }));
    });
    if (this.categories.length > 0) {
      new import_obsidian5.Setting(contentEl).setName(t2("publishModal_category")).addDropdown((dropdown) => {
        this.categories.forEach((it) => {
          dropdown.addOption(it.id, it.name);
        });
        dropdown.setValue("1").onChange((value) => __async(this, null, function* () {
          params.categories = [toNumber_default(value)];
        }));
      });
    }
    new import_obsidian5.Setting(contentEl).addButton((button) => button.setButtonText(t2("publishModal_publishButtonText")).setCta().onClick(() => {
      this.onSubmit(params, this);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/abstract-wp-client.ts
var AbstractWordPressClient = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  newPost(defaultPostParams) {
    return new Promise((resolve, reject) => {
      if (!this.plugin.settings.endpoint || this.plugin.settings.endpoint.length === 0) {
        new import_obsidian6.Notice(this.plugin.i18n.t("error_noEndpoint"));
        reject(new Error("No endpoint set."));
      }
      const { workspace } = this.app;
      const activeView = workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (activeView) {
        new WpLoginModal(this.app, this.plugin, (userName, password, loginModal) => __async(this, null, function* () {
          const content = yield this.app.vault.read(activeView.file);
          const title = activeView.file.basename;
          if (defaultPostParams) {
            yield this.doPublish({
              title,
              content,
              userName,
              password,
              postParams: defaultPostParams
            }, loginModal);
          } else {
            const categories = yield this.getCategories({
              userName,
              password
            });
            new WpPublishModal(this.app, this.plugin, categories, (postParams, publishModal) => __async(this, null, function* () {
              yield this.doPublish({
                title,
                content,
                userName,
                password,
                postParams
              }, loginModal, publishModal);
            })).open();
          }
        })).open();
      } else {
        const error = "There is no editor found. Nothing will be published.";
        console.warn(error);
        reject(new Error(error));
      }
    });
  }
  doPublish(wpParams, loginModal, publishModal) {
    return __async(this, null, function* () {
      var _a;
      const { title, content, userName, password, postParams } = wpParams;
      try {
        const result = yield this.publish(title != null ? title : "A post from Obsidian!", (_a = marked.parse(content)) != null ? _a : "", postParams, {
          userName,
          password
        });
        console.log("newPost", result);
        if (result.code === 1 /* Error */) {
          const data = result.data;
          new import_obsidian6.Notice(`Post published failed!
${data.code}: ${data.message}`);
        } else {
          new import_obsidian6.Notice("Post published successfully!");
          if (publishModal) {
            publishModal.close();
          }
          loginModal.close();
        }
        return result;
      } catch (error) {
        console.log("Reading file content for 'newPost' failed: ", error);
        new import_obsidian6.Notice(error.toString());
      }
      return Promise.reject("You should not be here!");
    });
  }
};

// src/wp-xml-rpc-client.ts
var WpXmlRpcClient = class extends AbstractWordPressClient {
  constructor(app, plugin) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
    this.client = new XmlRpcClient({
      url: new URL(plugin.settings.endpoint)
    });
  }
  publish(title, content, postParams, wp) {
    return this.client.methodCall("wp.newPost", [
      0,
      wp.userName,
      wp.password,
      {
        post_type: "post",
        post_status: postParams.status,
        post_title: title,
        post_content: content,
        terms: {
          "category": postParams.categories
        }
      }
    ]).then((response) => {
      if (response.faultCode && response.faultString) {
        return {
          code: 1 /* Error */,
          data: {
            code: response.faultCode,
            message: response.faultString
          }
        };
      } else {
        return {
          code: 0 /* OK */,
          data: response
        };
      }
    });
  }
  getCategories(wp) {
    return this.client.methodCall("wp.getTerms", [
      0,
      wp.userName,
      wp.password,
      "category"
    ]).then((data) => {
      var _a;
      return (_a = data.map((it) => __spreadProps(__spreadValues({}, it), {
        id: it.term_id
      }))) != null ? _a : [];
    });
  }
};

// src/wp-rest-client.ts
var import_obsidian7 = require("obsidian");
var WpRestClient = class extends AbstractWordPressClient {
  constructor(app, plugin, context) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
    this.context = context;
    this.options = {
      url: new URL(plugin.settings.endpoint)
    };
  }
  publish(title, content, postParams, wp) {
    return this.httpPost("wp-json/wp/v2/posts", {
      title,
      content,
      status: postParams.status,
      categories: postParams.categories
    }, {
      headers: this.context.getHeaders(wp)
    }).then((resp) => {
      console.log("WpRestClient response", resp);
      if (resp.code && resp.message) {
        return {
          code: 1 /* Error */,
          data: {
            code: resp.code,
            message: resp.message
          }
        };
      } else if (resp.id) {
        return {
          code: 0 /* OK */,
          data: resp
        };
      } else {
        return {
          code: 1 /* Error */,
          data: {
            code: 500,
            message: "Cannot parse WordPress REST API response."
          }
        };
      }
    });
  }
  getCategories(wp) {
    return this.httpGet("wp-json/wp/v2/categories", {
      headers: this.context.getHeaders(wp)
    }).then((data) => data != null ? data : []);
  }
  httpGet(path, options2) {
    const opts = __spreadValues({
      headers: {}
    }, options2);
    console.log("REST GET", `${this.options.url.toString()}${path}`, opts);
    return (0, import_obsidian7.requestUrl)({
      url: `${this.options.url.toString()}${path}`,
      method: "GET",
      headers: __spreadValues({
        "Content-Type": "application/json",
        "User-Agent": "obsidian.md"
      }, opts.headers)
    }).then((response) => {
      console.log("GET response", response);
      return response.json;
    });
  }
  httpPost(path, body, options2) {
    const opts = __spreadValues({
      headers: {}
    }, options2);
    console.log("REST POST", `${this.options.url.toString()}${path}`, opts);
    return (0, import_obsidian7.requestUrl)({
      url: `${this.options.url.toString()}${path}`,
      method: "POST",
      headers: __spreadValues({
        "Content-Type": "application/json",
        "User-Agent": "obsidian.md"
      }, opts.headers),
      body: JSON.stringify(body)
    }).then((response) => {
      console.log("POST response", response);
      return response.json;
    });
  }
};
var WpRestClientMiniOrangeContext = class {
  getHeaders(wp) {
    return {
      "Authorization": `Basic ${Buffer.from(`${wp.userName}:${wp.password}`).toString("base64")}`
    };
  }
};

// src/wp-clients.ts
var wpClientsCache = /* @__PURE__ */ new Map();
function getWordPressClient(app, plugin) {
  if (!plugin.settings.endpoint || plugin.settings.endpoint.length === 0) {
    new import_obsidian8.Notice(plugin.i18n.t("error_noEndpoint"));
    return null;
  }
  const cached = wpClientsCache.get(plugin.settings.apiType);
  if (cached) {
    return cached;
  } else {
    let newClient;
    switch (plugin.settings.apiType) {
      case "xml-rpc" /* XML_RPC */:
        newClient = new WpXmlRpcClient(app, plugin);
        break;
      case "miniOrange" /* RestAPI_miniOrange */:
        newClient = new WpRestClient(app, plugin, new WpRestClientMiniOrangeContext());
        break;
      default:
        newClient = null;
        break;
    }
    if (newClient) {
      wpClientsCache.set(plugin.settings.apiType, newClient);
    }
    return newClient;
  }
}

// src/i18n/en.json
var en_exports = {};
__export(en_exports, {
  command_publish: () => command_publish,
  command_publishWithDefault: () => command_publishWithDefault,
  default: () => en_default,
  error_noEndpoint: () => error_noEndpoint,
  loginModal_loginButtonText: () => loginModal_loginButtonText,
  loginModal_password: () => loginModal_password,
  loginModal_passwordDesc: () => loginModal_passwordDesc,
  loginModal_rememberPassword: () => loginModal_rememberPassword,
  loginModal_rememberPasswordDesc: () => loginModal_rememberPasswordDesc,
  loginModal_rememberUsername: () => loginModal_rememberUsername,
  loginModal_rememberUsernameDesc: () => loginModal_rememberUsernameDesc,
  loginModal_title: () => loginModal_title,
  loginModal_username: () => loginModal_username,
  loginModal_usernameDesc: () => loginModal_usernameDesc,
  publishModal_category: () => publishModal_category,
  publishModal_postStatus: () => publishModal_postStatus,
  publishModal_postStatusDraft: () => publishModal_postStatusDraft,
  publishModal_postStatusPublish: () => publishModal_postStatusPublish,
  publishModal_publishButtonText: () => publishModal_publishButtonText,
  publishModal_title: () => publishModal_title,
  ribbon_iconTitle: () => ribbon_iconTitle,
  settings_apiType: () => settings_apiType,
  settings_apiTypeDesc: () => settings_apiTypeDesc,
  settings_apiTypeRestMiniOrange: () => settings_apiTypeRestMiniOrange,
  settings_apiTypeXmlRpc: () => settings_apiTypeXmlRpc,
  settings_defaultPostStatus: () => settings_defaultPostStatus,
  settings_defaultPostStatusDesc: () => settings_defaultPostStatusDesc,
  settings_defaultPostStatusDraft: () => settings_defaultPostStatusDraft,
  settings_defaultPostStatusPublish: () => settings_defaultPostStatusPublish,
  settings_showRibbonIcon: () => settings_showRibbonIcon,
  settings_showRibbonIconDesc: () => settings_showRibbonIconDesc,
  settings_title: () => settings_title,
  settings_url: () => settings_url,
  settings_urlDesc: () => settings_urlDesc,
  settings_urlPlaceholder: () => settings_urlPlaceholder
});
var error_noEndpoint = "No WordPress URL set.";
var ribbon_iconTitle = "WordPress Publish";
var command_publish = "Publish current note";
var command_publishWithDefault = "Publish current note with default options";
var settings_title = "WordPress Publish";
var settings_url = "WordPress URL";
var settings_urlDesc = "Full path of installed WordPress, for example, https://example.com/wordpress";
var settings_urlPlaceholder = "https://example.com/wordpress";
var settings_apiType = "API Type";
var settings_apiTypeDesc = "Select which API you want to use.";
var settings_apiTypeXmlRpc = "XML-RPC";
var settings_apiTypeRestMiniOrange = "REST API Authentication by miniOrange";
var settings_showRibbonIcon = "Show icon in sidebar";
var settings_showRibbonIconDesc = "If enabled, a button which opens publish panel will be added to the Obsidian sidebar.";
var settings_defaultPostStatus = "Default Post Status";
var settings_defaultPostStatusDesc = "Post status which will be published to WordPress.";
var settings_defaultPostStatusDraft = "draft";
var settings_defaultPostStatusPublish = "publish";
var loginModal_title = "WordPress Login";
var loginModal_username = "Username";
var loginModal_usernameDesc = "Username for <%= url %>";
var loginModal_password = "Password";
var loginModal_passwordDesc = "Password for <%= url %>";
var loginModal_rememberUsername = "Remember Username";
var loginModal_rememberUsernameDesc = "If enabled, the WordPress username you typed will be saved in local data. This might be disclosure in synchronize services.";
var loginModal_rememberPassword = "Remember Password";
var loginModal_rememberPasswordDesc = "If enabled, the WordPress password you typed will be saved in local data. This might be disclosure in synchronize services.";
var loginModal_loginButtonText = "Login";
var publishModal_title = "Publish to WordPress";
var publishModal_postStatus = "Post Status";
var publishModal_postStatusDraft = "Draft";
var publishModal_postStatusPublish = "Publish";
var publishModal_category = "Category";
var publishModal_publishButtonText = "Publish";
var en_default = {
  error_noEndpoint,
  ribbon_iconTitle,
  command_publish,
  command_publishWithDefault,
  settings_title,
  settings_url,
  settings_urlDesc,
  settings_urlPlaceholder,
  settings_apiType,
  settings_apiTypeDesc,
  settings_apiTypeXmlRpc,
  settings_apiTypeRestMiniOrange,
  settings_showRibbonIcon,
  settings_showRibbonIconDesc,
  settings_defaultPostStatus,
  settings_defaultPostStatusDesc,
  settings_defaultPostStatusDraft,
  settings_defaultPostStatusPublish,
  loginModal_title,
  loginModal_username,
  loginModal_usernameDesc,
  loginModal_password,
  loginModal_passwordDesc,
  loginModal_rememberUsername,
  loginModal_rememberUsernameDesc,
  loginModal_rememberPassword,
  loginModal_rememberPasswordDesc,
  loginModal_loginButtonText,
  publishModal_title,
  publishModal_postStatus,
  publishModal_postStatusDraft,
  publishModal_postStatusPublish,
  publishModal_category,
  publishModal_publishButtonText
};

// src/i18n/zh-cn.json
var zh_cn_exports = {};
__export(zh_cn_exports, {
  command_publish: () => command_publish2,
  command_publishWithDefault: () => command_publishWithDefault2,
  default: () => zh_cn_default,
  error_noEndpoint: () => error_noEndpoint2,
  loginModal_loginButtonText: () => loginModal_loginButtonText2,
  loginModal_password: () => loginModal_password2,
  loginModal_passwordDesc: () => loginModal_passwordDesc2,
  loginModal_rememberPassword: () => loginModal_rememberPassword2,
  loginModal_rememberPasswordDesc: () => loginModal_rememberPasswordDesc2,
  loginModal_rememberUsername: () => loginModal_rememberUsername2,
  loginModal_rememberUsernameDesc: () => loginModal_rememberUsernameDesc2,
  loginModal_title: () => loginModal_title2,
  loginModal_username: () => loginModal_username2,
  loginModal_usernameDesc: () => loginModal_usernameDesc2,
  publishModal_category: () => publishModal_category2,
  publishModal_postStatus: () => publishModal_postStatus2,
  publishModal_postStatusDraft: () => publishModal_postStatusDraft2,
  publishModal_postStatusPublish: () => publishModal_postStatusPublish2,
  publishModal_publishButtonText: () => publishModal_publishButtonText2,
  publishModal_title: () => publishModal_title2,
  ribbon_iconTitle: () => ribbon_iconTitle2,
  settings_apiType: () => settings_apiType2,
  settings_apiTypeDesc: () => settings_apiTypeDesc2,
  settings_apiTypeRestMiniOrange: () => settings_apiTypeRestMiniOrange2,
  settings_apiTypeXmlRpc: () => settings_apiTypeXmlRpc2,
  settings_defaultPostStatus: () => settings_defaultPostStatus2,
  settings_defaultPostStatusDesc: () => settings_defaultPostStatusDesc2,
  settings_defaultPostStatusDraft: () => settings_defaultPostStatusDraft2,
  settings_defaultPostStatusPublish: () => settings_defaultPostStatusPublish2,
  settings_showRibbonIcon: () => settings_showRibbonIcon2,
  settings_showRibbonIconDesc: () => settings_showRibbonIconDesc2,
  settings_title: () => settings_title2,
  settings_url: () => settings_url2,
  settings_urlDesc: () => settings_urlDesc2,
  settings_urlPlaceholder: () => settings_urlPlaceholder2
});
var error_noEndpoint2 = "\u6CA1\u6709\u8BBE\u7F6E WordPress URL";
var ribbon_iconTitle2 = "\u53D1\u5E03\u5230 WordPress";
var command_publish2 = "\u53D1\u5E03\u5F53\u524D\u7B14\u8BB0";
var command_publishWithDefault2 = "\u4F7F\u7528\u9ED8\u8BA4\u53C2\u6570\u53D1\u5E03\u5F53\u524D\u7B14\u8BB0";
var settings_title2 = "WordPress \u53D1\u5E03\u63D2\u4EF6";
var settings_url2 = "WordPress URL";
var settings_urlDesc2 = "WordPress \u5B8C\u6574\u8DEF\u5F84\uFF0C\u4F8B\u5982 https://example.com/wordpress";
var settings_urlPlaceholder2 = "https://example.com/wordpress";
var settings_apiType2 = "API \u7C7B\u578B";
var settings_apiTypeDesc2 = "\u9009\u62E9\u9700\u8981\u4F7F\u7528\u7684 API \u7C7B\u578B";
var settings_apiTypeXmlRpc2 = "XML-RPC";
var settings_apiTypeRestMiniOrange2 = "REST API \uFF08\u7531 miniOrange \u63D0\u4F9B\u9A8C\u8BC1\uFF09";
var settings_showRibbonIcon2 = "\u5728\u8FB9\u4FA7\u680F\u663E\u793A\u56FE\u6807";
var settings_showRibbonIconDesc2 = "\u5982\u679C\u5F00\u542F\uFF0C\u8FB9\u4FA7\u680F\u5C06\u663E\u793A\u63D2\u4EF6\u56FE\u6807";
var settings_defaultPostStatus2 = "\u9ED8\u8BA4\u6587\u7AE0\u72B6\u6001";
var settings_defaultPostStatusDesc2 = "\u53D1\u5E03\u5230 WordPress \u7684\u6587\u7AE0\u9ED8\u8BA4\u72B6\u6001";
var settings_defaultPostStatusDraft2 = "\u8349\u7A3F";
var settings_defaultPostStatusPublish2 = "\u6B63\u5F0F\u53D1\u5E03";
var loginModal_title2 = "WordPress \u767B\u5F55";
var loginModal_username2 = "\u7528\u6237\u540D";
var loginModal_usernameDesc2 = "<%= url %> \u7528\u6237\u540D";
var loginModal_password2 = "\u5BC6\u7801";
var loginModal_passwordDesc2 = "<%= url %> \u5BC6\u7801";
var loginModal_rememberUsername2 = "\u8BB0\u4F4F\u7528\u6237\u540D";
var loginModal_rememberUsernameDesc2 = "\u5982\u679C\u5F00\u542F\uFF0CWordPress \u7528\u6237\u540D\u4F1A\u88AB\u4FDD\u5B58\u5728\u672C\u5730\u6570\u636E\u3002\u5728\u67D0\u4E9B\u540C\u6B65\u670D\u52A1\u4E2D\u53EF\u80FD\u5BFC\u81F4\u6CC4\u9732\u3002";
var loginModal_rememberPassword2 = "\u8BB0\u4F4F\u5BC6\u7801";
var loginModal_rememberPasswordDesc2 = "\u5982\u679C\u5F00\u542F\uFF0CWordPress \u5BC6\u7801\u4F1A\u88AB\u4FDD\u5B58\u5728\u672C\u5730\u6570\u636E\u3002\u5728\u67D0\u4E9B\u540C\u6B65\u670D\u52A1\u4E2D\u53EF\u80FD\u5BFC\u81F4\u6CC4\u9732\u3002";
var loginModal_loginButtonText2 = "\u767B\u5F55";
var publishModal_title2 = "\u53D1\u5E03\u5230 WordPress";
var publishModal_postStatus2 = "\u6587\u7AE0\u72B6\u6001";
var publishModal_postStatusDraft2 = "\u8349\u7A3F";
var publishModal_postStatusPublish2 = "\u6B63\u5F0F\u53D1\u5E03";
var publishModal_category2 = "\u5206\u7C7B";
var publishModal_publishButtonText2 = "\u53D1\u5E03";
var zh_cn_default = {
  error_noEndpoint: error_noEndpoint2,
  ribbon_iconTitle: ribbon_iconTitle2,
  command_publish: command_publish2,
  command_publishWithDefault: command_publishWithDefault2,
  settings_title: settings_title2,
  settings_url: settings_url2,
  settings_urlDesc: settings_urlDesc2,
  settings_urlPlaceholder: settings_urlPlaceholder2,
  settings_apiType: settings_apiType2,
  settings_apiTypeDesc: settings_apiTypeDesc2,
  settings_apiTypeXmlRpc: settings_apiTypeXmlRpc2,
  settings_apiTypeRestMiniOrange: settings_apiTypeRestMiniOrange2,
  settings_showRibbonIcon: settings_showRibbonIcon2,
  settings_showRibbonIconDesc: settings_showRibbonIconDesc2,
  settings_defaultPostStatus: settings_defaultPostStatus2,
  settings_defaultPostStatusDesc: settings_defaultPostStatusDesc2,
  settings_defaultPostStatusDraft: settings_defaultPostStatusDraft2,
  settings_defaultPostStatusPublish: settings_defaultPostStatusPublish2,
  loginModal_title: loginModal_title2,
  loginModal_username: loginModal_username2,
  loginModal_usernameDesc: loginModal_usernameDesc2,
  loginModal_password: loginModal_password2,
  loginModal_passwordDesc: loginModal_passwordDesc2,
  loginModal_rememberUsername: loginModal_rememberUsername2,
  loginModal_rememberUsernameDesc: loginModal_rememberUsernameDesc2,
  loginModal_rememberPassword: loginModal_rememberPassword2,
  loginModal_rememberPasswordDesc: loginModal_rememberPasswordDesc2,
  loginModal_loginButtonText: loginModal_loginButtonText2,
  publishModal_title: publishModal_title2,
  publishModal_postStatus: publishModal_postStatus2,
  publishModal_postStatusDraft: publishModal_postStatusDraft2,
  publishModal_postStatusPublish: publishModal_postStatusPublish2,
  publishModal_category: publishModal_category2,
  publishModal_publishButtonText: publishModal_publishButtonText2
};

// src/i18n/langs.ts
var LANGUAGES = {
  en: en_exports,
  zh_cn: zh_cn_exports
};

// src/i18n.ts
var import_obsidian9 = require("obsidian");
var _get, get_fn;
var I18n = class {
  constructor(lang = "auto") {
    this.lang = lang;
    __privateAdd(this, _get);
    this.lang = lang;
  }
  t(key, vars) {
    const string = __privateMethod(this, _get, get_fn).call(this, key);
    if (vars) {
      const compiled = template_default(string);
      return compiled(vars);
    } else {
      return string;
    }
  }
};
_get = new WeakSet();
get_fn = function(key) {
  let lang;
  if (this.lang === "auto" && import_obsidian9.moment.locale().replace("-", "_") in LANGUAGES) {
    lang = import_obsidian9.moment.locale().replace("-", "_");
  } else {
    lang = "en";
  }
  return LANGUAGES[lang][key] || LANGUAGES["en"][key] || key;
};

// src/main.ts
var WordpressPlugin = class extends import_obsidian10.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading obsidian-wordpress plugin");
      yield this.loadSettings();
      this.i18n = new I18n(this.settings.lang);
      addIcons();
      this.updateRibbonIcon();
      this.addCommand({
        id: "defaultPublish",
        name: this.i18n.t("command_publishWithDefault"),
        editorCallback: (editor, view) => {
          const params = {
            status: this.settings.defaultPostStatus,
            categories: []
          };
          this.publishPost(params);
        }
      });
      this.addCommand({
        id: "publish",
        name: this.i18n.t("command_publish"),
        editorCallback: (editor, view) => {
          this.publishPost();
        }
      });
      this.addSettingTab(new WordpressSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateRibbonIcon() {
    const ribbonIconTitle = this.i18n.t("ribbon_iconTitle");
    if (this.settings.showRibbonIcon) {
      this.addRibbonIcon("wp-logo", ribbonIconTitle, () => {
        this.publishPost();
      });
    } else {
      const leftRibbon = this.app.workspace.leftRibbon;
      const children = leftRibbon.ribbonActionsEl.children;
      for (let i2 = 0; i2 < children.length; i2++) {
        if (children.item(i2).getAttribute("aria-label") === ribbonIconTitle) {
          children.item(i2).style.display = "none";
        }
      }
    }
  }
  publishPost(defaultPostParams) {
    const client = getWordPressClient(this.app, this);
    if (client) {
      client.newPost(defaultPostParams).then();
    }
  }
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/*! https://mths.be/punycode v1.4.1 by @mathias */
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIyL2xpYi94bWxidWlsZGVyMi5taW4uanMiLCAic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy9pY29ucy50cyIsICJzcmMvd3AtY2xpZW50cy50cyIsICJzcmMveG1scnBjLWNsaWVudC50cyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTeW1ib2wuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlNYXAuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUb1N0cmluZy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL190cmltbWVkRW5kSW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRyaW0uanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvTnVtYmVyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9GaW5pdGUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b0ludGVnZXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pZGVudGl0eS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRnVuY3Rpb24uanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29yZUpzRGF0YS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc01hc2tlZC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL190b1NvdXJjZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TmF0aXZlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FwcGx5LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Nob3J0T3V0LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY29uc3RhbnQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVmaW5lUHJvcGVydHkuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVNldFRvU3RyaW5nLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NldFRvU3RyaW5nLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzSW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXEuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzaWduVmFsdWUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weU9iamVjdC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyUmVzdC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUmVzdC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzTGVuZ3RoLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2UuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJdGVyYXRlZUNhbGwuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQXNzaWduZXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNQcm90b3R5cGUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRpbWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJndW1lbnRzLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvc3R1YkZhbHNlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNCdWZmZXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzVHlwZWRBcnJheS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1R5cGVkQXJyYXkuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUtleXMuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUtleXMuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUtleXNJbi5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5c0luLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5c0luLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvYXNzaWduSW5XaXRoLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUNyZWF0ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoQ2xlYXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaERlbGV0ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoR2V0LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hIYXMuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaFNldC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19IYXNoLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUNsZWFyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc29jSW5kZXhPZi5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVEZWxldGUuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlR2V0LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUhhcy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVTZXQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTGlzdENhY2hlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUNsZWFyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlRGVsZXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlR2V0LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlSGFzLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlU2V0LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWVtb2l6ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tZW1vaXplQ2FwcGVkLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0cmluZ1RvUGF0aC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvU3RyaW5nLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nhc3RQYXRoLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvS2V5LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9nZXQuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRXJyb3IuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9hdHRlbXB0LmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VQcm9wZXJ0eU9mLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VzY2FwZUh0bWxDaGFyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXNjYXBlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VWYWx1ZXMuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Jvb2xlYW4uanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzRGF0ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRGF0ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzSW50ZWdlci5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzTnVtYmVyLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTYWZlSW50ZWdlci5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jdXN0b21EZWZhdWx0c0Fzc2lnbkluLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VzY2FwZVN0cmluZ0NoYXIuanMiLCAibm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcmVJbnRlcnBvbGF0ZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUVzY2FwZS5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUV2YWx1YXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdGVtcGxhdGVTZXR0aW5ncy5qcyIsICJub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RlbXBsYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbG9kYXNoLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb25zdGFudHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Fzc2lnbi9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvU2V0dGVyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9QYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvRXJhUGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9jb25zdGFudHMuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3V0aWxzLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL1llYXJQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvTG9jYWxXZWVrWWVhclBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9JU09XZWVrWWVhclBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9FeHRlbmRlZFllYXJQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvUXVhcnRlclBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9TdGFuZEFsb25lUXVhcnRlclBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9Nb250aFBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9TdGFuZEFsb25lTW9udGhQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3NldFVUQ1dlZWsvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvTG9jYWxXZWVrUGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zZXRVVENJU09XZWVrL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL0lTT1dlZWtQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvRGF0ZVBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9EYXlPZlllYXJQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3NldFVUQ0RheS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9EYXlQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvTG9jYWxEYXlQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvU3RhbmRBbG9uZUxvY2FsRGF5UGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zZXRVVENJU09EYXkvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvSVNPRGF5UGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL0FNUE1QYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvQU1QTU1pZG5pZ2h0UGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL0RheVBlcmlvZFBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9Ib3VyMXRvMTJQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvSG91cjB0bzIzUGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL0hvdXIwVG8xMVBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9Ib3VyMVRvMjRQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvTWludXRlUGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL1NlY29uZFBhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9GcmFjdGlvbk9mU2Vjb25kUGFyc2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL0lTT1RpbWV6b25lV2l0aFpQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvSVNPVGltZXpvbmVQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvVGltZXN0YW1wU2Vjb25kc1BhcnNlci5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL19saWIvcGFyc2Vycy9UaW1lc3RhbXBNaWxsaXNlY29uZHNQYXJzZXIuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9fbGliL3BhcnNlcnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZS9pbmRleC5qcyIsICJzcmMvYWJzdHJhY3Qtd3AtY2xpZW50LnRzIiwgInNyYy93cC1sb2dpbi1tb2RhbC50cyIsICJub2RlX21vZHVsZXMvbWFya2VkL2xpYi9tYXJrZWQuZXNtLmpzIiwgInNyYy93cC1wdWJsaXNoLW1vZGFsLnRzIiwgInNyYy93cC14bWwtcnBjLWNsaWVudC50cyIsICJzcmMvd3AtcmVzdC1jbGllbnQudHMiLCAic3JjL2kxOG4vbGFuZ3MudHMiLCAic3JjL2kxOG4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMueG1sYnVpbGRlcjI9dCgpOmUueG1sYnVpbGRlcjI9dCgpfSh0aGlzLChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiByKG4pe2lmKHRbbl0pcmV0dXJuIHRbbl0uZXhwb3J0czt2YXIgaT10W25dPXtpOm4sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtuXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxyKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiByLm09ZSxyLmM9dCxyLmQ9ZnVuY3Rpb24oZSx0LG4pe3IubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpufSl9LHIucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxyLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPXIoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKTtpZihyLnIobiksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBpIGluIGUpci5kKG4saSxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLGkpKTtyZXR1cm4gbn0sci5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiByLmQodCxcImFcIix0KSx0fSxyLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHIucD1cIlwiLHIoci5zPTE4NCl9KFtmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtmb3IodmFyIHIgaW4gZSl0Lmhhc093blByb3BlcnR5KHIpfHwodFtyXT1lW3JdKX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxuKHIoMjQwKSksbihyKDI1MSkpLG4ocigxNzUpKSxuKHIoMTA3KSksbihyKDI5KSksbihyKDczKSksbihyKDEwNikpLG4ocigzMCkpLG4ocigyNTIpKSxuKHIoNTIpKSxuKHIoOTcpKSxuKHIoMjUzKSksbihyKDM3KSksbihyKDUxKSksbihyKDE3MykpLG4ocigxNzYpKSxuKHIoMTcyKSksbihyKDEwOCkpLG4ocigyNTQpKSxuKHIoMjU1KSksbihyKDI1NikpLG4ocig3MikpLG4ocigxNzcpKSxuKHIoMTA1KSksbihyKDE3KSksbihyKDI1NykpLG4ocigxMikpLG4ocigxNzQpKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoMjEyKTt0LkZpeGVkU2l6ZVNldD1pLkZpeGVkU2l6ZVNldDt2YXIgbz1yKDIxMyk7dC5PYmplY3RDYWNoZT1vLk9iamVjdENhY2hlO3ZhciBhPXIoMjE0KTt0LkNvbXBhcmVDYWNoZT1hLkNvbXBhcmVDYWNoZTt2YXIgcz1yKDIxNSk7dC5MYXp5PXMuTGF6eTt2YXIgdT1yKDIxNik7ZnVuY3Rpb24gbChlLHQscil7aWYobShlKSllLmZvckVhY2goKGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQuY2FsbChyLG4sZSl9KSk7ZWxzZSBmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiZ0LmNhbGwocixuLGVbbl0pfWZ1bmN0aW9uIGMoZSl7dmFyIHQscjtpZihoKGUpKXJldHVybiBlO2lmKGYoZSkpe3ZhciBpPVtdO3RyeXtmb3IodmFyIG89bihlKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7dmFyIHM9YS52YWx1ZTtpLnB1c2goYyhzKSl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gaX1pZihwKGUpKXtpPXt9O2Zvcih2YXIgdSBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodSkpe3ZhciBsPWVbdV07aVt1XT1jKGwpfXJldHVybiBpfXJldHVybiBlfWZ1bmN0aW9uIGgoZSl7cmV0dXJuISFlJiZcIltvYmplY3QgRnVuY3Rpb25dXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gcChlKXt2YXIgdD10eXBlb2YgZTtyZXR1cm4hIWUmJihcImZ1bmN0aW9uXCI9PT10fHxcIm9iamVjdFwiPT09dCl9ZnVuY3Rpb24gZihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKX1mdW5jdGlvbiBkKGUpe3JldHVybiBlIGluc3RhbmNlb2YgU2V0fWZ1bmN0aW9uIG0oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24geShlKXtpZihwKGUpKXt2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkscj10LmNvbnN0cnVjdG9yO3JldHVybiB0JiZyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZyIGluc3RhbmNlb2YgciYmRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocik9PT1GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChPYmplY3QpfXJldHVybiExfXQuU3RyaW5nV2Fsa2VyPXUuU3RyaW5nV2Fsa2VyLHQuYXBwbHlNaXhpbj1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1bXSxuPTI7bjxhcmd1bWVudHMubGVuZ3RoO24rKylyW24tMl09YXJndW1lbnRzW25dO09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQucHJvdG90eXBlKS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZihcImNvbnN0cnVjdG9yXCIhPT1uKXtpZigtMSE9PXIuaW5kZXhPZihuKSl7dmFyIGk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLnByb3RvdHlwZSxuKTtpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJfXCIrbixpKX12YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQucHJvdG90eXBlLG4pO28mJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxuLG8pfX0pKX0sdC5hcHBseURlZmF1bHRzPWZ1bmN0aW9uIGUodCxyLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgaT1jKHR8fHt9KTtyZXR1cm4gbChyLChmdW5jdGlvbih0LHIpe3kocik/aVt0XT1lKGlbdF0scixuKToobnx8dm9pZCAwPT09aVt0XSkmJihpW3RdPXIpfSkpLGl9LHQuZm9yRWFjaEFycmF5PWZ1bmN0aW9uKGUsdCxyKXtlLmZvckVhY2godCxyKX0sdC5mb3JFYWNoT2JqZWN0PWwsdC5hcnJheUxlbmd0aD1mdW5jdGlvbihlKXtyZXR1cm4gZChlKT9lLnNpemU6ZS5sZW5ndGh9LHQub2JqZWN0TGVuZ3RoPWZ1bmN0aW9uKGUpe3JldHVybiBtKGUpP2Uuc2l6ZTpPYmplY3Qua2V5cyhlKS5sZW5ndGh9LHQuZ2V0T2JqZWN0VmFsdWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbShlKT9lLmdldCh0KTplW3RdfSx0LnJlbW92ZU9iamVjdFZhbHVlPWZ1bmN0aW9uKGUsdCl7bShlKT9lLmRlbGV0ZSh0KTpkZWxldGUgZVt0XX0sdC5jbG9uZT1jLHQuaXNCb29sZWFuPWZ1bmN0aW9uKGUpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZX0sdC5pc051bWJlcj1mdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX0sdC5pc1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZX0sdC5pc0Z1bmN0aW9uPWgsdC5pc09iamVjdD1wLHQuaXNBcnJheT1mLHQuaXNTZXQ9ZCx0LmlzTWFwPW0sdC5pc0VtcHR5PWZ1bmN0aW9uKGUpe2lmKGYoZSkpcmV0dXJuIWUubGVuZ3RoO2lmKGQoZSkpcmV0dXJuIWUuc2l6ZTtpZihtKGUpKXJldHVybiFlLnNpemU7aWYocChlKSl7Zm9yKHZhciB0IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh0KSlyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4hMX0sdC5pc1BsYWluT2JqZWN0PXksdC5pc0l0ZXJhYmxlPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW1N5bWJvbC5pdGVyYXRvcl19LHQuZ2V0VmFsdWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGgoZS52YWx1ZU9mKT9lLnZhbHVlT2YoKTplfSx0LnV0ZjhFbmNvZGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KDQqZS5sZW5ndGgpLHI9MCxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWUuY2hhckNvZGVBdChuKTtpZihpPDEyOCl0W3IrK109aTtlbHNle2lmKGk8MjA0OCl0W3IrK109aT4+NnwxOTI7ZWxzZXtpZihpPjU1Mjk1JiZpPDU2MzIwKXtpZigrK24+PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkluY29tcGxldGUgc3Vycm9nYXRlIHBhaXIuXCIpO3ZhciBvPWUuY2hhckNvZGVBdChuKTtpZihvPDU2MzIwfHxvPjU3MzQzKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3Vycm9nYXRlIGNoYXJhY3Rlci5cIik7aT02NTUzNisoKDEwMjMmaSk8PDEwKSsoMTAyMyZvKSx0W3IrK109aT4+MTh8MjQwLHRbcisrXT1pPj4xMiY2M3wxMjh9ZWxzZSB0W3IrK109aT4+MTJ8MjI0O3RbcisrXT1pPj42JjYzfDEyOH10W3IrK109NjMmaXwxMjh9fXJldHVybiB0LnN1YmFycmF5KDAscil9LHQudXRmOERlY29kZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIixyPTA7cjxlLmxlbmd0aDspe3ZhciBuPWVbcisrXTtpZihuPjEyNylpZihuPjE5MSYmbjwyMjQpe2lmKHI+PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkluY29tcGxldGUgMi1ieXRlIHNlcXVlbmNlLlwiKTtuPSgzMSZuKTw8Nnw2MyZlW3IrK119ZWxzZSBpZihuPjIyMyYmbjwyNDApe2lmKHIrMT49ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiSW5jb21wbGV0ZSAzLWJ5dGUgc2VxdWVuY2UuXCIpO249KDE1Jm4pPDwxMnwoNjMmZVtyKytdKTw8Nnw2MyZlW3IrK119ZWxzZXtpZighKG4+MjM5JiZuPDI0OCkpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBtdWx0aS1ieXRlIHN0YXJ0LlwiKTtpZihyKzI+PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkluY29tcGxldGUgNC1ieXRlIHNlcXVlbmNlLlwiKTtuPSg3Jm4pPDwxOHwoNjMmZVtyKytdKTw8MTJ8KDYzJmVbcisrXSk8PDZ8NjMmZVtyKytdfWlmKG48PTY1NTM1KXQrPVN0cmluZy5mcm9tQ2hhckNvZGUobik7ZWxzZXtpZighKG48PTExMTQxMTEpKXRocm93IG5ldyBFcnJvcihcIkNvZGUgcG9pbnQgZXhjZWVkcyBVVEYtMTYgbGltaXQuXCIpO24tPTY1NTM2LHQrPVN0cmluZy5mcm9tQ2hhckNvZGUobj4+MTB8NTUyOTYpLHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoMTAyMyZufDU2MzIwKX19cmV0dXJuIHR9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSl7ZVtlLkJlZm9yZT0wXT1cIkJlZm9yZVwiLGVbZS5FcXVhbD0xXT1cIkVxdWFsXCIsZVtlLkFmdGVyPTJdPVwiQWZ0ZXJcIn0odC5Cb3VuZGFyeVBvc2l0aW9ufHwodC5Cb3VuZGFyeVBvc2l0aW9uPXt9KSksZnVuY3Rpb24oZSl7ZVtlLk5vbmU9MF09XCJOb25lXCIsZVtlLkNhcHR1cmluZz0xXT1cIkNhcHR1cmluZ1wiLGVbZS5BdFRhcmdldD0yXT1cIkF0VGFyZ2V0XCIsZVtlLkJ1YmJsaW5nPTNdPVwiQnViYmxpbmdcIn0odC5FdmVudFBoYXNlfHwodC5FdmVudFBoYXNlPXt9KSksZnVuY3Rpb24oZSl7ZVtlLkVsZW1lbnQ9MV09XCJFbGVtZW50XCIsZVtlLkF0dHJpYnV0ZT0yXT1cIkF0dHJpYnV0ZVwiLGVbZS5UZXh0PTNdPVwiVGV4dFwiLGVbZS5DRGF0YT00XT1cIkNEYXRhXCIsZVtlLkVudGl0eVJlZmVyZW5jZT01XT1cIkVudGl0eVJlZmVyZW5jZVwiLGVbZS5FbnRpdHk9Nl09XCJFbnRpdHlcIixlW2UuUHJvY2Vzc2luZ0luc3RydWN0aW9uPTddPVwiUHJvY2Vzc2luZ0luc3RydWN0aW9uXCIsZVtlLkNvbW1lbnQ9OF09XCJDb21tZW50XCIsZVtlLkRvY3VtZW50PTldPVwiRG9jdW1lbnRcIixlW2UuRG9jdW1lbnRUeXBlPTEwXT1cIkRvY3VtZW50VHlwZVwiLGVbZS5Eb2N1bWVudEZyYWdtZW50PTExXT1cIkRvY3VtZW50RnJhZ21lbnRcIixlW2UuTm90YXRpb249MTJdPVwiTm90YXRpb25cIn0odC5Ob2RlVHlwZXx8KHQuTm9kZVR5cGU9e30pKSxmdW5jdGlvbihlKXtlW2UuRGlzY29ubmVjdGVkPTFdPVwiRGlzY29ubmVjdGVkXCIsZVtlLlByZWNlZGluZz0yXT1cIlByZWNlZGluZ1wiLGVbZS5Gb2xsb3dpbmc9NF09XCJGb2xsb3dpbmdcIixlW2UuQ29udGFpbnM9OF09XCJDb250YWluc1wiLGVbZS5Db250YWluZWRCeT0xNl09XCJDb250YWluZWRCeVwiLGVbZS5JbXBsZW1lbnRhdGlvblNwZWNpZmljPTMyXT1cIkltcGxlbWVudGF0aW9uU3BlY2lmaWNcIn0odC5Qb3NpdGlvbnx8KHQuUG9zaXRpb249e30pKSxmdW5jdGlvbihlKXtlW2UuQWNjZXB0PTFdPVwiQWNjZXB0XCIsZVtlLlJlamVjdD0yXT1cIlJlamVjdFwiLGVbZS5Ta2lwPTNdPVwiU2tpcFwifSh0LkZpbHRlclJlc3VsdHx8KHQuRmlsdGVyUmVzdWx0PXt9KSksZnVuY3Rpb24oZSl7ZVtlLkFsbD00Mjk0OTY3Mjk1XT1cIkFsbFwiLGVbZS5FbGVtZW50PTFdPVwiRWxlbWVudFwiLGVbZS5BdHRyaWJ1dGU9Ml09XCJBdHRyaWJ1dGVcIixlW2UuVGV4dD00XT1cIlRleHRcIixlW2UuQ0RhdGFTZWN0aW9uPThdPVwiQ0RhdGFTZWN0aW9uXCIsZVtlLkVudGl0eVJlZmVyZW5jZT0xNl09XCJFbnRpdHlSZWZlcmVuY2VcIixlW2UuRW50aXR5PTMyXT1cIkVudGl0eVwiLGVbZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb249NjRdPVwiUHJvY2Vzc2luZ0luc3RydWN0aW9uXCIsZVtlLkNvbW1lbnQ9MTI4XT1cIkNvbW1lbnRcIixlW2UuRG9jdW1lbnQ9MjU2XT1cIkRvY3VtZW50XCIsZVtlLkRvY3VtZW50VHlwZT01MTJdPVwiRG9jdW1lbnRUeXBlXCIsZVtlLkRvY3VtZW50RnJhZ21lbnQ9MTAyNF09XCJEb2N1bWVudEZyYWdtZW50XCIsZVtlLk5vdGF0aW9uPTIwNDhdPVwiTm90YXRpb25cIn0odC5XaGF0VG9TaG93fHwodC5XaGF0VG9TaG93PXt9KSksZnVuY3Rpb24oZSl7ZVtlLlN0YXJ0VG9TdGFydD0wXT1cIlN0YXJ0VG9TdGFydFwiLGVbZS5TdGFydFRvRW5kPTFdPVwiU3RhcnRUb0VuZFwiLGVbZS5FbmRUb0VuZD0yXT1cIkVuZFRvRW5kXCIsZVtlLkVuZFRvU3RhcnQ9M109XCJFbmRUb1N0YXJ0XCJ9KHQuSG93VG9Db21wYXJlfHwodC5Ib3dUb0NvbXBhcmU9e30pKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMjQxKTt0LkNhc3Q9bi5DYXN0O3ZhciBpPXIoMTUwKTt0Lkd1YXJkPWkuR3VhcmQ7dmFyIG89cigyNDIpO3QuRW1wdHlTZXQ9by5FbXB0eVNldH0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTEpLGk9cig1NSkuZixvPXIoMjEpLGE9cigyNSkscz1yKDgwKSx1PXIoMTE5KSxsPXIoMTIzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixjLGgscCxmLGQ9ZS50YXJnZXQsbT1lLmdsb2JhbCx5PWUuc3RhdDtpZihyPW0/bjp5P25bZF18fHMoZCx7fSk6KG5bZF18fHt9KS5wcm90b3R5cGUpZm9yKGMgaW4gdCl7aWYocD10W2NdLGg9ZS5ub1RhcmdldEdldD8oZj1pKHIsYykpJiZmLnZhbHVlOnJbY10sIWwobT9jOmQrKHk/XCIuXCI6XCIjXCIpK2MsZS5mb3JjZWQpJiZ2b2lkIDAhPT1oKXtpZih0eXBlb2YgcD09dHlwZW9mIGgpY29udGludWU7dShwLGgpfShlLnNoYW18fGgmJmguc2hhbSkmJm8ocCxcInNoYW1cIiwhMCksYShyLGMscCxlKX19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMSksaT1yKDgxKSxvPXIoMTQpLGE9cig1OCkscz1yKDg2KSx1PXIoMTI0KSxsPWkoXCJ3a3NcIiksYz1uLlN5bWJvbCxoPXU/YzpjJiZjLndpdGhvdXRTZXR0ZXJ8fGE7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvKGwsZSl8fChzJiZvKGMsZSk/bFtlXT1jW2VdOmxbZV09aChcIlN5bWJvbC5cIitlKSksbFtlXX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9cigyOSksbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLl9mZWF0dXJlcz17bXV0YXRpb25PYnNlcnZlcnM6ITAsY3VzdG9tRWxlbWVudHM6ITAsc2xvdHM6ITAsc3RlcHM6ITB9LHRoaXMuX3dpbmRvdz1udWxsLHRoaXMuX2NvbXBhcmVDYWNoZT1uZXcgbi5Db21wYXJlQ2FjaGUsdGhpcy5fcmFuZ2VMaXN0PW5ldyBuLkZpeGVkU2l6ZVNldH1yZXR1cm4gZS5wcm90b3R5cGUuc2V0RmVhdHVyZXM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSYmKGU9ITApLG4uaXNPYmplY3QoZSkpZm9yKHZhciB0IGluIGUpdGhpcy5fZmVhdHVyZXNbdF09ZVt0XXx8ITE7ZWxzZSBmb3IodmFyIHQgaW4gdGhpcy5fZmVhdHVyZXMpdGhpcy5fZmVhdHVyZXNbdF09ZX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiZmVhdHVyZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZlYXR1cmVzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIndpbmRvd1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuX3dpbmRvdyYmKHRoaXMuX3dpbmRvdz1pLmNyZWF0ZV93aW5kb3coKSksdGhpcy5fd2luZG93fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImNvbXBhcmVDYWNoZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29tcGFyZUNhY2hlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInJhbmdlTGlzdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmFuZ2VMaXN0fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiaW5zdGFuY2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuX2luc3RhbmNlfHwoZS5faW5zdGFuY2U9bmV3IGUpLGUuX2luc3RhbmNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9KCk7dC5kb209by5pbnN0YW5jZX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19pbXBvcnRTdGFyfHxmdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9bihyKDIyOCkpO3QuYmFzZTY0PWk7dmFyIG89bihyKDE0NikpO3QuYnl0ZT1vO3ZhciBhPW4ocigxNDcpKTt0LmJ5dGVTZXF1ZW5jZT1hO3ZhciBzPW4ocig5NikpO3QuY29kZVBvaW50PXM7dmFyIHU9bihyKDIzMikpO3QuanNvbj11O3ZhciBsPW4ocigyMzMpKTt0Lmxpc3Q9bDt2YXIgYz1uKHIoMjM0KSk7dC5tYXA9Yzt2YXIgaD1uKHIoMjM1KSk7dC5uYW1lc3BhY2U9aDt2YXIgcD1uKHIoMjM2KSk7dC5xdWV1ZT1wO3ZhciBmPW4ocigyMzcpKTt0LnNldD1mO3ZhciBkPW4ocigyMzgpKTt0LnN0YWNrPWQ7dmFyIG09bihyKDIzOSkpO3Quc3RyaW5nPW19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hIWUoKX1jYXRjaChlKXtyZXR1cm4hMH19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIpe3ZvaWQgMD09PXImJihyPVwiXCIpO3ZhciBuPWUuY2FsbCh0aGlzLHIpfHx0aGlzO3JldHVybiBuLm5hbWU9dCxufXJldHVybiBpKHQsZSksdH0oRXJyb3IpO3QuRE9NRXhjZXB0aW9uPW87dmFyIGE9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJET01TdHJpbmdTaXplRXJyb3JcIix0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuRE9NU3RyaW5nU2l6ZUVycm9yPWE7dmFyIHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJXcm9uZ0RvY3VtZW50RXJyb3JcIixcIlRoZSBvYmplY3QgaXMgaW4gdGhlIHdyb25nIGRvY3VtZW50LiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuV3JvbmdEb2N1bWVudEVycm9yPXM7dmFyIHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJOb0RhdGFBbGxvd2VkRXJyb3JcIix0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuTm9EYXRhQWxsb3dlZEVycm9yPXU7dmFyIGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvclwiLFwiVGhlIG9iamVjdCBjYW4gbm90IGJlIG1vZGlmaWVkLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3I9bDt2YXIgYz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIk5vdFN1cHBvcnRlZEVycm9yXCIsXCJUaGUgb3BlcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5Ob3RTdXBwb3J0ZWRFcnJvcj1jO3ZhciBoPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiSW5Vc2VBdHRyaWJ1dGVFcnJvclwiLHQpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5JblVzZUF0dHJpYnV0ZUVycm9yPWg7dmFyIHA9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJJbnZhbGlkU3RhdGVFcnJvclwiLFwiVGhlIG9iamVjdCBpcyBpbiBhbiBpbnZhbGlkIHN0YXRlLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSW52YWxpZFN0YXRlRXJyb3I9cDt2YXIgZj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkludmFsaWRNb2RpZmljYXRpb25FcnJvclwiLFwiVGhlIG9iamVjdCBjYW4gbm90IGJlIG1vZGlmaWVkIGluIHRoaXMgd2F5LiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSW52YWxpZE1vZGlmaWNhdGlvbkVycm9yPWY7dmFyIGQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJOYW1lc3BhY2VFcnJvclwiLFwiVGhlIG9wZXJhdGlvbiBpcyBub3QgYWxsb3dlZCBieSBOYW1lc3BhY2VzIGluIFhNTC4gW1hNTE5TXSBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuTmFtZXNwYWNlRXJyb3I9ZDt2YXIgbT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkludmFsaWRBY2Nlc3NFcnJvclwiLFwiVGhlIG9iamVjdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBvcGVyYXRpb24gb3IgYXJndW1lbnQuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5JbnZhbGlkQWNjZXNzRXJyb3I9bTt2YXIgeT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIlZhbGlkYXRpb25FcnJvclwiLHQpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5WYWxpZGF0aW9uRXJyb3I9eTt2YXIgdj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIlR5cGVNaXNtYXRjaEVycm9yXCIsdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LlR5cGVNaXNtYXRjaEVycm9yPXY7dmFyIF89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJTZWN1cml0eUVycm9yXCIsXCJUaGUgb3BlcmF0aW9uIGlzIGluc2VjdXJlLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuU2VjdXJpdHlFcnJvcj1fO3ZhciBnPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiTmV0d29ya0Vycm9yXCIsXCJBIG5ldHdvcmsgZXJyb3Igb2NjdXJyZWQuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5OZXR3b3JrRXJyb3I9Zzt2YXIgYj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkFib3J0RXJyb3JcIixcIlRoZSBvcGVyYXRpb24gd2FzIGFib3J0ZWQuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5BYm9ydEVycm9yPWI7dmFyIHg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJVUkxNaXNtYXRjaEVycm9yXCIsXCJUaGUgZ2l2ZW4gVVJMIGRvZXMgbm90IG1hdGNoIGFub3RoZXIgVVJMLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuVVJMTWlzbWF0Y2hFcnJvcj14O3ZhciB3PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiUXVvdGFFeGNlZWRlZEVycm9yXCIsXCJUaGUgcXVvdGEgaGFzIGJlZW4gZXhjZWVkZWQuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5RdW90YUV4Y2VlZGVkRXJyb3I9dzt2YXIgRT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIlRpbWVvdXRFcnJvclwiLFwiVGhlIG9wZXJhdGlvbiB0aW1lZCBvdXQuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5UaW1lb3V0RXJyb3I9RTt2YXIgRD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIkludmFsaWROb2RlVHlwZUVycm9yXCIsXCJUaGUgc3VwcGxpZWQgbm9kZSBpcyBpbmNvcnJlY3Qgb3IgaGFzIGFuIGluY29ycmVjdCBhbmNlc3RvciBmb3IgdGhpcyBvcGVyYXRpb24uIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5JbnZhbGlkTm9kZVR5cGVFcnJvcj1EO3ZhciBTPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiRGF0YUNsb25lRXJyb3JcIixcIlRoZSBvYmplY3QgY2FuIG5vdCBiZSBjbG9uZWQuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5EYXRhQ2xvbmVFcnJvcj1TO3ZhciBDPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiTm90SW1wbGVtZW50ZWRFcnJvclwiLFwiVGhlIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkIGJ5IHRoaXMgbW9kdWxlLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuTm90SW1wbGVtZW50ZWRFcnJvcj1DO3ZhciBBPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiSGllcmFyY2h5UmVxdWVzdEVycm9yXCIsXCJUaGUgb3BlcmF0aW9uIHdvdWxkIHlpZWxkIGFuIGluY29ycmVjdCBub2RlIHRyZWUuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5IaWVyYXJjaHlSZXF1ZXN0RXJyb3I9QTt2YXIgTj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyxcIk5vdEZvdW5kRXJyb3JcIixcIlRoZSBvYmplY3QgY2FuIG5vdCBiZSBmb3VuZCBoZXJlLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuTm90Rm91bmRFcnJvcj1OO3ZhciBUPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiSW5kZXhTaXplRXJyb3JcIixcIlRoZSBpbmRleCBpcyBub3QgaW4gdGhlIGFsbG93ZWQgcmFuZ2UuIFwiK3QpfHx0aGlzfXJldHVybiBpKHQsZSksdH0obyk7dC5JbmRleFNpemVFcnJvcj1UO3ZhciBPPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PVwiXCIpLGUuY2FsbCh0aGlzLFwiU3ludGF4RXJyb3JcIixcIlRoZSBzdHJpbmcgZGlkIG5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQgcGF0dGVybi4gXCIrdCl8fHRoaXN9cmV0dXJuIGkodCxlKSx0fShvKTt0LlN5bnRheEVycm9yPU87dmFyIEY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJcIiksZS5jYWxsKHRoaXMsXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIixcIlRoZSBzdHJpbmcgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLiBcIit0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHR9KG8pO3QuSW52YWxpZENoYXJhY3RlckVycm9yPUZ9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDUzKSxpPVtcImtpbmRcIixcInJlc29sdmVcIixcImNvbnN0cnVjdFwiLFwiaW5zdGFuY2VPZlwiLFwicHJlZGljYXRlXCIsXCJyZXByZXNlbnRcIixcImRlZmF1bHRTdHlsZVwiLFwic3R5bGVBbGlhc2VzXCJdLG89W1wic2NhbGFyXCIsXCJzZXF1ZW5jZVwiLFwibWFwcGluZ1wiXTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixhO2lmKHQ9dHx8e30sT2JqZWN0LmtleXModCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoLTE9PT1pLmluZGV4T2YodCkpdGhyb3cgbmV3IG4oJ1Vua25vd24gb3B0aW9uIFwiJyt0KydcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicrZSsnXCIgWUFNTCB0eXBlLicpfSkpLHRoaXMudGFnPWUsdGhpcy5raW5kPXQua2luZHx8bnVsbCx0aGlzLnJlc29sdmU9dC5yZXNvbHZlfHxmdW5jdGlvbigpe3JldHVybiEwfSx0aGlzLmNvbnN0cnVjdD10LmNvbnN0cnVjdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHRoaXMuaW5zdGFuY2VPZj10Lmluc3RhbmNlT2Z8fG51bGwsdGhpcy5wcmVkaWNhdGU9dC5wcmVkaWNhdGV8fG51bGwsdGhpcy5yZXByZXNlbnQ9dC5yZXByZXNlbnR8fG51bGwsdGhpcy5kZWZhdWx0U3R5bGU9dC5kZWZhdWx0U3R5bGV8fG51bGwsdGhpcy5zdHlsZUFsaWFzZXM9KHI9dC5zdHlsZUFsaWFzZXN8fG51bGwsYT17fSxudWxsIT09ciYmT2JqZWN0LmtleXMocikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cltlXS5mb3JFYWNoKChmdW5jdGlvbih0KXthW1N0cmluZyh0KV09ZX0pKX0pKSxhKSwtMT09PW8uaW5kZXhPZih0aGlzLmtpbmQpKXRocm93IG5ldyBuKCdVbmtub3duIGtpbmQgXCInK3RoaXMua2luZCsnXCIgaXMgc3BlY2lmaWVkIGZvciBcIicrZSsnXCIgWUFNTCB0eXBlLicpfX0sZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbih0KXt2YXIgcj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5NYXRoPT1NYXRoJiZlfTtlLmV4cG9ydHM9cihcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcyl8fHIoXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93KXx8cihcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZil8fHIoXCJvYmplY3RcIj09dHlwZW9mIHQmJnQpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9KS5jYWxsKHRoaXMscig3OCkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5pZGxfZGVmaW5lQ29uc3Q9ZnVuY3Rpb24oZSx0LHIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3dyaXRhYmxlOiExLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLHZhbHVlOnJ9KX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlP251bGwhPT1lOlwiZnVuY3Rpb25cIj09dHlwZW9mIGV9fSxmdW5jdGlvbihlLHQpe3ZhciByPXt9Lmhhc093blByb3BlcnR5O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiByLmNhbGwoZSx0KX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE2KSxpPXIoMTE1KSxvPXIoMTgpLGE9cig1Nikscz1PYmplY3QuZGVmaW5lUHJvcGVydHk7dC5mPW4/czpmdW5jdGlvbihlLHQscil7aWYobyhlKSx0PWEodCwhMCksbyhyKSxpKXRyeXtyZXR1cm4gcyhlLHQscil9Y2F0Y2goZSl7fWlmKFwiZ2V0XCJpbiByfHxcInNldFwiaW4gcil0aHJvdyBUeXBlRXJyb3IoXCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZFwiKTtyZXR1cm5cInZhbHVlXCJpbiByJiYoZVt0XT1yLnZhbHVlKSxlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoOCk7ZS5leHBvcnRzPSFuKChmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sMSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSlbMV19KSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDMpLG89cigyKTtmdW5jdGlvbiBhKGUsdCxyKXtpZih2b2lkIDA9PT1yJiYocj0hMSksciYmaS5HdWFyZC5pc0VsZW1lbnROb2RlKHQpJiZpLkd1YXJkLmlzU2hhZG93Um9vdCh0LnNoYWRvd1Jvb3QpJiZ0LnNoYWRvd1Jvb3QuX2ZpcnN0Q2hpbGQpcmV0dXJuIHQuc2hhZG93Um9vdC5fZmlyc3RDaGlsZDtpZih0Ll9maXJzdENoaWxkKXJldHVybiB0Ll9maXJzdENoaWxkO2lmKHQ9PT1lKXJldHVybiBudWxsO2lmKHQuX25leHRTaWJsaW5nKXJldHVybiB0Ll9uZXh0U2libGluZztmb3IodmFyIG49dC5fcGFyZW50O24mJm4hPT1lOyl7aWYobi5fbmV4dFNpYmxpbmcpcmV0dXJuIG4uX25leHRTaWJsaW5nO249bi5fcGFyZW50fXJldHVybiBudWxsfWZ1bmN0aW9uIHMoKXt2YXIgZTtyZXR1cm4oZT17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6ITAsdmFsdWU6bnVsbH19fX0sZX1mdW5jdGlvbiB1KGUsdCxyLG4pe3ZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1yJiYocj0hMSk7Zm9yKHZhciBpPXQ/ZTphKGUsZSxyKTtpJiZuJiYhbihpKTspaT1hKGUsaSxyKTtyZXR1cm4gaX1mdW5jdGlvbiBsKGUsdCxyLG4saSl7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW4mJihuPSExKTtmb3IodmFyIG89YShlLHQsbik7byYmaSYmIWkobyk7KW89YShlLG8sbik7cmV0dXJuIG99ZnVuY3Rpb24gYyhlLHQscixuKXt2YXIgaTtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLHZvaWQgMD09PXImJihyPSExKSx0fHwwIT09ZS5fY2hpbGRyZW4uc2l6ZT8oKGk9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgaT10P2U6YShlLGUscik7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtmb3IoO2kmJm4mJiFuKGkpOylpPWEoZSxpLHIpO2lmKG51bGw9PT1pKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciB0PXtkb25lOiExLHZhbHVlOml9O3JldHVybiBpPWEoZSxpLHIpLHR9fX0saSk6cygpfWZ1bmN0aW9uIGgoZSx0LHIpe3ZvaWQgMD09PXQmJih0PSExKTtmb3IodmFyIG49dD9lOmUuX3BhcmVudDtuJiZyJiYhcihuKTspbj1uLl9wYXJlbnQ7cmV0dXJuIG59ZnVuY3Rpb24gcChlLHQscixuKXt2b2lkIDA9PT1yJiYocj0hMSk7Zm9yKHZhciBpPXQuX3BhcmVudDtpJiZuJiYhbihpKTspaT1pLl9wYXJlbnQ7cmV0dXJuIGl9ZnVuY3Rpb24gZihlKXtyZXR1cm4gaS5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUoZSk/MDppLkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUoZSk/ZS5fZGF0YS5sZW5ndGg6ZS5fY2hpbGRyZW4uc2l6ZX1mdW5jdGlvbiBkKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9ITEpLHQpe3ZhciByPWQoZSwhMSk7cmV0dXJuIGkuR3VhcmQuaXNTaGFkb3dSb290KHIpP2Qoci5faG9zdCwhMCk6cn1yZXR1cm4gZS5fcGFyZW50P2QoZS5fcGFyZW50KTplfWZ1bmN0aW9uIG0oZSx0LHIsbil7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW4mJihuPSExKTtmb3IodmFyIG89cj9lOm4mJmkuR3VhcmQuaXNTaGFkb3dSb290KGUpP2UuX2hvc3Q6ZS5fcGFyZW50O251bGwhPT1vOyl7aWYobz09PXQpcmV0dXJuITA7bz1uJiZpLkd1YXJkLmlzU2hhZG93Um9vdChvKT9vLl9ob3N0Om8uX3BhcmVudH1yZXR1cm4hMX1mdW5jdGlvbiB5KGUpe2Zvcih2YXIgdD1kKGUpLHI9MCxuPXUodCk7bnVsbCE9PW47KXtpZihyKyssbj09PWUpcmV0dXJuIHI7bj1sKHQsbil9cmV0dXJuLTF9dC50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGU9dSx0LnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlPWwsdC50cmVlX2dldERlc2NlbmRhbnROb2Rlcz1jLHQudHJlZV9nZXREZXNjZW5kYW50RWxlbWVudHM9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIG87cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1yJiYocj0hMSksdHx8MCE9PWUuX2NoaWxkcmVuLnNpemU/KChvPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIG89YyhlLHQsciwoZnVuY3Rpb24oZSl7cmV0dXJuIGkuR3VhcmQuaXNFbGVtZW50Tm9kZShlKX0pKVtTeW1ib2wuaXRlcmF0b3JdKCksYT1vLm5leHQoKS52YWx1ZTtyZXR1cm57bmV4dDpmdW5jdGlvbigpe2Zvcig7YSYmbiYmIW4oYSk7KWE9by5uZXh0KCkudmFsdWU7aWYobnVsbD09PWEpcmV0dXJue2RvbmU6ITAsdmFsdWU6bnVsbH07dmFyIGU9e2RvbmU6ITEsdmFsdWU6YX07cmV0dXJuIGE9by5uZXh0KCkudmFsdWUsZX19fSxvKTpzKCl9LHQudHJlZV9nZXRTaWJsaW5nTm9kZXM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO3JldHVybiB2b2lkIDA9PT10JiYodD0hMSksZS5fcGFyZW50JiYwIT09ZS5fcGFyZW50Ll9jaGlsZHJlbi5zaXplPygobj17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3ZhciBuPWUuX3BhcmVudD9lLl9wYXJlbnQuX2ZpcnN0Q2hpbGQ6bnVsbDtyZXR1cm57bmV4dDpmdW5jdGlvbigpe2Zvcig7biYmKHImJiFyKG4pfHwhdCYmbj09PWUpOyluPW4uX25leHRTaWJsaW5nO2lmKG51bGw9PT1uKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBpPXtkb25lOiExLHZhbHVlOm59O3JldHVybiBuPW4uX25leHRTaWJsaW5nLGl9fX0sbik6cygpfSx0LnRyZWVfZ2V0Rmlyc3RBbmNlc3Rvck5vZGU9aCx0LnRyZWVfZ2V0TmV4dEFuY2VzdG9yTm9kZT1wLHQudHJlZV9nZXRBbmNlc3Rvck5vZGVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLHR8fGUuX3BhcmVudD8oKG49e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgbj1oKGUsdCxyKTtyZXR1cm57bmV4dDpmdW5jdGlvbigpe2lmKG51bGw9PT1uKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBlPXtkb25lOiExLHZhbHVlOm59O3JldHVybiBuPXAoMCxuLHQsciksZX19fSxuKTpzKCl9LHQudHJlZV9nZXRDb21tb25BbmNlc3Rvcj1mdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBlLl9wYXJlbnQ7Zm9yKHZhciByPVtdLG49W10saT1oKGUsITApO251bGwhPT1pOylyLnB1c2goaSksaT1wKDAsaSwhMCk7Zm9yKHZhciBvPWgodCwhMCk7bnVsbCE9PW87KW4ucHVzaChvKSxvPXAoMCxvLCEwKTtmb3IodmFyIGE9ci5sZW5ndGgscz1uLmxlbmd0aCx1PW51bGwsbD1NYXRoLm1pbihhLHMpO2w+MDtsLS0pe3ZhciBjPXJbLS1hXTtpZihjIT09blstLXNdKWJyZWFrO3U9Y31yZXR1cm4gdX0sdC50cmVlX2dldEZvbGxvd2luZ05vZGU9ZnVuY3Rpb24oZSx0KXtpZih0Ll9maXJzdENoaWxkKXJldHVybiB0Ll9maXJzdENoaWxkO2lmKHQuX25leHRTaWJsaW5nKXJldHVybiB0Ll9uZXh0U2libGluZztmb3IoOzspe3ZhciByPXQuX3BhcmVudDtpZihudWxsPT09cnx8cj09PWUpcmV0dXJuIG51bGw7aWYoci5fbmV4dFNpYmxpbmcpcmV0dXJuIHIuX25leHRTaWJsaW5nO3Q9cn19LHQudHJlZV9nZXRQcmVjZWRpbmdOb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ9PT1lP251bGw6dC5fcHJldmlvdXNTaWJsaW5nPyh0PXQuX3ByZXZpb3VzU2libGluZykuX2xhc3RDaGlsZD90Ll9sYXN0Q2hpbGQ6dDp0Ll9wYXJlbnR9LHQudHJlZV9pc0NvbnN0cmFpbmVkPWZ1bmN0aW9uIGUodCl7dmFyIHIsaSxhLHMsdSxsO3N3aXRjaCh0Ll9ub2RlVHlwZSl7Y2FzZSBvLk5vZGVUeXBlLkRvY3VtZW50OnZhciBjPSExLGg9ITE7dHJ5e2Zvcih2YXIgcD1uKHQuX2NoaWxkcmVuKSxmPXAubmV4dCgpOyFmLmRvbmU7Zj1wLm5leHQoKSl7c3dpdGNoKGYudmFsdWUuX25vZGVUeXBlKXtjYXNlIG8uTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uOmNhc2Ugby5Ob2RlVHlwZS5Db21tZW50OmJyZWFrO2Nhc2Ugby5Ob2RlVHlwZS5Eb2N1bWVudFR5cGU6aWYoY3x8aClyZXR1cm4hMTtjPSEwO2JyZWFrO2Nhc2Ugby5Ob2RlVHlwZS5FbGVtZW50OmlmKGgpcmV0dXJuITE7aD0hMDticmVhaztkZWZhdWx0OnJldHVybiExfX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZiYmIWYuZG9uZSYmKGk9cC5yZXR1cm4pJiZpLmNhbGwocCl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fWJyZWFrO2Nhc2Ugby5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50OmNhc2Ugby5Ob2RlVHlwZS5FbGVtZW50OnRyeXtmb3IodmFyIGQ9bih0Ll9jaGlsZHJlbiksbT1kLm5leHQoKTshbS5kb25lO209ZC5uZXh0KCkpe3N3aXRjaChtLnZhbHVlLl9ub2RlVHlwZSl7Y2FzZSBvLk5vZGVUeXBlLkVsZW1lbnQ6Y2FzZSBvLk5vZGVUeXBlLlRleHQ6Y2FzZSBvLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbjpjYXNlIG8uTm9kZVR5cGUuQ0RhdGE6Y2FzZSBvLk5vZGVUeXBlLkNvbW1lbnQ6YnJlYWs7ZGVmYXVsdDpyZXR1cm4hMX19fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e20mJiFtLmRvbmUmJihzPWQucmV0dXJuKSYmcy5jYWxsKGQpfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX1icmVhaztjYXNlIG8uTm9kZVR5cGUuRG9jdW1lbnRUeXBlOmNhc2Ugby5Ob2RlVHlwZS5UZXh0OmNhc2Ugby5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246Y2FzZSBvLk5vZGVUeXBlLkNEYXRhOmNhc2Ugby5Ob2RlVHlwZS5Db21tZW50OnJldHVybiF0Lmhhc0NoaWxkTm9kZXMoKX10cnl7Zm9yKHZhciB5PW4odC5fY2hpbGRyZW4pLHY9eS5uZXh0KCk7IXYuZG9uZTt2PXkubmV4dCgpKXtpZighZSh2LnZhbHVlKSlyZXR1cm4hMX19Y2F0Y2goZSl7dT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7diYmIXYuZG9uZSYmKGw9eS5yZXR1cm4pJiZsLmNhbGwoeSl9ZmluYWxseXtpZih1KXRocm93IHUuZXJyb3J9fXJldHVybiEwfSx0LnRyZWVfbm9kZUxlbmd0aD1mLHQudHJlZV9pc0VtcHR5PWZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZihlKX0sdC50cmVlX3Jvb3ROb2RlPWQsdC50cmVlX2lzRGVzY2VuZGFudE9mPWZ1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1uJiYobj0hMSk7Zm9yKHZhciBpPXUoZSxyLG4pO251bGwhPT1pOyl7aWYoaT09PXQpcmV0dXJuITA7aT1sKGUsaSxyLG4pfXJldHVybiExfSx0LnRyZWVfaXNBbmNlc3Rvck9mPW0sdC50cmVlX2lzSG9zdEluY2x1ZGluZ0FuY2VzdG9yT2Y9ZnVuY3Rpb24gZSh0LHIsbil7aWYodm9pZCAwPT09biYmKG49ITEpLG0odCxyLG4pKXJldHVybiEwO3ZhciBvPWQodCk7cmV0dXJuISghaS5HdWFyZC5pc0RvY3VtZW50RnJhZ21lbnROb2RlKG8pfHxudWxsPT09by5faG9zdHx8IWUoby5faG9zdCxyLG4pKX0sdC50cmVlX2lzU2libGluZ09mPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9ITEpLGUhPT10P251bGwhPT1lLl9wYXJlbnQmJmUuX3BhcmVudD09PXQuX3BhcmVudDohIXJ9LHQudHJlZV9pc1ByZWNlZGluZz1mdW5jdGlvbihlLHQpe3ZhciByPXkoZSksbj15KHQpO3JldHVybi0xIT09ciYmLTEhPT1uJiYoZChlKT09PWQodCkmJm48cil9LHQudHJlZV9pc0ZvbGxvd2luZz1mdW5jdGlvbihlLHQpe3ZhciByPXkoZSksbj15KHQpO3JldHVybi0xIT09ciYmLTEhPT1uJiYoZChlKT09PWQodCkmJm4+cil9LHQudHJlZV9pc1BhcmVudE9mPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX3BhcmVudD09PXR9LHQudHJlZV9pc0NoaWxkT2Y9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5fcGFyZW50PT09ZX0sdC50cmVlX3ByZXZpb3VzU2libGluZz1mdW5jdGlvbihlKXtyZXR1cm4gZS5fcHJldmlvdXNTaWJsaW5nfSx0LnRyZWVfbmV4dFNpYmxpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX25leHRTaWJsaW5nfSx0LnRyZWVfZmlyc3RDaGlsZD1mdW5jdGlvbihlKXtyZXR1cm4gZS5fZmlyc3RDaGlsZH0sdC50cmVlX2xhc3RDaGlsZD1mdW5jdGlvbihlKXtyZXR1cm4gZS5fbGFzdENoaWxkfSx0LnRyZWVfdHJlZVBvc2l0aW9uPXksdC50cmVlX2luZGV4PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO251bGwhPT1lLl9wcmV2aW91c1NpYmxpbmc7KXQrKyxlPWUuX3ByZXZpb3VzU2libGluZztyZXR1cm4gdH0sdC50cmVlX3JldGFyZ2V0PWZ1bmN0aW9uKGUsdCl7Zm9yKDs7KXtpZighZXx8IWkuR3VhcmQuaXNOb2RlKGUpKXJldHVybiBlO3ZhciByPWQoZSk7aWYoIWkuR3VhcmQuaXNTaGFkb3dSb290KHIpKXJldHVybiBlO2lmKHQmJmkuR3VhcmQuaXNOb2RlKHQpJiZtKHIsdCwhMCwhMCkpcmV0dXJuIGU7ZT1yLmhvc3R9fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTMpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighbihlKSl0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGUpK1wiIGlzIG5vdCBhbiBvYmplY3RcIik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyNCksaT1yKDEzMCksbz1yKDQ5KSxhPXIoNDMpLHM9cig4OCksdT1hLnNldCxsPWEuZ2V0dGVyRm9yKFwiQXJyYXkgSXRlcmF0b3JcIik7ZS5leHBvcnRzPXMoQXJyYXksXCJBcnJheVwiLChmdW5jdGlvbihlLHQpe3UodGhpcyx7dHlwZTpcIkFycmF5IEl0ZXJhdG9yXCIsdGFyZ2V0Om4oZSksaW5kZXg6MCxraW5kOnR9KX0pLChmdW5jdGlvbigpe3ZhciBlPWwodGhpcyksdD1lLnRhcmdldCxyPWUua2luZCxuPWUuaW5kZXgrKztyZXR1cm4hdHx8bj49dC5sZW5ndGg/KGUudGFyZ2V0PXZvaWQgMCx7dmFsdWU6dm9pZCAwLGRvbmU6ITB9KTpcImtleXNcIj09cj97dmFsdWU6bixkb25lOiExfTpcInZhbHVlc1wiPT1yP3t2YWx1ZTp0W25dLGRvbmU6ITF9Ont2YWx1ZTpbbix0W25dXSxkb25lOiExfX0pLFwidmFsdWVzXCIpLG8uQXJndW1lbnRzPW8uQXJyYXksaShcImtleXNcIiksaShcInZhbHVlc1wiKSxpKFwiZW50cmllc1wiKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoOTApLGk9cigyNSksbz1yKDIwMik7bnx8aShPYmplY3QucHJvdG90eXBlLFwidG9TdHJpbmdcIixvLHt1bnNhZmU6ITB9KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTYpLGk9cigxNSksbz1yKDQwKTtlLmV4cG9ydHM9bj9mdW5jdGlvbihlLHQscil7cmV0dXJuIGkuZihlLHQsbygxLHIpKX06ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlW3RdPXIsZX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEzNykuY2hhckF0LGk9cig0Myksbz1yKDg4KSxhPWkuc2V0LHM9aS5nZXR0ZXJGb3IoXCJTdHJpbmcgSXRlcmF0b3JcIik7byhTdHJpbmcsXCJTdHJpbmdcIiwoZnVuY3Rpb24oZSl7YSh0aGlzLHt0eXBlOlwiU3RyaW5nIEl0ZXJhdG9yXCIsc3RyaW5nOlN0cmluZyhlKSxpbmRleDowfSl9KSwoZnVuY3Rpb24oKXt2YXIgZSx0PXModGhpcykscj10LnN0cmluZyxpPXQuaW5kZXg7cmV0dXJuIGk+PXIubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KGU9bihyLGkpLHQuaW5kZXgrPWUubGVuZ3RoLHt2YWx1ZTplLGRvbmU6ITF9KX0pKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTEpLGk9cigyMDMpLG89cigxOSksYT1yKDIxKSxzPXIoNSksdT1zKFwiaXRlcmF0b3JcIiksbD1zKFwidG9TdHJpbmdUYWdcIiksYz1vLnZhbHVlcztmb3IodmFyIGggaW4gaSl7dmFyIHA9bltoXSxmPXAmJnAucHJvdG90eXBlO2lmKGYpe2lmKGZbdV0hPT1jKXRyeXthKGYsdSxjKX1jYXRjaChlKXtmW3VdPWN9aWYoZltsXXx8YShmLGwsaCksaVtoXSlmb3IodmFyIGQgaW4gbylpZihmW2RdIT09b1tkXSl0cnl7YShmLGQsb1tkXSl9Y2F0Y2goZSl7ZltkXT1vW2RdfX19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0MSksaT1yKDM1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oaShlKSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMSksaT1yKDIxKSxvPXIoMTQpLGE9cig4MCkscz1yKDExNyksdT1yKDQzKSxsPXUuZ2V0LGM9dS5lbmZvcmNlLGg9U3RyaW5nKFN0cmluZykuc3BsaXQoXCJTdHJpbmdcIik7KGUuZXhwb3J0cz1mdW5jdGlvbihlLHQscixzKXt2YXIgdT0hIXMmJiEhcy51bnNhZmUsbD0hIXMmJiEhcy5lbnVtZXJhYmxlLHA9ISFzJiYhIXMubm9UYXJnZXRHZXQ7XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKFwic3RyaW5nXCIhPXR5cGVvZiB0fHxvKHIsXCJuYW1lXCIpfHxpKHIsXCJuYW1lXCIsdCksYyhyKS5zb3VyY2U9aC5qb2luKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6XCJcIikpLGUhPT1uPyh1PyFwJiZlW3RdJiYobD0hMCk6ZGVsZXRlIGVbdF0sbD9lW3RdPXI6aShlLHQscikpOmw/ZVt0XT1yOmEodCxyKX0pKEZ1bmN0aW9uLnByb3RvdHlwZSxcInRvU3RyaW5nXCIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcyYmbCh0aGlzKS5zb3VyY2V8fHModGhpcyl9KSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQ3KSxpPU1hdGgubWluO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZT4wP2kobihlKSw5MDA3MTk5MjU0NzQwOTkxKTowfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMzUpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0KG4oZSkpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTYpLGk9cig4KSxvPXIoMTQpLGE9T2JqZWN0LmRlZmluZVByb3BlcnR5LHM9e30sdT1mdW5jdGlvbihlKXt0aHJvdyBlfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZihvKHMsZSkpcmV0dXJuIHNbZV07dHx8KHQ9e30pO3ZhciByPVtdW2VdLGw9ISFvKHQsXCJBQ0NFU1NPUlNcIikmJnQuQUNDRVNTT1JTLGM9byh0LDApP3RbMF06dSxoPW8odCwxKT90WzFdOnZvaWQgMDtyZXR1cm4gc1tlXT0hIXImJiFpKChmdW5jdGlvbigpe2lmKGwmJiFuKXJldHVybiEwO3ZhciBlPXtsZW5ndGg6LTF9O2w/YShlLDEse2VudW1lcmFibGU6ITAsZ2V0OnV9KTplWzFdPTEsci5jYWxsKGUsYyxoKX0pKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDE0OCksaT1yKDE0OSksbz1yKDE1MSksYT1yKDk4KSxzPXIoMTUzKSx1PXIoMTU0KSxsPXIoMTU1KSxjPXIoOTkpLGg9cigxMDApLHA9cigxNTYpLGY9cigxNTcpLGQ9cigxMDEpLG09cigxNTgpLHk9cigxNTkpLHY9cigxNjApLF89cigxNjEpLGc9cigxNjIpLGI9cigxNjMpLHg9cigxNjQpLHc9cigxNjUpLEU9cigxNjYpLEQ9cigxNjcpLFM9cigxNjgpLEM9cigxNjkpLEE9cigxNzApO3QuY3JlYXRlX2RvbUltcGxlbWVudGF0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiBuLkRPTUltcGxlbWVudGF0aW9uSW1wbC5fY3JlYXRlKGUpfSx0LmNyZWF0ZV93aW5kb3c9ZnVuY3Rpb24oKXtyZXR1cm4gaS5XaW5kb3dJbXBsLl9jcmVhdGUoKX0sdC5jcmVhdGVfeG1sRG9jdW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG8uWE1MRG9jdW1lbnRJbXBsfSx0LmNyZWF0ZV9kb2N1bWVudD1mdW5jdGlvbigpe3JldHVybiBuZXcgYS5Eb2N1bWVudEltcGx9LHQuY3JlYXRlX2Fib3J0Q29udHJvbGxlcj1mdW5jdGlvbigpe3JldHVybiBuZXcgcy5BYm9ydENvbnRyb2xsZXJJbXBsfSx0LmNyZWF0ZV9hYm9ydFNpZ25hbD1mdW5jdGlvbigpe3JldHVybiB1LkFib3J0U2lnbmFsSW1wbC5fY3JlYXRlKCl9LHQuY3JlYXRlX2RvY3VtZW50VHlwZT1mdW5jdGlvbihlLHQscixuKXtyZXR1cm4gbC5Eb2N1bWVudFR5cGVJbXBsLl9jcmVhdGUoZSx0LHIsbil9LHQuY3JlYXRlX2VsZW1lbnQ9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIGMuRWxlbWVudEltcGwuX2NyZWF0ZShlLHQscixuKX0sdC5jcmVhdGVfaHRtbEVsZW1lbnQ9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIGMuRWxlbWVudEltcGwuX2NyZWF0ZShlLHQscixuKX0sdC5jcmVhdGVfaHRtbFVua25vd25FbGVtZW50PWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiBjLkVsZW1lbnRJbXBsLl9jcmVhdGUoZSx0LHIsbil9LHQuY3JlYXRlX2RvY3VtZW50RnJhZ21lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGguRG9jdW1lbnRGcmFnbWVudEltcGwuX2NyZWF0ZShlKX0sdC5jcmVhdGVfc2hhZG93Um9vdD1mdW5jdGlvbihlLHQpe3JldHVybiBwLlNoYWRvd1Jvb3RJbXBsLl9jcmVhdGUoZSx0KX0sdC5jcmVhdGVfYXR0cj1mdW5jdGlvbihlLHQpe3JldHVybiBmLkF0dHJJbXBsLl9jcmVhdGUoZSx0KX0sdC5jcmVhdGVfdGV4dD1mdW5jdGlvbihlLHQpe3JldHVybiBkLlRleHRJbXBsLl9jcmVhdGUoZSx0KX0sdC5jcmVhdGVfY2RhdGFTZWN0aW9uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG0uQ0RBVEFTZWN0aW9uSW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX2NvbW1lbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4geS5Db21tZW50SW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX3Byb2Nlc3NpbmdJbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQscil7cmV0dXJuIHYuUHJvY2Vzc2luZ0luc3RydWN0aW9uSW1wbC5fY3JlYXRlKGUsdCxyKX0sdC5jcmVhdGVfaHRtbENvbGxlY3Rpb249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ZnVuY3Rpb24oKXtyZXR1cm4hMH0pLF8uSFRNTENvbGxlY3Rpb25JbXBsLl9jcmVhdGUoZSx0KX0sdC5jcmVhdGVfbm9kZUxpc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGcuTm9kZUxpc3RJbXBsLl9jcmVhdGUoZSl9LHQuY3JlYXRlX25vZGVMaXN0U3RhdGljPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGIuTm9kZUxpc3RTdGF0aWNJbXBsLl9jcmVhdGUoZSx0KX0sdC5jcmVhdGVfbmFtZWROb2RlTWFwPWZ1bmN0aW9uKGUpe3JldHVybiB4Lk5hbWVkTm9kZU1hcEltcGwuX2NyZWF0ZShlKX0sdC5jcmVhdGVfcmFuZ2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdy5SYW5nZUltcGwuX2NyZWF0ZShlLHQpfSx0LmNyZWF0ZV9ub2RlSXRlcmF0b3I9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBFLk5vZGVJdGVyYXRvckltcGwuX2NyZWF0ZShlLHQscil9LHQuY3JlYXRlX3RyZWVXYWxrZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gRC5UcmVlV2Fsa2VySW1wbC5fY3JlYXRlKGUsdCl9LHQuY3JlYXRlX25vZGVGaWx0ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gUy5Ob2RlRmlsdGVySW1wbC5fY3JlYXRlKCl9LHQuY3JlYXRlX211dGF0aW9uUmVjb3JkPWZ1bmN0aW9uKGUsdCxyLG4saSxvLGEscyx1KXtyZXR1cm4gQy5NdXRhdGlvblJlY29yZEltcGwuX2NyZWF0ZShlLHQscixuLGksbyxhLHMsdSl9LHQuY3JlYXRlX2RvbVRva2VuTGlzdD1mdW5jdGlvbihlLHQpe3JldHVybiBBLkRPTVRva2VuTGlzdEltcGwuX2NyZWF0ZShlLHQpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoNiksbz1yKDE3KSxhPXIoMykscz1yKDcyKSx1PW5ldyBNYXA7ZnVuY3Rpb24gbChlLHQpe2lmKHQhPT1lLl9yb290JiZvLnRyZWVfaXNBbmNlc3Rvck9mKGUuX3JlZmVyZW5jZSx0LCEwKSl7aWYoZS5fcG9pbnRlckJlZm9yZVJlZmVyZW5jZSlmb3IoOzspe3ZhciByPW8udHJlZV9nZXRGb2xsb3dpbmdOb2RlKGUuX3Jvb3QsdCk7aWYobnVsbCE9PXImJm8udHJlZV9pc0Rlc2NlbmRhbnRPZihlLl9yb290LHIsITApJiYhby50cmVlX2lzRGVzY2VuZGFudE9mKHQsciwhMCkpcmV0dXJuIHZvaWQoZS5fcmVmZXJlbmNlPXIpO2lmKG51bGw9PT1yKXJldHVybiB2b2lkKGUuX3BvaW50ZXJCZWZvcmVSZWZlcmVuY2U9ITEpfWlmKG51bGw9PT10Ll9wcmV2aW91c1NpYmxpbmcpbnVsbCE9PXQuX3BhcmVudCYmKGUuX3JlZmVyZW5jZT10Ll9wYXJlbnQpO2Vsc2V7Zm9yKHZhciBuPXQuX3ByZXZpb3VzU2libGluZyxpPW8udHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHQuX3ByZXZpb3VzU2libGluZywhMCwhMSk7bnVsbCE9PWk7KW51bGwhPT1pJiYobj1pKSxpPW8udHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodC5fcHJldmlvdXNTaWJsaW5nLGksITAsITEpO2UuX3JlZmVyZW5jZT1ufX19ZnVuY3Rpb24gYyhlLHQscixuLGkpe2lmKGEuR3VhcmQuaXNTbG90KGUpJiZcIm5hbWVcIj09PXQmJm51bGw9PT1pKXtpZihuPT09cilyZXR1cm47aWYobnVsbD09PW4mJlwiXCI9PT1yKXJldHVybjtpZihcIlwiPT09biYmbnVsbD09PXIpcmV0dXJuO2UuX25hbWU9bnVsbD09PW58fFwiXCI9PT1uP1wiXCI6bixzLnNoYWRvd1RyZWVfYXNzaWduU2xvdGFibGVzRm9yQVRyZWUoby50cmVlX3Jvb3ROb2RlKGUpKX19ZnVuY3Rpb24gaChlLHQscixuLGkpe2lmKGEuR3VhcmQuaXNTbG90YWJsZShlKSYmXCJzbG90XCI9PT10JiZudWxsPT09aSl7aWYobj09PXIpcmV0dXJuO2lmKG51bGw9PT1uJiZcIlwiPT09cilyZXR1cm47aWYoXCJcIj09PW4mJm51bGw9PT1yKXJldHVybjtlLl9uYW1lPW51bGw9PT1ufHxcIlwiPT09bj9cIlwiOm4scy5zaGFkb3dUcmVlX2lzQXNzaWduZWQoZSkmJnMuc2hhZG93VHJlZV9hc3NpZ25TbG90YWJsZXMoZS5fYXNzaWduZWRTbG90KSxzLnNoYWRvd1RyZWVfYXNzaWduQVNsb3QoZSl9fWZ1bmN0aW9uIHAoZSx0LHIsbil7XCJpZFwiPT09dCYmbnVsbD09PW4mJihlLl91bmlxdWVJZGVudGlmaWVyPXJ8fHZvaWQgMCl9dC5kb21fcnVuUmVtb3ZpbmdTdGVwcz1mdW5jdGlvbihlLHQpe30sdC5kb21fcnVuQ2xvbmluZ1N0ZXBzPWZ1bmN0aW9uKGUsdCxyLG4pe30sdC5kb21fcnVuQWRvcHRpbmdTdGVwcz1mdW5jdGlvbihlLHQpe30sdC5kb21fcnVuQXR0cmlidXRlQ2hhbmdlU3RlcHM9ZnVuY3Rpb24oZSx0LHIsbyxhKXt2YXIgcyx1O2kuZG9tLmZlYXR1cmVzLnNsb3RzJiYoaC5jYWxsKGUsZSx0LHIsbyxhKSxjLmNhbGwoZSxlLHQscixvLGEpKSxwLmNhbGwoZSxlLHQsbyxhKTt0cnl7Zm9yKHZhciBsPW4oZS5fYXR0cmlidXRlQ2hhbmdlU3RlcHMpLGY9bC5uZXh0KCk7IWYuZG9uZTtmPWwubmV4dCgpKXtmLnZhbHVlLmNhbGwoZSxlLHQscixvLGEpfX1jYXRjaChlKXtzPXtlcnJvcjplfX1maW5hbGx5e3RyeXtmJiYhZi5kb25lJiYodT1sLnJldHVybikmJnUuY2FsbChsKX1maW5hbGx5e2lmKHMpdGhyb3cgcy5lcnJvcn19fSx0LmRvbV9ydW5JbnNlcnRpb25TdGVwcz1mdW5jdGlvbihlKXt9LHQuZG9tX3J1bk5vZGVJdGVyYXRvclByZVJlbW92aW5nU3RlcHM9ZnVuY3Rpb24oZSx0KXtsLmNhbGwoZSxlLHQpfSx0LmRvbV9oYXNTdXBwb3J0ZWRUb2tlbnM9ZnVuY3Rpb24oZSl7cmV0dXJuIHUuaGFzKGUpfSx0LmRvbV9nZXRTdXBwb3J0ZWRUb2tlbnM9ZnVuY3Rpb24oZSl7cmV0dXJuIHUuZ2V0KGUpfHxuZXcgU2V0fSx0LmRvbV9ydW5FdmVudENvbnN0cnVjdGluZ1N0ZXBzPWZ1bmN0aW9uKGUpe30sdC5kb21fcnVuQ2hpbGRUZXh0Q29udGVudENoYW5nZVN0ZXBzPWZ1bmN0aW9uKGUpe319LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigxMSksbz1yKDQ2KSxhPXIoNDQpLHM9cigxNiksdT1yKDg2KSxsPXIoMTI0KSxjPXIoOCksaD1yKDE0KSxwPXIoNTkpLGY9cigxMyksZD1yKDE4KSxtPXIoMjcpLHk9cigyNCksdj1yKDU2KSxfPXIoNDApLGc9cig2MCksYj1yKDYxKSx4PXIoODIpLHc9cigxOTApLEU9cig4NSksRD1yKDU1KSxTPXIoMTUpLEM9cig3OSksQT1yKDIxKSxOPXIoMjUpLFQ9cig4MSksTz1yKDU3KSxGPXIoNDUpLGs9cig1OCksUD1yKDUpLEk9cigxMjUpLEw9cigxMjYpLE09cig2MiksQj1yKDQzKSxqPXIoMzYpLmZvckVhY2gsUj1PKFwiaGlkZGVuXCIpLHo9UChcInRvUHJpbWl0aXZlXCIpLFU9Qi5zZXQsRz1CLmdldHRlckZvcihcIlN5bWJvbFwiKSxYPU9iamVjdC5wcm90b3R5cGUscT1pLlN5bWJvbCxXPW8oXCJKU09OXCIsXCJzdHJpbmdpZnlcIiksSD1ELmYsSj1TLmYsWT13LmYsVj1DLmYsSz1UKFwic3ltYm9sc1wiKSwkPVQoXCJvcC1zeW1ib2xzXCIpLFE9VChcInN0cmluZy10by1zeW1ib2wtcmVnaXN0cnlcIiksWj1UKFwic3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeVwiKSxlZT1UKFwid2tzXCIpLHRlPWkuUU9iamVjdCxyZT0hdGV8fCF0ZS5wcm90b3R5cGV8fCF0ZS5wcm90b3R5cGUuZmluZENoaWxkLG5lPXMmJmMoKGZ1bmN0aW9uKCl7cmV0dXJuIDchPWcoSih7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEoodGhpcyxcImFcIix7dmFsdWU6N30pLmF9fSkpLmF9KSk/ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPUgoWCx0KTtuJiZkZWxldGUgWFt0XSxKKGUsdCxyKSxuJiZlIT09WCYmSihYLHQsbil9OkosaWU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1LW2VdPWcocS5wcm90b3R5cGUpO3JldHVybiBVKHIse3R5cGU6XCJTeW1ib2xcIix0YWc6ZSxkZXNjcmlwdGlvbjp0fSksc3x8KHIuZGVzY3JpcHRpb249dCkscn0sb2U9bD9mdW5jdGlvbihlKXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChlKWluc3RhbmNlb2YgcX0sYWU9ZnVuY3Rpb24oZSx0LHIpe2U9PT1YJiZhZSgkLHQsciksZChlKTt2YXIgbj12KHQsITApO3JldHVybiBkKHIpLGgoSyxuKT8oci5lbnVtZXJhYmxlPyhoKGUsUikmJmVbUl1bbl0mJihlW1JdW25dPSExKSxyPWcocix7ZW51bWVyYWJsZTpfKDAsITEpfSkpOihoKGUsUil8fEooZSxSLF8oMSx7fSkpLGVbUl1bbl09ITApLG5lKGUsbixyKSk6SihlLG4scil9LHNlPWZ1bmN0aW9uKGUsdCl7ZChlKTt2YXIgcj15KHQpLG49YihyKS5jb25jYXQoaGUocikpO3JldHVybiBqKG4sKGZ1bmN0aW9uKHQpe3MmJiF1ZS5jYWxsKHIsdCl8fGFlKGUsdCxyW3RdKX0pKSxlfSx1ZT1mdW5jdGlvbihlKXt2YXIgdD12KGUsITApLHI9Vi5jYWxsKHRoaXMsdCk7cmV0dXJuISh0aGlzPT09WCYmaChLLHQpJiYhaCgkLHQpKSYmKCEocnx8IWgodGhpcyx0KXx8IWgoSyx0KXx8aCh0aGlzLFIpJiZ0aGlzW1JdW3RdKXx8cil9LGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9eShlKSxuPXYodCwhMCk7aWYociE9PVh8fCFoKEssbil8fGgoJCxuKSl7dmFyIGk9SChyLG4pO3JldHVybiFpfHwhaChLLG4pfHxoKHIsUikmJnJbUl1bbl18fChpLmVudW1lcmFibGU9ITApLGl9fSxjZT1mdW5jdGlvbihlKXt2YXIgdD1ZKHkoZSkpLHI9W107cmV0dXJuIGoodCwoZnVuY3Rpb24oZSl7aChLLGUpfHxoKEYsZSl8fHIucHVzaChlKX0pKSxyfSxoZT1mdW5jdGlvbihlKXt2YXIgdD1lPT09WCxyPVkodD8kOnkoZSkpLG49W107cmV0dXJuIGoociwoZnVuY3Rpb24oZSl7IWgoSyxlKXx8dCYmIWgoWCxlKXx8bi5wdXNoKEtbZV0pfSkpLG59Oyh1fHwoTigocT1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiBxKXRocm93IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvclwiKTt2YXIgZT1hcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/U3RyaW5nKGFyZ3VtZW50c1swXSk6dm9pZCAwLHQ9ayhlKSxyPWZ1bmN0aW9uKGUpe3RoaXM9PT1YJiZyLmNhbGwoJCxlKSxoKHRoaXMsUikmJmgodGhpc1tSXSx0KSYmKHRoaXNbUl1bdF09ITEpLG5lKHRoaXMsdCxfKDEsZSkpfTtyZXR1cm4gcyYmcmUmJm5lKFgsdCx7Y29uZmlndXJhYmxlOiEwLHNldDpyfSksaWUodCxlKX0pLnByb3RvdHlwZSxcInRvU3RyaW5nXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIEcodGhpcykudGFnfSkpLE4ocSxcIndpdGhvdXRTZXR0ZXJcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGllKGsoZSksZSl9KSksQy5mPXVlLFMuZj1hZSxELmY9bGUseC5mPXcuZj1jZSxFLmY9aGUsSS5mPWZ1bmN0aW9uKGUpe3JldHVybiBpZShQKGUpLGUpfSxzJiYoSihxLnByb3RvdHlwZSxcImRlc2NyaXB0aW9uXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gRyh0aGlzKS5kZXNjcmlwdGlvbn19KSxhfHxOKFgsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLHVlLHt1bnNhZmU6ITB9KSkpLG4oe2dsb2JhbDohMCx3cmFwOiEwLGZvcmNlZDohdSxzaGFtOiF1fSx7U3ltYm9sOnF9KSxqKGIoZWUpLChmdW5jdGlvbihlKXtMKGUpfSkpLG4oe3RhcmdldDpcIlN5bWJvbFwiLHN0YXQ6ITAsZm9yY2VkOiF1fSx7Zm9yOmZ1bmN0aW9uKGUpe3ZhciB0PVN0cmluZyhlKTtpZihoKFEsdCkpcmV0dXJuIFFbdF07dmFyIHI9cSh0KTtyZXR1cm4gUVt0XT1yLFpbcl09dCxyfSxrZXlGb3I6ZnVuY3Rpb24oZSl7aWYoIW9lKGUpKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhIHN5bWJvbFwiKTtpZihoKFosZSkpcmV0dXJuIFpbZV19LHVzZVNldHRlcjpmdW5jdGlvbigpe3JlPSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtyZT0hMX19KSxuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDohdSxzaGFtOiFzfSx7Y3JlYXRlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/ZyhlKTpzZShnKGUpLHQpfSxkZWZpbmVQcm9wZXJ0eTphZSxkZWZpbmVQcm9wZXJ0aWVzOnNlLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpsZX0pLG4oe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOiF1fSx7Z2V0T3duUHJvcGVydHlOYW1lczpjZSxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6aGV9KSxuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDpjKChmdW5jdGlvbigpe0UuZigxKX0pKX0se2dldE93blByb3BlcnR5U3ltYm9sczpmdW5jdGlvbihlKXtyZXR1cm4gRS5mKG0oZSkpfX0pLFcpJiZuKHt0YXJnZXQ6XCJKU09OXCIsc3RhdDohMCxmb3JjZWQ6IXV8fGMoKGZ1bmN0aW9uKCl7dmFyIGU9cSgpO3JldHVyblwiW251bGxdXCIhPVcoW2VdKXx8XCJ7fVwiIT1XKHthOmV9KXx8XCJ7fVwiIT1XKE9iamVjdChlKSl9KSl9LHtzdHJpbmdpZnk6ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbixpPVtlXSxvPTE7YXJndW1lbnRzLmxlbmd0aD5vOylpLnB1c2goYXJndW1lbnRzW28rK10pO2lmKG49dCwoZih0KXx8dm9pZCAwIT09ZSkmJiFvZShlKSlyZXR1cm4gcCh0KXx8KHQ9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYodD1uLmNhbGwodGhpcyxlLHQpKSwhb2UodCkpcmV0dXJuIHR9KSxpWzFdPXQsVy5hcHBseShudWxsLGkpfX0pO3EucHJvdG90eXBlW3pdfHxBKHEucHJvdG90eXBlLHoscS5wcm90b3R5cGUudmFsdWVPZiksTShxLFwiU3ltYm9sXCIpLEZbUl09ITB9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigxNiksbz1yKDExKSxhPXIoMTQpLHM9cigxMyksdT1yKDE1KS5mLGw9cigxMTkpLGM9by5TeW1ib2w7aWYoaSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYyYmKCEoXCJkZXNjcmlwdGlvblwiaW4gYy5wcm90b3R5cGUpfHx2b2lkIDAhPT1jKCkuZGVzY3JpcHRpb24pKXt2YXIgaD17fSxwPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aDwxfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/dm9pZCAwOlN0cmluZyhhcmd1bWVudHNbMF0pLHQ9dGhpcyBpbnN0YW5jZW9mIHA/bmV3IGMoZSk6dm9pZCAwPT09ZT9jKCk6YyhlKTtyZXR1cm5cIlwiPT09ZSYmKGhbdF09ITApLHR9O2wocCxjKTt2YXIgZj1wLnByb3RvdHlwZT1jLnByb3RvdHlwZTtmLmNvbnN0cnVjdG9yPXA7dmFyIGQ9Zi50b1N0cmluZyxtPVwiU3ltYm9sKHRlc3QpXCI9PVN0cmluZyhjKFwidGVzdFwiKSkseT0vXlN5bWJvbFxcKCguKilcXClbXildKyQvO3UoZixcImRlc2NyaXB0aW9uXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXt2YXIgZT1zKHRoaXMpP3RoaXMudmFsdWVPZigpOnRoaXMsdD1kLmNhbGwoZSk7aWYoYShoLGUpKXJldHVyblwiXCI7dmFyIHI9bT90LnNsaWNlKDcsLTEpOnQucmVwbGFjZSh5LFwiJDFcIik7cmV0dXJuXCJcIj09PXI/dm9pZCAwOnJ9fSksbih7Z2xvYmFsOiEwLGZvcmNlZDohMH0se1N5bWJvbDpwfSl9fSxmdW5jdGlvbihlLHQscil7cigxMjYpKFwiaXRlcmF0b3JcIil9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KSxvPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoNikscz1yKDIpLHU9cig3MCksbD1yKDMpLGM9cig5KSxoPXIoMCkscD1yKDE1MiksZj1yKDEyKSxkPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgdD1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHQuX3BhcmVudD1udWxsLHQuX2ZpcnN0Q2hpbGQ9bnVsbCx0Ll9sYXN0Q2hpbGQ9bnVsbCx0Ll9wcmV2aW91c1NpYmxpbmc9bnVsbCx0Ll9uZXh0U2libGluZz1udWxsLHR9cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJfY2hpbGROb2Rlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2NoaWxkTm9kZXN8fCh0aGlzLl9fY2hpbGROb2Rlcz1oLmNyZWF0ZV9ub2RlTGlzdCh0aGlzKSl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiX25vZGVEb2N1bWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbm9kZURvY3VtZW50T3ZlcnJpZGV8fGEuZG9tLndpbmRvdy5fYXNzb2NpYXRlZERvY3VtZW50fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fbm9kZURvY3VtZW50T3ZlcnJpZGU9ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJfcmVnaXN0ZXJlZE9ic2VydmVyTGlzdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3R8fCh0aGlzLl9fcmVnaXN0ZXJlZE9ic2VydmVyTGlzdD1bXSl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibm9kZVR5cGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX25vZGVUeXBlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5vZGVOYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBsLkd1YXJkLmlzRWxlbWVudE5vZGUodGhpcyk/dGhpcy5faHRtbFVwcGVyY2FzZWRRdWFsaWZpZWROYW1lOmwuR3VhcmQuaXNBdHRyTm9kZSh0aGlzKT90aGlzLl9xdWFsaWZpZWROYW1lOmwuR3VhcmQuaXNFeGNsdXNpdmVUZXh0Tm9kZSh0aGlzKT9cIiN0ZXh0XCI6bC5HdWFyZC5pc0NEQVRBU2VjdGlvbk5vZGUodGhpcyk/XCIjY2RhdGEtc2VjdGlvblwiOmwuR3VhcmQuaXNQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob2RlKHRoaXMpP3RoaXMuX3RhcmdldDpsLkd1YXJkLmlzQ29tbWVudE5vZGUodGhpcyk/XCIjY29tbWVudFwiOmwuR3VhcmQuaXNEb2N1bWVudE5vZGUodGhpcyk/XCIjZG9jdW1lbnRcIjpsLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0aGlzKT90aGlzLl9uYW1lOmwuR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZSh0aGlzKT9cIiNkb2N1bWVudC1mcmFnbWVudFwiOlwiXCJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiYmFzZVVSSVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcC51cmxTZXJpYWxpemVyKHRoaXMuX25vZGVEb2N1bWVudC5fVVJMKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJpc0Nvbm5lY3RlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5HdWFyZC5pc0VsZW1lbnROb2RlKHRoaXMpJiZoLnNoYWRvd1RyZWVfaXNDb25uZWN0ZWQodGhpcyl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwib3duZXJEb2N1bWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbm9kZVR5cGU9PT1zLk5vZGVUeXBlLkRvY3VtZW50P251bGw6dGhpcy5fbm9kZURvY3VtZW50fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmdldFJvb3ROb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBoLnRyZWVfcm9vdE5vZGUodGhpcywhIWUmJmUuY29tcG9zZWQpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwYXJlbnROb2RlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ub2RlVHlwZT09PXMuTm9kZVR5cGUuQXR0cmlidXRlP251bGw6dGhpcy5fcGFyZW50fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInBhcmVudEVsZW1lbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BhcmVudCYmbC5HdWFyZC5pc0VsZW1lbnROb2RlKHRoaXMuX3BhcmVudCk/dGhpcy5fcGFyZW50Om51bGx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuaGFzQ2hpbGROb2Rlcz1mdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5fZmlyc3RDaGlsZH0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2hpbGROb2Rlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hpbGROb2Rlc30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJmaXJzdENoaWxkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9maXJzdENoaWxkfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImxhc3RDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGFzdENoaWxkfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInByZXZpb3VzU2libGluZ1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJldmlvdXNTaWJsaW5nfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5leHRTaWJsaW5nXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9uZXh0U2libGluZ30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJub2RlVmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGwuR3VhcmQuaXNBdHRyTm9kZSh0aGlzKT90aGlzLl92YWx1ZTpsLkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcyk/dGhpcy5fZGF0YTpudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7bnVsbD09PWUmJihlPVwiXCIpLGwuR3VhcmQuaXNBdHRyTm9kZSh0aGlzKT9oLmF0dHJfc2V0QW5FeGlzdGluZ0F0dHJpYnV0ZVZhbHVlKHRoaXMsZSk6bC5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKHRoaXMpJiZoLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEodGhpcywwLHRoaXMuX2RhdGEubGVuZ3RoLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInRleHRDb250ZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBsLkd1YXJkLmlzRG9jdW1lbnRGcmFnbWVudE5vZGUodGhpcyl8fGwuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzKT9oLnRleHRfZGVzY2VuZGFudFRleHRDb250ZW50KHRoaXMpOmwuR3VhcmQuaXNBdHRyTm9kZSh0aGlzKT90aGlzLl92YWx1ZTpsLkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcyk/dGhpcy5fZGF0YTpudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7bnVsbD09PWUmJihlPVwiXCIpLGwuR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZSh0aGlzKXx8bC5HdWFyZC5pc0VsZW1lbnROb2RlKHRoaXMpP2gubm9kZV9zdHJpbmdSZXBsYWNlQWxsKGUsdGhpcyk6bC5HdWFyZC5pc0F0dHJOb2RlKHRoaXMpP2guYXR0cl9zZXRBbkV4aXN0aW5nQXR0cmlidXRlVmFsdWUodGhpcyxlKTpsLkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcykmJmguY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YSh0aGlzLDAsaC50cmVlX25vZGVMZW5ndGgodGhpcyksZSl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQscixuLGk9W10scz1oLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZSh0aGlzLCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gbC5HdWFyZC5pc0V4Y2x1c2l2ZVRleHROb2RlKGUpfSkpO251bGwhPT1zOylpLnB1c2gocykscz1oLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKHRoaXMscywhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIGwuR3VhcmQuaXNFeGNsdXNpdmVUZXh0Tm9kZShlKX0pKTtmb3IodmFyIHU9MDt1PGkubGVuZ3RoO3UrKyl7dmFyIGM9aVt1XTtpZihudWxsIT09Yy5fcGFyZW50KXt2YXIgcD1oLnRyZWVfbm9kZUxlbmd0aChjKTtpZigwIT09cCl7dmFyIGY9W10sZD1cIlwiO3RyeXtmb3IodmFyIG09KGU9dm9pZCAwLG8oaC50ZXh0X2NvbnRpZ3VvdXNFeGNsdXNpdmVUZXh0Tm9kZXMoYykpKSx5PW0ubmV4dCgpOyF5LmRvbmU7eT1tLm5leHQoKSl7dmFyIHY9eS52YWx1ZTtmLnB1c2godiksZCs9di5fZGF0YX19Y2F0Y2godCl7ZT17ZXJyb3I6dH19ZmluYWxseXt0cnl7eSYmIXkuZG9uZSYmKHQ9bS5yZXR1cm4pJiZ0LmNhbGwobSl9ZmluYWxseXtpZihlKXRocm93IGUuZXJyb3J9fWlmKGguY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YShjLHAsMCxkKSwwIT09YS5kb20ucmFuZ2VMaXN0LnNpemUpZm9yKHZhciBfPWMuX25leHRTaWJsaW5nO251bGwhPT1fJiZsLkd1YXJkLmlzRXhjbHVzaXZlVGV4dE5vZGUoXyk7KXt2YXIgZz1fLGI9aC50cmVlX2luZGV4KGcpO3RyeXtmb3IodmFyIHg9KHI9dm9pZCAwLG8oYS5kb20ucmFuZ2VMaXN0KSksdz14Lm5leHQoKTshdy5kb25lO3c9eC5uZXh0KCkpe3ZhciBFPXcudmFsdWU7RS5fc3RhcnRbMF09PT1nJiYoRS5fc3RhcnRbMF09YyxFLl9zdGFydFsxXSs9cCksRS5fZW5kWzBdPT09ZyYmKEUuX2VuZFswXT1jLEUuX2VuZFsxXSs9cCksRS5fc3RhcnRbMF09PT1nLl9wYXJlbnQmJkUuX3N0YXJ0WzFdPT09YiYmKEUuX3N0YXJ0WzBdPWMsRS5fc3RhcnRbMV09cCksRS5fZW5kWzBdPT09Zy5fcGFyZW50JiZFLl9lbmRbMV09PT1iJiYoRS5fZW5kWzBdPWMsRS5fZW5kWzFdPXApfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXt3JiYhdy5kb25lJiYobj14LnJldHVybikmJm4uY2FsbCh4KX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cCs9aC50cmVlX25vZGVMZW5ndGgoXyksXz1fLl9uZXh0U2libGluZ31mb3IodmFyIEQ9MDtEPGYubGVuZ3RoO0QrKyl7bnVsbCE9PSh2PWZbRF0pLl9wYXJlbnQmJmgubXV0YXRpb25fcmVtb3ZlKHYsdi5fcGFyZW50KX19ZWxzZSBoLm11dGF0aW9uX3JlbW92ZShjLGMuX3BhcmVudCl9fX0sdC5wcm90b3R5cGUuY2xvbmVOb2RlPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUmJihlPSExKSxsLkd1YXJkLmlzU2hhZG93Um9vdCh0aGlzKSl0aHJvdyBuZXcgYy5Ob3RTdXBwb3J0ZWRFcnJvcjtyZXR1cm4gaC5ub2RlX2Nsb25lKHRoaXMsbnVsbCxlKX0sdC5wcm90b3R5cGUuaXNFcXVhbE5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPW51bGwpLG51bGwhPT1lJiZoLm5vZGVfZXF1YWxzKHRoaXMsZSl9LHQucHJvdG90eXBlLmlzU2FtZU5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPW51bGwpLHRoaXM9PT1lfSx0LnByb3RvdHlwZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj1mdW5jdGlvbihlKXtpZihlPT09dGhpcylyZXR1cm4gMDt2YXIgdD1lLHI9dGhpcyxuPW51bGwsaT1udWxsO2lmKGwuR3VhcmQuaXNBdHRyTm9kZSh0KSYmKHQ9KG49dCkuX2VsZW1lbnQpLGwuR3VhcmQuaXNBdHRyTm9kZShyKSYmKHI9KGk9cikuX2VsZW1lbnQsbiYmdCYmdD09PXIpKWZvcih2YXIgbz0wO288ci5fYXR0cmlidXRlTGlzdC5sZW5ndGg7bysrKXt2YXIgdT1yLl9hdHRyaWJ1dGVMaXN0W29dO2lmKGgubm9kZV9lcXVhbHModSxuKSlyZXR1cm4gcy5Qb3NpdGlvbi5JbXBsZW1lbnRhdGlvblNwZWNpZmljfHMuUG9zaXRpb24uUHJlY2VkaW5nO2lmKGgubm9kZV9lcXVhbHModSxpKSlyZXR1cm4gcy5Qb3NpdGlvbi5JbXBsZW1lbnRhdGlvblNwZWNpZmljfHMuUG9zaXRpb24uRm9sbG93aW5nfXJldHVybiBudWxsPT09dHx8bnVsbD09PXJ8fGgudHJlZV9yb290Tm9kZSh0KSE9PWgudHJlZV9yb290Tm9kZShyKT9zLlBvc2l0aW9uLkRpc2Nvbm5lY3RlZHxzLlBvc2l0aW9uLkltcGxlbWVudGF0aW9uU3BlY2lmaWN8KGEuZG9tLmNvbXBhcmVDYWNoZS5jaGVjayh0aGlzLGUpP3MuUG9zaXRpb24uUHJlY2VkaW5nOnMuUG9zaXRpb24uRm9sbG93aW5nKTohbiYmaC50cmVlX2lzQW5jZXN0b3JPZihyLHQpfHxpJiZ0PT09cj9zLlBvc2l0aW9uLkNvbnRhaW5zfHMuUG9zaXRpb24uUHJlY2VkaW5nOiFpJiZoLnRyZWVfaXNEZXNjZW5kYW50T2Yocix0KXx8biYmdD09PXI/cy5Qb3NpdGlvbi5Db250YWluZWRCeXxzLlBvc2l0aW9uLkZvbGxvd2luZzpoLnRyZWVfaXNQcmVjZWRpbmcocix0KT9zLlBvc2l0aW9uLlByZWNlZGluZzpzLlBvc2l0aW9uLkZvbGxvd2luZ30sdC5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lJiZoLnRyZWVfaXNEZXNjZW5kYW50T2YodGhpcyxlLCEwKX0sdC5wcm90b3R5cGUubG9va3VwUHJlZml4PWZ1bmN0aW9uKGUpe3JldHVybiBlP2wuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzKT9oLm5vZGVfbG9jYXRlQU5hbWVzcGFjZVByZWZpeCh0aGlzLGUpOmwuR3VhcmQuaXNEb2N1bWVudE5vZGUodGhpcyk/bnVsbD09PXRoaXMuZG9jdW1lbnRFbGVtZW50P251bGw6aC5ub2RlX2xvY2F0ZUFOYW1lc3BhY2VQcmVmaXgodGhpcy5kb2N1bWVudEVsZW1lbnQsZSk6bC5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUodGhpcyl8fGwuR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZSh0aGlzKT9udWxsOmwuR3VhcmQuaXNBdHRyTm9kZSh0aGlzKT9udWxsPT09dGhpcy5fZWxlbWVudD9udWxsOmgubm9kZV9sb2NhdGVBTmFtZXNwYWNlUHJlZml4KHRoaXMuX2VsZW1lbnQsZSk6bnVsbCE9PXRoaXMuX3BhcmVudCYmbC5HdWFyZC5pc0VsZW1lbnROb2RlKHRoaXMuX3BhcmVudCk/aC5ub2RlX2xvY2F0ZUFOYW1lc3BhY2VQcmVmaXgodGhpcy5fcGFyZW50LGUpOm51bGw6bnVsbH0sdC5wcm90b3R5cGUubG9va3VwTmFtZXNwYWNlVVJJPWZ1bmN0aW9uKGUpe3JldHVybiBoLm5vZGVfbG9jYXRlQU5hbWVzcGFjZSh0aGlzLGV8fG51bGwpfSx0LnByb3RvdHlwZS5pc0RlZmF1bHROYW1lc3BhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGV8fChlPW51bGwpLGgubm9kZV9sb2NhdGVBTmFtZXNwYWNlKHRoaXMsbnVsbCk9PT1lfSx0LnByb3RvdHlwZS5pbnNlcnRCZWZvcmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaC5tdXRhdGlvbl9wcmVJbnNlcnQoZSx0aGlzLHQpfSx0LnByb3RvdHlwZS5hcHBlbmRDaGlsZD1mdW5jdGlvbihlKXtyZXR1cm4gaC5tdXRhdGlvbl9hcHBlbmQoZSx0aGlzKX0sdC5wcm90b3R5cGUucmVwbGFjZUNoaWxkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgubXV0YXRpb25fcmVwbGFjZSh0LGUsdGhpcyl9LHQucHJvdG90eXBlLnJlbW92ZUNoaWxkPWZ1bmN0aW9uKGUpe3JldHVybiBoLm11dGF0aW9uX3ByZVJlbW92ZShlLHRoaXMpfSx0LnByb3RvdHlwZS5fZ2V0VGhlUGFyZW50PWZ1bmN0aW9uKGUpe3JldHVybiBsLkd1YXJkLmlzU2xvdGFibGUodGhpcykmJmguc2hhZG93VHJlZV9pc0Fzc2lnbmVkKHRoaXMpP3RoaXMuX2Fzc2lnbmVkU2xvdDp0aGlzLl9wYXJlbnR9LHQuRUxFTUVOVF9OT0RFPTEsdC5BVFRSSUJVVEVfTk9ERT0yLHQuVEVYVF9OT0RFPTMsdC5DREFUQV9TRUNUSU9OX05PREU9NCx0LkVOVElUWV9SRUZFUkVOQ0VfTk9ERT01LHQuRU5USVRZX05PREU9Nix0LlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERT03LHQuQ09NTUVOVF9OT0RFPTgsdC5ET0NVTUVOVF9OT0RFPTksdC5ET0NVTUVOVF9UWVBFX05PREU9MTAsdC5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFPTExLHQuTk9UQVRJT05fTk9ERT0xMix0LkRPQ1VNRU5UX1BPU0lUSU9OX0RJU0NPTk5FQ1RFRD0xLHQuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HPTIsdC5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc9NCx0LkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TPTgsdC5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlk9MTYsdC5ET0NVTUVOVF9QT1NJVElPTl9JTVBMRU1FTlRBVElPTl9TUEVDSUZJQz0zMix0fSh1LkV2ZW50VGFyZ2V0SW1wbCk7dC5Ob2RlSW1wbD1kLGQucHJvdG90eXBlLl9jaGlsZHJlbj1uZXcgbC5FbXB0eVNldCxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkVMRU1FTlRfTk9ERVwiLDEpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiQVRUUklCVVRFX05PREVcIiwyKSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIlRFWFRfTk9ERVwiLDMpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiQ0RBVEFfU0VDVElPTl9OT0RFXCIsNCksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJFTlRJVFlfUkVGRVJFTkNFX05PREVcIiw1KSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkVOVElUWV9OT0RFXCIsNiksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREVcIiw3KSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkNPTU1FTlRfTk9ERVwiLDgpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfTk9ERVwiLDkpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfVFlQRV9OT0RFXCIsMTApLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERVwiLDExKSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIk5PVEFUSU9OX05PREVcIiwxMiksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJET0NVTUVOVF9QT1NJVElPTl9ESVNDT05ORUNURURcIiwxKSxmLmlkbF9kZWZpbmVDb25zdChkLnByb3RvdHlwZSxcIkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElOR1wiLDIpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HXCIsNCksZi5pZGxfZGVmaW5lQ29uc3QoZC5wcm90b3R5cGUsXCJET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOU1wiLDgpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZXCIsMTYpLGYuaWRsX2RlZmluZUNvbnN0KGQucHJvdG90eXBlLFwiRE9DVU1FTlRfUE9TSVRJT05fSU1QTEVNRU5UQVRJT05fU1BFQ0lGSUNcIiwzMil9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKG51bGw9PWUpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIrZSk7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig4NyksaT1yKDQxKSxvPXIoMjcpLGE9cigyNikscz1yKDEyOCksdT1bXS5wdXNoLGw9ZnVuY3Rpb24oZSl7dmFyIHQ9MT09ZSxyPTI9PWUsbD0zPT1lLGM9ND09ZSxoPTY9PWUscD01PT1lfHxoO3JldHVybiBmdW5jdGlvbihmLGQsbSx5KXtmb3IodmFyIHYsXyxnPW8oZiksYj1pKGcpLHg9bihkLG0sMyksdz1hKGIubGVuZ3RoKSxFPTAsRD15fHxzLFM9dD9EKGYsdyk6cj9EKGYsMCk6dm9pZCAwO3c+RTtFKyspaWYoKHB8fEUgaW4gYikmJihfPXgodj1iW0VdLEUsZyksZSkpaWYodClTW0VdPV87ZWxzZSBpZihfKXN3aXRjaChlKXtjYXNlIDM6cmV0dXJuITA7Y2FzZSA1OnJldHVybiB2O2Nhc2UgNjpyZXR1cm4gRTtjYXNlIDI6dS5jYWxsKFMsdil9ZWxzZSBpZihjKXJldHVybiExO3JldHVybiBoPy0xOmx8fGM/YzpTfX07ZS5leHBvcnRzPXtmb3JFYWNoOmwoMCksbWFwOmwoMSksZmlsdGVyOmwoMiksc29tZTpsKDMpLGV2ZXJ5OmwoNCksZmluZDpsKDUpLGZpbmRJbmRleDpsKDYpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LGk9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LG89dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChpKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDYpLHM9cig5KSx1PXIoMiksbD1yKDMpLGM9cigxKSxoPXIoNykscD1yKDczKSxmPXIoMTcpLGQ9cigxNzIpLG09cig3MikseT1yKDUxKSx2PXIoMzApLF89cigxMDYpO2Z1bmN0aW9uIGcoZSx0LHIpe3ZhciBpLG8sYSxsLGMsaCxwLGQsbT10Ll9ub2RlVHlwZSx5PWUuX25vZGVUeXBlLHY9cj9yLl9ub2RlVHlwZTpudWxsO2lmKG0hPT11Lk5vZGVUeXBlLkRvY3VtZW50JiZtIT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50JiZtIT09dS5Ob2RlVHlwZS5FbGVtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIk9ubHkgZG9jdW1lbnQsIGRvY3VtZW50IGZyYWdtZW50IGFuZCBlbGVtZW50IG5vZGVzIGNhbiBjb250YWluIGNoaWxkIG5vZGVzLiBQYXJlbnQgbm9kZSBpcyBcIit0Lm5vZGVOYW1lK1wiLlwiKTtpZihmLnRyZWVfaXNIb3N0SW5jbHVkaW5nQW5jZXN0b3JPZih0LGUsITApKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIlRoZSBub2RlIHRvIGJlIGluc2VydGVkIGNhbm5vdCBiZSBhbiBpbmNsdXNpdmUgYW5jZXN0b3Igb2YgcGFyZW50IG5vZGUuIE5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIiwgcGFyZW50IG5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7aWYobnVsbCE9PXImJnIuX3BhcmVudCE9PXQpdGhyb3cgbmV3IHMuTm90Rm91bmRFcnJvcihcIlRoZSByZWZlcmVuY2UgY2hpbGQgbm9kZSBjYW5ub3QgYmUgZm91bmQgdW5kZXIgcGFyZW50IG5vZGUuIENoaWxkIG5vZGUgaXMgXCIrci5ub2RlTmFtZStcIiwgcGFyZW50IG5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7aWYoeSE9PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCYmeSE9PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlJiZ5IT09dS5Ob2RlVHlwZS5FbGVtZW50JiZ5IT09dS5Ob2RlVHlwZS5UZXh0JiZ5IT09dS5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24mJnkhPT11Lk5vZGVUeXBlLkNEYXRhJiZ5IT09dS5Ob2RlVHlwZS5Db21tZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIk9ubHkgZG9jdW1lbnQgZnJhZ21lbnQsIGRvY3VtZW50IHR5cGUsIGVsZW1lbnQsIHRleHQsIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24sIGNkYXRhIHNlY3Rpb24gb3IgY29tbWVudCBub2RlcyBjYW4gYmUgaW5zZXJ0ZWQuIE5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIi5cIik7aWYoeT09PXUuTm9kZVR5cGUuVGV4dCYmbT09PXUuTm9kZVR5cGUuRG9jdW1lbnQpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhIHRleHQgbm9kZSBhcyBhIGNoaWxkIG9mIGEgZG9jdW1lbnQgbm9kZS4gTm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLlwiKTtpZih5PT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUmJm0hPT11Lk5vZGVUeXBlLkRvY3VtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkEgZG9jdW1lbnQgdHlwZSBub2RlIGNhbiBvbmx5IGJlIGluc2VydGVkIHVuZGVyIGEgZG9jdW1lbnQgbm9kZS4gUGFyZW50IG5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7aWYobT09PXUuTm9kZVR5cGUuRG9jdW1lbnQpaWYoeT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCl7dmFyIF89MDt0cnl7Zm9yKHZhciBnPW4oZS5fY2hpbGRyZW4pLGI9Zy5uZXh0KCk7IWIuZG9uZTtiPWcubmV4dCgpKXt2YXIgeD1iLnZhbHVlO2lmKHguX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50KV8rKztlbHNlIGlmKHguX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5UZXh0KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgdGV4dCBhIG5vZGUgYXMgYSBjaGlsZCBvZiBhIGRvY3VtZW50IG5vZGUuIE5vZGUgaXMgXCIreC5ub2RlTmFtZStcIi5cIil9fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2ImJiFiLmRvbmUmJihvPWcucmV0dXJuKSYmby5jYWxsKGcpfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1pZihfPjEpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQSBkb2N1bWVudCBub2RlIGNhbiBvbmx5IGhhdmUgb25lIGRvY3VtZW50IGVsZW1lbnQgbm9kZS4gRG9jdW1lbnQgZnJhZ21lbnQgdG8gYmUgaW5zZXJ0ZWQgaGFzIFwiK18rXCIgZWxlbWVudCBub2Rlcy5cIik7aWYoMT09PV8pe3RyeXtmb3IodmFyIHc9bih0Ll9jaGlsZHJlbiksRT13Lm5leHQoKTshRS5kb25lO0U9dy5uZXh0KCkpe2lmKEUudmFsdWUuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIlRoZSBkb2N1bWVudCBub2RlIGFscmVhZHkgaGFzIGEgZG9jdW1lbnQgZWxlbWVudCBub2RlLlwiKX19Y2F0Y2goZSl7YT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7RSYmIUUuZG9uZSYmKGw9dy5yZXR1cm4pJiZsLmNhbGwodyl9ZmluYWxseXtpZihhKXRocm93IGEuZXJyb3J9fWlmKHIpe2lmKHY9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGFuIGVsZW1lbnQgbm9kZSBiZWZvcmUgYSBkb2N1bWVudCB0eXBlIG5vZGUuXCIpO2Zvcih2YXIgRD1yLl9uZXh0U2libGluZztEOyl7aWYoRC5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGFuIGVsZW1lbnQgbm9kZSBiZWZvcmUgYSBkb2N1bWVudCB0eXBlIG5vZGUuXCIpO0Q9RC5fbmV4dFNpYmxpbmd9fX19ZWxzZSBpZih5PT09dS5Ob2RlVHlwZS5FbGVtZW50KXt0cnl7Zm9yKHZhciBTPW4odC5fY2hpbGRyZW4pLEM9Uy5uZXh0KCk7IUMuZG9uZTtDPVMubmV4dCgpKXtpZihDLnZhbHVlLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRWxlbWVudCl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJEb2N1bWVudCBhbHJlYWR5IGhhcyBhIGRvY3VtZW50IGVsZW1lbnQgbm9kZS4gTm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLlwiKX19Y2F0Y2goZSl7Yz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7QyYmIUMuZG9uZSYmKGg9Uy5yZXR1cm4pJiZoLmNhbGwoUyl9ZmluYWxseXtpZihjKXRocm93IGMuZXJyb3J9fWlmKHIpe2lmKHY9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJDYW5ub3QgaW5zZXJ0IGFuIGVsZW1lbnQgbm9kZSBiZWZvcmUgYSBkb2N1bWVudCB0eXBlIG5vZGUuIE5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIi5cIik7Zm9yKEQ9ci5fbmV4dFNpYmxpbmc7RDspe2lmKEQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhbiBlbGVtZW50IG5vZGUgYmVmb3JlIGEgZG9jdW1lbnQgdHlwZSBub2RlLiBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIuXCIpO0Q9RC5fbmV4dFNpYmxpbmd9fX1lbHNlIGlmKHk9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSl7dHJ5e2Zvcih2YXIgQT1uKHQuX2NoaWxkcmVuKSxOPUEubmV4dCgpOyFOLmRvbmU7Tj1BLm5leHQoKSl7aWYoTi52YWx1ZS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJEb2N1bWVudCBhbHJlYWR5IGhhcyBhIGRvY3VtZW50IHR5cGUgbm9kZS4gTm9kZSBpcyBcIitlLm5vZGVOYW1lK1wiLlwiKX19Y2F0Y2goZSl7cD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7TiYmIU4uZG9uZSYmKGQ9QS5yZXR1cm4pJiZkLmNhbGwoQSl9ZmluYWxseXtpZihwKXRocm93IHAuZXJyb3J9fWlmKHIpZm9yKHZhciBUPXIuX3ByZXZpb3VzU2libGluZztUOyl7aWYoVC5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkVsZW1lbnQpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhIGRvY3VtZW50IHR5cGUgbm9kZSBiZWZvcmUgYW4gZWxlbWVudCBub2RlLiBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIuXCIpO1Q9VC5fcHJldmlvdXNTaWJsaW5nfWVsc2UgZm9yKFQ9dC5fZmlyc3RDaGlsZDtUOyl7aWYoVC5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkVsZW1lbnQpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhIGRvY3VtZW50IHR5cGUgbm9kZSBiZWZvcmUgYW4gZWxlbWVudCBub2RlLiBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIuXCIpO1Q9VC5fbmV4dFNpYmxpbmd9fX1mdW5jdGlvbiBiKGUsdCxyKXtnKGUsdCxyKTt2YXIgbj1yO3JldHVybiBuPT09ZSYmKG49ZS5fbmV4dFNpYmxpbmcpLF8uZG9jdW1lbnRfYWRvcHQoZSx0Ll9ub2RlRG9jdW1lbnQpLHgoZSx0LG4pLGV9ZnVuY3Rpb24geChlLHQscixpKXt2YXIgcyxkO2lmKG51bGwhPT1yfHxlLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCl7dmFyIF89ZS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQ/ZS5fY2hpbGRyZW4uc2l6ZToxO2lmKG51bGwhPT1yJiYwIT09YS5kb20ucmFuZ2VMaXN0LnNpemUpe3ZhciBnPWYudHJlZV9pbmRleChyKTt0cnl7Zm9yKHZhciBiPW4oYS5kb20ucmFuZ2VMaXN0KSx4PWIubmV4dCgpOyF4LmRvbmU7eD1iLm5leHQoKSl7dmFyIEU9eC52YWx1ZTtFLl9zdGFydFswXT09PXQmJkUuX3N0YXJ0WzFdPmcmJihFLl9zdGFydFsxXSs9XyksRS5fZW5kWzBdPT09dCYmRS5fZW5kWzFdPmcmJihFLl9lbmRbMV0rPV8pfX1jYXRjaChlKXtzPXtlcnJvcjplfX1maW5hbGx5e3RyeXt4JiYheC5kb25lJiYoZD1iLnJldHVybikmJmQuY2FsbChiKX1maW5hbGx5e2lmKHMpdGhyb3cgcy5lcnJvcn19fXZhciBEPWUuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50P25ldyhBcnJheS5iaW5kLmFwcGx5KEFycmF5LG8oW3ZvaWQgMF0sZS5fY2hpbGRyZW4pKSk6W2VdO2lmKGUuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50KWZvcig7ZS5fZmlyc3RDaGlsZDspdyhlLl9maXJzdENoaWxkLGUsITApO2EuZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiZlLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudCYmeS5vYnNlcnZlcl9xdWV1ZVRyZWVNdXRhdGlvblJlY29yZChlLFtdLEQsbnVsbCxudWxsKTtmb3IodmFyIFM9cj9yLl9wcmV2aW91c1NpYmxpbmc6dC5fbGFzdENoaWxkLEM9bnVsbD09PXI/LTE6Zi50cmVlX2luZGV4KHIpLEE9MDtBPEQubGVuZ3RoO0ErKyl7dmFyIE49RFtBXTtpZihsLkd1YXJkLmlzRWxlbWVudE5vZGUoTikmJihsLkd1YXJkLmlzRG9jdW1lbnROb2RlKHQpJiYodC5fZG9jdW1lbnRFbGVtZW50PU4pLE4uX25vZGVEb2N1bWVudC5faGFzTmFtZXNwYWNlc3x8bnVsbD09PU4uX25hbWVzcGFjZSYmbnVsbD09PU4uX25hbWVzcGFjZVByZWZpeHx8KE4uX25vZGVEb2N1bWVudC5faGFzTmFtZXNwYWNlcz0hMCkpLE4uX3BhcmVudD10LG51bGw9PT1yP2guc2V0LmFwcGVuZCh0Ll9jaGlsZHJlbixOKTooaC5zZXQuaW5zZXJ0KHQuX2NoaWxkcmVuLE4sQyksQysrKSxudWxsPT09dC5fZmlyc3RDaGlsZClOLl9wcmV2aW91c1NpYmxpbmc9bnVsbCxOLl9uZXh0U2libGluZz1udWxsLHQuX2ZpcnN0Q2hpbGQ9Tix0Ll9sYXN0Q2hpbGQ9TjtlbHNle3ZhciBUPXI/ci5fcHJldmlvdXNTaWJsaW5nOnQuX2xhc3RDaGlsZCxPPXJ8fG51bGw7Ti5fcHJldmlvdXNTaWJsaW5nPVQsTi5fbmV4dFNpYmxpbmc9TyxUJiYoVC5fbmV4dFNpYmxpbmc9TiksTyYmKE8uX3ByZXZpb3VzU2libGluZz1OKSxUfHwodC5fZmlyc3RDaGlsZD1OKSxPfHwodC5fbGFzdENoaWxkPU4pfWEuZG9tLmZlYXR1cmVzLnNsb3RzJiZudWxsIT09dC5fc2hhZG93Um9vdCYmbC5HdWFyZC5pc1Nsb3RhYmxlKE4pJiZtLnNoYWRvd1RyZWVfYXNzaWduQVNsb3QoTiksYS5kb20uZmVhdHVyZXMuc3RlcHMmJmwuR3VhcmQuaXNUZXh0Tm9kZShOKSYmdi5kb21fcnVuQ2hpbGRUZXh0Q29udGVudENoYW5nZVN0ZXBzKHQpLGEuZG9tLmZlYXR1cmVzLnNsb3RzJiZsLkd1YXJkLmlzU2hhZG93Um9vdChmLnRyZWVfcm9vdE5vZGUodCkpJiZsLkd1YXJkLmlzU2xvdCh0KSYmYy5pc0VtcHR5KHQuX2Fzc2lnbmVkTm9kZXMpJiZtLnNoYWRvd1RyZWVfc2lnbmFsQVNsb3RDaGFuZ2UodCksYS5kb20uZmVhdHVyZXMuc2xvdHMmJm0uc2hhZG93VHJlZV9hc3NpZ25TbG90YWJsZXNGb3JBVHJlZShmLnRyZWVfcm9vdE5vZGUoTikpO2Zvcih2YXIgRj1mLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZShOLCEwLCEwKTtudWxsIT09RjspYS5kb20uZmVhdHVyZXMuc3RlcHMmJnYuZG9tX3J1bkluc2VydGlvblN0ZXBzKEYpLGEuZG9tLmZlYXR1cmVzLmN1c3RvbUVsZW1lbnRzJiZsLkd1YXJkLmlzRWxlbWVudE5vZGUoRikmJm0uc2hhZG93VHJlZV9pc0Nvbm5lY3RlZChGKSYmKGwuR3VhcmQuaXNDdXN0b21FbGVtZW50Tm9kZShGKT9wLmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbihGLFwiY29ubmVjdGVkQ2FsbGJhY2tcIixbXSk6cC5jdXN0b21FbGVtZW50X3RyeVRvVXBncmFkZShGKSksRj1mLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKE4sRiwhMCwhMCl9YS5kb20uZmVhdHVyZXMubXV0YXRpb25PYnNlcnZlcnMmJihpfHx5Lm9ic2VydmVyX3F1ZXVlVHJlZU11dGF0aW9uUmVjb3JkKHQsRCxbXSxTLHIpKX1lbHNlIWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10Ll9sYXN0Q2hpbGQ7bC5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiYobC5HdWFyZC5pc0RvY3VtZW50Tm9kZSh0KSYmKHQuX2RvY3VtZW50RWxlbWVudD1lKSxlLl9ub2RlRG9jdW1lbnQuX2hhc05hbWVzcGFjZXN8fG51bGw9PT1lLl9uYW1lc3BhY2UmJm51bGw9PT1lLl9uYW1lc3BhY2VQcmVmaXh8fChlLl9ub2RlRG9jdW1lbnQuX2hhc05hbWVzcGFjZXM9ITApKTtpZihlLl9wYXJlbnQ9dCx0Ll9jaGlsZHJlbi5hZGQoZSksbnVsbD09PXQuX2ZpcnN0Q2hpbGQpZS5fcHJldmlvdXNTaWJsaW5nPW51bGwsZS5fbmV4dFNpYmxpbmc9bnVsbCx0Ll9maXJzdENoaWxkPWUsdC5fbGFzdENoaWxkPWU7ZWxzZXt2YXIgaT10Ll9sYXN0Q2hpbGQ7ZS5fcHJldmlvdXNTaWJsaW5nPWksZS5fbmV4dFNpYmxpbmc9bnVsbCxpJiYoaS5fbmV4dFNpYmxpbmc9ZSksaXx8KHQuX2ZpcnN0Q2hpbGQ9ZSksdC5fbGFzdENoaWxkPWV9YS5kb20uZmVhdHVyZXMuc2xvdHMmJm51bGwhPT10Ll9zaGFkb3dSb290JiZsLkd1YXJkLmlzU2xvdGFibGUoZSkmJm0uc2hhZG93VHJlZV9hc3NpZ25BU2xvdChlKTthLmRvbS5mZWF0dXJlcy5zdGVwcyYmbC5HdWFyZC5pc1RleHROb2RlKGUpJiZ2LmRvbV9ydW5DaGlsZFRleHRDb250ZW50Q2hhbmdlU3RlcHModCk7YS5kb20uZmVhdHVyZXMuc2xvdHMmJmwuR3VhcmQuaXNTaGFkb3dSb290KGYudHJlZV9yb290Tm9kZSh0KSkmJmwuR3VhcmQuaXNTbG90KHQpJiZjLmlzRW1wdHkodC5fYXNzaWduZWROb2RlcykmJm0uc2hhZG93VHJlZV9zaWduYWxBU2xvdENoYW5nZSh0KTthLmRvbS5mZWF0dXJlcy5zbG90cyYmbS5zaGFkb3dUcmVlX2Fzc2lnblNsb3RhYmxlc0ZvckFUcmVlKGYudHJlZV9yb290Tm9kZShlKSk7YS5kb20uZmVhdHVyZXMuc3RlcHMmJnYuZG9tX3J1bkluc2VydGlvblN0ZXBzKGUpO2EuZG9tLmZlYXR1cmVzLmN1c3RvbUVsZW1lbnRzJiZsLkd1YXJkLmlzRWxlbWVudE5vZGUoZSkmJm0uc2hhZG93VHJlZV9pc0Nvbm5lY3RlZChlKSYmKGwuR3VhcmQuaXNDdXN0b21FbGVtZW50Tm9kZShlKT9wLmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbihlLFwiY29ubmVjdGVkQ2FsbGJhY2tcIixbXSk6cC5jdXN0b21FbGVtZW50X3RyeVRvVXBncmFkZShlKSk7YS5kb20uZmVhdHVyZXMubXV0YXRpb25PYnNlcnZlcnMmJihyfHx5Lm9ic2VydmVyX3F1ZXVlVHJlZU11dGF0aW9uUmVjb3JkKHQsW2VdLFtdLG4sbnVsbCkpfShlLHQsaSl9ZnVuY3Rpb24gdyhlLHQscil7dmFyIGksbyxzLHUsaCxfLGcsYjtpZigwIT09YS5kb20ucmFuZ2VMaXN0LnNpemUpe3ZhciB4PWYudHJlZV9pbmRleChlKTt0cnl7Zm9yKHZhciB3PW4oYS5kb20ucmFuZ2VMaXN0KSxFPXcubmV4dCgpOyFFLmRvbmU7RT13Lm5leHQoKSl7dmFyIEQ9RS52YWx1ZTtmLnRyZWVfaXNEZXNjZW5kYW50T2YoZSxELl9zdGFydFswXSwhMCkmJihELl9zdGFydD1bdCx4XSksZi50cmVlX2lzRGVzY2VuZGFudE9mKGUsRC5fZW5kWzBdLCEwKSYmKEQuX2VuZD1bdCx4XSksRC5fc3RhcnRbMF09PT10JiZELl9zdGFydFsxXT54JiZELl9zdGFydFsxXS0tLEQuX2VuZFswXT09PXQmJkQuX2VuZFsxXT54JiZELl9lbmRbMV0tLX19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7RSYmIUUuZG9uZSYmKG89dy5yZXR1cm4pJiZvLmNhbGwodyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXRyeXtmb3IodmFyIFM9bihhLmRvbS5yYW5nZUxpc3QpLEM9Uy5uZXh0KCk7IUMuZG9uZTtDPVMubmV4dCgpKXsoRD1DLnZhbHVlKS5fc3RhcnRbMF09PT10JiZELl9zdGFydFsxXT54JiYoRC5fc3RhcnRbMV0tPTEpLEQuX2VuZFswXT09PXQmJkQuX2VuZFsxXT54JiYoRC5fZW5kWzFdLT0xKX19Y2F0Y2goZSl7cz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7QyYmIUMuZG9uZSYmKHU9Uy5yZXR1cm4pJiZ1LmNhbGwoUyl9ZmluYWxseXtpZihzKXRocm93IHMuZXJyb3J9fX1pZihhLmRvbS5mZWF0dXJlcy5zdGVwcyl0cnl7Zm9yKHZhciBBPW4oZC5ub2RlSXRlcmF0b3JfaXRlcmF0b3JMaXN0KCkpLE49QS5uZXh0KCk7IU4uZG9uZTtOPUEubmV4dCgpKXt2YXIgVD1OLnZhbHVlO1QuX3Jvb3QuX25vZGVEb2N1bWVudD09PWUuX25vZGVEb2N1bWVudCYmdi5kb21fcnVuTm9kZUl0ZXJhdG9yUHJlUmVtb3ZpbmdTdGVwcyhULGUpfX1jYXRjaChlKXtoPXtlcnJvcjplfX1maW5hbGx5e3RyeXtOJiYhTi5kb25lJiYoXz1BLnJldHVybikmJl8uY2FsbChBKX1maW5hbGx5e2lmKGgpdGhyb3cgaC5lcnJvcn19dmFyIE89ZS5fcHJldmlvdXNTaWJsaW5nLEY9ZS5fbmV4dFNpYmxpbmc7bC5HdWFyZC5pc0RvY3VtZW50Tm9kZSh0KSYmbC5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiYodC5fZG9jdW1lbnRFbGVtZW50PW51bGwpLGUuX3BhcmVudD1udWxsLHQuX2NoaWxkcmVuLmRlbGV0ZShlKTt2YXIgaz1lLl9wcmV2aW91c1NpYmxpbmcsUD1lLl9uZXh0U2libGluZzsoZS5fcHJldmlvdXNTaWJsaW5nPW51bGwsZS5fbmV4dFNpYmxpbmc9bnVsbCxrJiYoay5fbmV4dFNpYmxpbmc9UCksUCYmKFAuX3ByZXZpb3VzU2libGluZz1rKSxrfHwodC5fZmlyc3RDaGlsZD1QKSxQfHwodC5fbGFzdENoaWxkPWspLGEuZG9tLmZlYXR1cmVzLnNsb3RzJiZsLkd1YXJkLmlzU2xvdGFibGUoZSkmJm51bGwhPT1lLl9hc3NpZ25lZFNsb3QmJm0uc2hhZG93VHJlZV9pc0Fzc2lnbmVkKGUpJiZtLnNoYWRvd1RyZWVfYXNzaWduU2xvdGFibGVzKGUuX2Fzc2lnbmVkU2xvdCksYS5kb20uZmVhdHVyZXMuc2xvdHMmJmwuR3VhcmQuaXNTaGFkb3dSb290KGYudHJlZV9yb290Tm9kZSh0KSkmJmwuR3VhcmQuaXNTbG90KHQpJiZjLmlzRW1wdHkodC5fYXNzaWduZWROb2RlcykmJm0uc2hhZG93VHJlZV9zaWduYWxBU2xvdENoYW5nZSh0KSxhLmRvbS5mZWF0dXJlcy5zbG90cykmJihudWxsIT09Zi50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUoZSwhMCwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIGwuR3VhcmQuaXNTbG90KGUpfSkpJiYobS5zaGFkb3dUcmVlX2Fzc2lnblNsb3RhYmxlc0ZvckFUcmVlKGYudHJlZV9yb290Tm9kZSh0KSksbS5zaGFkb3dUcmVlX2Fzc2lnblNsb3RhYmxlc0ZvckFUcmVlKGUpKSk7YS5kb20uZmVhdHVyZXMuc3RlcHMmJnYuZG9tX3J1blJlbW92aW5nU3RlcHMoZSx0KSxhLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmbC5HdWFyZC5pc0N1c3RvbUVsZW1lbnROb2RlKGUpJiZwLmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbihlLFwiZGlzY29ubmVjdGVkQ2FsbGJhY2tcIixbXSk7Zm9yKHZhciBJPWYudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKGUsITEsITApO251bGwhPT1JOylhLmRvbS5mZWF0dXJlcy5zdGVwcyYmdi5kb21fcnVuUmVtb3ZpbmdTdGVwcyhJLGUpLGEuZG9tLmZlYXR1cmVzLmN1c3RvbUVsZW1lbnRzJiZsLkd1YXJkLmlzQ3VzdG9tRWxlbWVudE5vZGUoSSkmJnAuY3VzdG9tRWxlbWVudF9lbnF1ZXVlQUN1c3RvbUVsZW1lbnRDYWxsYmFja1JlYWN0aW9uKEksXCJkaXNjb25uZWN0ZWRDYWxsYmFja1wiLFtdKSxJPWYudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUoZSxJLCExLCEwKTtpZihhLmRvbS5mZWF0dXJlcy5tdXRhdGlvbk9ic2VydmVycylmb3IodmFyIEw9Zi50cmVlX2dldEZpcnN0QW5jZXN0b3JOb2RlKHQsITApO251bGwhPT1MOyl7dHJ5e2Zvcih2YXIgTT0oZz12b2lkIDAsbihMLl9yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0KSksQj1NLm5leHQoKTshQi5kb25lO0I9TS5uZXh0KCkpe3ZhciBqPUIudmFsdWU7ai5vcHRpb25zLnN1YnRyZWUmJmUuX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3QucHVzaCh7b2JzZXJ2ZXI6ai5vYnNlcnZlcixvcHRpb25zOmoub3B0aW9ucyxzb3VyY2U6an0pfX1jYXRjaChlKXtnPXtlcnJvcjplfX1maW5hbGx5e3RyeXtCJiYhQi5kb25lJiYoYj1NLnJldHVybikmJmIuY2FsbChNKX1maW5hbGx5e2lmKGcpdGhyb3cgZy5lcnJvcn19TD1mLnRyZWVfZ2V0TmV4dEFuY2VzdG9yTm9kZSh0LEwsITApfWEuZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiYocnx8eS5vYnNlcnZlcl9xdWV1ZVRyZWVNdXRhdGlvblJlY29yZCh0LFtdLFtlXSxPLEYpKSxhLmRvbS5mZWF0dXJlcy5zdGVwcyYmbC5HdWFyZC5pc1RleHROb2RlKGUpJiZ2LmRvbV9ydW5DaGlsZFRleHRDb250ZW50Q2hhbmdlU3RlcHModCl9dC5tdXRhdGlvbl9lbnN1cmVQcmVJbnNlcnRpb25WYWxpZGl0eT1nLHQubXV0YXRpb25fcHJlSW5zZXJ0PWIsdC5tdXRhdGlvbl9pbnNlcnQ9eCx0Lm11dGF0aW9uX2FwcGVuZD1mdW5jdGlvbihlLHQpe3JldHVybiBiKGUsdCxudWxsKX0sdC5tdXRhdGlvbl9yZXBsYWNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLGwsYyxoLHAsZCxtO2lmKHIuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5Eb2N1bWVudCYmci5fbm9kZVR5cGUhPT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQmJnIuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5FbGVtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIk9ubHkgZG9jdW1lbnQsIGRvY3VtZW50IGZyYWdtZW50IGFuZCBlbGVtZW50IG5vZGVzIGNhbiBjb250YWluIGNoaWxkIG5vZGVzLiBQYXJlbnQgbm9kZSBpcyBcIityLm5vZGVOYW1lK1wiLlwiKTtpZihmLnRyZWVfaXNIb3N0SW5jbHVkaW5nQW5jZXN0b3JPZihyLHQsITApKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIlRoZSBub2RlIHRvIGJlIGluc2VydGVkIGNhbm5vdCBiZSBhbiBhbmNlc3RvciBvZiBwYXJlbnQgbm9kZS4gTm9kZSBpcyBcIit0Lm5vZGVOYW1lK1wiLCBwYXJlbnQgbm9kZSBpcyBcIityLm5vZGVOYW1lK1wiLlwiKTtpZihlLl9wYXJlbnQhPT1yKXRocm93IG5ldyBzLk5vdEZvdW5kRXJyb3IoXCJUaGUgcmVmZXJlbmNlIGNoaWxkIG5vZGUgY2Fubm90IGJlIGZvdW5kIHVuZGVyIHBhcmVudCBub2RlLiBDaGlsZCBub2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIsIHBhcmVudCBub2RlIGlzIFwiK3Iubm9kZU5hbWUrXCIuXCIpO2lmKHQuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50JiZ0Ll9ub2RlVHlwZSE9PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlJiZ0Ll9ub2RlVHlwZSE9PXUuTm9kZVR5cGUuRWxlbWVudCYmdC5fbm9kZVR5cGUhPT11Lk5vZGVUeXBlLlRleHQmJnQuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24mJnQuX25vZGVUeXBlIT09dS5Ob2RlVHlwZS5DRGF0YSYmdC5fbm9kZVR5cGUhPT11Lk5vZGVUeXBlLkNvbW1lbnQpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiT25seSBkb2N1bWVudCBmcmFnbWVudCwgZG9jdW1lbnQgdHlwZSwgZWxlbWVudCwgdGV4dCwgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiwgY2RhdGEgc2VjdGlvbiBvciBjb21tZW50IG5vZGVzIGNhbiBiZSBpbnNlcnRlZC4gTm9kZSBpcyBcIit0Lm5vZGVOYW1lK1wiLlwiKTtpZih0Ll9ub2RlVHlwZT09PXUuTm9kZVR5cGUuVGV4dCYmci5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYSB0ZXh0IG5vZGUgYXMgYSBjaGlsZCBvZiBhIGRvY3VtZW50IG5vZGUuIE5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7aWYodC5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50VHlwZSYmci5fbm9kZVR5cGUhPT11Lk5vZGVUeXBlLkRvY3VtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkEgZG9jdW1lbnQgdHlwZSBub2RlIGNhbiBvbmx5IGJlIGluc2VydGVkIHVuZGVyIGEgZG9jdW1lbnQgbm9kZS4gUGFyZW50IG5vZGUgaXMgXCIrci5ub2RlTmFtZStcIi5cIik7aWYoci5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkRvY3VtZW50KWlmKHQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50KXt2YXIgdj0wO3RyeXtmb3IodmFyIGc9bih0Ll9jaGlsZHJlbiksYj1nLm5leHQoKTshYi5kb25lO2I9Zy5uZXh0KCkpe3ZhciBFPWIudmFsdWU7aWYoRS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLkVsZW1lbnQpdisrO2Vsc2UgaWYoRS5fbm9kZVR5cGU9PT11Lk5vZGVUeXBlLlRleHQpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCB0ZXh0IGEgbm9kZSBhcyBhIGNoaWxkIG9mIGEgZG9jdW1lbnQgbm9kZS4gTm9kZSBpcyBcIitFLm5vZGVOYW1lK1wiLlwiKX19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YiYmIWIuZG9uZSYmKG89Zy5yZXR1cm4pJiZvLmNhbGwoZyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fWlmKHY+MSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJBIGRvY3VtZW50IG5vZGUgY2FuIG9ubHkgaGF2ZSBvbmUgZG9jdW1lbnQgZWxlbWVudCBub2RlLiBEb2N1bWVudCBmcmFnbWVudCB0byBiZSBpbnNlcnRlZCBoYXMgXCIrditcIiBlbGVtZW50IG5vZGVzLlwiKTtpZigxPT09dil7dHJ5e2Zvcih2YXIgRD1uKHIuX2NoaWxkcmVuKSxTPUQubmV4dCgpOyFTLmRvbmU7Uz1ELm5leHQoKSl7aWYoKEY9Uy52YWx1ZSkuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50JiZGIT09ZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJUaGUgZG9jdW1lbnQgbm9kZSBhbHJlYWR5IGhhcyBhIGRvY3VtZW50IGVsZW1lbnQgbm9kZS5cIil9fWNhdGNoKGUpe2w9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e1MmJiFTLmRvbmUmJihjPUQucmV0dXJuKSYmYy5jYWxsKEQpfWZpbmFsbHl7aWYobCl0aHJvdyBsLmVycm9yfX1mb3IodmFyIEM9ZS5fbmV4dFNpYmxpbmc7Qzspe2lmKEMuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yKFwiQ2Fubm90IGluc2VydCBhbiBlbGVtZW50IG5vZGUgYmVmb3JlIGEgZG9jdW1lbnQgdHlwZSBub2RlLlwiKTtDPUMuX25leHRTaWJsaW5nfX19ZWxzZSBpZih0Ll9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRWxlbWVudCl7dHJ5e2Zvcih2YXIgQT1uKHIuX2NoaWxkcmVuKSxOPUEubmV4dCgpOyFOLmRvbmU7Tj1BLm5leHQoKSl7aWYoKEY9Ti52YWx1ZSkuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50JiZGIT09ZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJEb2N1bWVudCBhbHJlYWR5IGhhcyBhIGRvY3VtZW50IGVsZW1lbnQgbm9kZS4gTm9kZSBpcyBcIit0Lm5vZGVOYW1lK1wiLlwiKX19Y2F0Y2goZSl7aD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7TiYmIU4uZG9uZSYmKHA9QS5yZXR1cm4pJiZwLmNhbGwoQSl9ZmluYWxseXtpZihoKXRocm93IGguZXJyb3J9fWZvcihDPWUuX25leHRTaWJsaW5nO0M7KXtpZihDLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlKXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYW4gZWxlbWVudCBub2RlIGJlZm9yZSBhIGRvY3VtZW50IHR5cGUgbm9kZS4gTm9kZSBpcyBcIit0Lm5vZGVOYW1lK1wiLlwiKTtDPUMuX25leHRTaWJsaW5nfX1lbHNlIGlmKHQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudFR5cGUpe3RyeXtmb3IodmFyIFQ9bihyLl9jaGlsZHJlbiksTz1ULm5leHQoKTshTy5kb25lO089VC5uZXh0KCkpe3ZhciBGO2lmKChGPU8udmFsdWUpLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRUeXBlJiZGIT09ZSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3IoXCJEb2N1bWVudCBhbHJlYWR5IGhhcyBhIGRvY3VtZW50IHR5cGUgbm9kZS4gTm9kZSBpcyBcIit0Lm5vZGVOYW1lK1wiLlwiKX19Y2F0Y2goZSl7ZD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7TyYmIU8uZG9uZSYmKG09VC5yZXR1cm4pJiZtLmNhbGwoVCl9ZmluYWxseXtpZihkKXRocm93IGQuZXJyb3J9fWZvcih2YXIgaz1lLl9wcmV2aW91c1NpYmxpbmc7azspe2lmKGsuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5FbGVtZW50KXRocm93IG5ldyBzLkhpZXJhcmNoeVJlcXVlc3RFcnJvcihcIkNhbm5vdCBpbnNlcnQgYSBkb2N1bWVudCB0eXBlIG5vZGUgYmVmb3JlIGFuIGVsZW1lbnQgbm9kZS4gTm9kZSBpcyBcIit0Lm5vZGVOYW1lK1wiLlwiKTtrPWsuX3ByZXZpb3VzU2libGluZ319dmFyIFA9ZS5fbmV4dFNpYmxpbmc7UD09PXQmJihQPXQuX25leHRTaWJsaW5nKTt2YXIgST1lLl9wcmV2aW91c1NpYmxpbmc7Xy5kb2N1bWVudF9hZG9wdCh0LHIuX25vZGVEb2N1bWVudCk7dmFyIEw9W107bnVsbCE9PWUuX3BhcmVudCYmKEwucHVzaChlKSx3KGUsZS5fcGFyZW50LCEwKSk7dmFyIE09W107cmV0dXJuIHQuX25vZGVUeXBlPT09dS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50P009QXJyYXkuZnJvbSh0Ll9jaGlsZHJlbik6TS5wdXNoKHQpLHgodCxyLFAsITApLGEuZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiZ5Lm9ic2VydmVyX3F1ZXVlVHJlZU11dGF0aW9uUmVjb3JkKHIsTSxMLEksUCksZX0sdC5tdXRhdGlvbl9yZXBsYWNlQWxsPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtudWxsIT09ZSYmXy5kb2N1bWVudF9hZG9wdChlLHQuX25vZGVEb2N1bWVudCk7dmFyIG89QXJyYXkuZnJvbSh0Ll9jaGlsZHJlbikscz1bXTtlJiZlLl9ub2RlVHlwZT09PXUuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudD9zPUFycmF5LmZyb20oZS5fY2hpbGRyZW4pOm51bGwhPT1lJiZzLnB1c2goZSk7dHJ5e2Zvcih2YXIgbD1uKG8pLGM9bC5uZXh0KCk7IWMuZG9uZTtjPWwubmV4dCgpKXt3KGMudmFsdWUsdCwhMCl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2MmJiFjLmRvbmUmJihpPWwucmV0dXJuKSYmaS5jYWxsKGwpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1udWxsIT09ZSYmeChlLHQsbnVsbCwhMCksYS5kb20uZmVhdHVyZXMubXV0YXRpb25PYnNlcnZlcnMmJnkub2JzZXJ2ZXJfcXVldWVUcmVlTXV0YXRpb25SZWNvcmQodCxzLG8sbnVsbCxudWxsKX0sdC5tdXRhdGlvbl9wcmVSZW1vdmU9ZnVuY3Rpb24oZSx0KXtpZihlLl9wYXJlbnQhPT10KXRocm93IG5ldyBzLk5vdEZvdW5kRXJyb3IoXCJUaGUgY2hpbGQgbm9kZSBjYW5ub3QgYmUgZm91bmQgdW5kZXIgcGFyZW50IG5vZGUuIENoaWxkIG5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIiwgcGFyZW50IG5vZGUgaXMgXCIrdC5ub2RlTmFtZStcIi5cIik7cmV0dXJuIHcoZSx0KSxlfSx0Lm11dGF0aW9uX3JlbW92ZT13fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gbnVsbD09ZX1lLmV4cG9ydHMuaXNOb3RoaW5nPW4sZS5leHBvcnRzLmlzT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZX0sZS5leHBvcnRzLnRvQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZTpuKGUpP1tdOltlXX0sZS5leHBvcnRzLnJlcGVhdD1mdW5jdGlvbihlLHQpe3ZhciByLG49XCJcIjtmb3Iocj0wO3I8dDtyKz0xKW4rPWU7cmV0dXJuIG59LGUuZXhwb3J0cy5pc05lZ2F0aXZlWmVybz1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWUmJk51bWJlci5ORUdBVElWRV9JTkZJTklUWT09PTEvZX0sZS5leHBvcnRzLmV4dGVuZD1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxvO2lmKHQpZm9yKHI9MCxuPShvPU9iamVjdC5rZXlzKHQpKS5sZW5ndGg7cjxuO3IrPTEpZVtpPW9bcl1dPXRbaV07cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOCksaT1yKDUzKSxvPXIoMTApO2Z1bmN0aW9uIGEoZSx0LHIpe3ZhciBuPVtdO3JldHVybiBlLmluY2x1ZGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cj1hKGUsdCxyKX0pKSxlW3RdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3IuZm9yRWFjaCgoZnVuY3Rpb24odCxyKXt0LnRhZz09PWUudGFnJiZ0LmtpbmQ9PT1lLmtpbmQmJm4ucHVzaChyKX0pKSxyLnB1c2goZSl9KSksci5maWx0ZXIoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuLTE9PT1uLmluZGV4T2YodCl9KSl9ZnVuY3Rpb24gcyhlKXt0aGlzLmluY2x1ZGU9ZS5pbmNsdWRlfHxbXSx0aGlzLmltcGxpY2l0PWUuaW1wbGljaXR8fFtdLHRoaXMuZXhwbGljaXQ9ZS5leHBsaWNpdHx8W10sdGhpcy5pbXBsaWNpdC5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihlLmxvYWRLaW5kJiZcInNjYWxhclwiIT09ZS5sb2FkS2luZCl0aHJvdyBuZXcgaShcIlRoZXJlIGlzIGEgbm9uLXNjYWxhciB0eXBlIGluIHRoZSBpbXBsaWNpdCBsaXN0IG9mIGEgc2NoZW1hLiBJbXBsaWNpdCByZXNvbHZpbmcgb2Ygc3VjaCB0eXBlcyBpcyBub3Qgc3VwcG9ydGVkLlwiKX0pKSx0aGlzLmNvbXBpbGVkSW1wbGljaXQ9YSh0aGlzLFwiaW1wbGljaXRcIixbXSksdGhpcy5jb21waWxlZEV4cGxpY2l0PWEodGhpcyxcImV4cGxpY2l0XCIsW10pLHRoaXMuY29tcGlsZWRUeXBlTWFwPWZ1bmN0aW9uKCl7dmFyIGUsdCxyPXtzY2FsYXI6e30sc2VxdWVuY2U6e30sbWFwcGluZzp7fSxmYWxsYmFjazp7fX07ZnVuY3Rpb24gbihlKXtyW2Uua2luZF1bZS50YWddPXIuZmFsbGJhY2tbZS50YWddPWV9Zm9yKGU9MCx0PWFyZ3VtZW50cy5sZW5ndGg7ZTx0O2UrPTEpYXJndW1lbnRzW2VdLmZvckVhY2gobik7cmV0dXJuIHJ9KHRoaXMuY29tcGlsZWRJbXBsaWNpdCx0aGlzLmNvbXBpbGVkRXhwbGljaXQpfXMuREVGQVVMVD1udWxsLHMuY3JlYXRlPWZ1bmN0aW9uKCl7dmFyIGUsdDtzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7Y2FzZSAxOmU9cy5ERUZBVUxULHQ9YXJndW1lbnRzWzBdO2JyZWFrO2Nhc2UgMjplPWFyZ3VtZW50c1swXSx0PWFyZ3VtZW50c1sxXTticmVhaztkZWZhdWx0OnRocm93IG5ldyBpKFwiV3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgU2NoZW1hLmNyZWF0ZSBmdW5jdGlvblwiKX1pZihlPW4udG9BcnJheShlKSx0PW4udG9BcnJheSh0KSwhZS5ldmVyeSgoZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfSkpKXRocm93IG5ldyBpKFwiU3BlY2lmaWVkIGxpc3Qgb2Ygc3VwZXIgc2NoZW1hcyAob3IgYSBzaW5nbGUgU2NoZW1hIG9iamVjdCkgY29udGFpbnMgYSBub24tU2NoZW1hIG9iamVjdC5cIik7aWYoIXQuZXZlcnkoKGZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2Ygb30pKSl0aHJvdyBuZXcgaShcIlNwZWNpZmllZCBsaXN0IG9mIFlBTUwgdHlwZXMgKG9yIGEgc2luZ2xlIFR5cGUgb2JqZWN0KSBjb250YWlucyBhIG5vbi1UeXBlIG9iamVjdC5cIik7cmV0dXJuIG5ldyBzKHtpbmNsdWRlOmUsZXhwbGljaXQ6dH0pfSxlLmV4cG9ydHM9c30sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57ZW51bWVyYWJsZTohKDEmZSksY29uZmlndXJhYmxlOiEoMiZlKSx3cml0YWJsZTohKDQmZSksdmFsdWU6dH19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig4KSxpPXIoNDIpLG89XCJcIi5zcGxpdDtlLmV4cG9ydHM9bigoZnVuY3Rpb24oKXtyZXR1cm4hT2JqZWN0KFwielwiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKX0pKT9mdW5jdGlvbihlKXtyZXR1cm5cIlN0cmluZ1wiPT1pKGUpP28uY2FsbChlLFwiXCIpOk9iamVjdChlKX06T2JqZWN0fSxmdW5jdGlvbihlLHQpe3ZhciByPXt9LnRvU3RyaW5nO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gci5jYWxsKGUpLnNsaWNlKDgsLTEpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbyxhPXIoMTg2KSxzPXIoMTEpLHU9cigxMyksbD1yKDIxKSxjPXIoMTQpLGg9cig1NykscD1yKDQ1KSxmPXMuV2Vha01hcDtpZihhKXt2YXIgZD1uZXcgZixtPWQuZ2V0LHk9ZC5oYXMsdj1kLnNldDtuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHYuY2FsbChkLGUsdCksdH0saT1mdW5jdGlvbihlKXtyZXR1cm4gbS5jYWxsKGQsZSl8fHt9fSxvPWZ1bmN0aW9uKGUpe3JldHVybiB5LmNhbGwoZCxlKX19ZWxzZXt2YXIgXz1oKFwic3RhdGVcIik7cFtfXT0hMCxuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGwoZSxfLHQpLHR9LGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGMoZSxfKT9lW19dOnt9fSxvPWZ1bmN0aW9uKGUpe3JldHVybiBjKGUsXyl9fWUuZXhwb3J0cz17c2V0Om4sZ2V0OmksaGFzOm8sZW5mb3JjZTpmdW5jdGlvbihlKXtyZXR1cm4gbyhlKT9pKGUpOm4oZSx7fSl9LGdldHRlckZvcjpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIHI7aWYoIXUodCl8fChyPWkodCkpLnR5cGUhPT1lKXRocm93IFR5cGVFcnJvcihcIkluY29tcGF0aWJsZSByZWNlaXZlciwgXCIrZStcIiByZXF1aXJlZFwiKTtyZXR1cm4gcn19fX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ITF9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXt9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMjApLGk9cigxMSksbz1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2U6dm9pZCAwfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aDwyP28obltlXSl8fG8oaVtlXSk6bltlXSYmbltlXVt0XXx8aVtlXSYmaVtlXVt0XX19LGZ1bmN0aW9uKGUsdCl7dmFyIHI9TWF0aC5jZWlsLG49TWF0aC5mbG9vcjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzTmFOKGU9K2UpPzA6KGU+MD9uOnIpKGUpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoOCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9W11bZV07cmV0dXJuISFyJiZuKChmdW5jdGlvbigpe3IuY2FsbChudWxsLHR8fGZ1bmN0aW9uKCl7dGhyb3cgMX0sMSl9KSl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoMzEpLHIoMzIpLHIoMzMpLHIoMjIwKSxyKDY0KSxyKDE5KSxyKDY1KSxyKDIwKSxyKDY4KSxyKDY2KSxyKDkyKSxyKDE0NCkscigyMikscig5NCkscigyMyk7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0saT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0sbz10aGlzJiZ0aGlzLl9fc3ByZWFkfHxmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllPWUuY29uY2F0KGkoYXJndW1lbnRzW3RdKSk7cmV0dXJuIGV9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoMikscz1yKDY5KSx1PXIoOTUpLGw9cig3KSxjPXIoMCksaD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5sZXZlbD0wLHRoaXMuX2J1aWxkZXJPcHRpb25zPWV9cmV0dXJuIGUucHJvdG90eXBlLmRlY2xhcmF0aW9uPWZ1bmN0aW9uKGUsdCxyKXt9LGUucHJvdG90eXBlLmRvY1R5cGU9ZnVuY3Rpb24oZSx0LHIpe30sZS5wcm90b3R5cGUuY29tbWVudD1mdW5jdGlvbihlKXt9LGUucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24oZSl7fSxlLnByb3RvdHlwZS5pbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe30sZS5wcm90b3R5cGUuY2RhdGE9ZnVuY3Rpb24oZSl7fSxlLnByb3RvdHlwZS5vcGVuVGFnQmVnaW49ZnVuY3Rpb24oZSl7fSxlLnByb3RvdHlwZS5vcGVuVGFnRW5kPWZ1bmN0aW9uKGUsdCxyKXt9LGUucHJvdG90eXBlLmNsb3NlVGFnPWZ1bmN0aW9uKGUpe30sZS5wcm90b3R5cGUuYXR0cmlidXRlcz1mdW5jdGlvbihlKXt2YXIgdCxyO3RyeXtmb3IodmFyIGk9bihlKSxvPWkubmV4dCgpOyFvLmRvbmU7bz1pLm5leHQoKSl7dmFyIGE9by52YWx1ZTt0aGlzLmF0dHJpYnV0ZShudWxsPT09YVsxXT9hWzJdOmFbMV0rXCI6XCIrYVsyXSxhWzNdKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7byYmIW8uZG9uZSYmKHI9aS5yZXR1cm4pJiZyLmNhbGwoaSl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fX0sZS5wcm90b3R5cGUuYXR0cmlidXRlPWZ1bmN0aW9uKGUsdCl7fSxlLnByb3RvdHlwZS5iZWdpbkVsZW1lbnQ9ZnVuY3Rpb24oZSl7fSxlLnByb3RvdHlwZS5lbmRFbGVtZW50PWZ1bmN0aW9uKGUpe30sZS5wcm90b3R5cGUuc2VyaWFsaXplTm9kZT1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMCE9PWUuX25vZGVEb2N1bWVudCYmZS5fbm9kZURvY3VtZW50Ll9oYXNOYW1lc3BhY2VzO2lmKHRoaXMubGV2ZWw9MCx0aGlzLmN1cnJlbnROb2RlPWUscil7dmFyIG49bmV3IHUuTmFtZXNwYWNlUHJlZml4TWFwO24uc2V0KFwieG1sXCIsbC5uYW1lc3BhY2UuWE1MKTt0aGlzLl9zZXJpYWxpemVOb2RlTlMoZSxudWxsLG4se3ZhbHVlOjF9LHQpfWVsc2UgdGhpcy5fc2VyaWFsaXplTm9kZShlLHQpfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplTm9kZU5TPWZ1bmN0aW9uKGUsdCxyLG4saSl7c3dpdGNoKHRoaXMuY3VycmVudE5vZGU9ZSxlLm5vZGVUeXBlKXtjYXNlIGEuTm9kZVR5cGUuRWxlbWVudDp0aGlzLl9zZXJpYWxpemVFbGVtZW50TlMoZSx0LHIsbixpKTticmVhaztjYXNlIGEuTm9kZVR5cGUuRG9jdW1lbnQ6dGhpcy5fc2VyaWFsaXplRG9jdW1lbnROUyhlLHQscixuLGkpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5Db21tZW50OnRoaXMuX3NlcmlhbGl6ZUNvbW1lbnQoZSxpKTticmVhaztjYXNlIGEuTm9kZVR5cGUuVGV4dDp0aGlzLl9zZXJpYWxpemVUZXh0KGUsaSk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQ6dGhpcy5fc2VyaWFsaXplRG9jdW1lbnRGcmFnbWVudE5TKGUsdCxyLG4saSk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLkRvY3VtZW50VHlwZTp0aGlzLl9zZXJpYWxpemVEb2N1bWVudFR5cGUoZSxpKTticmVhaztjYXNlIGEuTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uOnRoaXMuX3NlcmlhbGl6ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihlLGkpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5DRGF0YTp0aGlzLl9zZXJpYWxpemVDRGF0YShlLGkpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBub2RlIHR5cGU6IFwiK2Uubm9kZVR5cGUpfX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZU5vZGU9ZnVuY3Rpb24oZSx0KXtzd2l0Y2godGhpcy5jdXJyZW50Tm9kZT1lLGUubm9kZVR5cGUpe2Nhc2UgYS5Ob2RlVHlwZS5FbGVtZW50OnRoaXMuX3NlcmlhbGl6ZUVsZW1lbnQoZSx0KTticmVhaztjYXNlIGEuTm9kZVR5cGUuRG9jdW1lbnQ6dGhpcy5fc2VyaWFsaXplRG9jdW1lbnQoZSx0KTticmVhaztjYXNlIGEuTm9kZVR5cGUuQ29tbWVudDp0aGlzLl9zZXJpYWxpemVDb21tZW50KGUsdCk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLlRleHQ6dGhpcy5fc2VyaWFsaXplVGV4dChlLHQpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50OnRoaXMuX3NlcmlhbGl6ZURvY3VtZW50RnJhZ21lbnQoZSx0KTticmVhaztjYXNlIGEuTm9kZVR5cGUuRG9jdW1lbnRUeXBlOnRoaXMuX3NlcmlhbGl6ZURvY3VtZW50VHlwZShlLHQpO2JyZWFrO2Nhc2UgYS5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb246dGhpcy5fc2VyaWFsaXplUHJvY2Vzc2luZ0luc3RydWN0aW9uKGUsdCk7YnJlYWs7Y2FzZSBhLk5vZGVUeXBlLkNEYXRhOnRoaXMuX3NlcmlhbGl6ZUNEYXRhKGUsdCk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG5vZGUgdHlwZTogXCIrZS5ub2RlVHlwZSl9fSxlLnByb3RvdHlwZS5fc2VyaWFsaXplRWxlbWVudE5TPWZ1bmN0aW9uKHQscixpLGEscyl7dmFyIHUsaCxwPVtdO2lmKHMmJigtMSE9PXQubG9jYWxOYW1lLmluZGV4T2YoXCI6XCIpfHwhYy54bWxfaXNOYW1lKHQubG9jYWxOYW1lKSkpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt2YXIgZj1cIlwiLGQ9ITEsbT0hMSx5PWkuY29weSgpLHY9e30sXz10aGlzLl9yZWNvcmROYW1lc3BhY2VJbmZvcm1hdGlvbih0LHksdiksZz1yLGI9dC5uYW1lc3BhY2VVUkk7aWYoZz09PWIpbnVsbCE9PV8mJihtPSEwKSxmPWI9PT1sLm5hbWVzcGFjZS5YTUw/XCJ4bWw6XCIrdC5sb2NhbE5hbWU6dC5sb2NhbE5hbWUsdGhpcy5iZWdpbkVsZW1lbnQoZiksdGhpcy5vcGVuVGFnQmVnaW4oZik7ZWxzZXt2YXIgeD10LnByZWZpeCx3PW51bGw7aWYobnVsbD09PXgmJmI9PT1ffHwodz15LmdldCh4LGIpKSxcInhtbG5zXCI9PT14KXtpZihzKXRocm93IG5ldyBFcnJvcihcIkFuIGVsZW1lbnQgY2Fubm90IGhhdmUgdGhlICd4bWxucycgcHJlZml4ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3c9eH1udWxsIT09dz8oZj13K1wiOlwiK3QubG9jYWxOYW1lLG51bGwhPT1fJiZfIT09bC5uYW1lc3BhY2UuWE1MJiYoZz1ffHxudWxsKSx0aGlzLmJlZ2luRWxlbWVudChmKSx0aGlzLm9wZW5UYWdCZWdpbihmKSk6bnVsbCE9PXg/KHggaW4gdiYmKHg9dGhpcy5fZ2VuZXJhdGVQcmVmaXgoYix5LGEpKSx5LnNldCh4LGIpLGYrPXgrXCI6XCIrdC5sb2NhbE5hbWUsdGhpcy5iZWdpbkVsZW1lbnQoZiksdGhpcy5vcGVuVGFnQmVnaW4oZikscC5wdXNoKFtudWxsLFwieG1sbnNcIix4LHRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKGIscyldKSxudWxsIT09XyYmKGc9X3x8bnVsbCkpOm51bGw9PT1ffHxudWxsIT09XyYmXyE9PWI/KG09ITAsZis9dC5sb2NhbE5hbWUsZz1iLHRoaXMuYmVnaW5FbGVtZW50KGYpLHRoaXMub3BlblRhZ0JlZ2luKGYpLHAucHVzaChbbnVsbCxudWxsLFwieG1sbnNcIix0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShiLHMpXSkpOihmKz10LmxvY2FsTmFtZSxnPWIsdGhpcy5iZWdpbkVsZW1lbnQoZiksdGhpcy5vcGVuVGFnQmVnaW4oZikpfXAucHVzaC5hcHBseShwLG8odGhpcy5fc2VyaWFsaXplQXR0cmlidXRlc05TKHQseSxhLHYsbSxzKSkpLHRoaXMuYXR0cmlidXRlcyhwKTt2YXIgRT1iPT09bC5uYW1lc3BhY2UuSFRNTDtpZihFJiYwPT09dC5jaGlsZE5vZGVzLmxlbmd0aCYmZS5fVm9pZEVsZW1lbnROYW1lcy5oYXModC5sb2NhbE5hbWUpPyh0aGlzLm9wZW5UYWdFbmQoZiwhMCwhMCksdGhpcy5lbmRFbGVtZW50KGYpLGQ9ITApOkV8fDAhPT10LmNoaWxkTm9kZXMubGVuZ3RoP3RoaXMub3BlblRhZ0VuZChmLCExLCExKToodGhpcy5vcGVuVGFnRW5kKGYsITAsITEpLHRoaXMuZW5kRWxlbWVudChmKSxkPSEwKSwhZCl7aWYoRSYmXCJ0ZW1wbGF0ZVwiPT09dC5sb2NhbE5hbWUpO2Vsc2UgdHJ5e2Zvcih2YXIgRD1uKHQuY2hpbGROb2RlcyksUz1ELm5leHQoKTshUy5kb25lO1M9RC5uZXh0KCkpe3ZhciBDPVMudmFsdWU7dGhpcy5sZXZlbCsrLHRoaXMuX3NlcmlhbGl6ZU5vZGVOUyhDLGcseSxhLHMpLHRoaXMubGV2ZWwtLX19Y2F0Y2goZSl7dT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7UyYmIVMuZG9uZSYmKGg9RC5yZXR1cm4pJiZoLmNhbGwoRCl9ZmluYWxseXtpZih1KXRocm93IHUuZXJyb3J9fXRoaXMuY2xvc2VUYWcoZiksdGhpcy5lbmRFbGVtZW50KGYpfX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZUVsZW1lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixpO2lmKHQmJigtMSE9PWUubG9jYWxOYW1lLmluZGV4T2YoXCI6XCIpfHwhYy54bWxfaXNOYW1lKGUubG9jYWxOYW1lKSkpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt2YXIgbz0hMSxhPWUubG9jYWxOYW1lO3RoaXMuYmVnaW5FbGVtZW50KGEpLHRoaXMub3BlblRhZ0JlZ2luKGEpO3ZhciBzPXRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZXMoZSx0KTtpZih0aGlzLmF0dHJpYnV0ZXMocyksZS5oYXNDaGlsZE5vZGVzKCk/dGhpcy5vcGVuVGFnRW5kKGEsITEsITEpOih0aGlzLm9wZW5UYWdFbmQoYSwhMCwhMSksdGhpcy5lbmRFbGVtZW50KGEpLG89ITApLCFvKXt0cnl7Zm9yKHZhciB1PW4oZS5fY2hpbGRyZW4pLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgaD1sLnZhbHVlO3RoaXMubGV2ZWwrKyx0aGlzLl9zZXJpYWxpemVOb2RlKGgsdCksdGhpcy5sZXZlbC0tfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYoaT11LnJldHVybikmJmkuY2FsbCh1KX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19dGhpcy5jbG9zZVRhZyhhKSx0aGlzLmVuZEVsZW1lbnQoYSl9fSxlLnByb3RvdHlwZS5fc2VyaWFsaXplRG9jdW1lbnROUz1mdW5jdGlvbihlLHQscixpLG8pe3ZhciBhLHM7aWYobyYmbnVsbD09PWUuZG9jdW1lbnRFbGVtZW50KXRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZG9jdW1lbnQgZWxlbWVudCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt0cnl7Zm9yKHZhciB1PW4oZS5jaGlsZE5vZGVzKSxsPXUubmV4dCgpOyFsLmRvbmU7bD11Lm5leHQoKSl7dmFyIGM9bC52YWx1ZTt0aGlzLl9zZXJpYWxpemVOb2RlTlMoYyx0LHIsaSxvKX19Y2F0Y2goZSl7YT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKHM9dS5yZXR1cm4pJiZzLmNhbGwodSl9ZmluYWxseXtpZihhKXRocm93IGEuZXJyb3J9fX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZURvY3VtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtpZih0JiZudWxsPT09ZS5kb2N1bWVudEVsZW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBkb2N1bWVudCBlbGVtZW50ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3RyeXtmb3IodmFyIG89bihlLl9jaGlsZHJlbiksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe3ZhciBzPWEudmFsdWU7dGhpcy5fc2VyaWFsaXplTm9kZShzLHQpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYoaT1vLnJldHVybikmJmkuY2FsbChvKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19fSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQ29tbWVudD1mdW5jdGlvbihlLHQpe2lmKHQmJighYy54bWxfaXNMZWdhbENoYXIoZS5kYXRhKXx8LTEhPT1lLmRhdGEuaW5kZXhPZihcIi0tXCIpfHxlLmRhdGEuZW5kc1dpdGgoXCItXCIpKSl0aHJvdyBuZXcgRXJyb3IoXCJDb21tZW50IGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3RoaXMuY29tbWVudChlLmRhdGEpfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplVGV4dD1mdW5jdGlvbihlLHQpe2lmKHQmJiFjLnhtbF9pc0xlZ2FsQ2hhcihlLmRhdGEpKXRocm93IG5ldyBFcnJvcihcIlRleHQgZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dmFyIHI9ZS5kYXRhLnJlcGxhY2UoLyg/ISYoW14mO10qKTspJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csXCImZ3Q7XCIpO3RoaXMudGV4dChyKX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZURvY3VtZW50RnJhZ21lbnROUz1mdW5jdGlvbihlLHQscixpLG8pe3ZhciBhLHM7dHJ5e2Zvcih2YXIgdT1uKGUuY2hpbGROb2RlcyksbD11Lm5leHQoKTshbC5kb25lO2w9dS5uZXh0KCkpe3ZhciBjPWwudmFsdWU7dGhpcy5fc2VyaWFsaXplTm9kZU5TKGMsdCxyLGksbyl9fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJihzPXUucmV0dXJuKSYmcy5jYWxsKHUpfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX19LGUucHJvdG90eXBlLl9zZXJpYWxpemVEb2N1bWVudEZyYWdtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTt0cnl7Zm9yKHZhciBvPW4oZS5fY2hpbGRyZW4pLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgcz1hLnZhbHVlO3RoaXMuX3NlcmlhbGl6ZU5vZGUocyx0KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKGk9by5yZXR1cm4pJiZpLmNhbGwobyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZURvY3VtZW50VHlwZT1mdW5jdGlvbihlLHQpe2lmKHQmJiFjLnhtbF9pc1B1YmlkQ2hhcihlLnB1YmxpY0lkKSl0aHJvdyBuZXcgRXJyb3IoXCJEb2NUeXBlIHB1YmxpYyBpZGVudGlmaWVyIGRvZXMgbm90IG1hdGNoIFB1YmlkQ2hhciBjb25zdHJ1Y3QgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7aWYodCYmKCFjLnhtbF9pc0xlZ2FsQ2hhcihlLnN5c3RlbUlkKXx8LTEhPT1lLnN5c3RlbUlkLmluZGV4T2YoJ1wiJykmJi0xIT09ZS5zeXN0ZW1JZC5pbmRleE9mKFwiJ1wiKSkpdGhyb3cgbmV3IEVycm9yKFwiRG9jVHlwZSBzeXN0ZW0gaWRlbnRpZmllciBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dGhpcy5kb2NUeXBlKGUubmFtZSxlLnB1YmxpY0lkLGUuc3lzdGVtSWQpfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplUHJvY2Vzc2luZ0luc3RydWN0aW9uPWZ1bmN0aW9uKGUsdCl7aWYodCYmKC0xIT09ZS50YXJnZXQuaW5kZXhPZihcIjpcIil8fC9eeG1sJC9pLnRlc3QoZS50YXJnZXQpKSl0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNzaW5nIGluc3RydWN0aW9uIHRhcmdldCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7aWYodCYmKCFjLnhtbF9pc0xlZ2FsQ2hhcihlLmRhdGEpfHwtMSE9PWUuZGF0YS5pbmRleE9mKFwiPz5cIikpKXRocm93IG5ldyBFcnJvcihcIlByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dGhpcy5pbnN0cnVjdGlvbihlLnRhcmdldCxlLmRhdGEpfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplQ0RhdGE9ZnVuY3Rpb24oZSx0KXtpZih0JiYtMSE9PWUuZGF0YS5pbmRleE9mKFwiXV0+XCIpKXRocm93IG5ldyBFcnJvcihcIkNEQVRBIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt0aGlzLmNkYXRhKGUuZGF0YSl9LGUucHJvdG90eXBlLl9zZXJpYWxpemVBdHRyaWJ1dGVzTlM9ZnVuY3Rpb24oZSx0LHIsaSxvLGEpe3ZhciB1LGgscD1bXSxmPWE/bmV3IHMuTG9jYWxOYW1lU2V0OnZvaWQgMDt0cnl7Zm9yKHZhciBkPW4oZS5hdHRyaWJ1dGVzKSxtPWQubmV4dCgpOyFtLmRvbmU7bT1kLm5leHQoKSl7dmFyIHk9bS52YWx1ZTtpZihhfHxvfHxudWxsIT09eS5uYW1lc3BhY2VVUkkpe2lmKGEmJmYmJmYuaGFzKHkubmFtZXNwYWNlVVJJLHkubG9jYWxOYW1lKSl0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IGNvbnRhaW5zIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2EmJmYmJmYuc2V0KHkubmFtZXNwYWNlVVJJLHkubG9jYWxOYW1lKTt2YXIgdj15Lm5hbWVzcGFjZVVSSSxfPW51bGw7aWYobnVsbCE9PXYpaWYoXz10LmdldCh5LnByZWZpeCx2KSx2PT09bC5uYW1lc3BhY2UuWE1MTlMpe2lmKHkudmFsdWU9PT1sLm5hbWVzcGFjZS5YTUx8fG51bGw9PT15LnByZWZpeCYmb3x8bnVsbCE9PXkucHJlZml4JiYoISh5LmxvY2FsTmFtZSBpbiBpKXx8aVt5LmxvY2FsTmFtZV0hPT15LnZhbHVlKSYmdC5oYXMoeS5sb2NhbE5hbWUseS52YWx1ZSkpY29udGludWU7aWYoYSYmeS52YWx1ZT09PWwubmFtZXNwYWNlLlhNTE5TKXRocm93IG5ldyBFcnJvcihcIlhNTE5TIG5hbWVzcGFjZSBpcyByZXNlcnZlZCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtpZihhJiZcIlwiPT09eS52YWx1ZSl0aHJvdyBuZXcgRXJyb3IoXCJOYW1lc3BhY2UgcHJlZml4IGRlY2xhcmF0aW9ucyBjYW5ub3QgYmUgdXNlZCB0byB1bmRlY2xhcmUgYSBuYW1lc3BhY2UgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7XCJ4bWxuc1wiPT09eS5wcmVmaXgmJihfPVwieG1sbnNcIil9ZWxzZSBudWxsPT09XyYmKF89bnVsbD09PXkucHJlZml4fHx0Lmhhc1ByZWZpeCh5LnByZWZpeCkmJiF0Lmhhcyh5LnByZWZpeCx2KT90aGlzLl9nZW5lcmF0ZVByZWZpeCh2LHQscik6eS5wcmVmaXgscC5wdXNoKFtudWxsLFwieG1sbnNcIixfLHRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKHYsYSldKSk7aWYobnVsbCE9PV8mJl8sYSYmKC0xIT09eS5sb2NhbE5hbWUuaW5kZXhPZihcIjpcIil8fCFjLnhtbF9pc05hbWUoeS5sb2NhbE5hbWUpfHxcInhtbG5zXCI9PT15LmxvY2FsTmFtZSYmbnVsbD09PXYpKXRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtwLnB1c2goW3YsXyx5LmxvY2FsTmFtZSx0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh5LnZhbHVlLGEpXSl9ZWxzZSBwLnB1c2goW251bGwsbnVsbCx5LmxvY2FsTmFtZSx0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh5LnZhbHVlLGEpXSl9fWNhdGNoKGUpe3U9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e20mJiFtLmRvbmUmJihoPWQucmV0dXJuKSYmaC5jYWxsKGQpfWZpbmFsbHl7aWYodSl0aHJvdyB1LmVycm9yfX1yZXR1cm4gcH0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZUF0dHJpYnV0ZXM9ZnVuY3Rpb24oZSx0KXt2YXIgcixpLG89W10sYT10P3t9OnZvaWQgMDt0cnl7Zm9yKHZhciBzPW4oZS5hdHRyaWJ1dGVzKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dmFyIGw9dS52YWx1ZTtpZih0KXtpZih0JiZhJiZsLmxvY2FsTmFtZSBpbiBhKXRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgY29udGFpbnMgZHVwbGljYXRlIGF0dHJpYnV0ZXMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7aWYodCYmYSYmKGFbbC5sb2NhbE5hbWVdPSEwKSx0JiYoLTEhPT1sLmxvY2FsTmFtZS5pbmRleE9mKFwiOlwiKXx8IWMueG1sX2lzTmFtZShsLmxvY2FsTmFtZSkpKXRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtvLnB1c2goW251bGwsbnVsbCxsLmxvY2FsTmFtZSx0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShsLnZhbHVlLHQpXSl9ZWxzZSBvLnB1c2goW251bGwsbnVsbCxsLmxvY2FsTmFtZSx0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShsLnZhbHVlLHQpXSl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihpPXMucmV0dXJuKSYmaS5jYWxsKHMpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4gb30sZS5wcm90b3R5cGUuX3JlY29yZE5hbWVzcGFjZUluZm9ybWF0aW9uPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLGE9bnVsbDt0cnl7Zm9yKHZhciBzPW4oZS5hdHRyaWJ1dGVzKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dmFyIGM9dS52YWx1ZSxoPWMubmFtZXNwYWNlVVJJLHA9Yy5wcmVmaXg7aWYoaD09PWwubmFtZXNwYWNlLlhNTE5TKXtpZihudWxsPT09cCl7YT1jLnZhbHVlO2NvbnRpbnVlfXZhciBmPWMubG9jYWxOYW1lLGQ9Yy52YWx1ZTtpZihkPT09bC5uYW1lc3BhY2UuWE1MKWNvbnRpbnVlO2lmKFwiXCI9PT1kJiYoZD1udWxsKSx0LmhhcyhmLGQpKWNvbnRpbnVlO3Quc2V0KGYsZCkscltmXT1kfHxcIlwifX19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dSYmIXUuZG9uZSYmKG89cy5yZXR1cm4pJiZvLmNhbGwocyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxlLnByb3RvdHlwZS5fZ2VuZXJhdGVQcmVmaXg9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPVwibnNcIityLnZhbHVlLnRvU3RyaW5nKCk7cmV0dXJuIHIudmFsdWUrKyx0LnNldChuLGUpLG59LGUucHJvdG90eXBlLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZT1mdW5jdGlvbihlLHQpe2lmKHQmJm51bGwhPT1lJiYhYy54bWxfaXNMZWdhbENoYXIoZSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjaGFyYWN0ZXJzIGluIGF0dHJpYnV0ZSB2YWx1ZS5cIik7cmV0dXJuIG51bGw9PT1lP1wiXCI6ZS5yZXBsYWNlKC8oPyEmKFteJjtdKik7KSYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvPi9nLFwiJmd0O1wiKS5yZXBsYWNlKC9cIi9nLFwiJnF1b3Q7XCIpfSxlLl9Wb2lkRWxlbWVudE5hbWVzPW5ldyBTZXQoW1wiYXJlYVwiLFwiYmFzZVwiLFwiYmFzZWZvbnRcIixcImJnc291bmRcIixcImJyXCIsXCJjb2xcIixcImVtYmVkXCIsXCJmcmFtZVwiLFwiaHJcIixcImltZ1wiLFwiaW5wdXRcIixcImtleWdlblwiLFwibGlua1wiLFwibWVudWl0ZW1cIixcIm1ldGFcIixcInBhcmFtXCIsXCJzb3VyY2VcIixcInRyYWNrXCIsXCJ3YnJcIl0pLGV9KCk7dC5CYXNlV3JpdGVyPWh9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxpPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDYpLGE9cigzKSxzPXIoNyksdT1yKDI5KSxsPXIoMTcpLGM9cig5Nyk7ZnVuY3Rpb24gaCgpe3ZhciBlPW8uZG9tLndpbmRvdztlLl9tdXRhdGlvbk9ic2VydmVyTWljcm90YXNrUXVldWVkfHwoZS5fbXV0YXRpb25PYnNlcnZlck1pY3JvdGFza1F1ZXVlZD0hMCxQcm9taXNlLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpe3AoKX0pKSl9ZnVuY3Rpb24gcCgpe3ZhciBlLHQscixpLHU9by5kb20ud2luZG93O3UuX211dGF0aW9uT2JzZXJ2ZXJNaWNyb3Rhc2tRdWV1ZWQ9ITE7dmFyIGw9cy5zZXQuY2xvbmUodS5fbXV0YXRpb25PYnNlcnZlcnMpLGg9cy5zZXQuY2xvbmUodS5fc2lnbmFsU2xvdHMpO3Muc2V0LmVtcHR5KHUuX3NpZ25hbFNsb3RzKTt2YXIgcD1mdW5jdGlvbihlKXt2YXIgdD1zLmxpc3QuY2xvbmUoZS5fcmVjb3JkUXVldWUpO3MubGlzdC5lbXB0eShlLl9yZWNvcmRRdWV1ZSk7Zm9yKHZhciByPTA7cjxlLl9ub2RlTGlzdC5sZW5ndGg7cisrKXt2YXIgbj1lLl9ub2RlTGlzdFtyXTtzLmxpc3QucmVtb3ZlKG4uX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3QsKGZ1bmN0aW9uKHQpe3JldHVybiBhLkd1YXJkLmlzVHJhbnNpZW50UmVnaXN0ZXJlZE9ic2VydmVyKHQpJiZ0Lm9ic2VydmVyPT09ZX0pKX1pZighcy5saXN0LmlzRW1wdHkodCkpdHJ5e2UuX2NhbGxiYWNrLmNhbGwoZSx0LGUpfWNhdGNoKGUpe319O3RyeXtmb3IodmFyIGY9bihsKSxkPWYubmV4dCgpOyFkLmRvbmU7ZD1mLm5leHQoKSl7cChkLnZhbHVlKX19Y2F0Y2godCl7ZT17ZXJyb3I6dH19ZmluYWxseXt0cnl7ZCYmIWQuZG9uZSYmKHQ9Zi5yZXR1cm4pJiZ0LmNhbGwoZil9ZmluYWxseXtpZihlKXRocm93IGUuZXJyb3J9fWlmKG8uZG9tLmZlYXR1cmVzLnNsb3RzKXRyeXtmb3IodmFyIG09bihoKSx5PW0ubmV4dCgpOyF5LmRvbmU7eT1tLm5leHQoKSl7dmFyIHY9eS52YWx1ZTtjLmV2ZW50X2ZpcmVBbkV2ZW50KFwic2xvdGNoYW5nZVwiLHYsdm9pZCAwLHtidWJibGVzOiEwfSl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3kmJiF5LmRvbmUmJihpPW0ucmV0dXJuKSYmaS5jYWxsKG0pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX19ZnVuY3Rpb24gZihlLHQscixvLGEscyxjLHAsZil7Zm9yKHZhciBkLG0seT1uZXcgTWFwLHY9bC50cmVlX2dldEZpcnN0QW5jZXN0b3JOb2RlKHQsITApO251bGwhPT12Oyl7Zm9yKHZhciBfPTA7Xzx2Ll9yZWdpc3RlcmVkT2JzZXJ2ZXJMaXN0Lmxlbmd0aDtfKyspe3ZhciBnPXYuX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3RbX10sYj1nLm9wdGlvbnM7aWYoKHY9PT10fHxiLnN1YnRyZWUpJiYoKFwiYXR0cmlidXRlc1wiIT09ZXx8Yi5hdHRyaWJ1dGVzKSYmKFwiYXR0cmlidXRlc1wiIT09ZXx8IWIuYXR0cmlidXRlRmlsdGVyfHxiLmF0dHJpYnV0ZUZpbHRlci5pbmRleE9mKHJ8fFwiXCIpJiZudWxsPT09bykmJihcImNoYXJhY3RlckRhdGFcIiE9PWV8fGIuY2hhcmFjdGVyRGF0YSkmJihcImNoaWxkTGlzdFwiIT09ZXx8Yi5jaGlsZExpc3QpKSl7dmFyIHg9Zy5vYnNlcnZlcjt5Lmhhcyh4KXx8eS5zZXQoeCxudWxsKSwoXCJhdHRyaWJ1dGVzXCI9PT1lJiZiLmF0dHJpYnV0ZU9sZFZhbHVlfHxcImNoYXJhY3RlckRhdGFcIj09PWUmJmIuY2hhcmFjdGVyRGF0YU9sZFZhbHVlKSYmeS5zZXQoeCxhKX19dj1sLnRyZWVfZ2V0TmV4dEFuY2VzdG9yTm9kZSh0LHYsITApfXRyeXtmb3IodmFyIHc9bih5KSxFPXcubmV4dCgpOyFFLmRvbmU7RT13Lm5leHQoKSl7dmFyIEQ9aShFLnZhbHVlLDIpLFM9RFswXSxDPURbMV0sQT11LmNyZWF0ZV9tdXRhdGlvblJlY29yZChlLHQsdS5jcmVhdGVfbm9kZUxpc3RTdGF0aWModCxzKSx1LmNyZWF0ZV9ub2RlTGlzdFN0YXRpYyh0LGMpLHAsZixyLG8sQyk7Uy5fcmVjb3JkUXVldWUucHVzaChBKX19Y2F0Y2goZSl7ZD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7RSYmIUUuZG9uZSYmKG09dy5yZXR1cm4pJiZtLmNhbGwodyl9ZmluYWxseXtpZihkKXRocm93IGQuZXJyb3J9fWgoKX10Lm9ic2VydmVyX3F1ZXVlQU11dGF0aW9uT2JzZXJ2ZXJNaWNyb3Rhc2s9aCx0Lm9ic2VydmVyX25vdGlmeU11dGF0aW9uT2JzZXJ2ZXJzPXAsdC5vYnNlcnZlcl9xdWV1ZU11dGF0aW9uUmVjb3JkPWYsdC5vYnNlcnZlcl9xdWV1ZVRyZWVNdXRhdGlvblJlY29yZD1mdW5jdGlvbihlLHQscixuLGkpe2YoXCJjaGlsZExpc3RcIixlLG51bGwsbnVsbCxudWxsLHQscixuLGkpfSx0Lm9ic2VydmVyX3F1ZXVlQXR0cmlidXRlTXV0YXRpb25SZWNvcmQ9ZnVuY3Rpb24oZSx0LHIsbil7ZihcImF0dHJpYnV0ZXNcIixlLHQscixuLFtdLFtdLG51bGwsbnVsbCl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cig2KSxpPXIoNyksbz1yKDMpLGE9cig5KSxzPXIoMjkpLHU9cig3MyksbD1yKDUxKSxjPXIoMzApLGg9cigzNykscD1yKDEwNik7ZnVuY3Rpb24gZihlLHQscil7bi5kb20uZmVhdHVyZXMubXV0YXRpb25PYnNlcnZlcnMmJmwub2JzZXJ2ZXJfcXVldWVBdHRyaWJ1dGVNdXRhdGlvblJlY29yZCh0LGUuX2xvY2FsTmFtZSxlLl9uYW1lc3BhY2UsZS5fdmFsdWUpLG4uZG9tLmZlYXR1cmVzLmN1c3RvbUVsZW1lbnRzJiZvLkd1YXJkLmlzQ3VzdG9tRWxlbWVudE5vZGUodCkmJnUuY3VzdG9tRWxlbWVudF9lbnF1ZXVlQUN1c3RvbUVsZW1lbnRDYWxsYmFja1JlYWN0aW9uKHQsXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIixbZS5fbG9jYWxOYW1lLGUuX3ZhbHVlLHIsZS5fbmFtZXNwYWNlXSksbi5kb20uZmVhdHVyZXMuc3RlcHMmJmMuZG9tX3J1bkF0dHJpYnV0ZUNoYW5nZVN0ZXBzKHQsZS5fbG9jYWxOYW1lLGUuX3ZhbHVlLHIsZS5fbmFtZXNwYWNlKSxlLl92YWx1ZT1yfWZ1bmN0aW9uIGQoZSx0KXtuLmRvbS5mZWF0dXJlcy5tdXRhdGlvbk9ic2VydmVycyYmbC5vYnNlcnZlcl9xdWV1ZUF0dHJpYnV0ZU11dGF0aW9uUmVjb3JkKHQsZS5fbG9jYWxOYW1lLGUuX25hbWVzcGFjZSxudWxsKSxuLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmby5HdWFyZC5pc0N1c3RvbUVsZW1lbnROb2RlKHQpJiZ1LmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbih0LFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsW2UuX2xvY2FsTmFtZSxudWxsLGUuX3ZhbHVlLGUuX25hbWVzcGFjZV0pLG4uZG9tLmZlYXR1cmVzLnN0ZXBzJiZjLmRvbV9ydW5BdHRyaWJ1dGVDaGFuZ2VTdGVwcyh0LGUuX2xvY2FsTmFtZSxudWxsLGUuX3ZhbHVlLGUuX25hbWVzcGFjZSksdC5fYXR0cmlidXRlTGlzdC5fYXNBcnJheSgpLnB1c2goZSksZS5fZWxlbWVudD10LHQuX25vZGVEb2N1bWVudC5faGFzTmFtZXNwYWNlc3x8bnVsbD09PWUuX25hbWVzcGFjZSYmbnVsbD09PWUuX25hbWVzcGFjZVByZWZpeCYmXCJ4bWxuc1wiIT09ZS5fbG9jYWxOYW1lfHwodC5fbm9kZURvY3VtZW50Ll9oYXNOYW1lc3BhY2VzPSEwKX1mdW5jdGlvbiBtKGUsdCl7bi5kb20uZmVhdHVyZXMubXV0YXRpb25PYnNlcnZlcnMmJmwub2JzZXJ2ZXJfcXVldWVBdHRyaWJ1dGVNdXRhdGlvblJlY29yZCh0LGUuX2xvY2FsTmFtZSxlLl9uYW1lc3BhY2UsZS5fdmFsdWUpLG4uZG9tLmZlYXR1cmVzLmN1c3RvbUVsZW1lbnRzJiZvLkd1YXJkLmlzQ3VzdG9tRWxlbWVudE5vZGUodCkmJnUuY3VzdG9tRWxlbWVudF9lbnF1ZXVlQUN1c3RvbUVsZW1lbnRDYWxsYmFja1JlYWN0aW9uKHQsXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIixbZS5fbG9jYWxOYW1lLGUuX3ZhbHVlLG51bGwsZS5fbmFtZXNwYWNlXSksbi5kb20uZmVhdHVyZXMuc3RlcHMmJmMuZG9tX3J1bkF0dHJpYnV0ZUNoYW5nZVN0ZXBzKHQsZS5fbG9jYWxOYW1lLGUuX3ZhbHVlLG51bGwsZS5fbmFtZXNwYWNlKTt2YXIgcj10Ll9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KCkuaW5kZXhPZihlKTt0Ll9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KCkuc3BsaWNlKHIsMSksZS5fZWxlbWVudD1udWxsfWZ1bmN0aW9uIHkoZSx0LHIpe24uZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiZsLm9ic2VydmVyX3F1ZXVlQXR0cmlidXRlTXV0YXRpb25SZWNvcmQocixlLl9sb2NhbE5hbWUsZS5fbmFtZXNwYWNlLGUuX3ZhbHVlKSxuLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmby5HdWFyZC5pc0N1c3RvbUVsZW1lbnROb2RlKHIpJiZ1LmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbihyLFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsW2UuX2xvY2FsTmFtZSxlLl92YWx1ZSx0Ll92YWx1ZSxlLl9uYW1lc3BhY2VdKSxuLmRvbS5mZWF0dXJlcy5zdGVwcyYmYy5kb21fcnVuQXR0cmlidXRlQ2hhbmdlU3RlcHMocixlLl9sb2NhbE5hbWUsZS5fdmFsdWUsdC5fdmFsdWUsZS5fbmFtZXNwYWNlKTt2YXIgaT1yLl9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KCkuaW5kZXhPZihlKTstMSE9PWkmJihyLl9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KClbaV09dCksZS5fZWxlbWVudD1udWxsLHQuX2VsZW1lbnQ9cixyLl9ub2RlRG9jdW1lbnQuX2hhc05hbWVzcGFjZXN8fG51bGw9PT10Ll9uYW1lc3BhY2UmJm51bGw9PT10Ll9uYW1lc3BhY2VQcmVmaXgmJlwieG1sbnNcIiE9PXQuX2xvY2FsTmFtZXx8KHIuX25vZGVEb2N1bWVudC5faGFzTmFtZXNwYWNlcz0hMCl9ZnVuY3Rpb24gdihlLHQpe3JldHVybiB0Ll9uYW1lc3BhY2U9PT1pLm5hbWVzcGFjZS5IVE1MJiZcImh0bWxcIj09PXQuX25vZGVEb2N1bWVudC5fdHlwZSYmKGU9ZS50b0xvd2VyQ2FzZSgpKSx0Ll9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KCkuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuX3F1YWxpZmllZE5hbWU9PT1lfSkpfHxudWxsfWZ1bmN0aW9uIF8oZSx0LHIpe3ZhciBuPWV8fG51bGw7cmV0dXJuIHIuX2F0dHJpYnV0ZUxpc3QuX2FzQXJyYXkoKS5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZS5fbmFtZXNwYWNlPT09biYmZS5fbG9jYWxOYW1lPT09dH0pKXx8bnVsbH10LmVsZW1lbnRfaGFzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuLTEhPT10Ll9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KCkuaW5kZXhPZihlKX0sdC5lbGVtZW50X2NoYW5nZT1mLHQuZWxlbWVudF9hcHBlbmQ9ZCx0LmVsZW1lbnRfcmVtb3ZlPW0sdC5lbGVtZW50X3JlcGxhY2U9eSx0LmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVCeU5hbWU9dix0LmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVCeU5hbWVzcGFjZUFuZExvY2FsTmFtZT1fLHQuZWxlbWVudF9nZXRBbkF0dHJpYnV0ZVZhbHVlPWZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT1yJiYocj1cIlwiKTt2YXIgbj1fKHIsdCxlKTtyZXR1cm4gbnVsbD09PW4/XCJcIjpuLl92YWx1ZX0sdC5lbGVtZW50X3NldEFuQXR0cmlidXRlPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9PWUuX2VsZW1lbnQmJmUuX2VsZW1lbnQhPT10KXRocm93IG5ldyBhLkluVXNlQXR0cmlidXRlRXJyb3IoXCJUaGlzIGF0dHJpYnV0ZSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQ6IFwiK2UuX3F1YWxpZmllZE5hbWUrXCIgYXMgYSBjaGlsZCBvZiBcIitlLl9lbGVtZW50Ll9xdWFsaWZpZWROYW1lK1wiLlwiKTt2YXIgcj1fKGUuX25hbWVzcGFjZXx8XCJcIixlLl9sb2NhbE5hbWUsdCk7cmV0dXJuIHI9PT1lP2U6KG51bGwhPT1yP3kocixlLHQpOmQoZSx0KSxyKX0sdC5lbGVtZW50X3NldEFuQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oZSx0LHIsbixpKXt2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1pJiYoaT1udWxsKTt2YXIgbz1fKGl8fFwiXCIsdCxlKTtpZihudWxsPT09byl7dmFyIGE9cy5jcmVhdGVfYXR0cihlLl9ub2RlRG9jdW1lbnQsdCk7cmV0dXJuIGEuX25hbWVzcGFjZT1pLGEuX25hbWVzcGFjZVByZWZpeD1uLGEuX3ZhbHVlPXIsdm9pZCBkKGEsZSl9ZihvLGUscil9LHQuZWxlbWVudF9yZW1vdmVBbkF0dHJpYnV0ZUJ5TmFtZT1mdW5jdGlvbihlLHQpe3ZhciByPXYoZSx0KTtyZXR1cm4gbnVsbCE9PXImJm0ocix0KSxyfSx0LmVsZW1lbnRfcmVtb3ZlQW5BdHRyaWJ1dGVCeU5hbWVzcGFjZUFuZExvY2FsTmFtZT1mdW5jdGlvbihlLHQscil7dmFyIG49XyhlLHQscik7cmV0dXJuIG51bGwhPT1uJiZtKG4sciksbn0sdC5lbGVtZW50X2NyZWF0ZUFuRWxlbWVudD1mdW5jdGlvbihlLHQscixvLGwsYyl7dm9pZCAwPT09byYmKG89bnVsbCksdm9pZCAwPT09bCYmKGw9bnVsbCksdm9pZCAwPT09YyYmKGM9ITEpO3ZhciBoPW51bGw7aWYoIW4uZG9tLmZlYXR1cmVzLmN1c3RvbUVsZW1lbnRzKXJldHVybihoPXMuY3JlYXRlX2VsZW1lbnQoZSx0LHIsbykpLl9jdXN0b21FbGVtZW50U3RhdGU9XCJ1bmN1c3RvbWl6ZWRcIixoLl9jdXN0b21FbGVtZW50RGVmaW5pdGlvbj1udWxsLGguX2lzPWwsaDt2YXIgZj11LmN1c3RvbUVsZW1lbnRfbG9va1VwQUN1c3RvbUVsZW1lbnREZWZpbml0aW9uKGUscix0LGwpO2lmKG51bGwhPT1mJiZmLm5hbWUhPT1mLmxvY2FsTmFtZSkoaD1uZXcocC5kb2N1bWVudF9lbGVtZW50SW50ZXJmYWNlKHQsaS5uYW1lc3BhY2UuSFRNTCkpKS5fbG9jYWxOYW1lPXQsaC5fbmFtZXNwYWNlPWkubmFtZXNwYWNlLkhUTUwsaC5fbmFtZXNwYWNlUHJlZml4PW8saC5fY3VzdG9tRWxlbWVudFN0YXRlPVwidW5kZWZpbmVkXCIsaC5fY3VzdG9tRWxlbWVudERlZmluaXRpb249bnVsbCxoLl9pcz1sLGguX25vZGVEb2N1bWVudD1lLGM/dS5jdXN0b21FbGVtZW50X3VwZ3JhZGUoZixoKTp1LmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50VXBncmFkZVJlYWN0aW9uKGgsZik7ZWxzZSBpZihudWxsIT09ZilpZihjKXRyeXt2YXIgZD1uZXcoMCxmLmNvbnN0cnVjdG9yKTtpZihjb25zb2xlLmFzc2VydCh2b2lkIDAhPT1kLl9jdXN0b21FbGVtZW50U3RhdGUpLGNvbnNvbGUuYXNzZXJ0KHZvaWQgMCE9PWQuX2N1c3RvbUVsZW1lbnREZWZpbml0aW9uKSxjb25zb2xlLmFzc2VydChkLl9uYW1lc3BhY2U9PT1pLm5hbWVzcGFjZS5IVE1MKSwwIT09ZC5fYXR0cmlidXRlTGlzdC5sZW5ndGgpdGhyb3cgbmV3IGEuTm90U3VwcG9ydGVkRXJyb3IoXCJDdXN0b20gZWxlbWVudCBhbHJlYWR5IGhhcyBhdHRyaWJ1dGVzLlwiKTtpZigwIT09ZC5fY2hpbGRyZW4uc2l6ZSl0aHJvdyBuZXcgYS5Ob3RTdXBwb3J0ZWRFcnJvcihcIkN1c3RvbSBlbGVtZW50IGFscmVhZHkgaGFzIGNoaWxkIG5vZGVzLlwiKTtpZihudWxsIT09ZC5fcGFyZW50KXRocm93IG5ldyBhLk5vdFN1cHBvcnRlZEVycm9yKFwiQ3VzdG9tIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBwYXJlbnQgbm9kZS5cIik7aWYoZC5fbm9kZURvY3VtZW50IT09ZSl0aHJvdyBuZXcgYS5Ob3RTdXBwb3J0ZWRFcnJvcihcIkN1c3RvbSBlbGVtZW50IGlzIGFscmVhZHkgaW4gYSBkb2N1bWVudC5cIik7aWYoZC5fbG9jYWxOYW1lIT09dCl0aHJvdyBuZXcgYS5Ob3RTdXBwb3J0ZWRFcnJvcihcIkN1c3RvbSBlbGVtZW50IGhhcyBhIGRpZmZlcmVudCBsb2NhbCBuYW1lLlwiKTtkLl9uYW1lc3BhY2VQcmVmaXg9byxkLl9pcz1udWxsfWNhdGNoKHIpeyhoPXMuY3JlYXRlX2h0bWxVbmtub3duRWxlbWVudChlLHQsaS5uYW1lc3BhY2UuSFRNTCxvKSkuX2N1c3RvbUVsZW1lbnRTdGF0ZT1cImZhaWxlZFwiLGguX2N1c3RvbUVsZW1lbnREZWZpbml0aW9uPW51bGwsaC5faXM9bnVsbH1lbHNlKGg9cy5jcmVhdGVfaHRtbEVsZW1lbnQoZSx0LGkubmFtZXNwYWNlLkhUTUwsbykpLl9jdXN0b21FbGVtZW50U3RhdGU9XCJ1bmRlZmluZWRcIixoLl9jdXN0b21FbGVtZW50RGVmaW5pdGlvbj1udWxsLGguX2lzPW51bGwsdS5jdXN0b21FbGVtZW50X2VucXVldWVBQ3VzdG9tRWxlbWVudFVwZ3JhZGVSZWFjdGlvbihoLGYpO2Vsc2V7KGg9bmV3KHAuZG9jdW1lbnRfZWxlbWVudEludGVyZmFjZSh0LHIpKSkuX2xvY2FsTmFtZT10LGguX25hbWVzcGFjZT1yLGguX25hbWVzcGFjZVByZWZpeD1vLGguX2N1c3RvbUVsZW1lbnRTdGF0ZT1cInVuY3VzdG9taXplZFwiLGguX2N1c3RvbUVsZW1lbnREZWZpbml0aW9uPW51bGwsaC5faXM9bCxoLl9ub2RlRG9jdW1lbnQ9ZSxyIT09aS5uYW1lc3BhY2UuSFRNTHx8bnVsbD09PWwmJiF1LmN1c3RvbUVsZW1lbnRfaXNWYWxpZEN1c3RvbUVsZW1lbnROYW1lKHQpfHwoaC5fY3VzdG9tRWxlbWVudFN0YXRlPVwidW5kZWZpbmVkXCIpfWlmKG51bGw9PT1oKXRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgZWxlbWVudC5cIik7cmV0dXJuIGh9LHQuZWxlbWVudF9pbnNlcnRBZGphY2VudD1mdW5jdGlvbihlLHQscil7c3dpdGNoKHQudG9Mb3dlckNhc2UoKSl7Y2FzZVwiYmVmb3JlYmVnaW5cIjpyZXR1cm4gbnVsbD09PWUuX3BhcmVudD9udWxsOmgubXV0YXRpb25fcHJlSW5zZXJ0KHIsZS5fcGFyZW50LGUpO2Nhc2VcImFmdGVyYmVnaW5cIjpyZXR1cm4gaC5tdXRhdGlvbl9wcmVJbnNlcnQocixlLGUuX2ZpcnN0Q2hpbGQpO2Nhc2VcImJlZm9yZWVuZFwiOnJldHVybiBoLm11dGF0aW9uX3ByZUluc2VydChyLGUsbnVsbCk7Y2FzZVwiYWZ0ZXJlbmRcIjpyZXR1cm4gbnVsbD09PWUuX3BhcmVudD9udWxsOmgubXV0YXRpb25fcHJlSW5zZXJ0KHIsZS5fcGFyZW50LGUuX25leHRTaWJsaW5nKTtkZWZhdWx0OnRocm93IG5ldyBhLlN5bnRheEVycm9yKCdJbnZhbGlkIFxcJ3doZXJlXFwnIGFyZ3VtZW50LiBcImJlZm9yZWJlZ2luXCIsIFwiYWZ0ZXJiZWdpblwiLCBcImJlZm9yZWVuZFwiIG9yIFwiYWZ0ZXJlbmRcIiBleHBlY3RlZCcpfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCl7RXJyb3IuY2FsbCh0aGlzKSx0aGlzLm5hbWU9XCJZQU1MRXhjZXB0aW9uXCIsdGhpcy5yZWFzb249ZSx0aGlzLm1hcms9dCx0aGlzLm1lc3NhZ2U9KHRoaXMucmVhc29ufHxcIih1bmtub3duIHJlYXNvbilcIikrKHRoaXMubWFyaz9cIiBcIit0aGlzLm1hcmsudG9TdHJpbmcoKTpcIlwiKSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZT9FcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHRoaXMuY29uc3RydWN0b3IpOnRoaXMuc3RhY2s9KG5ldyBFcnJvcikuc3RhY2t8fFwiXCJ9bi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLG4ucHJvdG90eXBlLmNvbnN0cnVjdG9yPW4sbi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5uYW1lK1wiOiBcIjtyZXR1cm4gdCs9dGhpcy5yZWFzb258fFwiKHVua25vd24gcmVhc29uKVwiLCFlJiZ0aGlzLm1hcmsmJih0Kz1cIiBcIit0aGlzLm1hcmsudG9TdHJpbmcoKSksdH0sZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM5KTtlLmV4cG9ydHM9bmV3IG4oe2luY2x1ZGU6W3IoMTgxKV0saW1wbGljaXQ6W3IoMjkzKSxyKDI5NCldLGV4cGxpY2l0OltyKDI5NSkscigyOTYpLHIoMjk3KSxyKDI5OCldfSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE2KSxpPXIoNzkpLG89cig0MCksYT1yKDI0KSxzPXIoNTYpLHU9cigxNCksbD1yKDExNSksYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3QuZj1uP2M6ZnVuY3Rpb24oZSx0KXtpZihlPWEoZSksdD1zKHQsITApLGwpdHJ5e3JldHVybiBjKGUsdCl9Y2F0Y2goZSl7fWlmKHUoZSx0KSlyZXR1cm4gbyghaS5mLmNhbGwoZSx0KSxlW3RdKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKSlyZXR1cm4gZTt2YXIgcixpO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKGk9ci5jYWxsKGUpKSlyZXR1cm4gaTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZihyPWUudmFsdWVPZikmJiFuKGk9ci5jYWxsKGUpKSlyZXR1cm4gaTtpZighdCYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4oaT1yLmNhbGwoZSkpKXJldHVybiBpO3Rocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgxKSxpPXIoNTgpLG89bihcImtleXNcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvW2VdfHwob1tlXT1pKGUpKX19LGZ1bmN0aW9uKGUsdCl7dmFyIHI9MCxuPU1hdGgucmFuZG9tKCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVyblwiU3ltYm9sKFwiK1N0cmluZyh2b2lkIDA9PT1lP1wiXCI6ZSkrXCIpX1wiKygrK3IrbikudG9TdHJpbmcoMzYpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDIpO2UuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cIkFycmF5XCI9PW4oZSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG4saT1yKDE4KSxvPXIoMTg4KSxhPXIoODQpLHM9cig0NSksdT1yKDE4OSksbD1yKDExNiksYz1yKDU3KSxoPWMoXCJJRV9QUk9UT1wiKSxwPWZ1bmN0aW9uKCl7fSxmPWZ1bmN0aW9uKGUpe3JldHVyblwiPHNjcmlwdD5cIitlK1wiPFxcL3NjcmlwdD5cIn0sZD1mdW5jdGlvbigpe3RyeXtuPWRvY3VtZW50LmRvbWFpbiYmbmV3IEFjdGl2ZVhPYmplY3QoXCJodG1sZmlsZVwiKX1jYXRjaChlKXt9dmFyIGUsdDtkPW4/ZnVuY3Rpb24oZSl7ZS53cml0ZShmKFwiXCIpKSxlLmNsb3NlKCk7dmFyIHQ9ZS5wYXJlbnRXaW5kb3cuT2JqZWN0O3JldHVybiBlPW51bGwsdH0obik6KCh0PWwoXCJpZnJhbWVcIikpLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdS5hcHBlbmRDaGlsZCh0KSx0LnNyYz1TdHJpbmcoXCJqYXZhc2NyaXB0OlwiKSwoZT10LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpLm9wZW4oKSxlLndyaXRlKGYoXCJkb2N1bWVudC5GPU9iamVjdFwiKSksZS5jbG9zZSgpLGUuRik7Zm9yKHZhciByPWEubGVuZ3RoO3ItLTspZGVsZXRlIGQucHJvdG90eXBlW2Fbcl1dO3JldHVybiBkKCl9O3NbaF09ITAsZS5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIG51bGwhPT1lPyhwLnByb3RvdHlwZT1pKGUpLHI9bmV3IHAscC5wcm90b3R5cGU9bnVsbCxyW2hdPWUpOnI9ZCgpLHZvaWQgMD09PXQ/cjpvKHIsdCl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMjEpLGk9cig4NCk7ZS5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLGkpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTUpLmYsaT1yKDE0KSxvPXIoNSkoXCJ0b1N0cmluZ1RhZ1wiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UmJiFpKGU9cj9lOmUucHJvdG90eXBlLG8pJiZuKGUsbyx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnR9KX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgpLGk9cig1KSxvPXIoMTI5KSxhPWkoXCJzcGVjaWVzXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbz49NTF8fCFuKChmdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybih0LmNvbnN0cnVjdG9yPXt9KVthXT1mdW5jdGlvbigpe3JldHVybntmb286MX19LDEhPT10W2VdKEJvb2xlYW4pLmZvb30pKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigxMjIpLmluZGV4T2Ysbz1yKDQ4KSxhPXIoMjgpLHM9W10uaW5kZXhPZix1PSEhcyYmMS9bMV0uaW5kZXhPZigxLC0wKTwwLGw9byhcImluZGV4T2ZcIiksYz1hKFwiaW5kZXhPZlwiLHtBQ0NFU1NPUlM6ITAsMTowfSk7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6dXx8IWx8fCFjfSx7aW5kZXhPZjpmdW5jdGlvbihlKXtyZXR1cm4gdT9zLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8MDppKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE2KSxpPXIoMTUpLmYsbz1GdW5jdGlvbi5wcm90b3R5cGUsYT1vLnRvU3RyaW5nLHM9L15cXHMqZnVuY3Rpb24gKFteIChdKikvO24mJiEoXCJuYW1lXCJpbiBvKSYmaShvLFwibmFtZVwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBhLmNhbGwodGhpcykubWF0Y2gocylbMV19Y2F0Y2goZSl7cmV0dXJuXCJcIn19fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDI1KSxpPXIoMTgpLG89cig4KSxhPXIoMTM2KSxzPVJlZ0V4cC5wcm90b3R5cGUsdT1zLnRvU3RyaW5nLGw9bygoZnVuY3Rpb24oKXtyZXR1cm5cIi9hL2JcIiE9dS5jYWxsKHtzb3VyY2U6XCJhXCIsZmxhZ3M6XCJiXCJ9KX0pKSxjPVwidG9TdHJpbmdcIiE9dS5uYW1lOyhsfHxjKSYmbihSZWdFeHAucHJvdG90eXBlLFwidG9TdHJpbmdcIiwoZnVuY3Rpb24oKXt2YXIgZT1pKHRoaXMpLHQ9U3RyaW5nKGUuc291cmNlKSxyPWUuZmxhZ3M7cmV0dXJuXCIvXCIrdCtcIi9cIitTdHJpbmcodm9pZCAwPT09ciYmZSBpbnN0YW5jZW9mIFJlZ0V4cCYmIShcImZsYWdzXCJpbiBzKT9hLmNhbGwoZSk6cil9KSx7dW5zYWZlOiEwfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDMxKSxyKDMyKSxyKDMzKSxyKDE5KSxyKDEzOCkscigyMCkscig2NikscigyMikscigyMyk7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksbz10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDEpLHM9cigyKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2YXIgbj1lLmNhbGwodGhpcyx0KXx8dGhpcztyZXR1cm4gbi5fd3JpdGVyT3B0aW9ucz1hLmFwcGx5RGVmYXVsdHMocix7Zm9ybWF0Olwib2JqZWN0XCIsd2VsbEZvcm1lZDohMSxncm91cDohMSx2ZXJib3NlOiExfSksbn1yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLnNlcmlhbGl6ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fY3VycmVudExpc3Q9W10sdGhpcy5fY3VycmVudEluZGV4PTAsdGhpcy5fbGlzdFJlZ2lzdGVyPVt0aGlzLl9jdXJyZW50TGlzdF0sdGhpcy5zZXJpYWxpemVOb2RlKGUsdGhpcy5fd3JpdGVyT3B0aW9ucy53ZWxsRm9ybWVkKSx0aGlzLl9wcm9jZXNzKHRoaXMuX2N1cnJlbnRMaXN0LHRoaXMuX3dyaXRlck9wdGlvbnMpfSx0LnByb3RvdHlwZS5fcHJvY2Vzcz1mdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLHUsbCxjO2lmKDA9PT1lLmxlbmd0aClyZXR1cm57fTtmb3IodmFyIGg9e30scD0hMSxmPTAsZD0wLG09MCx5PTAsdj0wO3Y8ZS5sZW5ndGg7disrKXt2YXIgXz1lW3ZdO3N3aXRjaChJPU9iamVjdC5rZXlzKF8pWzBdKXtjYXNlXCJAXCI6Y29udGludWU7Y2FzZVwiI1wiOmYrKzticmVhaztjYXNlXCIhXCI6ZCsrO2JyZWFrO2Nhc2VcIj9cIjptKys7YnJlYWs7Y2FzZVwiJFwiOnkrKzticmVhaztkZWZhdWx0OmhbSV0/cD0hMDpoW0ldPSEwfX12YXIgZz10aGlzLl9nZXRBdHRyS2V5KCksYj10aGlzLl9nZXROb2RlS2V5KHMuTm9kZVR5cGUuVGV4dCkseD10aGlzLl9nZXROb2RlS2V5KHMuTm9kZVR5cGUuQ29tbWVudCksdz10aGlzLl9nZXROb2RlS2V5KHMuTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9uKSxFPXRoaXMuX2dldE5vZGVLZXkocy5Ob2RlVHlwZS5DRGF0YSk7aWYoMT09PWYmJjE9PT1lLmxlbmd0aCYmYS5pc1N0cmluZyhlWzBdW1wiI1wiXSkpcmV0dXJuIGVbMF1bXCIjXCJdO2lmKHApe3ZhciBEPXt9O2Zvcih2PTA7djxlLmxlbmd0aDt2Kyspe189ZVt2XTtpZihcIkBcIj09PShJPU9iamVjdC5rZXlzKF8pWzBdKSl7dmFyIFM9X1tcIkBcIl07MT09PShMPU9iamVjdC5rZXlzKFMpKS5sZW5ndGg/RFtnK0xbMF1dPVNbTFswXV06RFtnXT1fW1wiQFwiXX19dmFyIEM9W107Zm9yKHY9MDt2PGUubGVuZ3RoO3YrKyl7Xz1lW3ZdO3N3aXRjaChJPU9iamVjdC5rZXlzKF8pWzBdKXtjYXNlXCJAXCI6YnJlYWs7Y2FzZVwiI1wiOkMucHVzaCgoKHI9e30pW2JdPV9bXCIjXCJdLHIpKTticmVhaztjYXNlXCIhXCI6Qy5wdXNoKCgobj17fSlbeF09X1tcIiFcIl0sbikpO2JyZWFrO2Nhc2VcIj9cIjpDLnB1c2goKChpPXt9KVt3XT1fW1wiP1wiXSxpKSk7YnJlYWs7Y2FzZVwiJFwiOkMucHVzaCgoKG89e30pW0VdPV8uJCxvKSk7YnJlYWs7ZGVmYXVsdDppZigwIT09KEI9XylbSV0ubGVuZ3RoJiZhLmlzQXJyYXkoQltJXVswXSkpe2Zvcih2YXIgQT1bXSxOPUJbSV0sVD0wO1Q8Ti5sZW5ndGg7VCsrKUEucHVzaCh0aGlzLl9wcm9jZXNzKE5bVF0sdCkpO0MucHVzaCgoKHU9e30pW0ldPUEsdSkpfWVsc2UgdC52ZXJib3NlP0MucHVzaCgoKGw9e30pW0ldPVt0aGlzLl9wcm9jZXNzKEJbSV0sdCldLGwpKTpDLnB1c2goKChjPXt9KVtJXT10aGlzLl9wcm9jZXNzKEJbSV0sdCksYykpfX1yZXR1cm4gRFtiXT1DLER9dmFyIE89MSxGPTEsaz0xLFA9MTtmb3IoRD17fSx2PTA7djxlLmxlbmd0aDt2Kyspe3ZhciBJO189ZVt2XTtzd2l0Y2goST1PYmplY3Qua2V5cyhfKVswXSl7Y2FzZVwiQFwiOlM9X1tcIkBcIl07dmFyIEw9T2JqZWN0LmtleXMoUyk7aWYodC5ncm91cCYmMSE9PUwubGVuZ3RoKURbZ109UztlbHNlIGZvcih2YXIgTSBpbiBTKURbZytNXT1TW01dO2JyZWFrO2Nhc2VcIiNcIjpPPXRoaXMuX3Byb2Nlc3NTcGVjSXRlbShfW1wiI1wiXSxELHQuZ3JvdXAsYixmLE8pO2JyZWFrO2Nhc2VcIiFcIjpGPXRoaXMuX3Byb2Nlc3NTcGVjSXRlbShfW1wiIVwiXSxELHQuZ3JvdXAseCxkLEYpO2JyZWFrO2Nhc2VcIj9cIjprPXRoaXMuX3Byb2Nlc3NTcGVjSXRlbShfW1wiP1wiXSxELHQuZ3JvdXAsdyxtLGspO2JyZWFrO2Nhc2VcIiRcIjpQPXRoaXMuX3Byb2Nlc3NTcGVjSXRlbShfLiQsRCx0Lmdyb3VwLEUseSxQKTticmVhaztkZWZhdWx0OnZhciBCO2lmKDAhPT0oQj1fKVtJXS5sZW5ndGgmJmEuaXNBcnJheShCW0ldWzBdKSl7QT1bXSxOPUJbSV07Zm9yKHZhciBqPTA7ajxOLmxlbmd0aDtqKyspQS5wdXNoKHRoaXMuX3Byb2Nlc3MoTltqXSx0KSk7RFtJXT1BfWVsc2UgdC52ZXJib3NlP0RbSV09W3RoaXMuX3Byb2Nlc3MoQltJXSx0KV06RFtJXT10aGlzLl9wcm9jZXNzKEJbSV0sdCl9fXJldHVybiBEfSx0LnByb3RvdHlwZS5fcHJvY2Vzc1NwZWNJdGVtPWZ1bmN0aW9uKGUsdCxyLG4saSxzKXt2YXIgdSxsO2lmKCFyJiZhLmlzQXJyYXkoZSkmJmkrZS5sZW5ndGg+Mil0cnl7Zm9yKHZhciBjPW8oZSksaD1jLm5leHQoKTshaC5kb25lO2g9Yy5uZXh0KCkpe3ZhciBwPWgudmFsdWU7dFtuKyhzKyspLnRvU3RyaW5nKCldPXB9fWNhdGNoKGUpe3U9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2gmJiFoLmRvbmUmJihsPWMucmV0dXJuKSYmbC5jYWxsKGMpfWZpbmFsbHl7aWYodSl0aHJvdyB1LmVycm9yfX1lbHNlIHRbaT4xP24rKHMrKykudG9TdHJpbmcoKTpuXT1lO3JldHVybiBzfSx0LnByb3RvdHlwZS5iZWdpbkVsZW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHQscixuPVtdO2lmKDA9PT10aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgpdGhpcy5fY3VycmVudExpc3QucHVzaCgoKHQ9e30pW2VdPW4sdCkpO2Vsc2V7dmFyIGk9dGhpcy5fY3VycmVudExpc3RbdGhpcy5fY3VycmVudExpc3QubGVuZ3RoLTFdO2lmKHRoaXMuX2lzRWxlbWVudE5vZGUoaSxlKSlpZigwIT09aVtlXS5sZW5ndGgmJmEuaXNBcnJheShpW2VdWzBdKSlpW2VdLnB1c2gobik7ZWxzZSBpW2VdPVtpW2VdLG5dO2Vsc2UgdGhpcy5fY3VycmVudExpc3QucHVzaCgoKHI9e30pW2VdPW4scikpfXRoaXMuX2N1cnJlbnRJbmRleCsrLHRoaXMuX2xpc3RSZWdpc3Rlci5sZW5ndGg+dGhpcy5fY3VycmVudEluZGV4P3RoaXMuX2xpc3RSZWdpc3Rlclt0aGlzLl9jdXJyZW50SW5kZXhdPW46dGhpcy5fbGlzdFJlZ2lzdGVyLnB1c2gobiksdGhpcy5fY3VycmVudExpc3Q9bn0sdC5wcm90b3R5cGUuZW5kRWxlbWVudD1mdW5jdGlvbigpe3RoaXMuX2N1cnJlbnRMaXN0PXRoaXMuX2xpc3RSZWdpc3RlclstLXRoaXMuX2N1cnJlbnRJbmRleF19LHQucHJvdG90eXBlLmF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe3ZhciByLG47aWYoMD09PXRoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aCl0aGlzLl9jdXJyZW50TGlzdC5wdXNoKHtcIkBcIjoocj17fSxyW2VdPXQscil9KTtlbHNle3ZhciBpPXRoaXMuX2N1cnJlbnRMaXN0W3RoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aC0xXTt0aGlzLl9pc0F0dHJOb2RlKGkpP2lbXCJAXCJdW2VdPXQ6dGhpcy5fY3VycmVudExpc3QucHVzaCh7XCJAXCI6KG49e30sbltlXT10LG4pfSl9fSx0LnByb3RvdHlwZS5jb21tZW50PWZ1bmN0aW9uKGUpe2lmKDA9PT10aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgpdGhpcy5fY3VycmVudExpc3QucHVzaCh7XCIhXCI6ZX0pO2Vsc2V7dmFyIHQ9dGhpcy5fY3VycmVudExpc3RbdGhpcy5fY3VycmVudExpc3QubGVuZ3RoLTFdO3RoaXMuX2lzQ29tbWVudE5vZGUodCk/YS5pc0FycmF5KHRbXCIhXCJdKT90W1wiIVwiXS5wdXNoKGUpOnRbXCIhXCJdPVt0W1wiIVwiXSxlXTp0aGlzLl9jdXJyZW50TGlzdC5wdXNoKHtcIiFcIjplfSl9fSx0LnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKGUpe2lmKDA9PT10aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgpdGhpcy5fY3VycmVudExpc3QucHVzaCh7XCIjXCI6ZX0pO2Vsc2V7dmFyIHQ9dGhpcy5fY3VycmVudExpc3RbdGhpcy5fY3VycmVudExpc3QubGVuZ3RoLTFdO3RoaXMuX2lzVGV4dE5vZGUodCk/YS5pc0FycmF5KHRbXCIjXCJdKT90W1wiI1wiXS5wdXNoKGUpOnRbXCIjXCJdPVt0W1wiI1wiXSxlXTp0aGlzLl9jdXJyZW50TGlzdC5wdXNoKHtcIiNcIjplfSl9fSx0LnByb3RvdHlwZS5pbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe3ZhciByPVwiXCI9PT10P2U6ZStcIiBcIit0O2lmKDA9PT10aGlzLl9jdXJyZW50TGlzdC5sZW5ndGgpdGhpcy5fY3VycmVudExpc3QucHVzaCh7XCI/XCI6cn0pO2Vsc2V7dmFyIG49dGhpcy5fY3VycmVudExpc3RbdGhpcy5fY3VycmVudExpc3QubGVuZ3RoLTFdO3RoaXMuX2lzSW5zdHJ1Y3Rpb25Ob2RlKG4pP2EuaXNBcnJheShuW1wiP1wiXSk/bltcIj9cIl0ucHVzaChyKTpuW1wiP1wiXT1bbltcIj9cIl0scl06dGhpcy5fY3VycmVudExpc3QucHVzaCh7XCI/XCI6cn0pfX0sdC5wcm90b3R5cGUuY2RhdGE9ZnVuY3Rpb24oZSl7aWYoMD09PXRoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aCl0aGlzLl9jdXJyZW50TGlzdC5wdXNoKHskOmV9KTtlbHNle3ZhciB0PXRoaXMuX2N1cnJlbnRMaXN0W3RoaXMuX2N1cnJlbnRMaXN0Lmxlbmd0aC0xXTt0aGlzLl9pc0NEQVRBTm9kZSh0KT9hLmlzQXJyYXkodC4kKT90LiQucHVzaChlKTp0LiQ9W3QuJCxlXTp0aGlzLl9jdXJyZW50TGlzdC5wdXNoKHskOmV9KX19LHQucHJvdG90eXBlLl9pc0F0dHJOb2RlPWZ1bmN0aW9uKGUpe3JldHVyblwiQFwiaW4gZX0sdC5wcm90b3R5cGUuX2lzVGV4dE5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCIjXCJpbiBlfSx0LnByb3RvdHlwZS5faXNDb21tZW50Tm9kZT1mdW5jdGlvbihlKXtyZXR1cm5cIiFcImluIGV9LHQucHJvdG90eXBlLl9pc0luc3RydWN0aW9uTm9kZT1mdW5jdGlvbihlKXtyZXR1cm5cIj9cImluIGV9LHQucHJvdG90eXBlLl9pc0NEQVRBTm9kZT1mdW5jdGlvbihlKXtyZXR1cm5cIiRcImluIGV9LHQucHJvdG90eXBlLl9pc0VsZW1lbnROb2RlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQgaW4gZX0sdC5wcm90b3R5cGUuX2dldEF0dHJLZXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5hdHR9LHQucHJvdG90eXBlLl9nZXROb2RlS2V5PWZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlIHMuTm9kZVR5cGUuQ29tbWVudDpyZXR1cm4gdGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5jb21tZW50O2Nhc2Ugcy5Ob2RlVHlwZS5UZXh0OnJldHVybiB0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LnRleHQ7Y2FzZSBzLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbjpyZXR1cm4gdGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5pbnM7Y2FzZSBzLk5vZGVUeXBlLkNEYXRhOnJldHVybiB0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LmNkYXRhO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBub2RlIHR5cGUuXCIpfX0sdH0ocig1MCkuQmFzZVdyaXRlcik7dC5PYmplY3RXcml0ZXI9dX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNCksaT1yKDkzKTtuKHt0YXJnZXQ6XCJSZWdFeHBcIixwcm90bzohMCxmb3JjZWQ6Ly4vLmV4ZWMhPT1pfSx7ZXhlYzppfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLl9pdGVtcz17fSx0aGlzLl9udWxsSXRlbXM9e319cmV0dXJuIGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQpe251bGw9PT1lP3RoaXMuX251bGxJdGVtc1t0XT0hMDoodGhpcy5faXRlbXNbZV18fCh0aGlzLl9pdGVtc1tlXT17fSksdGhpcy5faXRlbXNbZV1bdF09ITApfSxlLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbD09PWU/ITA9PT10aGlzLl9udWxsSXRlbXNbdF06ISF0aGlzLl9pdGVtc1tlXSYmITA9PT10aGlzLl9pdGVtc1tlXVt0XX0sZX0oKTt0LkxvY2FsTmFtZVNldD1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoOSksbz1yKDMpLGE9cigwKSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX2V2ZW50TGlzdGVuZXJMaXN0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fZXZlbnRMaXN0ZW5lckxpc3R8fCh0aGlzLl9fZXZlbnRMaXN0ZW5lckxpc3Q9W10pfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9ldmVudEhhbmRsZXJNYXBcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19ldmVudEhhbmRsZXJNYXB8fCh0aGlzLl9fZXZlbnRIYW5kbGVyTWFwPXt9KX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT1yJiYocj17cGFzc2l2ZTohMSxvbmNlOiExLGNhcHR1cmU6ITF9KTt2YXIgaSxzPW4oYS5ldmVudFRhcmdldF9mbGF0dGVuTW9yZShyKSwzKSx1PXNbMF0sbD1zWzFdLGM9c1syXTt0JiYoaT1vLkd1YXJkLmlzRXZlbnRMaXN0ZW5lcih0KT90OntoYW5kbGVFdmVudDp0fSxhLmV2ZW50VGFyZ2V0X2FkZEV2ZW50TGlzdGVuZXIodGhpcyx7dHlwZTplLGNhbGxiYWNrOmksY2FwdHVyZTp1LHBhc3NpdmU6bCxvbmNlOmMscmVtb3ZlZDohMX0pKX0sZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09ciYmKHI9e2NhcHR1cmU6ITF9KTt2YXIgbj1hLmV2ZW50VGFyZ2V0X2ZsYXR0ZW4ocik7aWYodClmb3IodmFyIGk9MDtpPHRoaXMuX2V2ZW50TGlzdGVuZXJMaXN0Lmxlbmd0aDtpKyspe3ZhciBzPXRoaXMuX2V2ZW50TGlzdGVuZXJMaXN0W2ldO2lmKHMudHlwZT09PWUmJnMuY2FwdHVyZT09PW4pe2lmKG8uR3VhcmQuaXNFdmVudExpc3RlbmVyKHQpJiZzLmNhbGxiYWNrPT09dCl7YS5ldmVudFRhcmdldF9yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMscyxpKTticmVha31pZih0JiZzLmNhbGxiYWNrLmhhbmRsZUV2ZW50PT09dCl7YS5ldmVudFRhcmdldF9yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMscyxpKTticmVha319fX0sZS5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihlKXtpZihlLl9kaXNwYXRjaEZsYWd8fCFlLl9pbml0aWFsaXplZEZsYWcpdGhyb3cgbmV3IGkuSW52YWxpZFN0YXRlRXJyb3I7cmV0dXJuIGUuX2lzVHJ1c3RlZD0hMSxhLmV2ZW50X2Rpc3BhdGNoKGUsdGhpcyl9LGUucHJvdG90eXBlLl9nZXRUaGVQYXJlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGx9LGV9KCk7dC5FdmVudFRhcmdldEltcGw9c30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMzQpLGE9cigwKSxzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIHI9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiByLl9kYXRhPXQscn1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRhdGFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGF9LHNldDpmdW5jdGlvbihlKXthLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEodGhpcywwLHRoaXMuX2RhdGEubGVuZ3RoLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YS5sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuc3Vic3RyaW5nRGF0YT1mdW5jdGlvbihlLHQpe3JldHVybiBhLmNoYXJhY3RlckRhdGFfc3Vic3RyaW5nRGF0YSh0aGlzLGUsdCl9LHQucHJvdG90eXBlLmFwcGVuZERhdGE9ZnVuY3Rpb24oZSl7cmV0dXJuIGEuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YSh0aGlzLHRoaXMuX2RhdGEubGVuZ3RoLDAsZSl9LHQucHJvdG90eXBlLmluc2VydERhdGE9ZnVuY3Rpb24oZSx0KXthLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEodGhpcyxlLDAsdCl9LHQucHJvdG90eXBlLmRlbGV0ZURhdGE9ZnVuY3Rpb24oZSx0KXthLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEodGhpcyxlLHQsXCJcIil9LHQucHJvdG90eXBlLnJlcGxhY2VEYXRhPWZ1bmN0aW9uKGUsdCxyKXthLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEodGhpcyxlLHQscil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInByZXZpb3VzRWxlbWVudFNpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IE5vbkRvY3VtZW50VHlwZUNoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5leHRFbGVtZW50U2libGluZ1wiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuYmVmb3JlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUuYWZ0ZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IENoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5yZXBsYWNlV2l0aD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdH0oby5Ob2RlSW1wbCk7dC5DaGFyYWN0ZXJEYXRhSW1wbD1zfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0saT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0sbz10aGlzJiZ0aGlzLl9fc3ByZWFkfHxmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllPWUuY29uY2F0KGkoYXJndW1lbnRzW3RdKSk7cmV0dXJuIGV9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoNikscz1yKDMpLHU9cigxKSxsPXIoMTcpLGM9cig1MSk7ZnVuY3Rpb24gaChlKXthLmRvbS53aW5kb3cuX3NpZ25hbFNsb3RzLmFkZChlKSxjLm9ic2VydmVyX3F1ZXVlQU11dGF0aW9uT2JzZXJ2ZXJNaWNyb3Rhc2soKX1mdW5jdGlvbiBwKGUsdCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciByPXMuQ2FzdC5hc05vZGUoZSkuX3BhcmVudDtpZihudWxsPT09cilyZXR1cm4gbnVsbDt2YXIgbj1yLl9zaGFkb3dSb290fHxudWxsO2lmKG51bGw9PT1uKXJldHVybiBudWxsO2lmKHQmJlwib3BlblwiIT09bi5fbW9kZSlyZXR1cm4gbnVsbDtmb3IodmFyIGk9bC50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUobiwhMSwhMCwoZnVuY3Rpb24oZSl7cmV0dXJuIHMuR3VhcmQuaXNTbG90KGUpfSkpO251bGwhPT1pOyl7aWYoaS5fbmFtZT09PWUuX25hbWUpcmV0dXJuIGk7aT1sLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKG4saSwhMSwhMCwoZnVuY3Rpb24oZSl7cmV0dXJuIHMuR3VhcmQuaXNTbG90KGUpfSkpfXJldHVybiBudWxsfWZ1bmN0aW9uIGYoZSl7dmFyIHQscixpPVtdLG89bC50cmVlX3Jvb3ROb2RlKGUpO2lmKCFzLkd1YXJkLmlzU2hhZG93Um9vdChvKSlyZXR1cm4gaTt2YXIgYT1vLl9ob3N0O3RyeXtmb3IodmFyIHU9bihhLl9jaGlsZHJlbiksYz11Lm5leHQoKTshYy5kb25lO2M9dS5uZXh0KCkpe3ZhciBoPWMudmFsdWU7aWYocy5HdWFyZC5pc1Nsb3RhYmxlKGgpKXAoaCk9PT1lJiZpLnB1c2goaCl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2MmJiFjLmRvbmUmJihyPXUucmV0dXJuKSYmci5jYWxsKHUpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gaX1mdW5jdGlvbiBkKGUpe3ZhciB0LHIsaT1mKGUpO2lmKGkubGVuZ3RoPT09ZS5fYXNzaWduZWROb2Rlcy5sZW5ndGgpe2Zvcih2YXIgbz0hMCxhPTA7YTxpLmxlbmd0aDthKyspaWYoaVthXSE9PWUuX2Fzc2lnbmVkTm9kZXNbYV0pe289ITE7YnJlYWt9b3x8aChlKX1lLl9hc3NpZ25lZE5vZGVzPWk7dHJ5e2Zvcih2YXIgcz1uKGkpLHU9cy5uZXh0KCk7IXUuZG9uZTt1PXMubmV4dCgpKXt1LnZhbHVlLl9hc3NpZ25lZFNsb3Q9ZX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dSYmIXUuZG9uZSYmKHI9cy5yZXR1cm4pJiZyLmNhbGwocyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fX10LnNoYWRvd1RyZWVfc2lnbmFsQVNsb3RDaGFuZ2U9aCx0LnNoYWRvd1RyZWVfaXNDb25uZWN0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHMuR3VhcmQuaXNEb2N1bWVudE5vZGUobC50cmVlX3Jvb3ROb2RlKGUsITApKX0sdC5zaGFkb3dUcmVlX2lzQXNzaWduZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lLl9hc3NpZ25lZFNsb3R9LHQuc2hhZG93VHJlZV9maW5kQVNsb3Q9cCx0LnNoYWRvd1RyZWVfZmluZFNsb3RhYmxlcz1mLHQuc2hhZG93VHJlZV9maW5kRmxhdHRlbmVkU2xvdGFibGVzPWZ1bmN0aW9uIGUodCl7dmFyIHIsaSxhLGMsaD1bXSxwPWwudHJlZV9yb290Tm9kZSh0KTtpZighcy5HdWFyZC5pc1NoYWRvd1Jvb3QocCkpcmV0dXJuIGg7dmFyIGQ9Zih0KTtpZih1LmlzRW1wdHkoZCkpdHJ5e2Zvcih2YXIgbT1uKHQuX2NoaWxkcmVuKSx5PW0ubmV4dCgpOyF5LmRvbmU7eT1tLm5leHQoKSl7dmFyIHY9eS52YWx1ZTtzLkd1YXJkLmlzU2xvdGFibGUodikmJmQucHVzaCh2KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7eSYmIXkuZG9uZSYmKGk9bS5yZXR1cm4pJiZpLmNhbGwobSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXRyeXtmb3IodmFyIF89bihkKSxnPV8ubmV4dCgpOyFnLmRvbmU7Zz1fLm5leHQoKSl7dmFyIGI9Zy52YWx1ZTtpZihzLkd1YXJkLmlzU2xvdChiKSYmcy5HdWFyZC5pc1NoYWRvd1Jvb3QobC50cmVlX3Jvb3ROb2RlKGIpKSl7dmFyIHg9ZShiKTtoLnB1c2guYXBwbHkoaCxvKHgpKX1lbHNlIGgucHVzaChiKX19Y2F0Y2goZSl7YT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZyYmIWcuZG9uZSYmKGM9Xy5yZXR1cm4pJiZjLmNhbGwoXyl9ZmluYWxseXtpZihhKXRocm93IGEuZXJyb3J9fXJldHVybiBofSx0LnNoYWRvd1RyZWVfYXNzaWduU2xvdGFibGVzPWQsdC5zaGFkb3dUcmVlX2Fzc2lnblNsb3RhYmxlc0ZvckFUcmVlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1sLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZShlLCEwLCExLChmdW5jdGlvbihlKXtyZXR1cm4gcy5HdWFyZC5pc1Nsb3QoZSl9KSk7bnVsbCE9PXQ7KWQodCksdD1sLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKGUsdCwhMCwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIHMuR3VhcmQuaXNTbG90KGUpfSkpfSx0LnNoYWRvd1RyZWVfYXNzaWduQVNsb3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9cChlKTtudWxsIT09dCYmZCh0KX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj0vW2Etel0oW1xcMC1cXHRcXHgyRFxcLl9hLXpcXHhCN1xceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQ1xcdTIwMERcXHUyMDNGXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF18W1xcdUQ4MDAtXFx1REI3Rl1bXFx1REMwMC1cXHVERkZGXSkqLShbXFwwLVxcdFxceDJEXFwuX2EtelxceEI3XFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDXFx1MjAwRFxcdTIwM0ZcXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXXxbXFx1RDgwMC1cXHVEQjdGXVtcXHVEQzAwLVxcdURGRkZdKSovLGk9bmV3IFNldChbXCJhbm5vdGF0aW9uLXhtbFwiLFwiY29sb3ItcHJvZmlsZVwiLFwiZm9udC1mYWNlXCIsXCJmb250LWZhY2Utc3JjXCIsXCJmb250LWZhY2UtdXJpXCIsXCJmb250LWZhY2UtZm9ybWF0XCIsXCJmb250LWZhY2UtbmFtZVwiLFwibWlzc2luZy1nbHlwaFwiXSksbz1uZXcgU2V0KFtcImFydGljbGVcIixcImFzaWRlXCIsXCJibG9ja3F1b3RlXCIsXCJib2R5XCIsXCJkaXZcIixcImZvb3RlclwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZGVyXCIsXCJtYWluXCIsXCJuYXZcIixcInBcIixcInNlY3Rpb25cIixcInNwYW5cIl0pLGE9bmV3IFNldChbXCJhcmVhXCIsXCJiYXNlXCIsXCJiYXNlZm9udFwiLFwiYmdzb3VuZFwiLFwiYnJcIixcImNvbFwiLFwiZW1iZWRcIixcImZyYW1lXCIsXCJoclwiLFwiaW1nXCIsXCJpbnB1dFwiLFwia2V5Z2VuXCIsXCJsaW5rXCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwicGFyYW1cIixcInNvdXJjZVwiLFwidHJhY2tcIixcIndiclwiXSkscz1uZXcgU2V0KFtcImFydGljbGVcIixcImFzaWRlXCIsXCJibG9ja3F1b3RlXCIsXCJib2R5XCIsXCJkaXZcIixcImZvb3RlclwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZGVyXCIsXCJtYWluXCIsXCJuYXZcIixcInBcIixcInNlY3Rpb25cIixcInNwYW5cIl0pO3QuY3VzdG9tRWxlbWVudF9pc1ZhbGlkQ3VzdG9tRWxlbWVudE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuISFuLnRlc3QoZSkmJiFpLmhhcyhlKX0sdC5jdXN0b21FbGVtZW50X2lzVmFsaWRFbGVtZW50TmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gby5oYXMoZSl9LHQuY3VzdG9tRWxlbWVudF9pc1ZvaWRFbGVtZW50TmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gYS5oYXMoZSl9LHQuY3VzdG9tRWxlbWVudF9pc1ZhbGlkU2hhZG93SG9zdE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHMuaGFzKGUpfSx0LmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50VXBncmFkZVJlYWN0aW9uPWZ1bmN0aW9uKGUsdCl7fSx0LmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbj1mdW5jdGlvbihlLHQscil7fSx0LmN1c3RvbUVsZW1lbnRfdXBncmFkZT1mdW5jdGlvbihlLHQpe30sdC5jdXN0b21FbGVtZW50X3RyeVRvVXBncmFkZT1mdW5jdGlvbihlKXt9LHQuY3VzdG9tRWxlbWVudF9sb29rVXBBQ3VzdG9tRWxlbWVudERlZmluaXRpb249ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIG51bGx9fSxmdW5jdGlvbihlLHQscil7cig0KSh7dGFyZ2V0OlwiU3RyaW5nXCIscHJvdG86ITB9LHtyZXBlYXQ6cigyNTkpfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDI3OCkscig2OCkscigxNzkpLHIoOTQpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMTA5KSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLl9idWlsZGVyT3B0aW9ucz1lLGUucGFyc2VyJiZPYmplY3QuYXNzaWduKHRoaXMsZS5wYXJzZXIpfXJldHVybiBlLnByb3RvdHlwZS5fZG9jVHlwZT1mdW5jdGlvbihlLHQscixuKXtyZXR1cm4gZS5kdGQoe25hbWU6dCxwdWJJRDpyLHN5c0lEOm59KX0sZS5wcm90b3R5cGUuX2NvbW1lbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5jb20odCl9LGUucHJvdG90eXBlLl90ZXh0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUudHh0KHQpfSxlLnByb3RvdHlwZS5faW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLmlucyh0LHIpfSxlLnByb3RvdHlwZS5fY2RhdGE9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5kYXQodCl9LGUucHJvdG90eXBlLl9lbGVtZW50PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdm9pZCAwPT09dD9lLmVsZShyKTplLmVsZSh0LHIpfSxlLnByb3RvdHlwZS5fYXR0cmlidXRlPWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiB2b2lkIDA9PT10P2UuYXR0KHIsbik6ZS5hdHQodCxyLG4pfSxlLnByb3RvdHlwZS5fc2FuaXRpemU9ZnVuY3Rpb24oZSl7cmV0dXJuIG4uc2FuaXRpemVJbnB1dChlLHRoaXMuX2J1aWxkZXJPcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpfSxlLnByb3RvdHlwZS5fZGVjb2RlVGV4dD1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD90OnQucmVwbGFjZSgvJihxdW90fGFtcHxhcG9zfGx0fGd0KTsvZywoZnVuY3Rpb24odCxyKXtyZXR1cm4gZS5fZW50aXR5VGFibGVbcl19KSkucmVwbGFjZSgvJiMoPzp4KFthLWZBLUYwLTldKyl8KFswLTldKykpOy9nLChmdW5jdGlvbihlLHQscil7cmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KHR8fHIsdD8xNjoxMCkpfSkpfSxlLnByb3RvdHlwZS5fZGVjb2RlQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2RlY29kZVRleHQoZSl9LGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX3BhcnNlKGUsdCl9LGUucHJvdG90eXBlLmRvY1R5cGU9ZnVuY3Rpb24oZSx0LHIsbil7cmV0dXJuIHRoaXMuX2RvY1R5cGUoZSx0LHIsbil9LGUucHJvdG90eXBlLmNvbW1lbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fY29tbWVudChlLHQpfSxlLnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX3RleHQoZSx0KX0sZS5wcm90b3R5cGUuaW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLl9pbnN0cnVjdGlvbihlLHQscil9LGUucHJvdG90eXBlLmNkYXRhPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX2NkYXRhKGUsdCl9LGUucHJvdG90eXBlLmVsZW1lbnQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLl9lbGVtZW50KGUsdCxyKX0sZS5wcm90b3R5cGUuYXR0cmlidXRlPWZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiB0aGlzLl9hdHRyaWJ1dGUoZSx0LHIsbil9LGUucHJvdG90eXBlLnNhbml0aXplPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9zYW5pdGl6ZShlKX0sZS5fZW50aXR5VGFibGU9e2x0OlwiPFwiLGd0OlwiPlwiLGFtcDpcIiZcIixxdW90OidcIicsYXBvczpcIidcIn0sZX0oKTt0LkJhc2VSZWFkZXI9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzkpO2UuZXhwb3J0cz1uLkRFRkFVTFQ9bmV3IG4oe2luY2x1ZGU6W3IoNTQpXSxleHBsaWNpdDpbcigyOTkpLHIoMzAwKSxyKDMwMSldfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDE4NSk7dC5YTUxCdWlsZGVySW1wbD1uLlhNTEJ1aWxkZXJJbXBsO3ZhciBpPXIoMzA0KTt0LlhNTEJ1aWxkZXJDQkltcGw9aS5YTUxCdWlsZGVyQ0JJbXBsO3ZhciBvPXIoMTgzKTt0LmJ1aWxkZXI9by5idWlsZGVyLHQuY3JlYXRlPW8uY3JlYXRlLHQuZnJhZ21lbnQ9by5mcmFnbWVudCx0LmNvbnZlcnQ9by5jb252ZXJ0O3ZhciBhPXIoMzA5KTt0LmNyZWF0ZUNCPWEuY3JlYXRlQ0IsdC5mcmFnbWVudENCPWEuZnJhZ21lbnRDQn0sZnVuY3Rpb24oZSx0KXt2YXIgcjtyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e3I9cnx8bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX1jYXRjaChlKXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYocj13aW5kb3cpfWUuZXhwb3J0cz1yfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49e30ucHJvcGVydHlJc0VudW1lcmFibGUsaT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLG89aSYmIW4uY2FsbCh7MToyfSwxKTt0LmY9bz9mdW5jdGlvbihlKXt2YXIgdD1pKHRoaXMsZSk7cmV0dXJuISF0JiZ0LmVudW1lcmFibGV9Om59LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxpPXIoMjEpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3RyeXtpKG4sZSx0KX1jYXRjaChyKXtuW2VdPXR9cmV0dXJuIHR9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0NCksaT1yKDExOCk7KGUuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBpW2VdfHwoaVtlXT12b2lkIDAhPT10P3Q6e30pfSkoXCJ2ZXJzaW9uc1wiLFtdKS5wdXNoKHt2ZXJzaW9uOlwiMy42LjVcIixtb2RlOm4/XCJwdXJlXCI6XCJnbG9iYWxcIixjb3B5cmlnaHQ6XCJcdTAwQTkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KVwifSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEyMSksaT1yKDg0KS5jb25jYXQoXCJsZW5ndGhcIixcInByb3RvdHlwZVwiKTt0LmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsaSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0NyksaT1NYXRoLm1heCxvPU1hdGgubWluO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPW4oZSk7cmV0dXJuIHI8MD9pKHIrdCwwKTpvKHIsdCl9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1bXCJjb25zdHJ1Y3RvclwiLFwiaGFzT3duUHJvcGVydHlcIixcImlzUHJvdG90eXBlT2ZcIixcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsXCJ0b0xvY2FsZVN0cmluZ1wiLFwidG9TdHJpbmdcIixcInZhbHVlT2ZcIl19LGZ1bmN0aW9uKGUsdCl7dC5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgpO2UuZXhwb3J0cz0hIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMmJiFuKChmdW5jdGlvbigpe3JldHVybiFTdHJpbmcoU3ltYm9sKCkpfSkpfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMjcpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobihlKSx2b2lkIDA9PT10KXJldHVybiBlO3N3aXRjaChyKXtjYXNlIDA6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0KX07Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZS5jYWxsKHQscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gZS5jYWxsKHQscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4saSl7cmV0dXJuIGUuY2FsbCh0LHIsbixpKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodCxhcmd1bWVudHMpfX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigxOTUpLG89cigxMzIpLGE9cigxMzMpLHM9cig2MiksdT1yKDIxKSxsPXIoMjUpLGM9cig1KSxoPXIoNDQpLHA9cig0OSksZj1yKDEzMSksZD1mLkl0ZXJhdG9yUHJvdG90eXBlLG09Zi5CVUdHWV9TQUZBUklfSVRFUkFUT1JTLHk9YyhcIml0ZXJhdG9yXCIpLHY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGMsZixfLGcpe2kocix0LGMpO3ZhciBiLHgsdyxFPWZ1bmN0aW9uKGUpe2lmKGU9PT1mJiZOKXJldHVybiBOO2lmKCFtJiZlIGluIEMpcmV0dXJuIENbZV07c3dpdGNoKGUpe2Nhc2VcImtleXNcIjpjYXNlXCJ2YWx1ZXNcIjpjYXNlXCJlbnRyaWVzXCI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzKX19LEQ9dCtcIiBJdGVyYXRvclwiLFM9ITEsQz1lLnByb3RvdHlwZSxBPUNbeV18fENbXCJAQGl0ZXJhdG9yXCJdfHxmJiZDW2ZdLE49IW0mJkF8fEUoZiksVD1cIkFycmF5XCI9PXQmJkMuZW50cmllc3x8QTtpZihUJiYoYj1vKFQuY2FsbChuZXcgZSkpLGQhPT1PYmplY3QucHJvdG90eXBlJiZiLm5leHQmJihofHxvKGIpPT09ZHx8KGE/YShiLGQpOlwiZnVuY3Rpb25cIiE9dHlwZW9mIGJbeV0mJnUoYix5LHYpKSxzKGIsRCwhMCwhMCksaCYmKHBbRF09dikpKSxcInZhbHVlc1wiPT1mJiZBJiZcInZhbHVlc1wiIT09QS5uYW1lJiYoUz0hMCxOPWZ1bmN0aW9uKCl7cmV0dXJuIEEuY2FsbCh0aGlzKX0pLGgmJiFnfHxDW3ldPT09Tnx8dShDLHksTikscFt0XT1OLGYpaWYoeD17dmFsdWVzOkUoXCJ2YWx1ZXNcIiksa2V5czpfP046RShcImtleXNcIiksZW50cmllczpFKFwiZW50cmllc1wiKX0sZylmb3IodyBpbiB4KShtfHxTfHwhKHcgaW4gQykpJiZsKEMsdyx4W3ddKTtlbHNlIG4oe3RhcmdldDp0LHByb3RvOiEwLGZvcmNlZDptfHxTfSx4KTtyZXR1cm4geH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigxMyksbz1yKDU5KSxhPXIoODMpLHM9cigyNiksdT1yKDI0KSxsPXIoMTM0KSxjPXIoNSksaD1yKDYzKSxwPXIoMjgpLGY9aChcInNsaWNlXCIpLGQ9cChcInNsaWNlXCIse0FDQ0VTU09SUzohMCwwOjAsMToyfSksbT1jKFwic3BlY2llc1wiKSx5PVtdLnNsaWNlLHY9TWF0aC5tYXg7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IWZ8fCFkfSx7c2xpY2U6ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGMsaD11KHRoaXMpLHA9cyhoLmxlbmd0aCksZj1hKGUscCksZD1hKHZvaWQgMD09PXQ/cDp0LHApO2lmKG8oaCkmJihcImZ1bmN0aW9uXCIhPXR5cGVvZihyPWguY29uc3RydWN0b3IpfHxyIT09QXJyYXkmJiFvKHIucHJvdG90eXBlKT9pKHIpJiZudWxsPT09KHI9clttXSkmJihyPXZvaWQgMCk6cj12b2lkIDAscj09PUFycmF5fHx2b2lkIDA9PT1yKSlyZXR1cm4geS5jYWxsKGgsZixkKTtmb3Iobj1uZXcodm9pZCAwPT09cj9BcnJheTpyKSh2KGQtZiwwKSksYz0wO2Y8ZDtmKyssYysrKWYgaW4gaCYmbChuLGMsaFtmXSk7cmV0dXJuIG4ubGVuZ3RoPWMsbn19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXt9O25bcig1KShcInRvU3RyaW5nVGFnXCIpXT1cInpcIixlLmV4cG9ydHM9XCJbb2JqZWN0IHpdXCI9PT1TdHJpbmcobil9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDE5KSxyKDEzOCkscigyMCkscig5MikscigyMikscigyMyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5EZWZhdWx0QnVpbGRlck9wdGlvbnM9e3ZlcnNpb246XCIxLjBcIixlbmNvZGluZzp2b2lkIDAsc3RhbmRhbG9uZTp2b2lkIDAsa2VlcE51bGxOb2RlczohMSxrZWVwTnVsbEF0dHJpYnV0ZXM6ITEsaWdub3JlQ29udmVydGVyczohMSxjb252ZXJ0OnthdHQ6XCJAXCIsaW5zOlwiP1wiLHRleHQ6XCIjXCIsY2RhdGE6XCIkXCIsY29tbWVudDpcIiFcIn0sZGVmYXVsdE5hbWVzcGFjZTp7ZWxlOnZvaWQgMCxhdHQ6dm9pZCAwfSxuYW1lc3BhY2VBbGlhczp7aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIix4bWxuczpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIseGxpbms6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJ9LGludmFsaWRDaGFyUmVwbGFjZW1lbnQ6dm9pZCAwLHBhcnNlcjp2b2lkIDB9LHQuWE1MQnVpbGRlck9wdGlvbktleXM9bmV3IFNldChPYmplY3Qua2V5cyh0LkRlZmF1bHRCdWlsZGVyT3B0aW9ucykpLHQuRGVmYXVsdFhNTEJ1aWxkZXJDQk9wdGlvbnM9e2Zvcm1hdDpcInhtbFwiLHdlbGxGb3JtZWQ6ITEscHJldHR5UHJpbnQ6ITEsaW5kZW50OlwiICBcIixuZXdsaW5lOlwiXFxuXCIsb2Zmc2V0OjAsd2lkdGg6MCxhbGxvd0VtcHR5VGFnczohMSxzcGFjZUJlZm9yZVNsYXNoOiExLGtlZXBOdWxsTm9kZXM6ITEsa2VlcE51bGxBdHRyaWJ1dGVzOiExLGlnbm9yZUNvbnZlcnRlcnM6ITEsY29udmVydDp7YXR0OlwiQFwiLGluczpcIj9cIix0ZXh0OlwiI1wiLGNkYXRhOlwiJFwiLGNvbW1lbnQ6XCIhXCJ9LGRlZmF1bHROYW1lc3BhY2U6e2VsZTp2b2lkIDAsYXR0OnZvaWQgMH0sbmFtZXNwYWNlQWxpYXM6e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIseG1sOlwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIseG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHhsaW5rOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wifX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEzOSksaT1yKDE0Myk7ZS5leHBvcnRzPW4oXCJTZXRcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcyxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1swXTp2b2lkIDApfX0pLGkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saSxvPXIoMTM2KSxhPXIoMjIxKSxzPVJlZ0V4cC5wcm90b3R5cGUuZXhlYyx1PVN0cmluZy5wcm90b3R5cGUucmVwbGFjZSxsPXMsYz0obj0vYS8saT0vYiovZyxzLmNhbGwobixcImFcIikscy5jYWxsKGksXCJhXCIpLDAhPT1uLmxhc3RJbmRleHx8MCE9PWkubGFzdEluZGV4KSxoPWEuVU5TVVBQT1JURURfWXx8YS5CUk9LRU5fQ0FSRVQscD12b2lkIDAhPT0vKCk/Py8uZXhlYyhcIlwiKVsxXTsoY3x8cHx8aCkmJihsPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLGE9dGhpcyxsPWgmJmEuc3RpY2t5LGY9by5jYWxsKGEpLGQ9YS5zb3VyY2UsbT0wLHk9ZTtyZXR1cm4gbCYmKC0xPT09KGY9Zi5yZXBsYWNlKFwieVwiLFwiXCIpKS5pbmRleE9mKFwiZ1wiKSYmKGYrPVwiZ1wiKSx5PVN0cmluZyhlKS5zbGljZShhLmxhc3RJbmRleCksYS5sYXN0SW5kZXg+MCYmKCFhLm11bHRpbGluZXx8YS5tdWx0aWxpbmUmJlwiXFxuXCIhPT1lW2EubGFzdEluZGV4LTFdKSYmKGQ9XCIoPzogXCIrZCtcIilcIix5PVwiIFwiK3ksbSsrKSxyPW5ldyBSZWdFeHAoXCJeKD86XCIrZCtcIilcIixmKSkscCYmKHI9bmV3IFJlZ0V4cChcIl5cIitkK1wiJCg/IVxcXFxzKVwiLGYpKSxjJiYodD1hLmxhc3RJbmRleCksbj1zLmNhbGwobD9yOmEseSksbD9uPyhuLmlucHV0PW4uaW5wdXQuc2xpY2UobSksblswXT1uWzBdLnNsaWNlKG0pLG4uaW5kZXg9YS5sYXN0SW5kZXgsYS5sYXN0SW5kZXgrPW5bMF0ubGVuZ3RoKTphLmxhc3RJbmRleD0wOmMmJm4mJihhLmxhc3RJbmRleD1hLmdsb2JhbD9uLmluZGV4K25bMF0ubGVuZ3RoOnQpLHAmJm4mJm4ubGVuZ3RoPjEmJnUuY2FsbChuWzBdLHIsKGZ1bmN0aW9uKCl7Zm9yKGk9MTtpPGFyZ3VtZW50cy5sZW5ndGgtMjtpKyspdm9pZCAwPT09YXJndW1lbnRzW2ldJiYobltpXT12b2lkIDApfSkpLG59KSxlLmV4cG9ydHM9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMjI1KSxpPXIoMTgpLG89cigyNyksYT1yKDI2KSxzPXIoNDcpLHU9cigzNSksbD1yKDIyNiksYz1yKDIyNyksaD1NYXRoLm1heCxwPU1hdGgubWluLGY9TWF0aC5mbG9vcixkPS9cXCQoWyQmJ2BdfFxcZFxcZD98PFtePl0qPikvZyxtPS9cXCQoWyQmJ2BdfFxcZFxcZD8pL2c7bihcInJlcGxhY2VcIiwyLChmdW5jdGlvbihlLHQscixuKXt2YXIgeT1uLlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFLHY9bi5SRVBMQUNFX0tFRVBTXyQwLF89eT9cIiRcIjpcIiQwXCI7cmV0dXJuW2Z1bmN0aW9uKHIsbil7dmFyIGk9dSh0aGlzKSxvPW51bGw9PXI/dm9pZCAwOnJbZV07cmV0dXJuIHZvaWQgMCE9PW8/by5jYWxsKHIsaSxuKTp0LmNhbGwoU3RyaW5nKGkpLHIsbil9LGZ1bmN0aW9uKGUsbil7aWYoIXkmJnZ8fFwic3RyaW5nXCI9PXR5cGVvZiBuJiYtMT09PW4uaW5kZXhPZihfKSl7dmFyIG89cih0LGUsdGhpcyxuKTtpZihvLmRvbmUpcmV0dXJuIG8udmFsdWV9dmFyIHU9aShlKSxmPVN0cmluZyh0aGlzKSxkPVwiZnVuY3Rpb25cIj09dHlwZW9mIG47ZHx8KG49U3RyaW5nKG4pKTt2YXIgbT11Lmdsb2JhbDtpZihtKXt2YXIgYj11LnVuaWNvZGU7dS5sYXN0SW5kZXg9MH1mb3IodmFyIHg9W107Oyl7dmFyIHc9Yyh1LGYpO2lmKG51bGw9PT13KWJyZWFrO2lmKHgucHVzaCh3KSwhbSlicmVhaztcIlwiPT09U3RyaW5nKHdbMF0pJiYodS5sYXN0SW5kZXg9bChmLGEodS5sYXN0SW5kZXgpLGIpKX1mb3IodmFyIEUsRD1cIlwiLFM9MCxDPTA7Qzx4Lmxlbmd0aDtDKyspe3c9eFtDXTtmb3IodmFyIEE9U3RyaW5nKHdbMF0pLE49aChwKHMody5pbmRleCksZi5sZW5ndGgpLDApLFQ9W10sTz0xO088dy5sZW5ndGg7TysrKVQucHVzaCh2b2lkIDA9PT0oRT13W09dKT9FOlN0cmluZyhFKSk7dmFyIEY9dy5ncm91cHM7aWYoZCl7dmFyIGs9W0FdLmNvbmNhdChULE4sZik7dm9pZCAwIT09RiYmay5wdXNoKEYpO3ZhciBQPVN0cmluZyhuLmFwcGx5KHZvaWQgMCxrKSl9ZWxzZSBQPWcoQSxmLE4sVCxGLG4pO04+PVMmJihEKz1mLnNsaWNlKFMsTikrUCxTPU4rQS5sZW5ndGgpfXJldHVybiBEK2Yuc2xpY2UoUyl9XTtmdW5jdGlvbiBnKGUscixuLGksYSxzKXt2YXIgdT1uK2UubGVuZ3RoLGw9aS5sZW5ndGgsYz1tO3JldHVybiB2b2lkIDAhPT1hJiYoYT1vKGEpLGM9ZCksdC5jYWxsKHMsYywoZnVuY3Rpb24odCxvKXt2YXIgcztzd2l0Y2goby5jaGFyQXQoMCkpe2Nhc2VcIiRcIjpyZXR1cm5cIiRcIjtjYXNlXCImXCI6cmV0dXJuIGU7Y2FzZVwiYFwiOnJldHVybiByLnNsaWNlKDAsbik7Y2FzZVwiJ1wiOnJldHVybiByLnNsaWNlKHUpO2Nhc2VcIjxcIjpzPWFbby5zbGljZSgxLC0xKV07YnJlYWs7ZGVmYXVsdDp2YXIgYz0rbztpZigwPT09YylyZXR1cm4gdDtpZihjPmwpe3ZhciBoPWYoYy8xMCk7cmV0dXJuIDA9PT1oP3Q6aDw9bD92b2lkIDA9PT1pW2gtMV0/by5jaGFyQXQoMSk6aVtoLTFdK28uY2hhckF0KDEpOnR9cz1pW2MtMV19cmV0dXJuIHZvaWQgMD09PXM/XCJcIjpzfSkpfX0pKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMuX2l0ZW1zPXt9LHRoaXMuX251bGxJdGVtcz1bXX1yZXR1cm4gZS5wcm90b3R5cGUuY29weT1mdW5jdGlvbigpe3ZhciB0PW5ldyBlO2Zvcih2YXIgciBpbiB0aGlzLl9pdGVtcyl0Ll9pdGVtc1tyXT10aGlzLl9pdGVtc1tyXS5zbGljZSgwKTtyZXR1cm4gdC5fbnVsbEl0ZW1zPXRoaXMuX251bGxJdGVtcy5zbGljZSgwKSx0fSxlLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1udWxsPT09dD90aGlzLl9udWxsSXRlbXM6dGhpcy5faXRlbXNbdF18fG51bGw7aWYobnVsbD09PXIpcmV0dXJuIG51bGw7Zm9yKHZhciBuPW51bGwsaT0wO2k8ci5sZW5ndGg7aSsrKWlmKChuPXJbaV0pPT09ZSlyZXR1cm4gbjtyZXR1cm4gbn0sZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bnVsbD09PXQ/dGhpcy5fbnVsbEl0ZW1zOnRoaXMuX2l0ZW1zW3RdfHxudWxsO3JldHVybiBudWxsIT09ciYmLTEhPT1yLmluZGV4T2YoZSl9LGUucHJvdG90eXBlLmhhc1ByZWZpeD1mdW5jdGlvbihlKXtpZigtMSE9PXRoaXMuX251bGxJdGVtcy5pbmRleE9mKGUpKXJldHVybiEwO2Zvcih2YXIgdCBpbiB0aGlzLl9pdGVtcylpZigtMSE9PXRoaXMuX2l0ZW1zW3RdLmluZGV4T2YoZSkpcmV0dXJuITA7cmV0dXJuITF9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQpe3ZhciByPW51bGw9PT10P3RoaXMuX251bGxJdGVtczp0aGlzLl9pdGVtc1t0XXx8bnVsbDtudWxsIT09dCYmbnVsbD09PXI/dGhpcy5faXRlbXNbdF09W2VdOnIucHVzaChlKX0sZX0oKTt0Lk5hbWVzcGFjZVByZWZpeE1hcD1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5TdXJyb2dhdGU9L1tcXHVEODAwLVxcdURGRkZdLyx0LlNjYWxhclZhbHVlPS9bXFx1RDgwMC1cXHVERkZGXS8sdC5Ob25DaGFyYWN0ZXI9L1tcXHVGREQwLVxcdUZERUZcXHVGRkZFXFx1RkZGRl18W1xcdUQ4M0ZcXHVEODdGXFx1RDhCRlxcdUQ4RkZcXHVEOTNGXFx1RDk3RlxcdUQ5QkZcXHVEOUZGXFx1REEzRlxcdURBN0ZcXHVEQUJGXFx1REFGRlxcdURCM0ZcXHVEQjdGXFx1REJCRlxcdURCRkZdW1xcdURGRkVcXHVERkZGXS8sdC5BU0NJSUNvZGVQb2ludD0vW1xcdTAwMDAtXFx1MDA3Rl0vLHQuQVNDSUlUYWJPck5ld0xpbmU9L1tcXHRcXG5cXHJdLyx0LkFTQ0lJV2hpdGVTcGFjZT0vW1xcdFxcblxcZlxcciBdLyx0LkMwQ29udHJvbD0vW1xcdTAwMDAtXFx1MDAxRl0vLHQuQzBDb250cm9sT3JTcGFjZT0vW1xcdTAwMDAtXFx1MDAxRiBdLyx0LkNvbnRyb2w9L1tcXHUwMDAwLVxcdTAwMUZcXHUwMDdGLVxcdTAwOUZdLyx0LkFTQ0lJRGlnaXQ9L1swLTldLyx0LkFTQ0lJVXBwZXJIZXhEaWdpdD0vWzAtOUEtRl0vLHQuQVNDSUlMb3dlckhleERpZ2l0PS9bMC05YS1mXS8sdC5BU0NJSUhleERpZ2l0PS9bMC05QS1GYS1mXS8sdC5BU0NJSVVwcGVyQWxwaGE9L1tBLVpdLyx0LkFTQ0lJTG93ZXJBbHBoYT0vW2Etel0vLHQuQVNDSUlBbHBoYT0vW0EtWmEtel0vLHQuQVNDSUlBbHBoYW51bWVyaWM9L1swLTlBLVphLXpdL30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LGk9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LG89dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChpKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDYpLHM9cigyKSx1PXIoMyksbD1yKDE3MSksYz1yKDEwNCksaD1yKDkpLHA9cigxNyksZj1yKDcyKSxkPXIoMzApO2Z1bmN0aW9uIG0oZSx0KXt2b2lkIDA9PT10JiYodD12b2lkIDApLHZvaWQgMD09PXQmJih0PW51bGwpO3ZhciByPXkoZSx0LG5ldyBEYXRlLHt9KTtyZXR1cm4gci5faXNUcnVzdGVkPSEwLHJ9ZnVuY3Rpb24geShlLHQscixuKXt2YXIgaT1uZXcgZShcIlwiKTtyZXR1cm4gaS5faW5pdGlhbGl6ZWRGbGFnPSEwLGkuX3RpbWVTdGFtcD1yLmdldFRpbWUoKSxPYmplY3QuYXNzaWduKGksbiksYS5kb20uZmVhdHVyZXMuc3RlcHMmJmQuZG9tX3J1bkV2ZW50Q29uc3RydWN0aW5nU3RlcHMoaSksaX1mdW5jdGlvbiB2KGUsdCxyLGkpe3ZhciBvLGEsbCxjO3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1pJiYoaT17dmFsdWU6ITF9KTt2YXIgaD0hMTtlLl9kaXNwYXRjaEZsYWc9ITA7dmFyIGQ9dDtpZihyKXt2YXIgbT10Ll9hc3NvY2lhdGVkRG9jdW1lbnQ7dS5HdWFyZC5pc0RvY3VtZW50Tm9kZShtKSYmKGQ9bSl9dmFyIHk9bnVsbCx2PXAudHJlZV9yZXRhcmdldChlLl9yZWxhdGVkVGFyZ2V0LHQpO2lmKHQhPT12fHx0PT09ZS5fcmVsYXRlZFRhcmdldCl7dmFyIGI9W107dHJ5e2Zvcih2YXIgeD1uKGUuX3RvdWNoVGFyZ2V0TGlzdCksdz14Lm5leHQoKTshdy5kb25lO3c9eC5uZXh0KCkpe3ZhciBFPXcudmFsdWU7Yi5wdXNoKHAudHJlZV9yZXRhcmdldChFLHQpKX19Y2F0Y2goZSl7bz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dyYmIXcuZG9uZSYmKGE9eC5yZXR1cm4pJiZhLmNhbGwoeCl9ZmluYWxseXtpZihvKXRocm93IG8uZXJyb3J9fV8oZSx0LGQsdixiLCExKTt2YXIgRD11Lkd1YXJkLmlzTW91c2VFdmVudChlKSYmXCJjbGlja1wiPT09ZS5fdHlwZTtEJiZ2b2lkIDAhPT10Ll9hY3RpdmF0aW9uQmVoYXZpb3ImJih5PXQpO2Zvcih2YXIgUz11Lkd1YXJkLmlzU2xvdGFibGUodCkmJmYuc2hhZG93VHJlZV9pc0Fzc2lnbmVkKHQpP3Q6bnVsbCxDPSExLEE9dC5fZ2V0VGhlUGFyZW50KGUpO251bGwhPT1BJiZ1Lkd1YXJkLmlzTm9kZShBKTspe2lmKG51bGwhPT1TKXtpZighdS5HdWFyZC5pc1Nsb3QoQSkpdGhyb3cgbmV3IEVycm9yKFwiUGFyZW50IG5vZGUgb2YgYSBzbG90YWJsZSBzaG91bGQgYmUgYSBzbG90LlwiKTtTPW51bGw7dmFyIE49cC50cmVlX3Jvb3ROb2RlKEEsITApO3UuR3VhcmQuaXNTaGFkb3dSb290KE4pJiZcImNsb3NlZFwiPT09Ti5fbW9kZSYmKEM9ITApfXUuR3VhcmQuaXNTbG90YWJsZShBKSYmZi5zaGFkb3dUcmVlX2lzQXNzaWduZWQoQSkmJihTPUEpLHY9cC50cmVlX3JldGFyZ2V0KGUuX3JlbGF0ZWRUYXJnZXQsQSksYj1bXTt0cnl7Zm9yKHZhciBUPShsPXZvaWQgMCxuKGUuX3RvdWNoVGFyZ2V0TGlzdCkpLE89VC5uZXh0KCk7IU8uZG9uZTtPPVQubmV4dCgpKXtFPU8udmFsdWU7Yi5wdXNoKHAudHJlZV9yZXRhcmdldChFLEEpKX19Y2F0Y2goZSl7bD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7TyYmIU8uZG9uZSYmKGM9VC5yZXR1cm4pJiZjLmNhbGwoVCl9ZmluYWxseXtpZihsKXRocm93IGwuZXJyb3J9fXUuR3VhcmQuaXNXaW5kb3coQSl8fHUuR3VhcmQuaXNOb2RlKEEpJiZ1Lkd1YXJkLmlzTm9kZSh0KSYmcC50cmVlX2lzQW5jZXN0b3JPZihwLnRyZWVfcm9vdE5vZGUodCwhMCksQSwhMCwhMCk/KEQmJmUuX2J1YmJsZXMmJm51bGw9PT15JiZBLl9hY3RpdmF0aW9uQmVoYXZpb3ImJih5PUEpLF8oZSxBLG51bGwsdixiLEMpKTpBPT09dj9BPW51bGw6KHQ9QSxEJiZudWxsPT09eSYmdC5fYWN0aXZhdGlvbkJlaGF2aW9yJiYoeT10KSxfKGUsQSx0LHYsYixDKSksbnVsbCE9PUEmJihBPUEuX2dldFRoZVBhcmVudChlKSksQz0hMX1mb3IodmFyIEY9bnVsbCxrPWUuX3BhdGgsUD1rLmxlbmd0aC0xO1A+PTA7UC0tKXtpZihudWxsIT09KEw9a1tQXSkuc2hhZG93QWRqdXN0ZWRUYXJnZXQpe0Y9TDticmVha319aWYobnVsbCE9PUYpaWYodS5HdWFyZC5pc05vZGUoRi5zaGFkb3dBZGp1c3RlZFRhcmdldCkmJnUuR3VhcmQuaXNTaGFkb3dSb290KHAudHJlZV9yb290Tm9kZShGLnNoYWRvd0FkanVzdGVkVGFyZ2V0LCEwKSkpaD0hMDtlbHNlIGlmKHUuR3VhcmQuaXNOb2RlKEYucmVsYXRlZFRhcmdldCkmJnUuR3VhcmQuaXNTaGFkb3dSb290KHAudHJlZV9yb290Tm9kZShGLnJlbGF0ZWRUYXJnZXQsITApKSloPSEwO2Vsc2UgZm9yKHZhciBJPTA7STxGLnRvdWNoVGFyZ2V0TGlzdC5sZW5ndGg7SSsrKXt2YXIgTD1GLnRvdWNoVGFyZ2V0TGlzdFtJXTtpZih1Lkd1YXJkLmlzTm9kZShMKSYmdS5HdWFyZC5pc1NoYWRvd1Jvb3QocC50cmVlX3Jvb3ROb2RlKEwsITApKSl7aD0hMDticmVha319bnVsbCE9PXkmJnZvaWQgMCE9PXkuX2xlZ2FjeVByZUFjdGl2YXRpb25CZWhhdmlvciYmeS5fbGVnYWN5UHJlQWN0aXZhdGlvbkJlaGF2aW9yKGUpO2ZvcihQPWsubGVuZ3RoLTE7UD49MDtQLS0pe251bGwhPT0oTD1rW1BdKS5zaGFkb3dBZGp1c3RlZFRhcmdldD9lLl9ldmVudFBoYXNlPXMuRXZlbnRQaGFzZS5BdFRhcmdldDplLl9ldmVudFBoYXNlPXMuRXZlbnRQaGFzZS5DYXB0dXJpbmcsZyhMLGUsXCJjYXB0dXJpbmdcIixpKX1mb3IoUD0wO1A8ay5sZW5ndGg7UCsrKXtpZihudWxsIT09KEw9a1tQXSkuc2hhZG93QWRqdXN0ZWRUYXJnZXQpZS5fZXZlbnRQaGFzZT1zLkV2ZW50UGhhc2UuQXRUYXJnZXQ7ZWxzZXtpZighZS5fYnViYmxlcyljb250aW51ZTtlLl9ldmVudFBoYXNlPXMuRXZlbnRQaGFzZS5CdWJibGluZ31nKEwsZSxcImJ1YmJsaW5nXCIsaSl9fXJldHVybiBlLl9ldmVudFBoYXNlPXMuRXZlbnRQaGFzZS5Ob25lLGUuX2N1cnJlbnRUYXJnZXQ9bnVsbCxlLl9wYXRoPVtdLGUuX2Rpc3BhdGNoRmxhZz0hMSxlLl9zdG9wUHJvcGFnYXRpb25GbGFnPSExLGUuX3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWc9ITEsaCYmKGUuX3RhcmdldD1udWxsLGUuX3JlbGF0ZWRUYXJnZXQ9bnVsbCxlLl90b3VjaFRhcmdldExpc3Q9W10pLG51bGwhPT15JiYoZS5fY2FuY2VsZWRGbGFnfHx2b2lkIDA9PT15Ll9hY3RpdmF0aW9uQmVoYXZpb3I/dm9pZCAwIT09eS5fbGVnYWN5Q2FuY2VsZWRBY3RpdmF0aW9uQmVoYXZpb3ImJnkuX2xlZ2FjeUNhbmNlbGVkQWN0aXZhdGlvbkJlaGF2aW9yKGUpOnkuX2FjdGl2YXRpb25CZWhhdmlvcihlKSksIWUuX2NhbmNlbGVkRmxhZ31mdW5jdGlvbiBfKGUsdCxyLG4saSxvKXt2YXIgYT0hMTt1Lkd1YXJkLmlzTm9kZSh0KSYmdS5HdWFyZC5pc1NoYWRvd1Jvb3QocC50cmVlX3Jvb3ROb2RlKHQpKSYmKGE9ITApO3ZhciBzPSExO3UuR3VhcmQuaXNTaGFkb3dSb290KHQpJiZcImNsb3NlZFwiPT09dC5fbW9kZSYmKHM9ITApLGUuX3BhdGgucHVzaCh7aW52b2NhdGlvblRhcmdldDp0LGludm9jYXRpb25UYXJnZXRJblNoYWRvd1RyZWU6YSxzaGFkb3dBZGp1c3RlZFRhcmdldDpyLHJlbGF0ZWRUYXJnZXQ6bix0b3VjaFRhcmdldExpc3Q6aSxyb290T2ZDbG9zZWRUcmVlOnMsc2xvdEluQ2xvc2VkVHJlZTpvfSl9ZnVuY3Rpb24gZyhlLHQscixuKXt2b2lkIDA9PT1uJiYobj17dmFsdWU6ITF9KTtmb3IodmFyIGk9dC5fcGF0aCxhPS0xLHM9MDtzPGkubGVuZ3RoO3MrKylpZihpW3NdPT09ZSl7YT1zO2JyZWFrfWlmKC0xIT09YSl7dmFyIHU9aVthXTsobnVsbCE9PXUuc2hhZG93QWRqdXN0ZWRUYXJnZXR8fGE+MCYmbnVsbCE9PSh1PWlbYS0xXSkuc2hhZG93QWRqdXN0ZWRUYXJnZXQpJiYodC5fdGFyZ2V0PXUuc2hhZG93QWRqdXN0ZWRUYXJnZXQpfWlmKHQuX3JlbGF0ZWRUYXJnZXQ9ZS5yZWxhdGVkVGFyZ2V0LHQuX3RvdWNoVGFyZ2V0TGlzdD1lLnRvdWNoVGFyZ2V0TGlzdCwhdC5fc3RvcFByb3BhZ2F0aW9uRmxhZyl7dC5fY3VycmVudFRhcmdldD1lLmludm9jYXRpb25UYXJnZXQ7dmFyIGw9dC5fY3VycmVudFRhcmdldC5fZXZlbnRMaXN0ZW5lckxpc3QsYz1uZXcoQXJyYXkuYmluZC5hcHBseShBcnJheSxvKFt2b2lkIDBdLGwpKSk7aWYoIWIodCxjLHIsZSxuKSYmdC5faXNUcnVzdGVkKXt2YXIgaD10Ll90eXBlO1wiYW5pbWF0aW9uZW5kXCI9PT1oP3QuX3R5cGU9XCJ3ZWJraXRBbmltYXRpb25FbmRcIjpcImFuaW1hdGlvbml0ZXJhdGlvblwiPT09aD90Ll90eXBlPVwid2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uXCI6XCJhbmltYXRpb25zdGFydFwiPT09aD90Ll90eXBlPVwid2Via2l0QW5pbWF0aW9uU3RhcnRcIjpcInRyYW5zaXRpb25lbmRcIj09PWgmJih0Ll90eXBlPVwid2Via2l0VHJhbnNpdGlvbkVuZFwiKSxiKHQsYyxyLGUsbiksdC5fdHlwZT1ofX19ZnVuY3Rpb24gYihlLHQscixuLGkpe3ZvaWQgMD09PWkmJihpPXt2YWx1ZTohMX0pO2Zvcih2YXIgbz0hMSxhPTA7YTx0Lmxlbmd0aDthKyspe3ZhciBzPXRbYV07aWYoIXMucmVtb3ZlZCl7aWYoZS5fdHlwZSE9PXMudHlwZSljb250aW51ZTtpZihvPSEwLFwiY2FwdHVyaW5nXCI9PT1yJiYhcy5jYXB0dXJlKWNvbnRpbnVlO2lmKFwiYnViYmxpbmdcIj09PXImJnMuY2FwdHVyZSljb250aW51ZTtpZihzLm9uY2UmJm51bGwhPT1lLl9jdXJyZW50VGFyZ2V0KXtmb3IodmFyIGw9ZS5fY3VycmVudFRhcmdldCxjPS0xLGg9MDtoPGwuX2V2ZW50TGlzdGVuZXJMaXN0Lmxlbmd0aDtoKyspaWYobC5fZXZlbnRMaXN0ZW5lckxpc3RbaF09PT1zKXtjPWg7YnJlYWt9LTEhPT1jJiZsLl9ldmVudExpc3RlbmVyTGlzdC5zcGxpY2UoYywxKX12YXIgcD12b2lkIDAsZj12b2lkIDA7dS5HdWFyZC5pc1dpbmRvdyhwKSYmKGY9cC5fY3VycmVudEV2ZW50LCExPT09bi5pbnZvY2F0aW9uVGFyZ2V0SW5TaGFkb3dUcmVlJiYocC5fY3VycmVudEV2ZW50PWUpKSxzLnBhc3NpdmUmJihlLl9pblBhc3NpdmVMaXN0ZW5lckZsYWc9ITApO3RyeXtzLmNhbGxiYWNrLmhhbmRsZUV2ZW50LmNhbGwoZS5fY3VycmVudFRhcmdldCxlKX1jYXRjaChlKXtpLnZhbHVlPSEwfWlmKHMucGFzc2l2ZSYmKGUuX2luUGFzc2l2ZUxpc3RlbmVyRmxhZz0hMSksdS5HdWFyZC5pc1dpbmRvdyhwKSYmKHAuX2N1cnJlbnRFdmVudD1mKSxlLl9zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25GbGFnKXJldHVybiBvfX1yZXR1cm4gb31mdW5jdGlvbiB4KGUsdCl7cmV0dXJuIG51bGx9ZnVuY3Rpb24gdyhlLHQpe3JldHVybiBudWxsfWZ1bmN0aW9uIEUoZSx0KXt9ZnVuY3Rpb24gRChlLHQpe310LmV2ZW50X3NldFRoZUNhbmNlbGVkRmxhZz1mdW5jdGlvbihlKXtlLl9jYW5jZWxhYmxlJiYhZS5faW5QYXNzaXZlTGlzdGVuZXJGbGFnJiYoZS5fY2FuY2VsZWRGbGFnPSEwKX0sdC5ldmVudF9pbml0aWFsaXplPWZ1bmN0aW9uKGUsdCxyLG4pe2UuX2luaXRpYWxpemVkRmxhZz0hMCxlLl9zdG9wUHJvcGFnYXRpb25GbGFnPSExLGUuX3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWc9ITEsZS5fY2FuY2VsZWRGbGFnPSExLGUuX2lzVHJ1c3RlZD0hMSxlLl90YXJnZXQ9bnVsbCxlLl90eXBlPXQsZS5fYnViYmxlcz1yLGUuX2NhbmNlbGFibGU9bn0sdC5ldmVudF9jcmVhdGVBbkV2ZW50PW0sdC5ldmVudF9pbm5lckV2ZW50Q3JlYXRpb25TdGVwcz15LHQuZXZlbnRfZGlzcGF0Y2g9dix0LmV2ZW50X2FwcGVuZFRvQW5FdmVudFBhdGg9Xyx0LmV2ZW50X2ludm9rZT1nLHQuZXZlbnRfaW5uZXJJbnZva2U9Yix0LmV2ZW50X2ZpcmVBbkV2ZW50PWZ1bmN0aW9uKGUsdCxyLG4saSl7dm9pZCAwPT09ciYmKHI9Yy5FdmVudEltcGwpO3ZhciBvPW0ocik7aWYoby5fdHlwZT1lLG4pZm9yKHZhciBhIGluIG4pe29bYV09blthXX1yZXR1cm4gdihvLHQsaSl9LHQuZXZlbnRfY3JlYXRlTGVnYWN5RXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9bnVsbDtzd2l0Y2goZS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJiZWZvcmV1bmxvYWRldmVudFwiOmNhc2VcImNvbXBvc2l0aW9uZXZlbnRcIjpicmVhaztjYXNlXCJjdXN0b21ldmVudFwiOnQ9bC5DdXN0b21FdmVudEltcGw7YnJlYWs7Y2FzZVwiZGV2aWNlbW90aW9uZXZlbnRcIjpjYXNlXCJkZXZpY2VvcmllbnRhdGlvbmV2ZW50XCI6Y2FzZVwiZHJhZ2V2ZW50XCI6YnJlYWs7Y2FzZVwiZXZlbnRcIjpjYXNlXCJldmVudHNcIjp0PWMuRXZlbnRJbXBsfWlmKG51bGw9PT10KXRocm93IG5ldyBoLk5vdFN1cHBvcnRlZEVycm9yKFwiRXZlbnQgY29uc3RydWN0b3Igbm90IGZvdW5kIGZvciBpbnRlcmZhY2UgXCIrZStcIi5cIik7dmFyIHI9bmV3IHQoXCJcIik7cmV0dXJuIHIuX3R5cGU9XCJcIixyLl90aW1lU3RhbXA9KG5ldyBEYXRlKS5nZXRUaW1lKCksci5faXNUcnVzdGVkPSExLHIuX2luaXRpYWxpemVkRmxhZz0hMSxyfSx0LmV2ZW50X2dldHRlckV2ZW50SGFuZGxlcklETEF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe3JldHVybiBudWxsfSx0LmV2ZW50X3NldHRlckV2ZW50SGFuZGxlcklETEF0dHJpYnV0ZT1mdW5jdGlvbihlLHQscil7fSx0LmV2ZW50X2RldGVybWluZVRoZVRhcmdldE9mQW5FdmVudEhhbmRsZXI9eCx0LmV2ZW50X2dldFRoZUN1cnJlbnRWYWx1ZU9mQW5FdmVudEhhbmRsZXI9dyx0LmV2ZW50X2FjdGl2YXRlQW5FdmVudEhhbmRsZXI9RSx0LmV2ZW50X2RlYWN0aXZhdGVBbkV2ZW50SGFuZGxlcj1EfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksbz10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxhPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDYpLHU9cigyKSxsPXIoOSksYz1yKDM0KSxoPXIoMykscD1yKDEpLGY9cig3KSxkPXIoMTUyKSxtPXIoMCkseT1yKDEyKSx2PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgdD1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHQuX2NoaWxkcmVuPW5ldyBTZXQsdC5fZW5jb2Rpbmc9e25hbWU6XCJVVEYtOFwiLGxhYmVsczpbXCJ1bmljb2RlLTEtMS11dGYtOFwiLFwidXRmLThcIixcInV0ZjhcIl19LHQuX2NvbnRlbnRUeXBlPVwiYXBwbGljYXRpb24veG1sXCIsdC5fVVJMPXtzY2hlbWU6XCJhYm91dFwiLHVzZXJuYW1lOlwiXCIscGFzc3dvcmQ6XCJcIixob3N0Om51bGwscG9ydDpudWxsLHBhdGg6W1wiYmxhbmtcIl0scXVlcnk6bnVsbCxmcmFnbWVudDpudWxsLF9jYW5ub3RCZUFCYXNlVVJMRmxhZzohMCxfYmxvYlVSTEVudHJ5Om51bGx9LHQuX29yaWdpbj1udWxsLHQuX3R5cGU9XCJ4bWxcIix0Ll9tb2RlPVwibm8tcXVpcmtzXCIsdC5fZG9jdW1lbnRFbGVtZW50PW51bGwsdC5faGFzTmFtZXNwYWNlcz0hMSx0Ll9ub2RlRG9jdW1lbnRPdmVyd3JpdGU9bnVsbCx0fXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiX25vZGVEb2N1bWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbm9kZURvY3VtZW50T3ZlcndyaXRlfHx0aGlzfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fbm9kZURvY3VtZW50T3ZlcndyaXRlPWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiaW1wbGVtZW50YXRpb25cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ltcGxlbWVudGF0aW9ufHwodGhpcy5faW1wbGVtZW50YXRpb249bS5jcmVhdGVfZG9tSW1wbGVtZW50YXRpb24odGhpcykpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIlVSTFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZC51cmxTZXJpYWxpemVyKHRoaXMuX1VSTCl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZG9jdW1lbnRVUklcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuVVJMfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm9yaWdpblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIm51bGxcIn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjb21wYXRNb2RlXCIse2dldDpmdW5jdGlvbigpe3JldHVyblwicXVpcmtzXCI9PT10aGlzLl9tb2RlP1wiQmFja0NvbXBhdFwiOlwiQ1NTMUNvbXBhdFwifSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNoYXJhY3RlclNldFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW5jb2RpbmcubmFtZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjaGFyc2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmNvZGluZy5uYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImlucHV0RW5jb2RpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VuY29kaW5nLm5hbWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY29udGVudFR5cGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbnRlbnRUeXBlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRvY3R5cGVcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGUsdDt0cnl7Zm9yKHZhciByPW8odGhpcy5fY2hpbGRyZW4pLG49ci5uZXh0KCk7IW4uZG9uZTtuPXIubmV4dCgpKXt2YXIgaT1uLnZhbHVlO2lmKGguR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKGkpKXJldHVybiBpfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYodD1yLnJldHVybikmJnQuY2FsbChyKX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19cmV0dXJuIG51bGx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZG9jdW1lbnRFbGVtZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kb2N1bWVudEVsZW1lbnR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIG0ubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhRdWFsaWZpZWROYW1lKGUsdGhpcyl9LHQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbS5ub2RlX2xpc3RPZkVsZW1lbnRzV2l0aE5hbWVzcGFjZShlLHQsdGhpcyl9LHQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIG0ubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhDbGFzc05hbWVzKGUsdGhpcyl9LHQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oZSx0KXtpZighbS54bWxfaXNOYW1lKGUpKXRocm93IG5ldyBsLkludmFsaWRDaGFyYWN0ZXJFcnJvcjtcImh0bWxcIj09PXRoaXMuX3R5cGUmJihlPWUudG9Mb3dlckNhc2UoKSk7dmFyIHI9bnVsbDt2b2lkIDAhPT10JiYocj1wLmlzU3RyaW5nKHQpP3Q6dC5pcyk7dmFyIG49XCJodG1sXCI9PT10aGlzLl90eXBlfHxcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiPT09dGhpcy5fY29udGVudFR5cGU/Zi5uYW1lc3BhY2UuSFRNTDpudWxsO3JldHVybiBtLmVsZW1lbnRfY3JlYXRlQW5FbGVtZW50KHRoaXMsZSxuLG51bGwsciwhMCl9LHQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUz1mdW5jdGlvbihlLHQscil7cmV0dXJuIG0uZG9jdW1lbnRfaW50ZXJuYWxDcmVhdGVFbGVtZW50TlModGhpcyxlLHQscil9LHQucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gbS5jcmVhdGVfZG9jdW1lbnRGcmFnbWVudCh0aGlzKX0sdC5wcm90b3R5cGUuY3JlYXRlVGV4dE5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIG0uY3JlYXRlX3RleHQodGhpcyxlKX0sdC5wcm90b3R5cGUuY3JlYXRlQ0RBVEFTZWN0aW9uPWZ1bmN0aW9uKGUpe2lmKFwiaHRtbFwiPT09dGhpcy5fdHlwZSl0aHJvdyBuZXcgbC5Ob3RTdXBwb3J0ZWRFcnJvcjtpZigtMSE9PWUuaW5kZXhPZihcIl1dPlwiKSl0aHJvdyBuZXcgbC5JbnZhbGlkQ2hhcmFjdGVyRXJyb3I7cmV0dXJuIG0uY3JlYXRlX2NkYXRhU2VjdGlvbih0aGlzLGUpfSx0LnByb3RvdHlwZS5jcmVhdGVDb21tZW50PWZ1bmN0aW9uKGUpe3JldHVybiBtLmNyZWF0ZV9jb21tZW50KHRoaXMsZSl9LHQucHJvdG90eXBlLmNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe2lmKCFtLnhtbF9pc05hbWUoZSkpdGhyb3cgbmV3IGwuSW52YWxpZENoYXJhY3RlckVycm9yO2lmKC0xIT09dC5pbmRleE9mKFwiPz5cIikpdGhyb3cgbmV3IGwuSW52YWxpZENoYXJhY3RlckVycm9yO3JldHVybiBtLmNyZWF0ZV9wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcyxlLHQpfSx0LnByb3RvdHlwZS5pbXBvcnROb2RlPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9ITEpLGguR3VhcmQuaXNEb2N1bWVudE5vZGUoZSl8fGguR3VhcmQuaXNTaGFkb3dSb290KGUpKXRocm93IG5ldyBsLk5vdFN1cHBvcnRlZEVycm9yO3JldHVybiBtLm5vZGVfY2xvbmUoZSx0aGlzLHQpfSx0LnByb3RvdHlwZS5hZG9wdE5vZGU9ZnVuY3Rpb24oZSl7aWYoaC5HdWFyZC5pc0RvY3VtZW50Tm9kZShlKSl0aHJvdyBuZXcgbC5Ob3RTdXBwb3J0ZWRFcnJvcjtpZihoLkd1YXJkLmlzU2hhZG93Um9vdChlKSl0aHJvdyBuZXcgbC5IaWVyYXJjaHlSZXF1ZXN0RXJyb3I7cmV0dXJuIG0uZG9jdW1lbnRfYWRvcHQoZSx0aGlzKSxlfSx0LnByb3RvdHlwZS5jcmVhdGVBdHRyaWJ1dGU9ZnVuY3Rpb24oZSl7aWYoIW0ueG1sX2lzTmFtZShlKSl0aHJvdyBuZXcgbC5JbnZhbGlkQ2hhcmFjdGVyRXJyb3I7cmV0dXJuXCJodG1sXCI9PT10aGlzLl90eXBlJiYoZT1lLnRvTG93ZXJDYXNlKCkpLG0uY3JlYXRlX2F0dHIodGhpcyxlKX0sdC5wcm90b3R5cGUuY3JlYXRlQXR0cmlidXRlTlM9ZnVuY3Rpb24oZSx0KXt2YXIgcj1hKG0ubmFtZXNwYWNlX3ZhbGlkYXRlQW5kRXh0cmFjdChlLHQpLDMpLG49clswXSxpPXJbMV0sbz1yWzJdLHM9bS5jcmVhdGVfYXR0cih0aGlzLG8pO3JldHVybiBzLl9uYW1lc3BhY2U9bixzLl9uYW1lc3BhY2VQcmVmaXg9aSxzfSx0LnByb3RvdHlwZS5jcmVhdGVFdmVudD1mdW5jdGlvbihlKXtyZXR1cm4gbS5ldmVudF9jcmVhdGVMZWdhY3lFdmVudChlKX0sdC5wcm90b3R5cGUuY3JlYXRlUmFuZ2U9ZnVuY3Rpb24oKXt2YXIgZT1tLmNyZWF0ZV9yYW5nZSgpO3JldHVybiBlLl9zdGFydD1bdGhpcywwXSxlLl9lbmQ9W3RoaXMsMF0sZX0sdC5wcm90b3R5cGUuY3JlYXRlTm9kZUl0ZXJhdG9yPWZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT10JiYodD11LldoYXRUb1Nob3cuQWxsKSx2b2lkIDA9PT1yJiYocj1udWxsKTt2YXIgbj1tLmNyZWF0ZV9ub2RlSXRlcmF0b3IoZSxlLCEwKTtyZXR1cm4gbi5fd2hhdFRvU2hvdz10LG4uX2l0ZXJhdG9yQ29sbGVjdGlvbj1tLmNyZWF0ZV9ub2RlTGlzdChlKSxwLmlzRnVuY3Rpb24ocik/KG4uX2ZpbHRlcj1tLmNyZWF0ZV9ub2RlRmlsdGVyKCksbi5fZmlsdGVyLmFjY2VwdE5vZGU9cik6bi5fZmlsdGVyPXIsbn0sdC5wcm90b3R5cGUuY3JlYXRlVHJlZVdhbGtlcj1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09dCYmKHQ9dS5XaGF0VG9TaG93LkFsbCksdm9pZCAwPT09ciYmKHI9bnVsbCk7dmFyIG49bS5jcmVhdGVfdHJlZVdhbGtlcihlLGUpO3JldHVybiBuLl93aGF0VG9TaG93PXQscC5pc0Z1bmN0aW9uKHIpPyhuLl9maWx0ZXI9bS5jcmVhdGVfbm9kZUZpbHRlcigpLG4uX2ZpbHRlci5hY2NlcHROb2RlPXIpOm4uX2ZpbHRlcj1yLG59LHQucHJvdG90eXBlLl9nZXRUaGVQYXJlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCJsb2FkXCI9PT1lLl90eXBlP251bGw6cy5kb20ud2luZG93fSx0LnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZD1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogTm9uRWxlbWVudFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2hpbGRyZW5cIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJmaXJzdEVsZW1lbnRDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImxhc3RFbGVtZW50Q2hpbGRcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjaGlsZEVsZW1lbnRDb3VudFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnByZXBlbmQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbD1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0fShjLk5vZGVJbXBsKTt0LkRvY3VtZW50SW1wbD12LHkuaWRsX2RlZmluZUNvbnN0KHYucHJvdG90eXBlLFwiX25vZGVUeXBlXCIsdS5Ob2RlVHlwZS5Eb2N1bWVudCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KSxvPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LGE9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPXIoMiksdT1yKDM0KSxsPXIoOSksYz1yKDcpLGg9cigwKSxwPXIoMTIpLGY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3ZhciB0PWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gdC5fY2hpbGRyZW49bmV3IFNldCx0Ll9uYW1lc3BhY2U9bnVsbCx0Ll9uYW1lc3BhY2VQcmVmaXg9bnVsbCx0Ll9sb2NhbE5hbWU9XCJcIix0Ll9jdXN0b21FbGVtZW50U3RhdGU9XCJ1bmRlZmluZWRcIix0Ll9jdXN0b21FbGVtZW50RGVmaW5pdGlvbj1udWxsLHQuX2lzPW51bGwsdC5fc2hhZG93Um9vdD1udWxsLHQuX2F0dHJpYnV0ZUxpc3Q9aC5jcmVhdGVfbmFtZWROb2RlTWFwKHQpLHQuX2F0dHJpYnV0ZUNoYW5nZVN0ZXBzPVtdLHQuX25hbWU9XCJcIix0Ll9hc3NpZ25lZFNsb3Q9bnVsbCx0fXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibmFtZXNwYWNlVVJJXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9uYW1lc3BhY2V9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicHJlZml4XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9uYW1lc3BhY2VQcmVmaXh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibG9jYWxOYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9sb2NhbE5hbWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwidGFnTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faHRtbFVwcGVyY2FzZWRRdWFsaWZpZWROYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImlkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBoLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVWYWx1ZSh0aGlzLFwiaWRcIil9LHNldDpmdW5jdGlvbihlKXtoLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGVWYWx1ZSh0aGlzLFwiaWRcIixlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjbGFzc05hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGguZWxlbWVudF9nZXRBbkF0dHJpYnV0ZVZhbHVlKHRoaXMsXCJjbGFzc1wiKX0sc2V0OmZ1bmN0aW9uKGUpe2guZWxlbWVudF9zZXRBbkF0dHJpYnV0ZVZhbHVlKHRoaXMsXCJjbGFzc1wiLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNsYXNzTGlzdFwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgZT1oLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVCeU5hbWUoXCJjbGFzc1wiLHRoaXMpO3JldHVybiBudWxsPT09ZSYmKGU9aC5jcmVhdGVfYXR0cih0aGlzLl9ub2RlRG9jdW1lbnQsXCJjbGFzc1wiKSksaC5jcmVhdGVfZG9tVG9rZW5MaXN0KHRoaXMsZSl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwic2xvdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaC5lbGVtZW50X2dldEFuQXR0cmlidXRlVmFsdWUodGhpcyxcInNsb3RcIil9LHNldDpmdW5jdGlvbihlKXtoLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGVWYWx1ZSh0aGlzLFwic2xvdFwiLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmhhc0F0dHJpYnV0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gMCE9PXRoaXMuX2F0dHJpYnV0ZUxpc3QubGVuZ3RofSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJhdHRyaWJ1dGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hdHRyaWJ1dGVMaXN0fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5hbWVzPWZ1bmN0aW9uKCl7dmFyIGUsdCxyPVtdO3RyeXtmb3IodmFyIG49byh0aGlzLl9hdHRyaWJ1dGVMaXN0KSxpPW4ubmV4dCgpOyFpLmRvbmU7aT1uLm5leHQoKSl7dmFyIGE9aS52YWx1ZTtyLnB1c2goYS5fcXVhbGlmaWVkTmFtZSl9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e2kmJiFpLmRvbmUmJih0PW4ucmV0dXJuKSYmdC5jYWxsKG4pfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1yZXR1cm4gcn0sdC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlPWZ1bmN0aW9uKGUpe3ZhciB0PWguZWxlbWVudF9nZXRBbkF0dHJpYnV0ZUJ5TmFtZShlLHRoaXMpO3JldHVybiB0P3QuX3ZhbHVlOm51bGx9LHQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5TPWZ1bmN0aW9uKGUsdCl7dmFyIHI9aC5lbGVtZW50X2dldEFuQXR0cmlidXRlQnlOYW1lc3BhY2VBbmRMb2NhbE5hbWUoZSx0LHRoaXMpO3JldHVybiByP3IuX3ZhbHVlOm51bGx9LHQucHJvdG90eXBlLnNldEF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe2lmKCFoLnhtbF9pc05hbWUoZSkpdGhyb3cgbmV3IGwuSW52YWxpZENoYXJhY3RlckVycm9yO3RoaXMuX25hbWVzcGFjZT09PWMubmFtZXNwYWNlLkhUTUwmJlwiaHRtbFwiPT09dGhpcy5fbm9kZURvY3VtZW50Ll90eXBlJiYoZT1lLnRvTG93ZXJDYXNlKCkpO2Zvcih2YXIgcj1udWxsLG49MDtuPHRoaXMuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO24rKyl7dmFyIGk9dGhpcy5fYXR0cmlidXRlTGlzdFtuXTtpZihpLl9xdWFsaWZpZWROYW1lPT09ZSl7cj1pO2JyZWFrfX1pZihudWxsPT09cilyZXR1cm4ocj1oLmNyZWF0ZV9hdHRyKHRoaXMuX25vZGVEb2N1bWVudCxlKSkuX3ZhbHVlPXQsdm9pZCBoLmVsZW1lbnRfYXBwZW5kKHIsdGhpcyk7aC5lbGVtZW50X2NoYW5nZShyLHRoaXMsdCl9LHQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1hKGgubmFtZXNwYWNlX3ZhbGlkYXRlQW5kRXh0cmFjdChlLHQpLDMpLGk9blswXSxvPW5bMV0scz1uWzJdO2guZWxlbWVudF9zZXRBbkF0dHJpYnV0ZVZhbHVlKHRoaXMscyxyLG8saSl9LHQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZT1mdW5jdGlvbihlKXtoLmVsZW1lbnRfcmVtb3ZlQW5BdHRyaWJ1dGVCeU5hbWUoZSx0aGlzKX0sdC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlM9ZnVuY3Rpb24oZSx0KXtoLmVsZW1lbnRfcmVtb3ZlQW5BdHRyaWJ1dGVCeU5hbWVzcGFjZUFuZExvY2FsTmFtZShlLHQsdGhpcyl9LHQucHJvdG90eXBlLmhhc0F0dHJpYnV0ZT1mdW5jdGlvbihlKXt0aGlzLl9uYW1lc3BhY2U9PT1jLm5hbWVzcGFjZS5IVE1MJiZcImh0bWxcIj09PXRoaXMuX25vZGVEb2N1bWVudC5fdHlwZSYmKGU9ZS50b0xvd2VyQ2FzZSgpKTtmb3IodmFyIHQ9MDt0PHRoaXMuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO3QrKyl7aWYodGhpcy5fYXR0cmlidXRlTGlzdFt0XS5fcXVhbGlmaWVkTmFtZT09PWUpcmV0dXJuITB9cmV0dXJuITF9LHQucHJvdG90eXBlLnRvZ2dsZUF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe2lmKCFoLnhtbF9pc05hbWUoZSkpdGhyb3cgbmV3IGwuSW52YWxpZENoYXJhY3RlckVycm9yO3RoaXMuX25hbWVzcGFjZT09PWMubmFtZXNwYWNlLkhUTUwmJlwiaHRtbFwiPT09dGhpcy5fbm9kZURvY3VtZW50Ll90eXBlJiYoZT1lLnRvTG93ZXJDYXNlKCkpO2Zvcih2YXIgcj1udWxsLG49MDtuPHRoaXMuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO24rKyl7dmFyIGk9dGhpcy5fYXR0cmlidXRlTGlzdFtuXTtpZihpLl9xdWFsaWZpZWROYW1lPT09ZSl7cj1pO2JyZWFrfX1yZXR1cm4gbnVsbD09PXI/KHZvaWQgMD09PXR8fCEwPT09dCkmJigocj1oLmNyZWF0ZV9hdHRyKHRoaXMuX25vZGVEb2N1bWVudCxlKSkuX3ZhbHVlPVwiXCIsaC5lbGVtZW50X2FwcGVuZChyLHRoaXMpLCEwKTp2b2lkIDAhPT10JiYhMSE9PXR8fChoLmVsZW1lbnRfcmVtb3ZlQW5BdHRyaWJ1dGVCeU5hbWUoZSx0aGlzKSwhMSl9LHQucHJvdG90eXBlLmhhc0F0dHJpYnV0ZU5TPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWV8fG51bGwsbj0wO248dGhpcy5fYXR0cmlidXRlTGlzdC5sZW5ndGg7bisrKXt2YXIgaT10aGlzLl9hdHRyaWJ1dGVMaXN0W25dO2lmKGkuX25hbWVzcGFjZT09PXImJmkuX2xvY2FsTmFtZT09PXQpcmV0dXJuITB9cmV0dXJuITF9LHQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGguZWxlbWVudF9nZXRBbkF0dHJpYnV0ZUJ5TmFtZShlLHRoaXMpfSx0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOb2RlTlM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaC5lbGVtZW50X2dldEFuQXR0cmlidXRlQnlOYW1lc3BhY2VBbmRMb2NhbE5hbWUoZSx0LHRoaXMpfSx0LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBoLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGUoZSx0aGlzKX0sdC5wcm90b3R5cGUuc2V0QXR0cmlidXRlTm9kZU5TPWZ1bmN0aW9uKGUpe3JldHVybiBoLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGUoZSx0aGlzKX0sdC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTm9kZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ITEscj0wO3I8dGhpcy5fYXR0cmlidXRlTGlzdC5sZW5ndGg7cisrKXtpZih0aGlzLl9hdHRyaWJ1dGVMaXN0W3JdPT09ZSl7dD0hMDticmVha319aWYoIXQpdGhyb3cgbmV3IGwuTm90Rm91bmRFcnJvcjtyZXR1cm4gaC5lbGVtZW50X3JlbW92ZShlLHRoaXMpLGV9LHQucHJvdG90eXBlLmF0dGFjaFNoYWRvdz1mdW5jdGlvbihlKXtpZih0aGlzLl9uYW1lc3BhY2UhPT1jLm5hbWVzcGFjZS5IVE1MKXRocm93IG5ldyBsLk5vdFN1cHBvcnRlZEVycm9yO2lmKCFoLmN1c3RvbUVsZW1lbnRfaXNWYWxpZEN1c3RvbUVsZW1lbnROYW1lKHRoaXMuX2xvY2FsTmFtZSkmJiFoLmN1c3RvbUVsZW1lbnRfaXNWYWxpZFNoYWRvd0hvc3ROYW1lKHRoaXMuX2xvY2FsTmFtZSkpdGhyb3cgbmV3IGwuTm90U3VwcG9ydGVkRXJyb3I7aWYoaC5jdXN0b21FbGVtZW50X2lzVmFsaWRDdXN0b21FbGVtZW50TmFtZSh0aGlzLl9sb2NhbE5hbWUpfHxudWxsIT09dGhpcy5faXMpe3ZhciB0PWguY3VzdG9tRWxlbWVudF9sb29rVXBBQ3VzdG9tRWxlbWVudERlZmluaXRpb24odGhpcy5fbm9kZURvY3VtZW50LHRoaXMuX25hbWVzcGFjZSx0aGlzLl9sb2NhbE5hbWUsdGhpcy5faXMpO2lmKG51bGwhPT10JiYhMD09PXQuZGlzYWJsZVNoYWRvdyl0aHJvdyBuZXcgbC5Ob3RTdXBwb3J0ZWRFcnJvcn1pZihudWxsIT09dGhpcy5fc2hhZG93Um9vdCl0aHJvdyBuZXcgbC5Ob3RTdXBwb3J0ZWRFcnJvcjt2YXIgcj1oLmNyZWF0ZV9zaGFkb3dSb290KHRoaXMuX25vZGVEb2N1bWVudCx0aGlzKTtyZXR1cm4gci5fbW9kZT1lLm1vZGUsdGhpcy5fc2hhZG93Um9vdD1yLHJ9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInNoYWRvd1Jvb3RcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fc2hhZG93Um9vdDtyZXR1cm4gbnVsbD09PWV8fFwiY2xvc2VkXCI9PT1lLm1vZGU/bnVsbDplfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmNsb3Nlc3Q9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IGwuTm90SW1wbGVtZW50ZWRFcnJvcn0sdC5wcm90b3R5cGUubWF0Y2hlcz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgbC5Ob3RJbXBsZW1lbnRlZEVycm9yfSx0LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubWF0Y2hlcyhlKX0sdC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGgubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhRdWFsaWZpZWROYW1lKGUsdGhpcyl9LHQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaC5ub2RlX2xpc3RPZkVsZW1lbnRzV2l0aE5hbWVzcGFjZShlLHQsdGhpcyl9LHQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGgubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhDbGFzc05hbWVzKGUsdGhpcyl9LHQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudD1mdW5jdGlvbihlLHQpe3JldHVybiBoLmVsZW1lbnRfaW5zZXJ0QWRqYWNlbnQodGhpcyxlLHQpfSx0LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudFRleHQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1oLmNyZWF0ZV90ZXh0KHRoaXMuX25vZGVEb2N1bWVudCx0KTtoLmVsZW1lbnRfaW5zZXJ0QWRqYWNlbnQodGhpcyxlLHIpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJfcXVhbGlmaWVkTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZXNwYWNlUHJlZml4P3RoaXMuX25hbWVzcGFjZVByZWZpeCtcIjpcIit0aGlzLl9sb2NhbE5hbWU6dGhpcy5fbG9jYWxOYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIl9odG1sVXBwZXJjYXNlZFF1YWxpZmllZE5hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fcXVhbGlmaWVkTmFtZTtyZXR1cm4gdGhpcy5fbmFtZXNwYWNlPT09Yy5uYW1lc3BhY2UuSFRNTCYmXCJodG1sXCI9PT10aGlzLl9ub2RlRG9jdW1lbnQuX3R5cGUmJihlPWUudG9VcHBlckNhc2UoKSksZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjaGlsZHJlblwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImZpcnN0RWxlbWVudENoaWxkXCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwibGFzdEVsZW1lbnRDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNoaWxkRWxlbWVudENvdW50XCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUucHJlcGVuZD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5hcHBlbmQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucXVlcnlTZWxlY3Rvcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInByZXZpb3VzRWxlbWVudFNpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IE5vbkRvY3VtZW50VHlwZUNoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5leHRFbGVtZW50U2libGluZ1wiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuYmVmb3JlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUuYWZ0ZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IENoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5yZXBsYWNlV2l0aD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiYXNzaWduZWRTbG90XCIse2dldDpmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBTbG90YWJsZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIsbixpKXt2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1pJiYoaT1udWxsKTt2YXIgbz1uZXcgdDtyZXR1cm4gby5fbG9jYWxOYW1lPXIsby5fbmFtZXNwYWNlPW4sby5fbmFtZXNwYWNlUHJlZml4PWksby5fbm9kZURvY3VtZW50PWUsb30sdH0odS5Ob2RlSW1wbCk7dC5FbGVtZW50SW1wbD1mLHAuaWRsX2RlZmluZUNvbnN0KGYucHJvdG90eXBlLFwiX25vZGVUeXBlXCIscy5Ob2RlVHlwZS5FbGVtZW50KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMiksYT1yKDM0KSxzPXIoMTIpLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXt2b2lkIDA9PT10JiYodD1udWxsKTt2YXIgcj1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHIuX2NoaWxkcmVuPW5ldyBTZXQsci5faG9zdD10LHJ9cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5nZXRFbGVtZW50QnlJZD1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogTm9uRWxlbWVudFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY2hpbGRyZW5cIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJmaXJzdEVsZW1lbnRDaGlsZFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImxhc3RFbGVtZW50Q2hpbGRcIix7Z2V0OmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJjaGlsZEVsZW1lbnRDb3VudFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnByZXBlbmQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBQYXJlbnROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IFBhcmVudE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbD1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogUGFyZW50Tm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyKXt2b2lkIDA9PT1yJiYocj1udWxsKTt2YXIgbj1uZXcgdChyKTtyZXR1cm4gbi5fbm9kZURvY3VtZW50PWUsbn0sdH0oYS5Ob2RlSW1wbCk7dC5Eb2N1bWVudEZyYWdtZW50SW1wbD11LHMuaWRsX2RlZmluZUNvbnN0KHUucHJvdG90eXBlLFwiX25vZGVUeXBlXCIsby5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pLG89dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9cigyKSxzPXIoNzEpLHU9cigwKSxsPXIoMTIpLGM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXt2b2lkIDA9PT10JiYodD1cIlwiKTt2YXIgcj1lLmNhbGwodGhpcyx0KXx8dGhpcztyZXR1cm4gci5fbmFtZT1cIlwiLHIuX2Fzc2lnbmVkU2xvdD1udWxsLHJ9cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ3aG9sZVRleHRcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGUsdCxyPVwiXCI7dHJ5e2Zvcih2YXIgbj1vKHUudGV4dF9jb250aWd1b3VzVGV4dE5vZGVzKHRoaXMsITApKSxpPW4ubmV4dCgpOyFpLmRvbmU7aT1uLm5leHQoKSl7cis9aS52YWx1ZS5fZGF0YX19Y2F0Y2godCl7ZT17ZXJyb3I6dH19ZmluYWxseXt0cnl7aSYmIWkuZG9uZSYmKHQ9bi5yZXR1cm4pJiZ0LmNhbGwobil9ZmluYWxseXtpZihlKXRocm93IGUuZXJyb3J9fXJldHVybiByfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnNwbGl0VGV4dD1mdW5jdGlvbihlKXtyZXR1cm4gdS50ZXh0X3NwbGl0KHRoaXMsZSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImFzc2lnbmVkU2xvdFwiLHtnZXQ6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogU2xvdGFibGUgbm90IGltcGxlbWVudGVkLlwiKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyKXt2b2lkIDA9PT1yJiYocj1cIlwiKTt2YXIgbj1uZXcgdChyKTtyZXR1cm4gbi5fbm9kZURvY3VtZW50PWUsbn0sdH0ocy5DaGFyYWN0ZXJEYXRhSW1wbCk7dC5UZXh0SW1wbD1jLGwuaWRsX2RlZmluZUNvbnN0KGMucHJvdG90eXBlLFwiX25vZGVUeXBlXCIsYS5Ob2RlVHlwZS5UZXh0KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX3N0YXJ0Tm9kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhcnRbMF19LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX3N0YXJ0T2Zmc2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFydFsxXX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJfZW5kTm9kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW5kWzBdfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9lbmRPZmZzZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VuZFsxXX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJfY29sbGFwc2VkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFydFswXT09PXRoaXMuX2VuZFswXSYmdGhpcy5fc3RhcnRbMV09PT10aGlzLl9lbmRbMV19LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic3RhcnRDb250YWluZXJcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXJ0Tm9kZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJzdGFydE9mZnNldFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RhcnRPZmZzZXR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiZW5kQ29udGFpbmVyXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbmROb2RlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImVuZE9mZnNldFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZW5kT2Zmc2V0fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImNvbGxhcHNlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29sbGFwc2VkfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9KCk7dC5BYnN0cmFjdFJhbmdlSW1wbD1ufSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLl9hY3RpdmVGbGFnPSExLHRoaXMuX3Jvb3Q9ZSx0aGlzLl93aGF0VG9TaG93PW4uV2hhdFRvU2hvdy5BbGwsdGhpcy5fZmlsdGVyPW51bGx9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInJvb3RcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Jvb3R9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwid2hhdFRvU2hvd1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd2hhdFRvU2hvd30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJmaWx0ZXJcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZpbHRlcn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuVHJhdmVyc2VySW1wbD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyKSxpPXIoMCksbz1yKDEyKSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuX3RhcmdldD1udWxsLHRoaXMuX3JlbGF0ZWRUYXJnZXQ9bnVsbCx0aGlzLl90b3VjaFRhcmdldExpc3Q9W10sdGhpcy5fcGF0aD1bXSx0aGlzLl9jdXJyZW50VGFyZ2V0PW51bGwsdGhpcy5fZXZlbnRQaGFzZT1uLkV2ZW50UGhhc2UuTm9uZSx0aGlzLl9zdG9wUHJvcGFnYXRpb25GbGFnPSExLHRoaXMuX3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWc9ITEsdGhpcy5fY2FuY2VsZWRGbGFnPSExLHRoaXMuX2luUGFzc2l2ZUxpc3RlbmVyRmxhZz0hMSx0aGlzLl9jb21wb3NlZEZsYWc9ITEsdGhpcy5faW5pdGlhbGl6ZWRGbGFnPSExLHRoaXMuX2Rpc3BhdGNoRmxhZz0hMSx0aGlzLl9pc1RydXN0ZWQ9ITEsdGhpcy5fYnViYmxlcz0hMSx0aGlzLl9jYW5jZWxhYmxlPSExLHRoaXMuX3R5cGU9ZSx0JiYodGhpcy5fYnViYmxlcz10LmJ1YmJsZXN8fCExLHRoaXMuX2NhbmNlbGFibGU9dC5jYW5jZWxhYmxlfHwhMSx0aGlzLl9jb21wb3NlZEZsYWc9dC5jb21wb3NlZHx8ITEpLHRoaXMuX2luaXRpYWxpemVkRmxhZz0hMCx0aGlzLl90aW1lU3RhbXA9KG5ldyBEYXRlKS5nZXRUaW1lKCl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInR5cGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3R5cGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidGFyZ2V0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90YXJnZXR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic3JjRWxlbWVudFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGFyZ2V0fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImN1cnJlbnRUYXJnZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2N1cnJlbnRUYXJnZXR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuY29tcG9zZWRQYXRoPWZ1bmN0aW9uKCl7dmFyIGU9W10sdD10aGlzLl9wYXRoO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gZTt2YXIgcj10aGlzLl9jdXJyZW50VGFyZ2V0O2lmKG51bGw9PT1yKXRocm93IG5ldyBFcnJvcihcIkV2ZW50IGN1cnJlbnRUYXJnZXQgaXMgbnVsbC5cIik7ZS5wdXNoKHIpO2Zvcih2YXIgbj0wLGk9MCxvPXQubGVuZ3RoLTE7bz49MDspe2lmKHRbb10ucm9vdE9mQ2xvc2VkVHJlZSYmaSsrLHRbb10uaW52b2NhdGlvblRhcmdldD09PXIpe249bzticmVha310W29dLnNsb3RJbkNsb3NlZFRyZWUmJmktLSxvLS19dmFyIGE9aSxzPWk7Zm9yKG89bi0xO28+PTA7KXRbb10ucm9vdE9mQ2xvc2VkVHJlZSYmYSsrLGE8PXMmJmUudW5zaGlmdCh0W29dLmludm9jYXRpb25UYXJnZXQpLHRbb10uc2xvdEluQ2xvc2VkVHJlZSYmLS1hPHMmJihzPWEpLG8tLTtmb3IoYT1pLHM9aSxvPW4rMTtvPHQubGVuZ3RoOyl0W29dLnNsb3RJbkNsb3NlZFRyZWUmJmErKyxhPD1zJiZlLnB1c2godFtvXS5pbnZvY2F0aW9uVGFyZ2V0KSx0W29dLnJvb3RPZkNsb3NlZFRyZWUmJi0tYTxzJiYocz1hKSxvKys7cmV0dXJuIGV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImV2ZW50UGhhc2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50UGhhc2V9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uPWZ1bmN0aW9uKCl7dGhpcy5fc3RvcFByb3BhZ2F0aW9uRmxhZz0hMH0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiY2FuY2VsQnViYmxlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdG9wUHJvcGFnYXRpb25GbGFnfSxzZXQ6ZnVuY3Rpb24oZSl7ZSYmdGhpcy5zdG9wUHJvcGFnYXRpb24oKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249ZnVuY3Rpb24oKXt0aGlzLl9zdG9wUHJvcGFnYXRpb25GbGFnPSEwLHRoaXMuX3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbkZsYWc9ITB9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImJ1YmJsZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2J1YmJsZXN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiY2FuY2VsYWJsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2FuY2VsYWJsZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJyZXR1cm5WYWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5fY2FuY2VsZWRGbGFnfSxzZXQ6ZnVuY3Rpb24oZSl7ZXx8aS5ldmVudF9zZXRUaGVDYW5jZWxlZEZsYWcodGhpcyl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXtpLmV2ZW50X3NldFRoZUNhbmNlbGVkRmxhZyh0aGlzKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiZGVmYXVsdFByZXZlbnRlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2FuY2VsZWRGbGFnfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImNvbXBvc2VkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb21wb3NlZEZsYWd9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiaXNUcnVzdGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc1RydXN0ZWR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidGltZVN0YW1wXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90aW1lU3RhbXB9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuaW5pdEV2ZW50PWZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT10JiYodD0hMSksdm9pZCAwPT09ciYmKHI9ITEpLHRoaXMuX2Rpc3BhdGNoRmxhZ3x8aS5ldmVudF9pbml0aWFsaXplKHRoaXMsZSx0LHIpfSxlLk5PTkU9MCxlLkNBUFRVUklOR19QSEFTRT0xLGUuQVRfVEFSR0VUPTIsZS5CVUJCTElOR19QSEFTRT0zLGV9KCk7dC5FdmVudEltcGw9YSxvLmlkbF9kZWZpbmVDb25zdChhLnByb3RvdHlwZSxcIk5PTkVcIiwwKSxvLmlkbF9kZWZpbmVDb25zdChhLnByb3RvdHlwZSxcIkNBUFRVUklOR19QSEFTRVwiLDEpLG8uaWRsX2RlZmluZUNvbnN0KGEucHJvdG90eXBlLFwiQVRfVEFSR0VUXCIsMiksby5pZGxfZGVmaW5lQ29uc3QoYS5wcm90b3R5cGUsXCJCVUJCTElOR19QSEFTRVwiLDMpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyKSxpPXIoOSk7dC50cmF2ZXJzYWxfZmlsdGVyPWZ1bmN0aW9uKGUsdCl7aWYoZS5fYWN0aXZlRmxhZyl0aHJvdyBuZXcgaS5JbnZhbGlkU3RhdGVFcnJvcjt2YXIgcj0xPDx0Ll9ub2RlVHlwZS0xO2lmKDA9PShlLndoYXRUb1Nob3cmcikpcmV0dXJuIG4uRmlsdGVyUmVzdWx0LlNraXA7aWYoIWUuZmlsdGVyKXJldHVybiBuLkZpbHRlclJlc3VsdC5BY2NlcHQ7ZS5fYWN0aXZlRmxhZz0hMDt2YXIgbz1uLkZpbHRlclJlc3VsdC5SZWplY3Q7dHJ5e289ZS5maWx0ZXIuYWNjZXB0Tm9kZSh0KX1jYXRjaCh0KXt0aHJvdyBlLl9hY3RpdmVGbGFnPSExLHR9cmV0dXJuIGUuX2FjdGl2ZUZsYWc9ITEsb319LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0saT10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDYpLGE9cigzKSxzPXIoMSksdT1yKDk5KSxsPXIoNzMpLGM9cigxNyksaD1yKDE3MykscD1yKDMwKSxmPXIoNTIpLGQ9cigzNyk7dC5kb2N1bWVudF9lbGVtZW50SW50ZXJmYWNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUuRWxlbWVudEltcGx9LHQuZG9jdW1lbnRfaW50ZXJuYWxDcmVhdGVFbGVtZW50TlM9ZnVuY3Rpb24oZSx0LHIsaSl7dmFyIG89bihoLm5hbWVzcGFjZV92YWxpZGF0ZUFuZEV4dHJhY3QodCxyKSwzKSxhPW9bMF0sdT1vWzFdLGw9b1syXSxjPW51bGw7cmV0dXJuIHZvaWQgMCE9PWkmJihjPXMuaXNTdHJpbmcoaSk/aTppLmlzKSxmLmVsZW1lbnRfY3JlYXRlQW5FbGVtZW50KGUsbCxhLHUsYywhMCl9LHQuZG9jdW1lbnRfYWRvcHQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO2lmKGUuX25vZGVEb2N1bWVudCE9PXR8fG51bGwhPT1lLl9wYXJlbnQpe3ZhciBzPWUuX25vZGVEb2N1bWVudDtpZihlLl9wYXJlbnQmJmQubXV0YXRpb25fcmVtb3ZlKGUsZS5fcGFyZW50KSx0IT09cylmb3IodmFyIHU9Yy50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUoZSwhMCwhMCk7bnVsbCE9PXU7KXtpZih1Ll9ub2RlRG9jdW1lbnQ9dCxhLkd1YXJkLmlzRWxlbWVudE5vZGUodSkpdHJ5e2Zvcih2YXIgaD0ocj12b2lkIDAsaSh1Ll9hdHRyaWJ1dGVMaXN0Ll9hc0FycmF5KCkpKSxmPWgubmV4dCgpOyFmLmRvbmU7Zj1oLm5leHQoKSl7Zi52YWx1ZS5fbm9kZURvY3VtZW50PXR9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2YmJiFmLmRvbmUmJihuPWgucmV0dXJuKSYmbi5jYWxsKGgpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1vLmRvbS5mZWF0dXJlcy5jdXN0b21FbGVtZW50cyYmYS5HdWFyZC5pc0VsZW1lbnROb2RlKHUpJiZcImN1c3RvbVwiPT09dS5fY3VzdG9tRWxlbWVudFN0YXRlJiZsLmN1c3RvbUVsZW1lbnRfZW5xdWV1ZUFDdXN0b21FbGVtZW50Q2FsbGJhY2tSZWFjdGlvbih1LFwiYWRvcHRlZENhbGxiYWNrXCIsW3MsdF0pLG8uZG9tLmZlYXR1cmVzLnN0ZXBzJiZwLmRvbV9ydW5BZG9wdGluZ1N0ZXBzKHUscyksdT1jLnRyZWVfZ2V0TmV4dERlc2NlbmRhbnROb2RlKGUsdSwhMCwhMCl9fX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDYpLG89cigzKSxhPXIoOSkscz1yKDE3KSx1PXIoNTEpLGw9cigzMCk7dC5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhPWZ1bmN0aW9uKGUsdCxyLGMpe3ZhciBoLHAsZj1zLnRyZWVfbm9kZUxlbmd0aChlKTtpZih0PmYpdGhyb3cgbmV3IGEuSW5kZXhTaXplRXJyb3IoXCJPZmZzZXQgZXhjZWVkcyBjaGFyYWN0ZXIgZGF0YSBsZW5ndGguIE9mZnNldDogXCIrdCtcIiwgTGVuZ3RoOiBcIitmK1wiLCBOb2RlIGlzIFwiK2Uubm9kZU5hbWUrXCIuXCIpO3Qrcj5mJiYocj1mLXQpLGkuZG9tLmZlYXR1cmVzLm11dGF0aW9uT2JzZXJ2ZXJzJiZ1Lm9ic2VydmVyX3F1ZXVlTXV0YXRpb25SZWNvcmQoXCJjaGFyYWN0ZXJEYXRhXCIsZSxudWxsLG51bGwsZS5fZGF0YSxbXSxbXSxudWxsLG51bGwpO3ZhciBkPWUuX2RhdGEuc3Vic3RyaW5nKDAsdCkrYytlLl9kYXRhLnN1YnN0cmluZyh0K3IpO2UuX2RhdGE9ZDt0cnl7Zm9yKHZhciBtPW4oaS5kb20ucmFuZ2VMaXN0KSx5PW0ubmV4dCgpOyF5LmRvbmU7eT1tLm5leHQoKSl7dmFyIHY9eS52YWx1ZTt2Ll9zdGFydFswXT09PWUmJnYuX3N0YXJ0WzFdPnQmJnYuX3N0YXJ0WzFdPD10K3ImJih2Ll9zdGFydFsxXT10KSx2Ll9lbmRbMF09PT1lJiZ2Ll9lbmRbMV0+dCYmdi5fZW5kWzFdPD10K3ImJih2Ll9lbmRbMV09dCksdi5fc3RhcnRbMF09PT1lJiZ2Ll9zdGFydFsxXT50K3ImJih2Ll9zdGFydFsxXSs9Yy5sZW5ndGgtciksdi5fZW5kWzBdPT09ZSYmdi5fZW5kWzFdPnQrciYmKHYuX2VuZFsxXSs9Yy5sZW5ndGgtcil9fWNhdGNoKGUpe2g9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3kmJiF5LmRvbmUmJihwPW0ucmV0dXJuKSYmcC5jYWxsKG0pfWZpbmFsbHl7aWYoaCl0aHJvdyBoLmVycm9yfX1pLmRvbS5mZWF0dXJlcy5zdGVwcyYmby5HdWFyZC5pc1RleHROb2RlKGUpJiZudWxsIT09ZS5fcGFyZW50JiZsLmRvbV9ydW5DaGlsZFRleHRDb250ZW50Q2hhbmdlU3RlcHMoZS5fcGFyZW50KX0sdC5jaGFyYWN0ZXJEYXRhX3N1YnN0cmluZ0RhdGE9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXMudHJlZV9ub2RlTGVuZ3RoKGUpO2lmKHQ+bil0aHJvdyBuZXcgYS5JbmRleFNpemVFcnJvcihcIk9mZnNldCBleGNlZWRzIGNoYXJhY3RlciBkYXRhIGxlbmd0aC4gT2Zmc2V0OiBcIit0K1wiLCBMZW5ndGg6IFwiK24rXCIsIE5vZGUgaXMgXCIrZS5ub2RlTmFtZStcIi5cIik7cmV0dXJuIHQrcj5uP2UuX2RhdGEuc3Vic3RyKHQpOmUuX2RhdGEuc3Vic3RyKHQscil9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LGk9dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChuKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfSxvPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoNyk7ZnVuY3Rpb24gcyhlKXt2YXIgdD1hLnN0cmluZy5zcGxpdEFTdHJpbmdPbkFTQ0lJV2hpdGVzcGFjZShlKTtyZXR1cm4gbmV3IFNldCh0KX1mdW5jdGlvbiB1KGUpe3JldHVybiBpKGUpLmpvaW4oXCIgXCIpfXQub3JkZXJlZFNldF9wYXJzZT1zLHQub3JkZXJlZFNldF9zZXJpYWxpemU9dSx0Lm9yZGVyZWRTZXRfc2FuaXRpemU9ZnVuY3Rpb24oZSl7cmV0dXJuIHUocyhlKSl9LHQub3JkZXJlZFNldF9jb250YWlucz1mdW5jdGlvbihlLHQscil7dmFyIG4saSxhLHM7dHJ5e2Zvcih2YXIgdT1vKHQpLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgYz1sLnZhbHVlLGg9ITE7dHJ5e2Zvcih2YXIgcD0oYT12b2lkIDAsbyhlKSksZj1wLm5leHQoKTshZi5kb25lO2Y9cC5uZXh0KCkpe3ZhciBkPWYudmFsdWU7aWYocil7aWYoZD09PWMpe2g9ITA7YnJlYWt9fWVsc2UgaWYoZC50b1VwcGVyQ2FzZSgpPT09Yy50b1VwcGVyQ2FzZSgpKXtoPSEwO2JyZWFrfX19Y2F0Y2goZSl7YT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZiYmIWYuZG9uZSYmKHM9cC5yZXR1cm4pJiZzLmNhbGwocCl9ZmluYWxseXtpZihhKXRocm93IGEuZXJyb3J9fWlmKCFoKXJldHVybiExfX1jYXRjaChlKXtuPXtlcnJvcjplfX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYoaT11LnJldHVybikmJmkuY2FsbCh1KX1maW5hbGx5e2lmKG4pdGhyb3cgbi5lcnJvcn19cmV0dXJuITB9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigxNzkpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMjYyKSxpPXIoMTEwKSxvPXIoMSk7aS5kb20uc2V0RmVhdHVyZXMoITEpLHQuY3JlYXRlRG9jdW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT0obmV3IG4uRE9NSW1wbGVtZW50YXRpb24pLmNyZWF0ZURvY3VtZW50KG51bGwsXCJyb290XCIsbnVsbCk7cmV0dXJuIGUuZG9jdW1lbnRFbGVtZW50JiZlLnJlbW92ZUNoaWxkKGUuZG9jdW1lbnRFbGVtZW50KSxlfSx0LnNhbml0aXplSW5wdXQ9ZnVuY3Rpb24oZSx0KXtpZihudWxsPT1lKXJldHVybiBlO2lmKHZvaWQgMD09PXQpcmV0dXJuIGUrXCJcIjt2YXIgcj1cIlwiO2UrPVwiXCI7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWUuY2hhckNvZGVBdChuKTtpZig5PT09aXx8MTA9PT1pfHwxMz09PWl8fGk+PTMyJiZpPD01NTI5NXx8aT49NTczNDQmJmk8PTY1NTMzKXIrPWUuY2hhckF0KG4pO2Vsc2UgaWYoaT49NTUyOTYmJmk8PTU2MzE5JiZuPGUubGVuZ3RoLTEpe3ZhciBhPWUuY2hhckNvZGVBdChuKzEpO2E+PTU2MzIwJiZhPD01NzM0Mz8oaT0xMDI0KihpLTU1Mjk2KSthLTU2MzIwKzY1NTM2LHIrPVN0cmluZy5mcm9tQ29kZVBvaW50KGkpLG4rKyk6cis9by5pc1N0cmluZyh0KT90OnQoZS5jaGFyQXQobiksbixlKX1lbHNlIHIrPW8uaXNTdHJpbmcodCk/dDp0KGUuY2hhckF0KG4pLG4sZSl9cmV0dXJuIHJ9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigxKSxpPXIoMTUzKTt0LkFib3J0Q29udHJvbGxlcj1pLkFib3J0Q29udHJvbGxlckltcGw7dmFyIG89cigxNTQpO3QuQWJvcnRTaWduYWw9by5BYm9ydFNpZ25hbEltcGw7dmFyIGE9cigxMDIpO3QuQWJzdHJhY3RSYW5nZT1hLkFic3RyYWN0UmFuZ2VJbXBsO3ZhciBzPXIoMTU3KTt0LkF0dHI9cy5BdHRySW1wbDt2YXIgdT1yKDE1OCk7dC5DREFUQVNlY3Rpb249dS5DREFUQVNlY3Rpb25JbXBsO3ZhciBsPXIoNzEpO3QuQ2hhcmFjdGVyRGF0YT1sLkNoYXJhY3RlckRhdGFJbXBsO3ZhciBjPXIoMjYzKSxoPXIoMTU5KTt0LkNvbW1lbnQ9aC5Db21tZW50SW1wbDt2YXIgcD1yKDE3MSk7dC5DdXN0b21FdmVudD1wLkN1c3RvbUV2ZW50SW1wbDt2YXIgZj1yKDEwMCk7dC5Eb2N1bWVudEZyYWdtZW50PWYuRG9jdW1lbnRGcmFnbWVudEltcGw7dmFyIGQ9cig5OCk7dC5Eb2N1bWVudD1kLkRvY3VtZW50SW1wbDt2YXIgbT1yKDI2NCkseT1yKDE1NSk7dC5Eb2N1bWVudFR5cGU9eS5Eb2N1bWVudFR5cGVJbXBsO3ZhciB2PXIoNik7dC5kb209di5kb207dmFyIF89cigxNDgpO3QuRE9NSW1wbGVtZW50YXRpb249Xy5ET01JbXBsZW1lbnRhdGlvbkltcGw7dmFyIGc9cigxNzApO3QuRE9NVG9rZW5MaXN0PWcuRE9NVG9rZW5MaXN0SW1wbDt2YXIgYj1yKDk5KTt0LkVsZW1lbnQ9Yi5FbGVtZW50SW1wbDt2YXIgeD1yKDEwNCk7dC5FdmVudD14LkV2ZW50SW1wbDt2YXIgdz1yKDcwKTt0LkV2ZW50VGFyZ2V0PXcuRXZlbnRUYXJnZXRJbXBsO3ZhciBFPXIoMTYxKTt0LkhUTUxDb2xsZWN0aW9uPUUuSFRNTENvbGxlY3Rpb25JbXBsO3ZhciBEPXIoMjY1KTt0Lk11dGF0aW9uT2JzZXJ2ZXI9RC5NdXRhdGlvbk9ic2VydmVySW1wbDt2YXIgUz1yKDE2OSk7dC5NdXRhdGlvblJlY29yZD1TLk11dGF0aW9uUmVjb3JkSW1wbDt2YXIgQz1yKDE2NCk7dC5OYW1lZE5vZGVNYXA9Qy5OYW1lZE5vZGVNYXBJbXBsO3ZhciBBPXIoMTY4KTt0Lk5vZGVGaWx0ZXI9QS5Ob2RlRmlsdGVySW1wbDt2YXIgTj1yKDM0KTt0Lk5vZGU9Ti5Ob2RlSW1wbDt2YXIgVD1yKDE2Nik7dC5Ob2RlSXRlcmF0b3I9VC5Ob2RlSXRlcmF0b3JJbXBsO3ZhciBPPXIoMTYyKTt0Lk5vZGVMaXN0PU8uTm9kZUxpc3RJbXBsO3ZhciBGPXIoMTYzKTt0Lk5vZGVMaXN0U3RhdGljPUYuTm9kZUxpc3RTdGF0aWNJbXBsO3ZhciBrPXIoMjY2KSxQPXIoMjY3KSxJPXIoMjY4KSxMPXIoMTYwKTt0LlByb2Nlc3NpbmdJbnN0cnVjdGlvbj1MLlByb2Nlc3NpbmdJbnN0cnVjdGlvbkltcGw7dmFyIE09cigxNjUpO3QuUmFuZ2U9TS5SYW5nZUltcGw7dmFyIEI9cigxNTYpO3QuU2hhZG93Um9vdD1CLlNoYWRvd1Jvb3RJbXBsO3ZhciBqPXIoMjY5KSxSPXIoMjcwKTt0LlN0YXRpY1JhbmdlPVIuU3RhdGljUmFuZ2VJbXBsO3ZhciB6PXIoMTAxKTt0LlRleHQ9ei5UZXh0SW1wbDt2YXIgVT1yKDEwMyk7dC5UcmF2ZXJzZXI9VS5UcmF2ZXJzZXJJbXBsO3ZhciBHPXIoMTY3KTt0LlRyZWVXYWxrZXI9Ry5UcmVlV2Fsa2VySW1wbDt2YXIgWD1yKDE0OSk7dC5XaW5kb3c9WC5XaW5kb3dJbXBsO3ZhciBxPXIoMTUxKTt0LlhNTERvY3VtZW50PXEuWE1MRG9jdW1lbnRJbXBsLG4uYXBwbHlNaXhpbihiLkVsZW1lbnRJbXBsLGMuQ2hpbGROb2RlSW1wbCksbi5hcHBseU1peGluKGwuQ2hhcmFjdGVyRGF0YUltcGwsYy5DaGlsZE5vZGVJbXBsKSxuLmFwcGx5TWl4aW4oeS5Eb2N1bWVudFR5cGVJbXBsLGMuQ2hpbGROb2RlSW1wbCksbi5hcHBseU1peGluKGQuRG9jdW1lbnRJbXBsLG0uRG9jdW1lbnRPclNoYWRvd1Jvb3RJbXBsKSxuLmFwcGx5TWl4aW4oQi5TaGFkb3dSb290SW1wbCxtLkRvY3VtZW50T3JTaGFkb3dSb290SW1wbCksbi5hcHBseU1peGluKGIuRWxlbWVudEltcGwsay5Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGVJbXBsKSxuLmFwcGx5TWl4aW4obC5DaGFyYWN0ZXJEYXRhSW1wbCxrLk5vbkRvY3VtZW50VHlwZUNoaWxkTm9kZUltcGwpLG4uYXBwbHlNaXhpbihkLkRvY3VtZW50SW1wbCxQLk5vbkVsZW1lbnRQYXJlbnROb2RlSW1wbCksbi5hcHBseU1peGluKGYuRG9jdW1lbnRGcmFnbWVudEltcGwsUC5Ob25FbGVtZW50UGFyZW50Tm9kZUltcGwpLG4uYXBwbHlNaXhpbihkLkRvY3VtZW50SW1wbCxJLlBhcmVudE5vZGVJbXBsKSxuLmFwcGx5TWl4aW4oZi5Eb2N1bWVudEZyYWdtZW50SW1wbCxJLlBhcmVudE5vZGVJbXBsKSxuLmFwcGx5TWl4aW4oYi5FbGVtZW50SW1wbCxJLlBhcmVudE5vZGVJbXBsKSxuLmFwcGx5TWl4aW4oei5UZXh0SW1wbCxqLlNsb3RhYmxlSW1wbCksbi5hcHBseU1peGluKGIuRWxlbWVudEltcGwsai5TbG90YWJsZUltcGwpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZnVuY3Rpb24oZSl7ZVtlLkVPRj0wXT1cIkVPRlwiLGVbZS5EZWNsYXJhdGlvbj0xXT1cIkRlY2xhcmF0aW9uXCIsZVtlLkRvY1R5cGU9Ml09XCJEb2NUeXBlXCIsZVtlLkVsZW1lbnQ9M109XCJFbGVtZW50XCIsZVtlLlRleHQ9NF09XCJUZXh0XCIsZVtlLkNEQVRBPTVdPVwiQ0RBVEFcIixlW2UuUEk9Nl09XCJQSVwiLGVbZS5Db21tZW50PTddPVwiQ29tbWVudFwiLGVbZS5DbG9zaW5nVGFnPThdPVwiQ2xvc2luZ1RhZ1wifSh0LlRva2VuVHlwZXx8KHQuVG9rZW5UeXBlPXt9KSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDY0KSxyKDIwKSxyKDY2KTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEpLGE9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBudWxsIT09ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5fcGFyc2U9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49dGhpcy5fYnVpbGRlck9wdGlvbnMsaT1udWxsO3JldHVybiBvLmlzRnVuY3Rpb24odCk/aT10aGlzLnBhcnNlKGUsdC5hcHBseSh0aGlzKSk6by5pc0FycmF5KHQpfHxvLmlzU2V0KHQpP28uZm9yRWFjaEFycmF5KHQsKGZ1bmN0aW9uKHQpe3JldHVybiBpPXIucGFyc2UoZSx0KX0pLHRoaXMpOm8uaXNNYXAodCl8fG8uaXNPYmplY3QodCk/by5mb3JFYWNoT2JqZWN0KHQsKGZ1bmN0aW9uKHQsYSl7aWYoby5pc0Z1bmN0aW9uKGEpJiYoYT1hLmFwcGx5KHIpKSxuLmlnbm9yZUNvbnZlcnRlcnN8fDAhPT10LmluZGV4T2Yobi5jb252ZXJ0LmF0dCkpaWYobi5pZ25vcmVDb252ZXJ0ZXJzfHwwIT09dC5pbmRleE9mKG4uY29udmVydC50ZXh0KSlpZihuLmlnbm9yZUNvbnZlcnRlcnN8fDAhPT10LmluZGV4T2Yobi5jb252ZXJ0LmNkYXRhKSlpZihuLmlnbm9yZUNvbnZlcnRlcnN8fDAhPT10LmluZGV4T2Yobi5jb252ZXJ0LmNvbW1lbnQpKWlmKG4uaWdub3JlQ29udmVydGVyc3x8MCE9PXQuaW5kZXhPZihuLmNvbnZlcnQuaW5zKSlpZigoby5pc0FycmF5KGEpfHxvLmlzU2V0KGEpKSYmby5pc0VtcHR5KGEpKTtlbHNlIGlmKChvLmlzTWFwKGEpfHxvLmlzT2JqZWN0KGEpKSYmby5pc0VtcHR5KGEpKWk9ci5lbGVtZW50KGUsdm9pZCAwLHIuc2FuaXRpemUodCkpfHxpO2Vsc2UgaWYobi5rZWVwTnVsbE5vZGVzfHxudWxsIT1hKWlmKG8uaXNBcnJheShhKXx8by5pc1NldChhKSlvLmZvckVhY2hBcnJheShhLChmdW5jdGlvbihuKXt2YXIgbz17fTtvW3RdPW4saT1yLnBhcnNlKGUsbyl9KSxyKTtlbHNlIGlmKG8uaXNNYXAoYSl8fG8uaXNPYmplY3QoYSkpeyhzPXIuZWxlbWVudChlLHZvaWQgMCxyLnNhbml0aXplKHQpKSkmJihpPXMsci5wYXJzZShzLGEpKX1lbHNlIGlmKG51bGwhPWEmJlwiXCIhPT1hKXt2YXIgczsocz1yLmVsZW1lbnQoZSx2b2lkIDAsci5zYW5pdGl6ZSh0KSkpJiYoaT1zLHIudGV4dChzLHIuX2RlY29kZVRleHQoci5zYW5pdGl6ZShhKSkpKX1lbHNlIGk9ci5lbGVtZW50KGUsdm9pZCAwLHIuc2FuaXRpemUodCkpfHxpO2Vsc2U7ZWxzZSBpZihvLmlzU3RyaW5nKGEpKXt2YXIgdT1hLmluZGV4T2YoXCIgXCIpLGw9LTE9PT11P2E6YS5zdWJzdHIoMCx1KSxjPS0xPT09dT9cIlwiOmEuc3Vic3RyKHUrMSk7aT1yLmluc3RydWN0aW9uKGUsci5zYW5pdGl6ZShsKSxyLnNhbml0aXplKGMpKXx8aX1lbHNlIG8uaXNBcnJheShhKXx8by5pc1NldChhKT9vLmZvckVhY2hBcnJheShhLChmdW5jdGlvbih0KXt2YXIgbj10LmluZGV4T2YoXCIgXCIpLG89LTE9PT1uP3Q6dC5zdWJzdHIoMCxuKSxhPS0xPT09bj9cIlwiOnQuc3Vic3RyKG4rMSk7aT1yLmluc3RydWN0aW9uKGUsci5zYW5pdGl6ZShvKSxyLnNhbml0aXplKGEpKXx8aX0pLHIpOm8uZm9yRWFjaE9iamVjdChhLChmdW5jdGlvbih0LG4pe3JldHVybiBpPXIuaW5zdHJ1Y3Rpb24oZSxyLnNhbml0aXplKHQpLHIuc2FuaXRpemUobikpfHxpfSkscik7ZWxzZSBvLmlzQXJyYXkoYSl8fG8uaXNTZXQoYSk/by5mb3JFYWNoQXJyYXkoYSwoZnVuY3Rpb24odCl7cmV0dXJuIGk9ci5jb21tZW50KGUsci5zYW5pdGl6ZSh0KSl8fGl9KSxyKTppPXIuY29tbWVudChlLHIuc2FuaXRpemUoYSkpfHxpO2Vsc2Ugby5pc0FycmF5KGEpfHxvLmlzU2V0KGEpP28uZm9yRWFjaEFycmF5KGEsKGZ1bmN0aW9uKHQpe3JldHVybiBpPXIuY2RhdGEoZSxyLnNhbml0aXplKHQpKXx8aX0pLHIpOmk9ci5jZGF0YShlLHIuc2FuaXRpemUoYSkpfHxpO2Vsc2UgaT1vLmlzTWFwKGEpfHxvLmlzT2JqZWN0KGEpP3IucGFyc2UoZSxhKTpyLnRleHQoZSxyLl9kZWNvZGVUZXh0KHIuc2FuaXRpemUoYSkpKXx8aTtlbHNlIGlmKHQ9PT1uLmNvbnZlcnQuYXR0KXtpZihvLmlzQXJyYXkoYSl8fG8uaXNTZXQoYSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhdHRyaWJ1dGU6IFwiK2EudG9TdHJpbmcoKStcIi4gXCIrZS5fZGVidWdJbmZvKCkpO28uZm9yRWFjaE9iamVjdChhLChmdW5jdGlvbih0LG4pe2k9ci5hdHRyaWJ1dGUoZSx2b2lkIDAsci5zYW5pdGl6ZSh0KSxyLl9kZWNvZGVBdHRyaWJ1dGVWYWx1ZShyLnNhbml0aXplKG4pKSl8fGl9KSl9ZWxzZSBpPXIuYXR0cmlidXRlKGUsdm9pZCAwLHIuc2FuaXRpemUodC5zdWJzdHIobi5jb252ZXJ0LmF0dC5sZW5ndGgpKSxyLl9kZWNvZGVBdHRyaWJ1dGVWYWx1ZShyLnNhbml0aXplKGEpKSl8fGl9KSx0aGlzKToobi5rZWVwTnVsbE5vZGVzfHxudWxsIT10KSYmKGk9dGhpcy50ZXh0KGUsdGhpcy5fZGVjb2RlVGV4dCh0aGlzLnNhbml0aXplKHQpKSl8fGkpLGl8fGV9LHR9KHIoNzUpLkJhc2VSZWFkZXIpO3QuT2JqZWN0UmVhZGVyPWF9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM5KTtlLmV4cG9ydHM9bmV3IG4oe2V4cGxpY2l0OltyKDI4NikscigyODcpLHIoMjg4KV19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKGUpe3RoaXMubGV2ZWw9MCx0aGlzLl9idWlsZGVyT3B0aW9ucz1lLHRoaXMuX3dyaXRlck9wdGlvbnM9ZX07dC5CYXNlQ0JXcml0ZXI9bn0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTYpLGk9cig4KSxvPXIoMTE2KTtlLmV4cG9ydHM9IW4mJiFpKChmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkobyhcImRpdlwiKSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTEpLGk9cigxMyksbz1uLmRvY3VtZW50LGE9aShvKSYmaShvLmNyZWF0ZUVsZW1lbnQpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gYT9vLmNyZWF0ZUVsZW1lbnQoZSk6e319fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMTgpLGk9RnVuY3Rpb24udG9TdHJpbmc7XCJmdW5jdGlvblwiIT10eXBlb2Ygbi5pbnNwZWN0U291cmNlJiYobi5pbnNwZWN0U291cmNlPWZ1bmN0aW9uKGUpe3JldHVybiBpLmNhbGwoZSl9KSxlLmV4cG9ydHM9bi5pbnNwZWN0U291cmNlfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMSksaT1yKDgwKSxvPW5bXCJfX2NvcmUtanNfc2hhcmVkX19cIl18fGkoXCJfX2NvcmUtanNfc2hhcmVkX19cIix7fSk7ZS5leHBvcnRzPW99LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE0KSxpPXIoMTg3KSxvPXIoNTUpLGE9cigxNSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWkodCkscz1hLmYsdT1vLmYsbD0wO2w8ci5sZW5ndGg7bCsrKXt2YXIgYz1yW2xdO24oZSxjKXx8cyhlLGMsdSh0LGMpKX19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMSk7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE0KSxpPXIoMjQpLG89cigxMjIpLmluZGV4T2YsYT1yKDQ1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixzPWkoZSksdT0wLGw9W107Zm9yKHIgaW4gcykhbihhLHIpJiZuKHMscikmJmwucHVzaChyKTtmb3IoO3QubGVuZ3RoPnU7KW4ocyxyPXRbdSsrXSkmJih+byhsLHIpfHxsLnB1c2gocikpO3JldHVybiBsfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjQpLGk9cigyNiksbz1yKDgzKSxhPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIsYSl7dmFyIHMsdT1uKHQpLGw9aSh1Lmxlbmd0aCksYz1vKGEsbCk7aWYoZSYmciE9cil7Zm9yKDtsPmM7KWlmKChzPXVbYysrXSkhPXMpcmV0dXJuITB9ZWxzZSBmb3IoO2w+YztjKyspaWYoKGV8fGMgaW4gdSkmJnVbY109PT1yKXJldHVybiBlfHxjfHwwO3JldHVybiFlJiYtMX19O2UuZXhwb3J0cz17aW5jbHVkZXM6YSghMCksaW5kZXhPZjphKCExKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgpLGk9LyN8XFwucHJvdG90eXBlXFwuLyxvPWZ1bmN0aW9uKGUsdCl7dmFyIHI9c1thKGUpXTtyZXR1cm4gcj09bHx8ciE9dSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/bih0KTohIXQpfSxhPW8ubm9ybWFsaXplPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcoZSkucmVwbGFjZShpLFwiLlwiKS50b0xvd2VyQ2FzZSgpfSxzPW8uZGF0YT17fSx1PW8uTkFUSVZFPVwiTlwiLGw9by5QT0xZRklMTD1cIlBcIjtlLmV4cG9ydHM9b30sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoODYpO2UuZXhwb3J0cz1uJiYhU3ltYm9sLnNoYW0mJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3J9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDUpO3QuZj1ufSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMjApLGk9cigxNCksbz1yKDEyNSksYT1yKDE1KS5mO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uLlN5bWJvbHx8KG4uU3ltYm9sPXt9KTtpKHQsZSl8fGEodCxlLHt2YWx1ZTpvLmYoZSl9KX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKFN0cmluZyhlKStcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtyZXR1cm4gZX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzKSxpPXIoNTkpLG89cig1KShcInNwZWNpZXNcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIGkoZSkmJihcImZ1bmN0aW9uXCIhPXR5cGVvZihyPWUuY29uc3RydWN0b3IpfHxyIT09QXJyYXkmJiFpKHIucHJvdG90eXBlKT9uKHIpJiZudWxsPT09KHI9cltvXSkmJihyPXZvaWQgMCk6cj12b2lkIDApLG5ldyh2b2lkIDA9PT1yP0FycmF5OnIpKDA9PT10PzA6dCl9fSxmdW5jdGlvbihlLHQscil7dmFyIG4saSxvPXIoMTEpLGE9cigxOTMpLHM9by5wcm9jZXNzLHU9cyYmcy52ZXJzaW9ucyxsPXUmJnUudjg7bD9pPShuPWwuc3BsaXQoXCIuXCIpKVswXStuWzFdOmEmJighKG49YS5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pKXx8blsxXT49NzQpJiYobj1hLm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKSkmJihpPW5bMV0pLGUuZXhwb3J0cz1pJiYraX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNSksaT1yKDYwKSxvPXIoMTUpLGE9bihcInVuc2NvcGFibGVzXCIpLHM9QXJyYXkucHJvdG90eXBlO251bGw9PXNbYV0mJm8uZihzLGEse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTppKG51bGwpfSksZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3NbYV1bZV09ITB9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saSxvLGE9cigxMzIpLHM9cigyMSksdT1yKDE0KSxsPXIoNSksYz1yKDQ0KSxoPWwoXCJpdGVyYXRvclwiKSxwPSExO1tdLmtleXMmJihcIm5leHRcImluKG89W10ua2V5cygpKT8oaT1hKGEobykpKSE9PU9iamVjdC5wcm90b3R5cGUmJihuPWkpOnA9ITApLG51bGw9PW4mJihuPXt9KSxjfHx1KG4saCl8fHMobixoLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpLGUuZXhwb3J0cz17SXRlcmF0b3JQcm90b3R5cGU6bixCVUdHWV9TQUZBUklfSVRFUkFUT1JTOnB9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNCksaT1yKDI3KSxvPXIoNTcpLGE9cigxOTYpLHM9byhcIklFX1BST1RPXCIpLHU9T2JqZWN0LnByb3RvdHlwZTtlLmV4cG9ydHM9YT9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9aShlKSxuKGUscyk/ZVtzXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmNvbnN0cnVjdG9yJiZlIGluc3RhbmNlb2YgZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLnByb3RvdHlwZTplIGluc3RhbmNlb2YgT2JqZWN0P3U6bnVsbH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE4KSxpPXIoMTk3KTtlLmV4cG9ydHM9T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoXCJfX3Byb3RvX19cImlue30/ZnVuY3Rpb24oKXt2YXIgZSx0PSExLHI9e307dHJ5eyhlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSxcIl9fcHJvdG9fX1wiKS5zZXQpLmNhbGwocixbXSksdD1yIGluc3RhbmNlb2YgQXJyYXl9Y2F0Y2goZSl7fXJldHVybiBmdW5jdGlvbihyLG8pe3JldHVybiBuKHIpLGkobyksdD9lLmNhbGwocixvKTpyLl9fcHJvdG9fXz1vLHJ9fSgpOnZvaWQgMCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDU2KSxpPXIoMTUpLG89cig0MCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgYT1uKHQpO2EgaW4gZT9pLmYoZSxhLG8oMCxyKSk6ZVthXT1yfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoOTApLGk9cig0Miksbz1yKDUpKFwidG9TdHJpbmdUYWdcIiksYT1cIkFyZ3VtZW50c1wiPT1pKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSk7ZS5leHBvcnRzPW4/aTpmdW5jdGlvbihlKXt2YXIgdCxyLG47cmV0dXJuIHZvaWQgMD09PWU/XCJVbmRlZmluZWRcIjpudWxsPT09ZT9cIk51bGxcIjpcInN0cmluZ1wiPT10eXBlb2Yocj1mdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gZVt0XX1jYXRjaChlKXt9fSh0PU9iamVjdChlKSxvKSk/cjphP2kodCk6XCJPYmplY3RcIj09KG49aSh0KSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY2FsbGVlP1wiQXJndW1lbnRzXCI6bn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDE4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZT1uKHRoaXMpLHQ9XCJcIjtyZXR1cm4gZS5nbG9iYWwmJih0Kz1cImdcIiksZS5pZ25vcmVDYXNlJiYodCs9XCJpXCIpLGUubXVsdGlsaW5lJiYodCs9XCJtXCIpLGUuZG90QWxsJiYodCs9XCJzXCIpLGUudW5pY29kZSYmKHQrPVwidVwiKSxlLnN0aWNreSYmKHQrPVwieVwiKSx0fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDcpLGk9cigzNSksbz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgbyxhLHM9U3RyaW5nKGkodCkpLHU9bihyKSxsPXMubGVuZ3RoO3JldHVybiB1PDB8fHU+PWw/ZT9cIlwiOnZvaWQgMDoobz1zLmNoYXJDb2RlQXQodSkpPDU1Mjk2fHxvPjU2MzE5fHx1KzE9PT1sfHwoYT1zLmNoYXJDb2RlQXQodSsxKSk8NTYzMjB8fGE+NTczNDM/ZT9zLmNoYXJBdCh1KTpvOmU/cy5zbGljZSh1LHUrMik6YS01NjMyMCsoby01NTI5Njw8MTApKzY1NTM2fX07ZS5leHBvcnRzPXtjb2RlQXQ6byghMSksY2hhckF0Om8oITApfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNCksaT1yKDI3KSxvPXIoNjEpO24oe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOnIoOCkoKGZ1bmN0aW9uKCl7bygxKX0pKX0se2tleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIG8oaShlKSl9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigxMSksbz1yKDEyMyksYT1yKDI1KSxzPXIoMTQwKSx1PXIoMTQxKSxsPXIoMTQyKSxjPXIoMTMpLGg9cig4KSxwPXIoMjA4KSxmPXIoNjIpLGQ9cigyMDkpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIG09LTEhPT1lLmluZGV4T2YoXCJNYXBcIikseT0tMSE9PWUuaW5kZXhPZihcIldlYWtcIiksdj1tP1wic2V0XCI6XCJhZGRcIixfPWlbZV0sZz1fJiZfLnByb3RvdHlwZSxiPV8seD17fSx3PWZ1bmN0aW9uKGUpe3ZhciB0PWdbZV07YShnLGUsXCJhZGRcIj09ZT9mdW5jdGlvbihlKXtyZXR1cm4gdC5jYWxsKHRoaXMsMD09PWU/MDplKSx0aGlzfTpcImRlbGV0ZVwiPT1lP2Z1bmN0aW9uKGUpe3JldHVybiEoeSYmIWMoZSkpJiZ0LmNhbGwodGhpcywwPT09ZT8wOmUpfTpcImdldFwiPT1lP2Z1bmN0aW9uKGUpe3JldHVybiB5JiYhYyhlKT92b2lkIDA6dC5jYWxsKHRoaXMsMD09PWU/MDplKX06XCJoYXNcIj09ZT9mdW5jdGlvbihlKXtyZXR1cm4hKHkmJiFjKGUpKSYmdC5jYWxsKHRoaXMsMD09PWU/MDplKX06ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKHRoaXMsMD09PWU/MDplLHIpLHRoaXN9KX07aWYobyhlLFwiZnVuY3Rpb25cIiE9dHlwZW9mIF98fCEoeXx8Zy5mb3JFYWNoJiYhaCgoZnVuY3Rpb24oKXsobmV3IF8pLmVudHJpZXMoKS5uZXh0KCl9KSkpKSliPXIuZ2V0Q29uc3RydWN0b3IodCxlLG0sdikscy5SRVFVSVJFRD0hMDtlbHNlIGlmKG8oZSwhMCkpe3ZhciBFPW5ldyBiLEQ9RVt2XSh5P3t9Oi0wLDEpIT1FLFM9aCgoZnVuY3Rpb24oKXtFLmhhcygxKX0pKSxDPXAoKGZ1bmN0aW9uKGUpe25ldyBfKGUpfSkpLEE9IXkmJmgoKGZ1bmN0aW9uKCl7Zm9yKHZhciBlPW5ldyBfLHQ9NTt0LS07KWVbdl0odCx0KTtyZXR1cm4hZS5oYXMoLTApfSkpO0N8fCgoYj10KChmdW5jdGlvbih0LHIpe2wodCxiLGUpO3ZhciBuPWQobmV3IF8sdCxiKTtyZXR1cm4gbnVsbCE9ciYmdShyLG5bdl0sbixtKSxufSkpKS5wcm90b3R5cGU9ZyxnLmNvbnN0cnVjdG9yPWIpLChTfHxBKSYmKHcoXCJkZWxldGVcIiksdyhcImhhc1wiKSxtJiZ3KFwiZ2V0XCIpKSwoQXx8RCkmJncodikseSYmZy5jbGVhciYmZGVsZXRlIGcuY2xlYXJ9cmV0dXJuIHhbZV09YixuKHtnbG9iYWw6ITAsZm9yY2VkOmIhPV99LHgpLGYoYixlKSx5fHxyLnNldFN0cm9uZyhiLGUsbSksYn19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQ1KSxpPXIoMTMpLG89cigxNCksYT1yKDE1KS5mLHM9cig1OCksdT1yKDIwNCksbD1zKFwibWV0YVwiKSxjPTAsaD1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSxwPWZ1bmN0aW9uKGUpe2EoZSxsLHt2YWx1ZTp7b2JqZWN0SUQ6XCJPXCIrICsrYyx3ZWFrRGF0YTp7fX19KX0sZj1lLmV4cG9ydHM9e1JFUVVJUkVEOiExLGZhc3RLZXk6ZnVuY3Rpb24oZSx0KXtpZighaShlKSlyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZT9lOihcInN0cmluZ1wiPT10eXBlb2YgZT9cIlNcIjpcIlBcIikrZTtpZighbyhlLGwpKXtpZighaChlKSlyZXR1cm5cIkZcIjtpZighdClyZXR1cm5cIkVcIjtwKGUpfXJldHVybiBlW2xdLm9iamVjdElEfSxnZXRXZWFrRGF0YTpmdW5jdGlvbihlLHQpe2lmKCFvKGUsbCkpe2lmKCFoKGUpKXJldHVybiEwO2lmKCF0KXJldHVybiExO3AoZSl9cmV0dXJuIGVbbF0ud2Vha0RhdGF9LG9uRnJlZXplOmZ1bmN0aW9uKGUpe3JldHVybiB1JiZmLlJFUVVJUkVEJiZoKGUpJiYhbyhlLGwpJiZwKGUpLGV9fTtuW2xdPSEwfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxOCksaT1yKDIwNSksbz1yKDI2KSxhPXIoODcpLHM9cigyMDYpLHU9cigyMDcpLGw9ZnVuY3Rpb24oZSx0KXt0aGlzLnN0b3BwZWQ9ZSx0aGlzLnJlc3VsdD10fTsoZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGMsaCl7dmFyIHAsZixkLG0seSx2LF8sZz1hKHQscixjPzI6MSk7aWYoaClwPWU7ZWxzZXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZihmPXMoZSkpKXRocm93IFR5cGVFcnJvcihcIlRhcmdldCBpcyBub3QgaXRlcmFibGVcIik7aWYoaShmKSl7Zm9yKGQ9MCxtPW8oZS5sZW5ndGgpO20+ZDtkKyspaWYoKHk9Yz9nKG4oXz1lW2RdKVswXSxfWzFdKTpnKGVbZF0pKSYmeSBpbnN0YW5jZW9mIGwpcmV0dXJuIHk7cmV0dXJuIG5ldyBsKCExKX1wPWYuY2FsbChlKX1mb3Iodj1wLm5leHQ7IShfPXYuY2FsbChwKSkuZG9uZTspaWYoXCJvYmplY3RcIj09dHlwZW9mKHk9dShwLGcsXy52YWx1ZSxjKSkmJnkmJnkgaW5zdGFuY2VvZiBsKXJldHVybiB5O3JldHVybiBuZXcgbCghMSl9KS5zdG9wPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbCghMCxlKX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBUeXBlRXJyb3IoXCJJbmNvcnJlY3QgXCIrKHI/citcIiBcIjpcIlwiKStcImludm9jYXRpb25cIik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxNSkuZixpPXIoNjApLG89cigyMTApLGE9cig4Nykscz1yKDE0MiksdT1yKDE0MSksbD1yKDg4KSxjPXIoMjExKSxoPXIoMTYpLHA9cigxNDApLmZhc3RLZXksZj1yKDQzKSxkPWYuc2V0LG09Zi5nZXR0ZXJGb3I7ZS5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbihlLHQscixsKXt2YXIgYz1lKChmdW5jdGlvbihlLG4pe3MoZSxjLHQpLGQoZSx7dHlwZTp0LGluZGV4OmkobnVsbCksZmlyc3Q6dm9pZCAwLGxhc3Q6dm9pZCAwLHNpemU6MH0pLGh8fChlLnNpemU9MCksbnVsbCE9biYmdShuLGVbbF0sZSxyKX0pKSxmPW0odCkseT1mdW5jdGlvbihlLHQscil7dmFyIG4saSxvPWYoZSksYT12KGUsdCk7cmV0dXJuIGE/YS52YWx1ZT1yOihvLmxhc3Q9YT17aW5kZXg6aT1wKHQsITApLGtleTp0LHZhbHVlOnIscHJldmlvdXM6bj1vLmxhc3QsbmV4dDp2b2lkIDAscmVtb3ZlZDohMX0sby5maXJzdHx8KG8uZmlyc3Q9YSksbiYmKG4ubmV4dD1hKSxoP28uc2l6ZSsrOmUuc2l6ZSsrLFwiRlwiIT09aSYmKG8uaW5kZXhbaV09YSkpLGV9LHY9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPWYoZSksaT1wKHQpO2lmKFwiRlwiIT09aSlyZXR1cm4gbi5pbmRleFtpXTtmb3Iocj1uLmZpcnN0O3I7cj1yLm5leHQpaWYoci5rZXk9PXQpcmV0dXJuIHJ9O3JldHVybiBvKGMucHJvdG90eXBlLHtjbGVhcjpmdW5jdGlvbigpe2Zvcih2YXIgZT1mKHRoaXMpLHQ9ZS5pbmRleCxyPWUuZmlyc3Q7cjspci5yZW1vdmVkPSEwLHIucHJldmlvdXMmJihyLnByZXZpb3VzPXIucHJldmlvdXMubmV4dD12b2lkIDApLGRlbGV0ZSB0W3IuaW5kZXhdLHI9ci5uZXh0O2UuZmlyc3Q9ZS5sYXN0PXZvaWQgMCxoP2Uuc2l6ZT0wOnRoaXMuc2l6ZT0wfSxkZWxldGU6ZnVuY3Rpb24oZSl7dmFyIHQ9Zih0aGlzKSxyPXYodGhpcyxlKTtpZihyKXt2YXIgbj1yLm5leHQsaT1yLnByZXZpb3VzO2RlbGV0ZSB0LmluZGV4W3IuaW5kZXhdLHIucmVtb3ZlZD0hMCxpJiYoaS5uZXh0PW4pLG4mJihuLnByZXZpb3VzPWkpLHQuZmlyc3Q9PXImJih0LmZpcnN0PW4pLHQubGFzdD09ciYmKHQubGFzdD1pKSxoP3Quc2l6ZS0tOnRoaXMuc2l6ZS0tfXJldHVybiEhcn0sZm9yRWFjaDpmdW5jdGlvbihlKXtmb3IodmFyIHQscj1mKHRoaXMpLG49YShlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLDMpO3Q9dD90Lm5leHQ6ci5maXJzdDspZm9yKG4odC52YWx1ZSx0LmtleSx0aGlzKTt0JiZ0LnJlbW92ZWQ7KXQ9dC5wcmV2aW91c30saGFzOmZ1bmN0aW9uKGUpe3JldHVybiEhdih0aGlzLGUpfX0pLG8oYy5wcm90b3R5cGUscj97Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXYodGhpcyxlKTtyZXR1cm4gdCYmdC52YWx1ZX0sc2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHkodGhpcywwPT09ZT8wOmUsdCl9fTp7YWRkOmZ1bmN0aW9uKGUpe3JldHVybiB5KHRoaXMsZT0wPT09ZT8wOmUsZSl9fSksaCYmbihjLnByb3RvdHlwZSxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGYodGhpcykuc2l6ZX19KSxjfSxzZXRTdHJvbmc6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQrXCIgSXRlcmF0b3JcIixpPW0odCksbz1tKG4pO2woZSx0LChmdW5jdGlvbihlLHQpe2QodGhpcyx7dHlwZTpuLHRhcmdldDplLHN0YXRlOmkoZSksa2luZDp0LGxhc3Q6dm9pZCAwfSl9KSwoZnVuY3Rpb24oKXtmb3IodmFyIGU9byh0aGlzKSx0PWUua2luZCxyPWUubGFzdDtyJiZyLnJlbW92ZWQ7KXI9ci5wcmV2aW91cztyZXR1cm4gZS50YXJnZXQmJihlLmxhc3Q9cj1yP3IubmV4dDplLnN0YXRlLmZpcnN0KT9cImtleXNcIj09dD97dmFsdWU6ci5rZXksZG9uZTohMX06XCJ2YWx1ZXNcIj09dD97dmFsdWU6ci52YWx1ZSxkb25lOiExfTp7dmFsdWU6W3Iua2V5LHIudmFsdWVdLGRvbmU6ITF9OihlLnRhcmdldD12b2lkIDAse3ZhbHVlOnZvaWQgMCxkb25lOiEwfSl9KSxyP1wiZW50cmllc1wiOlwidmFsdWVzXCIsIXIsITApLGModCl9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9cig0KSxvPXIoNTUpLmYsYT1yKDI2KSxzPXIoMjIyKSx1PXIoMzUpLGw9cigyMjQpLGM9cig0NCksaD1cIlwiLmVuZHNXaXRoLHA9TWF0aC5taW4sZj1sKFwiZW5kc1dpdGhcIik7aSh7dGFyZ2V0OlwiU3RyaW5nXCIscHJvdG86ITAsZm9yY2VkOiEhKGN8fGZ8fChuPW8oU3RyaW5nLnByb3RvdHlwZSxcImVuZHNXaXRoXCIpLCFufHxuLndyaXRhYmxlKSkmJiFmfSx7ZW5kc1dpdGg6ZnVuY3Rpb24oZSl7dmFyIHQ9U3RyaW5nKHUodGhpcykpO3MoZSk7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbj1hKHQubGVuZ3RoKSxpPXZvaWQgMD09PXI/bjpwKGEociksbiksbz1TdHJpbmcoZSk7cmV0dXJuIGg/aC5jYWxsKHQsbyxpKTp0LnNsaWNlKGktby5sZW5ndGgsaSk9PT1vfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKGUpe1xuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbnZhciBuPXIoMjI5KSxpPXIoMjMwKSxvPXIoMjMxKTtmdW5jdGlvbiBhKCl7cmV0dXJuIHUuVFlQRURfQVJSQVlfU1VQUE9SVD8yMTQ3NDgzNjQ3OjEwNzM3NDE4MjN9ZnVuY3Rpb24gcyhlLHQpe2lmKGEoKTx0KXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGhcIik7cmV0dXJuIHUuVFlQRURfQVJSQVlfU1VQUE9SVD8oZT1uZXcgVWludDhBcnJheSh0KSkuX19wcm90b19fPXUucHJvdG90eXBlOihudWxsPT09ZSYmKGU9bmV3IHUodCkpLGUubGVuZ3RoPXQpLGV9ZnVuY3Rpb24gdShlLHQscil7aWYoISh1LlRZUEVEX0FSUkFZX1NVUFBPUlR8fHRoaXMgaW5zdGFuY2VvZiB1KSlyZXR1cm4gbmV3IHUoZSx0LHIpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtyZXR1cm4gaCh0aGlzLGUpfXJldHVybiBsKHRoaXMsZSx0LHIpfWZ1bmN0aW9uIGwoZSx0LHIsbil7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZ0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZnVuY3Rpb24oZSx0LHIsbil7aWYodC5ieXRlTGVuZ3RoLHI8MHx8dC5ieXRlTGVuZ3RoPHIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInb2Zmc2V0JyBpcyBvdXQgb2YgYm91bmRzXCIpO2lmKHQuYnl0ZUxlbmd0aDxyKyhufHwwKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidsZW5ndGgnIGlzIG91dCBvZiBib3VuZHNcIik7dD12b2lkIDA9PT1yJiZ2b2lkIDA9PT1uP25ldyBVaW50OEFycmF5KHQpOnZvaWQgMD09PW4/bmV3IFVpbnQ4QXJyYXkodCxyKTpuZXcgVWludDhBcnJheSh0LHIsbik7dS5UWVBFRF9BUlJBWV9TVVBQT1JUPyhlPXQpLl9fcHJvdG9fXz11LnByb3RvdHlwZTplPXAoZSx0KTtyZXR1cm4gZX0oZSx0LHIsbik6XCJzdHJpbmdcIj09dHlwZW9mIHQ/ZnVuY3Rpb24oZSx0LHIpe1wic3RyaW5nXCI9PXR5cGVvZiByJiZcIlwiIT09cnx8KHI9XCJ1dGY4XCIpO2lmKCF1LmlzRW5jb2RpbmcocikpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKTt2YXIgbj0wfGQodCxyKSxpPShlPXMoZSxuKSkud3JpdGUodCxyKTtpIT09biYmKGU9ZS5zbGljZSgwLGkpKTtyZXR1cm4gZX0oZSx0LHIpOmZ1bmN0aW9uKGUsdCl7aWYodS5pc0J1ZmZlcih0KSl7dmFyIHI9MHxmKHQubGVuZ3RoKTtyZXR1cm4gMD09PShlPXMoZSxyKSkubGVuZ3RofHx0LmNvcHkoZSwwLDAsciksZX1pZih0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJnQuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fFwibGVuZ3RoXCJpbiB0KXJldHVyblwibnVtYmVyXCIhPXR5cGVvZiB0Lmxlbmd0aHx8KG49dC5sZW5ndGgpIT1uP3MoZSwwKTpwKGUsdCk7aWYoXCJCdWZmZXJcIj09PXQudHlwZSYmbyh0LmRhdGEpKXJldHVybiBwKGUsdC5kYXRhKX12YXIgbjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LlwiKX0oZSx0KX1mdW5jdGlvbiBjKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKTtpZihlPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJyl9ZnVuY3Rpb24gaChlLHQpe2lmKGModCksZT1zKGUsdDwwPzA6MHxmKHQpKSwhdS5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcih2YXIgcj0wO3I8dDsrK3IpZVtyXT0wO3JldHVybiBlfWZ1bmN0aW9uIHAoZSx0KXt2YXIgcj10Lmxlbmd0aDwwPzA6MHxmKHQubGVuZ3RoKTtlPXMoZSxyKTtmb3IodmFyIG49MDtuPHI7bis9MSllW25dPTI1NSZ0W25dO3JldHVybiBlfWZ1bmN0aW9uIGYoZSl7aWYoZT49YSgpKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSBzaXplOiAweFwiK2EoKS50b1N0cmluZygxNikrXCIgYnl0ZXNcIik7cmV0dXJuIDB8ZX1mdW5jdGlvbiBkKGUsdCl7aWYodS5pc0J1ZmZlcihlKSlyZXR1cm4gZS5sZW5ndGg7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcmJihBcnJheUJ1ZmZlci5pc1ZpZXcoZSl8fGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpcmV0dXJuIGUuYnl0ZUxlbmd0aDtcInN0cmluZ1wiIT10eXBlb2YgZSYmKGU9XCJcIitlKTt2YXIgcj1lLmxlbmd0aDtpZigwPT09cilyZXR1cm4gMDtmb3IodmFyIG49ITE7Oylzd2l0Y2godCl7Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gcjtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlIHZvaWQgMDpyZXR1cm4geihlKS5sZW5ndGg7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIDIqcjtjYXNlXCJoZXhcIjpyZXR1cm4gcj4+PjE7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIFUoZSkubGVuZ3RoO2RlZmF1bHQ6aWYobilyZXR1cm4geihlKS5sZW5ndGg7dD0oXCJcIit0KS50b0xvd2VyQ2FzZSgpLG49ITB9fWZ1bmN0aW9uIG0oZSx0LHIpe3ZhciBuPSExO2lmKCh2b2lkIDA9PT10fHx0PDApJiYodD0wKSx0PnRoaXMubGVuZ3RoKXJldHVyblwiXCI7aWYoKHZvaWQgMD09PXJ8fHI+dGhpcy5sZW5ndGgpJiYocj10aGlzLmxlbmd0aCkscjw9MClyZXR1cm5cIlwiO2lmKChyPj4+PTApPD0odD4+Pj0wKSlyZXR1cm5cIlwiO2ZvcihlfHwoZT1cInV0ZjhcIik7Oylzd2l0Y2goZSl7Y2FzZVwiaGV4XCI6cmV0dXJuIFQodGhpcyx0LHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBDKHRoaXMsdCxyKTtjYXNlXCJhc2NpaVwiOnJldHVybiBBKHRoaXMsdCxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gTih0aGlzLHQscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIFModGhpcyx0LHIpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBPKHRoaXMsdCxyKTtkZWZhdWx0OmlmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2UpO2U9KGUrXCJcIikudG9Mb3dlckNhc2UoKSxuPSEwfX1mdW5jdGlvbiB5KGUsdCxyKXt2YXIgbj1lW3RdO2VbdF09ZVtyXSxlW3JdPW59ZnVuY3Rpb24gdihlLHQscixuLGkpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm4tMTtpZihcInN0cmluZ1wiPT10eXBlb2Ygcj8obj1yLHI9MCk6cj4yMTQ3NDgzNjQ3P3I9MjE0NzQ4MzY0NzpyPC0yMTQ3NDgzNjQ4JiYocj0tMjE0NzQ4MzY0OCkscj0rcixpc05hTihyKSYmKHI9aT8wOmUubGVuZ3RoLTEpLHI8MCYmKHI9ZS5sZW5ndGgrcikscj49ZS5sZW5ndGgpe2lmKGkpcmV0dXJuLTE7cj1lLmxlbmd0aC0xfWVsc2UgaWYocjwwKXtpZighaSlyZXR1cm4tMTtyPTB9aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PXUuZnJvbSh0LG4pKSx1LmlzQnVmZmVyKHQpKXJldHVybiAwPT09dC5sZW5ndGg/LTE6XyhlLHQscixuLGkpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0Jj0yNTUsdS5UWVBFRF9BUlJBWV9TVVBQT1JUJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mP2k/VWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGUsdCxyKTpVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGUsdCxyKTpfKGUsW3RdLHIsbixpKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyXCIpfWZ1bmN0aW9uIF8oZSx0LHIsbixpKXt2YXIgbyxhPTEscz1lLmxlbmd0aCx1PXQubGVuZ3RoO2lmKHZvaWQgMCE9PW4mJihcInVjczJcIj09PShuPVN0cmluZyhuKS50b0xvd2VyQ2FzZSgpKXx8XCJ1Y3MtMlwiPT09bnx8XCJ1dGYxNmxlXCI9PT1ufHxcInV0Zi0xNmxlXCI9PT1uKSl7aWYoZS5sZW5ndGg8Mnx8dC5sZW5ndGg8MilyZXR1cm4tMTthPTIscy89Mix1Lz0yLHIvPTJ9ZnVuY3Rpb24gbChlLHQpe3JldHVybiAxPT09YT9lW3RdOmUucmVhZFVJbnQxNkJFKHQqYSl9aWYoaSl7dmFyIGM9LTE7Zm9yKG89cjtvPHM7bysrKWlmKGwoZSxvKT09PWwodCwtMT09PWM/MDpvLWMpKXtpZigtMT09PWMmJihjPW8pLG8tYysxPT09dSlyZXR1cm4gYyphfWVsc2UtMSE9PWMmJihvLT1vLWMpLGM9LTF9ZWxzZSBmb3Iocit1PnMmJihyPXMtdSksbz1yO28+PTA7by0tKXtmb3IodmFyIGg9ITAscD0wO3A8dTtwKyspaWYobChlLG8rcCkhPT1sKHQscCkpe2g9ITE7YnJlYWt9aWYoaClyZXR1cm4gb31yZXR1cm4tMX1mdW5jdGlvbiBnKGUsdCxyLG4pe3I9TnVtYmVyKHIpfHwwO3ZhciBpPWUubGVuZ3RoLXI7bj8obj1OdW1iZXIobikpPmkmJihuPWkpOm49aTt2YXIgbz10Lmxlbmd0aDtpZihvJTIhPTApdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgaGV4IHN0cmluZ1wiKTtuPm8vMiYmKG49by8yKTtmb3IodmFyIGE9MDthPG47KythKXt2YXIgcz1wYXJzZUludCh0LnN1YnN0cigyKmEsMiksMTYpO2lmKGlzTmFOKHMpKXJldHVybiBhO2VbcithXT1zfXJldHVybiBhfWZ1bmN0aW9uIGIoZSx0LHIsbil7cmV0dXJuIEcoeih0LGUubGVuZ3RoLXIpLGUscixuKX1mdW5jdGlvbiB4KGUsdCxyLG4pe3JldHVybiBHKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjxlLmxlbmd0aDsrK3IpdC5wdXNoKDI1NSZlLmNoYXJDb2RlQXQocikpO3JldHVybiB0fSh0KSxlLHIsbil9ZnVuY3Rpb24gdyhlLHQscixuKXtyZXR1cm4geChlLHQscixuKX1mdW5jdGlvbiBFKGUsdCxyLG4pe3JldHVybiBHKFUodCksZSxyLG4pfWZ1bmN0aW9uIEQoZSx0LHIsbil7cmV0dXJuIEcoZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbixpLG89W10sYT0wO2E8ZS5sZW5ndGgmJiEoKHQtPTIpPDApOysrYSlyPWUuY2hhckNvZGVBdChhKSxuPXI+PjgsaT1yJTI1NixvLnB1c2goaSksby5wdXNoKG4pO3JldHVybiBvfSh0LGUubGVuZ3RoLXIpLGUscixuKX1mdW5jdGlvbiBTKGUsdCxyKXtyZXR1cm4gMD09PXQmJnI9PT1lLmxlbmd0aD9uLmZyb21CeXRlQXJyYXkoZSk6bi5mcm9tQnl0ZUFycmF5KGUuc2xpY2UodCxyKSl9ZnVuY3Rpb24gQyhlLHQscil7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIG49W10saT10O2k8cjspe3ZhciBvLGEscyx1LGw9ZVtpXSxjPW51bGwsaD1sPjIzOT80Omw+MjIzPzM6bD4xOTE/MjoxO2lmKGkraDw9cilzd2l0Y2goaCl7Y2FzZSAxOmw8MTI4JiYoYz1sKTticmVhaztjYXNlIDI6MTI4PT0oMTkyJihvPWVbaSsxXSkpJiYodT0oMzEmbCk8PDZ8NjMmbyk+MTI3JiYoYz11KTticmVhaztjYXNlIDM6bz1lW2krMV0sYT1lW2krMl0sMTI4PT0oMTkyJm8pJiYxMjg9PSgxOTImYSkmJih1PSgxNSZsKTw8MTJ8KDYzJm8pPDw2fDYzJmEpPjIwNDcmJih1PDU1Mjk2fHx1PjU3MzQzKSYmKGM9dSk7YnJlYWs7Y2FzZSA0Om89ZVtpKzFdLGE9ZVtpKzJdLHM9ZVtpKzNdLDEyOD09KDE5MiZvKSYmMTI4PT0oMTkyJmEpJiYxMjg9PSgxOTImcykmJih1PSgxNSZsKTw8MTh8KDYzJm8pPDwxMnwoNjMmYSk8PDZ8NjMmcyk+NjU1MzUmJnU8MTExNDExMiYmKGM9dSl9bnVsbD09PWM/KGM9NjU1MzMsaD0xKTpjPjY1NTM1JiYoYy09NjU1MzYsbi5wdXNoKGM+Pj4xMCYxMDIzfDU1Mjk2KSxjPTU2MzIwfDEwMjMmYyksbi5wdXNoKGMpLGkrPWh9cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUubGVuZ3RoO2lmKHQ8PTQwOTYpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGUpO3ZhciByPVwiXCIsbj0wO2Zvcig7bjx0OylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlLnNsaWNlKG4sbis9NDA5NikpO3JldHVybiByfShuKX10LkJ1ZmZlcj11LHQuU2xvd0J1ZmZlcj1mdW5jdGlvbihlKXsrZSE9ZSYmKGU9MCk7cmV0dXJuIHUuYWxsb2MoK2UpfSx0LklOU1BFQ1RfTUFYX0JZVEVTPTUwLHUuVFlQRURfQVJSQVlfU1VQUE9SVD12b2lkIDAhPT1lLlRZUEVEX0FSUkFZX1NVUFBPUlQ/ZS5UWVBFRF9BUlJBWV9TVVBQT1JUOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPW5ldyBVaW50OEFycmF5KDEpO3JldHVybiBlLl9fcHJvdG9fXz17X19wcm90b19fOlVpbnQ4QXJyYXkucHJvdG90eXBlLGZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19LDQyPT09ZS5mb28oKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5zdWJhcnJheSYmMD09PWUuc3ViYXJyYXkoMSwxKS5ieXRlTGVuZ3RofWNhdGNoKGUpe3JldHVybiExfX0oKSx0LmtNYXhMZW5ndGg9YSgpLHUucG9vbFNpemU9ODE5Mix1Ll9hdWdtZW50PWZ1bmN0aW9uKGUpe3JldHVybiBlLl9fcHJvdG9fXz11LnByb3RvdHlwZSxlfSx1LmZyb209ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBsKG51bGwsZSx0LHIpfSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQmJih1LnByb3RvdHlwZS5fX3Byb3RvX189VWludDhBcnJheS5wcm90b3R5cGUsdS5fX3Byb3RvX189VWludDhBcnJheSxcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuc3BlY2llcyYmdVtTeW1ib2wuc3BlY2llc109PT11JiZPYmplY3QuZGVmaW5lUHJvcGVydHkodSxTeW1ib2wuc3BlY2llcyx7dmFsdWU6bnVsbCxjb25maWd1cmFibGU6ITB9KSksdS5hbGxvYz1mdW5jdGlvbihlLHQscil7cmV0dXJuIGZ1bmN0aW9uKGUsdCxyLG4pe3JldHVybiBjKHQpLHQ8PTA/cyhlLHQpOnZvaWQgMCE9PXI/XCJzdHJpbmdcIj09dHlwZW9mIG4/cyhlLHQpLmZpbGwocixuKTpzKGUsdCkuZmlsbChyKTpzKGUsdCl9KG51bGwsZSx0LHIpfSx1LmFsbG9jVW5zYWZlPWZ1bmN0aW9uKGUpe3JldHVybiBoKG51bGwsZSl9LHUuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKGUpe3JldHVybiBoKG51bGwsZSl9LHUuaXNCdWZmZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIShudWxsPT1lfHwhZS5faXNCdWZmZXIpfSx1LmNvbXBhcmU9ZnVuY3Rpb24oZSx0KXtpZighdS5pc0J1ZmZlcihlKXx8IXUuaXNCdWZmZXIodCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnNcIik7aWYoZT09PXQpcmV0dXJuIDA7Zm9yKHZhciByPWUubGVuZ3RoLG49dC5sZW5ndGgsaT0wLG89TWF0aC5taW4ocixuKTtpPG87KytpKWlmKGVbaV0hPT10W2ldKXtyPWVbaV0sbj10W2ldO2JyZWFrfXJldHVybiByPG4/LTE6bjxyPzE6MH0sdS5pc0VuY29kaW5nPWZ1bmN0aW9uKGUpe3N3aXRjaChTdHJpbmcoZSkudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sdS5jb25jYXQ9ZnVuY3Rpb24oZSx0KXtpZighbyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTtpZigwPT09ZS5sZW5ndGgpcmV0dXJuIHUuYWxsb2MoMCk7dmFyIHI7aWYodm9pZCAwPT09dClmb3IodD0wLHI9MDtyPGUubGVuZ3RoOysrcil0Kz1lW3JdLmxlbmd0aDt2YXIgbj11LmFsbG9jVW5zYWZlKHQpLGk9MDtmb3Iocj0wO3I8ZS5sZW5ndGg7KytyKXt2YXIgYT1lW3JdO2lmKCF1LmlzQnVmZmVyKGEpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2EuY29weShuLGkpLGkrPWEubGVuZ3RofXJldHVybiBufSx1LmJ5dGVMZW5ndGg9ZCx1LnByb3RvdHlwZS5faXNCdWZmZXI9ITAsdS5wcm90b3R5cGUuc3dhcDE2PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSUyIT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHNcIik7Zm9yKHZhciB0PTA7dDxlO3QrPTIpeSh0aGlzLHQsdCsxKTtyZXR1cm4gdGhpc30sdS5wcm90b3R5cGUuc3dhcDMyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSU0IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHNcIik7Zm9yKHZhciB0PTA7dDxlO3QrPTQpeSh0aGlzLHQsdCszKSx5KHRoaXMsdCsxLHQrMik7cmV0dXJuIHRoaXN9LHUucHJvdG90eXBlLnN3YXA2ND1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlOCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz04KXkodGhpcyx0LHQrNykseSh0aGlzLHQrMSx0KzYpLHkodGhpcyx0KzIsdCs1KSx5KHRoaXMsdCszLHQrNCk7cmV0dXJuIHRoaXN9LHUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGU9MHx0aGlzLmxlbmd0aDtyZXR1cm4gMD09PWU/XCJcIjowPT09YXJndW1lbnRzLmxlbmd0aD9DKHRoaXMsMCxlKTptLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sdS5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKGUpe2lmKCF1LmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO3JldHVybiB0aGlzPT09ZXx8MD09PXUuY29tcGFyZSh0aGlzLGUpfSx1LnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uKCl7dmFyIGU9XCJcIixyPXQuSU5TUEVDVF9NQVhfQllURVM7cmV0dXJuIHRoaXMubGVuZ3RoPjAmJihlPXRoaXMudG9TdHJpbmcoXCJoZXhcIiwwLHIpLm1hdGNoKC8uezJ9L2cpLmpvaW4oXCIgXCIpLHRoaXMubGVuZ3RoPnImJihlKz1cIiAuLi4gXCIpKSxcIjxCdWZmZXIgXCIrZStcIj5cIn0sdS5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbihlLHQscixuLGkpe2lmKCF1LmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO2lmKHZvaWQgMD09PXQmJih0PTApLHZvaWQgMD09PXImJihyPWU/ZS5sZW5ndGg6MCksdm9pZCAwPT09biYmKG49MCksdm9pZCAwPT09aSYmKGk9dGhpcy5sZW5ndGgpLHQ8MHx8cj5lLmxlbmd0aHx8bjwwfHxpPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKG4+PWkmJnQ+PXIpcmV0dXJuIDA7aWYobj49aSlyZXR1cm4tMTtpZih0Pj1yKXJldHVybiAxO2lmKHRoaXM9PT1lKXJldHVybiAwO2Zvcih2YXIgbz0oaT4+Pj0wKS0obj4+Pj0wKSxhPShyPj4+PTApLSh0Pj4+PTApLHM9TWF0aC5taW4obyxhKSxsPXRoaXMuc2xpY2UobixpKSxjPWUuc2xpY2UodCxyKSxoPTA7aDxzOysraClpZihsW2hdIT09Y1toXSl7bz1sW2hdLGE9Y1toXTticmVha31yZXR1cm4gbzxhPy0xOmE8bz8xOjB9LHUucHJvdG90eXBlLmluY2x1ZGVzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4tMSE9PXRoaXMuaW5kZXhPZihlLHQscil9LHUucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB2KHRoaXMsZSx0LHIsITApfSx1LnByb3RvdHlwZS5sYXN0SW5kZXhPZj1mdW5jdGlvbihlLHQscil7cmV0dXJuIHYodGhpcyxlLHQsciwhMSl9LHUucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKHZvaWQgMD09PXQpbj1cInV0ZjhcIixyPXRoaXMubGVuZ3RoLHQ9MDtlbHNlIGlmKHZvaWQgMD09PXImJlwic3RyaW5nXCI9PXR5cGVvZiB0KW49dCxyPXRoaXMubGVuZ3RoLHQ9MDtlbHNle2lmKCFpc0Zpbml0ZSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZFwiKTt0fD0wLGlzRmluaXRlKHIpPyhyfD0wLHZvaWQgMD09PW4mJihuPVwidXRmOFwiKSk6KG49cixyPXZvaWQgMCl9dmFyIGk9dGhpcy5sZW5ndGgtdDtpZigodm9pZCAwPT09cnx8cj5pKSYmKHI9aSksZS5sZW5ndGg+MCYmKHI8MHx8dDwwKXx8dD50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpO258fChuPVwidXRmOFwiKTtmb3IodmFyIG89ITE7Oylzd2l0Y2gobil7Y2FzZVwiaGV4XCI6cmV0dXJuIGcodGhpcyxlLHQscik7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIGIodGhpcyxlLHQscik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4geCh0aGlzLGUsdCxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gdyh0aGlzLGUsdCxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gRSh0aGlzLGUsdCxyKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gRCh0aGlzLGUsdCxyKTtkZWZhdWx0OmlmKG8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK24pO249KFwiXCIrbikudG9Mb3dlckNhc2UoKSxvPSEwfX0sdS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6XCJCdWZmZXJcIixkYXRhOkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2Fycnx8dGhpcywwKX19O2Z1bmN0aW9uIEEoZSx0LHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIGk9dDtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoMTI3JmVbaV0pO3JldHVybiBufWZ1bmN0aW9uIE4oZSx0LHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIGk9dDtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gVChlLHQscil7dmFyIG49ZS5sZW5ndGg7KCF0fHx0PDApJiYodD0wKSwoIXJ8fHI8MHx8cj5uKSYmKHI9bik7Zm9yKHZhciBpPVwiXCIsbz10O288cjsrK28paSs9UihlW29dKTtyZXR1cm4gaX1mdW5jdGlvbiBPKGUsdCxyKXtmb3IodmFyIG49ZS5zbGljZSh0LHIpLGk9XCJcIixvPTA7bzxuLmxlbmd0aDtvKz0yKWkrPVN0cmluZy5mcm9tQ2hhckNvZGUobltvXSsyNTYqbltvKzFdKTtyZXR1cm4gaX1mdW5jdGlvbiBGKGUsdCxyKXtpZihlJTEhPTB8fGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtpZihlK3Q+cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGhcIil9ZnVuY3Rpb24gayhlLHQscixuLGksbyl7aWYoIXUuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7aWYodD5pfHx0PG8pdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYocituPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIFAoZSx0LHIsbil7dDwwJiYodD02NTUzNSt0KzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4oZS5sZW5ndGgtciwyKTtpPG87KytpKWVbcitpXT0odCYyNTU8PDgqKG4/aToxLWkpKT4+PjgqKG4/aToxLWkpfWZ1bmN0aW9uIEkoZSx0LHIsbil7dDwwJiYodD00Mjk0OTY3Mjk1K3QrMSk7Zm9yKHZhciBpPTAsbz1NYXRoLm1pbihlLmxlbmd0aC1yLDQpO2k8bzsrK2kpZVtyK2ldPXQ+Pj44KihuP2k6My1pKSYyNTV9ZnVuY3Rpb24gTChlLHQscixuLGksbyl7aWYocituPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBNKGUsdCxyLG4sbyl7cmV0dXJuIG98fEwoZSwwLHIsNCksaS53cml0ZShlLHQscixuLDIzLDQpLHIrNH1mdW5jdGlvbiBCKGUsdCxyLG4sbyl7cmV0dXJuIG98fEwoZSwwLHIsOCksaS53cml0ZShlLHQscixuLDUyLDgpLHIrOH11LnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbihlLHQpe3ZhciByLG49dGhpcy5sZW5ndGg7aWYoKGU9fn5lKTwwPyhlKz1uKTwwJiYoZT0wKTplPm4mJihlPW4pLCh0PXZvaWQgMD09PXQ/bjp+fnQpPDA/KHQrPW4pPDAmJih0PTApOnQ+biYmKHQ9biksdDxlJiYodD1lKSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQpKHI9dGhpcy5zdWJhcnJheShlLHQpKS5fX3Byb3RvX189dS5wcm90b3R5cGU7ZWxzZXt2YXIgaT10LWU7cj1uZXcgdShpLHZvaWQgMCk7Zm9yKHZhciBvPTA7bzxpOysrbylyW29dPXRoaXNbbytlXX1yZXR1cm4gcn0sdS5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbihlLHQscil7ZXw9MCx0fD0wLHJ8fEYoZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG49dGhpc1tlXSxpPTEsbz0wOysrbzx0JiYoaSo9MjU2KTspbis9dGhpc1tlK29dKmk7cmV0dXJuIG59LHUucHJvdG90eXBlLnJlYWRVSW50QkU9ZnVuY3Rpb24oZSx0LHIpe2V8PTAsdHw9MCxyfHxGKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbZSstLXRdLGk9MTt0PjAmJihpKj0yNTYpOyluKz10aGlzW2UrLS10XSppO3JldHVybiBufSx1LnByb3RvdHlwZS5yZWFkVUludDg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDEsdGhpcy5sZW5ndGgpLHRoaXNbZV19LHUucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxGKGUsMix0aGlzLmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh9LHUucHJvdG90eXBlLnJlYWRVSW50MTZCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxGKGUsMix0aGlzLmxlbmd0aCksdGhpc1tlXTw8OHx0aGlzW2UrMV19LHUucHJvdG90eXBlLnJlYWRVSW50MzJMRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxGKGUsNCx0aGlzLmxlbmd0aCksKHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTYpKzE2Nzc3MjE2KnRoaXNbZSszXX0sdS5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fEYoZSw0LHRoaXMubGVuZ3RoKSwxNjc3NzIxNip0aGlzW2VdKyh0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM10pfSx1LnByb3RvdHlwZS5yZWFkSW50TEU9ZnVuY3Rpb24oZSx0LHIpe2V8PTAsdHw9MCxyfHxGKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbZV0saT0xLG89MDsrK288dCYmKGkqPTI1Nik7KW4rPXRoaXNbZStvXSppO3JldHVybiBuPj0oaSo9MTI4KSYmKG4tPU1hdGgucG93KDIsOCp0KSksbn0sdS5wcm90b3R5cGUucmVhZEludEJFPWZ1bmN0aW9uKGUsdCxyKXtlfD0wLHR8PTAscnx8RihlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj10LGk9MSxvPXRoaXNbZSstLW5dO24+MCYmKGkqPTI1Nik7KW8rPXRoaXNbZSstLW5dKmk7cmV0dXJuIG8+PShpKj0xMjgpJiYoby09TWF0aC5wb3coMiw4KnQpKSxvfSx1LnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxGKGUsMSx0aGlzLmxlbmd0aCksMTI4JnRoaXNbZV0/LTEqKDI1NS10aGlzW2VdKzEpOnRoaXNbZV19LHUucHJvdG90eXBlLnJlYWRJbnQxNkxFPWZ1bmN0aW9uKGUsdCl7dHx8RihlLDIsdGhpcy5sZW5ndGgpO3ZhciByPXRoaXNbZV18dGhpc1tlKzFdPDw4O3JldHVybiAzMjc2OCZyPzQyOTQ5MDE3NjB8cjpyfSx1LnByb3RvdHlwZS5yZWFkSW50MTZCRT1mdW5jdGlvbihlLHQpe3R8fEYoZSwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW2UrMV18dGhpc1tlXTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0sdS5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDQsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTZ8dGhpc1tlKzNdPDwyNH0sdS5wcm90b3R5cGUucmVhZEludDMyQkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDQsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDI0fHRoaXNbZSsxXTw8MTZ8dGhpc1tlKzJdPDw4fHRoaXNbZSszXX0sdS5wcm90b3R5cGUucmVhZEZsb2F0TEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDQsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITAsMjMsNCl9LHUucHJvdG90eXBlLnJlYWRGbG9hdEJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHR8fEYoZSw0LHRoaXMubGVuZ3RoKSxpLnJlYWQodGhpcyxlLCExLDIzLDQpfSx1LnByb3RvdHlwZS5yZWFkRG91YmxlTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdHx8RihlLDgsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITAsNTIsOCl9LHUucHJvdG90eXBlLnJlYWREb3VibGVCRT1mdW5jdGlvbihlLHQpe3JldHVybiB0fHxGKGUsOCx0aGlzLmxlbmd0aCksaS5yZWFkKHRoaXMsZSwhMSw1Miw4KX0sdS5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24oZSx0LHIsbil7KGU9K2UsdHw9MCxyfD0wLG4pfHxrKHRoaXMsZSx0LHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIGk9MSxvPTA7Zm9yKHRoaXNbdF09MjU1JmU7KytvPHImJihpKj0yNTYpOyl0aGlzW3Qrb109ZS9pJjI1NTtyZXR1cm4gdCtyfSx1LnByb3RvdHlwZS53cml0ZVVJbnRCRT1mdW5jdGlvbihlLHQscixuKXsoZT0rZSx0fD0wLHJ8PTAsbil8fGsodGhpcyxlLHQscixNYXRoLnBvdygyLDgqciktMSwwKTt2YXIgaT1yLTEsbz0xO2Zvcih0aGlzW3QraV09MjU1JmU7LS1pPj0wJiYobyo9MjU2KTspdGhpc1t0K2ldPWUvbyYyNTU7cmV0dXJuIHQrcn0sdS5wcm90b3R5cGUud3JpdGVVSW50OD1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxrKHRoaXMsZSx0LDEsMjU1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVHx8KGU9TWF0aC5mbG9vcihlKSksdGhpc1t0XT0yNTUmZSx0KzF9LHUucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8ayh0aGlzLGUsdCwyLDY1NTM1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT0yNTUmZSx0aGlzW3QrMV09ZT4+PjgpOlAodGhpcyxlLHQsITApLHQrMn0sdS5wcm90b3R5cGUud3JpdGVVSW50MTZCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxrKHRoaXMsZSx0LDIsNjU1MzUsMCksdS5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3RdPWU+Pj44LHRoaXNbdCsxXT0yNTUmZSk6UCh0aGlzLGUsdCwhMSksdCsyfSx1LnByb3RvdHlwZS53cml0ZVVJbnQzMkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fGsodGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0KzNdPWU+Pj4yNCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCsxXT1lPj4+OCx0aGlzW3RdPTI1NSZlKTpJKHRoaXMsZSx0LCEwKSx0KzR9LHUucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8ayh0aGlzLGUsdCw0LDQyOTQ5NjcyOTUsMCksdS5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW3RdPWU+Pj4yNCx0aGlzW3QrMV09ZT4+PjE2LHRoaXNbdCsyXT1lPj4+OCx0aGlzW3QrM109MjU1JmUpOkkodGhpcyxlLHQsITEpLHQrNH0sdS5wcm90b3R5cGUud3JpdGVJbnRMRT1mdW5jdGlvbihlLHQscixuKXtpZihlPStlLHR8PTAsIW4pe3ZhciBpPU1hdGgucG93KDIsOCpyLTEpO2sodGhpcyxlLHQscixpLTEsLWkpfXZhciBvPTAsYT0xLHM9MDtmb3IodGhpc1t0XT0yNTUmZTsrK288ciYmKGEqPTI1Nik7KWU8MCYmMD09PXMmJjAhPT10aGlzW3Qrby0xXSYmKHM9MSksdGhpc1t0K29dPShlL2E+PjApLXMmMjU1O3JldHVybiB0K3J9LHUucHJvdG90eXBlLndyaXRlSW50QkU9ZnVuY3Rpb24oZSx0LHIsbil7aWYoZT0rZSx0fD0wLCFuKXt2YXIgaT1NYXRoLnBvdygyLDgqci0xKTtrKHRoaXMsZSx0LHIsaS0xLC1pKX12YXIgbz1yLTEsYT0xLHM9MDtmb3IodGhpc1t0K29dPTI1NSZlOy0tbz49MCYmKGEqPTI1Nik7KWU8MCYmMD09PXMmJjAhPT10aGlzW3QrbysxXSYmKHM9MSksdGhpc1t0K29dPShlL2E+PjApLXMmMjU1O3JldHVybiB0K3J9LHUucHJvdG90eXBlLndyaXRlSW50OD1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdHw9MCxyfHxrKHRoaXMsZSx0LDEsMTI3LC0xMjgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVHx8KGU9TWF0aC5mbG9vcihlKSksZTwwJiYoZT0yNTUrZSsxKSx0aGlzW3RdPTI1NSZlLHQrMX0sdS5wcm90b3R5cGUud3JpdGVJbnQxNkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fGsodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT0yNTUmZSx0aGlzW3QrMV09ZT4+PjgpOlAodGhpcyxlLHQsITApLHQrMn0sdS5wcm90b3R5cGUud3JpdGVJbnQxNkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fGsodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+OCx0aGlzW3QrMV09MjU1JmUpOlAodGhpcyxlLHQsITEpLHQrMn0sdS5wcm90b3R5cGUud3JpdGVJbnQzMkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0fD0wLHJ8fGsodGhpcyxlLHQsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44LHRoaXNbdCsyXT1lPj4+MTYsdGhpc1t0KzNdPWU+Pj4yNCk6SSh0aGlzLGUsdCwhMCksdCs0fSx1LnByb3RvdHlwZS53cml0ZUludDMyQkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHR8PTAscnx8ayh0aGlzLGUsdCw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLGU8MCYmKGU9NDI5NDk2NzI5NStlKzEpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPTI1NSZlKTpJKHRoaXMsZSx0LCExKSx0KzR9LHUucHJvdG90eXBlLndyaXRlRmxvYXRMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIE0odGhpcyxlLHQsITAscil9LHUucHJvdG90eXBlLndyaXRlRmxvYXRCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIE0odGhpcyxlLHQsITEscil9LHUucHJvdG90eXBlLndyaXRlRG91YmxlTEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBCKHRoaXMsZSx0LCEwLHIpfSx1LnByb3RvdHlwZS53cml0ZURvdWJsZUJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQih0aGlzLGUsdCwhMSxyKX0sdS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihlLHQscixuKXtpZihyfHwocj0wKSxufHwwPT09bnx8KG49dGhpcy5sZW5ndGgpLHQ+PWUubGVuZ3RoJiYodD1lLmxlbmd0aCksdHx8KHQ9MCksbj4wJiZuPHImJihuPXIpLG49PT1yKXJldHVybiAwO2lmKDA9PT1lLmxlbmd0aHx8MD09PXRoaXMubGVuZ3RoKXJldHVybiAwO2lmKHQ8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIik7aWYocjwwfHxyPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInNvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHNcIik7aWYobjwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwic291cmNlRW5kIG91dCBvZiBib3VuZHNcIik7bj50aGlzLmxlbmd0aCYmKG49dGhpcy5sZW5ndGgpLGUubGVuZ3RoLXQ8bi1yJiYobj1lLmxlbmd0aC10K3IpO3ZhciBpLG89bi1yO2lmKHRoaXM9PT1lJiZyPHQmJnQ8bilmb3IoaT1vLTE7aT49MDstLWkpZVtpK3RdPXRoaXNbaStyXTtlbHNlIGlmKG88MWUzfHwhdS5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcihpPTA7aTxvOysraSllW2krdF09dGhpc1tpK3JdO2Vsc2UgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoZSx0aGlzLnN1YmFycmF5KHIscitvKSx0KTtyZXR1cm4gb30sdS5wcm90b3R5cGUuZmlsbD1mdW5jdGlvbihlLHQscixuKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQ/KG49dCx0PTAscj10aGlzLmxlbmd0aCk6XCJzdHJpbmdcIj09dHlwZW9mIHImJihuPXIscj10aGlzLmxlbmd0aCksMT09PWUubGVuZ3RoKXt2YXIgaT1lLmNoYXJDb2RlQXQoMCk7aTwyNTYmJihlPWkpfWlmKHZvaWQgMCE9PW4mJlwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuJiYhdS5pc0VuY29kaW5nKG4pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIituKX1lbHNlXCJudW1iZXJcIj09dHlwZW9mIGUmJihlJj0yNTUpO2lmKHQ8MHx8dGhpcy5sZW5ndGg8dHx8dGhpcy5sZW5ndGg8cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk91dCBvZiByYW5nZSBpbmRleFwiKTtpZihyPD10KXJldHVybiB0aGlzO3ZhciBvO2lmKHQ+Pj49MCxyPXZvaWQgMD09PXI/dGhpcy5sZW5ndGg6cj4+PjAsZXx8KGU9MCksXCJudW1iZXJcIj09dHlwZW9mIGUpZm9yKG89dDtvPHI7KytvKXRoaXNbb109ZTtlbHNle3ZhciBhPXUuaXNCdWZmZXIoZSk/ZTp6KG5ldyB1KGUsbikudG9TdHJpbmcoKSkscz1hLmxlbmd0aDtmb3Iobz0wO288ci10Oysrbyl0aGlzW28rdF09YVtvJXNdfXJldHVybiB0aGlzfTt2YXIgaj0vW14rXFwvMC05QS1aYS16LV9dL2c7ZnVuY3Rpb24gUihlKXtyZXR1cm4gZTwxNj9cIjBcIitlLnRvU3RyaW5nKDE2KTplLnRvU3RyaW5nKDE2KX1mdW5jdGlvbiB6KGUsdCl7dmFyIHI7dD10fHwxLzA7Zm9yKHZhciBuPWUubGVuZ3RoLGk9bnVsbCxvPVtdLGE9MDthPG47KythKXtpZigocj1lLmNoYXJDb2RlQXQoYSkpPjU1Mjk1JiZyPDU3MzQ0KXtpZighaSl7aWYocj41NjMxOSl7KHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWlmKGErMT09PW4peyh0LT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1pPXI7Y29udGludWV9aWYocjw1NjMyMCl7KHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpLGk9cjtjb250aW51ZX1yPTY1NTM2KyhpLTU1Mjk2PDwxMHxyLTU2MzIwKX1lbHNlIGkmJih0LT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtpZihpPW51bGwscjwxMjgpe2lmKCh0LT0xKTwwKWJyZWFrO28ucHVzaChyKX1lbHNlIGlmKHI8MjA0OCl7aWYoKHQtPTIpPDApYnJlYWs7by5wdXNoKHI+PjZ8MTkyLDYzJnJ8MTI4KX1lbHNlIGlmKHI8NjU1MzYpe2lmKCh0LT0zKTwwKWJyZWFrO28ucHVzaChyPj4xMnwyMjQscj4+NiY2M3wxMjgsNjMmcnwxMjgpfWVsc2V7aWYoIShyPDExMTQxMTIpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29kZSBwb2ludFwiKTtpZigodC09NCk8MClicmVhaztvLnB1c2gocj4+MTh8MjQwLHI+PjEyJjYzfDEyOCxyPj42JjYzfDEyOCw2MyZyfDEyOCl9fXJldHVybiBvfWZ1bmN0aW9uIFUoZSl7cmV0dXJuIG4udG9CeXRlQXJyYXkoZnVuY3Rpb24oZSl7aWYoKGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJpbT9lLnRyaW0oKTplLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9KGUpLnJlcGxhY2UoaixcIlwiKSkubGVuZ3RoPDIpcmV0dXJuXCJcIjtmb3IoO2UubGVuZ3RoJTQhPTA7KWUrPVwiPVwiO3JldHVybiBlfShlKSl9ZnVuY3Rpb24gRyhlLHQscixuKXtmb3IodmFyIGk9MDtpPG4mJiEoaStyPj10Lmxlbmd0aHx8aT49ZS5sZW5ndGgpOysraSl0W2krcl09ZVtpXTtyZXR1cm4gaX19KS5jYWxsKHRoaXMscig3OCkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5pc0FTQ0lJQnl0ZT1mdW5jdGlvbihlKXtyZXR1cm4gZT49MCYmZTw9MTI3fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxpPXRoaXMmJnRoaXMuX19zcHJlYWR8fGZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWU9ZS5jb25jYXQobihhcmd1bWVudHNbdF0pKTtyZXR1cm4gZX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5sZW5ndGg9ZnVuY3Rpb24oZSl7cmV0dXJuIGUubGVuZ3RofSx0LmJ5dGVMb3dlcmNhc2U9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWVbdF07cj49NjUmJnI8PTkwJiYoZVt0XT1yKzMyKX19LHQuYnl0ZVVwcGVyY2FzZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIHI9ZVt0XTtyPj05NyYmcjw9MTIyJiYoZVt0XT1yLTMyKX19LHQuYnl0ZUNhc2VJbnNlbnNpdGl2ZU1hdGNoPWZ1bmN0aW9uKGUsdCl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4hMTtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXSxpPXRbcl07aWYobj49NjUmJm48PTkwJiYobis9MzIpLGk+PTY1JiZpPD05MCYmKGkrPTMyKSxuIT09aSlyZXR1cm4hMX1yZXR1cm4hMH0sdC5zdGFydHNXaXRoPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTA7Oyl7aWYocj49ZS5sZW5ndGgpcmV0dXJuITE7aWYocj49dC5sZW5ndGgpcmV0dXJuITA7aWYoZVtyXSE9PXRbcl0pcmV0dXJuITE7cisrfX0sdC5ieXRlTGVzc1RoYW49ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MDs7KXtpZihyPj1lLmxlbmd0aClyZXR1cm4hMTtpZihyPj10Lmxlbmd0aClyZXR1cm4hMDt2YXIgbj1lW3JdLGk9dFtyXTtpZihuPGkpcmV0dXJuITA7aWYobj5pKXJldHVybiExO3IrK319LHQuaXNvbW9ycGhpY0RlY29kZT1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLGkoZSkpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNiksaT1yKDcpLG89cigwKSxhPXIoMTIpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuX2Fzc29jaWF0ZWREb2N1bWVudD1lfHxuLmRvbS53aW5kb3cuZG9jdW1lbnR9cmV0dXJuIGUucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50VHlwZT1mdW5jdGlvbihlLHQscil7cmV0dXJuIG8ubmFtZXNwYWNlX3ZhbGlkYXRlKGUpLG8uY3JlYXRlX2RvY3VtZW50VHlwZSh0aGlzLl9hc3NvY2lhdGVkRG9jdW1lbnQsZSx0LHIpfSxlLnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudD1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09ciYmKHI9bnVsbCk7dmFyIG49by5jcmVhdGVfeG1sRG9jdW1lbnQoKSxhPW51bGw7cmV0dXJuIHQmJihhPW8uZG9jdW1lbnRfaW50ZXJuYWxDcmVhdGVFbGVtZW50TlMobixlLHQpKSxyJiZuLmFwcGVuZENoaWxkKHIpLGEmJm4uYXBwZW5kQ2hpbGQoYSksbi5fb3JpZ2luPXRoaXMuX2Fzc29jaWF0ZWREb2N1bWVudC5fb3JpZ2luLGU9PT1pLm5hbWVzcGFjZS5IVE1MP24uX2NvbnRlbnRUeXBlPVwiYXBwbGljYXRpb24veGh0bWwreG1sXCI6ZT09PWkubmFtZXNwYWNlLlNWRz9uLl9jb250ZW50VHlwZT1cImltYWdlL3N2Zyt4bWxcIjpuLl9jb250ZW50VHlwZT1cImFwcGxpY2F0aW9uL3htbFwiLG59LGUucHJvdG90eXBlLmNyZWF0ZUhUTUxEb2N1bWVudD1mdW5jdGlvbihlKXt2YXIgdD1vLmNyZWF0ZV9kb2N1bWVudCgpO3QuX3R5cGU9XCJodG1sXCIsdC5fY29udGVudFR5cGU9XCJ0ZXh0L2h0bWxcIix0LmFwcGVuZENoaWxkKG8uY3JlYXRlX2RvY3VtZW50VHlwZSh0LFwiaHRtbFwiLFwiXCIsXCJcIikpO3ZhciByPW8uZWxlbWVudF9jcmVhdGVBbkVsZW1lbnQodCxcImh0bWxcIixpLm5hbWVzcGFjZS5IVE1MKTt0LmFwcGVuZENoaWxkKHIpO3ZhciBuPW8uZWxlbWVudF9jcmVhdGVBbkVsZW1lbnQodCxcImhlYWRcIixpLm5hbWVzcGFjZS5IVE1MKTtpZihyLmFwcGVuZENoaWxkKG4pLHZvaWQgMCE9PWUpe3ZhciBhPW8uZWxlbWVudF9jcmVhdGVBbkVsZW1lbnQodCxcInRpdGxlXCIsaS5uYW1lc3BhY2UuSFRNTCk7bi5hcHBlbmRDaGlsZChhKTt2YXIgcz1vLmNyZWF0ZV90ZXh0KHQsZSk7YS5hcHBlbmRDaGlsZChzKX12YXIgdT1vLmVsZW1lbnRfY3JlYXRlQW5FbGVtZW50KHQsXCJib2R5XCIsaS5uYW1lc3BhY2UuSFRNTCk7cmV0dXJuIHIuYXBwZW5kQ2hpbGQodSksdC5fb3JpZ2luPXRoaXMuX2Fzc29jaWF0ZWREb2N1bWVudC5fb3JpZ2luLHR9LGUucHJvdG90eXBlLmhhc0ZlYXR1cmU9ZnVuY3Rpb24oKXtyZXR1cm4hMH0sZS5fY3JlYXRlPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZSh0KX0sZX0oKTt0LkRPTUltcGxlbWVudGF0aW9uSW1wbD1zLGEuaWRsX2RlZmluZUNvbnN0KHMucHJvdG90eXBlLFwiX0lEXCIsXCJAb296Y2l0YWsvZG9tXCIpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cig3MCksYT1yKDEpLHM9cigwKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgdD1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHQuX3NpZ25hbFNsb3RzPW5ldyBTZXQsdC5fbXV0YXRpb25PYnNlcnZlck1pY3JvdGFza1F1ZXVlZD0hMSx0Ll9tdXRhdGlvbk9ic2VydmVycz1uZXcgU2V0LHQuX2l0ZXJhdG9yTGlzdD1uZXcgYS5GaXhlZFNpemVTZXQsdC5fYXNzb2NpYXRlZERvY3VtZW50PXMuY3JlYXRlX2RvY3VtZW50KCksdH1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRvY3VtZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hc3NvY2lhdGVkRG9jdW1lbnR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZXZlbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2N1cnJlbnRFdmVudH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0Ll9jcmVhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHR9LHR9KG8uRXZlbnRUYXJnZXRJbXBsKTt0LldpbmRvd0ltcGw9dX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUuaXNOb2RlPWZ1bmN0aW9uKGUpe3JldHVybiEhZSYmdm9pZCAwIT09ZS5fbm9kZVR5cGV9LGUuaXNEb2N1bWVudE5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGUuaXNOb2RlKHQpJiZ0Ll9ub2RlVHlwZT09PW4uTm9kZVR5cGUuRG9jdW1lbnR9LGUuaXNEb2N1bWVudFR5cGVOb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLkRvY3VtZW50VHlwZX0sZS5pc0RvY3VtZW50RnJhZ21lbnROb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnR9LGUuaXNBdHRyTm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc05vZGUodCkmJnQuX25vZGVUeXBlPT09bi5Ob2RlVHlwZS5BdHRyaWJ1dGV9LGUuaXNDaGFyYWN0ZXJEYXRhTm9kZT1mdW5jdGlvbih0KXtpZighZS5pc05vZGUodCkpcmV0dXJuITE7dmFyIHI9dC5fbm9kZVR5cGU7cmV0dXJuIHI9PT1uLk5vZGVUeXBlLlRleHR8fHI9PT1uLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbnx8cj09PW4uTm9kZVR5cGUuQ29tbWVudHx8cj09PW4uTm9kZVR5cGUuQ0RhdGF9LGUuaXNUZXh0Tm9kZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5pc05vZGUodCkmJih0Ll9ub2RlVHlwZT09PW4uTm9kZVR5cGUuVGV4dHx8dC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLkNEYXRhKX0sZS5pc0V4Y2x1c2l2ZVRleHROb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLlRleHR9LGUuaXNDREFUQVNlY3Rpb25Ob2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzTm9kZSh0KSYmdC5fbm9kZVR5cGU9PT1uLk5vZGVUeXBlLkNEYXRhfSxlLmlzQ29tbWVudE5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGUuaXNOb2RlKHQpJiZ0Ll9ub2RlVHlwZT09PW4uTm9kZVR5cGUuQ29tbWVudH0sZS5pc1Byb2Nlc3NpbmdJbnN0cnVjdGlvbk5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGUuaXNOb2RlKHQpJiZ0Ll9ub2RlVHlwZT09PW4uTm9kZVR5cGUuUHJvY2Vzc2luZ0luc3RydWN0aW9ufSxlLmlzRWxlbWVudE5vZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGUuaXNOb2RlKHQpJiZ0Ll9ub2RlVHlwZT09PW4uTm9kZVR5cGUuRWxlbWVudH0sZS5pc0N1c3RvbUVsZW1lbnROb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBlLmlzRWxlbWVudE5vZGUodCkmJlwiY3VzdG9tXCI9PT10Ll9jdXN0b21FbGVtZW50U3RhdGV9LGUuaXNTaGFkb3dSb290PWZ1bmN0aW9uKGUpe3JldHVybiEhZSYmdm9pZCAwIT09ZS5ob3N0fSxlLmlzTW91c2VFdmVudD1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJnZvaWQgMCE9PWUuc2NyZWVuWCYmbnVsbCE9ZS5zY3JlZW5ZfSxlLmlzU2xvdGFibGU9ZnVuY3Rpb24odCl7cmV0dXJuISF0JiZ2b2lkIDAhPT10Ll9uYW1lJiZ2b2lkIDAhPT10Ll9hc3NpZ25lZFNsb3QmJihlLmlzVGV4dE5vZGUodCl8fGUuaXNFbGVtZW50Tm9kZSh0KSl9LGUuaXNTbG90PWZ1bmN0aW9uKHQpe3JldHVybiEhdCYmdm9pZCAwIT09dC5fbmFtZSYmdm9pZCAwIT09dC5fYXNzaWduZWROb2RlcyYmZS5pc0VsZW1lbnROb2RlKHQpfSxlLmlzV2luZG93PWZ1bmN0aW9uKGUpe3JldHVybiEhZSYmdm9pZCAwIT09ZS5uYXZpZ2F0b3J9LGUuaXNFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUpe3JldHVybiEhZSYmdm9pZCAwIT09ZS5oYW5kbGVFdmVudH0sZS5pc1JlZ2lzdGVyZWRPYnNlcnZlcj1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJnZvaWQgMCE9PWUub2JzZXJ2ZXImJnZvaWQgMCE9PWUub3B0aW9uc30sZS5pc1RyYW5zaWVudFJlZ2lzdGVyZWRPYnNlcnZlcj1mdW5jdGlvbih0KXtyZXR1cm4hIXQmJnZvaWQgMCE9PXQuc291cmNlJiZlLmlzUmVnaXN0ZXJlZE9ic2VydmVyKHQpfSxlfSgpO3QuR3VhcmQ9aX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXtyZXR1cm4gZS5jYWxsKHRoaXMpfHx0aGlzfXJldHVybiBpKHQsZSksdH0ocig5OCkuRG9jdW1lbnRJbXBsKTt0LlhNTERvY3VtZW50SW1wbD1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0saT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG8sYT1yKDEpLHM9cigyNDMpLHU9cig3KSxsPXIoMjQ0KSxjPXtmdHA6MjEsZmlsZTpudWxsLGh0dHA6ODAsaHR0cHM6NDQzLHdzOjgwLHdzczo0NDN9LGg9L1tcXDAtXFx4MUZcXHg3Ri1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLyxwPS9bIFwiPD5gXXxbXFwwLVxceDFGXFx4N0YtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS8sZj0vWyBcIjw+YCM/e31dfFtcXDAtXFx4MUZcXHg3Ri1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLyxkPS9bIFwiPD5gIz97fS86Oz1AXFxbXFxdXFxcXFxcXlxcfF18W1xcMC1cXHgxRlxceDdGLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vLG09L1swLTlBLVphLXohXFwkJi1cXC86Oz1cXD9AX35cXHhBMC1cXHVEN0ZGXFx1RTAwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXXxbXFx1RDgwMC1cXHVEODNFXFx1RDg0MC1cXHVEODdFXFx1RDg4MC1cXHVEOEJFXFx1RDhDMC1cXHVEOEZFXFx1RDkwMC1cXHVEOTNFXFx1RDk0MC1cXHVEOTdFXFx1RDk4MC1cXHVEOUJFXFx1RDlDMC1cXHVEOUZFXFx1REEwMC1cXHVEQTNFXFx1REE0MC1cXHVEQTdFXFx1REE4MC1cXHVEQUJFXFx1REFDMC1cXHVEQUZFXFx1REIwMC1cXHVEQjNFXFx1REI0MC1cXHVEQjdFXFx1REI4MC1cXHVEQkJFXFx1REJDMC1cXHVEQkZFXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODNGXFx1RDg3RlxcdUQ4QkZcXHVEOEZGXFx1RDkzRlxcdUQ5N0ZcXHVEOUJGXFx1RDlGRlxcdURBM0ZcXHVEQTdGXFx1REFCRlxcdURBRkZcXHVEQjNGXFx1REI3RlxcdURCQkZcXHVEQkZGXVtcXHVEQzAwLVxcdURGRkRdLyx5PS9bXFwwXFx0XFxmXFxyICMlLzo/QFxcW1xcXFxcXF1dLztmdW5jdGlvbiB2KGUpe3ZvaWQgMCE9PW8mJm8uY2FsbChudWxsLFwiVmFsaWRhdGlvbiBFcnJvcjogXCIrZSl9ZnVuY3Rpb24gXygpe3JldHVybntzY2hlbWU6XCJcIix1c2VybmFtZTpcIlwiLHBhc3N3b3JkOlwiXCIsaG9zdDpudWxsLHBvcnQ6bnVsbCxwYXRoOltdLHF1ZXJ5Om51bGwsZnJhZ21lbnQ6bnVsbCxfY2Fubm90QmVBQmFzZVVSTEZsYWc6ITEsX2Jsb2JVUkxFbnRyeTpudWxsfX1mdW5jdGlvbiBnKGUpe3JldHVybiBlIGluIGN9ZnVuY3Rpb24gYihlKXtyZXR1cm4gZyhlLnNjaGVtZSl9ZnVuY3Rpb24geChlKXtyZXR1cm4gY1tlXXx8bnVsbH1mdW5jdGlvbiB3KGUpe3JldHVyblwiXCIhPT1lLnVzZXJuYW1lfHxcIlwiIT09ZS5wYXNzd29yZH1mdW5jdGlvbiBFKGUsdCl7dmFyIHIsaTt2b2lkIDA9PT10JiYodD0hMSk7dmFyIG89ZS5zY2hlbWUrXCI6XCI7aWYobnVsbCE9PWUuaG9zdD8obys9XCIvL1wiLHcoZSkmJihvKz1lLnVzZXJuYW1lLFwiXCIhPT1lLnBhc3N3b3JkJiYobys9XCI6XCIrZS5wYXNzd29yZCksbys9XCJAXCIpLG8rPUQoZS5ob3N0KSxudWxsIT09ZS5wb3J0JiYobys9XCI6XCIrZS5wb3J0KSk6bnVsbD09PWUuaG9zdCYmXCJmaWxlXCI9PT1lLnNjaGVtZSYmKG8rPVwiLy9cIiksZS5fY2Fubm90QmVBQmFzZVVSTEZsYWcpbys9ZS5wYXRoWzBdO2Vsc2UgdHJ5e2Zvcih2YXIgYT1uKGUucGF0aCkscz1hLm5leHQoKTshcy5kb25lO3M9YS5uZXh0KCkpe28rPVwiL1wiK3MudmFsdWV9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3MmJiFzLmRvbmUmJihpPWEucmV0dXJuKSYmaS5jYWxsKGEpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4gbnVsbCE9PWUucXVlcnkmJihvKz1cIj9cIitlLnF1ZXJ5KSx0fHxudWxsPT09ZS5mcmFnbWVudHx8KG8rPVwiI1wiK2UuZnJhZ21lbnQpLG99ZnVuY3Rpb24gRChlKXtyZXR1cm4gYS5pc051bWJlcihlKT9TKGUpOmEuaXNBcnJheShlKT9cIltcIitDKGUpK1wiXVwiOmV9ZnVuY3Rpb24gUyhlKXtmb3IodmFyIHQ9XCJcIixyPWUsbj0xO248PTQ7bisrKXQ9KHIlMjU2KS50b1N0cmluZygpK3QsNCE9PW4mJih0PVwiLlwiK3QpLHI9TWF0aC5mbG9vcihyLzI1Nik7cmV0dXJuIHR9ZnVuY3Rpb24gQyhlKXtmb3IodmFyIHQ9XCJcIixyPW51bGwsbj0tMSxpPTAsbz0wLGE9MDthPDg7YSsrKWlmKDA9PT1lW2FdKXtpPTE7Zm9yKHZhciBzPWErMTtzPDgmJjA9PT1lW3NdO3MrKylpKys7aT5vJiYobz1pLG49YSl9bz4xJiYocj1uKTtmb3IodmFyIHU9ITEsbD0wO2w8ODtsKyspdSYmMD09PWVbbF18fCh1JiYodT0hMSksciE9PWw/KHQrPWVbbF0udG9TdHJpbmcoMTYpLDchPT1sJiYodCs9XCI6XCIpKToodCs9MD09PWw/XCI6OlwiOlwiOlwiLHU9ITApKTtyZXR1cm4gdH1mdW5jdGlvbiBBKGUsdCxyLGksbyl7dmFyIGwsYyx5LF87aWYodm9pZCAwPT09aSl7aT17c2NoZW1lOlwiXCIsdXNlcm5hbWU6XCJcIixwYXNzd29yZDpcIlwiLGhvc3Q6bnVsbCxwb3J0Om51bGwscGF0aDpbXSxxdWVyeTpudWxsLGZyYWdtZW50Om51bGwsX2Nhbm5vdEJlQUJhc2VVUkxGbGFnOiExLF9ibG9iVVJMRW50cnk6bnVsbH07dmFyIEU9L15bXFx1MDAwMC1cXHUwMDFGXFx1MDAyMF0rLyxEPS9bXFx1MDAwMC1cXHUwMDFGXFx1MDAyMF0rJC87KEUudGVzdChlKXx8RC50ZXN0KGUpKSYmdihcIklucHV0IHN0cmluZyBjb250YWlucyBsZWFkaW5nIG9yIHRyYWlsaW5nIGNvbnRyb2wgY2hhcmFjdGVycyBvciBzcGFjZS5cIiksZT0oZT1lLnJlcGxhY2UoRSxcIlwiKSkucmVwbGFjZShELFwiXCIpfXZhciBTPS9bXFx1MDAwOVxcdTAwMEFcXHUwMDBEXS9nO1MudGVzdChlKSYmdihcIklucHV0IHN0cmluZyBjb250YWlucyB0YWIgb3IgbmV3bGluZSBjaGFyYWN0ZXJzLlwiKSxlPWUucmVwbGFjZShTLFwiXCIpO3ZhciBDPXZvaWQgMD09PW8/cy5QYXJzZXJTdGF0ZS5TY2hlbWVTdGFydDpvO3ZvaWQgMD09PXQmJih0PW51bGwpO2Zvcih2YXIgQT12b2lkIDA9PT1yfHxcInJlcGxhY2VtZW50XCI9PT1yfHxcIlVURi0xNkJFXCI9PT1yfHxcIlVURi0xNkxFXCI9PT1yP1wiVVRGLThcIjpyLEw9XCJcIixNPSExLEI9ITEsaj0hMSxSPW5ldyBhLlN0cmluZ1dhbGtlcihlKTs7KXtzd2l0Y2goQyl7Y2FzZSBzLlBhcnNlclN0YXRlLlNjaGVtZVN0YXJ0OmlmKHUuY29kZVBvaW50LkFTQ0lJQWxwaGEudGVzdChSLmMoKSkpTCs9Ui5jKCkudG9Mb3dlckNhc2UoKSxDPXMuUGFyc2VyU3RhdGUuU2NoZW1lO2Vsc2V7aWYodm9pZCAwIT09bylyZXR1cm4gdihcIkludmFsaWQgc2NoZW1lIHN0YXJ0IGNoYXJhY3Rlci5cIiksbnVsbDtDPXMuUGFyc2VyU3RhdGUuTm9TY2hlbWUsUi5wb2ludGVyLS19YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlNjaGVtZTppZih1LmNvZGVQb2ludC5BU0NJSUFscGhhbnVtZXJpYy50ZXN0KFIuYygpKXx8XCIrXCI9PT1SLmMoKXx8XCItXCI9PT1SLmMoKXx8XCIuXCI9PT1SLmMoKSlMKz1SLmMoKS50b0xvd2VyQ2FzZSgpO2Vsc2V7aWYoXCI6XCIhPT1SLmMoKSl7aWYodm9pZCAwPT09byl7TD1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5Ob1NjaGVtZSxSLnBvaW50ZXI9MDtjb250aW51ZX1yZXR1cm4gdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxudWxsfWlmKHZvaWQgMCE9PW8pe2lmKGcoaS5zY2hlbWUpJiYhZyhMKSlyZXR1cm4gaTtpZighZyhpLnNjaGVtZSkmJmcoTCkpcmV0dXJuIGk7aWYoKHcoaSl8fG51bGwhPT1pLnBvcnQpJiZcImZpbGVcIj09PUwpcmV0dXJuIGk7aWYoXCJmaWxlXCI9PT1pLnNjaGVtZSYmKFwiXCI9PT1pLmhvc3R8fG51bGw9PT1pLmhvc3QpKXJldHVybiBpfWlmKGkuc2NoZW1lPUwsdm9pZCAwIT09bylyZXR1cm4gaS5wb3J0PT09eChpLnNjaGVtZSkmJihpLnBvcnQ9bnVsbCksaTtMPVwiXCIsXCJmaWxlXCI9PT1pLnNjaGVtZT8oUi5yZW1haW5pbmcoKS5zdGFydHNXaXRoKFwiLy9cIil8fHYoXCJJbnZhbGlkIGZpbGUgVVJMIHNjaGVtZSwgJy8vJyBleHBlY3RlZC5cIiksQz1zLlBhcnNlclN0YXRlLkZpbGUpOmIoaSkmJm51bGwhPT10JiZ0LnNjaGVtZT09PWkuc2NoZW1lP0M9cy5QYXJzZXJTdGF0ZS5TcGVjaWFsUmVsYXRpdmVPckF1dGhvcml0eTpiKGkpP0M9cy5QYXJzZXJTdGF0ZS5TcGVjaWFsQXV0aG9yaXR5U2xhc2hlczpSLnJlbWFpbmluZygpLnN0YXJ0c1dpdGgoXCIvXCIpPyhDPXMuUGFyc2VyU3RhdGUuUGF0aE9yQXV0aG9yaXR5LFIucG9pbnRlcisrKTooaS5fY2Fubm90QmVBQmFzZVVSTEZsYWc9ITAsaS5wYXRoLnB1c2goXCJcIiksQz1zLlBhcnNlclN0YXRlLkNhbm5vdEJlQUJhc2VVUkxQYXRoKX1icmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuTm9TY2hlbWU6aWYobnVsbD09PXR8fHQuX2Nhbm5vdEJlQUJhc2VVUkxGbGFnJiZcIiNcIiE9PVIuYygpKXJldHVybiB2KFwiSW52YWxpZCBpbnB1dCBzdHJpbmcuXCIpLG51bGw7dC5fY2Fubm90QmVBQmFzZVVSTEZsYWcmJlwiI1wiPT09Ui5jKCk/KGkuc2NoZW1lPXQuc2NoZW1lLGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSxpLnF1ZXJ5PXQucXVlcnksaS5mcmFnbWVudD1cIlwiLGkuX2Nhbm5vdEJlQUJhc2VVUkxGbGFnPSEwLEM9cy5QYXJzZXJTdGF0ZS5GcmFnbWVudCk6XCJmaWxlXCIhPT10LnNjaGVtZT8oQz1zLlBhcnNlclN0YXRlLlJlbGF0aXZlLFIucG9pbnRlci0tKTooQz1zLlBhcnNlclN0YXRlLkZpbGUsUi5wb2ludGVyLS0pO2JyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5TcGVjaWFsUmVsYXRpdmVPckF1dGhvcml0eTpcIi9cIj09PVIuYygpJiZSLnJlbWFpbmluZygpLnN0YXJ0c1dpdGgoXCIvXCIpPyhDPXMuUGFyc2VyU3RhdGUuU3BlY2lhbEF1dGhvcml0eUlnbm9yZVNsYXNoZXMsUi5wb2ludGVyKyspOih2KFwiSW52YWxpZCBpbnB1dCBzdHJpbmcuXCIpLEM9cy5QYXJzZXJTdGF0ZS5SZWxhdGl2ZSxSLnBvaW50ZXItLSk7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlBhdGhPckF1dGhvcml0eTpcIi9cIj09PVIuYygpP0M9cy5QYXJzZXJTdGF0ZS5BdXRob3JpdHk6KEM9cy5QYXJzZXJTdGF0ZS5QYXRoLFIucG9pbnRlci0tKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuUmVsYXRpdmU6aWYobnVsbD09PXQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJzZXIgc3RhdGUuIEJhc2UgVVJMIGlzIG51bGwuXCIpO3N3aXRjaChpLnNjaGVtZT10LnNjaGVtZSxSLmMoKSl7Y2FzZVwiXCI6aS51c2VybmFtZT10LnVzZXJuYW1lLGkucGFzc3dvcmQ9dC5wYXNzd29yZCxpLmhvc3Q9dC5ob3N0LGkucG9ydD10LnBvcnQsaS5wYXRoPXUubGlzdC5jbG9uZSh0LnBhdGgpLGkucXVlcnk9dC5xdWVyeTticmVhaztjYXNlXCIvXCI6Qz1zLlBhcnNlclN0YXRlLlJlbGF0aXZlU2xhc2g7YnJlYWs7Y2FzZVwiP1wiOmkudXNlcm5hbWU9dC51c2VybmFtZSxpLnBhc3N3b3JkPXQucGFzc3dvcmQsaS5ob3N0PXQuaG9zdCxpLnBvcnQ9dC5wb3J0LGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSxpLnF1ZXJ5PVwiXCIsQz1zLlBhcnNlclN0YXRlLlF1ZXJ5O2JyZWFrO2Nhc2VcIiNcIjppLnVzZXJuYW1lPXQudXNlcm5hbWUsaS5wYXNzd29yZD10LnBhc3N3b3JkLGkuaG9zdD10Lmhvc3QsaS5wb3J0PXQucG9ydCxpLnBhdGg9dS5saXN0LmNsb25lKHQucGF0aCksaS5xdWVyeT10LnF1ZXJ5LGkuZnJhZ21lbnQ9XCJcIixDPXMuUGFyc2VyU3RhdGUuRnJhZ21lbnQ7YnJlYWs7ZGVmYXVsdDpiKGkpJiZcIlxcXFxcIj09PVIuYygpPyh2KFwiSW52YWxpZCBpbnB1dCBzdHJpbmcuXCIpLEM9cy5QYXJzZXJTdGF0ZS5SZWxhdGl2ZVNsYXNoKTooaS51c2VybmFtZT10LnVzZXJuYW1lLGkucGFzc3dvcmQ9dC5wYXNzd29yZCxpLmhvc3Q9dC5ob3N0LGkucG9ydD10LnBvcnQsaS5wYXRoPXUubGlzdC5jbG9uZSh0LnBhdGgpLDAhPT1pLnBhdGgubGVuZ3RoJiZpLnBhdGguc3BsaWNlKGkucGF0aC5sZW5ndGgtMSwxKSxDPXMuUGFyc2VyU3RhdGUuUGF0aCxSLnBvaW50ZXItLSl9YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlJlbGF0aXZlU2xhc2g6aWYoIWIoaSl8fFwiL1wiIT09Ui5jKCkmJlwiXFxcXFwiIT09Ui5jKCkpaWYoXCIvXCI9PT1SLmMoKSlDPXMuUGFyc2VyU3RhdGUuQXV0aG9yaXR5O2Vsc2V7aWYobnVsbD09PXQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJzZXIgc3RhdGUuIEJhc2UgVVJMIGlzIG51bGwuXCIpO2kudXNlcm5hbWU9dC51c2VybmFtZSxpLnBhc3N3b3JkPXQucGFzc3dvcmQsaS5ob3N0PXQuaG9zdCxpLnBvcnQ9dC5wb3J0LEM9cy5QYXJzZXJTdGF0ZS5QYXRoLFIucG9pbnRlci0tfWVsc2VcIlxcXFxcIj09PVIuYygpJiZ2KFwiSW52YWxpZCBpbnB1dCBzdHJpbmcuXCIpLEM9cy5QYXJzZXJTdGF0ZS5TcGVjaWFsQXV0aG9yaXR5SWdub3JlU2xhc2hlczticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuU3BlY2lhbEF1dGhvcml0eVNsYXNoZXM6XCIvXCI9PT1SLmMoKSYmUi5yZW1haW5pbmcoKS5zdGFydHNXaXRoKFwiL1wiKT8oQz1zLlBhcnNlclN0YXRlLlNwZWNpYWxBdXRob3JpdHlJZ25vcmVTbGFzaGVzLFIucG9pbnRlcisrKToodihcIkV4cGVjdGVkICcvLycuXCIpLEM9cy5QYXJzZXJTdGF0ZS5TcGVjaWFsQXV0aG9yaXR5SWdub3JlU2xhc2hlcyxSLnBvaW50ZXItLSk7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlNwZWNpYWxBdXRob3JpdHlJZ25vcmVTbGFzaGVzOlwiL1wiIT09Ui5jKCkmJlwiXFxcXFwiIT09Ui5jKCk/KEM9cy5QYXJzZXJTdGF0ZS5BdXRob3JpdHksUi5wb2ludGVyLS0pOnYoXCJVbmV4cGVjdGVkICcvJyBvciAnXFxcXCcuXCIpO2JyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5BdXRob3JpdHk6aWYoXCJAXCI9PT1SLmMoKSl7dihcIlVuZXhwZWN0ZWQgJ0AnLlwiKSxNJiYoTD1cIiU0MFwiK0wpLE09ITA7dHJ5e2Zvcih2YXIgVT0obD12b2lkIDAsbihMKSksRz1VLm5leHQoKTshRy5kb25lO0c9VS5uZXh0KCkpe3ZhciBxPUcudmFsdWU7aWYoXCI6XCIhPT1xfHxqKXt2YXIgVz1YKHEsZCk7aj9pLnBhc3N3b3JkKz1XOmkudXNlcm5hbWUrPVd9ZWxzZSBqPSEwfX1jYXRjaChlKXtsPXtlcnJvcjplfX1maW5hbGx5e3RyeXtHJiYhRy5kb25lJiYoYz1VLnJldHVybikmJmMuY2FsbChVKX1maW5hbGx5e2lmKGwpdGhyb3cgbC5lcnJvcn19TD1cIlwifWVsc2UgaWYoXCJcIj09PVIuYygpfHxcIi9cIj09PVIuYygpfHxcIj9cIj09PVIuYygpfHxcIiNcIj09PVIuYygpfHxiKGkpJiZcIlxcXFxcIj09PVIuYygpKXtpZihNJiZcIlwiPT09TClyZXR1cm4gdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxudWxsO1IucG9pbnRlci09TC5sZW5ndGgrMSxMPVwiXCIsQz1zLlBhcnNlclN0YXRlLkhvc3R9ZWxzZSBMKz1SLmMoKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuSG9zdDpjYXNlIHMuUGFyc2VyU3RhdGUuSG9zdG5hbWU6aWYodm9pZCAwIT09byYmXCJmaWxlXCI9PT1pLnNjaGVtZSlSLnBvaW50ZXItLSxDPXMuUGFyc2VyU3RhdGUuRmlsZUhvc3Q7ZWxzZSBpZihcIjpcIiE9PVIuYygpfHxCKWlmKFwiXCI9PT1SLmMoKXx8XCIvXCI9PT1SLmMoKXx8XCI/XCI9PT1SLmMoKXx8XCIjXCI9PT1SLmMoKXx8YihpKSYmXCJcXFxcXCI9PT1SLmMoKSl7aWYoUi5wb2ludGVyLS0sYihpKSYmXCJcIj09PUwpcmV0dXJuIHYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksbnVsbDtpZih2b2lkIDAhPT1vJiZcIlwiPT09TCYmKHcoaSl8fG51bGwhPT1pLnBvcnQpKXJldHVybiB2KFwiSW52YWxpZCBpbnB1dCBzdHJpbmcuXCIpLGk7aWYobnVsbD09PShKPUkoTCwhYihpKSkpKXJldHVybiBudWxsO2lmKGkuaG9zdD1KLEw9XCJcIixDPXMuUGFyc2VyU3RhdGUuUGF0aFN0YXJ0LHZvaWQgMCE9PW8pcmV0dXJuIGl9ZWxzZVwiW1wiPT09Ui5jKCkmJihCPSEwKSxcIl1cIj09PVIuYygpJiYoQj0hMSksTCs9Ui5jKCk7ZWxzZXtpZihcIlwiPT09TClyZXR1cm4gdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxudWxsO2lmKG51bGw9PT0oSj1JKEwsIWIoaSkpKSlyZXR1cm4gbnVsbDtpZihpLmhvc3Q9SixMPVwiXCIsQz1zLlBhcnNlclN0YXRlLlBvcnQsbz09PXMuUGFyc2VyU3RhdGUuSG9zdG5hbWUpcmV0dXJuIGl9YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLlBvcnQ6aWYodS5jb2RlUG9pbnQuQVNDSUlEaWdpdC50ZXN0KFIuYygpKSlMKz1SLmMoKTtlbHNle2lmKCEoXCJcIj09PVIuYygpfHxcIi9cIj09PVIuYygpfHxcIj9cIj09PVIuYygpfHxcIiNcIj09PVIuYygpfHxiKGkpJiZcIlxcXFxcIj09PVIuYygpfHxvKSlyZXR1cm4gdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxudWxsO2lmKFwiXCIhPT1MJiZcIlwiIT09TCl7dmFyIEg9cGFyc2VJbnQoTCwxMCk7aWYoSD5NYXRoLnBvdygyLDE2KS0xKXJldHVybiB2KFwiSW52YWxpZCBwb3J0IG51bWJlci5cIiksbnVsbDtpLnBvcnQ9SD09PXgoaS5zY2hlbWUpP251bGw6SCxMPVwiXCJ9aWYodm9pZCAwIT09bylyZXR1cm4gaTtDPXMuUGFyc2VyU3RhdGUuUGF0aFN0YXJ0LFIucG9pbnRlci0tfWJyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5GaWxlOmlmKGkuc2NoZW1lPVwiZmlsZVwiLFwiL1wiPT09Ui5jKCl8fFwiXFxcXFwiPT09Ui5jKCkpXCJcXFxcXCI9PT1SLmMoKSYmdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxDPXMuUGFyc2VyU3RhdGUuRmlsZVNsYXNoO2Vsc2UgaWYobnVsbCE9PXQmJlwiZmlsZVwiPT09dC5zY2hlbWUpc3dpdGNoKFIuYygpKXtjYXNlXCJcIjppLmhvc3Q9dC5ob3N0LGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSxpLnF1ZXJ5PXQucXVlcnk7YnJlYWs7Y2FzZVwiP1wiOmkuaG9zdD10Lmhvc3QsaS5wYXRoPXUubGlzdC5jbG9uZSh0LnBhdGgpLGkucXVlcnk9XCJcIixDPXMuUGFyc2VyU3RhdGUuUXVlcnk7YnJlYWs7Y2FzZVwiI1wiOmkuaG9zdD10Lmhvc3QsaS5wYXRoPXUubGlzdC5jbG9uZSh0LnBhdGgpLGkucXVlcnk9dC5xdWVyeSxpLmZyYWdtZW50PVwiXCIsQz1zLlBhcnNlclN0YXRlLkZyYWdtZW50O2JyZWFrO2RlZmF1bHQ6UChSLnN1YnN0cmluZygpKT92KFwiVW5leHBlY3RlZCB3aW5kb3dzIGRyaXZlIGxldHRlciBpbiBpbnB1dCBzdHJpbmcuXCIpOihpLmhvc3Q9dC5ob3N0LGkucGF0aD11Lmxpc3QuY2xvbmUodC5wYXRoKSxPKGkpKSxDPXMuUGFyc2VyU3RhdGUuUGF0aCxSLnBvaW50ZXItLX1lbHNlIEM9cy5QYXJzZXJTdGF0ZS5QYXRoLFIucG9pbnRlci0tO2JyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5GaWxlU2xhc2g6XCIvXCI9PT1SLmMoKXx8XCJcXFxcXCI9PT1SLmMoKT8oXCJcXFxcXCI9PT1SLmMoKSYmdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxDPXMuUGFyc2VyU3RhdGUuRmlsZUhvc3QpOihudWxsPT09dHx8XCJmaWxlXCIhPT10LnNjaGVtZXx8UChSLnN1YnN0cmluZygpKXx8KEYodC5wYXRoWzBdKT9pLnBhdGgucHVzaCh0LnBhdGhbMF0pOmkuaG9zdD10Lmhvc3QpLEM9cy5QYXJzZXJTdGF0ZS5QYXRoLFIucG9pbnRlci0tKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuRmlsZUhvc3Q6aWYoXCJcIj09PVIuYygpfHxcIi9cIj09PVIuYygpfHxcIlxcXFxcIj09PVIuYygpfHxcIj9cIj09PVIuYygpfHxcIiNcIj09PVIuYygpKWlmKFIucG9pbnRlci0tLHZvaWQgMD09PW8mJmsoTCkpdihcIlVuZXhwZWN0ZWQgd2luZG93cyBkcml2ZSBsZXR0ZXIgaW4gaW5wdXQgc3RyaW5nLlwiKSxDPXMuUGFyc2VyU3RhdGUuUGF0aDtlbHNlIGlmKFwiXCI9PT1MKXtpZihpLmhvc3Q9XCJcIix2b2lkIDAhPT1vKXJldHVybiBpO0M9cy5QYXJzZXJTdGF0ZS5QYXRoU3RhcnR9ZWxzZXt2YXIgSjtpZihudWxsPT09KEo9SShMLCFiKGkpKSkpcmV0dXJuIG51bGw7aWYoXCJsb2NhbGhvc3RcIj09PUomJihKPVwiXCIpLGkuaG9zdD1KLHZvaWQgMCE9PW8pcmV0dXJuIGk7TD1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5QYXRoU3RhcnR9ZWxzZSBMKz1SLmMoKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuUGF0aFN0YXJ0OmIoaSk/KFwiXFxcXFwiPT09Ui5jKCkmJnYoXCJJbnZhbGlkIGlucHV0IHN0cmluZy5cIiksQz1zLlBhcnNlclN0YXRlLlBhdGgsXCIvXCIhPT1SLmMoKSYmXCJcXFxcXCIhPT1SLmMoKSYmUi5wb2ludGVyLS0pOnZvaWQgMD09PW8mJlwiP1wiPT09Ui5jKCk/KGkucXVlcnk9XCJcIixDPXMuUGFyc2VyU3RhdGUuUXVlcnkpOnZvaWQgMD09PW8mJlwiI1wiPT09Ui5jKCk/KGkuZnJhZ21lbnQ9XCJcIixDPXMuUGFyc2VyU3RhdGUuRnJhZ21lbnQpOlwiXCIhPT1SLmMoKSYmKEM9cy5QYXJzZXJTdGF0ZS5QYXRoLFwiL1wiIT09Ui5jKCkmJlIucG9pbnRlci0tKTticmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuUGF0aDppZihcIlwiPT09Ui5jKCl8fFwiL1wiPT09Ui5jKCl8fGIoaSkmJlwiXFxcXFwiPT09Ui5jKCl8fHZvaWQgMD09PW8mJihcIj9cIj09PVIuYygpfHxcIiNcIj09PVIuYygpKSl7aWYoYihpKSYmXCJcXFxcXCI9PT1SLmMoKSYmdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxUKEwpKU8oaSksXCIvXCI9PT1SLmMoKXx8YihpKSYmXCJcXFxcXCI9PT1SLmMoKXx8aS5wYXRoLnB1c2goXCJcIik7ZWxzZSBpZighTihMKXx8XCIvXCI9PT1SLmMoKXx8YihpKSYmXCJcXFxcXCI9PT1SLmMoKSl7aWYoIU4oTCkpe2lmKFwiZmlsZVwiPT09aS5zY2hlbWUmJjA9PT1pLnBhdGgubGVuZ3RoJiZrKEwpKXtudWxsIT09aS5ob3N0JiZcIlwiIT09aS5ob3N0JiYodihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxpLmhvc3Q9XCJcIik7dmFyIFk9QXJyYXkuZnJvbShMKTtMPVkuc2xpY2UoMCwxKStcIjpcIitZLnNsaWNlKDIpfWkucGF0aC5wdXNoKEwpfX1lbHNlIGkucGF0aC5wdXNoKFwiXCIpO2lmKEw9XCJcIixcImZpbGVcIj09PWkuc2NoZW1lJiYoXCJcIj09PVIuYygpfHxcIj9cIj09PVIuYygpfHxcIiNcIj09PVIuYygpKSlmb3IoO2kucGF0aC5sZW5ndGg+MSYmXCJcIj09PWkucGF0aFswXTspdihcIkludmFsaWQgaW5wdXQgc3RyaW5nLlwiKSxpLnBhdGguc3BsaWNlKDAsMSk7XCI/XCI9PT1SLmMoKSYmKGkucXVlcnk9XCJcIixDPXMuUGFyc2VyU3RhdGUuUXVlcnkpLFwiI1wiPT09Ui5jKCkmJihpLmZyYWdtZW50PVwiXCIsQz1zLlBhcnNlclN0YXRlLkZyYWdtZW50KX1lbHNlIG0udGVzdChSLmMoKSl8fFwiJVwiPT09Ui5jKCl8fHYoXCJDaGFyYWN0ZXIgaXMgbm90IGEgVVJMIGNvZGUgcG9pbnQgb3IgYSBwZXJjZW50IGVuY29kZWQgY2hhcmFjdGVyLlwiKSxcIiVcIiE9PVIuYygpfHwvXlswLTlhLWZBLUZdWzAtOWEtZkEtRl0vLnRlc3QoUi5yZW1haW5pbmcoKSl8fHYoXCJQZXJjZW50IGVuY29kZWQgY2hhcmFjdGVyIG11c3QgYmUgZm9sbG93ZWQgYnkgdHdvIGhleCBkaWdpdHMuXCIpLEwrPVgoUi5jKCksZik7YnJlYWs7Y2FzZSBzLlBhcnNlclN0YXRlLkNhbm5vdEJlQUJhc2VVUkxQYXRoOlwiP1wiPT09Ui5jKCk/KGkucXVlcnk9XCJcIixDPXMuUGFyc2VyU3RhdGUuUXVlcnkpOlwiI1wiPT09Ui5jKCk/KGkuZnJhZ21lbnQ9XCJcIixDPXMuUGFyc2VyU3RhdGUuRnJhZ21lbnQpOihcIlwiPT09Ui5jKCl8fG0udGVzdChSLmMoKSl8fFwiJVwiPT09Ui5jKCl8fHYoXCJDaGFyYWN0ZXIgaXMgbm90IGEgVVJMIGNvZGUgcG9pbnQgb3IgYSBwZXJjZW50IGVuY29kZWQgY2hhcmFjdGVyLlwiKSxcIiVcIiE9PVIuYygpfHwvXlswLTlhLWZBLUZdWzAtOWEtZkEtRl0vLnRlc3QoUi5yZW1haW5pbmcoKSl8fHYoXCJQZXJjZW50IGVuY29kZWQgY2hhcmFjdGVyIG11c3QgYmUgZm9sbG93ZWQgYnkgdHdvIGhleCBkaWdpdHMuXCIpLFwiXCIhPT1SLmMoKSYmKGkucGF0aFswXSs9WChSLmMoKSxoKSkpO2JyZWFrO2Nhc2Ugcy5QYXJzZXJTdGF0ZS5RdWVyeTppZihcIlVURi04XCI9PT1BfHxiKGkpJiZcIndzXCIhPT1pLnNjaGVtZSYmXCJ3c3NcIiE9PWkuc2NoZW1lfHwoQT1cIlVURi04XCIpLHZvaWQgMD09PW8mJlwiI1wiPT09Ui5jKCkpaS5mcmFnbWVudD1cIlwiLEM9cy5QYXJzZXJTdGF0ZS5GcmFnbWVudDtlbHNlIGlmKFwiXCIhPT1SLmMoKSl7aWYobS50ZXN0KFIuYygpKXx8XCIlXCI9PT1SLmMoKXx8dihcIkNoYXJhY3RlciBpcyBub3QgYSBVUkwgY29kZSBwb2ludCBvciBhIHBlcmNlbnQgZW5jb2RlZCBjaGFyYWN0ZXIuXCIpLFwiJVwiIT09Ui5jKCl8fC9eWzAtOWEtZkEtRl1bMC05YS1mQS1GXS8udGVzdChSLnJlbWFpbmluZygpKXx8dihcIlBlcmNlbnQgZW5jb2RlZCBjaGFyYWN0ZXIgbXVzdCBiZSBmb2xsb3dlZCBieSB0d28gaGV4IGRpZ2l0cy5cIiksXCJVVEYtOFwiIT09QS50b1VwcGVyQ2FzZSgpKXRocm93IG5ldyBFcnJvcihcIk9ubHkgVVRGLTggZW5jb2RpbmcgaXMgc3VwcG9ydGVkLlwiKTt2YXIgVj1hLnV0ZjhFbmNvZGUoUi5jKCkpO2lmKFYubGVuZ3RoPj0zJiYzOD09PVZbMF0mJjM1PT09VlsxXSYmNTk9PT1WW1YubGVuZ3RoLTFdKVY9Vi5zdWJhcnJheSgyLFYubGVuZ3RoLTEpLGkucXVlcnkrPVwiJTI2JTIzXCIrdS5ieXRlU2VxdWVuY2UuaXNvbW9ycGhpY0RlY29kZShWKStcIiUzQlwiO2Vsc2UgdHJ5e2Zvcih2YXIgSz0oeT12b2lkIDAsbihWKSksJD1LLm5leHQoKTshJC5kb25lOyQ9Sy5uZXh0KCkpe3ZhciBRPSQudmFsdWU7UTwzM3x8UT4xMjZ8fDM0PT09UXx8MzU9PT1RfHw2MD09PVF8fDYyPT09UXx8Mzk9PT1RJiZiKGkpP2kucXVlcnkrPXooUSk6aS5xdWVyeSs9U3RyaW5nLmZyb21DaGFyQ29kZShRKX19Y2F0Y2goZSl7eT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7JCYmISQuZG9uZSYmKF89Sy5yZXR1cm4pJiZfLmNhbGwoSyl9ZmluYWxseXtpZih5KXRocm93IHkuZXJyb3J9fX1icmVhaztjYXNlIHMuUGFyc2VyU3RhdGUuRnJhZ21lbnQ6XCJcIj09PVIuYygpfHwoXCJcXDBcIj09PVIuYygpP3YoXCJOVUxMIGNoYXJhY3RlciBpbiBpbnB1dCBzdHJpbmcuXCIpOihtLnRlc3QoUi5jKCkpfHxcIiVcIj09PVIuYygpfHx2KFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgaW4gZnJhZ21lbnQgc3RyaW5nLlwiKSxcIiVcIiE9PVIuYygpfHwvXltBLVphLXowLTldW0EtWmEtejAtOV0vLnRlc3QoUi5yZW1haW5pbmcoKSl8fHYoXCJVbmV4cGVjdGVkIGNoYXJhY3RlciBpbiBmcmFnbWVudCBzdHJpbmcuXCIpLGkuZnJhZ21lbnQrPVgoUi5jKCkscCkpKX1pZihSLmVvZilicmVhaztSLnBvaW50ZXIrK31yZXR1cm4gaX1mdW5jdGlvbiBOKGUpe3JldHVyblwiLlwiPT09ZXx8XCIlMmVcIj09PWUudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBUKGUpe3ZhciB0PWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cIi4uXCI9PT10fHxcIi4lMmVcIj09PXR8fFwiJTJlLlwiPT09dHx8XCIlMmUlMmVcIj09PXR9ZnVuY3Rpb24gTyhlKXt2YXIgdD1lLnBhdGg7MCE9PXQubGVuZ3RoJiYoXCJmaWxlXCI9PT1lLnNjaGVtZSYmMT09PXQubGVuZ3RoJiZGKHRbMF0pfHxlLnBhdGguc3BsaWNlKGUucGF0aC5sZW5ndGgtMSwxKSl9ZnVuY3Rpb24gRihlKXtyZXR1cm4gZS5sZW5ndGg+PTImJnUuY29kZVBvaW50LkFTQ0lJQWxwaGEudGVzdChlWzBdKSYmXCI6XCI9PT1lWzFdfWZ1bmN0aW9uIGsoZSl7cmV0dXJuIGUubGVuZ3RoPj0yJiZ1LmNvZGVQb2ludC5BU0NJSUFscGhhLnRlc3QoZVswXSkmJihcIjpcIj09PWVbMV18fFwifFwiPT09ZVsxXSl9ZnVuY3Rpb24gUChlKXtyZXR1cm4gZS5sZW5ndGg+PTImJmsoZSkmJigyPT09ZS5sZW5ndGh8fFwiL1wiPT09ZVsyXXx8XCJcXFxcXCI9PT1lWzJdfHxcIj9cIj09PWVbMl18fFwiI1wiPT09ZVsyXSl9ZnVuY3Rpb24gSShlLHQpe2lmKHZvaWQgMD09PXQmJih0PSExKSxlLnN0YXJ0c1dpdGgoXCJbXCIpKXJldHVybiBlLmVuZHNXaXRoKFwiXVwiKT9CKGUuc3Vic3RyaW5nKDEsZS5sZW5ndGgtMSkpOih2KFwiRXhwZWN0ZWQgJ10nIGFmdGVyICdbJy5cIiksbnVsbCk7aWYodClyZXR1cm4gaihlKTt2YXIgcj1IKGEudXRmOERlY29kZShHKGUpKSk7aWYobnVsbD09PXIpcmV0dXJuIHYoXCJJbnZhbGlkIGRvbWFpbi5cIiksbnVsbDtpZih5LnRlc3QocikpcmV0dXJuIHYoXCJJbnZhbGlkIGRvbWFpbi5cIiksbnVsbDt2YXIgbj1NKHIpO3JldHVybiBudWxsPT09bnx8YS5pc051bWJlcihuKT9uOnJ9ZnVuY3Rpb24gTChlLHQpe3ZvaWQgMD09PXQmJih0PXt2YWx1ZTohMX0pO3ZhciByPTEwO3JldHVybiBlLnN0YXJ0c1dpdGgoXCIweFwiKXx8ZS5zdGFydHNXaXRoKFwiMFhcIik/KHQudmFsdWU9ITAsZT1lLnN1YnN0cigyKSxyPTE2KTplLmxlbmd0aD49MiYmXCIwXCI9PT1lWzBdJiYodC52YWx1ZT0hMCxlPWUuc3Vic3RyKDEpLHI9OCksXCJcIj09PWU/MDooMTA9PT1yPy9eWzAtOV0rJC86MTY9PT1yPy9eWzAtOUEtRmEtZl0rJC86L15bMC03XSskLykudGVzdChlKT9wYXJzZUludChlLHIpOm51bGx9ZnVuY3Rpb24gTShlKXt2YXIgdCxyLGksbyxhPXt2YWx1ZTohMX0scz1lLnNwbGl0KFwiLlwiKTtpZihcIlwiPT09c1tzLmxlbmd0aC0xXSYmKGEudmFsdWU9ITAscy5sZW5ndGg+MSYmcy5wb3AoKSkscy5sZW5ndGg+NClyZXR1cm4gZTt2YXIgdT1bXTt0cnl7Zm9yKHZhciBsPW4ocyksYz1sLm5leHQoKTshYy5kb25lO2M9bC5uZXh0KCkpe3ZhciBoPWMudmFsdWU7aWYoXCJcIj09PWgpcmV0dXJuIGU7aWYobnVsbD09PShfPUwoaCxhKSkpcmV0dXJuIGU7dS5wdXNoKF8pfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYocj1sLnJldHVybikmJnIuY2FsbChsKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19YS52YWx1ZSYmdihcIkludmFsaWQgSVAgdjQgYWRkcmVzcy5cIik7Zm9yKHZhciBwPTA7cDx1Lmxlbmd0aDtwKyspe2lmKHVbcF0+MjU1JiYodihcIkludmFsaWQgSVAgdjQgYWRkcmVzcy5cIikscDx1Lmxlbmd0aC0xKSlyZXR1cm4gbnVsbH1pZih1W3UubGVuZ3RoLTFdPj1NYXRoLnBvdygyNTYsNS11Lmxlbmd0aCkpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY0IGFkZHJlc3MuXCIpLG51bGw7dmFyIGY9dVt1Lmxlbmd0aC0xXTt1LnBvcCgpO3ZhciBkPTA7dHJ5e2Zvcih2YXIgbT1uKHUpLHk9bS5uZXh0KCk7IXkuZG9uZTt5PW0ubmV4dCgpKXt2YXIgXztmKz0oXz15LnZhbHVlKSpNYXRoLnBvdygyNTYsMy1kKSxkKyt9fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3kmJiF5LmRvbmUmJihvPW0ucmV0dXJuKSYmby5jYWxsKG0pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gZn1mdW5jdGlvbiBCKGUpe3ZhciB0LHI9WzAsMCwwLDAsMCwwLDAsMF0sbj0wLG89bnVsbCxzPW5ldyBhLlN0cmluZ1dhbGtlcihlKTtpZihcIjpcIj09PXMuYygpKXtpZighcy5yZW1haW5pbmcoKS5zdGFydHNXaXRoKFwiOlwiKSlyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtzLnBvaW50ZXIrPTIsbz1uKz0xfWZvcig7XCJcIiE9PXMuYygpOyl7aWYoOD09PW4pcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7aWYoXCI6XCIhPT1zLmMoKSl7Zm9yKHZhciBsPTAsYz0wO2M8NCYmdS5jb2RlUG9pbnQuQVNDSUlIZXhEaWdpdC50ZXN0KHMuYygpKTspbD0xNipsK3BhcnNlSW50KHMuYygpLDE2KSxzLnBvaW50ZXIrKyxjKys7aWYoXCIuXCI9PT1zLmMoKSl7aWYoMD09PWMpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7aWYocy5wb2ludGVyLT1jLG4+NilyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtmb3IodmFyIGg9MDtcIlwiIT09cy5jKCk7KXt2YXIgcD1udWxsO2lmKGg+MCl7aWYoIShcIi5cIj09PXMuYygpJiZoPDQpKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsO3MucG9pbnRlcisrfWlmKCF1LmNvZGVQb2ludC5BU0NJSURpZ2l0LnRlc3Qocy5jKCkpKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsO2Zvcig7dS5jb2RlUG9pbnQuQVNDSUlEaWdpdC50ZXN0KHMuYygpKTspe3ZhciBmPXBhcnNlSW50KHMuYygpLDEwKTtpZihudWxsPT09cClwPWY7ZWxzZXtpZigwPT09cClyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtwPTEwKnArZn1pZihwPjI1NSlyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtzLnBvaW50ZXIrK31pZihudWxsPT09cClyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDtyW25dPTI1NipyW25dK3AsMiE9PSsraCYmNCE9PWh8fG4rK31pZig0IT09aClyZXR1cm4gdihcIkludmFsaWQgSVAgdjYgYWRkcmVzcy5cIiksbnVsbDticmVha31pZihcIjpcIj09PXMuYygpKXtpZihzLnBvaW50ZXIrKyxcIlwiPT09cy5jKCkpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGx9ZWxzZSBpZihcIlwiIT09cy5jKCkpcmV0dXJuIHYoXCJJbnZhbGlkIElQIHY2IGFkZHJlc3MuXCIpLG51bGw7cltuXT1sLG4rK31lbHNle2lmKG51bGwhPT1vKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsO3MucG9pbnRlcisrLG89KytufX1pZihudWxsIT09byl7dmFyIGQ9bi1vO2ZvcihuPTc7MCE9PW4mJmQ+MDspdD1pKFtyW28rZC0xXSxyW25dXSwyKSxyW25dPXRbMF0scltvK2QtMV09dFsxXSxuLS0sZC0tfWVsc2UgaWYobnVsbD09PW8mJjghPT1uKXJldHVybiB2KFwiSW52YWxpZCBJUCB2NiBhZGRyZXNzLlwiKSxudWxsO3JldHVybiByfWZ1bmN0aW9uIGooZSl7dmFyIHQscjtpZigvW1xceDAwXFx0XFxmXFxyICMvOj9AXFxbXFxcXFxcXV0vLnRlc3QoZSkpcmV0dXJuIHYoXCJJbnZhbGlkIGhvc3Qgc3RyaW5nLlwiKSxudWxsO3ZhciBpPVwiXCI7dHJ5e2Zvcih2YXIgbz1uKGUpLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXtpKz1YKGEudmFsdWUsaCl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gaX1mdW5jdGlvbiBSKGUpe3JldHVybiBudWxsfWZ1bmN0aW9uIHooZSl7cmV0dXJuXCIlXCIrKFwiMDBcIitlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtMil9ZnVuY3Rpb24gVShlKXtmb3IodmFyIHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTQ4JiZlPD01N3x8ZT49NjUmJmU8PTcwfHxlPj05NyYmZTw9MTAyfSxyPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxuPTAsaT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgbz1lW2ldO2lmKDM3IT09bylyW25dPW8sbisrO2Vsc2UgaWYoMzc9PT1vJiZpPj1lLmxlbmd0aC0yKXJbbl09byxuKys7ZWxzZSBpZigzNyE9PW98fHQoZVtpKzFdKSYmdChlW2krMl0pKXt2YXIgcz1wYXJzZUludChhLnV0ZjhEZWNvZGUoVWludDhBcnJheS5vZihlW2krMV0sZVtpKzJdKSksMTYpO3Jbbl09cyxuKyssaSs9Mn1lbHNlIHJbbl09byxuKyt9cmV0dXJuIHIuc3ViYXJyYXkoMCxuKX1mdW5jdGlvbiBHKGUpe3JldHVybiBVKGEudXRmOEVuY29kZShlKSl9ZnVuY3Rpb24gWChlLHQpe3ZhciByLGk7aWYoIXQudGVzdChlKSlyZXR1cm4gZTt2YXIgbz1hLnV0ZjhFbmNvZGUoZSkscz1cIlwiO3RyeXtmb3IodmFyIHU9bihvKSxsPXUubmV4dCgpOyFsLmRvbmU7bD11Lm5leHQoKSl7cys9eihsLnZhbHVlKX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKGk9dS5yZXR1cm4pJiZpLmNhbGwodSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBzfWZ1bmN0aW9uIHEoZSl7dmFyIHQscixpLG8scz1bXSx1PVtdO3RyeXtmb3IodmFyIGw9bihlKSxjPWwubmV4dCgpOyFjLmRvbmU7Yz1sLm5leHQoKSl7dmFyIGg9Yy52YWx1ZTszOD09PWg/KHMucHVzaChVaW50OEFycmF5LmZyb20odSkpLHU9W10pOnUucHVzaChoKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YyYmIWMuZG9uZSYmKHI9bC5yZXR1cm4pJiZyLmNhbGwobCl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fTAhPT11Lmxlbmd0aCYmcy5wdXNoKFVpbnQ4QXJyYXkuZnJvbSh1KSk7dmFyIHA9W107dHJ5e2Zvcih2YXIgZj1uKHMpLGQ9Zi5uZXh0KCk7IWQuZG9uZTtkPWYubmV4dCgpKXt2YXIgbT1kLnZhbHVlO2lmKDAhPT1tLmxlbmd0aCl7Zm9yKHZhciB5PW0uaW5kZXhPZig2MSksdj0tMSE9PXk/bS5zbGljZSgwLHkpOm0sXz0tMSE9PXk/bS5zbGljZSh5KzEpOm5ldyBVaW50OEFycmF5LGc9MDtnPHYubGVuZ3RoO2crKyk0Mz09PXZbZ10mJih2W2ddPTMyKTtmb3IoZz0wO2c8Xy5sZW5ndGg7ZysrKTQzPT09X1tnXSYmKF9bZ109MzIpO3ZhciBiPWEudXRmOERlY29kZSh2KSx4PWEudXRmOERlY29kZShfKTtwLnB1c2goW2IseF0pfX19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZCYmIWQuZG9uZSYmKG89Zi5yZXR1cm4pJiZvLmNhbGwoZil9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBwfWZ1bmN0aW9uIFcoZSl7dmFyIHQscixpPVwiXCI7dHJ5e2Zvcih2YXIgbz1uKGUpLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgcz1hLnZhbHVlO2krPTMyPT09cz9cIitcIjo0Mj09PXN8fDQ1PT09c3x8NDY9PT1zfHxzPj00OCYmczw9NTd8fHM+PTY1JiZzPD05MHx8OTU9PT1zfHxzPj05NyYmczw9MTIyP1N0cmluZy5mcm9tQ29kZVBvaW50KHMpOnoocyl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gaX1mdW5jdGlvbiBIKGUsdCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciByPWwuZG9tYWluVG9BU0NJSShlKTtyZXR1cm5cIlwiPT09cj8odihcIkludmFsaWQgZG9tYWluIG5hbWUuXCIpLG51bGwpOnJ9dC5zZXRWYWxpZGF0aW9uRXJyb3JDYWxsYmFjaz1mdW5jdGlvbihlKXtvPWV9LHQubmV3VVJMPV8sdC5pc1NwZWNpYWxTY2hlbWU9Zyx0LmlzU3BlY2lhbD1iLHQuZGVmYXVsdFBvcnQ9eCx0LmluY2x1ZGVzQ3JlZGVudGlhbHM9dyx0LmNhbm5vdEhhdmVBVXNlcm5hbWVQYXNzd29yZFBvcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lLmhvc3R8fFwiXCI9PT1lLmhvc3R8fGUuX2Nhbm5vdEJlQUJhc2VVUkxGbGFnfHxcImZpbGVcIj09PWUuc2NoZW1lfSx0LnVybFNlcmlhbGl6ZXI9RSx0Lmhvc3RTZXJpYWxpemVyPUQsdC5pUHY0U2VyaWFsaXplcj1TLHQuaVB2NlNlcmlhbGl6ZXI9Qyx0LnVybFBhcnNlcj1mdW5jdGlvbihlLHQscil7dmFyIG49QShlLHQscik7cmV0dXJuIG51bGw9PT1uP251bGw6KFwiYmxvYlwiIT09bi5zY2hlbWV8fChuLl9ibG9iVVJMRW50cnk9bnVsbCksbil9LHQuYmFzaWNVUkxQYXJzZXI9QSx0LnNldFRoZVVzZXJuYW1lPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaSxvPVwiXCI7dHJ5e2Zvcih2YXIgYT1uKHQpLHM9YS5uZXh0KCk7IXMuZG9uZTtzPWEubmV4dCgpKXtvKz1YKHMudmFsdWUsZCl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3MmJiFzLmRvbmUmJihpPWEucmV0dXJuKSYmaS5jYWxsKGEpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1lLnVzZXJuYW1lPW99LHQuc2V0VGhlUGFzc3dvcmQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixpLG89XCJcIjt0cnl7Zm9yKHZhciBhPW4odCkscz1hLm5leHQoKTshcy5kb25lO3M9YS5uZXh0KCkpe28rPVgocy52YWx1ZSxkKX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKGk9YS5yZXR1cm4pJiZpLmNhbGwoYSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fWUucGFzc3dvcmQ9b30sdC5pc1NpbmdsZURvdFBhdGhTZWdtZW50PU4sdC5pc0RvdWJsZURvdFBhdGhTZWdtZW50PVQsdC5zaG9ydGVuPU8sdC5pc05vcm1hbGl6ZWRXaW5kb3dzRHJpdmVMZXR0ZXI9Rix0LmlzV2luZG93c0RyaXZlTGV0dGVyPWssdC5zdGFydHNXaXRoQVdpbmRvd3NEcml2ZUxldHRlcj1QLHQuaG9zdFBhcnNlcj1JLHQuaVB2NE51bWJlclBhcnNlcj1MLHQuaVB2NFBhcnNlcj1NLHQuaVB2NlBhcnNlcj1CLHQub3BhcXVlSG9zdFBhcnNlcj1qLHQucmVzb2x2ZUFCbG9iVVJMPVIsdC5wZXJjZW50RW5jb2RlPXosdC5wZXJjZW50RGVjb2RlPVUsdC5zdHJpbmdQZXJjZW50RGVjb2RlPUcsdC51dGY4UGVyY2VudEVuY29kZT1YLHQuaG9zdEVxdWFscz1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dH0sdC51cmxFcXVhbHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB2b2lkIDA9PT1yJiYocj0hMSksRShlLHIpPT09RSh0LHIpfSx0LnVybEVuY29kZWRTdHJpbmdQYXJzZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIHEoYS51dGY4RW5jb2RlKGUpKX0sdC51cmxFbmNvZGVkUGFyc2VyPXEsdC51cmxFbmNvZGVkQnl0ZVNlcmlhbGl6ZXI9Vyx0LnVybEVuY29kZWRTZXJpYWxpemVyPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtpZihcIlVURi04XCIhPT0odm9pZCAwPT09dHx8XCJyZXBsYWNlbWVudFwiPT09dHx8XCJVVEYtMTZCRVwiPT09dHx8XCJVVEYtMTZMRVwiPT09dD9cIlVURi04XCI6dCkudG9VcHBlckNhc2UoKSl0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IFVURi04IGVuY29kaW5nIGlzIHN1cHBvcnRlZC5cIik7dmFyIG89XCJcIjt0cnl7Zm9yKHZhciBzPW4oZSksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBsPXUudmFsdWUsYz1XKGEudXRmOEVuY29kZShsWzBdKSksaD1sWzFdO2g9VyhhLnV0ZjhFbmNvZGUoaCkpLFwiXCIhPT1vJiYobys9XCImXCIpLG8rPWMrXCI9XCIraH19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dSYmIXUuZG9uZSYmKGk9cy5yZXR1cm4pJiZpLmNhbGwocyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBvfSx0Lm9yaWdpbj1mdW5jdGlvbiBlKHQpe3N3aXRjaCh0LnNjaGVtZSl7Y2FzZVwiYmxvYlwiOnQuX2Jsb2JVUkxFbnRyeTt2YXIgcj1BKHQucGF0aFswXSk7cmV0dXJuIG51bGw9PT1yP3MuT3BhcXVlT3JpZ2luOmUocik7Y2FzZVwiZnRwXCI6Y2FzZVwiaHR0cFwiOmNhc2VcImh0dHBzXCI6Y2FzZVwid3NcIjpjYXNlXCJ3c3NcIjpyZXR1cm5bdC5zY2hlbWUsbnVsbD09PXQuaG9zdD9cIlwiOnQuaG9zdCx0LnBvcnQsbnVsbF07Y2FzZVwiZmlsZVwiOmRlZmF1bHQ6cmV0dXJuIHMuT3BhcXVlT3JpZ2lufX0sdC5kb21haW5Ub0FTQ0lJPUgsdC5kb21haW5Ub1VuaWNvZGU9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD0hMSk7dmFyIHI9bC5kb21haW5Ub1VuaWNvZGUoZSk7cmV0dXJuXCJcIj09PXImJnYoXCJJbnZhbGlkIGRvbWFpbiBuYW1lLlwiKSxyfSx0LmFzY2lpU2VyaWFsaXphdGlvbk9mQW5PcmlnaW49ZnVuY3Rpb24oZSl7aWYoXCJcIj09PWVbMF0mJlwiXCI9PT1lWzFdJiZudWxsPT09ZVsyXSYmbnVsbD09PWVbM10pcmV0dXJuXCJudWxsXCI7dmFyIHQ9ZVswXStcIjovL1wiK0QoZVsxXSk7cmV0dXJuIG51bGwhPT1lWzJdJiYodCs9XCI6XCIrZVsyXS50b1N0cmluZygpKSx0fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMCksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLl9zaWduYWw9bi5jcmVhdGVfYWJvcnRTaWduYWwoKX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic2lnbmFsXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zaWduYWx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuYWJvcnQ9ZnVuY3Rpb24oKXtuLmFib3J0X3NpZ25hbEFib3J0KHRoaXMuX3NpZ25hbCl9LGV9KCk7dC5BYm9ydENvbnRyb2xsZXJJbXBsPWl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDcwKSxhPXIoMCkscz1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIHQ9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiB0Ll9hYm9ydGVkRmxhZz0hMSx0Ll9hYm9ydEFsZ29yaXRobXM9bmV3IFNldCx0fXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiYWJvcnRlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWJvcnRlZEZsYWd9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwib25hYm9ydFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5ldmVudF9nZXR0ZXJFdmVudEhhbmRsZXJJRExBdHRyaWJ1dGUodGhpcyxcIm9uYWJvcnRcIil9LHNldDpmdW5jdGlvbihlKXthLmV2ZW50X3NldHRlckV2ZW50SGFuZGxlcklETEF0dHJpYnV0ZSh0aGlzLFwib25hYm9ydFwiLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQuX2NyZWF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgdH0sdH0oby5FdmVudFRhcmdldEltcGwpO3QuQWJvcnRTaWduYWxJbXBsPXN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDIpLGE9cigzNCkscz1yKDEyKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyLG4pe3ZhciBpPWUuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gaS5fbmFtZT1cIlwiLGkuX3B1YmxpY0lkPVwiXCIsaS5fc3lzdGVtSWQ9XCJcIixpLl9uYW1lPXQsaS5fcHVibGljSWQ9cixpLl9zeXN0ZW1JZD1uLGl9cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJuYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9uYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInB1YmxpY0lkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wdWJsaWNJZH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJzeXN0ZW1JZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3lzdGVtSWR9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuYmVmb3JlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUuYWZ0ZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dGhyb3cgbmV3IEVycm9yKFwiTWl4aW46IENoaWxkTm9kZSBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5yZXBsYWNlV2l0aD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt0aHJvdyBuZXcgRXJyb3IoXCJNaXhpbjogQ2hpbGROb2RlIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk1peGluOiBDaGlsZE5vZGUgbm90IGltcGxlbWVudGVkLlwiKX0sdC5fY3JlYXRlPWZ1bmN0aW9uKGUscixuLGkpe3ZvaWQgMD09PW4mJihuPVwiXCIpLHZvaWQgMD09PWkmJihpPVwiXCIpO3ZhciBvPW5ldyB0KHIsbixpKTtyZXR1cm4gby5fbm9kZURvY3VtZW50PWUsb30sdH0oYS5Ob2RlSW1wbCk7dC5Eb2N1bWVudFR5cGVJbXBsPXUscy5pZGxfZGVmaW5lQ29uc3QodS5wcm90b3R5cGUsXCJfbm9kZVR5cGVcIixvLk5vZGVUeXBlLkRvY3VtZW50VHlwZSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEwMCksYT1yKDEpLHM9cigwKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2YXIgbj1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4uX2hvc3Q9dCxuLl9tb2RlPXIsbn1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm1vZGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21vZGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiaG9zdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faG9zdH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5fZ2V0VGhlUGFyZW50PWZ1bmN0aW9uKGUpe3JldHVybiBlLl9jb21wb3NlZEZsYWd8fGEuaXNFbXB0eShlLl9wYXRoKXx8cy50cmVlX3Jvb3ROb2RlKGUuX3BhdGhbMF0uaW52b2NhdGlvblRhcmdldCkhPT10aGlzP3RoaXMuX2hvc3Q6bnVsbH0sdC5fY3JlYXRlPWZ1bmN0aW9uKGUscil7cmV0dXJuIG5ldyB0KHIsXCJjbG9zZWRcIil9LHR9KG8uRG9jdW1lbnRGcmFnbWVudEltcGwpO3QuU2hhZG93Um9vdEltcGw9dX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMiksYT1yKDM0KSxzPXIoMCksdT1yKDEyKSxsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIHI9ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiByLl9uYW1lc3BhY2U9bnVsbCxyLl9uYW1lc3BhY2VQcmVmaXg9bnVsbCxyLl9lbGVtZW50PW51bGwsci5fdmFsdWU9XCJcIixyLl9sb2NhbE5hbWU9dCxyfXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwib3duZXJFbGVtZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lbGVtZW50fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5hbWVzcGFjZVVSSVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZXNwYWNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInByZWZpeFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbmFtZXNwYWNlUHJlZml4fSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImxvY2FsTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbG9jYWxOYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIm5hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3F1YWxpZmllZE5hbWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwidmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ZhbHVlfSxzZXQ6ZnVuY3Rpb24oZSl7cy5hdHRyX3NldEFuRXhpc3RpbmdBdHRyaWJ1dGVWYWx1ZSh0aGlzLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIl9xdWFsaWZpZWROYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBudWxsIT09dGhpcy5fbmFtZXNwYWNlUHJlZml4P3RoaXMuX25hbWVzcGFjZVByZWZpeCtcIjpcIit0aGlzLl9sb2NhbE5hbWU6dGhpcy5fbG9jYWxOYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIpe3ZhciBuPW5ldyB0KHIpO3JldHVybiBuLl9ub2RlRG9jdW1lbnQ9ZSxufSx0fShhLk5vZGVJbXBsKTt0LkF0dHJJbXBsPWwsdS5pZGxfZGVmaW5lQ29uc3QobC5wcm90b3R5cGUsXCJfbm9kZVR5cGVcIixvLk5vZGVUeXBlLkF0dHJpYnV0ZSksdS5pZGxfZGVmaW5lQ29uc3QobC5wcm90b3R5cGUsXCJzcGVjaWZpZWRcIiwhMCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEwMSksYT1yKDIpLHM9cigxMiksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiBlLmNhbGwodGhpcyx0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIpe3ZvaWQgMD09PXImJihyPVwiXCIpO3ZhciBuPW5ldyB0KHIpO3JldHVybiBuLl9ub2RlRG9jdW1lbnQ9ZSxufSx0fShvLlRleHRJbXBsKTt0LkNEQVRBU2VjdGlvbkltcGw9dSxzLmlkbF9kZWZpbmVDb25zdCh1LnByb3RvdHlwZSxcIl9ub2RlVHlwZVwiLGEuTm9kZVR5cGUuQ0RhdGEpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigyKSxhPXIoNzEpLHM9cigxMiksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSxlLmNhbGwodGhpcyx0KXx8dGhpc31yZXR1cm4gaSh0LGUpLHQuX2NyZWF0ZT1mdW5jdGlvbihlLHIpe3ZvaWQgMD09PXImJihyPVwiXCIpO3ZhciBuPW5ldyB0KHIpO3JldHVybiBuLl9ub2RlRG9jdW1lbnQ9ZSxufSx0fShhLkNoYXJhY3RlckRhdGFJbXBsKTt0LkNvbW1lbnRJbXBsPXUscy5pZGxfZGVmaW5lQ29uc3QodS5wcm90b3R5cGUsXCJfbm9kZVR5cGVcIixvLk5vZGVUeXBlLkNvbW1lbnQpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigyKSxhPXIoNzEpLHM9cigxMiksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscil7dmFyIG49ZS5jYWxsKHRoaXMscil8fHRoaXM7cmV0dXJuIG4uX3RhcmdldD10LG59cmV0dXJuIGkodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ0YXJnZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RhcmdldH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyLG4pe3ZhciBpPW5ldyB0KHIsbik7cmV0dXJuIGkuX25vZGVEb2N1bWVudD1lLGl9LHR9KGEuQ2hhcmFjdGVyRGF0YUltcGwpO3QuUHJvY2Vzc2luZ0luc3RydWN0aW9uSW1wbD11LHMuaWRsX2RlZmluZUNvbnN0KHUucHJvdG90eXBlLFwiX25vZGVUeXBlXCIsby5Ob2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cig3KSxpPXIoMCksbz1yKDMpLGE9cigxKSxzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3JldHVybiB0aGlzLl9saXZlPSEwLHRoaXMuX3Jvb3Q9ZSx0aGlzLl9maWx0ZXI9dCxuZXcgUHJveHkodGhpcyx0aGlzKX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwibGVuZ3RoXCIse2dldDpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLHQ9MCxyPWkudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHRoaXMuX3Jvb3QsITEsITEsKGZ1bmN0aW9uKHQpe3JldHVybiBvLkd1YXJkLmlzRWxlbWVudE5vZGUodCkmJmUuX2ZpbHRlcih0KX0pKTtudWxsIT09cjspdCsrLHI9aS50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZSh0aGlzLl9yb290LHIsITEsITEsKGZ1bmN0aW9uKHQpe3JldHVybiBvLkd1YXJkLmlzRWxlbWVudE5vZGUodCkmJmUuX2ZpbHRlcih0KX0pKTtyZXR1cm4gdH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5pdGVtPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLHI9MCxuPWkudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHRoaXMuX3Jvb3QsITEsITEsKGZ1bmN0aW9uKGUpe3JldHVybiBvLkd1YXJkLmlzRWxlbWVudE5vZGUoZSkmJnQuX2ZpbHRlcihlKX0pKTtudWxsIT09bjspe2lmKHI9PT1lKXJldHVybiBuO3IrKyxuPWkudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodGhpcy5fcm9vdCxuLCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gby5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiZ0Ll9maWx0ZXIoZSl9KSl9cmV0dXJuIG51bGx9LGUucHJvdG90eXBlLm5hbWVkSXRlbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKFwiXCI9PT1lKXJldHVybiBudWxsO2Zvcih2YXIgcj1pLnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZSh0aGlzLl9yb290LCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gby5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiZ0Ll9maWx0ZXIoZSl9KSk7bnVsbCE9cjspe2lmKHIuX3VuaXF1ZUlkZW50aWZpZXI9PT1lKXJldHVybiByO2lmKHIuX25hbWVzcGFjZT09PW4ubmFtZXNwYWNlLkhUTUwpZm9yKHZhciBhPTA7YTxyLl9hdHRyaWJ1dGVMaXN0Lmxlbmd0aDthKyspe3ZhciBzPXIuX2F0dHJpYnV0ZUxpc3RbYV07aWYoXCJuYW1lXCI9PT1zLl9sb2NhbE5hbWUmJm51bGw9PT1zLl9uYW1lc3BhY2UmJm51bGw9PT1zLl9uYW1lc3BhY2VQcmVmaXgmJnMuX3ZhbHVlPT09ZSlyZXR1cm4gcn1yPWkudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodGhpcy5fcm9vdCxyLCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gby5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiZ0Ll9maWx0ZXIoZSl9KSl9cmV0dXJuIG51bGx9LGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9yb290LHQ9dGhpcy5fZmlsdGVyLHI9aS50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUoZSwhMSwhMSwoZnVuY3Rpb24oZSl7cmV0dXJuIG8uR3VhcmQuaXNFbGVtZW50Tm9kZShlKSYmdChlKX0pKTtyZXR1cm57bmV4dDpmdW5jdGlvbigpe2lmKG51bGw9PT1yKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBuPXtkb25lOiExLHZhbHVlOnJ9O3JldHVybiByPWkudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUoZSxyLCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gby5HdWFyZC5pc0VsZW1lbnROb2RlKGUpJiZ0KGUpfSkpLG59fX0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQscixuKXtpZighYS5pc1N0cmluZyhyKXx8LTEhPT1lLnJlc2VydmVkTmFtZXMuaW5kZXhPZihyKSlyZXR1cm4gUmVmbGVjdC5nZXQodCxyLG4pO3ZhciBpPU51bWJlcihyKTtyZXR1cm4gaXNOYU4oaSk/dC5uYW1lZEl0ZW0ocil8fHZvaWQgMDp0Lml0ZW0oaSl8fHZvaWQgMH0sZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQscixuLG8pe2lmKCFhLmlzU3RyaW5nKHIpfHwtMSE9PWUucmVzZXJ2ZWROYW1lcy5pbmRleE9mKHIpKXJldHVybiBSZWZsZWN0LnNldCh0LHIsbixvKTt2YXIgcz1OdW1iZXIociksdT1pc05hTihzKT90Lm5hbWVkSXRlbShyKXx8dm9pZCAwOnQuaXRlbShzKXx8dm9pZCAwO3JldHVybiEoIXV8fCF1Ll9wYXJlbnQpJiYoaS5tdXRhdGlvbl9yZXBsYWNlKHUsbix1Ll9wYXJlbnQpLCEwKX0sZS5fY3JlYXRlPWZ1bmN0aW9uKHQscil7cmV0dXJuIHZvaWQgMD09PXImJihyPWZ1bmN0aW9uKCl7cmV0dXJuITB9KSxuZXcgZSh0LHIpfSxlLnJlc2VydmVkTmFtZXM9W1wiX3Jvb3RcIixcIl9saXZlXCIsXCJfZmlsdGVyXCIsXCJsZW5ndGhcIixcIml0ZW1cIixcIm5hbWVkSXRlbVwiLFwiZ2V0XCIsXCJzZXRcIl0sZX0oKTt0LkhUTUxDb2xsZWN0aW9uSW1wbD1zfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cig2KSxvPXIoMSksYT1yKDApLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVybiB0aGlzLl9saXZlPSEwLHRoaXMuX2ZpbHRlcj1udWxsLHRoaXMuX2xlbmd0aD0wLHRoaXMuX3Jvb3Q9ZSxuZXcgUHJveHkodGhpcyx0aGlzKX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwibGVuZ3RoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yb290Ll9jaGlsZHJlbi5zaXplfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLml0ZW09ZnVuY3Rpb24oZSl7aWYoZTwwfHxlPnRoaXMubGVuZ3RoLTEpcmV0dXJuIG51bGw7aWYoZTx0aGlzLmxlbmd0aC8yKXtmb3IodmFyIHQ9MCxyPXRoaXMuX3Jvb3QuX2ZpcnN0Q2hpbGQ7bnVsbCE9PXImJnQhPT1lOylyPXIuX25leHRTaWJsaW5nLHQrKztyZXR1cm4gcn1mb3IodD10aGlzLmxlbmd0aC0xLHI9dGhpcy5fcm9vdC5fbGFzdENoaWxkO251bGwhPT1yJiZ0IT09ZTspcj1yLl9wcmV2aW91c1NpYmxpbmcsdC0tO3JldHVybiByfSxlLnByb3RvdHlwZS5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuKGU9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgZT0wO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGU9PT10aGlzLmxlbmd0aD97ZG9uZTohMCx2YWx1ZTpudWxsfTp7ZG9uZTohMSx2YWx1ZTplKyt9fS5iaW5kKHRoaXMpfX0uYmluZCh0aGlzKSxlfSxlLnByb3RvdHlwZS52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4oZT17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3ZhciBlPXRoaXNbU3ltYm9sLml0ZXJhdG9yXSgpO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUubmV4dCgpfX19LmJpbmQodGhpcyksZX0sZS5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3ZhciBlO3JldHVybihlPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIGU9dGhpc1tTeW1ib2wuaXRlcmF0b3JdKCksdD0wO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7dmFyIHI9ZS5uZXh0KCk7cmV0dXJuIHIuZG9uZT97ZG9uZTohMCx2YWx1ZTpudWxsfTp7ZG9uZTohMSx2YWx1ZTpbdCsrLHIudmFsdWVdfX19fS5iaW5kKHRoaXMpLGV9LGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcm9vdC5fY2hpbGRyZW5bU3ltYm9sLml0ZXJhdG9yXSgpfSxlLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbzt2b2lkIDA9PT10JiYodD1pLmRvbS53aW5kb3cpO3ZhciBhPTA7dHJ5e2Zvcih2YXIgcz1uKHRoaXMuX3Jvb3QuX2NoaWxkcmVuKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dmFyIGw9dS52YWx1ZTtlLmNhbGwodCxsLGErKyx0aGlzKX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dSYmIXUuZG9uZSYmKG89cy5yZXR1cm4pJiZvLmNhbGwocyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fX0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUsdCxyKXtpZighby5pc1N0cmluZyh0KSlyZXR1cm4gUmVmbGVjdC5nZXQoZSx0LHIpO3ZhciBuPU51bWJlcih0KTtyZXR1cm4gaXNOYU4obik/UmVmbGVjdC5nZXQoZSx0LHIpOmUuaXRlbShuKXx8dm9pZCAwfSxlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0LHIsbil7aWYoIW8uaXNTdHJpbmcodCkpcmV0dXJuIFJlZmxlY3Quc2V0KGUsdCxyLG4pO3ZhciBpPU51bWJlcih0KTtpZihpc05hTihpKSlyZXR1cm4gUmVmbGVjdC5zZXQoZSx0LHIsbik7dmFyIHM9ZS5pdGVtKGkpfHx2b2lkIDA7cmV0dXJuISFzJiYoISFzLl9wYXJlbnQmJihhLm11dGF0aW9uX3JlcGxhY2UocyxyLHMuX3BhcmVudCksITApKX0sZS5fY3JlYXRlPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZSh0KX0sZX0oKTt0Lk5vZGVMaXN0SW1wbD1zfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cig2KSxvPXIoMSksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7cmV0dXJuIHRoaXMuX2xpdmU9ITEsdGhpcy5faXRlbXM9W10sdGhpcy5fbGVuZ3RoPTAsdGhpcy5fcm9vdD1lLHRoaXMuX2l0ZW1zPVtdLHRoaXMuX2ZpbHRlcj1mdW5jdGlvbihlKXtyZXR1cm4hMH0sbmV3IFByb3h5KHRoaXMsdGhpcyl9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImxlbmd0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXRlbXMubGVuZ3RofSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLml0ZW09ZnVuY3Rpb24oZSl7cmV0dXJuIGU8MHx8ZT50aGlzLmxlbmd0aC0xP251bGw6dGhpcy5faXRlbXNbZV19LGUucHJvdG90eXBlLmtleXM9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4oZT17fSlbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3ZhciBlPTA7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZT09PXRoaXMubGVuZ3RoP3tkb25lOiEwLHZhbHVlOm51bGx9Ontkb25lOiExLHZhbHVlOmUrK319LmJpbmQodGhpcyl9fS5iaW5kKHRoaXMpLGV9LGUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3ZhciBlO3JldHVybihlPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7dmFyIGU9dGhpc1tTeW1ib2wuaXRlcmF0b3JdKCk7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5uZXh0KCl9fX0uYmluZCh0aGlzKSxlfSxlLnByb3RvdHlwZS5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuKGU9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgZT10aGlzW1N5bWJvbC5pdGVyYXRvcl0oKSx0PTA7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXt2YXIgcj1lLm5leHQoKTtyZXR1cm4gci5kb25lP3tkb25lOiEwLHZhbHVlOm51bGx9Ontkb25lOiExLHZhbHVlOlt0Kyssci52YWx1ZV19fX19LmJpbmQodGhpcyksZX0sZS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2l0ZW1zW1N5bWJvbC5pdGVyYXRvcl0oKTtyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlLm5leHQoKX19fSxlLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbzt2b2lkIDA9PT10JiYodD1pLmRvbS53aW5kb3cpO3ZhciBhPTA7dHJ5e2Zvcih2YXIgcz1uKHRoaXMuX2l0ZW1zKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dmFyIGw9dS52YWx1ZTtlLmNhbGwodCxsLGErKyx0aGlzKX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dSYmIXUuZG9uZSYmKG89cy5yZXR1cm4pJiZvLmNhbGwocyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fX0sZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUsdCxyKXtpZighby5pc1N0cmluZyh0KSlyZXR1cm4gUmVmbGVjdC5nZXQoZSx0LHIpO3ZhciBuPU51bWJlcih0KTtyZXR1cm4gaXNOYU4obik/UmVmbGVjdC5nZXQoZSx0LHIpOmUuX2l0ZW1zW25dfHx2b2lkIDB9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQscixuKXtpZighby5pc1N0cmluZyh0KSlyZXR1cm4gUmVmbGVjdC5zZXQoZSx0LHIsbik7dmFyIGk9TnVtYmVyKHQpO3JldHVybiBpc05hTihpKT9SZWZsZWN0LnNldChlLHQscixuKTppPj0wJiZpPGUuX2l0ZW1zLmxlbmd0aCYmKGUuX2l0ZW1zW2ldPXIsITApfSxlLl9jcmVhdGU9ZnVuY3Rpb24odCxyKXt2YXIgbj1uZXcgZSh0KTtyZXR1cm4gbi5faXRlbXM9cixufSxlfSgpO3QuTm9kZUxpc3RTdGF0aWNJbXBsPWF9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDkpLGE9cigwKSxzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQocil7dmFyIG49ZS5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLl9lbGVtZW50PXIsT2JqZWN0LnNldFByb3RvdHlwZU9mKG4sdC5wcm90b3R5cGUpLG59cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5fYXNBcnJheT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSx0LnByb3RvdHlwZS5pdGVtPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzW2VdfHxudWxsfSx0LnByb3RvdHlwZS5nZXROYW1lZEl0ZW09ZnVuY3Rpb24oZSl7cmV0dXJuIGEuZWxlbWVudF9nZXRBbkF0dHJpYnV0ZUJ5TmFtZShlLHRoaXMuX2VsZW1lbnQpfSx0LnByb3RvdHlwZS5nZXROYW1lZEl0ZW1OUz1mdW5jdGlvbihlLHQpe3JldHVybiBhLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVCeU5hbWVzcGFjZUFuZExvY2FsTmFtZShlfHxcIlwiLHQsdGhpcy5fZWxlbWVudCl9LHQucHJvdG90eXBlLnNldE5hbWVkSXRlbT1mdW5jdGlvbihlKXtyZXR1cm4gYS5lbGVtZW50X3NldEFuQXR0cmlidXRlKGUsdGhpcy5fZWxlbWVudCl9LHQucHJvdG90eXBlLnNldE5hbWVkSXRlbU5TPWZ1bmN0aW9uKGUpe3JldHVybiBhLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGUoZSx0aGlzLl9lbGVtZW50KX0sdC5wcm90b3R5cGUucmVtb3ZlTmFtZWRJdGVtPWZ1bmN0aW9uKGUpe3ZhciB0PWEuZWxlbWVudF9yZW1vdmVBbkF0dHJpYnV0ZUJ5TmFtZShlLHRoaXMuX2VsZW1lbnQpO2lmKG51bGw9PT10KXRocm93IG5ldyBvLk5vdEZvdW5kRXJyb3I7cmV0dXJuIHR9LHQucHJvdG90eXBlLnJlbW92ZU5hbWVkSXRlbU5TPWZ1bmN0aW9uKGUsdCl7dmFyIHI9YS5lbGVtZW50X3JlbW92ZUFuQXR0cmlidXRlQnlOYW1lc3BhY2VBbmRMb2NhbE5hbWUoZXx8XCJcIix0LHRoaXMuX2VsZW1lbnQpO2lmKG51bGw9PT1yKXRocm93IG5ldyBvLk5vdEZvdW5kRXJyb3I7cmV0dXJuIHJ9LHQuX2NyZWF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHQoZSl9LHR9KEFycmF5KTt0Lk5hbWVkTm9kZU1hcEltcGw9c30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pLG89dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9cig2KSxzPXIoMiksdT1yKDEwMiksbD1yKDkpLGM9cigwKSxoPXIoMTIpLHA9cigzKSxmPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt2YXIgdD1lLmNhbGwodGhpcyl8fHRoaXMscj1hLmRvbS53aW5kb3cuX2Fzc29jaWF0ZWREb2N1bWVudDtyZXR1cm4gdC5fc3RhcnQ9W3IsMF0sdC5fZW5kPVtyLDBdLGEuZG9tLnJhbmdlTGlzdC5hZGQodCksdH1yZXR1cm4gaSh0LGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyXCIse2dldDpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLl9zdGFydFswXTshYy50cmVlX2lzQW5jZXN0b3JPZih0aGlzLl9lbmRbMF0sZSwhMCk7KXtpZihudWxsPT09ZS5fcGFyZW50KXRocm93IG5ldyBFcnJvcihcIlBhcmVudCBub2RlICBpcyBudWxsLlwiKTtlPWUuX3BhcmVudH1yZXR1cm4gZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5zZXRTdGFydD1mdW5jdGlvbihlLHQpe2MucmFuZ2Vfc2V0VGhlU3RhcnQodGhpcyxlLHQpfSx0LnByb3RvdHlwZS5zZXRFbmQ9ZnVuY3Rpb24oZSx0KXtjLnJhbmdlX3NldFRoZUVuZCh0aGlzLGUsdCl9LHQucHJvdG90eXBlLnNldFN0YXJ0QmVmb3JlPWZ1bmN0aW9uKGUpe3ZhciB0PWUuX3BhcmVudDtpZihudWxsPT09dCl0aHJvdyBuZXcgbC5JbnZhbGlkTm9kZVR5cGVFcnJvcjtjLnJhbmdlX3NldFRoZVN0YXJ0KHRoaXMsdCxjLnRyZWVfaW5kZXgoZSkpfSx0LnByb3RvdHlwZS5zZXRTdGFydEFmdGVyPWZ1bmN0aW9uKGUpe3ZhciB0PWUuX3BhcmVudDtpZihudWxsPT09dCl0aHJvdyBuZXcgbC5JbnZhbGlkTm9kZVR5cGVFcnJvcjtjLnJhbmdlX3NldFRoZVN0YXJ0KHRoaXMsdCxjLnRyZWVfaW5kZXgoZSkrMSl9LHQucHJvdG90eXBlLnNldEVuZEJlZm9yZT1mdW5jdGlvbihlKXt2YXIgdD1lLl9wYXJlbnQ7aWYobnVsbD09PXQpdGhyb3cgbmV3IGwuSW52YWxpZE5vZGVUeXBlRXJyb3I7Yy5yYW5nZV9zZXRUaGVFbmQodGhpcyx0LGMudHJlZV9pbmRleChlKSl9LHQucHJvdG90eXBlLnNldEVuZEFmdGVyPWZ1bmN0aW9uKGUpe3ZhciB0PWUuX3BhcmVudDtpZihudWxsPT09dCl0aHJvdyBuZXcgbC5JbnZhbGlkTm9kZVR5cGVFcnJvcjtjLnJhbmdlX3NldFRoZUVuZCh0aGlzLHQsYy50cmVlX2luZGV4KGUpKzEpfSx0LnByb3RvdHlwZS5jb2xsYXBzZT1mdW5jdGlvbihlKXtlP3RoaXMuX2VuZD10aGlzLl9zdGFydDp0aGlzLl9zdGFydD10aGlzLl9lbmR9LHQucHJvdG90eXBlLnNlbGVjdE5vZGU9ZnVuY3Rpb24oZSl7Yy5yYW5nZV9zZWxlY3QoZSx0aGlzKX0sdC5wcm90b3R5cGUuc2VsZWN0Tm9kZUNvbnRlbnRzPWZ1bmN0aW9uKGUpe2lmKHAuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKGUpKXRocm93IG5ldyBsLkludmFsaWROb2RlVHlwZUVycm9yO3ZhciB0PWMudHJlZV9ub2RlTGVuZ3RoKGUpO3RoaXMuX3N0YXJ0PVtlLDBdLHRoaXMuX2VuZD1bZSx0XX0sdC5wcm90b3R5cGUuY29tcGFyZUJvdW5kYXJ5UG9pbnRzPWZ1bmN0aW9uKGUsdCl7aWYoZSE9PXMuSG93VG9Db21wYXJlLlN0YXJ0VG9TdGFydCYmZSE9PXMuSG93VG9Db21wYXJlLlN0YXJ0VG9FbmQmJmUhPT1zLkhvd1RvQ29tcGFyZS5FbmRUb0VuZCYmZSE9PXMuSG93VG9Db21wYXJlLkVuZFRvU3RhcnQpdGhyb3cgbmV3IGwuTm90U3VwcG9ydGVkRXJyb3I7aWYoYy5yYW5nZV9yb290KHRoaXMpIT09Yy5yYW5nZV9yb290KHQpKXRocm93IG5ldyBsLldyb25nRG9jdW1lbnRFcnJvcjt2YXIgcixuO3N3aXRjaChlKXtjYXNlIHMuSG93VG9Db21wYXJlLlN0YXJ0VG9TdGFydDpyPXRoaXMuX3N0YXJ0LG49dC5fc3RhcnQ7YnJlYWs7Y2FzZSBzLkhvd1RvQ29tcGFyZS5TdGFydFRvRW5kOnI9dGhpcy5fZW5kLG49dC5fc3RhcnQ7YnJlYWs7Y2FzZSBzLkhvd1RvQ29tcGFyZS5FbmRUb0VuZDpyPXRoaXMuX2VuZCxuPXQuX2VuZDticmVhaztjYXNlIHMuSG93VG9Db21wYXJlLkVuZFRvU3RhcnQ6cj10aGlzLl9zdGFydCxuPXQuX2VuZDticmVhaztkZWZhdWx0OnRocm93IG5ldyBsLk5vdFN1cHBvcnRlZEVycm9yfXZhciBpPWMuYm91bmRhcnlQb2ludF9wb3NpdGlvbihyLG4pO3JldHVybiBpPT09cy5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZT8tMTppPT09cy5Cb3VuZGFyeVBvc2l0aW9uLkFmdGVyPzE6MH0sdC5wcm90b3R5cGUuZGVsZXRlQ29udGVudHM9ZnVuY3Rpb24oKXt2YXIgZSx0LHIsbjtpZighYy5yYW5nZV9jb2xsYXBzZWQodGhpcykpe3ZhciBpPXRoaXMuX3N0YXJ0Tm9kZSxhPXRoaXMuX3N0YXJ0T2Zmc2V0LHM9dGhpcy5fZW5kTm9kZSx1PXRoaXMuX2VuZE9mZnNldDtpZihpPT09cyYmcC5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKGkpKWMuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YShpLGEsdS1hLFwiXCIpO2Vsc2V7dmFyIGwsaCxmPVtdO3RyeXtmb3IodmFyIGQ9byhjLnJhbmdlX2dldENvbnRhaW5lZE5vZGVzKHRoaXMpKSxtPWQubmV4dCgpOyFtLmRvbmU7bT1kLm5leHQoKSl7dmFyIHk9KGI9bS52YWx1ZSkuX3BhcmVudDtudWxsIT09eSYmYy5yYW5nZV9pc0NvbnRhaW5lZCh5LHRoaXMpfHxmLnB1c2goYil9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e20mJiFtLmRvbmUmJih0PWQucmV0dXJuKSYmdC5jYWxsKGQpfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1pZihjLnRyZWVfaXNBbmNlc3Rvck9mKHMsaSwhMCkpbD1pLGg9YTtlbHNle2Zvcih2YXIgdj1pO251bGwhPT12Ll9wYXJlbnQmJiFjLnRyZWVfaXNBbmNlc3Rvck9mKHMsdi5fcGFyZW50LCEwKTspdj12Ll9wYXJlbnQ7aWYobnVsbD09PXYuX3BhcmVudCl0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnQgbm9kZSBpcyBudWxsLlwiKTtsPXYuX3BhcmVudCxoPWMudHJlZV9pbmRleCh2KSsxfXAuR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZShpKSYmYy5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKGksYSxjLnRyZWVfbm9kZUxlbmd0aChpKS1hLFwiXCIpO3RyeXtmb3IodmFyIF89byhmKSxnPV8ubmV4dCgpOyFnLmRvbmU7Zz1fLm5leHQoKSl7dmFyIGI7KGI9Zy52YWx1ZSkuX3BhcmVudCYmYy5tdXRhdGlvbl9yZW1vdmUoYixiLl9wYXJlbnQpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtnJiYhZy5kb25lJiYobj1fLnJldHVybikmJm4uY2FsbChfKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cC5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKHMpJiZjLmNoYXJhY3RlckRhdGFfcmVwbGFjZURhdGEocywwLHUsXCJcIiksdGhpcy5fc3RhcnQ9W2wsaF0sdGhpcy5fZW5kPVtsLGhdfX19LHQucHJvdG90eXBlLmV4dHJhY3RDb250ZW50cz1mdW5jdGlvbigpe3JldHVybiBjLnJhbmdlX2V4dHJhY3QodGhpcyl9LHQucHJvdG90eXBlLmNsb25lQ29udGVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gYy5yYW5nZV9jbG9uZVRoZUNvbnRlbnRzKHRoaXMpfSx0LnByb3RvdHlwZS5pbnNlcnROb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBjLnJhbmdlX2luc2VydChlLHRoaXMpfSx0LnByb3RvdHlwZS5zdXJyb3VuZENvbnRlbnRzPWZ1bmN0aW9uKGUpe3ZhciB0LHI7dHJ5e2Zvcih2YXIgbj1vKGMucmFuZ2VfZ2V0UGFydGlhbGx5Q29udGFpbmVkTm9kZXModGhpcykpLGk9bi5uZXh0KCk7IWkuZG9uZTtpPW4ubmV4dCgpKXt2YXIgYT1pLnZhbHVlO2lmKCFwLkd1YXJkLmlzVGV4dE5vZGUoYSkpdGhyb3cgbmV3IGwuSW52YWxpZFN0YXRlRXJyb3J9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2kmJiFpLmRvbmUmJihyPW4ucmV0dXJuKSYmci5jYWxsKG4pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1pZihwLkd1YXJkLmlzRG9jdW1lbnROb2RlKGUpfHxwLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZShlKXx8cC5HdWFyZC5pc0RvY3VtZW50RnJhZ21lbnROb2RlKGUpKXRocm93IG5ldyBsLkludmFsaWROb2RlVHlwZUVycm9yO3ZhciBzPWMucmFuZ2VfZXh0cmFjdCh0aGlzKTswIT09ZS5fY2hpbGRyZW4uc2l6ZSYmYy5tdXRhdGlvbl9yZXBsYWNlQWxsKG51bGwsZSksYy5yYW5nZV9pbnNlcnQoZSx0aGlzKSxjLm11dGF0aW9uX2FwcGVuZChzLGUpLGMucmFuZ2Vfc2VsZWN0KGUsdGhpcyl9LHQucHJvdG90eXBlLmNsb25lUmFuZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gYy5jcmVhdGVfcmFuZ2UodGhpcy5fc3RhcnQsdGhpcy5fZW5kKX0sdC5wcm90b3R5cGUuZGV0YWNoPWZ1bmN0aW9uKCl7YS5kb20ucmFuZ2VMaXN0LmRlbGV0ZSh0aGlzKX0sdC5wcm90b3R5cGUuaXNQb2ludEluUmFuZ2U9ZnVuY3Rpb24oZSx0KXtpZihjLnRyZWVfcm9vdE5vZGUoZSkhPT1jLnJhbmdlX3Jvb3QodGhpcykpcmV0dXJuITE7aWYocC5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUoZSkpdGhyb3cgbmV3IGwuSW52YWxpZE5vZGVUeXBlRXJyb3I7aWYodD5jLnRyZWVfbm9kZUxlbmd0aChlKSl0aHJvdyBuZXcgbC5JbmRleFNpemVFcnJvcjt2YXIgcj1bZSx0XTtyZXR1cm4gYy5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKHIsdGhpcy5fc3RhcnQpIT09cy5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZSYmYy5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKHIsdGhpcy5fZW5kKSE9PXMuQm91bmRhcnlQb3NpdGlvbi5BZnRlcn0sdC5wcm90b3R5cGUuY29tcGFyZVBvaW50PWZ1bmN0aW9uKGUsdCl7aWYoYy50cmVlX3Jvb3ROb2RlKGUpIT09Yy5yYW5nZV9yb290KHRoaXMpKXRocm93IG5ldyBsLldyb25nRG9jdW1lbnRFcnJvcjtpZihwLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZShlKSl0aHJvdyBuZXcgbC5JbnZhbGlkTm9kZVR5cGVFcnJvcjtpZih0PmMudHJlZV9ub2RlTGVuZ3RoKGUpKXRocm93IG5ldyBsLkluZGV4U2l6ZUVycm9yO3ZhciByPVtlLHRdO3JldHVybiBjLmJvdW5kYXJ5UG9pbnRfcG9zaXRpb24ocix0aGlzLl9zdGFydCk9PT1zLkJvdW5kYXJ5UG9zaXRpb24uQmVmb3JlPy0xOmMuYm91bmRhcnlQb2ludF9wb3NpdGlvbihyLHRoaXMuX2VuZCk9PT1zLkJvdW5kYXJ5UG9zaXRpb24uQWZ0ZXI/MTowfSx0LnByb3RvdHlwZS5pbnRlcnNlY3RzTm9kZT1mdW5jdGlvbihlKXtpZihjLnRyZWVfcm9vdE5vZGUoZSkhPT1jLnJhbmdlX3Jvb3QodGhpcykpcmV0dXJuITE7dmFyIHQ9ZS5fcGFyZW50O2lmKG51bGw9PT10KXJldHVybiEwO3ZhciByPWMudHJlZV9pbmRleChlKTtyZXR1cm4gYy5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKFt0LHJdLHRoaXMuX2VuZCk9PT1zLkJvdW5kYXJ5UG9zaXRpb24uQmVmb3JlJiZjLmJvdW5kYXJ5UG9pbnRfcG9zaXRpb24oW3QscisxXSx0aGlzLl9zdGFydCk9PT1zLkJvdW5kYXJ5UG9zaXRpb24uQWZ0ZXJ9LHQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGUsdCxyPVwiXCI7aWYodGhpcy5fc3RhcnROb2RlPT09dGhpcy5fZW5kTm9kZSYmcC5HdWFyZC5pc1RleHROb2RlKHRoaXMuX3N0YXJ0Tm9kZSkpcmV0dXJuIHRoaXMuX3N0YXJ0Tm9kZS5fZGF0YS5zdWJzdHJpbmcodGhpcy5fc3RhcnRPZmZzZXQsdGhpcy5fZW5kT2Zmc2V0KTtwLkd1YXJkLmlzVGV4dE5vZGUodGhpcy5fc3RhcnROb2RlKSYmKHIrPXRoaXMuX3N0YXJ0Tm9kZS5fZGF0YS5zdWJzdHJpbmcodGhpcy5fc3RhcnRPZmZzZXQpKTt0cnl7Zm9yKHZhciBuPW8oYy5yYW5nZV9nZXRDb250YWluZWROb2Rlcyh0aGlzKSksaT1uLm5leHQoKTshaS5kb25lO2k9bi5uZXh0KCkpe3ZhciBhPWkudmFsdWU7cC5HdWFyZC5pc1RleHROb2RlKGEpJiYocis9YS5fZGF0YSl9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e2kmJiFpLmRvbmUmJih0PW4ucmV0dXJuKSYmdC5jYWxsKG4pfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1yZXR1cm4gcC5HdWFyZC5pc1RleHROb2RlKHRoaXMuX2VuZE5vZGUpJiYocis9dGhpcy5fZW5kTm9kZS5fZGF0YS5zdWJzdHJpbmcoMCx0aGlzLl9lbmRPZmZzZXQpKSxyfSx0Ll9jcmVhdGU9ZnVuY3Rpb24oZSxyKXt2YXIgbj1uZXcgdDtyZXR1cm4gZSYmKG4uX3N0YXJ0PWUpLHImJihuLl9lbmQ9ciksbn0sdC5TVEFSVF9UT19TVEFSVD0wLHQuU1RBUlRfVE9fRU5EPTEsdC5FTkRfVE9fRU5EPTIsdC5FTkRfVE9fU1RBUlQ9Myx0fSh1LkFic3RyYWN0UmFuZ2VJbXBsKTt0LlJhbmdlSW1wbD1mLGguaWRsX2RlZmluZUNvbnN0KGYucHJvdG90eXBlLFwiU1RBUlRfVE9fU1RBUlRcIiwwKSxoLmlkbF9kZWZpbmVDb25zdChmLnByb3RvdHlwZSxcIlNUQVJUX1RPX0VORFwiLDEpLGguaWRsX2RlZmluZUNvbnN0KGYucHJvdG90eXBlLFwiRU5EX1RPX0VORFwiLDIpLGguaWRsX2RlZmluZUNvbnN0KGYucHJvdG90eXBlLFwiRU5EX1RPX1NUQVJUXCIsMyl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEwMyksYT1yKDApLHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIsbil7dmFyIGk9ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIGkuX2l0ZXJhdG9yQ29sbGVjdGlvbj12b2lkIDAsaS5fcmVmZXJlbmNlPXIsaS5fcG9pbnRlckJlZm9yZVJlZmVyZW5jZT1uLGEubm9kZUl0ZXJhdG9yX2l0ZXJhdG9yTGlzdCgpLmFkZChpKSxpfXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicmVmZXJlbmNlTm9kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVmZXJlbmNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcInBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wb2ludGVyQmVmb3JlUmVmZXJlbmNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLm5leHROb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGEubm9kZUl0ZXJhdG9yX3RyYXZlcnNlKHRoaXMsITApfSx0LnByb3RvdHlwZS5wcmV2aW91c05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5ub2RlSXRlcmF0b3JfdHJhdmVyc2UodGhpcywhMSl9LHQucHJvdG90eXBlLmRldGFjaD1mdW5jdGlvbigpe2Eubm9kZUl0ZXJhdG9yX2l0ZXJhdG9yTGlzdCgpLmRlbGV0ZSh0aGlzKX0sdC5fY3JlYXRlPWZ1bmN0aW9uKGUscixuKXtyZXR1cm4gbmV3IHQoZSxyLG4pfSx0fShvLlRyYXZlcnNlckltcGwpO3QuTm9kZUl0ZXJhdG9ySW1wbD1zfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigyKSxhPXIoMTAzKSxzPXIoMCksdT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscil7dmFyIG49ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIG4uX2N1cnJlbnQ9cixufXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiY3VycmVudE5vZGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2N1cnJlbnR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9jdXJyZW50PWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUucGFyZW50Tm9kZT1mdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLl9jdXJyZW50O251bGwhPT1lJiZlIT09dGhpcy5fcm9vdDspaWYobnVsbCE9PShlPWUuX3BhcmVudCkmJnMudHJhdmVyc2FsX2ZpbHRlcih0aGlzLGUpPT09by5GaWx0ZXJSZXN1bHQuQWNjZXB0KXJldHVybiB0aGlzLl9jdXJyZW50PWUsZTtyZXR1cm4gbnVsbH0sdC5wcm90b3R5cGUuZmlyc3RDaGlsZD1mdW5jdGlvbigpe3JldHVybiBzLnRyZWVXYWxrZXJfdHJhdmVyc2VDaGlsZHJlbih0aGlzLCEwKX0sdC5wcm90b3R5cGUubGFzdENoaWxkPWZ1bmN0aW9uKCl7cmV0dXJuIHMudHJlZVdhbGtlcl90cmF2ZXJzZUNoaWxkcmVuKHRoaXMsITEpfSx0LnByb3RvdHlwZS5uZXh0U2libGluZz1mdW5jdGlvbigpe3JldHVybiBzLnRyZWVXYWxrZXJfdHJhdmVyc2VTaWJsaW5ncyh0aGlzLCEwKX0sdC5wcm90b3R5cGUucHJldmlvdXNOb2RlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuX2N1cnJlbnQ7ZSE9PXRoaXMuX3Jvb3Q7KXtmb3IodmFyIHQ9ZS5fcHJldmlvdXNTaWJsaW5nO3Q7KXtlPXQ7Zm9yKHZhciByPXMudHJhdmVyc2FsX2ZpbHRlcih0aGlzLGUpO3IhPT1vLkZpbHRlclJlc3VsdC5SZWplY3QmJmUuX2xhc3RDaGlsZDspZT1lLl9sYXN0Q2hpbGQscj1zLnRyYXZlcnNhbF9maWx0ZXIodGhpcyxlKTtpZihyPT09by5GaWx0ZXJSZXN1bHQuQWNjZXB0KXJldHVybiB0aGlzLl9jdXJyZW50PWUsZTt0PWUuX3ByZXZpb3VzU2libGluZ31pZihlPT09dGhpcy5fcm9vdHx8bnVsbD09PWUuX3BhcmVudClyZXR1cm4gbnVsbDtpZihlPWUuX3BhcmVudCxzLnRyYXZlcnNhbF9maWx0ZXIodGhpcyxlKT09PW8uRmlsdGVyUmVzdWx0LkFjY2VwdClyZXR1cm4gdGhpcy5fY3VycmVudD1lLGV9cmV0dXJuIG51bGx9LHQucHJvdG90eXBlLnByZXZpb3VzU2libGluZz1mdW5jdGlvbigpe3JldHVybiBzLnRyZWVXYWxrZXJfdHJhdmVyc2VTaWJsaW5ncyh0aGlzLCExKX0sdC5wcm90b3R5cGUubmV4dE5vZGU9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5fY3VycmVudCx0PW8uRmlsdGVyUmVzdWx0LkFjY2VwdDs7KXtmb3IoO3QhPT1vLkZpbHRlclJlc3VsdC5SZWplY3QmJmUuX2ZpcnN0Q2hpbGQ7KWlmKGU9ZS5fZmlyc3RDaGlsZCwodD1zLnRyYXZlcnNhbF9maWx0ZXIodGhpcyxlKSk9PT1vLkZpbHRlclJlc3VsdC5BY2NlcHQpcmV0dXJuIHRoaXMuX2N1cnJlbnQ9ZSxlO2Zvcih2YXIgcj1udWxsLG49ZTtudWxsIT09bjspe2lmKG49PT10aGlzLl9yb290KXJldHVybiBudWxsO2lmKG51bGwhPT0ocj1uLl9uZXh0U2libGluZykpe2U9cjticmVha31uPW4uX3BhcmVudH1pZigodD1zLnRyYXZlcnNhbF9maWx0ZXIodGhpcyxlKSk9PT1vLkZpbHRlclJlc3VsdC5BY2NlcHQpcmV0dXJuIHRoaXMuX2N1cnJlbnQ9ZSxlfX0sdC5fY3JlYXRlPWZ1bmN0aW9uKGUscil7cmV0dXJuIG5ldyB0KGUscil9LHR9KGEuVHJhdmVyc2VySW1wbCk7dC5UcmVlV2Fsa2VySW1wbD11fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyKSxpPXIoMTIpLG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZS5hY2NlcHROb2RlPWZ1bmN0aW9uKGUpe3JldHVybiBuLkZpbHRlclJlc3VsdC5BY2NlcHR9LGUuX2NyZWF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgZX0sZS5GSUxURVJfQUNDRVBUPTEsZS5GSUxURVJfUkVKRUNUPTIsZS5GSUxURVJfU0tJUD0zLGUuU0hPV19BTEw9NDI5NDk2NzI5NSxlLlNIT1dfRUxFTUVOVD0xLGUuU0hPV19BVFRSSUJVVEU9MixlLlNIT1dfVEVYVD00LGUuU0hPV19DREFUQV9TRUNUSU9OPTgsZS5TSE9XX0VOVElUWV9SRUZFUkVOQ0U9MTYsZS5TSE9XX0VOVElUWT0zMixlLlNIT1dfUFJPQ0VTU0lOR19JTlNUUlVDVElPTj02NCxlLlNIT1dfQ09NTUVOVD0xMjgsZS5TSE9XX0RPQ1VNRU5UPTI1NixlLlNIT1dfRE9DVU1FTlRfVFlQRT01MTIsZS5TSE9XX0RPQ1VNRU5UX0ZSQUdNRU5UPTEwMjQsZS5TSE9XX05PVEFUSU9OPTIwNDgsZX0oKTt0Lk5vZGVGaWx0ZXJJbXBsPW8saS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJGSUxURVJfQUNDRVBUXCIsMSksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJGSUxURVJfUkVKRUNUXCIsMiksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJGSUxURVJfU0tJUFwiLDMpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19BTExcIiw0Mjk0OTY3Mjk1KSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfRUxFTUVOVFwiLDEpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19BVFRSSUJVVEVcIiwyKSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfVEVYVFwiLDQpLGkuaWRsX2RlZmluZUNvbnN0KG8ucHJvdG90eXBlLFwiU0hPV19DREFUQV9TRUNUSU9OXCIsOCksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX0VOVElUWV9SRUZFUkVOQ0VcIiwxNiksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX0VOVElUWVwiLDMyKSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfUFJPQ0VTU0lOR19JTlNUUlVDVElPTlwiLDY0KSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfQ09NTUVOVFwiLDEyOCksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX0RPQ1VNRU5UXCIsMjU2KSxpLmlkbF9kZWZpbmVDb25zdChvLnByb3RvdHlwZSxcIlNIT1dfRE9DVU1FTlRfVFlQRVwiLDUxMiksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX0RPQ1VNRU5UX0ZSQUdNRU5UXCIsMTAyNCksaS5pZGxfZGVmaW5lQ29uc3Qoby5wcm90b3R5cGUsXCJTSE9XX05PVEFUSU9OXCIsMjA0OCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LHIsbixpLG8sYSxzLHUpe3RoaXMuX3R5cGU9ZSx0aGlzLl90YXJnZXQ9dCx0aGlzLl9hZGRlZE5vZGVzPXIsdGhpcy5fcmVtb3ZlZE5vZGVzPW4sdGhpcy5fcHJldmlvdXNTaWJsaW5nPWksdGhpcy5fbmV4dFNpYmxpbmc9byx0aGlzLl9hdHRyaWJ1dGVOYW1lPWEsdGhpcy5fYXR0cmlidXRlTmFtZXNwYWNlPXMsdGhpcy5fb2xkVmFsdWU9dX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidHlwZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdHlwZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ0YXJnZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RhcmdldH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhZGRlZE5vZGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hZGRlZE5vZGVzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInJlbW92ZWROb2Rlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVtb3ZlZE5vZGVzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInByZXZpb3VzU2libGluZ1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJldmlvdXNTaWJsaW5nfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIm5leHRTaWJsaW5nXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9uZXh0U2libGluZ30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhdHRyaWJ1dGVOYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hdHRyaWJ1dGVOYW1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImF0dHJpYnV0ZU5hbWVzcGFjZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYXR0cmlidXRlTmFtZXNwYWNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIm9sZFZhbHVlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vbGRWYWx1ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLl9jcmVhdGU9ZnVuY3Rpb24odCxyLG4saSxvLGEscyx1LGwpe3JldHVybiBuZXcgZSh0LHIsbixpLG8sYSxzLHUsbCl9LGV9KCk7dC5NdXRhdGlvblJlY29yZEltcGw9bn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoNiksbz1yKDkpLGE9cig3KSxzPXIoMCksdT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLl9lbGVtZW50PWUsdGhpcy5fYXR0cmlidXRlPXQsdGhpcy5fdG9rZW5TZXQ9bmV3IFNldDt2YXIgcj10Ll9sb2NhbE5hbWUsbj1zLmVsZW1lbnRfZ2V0QW5BdHRyaWJ1dGVWYWx1ZShlLHIpLG89dGhpczt0aGlzLl9lbGVtZW50Ll9hdHRyaWJ1dGVDaGFuZ2VTdGVwcy5wdXNoKChmdW5jdGlvbihlLHQscixuLGkpe3Q9PT1vLl9hdHRyaWJ1dGUuX2xvY2FsTmFtZSYmbnVsbD09PWkmJihuP28uX3Rva2VuU2V0PXMub3JkZXJlZFNldF9wYXJzZShuKTpvLl90b2tlblNldC5jbGVhcigpKX0pKSxpLmRvbS5mZWF0dXJlcy5zdGVwcyYmcy5kb21fcnVuQXR0cmlidXRlQ2hhbmdlU3RlcHMoZSxyLG4sbixudWxsKX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwibGVuZ3RoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90b2tlblNldC5zaXplfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLml0ZW09ZnVuY3Rpb24oZSl7dmFyIHQscixpPTA7dHJ5e2Zvcih2YXIgbz1uKHRoaXMuX3Rva2VuU2V0KSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7dmFyIHM9YS52YWx1ZTtpZihpPT09ZSlyZXR1cm4gcztpKyt9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gbnVsbH0sZS5wcm90b3R5cGUuY29udGFpbnM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3Rva2VuU2V0LmhhcyhlKX0sZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQscj1bXSxpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKylyW2ldPWFyZ3VtZW50c1tpXTt0cnl7Zm9yKHZhciB1PW4ociksbD11Lm5leHQoKTshbC5kb25lO2w9dS5uZXh0KCkpe3ZhciBjPWwudmFsdWU7aWYoXCJcIj09PWMpdGhyb3cgbmV3IG8uU3ludGF4RXJyb3IoXCJDYW5ub3QgYWRkIGFuIGVtcHR5IHRva2VuLlwiKTtpZihhLmNvZGVQb2ludC5BU0NJSVdoaXRlU3BhY2UudGVzdChjKSl0aHJvdyBuZXcgby5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCJUb2tlbiBjYW5ub3QgY29udGFpbiB3aGl0ZXNwYWNlLlwiKTt0aGlzLl90b2tlblNldC5hZGQoYyl9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJih0PXUucmV0dXJuKSYmdC5jYWxsKHUpfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1zLnRva2VuTGlzdF91cGRhdGVTdGVwcyh0aGlzKX0sZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQscj1bXSxpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKylyW2ldPWFyZ3VtZW50c1tpXTt0cnl7Zm9yKHZhciB1PW4ociksbD11Lm5leHQoKTshbC5kb25lO2w9dS5uZXh0KCkpe3ZhciBjPWwudmFsdWU7aWYoXCJcIj09PWMpdGhyb3cgbmV3IG8uU3ludGF4RXJyb3IoXCJDYW5ub3QgcmVtb3ZlIGFuIGVtcHR5IHRva2VuLlwiKTtpZihhLmNvZGVQb2ludC5BU0NJSVdoaXRlU3BhY2UudGVzdChjKSl0aHJvdyBuZXcgby5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCJUb2tlbiBjYW5ub3QgY29udGFpbiB3aGl0ZXNwYWNlLlwiKTt0aGlzLl90b2tlblNldC5kZWxldGUoYyl9fWNhdGNoKHQpe2U9e2Vycm9yOnR9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJih0PXUucmV0dXJuKSYmdC5jYWxsKHUpfWZpbmFsbHl7aWYoZSl0aHJvdyBlLmVycm9yfX1zLnRva2VuTGlzdF91cGRhdGVTdGVwcyh0aGlzKX0sZS5wcm90b3R5cGUudG9nZ2xlPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9dm9pZCAwKSxcIlwiPT09ZSl0aHJvdyBuZXcgby5TeW50YXhFcnJvcihcIkNhbm5vdCB0b2dnbGUgYW4gZW1wdHkgdG9rZW4uXCIpO2lmKGEuY29kZVBvaW50LkFTQ0lJV2hpdGVTcGFjZS50ZXN0KGUpKXRocm93IG5ldyBvLkludmFsaWRDaGFyYWN0ZXJFcnJvcihcIlRva2VuIGNhbm5vdCBjb250YWluIHdoaXRlc3BhY2UuXCIpO3JldHVybiB0aGlzLl90b2tlblNldC5oYXMoZSk/dm9pZCAwIT09dCYmITEhPT10fHwodGhpcy5fdG9rZW5TZXQuZGVsZXRlKGUpLHMudG9rZW5MaXN0X3VwZGF0ZVN0ZXBzKHRoaXMpLCExKToodm9pZCAwPT09dHx8ITA9PT10KSYmKHRoaXMuX3Rva2VuU2V0LmFkZChlKSxzLnRva2VuTGlzdF91cGRhdGVTdGVwcyh0aGlzKSwhMCl9LGUucHJvdG90eXBlLnJlcGxhY2U9ZnVuY3Rpb24oZSx0KXtpZihcIlwiPT09ZXx8XCJcIj09PXQpdGhyb3cgbmV3IG8uU3ludGF4RXJyb3IoXCJDYW5ub3QgcmVwbGFjZSBhbiBlbXB0eSB0b2tlbi5cIik7aWYoYS5jb2RlUG9pbnQuQVNDSUlXaGl0ZVNwYWNlLnRlc3QoZSl8fGEuY29kZVBvaW50LkFTQ0lJV2hpdGVTcGFjZS50ZXN0KHQpKXRocm93IG5ldyBvLkludmFsaWRDaGFyYWN0ZXJFcnJvcihcIlRva2VuIGNhbm5vdCBjb250YWluIHdoaXRlc3BhY2UuXCIpO3JldHVybiEhdGhpcy5fdG9rZW5TZXQuaGFzKGUpJiYoYS5zZXQucmVwbGFjZSh0aGlzLl90b2tlblNldCxlLHQpLHMudG9rZW5MaXN0X3VwZGF0ZVN0ZXBzKHRoaXMpLCEwKX0sZS5wcm90b3R5cGUuc3VwcG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHMudG9rZW5MaXN0X3ZhbGlkYXRpb25TdGVwcyh0aGlzLGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ2YWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy50b2tlbkxpc3Rfc2VyaWFsaXplU3RlcHModGhpcyl9LHNldDpmdW5jdGlvbihlKXtzLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGVWYWx1ZSh0aGlzLl9lbGVtZW50LHRoaXMuX2F0dHJpYnV0ZS5fbG9jYWxOYW1lLGUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl90b2tlblNldFtTeW1ib2wuaXRlcmF0b3JdKCk7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5uZXh0KCl9fX0sZS5fY3JlYXRlPWZ1bmN0aW9uKHQscil7cmV0dXJuIG5ldyBlKHQscil9LGV9KCk7dC5ET01Ub2tlbkxpc3RJbXBsPXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEwNCksYT1yKDApLHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIpe3ZhciBuPWUuY2FsbCh0aGlzLHQscil8fHRoaXM7cmV0dXJuIG4uX2RldGFpbD1udWxsLG4uX2RldGFpbD1yJiZyLmRldGFpbHx8bnVsbCxufXJldHVybiBpKHQsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZGV0YWlsXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kZXRhaWx9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuaW5pdEN1c3RvbUV2ZW50PWZ1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1yJiYocj0hMSksdm9pZCAwPT09biYmKG49bnVsbCksdGhpcy5fZGlzcGF0Y2hGbGFnfHwoYS5ldmVudF9pbml0aWFsaXplKHRoaXMsZSx0LHIpLHRoaXMuX2RldGFpbD1uKX0sdH0oby5FdmVudEltcGwpO3QuQ3VzdG9tRXZlbnRJbXBsPXN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDYpLGk9cigyKSxvPXIoMTA1KSxhPXIoMTcpO3Qubm9kZUl0ZXJhdG9yX3RyYXZlcnNlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWUuX3JlZmVyZW5jZSxuPWUuX3BvaW50ZXJCZWZvcmVSZWZlcmVuY2U7Oyl7aWYodClpZihuKW49ITE7ZWxzZXt2YXIgcz1hLnRyZWVfZ2V0Rm9sbG93aW5nTm9kZShlLl9yb290LHIpO2lmKCFzKXJldHVybiBudWxsO3I9c31lbHNlIGlmKG4pe3ZhciB1PWEudHJlZV9nZXRQcmVjZWRpbmdOb2RlKGUucm9vdCxyKTtpZighdSlyZXR1cm4gbnVsbDtyPXV9ZWxzZSBuPSEwO2lmKG8udHJhdmVyc2FsX2ZpbHRlcihlLHIpPT09aS5GaWx0ZXJSZXN1bHQuQWNjZXB0KWJyZWFrfXJldHVybiBlLl9yZWZlcmVuY2U9cixlLl9wb2ludGVyQmVmb3JlUmVmZXJlbmNlPW4scn0sdC5ub2RlSXRlcmF0b3JfaXRlcmF0b3JMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIG4uZG9tLndpbmRvdy5faXRlcmF0b3JMaXN0fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOSksaT1yKDcpLG89cigxNzQpO2Z1bmN0aW9uIGEoZSl7aWYoIW8ueG1sX2lzTmFtZShlKSl0aHJvdyBuZXcgbi5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCJJbnZhbGlkIFhNTCBuYW1lOiBcIitlKTtpZighby54bWxfaXNRTmFtZShlKSl0aHJvdyBuZXcgbi5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCJJbnZhbGlkIFhNTCBxdWFsaWZpZWQgbmFtZTogXCIrZStcIi5cIil9dC5uYW1lc3BhY2VfdmFsaWRhdGU9YSx0Lm5hbWVzcGFjZV92YWxpZGF0ZUFuZEV4dHJhY3Q9ZnVuY3Rpb24oZSx0KXtlfHwoZT1udWxsKSxhKHQpO3ZhciByPXQuc3BsaXQoXCI6XCIpLG89Mj09PXIubGVuZ3RoP3JbMF06bnVsbCxzPTI9PT1yLmxlbmd0aD9yWzFdOnQ7aWYobyYmbnVsbD09PWUpdGhyb3cgbmV3IG4uTmFtZXNwYWNlRXJyb3IoXCJRdWFsaWZpZWQgbmFtZSBpbmNsdWRlcyBhIHByZWZpeCBidXQgdGhlIG5hbWVzcGFjZSBpcyBudWxsLlwiKTtpZihcInhtbFwiPT09byYmZSE9PWkubmFtZXNwYWNlLlhNTCl0aHJvdyBuZXcgbi5OYW1lc3BhY2VFcnJvcignUXVhbGlmaWVkIG5hbWUgaW5jbHVkZXMgdGhlIFwieG1sXCIgcHJlZml4IGJ1dCB0aGUgbmFtZXNwYWNlIGlzIG5vdCB0aGUgWE1MIG5hbWVzcGFjZS4nKTtpZihlIT09aS5uYW1lc3BhY2UuWE1MTlMmJihcInhtbG5zXCI9PT1vfHxcInhtbG5zXCI9PT10KSl0aHJvdyBuZXcgbi5OYW1lc3BhY2VFcnJvcignUXVhbGlmaWVkIG5hbWUgaW5jbHVkZXMgdGhlIFwieG1sbnNcIiBwcmVmaXggYnV0IHRoZSBuYW1lc3BhY2UgaXMgbm90IHRoZSBYTUxOUyBuYW1lc3BhY2UuJyk7aWYoZT09PWkubmFtZXNwYWNlLlhNTE5TJiZcInhtbG5zXCIhPT1vJiZcInhtbG5zXCIhPT10KXRocm93IG5ldyBuLk5hbWVzcGFjZUVycm9yKCdRdWFsaWZpZWQgbmFtZSBkb2VzIG5vdCBpbmNsdWRlIHRoZSBcInhtbG5zXCIgcHJlZml4IGJ1dCB0aGUgbmFtZXNwYWNlIGlzIHRoZSBYTUxOUyBuYW1lc3BhY2UuJyk7cmV0dXJuW2UsbyxzXX0sdC5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lPWZ1bmN0aW9uKGUpe2EoZSk7dmFyIHQ9ZS5zcGxpdChcIjpcIik7cmV0dXJuWzI9PT10Lmxlbmd0aD90WzBdOm51bGwsMj09PXQubGVuZ3RoP3RbMV06ZV19fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC54bWxfaXNOYW1lPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgcj1lLmNoYXJDb2RlQXQodCk7aWYoIShyPj05NyYmcjw9MTIyfHxyPj02NSYmcjw9OTB8fDU4PT09cnx8OTU9PT1yfHxyPj0xOTImJnI8PTIxNHx8cj49MjE2JiZyPD0yNDZ8fHI+PTI0OCYmcjw9NzY3fHxyPj04ODAmJnI8PTg5M3x8cj49ODk1JiZyPD04MTkxfHxyPj04MjA0JiZyPD04MjA1fHxyPj04MzA0JiZyPD04NTkxfHxyPj0xMTI2NCYmcjw9MTIyNzF8fHI+PTEyMjg5JiZyPD01NTI5NXx8cj49NjM3NDQmJnI8PTY0OTc1fHxyPj02NTAwOCYmcjw9NjU1MzMpJiYoMD09PXR8fCEoNDU9PT1yfHw0Nj09PXJ8fHI+PTQ4JiZyPD01N3x8MTgzPT09cnx8cj49NzY4JiZyPD04Nzl8fHI+PTgyNTUmJnI8PTgyNTYpKSl7aWYocj49NTUyOTYmJnI8PTU2MzE5JiZ0PGUubGVuZ3RoLTEpe3ZhciBuPWUuY2hhckNvZGVBdCh0KzEpO2lmKG4+PTU2MzIwJiZuPD01NzM0MyYmKHQrKywocj0xMDI0KihyLTU1Mjk2KStuLTU2MzIwKzY1NTM2KT49NjU1MzYmJnI8PTk4MzAzOSkpY29udGludWV9cmV0dXJuITF9fXJldHVybiEwfSx0LnhtbF9pc1FOYW1lPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0hMSxyPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBuPWUuY2hhckNvZGVBdChyKTtpZighKG4+PTk3JiZuPD0xMjJ8fG4+PTY1JiZuPD05MHx8OTU9PT1ufHxuPj0xOTImJm48PTIxNHx8bj49MjE2JiZuPD0yNDZ8fG4+PTI0OCYmbjw9NzY3fHxuPj04ODAmJm48PTg5M3x8bj49ODk1JiZuPD04MTkxfHxuPj04MjA0JiZuPD04MjA1fHxuPj04MzA0JiZuPD04NTkxfHxuPj0xMTI2NCYmbjw9MTIyNzF8fG4+PTEyMjg5JiZuPD01NTI5NXx8bj49NjM3NDQmJm48PTY0OTc1fHxuPj02NTAwOCYmbjw9NjU1MzMpJiYoMD09PXJ8fCEoNDU9PT1ufHw0Nj09PW58fG4+PTQ4JiZuPD01N3x8MTgzPT09bnx8bj49NzY4JiZuPD04Nzl8fG4+PTgyNTUmJm48PTgyNTYpKSl7aWYoMD09PXJ8fDU4IT09bil7aWYobj49NTUyOTYmJm48PTU2MzE5JiZyPGUubGVuZ3RoLTEpe3ZhciBpPWUuY2hhckNvZGVBdChyKzEpO2lmKGk+PTU2MzIwJiZpPD01NzM0MyYmKHIrKywobj0xMDI0KihuLTU1Mjk2KStpLTU2MzIwKzY1NTM2KT49NjU1MzYmJm48PTk4MzAzOSkpY29udGludWV9cmV0dXJuITF9aWYodClyZXR1cm4hMTtpZihyPT09ZS5sZW5ndGgtMSlyZXR1cm4hMTt0PSEwfX1yZXR1cm4hMH0sdC54bWxfaXNMZWdhbENoYXI9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWUuY2hhckNvZGVBdCh0KTtpZighKDk9PT1yfHwxMD09PXJ8fDEzPT09cnx8cj49MzImJnI8PTU1Mjk1fHxyPj01NzM0NCYmcjw9NjU1MzMpKXtpZihyPj01NTI5NiYmcjw9NTYzMTkmJnQ8ZS5sZW5ndGgtMSl7dmFyIG49ZS5jaGFyQ29kZUF0KHQrMSk7aWYobj49NTYzMjAmJm48PTU3MzQzJiYodCsrLChyPTEwMjQqKHItNTUyOTYpK24tNTYzMjArNjU1MzYpPj02NTUzNiYmcjw9MTExNDExMSkpY29udGludWV9cmV0dXJuITF9fXJldHVybiEwfSx0LnhtbF9pc1B1YmlkQ2hhcj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIHI9ZS5jaGFyQ29kZUF0KHQpO2lmKCEocj49OTcmJnI8PTEyMnx8cj49NjUmJnI8PTkwfHxyPj0zOSYmcjw9NTl8fDMyPT09cnx8MTM9PT1yfHwxMD09PXJ8fHI+PTM1JiZyPD0zN3x8MzM9PT1yfHw2MT09PXJ8fDYzPT09cnx8NjQ9PT1yfHw5NT09PXIpKXJldHVybiExfXJldHVybiEwfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1yKDE3KTt0LmJvdW5kYXJ5UG9pbnRfcG9zaXRpb249ZnVuY3Rpb24gZSh0LHIpe3ZhciBvPXRbMF0sYT10WzFdLHM9clswXSx1PXJbMV07aWYoY29uc29sZS5hc3NlcnQoaS50cmVlX3Jvb3ROb2RlKG8pPT09aS50cmVlX3Jvb3ROb2RlKHMpLFwiQm91bmRhcnkgcG9pbnRzIG11c3Qgc2hhcmUgdGhlIHNhbWUgcm9vdCBub2RlLlwiKSxvPT09cylyZXR1cm4gYT09PXU/bi5Cb3VuZGFyeVBvc2l0aW9uLkVxdWFsOmE8dT9uLkJvdW5kYXJ5UG9zaXRpb24uQmVmb3JlOm4uQm91bmRhcnlQb3NpdGlvbi5BZnRlcjtpZihpLnRyZWVfaXNGb2xsb3dpbmcocyxvKSl7dmFyIGw9ZShbcyx1XSxbbyxhXSk7aWYobD09PW4uQm91bmRhcnlQb3NpdGlvbi5CZWZvcmUpcmV0dXJuIG4uQm91bmRhcnlQb3NpdGlvbi5BZnRlcjtpZihsPT09bi5Cb3VuZGFyeVBvc2l0aW9uLkFmdGVyKXJldHVybiBuLkJvdW5kYXJ5UG9zaXRpb24uQmVmb3JlfWlmKGkudHJlZV9pc0FuY2VzdG9yT2YocyxvKSl7Zm9yKHZhciBjPXM7IWkudHJlZV9pc0NoaWxkT2YobyxjKTspbnVsbCE9PWMuX3BhcmVudCYmKGM9Yy5fcGFyZW50KTtpZihpLnRyZWVfaW5kZXgoYyk8YSlyZXR1cm4gbi5Cb3VuZGFyeVBvc2l0aW9uLkFmdGVyfXJldHVybiBuLkJvdW5kYXJ5UG9zaXRpb24uQmVmb3JlfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoNiksbz1yKDMpLGE9cig3KSxzPXIoMjkpLHU9cigxMDgpLGw9cigzMCksYz1yKDM3KSxoPXIoNTIpO3Qubm9kZV9zdHJpbmdSZXBsYWNlQWxsPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bnVsbDtcIlwiIT09ZSYmKHI9cy5jcmVhdGVfdGV4dCh0Ll9ub2RlRG9jdW1lbnQsZSkpLGMubXV0YXRpb25fcmVwbGFjZUFsbChyLHQpfSx0Lm5vZGVfY2xvbmU9ZnVuY3Rpb24gZSh0LHIsYSl7dmFyIHUscCxmLGQsbTtpZih2b2lkIDA9PT1yJiYocj1udWxsKSx2b2lkIDA9PT1hJiYoYT0hMSksbnVsbD09PXImJihyPXQuX25vZGVEb2N1bWVudCksby5HdWFyZC5pc0VsZW1lbnROb2RlKHQpKXttPWguZWxlbWVudF9jcmVhdGVBbkVsZW1lbnQocix0Ll9sb2NhbE5hbWUsdC5fbmFtZXNwYWNlLHQuX25hbWVzcGFjZVByZWZpeCx0Ll9pcywhMSk7dHJ5e2Zvcih2YXIgeT1uKHQuX2F0dHJpYnV0ZUxpc3QpLHY9eS5uZXh0KCk7IXYuZG9uZTt2PXkubmV4dCgpKXt2YXIgXz1lKHYudmFsdWUscik7aC5lbGVtZW50X2FwcGVuZChfLG0pfX1jYXRjaChlKXt1PXtlcnJvcjplfX1maW5hbGx5e3RyeXt2JiYhdi5kb25lJiYocD15LnJldHVybikmJnAuY2FsbCh5KX1maW5hbGx5e2lmKHUpdGhyb3cgdS5lcnJvcn19fWVsc2UgaWYoby5HdWFyZC5pc0RvY3VtZW50Tm9kZSh0KSl7dmFyIGc9cy5jcmVhdGVfZG9jdW1lbnQoKTtnLl9lbmNvZGluZz10Ll9lbmNvZGluZyxnLl9jb250ZW50VHlwZT10Ll9jb250ZW50VHlwZSxnLl9VUkw9dC5fVVJMLGcuX29yaWdpbj10Ll9vcmlnaW4sZy5fdHlwZT10Ll90eXBlLGcuX21vZGU9dC5fbW9kZSxtPWd9ZWxzZSBpZihvLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0KSl7bT1zLmNyZWF0ZV9kb2N1bWVudFR5cGUocix0Ll9uYW1lLHQuX3B1YmxpY0lkLHQuX3N5c3RlbUlkKX1lbHNlIGlmKG8uR3VhcmQuaXNBdHRyTm9kZSh0KSl7dmFyIGI9cy5jcmVhdGVfYXR0cihyLHQubG9jYWxOYW1lKTtiLl9uYW1lc3BhY2U9dC5fbmFtZXNwYWNlLGIuX25hbWVzcGFjZVByZWZpeD10Ll9uYW1lc3BhY2VQcmVmaXgsYi5fdmFsdWU9dC5fdmFsdWUsbT1ifWVsc2UgbT1vLkd1YXJkLmlzRXhjbHVzaXZlVGV4dE5vZGUodCk/cy5jcmVhdGVfdGV4dChyLHQuX2RhdGEpOm8uR3VhcmQuaXNDREFUQVNlY3Rpb25Ob2RlKHQpP3MuY3JlYXRlX2NkYXRhU2VjdGlvbihyLHQuX2RhdGEpOm8uR3VhcmQuaXNDb21tZW50Tm9kZSh0KT9zLmNyZWF0ZV9jb21tZW50KHIsdC5fZGF0YSk6by5HdWFyZC5pc1Byb2Nlc3NpbmdJbnN0cnVjdGlvbk5vZGUodCk/cy5jcmVhdGVfcHJvY2Vzc2luZ0luc3RydWN0aW9uKHIsdC5fdGFyZ2V0LHQuX2RhdGEpOm8uR3VhcmQuaXNEb2N1bWVudEZyYWdtZW50Tm9kZSh0KT9zLmNyZWF0ZV9kb2N1bWVudEZyYWdtZW50KHIpOk9iamVjdC5jcmVhdGUodCk7aWYoby5HdWFyZC5pc0RvY3VtZW50Tm9kZShtKT8obS5fbm9kZURvY3VtZW50PW0scj1tKTptLl9ub2RlRG9jdW1lbnQ9cixpLmRvbS5mZWF0dXJlcy5zdGVwcyYmbC5kb21fcnVuQ2xvbmluZ1N0ZXBzKG0sdCxyLGEpLGEpdHJ5e2Zvcih2YXIgeD1uKHQuX2NoaWxkcmVuKSx3PXgubmV4dCgpOyF3LmRvbmU7dz14Lm5leHQoKSl7dmFyIEU9ZSh3LnZhbHVlLHIsITApO2MubXV0YXRpb25fYXBwZW5kKEUsbSl9fWNhdGNoKGUpe2Y9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3cmJiF3LmRvbmUmJihkPXgucmV0dXJuKSYmZC5jYWxsKHgpfWZpbmFsbHl7aWYoZil0aHJvdyBmLmVycm9yfX1yZXR1cm4gbX0sdC5ub2RlX2VxdWFscz1mdW5jdGlvbiBlKHQscil7dmFyIGksYSxzLHU7aWYodC5fbm9kZVR5cGUhPT1yLl9ub2RlVHlwZSlyZXR1cm4hMTtpZihvLkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0KSYmby5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUocikpe2lmKHQuX25hbWUhPT1yLl9uYW1lfHx0Ll9wdWJsaWNJZCE9PXIuX3B1YmxpY0lkfHx0Ll9zeXN0ZW1JZCE9PXIuX3N5c3RlbUlkKXJldHVybiExfWVsc2UgaWYoby5HdWFyZC5pc0VsZW1lbnROb2RlKHQpJiZvLkd1YXJkLmlzRWxlbWVudE5vZGUocikpe2lmKHQuX25hbWVzcGFjZSE9PXIuX25hbWVzcGFjZXx8dC5fbmFtZXNwYWNlUHJlZml4IT09ci5fbmFtZXNwYWNlUHJlZml4fHx0Ll9sb2NhbE5hbWUhPT1yLl9sb2NhbE5hbWV8fHQuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoIT09ci5fYXR0cmlidXRlTGlzdC5sZW5ndGgpcmV0dXJuITF9ZWxzZSBpZihvLkd1YXJkLmlzQXR0ck5vZGUodCkmJm8uR3VhcmQuaXNBdHRyTm9kZShyKSl7aWYodC5fbmFtZXNwYWNlIT09ci5fbmFtZXNwYWNlfHx0Ll9sb2NhbE5hbWUhPT1yLl9sb2NhbE5hbWV8fHQuX3ZhbHVlIT09ci5fdmFsdWUpcmV0dXJuITF9ZWxzZSBpZihvLkd1YXJkLmlzUHJvY2Vzc2luZ0luc3RydWN0aW9uTm9kZSh0KSYmby5HdWFyZC5pc1Byb2Nlc3NpbmdJbnN0cnVjdGlvbk5vZGUocikpe2lmKHQuX3RhcmdldCE9PXIuX3RhcmdldHx8dC5fZGF0YSE9PXIuX2RhdGEpcmV0dXJuITF9ZWxzZSBpZihvLkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUodCkmJm8uR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZShyKSYmdC5fZGF0YSE9PXIuX2RhdGEpcmV0dXJuITE7aWYoby5HdWFyZC5pc0VsZW1lbnROb2RlKHQpJiZvLkd1YXJkLmlzRWxlbWVudE5vZGUocikpe3ZhciBsPXt9O3RyeXtmb3IodmFyIGM9bih0Ll9hdHRyaWJ1dGVMaXN0KSxoPWMubmV4dCgpOyFoLmRvbmU7aD1jLm5leHQoKSl7bFsoZD1oLnZhbHVlKS5fbG9jYWxOYW1lXT1kfX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtoJiYhaC5kb25lJiYoYT1jLnJldHVybikmJmEuY2FsbChjKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19dHJ5e2Zvcih2YXIgcD1uKHIuX2F0dHJpYnV0ZUxpc3QpLGY9cC5uZXh0KCk7IWYuZG9uZTtmPXAubmV4dCgpKXt2YXIgZCxtPWYudmFsdWU7aWYoIShkPWxbbS5fbG9jYWxOYW1lXSkpcmV0dXJuITE7aWYoIWUoZCxtKSlyZXR1cm4hMX19Y2F0Y2goZSl7cz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZiYmIWYuZG9uZSYmKHU9cC5yZXR1cm4pJiZ1LmNhbGwocCl9ZmluYWxseXtpZihzKXRocm93IHMuZXJyb3J9fX1pZih0Ll9jaGlsZHJlbi5zaXplIT09ci5fY2hpbGRyZW4uc2l6ZSlyZXR1cm4hMTtmb3IodmFyIHk9dC5fY2hpbGRyZW5bU3ltYm9sLml0ZXJhdG9yXSgpLHY9ci5fY2hpbGRyZW5bU3ltYm9sLml0ZXJhdG9yXSgpLF89eS5uZXh0KCksZz12Lm5leHQoKTshXy5kb25lJiYhZy5kb25lOyl7aWYoIWUoXy52YWx1ZSxnLnZhbHVlKSlyZXR1cm4hMTtfPXkubmV4dCgpLGc9di5uZXh0KCl9cmV0dXJuITB9LHQubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhRdWFsaWZpZWROYW1lPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCIqXCI9PT1lP3MuY3JlYXRlX2h0bWxDb2xsZWN0aW9uKHQpOlwiaHRtbFwiPT09dC5fbm9kZURvY3VtZW50Ll90eXBlP3MuY3JlYXRlX2h0bWxDb2xsZWN0aW9uKHQsKGZ1bmN0aW9uKHQpe3JldHVybiB0Ll9uYW1lc3BhY2U9PT1hLm5hbWVzcGFjZS5IVE1MJiZ0Ll9xdWFsaWZpZWROYW1lPT09ZS50b0xvd2VyQ2FzZSgpfHx0Ll9uYW1lc3BhY2UhPT1hLm5hbWVzcGFjZS5IVE1MJiZ0Ll9xdWFsaWZpZWROYW1lPT09ZX0pKTpzLmNyZWF0ZV9odG1sQ29sbGVjdGlvbih0LChmdW5jdGlvbih0KXtyZXR1cm4gdC5fcXVhbGlmaWVkTmFtZT09PWV9KSl9LHQubm9kZV9saXN0T2ZFbGVtZW50c1dpdGhOYW1lc3BhY2U9ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwiXCI9PT1lJiYoZT1udWxsKSxcIipcIj09PWUmJlwiKlwiPT09dD9zLmNyZWF0ZV9odG1sQ29sbGVjdGlvbihyKTpcIipcIj09PWU/cy5jcmVhdGVfaHRtbENvbGxlY3Rpb24ociwoZnVuY3Rpb24oZSl7cmV0dXJuIGUuX2xvY2FsTmFtZT09PXR9KSk6XCIqXCI9PT10P3MuY3JlYXRlX2h0bWxDb2xsZWN0aW9uKHIsKGZ1bmN0aW9uKHQpe3JldHVybiB0Ll9uYW1lc3BhY2U9PT1lfSkpOnMuY3JlYXRlX2h0bWxDb2xsZWN0aW9uKHIsKGZ1bmN0aW9uKHIpe3JldHVybiByLl9sb2NhbE5hbWU9PT10JiZyLl9uYW1lc3BhY2U9PT1lfSkpfSx0Lm5vZGVfbGlzdE9mRWxlbWVudHNXaXRoQ2xhc3NOYW1lcz1mdW5jdGlvbihlLHQpe3ZhciByPXUub3JkZXJlZFNldF9wYXJzZShlKTtpZigwPT09ci5zaXplKXJldHVybiBzLmNyZWF0ZV9odG1sQ29sbGVjdGlvbih0LChmdW5jdGlvbigpe3JldHVybiExfSkpO3ZhciBuPVwicXVpcmtzXCIhPT10Ll9ub2RlRG9jdW1lbnQuX21vZGU7cmV0dXJuIHMuY3JlYXRlX2h0bWxDb2xsZWN0aW9uKHQsKGZ1bmN0aW9uKGUpe3ZhciB0PWUuY2xhc3NMaXN0O3JldHVybiB1Lm9yZGVyZWRTZXRfY29udGFpbnModC5fdG9rZW5TZXQscixuKX0pKX0sdC5ub2RlX2xvY2F0ZUFOYW1lc3BhY2VQcmVmaXg9ZnVuY3Rpb24gZSh0LHIpe2lmKHQuX25hbWVzcGFjZT09PXImJm51bGwhPT10Ll9uYW1lc3BhY2VQcmVmaXgpcmV0dXJuIHQuX25hbWVzcGFjZVByZWZpeDtmb3IodmFyIG49MDtuPHQuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO24rKyl7dmFyIGk9dC5fYXR0cmlidXRlTGlzdFtuXTtpZihcInhtbG5zXCI9PT1pLl9uYW1lc3BhY2VQcmVmaXgmJmkuX3ZhbHVlPT09cilyZXR1cm4gaS5fbG9jYWxOYW1lfXJldHVybiB0Ll9wYXJlbnQmJm8uR3VhcmQuaXNFbGVtZW50Tm9kZSh0Ll9wYXJlbnQpP2UodC5fcGFyZW50LHIpOm51bGx9LHQubm9kZV9sb2NhdGVBTmFtZXNwYWNlPWZ1bmN0aW9uIGUodCxyKXtpZihvLkd1YXJkLmlzRWxlbWVudE5vZGUodCkpe2lmKG51bGwhPT10Ll9uYW1lc3BhY2UmJnQuX25hbWVzcGFjZVByZWZpeD09PXIpcmV0dXJuIHQuX25hbWVzcGFjZTtmb3IodmFyIG49MDtuPHQuX2F0dHJpYnV0ZUxpc3QubGVuZ3RoO24rKyl7dmFyIGk9dC5fYXR0cmlidXRlTGlzdFtuXTtpZihpLl9uYW1lc3BhY2U9PT1hLm5hbWVzcGFjZS5YTUxOUyYmXCJ4bWxuc1wiPT09aS5fbmFtZXNwYWNlUHJlZml4JiZpLl9sb2NhbE5hbWU9PT1yKXJldHVybiBpLl92YWx1ZXx8bnVsbDtpZihudWxsPT09ciYmaS5fbmFtZXNwYWNlPT09YS5uYW1lc3BhY2UuWE1MTlMmJm51bGw9PT1pLl9uYW1lc3BhY2VQcmVmaXgmJlwieG1sbnNcIj09PWkuX2xvY2FsTmFtZSlyZXR1cm4gaS5fdmFsdWV8fG51bGx9cmV0dXJuIG51bGw9PT10LnBhcmVudEVsZW1lbnQ/bnVsbDplKHQucGFyZW50RWxlbWVudCxyKX1yZXR1cm4gby5HdWFyZC5pc0RvY3VtZW50Tm9kZSh0KT9udWxsPT09dC5kb2N1bWVudEVsZW1lbnQ/bnVsbDplKHQuZG9jdW1lbnRFbGVtZW50LHIpOm8uR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKHQpfHxvLkd1YXJkLmlzRG9jdW1lbnRGcmFnbWVudE5vZGUodCk/bnVsbDpvLkd1YXJkLmlzQXR0ck5vZGUodCk/bnVsbD09PXQuX2VsZW1lbnQ/bnVsbDplKHQuX2VsZW1lbnQscik6dC5fcGFyZW50JiZvLkd1YXJkLmlzRWxlbWVudE5vZGUodC5fcGFyZW50KT9lKHQuX3BhcmVudCxyKTpudWxsfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoNiksbz1yKDMpLGE9cig5KSxzPXIoMjkpLHU9cigxNyksbD1yKDEwNyksYz1yKDM3KTt0LnRleHRfY29udGlndW91c1RleHROb2Rlcz1mdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiB2b2lkIDA9PT10JiYodD0hMSksKHI9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtmb3IodmFyIHI9ZTtyJiZvLkd1YXJkLmlzVGV4dE5vZGUoci5fcHJldmlvdXNTaWJsaW5nKTspcj1yLl9wcmV2aW91c1NpYmxpbmc7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtpZihyJiYhdCYmcj09PWUmJihyPW8uR3VhcmQuaXNUZXh0Tm9kZShyLl9uZXh0U2libGluZyk/ci5fbmV4dFNpYmxpbmc6bnVsbCksbnVsbD09PXIpcmV0dXJue2RvbmU6ITAsdmFsdWU6bnVsbH07dmFyIG49e2RvbmU6ITEsdmFsdWU6cn07cmV0dXJuIHI9by5HdWFyZC5pc1RleHROb2RlKHIuX25leHRTaWJsaW5nKT9yLl9uZXh0U2libGluZzpudWxsLG59fX0scn0sdC50ZXh0X2NvbnRpZ3VvdXNFeGNsdXNpdmVUZXh0Tm9kZXM9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLChyPXt9KVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7Zm9yKHZhciByPWU7ciYmby5HdWFyZC5pc0V4Y2x1c2l2ZVRleHROb2RlKHIuX3ByZXZpb3VzU2libGluZyk7KXI9ci5fcHJldmlvdXNTaWJsaW5nO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7aWYociYmIXQmJnI9PT1lJiYocj1vLkd1YXJkLmlzRXhjbHVzaXZlVGV4dE5vZGUoci5fbmV4dFNpYmxpbmcpP3IuX25leHRTaWJsaW5nOm51bGwpLG51bGw9PT1yKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBuPXtkb25lOiExLHZhbHVlOnJ9O3JldHVybiByPW8uR3VhcmQuaXNFeGNsdXNpdmVUZXh0Tm9kZShyLl9uZXh0U2libGluZyk/ci5fbmV4dFNpYmxpbmc6bnVsbCxufX19LHJ9LHQudGV4dF9kZXNjZW5kYW50VGV4dENvbnRlbnQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIscj11LnRyZWVfZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZShlLCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gby5HdWFyZC5pc1RleHROb2RlKGUpfSkpO251bGwhPT1yOyl0Kz1yLl9kYXRhLHI9dS50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZShlLHIsITEsITEsKGZ1bmN0aW9uKGUpe3JldHVybiBvLkd1YXJkLmlzVGV4dE5vZGUoZSl9KSk7cmV0dXJuIHR9LHQudGV4dF9zcGxpdD1mdW5jdGlvbihlLHQpe3ZhciByLG8saD1lLl9kYXRhLmxlbmd0aDtpZih0PmgpdGhyb3cgbmV3IGEuSW5kZXhTaXplRXJyb3I7dmFyIHA9aC10LGY9bC5jaGFyYWN0ZXJEYXRhX3N1YnN0cmluZ0RhdGEoZSx0LHApLGQ9cy5jcmVhdGVfdGV4dChlLl9ub2RlRG9jdW1lbnQsZiksbT1lLl9wYXJlbnQ7aWYobnVsbCE9PW0pe2MubXV0YXRpb25faW5zZXJ0KGQsbSxlLl9uZXh0U2libGluZyk7dHJ5e2Zvcih2YXIgeT1uKGkuZG9tLnJhbmdlTGlzdCksdj15Lm5leHQoKTshdi5kb25lO3Y9eS5uZXh0KCkpe3ZhciBfPXYudmFsdWU7Xy5fc3RhcnRbMF09PT1lJiZfLl9zdGFydFsxXT50JiYoXy5fc3RhcnRbMF09ZCxfLl9zdGFydFsxXS09dCksXy5fZW5kWzBdPT09ZSYmXy5fZW5kWzFdPnQmJihfLl9lbmRbMF09ZCxfLl9lbmRbMV0tPXQpO3ZhciBnPXUudHJlZV9pbmRleChlKTtfLl9zdGFydFswXT09PW0mJl8uX3N0YXJ0WzFdPT09ZysxJiZfLl9zdGFydFsxXSsrLF8uX2VuZFswXT09PW0mJl8uX2VuZFsxXT09PWcrMSYmXy5fZW5kWzFdKyt9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3YmJiF2LmRvbmUmJihvPXkucmV0dXJuKSYmby5jYWxsKHkpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX19cmV0dXJuIGwuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YShlLHQscCxcIlwiKSxkfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNCksaT1yKDQxKSxvPXIoMjQpLGE9cig0OCkscz1bXS5qb2luLHU9aSE9T2JqZWN0LGw9YShcImpvaW5cIixcIixcIik7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6dXx8IWx9LHtqb2luOmZ1bmN0aW9uKGUpe3JldHVybiBzLmNhbGwobyh0aGlzKSx2b2lkIDA9PT1lP1wiLFwiOmUpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0KSxpPXIoODMpLG89U3RyaW5nLmZyb21DaGFyQ29kZSxhPVN0cmluZy5mcm9tQ29kZVBvaW50O24oe3RhcmdldDpcIlN0cmluZ1wiLHN0YXQ6ITAsZm9yY2VkOiEhYSYmMSE9YS5sZW5ndGh9LHtmcm9tQ29kZVBvaW50OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPVtdLG49YXJndW1lbnRzLmxlbmd0aCxhPTA7bj5hOyl7aWYodD0rYXJndW1lbnRzW2ErK10saSh0LDExMTQxMTEpIT09dCl0aHJvdyBSYW5nZUVycm9yKHQrXCIgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludFwiKTtyLnB1c2godDw2NTUzNj9vKHQpOm8oNTUyOTYrKCh0LT02NTUzNik+PjEwKSx0JTEwMjQrNTYzMjApKX1yZXR1cm4gci5qb2luKFwiXCIpfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoMTExKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3RoaXMuX29wdGlvbnM9e3NraXBXaGl0ZXNwYWNlT25seVRleHQ6ITF9LHRoaXMuZXJyPXtsaW5lOi0xLGNvbDotMSxpbmRleDotMSxzdHI6XCJcIn0sdGhpcy5fc3RyPWUsdGhpcy5faW5kZXg9MCx0aGlzLl9sZW5ndGg9ZS5sZW5ndGgsdCYmKHRoaXMuX29wdGlvbnMuc2tpcFdoaXRlc3BhY2VPbmx5VGV4dD10LnNraXBXaGl0ZXNwYWNlT25seVRleHR8fCExKX1yZXR1cm4gZS5wcm90b3R5cGUubmV4dFRva2VuPWZ1bmN0aW9uKCl7aWYodGhpcy5lb2YoKSlyZXR1cm57dHlwZTppLlRva2VuVHlwZS5FT0Z9O3ZhciB0PXRoaXMuc2tpcElmU3RhcnRzV2l0aChcIjxcIik/dGhpcy5vcGVuQnJhY2tldCgpOnRoaXMudGV4dCgpO3JldHVybiB0aGlzLl9vcHRpb25zLnNraXBXaGl0ZXNwYWNlT25seVRleHQmJnQudHlwZT09PWkuVG9rZW5UeXBlLlRleHQmJmUuaXNXaGl0ZVNwYWNlVG9rZW4odCkmJih0PXRoaXMubmV4dFRva2VuKCkpLHR9LGUucHJvdG90eXBlLm9wZW5CcmFja2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIj9cIik/dGhpcy5za2lwSWZTdGFydHNXaXRoKFwieG1sXCIpP2UuaXNTcGFjZSh0aGlzLl9zdHJbdGhpcy5faW5kZXhdKT90aGlzLmRlY2xhcmF0aW9uKCk6KHRoaXMuc2VlaygtMyksdGhpcy5waSgpKTp0aGlzLnBpKCk6dGhpcy5za2lwSWZTdGFydHNXaXRoKFwiIVwiKT90aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCItLVwiKT90aGlzLmNvbW1lbnQoKTp0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCJbQ0RBVEFbXCIpP3RoaXMuY2RhdGEoKTp0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCJET0NUWVBFXCIpP3RoaXMuZG9jdHlwZSgpOnZvaWQgdGhpcy50aHJvd0Vycm9yKFwiSW52YWxpZCAnIScgaW4gb3BlbmluZyB0YWcuXCIpOnRoaXMuc2tpcElmU3RhcnRzV2l0aChcIi9cIik/dGhpcy5jbG9zZVRhZygpOnRoaXMub3BlblRhZygpfSxlLnByb3RvdHlwZS5kZWNsYXJhdGlvbj1mdW5jdGlvbigpe2Zvcih2YXIgZT1cIlwiLHQ9XCJcIixyPVwiXCI7IXRoaXMuZW9mKCk7KXtpZih0aGlzLnNraXBTcGFjZSgpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIj8+XCIpKXJldHVybnt0eXBlOmkuVG9rZW5UeXBlLkRlY2xhcmF0aW9uLHZlcnNpb246ZSxlbmNvZGluZzp0LHN0YW5kYWxvbmU6cn07dmFyIG89bih0aGlzLmF0dHJpYnV0ZSgpLDIpLGE9b1swXSxzPW9bMV07XCJ2ZXJzaW9uXCI9PT1hP2U9czpcImVuY29kaW5nXCI9PT1hP3Q9czpcInN0YW5kYWxvbmVcIj09PWE/cj1zOnRoaXMudGhyb3dFcnJvcihcIkludmFsaWQgYXR0cmlidXRlIG5hbWU6IFwiK2EpfXRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgZGVjbGFyYXRpb24gZW5kIHN5bWJvbCBgPz5gXCIpfSxlLnByb3RvdHlwZS5kb2N0eXBlPWZ1bmN0aW9uKCl7dmFyIGU9XCJcIix0PVwiXCI7dGhpcy5za2lwU3BhY2UoKTt2YXIgcj10aGlzLnRha2VVbnRpbDIoXCJbXCIsXCI+XCIsITApO3JldHVybiB0aGlzLnNraXBTcGFjZSgpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIlBVQkxJQ1wiKT8oZT10aGlzLnF1b3RlZFN0cmluZygpLHQ9dGhpcy5xdW90ZWRTdHJpbmcoKSk6dGhpcy5za2lwSWZTdGFydHNXaXRoKFwiU1lTVEVNXCIpJiYodD10aGlzLnF1b3RlZFN0cmluZygpKSx0aGlzLnNraXBTcGFjZSgpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIltcIikmJih0aGlzLnNraXBVbnRpbChcIl1cIiksdGhpcy5za2lwSWZTdGFydHNXaXRoKFwiXVwiKXx8dGhpcy50aHJvd0Vycm9yKFwiTWlzc2luZyBlbmQgYnJhY2tldCBvZiBEVEQgaW50ZXJuYWwgc3Vic2V0XCIpKSx0aGlzLnNraXBTcGFjZSgpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIj5cIil8fHRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgZG9jdHlwZSBlbmQgc3ltYm9sIGA+YFwiKSx7dHlwZTppLlRva2VuVHlwZS5Eb2NUeXBlLG5hbWU6cixwdWJJZDplLHN5c0lkOnR9fSxlLnByb3RvdHlwZS5waT1mdW5jdGlvbigpe3ZhciBlPXRoaXMudGFrZVVudGlsU3RhcnRzV2l0aChcIj8+XCIsITApO2lmKHRoaXMuZW9mKCkmJnRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBlbmQgc3ltYm9sIGA/PmBcIiksdGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI/PlwiKSlyZXR1cm57dHlwZTppLlRva2VuVHlwZS5QSSx0YXJnZXQ6ZSxkYXRhOlwiXCJ9O3ZhciB0PXRoaXMudGFrZVVudGlsU3RhcnRzV2l0aChcIj8+XCIpO3JldHVybiB0aGlzLmVvZigpJiZ0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gZW5kIHN5bWJvbCBgPz5gXCIpLHRoaXMuc2VlaygyKSx7dHlwZTppLlRva2VuVHlwZS5QSSx0YXJnZXQ6ZSxkYXRhOnR9fSxlLnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50YWtlVW50aWwoXCI8XCIpO3JldHVybnt0eXBlOmkuVG9rZW5UeXBlLlRleHQsZGF0YTplfX0sZS5wcm90b3R5cGUuY29tbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMudGFrZVVudGlsU3RhcnRzV2l0aChcIi0tXFx4M2VcIik7cmV0dXJuIHRoaXMuZW9mKCkmJnRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgY29tbWVudCBlbmQgc3ltYm9sIGAtLVxceDNlYFwiKSx0aGlzLnNlZWsoMykse3R5cGU6aS5Ub2tlblR5cGUuQ29tbWVudCxkYXRhOmV9fSxlLnByb3RvdHlwZS5jZGF0YT1mdW5jdGlvbigpe3ZhciBlPXRoaXMudGFrZVVudGlsU3RhcnRzV2l0aChcIl1dPlwiKTtyZXR1cm4gdGhpcy5lb2YoKSYmdGhpcy50aHJvd0Vycm9yKFwiTWlzc2luZyBDREFUQSBlbmQgc3ltYm9sIGBdPmBcIiksdGhpcy5zZWVrKDMpLHt0eXBlOmkuVG9rZW5UeXBlLkNEQVRBLGRhdGE6ZX19LGUucHJvdG90eXBlLm9wZW5UYWc9ZnVuY3Rpb24oKXt0aGlzLnNraXBTcGFjZSgpO3ZhciBlPXRoaXMudGFrZVVudGlsMihcIj5cIixcIi9cIiwhMCk7aWYodGhpcy5za2lwU3BhY2UoKSx0aGlzLnNraXBJZlN0YXJ0c1dpdGgoXCI+XCIpKXJldHVybnt0eXBlOmkuVG9rZW5UeXBlLkVsZW1lbnQsbmFtZTplLGF0dHJpYnV0ZXM6W10sc2VsZkNsb3Npbmc6ITF9O2lmKHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIi8+XCIpKXJldHVybnt0eXBlOmkuVG9rZW5UeXBlLkVsZW1lbnQsbmFtZTplLGF0dHJpYnV0ZXM6W10sc2VsZkNsb3Npbmc6ITB9O2Zvcih2YXIgdD1bXTshdGhpcy5lb2YoKTspe2lmKHRoaXMuc2tpcFNwYWNlKCksdGhpcy5za2lwSWZTdGFydHNXaXRoKFwiPlwiKSlyZXR1cm57dHlwZTppLlRva2VuVHlwZS5FbGVtZW50LG5hbWU6ZSxhdHRyaWJ1dGVzOnQsc2VsZkNsb3Npbmc6ITF9O2lmKHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIi8+XCIpKXJldHVybnt0eXBlOmkuVG9rZW5UeXBlLkVsZW1lbnQsbmFtZTplLGF0dHJpYnV0ZXM6dCxzZWxmQ2xvc2luZzohMH07dmFyIHI9dGhpcy5hdHRyaWJ1dGUoKTt0LnB1c2gocil9dGhpcy50aHJvd0Vycm9yKFwiTWlzc2luZyBvcGVuaW5nIGVsZW1lbnQgdGFnIGVuZCBzeW1ib2wgYD5gXCIpfSxlLnByb3RvdHlwZS5jbG9zZVRhZz1mdW5jdGlvbigpe3RoaXMuc2tpcFNwYWNlKCk7dmFyIGU9dGhpcy50YWtlVW50aWwoXCI+XCIsITApO3JldHVybiB0aGlzLnNraXBTcGFjZSgpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIj5cIil8fHRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgY2xvc2luZyBlbGVtZW50IHRhZyBlbmQgc3ltYm9sIGA+YFwiKSx7dHlwZTppLlRva2VuVHlwZS5DbG9zaW5nVGFnLG5hbWU6ZX19LGUucHJvdG90eXBlLmF0dHJpYnV0ZT1mdW5jdGlvbigpe3RoaXMuc2tpcFNwYWNlKCk7dmFyIGU9dGhpcy50YWtlVW50aWwoXCI9XCIsITApO3JldHVybiB0aGlzLnNraXBTcGFjZSgpLHRoaXMuc2tpcElmU3RhcnRzV2l0aChcIj1cIil8fHRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgZXF1YWxzIHNpZ24gYmVmb3JlIGF0dHJpYnV0ZSB2YWx1ZVwiKSxbZSx0aGlzLnF1b3RlZFN0cmluZygpXX0sZS5wcm90b3R5cGUucXVvdGVkU3RyaW5nPWZ1bmN0aW9uKCl7dGhpcy5za2lwU3BhY2UoKTt2YXIgdD10aGlzLnRha2UoMSk7ZS5pc1F1b3RlKHQpfHx0aGlzLnRocm93RXJyb3IoXCJNaXNzaW5nIHN0YXJ0IHF1b3RlIGNoYXJhY3RlciBiZWZvcmUgcXVvdGVkIHZhbHVlXCIpO3ZhciByPXRoaXMudGFrZVVudGlsKHQpO3JldHVybiB0aGlzLnNraXBJZlN0YXJ0c1dpdGgodCl8fHRoaXMudGhyb3dFcnJvcihcIk1pc3NpbmcgZW5kIHF1b3RlIGNoYXJhY3RlciBhZnRlciBxdW90ZWQgdmFsdWVcIikscn0sZS5wcm90b3R5cGUuZW9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2luZGV4Pj10aGlzLl9sZW5ndGh9LGUucHJvdG90eXBlLnNraXBJZlN0YXJ0c1dpdGg9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGg7aWYoMT09PXQpcmV0dXJuIHRoaXMuX3N0clt0aGlzLl9pbmRleF09PT1lJiYodGhpcy5faW5kZXgrKywhMCk7Zm9yKHZhciByPTA7cjx0O3IrKylpZih0aGlzLl9zdHJbdGhpcy5faW5kZXgrcl0hPT1lW3JdKXJldHVybiExO3JldHVybiB0aGlzLl9pbmRleCs9dCwhMH0sZS5wcm90b3R5cGUuc2Vlaz1mdW5jdGlvbihlKXt0aGlzLl9pbmRleCs9ZSx0aGlzLl9pbmRleDwwJiYodGhpcy5faW5kZXg9MCksdGhpcy5faW5kZXg+dGhpcy5fbGVuZ3RoJiYodGhpcy5faW5kZXg9dGhpcy5fbGVuZ3RoKX0sZS5wcm90b3R5cGUuc2tpcFNwYWNlPWZ1bmN0aW9uKCl7Zm9yKDshdGhpcy5lb2YoKSYmZS5pc1NwYWNlKHRoaXMuX3N0clt0aGlzLl9pbmRleF0pOyl0aGlzLl9pbmRleCsrfSxlLnByb3RvdHlwZS50YWtlPWZ1bmN0aW9uKGUpe2lmKDE9PT1lKXJldHVybiB0aGlzLl9zdHJbdGhpcy5faW5kZXgrK107dmFyIHQ9dGhpcy5faW5kZXg7cmV0dXJuIHRoaXMuc2VlayhlKSx0aGlzLl9zdHIuc2xpY2UodCx0aGlzLl9pbmRleCl9LGUucHJvdG90eXBlLnRha2VVbnRpbD1mdW5jdGlvbih0LHIpe3ZvaWQgMD09PXImJihyPSExKTtmb3IodmFyIG49dGhpcy5faW5kZXg7dGhpcy5faW5kZXg8dGhpcy5fbGVuZ3RoOyl7dmFyIGk9dGhpcy5fc3RyW3RoaXMuX2luZGV4XTtpZihpPT09dHx8ciYmZS5pc1NwYWNlKGkpKWJyZWFrO3RoaXMuX2luZGV4Kyt9cmV0dXJuIHRoaXMuX3N0ci5zbGljZShuLHRoaXMuX2luZGV4KX0sZS5wcm90b3R5cGUudGFrZVVudGlsMj1mdW5jdGlvbih0LHIsbil7dm9pZCAwPT09biYmKG49ITEpO2Zvcih2YXIgaT10aGlzLl9pbmRleDt0aGlzLl9pbmRleDx0aGlzLl9sZW5ndGg7KXt2YXIgbz10aGlzLl9zdHJbdGhpcy5faW5kZXhdO2lmKG89PT10fHxvPT09cnx8biYmZS5pc1NwYWNlKG8pKWJyZWFrO3RoaXMuX2luZGV4Kyt9cmV0dXJuIHRoaXMuX3N0ci5zbGljZShpLHRoaXMuX2luZGV4KX0sZS5wcm90b3R5cGUudGFrZVVudGlsU3RhcnRzV2l0aD1mdW5jdGlvbih0LHIpe3ZvaWQgMD09PXImJihyPSExKTtmb3IodmFyIG49dGhpcy5faW5kZXgsaT10Lmxlbmd0aDt0aGlzLl9pbmRleDx0aGlzLl9sZW5ndGg7KXtmb3IodmFyIG89ITAsYT0wO2E8aTthKyspe3ZhciBzPXRoaXMuX3N0clt0aGlzLl9pbmRleCthXSx1PXRbYV07aWYociYmZS5pc1NwYWNlKHMpKXJldHVybiB0aGlzLl9zdHIuc2xpY2Uobix0aGlzLl9pbmRleCk7aWYocyE9PXUpe3RoaXMuX2luZGV4Kyssbz0hMTticmVha319aWYobylyZXR1cm4gdGhpcy5fc3RyLnNsaWNlKG4sdGhpcy5faW5kZXgpfXJldHVybiB0aGlzLl9pbmRleD10aGlzLl9sZW5ndGgsdGhpcy5fc3RyLnNsaWNlKG4pfSxlLnByb3RvdHlwZS5za2lwVW50aWw9ZnVuY3Rpb24oZSl7Zm9yKDt0aGlzLl9pbmRleDx0aGlzLl9sZW5ndGg7KXtpZih0aGlzLl9zdHJbdGhpcy5faW5kZXhdPT09ZSlicmVhazt0aGlzLl9pbmRleCsrfX0sZS5pc1doaXRlU3BhY2VUb2tlbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5kYXRhLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtpZihcIiBcIiE9PW4mJlwiXFxuXCIhPT1uJiZcIlxcclwiIT09biYmXCJcXHRcIiE9PW4mJlwiXFxmXCIhPT1uKXJldHVybiExfXJldHVybiEwfSxlLmlzU3BhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuXCIgXCI9PT1lfHxcIlxcblwiPT09ZXx8XCJcXHJcIj09PWV8fFwiXFx0XCI9PT1lfSxlLmlzUXVvdGU9ZnVuY3Rpb24oZSl7cmV0dXJuJ1wiJz09PWV8fFwiJ1wiPT09ZX0sZS5wcm90b3R5cGUudGhyb3dFcnJvcj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9L1xcclxcbnxcXHJ8XFxuL2cscj1udWxsLG49MCxpPTAsbz10aGlzLl9zdHIubGVuZ3RoO251bGwhPT0ocj10LmV4ZWModGhpcy5fc3RyKSkmJm51bGwhPT1yOylpZihuKyssci5pbmRleDx0aGlzLl9pbmRleCYmKGk9dC5sYXN0SW5kZXgpLHIuaW5kZXg+dGhpcy5faW5kZXgpe289ci5pbmRleDticmVha310aHJvdyB0aGlzLmVycj17bGluZTpuLGNvbDp0aGlzLl9pbmRleC1pLGluZGV4OnRoaXMuX2luZGV4LHN0cjp0aGlzLl9zdHIuc3Vic3RyaW5nKGksbyl9LG5ldyBFcnJvcihlK1wiXFxuSW5kZXg6IFwiK3RoaXMuZXJyLmluZGV4K1wiXFxuTG46IFwiK3RoaXMuZXJyLmxpbmUrXCIsIENvbDogXCIrdGhpcy5lcnIuY29sK1wiXFxuSW5wdXQ6IFwiK3RoaXMuZXJyLnN0cil9LGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW5kZXg9MCx7bmV4dDpmdW5jdGlvbigpe3ZhciBlPXRoaXMubmV4dFRva2VuKCk7cmV0dXJuIGUudHlwZT09PWkuVG9rZW5UeXBlLkVPRj97ZG9uZTohMCx2YWx1ZTpudWxsfTp7ZG9uZTohMSx2YWx1ZTplfX0uYmluZCh0aGlzKX19LGV9KCk7dC5YTUxTdHJpbmdMZXhlcj1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOSk7ZS5leHBvcnRzPW5ldyBuKHtpbmNsdWRlOltyKDE4MildfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM5KTtlLmV4cG9ydHM9bmV3IG4oe2luY2x1ZGU6W3IoMTEzKV0saW1wbGljaXQ6W3IoMjg5KSxyKDI5MCkscigyOTEpLHIoMjkyKV19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOTEpLGk9cigxKSxvPXIoMyksYT1yKDc3KSxzPXIoMTA5KTtmdW5jdGlvbiB1KGUsdCl7dmFyIHI9Yyh2b2lkIDA9PT1lfHxsKGUpP2U6bi5EZWZhdWx0QnVpbGRlck9wdGlvbnMpLGk9bChlKT90OmUsbz1zLmNyZWF0ZURvY3VtZW50KCk7aChvLHIpO3ZhciB1PW5ldyBhLlhNTEJ1aWxkZXJJbXBsKG8pO3JldHVybiB2b2lkIDAhPT1pJiZ1LmVsZShpKSx1fWZ1bmN0aW9uIGwoZSl7aWYoIWkuaXNQbGFpbk9iamVjdChlKSlyZXR1cm4hMTtmb3IodmFyIHQgaW4gZSlpZihlLmhhc093blByb3BlcnR5KHQpJiYhbi5YTUxCdWlsZGVyT3B0aW9uS2V5cy5oYXModCkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gYyhlKXt2b2lkIDA9PT1lJiYoZT17fSk7dmFyIHQ9aS5hcHBseURlZmF1bHRzKGUsbi5EZWZhdWx0QnVpbGRlck9wdGlvbnMpO2lmKDA9PT10LmNvbnZlcnQuYXR0Lmxlbmd0aHx8MD09PXQuY29udmVydC5pbnMubGVuZ3RofHwwPT09dC5jb252ZXJ0LnRleHQubGVuZ3RofHwwPT09dC5jb252ZXJ0LmNkYXRhLmxlbmd0aHx8MD09PXQuY29udmVydC5jb21tZW50Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJKUyBvYmplY3QgY29udmVydGVyIHN0cmluZ3MgY2Fubm90IGJlIHplcm8gbGVuZ3RoLlwiKTtyZXR1cm4gdH1mdW5jdGlvbiBoKGUsdCxyKXt2YXIgbj1lO24uX3htbEJ1aWxkZXJPcHRpb25zPXQsbi5faXNGcmFnbWVudD1yfXQuYnVpbGRlcj1mdW5jdGlvbihlLHQpe3ZhciByPWMobChlKT9lOm4uRGVmYXVsdEJ1aWxkZXJPcHRpb25zKSxzPW8uR3VhcmQuaXNOb2RlKGUpfHxpLmlzQXJyYXkoZSk/ZTp0O2lmKHZvaWQgMD09PXMpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMuXCIpO2lmKGkuaXNBcnJheShzKSl7Zm9yKHZhciB1PVtdLGg9MDtoPHMubGVuZ3RoO2grKyl7dmFyIHA9bmV3IGEuWE1MQnVpbGRlckltcGwoc1toXSk7cC5zZXQociksdS5wdXNoKHApfXJldHVybiB1fXZhciBmPW5ldyBhLlhNTEJ1aWxkZXJJbXBsKHMpO3JldHVybiBmLnNldChyKSxmfSx0LmNyZWF0ZT11LHQuZnJhZ21lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1jKHZvaWQgMD09PWV8fGwoZSk/ZTpuLkRlZmF1bHRCdWlsZGVyT3B0aW9ucyksaT1sKGUpP3Q6ZSxvPXMuY3JlYXRlRG9jdW1lbnQoKTtoKG8sciwhMCk7dmFyIHU9bmV3IGEuWE1MQnVpbGRlckltcGwoby5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO3JldHVybiB2b2lkIDAhPT1pJiZ1LmVsZShpKSx1fSx0LmNvbnZlcnQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpLG8sYTtyZXR1cm4gbChlKSYmdm9pZCAwIT09dD8oaT1lLG89dCxhPXIpOihpPW4uRGVmYXVsdEJ1aWxkZXJPcHRpb25zLG89ZSxhPXR8fHZvaWQgMCksdShpLG8pLmVuZChhKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDc3KTt0LmJ1aWxkZXI9bi5idWlsZGVyLHQuY3JlYXRlPW4uY3JlYXRlLHQuZnJhZ21lbnQ9bi5mcmFnbWVudCx0LmNvbnZlcnQ9bi5jb252ZXJ0LHQuY3JlYXRlQ0I9bi5jcmVhdGVDQix0LmZyYWdtZW50Q0I9bi5mcmFnbWVudENCfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigzMSkscigzMikscigzMykscigxOTEpLHIoMTkyKSxyKDE5NCkscig2NCkscigxOSkscigxOTgpLHIoMTk5KSxyKDg5KSxyKDIwMSkscig2NSkscigyMCkscig2NikscigyMikscigyMyk7dmFyIG49dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LGk9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cig5MSksYT1yKDEpLHM9cigyMTcpLHU9cigyKSxsPXIoMyksYz1yKDApLGg9cigxMDkpLHA9cig3KSxmPXIoMjc2KSxkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLl9kb21Ob2RlPWV9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIm5vZGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RvbU5vZGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwib3B0aW9uc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3B0aW9uc30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX29wdGlvbnM9YS5hcHBseURlZmF1bHRzKGEuYXBwbHlEZWZhdWx0cyh0aGlzLl9vcHRpb25zLGUsITApLG8uRGVmYXVsdEJ1aWxkZXJPcHRpb25zKSx0aGlzfSxlLnByb3RvdHlwZS5lbGU9ZnVuY3Rpb24odCxyLGkpe3ZhciBvLHMsdSxsLHAsZDtpZihhLmlzT2JqZWN0KHQpKXJldHVybiBuZXcgZi5PYmplY3RSZWFkZXIodGhpcy5fb3B0aW9ucykucGFyc2UodGhpcyx0KTtpZihudWxsIT09dCYmL15cXHMqPC8udGVzdCh0KSlyZXR1cm4gbmV3IGYuWE1MUmVhZGVyKHRoaXMuX29wdGlvbnMpLnBhcnNlKHRoaXMsdCk7aWYobnVsbCE9PXQmJi9eXFxzKltcXHtcXFtdLy50ZXN0KHQpKXJldHVybiBuZXcgZi5KU09OUmVhZGVyKHRoaXMuX29wdGlvbnMpLnBhcnNlKHRoaXMsdCk7aWYobnVsbCE9PXQmJi9eKFxccyp8KCMuKil8KCUuKikpKi0tLS8udGVzdCh0KSlyZXR1cm4gbmV3IGYuWUFNTFJlYWRlcih0aGlzLl9vcHRpb25zKS5wYXJzZSh0aGlzLHQpO2lmKChudWxsPT09dHx8YS5pc1N0cmluZyh0KSkmJmEuaXNTdHJpbmcocikpbD0obz1uKFt0LHIsaV0sMykpWzBdLHA9b1sxXSxkPW9bMl07ZWxzZXtpZihudWxsPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJFbGVtZW50IG5hbWUgY2Fubm90IGJlIG51bGwuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTtsPShzPW4oW3ZvaWQgMCx0LGEuaXNPYmplY3Qocik/cjp2b2lkIDBdLDMpKVswXSxwPXNbMV0sZD1zWzJdfWlmKGQmJihkPWEuZ2V0VmFsdWUoZCkpLGw9KHU9bih0aGlzLl9leHRyYWN0TmFtZXNwYWNlKGguc2FuaXRpemVJbnB1dChsLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCksaC5zYW5pdGl6ZUlucHV0KHAsdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSwhMCksMikpWzBdLHA9dVsxXSx2b2lkIDA9PT1sKXt2YXIgbT1uKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShwKSwxKVswXTtsPXRoaXMubm9kZS5sb29rdXBOYW1lc3BhY2VVUkkobSl9dmFyIHk9bnVsbCE9bD90aGlzLl9kb2MuY3JlYXRlRWxlbWVudE5TKGwscCk6dGhpcy5fZG9jLmNyZWF0ZUVsZW1lbnQocCk7dGhpcy5ub2RlLmFwcGVuZENoaWxkKHkpO3ZhciB2PW5ldyBlKHkpLF89dGhpcy5fZG9jLmRvY3R5cGU7aWYoeT09PXRoaXMuX2RvYy5kb2N1bWVudEVsZW1lbnQmJm51bGwhPT1fKXt2YXIgZz10aGlzLl9kb2MuaW1wbGVtZW50YXRpb24uY3JlYXRlRG9jdW1lbnRUeXBlKHRoaXMuX2RvYy5kb2N1bWVudEVsZW1lbnQudGFnTmFtZSxfLnB1YmxpY0lkLF8uc3lzdGVtSWQpO3RoaXMuX2RvYy5yZXBsYWNlQ2hpbGQoZyxfKX1yZXR1cm4gZCYmIWEuaXNFbXB0eShkKSYmdi5hdHQoZCksdn0sZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy51cCgpO3JldHVybiBlLm5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKSxlfSxlLnByb3RvdHlwZS5hdHQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpLG8scyx1LGYsZCxtPXRoaXM7aWYoYS5pc01hcChlKXx8YS5pc09iamVjdChlKSlyZXR1cm4gYS5mb3JFYWNoT2JqZWN0KGUsKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG0uYXR0KGUsdCl9KSx0aGlzKSx0aGlzO2lmKG51bGwhPWUmJihlPWEuZ2V0VmFsdWUoZStcIlwiKSksbnVsbCE9dCYmKHQ9YS5nZXRWYWx1ZSh0K1wiXCIpKSxudWxsIT1yJiYocj1hLmdldFZhbHVlKHIrXCJcIikpLG51bGwhPT1lJiYhYS5pc1N0cmluZyhlKXx8IWEuaXNTdHJpbmcodCl8fG51bGwhPT1yJiYhYS5pc1N0cmluZyhyKSl7aWYoIWEuaXNTdHJpbmcoZSl8fG51bGwhPXQmJiFhLmlzU3RyaW5nKHQpKXRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBuYW1lIGFuZCB2YWx1ZSBub3Qgc3BlY2lmaWVkLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7dT0obz1uKFt2b2lkIDAsZSx0XSwzKSlbMF0sZj1vWzFdLGQ9b1syXX1lbHNlIHU9KGk9bihbZSx0LHJdLDMpKVswXSxmPWlbMV0sZD1pWzJdO2lmKHRoaXMuX29wdGlvbnMua2VlcE51bGxBdHRyaWJ1dGVzJiZudWxsPT1kKWQ9XCJcIjtlbHNlIGlmKG51bGw9PWQpcmV0dXJuIHRoaXM7aWYoIWwuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzLm5vZGUpKXRocm93IG5ldyBFcnJvcihcIkFuIGF0dHJpYnV0ZSBjYW4gb25seSBiZSBhc3NpZ25lZCB0byBhbiBlbGVtZW50IG5vZGUuXCIpO3ZhciB5PXRoaXMubm9kZTt1PShzPW4odGhpcy5fZXh0cmFjdE5hbWVzcGFjZSh1LGYsITEpLDIpKVswXSxmPXNbMV0sZj1oLnNhbml0aXplSW5wdXQoZix0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpLHU9aC5zYW5pdGl6ZUlucHV0KHUsdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSxkPWguc2FuaXRpemVJbnB1dChkLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCk7dmFyIHY9bihjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUoZiksMiksXz12WzBdLGc9dlsxXSxiPW4oYy5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKHkucHJlZml4P3kucHJlZml4K1wiOlwiK3kubG9jYWxOYW1lOnkubG9jYWxOYW1lKSwxKVswXSx4PW51bGw7cmV0dXJuXCJ4bWxuc1wiPT09Xz8odT1wLm5hbWVzcGFjZS5YTUxOUyxudWxsPT09eS5uYW1lc3BhY2VVUkkmJmI9PT1nJiYoeD1kKSk6bnVsbD09PV8mJlwieG1sbnNcIj09PWcmJm51bGw9PT1iJiYodT1wLm5hbWVzcGFjZS5YTUxOUyx4PWQpLG51bGwhPT14JiYodGhpcy5fdXBkYXRlTmFtZXNwYWNlKHgpLHk9dGhpcy5ub2RlKSx2b2lkIDAhPT11P3kuc2V0QXR0cmlidXRlTlModSxmLGQpOnkuc2V0QXR0cmlidXRlKGYsZCksdGhpc30sZS5wcm90b3R5cGUucmVtb3ZlQXR0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpPXRoaXM7aWYoIWwuR3VhcmQuaXNFbGVtZW50Tm9kZSh0aGlzLm5vZGUpKXRocm93IG5ldyBFcnJvcihcIkFuIGF0dHJpYnV0ZSBjYW4gb25seSBiZSByZW1vdmVkIGZyb20gYW4gZWxlbWVudCBub2RlLlwiKTtpZihlPWEuZ2V0VmFsdWUoZSksdm9pZCAwIT09dCYmKHQ9YS5nZXRWYWx1ZSh0KSksbnVsbCE9PWUmJnZvaWQgMD09PXQpbj1lO2Vsc2V7aWYobnVsbCE9PWUmJiFhLmlzU3RyaW5nKGUpfHx2b2lkIDA9PT10KXRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBuYW1lc3BhY2UgbXVzdCBiZSBhIHN0cmluZy4gXCIrdGhpcy5fZGVidWdJbmZvKCkpO3I9ZSxuPXR9cmV0dXJuIGEuaXNBcnJheShuKXx8YS5pc1NldChuKT9hLmZvckVhY2hBcnJheShuLChmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09cj9pLnJlbW92ZUF0dChlKTppLnJlbW92ZUF0dChyLGUpfSksdGhpcyk6dm9pZCAwIT09cj8obj1oLnNhbml0aXplSW5wdXQobix0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpLHI9aC5zYW5pdGl6ZUlucHV0KHIsdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSx0aGlzLm5vZGUucmVtb3ZlQXR0cmlidXRlTlMocixuKSk6KG49aC5zYW5pdGl6ZUlucHV0KG4sdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSx0aGlzLm5vZGUucmVtb3ZlQXR0cmlidXRlKG4pKSx0aGlzfSxlLnByb3RvdHlwZS50eHQ9ZnVuY3Rpb24oZSl7aWYobnVsbD09ZSl7aWYoIXRoaXMuX29wdGlvbnMua2VlcE51bGxOb2RlcylyZXR1cm4gdGhpcztlPVwiXCJ9dmFyIHQ9dGhpcy5fZG9jLmNyZWF0ZVRleHROb2RlKGguc2FuaXRpemVJbnB1dChlLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCkpO3JldHVybiB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodCksdGhpc30sZS5wcm90b3R5cGUuY29tPWZ1bmN0aW9uKGUpe2lmKG51bGw9PWUpe2lmKCF0aGlzLl9vcHRpb25zLmtlZXBOdWxsTm9kZXMpcmV0dXJuIHRoaXM7ZT1cIlwifXZhciB0PXRoaXMuX2RvYy5jcmVhdGVDb21tZW50KGguc2FuaXRpemVJbnB1dChlLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCkpO3JldHVybiB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodCksdGhpc30sZS5wcm90b3R5cGUuZGF0PWZ1bmN0aW9uKGUpe2lmKG51bGw9PWUpe2lmKCF0aGlzLl9vcHRpb25zLmtlZXBOdWxsTm9kZXMpcmV0dXJuIHRoaXM7ZT1cIlwifXZhciB0PXRoaXMuX2RvYy5jcmVhdGVDREFUQVNlY3Rpb24oaC5zYW5pdGl6ZUlucHV0KGUsdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSk7cmV0dXJuIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0KSx0aGlzfSxlLnByb3RvdHlwZS5pbnM9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO2lmKHZvaWQgMD09PXQmJih0PVwiXCIpLG51bGw9PXQpe2lmKCF0aGlzLl9vcHRpb25zLmtlZXBOdWxsTm9kZXMpcmV0dXJuIHRoaXM7dD1cIlwifWlmKGEuaXNBcnJheShlKXx8YS5pc1NldChlKSlhLmZvckVhY2hBcnJheShlLChmdW5jdGlvbihlKXt2YXIgdD0oZSs9XCJcIikuaW5kZXhPZihcIiBcIiksbj0tMT09PXQ/ZTplLnN1YnN0cigwLHQpLGk9LTE9PT10P1wiXCI6ZS5zdWJzdHIodCsxKTtyLmlucyhuLGkpfSksdGhpcyk7ZWxzZSBpZihhLmlzTWFwKGUpfHxhLmlzT2JqZWN0KGUpKWEuZm9yRWFjaE9iamVjdChlLChmdW5jdGlvbihlLHQpe3JldHVybiByLmlucyhlLHQpfSksdGhpcyk7ZWxzZXt2YXIgbj10aGlzLl9kb2MuY3JlYXRlUHJvY2Vzc2luZ0luc3RydWN0aW9uKGguc2FuaXRpemVJbnB1dChlLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCksaC5zYW5pdGl6ZUlucHV0KHQsdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSk7dGhpcy5ub2RlLmFwcGVuZENoaWxkKG4pfXJldHVybiB0aGlzfSxlLnByb3RvdHlwZS5kZWM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX29wdGlvbnMudmVyc2lvbj1lLnZlcnNpb258fFwiMS4wXCIsdGhpcy5fb3B0aW9ucy5lbmNvZGluZz1lLmVuY29kaW5nLHRoaXMuX29wdGlvbnMuc3RhbmRhbG9uZT1lLnN0YW5kYWxvbmUsdGhpc30sZS5wcm90b3R5cGUuZHRkPWZ1bmN0aW9uKGUpe3ZhciB0PWguc2FuaXRpemVJbnB1dChlJiZlLm5hbWV8fCh0aGlzLl9kb2MuZG9jdW1lbnRFbGVtZW50P3RoaXMuX2RvYy5kb2N1bWVudEVsZW1lbnQudGFnTmFtZTpcIlJPT1RcIiksdGhpcy5fb3B0aW9ucy5pbnZhbGlkQ2hhclJlcGxhY2VtZW50KSxyPWguc2FuaXRpemVJbnB1dChlJiZlLnB1YklEfHxcIlwiLHRoaXMuX29wdGlvbnMuaW52YWxpZENoYXJSZXBsYWNlbWVudCksbj1oLnNhbml0aXplSW5wdXQoZSYmZS5zeXNJRHx8XCJcIix0aGlzLl9vcHRpb25zLmludmFsaWRDaGFyUmVwbGFjZW1lbnQpO2lmKG51bGwhPT10aGlzLl9kb2MuZG9jdW1lbnRFbGVtZW50JiZ0IT09dGhpcy5fZG9jLmRvY3VtZW50RWxlbWVudC50YWdOYW1lKXRocm93IG5ldyBFcnJvcihcIkRvY1R5cGUgbmFtZSBkb2VzIG5vdCBtYXRjaCBkb2N1bWVudCBlbGVtZW50IG5hbWUuXCIpO3ZhciBpPXRoaXMuX2RvYy5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudFR5cGUodCxyLG4pO3JldHVybiBudWxsIT09dGhpcy5fZG9jLmRvY3R5cGU/dGhpcy5fZG9jLnJlcGxhY2VDaGlsZChpLHRoaXMuX2RvYy5kb2N0eXBlKTp0aGlzLl9kb2MuaW5zZXJ0QmVmb3JlKGksdGhpcy5fZG9jLmRvY3VtZW50RWxlbWVudCksdGhpc30sZS5wcm90b3R5cGUuaW1wb3J0PWZ1bmN0aW9uKHQpe3ZhciByLG8sYT10aGlzLl9kb21Ob2RlLHM9dGhpcy5fZG9jLHU9dC5ub2RlO2lmKGwuR3VhcmQuaXNEb2N1bWVudE5vZGUodSkpe3ZhciBoPXUuZG9jdW1lbnRFbGVtZW50O2lmKG51bGw9PT1oKXRocm93IG5ldyBFcnJvcihcIkltcG9ydGVkIGRvY3VtZW50IGhhcyBubyBkb2N1bWVudCBlbGVtZW50IG5vZGUuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTt2YXIgcD1zLmltcG9ydE5vZGUoaCwhMCk7YS5hcHBlbmRDaGlsZChwKTt2YXIgZj1uKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShwLnByZWZpeD9wLnByZWZpeCtcIjpcIitwLmxvY2FsTmFtZTpwLmxvY2FsTmFtZSksMSlbMF0sZD1hLmxvb2t1cE5hbWVzcGFjZVVSSShmKTtuZXcgZShwKS5fdXBkYXRlTmFtZXNwYWNlKGQpfWVsc2UgaWYobC5HdWFyZC5pc0RvY3VtZW50RnJhZ21lbnROb2RlKHUpKXRyeXtmb3IodmFyIG09aSh1LmNoaWxkTm9kZXMpLHk9bS5uZXh0KCk7IXkuZG9uZTt5PW0ubmV4dCgpKXt2YXIgdj15LnZhbHVlO3A9cy5pbXBvcnROb2RlKHYsITApO2lmKGEuYXBwZW5kQ2hpbGQocCksbC5HdWFyZC5pc0VsZW1lbnROb2RlKHApKXtmPW4oYy5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKHAucHJlZml4P3AucHJlZml4K1wiOlwiK3AubG9jYWxOYW1lOnAubG9jYWxOYW1lKSwxKVswXSxkPWEubG9va3VwTmFtZXNwYWNlVVJJKGYpO25ldyBlKHApLl91cGRhdGVOYW1lc3BhY2UoZCl9fX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXt5JiYheS5kb25lJiYobz1tLnJldHVybikmJm8uY2FsbChtKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19ZWxzZXtwPXMuaW1wb3J0Tm9kZSh1LCEwKTtpZihhLmFwcGVuZENoaWxkKHApLGwuR3VhcmQuaXNFbGVtZW50Tm9kZShwKSl7Zj1uKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShwLnByZWZpeD9wLnByZWZpeCtcIjpcIitwLmxvY2FsTmFtZTpwLmxvY2FsTmFtZSksMSlbMF0sZD1hLmxvb2t1cE5hbWVzcGFjZVVSSShmKTtuZXcgZShwKS5fdXBkYXRlTmFtZXNwYWNlKGQpfX1yZXR1cm4gdGhpc30sZS5wcm90b3R5cGUuZG9jPWZ1bmN0aW9uKCl7aWYodGhpcy5fZG9jLl9pc0ZyYWdtZW50KXtmb3IodmFyIHQ9dGhpcy5ub2RlO3QmJnQubm9kZVR5cGUhPT11Lk5vZGVUeXBlLkRvY3VtZW50RnJhZ21lbnQ7KXQ9dC5wYXJlbnROb2RlO2lmKG51bGw9PT10KXRocm93IG5ldyBFcnJvcihcIk5vZGUgaGFzIG5vIHBhcmVudCBub2RlIHdoaWxlIHNlYXJjaGluZyBmb3IgZG9jdW1lbnQgZnJhZ21lbnQgYW5jZXN0b3IuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTtyZXR1cm4gbmV3IGUodCl9cmV0dXJuIG5ldyBlKHRoaXMuX2RvYyl9LGUucHJvdG90eXBlLnJvb3Q9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9kb2MuZG9jdW1lbnRFbGVtZW50O2lmKCF0KXRocm93IG5ldyBFcnJvcihcIkRvY3VtZW50IHJvb3QgZWxlbWVudCBpcyBudWxsLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7cmV0dXJuIG5ldyBlKHQpfSxlLnByb3RvdHlwZS51cD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2RvbU5vZGUucGFyZW50Tm9kZTtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnQgbm9kZSBpcyBudWxsLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7cmV0dXJuIG5ldyBlKHQpfSxlLnByb3RvdHlwZS5wcmV2PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZG9tTm9kZS5wcmV2aW91c1NpYmxpbmc7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiUHJldmlvdXMgc2libGluZyBub2RlIGlzIG51bGwuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTtyZXR1cm4gbmV3IGUodCl9LGUucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9kb21Ob2RlLm5leHRTaWJsaW5nO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIk5leHQgc2libGluZyBub2RlIGlzIG51bGwuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTtyZXR1cm4gbmV3IGUodCl9LGUucHJvdG90eXBlLmZpcnN0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZG9tTm9kZS5maXJzdENoaWxkO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGNoaWxkIG5vZGUgaXMgbnVsbC4gXCIrdGhpcy5fZGVidWdJbmZvKCkpO3JldHVybiBuZXcgZSh0KX0sZS5wcm90b3R5cGUubGFzdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2RvbU5vZGUubGFzdENoaWxkO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIkxhc3QgY2hpbGQgbm9kZSBpcyBudWxsLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSk7cmV0dXJuIG5ldyBlKHQpfSxlLnByb3RvdHlwZS5lYWNoPWZ1bmN0aW9uKHQscixuLGkpe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1uJiYobj0hMSk7Zm9yKHZhciBvPXRoaXMuX2dldEZpcnN0RGVzY2VuZGFudE5vZGUodGhpcy5fZG9tTm9kZSxyLG4pO29bMF07KXt2YXIgYT10aGlzLl9nZXROZXh0RGVzY2VuZGFudE5vZGUodGhpcy5fZG9tTm9kZSxvWzBdLG4sb1sxXSxvWzJdKTt0LmNhbGwoaSxuZXcgZShvWzBdKSxvWzFdLG9bMl0pLG89YX1yZXR1cm4gdGhpc30sZS5wcm90b3R5cGUubWFwPWZ1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1yJiYocj0hMSk7dmFyIGk9W107cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24odCxyLG8pe3JldHVybiBpLnB1c2goZS5jYWxsKG4sdCxyLG8pKX0pLHQsciksaX0sZS5wcm90b3R5cGUucmVkdWNlPWZ1bmN0aW9uKGUsdCxyLG4saSl7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgbz10O3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gbz1lLmNhbGwoaSxvLHQscixuKX0pLHIsbiksb30sZS5wcm90b3R5cGUuZmluZD1mdW5jdGlvbih0LHIsbixpKXt2b2lkIDA9PT1yJiYocj0hMSksdm9pZCAwPT09biYmKG49ITEpO2Zvcih2YXIgbz10aGlzLl9nZXRGaXJzdERlc2NlbmRhbnROb2RlKHRoaXMuX2RvbU5vZGUscixuKTtvWzBdOyl7dmFyIGE9bmV3IGUob1swXSk7aWYodC5jYWxsKGksYSxvWzFdLG9bMl0pKXJldHVybiBhO289dGhpcy5fZ2V0TmV4dERlc2NlbmRhbnROb2RlKHRoaXMuX2RvbU5vZGUsb1swXSxuLG9bMV0sb1syXSl9fSxlLnByb3RvdHlwZS5maWx0ZXI9ZnVuY3Rpb24oZSx0LHIsbil7dm9pZCAwPT09dCYmKHQ9ITEpLHZvaWQgMD09PXImJihyPSExKTt2YXIgaT1bXTtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbih0LHIsbyl7ZS5jYWxsKG4sdCxyLG8pJiZpLnB1c2godCl9KSx0LHIpLGl9LGUucHJvdG90eXBlLmV2ZXJ5PWZ1bmN0aW9uKHQscixuLGkpe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1uJiYobj0hMSk7Zm9yKHZhciBvPXRoaXMuX2dldEZpcnN0RGVzY2VuZGFudE5vZGUodGhpcy5fZG9tTm9kZSxyLG4pO29bMF07KXt2YXIgYT1uZXcgZShvWzBdKTtpZighdC5jYWxsKGksYSxvWzFdLG9bMl0pKXJldHVybiExO289dGhpcy5fZ2V0TmV4dERlc2NlbmRhbnROb2RlKHRoaXMuX2RvbU5vZGUsb1swXSxuLG9bMV0sb1syXSl9cmV0dXJuITB9LGUucHJvdG90eXBlLnNvbWU9ZnVuY3Rpb24odCxyLG4saSl7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW4mJihuPSExKTtmb3IodmFyIG89dGhpcy5fZ2V0Rmlyc3REZXNjZW5kYW50Tm9kZSh0aGlzLl9kb21Ob2RlLHIsbik7b1swXTspe3ZhciBhPW5ldyBlKG9bMF0pO2lmKHQuY2FsbChpLGEsb1sxXSxvWzJdKSlyZXR1cm4hMDtvPXRoaXMuX2dldE5leHREZXNjZW5kYW50Tm9kZSh0aGlzLl9kb21Ob2RlLG9bMF0sbixvWzFdLG9bMl0pfXJldHVybiExfSxlLnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PXQmJih0PSExKTt2YXIgcj1bXTtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gci5wdXNoKGUpfSksZSx0KSxyfSxlLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09KGU9ZXx8e30pLmZvcm1hdCYmKGUuZm9ybWF0PVwieG1sXCIpLHRoaXMuX3NlcmlhbGl6ZShlKX0sZS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PShlPWV8fHt9KS5mb3JtYXQmJihlLmZvcm1hdD1cIm9iamVjdFwiKSx0aGlzLl9zZXJpYWxpemUoZSl9LGUucHJvdG90eXBlLmVuZD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09KGU9ZXx8e30pLmZvcm1hdCYmKGUuZm9ybWF0PVwieG1sXCIpLHRoaXMuZG9jKCkuX3NlcmlhbGl6ZShlKX0sZS5wcm90b3R5cGUuX2dldEZpcnN0RGVzY2VuZGFudE5vZGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0P1t0aGlzLl9kb21Ob2RlLDAsMF06cj90aGlzLl9nZXROZXh0RGVzY2VuZGFudE5vZGUoZSxlLHIsMCwwKTpbdGhpcy5fZG9tTm9kZS5maXJzdENoaWxkLDAsMV19LGUucHJvdG90eXBlLl9nZXROZXh0RGVzY2VuZGFudE5vZGU9ZnVuY3Rpb24oZSx0LHIsbixpKXtpZighcilyZXR1cm4gZT09PXQ/W3QuZmlyc3RDaGlsZCwwLGkrMV06W3QubmV4dFNpYmxpbmcsbisxLGldO2lmKHQuZmlyc3RDaGlsZClyZXR1cm5bdC5maXJzdENoaWxkLDAsaSsxXTtpZih0PT09ZSlyZXR1cm5bbnVsbCwtMSwtMV07aWYodC5uZXh0U2libGluZylyZXR1cm5bdC5uZXh0U2libGluZyxuKzEsaV07Zm9yKHZhciBvPXQucGFyZW50Tm9kZTtvJiZvIT09ZTspe2lmKG8ubmV4dFNpYmxpbmcpcmV0dXJuW28ubmV4dFNpYmxpbmcsYy50cmVlX2luZGV4KG8ubmV4dFNpYmxpbmcpLGktMV07bz1vLnBhcmVudE5vZGUsaS0tfXJldHVybltudWxsLC0xLC0xXX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZT1mdW5jdGlvbihlKXtpZihcInhtbFwiPT09ZS5mb3JtYXQpcmV0dXJuIG5ldyBzLlhNTFdyaXRlcih0aGlzLl9vcHRpb25zLGUpLnNlcmlhbGl6ZSh0aGlzLm5vZGUpO2lmKFwibWFwXCI9PT1lLmZvcm1hdClyZXR1cm4gbmV3IHMuTWFwV3JpdGVyKHRoaXMuX29wdGlvbnMsZSkuc2VyaWFsaXplKHRoaXMubm9kZSk7aWYoXCJvYmplY3RcIj09PWUuZm9ybWF0KXJldHVybiBuZXcgcy5PYmplY3RXcml0ZXIodGhpcy5fb3B0aW9ucyxlKS5zZXJpYWxpemUodGhpcy5ub2RlKTtpZihcImpzb25cIj09PWUuZm9ybWF0KXJldHVybiBuZXcgcy5KU09OV3JpdGVyKHRoaXMuX29wdGlvbnMsZSkuc2VyaWFsaXplKHRoaXMubm9kZSk7aWYoXCJ5YW1sXCI9PT1lLmZvcm1hdClyZXR1cm4gbmV3IHMuWUFNTFdyaXRlcih0aGlzLl9vcHRpb25zLGUpLnNlcmlhbGl6ZSh0aGlzLm5vZGUpO3Rocm93IG5ldyBFcnJvcihcIkludmFsaWQgd3JpdGVyIGZvcm1hdDogXCIrZS5mb3JtYXQrXCIuIFwiK3RoaXMuX2RlYnVnSW5mbygpKX0sZS5wcm90b3R5cGUuX2V4dHJhY3ROYW1lc3BhY2U9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQuaW5kZXhPZihcIkBcIik7aWYobj4wJiYodm9pZCAwPT09ZSYmKGU9dC5zbGljZShuKzEpKSx0PXQuc2xpY2UoMCxuKSksdm9pZCAwPT09ZSllPXI/dGhpcy5fb3B0aW9ucy5kZWZhdWx0TmFtZXNwYWNlLmVsZTp0aGlzLl9vcHRpb25zLmRlZmF1bHROYW1lc3BhY2UuYXR0O2Vsc2UgaWYobnVsbCE9PWUmJlwiQFwiPT09ZVswXSl7dmFyIGk9ZS5zbGljZSgxKTtpZih2b2lkIDA9PT0oZT10aGlzLl9vcHRpb25zLm5hbWVzcGFjZUFsaWFzW2ldKSl0aHJvdyBuZXcgRXJyb3IoXCJOYW1lc3BhY2UgYWxpYXMgYFwiK2krXCJgIGlzIG5vdCBkZWZpbmVkLiBcIit0aGlzLl9kZWJ1Z0luZm8oKSl9cmV0dXJuW2UsdF19LGUucHJvdG90eXBlLl91cGRhdGVOYW1lc3BhY2U9ZnVuY3Rpb24odCl7dmFyIHIsbyxhLHMsdT10aGlzLl9kb21Ob2RlO2lmKGwuR3VhcmQuaXNFbGVtZW50Tm9kZSh1KSYmbnVsbCE9PXQmJnUubmFtZXNwYWNlVVJJIT09dCl7dmFyIGg9bihjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUodS5wcmVmaXg/dS5wcmVmaXgrXCI6XCIrdS5sb2NhbE5hbWU6dS5sb2NhbE5hbWUpLDIpLHA9aFswXSxmPWhbMV0sZD1jLmNyZWF0ZV9lbGVtZW50KHRoaXMuX2RvYyxmLHQscCk7dHJ5e2Zvcih2YXIgbT1pKHUuYXR0cmlidXRlcykseT1tLm5leHQoKTsheS5kb25lO3k9bS5uZXh0KCkpe3ZhciB2PXkudmFsdWUsXz12LnByZWZpeD92LnByZWZpeCtcIjpcIit2LmxvY2FsTmFtZTp2LmxvY2FsTmFtZSxnPW4oYy5uYW1lc3BhY2VfZXh0cmFjdFFOYW1lKF8pLDEpWzBdLGI9di5uYW1lc3BhY2VVUkk7bnVsbD09PWImJm51bGwhPT1nJiYoYj11Lmxvb2t1cE5hbWVzcGFjZVVSSShnKSksbnVsbD09PWI/ZC5zZXRBdHRyaWJ1dGUoXyx2LnZhbHVlKTpkLnNldEF0dHJpYnV0ZU5TKGIsXyx2LnZhbHVlKX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7eSYmIXkuZG9uZSYmKG89bS5yZXR1cm4pJiZvLmNhbGwobSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXZhciB4PXUucGFyZW50Tm9kZTtpZihudWxsPT09eCl0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnQgbm9kZSBpcyBudWxsLlwiK3RoaXMuX2RlYnVnSW5mbygpKTt4LnJlcGxhY2VDaGlsZChkLHUpLHRoaXMuX2RvbU5vZGU9ZDt0cnl7Zm9yKHZhciB3PWkodS5jaGlsZE5vZGVzKSxFPXcubmV4dCgpOyFFLmRvbmU7RT13Lm5leHQoKSl7dmFyIEQ9RS52YWx1ZS5jbG9uZU5vZGUoITApO2lmKGQuYXBwZW5kQ2hpbGQoRCksbC5HdWFyZC5pc0VsZW1lbnROb2RlKEQpKXt2YXIgUz1uKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShELnByZWZpeD9ELnByZWZpeCtcIjpcIitELmxvY2FsTmFtZTpELmxvY2FsTmFtZSksMSlbMF0sQz1kLmxvb2t1cE5hbWVzcGFjZVVSSShTKTtuZXcgZShEKS5fdXBkYXRlTmFtZXNwYWNlKEMpfX19Y2F0Y2goZSl7YT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7RSYmIUUuZG9uZSYmKHM9dy5yZXR1cm4pJiZzLmNhbGwodyl9ZmluYWxseXtpZihhKXRocm93IGEuZXJyb3J9fX19LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIl9kb2NcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5ub2RlO2lmKGwuR3VhcmQuaXNEb2N1bWVudE5vZGUoZSkpcmV0dXJuIGU7dmFyIHQ9ZS5vd25lckRvY3VtZW50O2lmKCF0KXRocm93IG5ldyBFcnJvcihcIk93bmVyIGRvY3VtZW50IGlzIG51bGwuIFwiK3RoaXMuX2RlYnVnSW5mbygpKTtyZXR1cm4gdH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5fZGVidWdJbmZvPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubm9kZSxyPXQucGFyZW50Tm9kZTtlPWV8fHQubm9kZU5hbWU7dmFyIG49cj9yLm5vZGVOYW1lOlwiXCI7cmV0dXJuIG4/XCJub2RlOiA8XCIrZStcIj4sIHBhcmVudDogPFwiK24rXCI+XCI6XCJub2RlOiA8XCIrZStcIj5cIn0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX29wdGlvbnNcIix7Z2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fZG9jO2lmKHZvaWQgMD09PWUuX3htbEJ1aWxkZXJPcHRpb25zKXRocm93IG5ldyBFcnJvcihcIkJ1aWxkZXIgb3B0aW9ucyBpcyBub3Qgc2V0LlwiKTtyZXR1cm4gZS5feG1sQnVpbGRlck9wdGlvbnN9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9kb2MuX3htbEJ1aWxkZXJPcHRpb25zPWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0LlhNTEJ1aWxkZXJJbXBsPWR9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxpPXIoMTE3KSxvPW4uV2Vha01hcDtlLmV4cG9ydHM9XCJmdW5jdGlvblwiPT10eXBlb2YgbyYmL25hdGl2ZSBjb2RlLy50ZXN0KGkobykpfSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0NiksaT1yKDgyKSxvPXIoODUpLGE9cigxOCk7ZS5leHBvcnRzPW4oXCJSZWZsZWN0XCIsXCJvd25LZXlzXCIpfHxmdW5jdGlvbihlKXt2YXIgdD1pLmYoYShlKSkscj1vLmY7cmV0dXJuIHI/dC5jb25jYXQocihlKSk6dH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE2KSxpPXIoMTUpLG89cigxOCksYT1yKDYxKTtlLmV4cG9ydHM9bj9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHQpe28oZSk7Zm9yKHZhciByLG49YSh0KSxzPW4ubGVuZ3RoLHU9MDtzPnU7KWkuZihlLHI9blt1KytdLHRbcl0pO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDYpO2UuZXhwb3J0cz1uKFwiZG9jdW1lbnRcIixcImRvY3VtZW50RWxlbWVudFwiKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjQpLGk9cig4MikuZixvPXt9LnRvU3RyaW5nLGE9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdO2UuZXhwb3J0cy5mPWZ1bmN0aW9uKGUpe3JldHVybiBhJiZcIltvYmplY3QgV2luZG93XVwiPT1vLmNhbGwoZSk/ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBpKGUpfWNhdGNoKGUpe3JldHVybiBhLnNsaWNlKCl9fShlKTppKG4oZSkpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNCksaT1yKDM2KS5ldmVyeSxvPXIoNDgpLGE9cigyOCkscz1vKFwiZXZlcnlcIiksdT1hKFwiZXZlcnlcIik7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IXN8fCF1fSx7ZXZlcnk6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNCksaT1yKDM2KS5maWx0ZXIsbz1yKDYzKSxhPXIoMjgpLHM9byhcImZpbHRlclwiKSx1PWEoXCJmaWx0ZXJcIik7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IXN8fCF1fSx7ZmlsdGVyOmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQ2KTtlLmV4cG9ydHM9bihcIm5hdmlnYXRvclwiLFwidXNlckFnZW50XCIpfHxcIlwifSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoMzYpLmZpbmQsbz1yKDEzMCksYT1yKDI4KSxzPSEwLHU9YShcImZpbmRcIik7XCJmaW5kXCJpbltdJiZBcnJheSgxKS5maW5kKChmdW5jdGlvbigpe3M9ITF9KSksbih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6c3x8IXV9LHtmaW5kOmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSksbyhcImZpbmRcIil9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEzMSkuSXRlcmF0b3JQcm90b3R5cGUsaT1yKDYwKSxvPXIoNDApLGE9cig2Mikscz1yKDQ5KSx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIGw9dCtcIiBJdGVyYXRvclwiO3JldHVybiBlLnByb3RvdHlwZT1pKG4se25leHQ6bygxLHIpfSksYShlLGwsITEsITApLHNbbF09dSxlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoOCk7ZS5leHBvcnRzPSFuKChmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPW51bGwsT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBlKSE9PWUucHJvdG90eXBlfSkpfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpJiZudWxsIT09ZSl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIrU3RyaW5nKGUpK1wiIGFzIGEgcHJvdG90eXBlXCIpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNCksaT1yKDM2KS5tYXAsbz1yKDYzKSxhPXIoMjgpLHM9byhcIm1hcFwiKSx1PWEoXCJtYXBcIik7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IXN8fCF1fSx7bWFwOmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigyMDApLmxlZnQsbz1yKDQ4KSxhPXIoMjgpLHM9byhcInJlZHVjZVwiKSx1PWEoXCJyZWR1Y2VcIix7MTowfSk7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IXN8fCF1fSx7cmVkdWNlOmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTI3KSxpPXIoMjcpLG89cig0MSksYT1yKDI2KSxzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIscyx1KXtuKHIpO3ZhciBsPWkodCksYz1vKGwpLGg9YShsLmxlbmd0aCkscD1lP2gtMTowLGY9ZT8tMToxO2lmKHM8Milmb3IoOzspe2lmKHAgaW4gYyl7dT1jW3BdLHArPWY7YnJlYWt9aWYocCs9ZixlP3A8MDpoPD1wKXRocm93IFR5cGVFcnJvcihcIlJlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWVcIil9Zm9yKDtlP3A+PTA6aD5wO3ArPWYpcCBpbiBjJiYodT1yKHUsY1twXSxwLGwpKTtyZXR1cm4gdX19O2UuZXhwb3J0cz17bGVmdDpzKCExKSxyaWdodDpzKCEwKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQpLGk9cigzNikuc29tZSxvPXIoNDgpLGE9cigyOCkscz1vKFwic29tZVwiKSx1PWEoXCJzb21lXCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFzfHwhdX0se3NvbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoOTApLGk9cigxMzUpO2UuZXhwb3J0cz1uP3t9LnRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IFwiK2kodGhpcykrXCJdXCJ9fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17Q1NTUnVsZUxpc3Q6MCxDU1NTdHlsZURlY2xhcmF0aW9uOjAsQ1NTVmFsdWVMaXN0OjAsQ2xpZW50UmVjdExpc3Q6MCxET01SZWN0TGlzdDowLERPTVN0cmluZ0xpc3Q6MCxET01Ub2tlbkxpc3Q6MSxEYXRhVHJhbnNmZXJJdGVtTGlzdDowLEZpbGVMaXN0OjAsSFRNTEFsbENvbGxlY3Rpb246MCxIVE1MQ29sbGVjdGlvbjowLEhUTUxGb3JtRWxlbWVudDowLEhUTUxTZWxlY3RFbGVtZW50OjAsTWVkaWFMaXN0OjAsTWltZVR5cGVBcnJheTowLE5hbWVkTm9kZU1hcDowLE5vZGVMaXN0OjEsUGFpbnRSZXF1ZXN0TGlzdDowLFBsdWdpbjowLFBsdWdpbkFycmF5OjAsU1ZHTGVuZ3RoTGlzdDowLFNWR051bWJlckxpc3Q6MCxTVkdQYXRoU2VnTGlzdDowLFNWR1BvaW50TGlzdDowLFNWR1N0cmluZ0xpc3Q6MCxTVkdUcmFuc2Zvcm1MaXN0OjAsU291cmNlQnVmZmVyTGlzdDowLFN0eWxlU2hlZXRMaXN0OjAsVGV4dFRyYWNrQ3VlTGlzdDowLFRleHRUcmFja0xpc3Q6MCxUb3VjaExpc3Q6MH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgpO2UuZXhwb3J0cz0hbigoZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNSksaT1yKDQ5KSxvPW4oXCJpdGVyYXRvclwiKSxhPUFycmF5LnByb3RvdHlwZTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PWUmJihpLkFycmF5PT09ZXx8YVtvXT09PWUpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTM1KSxpPXIoNDkpLG89cig1KShcIml0ZXJhdG9yXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihudWxsIT1lKXJldHVybiBlW29dfHxlW1wiQEBpdGVyYXRvclwiXXx8aVtuKGUpXX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsaSl7dHJ5e3JldHVybiBpP3QobihyKVswXSxyWzFdKTp0KHIpfWNhdGNoKHQpe3ZhciBvPWUucmV0dXJuO3Rocm93IHZvaWQgMCE9PW8mJm4oby5jYWxsKGUpKSx0fX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDUpKFwiaXRlcmF0b3JcIiksaT0hMTt0cnl7dmFyIG89MCxhPXtuZXh0OmZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6ISFvKyt9fSxyZXR1cm46ZnVuY3Rpb24oKXtpPSEwfX07YVtuXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxBcnJheS5mcm9tKGEsKGZ1bmN0aW9uKCl7dGhyb3cgMn0pKX1jYXRjaChlKXt9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIXQmJiFpKXJldHVybiExO3ZhciByPSExO3RyeXt2YXIgbz17fTtvW25dPWZ1bmN0aW9uKCl7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpyPSEwfX19fSxlKG8pfWNhdGNoKGUpe31yZXR1cm4gcn19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzKSxpPXIoMTMzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvLGE7cmV0dXJuIGkmJlwiZnVuY3Rpb25cIj09dHlwZW9mKG89dC5jb25zdHJ1Y3RvcikmJm8hPT1yJiZuKGE9by5wcm90b3R5cGUpJiZhIT09ci5wcm90b3R5cGUmJmkoZSxhKSxlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjUpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBpIGluIHQpbihlLGksdFtpXSxyKTtyZXR1cm4gZX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDQ2KSxpPXIoMTUpLG89cig1KSxhPXIoMTYpLHM9byhcInNwZWNpZXNcIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4oZSkscj1pLmY7YSYmdCYmIXRbc10mJnIodCxzLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9fSl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxhPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBvPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYob1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxvO2Z1bmN0aW9uIHMobyl7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihvKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7YTspdHJ5e2lmKHI9MSxuJiYoaT0yJm9bMF0/bi5yZXR1cm46b1swXT9uLnRocm93fHwoKGk9bi5yZXR1cm4pJiZpLmNhbGwobiksMCk6bi5uZXh0KSYmIShpPWkuY2FsbChuLG9bMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChuPTAsaSYmKG89WzImb1swXSxpLnZhbHVlXSksb1swXSl7Y2FzZSAwOmNhc2UgMTppPW87YnJlYWs7Y2FzZSA0OnJldHVybiBhLmxhYmVsKysse3ZhbHVlOm9bMV0sZG9uZTohMX07Y2FzZSA1OmEubGFiZWwrKyxuPW9bMV0sbz1bMF07Y29udGludWU7Y2FzZSA3Om89YS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPWEudHJ5cywoaT1pLmxlbmd0aD4wJiZpW2kubGVuZ3RoLTFdKXx8NiE9PW9bMF0mJjIhPT1vWzBdKSl7YT0wO2NvbnRpbnVlfWlmKDM9PT1vWzBdJiYoIWl8fG9bMV0+aVswXSYmb1sxXTxpWzNdKSl7YS5sYWJlbD1vWzFdO2JyZWFrfWlmKDY9PT1vWzBdJiZhLmxhYmVsPGlbMV0pe2EubGFiZWw9aVsxXSxpPW87YnJlYWt9aWYoaSYmYS5sYWJlbDxpWzJdKXthLmxhYmVsPWlbMl0sYS5vcHMucHVzaChvKTticmVha31pWzJdJiZhLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWV9bz10LmNhbGwoZSxhKX1jYXRjaChlKXtvPVs2LGVdLG49MH1maW5hbGx5e3I9aT0wfWlmKDUmb1swXSl0aHJvdyBvWzFdO3JldHVybnt2YWx1ZTpvWzBdP29bMV06dm9pZCAwLGRvbmU6ITB9fShbbyxzXSl9fX0saT10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dm9pZCAwPT09ZSYmKGU9MWUzKSx0aGlzLl9pdGVtcz1uZXcgU2V0LHRoaXMuX2xpbWl0PWV9cmV0dXJuIGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXtpZih0aGlzLl9pdGVtcy5hZGQoZSksdGhpcy5faXRlbXMuc2l6ZT50aGlzLl9saW1pdCl7dmFyIHQ9dGhpcy5faXRlbXMudmFsdWVzKCkubmV4dCgpO3QuZG9uZXx8dGhpcy5faXRlbXMuZGVsZXRlKHQudmFsdWUpfXJldHVybiB0aGlzfSxlLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2l0ZW1zLmRlbGV0ZShlKX0sZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pdGVtcy5oYXMoZSl9LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5faXRlbXMuY2xlYXIoKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXRlbXMuc2l6ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpczt0aGlzLl9pdGVtcy5mb3JFYWNoKChmdW5jdGlvbihuKXtyZXR1cm4gZS5jYWxsKHQsbixuLHIpfSkpfSxlLnByb3RvdHlwZS5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcywoZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNSxpKHRoaXMuX2l0ZW1zLmtleXMoKSldO2Nhc2UgMTpyZXR1cm4gZS5zZW50KCksWzJdfX0pKX0sZS5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcywoZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNSxpKHRoaXMuX2l0ZW1zLnZhbHVlcygpKV07Y2FzZSAxOnJldHVybiBlLnNlbnQoKSxbMl19fSkpfSxlLnByb3RvdHlwZS5lbnRyaWVzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcywoZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNSxpKHRoaXMuX2l0ZW1zLmVudHJpZXMoKSldO2Nhc2UgMTpyZXR1cm4gZS5zZW50KCksWzJdfX0pKX0sZS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzUsaSh0aGlzLl9pdGVtcyldO2Nhc2UgMTpyZXR1cm4gZS5zZW50KCksWzJdfX0pKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFN5bWJvbC50b1N0cmluZ1RhZyx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJGaXhlZFNpemVTZXRcIn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuRml4ZWRTaXplU2V0PW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLGE9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmaVswXSl0aHJvdyBpWzFdO3JldHVybiBpWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIG89e25leHQ6cygwKSx0aHJvdzpzKDEpLHJldHVybjpzKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihvW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLG87ZnVuY3Rpb24gcyhvKXtyZXR1cm4gZnVuY3Rpb24ocyl7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKHIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDthOyl0cnl7aWYocj0xLG4mJihpPTImb1swXT9uLnJldHVybjpvWzBdP24udGhyb3d8fCgoaT1uLnJldHVybikmJmkuY2FsbChuKSwwKTpuLm5leHQpJiYhKGk9aS5jYWxsKG4sb1sxXSkpLmRvbmUpcmV0dXJuIGk7c3dpdGNoKG49MCxpJiYobz1bMiZvWzBdLGkudmFsdWVdKSxvWzBdKXtjYXNlIDA6Y2FzZSAxOmk9bzticmVhaztjYXNlIDQ6cmV0dXJuIGEubGFiZWwrKyx7dmFsdWU6b1sxXSxkb25lOiExfTtjYXNlIDU6YS5sYWJlbCsrLG49b1sxXSxvPVswXTtjb250aW51ZTtjYXNlIDc6bz1hLm9wcy5wb3AoKSxhLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKGk9YS50cnlzLChpPWkubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pfHw2IT09b1swXSYmMiE9PW9bMF0pKXthPTA7Y29udGludWV9aWYoMz09PW9bMF0mJighaXx8b1sxXT5pWzBdJiZvWzFdPGlbM10pKXthLmxhYmVsPW9bMV07YnJlYWt9aWYoNj09PW9bMF0mJmEubGFiZWw8aVsxXSl7YS5sYWJlbD1pWzFdLGk9bzticmVha31pZihpJiZhLmxhYmVsPGlbMl0pe2EubGFiZWw9aVsyXSxhLm9wcy5wdXNoKG8pO2JyZWFrfWlbMl0mJmEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZX1vPXQuY2FsbChlLGEpfWNhdGNoKGUpe289WzYsZV0sbj0wfWZpbmFsbHl7cj1pPTB9aWYoNSZvWzBdKXRocm93IG9bMV07cmV0dXJue3ZhbHVlOm9bMF0/b1sxXTp2b2lkIDAsZG9uZTohMH19KFtvLHNdKX19fSxpPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2b2lkIDA9PT1lJiYoZT0xZTMpLHRoaXMuX2l0ZW1zPW5ldyBNYXAsdGhpcy5fbGltaXQ9ZX1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pdGVtcy5nZXQoZSl9LGUucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQpe2lmKHRoaXMuX2l0ZW1zLnNldChlLHQpLHRoaXMuX2l0ZW1zLnNpemU+dGhpcy5fbGltaXQpe3ZhciByPXRoaXMuX2l0ZW1zLmtleXMoKS5uZXh0KCk7ci5kb25lfHx0aGlzLl9pdGVtcy5kZWxldGUoci52YWx1ZSl9fSxlLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2l0ZW1zLmRlbGV0ZShlKX0sZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pdGVtcy5oYXMoZSl9LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5faXRlbXMuY2xlYXIoKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXRlbXMuc2l6ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7dGhpcy5faXRlbXMuZm9yRWFjaCgoZnVuY3Rpb24ocixuKXtyZXR1cm4gZS5jYWxsKHQsbixyKX0pKX0sZS5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzUsaSh0aGlzLl9pdGVtcy5rZXlzKCkpXTtjYXNlIDE6cmV0dXJuIGUuc2VudCgpLFsyXX19KSl9LGUucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzUsaSh0aGlzLl9pdGVtcy52YWx1ZXMoKSldO2Nhc2UgMTpyZXR1cm4gZS5zZW50KCksWzJdfX0pKX0sZS5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzUsaSh0aGlzLl9pdGVtcy5lbnRyaWVzKCkpXTtjYXNlIDE6cmV0dXJuIGUuc2VudCgpLFsyXX19KSl9LGUucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls1LGkodGhpcy5faXRlbXMpXTtjYXNlIDE6cmV0dXJuIGUuc2VudCgpLFsyXX19KSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcse2dldDpmdW5jdGlvbigpe3JldHVyblwiT2JqZWN0Q2FjaGVcIn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuT2JqZWN0Q2FjaGU9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2b2lkIDA9PT1lJiYoZT0xZTMpLHRoaXMuX2l0ZW1zPW5ldyBNYXAsdGhpcy5fbGltaXQ9ZX1yZXR1cm4gZS5wcm90b3R5cGUuY2hlY2s9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLl9pdGVtcy5nZXQoZSk9PT10KXJldHVybiEwO2lmKHRoaXMuX2l0ZW1zLmdldCh0KT09PWUpcmV0dXJuITE7dmFyIHI9TWF0aC5yYW5kb20oKTwuNTtpZihyP3RoaXMuX2l0ZW1zLnNldChlLHQpOnRoaXMuX2l0ZW1zLnNldCh0LGUpLHRoaXMuX2l0ZW1zLnNpemU+dGhpcy5fbGltaXQpe3ZhciBuPXRoaXMuX2l0ZW1zLmtleXMoKS5uZXh0KCk7bi5kb25lfHx0aGlzLl9pdGVtcy5kZWxldGUobi52YWx1ZSl9cmV0dXJuIHJ9LGV9KCk7dC5Db21wYXJlQ2FjaGU9bn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLl9pbml0aWFsaXplZD0hMSx0aGlzLl92YWx1ZT12b2lkIDAsdGhpcy5faW5pdEZ1bmM9ZX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2luaXRpYWxpemVkfHwodGhpcy5fdmFsdWU9dGhpcy5faW5pdEZ1bmMoKSx0aGlzLl9pbml0aWFsaXplZD0hMCksdGhpcy5fdmFsdWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0Lkxhenk9bn0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLl9wb2ludGVyPTAsdGhpcy5fY2hhcnM9QXJyYXkuZnJvbShlKSx0aGlzLl9sZW5ndGg9dGhpcy5fY2hhcnMubGVuZ3RofXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJlb2ZcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BvaW50ZXI+PXRoaXMuX2xlbmd0aH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJsZW5ndGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xlbmd0aH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5jb2RlUG9pbnQ9ZnVuY3Rpb24oKXtpZih2b2lkIDA9PT10aGlzLl9jb2RlUG9pbnQpaWYodGhpcy5lb2YpdGhpcy5fY29kZVBvaW50PS0xO2Vsc2V7dmFyIGU9dGhpcy5fY2hhcnNbdGhpcy5fcG9pbnRlcl0uY29kZVBvaW50QXQoMCk7dGhpcy5fY29kZVBvaW50PXZvaWQgMCE9PWU/ZTotMX1yZXR1cm4gdGhpcy5fY29kZVBvaW50fSxlLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMuX2MmJih0aGlzLl9jPXRoaXMuZW9mP1wiXCI6dGhpcy5fY2hhcnNbdGhpcy5fcG9pbnRlcl0pLHRoaXMuX2N9LGUucHJvdG90eXBlLnJlbWFpbmluZz1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzLl9yZW1haW5pbmcmJih0aGlzLl9yZW1haW5pbmc9dGhpcy5lb2Y/XCJcIjp0aGlzLl9jaGFycy5zbGljZSh0aGlzLl9wb2ludGVyKzEpLmpvaW4oXCJcIikpLHRoaXMuX3JlbWFpbmluZ30sZS5wcm90b3R5cGUuc3Vic3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMuX3N1YnN0cmluZyYmKHRoaXMuX3N1YnN0cmluZz10aGlzLmVvZj9cIlwiOnRoaXMuX2NoYXJzLnNsaWNlKHRoaXMuX3BvaW50ZXIpLmpvaW4oXCJcIikpLHRoaXMuX3N1YnN0cmluZ30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwicG9pbnRlclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcG9pbnRlcn0sc2V0OmZ1bmN0aW9uKGUpe2UhPT10aGlzLl9wb2ludGVyJiYodGhpcy5fcG9pbnRlcj1lLHRoaXMuX2NvZGVQb2ludD12b2lkIDAsdGhpcy5fYz12b2lkIDAsdGhpcy5fcmVtYWluaW5nPXZvaWQgMCx0aGlzLl9zdWJzdHJpbmc9dm9pZCAwKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuU3RyaW5nV2Fsa2VyPW59LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIxOCk7dC5NYXBXcml0ZXI9bi5NYXBXcml0ZXI7dmFyIGk9cigyNTgpO3QuWE1MV3JpdGVyPWkuWE1MV3JpdGVyO3ZhciBvPXIoNjcpO3QuT2JqZWN0V3JpdGVyPW8uT2JqZWN0V3JpdGVyO3ZhciBhPXIoMjYwKTt0LkpTT05Xcml0ZXI9YS5KU09OV3JpdGVyO3ZhciBzPXIoMjYxKTt0LllBTUxXcml0ZXI9cy5ZQU1MV3JpdGVyfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigxOSkscigyMTkpLHIoMjApLHIoMjIpLHIoMjMpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMSksYT1yKDY3KSxzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2YXIgbj1lLmNhbGwodGhpcyx0KXx8dGhpcztyZXR1cm4gbi5fd3JpdGVyT3B0aW9ucz1vLmFwcGx5RGVmYXVsdHMocix7Zm9ybWF0OlwibWFwXCIsd2VsbEZvcm1lZDohMSxncm91cDohMSx2ZXJib3NlOiExfSksbn1yZXR1cm4gaSh0LGUpLHQucHJvdG90eXBlLnNlcmlhbGl6ZT1mdW5jdGlvbihlKXt2YXIgdD1vLmFwcGx5RGVmYXVsdHModGhpcy5fd3JpdGVyT3B0aW9ucyx7Zm9ybWF0Olwib2JqZWN0XCIsd2VsbEZvcm1lZDohMSx2ZXJib3NlOiExfSkscj1uZXcgYS5PYmplY3RXcml0ZXIodGhpcy5fYnVpbGRlck9wdGlvbnMsdCkuc2VyaWFsaXplKGUpO3JldHVybiB0aGlzLl9jb252ZXJ0T2JqZWN0KHIpfSx0LnByb3RvdHlwZS5fY29udmVydE9iamVjdD1mdW5jdGlvbihlKXtpZihvLmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF09dGhpcy5fY29udmVydE9iamVjdChlW3RdKTtyZXR1cm4gZX1pZihvLmlzT2JqZWN0KGUpKXt2YXIgcj1uZXcgTWFwO2Zvcih2YXIgbiBpbiBlKXIuc2V0KG4sdGhpcy5fY29udmVydE9iamVjdChlW25dKSk7cmV0dXJuIHJ9cmV0dXJuIGV9LHR9KHIoNTApLkJhc2VXcml0ZXIpO3QuTWFwV3JpdGVyPXN9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEzOSksaT1yKDE0Myk7ZS5leHBvcnRzPW4oXCJNYXBcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcyxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1swXTp2b2lkIDApfX0pLGkpfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0KSxpPXIoOCksbz1yKDU5KSxhPXIoMTMpLHM9cigyNyksdT1yKDI2KSxsPXIoMTM0KSxjPXIoMTI4KSxoPXIoNjMpLHA9cig1KSxmPXIoMTI5KSxkPXAoXCJpc0NvbmNhdFNwcmVhZGFibGVcIiksbT1mPj01MXx8IWkoKGZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIGVbZF09ITEsZS5jb25jYXQoKVswXSE9PWV9KSkseT1oKFwiY29uY2F0XCIpLHY9ZnVuY3Rpb24oZSl7aWYoIWEoZSkpcmV0dXJuITE7dmFyIHQ9ZVtkXTtyZXR1cm4gdm9pZCAwIT09dD8hIXQ6byhlKX07bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6IW18fCF5fSx7Y29uY2F0OmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLG8sYT1zKHRoaXMpLGg9YyhhLDApLHA9MDtmb3IodD0tMSxuPWFyZ3VtZW50cy5sZW5ndGg7dDxuO3QrKylpZih2KG89LTE9PT10P2E6YXJndW1lbnRzW3RdKSl7aWYocCsoaT11KG8ubGVuZ3RoKSk+OTAwNzE5OTI1NDc0MDk5MSl0aHJvdyBUeXBlRXJyb3IoXCJNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWRcIik7Zm9yKHI9MDtyPGk7cisrLHArKylyIGluIG8mJmwoaCxwLG9bcl0pfWVsc2V7aWYocD49OTAwNzE5OTI1NDc0MDk5MSl0aHJvdyBUeXBlRXJyb3IoXCJNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWRcIik7bChoLHArKyxvKX1yZXR1cm4gaC5sZW5ndGg9cCxofX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4KTtmdW5jdGlvbiBpKGUsdCl7cmV0dXJuIFJlZ0V4cChlLHQpfXQuVU5TVVBQT1JURURfWT1uKChmdW5jdGlvbigpe3ZhciBlPWkoXCJhXCIsXCJ5XCIpO3JldHVybiBlLmxhc3RJbmRleD0yLG51bGwhPWUuZXhlYyhcImFiY2RcIil9KSksdC5CUk9LRU5fQ0FSRVQ9bigoZnVuY3Rpb24oKXt2YXIgZT1pKFwiXnJcIixcImd5XCIpO3JldHVybiBlLmxhc3RJbmRleD0yLG51bGwhPWUuZXhlYyhcInN0clwiKX0pKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjIzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYobihlKSl0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMyksaT1yKDQyKSxvPXIoNSkoXCJtYXRjaFwiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIG4oZSkmJih2b2lkIDAhPT0odD1lW29dKT8hIXQ6XCJSZWdFeHBcIj09aShlKSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig1KShcIm1hdGNoXCIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD0vLi87dHJ5e1wiLy4vXCJbZV0odCl9Y2F0Y2gocil7dHJ5e3JldHVybiB0W25dPSExLFwiLy4vXCJbZV0odCl9Y2F0Y2goZSl7fX1yZXR1cm4hMX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDY4KTt2YXIgbj1yKDI1KSxpPXIoOCksbz1yKDUpLGE9cig5Mykscz1yKDIxKSx1PW8oXCJzcGVjaWVzXCIpLGw9IWkoKGZ1bmN0aW9uKCl7dmFyIGU9Ly4vO3JldHVybiBlLmV4ZWM9ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gZS5ncm91cHM9e2E6XCI3XCJ9LGV9LFwiN1wiIT09XCJcIi5yZXBsYWNlKGUsXCIkPGE+XCIpfSkpLGM9XCIkMFwiPT09XCJhXCIucmVwbGFjZSgvLi8sXCIkMFwiKSxoPW8oXCJyZXBsYWNlXCIpLHA9ISEvLi9baF0mJlwiXCI9PT0vLi9baF0oXCJhXCIsXCIkMFwiKSxmPSFpKChmdW5jdGlvbigpe3ZhciBlPS8oPzopLyx0PWUuZXhlYztlLmV4ZWM9ZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3ZhciByPVwiYWJcIi5zcGxpdChlKTtyZXR1cm4gMiE9PXIubGVuZ3RofHxcImFcIiE9PXJbMF18fFwiYlwiIT09clsxXX0pKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsaCl7dmFyIGQ9byhlKSxtPSFpKChmdW5jdGlvbigpe3ZhciB0PXt9O3JldHVybiB0W2RdPWZ1bmN0aW9uKCl7cmV0dXJuIDd9LDchPVwiXCJbZV0odCl9KSkseT1tJiYhaSgoZnVuY3Rpb24oKXt2YXIgdD0hMSxyPS9hLztyZXR1cm5cInNwbGl0XCI9PT1lJiYoKHI9e30pLmNvbnN0cnVjdG9yPXt9LHIuY29uc3RydWN0b3JbdV09ZnVuY3Rpb24oKXtyZXR1cm4gcn0sci5mbGFncz1cIlwiLHJbZF09Ly4vW2RdKSxyLmV4ZWM9ZnVuY3Rpb24oKXtyZXR1cm4gdD0hMCxudWxsfSxyW2RdKFwiXCIpLCF0fSkpO2lmKCFtfHwheXx8XCJyZXBsYWNlXCI9PT1lJiYoIWx8fCFjfHxwKXx8XCJzcGxpdFwiPT09ZSYmIWYpe3ZhciB2PS8uL1tkXSxfPXIoZCxcIlwiW2VdLChmdW5jdGlvbihlLHQscixuLGkpe3JldHVybiB0LmV4ZWM9PT1hP20mJiFpP3tkb25lOiEwLHZhbHVlOnYuY2FsbCh0LHIsbil9Ontkb25lOiEwLHZhbHVlOmUuY2FsbChyLHQsbil9Ontkb25lOiExfX0pLHtSRVBMQUNFX0tFRVBTXyQwOmMsUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU6cH0pLGc9X1swXSxiPV9bMV07bihTdHJpbmcucHJvdG90eXBlLGUsZyksbihSZWdFeHAucHJvdG90eXBlLGQsMj09dD9mdW5jdGlvbihlLHQpe3JldHVybiBiLmNhbGwoZSx0aGlzLHQpfTpmdW5jdGlvbihlKXtyZXR1cm4gYi5jYWxsKGUsdGhpcyl9KX1oJiZzKFJlZ0V4cC5wcm90b3R5cGVbZF0sXCJzaGFtXCIsITApfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTM3KS5jaGFyQXQ7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdCsocj9uKGUsdCkubGVuZ3RoOjEpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDIpLGk9cig5Myk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5leGVjO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIpe3ZhciBvPXIuY2FsbChlLHQpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBvKXRocm93IFR5cGVFcnJvcihcIlJlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbFwiKTtyZXR1cm4gb31pZihcIlJlZ0V4cFwiIT09bihlKSl0aHJvdyBUeXBlRXJyb3IoXCJSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyXCIpO3JldHVybiBpLmNhbGwoZSx0KX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cig5Nik7dC5mb3JnaXZpbmdCYXNlNjRFbmNvZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGUuZnJvbSh0KS50b1N0cmluZyhcImJhc2U2NFwiKX0sdC5mb3JnaXZpbmdCYXNlNjREZWNvZGU9ZnVuY3Rpb24odCl7cmV0dXJuXCJcIj09PXQ/XCJcIjooKHQ9dC5yZXBsYWNlKG4uQVNDSUlXaGl0ZVNwYWNlLFwiXCIpKS5sZW5ndGglND09MCYmKHQuZW5kc1dpdGgoXCI9PVwiKT90PXQuc3Vic3RyKDAsdC5sZW5ndGgtMik6dC5lbmRzV2l0aChcIj1cIikmJih0PXQuc3Vic3RyKDAsdC5sZW5ndGgtMSkpKSx0Lmxlbmd0aCU0PT0xP251bGw6L1swLTlBLVphLXorL10vLnRlc3QodCk/ZS5mcm9tKHQsXCJiYXNlNjRcIikudG9TdHJpbmcoXCJ1dGY4XCIpOm51bGwpfX0pLmNhbGwodGhpcyxyKDE0NSkuQnVmZmVyKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuYnl0ZUxlbmd0aD1mdW5jdGlvbihlKXt2YXIgdD1sKGUpLHI9dFswXSxuPXRbMV07cmV0dXJuIDMqKHIrbikvNC1ufSx0LnRvQnl0ZUFycmF5PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1sKGUpLGE9blswXSxzPW5bMV0sdT1uZXcgbyhmdW5jdGlvbihlLHQscil7cmV0dXJuIDMqKHQrcikvNC1yfSgwLGEscykpLGM9MCxoPXM+MD9hLTQ6YTtmb3Iocj0wO3I8aDtyKz00KXQ9aVtlLmNoYXJDb2RlQXQocildPDwxOHxpW2UuY2hhckNvZGVBdChyKzEpXTw8MTJ8aVtlLmNoYXJDb2RlQXQocisyKV08PDZ8aVtlLmNoYXJDb2RlQXQociszKV0sdVtjKytdPXQ+PjE2JjI1NSx1W2MrK109dD4+OCYyNTUsdVtjKytdPTI1NSZ0OzI9PT1zJiYodD1pW2UuY2hhckNvZGVBdChyKV08PDJ8aVtlLmNoYXJDb2RlQXQocisxKV0+PjQsdVtjKytdPTI1NSZ0KTsxPT09cyYmKHQ9aVtlLmNoYXJDb2RlQXQocildPDwxMHxpW2UuY2hhckNvZGVBdChyKzEpXTw8NHxpW2UuY2hhckNvZGVBdChyKzIpXT4+Mix1W2MrK109dD4+OCYyNTUsdVtjKytdPTI1NSZ0KTtyZXR1cm4gdX0sdC5mcm9tQnl0ZUFycmF5PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPWUubGVuZ3RoLGk9ciUzLG89W10sYT0wLHM9ci1pO2E8czthKz0xNjM4MylvLnB1c2goYyhlLGEsYSsxNjM4Mz5zP3M6YSsxNjM4MykpOzE9PT1pPyh0PWVbci0xXSxvLnB1c2goblt0Pj4yXStuW3Q8PDQmNjNdK1wiPT1cIikpOjI9PT1pJiYodD0oZVtyLTJdPDw4KStlW3ItMV0sby5wdXNoKG5bdD4+MTBdK25bdD4+NCY2M10rblt0PDwyJjYzXStcIj1cIikpO3JldHVybiBvLmpvaW4oXCJcIil9O2Zvcih2YXIgbj1bXSxpPVtdLG89XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXk/VWludDhBcnJheTpBcnJheSxhPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLHM9MCx1PWEubGVuZ3RoO3M8dTsrK3MpbltzXT1hW3NdLGlbYS5jaGFyQ29kZUF0KHMpXT1zO2Z1bmN0aW9uIGwoZSl7dmFyIHQ9ZS5sZW5ndGg7aWYodCU0PjApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFwiKTt2YXIgcj1lLmluZGV4T2YoXCI9XCIpO3JldHVybi0xPT09ciYmKHI9dCksW3Iscj09PXQ/MDo0LXIlNF19ZnVuY3Rpb24gYyhlLHQscil7Zm9yKHZhciBpLG8sYT1bXSxzPXQ7czxyO3MrPTMpaT0oZVtzXTw8MTYmMTY3MTE2ODApKyhlW3MrMV08PDgmNjUyODApKygyNTUmZVtzKzJdKSxhLnB1c2goblsobz1pKT4+MTgmNjNdK25bbz4+MTImNjNdK25bbz4+NiY2M10rbls2MyZvXSk7cmV0dXJuIGEuam9pbihcIlwiKX1pW1wiLVwiLmNoYXJDb2RlQXQoMCldPTYyLGlbXCJfXCIuY2hhckNvZGVBdCgwKV09NjN9LGZ1bmN0aW9uKGUsdCl7dC5yZWFkPWZ1bmN0aW9uKGUsdCxyLG4saSl7dmFyIG8sYSxzPTgqaS1uLTEsdT0oMTw8cyktMSxsPXU+PjEsYz0tNyxoPXI/aS0xOjAscD1yPy0xOjEsZj1lW3QraF07Zm9yKGgrPXAsbz1mJigxPDwtYyktMSxmPj49LWMsYys9cztjPjA7bz0yNTYqbytlW3QraF0saCs9cCxjLT04KTtmb3IoYT1vJigxPDwtYyktMSxvPj49LWMsYys9bjtjPjA7YT0yNTYqYStlW3QraF0saCs9cCxjLT04KTtpZigwPT09bylvPTEtbDtlbHNle2lmKG89PT11KXJldHVybiBhP05hTjoxLzAqKGY/LTE6MSk7YSs9TWF0aC5wb3coMixuKSxvLT1sfXJldHVybihmPy0xOjEpKmEqTWF0aC5wb3coMixvLW4pfSx0LndyaXRlPWZ1bmN0aW9uKGUsdCxyLG4saSxvKXt2YXIgYSxzLHUsbD04Km8taS0xLGM9KDE8PGwpLTEsaD1jPj4xLHA9MjM9PT1pP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MCxmPW4/MDpvLTEsZD1uPzE6LTEsbT10PDB8fDA9PT10JiYxL3Q8MD8xOjA7Zm9yKHQ9TWF0aC5hYnModCksaXNOYU4odCl8fHQ9PT0xLzA/KHM9aXNOYU4odCk/MTowLGE9Yyk6KGE9TWF0aC5mbG9vcihNYXRoLmxvZyh0KS9NYXRoLkxOMiksdCoodT1NYXRoLnBvdygyLC1hKSk8MSYmKGEtLSx1Kj0yKSwodCs9YStoPj0xP3AvdTpwKk1hdGgucG93KDIsMS1oKSkqdT49MiYmKGErKyx1Lz0yKSxhK2g+PWM/KHM9MCxhPWMpOmEraD49MT8ocz0odCp1LTEpKk1hdGgucG93KDIsaSksYSs9aCk6KHM9dCpNYXRoLnBvdygyLGgtMSkqTWF0aC5wb3coMixpKSxhPTApKTtpPj04O2VbcitmXT0yNTUmcyxmKz1kLHMvPTI1NixpLT04KTtmb3IoYT1hPDxpfHMsbCs9aTtsPjA7ZVtyK2ZdPTI1NSZhLGYrPWQsYS89MjU2LGwtPTgpO2VbcitmLWRdfD0xMjgqbX19LGZ1bmN0aW9uKGUsdCl7dmFyIHI9e30udG9TdHJpbmc7ZS5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09ci5jYWxsKGUpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoMSk7ZnVuY3Rpb24gbyhlKXt2YXIgdCxyO2lmKG51bGw9PT1lfHxpLmlzU3RyaW5nKGUpfHxpLmlzTnVtYmVyKGUpKXJldHVybiBlO2lmKGkuaXNBcnJheShlKSl7dmFyIGE9bmV3IEFycmF5O3RyeXtmb3IodmFyIHM9bihlKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dmFyIGw9dS52YWx1ZTthLnB1c2gobyhsKSl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihyPXMucmV0dXJuKSYmci5jYWxsKHMpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4gYX1pZihpLmlzT2JqZWN0KGUpKXthPW5ldyBNYXA7Zm9yKHZhciBjIGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGg9ZVtjXTthLnNldChjLG8oaCkpfXJldHVybiBhfXJldHVybiBlfXQucGFyc2VKU09ORnJvbUJ5dGVzPWZ1bmN0aW9uKGUpe3ZhciB0PWkudXRmOERlY29kZShlKTtyZXR1cm4gSlNPTi5wYXJzZS5jYWxsKHZvaWQgMCx0KX0sdC5zZXJpYWxpemVKU09OVG9CeXRlcz1mdW5jdGlvbihlKXt2YXIgdD1KU09OLnN0cmluZ2lmeS5jYWxsKHZvaWQgMCxlKTtyZXR1cm4gaS51dGY4RW5jb2RlKHQpfSx0LnBhcnNlSlNPTkludG9JbmZyYVZhbHVlcz1mdW5jdGlvbihlKXtyZXR1cm4gbyhKU09OLnBhcnNlLmNhbGwodm9pZCAwLGUpKX0sdC5jb252ZXJ0QUpTT05EZXJpdmVkSmF2YVNjcmlwdFZhbHVlVG9BbkluZnJhVmFsdWU9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYT17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZpWzBdKXRocm93IGlbMV07cmV0dXJuIGlbMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gbz17bmV4dDpzKDApLHRocm93OnMoMSkscmV0dXJuOnMoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKG9bU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksbztmdW5jdGlvbiBzKG8pe3JldHVybiBmdW5jdGlvbihzKXtyZXR1cm4gZnVuY3Rpb24obyl7aWYocil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2E7KXRyeXtpZihyPTEsbiYmKGk9MiZvWzBdP24ucmV0dXJuOm9bMF0/bi50aHJvd3x8KChpPW4ucmV0dXJuKSYmaS5jYWxsKG4pLDApOm4ubmV4dCkmJiEoaT1pLmNhbGwobixvWzFdKSkuZG9uZSlyZXR1cm4gaTtzd2l0Y2gobj0wLGkmJihvPVsyJm9bMF0saS52YWx1ZV0pLG9bMF0pe2Nhc2UgMDpjYXNlIDE6aT1vO2JyZWFrO2Nhc2UgNDpyZXR1cm4gYS5sYWJlbCsrLHt2YWx1ZTpvWzFdLGRvbmU6ITF9O2Nhc2UgNTphLmxhYmVsKyssbj1vWzFdLG89WzBdO2NvbnRpbnVlO2Nhc2UgNzpvPWEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEoaT1hLnRyeXMsKGk9aS5sZW5ndGg+MCYmaVtpLmxlbmd0aC0xXSl8fDYhPT1vWzBdJiYyIT09b1swXSkpe2E9MDtjb250aW51ZX1pZigzPT09b1swXSYmKCFpfHxvWzFdPmlbMF0mJm9bMV08aVszXSkpe2EubGFiZWw9b1sxXTticmVha31pZig2PT09b1swXSYmYS5sYWJlbDxpWzFdKXthLmxhYmVsPWlbMV0saT1vO2JyZWFrfWlmKGkmJmEubGFiZWw8aVsyXSl7YS5sYWJlbD1pWzJdLGEub3BzLnB1c2gobyk7YnJlYWt9aVsyXSYmYS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlfW89dC5jYWxsKGUsYSl9Y2F0Y2goZSl7bz1bNixlXSxuPTB9ZmluYWxseXtyPWk9MH1pZig1Jm9bMF0pdGhyb3cgb1sxXTtyZXR1cm57dmFsdWU6b1swXT9vWzFdOnZvaWQgMCxkb25lOiEwfX0oW28sc10pfX19LGk9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LG89dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChpKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfSxhPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPXIoMSk7dC5hcHBlbmQ9ZnVuY3Rpb24oZSx0KXtlLnB1c2godCl9LHQuZXh0ZW5kPWZ1bmN0aW9uKGUsdCl7ZS5wdXNoLmFwcGx5KGUsbyh0KSl9LHQucHJlcGVuZD1mdW5jdGlvbihlLHQpe2UudW5zaGlmdCh0KX0sdC5yZXBsYWNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG89MDt0cnl7Zm9yKHZhciB1PWEoZSksbD11Lm5leHQoKTshbC5kb25lO2w9dS5uZXh0KCkpe3ZhciBjPWwudmFsdWU7aWYocy5pc0Z1bmN0aW9uKHQpKXQuY2FsbChudWxsLGMpJiYoZVtvXT1yKTtlbHNlIGlmKGM9PT10KXJldHVybiB2b2lkKGVbb109cik7bysrfX1jYXRjaChlKXtuPXtlcnJvcjplfX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYoaT11LnJldHVybikmJmkuY2FsbCh1KX1maW5hbGx5e2lmKG4pdGhyb3cgbi5lcnJvcn19fSx0Lmluc2VydD1mdW5jdGlvbihlLHQscil7ZS5zcGxpY2UociwwLHQpfSx0LnJlbW92ZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1lLmxlbmd0aDtyLS07KXt2YXIgbj1lW3JdO2lmKHMuaXNGdW5jdGlvbih0KSl0LmNhbGwobnVsbCxuKSYmZS5zcGxpY2UociwxKTtlbHNlIGlmKG49PT10KXJldHVybiB2b2lkIGUuc3BsaWNlKHIsMSl9fSx0LmVtcHR5PWZ1bmN0aW9uKGUpe2UubGVuZ3RoPTB9LHQuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO3RyeXtmb3IodmFyIGk9YShlKSxvPWkubmV4dCgpOyFvLmRvbmU7bz1pLm5leHQoKSl7dmFyIHU9by52YWx1ZTtpZihzLmlzRnVuY3Rpb24odCkpe2lmKHQuY2FsbChudWxsLHUpKXJldHVybiEwfWVsc2UgaWYodT09PXQpcmV0dXJuITB9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e28mJiFvLmRvbmUmJihuPWkucmV0dXJuKSYmbi5jYWxsKGkpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4hMX0sdC5zaXplPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtpZih2b2lkIDA9PT10KXJldHVybiBlLmxlbmd0aDt2YXIgaT0wO3RyeXtmb3IodmFyIG89YShlKSxzPW8ubmV4dCgpOyFzLmRvbmU7cz1vLm5leHQoKSl7dmFyIHU9cy52YWx1ZTt0LmNhbGwobnVsbCx1KSYmaSsrfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYobj1vLnJldHVybikmJm4uY2FsbChvKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIGl9LHQuaXNFbXB0eT1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWUubGVuZ3RofSx0LmZvckVhY2g9ZnVuY3Rpb24oZSx0KXt2YXIgcixpLG8scyx1LGw7cmV0dXJuIG4odGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm4gdm9pZCAwIT09dD9bMywyXTpbNSxhKGUpXTtjYXNlIDE6cmV0dXJuIG4uc2VudCgpLFszLDldO2Nhc2UgMjpuLnRyeXMucHVzaChbMiw3LDgsOV0pLHI9YShlKSxpPXIubmV4dCgpLG4ubGFiZWw9MztjYXNlIDM6cmV0dXJuIGkuZG9uZT9bMyw2XToobz1pLnZhbHVlLHQuY2FsbChudWxsLG8pP1s0LG9dOlszLDVdKTtjYXNlIDQ6bi5zZW50KCksbi5sYWJlbD01O2Nhc2UgNTpyZXR1cm4gaT1yLm5leHQoKSxbMywzXTtjYXNlIDY6cmV0dXJuWzMsOV07Y2FzZSA3OnJldHVybiBzPW4uc2VudCgpLHU9e2Vycm9yOnN9LFszLDldO2Nhc2UgODp0cnl7aSYmIWkuZG9uZSYmKGw9ci5yZXR1cm4pJiZsLmNhbGwocil9ZmluYWxseXtpZih1KXRocm93IHUuZXJyb3J9cmV0dXJuWzddO2Nhc2UgOTpyZXR1cm5bMl19fSkpfSx0LmNsb25lPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcoQXJyYXkuYmluZC5hcHBseShBcnJheSxvKFt2b2lkIDBdLGUpKSl9LHQuc29ydEluQXNjZW5kaW5nT3JkZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5zb3J0KChmdW5jdGlvbihlLHIpe3JldHVybiB0LmNhbGwobnVsbCxlLHIpPy0xOjF9KSl9LHQuc29ydEluRGVzY2VuZGluZ09yZGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuc29ydCgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKG51bGwsZSxyKT8xOi0xfSkpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYT17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZpWzBdKXRocm93IGlbMV07cmV0dXJuIGlbMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gbz17bmV4dDpzKDApLHRocm93OnMoMSkscmV0dXJuOnMoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKG9bU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksbztmdW5jdGlvbiBzKG8pe3JldHVybiBmdW5jdGlvbihzKXtyZXR1cm4gZnVuY3Rpb24obyl7aWYocil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2E7KXRyeXtpZihyPTEsbiYmKGk9MiZvWzBdP24ucmV0dXJuOm9bMF0/bi50aHJvd3x8KChpPW4ucmV0dXJuKSYmaS5jYWxsKG4pLDApOm4ubmV4dCkmJiEoaT1pLmNhbGwobixvWzFdKSkuZG9uZSlyZXR1cm4gaTtzd2l0Y2gobj0wLGkmJihvPVsyJm9bMF0saS52YWx1ZV0pLG9bMF0pe2Nhc2UgMDpjYXNlIDE6aT1vO2JyZWFrO2Nhc2UgNDpyZXR1cm4gYS5sYWJlbCsrLHt2YWx1ZTpvWzFdLGRvbmU6ITF9O2Nhc2UgNTphLmxhYmVsKyssbj1vWzFdLG89WzBdO2NvbnRpbnVlO2Nhc2UgNzpvPWEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEoaT1hLnRyeXMsKGk9aS5sZW5ndGg+MCYmaVtpLmxlbmd0aC0xXSl8fDYhPT1vWzBdJiYyIT09b1swXSkpe2E9MDtjb250aW51ZX1pZigzPT09b1swXSYmKCFpfHxvWzFdPmlbMF0mJm9bMV08aVszXSkpe2EubGFiZWw9b1sxXTticmVha31pZig2PT09b1swXSYmYS5sYWJlbDxpWzFdKXthLmxhYmVsPWlbMV0saT1vO2JyZWFrfWlmKGkmJmEubGFiZWw8aVsyXSl7YS5sYWJlbD1pWzJdLGEub3BzLnB1c2gobyk7YnJlYWt9aVsyXSYmYS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlfW89dC5jYWxsKGUsYSl9Y2F0Y2goZSl7bz1bNixlXSxuPTB9ZmluYWxseXtyPWk9MH1pZig1Jm9bMF0pdGhyb3cgb1sxXTtyZXR1cm57dmFsdWU6b1swXT9vWzFdOnZvaWQgMCxkb25lOiEwfX0oW28sc10pfX19LGk9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0sbz10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0sYT10aGlzJiZ0aGlzLl9fc3ByZWFkfHxmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllPWUuY29uY2F0KG8oYXJndW1lbnRzW3RdKSk7cmV0dXJuIGV9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPXIoMSk7dC5nZXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5nZXQodCl9LHQuc2V0PWZ1bmN0aW9uKGUsdCxyKXtlLnNldCh0LHIpfSx0LnJlbW92ZT1mdW5jdGlvbihlLHQpe3ZhciByLG4sbyxhO2lmKHMuaXNGdW5jdGlvbih0KSl7dmFyIHU9W107dHJ5e2Zvcih2YXIgbD1pKGUpLGM9bC5uZXh0KCk7IWMuZG9uZTtjPWwubmV4dCgpKXt2YXIgaD1jLnZhbHVlO3QuY2FsbChudWxsLGgpJiZ1LnB1c2goaFswXSl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2MmJiFjLmRvbmUmJihuPWwucmV0dXJuKSYmbi5jYWxsKGwpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX10cnl7Zm9yKHZhciBwPWkodSksZj1wLm5leHQoKTshZi5kb25lO2Y9cC5uZXh0KCkpe3ZhciBkPWYudmFsdWU7ZS5kZWxldGUoZCl9fWNhdGNoKGUpe289e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2YmJiFmLmRvbmUmJihhPXAucmV0dXJuKSYmYS5jYWxsKHApfWZpbmFsbHl7aWYobyl0aHJvdyBvLmVycm9yfX19ZWxzZSBlLmRlbGV0ZSh0KX0sdC5jb250YWlucz1mdW5jdGlvbihlLHQpe3ZhciByLG47aWYocy5pc0Z1bmN0aW9uKHQpKXt0cnl7Zm9yKHZhciBvPWkoZSksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe3ZhciB1PWEudmFsdWU7aWYodC5jYWxsKG51bGwsdSkpcmV0dXJuITB9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihuPW8ucmV0dXJuKSYmbi5jYWxsKG8pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4hMX1yZXR1cm4gZS5oYXModCl9LHQua2V5cz1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFNldChlLmtleXMoKSl9LHQudmFsdWVzPWZ1bmN0aW9uKGUpe3JldHVybiBhKGUudmFsdWVzKCkpfSx0LnNpemU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO2lmKHZvaWQgMD09PXQpcmV0dXJuIGUuc2l6ZTt2YXIgbz0wO3RyeXtmb3IodmFyIGE9aShlKSxzPWEubmV4dCgpOyFzLmRvbmU7cz1hLm5leHQoKSl7dmFyIHU9cy52YWx1ZTt0LmNhbGwobnVsbCx1KSYmbysrfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYobj1hLnJldHVybikmJm4uY2FsbChhKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIG99LHQuaXNFbXB0eT1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWUuc2l6ZX0sdC5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbyxhLHMsdSxsO3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHZvaWQgMCE9PXQ/WzMsMl06WzUsaShlKV07Y2FzZSAxOnJldHVybiBuLnNlbnQoKSxbMyw5XTtjYXNlIDI6bi50cnlzLnB1c2goWzIsNyw4LDldKSxyPWkoZSksbz1yLm5leHQoKSxuLmxhYmVsPTM7Y2FzZSAzOnJldHVybiBvLmRvbmU/WzMsNl06KGE9by52YWx1ZSx0LmNhbGwobnVsbCxhKT9bNCxhXTpbMyw1XSk7Y2FzZSA0Om4uc2VudCgpLG4ubGFiZWw9NTtjYXNlIDU6cmV0dXJuIG89ci5uZXh0KCksWzMsM107Y2FzZSA2OnJldHVyblszLDldO2Nhc2UgNzpyZXR1cm4gcz1uLnNlbnQoKSx1PXtlcnJvcjpzfSxbMyw5XTtjYXNlIDg6dHJ5e28mJiFvLmRvbmUmJihsPXIucmV0dXJuKSYmbC5jYWxsKHIpfWZpbmFsbHl7aWYodSl0aHJvdyB1LmVycm9yfXJldHVybls3XTtjYXNlIDk6cmV0dXJuWzJdfX0pKX0sdC5jbG9uZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IE1hcChlKX0sdC5zb3J0SW5Bc2NlbmRpbmdPcmRlcj1mdW5jdGlvbihlLHQpe3ZhciByPW5ldyhBcnJheS5iaW5kLmFwcGx5KEFycmF5LGEoW3ZvaWQgMF0sZSkpKTtyZXR1cm4gci5zb3J0KChmdW5jdGlvbihlLHIpe3JldHVybiB0LmNhbGwobnVsbCxlLHIpPy0xOjF9KSksbmV3IE1hcChyKX0sdC5zb3J0SW5EZXNjZW5kaW5nT3JkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcoQXJyYXkuYmluZC5hcHBseShBcnJheSxhKFt2b2lkIDBdLGUpKSk7cmV0dXJuIHIuc29ydCgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKG51bGwsZSxyKT8xOi0xfSkpLG5ldyBNYXAocil9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5IVE1MPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLHQuWE1MPVwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsdC5YTUxOUz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCIsdC5NYXRoTUw9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsdC5TVkc9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLHQuWExpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJ9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmVucXVldWU9ZnVuY3Rpb24oZSx0KXtlLnB1c2godCl9LHQuZGVxdWV1ZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5zaGlmdCgpfHxudWxsfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYT17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZpWzBdKXRocm93IGlbMV07cmV0dXJuIGlbMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gbz17bmV4dDpzKDApLHRocm93OnMoMSkscmV0dXJuOnMoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKG9bU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksbztmdW5jdGlvbiBzKG8pe3JldHVybiBmdW5jdGlvbihzKXtyZXR1cm4gZnVuY3Rpb24obyl7aWYocil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2E7KXRyeXtpZihyPTEsbiYmKGk9MiZvWzBdP24ucmV0dXJuOm9bMF0/bi50aHJvd3x8KChpPW4ucmV0dXJuKSYmaS5jYWxsKG4pLDApOm4ubmV4dCkmJiEoaT1pLmNhbGwobixvWzFdKSkuZG9uZSlyZXR1cm4gaTtzd2l0Y2gobj0wLGkmJihvPVsyJm9bMF0saS52YWx1ZV0pLG9bMF0pe2Nhc2UgMDpjYXNlIDE6aT1vO2JyZWFrO2Nhc2UgNDpyZXR1cm4gYS5sYWJlbCsrLHt2YWx1ZTpvWzFdLGRvbmU6ITF9O2Nhc2UgNTphLmxhYmVsKyssbj1vWzFdLG89WzBdO2NvbnRpbnVlO2Nhc2UgNzpvPWEub3BzLnBvcCgpLGEudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEoaT1hLnRyeXMsKGk9aS5sZW5ndGg+MCYmaVtpLmxlbmd0aC0xXSl8fDYhPT1vWzBdJiYyIT09b1swXSkpe2E9MDtjb250aW51ZX1pZigzPT09b1swXSYmKCFpfHxvWzFdPmlbMF0mJm9bMV08aVszXSkpe2EubGFiZWw9b1sxXTticmVha31pZig2PT09b1swXSYmYS5sYWJlbDxpWzFdKXthLmxhYmVsPWlbMV0saT1vO2JyZWFrfWlmKGkmJmEubGFiZWw8aVsyXSl7YS5sYWJlbD1pWzJdLGEub3BzLnB1c2gobyk7YnJlYWt9aVsyXSYmYS5vcHMucG9wKCksYS50cnlzLnBvcCgpO2NvbnRpbnVlfW89dC5jYWxsKGUsYSl9Y2F0Y2goZSl7bz1bNixlXSxuPTB9ZmluYWxseXtyPWk9MH1pZig1Jm9bMF0pdGhyb3cgb1sxXTtyZXR1cm57dmFsdWU6b1swXT9vWzFdOnZvaWQgMCxkb25lOiEwfX0oW28sc10pfX19LGk9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX0sbz10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLGE9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspYS5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gYX0sYT10aGlzJiZ0aGlzLl9fc3ByZWFkfHxmdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllPWUuY29uY2F0KG8oYXJndW1lbnRzW3RdKSk7cmV0dXJuIGV9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPXIoMSk7ZnVuY3Rpb24gdShlLHQpe3ZhciByLG47dHJ5e2Zvcih2YXIgbz1pKGUpLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgcz1hLnZhbHVlO2lmKCF0LmhhcyhzKSlyZXR1cm4hMX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKG49by5yZXR1cm4pJiZuLmNhbGwobyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiEwfXQuYXBwZW5kPWZ1bmN0aW9uKGUsdCl7ZS5hZGQodCl9LHQuZXh0ZW5kPWZ1bmN0aW9uKGUsdCl7dC5mb3JFYWNoKGUuYWRkLGUpfSx0LnByZXBlbmQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgU2V0KGUpO2UuY2xlYXIoKSxlLmFkZCh0KSxyLmZvckVhY2goZS5hZGQsZSl9LHQucmVwbGFjZT1mdW5jdGlvbihlLHQscil7dmFyIG4sbyxhPW5ldyBTZXQ7dHJ5e2Zvcih2YXIgdT1pKGUpLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgYz1sLnZhbHVlO3MuaXNGdW5jdGlvbih0KT90LmNhbGwobnVsbCxjKT9hLmFkZChyKTphLmFkZChjKTpjPT09dD9hLmFkZChyKTphLmFkZChjKX19Y2F0Y2goZSl7bj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKG89dS5yZXR1cm4pJiZvLmNhbGwodSl9ZmluYWxseXtpZihuKXRocm93IG4uZXJyb3J9fWUuY2xlYXIoKSxhLmZvckVhY2goZS5hZGQsZSl9LHQuaW5zZXJ0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixvLGE9bmV3IFNldCxzPTA7dHJ5e2Zvcih2YXIgdT1pKGUpLGw9dS5uZXh0KCk7IWwuZG9uZTtsPXUubmV4dCgpKXt2YXIgYz1sLnZhbHVlO3M9PT1yJiZhLmFkZCh0KSxhLmFkZChjKSxzKyt9fWNhdGNoKGUpe249e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJihvPXUucmV0dXJuKSYmby5jYWxsKHUpfWZpbmFsbHl7aWYobil0aHJvdyBuLmVycm9yfX1lLmNsZWFyKCksYS5mb3JFYWNoKGUuYWRkLGUpfSx0LnJlbW92ZT1mdW5jdGlvbihlLHQpe3ZhciByLG4sbyxhO2lmKHMuaXNGdW5jdGlvbih0KSl7dmFyIHU9W107dHJ5e2Zvcih2YXIgbD1pKGUpLGM9bC5uZXh0KCk7IWMuZG9uZTtjPWwubmV4dCgpKXt2YXIgaD1jLnZhbHVlO3QuY2FsbChudWxsLGgpJiZ1LnB1c2goaCl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2MmJiFjLmRvbmUmJihuPWwucmV0dXJuKSYmbi5jYWxsKGwpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX10cnl7Zm9yKHZhciBwPWkodSksZj1wLm5leHQoKTshZi5kb25lO2Y9cC5uZXh0KCkpe3ZhciBkPWYudmFsdWU7ZS5kZWxldGUoZCl9fWNhdGNoKGUpe289e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2YmJiFmLmRvbmUmJihhPXAucmV0dXJuKSYmYS5jYWxsKHApfWZpbmFsbHl7aWYobyl0aHJvdyBvLmVycm9yfX19ZWxzZSBlLmRlbGV0ZSh0KX0sdC5lbXB0eT1mdW5jdGlvbihlKXtlLmNsZWFyKCl9LHQuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO2lmKCFzLmlzRnVuY3Rpb24odCkpcmV0dXJuIGUuaGFzKHQpO3RyeXtmb3IodmFyIG89aShlKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7dmFyIHU9YS52YWx1ZTtpZih0LmNhbGwobnVsbCx1KSlyZXR1cm4hMH19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKG49by5yZXR1cm4pJiZuLmNhbGwobyl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiExfSx0LnNpemU9ZnVuY3Rpb24oZSx0KXt2YXIgcixuO2lmKHZvaWQgMD09PXQpcmV0dXJuIGUuc2l6ZTt2YXIgbz0wO3RyeXtmb3IodmFyIGE9aShlKSxzPWEubmV4dCgpOyFzLmRvbmU7cz1hLm5leHQoKSl7dmFyIHU9cy52YWx1ZTt0LmNhbGwobnVsbCx1KSYmbysrfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYobj1hLnJldHVybikmJm4uY2FsbChhKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIG99LHQuaXNFbXB0eT1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWUuc2l6ZX0sdC5mb3JFYWNoPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbyxhLHMsdSxsO3JldHVybiBuKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHZvaWQgMCE9PXQ/WzMsMl06WzUsaShlKV07Y2FzZSAxOnJldHVybiBuLnNlbnQoKSxbMyw5XTtjYXNlIDI6bi50cnlzLnB1c2goWzIsNyw4LDldKSxyPWkoZSksbz1yLm5leHQoKSxuLmxhYmVsPTM7Y2FzZSAzOnJldHVybiBvLmRvbmU/WzMsNl06KGE9by52YWx1ZSx0LmNhbGwobnVsbCxhKT9bNCxhXTpbMyw1XSk7Y2FzZSA0Om4uc2VudCgpLG4ubGFiZWw9NTtjYXNlIDU6cmV0dXJuIG89ci5uZXh0KCksWzMsM107Y2FzZSA2OnJldHVyblszLDldO2Nhc2UgNzpyZXR1cm4gcz1uLnNlbnQoKSx1PXtlcnJvcjpzfSxbMyw5XTtjYXNlIDg6dHJ5e28mJiFvLmRvbmUmJihsPXIucmV0dXJuKSYmbC5jYWxsKHIpfWZpbmFsbHl7aWYodSl0aHJvdyB1LmVycm9yfXJldHVybls3XTtjYXNlIDk6cmV0dXJuWzJdfX0pKX0sdC5jbG9uZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFNldChlKX0sdC5zb3J0SW5Bc2NlbmRpbmdPcmRlcj1mdW5jdGlvbihlLHQpe3ZhciByPW5ldyhBcnJheS5iaW5kLmFwcGx5KEFycmF5LGEoW3ZvaWQgMF0sZSkpKTtyZXR1cm4gci5zb3J0KChmdW5jdGlvbihlLHIpe3JldHVybiB0LmNhbGwobnVsbCxlLHIpPy0xOjF9KSksbmV3IFNldChyKX0sdC5zb3J0SW5EZXNjZW5kaW5nT3JkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcoQXJyYXkuYmluZC5hcHBseShBcnJheSxhKFt2b2lkIDBdLGUpKSk7cmV0dXJuIHIuc29ydCgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKG51bGwsZSxyKT8xOi0xfSkpLG5ldyBTZXQocil9LHQuaXNTdWJzZXRPZj11LHQuaXNTdXBlcnNldE9mPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUodCxlKX0sdC5pbnRlcnNlY3Rpb249ZnVuY3Rpb24oZSx0KXt2YXIgcixuLG89bmV3IFNldDt0cnl7Zm9yKHZhciBhPWkoZSkscz1hLm5leHQoKTshcy5kb25lO3M9YS5uZXh0KCkpe3ZhciB1PXMudmFsdWU7dC5oYXModSkmJm8uYWRkKHUpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYobj1hLnJldHVybikmJm4uY2FsbChhKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIG99LHQudW5pb249ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgU2V0KGUpO3JldHVybiB0LmZvckVhY2goci5hZGQscikscn0sdC5yYW5nZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1uZXcgU2V0LG49ZTtuPD10O24rKylyLmFkZChuKTtyZXR1cm4gcn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnB1c2g9ZnVuY3Rpb24oZSx0KXtlLnB1c2godCl9LHQucG9wPWZ1bmN0aW9uKGUpe3JldHVybiBlLnBvcCgpfHxudWxsfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoOTYpLG89cigxNDcpLGE9cigxNDYpLHM9cigxKTtmdW5jdGlvbiB1KGUsdCl7Zm9yKHZhciByPTA7Oyl7dmFyIG49cjxlLmxlbmd0aD9lLmNoYXJDb2RlQXQocik6bnVsbCxpPXI8dC5sZW5ndGg/dC5jaGFyQ29kZUF0KHIpOm51bGw7aWYobnVsbD09PW4pcmV0dXJuITA7aWYobiE9PWkpcmV0dXJuITE7cisrfX1mdW5jdGlvbiBsKGUpe3ZhciB0LHIsaT1BcnJheS5mcm9tKGUpLG89bmV3IFVpbnQ4QXJyYXkoaS5sZW5ndGgpLGE9MDt0cnl7Zm9yKHZhciBzPW4oZSksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBsPXUudmFsdWUuY29kZVBvaW50QXQoMCk7Y29uc29sZS5hc3NlcnQodm9pZCAwIT09bCYmbDw9MjU1LFwiaXNvbW9ycGhpY0VuY29kZSByZXF1aXJlcyBzdHJpbmcgYnl0ZXMgdG8gYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDB4MDBGRi5cIiksdm9pZCAwIT09bCYmbDw9MjU1JiYob1thKytdPWwpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXt1JiYhdS5kb25lJiYocj1zLnJldHVybikmJnIuY2FsbChzKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIG99ZnVuY3Rpb24gYyhlKXtyZXR1cm4vXltcXHUwMDAwLVxcdTAwN0ZdKiQvLnRlc3QoZSl9ZnVuY3Rpb24gaChlKXt2YXIgdCxyLGk9XCJcIjt0cnl7Zm9yKHZhciBvPW4oZSksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe3ZhciBzPWEudmFsdWUsdT1zLmNvZGVQb2ludEF0KDApO2krPXZvaWQgMCE9PXUmJnU+PTY1JiZ1PD05MD9TdHJpbmcuZnJvbUNvZGVQb2ludCh1KzMyKTpzfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIGl9ZnVuY3Rpb24gcChlKXtyZXR1cm4gZS5yZXBsYWNlKC9eW1xcdFxcblxcZlxcciBdKy8sXCJcIikucmVwbGFjZSgvW1xcdFxcblxcZlxcciBdKyQvLFwiXCIpfWZ1bmN0aW9uIGYoZSx0LHIpe2lmKCFzLmlzQXJyYXkodCkpcmV0dXJuIGYoZSxBcnJheS5mcm9tKHQpLHIpO2Zvcih2YXIgbj1cIlwiO3IucG9zaXRpb248dC5sZW5ndGgmJmUuY2FsbChudWxsLHRbci5wb3NpdGlvbl0pOyluKz10W3IucG9zaXRpb25dLHIucG9zaXRpb24rKztyZXR1cm4gbn1mdW5jdGlvbiBkKGUsdCl7ZigoZnVuY3Rpb24oZSl7cmV0dXJuIGkuQVNDSUlXaGl0ZVNwYWNlLnRlc3QoZSl9KSxlLHQpfXQuaXNDb2RlVW5pdFByZWZpeD11LHQuaXNDb2RlVW5pdExlc3NUaGFuPWZ1bmN0aW9uKGUsdCl7aWYodSh0LGUpKXJldHVybiExO2lmKHUoZSx0KSlyZXR1cm4hMDtmb3IodmFyIHI9MDtyPE1hdGgubWluKGUubGVuZ3RoLHQubGVuZ3RoKTtyKyspe3ZhciBuPWUuY2hhckNvZGVBdChyKSxpPXQuY2hhckNvZGVBdChyKTtpZihuIT09aSlyZXR1cm4gbjxpfXJldHVybiExfSx0Lmlzb21vcnBoaWNFbmNvZGU9bCx0LmlzQVNDSUlTdHJpbmc9Yyx0LmFzY2lpTG93ZXJjYXNlPWgsdC5hc2NpaVVwcGVyY2FzZT1mdW5jdGlvbihlKXt2YXIgdCxyLGk9XCJcIjt0cnl7Zm9yKHZhciBvPW4oZSksYT1vLm5leHQoKTshYS5kb25lO2E9by5uZXh0KCkpe3ZhciBzPWEudmFsdWUsdT1zLmNvZGVQb2ludEF0KDApO2krPXZvaWQgMCE9PXUmJnU+PTk3JiZ1PD0xMjI/U3RyaW5nLmZyb21Db2RlUG9pbnQodS0zMik6c319Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXJldHVybiBpfSx0LmFzY2lpQ2FzZUluc2Vuc2l0aXZlTWF0Y2g9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaChlKT09PWgodCl9LHQuYXNjaWlFbmNvZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGNvbnNvbGUuYXNzZXJ0KGMoZSksXCJhc2NpaUVuY29kZSByZXF1aXJlcyBhbiBBU0NJSSBzdHJpbmcuXCIpLGwoZSl9LHQuYXNjaWlEZWNvZGU9ZnVuY3Rpb24oZSl7dmFyIHQscjt0cnl7Zm9yKHZhciBpPW4oZSkscz1pLm5leHQoKTshcy5kb25lO3M9aS5uZXh0KCkpe3ZhciB1PXMudmFsdWU7Y29uc29sZS5hc3NlcnQoYS5pc0FTQ0lJQnl0ZSh1KSxcImFzY2lpRGVjb2RlIHJlcXVpcmVzIGFuIEFTQ0lJIGJ5dGUgc2VxdWVuY2UuXCIpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYocj1pLnJldHVybikmJnIuY2FsbChpKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19cmV0dXJuIG8uaXNvbW9ycGhpY0RlY29kZShlKX0sdC5zdHJpcE5ld2xpbmVzPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1tcXG5cXHJdL2csXCJcIil9LHQubm9ybWFsaXplTmV3bGluZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIikucmVwbGFjZSgvXFxyL2csXCJcXG5cIil9LHQuc3RyaXBMZWFkaW5nQW5kVHJhaWxpbmdBU0NJSVdoaXRlc3BhY2U9cCx0LnN0cmlwQW5kQ29sbGFwc2VBU0NJSVdoaXRlc3BhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHAoZS5yZXBsYWNlKC9bXFx0XFxuXFxmXFxyIF17Mix9L2csXCIgXCIpKX0sdC5jb2xsZWN0QVNlcXVlbmNlT2ZDb2RlUG9pbnRzPWYsdC5za2lwQVNDSUlXaGl0ZXNwYWNlPWQsdC5zdHJpY3RseVNwbGl0PWZ1bmN0aW9uIGUodCxyKXtpZighcy5pc0FycmF5KHQpKXJldHVybiBlKEFycmF5LmZyb20odCkscik7dmFyIG49e3Bvc2l0aW9uOjB9LGk9W10sbz1mKChmdW5jdGlvbihlKXtyZXR1cm4gciE9PWV9KSx0LG4pO2ZvcihpLnB1c2gobyk7bi5wb3NpdGlvbjx0Lmxlbmd0aDspY29uc29sZS5hc3NlcnQodFtuLnBvc2l0aW9uXT09PXIsXCJzdHJpY3RseVNwbGl0IGZvdW5kIG5vIGRlbGltaXRlciBpbiBpbnB1dCBzdHJpbmcuXCIpLG4ucG9zaXRpb24rKyxvPWYoKGZ1bmN0aW9uKGUpe3JldHVybiByIT09ZX0pLHQsbiksaS5wdXNoKG8pO3JldHVybiBpfSx0LnNwbGl0QVN0cmluZ09uQVNDSUlXaGl0ZXNwYWNlPWZ1bmN0aW9uIGUodCl7aWYoIXMuaXNBcnJheSh0KSlyZXR1cm4gZShBcnJheS5mcm9tKHQpKTt2YXIgcj17cG9zaXRpb246MH0sbj1bXTtmb3IoZCh0LHIpO3IucG9zaXRpb248dC5sZW5ndGg7KXt2YXIgbz1mKChmdW5jdGlvbihlKXtyZXR1cm4haS5BU0NJSVdoaXRlU3BhY2UudGVzdChlKX0pLHQscik7bi5wdXNoKG8pLGQodCxyKX1yZXR1cm4gbn0sdC5zcGxpdEFTdHJpbmdPbkNvbW1hcz1mdW5jdGlvbiBlKHQpe2lmKCFzLmlzQXJyYXkodCkpcmV0dXJuIGUoQXJyYXkuZnJvbSh0KSk7Zm9yKHZhciByPXtwb3NpdGlvbjowfSxuPVtdO3IucG9zaXRpb248dC5sZW5ndGg7KXt2YXIgaT1mKChmdW5jdGlvbihlKXtyZXR1cm5cIixcIiE9PWV9KSx0LHIpO24ucHVzaChwKGkpKSxyLnBvc2l0aW9uPHQubGVuZ3RoJiYoY29uc29sZS5hc3NlcnQoXCIsXCI9PT10W3IucG9zaXRpb25dLFwic3BsaXRBU3RyaW5nT25Db21tYXMgZm91bmQgbm8gZGVsaW1pdGVyIGluIGlucHV0IHN0cmluZy5cIiksci5wb3NpdGlvbisrKX1yZXR1cm4gbn0sdC5jb25jYXRlbmF0ZT1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1cIlwiKSwwPT09ZS5sZW5ndGg/XCJcIjplLmpvaW4odCl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cig5Nyk7dC5hYm9ydF9hZGQ9ZnVuY3Rpb24oZSx0KXt0Ll9hYm9ydGVkRmxhZ3x8dC5fYWJvcnRBbGdvcml0aG1zLmFkZChlKX0sdC5hYm9ydF9yZW1vdmU9ZnVuY3Rpb24oZSx0KXt0Ll9hYm9ydEFsZ29yaXRobXMuZGVsZXRlKGUpfSx0LmFib3J0X3NpZ25hbEFib3J0PWZ1bmN0aW9uKGUpe3ZhciB0LHI7aWYoIWUuX2Fib3J0ZWRGbGFnKXtlLl9hYm9ydGVkRmxhZz0hMDt0cnl7Zm9yKHZhciBvPW4oZS5fYWJvcnRBbGdvcml0aG1zKSxhPW8ubmV4dCgpOyFhLmRvbmU7YT1vLm5leHQoKSl7YS52YWx1ZS5jYWxsKGUpfX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19ZS5fYWJvcnRBbGdvcml0aG1zLmNsZWFyKCksaS5ldmVudF9maXJlQW5FdmVudChcImFib3J0XCIsZSl9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMTUwKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5hc05vZGU9ZnVuY3Rpb24oZSl7aWYobi5HdWFyZC5pc05vZGUoZSkpcmV0dXJuIGU7dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBvYmplY3QuIE5vZGUgZXhwZWN0ZWQuXCIpfSxlfSgpO3QuQ2FzdD1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiAwfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIHRvIGFuIGVtcHR5IHNldC5cIil9LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7fSxlLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24oZSl7cmV0dXJuITF9LGUucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24oZSx0KXt9LGUucHJvdG90eXBlLmhhcz1mdW5jdGlvbihlKXtyZXR1cm4hMX0sZS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiBuZXcgaX0sZS5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3JldHVybiBuZXcgaX0sZS5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3JldHVybiBuZXcgaX0sZS5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIkVtcHR5U2V0XCJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZX0oKTt0LkVtcHR5U2V0PW47dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBlLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGUucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTohMCx2YWx1ZTpudWxsfX0sZX0oKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGZ1bmN0aW9uKGUpe2VbZS5TY2hlbWVTdGFydD0wXT1cIlNjaGVtZVN0YXJ0XCIsZVtlLlNjaGVtZT0xXT1cIlNjaGVtZVwiLGVbZS5Ob1NjaGVtZT0yXT1cIk5vU2NoZW1lXCIsZVtlLlNwZWNpYWxSZWxhdGl2ZU9yQXV0aG9yaXR5PTNdPVwiU3BlY2lhbFJlbGF0aXZlT3JBdXRob3JpdHlcIixlW2UuUGF0aE9yQXV0aG9yaXR5PTRdPVwiUGF0aE9yQXV0aG9yaXR5XCIsZVtlLlJlbGF0aXZlPTVdPVwiUmVsYXRpdmVcIixlW2UuUmVsYXRpdmVTbGFzaD02XT1cIlJlbGF0aXZlU2xhc2hcIixlW2UuU3BlY2lhbEF1dGhvcml0eVNsYXNoZXM9N109XCJTcGVjaWFsQXV0aG9yaXR5U2xhc2hlc1wiLGVbZS5TcGVjaWFsQXV0aG9yaXR5SWdub3JlU2xhc2hlcz04XT1cIlNwZWNpYWxBdXRob3JpdHlJZ25vcmVTbGFzaGVzXCIsZVtlLkF1dGhvcml0eT05XT1cIkF1dGhvcml0eVwiLGVbZS5Ib3N0PTEwXT1cIkhvc3RcIixlW2UuSG9zdG5hbWU9MTFdPVwiSG9zdG5hbWVcIixlW2UuUG9ydD0xMl09XCJQb3J0XCIsZVtlLkZpbGU9MTNdPVwiRmlsZVwiLGVbZS5GaWxlU2xhc2g9MTRdPVwiRmlsZVNsYXNoXCIsZVtlLkZpbGVIb3N0PTE1XT1cIkZpbGVIb3N0XCIsZVtlLlBhdGhTdGFydD0xNl09XCJQYXRoU3RhcnRcIixlW2UuUGF0aD0xN109XCJQYXRoXCIsZVtlLkNhbm5vdEJlQUJhc2VVUkxQYXRoPTE4XT1cIkNhbm5vdEJlQUJhc2VVUkxQYXRoXCIsZVtlLlF1ZXJ5PTE5XT1cIlF1ZXJ5XCIsZVtlLkZyYWdtZW50PTIwXT1cIkZyYWdtZW50XCJ9KHQuUGFyc2VyU3RhdGV8fCh0LlBhcnNlclN0YXRlPXt9KSksdC5PcGFxdWVPcmlnaW49W1wiXCIsXCJcIixudWxsLG51bGxdfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyNDUpLGk9cigyNDcpO2Z1bmN0aW9uIG8oKXt0aGlzLnByb3RvY29sPW51bGwsdGhpcy5zbGFzaGVzPW51bGwsdGhpcy5hdXRoPW51bGwsdGhpcy5ob3N0PW51bGwsdGhpcy5wb3J0PW51bGwsdGhpcy5ob3N0bmFtZT1udWxsLHRoaXMuaGFzaD1udWxsLHRoaXMuc2VhcmNoPW51bGwsdGhpcy5xdWVyeT1udWxsLHRoaXMucGF0aG5hbWU9bnVsbCx0aGlzLnBhdGg9bnVsbCx0aGlzLmhyZWY9bnVsbH10LnBhcnNlPWcsdC5yZXNvbHZlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGcoZSwhMSwhMCkucmVzb2x2ZSh0KX0sdC5yZXNvbHZlT2JqZWN0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU/ZyhlLCExLCEwKS5yZXNvbHZlT2JqZWN0KHQpOnR9LHQuZm9ybWF0PWZ1bmN0aW9uKGUpe2kuaXNTdHJpbmcoZSkmJihlPWcoZSkpO3JldHVybiBlIGluc3RhbmNlb2Ygbz9lLmZvcm1hdCgpOm8ucHJvdG90eXBlLmZvcm1hdC5jYWxsKGUpfSx0LlVybD1vO3ZhciBhPS9eKFthLXowLTkuKy1dKzopL2kscz0vOlswLTldKiQvLHU9L14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxsPVtcIntcIixcIn1cIixcInxcIixcIlxcXFxcIixcIl5cIixcImBcIl0uY29uY2F0KFtcIjxcIixcIj5cIiwnXCInLFwiYFwiLFwiIFwiLFwiXFxyXCIsXCJcXG5cIixcIlxcdFwiXSksYz1bXCInXCJdLmNvbmNhdChsKSxoPVtcIiVcIixcIi9cIixcIj9cIixcIjtcIixcIiNcIl0uY29uY2F0KGMpLHA9W1wiL1wiLFwiP1wiLFwiI1wiXSxmPS9eWythLXowLTlBLVpfLV17MCw2M30kLyxkPS9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxtPXtqYXZhc2NyaXB0OiEwLFwiamF2YXNjcmlwdDpcIjohMH0seT17amF2YXNjcmlwdDohMCxcImphdmFzY3JpcHQ6XCI6ITB9LHY9e2h0dHA6ITAsaHR0cHM6ITAsZnRwOiEwLGdvcGhlcjohMCxmaWxlOiEwLFwiaHR0cDpcIjohMCxcImh0dHBzOlwiOiEwLFwiZnRwOlwiOiEwLFwiZ29waGVyOlwiOiEwLFwiZmlsZTpcIjohMH0sXz1yKDI0OCk7ZnVuY3Rpb24gZyhlLHQscil7aWYoZSYmaS5pc09iamVjdChlKSYmZSBpbnN0YW5jZW9mIG8pcmV0dXJuIGU7dmFyIG49bmV3IG87cmV0dXJuIG4ucGFyc2UoZSx0LHIpLG59by5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oZSx0LHIpe2lmKCFpLmlzU3RyaW5nKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiK3R5cGVvZiBlKTt2YXIgbz1lLmluZGV4T2YoXCI/XCIpLHM9LTEhPT1vJiZvPGUuaW5kZXhPZihcIiNcIik/XCI/XCI6XCIjXCIsbD1lLnNwbGl0KHMpO2xbMF09bFswXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpO3ZhciBnPWU9bC5qb2luKHMpO2lmKGc9Zy50cmltKCksIXImJjE9PT1lLnNwbGl0KFwiI1wiKS5sZW5ndGgpe3ZhciBiPXUuZXhlYyhnKTtpZihiKXJldHVybiB0aGlzLnBhdGg9Zyx0aGlzLmhyZWY9Zyx0aGlzLnBhdGhuYW1lPWJbMV0sYlsyXT8odGhpcy5zZWFyY2g9YlsyXSx0aGlzLnF1ZXJ5PXQ/Xy5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpOnRoaXMuc2VhcmNoLnN1YnN0cigxKSk6dCYmKHRoaXMuc2VhcmNoPVwiXCIsdGhpcy5xdWVyeT17fSksdGhpc312YXIgeD1hLmV4ZWMoZyk7aWYoeCl7dmFyIHc9KHg9eFswXSkudG9Mb3dlckNhc2UoKTt0aGlzLnByb3RvY29sPXcsZz1nLnN1YnN0cih4Lmxlbmd0aCl9aWYocnx8eHx8Zy5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpe3ZhciBFPVwiLy9cIj09PWcuc3Vic3RyKDAsMik7IUV8fHgmJnlbeF18fChnPWcuc3Vic3RyKDIpLHRoaXMuc2xhc2hlcz0hMCl9aWYoIXlbeF0mJihFfHx4JiYhdlt4XSkpe2Zvcih2YXIgRCxTLEM9LTEsQT0wO0E8cC5sZW5ndGg7QSsrKXstMSE9PShOPWcuaW5kZXhPZihwW0FdKSkmJigtMT09PUN8fE48QykmJihDPU4pfS0xIT09KFM9LTE9PT1DP2cubGFzdEluZGV4T2YoXCJAXCIpOmcubGFzdEluZGV4T2YoXCJAXCIsQykpJiYoRD1nLnNsaWNlKDAsUyksZz1nLnNsaWNlKFMrMSksdGhpcy5hdXRoPWRlY29kZVVSSUNvbXBvbmVudChEKSksQz0tMTtmb3IoQT0wO0E8aC5sZW5ndGg7QSsrKXt2YXIgTjstMSE9PShOPWcuaW5kZXhPZihoW0FdKSkmJigtMT09PUN8fE48QykmJihDPU4pfS0xPT09QyYmKEM9Zy5sZW5ndGgpLHRoaXMuaG9zdD1nLnNsaWNlKDAsQyksZz1nLnNsaWNlKEMpLHRoaXMucGFyc2VIb3N0KCksdGhpcy5ob3N0bmFtZT10aGlzLmhvc3RuYW1lfHxcIlwiO3ZhciBUPVwiW1wiPT09dGhpcy5ob3N0bmFtZVswXSYmXCJdXCI9PT10aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoLTFdO2lmKCFUKWZvcih2YXIgTz10aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKSxGPShBPTAsTy5sZW5ndGgpO0E8RjtBKyspe3ZhciBrPU9bQV07aWYoayYmIWsubWF0Y2goZikpe2Zvcih2YXIgUD1cIlwiLEk9MCxMPWsubGVuZ3RoO0k8TDtJKyspay5jaGFyQ29kZUF0KEkpPjEyNz9QKz1cInhcIjpQKz1rW0ldO2lmKCFQLm1hdGNoKGYpKXt2YXIgTT1PLnNsaWNlKDAsQSksQj1PLnNsaWNlKEErMSksaj1rLm1hdGNoKGQpO2omJihNLnB1c2goalsxXSksQi51bnNoaWZ0KGpbMl0pKSxCLmxlbmd0aCYmKGc9XCIvXCIrQi5qb2luKFwiLlwiKStnKSx0aGlzLmhvc3RuYW1lPU0uam9pbihcIi5cIik7YnJlYWt9fX10aGlzLmhvc3RuYW1lLmxlbmd0aD4yNTU/dGhpcy5ob3N0bmFtZT1cIlwiOnRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpLFR8fCh0aGlzLmhvc3RuYW1lPW4udG9BU0NJSSh0aGlzLmhvc3RuYW1lKSk7dmFyIFI9dGhpcy5wb3J0P1wiOlwiK3RoaXMucG9ydDpcIlwiLHo9dGhpcy5ob3N0bmFtZXx8XCJcIjt0aGlzLmhvc3Q9eitSLHRoaXMuaHJlZis9dGhpcy5ob3N0LFQmJih0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsdGhpcy5ob3N0bmFtZS5sZW5ndGgtMiksXCIvXCIhPT1nWzBdJiYoZz1cIi9cIitnKSl9aWYoIW1bd10pZm9yKEE9MCxGPWMubGVuZ3RoO0E8RjtBKyspe3ZhciBVPWNbQV07aWYoLTEhPT1nLmluZGV4T2YoVSkpe3ZhciBHPWVuY29kZVVSSUNvbXBvbmVudChVKTtHPT09VSYmKEc9ZXNjYXBlKFUpKSxnPWcuc3BsaXQoVSkuam9pbihHKX19dmFyIFg9Zy5pbmRleE9mKFwiI1wiKTstMSE9PVgmJih0aGlzLmhhc2g9Zy5zdWJzdHIoWCksZz1nLnNsaWNlKDAsWCkpO3ZhciBxPWcuaW5kZXhPZihcIj9cIik7aWYoLTEhPT1xPyh0aGlzLnNlYXJjaD1nLnN1YnN0cihxKSx0aGlzLnF1ZXJ5PWcuc3Vic3RyKHErMSksdCYmKHRoaXMucXVlcnk9Xy5wYXJzZSh0aGlzLnF1ZXJ5KSksZz1nLnNsaWNlKDAscSkpOnQmJih0aGlzLnNlYXJjaD1cIlwiLHRoaXMucXVlcnk9e30pLGcmJih0aGlzLnBhdGhuYW1lPWcpLHZbd10mJnRoaXMuaG9zdG5hbWUmJiF0aGlzLnBhdGhuYW1lJiYodGhpcy5wYXRobmFtZT1cIi9cIiksdGhpcy5wYXRobmFtZXx8dGhpcy5zZWFyY2gpe1I9dGhpcy5wYXRobmFtZXx8XCJcIjt2YXIgVz10aGlzLnNlYXJjaHx8XCJcIjt0aGlzLnBhdGg9UitXfXJldHVybiB0aGlzLmhyZWY9dGhpcy5mb3JtYXQoKSx0aGlzfSxvLnByb3RvdHlwZS5mb3JtYXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmF1dGh8fFwiXCI7ZSYmKGU9KGU9ZW5jb2RlVVJJQ29tcG9uZW50KGUpKS5yZXBsYWNlKC8lM0EvaSxcIjpcIiksZSs9XCJAXCIpO3ZhciB0PXRoaXMucHJvdG9jb2x8fFwiXCIscj10aGlzLnBhdGhuYW1lfHxcIlwiLG49dGhpcy5oYXNofHxcIlwiLG89ITEsYT1cIlwiO3RoaXMuaG9zdD9vPWUrdGhpcy5ob3N0OnRoaXMuaG9zdG5hbWUmJihvPWUrKC0xPT09dGhpcy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKT90aGlzLmhvc3RuYW1lOlwiW1wiK3RoaXMuaG9zdG5hbWUrXCJdXCIpLHRoaXMucG9ydCYmKG8rPVwiOlwiK3RoaXMucG9ydCkpLHRoaXMucXVlcnkmJmkuaXNPYmplY3QodGhpcy5xdWVyeSkmJk9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCYmKGE9Xy5zdHJpbmdpZnkodGhpcy5xdWVyeSkpO3ZhciBzPXRoaXMuc2VhcmNofHxhJiZcIj9cIithfHxcIlwiO3JldHVybiB0JiZcIjpcIiE9PXQuc3Vic3RyKC0xKSYmKHQrPVwiOlwiKSx0aGlzLnNsYXNoZXN8fCghdHx8dlt0XSkmJiExIT09bz8obz1cIi8vXCIrKG98fFwiXCIpLHImJlwiL1wiIT09ci5jaGFyQXQoMCkmJihyPVwiL1wiK3IpKTpvfHwobz1cIlwiKSxuJiZcIiNcIiE9PW4uY2hhckF0KDApJiYobj1cIiNcIituKSxzJiZcIj9cIiE9PXMuY2hhckF0KDApJiYocz1cIj9cIitzKSx0K28rKHI9ci5yZXBsYWNlKC9bPyNdL2csKGZ1bmN0aW9uKGUpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoZSl9KSkpKyhzPXMucmVwbGFjZShcIiNcIixcIiUyM1wiKSkrbn0sby5wcm90b3R5cGUucmVzb2x2ZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KGcoZSwhMSwhMCkpLmZvcm1hdCgpfSxvLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKGkuaXNTdHJpbmcoZSkpe3ZhciB0PW5ldyBvO3QucGFyc2UoZSwhMSwhMCksZT10fWZvcih2YXIgcj1uZXcgbyxuPU9iamVjdC5rZXlzKHRoaXMpLGE9MDthPG4ubGVuZ3RoO2ErKyl7dmFyIHM9blthXTtyW3NdPXRoaXNbc119aWYoci5oYXNoPWUuaGFzaCxcIlwiPT09ZS5ocmVmKXJldHVybiByLmhyZWY9ci5mb3JtYXQoKSxyO2lmKGUuc2xhc2hlcyYmIWUucHJvdG9jb2wpe2Zvcih2YXIgdT1PYmplY3Qua2V5cyhlKSxsPTA7bDx1Lmxlbmd0aDtsKyspe3ZhciBjPXVbbF07XCJwcm90b2NvbFwiIT09YyYmKHJbY109ZVtjXSl9cmV0dXJuIHZbci5wcm90b2NvbF0mJnIuaG9zdG5hbWUmJiFyLnBhdGhuYW1lJiYoci5wYXRoPXIucGF0aG5hbWU9XCIvXCIpLHIuaHJlZj1yLmZvcm1hdCgpLHJ9aWYoZS5wcm90b2NvbCYmZS5wcm90b2NvbCE9PXIucHJvdG9jb2wpe2lmKCF2W2UucHJvdG9jb2xdKXtmb3IodmFyIGg9T2JqZWN0LmtleXMoZSkscD0wO3A8aC5sZW5ndGg7cCsrKXt2YXIgZj1oW3BdO3JbZl09ZVtmXX1yZXR1cm4gci5ocmVmPXIuZm9ybWF0KCkscn1pZihyLnByb3RvY29sPWUucHJvdG9jb2wsZS5ob3N0fHx5W2UucHJvdG9jb2xdKXIucGF0aG5hbWU9ZS5wYXRobmFtZTtlbHNle2Zvcih2YXIgZD0oZS5wYXRobmFtZXx8XCJcIikuc3BsaXQoXCIvXCIpO2QubGVuZ3RoJiYhKGUuaG9zdD1kLnNoaWZ0KCkpOyk7ZS5ob3N0fHwoZS5ob3N0PVwiXCIpLGUuaG9zdG5hbWV8fChlLmhvc3RuYW1lPVwiXCIpLFwiXCIhPT1kWzBdJiZkLnVuc2hpZnQoXCJcIiksZC5sZW5ndGg8MiYmZC51bnNoaWZ0KFwiXCIpLHIucGF0aG5hbWU9ZC5qb2luKFwiL1wiKX1pZihyLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnksci5ob3N0PWUuaG9zdHx8XCJcIixyLmF1dGg9ZS5hdXRoLHIuaG9zdG5hbWU9ZS5ob3N0bmFtZXx8ZS5ob3N0LHIucG9ydD1lLnBvcnQsci5wYXRobmFtZXx8ci5zZWFyY2gpe3ZhciBtPXIucGF0aG5hbWV8fFwiXCIsXz1yLnNlYXJjaHx8XCJcIjtyLnBhdGg9bStffXJldHVybiByLnNsYXNoZXM9ci5zbGFzaGVzfHxlLnNsYXNoZXMsci5ocmVmPXIuZm9ybWF0KCkscn12YXIgZz1yLnBhdGhuYW1lJiZcIi9cIj09PXIucGF0aG5hbWUuY2hhckF0KDApLGI9ZS5ob3N0fHxlLnBhdGhuYW1lJiZcIi9cIj09PWUucGF0aG5hbWUuY2hhckF0KDApLHg9Ynx8Z3x8ci5ob3N0JiZlLnBhdGhuYW1lLHc9eCxFPXIucGF0aG5hbWUmJnIucGF0aG5hbWUuc3BsaXQoXCIvXCIpfHxbXSxEPShkPWUucGF0aG5hbWUmJmUucGF0aG5hbWUuc3BsaXQoXCIvXCIpfHxbXSxyLnByb3RvY29sJiYhdltyLnByb3RvY29sXSk7aWYoRCYmKHIuaG9zdG5hbWU9XCJcIixyLnBvcnQ9bnVsbCxyLmhvc3QmJihcIlwiPT09RVswXT9FWzBdPXIuaG9zdDpFLnVuc2hpZnQoci5ob3N0KSksci5ob3N0PVwiXCIsZS5wcm90b2NvbCYmKGUuaG9zdG5hbWU9bnVsbCxlLnBvcnQ9bnVsbCxlLmhvc3QmJihcIlwiPT09ZFswXT9kWzBdPWUuaG9zdDpkLnVuc2hpZnQoZS5ob3N0KSksZS5ob3N0PW51bGwpLHg9eCYmKFwiXCI9PT1kWzBdfHxcIlwiPT09RVswXSkpLGIpci5ob3N0PWUuaG9zdHx8XCJcIj09PWUuaG9zdD9lLmhvc3Q6ci5ob3N0LHIuaG9zdG5hbWU9ZS5ob3N0bmFtZXx8XCJcIj09PWUuaG9zdG5hbWU/ZS5ob3N0bmFtZTpyLmhvc3RuYW1lLHIuc2VhcmNoPWUuc2VhcmNoLHIucXVlcnk9ZS5xdWVyeSxFPWQ7ZWxzZSBpZihkLmxlbmd0aClFfHwoRT1bXSksRS5wb3AoKSxFPUUuY29uY2F0KGQpLHIuc2VhcmNoPWUuc2VhcmNoLHIucXVlcnk9ZS5xdWVyeTtlbHNlIGlmKCFpLmlzTnVsbE9yVW5kZWZpbmVkKGUuc2VhcmNoKSl7aWYoRClyLmhvc3RuYW1lPXIuaG9zdD1FLnNoaWZ0KCksKFQ9ISEoci5ob3N0JiZyLmhvc3QuaW5kZXhPZihcIkBcIik+MCkmJnIuaG9zdC5zcGxpdChcIkBcIikpJiYoci5hdXRoPVQuc2hpZnQoKSxyLmhvc3Q9ci5ob3N0bmFtZT1ULnNoaWZ0KCkpO3JldHVybiByLnNlYXJjaD1lLnNlYXJjaCxyLnF1ZXJ5PWUucXVlcnksaS5pc051bGwoci5wYXRobmFtZSkmJmkuaXNOdWxsKHIuc2VhcmNoKXx8KHIucGF0aD0oci5wYXRobmFtZT9yLnBhdGhuYW1lOlwiXCIpKyhyLnNlYXJjaD9yLnNlYXJjaDpcIlwiKSksci5ocmVmPXIuZm9ybWF0KCkscn1pZighRS5sZW5ndGgpcmV0dXJuIHIucGF0aG5hbWU9bnVsbCxyLnNlYXJjaD9yLnBhdGg9XCIvXCIrci5zZWFyY2g6ci5wYXRoPW51bGwsci5ocmVmPXIuZm9ybWF0KCkscjtmb3IodmFyIFM9RS5zbGljZSgtMSlbMF0sQz0oci5ob3N0fHxlLmhvc3R8fEUubGVuZ3RoPjEpJiYoXCIuXCI9PT1TfHxcIi4uXCI9PT1TKXx8XCJcIj09PVMsQT0wLE49RS5sZW5ndGg7Tj49MDtOLS0pXCIuXCI9PT0oUz1FW05dKT9FLnNwbGljZShOLDEpOlwiLi5cIj09PVM/KEUuc3BsaWNlKE4sMSksQSsrKTpBJiYoRS5zcGxpY2UoTiwxKSxBLS0pO2lmKCF4JiYhdylmb3IoO0EtLTtBKUUudW5zaGlmdChcIi4uXCIpOyF4fHxcIlwiPT09RVswXXx8RVswXSYmXCIvXCI9PT1FWzBdLmNoYXJBdCgwKXx8RS51bnNoaWZ0KFwiXCIpLEMmJlwiL1wiIT09RS5qb2luKFwiL1wiKS5zdWJzdHIoLTEpJiZFLnB1c2goXCJcIik7dmFyIFQsTz1cIlwiPT09RVswXXx8RVswXSYmXCIvXCI9PT1FWzBdLmNoYXJBdCgwKTtEJiYoci5ob3N0bmFtZT1yLmhvc3Q9Tz9cIlwiOkUubGVuZ3RoP0Uuc2hpZnQoKTpcIlwiLChUPSEhKHIuaG9zdCYmci5ob3N0LmluZGV4T2YoXCJAXCIpPjApJiZyLmhvc3Quc3BsaXQoXCJAXCIpKSYmKHIuYXV0aD1ULnNoaWZ0KCksci5ob3N0PXIuaG9zdG5hbWU9VC5zaGlmdCgpKSk7cmV0dXJuKHg9eHx8ci5ob3N0JiZFLmxlbmd0aCkmJiFPJiZFLnVuc2hpZnQoXCJcIiksRS5sZW5ndGg/ci5wYXRobmFtZT1FLmpvaW4oXCIvXCIpOihyLnBhdGhuYW1lPW51bGwsci5wYXRoPW51bGwpLGkuaXNOdWxsKHIucGF0aG5hbWUpJiZpLmlzTnVsbChyLnNlYXJjaCl8fChyLnBhdGg9KHIucGF0aG5hbWU/ci5wYXRobmFtZTpcIlwiKSsoci5zZWFyY2g/ci5zZWFyY2g6XCJcIikpLHIuYXV0aD1lLmF1dGh8fHIuYXV0aCxyLnNsYXNoZXM9ci5zbGFzaGVzfHxlLnNsYXNoZXMsci5ocmVmPXIuZm9ybWF0KCkscn0sby5wcm90b3R5cGUucGFyc2VIb3N0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5ob3N0LHQ9cy5leGVjKGUpO3QmJihcIjpcIiE9PSh0PXRbMF0pJiYodGhpcy5wb3J0PXQuc3Vic3RyKDEpKSxlPWUuc3Vic3RyKDAsZS5sZW5ndGgtdC5sZW5ndGgpKSxlJiYodGhpcy5ob3N0bmFtZT1lKX19LGZ1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSxuKXt2YXIgaTsvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqLyFmdW5jdGlvbihvKXt0JiZ0Lm5vZGVUeXBlLGUmJmUubm9kZVR5cGU7dmFyIGE9XCJvYmplY3RcIj09dHlwZW9mIG4mJm47YS5nbG9iYWwhPT1hJiZhLndpbmRvdyE9PWEmJmEuc2VsZjt2YXIgcyx1PTIxNDc0ODM2NDcsbD0vXnhuLS0vLGM9L1teXFx4MjAtXFx4N0VdLyxoPS9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2cscD17b3ZlcmZsb3c6XCJPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzc1wiLFwibm90LWJhc2ljXCI6XCJJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpXCIsXCJpbnZhbGlkLWlucHV0XCI6XCJJbnZhbGlkIGlucHV0XCJ9LGY9TWF0aC5mbG9vcixkPVN0cmluZy5mcm9tQ2hhckNvZGU7ZnVuY3Rpb24gbShlKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcihwW2VdKX1mdW5jdGlvbiB5KGUsdCl7Zm9yKHZhciByPWUubGVuZ3RoLG49W107ci0tOyluW3JdPXQoZVtyXSk7cmV0dXJuIG59ZnVuY3Rpb24gdihlLHQpe3ZhciByPWUuc3BsaXQoXCJAXCIpLG49XCJcIjtyZXR1cm4gci5sZW5ndGg+MSYmKG49clswXStcIkBcIixlPXJbMV0pLG4reSgoZT1lLnJlcGxhY2UoaCxcIi5cIikpLnNwbGl0KFwiLlwiKSx0KS5qb2luKFwiLlwiKX1mdW5jdGlvbiBfKGUpe2Zvcih2YXIgdCxyLG49W10saT0wLG89ZS5sZW5ndGg7aTxvOykodD1lLmNoYXJDb2RlQXQoaSsrKSk+PTU1Mjk2JiZ0PD01NjMxOSYmaTxvPzU2MzIwPT0oNjQ1MTImKHI9ZS5jaGFyQ29kZUF0KGkrKykpKT9uLnB1c2goKCgxMDIzJnQpPDwxMCkrKDEwMjMmcikrNjU1MzYpOihuLnB1c2godCksaS0tKTpuLnB1c2godCk7cmV0dXJuIG59ZnVuY3Rpb24gZyhlKXtyZXR1cm4geShlLChmdW5jdGlvbihlKXt2YXIgdD1cIlwiO3JldHVybiBlPjY1NTM1JiYodCs9ZCgoZS09NjU1MzYpPj4+MTAmMTAyM3w1NTI5NiksZT01NjMyMHwxMDIzJmUpLHQrPWQoZSl9KSkuam9pbihcIlwiKX1mdW5jdGlvbiBiKGUsdCl7cmV0dXJuIGUrMjIrNzUqKGU8MjYpLSgoMCE9dCk8PDUpfWZ1bmN0aW9uIHgoZSx0LHIpe3ZhciBuPTA7Zm9yKGU9cj9mKGUvNzAwKTplPj4xLGUrPWYoZS90KTtlPjQ1NTtuKz0zNillPWYoZS8zNSk7cmV0dXJuIGYobiszNiplLyhlKzM4KSl9ZnVuY3Rpb24gdyhlKXt2YXIgdCxyLG4saSxvLGEscyxsLGMsaCxwLGQ9W10seT1lLmxlbmd0aCx2PTAsXz0xMjgsYj03Mjtmb3IoKHI9ZS5sYXN0SW5kZXhPZihcIi1cIikpPDAmJihyPTApLG49MDtuPHI7KytuKWUuY2hhckNvZGVBdChuKT49MTI4JiZtKFwibm90LWJhc2ljXCIpLGQucHVzaChlLmNoYXJDb2RlQXQobikpO2ZvcihpPXI+MD9yKzE6MDtpPHk7KXtmb3Iobz12LGE9MSxzPTM2O2k+PXkmJm0oXCJpbnZhbGlkLWlucHV0XCIpLCgobD0ocD1lLmNoYXJDb2RlQXQoaSsrKSktNDg8MTA/cC0yMjpwLTY1PDI2P3AtNjU6cC05NzwyNj9wLTk3OjM2KT49MzZ8fGw+ZigodS12KS9hKSkmJm0oXCJvdmVyZmxvd1wiKSx2Kz1sKmEsIShsPChjPXM8PWI/MTpzPj1iKzI2PzI2OnMtYikpO3MrPTM2KWE+Zih1LyhoPTM2LWMpKSYmbShcIm92ZXJmbG93XCIpLGEqPWg7Yj14KHYtbyx0PWQubGVuZ3RoKzEsMD09byksZih2L3QpPnUtXyYmbShcIm92ZXJmbG93XCIpLF8rPWYodi90KSx2JT10LGQuc3BsaWNlKHYrKywwLF8pfXJldHVybiBnKGQpfWZ1bmN0aW9uIEUoZSl7dmFyIHQscixuLGksbyxhLHMsbCxjLGgscCx5LHYsZyx3LEU9W107Zm9yKHk9KGU9XyhlKSkubGVuZ3RoLHQ9MTI4LHI9MCxvPTcyLGE9MDthPHk7KythKShwPWVbYV0pPDEyOCYmRS5wdXNoKGQocCkpO2ZvcihuPWk9RS5sZW5ndGgsaSYmRS5wdXNoKFwiLVwiKTtuPHk7KXtmb3Iocz11LGE9MDthPHk7KythKShwPWVbYV0pPj10JiZwPHMmJihzPXApO2ZvcihzLXQ+ZigodS1yKS8odj1uKzEpKSYmbShcIm92ZXJmbG93XCIpLHIrPShzLXQpKnYsdD1zLGE9MDthPHk7KythKWlmKChwPWVbYV0pPHQmJisrcj51JiZtKFwib3ZlcmZsb3dcIikscD09dCl7Zm9yKGw9cixjPTM2OyEobDwoaD1jPD1vPzE6Yz49bysyNj8yNjpjLW8pKTtjKz0zNil3PWwtaCxnPTM2LWgsRS5wdXNoKGQoYihoK3clZywwKSkpLGw9Zih3L2cpO0UucHVzaChkKGIobCwwKSkpLG89eChyLHYsbj09aSkscj0wLCsrbn0rK3IsKyt0fXJldHVybiBFLmpvaW4oXCJcIil9cz17dmVyc2lvbjpcIjEuNC4xXCIsdWNzMjp7ZGVjb2RlOl8sZW5jb2RlOmd9LGRlY29kZTp3LGVuY29kZTpFLHRvQVNDSUk6ZnVuY3Rpb24oZSl7cmV0dXJuIHYoZSwoZnVuY3Rpb24oZSl7cmV0dXJuIGMudGVzdChlKT9cInhuLS1cIitFKGUpOmV9KSl9LHRvVW5pY29kZTpmdW5jdGlvbihlKXtyZXR1cm4gdihlLChmdW5jdGlvbihlKXtyZXR1cm4gbC50ZXN0KGUpP3coZS5zbGljZSg0KS50b0xvd2VyQ2FzZSgpKTplfSkpfX0sdm9pZCAwPT09KGk9ZnVuY3Rpb24oKXtyZXR1cm4gc30uY2FsbCh0LHIsdCxlKSl8fChlLmV4cG9ydHM9aSl9KCl9KS5jYWxsKHRoaXMscigyNDYpKGUpLHIoNzgpKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUud2VicGFja1BvbHlmaWxsfHwoZS5kZXByZWNhdGU9ZnVuY3Rpb24oKXt9LGUucGF0aHM9W10sZS5jaGlsZHJlbnx8KGUuY2hpbGRyZW49W10pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwibG9hZGVkXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUubH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImlkXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuaX19KSxlLndlYnBhY2tQb2x5ZmlsbD0xKSxlfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz17aXNTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LGlzT2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZX0saXNOdWxsOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZX0saXNOdWxsT3JVbmRlZmluZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZGVjb2RlPXQucGFyc2U9cigyNDkpLHQuZW5jb2RlPXQuc3RyaW5naWZ5PXIoMjUwKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG8pe3Q9dHx8XCImXCIscj1yfHxcIj1cIjt2YXIgYT17fTtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8MD09PWUubGVuZ3RoKXJldHVybiBhO3ZhciBzPS9cXCsvZztlPWUuc3BsaXQodCk7dmFyIHU9MWUzO28mJlwibnVtYmVyXCI9PXR5cGVvZiBvLm1heEtleXMmJih1PW8ubWF4S2V5cyk7dmFyIGw9ZS5sZW5ndGg7dT4wJiZsPnUmJihsPXUpO2Zvcih2YXIgYz0wO2M8bDsrK2Mpe3ZhciBoLHAsZixkLG09ZVtjXS5yZXBsYWNlKHMsXCIlMjBcIikseT1tLmluZGV4T2Yocik7eT49MD8oaD1tLnN1YnN0cigwLHkpLHA9bS5zdWJzdHIoeSsxKSk6KGg9bSxwPVwiXCIpLGY9ZGVjb2RlVVJJQ29tcG9uZW50KGgpLGQ9ZGVjb2RlVVJJQ29tcG9uZW50KHApLG4oYSxmKT9pKGFbZl0pP2FbZl0ucHVzaChkKTphW2ZdPVthW2ZdLGRdOmFbZl09ZH1yZXR1cm4gYX07dmFyIGk9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWZ1bmN0aW9uKGUpe3N3aXRjaCh0eXBlb2YgZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGU7Y2FzZVwiYm9vbGVhblwiOnJldHVybiBlP1widHJ1ZVwiOlwiZmFsc2VcIjtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoZSk/ZTpcIlwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscixzKXtyZXR1cm4gdD10fHxcIiZcIixyPXJ8fFwiPVwiLG51bGw9PT1lJiYoZT12b2lkIDApLFwib2JqZWN0XCI9PXR5cGVvZiBlP28oYShlKSwoZnVuY3Rpb24oYSl7dmFyIHM9ZW5jb2RlVVJJQ29tcG9uZW50KG4oYSkpK3I7cmV0dXJuIGkoZVthXSk/byhlW2FdLChmdW5jdGlvbihlKXtyZXR1cm4gcytlbmNvZGVVUklDb21wb25lbnQobihlKSl9KSkuam9pbih0KTpzK2VuY29kZVVSSUNvbXBvbmVudChuKGVbYV0pKX0pKS5qb2luKHQpOnM/ZW5jb2RlVVJJQ29tcG9uZW50KG4ocykpK3IrZW5jb2RlVVJJQ29tcG9uZW50KG4oZSkpOlwiXCJ9O3ZhciBpPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX07ZnVuY3Rpb24gbyhlLHQpe2lmKGUubWFwKXJldHVybiBlLm1hcCh0KTtmb3IodmFyIHI9W10sbj0wO248ZS5sZW5ndGg7bisrKXIucHVzaCh0KGVbbl0sbikpO3JldHVybiByfXZhciBhPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmdC5wdXNoKHIpO3JldHVybiB0fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNTIpO3QuYXR0cl9zZXRBbkV4aXN0aW5nQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oZSx0KXtudWxsPT09ZS5fZWxlbWVudD9lLl92YWx1ZT10Om4uZWxlbWVudF9jaGFuZ2UoZSxlLl9lbGVtZW50LHQpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMTA4KSxpPXIoMzApLG89cig1Mik7dC50b2tlbkxpc3RfdmFsaWRhdGlvblN0ZXBzPWZ1bmN0aW9uKGUsdCl7aWYoIWkuZG9tX2hhc1N1cHBvcnRlZFRva2VucyhlLl9hdHRyaWJ1dGUuX2xvY2FsTmFtZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZXJlIGFyZSBubyBzdXBwb3J0ZWQgdG9rZW5zIGRlZmluZWQgZm9yIGF0dHJpYnV0ZSBuYW1lOiAnXCIrZS5fYXR0cmlidXRlLl9sb2NhbE5hbWUrXCInLlwiKTtyZXR1cm4gaS5kb21fZ2V0U3VwcG9ydGVkVG9rZW5zKGUuX2F0dHJpYnV0ZS5fbG9jYWxOYW1lKS5oYXModC50b0xvd2VyQ2FzZSgpKX0sdC50b2tlbkxpc3RfdXBkYXRlU3RlcHM9ZnVuY3Rpb24oZSl7KGUuX2VsZW1lbnQuaGFzQXR0cmlidXRlKGUuX2F0dHJpYnV0ZS5fbG9jYWxOYW1lKXx8MCE9PWUuX3Rva2VuU2V0LnNpemUpJiZvLmVsZW1lbnRfc2V0QW5BdHRyaWJ1dGVWYWx1ZShlLl9lbGVtZW50LGUuX2F0dHJpYnV0ZS5fbG9jYWxOYW1lLG4ub3JkZXJlZFNldF9zZXJpYWxpemUoZS5fdG9rZW5TZXQpKX0sdC50b2tlbkxpc3Rfc2VyaWFsaXplU3RlcHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uZWxlbWVudF9nZXRBbkF0dHJpYnV0ZVZhbHVlKGUuX2VsZW1lbnQsZS5fYXR0cmlidXRlLl9sb2NhbE5hbWUpfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPXIoMSk7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gaS5pc0Jvb2xlYW4oZSk/ZTplLmNhcHR1cmV8fCExfXQuZXZlbnRUYXJnZXRfZmxhdHRlbj1vLHQuZXZlbnRUYXJnZXRfZmxhdHRlbk1vcmU9ZnVuY3Rpb24oZSl7dmFyIHQ9byhlKSxyPSExLG49ITE7cmV0dXJuIGkuaXNCb29sZWFuKGUpfHwocj1lLm9uY2V8fCExLG49ZS5wYXNzaXZlfHwhMSksW3QsbixyXX0sdC5ldmVudFRhcmdldF9hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9PXQuY2FsbGJhY2spe2Zvcih2YXIgcj0wO3I8ZS5fZXZlbnRMaXN0ZW5lckxpc3QubGVuZ3RoO3IrKyl7dmFyIG49ZS5fZXZlbnRMaXN0ZW5lckxpc3Rbcl07aWYobi50eXBlPT09dC50eXBlJiZuLmNhbGxiYWNrLmhhbmRsZUV2ZW50PT09dC5jYWxsYmFjay5oYW5kbGVFdmVudCYmbi5jYXB0dXJlPT09dC5jYXB0dXJlKXJldHVybn1lLl9ldmVudExpc3RlbmVyTGlzdC5wdXNoKHQpfX0sdC5ldmVudFRhcmdldF9yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsdCxyKXt0LnJlbW92ZWQ9ITAsZS5fZXZlbnRMaXN0ZW5lckxpc3Quc3BsaWNlKHIsMSl9LHQuZXZlbnRUYXJnZXRfcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQscjt0cnl7Zm9yKHZhciBpPW4oZS5fZXZlbnRMaXN0ZW5lckxpc3QpLG89aS5uZXh0KCk7IW8uZG9uZTtvPWkubmV4dCgpKXtvLnZhbHVlLnJlbW92ZWQ9ITB9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e28mJiFvLmRvbmUmJihyPWkucmV0dXJuKSYmci5jYWxsKGkpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1lLl9ldmVudExpc3RlbmVyTGlzdC5sZW5ndGg9MH19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDEpLG89cigyOSk7dC5wYXJlbnROb2RlX2NvbnZlcnROb2Rlc0ludG9BTm9kZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixhLHM9bnVsbCx1PTA7dTxlLmxlbmd0aDt1Kyspe3ZhciBsPWVbdV07aWYoaS5pc1N0cmluZyhsKSl7dmFyIGM9by5jcmVhdGVfdGV4dCh0LGwpO2VbdV09Y319aWYoMT09PWUubGVuZ3RoKXM9ZVswXTtlbHNle3ZhciBoPXM9by5jcmVhdGVfZG9jdW1lbnRGcmFnbWVudCh0KTt0cnl7Zm9yKHZhciBwPW4oZSksZj1wLm5leHQoKTshZi5kb25lO2Y9cC5uZXh0KCkpe2w9Zi52YWx1ZTtoLmFwcGVuZENoaWxkKGwpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtmJiYhZi5kb25lJiYoYT1wLnJldHVybikmJmEuY2FsbChwKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19fXJldHVybiBzfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9LGk9dGhpcyYmdGhpcy5fX3JlYWR8fGZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl07aWYoIXIpcmV0dXJuIGU7dmFyIG4saSxvPXIuY2FsbChlKSxhPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT10fHx0LS0gPjApJiYhKG49by5uZXh0KCkpLmRvbmU7KWEucHVzaChuLnZhbHVlKX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtuJiYhbi5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LG89dGhpcyYmdGhpcy5fX3NwcmVhZHx8ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZT1lLmNvbmNhdChpKGFyZ3VtZW50c1t0XSkpO3JldHVybiBlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1yKDIpLHM9cig5KSx1PXIoMyksbD1yKDI5KSxjPXIoMTcpLGg9cigxNzUpLHA9cigxMDcpLGY9cigxNzYpLGQ9cigzNyksbT1yKDE3Nyk7ZnVuY3Rpb24geShlKXtyZXR1cm4gZS5fc3RhcnROb2RlPT09ZS5fZW5kTm9kZSYmZS5fc3RhcnRPZmZzZXQ9PT1lLl9lbmRPZmZzZXR9ZnVuY3Rpb24gdihlKXtyZXR1cm4gYy50cmVlX3Jvb3ROb2RlKGUuX3N0YXJ0Tm9kZSl9ZnVuY3Rpb24gXyhlLHQpe3JldHVybiBjLnRyZWVfcm9vdE5vZGUoZSk9PT12KHQpJiZoLmJvdW5kYXJ5UG9pbnRfcG9zaXRpb24oW2UsMF0sdC5fc3RhcnQpPT09YS5Cb3VuZGFyeVBvc2l0aW9uLkFmdGVyJiZoLmJvdW5kYXJ5UG9pbnRfcG9zaXRpb24oW2UsYy50cmVlX25vZGVMZW5ndGgoZSldLHQuX2VuZCk9PT1hLkJvdW5kYXJ5UG9zaXRpb24uQmVmb3JlfWZ1bmN0aW9uIGcoZSx0KXt2YXIgcj1jLnRyZWVfaXNBbmNlc3Rvck9mKHQuX3N0YXJ0Tm9kZSxlLCEwKSxuPWMudHJlZV9pc0FuY2VzdG9yT2YodC5fZW5kTm9kZSxlLCEwKTtyZXR1cm4gciYmIW58fCFyJiZufWZ1bmN0aW9uIGIoZSl7dmFyIHQscixpLGEsaCxtLHY9bC5jcmVhdGVfZG9jdW1lbnRGcmFnbWVudChlLl9zdGFydE5vZGUuX25vZGVEb2N1bWVudCk7aWYoeShlKSlyZXR1cm4gdjt2YXIgeD1lLl9zdGFydE5vZGUsdz1lLl9zdGFydE9mZnNldCxFPWUuX2VuZE5vZGUsRD1lLl9lbmRPZmZzZXQ7aWYoeD09PUUmJnUuR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZSh4KSlyZXR1cm4oUj1mLm5vZGVfY2xvbmUoeCkpLl9kYXRhPXAuY2hhcmFjdGVyRGF0YV9zdWJzdHJpbmdEYXRhKHgsdyxELXcpLGQubXV0YXRpb25fYXBwZW5kKFIsdikscC5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHgsdyxELXcsXCJcIiksdjtmb3IodmFyIFM9eDshYy50cmVlX2lzQW5jZXN0b3JPZihFLFMsITApOyl7aWYobnVsbD09PVMuX3BhcmVudCl0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnQgbm9kZSAgaXMgbnVsbC5cIik7Uz1TLl9wYXJlbnR9dmFyIEM9bnVsbDtpZighYy50cmVlX2lzQW5jZXN0b3JPZihFLHgsITApKXRyeXtmb3IodmFyIEE9bihTLl9jaGlsZHJlbiksTj1BLm5leHQoKTshTi5kb25lO049QS5uZXh0KCkpe2lmKGcoaz1OLnZhbHVlLGUpKXtDPWs7YnJlYWt9fX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtOJiYhTi5kb25lJiYocj1BLnJldHVybikmJnIuY2FsbChBKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19dmFyIFQ9bnVsbDtpZighYy50cmVlX2lzQW5jZXN0b3JPZih4LEUsITApKWZvcih2YXIgTz1vKFMuX2NoaWxkcmVuKSxGPU8ubGVuZ3RoLTE7Rj4wO0YtLSl7dmFyIGs7aWYoZyhrPU9bRl0sZSkpe1Q9azticmVha319dmFyIFAsSSxMPVtdO3RyeXtmb3IodmFyIE09bihTLl9jaGlsZHJlbiksQj1NLm5leHQoKTshQi5kb25lO0I9TS5uZXh0KCkpe2lmKF8oWD1CLnZhbHVlLGUpKXtpZih1Lkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZShYKSl0aHJvdyBuZXcgcy5IaWVyYXJjaHlSZXF1ZXN0RXJyb3I7TC5wdXNoKFgpfX19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7QiYmIUIuZG9uZSYmKGE9TS5yZXR1cm4pJiZhLmNhbGwoTSl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fWlmKGMudHJlZV9pc0FuY2VzdG9yT2YoRSx4LCEwKSlQPXgsST13O2Vsc2V7Zm9yKHZhciBqPXg7bnVsbCE9PWouX3BhcmVudCYmIWMudHJlZV9pc0FuY2VzdG9yT2YoRSxqLl9wYXJlbnQpOylqPWouX3BhcmVudDtpZihudWxsPT09ai5fcGFyZW50KXRocm93IG5ldyBFcnJvcihcIlBhcmVudCBub2RlIGlzIG51bGwuXCIpO1A9ai5fcGFyZW50LEk9MStjLnRyZWVfaW5kZXgoail9aWYodS5HdWFyZC5pc0NoYXJhY3RlckRhdGFOb2RlKEMpKShSPWYubm9kZV9jbG9uZSh4KSkuX2RhdGE9cC5jaGFyYWN0ZXJEYXRhX3N1YnN0cmluZ0RhdGEoeCx3LGMudHJlZV9ub2RlTGVuZ3RoKHgpLXcpLGQubXV0YXRpb25fYXBwZW5kKFIsdikscC5jaGFyYWN0ZXJEYXRhX3JlcGxhY2VEYXRhKHgsdyxjLnRyZWVfbm9kZUxlbmd0aCh4KS13LFwiXCIpO2Vsc2UgaWYobnVsbCE9PUMpe3ZhciBSPWYubm9kZV9jbG9uZShDKTtkLm11dGF0aW9uX2FwcGVuZChSLHYpO3ZhciB6PWIobC5jcmVhdGVfcmFuZ2UoW3gsd10sW0MsYy50cmVlX25vZGVMZW5ndGgoQyldKSk7ZC5tdXRhdGlvbl9hcHBlbmQoeixSKX10cnl7Zm9yKHZhciBVPW4oTCksRz1VLm5leHQoKTshRy5kb25lO0c9VS5uZXh0KCkpe3ZhciBYPUcudmFsdWU7ZC5tdXRhdGlvbl9hcHBlbmQoWCx2KX19Y2F0Y2goZSl7aD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7RyYmIUcuZG9uZSYmKG09VS5yZXR1cm4pJiZtLmNhbGwoVSl9ZmluYWxseXtpZihoKXRocm93IGguZXJyb3J9fWlmKHUuR3VhcmQuaXNDaGFyYWN0ZXJEYXRhTm9kZShUKSkoUj1mLm5vZGVfY2xvbmUoRSkpLl9kYXRhPXAuY2hhcmFjdGVyRGF0YV9zdWJzdHJpbmdEYXRhKEUsMCxEKSxkLm11dGF0aW9uX2FwcGVuZChSLHYpLHAuY2hhcmFjdGVyRGF0YV9yZXBsYWNlRGF0YShFLDAsRCxcIlwiKTtlbHNlIGlmKG51bGwhPT1UKXtSPWYubm9kZV9jbG9uZShUKTtkLm11dGF0aW9uX2FwcGVuZChSLHYpO3o9YihsLmNyZWF0ZV9yYW5nZShbVCwwXSxbRSxEXSkpO2QubXV0YXRpb25fYXBwZW5kKHosUil9cmV0dXJuIGUuX3N0YXJ0PVtQLEldLGUuX2VuZD1bUCxJXSx2fXQucmFuZ2VfY29sbGFwc2VkPXksdC5yYW5nZV9yb290PXYsdC5yYW5nZV9pc0NvbnRhaW5lZD1fLHQucmFuZ2VfaXNQYXJ0aWFsbHlDb250YWluZWQ9Zyx0LnJhbmdlX3NldFRoZVN0YXJ0PWZ1bmN0aW9uKGUsdCxyKXtpZih1Lkd1YXJkLmlzRG9jdW1lbnRUeXBlTm9kZSh0KSl0aHJvdyBuZXcgcy5JbnZhbGlkTm9kZVR5cGVFcnJvcjtpZihyPmMudHJlZV9ub2RlTGVuZ3RoKHQpKXRocm93IG5ldyBzLkluZGV4U2l6ZUVycm9yO3ZhciBuPVt0LHJdO3YoZSk9PT1jLnRyZWVfcm9vdE5vZGUodCkmJmguYm91bmRhcnlQb2ludF9wb3NpdGlvbihuLGUuX2VuZCkhPT1hLkJvdW5kYXJ5UG9zaXRpb24uQWZ0ZXJ8fChlLl9lbmQ9biksZS5fc3RhcnQ9bn0sdC5yYW5nZV9zZXRUaGVFbmQ9ZnVuY3Rpb24oZSx0LHIpe2lmKHUuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKHQpKXRocm93IG5ldyBzLkludmFsaWROb2RlVHlwZUVycm9yO2lmKHI+Yy50cmVlX25vZGVMZW5ndGgodCkpdGhyb3cgbmV3IHMuSW5kZXhTaXplRXJyb3I7dmFyIG49W3Qscl07dihlKT09PWMudHJlZV9yb290Tm9kZSh0KSYmaC5ib3VuZGFyeVBvaW50X3Bvc2l0aW9uKG4sZS5fc3RhcnQpIT09YS5Cb3VuZGFyeVBvc2l0aW9uLkJlZm9yZXx8KGUuX3N0YXJ0PW4pLGUuX2VuZD1ufSx0LnJhbmdlX3NlbGVjdD1mdW5jdGlvbihlLHQpe3ZhciByPWUuX3BhcmVudDtpZihudWxsPT09cil0aHJvdyBuZXcgcy5JbnZhbGlkTm9kZVR5cGVFcnJvcjt2YXIgbj1jLnRyZWVfaW5kZXgoZSk7dC5fc3RhcnQ9W3Isbl0sdC5fZW5kPVtyLG4rMV19LHQucmFuZ2VfZXh0cmFjdD1iLHQucmFuZ2VfY2xvbmVUaGVDb250ZW50cz1mdW5jdGlvbiBlKHQpe3ZhciByLGksYSxoLG0sdix4PWwuY3JlYXRlX2RvY3VtZW50RnJhZ21lbnQodC5fc3RhcnROb2RlLl9ub2RlRG9jdW1lbnQpO2lmKHkodCkpcmV0dXJuIHg7dmFyIHc9dC5fc3RhcnROb2RlLEU9dC5fc3RhcnRPZmZzZXQsRD10Ll9lbmROb2RlLFM9dC5fZW5kT2Zmc2V0O3c9PT1EJiZ1Lkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUodykmJigoQj1mLm5vZGVfY2xvbmUodykpLl9kYXRhPXAuY2hhcmFjdGVyRGF0YV9zdWJzdHJpbmdEYXRhKHcsRSxTLUUpLGQubXV0YXRpb25fYXBwZW5kKEIseCkpO2Zvcih2YXIgQz13OyFjLnRyZWVfaXNBbmNlc3Rvck9mKEQsQywhMCk7KXtpZihudWxsPT09Qy5fcGFyZW50KXRocm93IG5ldyBFcnJvcihcIlBhcmVudCBub2RlICBpcyBudWxsLlwiKTtDPUMuX3BhcmVudH12YXIgQT1udWxsO2lmKCFjLnRyZWVfaXNBbmNlc3Rvck9mKEQsdywhMCkpdHJ5e2Zvcih2YXIgTj1uKEMuX2NoaWxkcmVuKSxUPU4ubmV4dCgpOyFULmRvbmU7VD1OLm5leHQoKSl7aWYoZyhQPVQudmFsdWUsdCkpe0E9UDticmVha319fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e1QmJiFULmRvbmUmJihpPU4ucmV0dXJuKSYmaS5jYWxsKE4pfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX12YXIgTz1udWxsO2lmKCFjLnRyZWVfaXNBbmNlc3Rvck9mKHcsRCwhMCkpZm9yKHZhciBGPW8oQy5fY2hpbGRyZW4pLGs9Ri5sZW5ndGgtMTtrPjA7ay0tKXt2YXIgUDtpZihnKFA9RltrXSx0KSl7Tz1QO2JyZWFrfX12YXIgST1bXTt0cnl7Zm9yKHZhciBMPW4oQy5fY2hpbGRyZW4pLE09TC5uZXh0KCk7IU0uZG9uZTtNPUwubmV4dCgpKXtpZihfKFU9TS52YWx1ZSx0KSl7aWYodS5HdWFyZC5pc0RvY3VtZW50VHlwZU5vZGUoVSkpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yO0kucHVzaChVKX19fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e00mJiFNLmRvbmUmJihoPUwucmV0dXJuKSYmaC5jYWxsKEwpfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX1pZih1Lkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUoQSkpKEI9Zi5ub2RlX2Nsb25lKHcpKS5fZGF0YT1wLmNoYXJhY3RlckRhdGFfc3Vic3RyaW5nRGF0YSh3LEUsYy50cmVlX25vZGVMZW5ndGgodyktRSksZC5tdXRhdGlvbl9hcHBlbmQoQix4KTtlbHNlIGlmKG51bGwhPT1BKXt2YXIgQj1mLm5vZGVfY2xvbmUoQSk7ZC5tdXRhdGlvbl9hcHBlbmQoQix4KTt2YXIgaj1lKGwuY3JlYXRlX3JhbmdlKFt3LEVdLFtBLGMudHJlZV9ub2RlTGVuZ3RoKEEpXSkpO2QubXV0YXRpb25fYXBwZW5kKGosQil9dHJ5e2Zvcih2YXIgUj1uKEkpLHo9Ui5uZXh0KCk7IXouZG9uZTt6PVIubmV4dCgpKXt2YXIgVT16LnZhbHVlLEI9Zi5ub2RlX2Nsb25lKFUpO2QubXV0YXRpb25fYXBwZW5kKEIseCl9fWNhdGNoKGUpe209e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3omJiF6LmRvbmUmJih2PVIucmV0dXJuKSYmdi5jYWxsKFIpfWZpbmFsbHl7aWYobSl0aHJvdyBtLmVycm9yfX1pZih1Lkd1YXJkLmlzQ2hhcmFjdGVyRGF0YU5vZGUoTykpKEI9Zi5ub2RlX2Nsb25lKEQpKS5fZGF0YT1wLmNoYXJhY3RlckRhdGFfc3Vic3RyaW5nRGF0YShELDAsUyksZC5tdXRhdGlvbl9hcHBlbmQoQix4KTtlbHNlIGlmKG51bGwhPT1PKXtCPWYubm9kZV9jbG9uZShPKTt4LmFwcGVuZChCKTtqPWIobC5jcmVhdGVfcmFuZ2UoW08sMF0sW0QsU10pKTtkLm11dGF0aW9uX2FwcGVuZChqLEIpfXJldHVybiB4fSx0LnJhbmdlX2luc2VydD1mdW5jdGlvbihlLHQpe3ZhciByLGk7aWYodS5HdWFyZC5pc1Byb2Nlc3NpbmdJbnN0cnVjdGlvbk5vZGUodC5fc3RhcnROb2RlKXx8dS5HdWFyZC5pc0NvbW1lbnROb2RlKHQuX3N0YXJ0Tm9kZSl8fHUuR3VhcmQuaXNUZXh0Tm9kZSh0Ll9zdGFydE5vZGUpJiZudWxsPT09dC5fc3RhcnROb2RlLl9wYXJlbnR8fHQuX3N0YXJ0Tm9kZT09PWUpdGhyb3cgbmV3IHMuSGllcmFyY2h5UmVxdWVzdEVycm9yO3ZhciBvLGE9bnVsbDtpZih1Lkd1YXJkLmlzVGV4dE5vZGUodC5fc3RhcnROb2RlKSlhPXQuX3N0YXJ0Tm9kZTtlbHNle3ZhciBsPTA7dHJ5e2Zvcih2YXIgaD1uKHQuX3N0YXJ0Tm9kZS5fY2hpbGRyZW4pLHA9aC5uZXh0KCk7IXAuZG9uZTtwPWgubmV4dCgpKXt2YXIgZj1wLnZhbHVlO2lmKGw9PT10Ll9zdGFydE9mZnNldCl7YT1mO2JyZWFrfWwrK319Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cCYmIXAuZG9uZSYmKGk9aC5yZXR1cm4pJiZpLmNhbGwoaCl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fX1pZihudWxsPT09YSlvPXQuX3N0YXJ0Tm9kZTtlbHNle2lmKG51bGw9PT1hLl9wYXJlbnQpdGhyb3cgbmV3IEVycm9yKFwiUGFyZW50IG5vZGUgaXMgbnVsbC5cIik7bz1hLl9wYXJlbnR9ZC5tdXRhdGlvbl9lbnN1cmVQcmVJbnNlcnRpb25WYWxpZGl0eShlLG8sYSksdS5HdWFyZC5pc1RleHROb2RlKHQuX3N0YXJ0Tm9kZSkmJihhPW0udGV4dF9zcGxpdCh0Ll9zdGFydE5vZGUsdC5fc3RhcnRPZmZzZXQpKSxlPT09YSYmKGE9ZS5fbmV4dFNpYmxpbmcpLG51bGwhPT1lLl9wYXJlbnQmJmQubXV0YXRpb25fcmVtb3ZlKGUsZS5fcGFyZW50KTt2YXIgdj1udWxsPT09YT9jLnRyZWVfbm9kZUxlbmd0aChvKTpjLnRyZWVfaW5kZXgoYSk7dS5HdWFyZC5pc0RvY3VtZW50RnJhZ21lbnROb2RlKGUpP3YrPWMudHJlZV9ub2RlTGVuZ3RoKGUpOnYrKyxkLm11dGF0aW9uX3ByZUluc2VydChlLG8sYSkseSh0KSYmKHQuX2VuZD1bbyx2XSl9LHQucmFuZ2VfZ2V0Q29udGFpbmVkTm9kZXM9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuKHQ9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgdD1lLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLHI9Yy50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUodCk7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtmb3IoO3ImJiFfKHIsZSk7KXI9Yy50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZSh0LHIpO2lmKG51bGw9PT1yKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBuPXtkb25lOiExLHZhbHVlOnJ9O3JldHVybiByPWMudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodCxyKSxufX19LHR9LHQucmFuZ2VfZ2V0UGFydGlhbGx5Q29udGFpbmVkTm9kZXM9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuKHQ9e30pW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXt2YXIgdD1lLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLHI9Yy50cmVlX2dldEZpcnN0RGVzY2VuZGFudE5vZGUodCk7cmV0dXJue25leHQ6ZnVuY3Rpb24oKXtmb3IoO3ImJiFnKHIsZSk7KXI9Yy50cmVlX2dldE5leHREZXNjZW5kYW50Tm9kZSh0LHIpO2lmKG51bGw9PT1yKXJldHVybntkb25lOiEwLHZhbHVlOm51bGx9O3ZhciBuPXtkb25lOiExLHZhbHVlOnJ9O3JldHVybiByPWMudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUodCxyKSxufX19LHR9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cig5KTt0LnNlbGVjdG9yc19zY29wZU1hdGNoQVNlbGVjdG9yc1N0cmluZz1mdW5jdGlvbihlLHQpe3Rocm93IG5ldyBuLk5vdFN1cHBvcnRlZEVycm9yfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMiksaT1yKDEwNSk7dC50cmVlV2Fsa2VyX3RyYXZlcnNlQ2hpbGRyZW49ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dD9lLl9jdXJyZW50Ll9maXJzdENoaWxkOmUuX2N1cnJlbnQuX2xhc3RDaGlsZDtudWxsIT09cjspe3ZhciBvPWkudHJhdmVyc2FsX2ZpbHRlcihlLHIpO2lmKG89PT1uLkZpbHRlclJlc3VsdC5BY2NlcHQpcmV0dXJuIGUuX2N1cnJlbnQ9cixyO2lmKG89PT1uLkZpbHRlclJlc3VsdC5Ta2lwKXt2YXIgYT10P3IuX2ZpcnN0Q2hpbGQ6ci5fbGFzdENoaWxkO2lmKG51bGwhPT1hKXtyPWE7Y29udGludWV9fWZvcig7bnVsbCE9PXI7KXt2YXIgcz10P3IuX25leHRTaWJsaW5nOnIuX3ByZXZpb3VzU2libGluZztpZihudWxsIT09cyl7cj1zO2JyZWFrfXZhciB1PXIuX3BhcmVudDtpZihudWxsPT09dXx8dT09PWUuX3Jvb3R8fHU9PT1lLl9jdXJyZW50KXJldHVybiBudWxsO3I9dX19cmV0dXJuIG51bGx9LHQudHJlZVdhbGtlcl90cmF2ZXJzZVNpYmxpbmdzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5fY3VycmVudDtpZihyPT09ZS5fcm9vdClyZXR1cm4gbnVsbDtmb3IoOzspe2Zvcih2YXIgbz10P3IuX25leHRTaWJsaW5nOnIuX3ByZXZpb3VzU2libGluZztudWxsIT09bzspe3I9bzt2YXIgYT1pLnRyYXZlcnNhbF9maWx0ZXIoZSxyKTtpZihhPT09bi5GaWx0ZXJSZXN1bHQuQWNjZXB0KXJldHVybiBlLl9jdXJyZW50PXIscjtvPXQ/ci5fZmlyc3RDaGlsZDpyLl9sYXN0Q2hpbGQsYSE9PW4uRmlsdGVyUmVzdWx0LlJlamVjdCYmbnVsbCE9PW98fChvPXQ/ci5fbmV4dFNpYmxpbmc6ci5fcHJldmlvdXNTaWJsaW5nKX1pZihudWxsPT09KHI9ci5fcGFyZW50KXx8cj09PWUuX3Jvb3QpcmV0dXJuIG51bGw7aWYoaS50cmF2ZXJzYWxfZmlsdGVyKGUscik9PT1uLkZpbHRlclJlc3VsdC5BY2NlcHQpcmV0dXJuIG51bGx9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoODkpLHIoNzQpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMSksYT1yKDIpLHM9cig1MCksdT1yKDMpLGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIpe3ZhciBuPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiBuLl9pbmRlbnRhdGlvbj17fSxuLl9sZW5ndGhUb0xhc3ROZXdsaW5lPTAsbi5fd3JpdGVyT3B0aW9ucz1vLmFwcGx5RGVmYXVsdHMocix7d2VsbEZvcm1lZDohMSxoZWFkbGVzczohMSxwcmV0dHlQcmludDohMSxpbmRlbnQ6XCIgIFwiLG5ld2xpbmU6XCJcXG5cIixvZmZzZXQ6MCx3aWR0aDowLGFsbG93RW1wdHlUYWdzOiExLGluZGVudFRleHRPbmx5Tm9kZXM6ITEsc3BhY2VCZWZvcmVTbGFzaDohMX0pLG59cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5zZXJpYWxpemU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3JlZnM9e3N1cHByZXNzUHJldHR5OiExLGVtcHR5Tm9kZTohMSxtYXJrdXA6XCJcIn0sZS5ub2RlVHlwZSE9PWEuTm9kZVR5cGUuRG9jdW1lbnR8fHRoaXMuX3dyaXRlck9wdGlvbnMuaGVhZGxlc3N8fHRoaXMuZGVjbGFyYXRpb24odGhpcy5fYnVpbGRlck9wdGlvbnMudmVyc2lvbix0aGlzLl9idWlsZGVyT3B0aW9ucy5lbmNvZGluZyx0aGlzLl9idWlsZGVyT3B0aW9ucy5zdGFuZGFsb25lKSx0aGlzLnNlcmlhbGl6ZU5vZGUoZSx0aGlzLl93cml0ZXJPcHRpb25zLndlbGxGb3JtZWQpLHRoaXMuX3dyaXRlck9wdGlvbnMucHJldHR5UHJpbnQmJnRoaXMuX3JlZnMubWFya3VwLnNsaWNlKC10aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmUubGVuZ3RoKT09PXRoaXMuX3dyaXRlck9wdGlvbnMubmV3bGluZSYmKHRoaXMuX3JlZnMubWFya3VwPXRoaXMuX3JlZnMubWFya3VwLnNsaWNlKDAsLXRoaXMuX3dyaXRlck9wdGlvbnMubmV3bGluZS5sZW5ndGgpKSx0aGlzLl9yZWZzLm1hcmt1cH0sdC5wcm90b3R5cGUuZGVjbGFyYXRpb249ZnVuY3Rpb24oZSx0LHIpe3RoaXMuX2JlZ2luTGluZSgpLHRoaXMuX3JlZnMubWFya3VwKz0nPD94bWwgdmVyc2lvbj1cIicrZSsnXCInLHZvaWQgMCE9PXQmJih0aGlzLl9yZWZzLm1hcmt1cCs9JyBlbmNvZGluZz1cIicrdCsnXCInKSx2b2lkIDAhPT1yJiYodGhpcy5fcmVmcy5tYXJrdXArPScgc3RhbmRhbG9uZT1cIicrKHI/XCJ5ZXNcIjpcIm5vXCIpKydcIicpLHRoaXMuX3JlZnMubWFya3VwKz1cIj8+XCIsdGhpcy5fZW5kTGluZSgpfSx0LnByb3RvdHlwZS5kb2NUeXBlPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLl9iZWdpbkxpbmUoKSx0aGlzLl9yZWZzLm1hcmt1cCs9dCYmcj9cIjwhRE9DVFlQRSBcIitlKycgUFVCTElDIFwiJyt0KydcIiBcIicrcisnXCI+Jzp0P1wiPCFET0NUWVBFIFwiK2UrJyBQVUJMSUMgXCInK3QrJ1wiPic6cj9cIjwhRE9DVFlQRSBcIitlKycgU1lTVEVNIFwiJytyKydcIj4nOlwiPCFET0NUWVBFIFwiK2UrXCI+XCIsdGhpcy5fZW5kTGluZSgpfSx0LnByb3RvdHlwZS5vcGVuVGFnQmVnaW49ZnVuY3Rpb24oZSl7dGhpcy5fYmVnaW5MaW5lKCksdGhpcy5fcmVmcy5tYXJrdXArPVwiPFwiK2V9LHQucHJvdG90eXBlLm9wZW5UYWdFbmQ9ZnVuY3Rpb24oZSx0LHIpe2lmKHRoaXMuX3JlZnMuc3VwcHJlc3NQcmV0dHk9ITEsdGhpcy5fcmVmcy5lbXB0eU5vZGU9ITEsdGhpcy5fd3JpdGVyT3B0aW9ucy5wcmV0dHlQcmludCYmIXQmJiFyKXtmb3IodmFyIG49ITAsaT0hMCxvPXRoaXMuY3VycmVudE5vZGUuZmlyc3RDaGlsZCxhPTAscz0wO287KXtpZih1Lkd1YXJkLmlzRXhjbHVzaXZlVGV4dE5vZGUobykpcysrO2Vsc2V7aWYoIXUuR3VhcmQuaXNDREFUQVNlY3Rpb25Ob2RlKG8pKXtuPSExLGk9ITE7YnJlYWt9YSsrfVwiXCIhPT1vLmRhdGEmJihpPSExKSxvPW8ubmV4dFNpYmxpbmd9dGhpcy5fcmVmcy5zdXBwcmVzc1ByZXR0eT0hdGhpcy5fd3JpdGVyT3B0aW9ucy5pbmRlbnRUZXh0T25seU5vZGVzJiZuJiYoYTw9MSYmMD09PXN8fDA9PT1hKSx0aGlzLl9yZWZzLmVtcHR5Tm9kZT1pfShyfHx0fHx0aGlzLl9yZWZzLmVtcHR5Tm9kZSkmJnRoaXMuX3dyaXRlck9wdGlvbnMuYWxsb3dFbXB0eVRhZ3M/dGhpcy5fcmVmcy5tYXJrdXArPVwiPjwvXCIrZStcIj5cIjp0aGlzLl9yZWZzLm1hcmt1cCs9cj9cIiAvPlwiOnR8fHRoaXMuX3JlZnMuZW1wdHlOb2RlP3RoaXMuX3dyaXRlck9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaD9cIiAvPlwiOlwiLz5cIjpcIj5cIix0aGlzLl9lbmRMaW5lKCl9LHQucHJvdG90eXBlLmNsb3NlVGFnPWZ1bmN0aW9uKGUpe3RoaXMuX3JlZnMuZW1wdHlOb2RlfHwodGhpcy5fYmVnaW5MaW5lKCksdGhpcy5fcmVmcy5tYXJrdXArPVwiPC9cIitlK1wiPlwiKSx0aGlzLl9yZWZzLnN1cHByZXNzUHJldHR5PSExLHRoaXMuX3JlZnMuZW1wdHlOb2RlPSExLHRoaXMuX2VuZExpbmUoKX0sdC5wcm90b3R5cGUuYXR0cmlidXRlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZSsnPVwiJyt0KydcIic7dGhpcy5fd3JpdGVyT3B0aW9ucy5wcmV0dHlQcmludCYmdGhpcy5fd3JpdGVyT3B0aW9ucy53aWR0aD4wJiZ0aGlzLl9yZWZzLm1hcmt1cC5sZW5ndGgtdGhpcy5fbGVuZ3RoVG9MYXN0TmV3bGluZSsxK3IubGVuZ3RoPnRoaXMuX3dyaXRlck9wdGlvbnMud2lkdGg/KHRoaXMuX2VuZExpbmUoKSx0aGlzLl9iZWdpbkxpbmUoKSx0aGlzLl9yZWZzLm1hcmt1cCs9dGhpcy5faW5kZW50KDEpK3IpOnRoaXMuX3JlZnMubWFya3VwKz1cIiBcIityfSx0LnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKGUpe1wiXCIhPT1lJiYodGhpcy5fYmVnaW5MaW5lKCksdGhpcy5fcmVmcy5tYXJrdXArPWUsdGhpcy5fZW5kTGluZSgpKX0sdC5wcm90b3R5cGUuY2RhdGE9ZnVuY3Rpb24oZSl7XCJcIiE9PWUmJih0aGlzLl9iZWdpbkxpbmUoKSx0aGlzLl9yZWZzLm1hcmt1cCs9XCI8IVtDREFUQVtcIitlK1wiXV0+XCIsdGhpcy5fZW5kTGluZSgpKX0sdC5wcm90b3R5cGUuY29tbWVudD1mdW5jdGlvbihlKXt0aGlzLl9iZWdpbkxpbmUoKSx0aGlzLl9yZWZzLm1hcmt1cCs9XCJcXHgzYyEtLVwiK2UrXCItLVxceDNlXCIsdGhpcy5fZW5kTGluZSgpfSx0LnByb3RvdHlwZS5pbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe3RoaXMuX2JlZ2luTGluZSgpLHRoaXMuX3JlZnMubWFya3VwKz1cIjw/XCIrKFwiXCI9PT10P2U6ZStcIiBcIit0KStcIj8+XCIsdGhpcy5fZW5kTGluZSgpfSx0LnByb3RvdHlwZS5fYmVnaW5MaW5lPWZ1bmN0aW9uKCl7dGhpcy5fd3JpdGVyT3B0aW9ucy5wcmV0dHlQcmludCYmIXRoaXMuX3JlZnMuc3VwcHJlc3NQcmV0dHkmJih0aGlzLl9yZWZzLm1hcmt1cCs9dGhpcy5faW5kZW50KHRoaXMuX3dyaXRlck9wdGlvbnMub2Zmc2V0K3RoaXMubGV2ZWwpKX0sdC5wcm90b3R5cGUuX2VuZExpbmU9ZnVuY3Rpb24oKXt0aGlzLl93cml0ZXJPcHRpb25zLnByZXR0eVByaW50JiYhdGhpcy5fcmVmcy5zdXBwcmVzc1ByZXR0eSYmKHRoaXMuX3JlZnMubWFya3VwKz10aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmUsdGhpcy5fbGVuZ3RoVG9MYXN0TmV3bGluZT10aGlzLl9yZWZzLm1hcmt1cC5sZW5ndGgpfSx0LnByb3RvdHlwZS5faW5kZW50PWZ1bmN0aW9uKGUpe2lmKGU8PTApcmV0dXJuXCJcIjtpZih2b2lkIDAhPT10aGlzLl9pbmRlbnRhdGlvbltlXSlyZXR1cm4gdGhpcy5faW5kZW50YXRpb25bZV07dmFyIHQ9dGhpcy5fd3JpdGVyT3B0aW9ucy5pbmRlbnQucmVwZWF0KGUpO3JldHVybiB0aGlzLl9pbmRlbnRhdGlvbltlXT10LHR9LHR9KHMuQmFzZVdyaXRlcik7dC5YTUxXcml0ZXI9bH0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNDcpLGk9cigzNSk7ZS5leHBvcnRzPVwiXCIucmVwZWF0fHxmdW5jdGlvbihlKXt2YXIgdD1TdHJpbmcoaSh0aGlzKSkscj1cIlwiLG89bihlKTtpZihvPDB8fG89PTEvMCl0aHJvdyBSYW5nZUVycm9yKFwiV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zXCIpO2Zvcig7bz4wOyhvPj4+PTEpJiYodCs9dCkpMSZvJiYocis9dCk7cmV0dXJuIHJ9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cigzMSkscigzMikscigzMykscigxOSkscigxNzgpLHIoMjApLHIoMjIpLHIoMjMpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pLG89dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9cig2Nykscz1yKDEpLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIpe3ZhciBuPWUuY2FsbCh0aGlzLHQpfHx0aGlzO3JldHVybiBuLl93cml0ZXJPcHRpb25zPXMuYXBwbHlEZWZhdWx0cyhyLHt3ZWxsRm9ybWVkOiExLHByZXR0eVByaW50OiExLGluZGVudDpcIiAgXCIsbmV3bGluZTpcIlxcblwiLG9mZnNldDowLGdyb3VwOiExLHZlcmJvc2U6ITF9KSxufXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuc2VyaWFsaXplPWZ1bmN0aW9uKGUpe3ZhciB0PXMuYXBwbHlEZWZhdWx0cyh0aGlzLl93cml0ZXJPcHRpb25zLHtmb3JtYXQ6XCJvYmplY3RcIix3ZWxsRm9ybWVkOiExfSkscj1uZXcgYS5PYmplY3RXcml0ZXIodGhpcy5fYnVpbGRlck9wdGlvbnMsdCkuc2VyaWFsaXplKGUpO3JldHVybiB0aGlzLl9iZWdpbkxpbmUodGhpcy5fd3JpdGVyT3B0aW9ucywwKSt0aGlzLl9jb252ZXJ0T2JqZWN0KHIsdGhpcy5fd3JpdGVyT3B0aW9ucyl9LHQucHJvdG90eXBlLl9jb252ZXJ0T2JqZWN0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLGE9dGhpczt2b2lkIDA9PT1yJiYocj0wKTt2YXIgdT1cIlwiLGw9dGhpcy5faXNMZWFmTm9kZShlKTtpZihzLmlzQXJyYXkoZSkpe3UrPVwiW1wiO3ZhciBjPWUubGVuZ3RoLGg9MDt0cnl7Zm9yKHZhciBwPW8oZSksZj1wLm5leHQoKTshZi5kb25lO2Y9cC5uZXh0KCkpe3ZhciBkPWYudmFsdWU7dSs9dGhpcy5fZW5kTGluZSh0LHIrMSkrdGhpcy5fYmVnaW5MaW5lKHQscisxKSt0aGlzLl9jb252ZXJ0T2JqZWN0KGQsdCxyKzEpLGg8Yy0xJiYodSs9XCIsXCIpLGgrK319Y2F0Y2goZSl7bj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZiYmIWYuZG9uZSYmKGk9cC5yZXR1cm4pJiZpLmNhbGwocCl9ZmluYWxseXtpZihuKXRocm93IG4uZXJyb3J9fXUrPXRoaXMuX2VuZExpbmUodCxyKSt0aGlzLl9iZWdpbkxpbmUodCxyKSx1Kz1cIl1cIn1lbHNlIGlmKHMuaXNPYmplY3QoZSkpe3UrPVwie1wiO3ZhciBtPXMub2JqZWN0TGVuZ3RoKGUpLHk9MDtzLmZvckVhY2hPYmplY3QoZSwoZnVuY3Rpb24oZSxuKXtsJiZ0LnByZXR0eVByaW50P3UrPVwiIFwiOnUrPWEuX2VuZExpbmUodCxyKzEpK2EuX2JlZ2luTGluZSh0LHIrMSksdSs9YS5fa2V5KGUpLHQucHJldHR5UHJpbnQmJih1Kz1cIiBcIiksdSs9YS5fY29udmVydE9iamVjdChuLHQscisxKSx5PG0tMSYmKHUrPVwiLFwiKSx5Kyt9KSx0aGlzKSxsJiZ0LnByZXR0eVByaW50P3UrPVwiIFwiOnUrPXRoaXMuX2VuZExpbmUodCxyKSt0aGlzLl9iZWdpbkxpbmUodCxyKSx1Kz1cIn1cIn1lbHNlIHUrPXRoaXMuX3ZhbChlKTtyZXR1cm4gdX0sdC5wcm90b3R5cGUuX2JlZ2luTGluZT1mdW5jdGlvbihlLHQpe2lmKCFlLnByZXR0eVByaW50KXJldHVyblwiXCI7dmFyIHI9ZS5vZmZzZXQrdCsxO3JldHVybiByPjA/bmV3IEFycmF5KHIpLmpvaW4oZS5pbmRlbnQpOlwiXCJ9LHQucHJvdG90eXBlLl9lbmRMaW5lPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUucHJldHR5UHJpbnQ/ZS5uZXdsaW5lOlwiXCJ9LHQucHJvdG90eXBlLl9rZXk9ZnVuY3Rpb24oZSl7cmV0dXJuJ1wiJytlKydcIjonfSx0LnByb3RvdHlwZS5fdmFsPWZ1bmN0aW9uKGUpe3JldHVybiBKU09OLnN0cmluZ2lmeShlKX0sdC5wcm90b3R5cGUuX2lzTGVhZk5vZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2Rlc2NlbmRhbnRDb3VudChlKTw9MX0sdC5wcm90b3R5cGUuX2Rlc2NlbmRhbnRDb3VudD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIHZvaWQgMD09PXQmJih0PTApLHMuaXNBcnJheShlKT9zLmZvckVhY2hBcnJheShlLChmdW5jdGlvbihlKXtyZXR1cm4gdCs9ci5fZGVzY2VuZGFudENvdW50KGUsdCl9KSx0aGlzKTpzLmlzT2JqZWN0KGUpP3MuZm9yRWFjaE9iamVjdChlLChmdW5jdGlvbihlLG4pe3JldHVybiB0Kz1yLl9kZXNjZW5kYW50Q291bnQobix0KX0pLHRoaXMpOnQrKyx0fSx0fShyKDUwKS5CYXNlV3JpdGVyKTt0LkpTT05Xcml0ZXI9dX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoMzEpLHIoMzIpLHIoMzMpLHIoMTkpLHIoMTc4KSxyKDg5KSxyKDIwKSxyKDIyKSxyKDIzKTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KSxvPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPXIoNjcpLHM9cigxKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxyKXt2YXIgbj1lLmNhbGwodGhpcyx0KXx8dGhpcztpZihuLl93cml0ZXJPcHRpb25zPXMuYXBwbHlEZWZhdWx0cyhyLHt3ZWxsRm9ybWVkOiExLGluZGVudDpcIiAgXCIsbmV3bGluZTpcIlxcblwiLG9mZnNldDowLGdyb3VwOiExLHZlcmJvc2U6ITF9KSxuLl93cml0ZXJPcHRpb25zLmluZGVudC5sZW5ndGg8Mil0aHJvdyBuZXcgRXJyb3IoXCJZQU1MIGluZGVudGVudGF0aW9uIHN0cmluZyBtdXN0IGJlIGF0IGxlYXN0IHR3byBjaGFyYWN0ZXJzIGxvbmcuXCIpO2lmKG4uX3dyaXRlck9wdGlvbnMub2Zmc2V0PDApdGhyb3cgbmV3IEVycm9yKFwiWUFNTCBvZmZzZXQgc2hvdWxkIGJlIHplcm8gb3IgYSBwb3NpdGl2ZSBudW1iZXIuXCIpO3JldHVybiBufXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuc2VyaWFsaXplPWZ1bmN0aW9uKGUpe3ZhciB0PXMuYXBwbHlEZWZhdWx0cyh0aGlzLl93cml0ZXJPcHRpb25zLHtmb3JtYXQ6XCJvYmplY3RcIix3ZWxsRm9ybWVkOiExfSkscj1uZXcgYS5PYmplY3RXcml0ZXIodGhpcy5fYnVpbGRlck9wdGlvbnMsdCkuc2VyaWFsaXplKGUpLG49dGhpcy5fYmVnaW5MaW5lKHRoaXMuX3dyaXRlck9wdGlvbnMsMCkrXCItLS1cIit0aGlzLl9lbmRMaW5lKHRoaXMuX3dyaXRlck9wdGlvbnMpK3RoaXMuX2NvbnZlcnRPYmplY3Qocix0aGlzLl93cml0ZXJPcHRpb25zLDApO3JldHVybiBuLnNsaWNlKC10aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmUubGVuZ3RoKT09PXRoaXMuX3dyaXRlck9wdGlvbnMubmV3bGluZSYmKG49bi5zbGljZSgwLC10aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmUubGVuZ3RoKSksbn0sdC5wcm90b3R5cGUuX2NvbnZlcnRPYmplY3Q9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGksYSx1PXRoaXM7dm9pZCAwPT09biYmKG49ITEpO3ZhciBsPVwiXCI7aWYocy5pc0FycmF5KGUpKXRyeXtmb3IodmFyIGM9byhlKSxoPWMubmV4dCgpOyFoLmRvbmU7aD1jLm5leHQoKSl7dmFyIHA9aC52YWx1ZTtsKz10aGlzLl9iZWdpbkxpbmUodCxyLCEwKSxzLmlzT2JqZWN0KHApP3MuaXNFbXB0eShwKT9sKz0nXCJcIicrdGhpcy5fZW5kTGluZSh0KTpsKz10aGlzLl9jb252ZXJ0T2JqZWN0KHAsdCxyLCEwKTpsKz10aGlzLl92YWwocCkrdGhpcy5fZW5kTGluZSh0KX19Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7aCYmIWguZG9uZSYmKGE9Yy5yZXR1cm4pJiZhLmNhbGwoYyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fWVsc2Ugcy5mb3JFYWNoT2JqZWN0KGUsKGZ1bmN0aW9uKGUsaSl7bj8obCs9dS5fa2V5KGUpLG49ITEpOmwrPXUuX2JlZ2luTGluZSh0LHIpK3UuX2tleShlKSxzLmlzT2JqZWN0KGkpP3MuaXNFbXB0eShpKT9sKz0nIFwiXCInK3UuX2VuZExpbmUodCk6bCs9dS5fZW5kTGluZSh0KSt1Ll9jb252ZXJ0T2JqZWN0KGksdCxyKzEpOmwrPVwiIFwiK3UuX3ZhbChpKSt1Ll9lbmRMaW5lKHQpfSksdGhpcyk7cmV0dXJuIGx9LHQucHJvdG90eXBlLl9iZWdpbkxpbmU9ZnVuY3Rpb24oZSx0LHIpe3ZvaWQgMD09PXImJihyPSExKTt2YXIgbj1lLm9mZnNldCt0KzEsaT1uZXcgQXJyYXkobikuam9pbihlLmluZGVudCk7cmV0dXJuIHI/aS5zdWJzdHIoMCxpLmxlbmd0aC0yKStcIi1cIitpLnN1YnN0cigtMSwxKTppfSx0LnByb3RvdHlwZS5fZW5kTGluZT1mdW5jdGlvbihlKXtyZXR1cm4gZS5uZXdsaW5lfSx0LnByb3RvdHlwZS5fa2V5PWZ1bmN0aW9uKGUpe3JldHVybidcIicrZSsnXCI6J30sdC5wcm90b3R5cGUuX3ZhbD1mdW5jdGlvbihlKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSl9LHR9KHIoNTApLkJhc2VXcml0ZXIpO3QuWUFNTFdyaXRlcj11fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSkscigxMTApLmRvbS5zZXRGZWF0dXJlcyghMCk7dmFyIG49cigxMTApO3QuRE9NSW1wbGVtZW50YXRpb249bi5ET01JbXBsZW1lbnRhdGlvbjt2YXIgaT1yKDI3MSk7dC5ET01QYXJzZXI9aS5ET01QYXJzZXI7dmFyIG89cigyNzQpO3QuWE1MU2VyaWFsaXplcj1vLlhNTFNlcmlhbGl6ZXJ9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDMpLGk9cigwKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5wcm90b3R5cGUuYmVmb3JlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPVtdLHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKWVbdF09YXJndW1lbnRzW3RdO3ZhciByPW4uQ2FzdC5hc05vZGUodGhpcyksbz1yLl9wYXJlbnQ7aWYobnVsbCE9PW8pe2Zvcih2YXIgYT1yLl9wcmV2aW91c1NpYmxpbmcscz0hMDtzJiZhOyl7cz0hMTtmb3IodmFyIHU9MDt1PGUubGVuZ3RoO3UrKyl7dmFyIGw9ZVt1XTtpZihsPT09YSl7YT1hLl9wcmV2aW91c1NpYmxpbmcscz0hMDticmVha319fXZhciBjPWkucGFyZW50Tm9kZV9jb252ZXJ0Tm9kZXNJbnRvQU5vZGUoZSxyLl9ub2RlRG9jdW1lbnQpO2E9bnVsbD09PWE/by5fZmlyc3RDaGlsZDphLl9uZXh0U2libGluZyxpLm11dGF0aW9uX3ByZUluc2VydChjLG8sYSl9fSxlLnByb3RvdHlwZS5hZnRlcj1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt2YXIgcj1uLkNhc3QuYXNOb2RlKHRoaXMpLG89ci5fcGFyZW50O2lmKG8pe2Zvcih2YXIgYT1yLl9uZXh0U2libGluZyxzPSEwO3MmJmE7KXtzPSExO2Zvcih2YXIgdT0wO3U8ZS5sZW5ndGg7dSsrKXt2YXIgbD1lW3VdO2lmKGw9PT1hKXthPWEuX25leHRTaWJsaW5nLHM9ITA7YnJlYWt9fX12YXIgYz1pLnBhcmVudE5vZGVfY29udmVydE5vZGVzSW50b0FOb2RlKGUsci5fbm9kZURvY3VtZW50KTtpLm11dGF0aW9uX3ByZUluc2VydChjLG8sYSl9fSxlLnByb3RvdHlwZS5yZXBsYWNlV2l0aD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt2YXIgcj1uLkNhc3QuYXNOb2RlKHRoaXMpLG89ci5fcGFyZW50O2lmKG8pe2Zvcih2YXIgYT1yLl9uZXh0U2libGluZyxzPSEwO3MmJmE7KXtzPSExO2Zvcih2YXIgdT0wO3U8ZS5sZW5ndGg7dSsrKXt2YXIgbD1lW3VdO2lmKGw9PT1hKXthPWEuX25leHRTaWJsaW5nLHM9ITA7YnJlYWt9fX12YXIgYz1pLnBhcmVudE5vZGVfY29udmVydE5vZGVzSW50b0FOb2RlKGUsci5fbm9kZURvY3VtZW50KTtyLl9wYXJlbnQ9PT1vP2kubXV0YXRpb25fcmVwbGFjZShyLGMsbyk6aS5tdXRhdGlvbl9wcmVJbnNlcnQoYyxvLGEpfX0sZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7dmFyIGU9bi5DYXN0LmFzTm9kZSh0aGlzKSx0PWUuX3BhcmVudDt0JiZpLm11dGF0aW9uX3JlbW92ZShlLHQpfSxlfSgpO3QuQ2hpbGROb2RlSW1wbD1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49ZnVuY3Rpb24oKXt9O3QuRG9jdW1lbnRPclNoYWRvd1Jvb3RJbXBsPW59LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDYpLG89cigzKSxhPXIoNykscz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5fbm9kZUxpc3Q9W10sdGhpcy5fcmVjb3JkUXVldWU9W10sdGhpcy5fY2FsbGJhY2s9ZTt2YXIgdD1pLmRvbS53aW5kb3c7YS5zZXQuYXBwZW5kKHQuX211dGF0aW9uT2JzZXJ2ZXJzLHRoaXMpfXJldHVybiBlLnByb3RvdHlwZS5vYnNlcnZlPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtpZih2b2lkIDA9PT0odD10fHx7Y2hpbGRMaXN0OiExLHN1YnRyZWU6ITF9KS5hdHRyaWJ1dGVPbGRWYWx1ZSYmdm9pZCAwPT09dC5hdHRyaWJ1dGVGaWx0ZXJ8fHZvaWQgMCE9PXQuYXR0cmlidXRlc3x8KHQuYXR0cmlidXRlcz0hMCksdm9pZCAwIT09dC5jaGFyYWN0ZXJEYXRhT2xkVmFsdWUmJnZvaWQgMD09PXQuY2hhcmFjdGVyRGF0YSYmKHQuY2hhcmFjdGVyRGF0YT0hMCksIXQuY2hpbGRMaXN0JiYhdC5hdHRyaWJ1dGVzJiYhdC5jaGFyYWN0ZXJEYXRhKXRocm93IG5ldyBUeXBlRXJyb3I7aWYodC5hdHRyaWJ1dGVPbGRWYWx1ZSYmIXQuYXR0cmlidXRlcyl0aHJvdyBuZXcgVHlwZUVycm9yO2lmKHZvaWQgMCE9PXQuYXR0cmlidXRlRmlsdGVyJiYhdC5hdHRyaWJ1dGVzKXRocm93IG5ldyBUeXBlRXJyb3I7aWYodC5jaGFyYWN0ZXJEYXRhT2xkVmFsdWUmJiF0LmNoYXJhY3RlckRhdGEpdGhyb3cgbmV3IFR5cGVFcnJvcjt2YXIgcz0hMSx1PXQsbD1mdW5jdGlvbihlKXt2YXIgdCxyO2lmKGUub2JzZXJ2ZXI9PT1jKXtzPSEwO3RyeXtmb3IodmFyIGk9KHQ9dm9pZCAwLG4oYy5fbm9kZUxpc3QpKSxsPWkubmV4dCgpOyFsLmRvbmU7bD1pLm5leHQoKSl7dmFyIGg9bC52YWx1ZTthLmxpc3QucmVtb3ZlKGguX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3QsKGZ1bmN0aW9uKHQpe3JldHVybiBvLkd1YXJkLmlzVHJhbnNpZW50UmVnaXN0ZXJlZE9ic2VydmVyKHQpJiZ0LnNvdXJjZT09PWV9KSl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJihyPWkucmV0dXJuKSYmci5jYWxsKGkpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1lLm9wdGlvbnM9dX19LGM9dGhpczt0cnl7Zm9yKHZhciBoPW4oZS5fcmVnaXN0ZXJlZE9ic2VydmVyTGlzdCkscD1oLm5leHQoKTshcC5kb25lO3A9aC5uZXh0KCkpe2wocC52YWx1ZSl9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3AmJiFwLmRvbmUmJihpPWgucmV0dXJuKSYmaS5jYWxsKGgpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1zfHwoZS5fcmVnaXN0ZXJlZE9ic2VydmVyTGlzdC5wdXNoKHtvYnNlcnZlcjp0aGlzLG9wdGlvbnM6dH0pLHRoaXMuX25vZGVMaXN0LnB1c2goZSkpfSxlLnByb3RvdHlwZS5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7dmFyIGUsdCxyPXRoaXM7dHJ5e2Zvcih2YXIgaT1uKHRoaXMuX25vZGVMaXN0KSxvPWkubmV4dCgpOyFvLmRvbmU7bz1pLm5leHQoKSl7dmFyIHM9by52YWx1ZTthLmxpc3QucmVtb3ZlKHMuX3JlZ2lzdGVyZWRPYnNlcnZlckxpc3QsKGZ1bmN0aW9uKGUpe3JldHVybiBlLm9ic2VydmVyPT09cn0pKX19Y2F0Y2godCl7ZT17ZXJyb3I6dH19ZmluYWxseXt0cnl7byYmIW8uZG9uZSYmKHQ9aS5yZXR1cm4pJiZ0LmNhbGwoaSl9ZmluYWxseXtpZihlKXRocm93IGUuZXJyb3J9fXRoaXMuX3JlY29yZFF1ZXVlPVtdfSxlLnByb3RvdHlwZS50YWtlUmVjb3Jkcz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX3JlY29yZFF1ZXVlO3JldHVybiB0aGlzLl9yZWNvcmRRdWV1ZT1bXSxlfSxlfSgpO3QuTXV0YXRpb25PYnNlcnZlckltcGw9c30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMyksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInByZXZpb3VzRWxlbWVudFNpYmxpbmdcIix7Z2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBlPW4uQ2FzdC5hc05vZGUodGhpcykuX3ByZXZpb3VzU2libGluZztlOyl7aWYobi5HdWFyZC5pc0VsZW1lbnROb2RlKGUpKXJldHVybiBlO2U9ZS5fcHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcIm5leHRFbGVtZW50U2libGluZ1wiLHtnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGU9bi5DYXN0LmFzTm9kZSh0aGlzKS5fbmV4dFNpYmxpbmc7ZTspe2lmKG4uR3VhcmQuaXNFbGVtZW50Tm9kZShlKSlyZXR1cm4gZTtlPWUuX25leHRTaWJsaW5nfXJldHVybiBudWxsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGV9KCk7dC5Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGVJbXBsPWl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDMpLGk9cigwKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5SWQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWkudHJlZV9nZXRGaXJzdERlc2NlbmRhbnROb2RlKG4uQ2FzdC5hc05vZGUodGhpcyksITEsITEsKGZ1bmN0aW9uKGUpe3JldHVybiBuLkd1YXJkLmlzRWxlbWVudE5vZGUoZSl9KSk7bnVsbCE9PXQ7KXtpZih0Ll91bmlxdWVJZGVudGlmaWVyPT09ZSlyZXR1cm4gdDt0PWkudHJlZV9nZXROZXh0RGVzY2VuZGFudE5vZGUobi5DYXN0LmFzTm9kZSh0aGlzKSx0LCExLCExLChmdW5jdGlvbihlKXtyZXR1cm4gbi5HdWFyZC5pc0VsZW1lbnROb2RlKGUpfSkpfXJldHVybiBudWxsfSxlfSgpO3QuTm9uRWxlbWVudFBhcmVudE5vZGVJbXBsPW99LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1yKDMpLG89cigwKSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiY2hpbGRyZW5cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG8uY3JlYXRlX2h0bWxDb2xsZWN0aW9uKGkuQ2FzdC5hc05vZGUodGhpcykpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImZpcnN0RWxlbWVudENoaWxkXCIse2dldDpmdW5jdGlvbigpe2Zvcih2YXIgZT1pLkNhc3QuYXNOb2RlKHRoaXMpLl9maXJzdENoaWxkO2U7KXtpZihpLkd1YXJkLmlzRWxlbWVudE5vZGUoZSkpcmV0dXJuIGU7ZT1lLl9uZXh0U2libGluZ31yZXR1cm4gbnVsbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJsYXN0RWxlbWVudENoaWxkXCIse2dldDpmdW5jdGlvbigpe2Zvcih2YXIgZT1pLkNhc3QuYXNOb2RlKHRoaXMpLl9sYXN0Q2hpbGQ7ZTspe2lmKGkuR3VhcmQuaXNFbGVtZW50Tm9kZShlKSlyZXR1cm4gZTtlPWUuX3ByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjaGlsZEVsZW1lbnRDb3VudFwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgZSx0LHI9MDt0cnl7Zm9yKHZhciBvPW4oaS5DYXN0LmFzTm9kZSh0aGlzKS5fY2hpbGRyZW4pLGE9by5uZXh0KCk7IWEuZG9uZTthPW8ubmV4dCgpKXt2YXIgcz1hLnZhbHVlO2kuR3VhcmQuaXNFbGVtZW50Tm9kZShzKSYmcisrfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYodD1vLnJldHVybikmJnQuY2FsbChvKX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19cmV0dXJuIHJ9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUucHJlcGVuZD1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyllW3RdPWFyZ3VtZW50c1t0XTt2YXIgcj1pLkNhc3QuYXNOb2RlKHRoaXMpLG49by5wYXJlbnROb2RlX2NvbnZlcnROb2Rlc0ludG9BTm9kZShlLHIuX25vZGVEb2N1bWVudCk7by5tdXRhdGlvbl9wcmVJbnNlcnQobixyLHIuX2ZpcnN0Q2hpbGQpfSxlLnByb3RvdHlwZS5hcHBlbmQ9ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dmFyIHI9aS5DYXN0LmFzTm9kZSh0aGlzKSxuPW8ucGFyZW50Tm9kZV9jb252ZXJ0Tm9kZXNJbnRvQU5vZGUoZSxyLl9ub2RlRG9jdW1lbnQpO28ubXV0YXRpb25fYXBwZW5kKG4scil9LGUucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3I9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5DYXN0LmFzTm9kZSh0aGlzKSxyPW8uc2VsZWN0b3JzX3Njb3BlTWF0Y2hBU2VsZWN0b3JzU3RyaW5nKGUsdCk7cmV0dXJuIDA9PT1yLmxlbmd0aD9udWxsOnJbMF19LGUucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGw9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5DYXN0LmFzTm9kZSh0aGlzKSxyPW8uc2VsZWN0b3JzX3Njb3BlTWF0Y2hBU2VsZWN0b3JzU3RyaW5nKGUsdCk7cmV0dXJuIG8uY3JlYXRlX25vZGVMaXN0U3RhdGljKHQscil9LGV9KCk7dC5QYXJlbnROb2RlSW1wbD1hfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigwKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiX25hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX19uYW1lfHxcIlwifSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fX25hbWU9ZX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJfYXNzaWduZWRTbG90XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fYXNzaWduZWRTbG90fHxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fX2Fzc2lnbmVkU2xvdD1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImFzc2lnbmVkU2xvdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5zaGFkb3dUcmVlX2ZpbmRBU2xvdCh0aGlzLCEwKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxlfSgpO3QuU2xvdGFibGVJbXBsPWl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1yKDEwMiksYT1yKDkpLHM9cigzKSx1PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIHI9ZS5jYWxsKHRoaXMpfHx0aGlzO2lmKHMuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKHQuc3RhcnRDb250YWluZXIpfHxzLkd1YXJkLmlzQXR0ck5vZGUodC5zdGFydENvbnRhaW5lcil8fHMuR3VhcmQuaXNEb2N1bWVudFR5cGVOb2RlKHQuZW5kQ29udGFpbmVyKXx8cy5HdWFyZC5pc0F0dHJOb2RlKHQuZW5kQ29udGFpbmVyKSl0aHJvdyBuZXcgYS5JbnZhbGlkTm9kZVR5cGVFcnJvcjtyZXR1cm4gci5fc3RhcnQ9W3Quc3RhcnRDb250YWluZXIsdC5zdGFydE9mZnNldF0sci5fZW5kPVt0LmVuZENvbnRhaW5lcix0LmVuZE9mZnNldF0scn1yZXR1cm4gaSh0LGUpLHR9KG8uQWJzdHJhY3RSYW5nZUltcGwpO3QuU3RhdGljUmFuZ2VJbXBsPXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDI3Mik7dC5ET01QYXJzZXI9bi5ET01QYXJzZXJJbXBsfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigwKSxpPXIoMjczKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYoXCJ0ZXh0L2h0bWxcIj09PXQpdGhyb3cgbmV3IEVycm9yKFwiSFRNTCBwYXJzZXIgbm90IGltcGxlbWVudGVkLlwiKTt0cnl7cmV0dXJuKHI9KG5ldyBpLlhNTFBhcnNlckltcGwpLnBhcnNlKGUpKS5fY29udGVudFR5cGU9dCxyfWNhdGNoKGUpe3ZhciByLG89XCJodHRwOi8vd3d3Lm1vemlsbGEub3JnL25ld2xheW91dC94bWwvcGFyc2VyZXJyb3IueG1sXCIsYT0ocj1uLmNyZWF0ZV94bWxEb2N1bWVudCgpKS5jcmVhdGVFbGVtZW50TlMobyxcInBhcnNlcmVycm9yXCIpLHM9ci5jcmVhdGVFbGVtZW50TlMobyxcImVycm9yXCIpO3JldHVybiBzLnNldEF0dHJpYnV0ZShcIm1lc3NhZ2VcIixlLm1lc3NhZ2UpLGEuYXBwZW5kQ2hpbGQocyksci5hcHBlbmRDaGlsZChhKSxyfX0sZX0oKTt0LkRPTVBhcnNlckltcGw9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxpPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMTgwKSxhPXIoMTExKSxzPXIoNyksdT1yKDApLGw9cig2OSksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyLGMsaCxwPW5ldyBvLlhNTFN0cmluZ0xleGVyKGUse3NraXBXaGl0ZXNwYWNlT25seVRleHQ6ITB9KSxmPXUuY3JlYXRlX2RvY3VtZW50KCksZD1mLG09cC5uZXh0VG9rZW4oKTttLnR5cGUhPT1hLlRva2VuVHlwZS5FT0Y7KXtzd2l0Y2gobS50eXBlKXtjYXNlIGEuVG9rZW5UeXBlLkRlY2xhcmF0aW9uOnZhciB5PW07aWYoXCIxLjBcIiE9PXkudmVyc2lvbil0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHhtbCB2ZXJzaW9uOiBcIit5LnZlcnNpb24pO2JyZWFrO2Nhc2UgYS5Ub2tlblR5cGUuRG9jVHlwZTp2YXIgdj1tO2lmKCF1LnhtbF9pc1B1YmlkQ2hhcih2LnB1YklkKSl0aHJvdyBuZXcgRXJyb3IoXCJEb2NUeXBlIHB1YmxpYyBpZGVudGlmaWVyIGRvZXMgbm90IG1hdGNoIFB1YmlkQ2hhciBjb25zdHJ1Y3QuXCIpO2lmKCF1LnhtbF9pc0xlZ2FsQ2hhcih2LnN5c0lkKXx8LTEhPT12LnN5c0lkLmluZGV4T2YoJ1wiJykmJi0xIT09di5zeXNJZC5pbmRleE9mKFwiJ1wiKSl0aHJvdyBuZXcgRXJyb3IoXCJEb2NUeXBlIHN5c3RlbSBpZGVudGlmaWVyIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy5cIik7ZC5hcHBlbmRDaGlsZChmLmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50VHlwZSh2Lm5hbWUsdi5wdWJJZCx2LnN5c0lkKSk7YnJlYWs7Y2FzZSBhLlRva2VuVHlwZS5DREFUQTp2YXIgXz1tO2lmKCF1LnhtbF9pc0xlZ2FsQ2hhcihfLmRhdGEpfHwtMSE9PV8uZGF0YS5pbmRleE9mKFwiXV0+XCIpKXRocm93IG5ldyBFcnJvcihcIkNEQVRBIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy5cIik7ZC5hcHBlbmRDaGlsZChmLmNyZWF0ZUNEQVRBU2VjdGlvbihfLmRhdGEpKTticmVhaztjYXNlIGEuVG9rZW5UeXBlLkNvbW1lbnQ6dmFyIGc9bTtpZighdS54bWxfaXNMZWdhbENoYXIoZy5kYXRhKXx8LTEhPT1nLmRhdGEuaW5kZXhPZihcIi0tXCIpfHxnLmRhdGEuZW5kc1dpdGgoXCItXCIpKXRocm93IG5ldyBFcnJvcihcIkNvbW1lbnQgZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuXCIpO2QuYXBwZW5kQ2hpbGQoZi5jcmVhdGVDb21tZW50KGcuZGF0YSkpO2JyZWFrO2Nhc2UgYS5Ub2tlblR5cGUuUEk6dmFyIGI9bTtpZigtMSE9PWIudGFyZ2V0LmluZGV4T2YoXCI6XCIpfHwvXnhtbCQvaS50ZXN0KGIudGFyZ2V0KSl0aHJvdyBuZXcgRXJyb3IoXCJQcm9jZXNzaW5nIGluc3RydWN0aW9uIHRhcmdldCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuXCIpO2lmKCF1LnhtbF9pc0xlZ2FsQ2hhcihiLmRhdGEpfHwtMSE9PWIuZGF0YS5pbmRleE9mKFwiPz5cIikpdGhyb3cgbmV3IEVycm9yKFwiUHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy5cIik7ZC5hcHBlbmRDaGlsZChmLmNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihiLnRhcmdldCxiLmRhdGEpKTticmVhaztjYXNlIGEuVG9rZW5UeXBlLlRleHQ6dmFyIHg9bTtpZighdS54bWxfaXNMZWdhbENoYXIoeC5kYXRhKSl0aHJvdyBuZXcgRXJyb3IoXCJUZXh0IGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLlwiKTtkLmFwcGVuZENoaWxkKGYuY3JlYXRlVGV4dE5vZGUodGhpcy5fZGVjb2RlVGV4dCh4LmRhdGEpKSk7YnJlYWs7Y2FzZSBhLlRva2VuVHlwZS5FbGVtZW50OnZhciB3PW0sRT1uKHUubmFtZXNwYWNlX2V4dHJhY3RRTmFtZSh3Lm5hbWUpLDIpLEQ9RVswXSxTPUVbMV07aWYoLTEhPT1TLmluZGV4T2YoXCI6XCIpfHwhdS54bWxfaXNOYW1lKFMpKXRocm93IG5ldyBFcnJvcihcIk5vZGUgbG9jYWwgbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuXCIpO2lmKFwieG1sbnNcIj09PUQpdGhyb3cgbmV3IEVycm9yKFwiQW4gZWxlbWVudCBjYW5ub3QgaGF2ZSB0aGUgJ3htbG5zJyBwcmVmaXguXCIpO3ZhciBDPWQubG9va3VwTmFtZXNwYWNlVVJJKEQpLEE9e307dHJ5e2Zvcih2YXIgTj0odD12b2lkIDAsaSh3LmF0dHJpYnV0ZXMpKSxUPU4ubmV4dCgpOyFULmRvbmU7VD1OLm5leHQoKSl7dmFyIE89bihULnZhbHVlLDIpLEY9T1swXSxrPU9bMV07aWYoXCJ4bWxuc1wiPT09RilDPWs7ZWxzZXt2YXIgUD1uKHUubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShGKSwyKSxJPVBbMF0sTD1QWzFdO1wieG1sbnNcIj09PUkmJihMPT09RCYmKEM9ayksQVtMXT1rKX19fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e1QmJiFULmRvbmUmJihyPU4ucmV0dXJuKSYmci5jYWxsKE4pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX12YXIgTT1udWxsIT09Qz9mLmNyZWF0ZUVsZW1lbnROUyhDLHcubmFtZSk6Zi5jcmVhdGVFbGVtZW50KHcubmFtZSk7ZC5hcHBlbmRDaGlsZChNKTt2YXIgQj1uZXcgbC5Mb2NhbE5hbWVTZXQ7dHJ5e2Zvcih2YXIgaj0oYz12b2lkIDAsaSh3LmF0dHJpYnV0ZXMpKSxSPWoubmV4dCgpOyFSLmRvbmU7Uj1qLm5leHQoKSl7dmFyIHo9bihSLnZhbHVlLDIpLFU9KEY9elswXSxrPXpbMV0sbih1Lm5hbWVzcGFjZV9leHRyYWN0UU5hbWUoRiksMikpLEc9KEk9VVswXSxMPVVbMV0sbnVsbCk7aWYoXCJ4bWxuc1wiPT09SXx8bnVsbD09PUkmJlwieG1sbnNcIj09PUw/Rz1zLm5hbWVzcGFjZS5YTUxOUzpudWxsIT09KEc9TS5sb29rdXBOYW1lc3BhY2VVUkkoSSkpJiZNLmlzRGVmYXVsdE5hbWVzcGFjZShHKT9HPW51bGw6bnVsbD09PUcmJm51bGwhPT1JJiYoRz1BW0ldfHxudWxsKSxCLmhhcyhHLEwpKXRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgY29udGFpbnMgZHVwbGljYXRlIGF0dHJpYnV0ZXMuXCIpO2lmKEIuc2V0KEcsTCksRz09PXMubmFtZXNwYWNlLlhNTE5TJiZrPT09cy5uYW1lc3BhY2UuWE1MTlMpdGhyb3cgbmV3IEVycm9yKFwiWE1MTlMgbmFtZXNwYWNlIGlzIHJlc2VydmVkLlwiKTtpZigtMSE9PUwuaW5kZXhPZihcIjpcIil8fCF1LnhtbF9pc05hbWUoTCkpdGhyb3cgbmV3IEVycm9yKFwiQXR0cmlidXRlIGxvY2FsIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzLlwiKTtpZihcInhtbG5zXCI9PT1JJiZcIlwiPT09ayl0aHJvdyBuZXcgRXJyb3IoXCJFbXB0eSBYTUwgbmFtZXNwYWNlIGlzIG5vdCBhbGxvd2VkLlwiKTtudWxsIT09Rz9NLnNldEF0dHJpYnV0ZU5TKEcsRix0aGlzLl9kZWNvZGVBdHRyaWJ1dGVWYWx1ZShrKSk6TS5zZXRBdHRyaWJ1dGUoRix0aGlzLl9kZWNvZGVBdHRyaWJ1dGVWYWx1ZShrKSl9fWNhdGNoKGUpe2M9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e1ImJiFSLmRvbmUmJihoPWoucmV0dXJuKSYmaC5jYWxsKGopfWZpbmFsbHl7aWYoYyl0aHJvdyBjLmVycm9yfX13LnNlbGZDbG9zaW5nfHwoZD1NKTticmVhaztjYXNlIGEuVG9rZW5UeXBlLkNsb3NpbmdUYWc6aWYobS5uYW1lIT09ZC5ub2RlTmFtZSl0aHJvdyBuZXcgRXJyb3IoXCJDbG9zaW5nIHRhZyBuYW1lIGRvZXMgbm90IG1hdGNoIG9wZW5pbmcgdGFnIG5hbWUuXCIpO2QuX3BhcmVudCYmKGQ9ZC5fcGFyZW50KX1tPXAubmV4dFRva2VuKCl9cmV0dXJuIGZ9LGUucHJvdG90eXBlLl9kZWNvZGVUZXh0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP2U6ZS5yZXBsYWNlKC8mbHQ7L2csXCI8XCIpLnJlcGxhY2UoLyZndDsvZyxcIj5cIikucmVwbGFjZSgvJmFtcDsvZyxcIiZcIil9LGUucHJvdG90eXBlLl9kZWNvZGVBdHRyaWJ1dGVWYWx1ZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9lOmUucmVwbGFjZSgvJmx0Oy9nLFwiPFwiKS5yZXBsYWNlKC8mZ3Q7L2csXCI+XCIpLnJlcGxhY2UoLyZhbXA7L2csXCImXCIpfSxlfSgpO3QuWE1MUGFyc2VySW1wbD1jfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyNzUpO3QuWE1MU2VyaWFsaXplcj1uLlhNTFNlcmlhbGl6ZXJJbXBsfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9cigyKSxvPXIoNjkpLGE9cig5NSkscz1yKDkpLHU9cig3KSxsPXIoMCksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLnNlcmlhbGl6ZVRvU3RyaW5nPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl94bWxTZXJpYWxpemF0aW9uKGUsITEpfSxlLnByb3RvdHlwZS5feG1sU2VyaWFsaXphdGlvbj1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PWUuX25vZGVEb2N1bWVudHx8ZS5fbm9kZURvY3VtZW50Ll9oYXNOYW1lc3BhY2VzKXt2YXIgcj1uZXcgYS5OYW1lc3BhY2VQcmVmaXhNYXA7ci5zZXQoXCJ4bWxcIix1Lm5hbWVzcGFjZS5YTUwpO3RyeXtyZXR1cm4gdGhpcy5fc2VyaWFsaXplTm9kZU5TKGUsbnVsbCxyLHt2YWx1ZToxfSx0KX1jYXRjaChlKXt0aHJvdyBuZXcgcy5JbnZhbGlkU3RhdGVFcnJvcn19ZWxzZSB0cnl7cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZU5vZGUoZSx0KX1jYXRjaChlKXt0aHJvdyBuZXcgcy5JbnZhbGlkU3RhdGVFcnJvcn19LGUucHJvdG90eXBlLl9zZXJpYWxpemVOb2RlTlM9ZnVuY3Rpb24oZSx0LHIsbixvKXtzd2l0Y2goZS5ub2RlVHlwZSl7Y2FzZSBpLk5vZGVUeXBlLkVsZW1lbnQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZUVsZW1lbnROUyhlLHQscixuLG8pO2Nhc2UgaS5Ob2RlVHlwZS5Eb2N1bWVudDpyZXR1cm4gdGhpcy5fc2VyaWFsaXplRG9jdW1lbnROUyhlLHQscixuLG8pO2Nhc2UgaS5Ob2RlVHlwZS5Db21tZW50OnJldHVybiB0aGlzLl9zZXJpYWxpemVDb21tZW50KGUsbyk7Y2FzZSBpLk5vZGVUeXBlLlRleHQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZVRleHQoZSxvKTtjYXNlIGkuTm9kZVR5cGUuRG9jdW1lbnRGcmFnbWVudDpyZXR1cm4gdGhpcy5fc2VyaWFsaXplRG9jdW1lbnRGcmFnbWVudE5TKGUsdCxyLG4sbyk7Y2FzZSBpLk5vZGVUeXBlLkRvY3VtZW50VHlwZTpyZXR1cm4gdGhpcy5fc2VyaWFsaXplRG9jdW1lbnRUeXBlKGUsbyk7Y2FzZSBpLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbjpyZXR1cm4gdGhpcy5fc2VyaWFsaXplUHJvY2Vzc2luZ0luc3RydWN0aW9uKGUsbyk7Y2FzZSBpLk5vZGVUeXBlLkNEYXRhOnJldHVybiB0aGlzLl9zZXJpYWxpemVDRGF0YShlLG8pO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBub2RlIHR5cGU6IFwiK2Uubm9kZVR5cGUpfX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZU5vZGU9ZnVuY3Rpb24oZSx0KXtzd2l0Y2goZS5ub2RlVHlwZSl7Y2FzZSBpLk5vZGVUeXBlLkVsZW1lbnQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZUVsZW1lbnQoZSx0KTtjYXNlIGkuTm9kZVR5cGUuRG9jdW1lbnQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZURvY3VtZW50KGUsdCk7Y2FzZSBpLk5vZGVUeXBlLkNvbW1lbnQ6cmV0dXJuIHRoaXMuX3NlcmlhbGl6ZUNvbW1lbnQoZSx0KTtjYXNlIGkuTm9kZVR5cGUuVGV4dDpyZXR1cm4gdGhpcy5fc2VyaWFsaXplVGV4dChlLHQpO2Nhc2UgaS5Ob2RlVHlwZS5Eb2N1bWVudEZyYWdtZW50OnJldHVybiB0aGlzLl9zZXJpYWxpemVEb2N1bWVudEZyYWdtZW50KGUsdCk7Y2FzZSBpLk5vZGVUeXBlLkRvY3VtZW50VHlwZTpyZXR1cm4gdGhpcy5fc2VyaWFsaXplRG9jdW1lbnRUeXBlKGUsdCk7Y2FzZSBpLk5vZGVUeXBlLlByb2Nlc3NpbmdJbnN0cnVjdGlvbjpyZXR1cm4gdGhpcy5fc2VyaWFsaXplUHJvY2Vzc2luZ0luc3RydWN0aW9uKGUsdCk7Y2FzZSBpLk5vZGVUeXBlLkNEYXRhOnJldHVybiB0aGlzLl9zZXJpYWxpemVDRGF0YShlLHQpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBub2RlIHR5cGU6IFwiK2Uubm9kZVR5cGUpfX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZUVsZW1lbnROUz1mdW5jdGlvbih0LHIsaSxvLGEpe3ZhciBzLGM7aWYoYSYmKC0xIT09dC5sb2NhbE5hbWUuaW5kZXhPZihcIjpcIil8fCFsLnhtbF9pc05hbWUodC5sb2NhbE5hbWUpKSl0aHJvdyBuZXcgRXJyb3IoXCJOb2RlIGxvY2FsIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3ZhciBoPVwiPFwiLHA9XCJcIixmPSExLGQ9ITEsbT1pLmNvcHkoKSx5PXt9LHY9dGhpcy5fcmVjb3JkTmFtZXNwYWNlSW5mb3JtYXRpb24odCxtLHkpLF89cixnPXQubmFtZXNwYWNlVVJJO2lmKF89PT1nKW51bGwhPT12JiYoZD0hMCksaCs9cD1nPT09dS5uYW1lc3BhY2UuWE1MP1wieG1sOlwiK3QubG9jYWxOYW1lOnQubG9jYWxOYW1lO2Vsc2V7dmFyIGI9dC5wcmVmaXgseD1udWxsO2lmKG51bGw9PT1iJiZnPT09dnx8KHg9bS5nZXQoYixnKSksXCJ4bWxuc1wiPT09Yil7aWYoYSl0aHJvdyBuZXcgRXJyb3IoXCJBbiBlbGVtZW50IGNhbm5vdCBoYXZlIHRoZSAneG1sbnMnIHByZWZpeCAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt4PWJ9bnVsbCE9PXg/KHA9eCtcIjpcIit0LmxvY2FsTmFtZSxudWxsIT09diYmdiE9PXUubmFtZXNwYWNlLlhNTCYmKF89dnx8bnVsbCksaCs9cCk6bnVsbCE9PWI/KGIgaW4geSYmKGI9dGhpcy5fZ2VuZXJhdGVQcmVmaXgoZyxtLG8pKSxtLnNldChiLGcpLGgrPXArPWIrXCI6XCIrdC5sb2NhbE5hbWUsaCs9XCIgeG1sbnM6XCIrYisnPVwiJyt0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShnLGEpKydcIicsbnVsbCE9PXYmJihfPXZ8fG51bGwpKTpudWxsPT09dnx8bnVsbCE9PXYmJnYhPT1nPyhkPSEwLF89ZyxoKz1wKz10LmxvY2FsTmFtZSxoKz0nIHhtbG5zPVwiJyt0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShnLGEpKydcIicpOihfPWcsaCs9cCs9dC5sb2NhbE5hbWUpfWgrPXRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZXNOUyh0LG0sbyx5LGQsYSk7dmFyIHc9Zz09PXUubmFtZXNwYWNlLkhUTUw7aWYodyYmMD09PXQuY2hpbGROb2Rlcy5sZW5ndGgmJmUuX1ZvaWRFbGVtZW50TmFtZXMuaGFzKHQubG9jYWxOYW1lKT8oaCs9XCIgL1wiLGY9ITApOnd8fDAhPT10LmNoaWxkTm9kZXMubGVuZ3RofHwoaCs9XCIvXCIsZj0hMCksaCs9XCI+XCIsZilyZXR1cm4gaDtpZih3JiZcInRlbXBsYXRlXCI9PT10LmxvY2FsTmFtZSk7ZWxzZSB0cnl7Zm9yKHZhciBFPW4odC5fY2hpbGRyZW58fHQuY2hpbGROb2RlcyksRD1FLm5leHQoKTshRC5kb25lO0Q9RS5uZXh0KCkpe3ZhciBTPUQudmFsdWU7aCs9dGhpcy5fc2VyaWFsaXplTm9kZU5TKFMsXyxtLG8sYSl9fWNhdGNoKGUpe3M9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e0QmJiFELmRvbmUmJihjPUUucmV0dXJuKSYmYy5jYWxsKEUpfWZpbmFsbHl7aWYocyl0aHJvdyBzLmVycm9yfX1yZXR1cm4gaCs9XCI8L1wiK3ArXCI+XCJ9LGUucHJvdG90eXBlLl9zZXJpYWxpemVEb2N1bWVudE5TPWZ1bmN0aW9uKGUsdCxyLGksbyl7dmFyIGEscztpZihvJiZudWxsPT09ZS5kb2N1bWVudEVsZW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBkb2N1bWVudCBlbGVtZW50ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3ZhciB1PVwiXCI7dHJ5e2Zvcih2YXIgbD1uKGUuX2NoaWxkcmVufHxlLmNoaWxkTm9kZXMpLGM9bC5uZXh0KCk7IWMuZG9uZTtjPWwubmV4dCgpKXt2YXIgaD1jLnZhbHVlO3UrPXRoaXMuX3NlcmlhbGl6ZU5vZGVOUyhoLHQscixpLG8pfX1jYXRjaChlKXthPXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYocz1sLnJldHVybikmJnMuY2FsbChsKX1maW5hbGx5e2lmKGEpdGhyb3cgYS5lcnJvcn19cmV0dXJuIHV9LGUucHJvdG90eXBlLl9zZXJpYWxpemVDb21tZW50PWZ1bmN0aW9uKGUsdCl7aWYodCYmKCFsLnhtbF9pc0xlZ2FsQ2hhcihlLmRhdGEpfHwtMSE9PWUuZGF0YS5pbmRleE9mKFwiLS1cIil8fGUuZGF0YS5lbmRzV2l0aChcIi1cIikpKXRocm93IG5ldyBFcnJvcihcIkNvbW1lbnQgZGF0YSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7cmV0dXJuXCJcXHgzYyEtLVwiK2UuZGF0YStcIi0tXFx4M2VcIn0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZVRleHQ9ZnVuY3Rpb24oZSx0KXtpZih0JiYhbC54bWxfaXNMZWdhbENoYXIoZS5kYXRhKSl0aHJvdyBuZXcgRXJyb3IoXCJUZXh0IGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2Zvcih2YXIgcj1cIlwiLG49MDtuPGUuZGF0YS5sZW5ndGg7bisrKXt2YXIgaT1lLmRhdGFbbl07cis9XCImXCI9PT1pP1wiJmFtcDtcIjpcIjxcIj09PWk/XCImbHQ7XCI6XCI+XCI9PT1pP1wiJmd0O1wiOml9cmV0dXJuIHJ9LGUucHJvdG90eXBlLl9zZXJpYWxpemVEb2N1bWVudEZyYWdtZW50TlM9ZnVuY3Rpb24oZSx0LHIsaSxvKXt2YXIgYSxzLHU9XCJcIjt0cnl7Zm9yKHZhciBsPW4oZS5fY2hpbGRyZW58fGUuY2hpbGROb2RlcyksYz1sLm5leHQoKTshYy5kb25lO2M9bC5uZXh0KCkpe3ZhciBoPWMudmFsdWU7dSs9dGhpcy5fc2VyaWFsaXplTm9kZU5TKGgsdCxyLGksbyl9fWNhdGNoKGUpe2E9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2MmJiFjLmRvbmUmJihzPWwucmV0dXJuKSYmcy5jYWxsKGwpfWZpbmFsbHl7aWYoYSl0aHJvdyBhLmVycm9yfX1yZXR1cm4gdX0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZURvY3VtZW50VHlwZT1mdW5jdGlvbihlLHQpe2lmKHQmJiFsLnhtbF9pc1B1YmlkQ2hhcihlLnB1YmxpY0lkKSl0aHJvdyBuZXcgRXJyb3IoXCJEb2NUeXBlIHB1YmxpYyBpZGVudGlmaWVyIGRvZXMgbm90IG1hdGNoIFB1YmlkQ2hhciBjb25zdHJ1Y3QgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7aWYodCYmKCFsLnhtbF9pc0xlZ2FsQ2hhcihlLnN5c3RlbUlkKXx8LTEhPT1lLnN5c3RlbUlkLmluZGV4T2YoJ1wiJykmJi0xIT09ZS5zeXN0ZW1JZC5pbmRleE9mKFwiJ1wiKSkpdGhyb3cgbmV3IEVycm9yKFwiRG9jVHlwZSBzeXN0ZW0gaWRlbnRpZmllciBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7cmV0dXJuIGUucHVibGljSWQmJmUuc3lzdGVtSWQ/XCI8IURPQ1RZUEUgXCIrZS5uYW1lKycgUFVCTElDIFwiJytlLnB1YmxpY0lkKydcIiBcIicrZS5zeXN0ZW1JZCsnXCI+JzplLnB1YmxpY0lkP1wiPCFET0NUWVBFIFwiK2UubmFtZSsnIFBVQkxJQyBcIicrZS5wdWJsaWNJZCsnXCI+JzplLnN5c3RlbUlkP1wiPCFET0NUWVBFIFwiK2UubmFtZSsnIFNZU1RFTSBcIicrZS5zeXN0ZW1JZCsnXCI+JzpcIjwhRE9DVFlQRSBcIitlLm5hbWUrXCI+XCJ9LGUucHJvdG90eXBlLl9zZXJpYWxpemVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb249ZnVuY3Rpb24oZSx0KXtpZih0JiYoLTEhPT1lLnRhcmdldC5pbmRleE9mKFwiOlwiKXx8L154bWwkL2kudGVzdChlLnRhcmdldCkpKXRocm93IG5ldyBFcnJvcihcIlByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gdGFyZ2V0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtpZih0JiYoIWwueG1sX2lzTGVnYWxDaGFyKGUuZGF0YSl8fC0xIT09ZS5kYXRhLmluZGV4T2YoXCI/PlwiKSkpdGhyb3cgbmV3IEVycm9yKFwiUHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtyZXR1cm5cIjw/XCIrKFwiXCI9PT1lLmRhdGE/ZS50YXJnZXQ6ZS50YXJnZXQrXCIgXCIrZS5kYXRhKStcIj8+XCJ9LGUucHJvdG90eXBlLl9zZXJpYWxpemVDRGF0YT1mdW5jdGlvbihlLHQpe2lmKHQmJi0xIT09ZS5kYXRhLmluZGV4T2YoXCJdXT5cIikpdGhyb3cgbmV3IEVycm9yKFwiQ0RBVEEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3JldHVyblwiPCFbQ0RBVEFbXCIrZS5kYXRhK1wiXV0+XCJ9LGUucHJvdG90eXBlLl9zZXJpYWxpemVBdHRyaWJ1dGVzTlM9ZnVuY3Rpb24oZSx0LHIsaSxhLHMpe3ZhciBjLGgscD1cIlwiLGY9cz9uZXcgby5Mb2NhbE5hbWVTZXQ6dm9pZCAwO3RyeXtmb3IodmFyIGQ9bihlLmF0dHJpYnV0ZXMpLG09ZC5uZXh0KCk7IW0uZG9uZTttPWQubmV4dCgpKXt2YXIgeT1tLnZhbHVlO2lmKGF8fHN8fG51bGwhPT15Lm5hbWVzcGFjZVVSSSl7aWYocyYmZiYmZi5oYXMoeS5uYW1lc3BhY2VVUkkseS5sb2NhbE5hbWUpKXRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgY29udGFpbnMgZHVwbGljYXRlIGF0dHJpYnV0ZXMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7cyYmZiYmZi5zZXQoeS5uYW1lc3BhY2VVUkkseS5sb2NhbE5hbWUpO3ZhciB2PXkubmFtZXNwYWNlVVJJLF89bnVsbDtpZihudWxsIT09dilpZihfPXQuZ2V0KHkucHJlZml4LHYpLHY9PT11Lm5hbWVzcGFjZS5YTUxOUyl7aWYoeS52YWx1ZT09PXUubmFtZXNwYWNlLlhNTHx8bnVsbD09PXkucHJlZml4JiZhfHxudWxsIT09eS5wcmVmaXgmJighKHkubG9jYWxOYW1lIGluIGkpfHxpW3kubG9jYWxOYW1lXSE9PXkudmFsdWUpJiZ0Lmhhcyh5LmxvY2FsTmFtZSx5LnZhbHVlKSljb250aW51ZTtpZihzJiZ5LnZhbHVlPT09dS5uYW1lc3BhY2UuWE1MTlMpdGhyb3cgbmV3IEVycm9yKFwiWE1MTlMgbmFtZXNwYWNlIGlzIHJlc2VydmVkICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO2lmKHMmJlwiXCI9PT15LnZhbHVlKXRocm93IG5ldyBFcnJvcihcIk5hbWVzcGFjZSBwcmVmaXggZGVjbGFyYXRpb25zIGNhbm5vdCBiZSB1c2VkIHRvIHVuZGVjbGFyZSBhIG5hbWVzcGFjZSAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtcInhtbG5zXCI9PT15LnByZWZpeCYmKF89XCJ4bWxuc1wiKX1lbHNlIG51bGw9PT1fJiYocCs9XCIgeG1sbnM6XCIrKF89bnVsbD09PXkucHJlZml4fHx0Lmhhc1ByZWZpeCh5LnByZWZpeCkmJiF0Lmhhcyh5LnByZWZpeCx2KT90aGlzLl9nZW5lcmF0ZVByZWZpeCh2LHQscik6eS5wcmVmaXgpKyc9XCInK3RoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKHYscykrJ1wiJyk7aWYocCs9XCIgXCIsbnVsbCE9PV8mJihwKz1fK1wiOlwiKSxzJiYoLTEhPT15LmxvY2FsTmFtZS5pbmRleE9mKFwiOlwiKXx8IWwueG1sX2lzTmFtZSh5LmxvY2FsTmFtZSl8fFwieG1sbnNcIj09PXkubG9jYWxOYW1lJiZudWxsPT09dikpdGhyb3cgbmV3IEVycm9yKFwiQXR0cmlidXRlIGxvY2FsIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpO3ArPXkubG9jYWxOYW1lKyc9XCInK3RoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKHkudmFsdWUscykrJ1wiJ31lbHNlIHArPVwiIFwiK3kubG9jYWxOYW1lKyc9XCInK3RoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZVZhbHVlKHkudmFsdWUscykrJ1wiJ319Y2F0Y2goZSl7Yz17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bSYmIW0uZG9uZSYmKGg9ZC5yZXR1cm4pJiZoLmNhbGwoZCl9ZmluYWxseXtpZihjKXRocm93IGMuZXJyb3J9fXJldHVybiBwfSxlLnByb3RvdHlwZS5fcmVjb3JkTmFtZXNwYWNlSW5mb3JtYXRpb249ZnVuY3Rpb24oZSx0LHIpe3ZhciBpLG8sYT1udWxsO3RyeXtmb3IodmFyIHM9bihlLmF0dHJpYnV0ZXMpLGw9cy5uZXh0KCk7IWwuZG9uZTtsPXMubmV4dCgpKXt2YXIgYz1sLnZhbHVlLGg9Yy5uYW1lc3BhY2VVUkkscD1jLnByZWZpeDtpZihoPT09dS5uYW1lc3BhY2UuWE1MTlMpe2lmKG51bGw9PT1wKXthPWMudmFsdWU7Y29udGludWV9dmFyIGY9Yy5sb2NhbE5hbWUsZD1jLnZhbHVlO2lmKGQ9PT11Lm5hbWVzcGFjZS5YTUwpY29udGludWU7aWYoXCJcIj09PWQmJihkPW51bGwpLHQuaGFzKGYsZCkpY29udGludWU7dC5zZXQoZixkKSxyW2ZdPWR8fFwiXCJ9fX1jYXRjaChlKXtpPXtlcnJvcjplfX1maW5hbGx5e3RyeXtsJiYhbC5kb25lJiYobz1zLnJldHVybikmJm8uY2FsbChzKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIGF9LGUucHJvdG90eXBlLl9nZW5lcmF0ZVByZWZpeD1mdW5jdGlvbihlLHQscil7dmFyIG49XCJuc1wiK3IudmFsdWU7cmV0dXJuIHIudmFsdWUrKyx0LnNldChuLGUpLG59LGUucHJvdG90eXBlLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZT1mdW5jdGlvbihlLHQpe2lmKHQmJm51bGwhPT1lJiYhbC54bWxfaXNMZWdhbENoYXIoZSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjaGFyYWN0ZXJzIGluIGF0dHJpYnV0ZSB2YWx1ZS5cIik7aWYobnVsbD09PWUpcmV0dXJuXCJcIjtmb3IodmFyIHI9XCJcIixuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07cis9J1wiJz09PWk/XCImcXVvdDtcIjpcIiZcIj09PWk/XCImYW1wO1wiOlwiPFwiPT09aT9cIiZsdDtcIjpcIj5cIj09PWk/XCImZ3Q7XCI6aX1yZXR1cm4gcn0sZS5wcm90b3R5cGUuX3NlcmlhbGl6ZUVsZW1lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixpO2lmKHQmJigtMSE9PWUubG9jYWxOYW1lLmluZGV4T2YoXCI6XCIpfHwhbC54bWxfaXNOYW1lKGUubG9jYWxOYW1lKSkpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTt2YXIgbz0hMSxhPWUubG9jYWxOYW1lLHM9XCI8XCIrYTtpZihzKz10aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVzKGUsdCksMD09PWUuX2NoaWxkcmVuLnNpemUmJihzKz1cIi9cIixvPSEwKSxzKz1cIj5cIixvKXJldHVybiBzO3RyeXtmb3IodmFyIHU9bihlLl9jaGlsZHJlbiksYz11Lm5leHQoKTshYy5kb25lO2M9dS5uZXh0KCkpe3ZhciBoPWMudmFsdWU7cys9dGhpcy5fc2VyaWFsaXplTm9kZShoLHQpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYoaT11LnJldHVybikmJmkuY2FsbCh1KX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIHMrPVwiPC9cIithK1wiPlwifSxlLnByb3RvdHlwZS5fc2VyaWFsaXplRG9jdW1lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcixpO2lmKHQmJm51bGw9PT1lLmRvY3VtZW50RWxlbWVudCl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGRvY3VtZW50IGVsZW1lbnQgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7dmFyIG89XCJcIjt0cnl7Zm9yKHZhciBhPW4oZS5fY2hpbGRyZW4pLHM9YS5uZXh0KCk7IXMuZG9uZTtzPWEubmV4dCgpKXt2YXIgdT1zLnZhbHVlO28rPXRoaXMuX3NlcmlhbGl6ZU5vZGUodSx0KX19Y2F0Y2goZSl7cj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKGk9YS5yZXR1cm4pJiZpLmNhbGwoYSl9ZmluYWxseXtpZihyKXRocm93IHIuZXJyb3J9fXJldHVybiBvfSxlLnByb3RvdHlwZS5fc2VyaWFsaXplRG9jdW1lbnRGcmFnbWVudD1mdW5jdGlvbihlLHQpe3ZhciByLGksbz1cIlwiO3RyeXtmb3IodmFyIGE9bihlLl9jaGlsZHJlbikscz1hLm5leHQoKTshcy5kb25lO3M9YS5uZXh0KCkpe3ZhciB1PXMudmFsdWU7bys9dGhpcy5fc2VyaWFsaXplTm9kZSh1LHQpfX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYoaT1hLnJldHVybikmJmkuY2FsbChhKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19cmV0dXJuIG99LGUucHJvdG90eXBlLl9zZXJpYWxpemVBdHRyaWJ1dGVzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaSxvPVwiXCIsYT10P3t9OnZvaWQgMDt0cnl7Zm9yKHZhciBzPW4oZS5hdHRyaWJ1dGVzKSx1PXMubmV4dCgpOyF1LmRvbmU7dT1zLm5leHQoKSl7dmFyIGM9dS52YWx1ZTtpZih0JiZhJiZjLmxvY2FsTmFtZSBpbiBhKXRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgY29udGFpbnMgZHVwbGljYXRlIGF0dHJpYnV0ZXMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIik7aWYodCYmYSYmKGFbYy5sb2NhbE5hbWVdPSEwKSx0JiYoLTEhPT1jLmxvY2FsTmFtZS5pbmRleE9mKFwiOlwiKXx8IWwueG1sX2lzTmFtZShjLmxvY2FsTmFtZSkpKXRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSBsb2NhbCBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKTtvKz1cIiBcIitjLmxvY2FsTmFtZSsnPVwiJyt0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShjLnZhbHVlLHQpKydcIid9fWNhdGNoKGUpe3I9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihpPXMucmV0dXJuKSYmaS5jYWxsKHMpfWZpbmFsbHl7aWYocil0aHJvdyByLmVycm9yfX1yZXR1cm4gb30sZS5fVm9pZEVsZW1lbnROYW1lcz1uZXcgU2V0KFtcImFyZWFcIixcImJhc2VcIixcImJhc2Vmb250XCIsXCJiZ3NvdW5kXCIsXCJiclwiLFwiY29sXCIsXCJlbWJlZFwiLFwiZnJhbWVcIixcImhyXCIsXCJpbWdcIixcImlucHV0XCIsXCJrZXlnZW5cIixcImxpbmtcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJwYXJhbVwiLFwic291cmNlXCIsXCJ0cmFja1wiLFwid2JyXCJdKSxlfSgpO3QuWE1MU2VyaWFsaXplckltcGw9Y30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMjc3KTt0LlhNTFJlYWRlcj1uLlhNTFJlYWRlcjt2YXIgaT1yKDExMik7dC5PYmplY3RSZWFkZXI9aS5PYmplY3RSZWFkZXI7dmFyIG89cigyODApO3QuSlNPTlJlYWRlcj1vLkpTT05SZWFkZXI7dmFyIGE9cigyODEpO3QuWUFNTFJlYWRlcj1hLllBTUxSZWFkZXJ9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDMxKSxyKDMyKSxyKDMzKSxyKDE5KSxyKDY1KSxyKDIwKSxyKDIyKSxyKDIzKTt2YXIgbixpPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9KSxvPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfSxhPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPXIoMTgwKSx1PXIoMTExKSxsPXIoNyksYz1yKDApLGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBudWxsIT09ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5fcGFyc2U9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbixpLGgscD1uZXcgcy5YTUxTdHJpbmdMZXhlcih0LHtza2lwV2hpdGVzcGFjZU9ubHlUZXh0OiEwfSksZj1lLGQ9ZSxtPXAubmV4dFRva2VuKCk7bS50eXBlIT09dS5Ub2tlblR5cGUuRU9GOyl7c3dpdGNoKG0udHlwZSl7Y2FzZSB1LlRva2VuVHlwZS5EZWNsYXJhdGlvbjp2YXIgeT1tLHY9dGhpcy5zYW5pdGl6ZSh5LnZlcnNpb24pO2lmKFwiMS4wXCIhPT12KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgeG1sIHZlcnNpb246IFwiK3YpO3ZhciBfPXt2ZXJzaW9uOnZ9O3kuZW5jb2RpbmcmJihfLmVuY29kaW5nPXRoaXMuc2FuaXRpemUoeS5lbmNvZGluZykpLHkuc3RhbmRhbG9uZSYmKF8uc3RhbmRhbG9uZT1cInllc1wiPT09dGhpcy5zYW5pdGl6ZSh5LnN0YW5kYWxvbmUpKSxkLnNldChfKTticmVhaztjYXNlIHUuVG9rZW5UeXBlLkRvY1R5cGU6dmFyIGc9bTtkPXRoaXMuZG9jVHlwZShkLHRoaXMuc2FuaXRpemUoZy5uYW1lKSx0aGlzLnNhbml0aXplKGcucHViSWQpLHRoaXMuc2FuaXRpemUoZy5zeXNJZCkpfHxkO2JyZWFrO2Nhc2UgdS5Ub2tlblR5cGUuQ0RBVEE6dmFyIGI9bTtkPXRoaXMuY2RhdGEoZCx0aGlzLnNhbml0aXplKGIuZGF0YSkpfHxkO2JyZWFrO2Nhc2UgdS5Ub2tlblR5cGUuQ29tbWVudDp2YXIgeD1tO2Q9dGhpcy5jb21tZW50KGQsdGhpcy5zYW5pdGl6ZSh4LmRhdGEpKXx8ZDticmVhaztjYXNlIHUuVG9rZW5UeXBlLlBJOnZhciB3PW07ZD10aGlzLmluc3RydWN0aW9uKGQsdGhpcy5zYW5pdGl6ZSh3LnRhcmdldCksdGhpcy5zYW5pdGl6ZSh3LmRhdGEpKXx8ZDticmVhaztjYXNlIHUuVG9rZW5UeXBlLlRleHQ6dmFyIEU9bTtkPXRoaXMudGV4dChkLHRoaXMuX2RlY29kZVRleHQodGhpcy5zYW5pdGl6ZShFLmRhdGEpKSl8fGQ7YnJlYWs7Y2FzZSB1LlRva2VuVHlwZS5FbGVtZW50OnZhciBEPW0sUz10aGlzLnNhbml0aXplKEQubmFtZSksQz1vKGMubmFtZXNwYWNlX2V4dHJhY3RRTmFtZShTKSwxKVswXSxBPWQubm9kZS5sb29rdXBOYW1lc3BhY2VVUkkoQyksTj17fTt0cnl7Zm9yKHZhciBUPShyPXZvaWQgMCxhKEQuYXR0cmlidXRlcykpLE89VC5uZXh0KCk7IU8uZG9uZTtPPVQubmV4dCgpKXt2YXIgRj1vKE8udmFsdWUsMiksaz1GWzBdLFA9RlsxXTtpZihrPXRoaXMuc2FuaXRpemUoayksUD10aGlzLnNhbml0aXplKFApLFwieG1sbnNcIj09PWspQT1QO2Vsc2V7dmFyIEk9byhjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUoayksMiksTD1JWzBdLE09SVsxXTtcInhtbG5zXCI9PT1MJiYoTT09PUMmJihBPVApLE5bTV09UCl9fX1jYXRjaChlKXtyPXtlcnJvcjplfX1maW5hbGx5e3RyeXtPJiYhTy5kb25lJiYobj1ULnJldHVybikmJm4uY2FsbChUKX1maW5hbGx5e2lmKHIpdGhyb3cgci5lcnJvcn19dmFyIEI9bnVsbCE9PUE/dGhpcy5lbGVtZW50KGQsQSxTKTp0aGlzLmVsZW1lbnQoZCx2b2lkIDAsUyk7aWYodm9pZCAwPT09QilicmVhaztkLm5vZGU9PT1lLm5vZGUmJihmPUIpO3RyeXtmb3IodmFyIGo9KGk9dm9pZCAwLGEoRC5hdHRyaWJ1dGVzKSksUj1qLm5leHQoKTshUi5kb25lO1I9ai5uZXh0KCkpe3ZhciB6PW8oUi52YWx1ZSwyKTtrPXpbMF0sUD16WzFdO2s9dGhpcy5zYW5pdGl6ZShrKSxQPXRoaXMuc2FuaXRpemUoUCk7dmFyIFU9byhjLm5hbWVzcGFjZV9leHRyYWN0UU5hbWUoayksMiksRz0oTD1VWzBdLE09VVsxXSxudWxsKTtcInhtbG5zXCI9PT1MfHxudWxsPT09TCYmXCJ4bWxuc1wiPT09TT9HPWwubmFtZXNwYWNlLlhNTE5TOm51bGwhPT0oRz1CLm5vZGUubG9va3VwTmFtZXNwYWNlVVJJKEwpKSYmQi5ub2RlLmlzRGVmYXVsdE5hbWVzcGFjZShHKT9HPW51bGw6bnVsbD09PUcmJm51bGwhPT1MJiYoRz1OW0xdfHxudWxsKSxudWxsIT09Rz90aGlzLmF0dHJpYnV0ZShCLEcsayx0aGlzLl9kZWNvZGVBdHRyaWJ1dGVWYWx1ZShQKSk6dGhpcy5hdHRyaWJ1dGUoQix2b2lkIDAsayx0aGlzLl9kZWNvZGVBdHRyaWJ1dGVWYWx1ZShQKSl9fWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e1ImJiFSLmRvbmUmJihoPWoucmV0dXJuKSYmaC5jYWxsKGopfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1ELnNlbGZDbG9zaW5nfHwoZD1CKTticmVhaztjYXNlIHUuVG9rZW5UeXBlLkNsb3NpbmdUYWc6ZC5ub2RlLnBhcmVudE5vZGUmJihkPWQudXAoKSl9bT1wLm5leHRUb2tlbigpfXJldHVybiBmfSx0fShyKDc1KS5CYXNlUmVhZGVyKTt0LlhNTFJlYWRlcj1ofSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0KSxpPXIoMjc5KTtuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDpPYmplY3QuYXNzaWduIT09aX0se2Fzc2lnbjppfSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDE2KSxpPXIoOCksbz1yKDYxKSxhPXIoODUpLHM9cig3OSksdT1yKDI3KSxsPXIoNDEpLGM9T2JqZWN0LmFzc2lnbixoPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTtlLmV4cG9ydHM9IWN8fGkoKGZ1bmN0aW9uKCl7aWYobiYmMSE9PWMoe2I6MX0sYyhoKHt9LFwiYVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe2godGhpcyxcImJcIix7dmFsdWU6MyxlbnVtZXJhYmxlOiExfSl9fSkse2I6Mn0pKS5iKXJldHVybiEwO3ZhciBlPXt9LHQ9e30scj1TeW1ib2woKTtyZXR1cm4gZVtyXT03LFwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIi5zcGxpdChcIlwiKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0W2VdPWV9KSksNyE9Yyh7fSxlKVtyXXx8XCJhYmNkZWZnaGlqa2xtbm9wcXJzdFwiIT1vKGMoe30sdCkpLmpvaW4oXCJcIil9KSk/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dShlKSxpPWFyZ3VtZW50cy5sZW5ndGgsYz0xLGg9YS5mLHA9cy5mO2k+YzspZm9yKHZhciBmLGQ9bChhcmd1bWVudHNbYysrXSksbT1oP28oZCkuY29uY2F0KGgoZCkpOm8oZCkseT1tLmxlbmd0aCx2PTA7eT52OylmPW1bdisrXSxuJiYhcC5jYWxsKGQsZil8fChyW2ZdPWRbZl0pO3JldHVybiByfTpjfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cigxMTIpLGE9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBudWxsIT09ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5fcGFyc2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IG8uT2JqZWN0UmVhZGVyKHRoaXMuX2J1aWxkZXJPcHRpb25zKS5wYXJzZShlLEpTT04ucGFyc2UodCkpfSx0fShyKDc1KS5CYXNlUmVhZGVyKTt0LkpTT05SZWFkZXI9YX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoMTEyKSxhPXIoNzUpLHM9cigyODIpLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3JldHVybiBudWxsIT09ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5fcGFyc2U9ZnVuY3Rpb24oZSx0KXt2YXIgcj1zLnNhZmVMb2FkKHQpO2lmKHZvaWQgMD09PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHBhcnNlIFlBTUwgZG9jdW1lbnQuXCIpO3JldHVybiBuZXcgby5PYmplY3RSZWFkZXIodGhpcy5fYnVpbGRlck9wdGlvbnMpLnBhcnNlKGUscil9LHR9KGEuQmFzZVJlYWRlcik7dC5ZQU1MUmVhZGVyPXV9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDI4Myk7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDI4NCksaT1yKDMwMyk7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJGdW5jdGlvbiBcIitlK1wiIGlzIGRlcHJlY2F0ZWQgYW5kIGNhbm5vdCBiZSB1c2VkLlwiKX19ZS5leHBvcnRzLlR5cGU9cigxMCksZS5leHBvcnRzLlNjaGVtYT1yKDM5KSxlLmV4cG9ydHMuRkFJTFNBRkVfU0NIRU1BPXIoMTEzKSxlLmV4cG9ydHMuSlNPTl9TQ0hFTUE9cigxODIpLGUuZXhwb3J0cy5DT1JFX1NDSEVNQT1yKDE4MSksZS5leHBvcnRzLkRFRkFVTFRfU0FGRV9TQ0hFTUE9cig1NCksZS5leHBvcnRzLkRFRkFVTFRfRlVMTF9TQ0hFTUE9cig3NiksZS5leHBvcnRzLmxvYWQ9bi5sb2FkLGUuZXhwb3J0cy5sb2FkQWxsPW4ubG9hZEFsbCxlLmV4cG9ydHMuc2FmZUxvYWQ9bi5zYWZlTG9hZCxlLmV4cG9ydHMuc2FmZUxvYWRBbGw9bi5zYWZlTG9hZEFsbCxlLmV4cG9ydHMuZHVtcD1pLmR1bXAsZS5leHBvcnRzLnNhZmVEdW1wPWkuc2FmZUR1bXAsZS5leHBvcnRzLllBTUxFeGNlcHRpb249cig1MyksZS5leHBvcnRzLk1JTklNQUxfU0NIRU1BPXIoMTEzKSxlLmV4cG9ydHMuU0FGRV9TQ0hFTUE9cig1NCksZS5leHBvcnRzLkRFRkFVTFRfU0NIRU1BPXIoNzYpLGUuZXhwb3J0cy5zY2FuPW8oXCJzY2FuXCIpLGUuZXhwb3J0cy5wYXJzZT1vKFwicGFyc2VcIiksZS5leHBvcnRzLmNvbXBvc2U9byhcImNvbXBvc2VcIiksZS5leHBvcnRzLmFkZENvbnN0cnVjdG9yPW8oXCJhZGRDb25zdHJ1Y3RvclwiKX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMzgpLGk9cig1Myksbz1yKDI4NSksYT1yKDU0KSxzPXIoNzYpLHU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxsPS9bXFx4MDAtXFx4MDhcXHgwQlxceDBDXFx4MEUtXFx4MUZcXHg3Ri1cXHg4NFxceDg2LVxceDlGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdLyxjPS9bXFx4ODVcXHUyMDI4XFx1MjAyOV0vLGg9L1ssXFxbXFxdXFx7XFx9XS8scD0vXig/OiF8ISF8IVthLXpcXC1dKyEpJC9pLGY9L14oPzohfFteLFxcW1xcXVxce1xcfV0pKD86JVswLTlhLWZdezJ9fFswLTlhLXpcXC0jO1xcL1xcPzpAJj1cXCtcXCQsX1xcLiF+XFwqJ1xcKFxcKVxcW1xcXV0pKiQvaTtmdW5jdGlvbiBkKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gbShlKXtyZXR1cm4gMTA9PT1lfHwxMz09PWV9ZnVuY3Rpb24geShlKXtyZXR1cm4gOT09PWV8fDMyPT09ZX1mdW5jdGlvbiB2KGUpe3JldHVybiA5PT09ZXx8MzI9PT1lfHwxMD09PWV8fDEzPT09ZX1mdW5jdGlvbiBfKGUpe3JldHVybiA0ND09PWV8fDkxPT09ZXx8OTM9PT1lfHwxMjM9PT1lfHwxMjU9PT1lfWZ1bmN0aW9uIGcoZSl7dmFyIHQ7cmV0dXJuIDQ4PD1lJiZlPD01Nz9lLTQ4Ojk3PD0odD0zMnxlKSYmdDw9MTAyP3QtOTcrMTA6LTF9ZnVuY3Rpb24gYihlKXtyZXR1cm4gNDg9PT1lP1wiXFwwXCI6OTc9PT1lP1wiXHUwMDA3XCI6OTg9PT1lP1wiXFxiXCI6MTE2PT09ZXx8OT09PWU/XCJcXHRcIjoxMTA9PT1lP1wiXFxuXCI6MTE4PT09ZT9cIlxcdlwiOjEwMj09PWU/XCJcXGZcIjoxMTQ9PT1lP1wiXFxyXCI6MTAxPT09ZT9cIlx1MDAxQlwiOjMyPT09ZT9cIiBcIjozND09PWU/J1wiJzo0Nz09PWU/XCIvXCI6OTI9PT1lP1wiXFxcXFwiOjc4PT09ZT9cIlx1MDA4NVwiOjk1PT09ZT9cIlx1MDBBMFwiOjc2PT09ZT9cIlxcdTIwMjhcIjo4MD09PWU/XCJcXHUyMDI5XCI6XCJcIn1mdW5jdGlvbiB4KGUpe3JldHVybiBlPD02NTUzNT9TdHJpbmcuZnJvbUNoYXJDb2RlKGUpOlN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYrKGUtNjU1MzY+PjEwKSw1NjMyMCsoZS02NTUzNiYxMDIzKSl9Zm9yKHZhciB3PW5ldyBBcnJheSgyNTYpLEU9bmV3IEFycmF5KDI1NiksRD0wO0Q8MjU2O0QrKyl3W0RdPWIoRCk/MTowLEVbRF09YihEKTtmdW5jdGlvbiBTKGUsdCl7dGhpcy5pbnB1dD1lLHRoaXMuZmlsZW5hbWU9dC5maWxlbmFtZXx8bnVsbCx0aGlzLnNjaGVtYT10LnNjaGVtYXx8cyx0aGlzLm9uV2FybmluZz10Lm9uV2FybmluZ3x8bnVsbCx0aGlzLmxlZ2FjeT10LmxlZ2FjeXx8ITEsdGhpcy5qc29uPXQuanNvbnx8ITEsdGhpcy5saXN0ZW5lcj10Lmxpc3RlbmVyfHxudWxsLHRoaXMuaW1wbGljaXRUeXBlcz10aGlzLnNjaGVtYS5jb21waWxlZEltcGxpY2l0LHRoaXMudHlwZU1hcD10aGlzLnNjaGVtYS5jb21waWxlZFR5cGVNYXAsdGhpcy5sZW5ndGg9ZS5sZW5ndGgsdGhpcy5wb3NpdGlvbj0wLHRoaXMubGluZT0wLHRoaXMubGluZVN0YXJ0PTAsdGhpcy5saW5lSW5kZW50PTAsdGhpcy5kb2N1bWVudHM9W119ZnVuY3Rpb24gQyhlLHQpe3JldHVybiBuZXcgaSh0LG5ldyBvKGUuZmlsZW5hbWUsZS5pbnB1dCxlLnBvc2l0aW9uLGUubGluZSxlLnBvc2l0aW9uLWUubGluZVN0YXJ0KSl9ZnVuY3Rpb24gQShlLHQpe3Rocm93IEMoZSx0KX1mdW5jdGlvbiBOKGUsdCl7ZS5vbldhcm5pbmcmJmUub25XYXJuaW5nLmNhbGwobnVsbCxDKGUsdCkpfXZhciBUPXtZQU1MOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG87bnVsbCE9PWUudmVyc2lvbiYmQShlLFwiZHVwbGljYXRpb24gb2YgJVlBTUwgZGlyZWN0aXZlXCIpLDEhPT1yLmxlbmd0aCYmQShlLFwiWUFNTCBkaXJlY3RpdmUgYWNjZXB0cyBleGFjdGx5IG9uZSBhcmd1bWVudFwiKSxudWxsPT09KG49L14oWzAtOV0rKVxcLihbMC05XSspJC8uZXhlYyhyWzBdKSkmJkEoZSxcImlsbC1mb3JtZWQgYXJndW1lbnQgb2YgdGhlIFlBTUwgZGlyZWN0aXZlXCIpLGk9cGFyc2VJbnQoblsxXSwxMCksbz1wYXJzZUludChuWzJdLDEwKSwxIT09aSYmQShlLFwidW5hY2NlcHRhYmxlIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnRcIiksZS52ZXJzaW9uPXJbMF0sZS5jaGVja0xpbmVCcmVha3M9bzwyLDEhPT1vJiYyIT09byYmTihlLFwidW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudFwiKX0sVEFHOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpOzIhPT1yLmxlbmd0aCYmQShlLFwiVEFHIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgdHdvIGFyZ3VtZW50c1wiKSxuPXJbMF0saT1yWzFdLHAudGVzdChuKXx8QShlLFwiaWxsLWZvcm1lZCB0YWcgaGFuZGxlIChmaXJzdCBhcmd1bWVudCkgb2YgdGhlIFRBRyBkaXJlY3RpdmVcIiksdS5jYWxsKGUudGFnTWFwLG4pJiZBKGUsJ3RoZXJlIGlzIGEgcHJldmlvdXNseSBkZWNsYXJlZCBzdWZmaXggZm9yIFwiJytuKydcIiB0YWcgaGFuZGxlJyksZi50ZXN0KGkpfHxBKGUsXCJpbGwtZm9ybWVkIHRhZyBwcmVmaXggKHNlY29uZCBhcmd1bWVudCkgb2YgdGhlIFRBRyBkaXJlY3RpdmVcIiksZS50YWdNYXBbbl09aX19O2Z1bmN0aW9uIE8oZSx0LHIsbil7dmFyIGksbyxhLHM7aWYodDxyKXtpZihzPWUuaW5wdXQuc2xpY2UodCxyKSxuKWZvcihpPTAsbz1zLmxlbmd0aDtpPG87aSs9MSk5PT09KGE9cy5jaGFyQ29kZUF0KGkpKXx8MzI8PWEmJmE8PTExMTQxMTF8fEEoZSxcImV4cGVjdGVkIHZhbGlkIEpTT04gY2hhcmFjdGVyXCIpO2Vsc2UgbC50ZXN0KHMpJiZBKGUsXCJ0aGUgc3RyZWFtIGNvbnRhaW5zIG5vbi1wcmludGFibGUgY2hhcmFjdGVyc1wiKTtlLnJlc3VsdCs9c319ZnVuY3Rpb24gRihlLHQscixpKXt2YXIgbyxhLHMsbDtmb3Iobi5pc09iamVjdChyKXx8QShlLFwiY2Fubm90IG1lcmdlIG1hcHBpbmdzOyB0aGUgcHJvdmlkZWQgc291cmNlIG9iamVjdCBpcyB1bmFjY2VwdGFibGVcIikscz0wLGw9KG89T2JqZWN0LmtleXMocikpLmxlbmd0aDtzPGw7cys9MSlhPW9bc10sdS5jYWxsKHQsYSl8fCh0W2FdPXJbYV0saVthXT0hMCl9ZnVuY3Rpb24gayhlLHQscixuLGksbyxhLHMpe3ZhciBsLGM7aWYoQXJyYXkuaXNBcnJheShpKSlmb3IobD0wLGM9KGk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaSkpLmxlbmd0aDtsPGM7bCs9MSlBcnJheS5pc0FycmF5KGlbbF0pJiZBKGUsXCJuZXN0ZWQgYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkIGluc2lkZSBrZXlzXCIpLFwib2JqZWN0XCI9PXR5cGVvZiBpJiZcIltvYmplY3QgT2JqZWN0XVwiPT09ZChpW2xdKSYmKGlbbF09XCJbb2JqZWN0IE9iamVjdF1cIik7aWYoXCJvYmplY3RcIj09dHlwZW9mIGkmJlwiW29iamVjdCBPYmplY3RdXCI9PT1kKGkpJiYoaT1cIltvYmplY3QgT2JqZWN0XVwiKSxpPVN0cmluZyhpKSxudWxsPT09dCYmKHQ9e30pLFwidGFnOnlhbWwub3JnLDIwMDI6bWVyZ2VcIj09PW4paWYoQXJyYXkuaXNBcnJheShvKSlmb3IobD0wLGM9by5sZW5ndGg7bDxjO2wrPTEpRihlLHQsb1tsXSxyKTtlbHNlIEYoZSx0LG8scik7ZWxzZSBlLmpzb258fHUuY2FsbChyLGkpfHwhdS5jYWxsKHQsaSl8fChlLmxpbmU9YXx8ZS5saW5lLGUucG9zaXRpb249c3x8ZS5wb3NpdGlvbixBKGUsXCJkdXBsaWNhdGVkIG1hcHBpbmcga2V5XCIpKSx0W2ldPW8sZGVsZXRlIHJbaV07cmV0dXJuIHR9ZnVuY3Rpb24gUChlKXt2YXIgdDsxMD09PSh0PWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSk/ZS5wb3NpdGlvbisrOjEzPT09dD8oZS5wb3NpdGlvbisrLDEwPT09ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pJiZlLnBvc2l0aW9uKyspOkEoZSxcImEgbGluZSBicmVhayBpcyBleHBlY3RlZFwiKSxlLmxpbmUrPTEsZS5saW5lU3RhcnQ9ZS5wb3NpdGlvbn1mdW5jdGlvbiBJKGUsdCxyKXtmb3IodmFyIG49MCxpPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKTswIT09aTspe2Zvcig7eShpKTspaT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKTtpZih0JiYzNT09PWkpZG97aT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKX13aGlsZSgxMCE9PWkmJjEzIT09aSYmMCE9PWkpO2lmKCFtKGkpKWJyZWFrO2ZvcihQKGUpLGk9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pLG4rKyxlLmxpbmVJbmRlbnQ9MDszMj09PWk7KWUubGluZUluZGVudCsrLGk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbil9cmV0dXJuLTEhPT1yJiYwIT09biYmZS5saW5lSW5kZW50PHImJk4oZSxcImRlZmljaWVudCBpbmRlbnRhdGlvblwiKSxufWZ1bmN0aW9uIEwoZSl7dmFyIHQscj1lLnBvc2l0aW9uO3JldHVybiEoNDUhPT0odD1lLmlucHV0LmNoYXJDb2RlQXQocikpJiY0NiE9PXR8fHQhPT1lLmlucHV0LmNoYXJDb2RlQXQocisxKXx8dCE9PWUuaW5wdXQuY2hhckNvZGVBdChyKzIpfHwocis9MywwIT09KHQ9ZS5pbnB1dC5jaGFyQ29kZUF0KHIpKSYmIXYodCkpKX1mdW5jdGlvbiBNKGUsdCl7MT09PXQ/ZS5yZXN1bHQrPVwiIFwiOnQ+MSYmKGUucmVzdWx0Kz1uLnJlcGVhdChcIlxcblwiLHQtMSkpfWZ1bmN0aW9uIEIoZSx0KXt2YXIgcixuLGk9ZS50YWcsbz1lLmFuY2hvcixhPVtdLHM9ITE7Zm9yKG51bGwhPT1lLmFuY2hvciYmKGUuYW5jaG9yTWFwW2UuYW5jaG9yXT1hKSxuPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKTswIT09biYmNDU9PT1uJiZ2KGUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKzEpKTspaWYocz0hMCxlLnBvc2l0aW9uKyssSShlLCEwLC0xKSYmZS5saW5lSW5kZW50PD10KWEucHVzaChudWxsKSxuPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKTtlbHNlIGlmKHI9ZS5saW5lLHooZSx0LDMsITEsITApLGEucHVzaChlLnJlc3VsdCksSShlLCEwLC0xKSxuPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSwoZS5saW5lPT09cnx8ZS5saW5lSW5kZW50PnQpJiYwIT09bilBKGUsXCJiYWQgaW5kZW50YXRpb24gb2YgYSBzZXF1ZW5jZSBlbnRyeVwiKTtlbHNlIGlmKGUubGluZUluZGVudDx0KWJyZWFrO3JldHVybiEhcyYmKGUudGFnPWksZS5hbmNob3I9byxlLmtpbmQ9XCJzZXF1ZW5jZVwiLGUucmVzdWx0PWEsITApfWZ1bmN0aW9uIGooZSl7dmFyIHQscixuLGksbz0hMSxhPSExO2lmKDMzIT09KGk9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKSlyZXR1cm4hMTtpZihudWxsIT09ZS50YWcmJkEoZSxcImR1cGxpY2F0aW9uIG9mIGEgdGFnIHByb3BlcnR5XCIpLDYwPT09KGk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpPyhvPSEwLGk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpOjMzPT09aT8oYT0hMCxyPVwiISFcIixpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKTpyPVwiIVwiLHQ9ZS5wb3NpdGlvbixvKXtkb3tpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pfXdoaWxlKDAhPT1pJiY2MiE9PWkpO2UucG9zaXRpb248ZS5sZW5ndGg/KG49ZS5pbnB1dC5zbGljZSh0LGUucG9zaXRpb24pLGk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpOkEoZSxcInVuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgdmVyYmF0aW0gdGFnXCIpfWVsc2V7Zm9yKDswIT09aSYmIXYoaSk7KTMzPT09aSYmKGE/QShlLFwidGFnIHN1ZmZpeCBjYW5ub3QgY29udGFpbiBleGNsYW1hdGlvbiBtYXJrc1wiKToocj1lLmlucHV0LnNsaWNlKHQtMSxlLnBvc2l0aW9uKzEpLHAudGVzdChyKXx8QShlLFwibmFtZWQgdGFnIGhhbmRsZSBjYW5ub3QgY29udGFpbiBzdWNoIGNoYXJhY3RlcnNcIiksYT0hMCx0PWUucG9zaXRpb24rMSkpLGk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7bj1lLmlucHV0LnNsaWNlKHQsZS5wb3NpdGlvbiksaC50ZXN0KG4pJiZBKGUsXCJ0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGZsb3cgaW5kaWNhdG9yIGNoYXJhY3RlcnNcIil9cmV0dXJuIG4mJiFmLnRlc3QobikmJkEoZSxcInRhZyBuYW1lIGNhbm5vdCBjb250YWluIHN1Y2ggY2hhcmFjdGVyczogXCIrbiksbz9lLnRhZz1uOnUuY2FsbChlLnRhZ01hcCxyKT9lLnRhZz1lLnRhZ01hcFtyXStuOlwiIVwiPT09cj9lLnRhZz1cIiFcIituOlwiISFcIj09PXI/ZS50YWc9XCJ0YWc6eWFtbC5vcmcsMjAwMjpcIituOkEoZSwndW5kZWNsYXJlZCB0YWcgaGFuZGxlIFwiJytyKydcIicpLCEwfWZ1bmN0aW9uIFIoZSl7dmFyIHQscjtpZigzOCE9PShyPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSkpcmV0dXJuITE7Zm9yKG51bGwhPT1lLmFuY2hvciYmQShlLFwiZHVwbGljYXRpb24gb2YgYW4gYW5jaG9yIHByb3BlcnR5XCIpLHI9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbiksdD1lLnBvc2l0aW9uOzAhPT1yJiYhdihyKSYmIV8ocik7KXI9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7cmV0dXJuIGUucG9zaXRpb249PT10JiZBKGUsXCJuYW1lIG9mIGFuIGFuY2hvciBub2RlIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyXCIpLGUuYW5jaG9yPWUuaW5wdXQuc2xpY2UodCxlLnBvc2l0aW9uKSwhMH1mdW5jdGlvbiB6KGUsdCxyLGksbyl7dmFyIGEscyxsLGMsaCxwLGYsZCxiPTEsRD0hMSxTPSExO2lmKG51bGwhPT1lLmxpc3RlbmVyJiZlLmxpc3RlbmVyKFwib3BlblwiLGUpLGUudGFnPW51bGwsZS5hbmNob3I9bnVsbCxlLmtpbmQ9bnVsbCxlLnJlc3VsdD1udWxsLGE9cz1sPTQ9PT1yfHwzPT09cixpJiZJKGUsITAsLTEpJiYoRD0hMCxlLmxpbmVJbmRlbnQ+dD9iPTE6ZS5saW5lSW5kZW50PT09dD9iPTA6ZS5saW5lSW5kZW50PHQmJihiPS0xKSksMT09PWIpZm9yKDtqKGUpfHxSKGUpOylJKGUsITAsLTEpPyhEPSEwLGw9YSxlLmxpbmVJbmRlbnQ+dD9iPTE6ZS5saW5lSW5kZW50PT09dD9iPTA6ZS5saW5lSW5kZW50PHQmJihiPS0xKSk6bD0hMTtpZihsJiYobD1EfHxvKSwxIT09YiYmNCE9PXJ8fChmPTE9PT1yfHwyPT09cj90OnQrMSxkPWUucG9zaXRpb24tZS5saW5lU3RhcnQsMT09PWI/bCYmKEIoZSxkKXx8ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbyxhLHMsdT1lLnRhZyxsPWUuYW5jaG9yLGM9e30saD17fSxwPW51bGwsZj1udWxsLGQ9bnVsbCxtPSExLF89ITE7Zm9yKG51bGwhPT1lLmFuY2hvciYmKGUuYW5jaG9yTWFwW2UuYW5jaG9yXT1jKSxzPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKTswIT09czspe2lmKG49ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24rMSksbz1lLmxpbmUsYT1lLnBvc2l0aW9uLDYzIT09cyYmNTghPT1zfHwhdihuKSl7aWYoIXooZSxyLDIsITEsITApKWJyZWFrO2lmKGUubGluZT09PW8pe2ZvcihzPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKTt5KHMpOylzPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pO2lmKDU4PT09cyl2KHM9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpfHxBKGUsXCJhIHdoaXRlc3BhY2UgY2hhcmFjdGVyIGlzIGV4cGVjdGVkIGFmdGVyIHRoZSBrZXktdmFsdWUgc2VwYXJhdG9yIHdpdGhpbiBhIGJsb2NrIG1hcHBpbmdcIiksbSYmKGsoZSxjLGgscCxmLG51bGwpLHA9Zj1kPW51bGwpLF89ITAsbT0hMSxpPSExLHA9ZS50YWcsZj1lLnJlc3VsdDtlbHNle2lmKCFfKXJldHVybiBlLnRhZz11LGUuYW5jaG9yPWwsITA7QShlLFwiY2FuIG5vdCByZWFkIGFuIGltcGxpY2l0IG1hcHBpbmcgcGFpcjsgYSBjb2xvbiBpcyBtaXNzZWRcIil9fWVsc2V7aWYoIV8pcmV0dXJuIGUudGFnPXUsZS5hbmNob3I9bCwhMDtBKGUsXCJjYW4gbm90IHJlYWQgYSBibG9jayBtYXBwaW5nIGVudHJ5OyBhIG11bHRpbGluZSBrZXkgbWF5IG5vdCBiZSBhbiBpbXBsaWNpdCBrZXlcIil9fWVsc2UgNjM9PT1zPyhtJiYoayhlLGMsaCxwLGYsbnVsbCkscD1mPWQ9bnVsbCksXz0hMCxtPSEwLGk9ITApOm0/KG09ITEsaT0hMCk6QShlLFwiaW5jb21wbGV0ZSBleHBsaWNpdCBtYXBwaW5nIHBhaXI7IGEga2V5IG5vZGUgaXMgbWlzc2VkOyBvciBmb2xsb3dlZCBieSBhIG5vbi10YWJ1bGF0ZWQgZW1wdHkgbGluZVwiKSxlLnBvc2l0aW9uKz0xLHM9bjtpZigoZS5saW5lPT09b3x8ZS5saW5lSW5kZW50PnQpJiYoeihlLHQsNCwhMCxpKSYmKG0/Zj1lLnJlc3VsdDpkPWUucmVzdWx0KSxtfHwoayhlLGMsaCxwLGYsZCxvLGEpLHA9Zj1kPW51bGwpLEkoZSwhMCwtMSkscz1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpLGUubGluZUluZGVudD50JiYwIT09cylBKGUsXCJiYWQgaW5kZW50YXRpb24gb2YgYSBtYXBwaW5nIGVudHJ5XCIpO2Vsc2UgaWYoZS5saW5lSW5kZW50PHQpYnJlYWt9cmV0dXJuIG0mJmsoZSxjLGgscCxmLG51bGwpLF8mJihlLnRhZz11LGUuYW5jaG9yPWwsZS5raW5kPVwibWFwcGluZ1wiLGUucmVzdWx0PWMpLF99KGUsZCxmKSl8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYSxzLHUsbCxjLGgscD0hMCxmPWUudGFnLGQ9ZS5hbmNob3IsbT17fTtpZig5MT09PShoPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSkpaT05MyxzPSExLG49W107ZWxzZXtpZigxMjMhPT1oKXJldHVybiExO2k9MTI1LHM9ITAsbj17fX1mb3IobnVsbCE9PWUuYW5jaG9yJiYoZS5hbmNob3JNYXBbZS5hbmNob3JdPW4pLGg9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7MCE9PWg7KXtpZihJKGUsITAsdCksKGg9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKT09PWkpcmV0dXJuIGUucG9zaXRpb24rKyxlLnRhZz1mLGUuYW5jaG9yPWQsZS5raW5kPXM/XCJtYXBwaW5nXCI6XCJzZXF1ZW5jZVwiLGUucmVzdWx0PW4sITA7cHx8QShlLFwibWlzc2VkIGNvbW1hIGJldHdlZW4gZmxvdyBjb2xsZWN0aW9uIGVudHJpZXNcIiksYz1udWxsLG89YT0hMSw2Mz09PWgmJnYoZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24rMSkpJiYobz1hPSEwLGUucG9zaXRpb24rKyxJKGUsITAsdCkpLHI9ZS5saW5lLHooZSx0LDEsITEsITApLGw9ZS50YWcsdT1lLnJlc3VsdCxJKGUsITAsdCksaD1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbiksIWEmJmUubGluZSE9PXJ8fDU4IT09aHx8KG89ITAsaD1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKSxJKGUsITAsdCkseihlLHQsMSwhMSwhMCksYz1lLnJlc3VsdCkscz9rKGUsbixtLGwsdSxjKTpvP24ucHVzaChrKGUsbnVsbCxtLGwsdSxjKSk6bi5wdXNoKHUpLEkoZSwhMCx0KSw0ND09PShoPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSk/KHA9ITAsaD1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKSk6cD0hMX1BKGUsXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIGZsb3cgY29sbGVjdGlvblwiKX0oZSxmKT9TPSEwOihzJiZmdW5jdGlvbihlLHQpe3ZhciByLGksbyxhLHMsdT0xLGw9ITEsYz0hMSxoPXQscD0wLGY9ITE7aWYoMTI0PT09KGE9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKSlpPSExO2Vsc2V7aWYoNjIhPT1hKXJldHVybiExO2k9ITB9Zm9yKGUua2luZD1cInNjYWxhclwiLGUucmVzdWx0PVwiXCI7MCE9PWE7KWlmKDQzPT09KGE9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpfHw0NT09PWEpMT09PXU/dT00Mz09PWE/MzoyOkEoZSxcInJlcGVhdCBvZiBhIGNob21waW5nIG1vZGUgaWRlbnRpZmllclwiKTtlbHNle2lmKCEoKG89NDg8PShzPWEpJiZzPD01Nz9zLTQ4Oi0xKT49MCkpYnJlYWs7MD09PW8/QShlLFwiYmFkIGV4cGxpY2l0IGluZGVudGF0aW9uIHdpZHRoIG9mIGEgYmxvY2sgc2NhbGFyOyBpdCBjYW5ub3QgYmUgbGVzcyB0aGFuIG9uZVwiKTpjP0EoZSxcInJlcGVhdCBvZiBhbiBpbmRlbnRhdGlvbiB3aWR0aCBpZGVudGlmaWVyXCIpOihoPXQrby0xLGM9ITApfWlmKHkoYSkpe2Rve2E9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbil9d2hpbGUoeShhKSk7aWYoMzU9PT1hKWRve2E9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbil9d2hpbGUoIW0oYSkmJjAhPT1hKX1mb3IoOzAhPT1hOyl7Zm9yKFAoZSksZS5saW5lSW5kZW50PTAsYT1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbik7KCFjfHxlLmxpbmVJbmRlbnQ8aCkmJjMyPT09YTspZS5saW5lSW5kZW50KyssYT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKTtpZighYyYmZS5saW5lSW5kZW50PmgmJihoPWUubGluZUluZGVudCksbShhKSlwKys7ZWxzZXtpZihlLmxpbmVJbmRlbnQ8aCl7Mz09PXU/ZS5yZXN1bHQrPW4ucmVwZWF0KFwiXFxuXCIsbD8xK3A6cCk6MT09PXUmJmwmJihlLnJlc3VsdCs9XCJcXG5cIik7YnJlYWt9Zm9yKGk/eShhKT8oZj0hMCxlLnJlc3VsdCs9bi5yZXBlYXQoXCJcXG5cIixsPzErcDpwKSk6Zj8oZj0hMSxlLnJlc3VsdCs9bi5yZXBlYXQoXCJcXG5cIixwKzEpKTowPT09cD9sJiYoZS5yZXN1bHQrPVwiIFwiKTplLnJlc3VsdCs9bi5yZXBlYXQoXCJcXG5cIixwKTplLnJlc3VsdCs9bi5yZXBlYXQoXCJcXG5cIixsPzErcDpwKSxsPSEwLGM9ITAscD0wLHI9ZS5wb3NpdGlvbjshbShhKSYmMCE9PWE7KWE9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7TyhlLHIsZS5wb3NpdGlvbiwhMSl9fXJldHVybiEwfShlLGYpfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saTtpZigzOSE9PShyPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSkpcmV0dXJuITE7Zm9yKGUua2luZD1cInNjYWxhclwiLGUucmVzdWx0PVwiXCIsZS5wb3NpdGlvbisrLG49aT1lLnBvc2l0aW9uOzAhPT0ocj1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpOylpZigzOT09PXIpe2lmKE8oZSxuLGUucG9zaXRpb24sITApLDM5IT09KHI9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbikpKXJldHVybiEwO249ZS5wb3NpdGlvbixlLnBvc2l0aW9uKyssaT1lLnBvc2l0aW9ufWVsc2UgbShyKT8oTyhlLG4saSwhMCksTShlLEkoZSwhMSx0KSksbj1pPWUucG9zaXRpb24pOmUucG9zaXRpb249PT1lLmxpbmVTdGFydCYmTChlKT9BKGUsXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXJcIik6KGUucG9zaXRpb24rKyxpPWUucG9zaXRpb24pO0EoZSxcInVuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXJcIil9KGUsZil8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8sYSxzLHU7aWYoMzQhPT0ocz1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpKXJldHVybiExO2ZvcihlLmtpbmQ9XCJzY2FsYXJcIixlLnJlc3VsdD1cIlwiLGUucG9zaXRpb24rKyxyPW49ZS5wb3NpdGlvbjswIT09KHM9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKTspe2lmKDM0PT09cylyZXR1cm4gTyhlLHIsZS5wb3NpdGlvbiwhMCksZS5wb3NpdGlvbisrLCEwO2lmKDkyPT09cyl7aWYoTyhlLHIsZS5wb3NpdGlvbiwhMCksbShzPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pKSlJKGUsITEsdCk7ZWxzZSBpZihzPDI1NiYmd1tzXSllLnJlc3VsdCs9RVtzXSxlLnBvc2l0aW9uKys7ZWxzZSBpZigoYT0xMjA9PT0odT1zKT8yOjExNz09PXU/NDo4NT09PXU/ODowKT4wKXtmb3IoaT1hLG89MDtpPjA7aS0tKShhPWcocz1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKSkpPj0wP289KG88PDQpK2E6QShlLFwiZXhwZWN0ZWQgaGV4YWRlY2ltYWwgY2hhcmFjdGVyXCIpO2UucmVzdWx0Kz14KG8pLGUucG9zaXRpb24rK31lbHNlIEEoZSxcInVua25vd24gZXNjYXBlIHNlcXVlbmNlXCIpO3I9bj1lLnBvc2l0aW9ufWVsc2UgbShzKT8oTyhlLHIsbiwhMCksTShlLEkoZSwhMSx0KSkscj1uPWUucG9zaXRpb24pOmUucG9zaXRpb249PT1lLmxpbmVTdGFydCYmTChlKT9BKGUsXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgZG91YmxlIHF1b3RlZCBzY2FsYXJcIik6KGUucG9zaXRpb24rKyxuPWUucG9zaXRpb24pfUEoZSxcInVuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZG91YmxlIHF1b3RlZCBzY2FsYXJcIil9KGUsZik/Uz0hMDohZnVuY3Rpb24oZSl7dmFyIHQscixuO2lmKDQyIT09KG49ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKSlyZXR1cm4hMTtmb3Iobj1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKSx0PWUucG9zaXRpb247MCE9PW4mJiF2KG4pJiYhXyhuKTspbj1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKTtyZXR1cm4gZS5wb3NpdGlvbj09PXQmJkEoZSxcIm5hbWUgb2YgYW4gYWxpYXMgbm9kZSBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGNoYXJhY3RlclwiKSxyPWUuaW5wdXQuc2xpY2UodCxlLnBvc2l0aW9uKSxlLmFuY2hvck1hcC5oYXNPd25Qcm9wZXJ0eShyKXx8QShlLCd1bmlkZW50aWZpZWQgYWxpYXMgXCInK3IrJ1wiJyksZS5yZXN1bHQ9ZS5hbmNob3JNYXBbcl0sSShlLCEwLC0xKSwhMH0oZSk/ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbyxhLHMsdSxsLGMsaD1lLmtpbmQscD1lLnJlc3VsdDtpZih2KGM9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pKXx8XyhjKXx8MzU9PT1jfHwzOD09PWN8fDQyPT09Y3x8MzM9PT1jfHwxMjQ9PT1jfHw2Mj09PWN8fDM5PT09Y3x8MzQ9PT1jfHwzNz09PWN8fDY0PT09Y3x8OTY9PT1jKXJldHVybiExO2lmKCg2Mz09PWN8fDQ1PT09YykmJih2KG49ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24rMSkpfHxyJiZfKG4pKSlyZXR1cm4hMTtmb3IoZS5raW5kPVwic2NhbGFyXCIsZS5yZXN1bHQ9XCJcIixpPW89ZS5wb3NpdGlvbixhPSExOzAhPT1jOyl7aWYoNTg9PT1jKXtpZih2KG49ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24rMSkpfHxyJiZfKG4pKWJyZWFrfWVsc2UgaWYoMzU9PT1jKXtpZih2KGUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uLTEpKSlicmVha31lbHNle2lmKGUucG9zaXRpb249PT1lLmxpbmVTdGFydCYmTChlKXx8ciYmXyhjKSlicmVhaztpZihtKGMpKXtpZihzPWUubGluZSx1PWUubGluZVN0YXJ0LGw9ZS5saW5lSW5kZW50LEkoZSwhMSwtMSksZS5saW5lSW5kZW50Pj10KXthPSEwLGM9ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24pO2NvbnRpbnVlfWUucG9zaXRpb249byxlLmxpbmU9cyxlLmxpbmVTdGFydD11LGUubGluZUluZGVudD1sO2JyZWFrfX1hJiYoTyhlLGksbywhMSksTShlLGUubGluZS1zKSxpPW89ZS5wb3NpdGlvbixhPSExKSx5KGMpfHwobz1lLnBvc2l0aW9uKzEpLGM9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbil9cmV0dXJuIE8oZSxpLG8sITEpLCEhZS5yZXN1bHR8fChlLmtpbmQ9aCxlLnJlc3VsdD1wLCExKX0oZSxmLDE9PT1yKSYmKFM9ITAsbnVsbD09PWUudGFnJiYoZS50YWc9XCI/XCIpKTooUz0hMCxudWxsPT09ZS50YWcmJm51bGw9PT1lLmFuY2hvcnx8QShlLFwiYWxpYXMgbm9kZSBzaG91bGQgbm90IGhhdmUgYW55IHByb3BlcnRpZXNcIikpLG51bGwhPT1lLmFuY2hvciYmKGUuYW5jaG9yTWFwW2UuYW5jaG9yXT1lLnJlc3VsdCkpOjA9PT1iJiYoUz1sJiZCKGUsZCkpKSxudWxsIT09ZS50YWcmJlwiIVwiIT09ZS50YWcpaWYoXCI/XCI9PT1lLnRhZyl7Zm9yKG51bGwhPT1lLnJlc3VsdCYmXCJzY2FsYXJcIiE9PWUua2luZCYmQShlLCd1bmFjY2VwdGFibGUgbm9kZSBraW5kIGZvciAhPD8+IHRhZzsgaXQgc2hvdWxkIGJlIFwic2NhbGFyXCIsIG5vdCBcIicrZS5raW5kKydcIicpLGM9MCxoPWUuaW1wbGljaXRUeXBlcy5sZW5ndGg7YzxoO2MrPTEpaWYoKHA9ZS5pbXBsaWNpdFR5cGVzW2NdKS5yZXNvbHZlKGUucmVzdWx0KSl7ZS5yZXN1bHQ9cC5jb25zdHJ1Y3QoZS5yZXN1bHQpLGUudGFnPXAudGFnLG51bGwhPT1lLmFuY2hvciYmKGUuYW5jaG9yTWFwW2UuYW5jaG9yXT1lLnJlc3VsdCk7YnJlYWt9fWVsc2UgdS5jYWxsKGUudHlwZU1hcFtlLmtpbmR8fFwiZmFsbGJhY2tcIl0sZS50YWcpPyhwPWUudHlwZU1hcFtlLmtpbmR8fFwiZmFsbGJhY2tcIl1bZS50YWddLG51bGwhPT1lLnJlc3VsdCYmcC5raW5kIT09ZS5raW5kJiZBKGUsXCJ1bmFjY2VwdGFibGUgbm9kZSBraW5kIGZvciAhPFwiK2UudGFnKyc+IHRhZzsgaXQgc2hvdWxkIGJlIFwiJytwLmtpbmQrJ1wiLCBub3QgXCInK2Uua2luZCsnXCInKSxwLnJlc29sdmUoZS5yZXN1bHQpPyhlLnJlc3VsdD1wLmNvbnN0cnVjdChlLnJlc3VsdCksbnVsbCE9PWUuYW5jaG9yJiYoZS5hbmNob3JNYXBbZS5hbmNob3JdPWUucmVzdWx0KSk6QShlLFwiY2Fubm90IHJlc29sdmUgYSBub2RlIHdpdGggITxcIitlLnRhZytcIj4gZXhwbGljaXQgdGFnXCIpKTpBKGUsXCJ1bmtub3duIHRhZyAhPFwiK2UudGFnK1wiPlwiKTtyZXR1cm4gbnVsbCE9PWUubGlzdGVuZXImJmUubGlzdGVuZXIoXCJjbG9zZVwiLGUpLG51bGwhPT1lLnRhZ3x8bnVsbCE9PWUuYW5jaG9yfHxTfWZ1bmN0aW9uIFUoZSl7dmFyIHQscixuLGksbz1lLnBvc2l0aW9uLGE9ITE7Zm9yKGUudmVyc2lvbj1udWxsLGUuY2hlY2tMaW5lQnJlYWtzPWUubGVnYWN5LGUudGFnTWFwPXt9LGUuYW5jaG9yTWFwPXt9OzAhPT0oaT1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikpJiYoSShlLCEwLC0xKSxpPWUuaW5wdXQuY2hhckNvZGVBdChlLnBvc2l0aW9uKSwhKGUubGluZUluZGVudD4wfHwzNyE9PWkpKTspe2ZvcihhPSEwLGk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbiksdD1lLnBvc2l0aW9uOzAhPT1pJiYhdihpKTspaT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKTtmb3Iobj1bXSwocj1lLmlucHV0LnNsaWNlKHQsZS5wb3NpdGlvbikpLmxlbmd0aDwxJiZBKGUsXCJkaXJlY3RpdmUgbmFtZSBtdXN0IG5vdCBiZSBsZXNzIHRoYW4gb25lIGNoYXJhY3RlciBpbiBsZW5ndGhcIik7MCE9PWk7KXtmb3IoO3koaSk7KWk9ZS5pbnB1dC5jaGFyQ29kZUF0KCsrZS5wb3NpdGlvbik7aWYoMzU9PT1pKXtkb3tpPWUuaW5wdXQuY2hhckNvZGVBdCgrK2UucG9zaXRpb24pfXdoaWxlKDAhPT1pJiYhbShpKSk7YnJlYWt9aWYobShpKSlicmVhaztmb3IodD1lLnBvc2l0aW9uOzAhPT1pJiYhdihpKTspaT1lLmlucHV0LmNoYXJDb2RlQXQoKytlLnBvc2l0aW9uKTtuLnB1c2goZS5pbnB1dC5zbGljZSh0LGUucG9zaXRpb24pKX0wIT09aSYmUChlKSx1LmNhbGwoVCxyKT9UW3JdKGUscixuKTpOKGUsJ3Vua25vd24gZG9jdW1lbnQgZGlyZWN0aXZlIFwiJytyKydcIicpfUkoZSwhMCwtMSksMD09PWUubGluZUluZGVudCYmNDU9PT1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikmJjQ1PT09ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24rMSkmJjQ1PT09ZS5pbnB1dC5jaGFyQ29kZUF0KGUucG9zaXRpb24rMik/KGUucG9zaXRpb24rPTMsSShlLCEwLC0xKSk6YSYmQShlLFwiZGlyZWN0aXZlcyBlbmQgbWFyayBpcyBleHBlY3RlZFwiKSx6KGUsZS5saW5lSW5kZW50LTEsNCwhMSwhMCksSShlLCEwLC0xKSxlLmNoZWNrTGluZUJyZWFrcyYmYy50ZXN0KGUuaW5wdXQuc2xpY2UobyxlLnBvc2l0aW9uKSkmJk4oZSxcIm5vbi1BU0NJSSBsaW5lIGJyZWFrcyBhcmUgaW50ZXJwcmV0ZWQgYXMgY29udGVudFwiKSxlLmRvY3VtZW50cy5wdXNoKGUucmVzdWx0KSxlLnBvc2l0aW9uPT09ZS5saW5lU3RhcnQmJkwoZSk/NDY9PT1lLmlucHV0LmNoYXJDb2RlQXQoZS5wb3NpdGlvbikmJihlLnBvc2l0aW9uKz0zLEkoZSwhMCwtMSkpOmUucG9zaXRpb248ZS5sZW5ndGgtMSYmQShlLFwiZW5kIG9mIHRoZSBzdHJlYW0gb3IgYSBkb2N1bWVudCBzZXBhcmF0b3IgaXMgZXhwZWN0ZWRcIil9ZnVuY3Rpb24gRyhlLHQpe3Q9dHx8e30sMCE9PShlPVN0cmluZyhlKSkubGVuZ3RoJiYoMTAhPT1lLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSkmJjEzIT09ZS5jaGFyQ29kZUF0KGUubGVuZ3RoLTEpJiYoZSs9XCJcXG5cIiksNjUyNzk9PT1lLmNoYXJDb2RlQXQoMCkmJihlPWUuc2xpY2UoMSkpKTt2YXIgcj1uZXcgUyhlLHQpLG49ZS5pbmRleE9mKFwiXFwwXCIpO2ZvcigtMSE9PW4mJihyLnBvc2l0aW9uPW4sQShyLFwibnVsbCBieXRlIGlzIG5vdCBhbGxvd2VkIGluIGlucHV0XCIpKSxyLmlucHV0Kz1cIlxcMFwiOzMyPT09ci5pbnB1dC5jaGFyQ29kZUF0KHIucG9zaXRpb24pOylyLmxpbmVJbmRlbnQrPTEsci5wb3NpdGlvbis9MTtmb3IoO3IucG9zaXRpb248ci5sZW5ndGgtMTspVShyKTtyZXR1cm4gci5kb2N1bWVudHN9ZnVuY3Rpb24gWChlLHQscil7bnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ2b2lkIDA9PT1yJiYocj10LHQ9bnVsbCk7dmFyIG49RyhlLHIpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpcmV0dXJuIG47Zm9yKHZhciBpPTAsbz1uLmxlbmd0aDtpPG87aSs9MSl0KG5baV0pfWZ1bmN0aW9uIHEoZSx0KXt2YXIgcj1HKGUsdCk7aWYoMCE9PXIubGVuZ3RoKXtpZigxPT09ci5sZW5ndGgpcmV0dXJuIHJbMF07dGhyb3cgbmV3IGkoXCJleHBlY3RlZCBhIHNpbmdsZSBkb2N1bWVudCBpbiB0aGUgc3RyZWFtLCBidXQgZm91bmQgbW9yZVwiKX19ZS5leHBvcnRzLmxvYWRBbGw9WCxlLmV4cG9ydHMubG9hZD1xLGUuZXhwb3J0cy5zYWZlTG9hZEFsbD1mdW5jdGlvbihlLHQscil7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHQmJm51bGwhPT10JiZ2b2lkIDA9PT1yJiYocj10LHQ9bnVsbCksWChlLHQsbi5leHRlbmQoe3NjaGVtYTphfSxyKSl9LGUuZXhwb3J0cy5zYWZlTG9hZD1mdW5jdGlvbihlLHQpe3JldHVybiBxKGUsbi5leHRlbmQoe3NjaGVtYTphfSx0KSl9fSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOCk7ZnVuY3Rpb24gaShlLHQscixuLGkpe3RoaXMubmFtZT1lLHRoaXMuYnVmZmVyPXQsdGhpcy5wb3NpdGlvbj1yLHRoaXMubGluZT1uLHRoaXMuY29sdW1uPWl9aS5wcm90b3R5cGUuZ2V0U25pcHBldD1mdW5jdGlvbihlLHQpe3ZhciByLGksbyxhLHM7aWYoIXRoaXMuYnVmZmVyKXJldHVybiBudWxsO2ZvcihlPWV8fDQsdD10fHw3NSxyPVwiXCIsaT10aGlzLnBvc2l0aW9uO2k+MCYmLTE9PT1cIlxcMFxcclxcblx1MDA4NVxcdTIwMjhcXHUyMDI5XCIuaW5kZXhPZih0aGlzLmJ1ZmZlci5jaGFyQXQoaS0xKSk7KWlmKGktPTEsdGhpcy5wb3NpdGlvbi1pPnQvMi0xKXtyPVwiIC4uLiBcIixpKz01O2JyZWFrfWZvcihvPVwiXCIsYT10aGlzLnBvc2l0aW9uO2E8dGhpcy5idWZmZXIubGVuZ3RoJiYtMT09PVwiXFwwXFxyXFxuXHUwMDg1XFx1MjAyOFxcdTIwMjlcIi5pbmRleE9mKHRoaXMuYnVmZmVyLmNoYXJBdChhKSk7KWlmKChhKz0xKS10aGlzLnBvc2l0aW9uPnQvMi0xKXtvPVwiIC4uLiBcIixhLT01O2JyZWFrfXJldHVybiBzPXRoaXMuYnVmZmVyLnNsaWNlKGksYSksbi5yZXBlYXQoXCIgXCIsZSkrcitzK28rXCJcXG5cIituLnJlcGVhdChcIiBcIixlK3RoaXMucG9zaXRpb24taStyLmxlbmd0aCkrXCJeXCJ9LGkucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKGUpe3ZhciB0LHI9XCJcIjtyZXR1cm4gdGhpcy5uYW1lJiYocis9J2luIFwiJyt0aGlzLm5hbWUrJ1wiICcpLHIrPVwiYXQgbGluZSBcIisodGhpcy5saW5lKzEpK1wiLCBjb2x1bW4gXCIrKHRoaXMuY29sdW1uKzEpLGV8fCh0PXRoaXMuZ2V0U25pcHBldCgpKSYmKHIrPVwiOlxcblwiK3QpLHJ9LGUuZXhwb3J0cz1pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMCk7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6c3RyXCIse2tpbmQ6XCJzY2FsYXJcIixjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lP2U6XCJcIn19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApO2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOnNlcVwiLHtraW5kOlwic2VxdWVuY2VcIixjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lP2U6W119fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKTtlLmV4cG9ydHM9bmV3IG4oXCJ0YWc6eWFtbC5vcmcsMjAwMjptYXBcIix7a2luZDpcIm1hcHBpbmdcIixjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lP2U6e319fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKTtlLmV4cG9ydHM9bmV3IG4oXCJ0YWc6eWFtbC5vcmcsMjAwMjpudWxsXCIse2tpbmQ6XCJzY2FsYXJcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiEwO3ZhciB0PWUubGVuZ3RoO3JldHVybiAxPT09dCYmXCJ+XCI9PT1lfHw0PT09dCYmKFwibnVsbFwiPT09ZXx8XCJOdWxsXCI9PT1lfHxcIk5VTExcIj09PWUpfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0scHJlZGljYXRlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZX0scmVwcmVzZW50OntjYW5vbmljYWw6ZnVuY3Rpb24oKXtyZXR1cm5cIn5cIn0sbG93ZXJjYXNlOmZ1bmN0aW9uKCl7cmV0dXJuXCJudWxsXCJ9LHVwcGVyY2FzZTpmdW5jdGlvbigpe3JldHVyblwiTlVMTFwifSxjYW1lbGNhc2U6ZnVuY3Rpb24oKXtyZXR1cm5cIk51bGxcIn19LGRlZmF1bHRTdHlsZTpcImxvd2VyY2FzZVwifSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKTtlLmV4cG9ydHM9bmV3IG4oXCJ0YWc6eWFtbC5vcmcsMjAwMjpib29sXCIse2tpbmQ6XCJzY2FsYXJcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiExO3ZhciB0PWUubGVuZ3RoO3JldHVybiA0PT09dCYmKFwidHJ1ZVwiPT09ZXx8XCJUcnVlXCI9PT1lfHxcIlRSVUVcIj09PWUpfHw1PT09dCYmKFwiZmFsc2VcIj09PWV8fFwiRmFsc2VcIj09PWV8fFwiRkFMU0VcIj09PWUpfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7cmV0dXJuXCJ0cnVlXCI9PT1lfHxcIlRydWVcIj09PWV8fFwiVFJVRVwiPT09ZX0scHJlZGljYXRlOmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBCb29sZWFuXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSxyZXByZXNlbnQ6e2xvd2VyY2FzZTpmdW5jdGlvbihlKXtyZXR1cm4gZT9cInRydWVcIjpcImZhbHNlXCJ9LHVwcGVyY2FzZTpmdW5jdGlvbihlKXtyZXR1cm4gZT9cIlRSVUVcIjpcIkZBTFNFXCJ9LGNhbWVsY2FzZTpmdW5jdGlvbihlKXtyZXR1cm4gZT9cIlRydWVcIjpcIkZhbHNlXCJ9fSxkZWZhdWx0U3R5bGU6XCJsb3dlcmNhc2VcIn0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOCksaT1yKDEwKTtmdW5jdGlvbiBvKGUpe3JldHVybiA0ODw9ZSYmZTw9NTV9ZnVuY3Rpb24gYShlKXtyZXR1cm4gNDg8PWUmJmU8PTU3fWUuZXhwb3J0cz1uZXcgaShcInRhZzp5YW1sLm9yZywyMDAyOmludFwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMTt2YXIgdCxyLG49ZS5sZW5ndGgsaT0wLHM9ITE7aWYoIW4pcmV0dXJuITE7aWYoXCItXCIhPT0odD1lW2ldKSYmXCIrXCIhPT10fHwodD1lWysraV0pLFwiMFwiPT09dCl7aWYoaSsxPT09bilyZXR1cm4hMDtpZihcImJcIj09PSh0PWVbKytpXSkpe2ZvcihpKys7aTxuO2krKylpZihcIl9cIiE9PSh0PWVbaV0pKXtpZihcIjBcIiE9PXQmJlwiMVwiIT09dClyZXR1cm4hMTtzPSEwfXJldHVybiBzJiZcIl9cIiE9PXR9aWYoXCJ4XCI9PT10KXtmb3IoaSsrO2k8bjtpKyspaWYoXCJfXCIhPT0odD1lW2ldKSl7aWYoISg0ODw9KHI9ZS5jaGFyQ29kZUF0KGkpKSYmcjw9NTd8fDY1PD1yJiZyPD03MHx8OTc8PXImJnI8PTEwMikpcmV0dXJuITE7cz0hMH1yZXR1cm4gcyYmXCJfXCIhPT10fWZvcig7aTxuO2krKylpZihcIl9cIiE9PSh0PWVbaV0pKXtpZighbyhlLmNoYXJDb2RlQXQoaSkpKXJldHVybiExO3M9ITB9cmV0dXJuIHMmJlwiX1wiIT09dH1pZihcIl9cIj09PXQpcmV0dXJuITE7Zm9yKDtpPG47aSsrKWlmKFwiX1wiIT09KHQ9ZVtpXSkpe2lmKFwiOlwiPT09dClicmVhaztpZighYShlLmNoYXJDb2RlQXQoaSkpKXJldHVybiExO3M9ITB9cmV0dXJuISghc3x8XCJfXCI9PT10KSYmKFwiOlwiIT09dHx8L14oOlswLTVdP1swLTldKSskLy50ZXN0KGUuc2xpY2UoaSkpKX0sY29uc3RydWN0OmZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1lLGk9MSxvPVtdO3JldHVybi0xIT09bi5pbmRleE9mKFwiX1wiKSYmKG49bi5yZXBsYWNlKC9fL2csXCJcIikpLFwiLVwiIT09KHQ9blswXSkmJlwiK1wiIT09dHx8KFwiLVwiPT09dCYmKGk9LTEpLHQ9KG49bi5zbGljZSgxKSlbMF0pLFwiMFwiPT09bj8wOlwiMFwiPT09dD9cImJcIj09PW5bMV0/aSpwYXJzZUludChuLnNsaWNlKDIpLDIpOlwieFwiPT09blsxXT9pKnBhcnNlSW50KG4sMTYpOmkqcGFyc2VJbnQobiw4KTotMSE9PW4uaW5kZXhPZihcIjpcIik/KG4uc3BsaXQoXCI6XCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe28udW5zaGlmdChwYXJzZUludChlLDEwKSl9KSksbj0wLHI9MSxvLmZvckVhY2goKGZ1bmN0aW9uKGUpe24rPWUqcixyKj02MH0pKSxpKm4pOmkqcGFyc2VJbnQobiwxMCl9LHByZWRpY2F0ZTpmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgTnVtYmVyXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpJiZlJTE9PTAmJiFuLmlzTmVnYXRpdmVaZXJvKGUpfSxyZXByZXNlbnQ6e2JpbmFyeTpmdW5jdGlvbihlKXtyZXR1cm4gZT49MD9cIjBiXCIrZS50b1N0cmluZygyKTpcIi0wYlwiK2UudG9TdHJpbmcoMikuc2xpY2UoMSl9LG9jdGFsOmZ1bmN0aW9uKGUpe3JldHVybiBlPj0wP1wiMFwiK2UudG9TdHJpbmcoOCk6XCItMFwiK2UudG9TdHJpbmcoOCkuc2xpY2UoMSl9LGRlY2ltYWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9TdHJpbmcoMTApfSxoZXhhZGVjaW1hbDpmdW5jdGlvbihlKXtyZXR1cm4gZT49MD9cIjB4XCIrZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTpcIi0weFwiK2UudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkuc2xpY2UoMSl9fSxkZWZhdWx0U3R5bGU6XCJkZWNpbWFsXCIsc3R5bGVBbGlhc2VzOntiaW5hcnk6WzIsXCJiaW5cIl0sb2N0YWw6WzgsXCJvY3RcIl0sZGVjaW1hbDpbMTAsXCJkZWNcIl0saGV4YWRlY2ltYWw6WzE2LFwiaGV4XCJdfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzOCksaT1yKDEwKSxvPW5ldyBSZWdFeHAoXCJeKD86Wy0rXT8oPzowfFsxLTldWzAtOV9dKikoPzpcXFxcLlswLTlfXSopPyg/OltlRV1bLStdP1swLTldKyk/fFxcXFwuWzAtOV9dKyg/OltlRV1bLStdP1swLTldKyk/fFstK10/WzAtOV1bMC05X10qKD86OlswLTVdP1swLTldKStcXFxcLlswLTlfXSp8Wy0rXT9cXFxcLig/OmluZnxJbmZ8SU5GKXxcXFxcLig/Om5hbnxOYU58TkFOKSkkXCIpO3ZhciBhPS9eWy0rXT9bMC05XStlLztlLmV4cG9ydHM9bmV3IGkoXCJ0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdFwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWUmJiEoIW8udGVzdChlKXx8XCJfXCI9PT1lW2UubGVuZ3RoLTFdKX0sY29uc3RydWN0OmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpO3JldHVybiByPVwiLVwiPT09KHQ9ZS5yZXBsYWNlKC9fL2csXCJcIikudG9Mb3dlckNhc2UoKSlbMF0/LTE6MSxpPVtdLFwiKy1cIi5pbmRleE9mKHRbMF0pPj0wJiYodD10LnNsaWNlKDEpKSxcIi5pbmZcIj09PXQ/MT09PXI/TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOk51bWJlci5ORUdBVElWRV9JTkZJTklUWTpcIi5uYW5cIj09PXQ/TmFOOnQuaW5kZXhPZihcIjpcIik+PTA/KHQuc3BsaXQoXCI6XCIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2kudW5zaGlmdChwYXJzZUZsb2F0KGUsMTApKX0pKSx0PTAsbj0xLGkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dCs9ZSpuLG4qPTYwfSkpLHIqdCk6cipwYXJzZUZsb2F0KHQsMTApfSxwcmVkaWNhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IE51bWJlcl1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSYmKGUlMSE9MHx8bi5pc05lZ2F0aXZlWmVybyhlKSl9LHJlcHJlc2VudDpmdW5jdGlvbihlLHQpe3ZhciByO2lmKGlzTmFOKGUpKXN3aXRjaCh0KXtjYXNlXCJsb3dlcmNhc2VcIjpyZXR1cm5cIi5uYW5cIjtjYXNlXCJ1cHBlcmNhc2VcIjpyZXR1cm5cIi5OQU5cIjtjYXNlXCJjYW1lbGNhc2VcIjpyZXR1cm5cIi5OYU5cIn1lbHNlIGlmKE51bWJlci5QT1NJVElWRV9JTkZJTklUWT09PWUpc3dpdGNoKHQpe2Nhc2VcImxvd2VyY2FzZVwiOnJldHVyblwiLmluZlwiO2Nhc2VcInVwcGVyY2FzZVwiOnJldHVyblwiLklORlwiO2Nhc2VcImNhbWVsY2FzZVwiOnJldHVyblwiLkluZlwifWVsc2UgaWYoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZPT09ZSlzd2l0Y2godCl7Y2FzZVwibG93ZXJjYXNlXCI6cmV0dXJuXCItLmluZlwiO2Nhc2VcInVwcGVyY2FzZVwiOnJldHVyblwiLS5JTkZcIjtjYXNlXCJjYW1lbGNhc2VcIjpyZXR1cm5cIi0uSW5mXCJ9ZWxzZSBpZihuLmlzTmVnYXRpdmVaZXJvKGUpKXJldHVyblwiLTAuMFwiO3JldHVybiByPWUudG9TdHJpbmcoMTApLGEudGVzdChyKT9yLnJlcGxhY2UoXCJlXCIsXCIuZVwiKTpyfSxkZWZhdWx0U3R5bGU6XCJsb3dlcmNhc2VcIn0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMCksaT1uZXcgUmVnRXhwKFwiXihbMC05XVswLTldWzAtOV1bMC05XSktKFswLTldWzAtOV0pLShbMC05XVswLTldKSRcIiksbz1uZXcgUmVnRXhwKFwiXihbMC05XVswLTldWzAtOV1bMC05XSktKFswLTldWzAtOV0/KS0oWzAtOV1bMC05XT8pKD86W1R0XXxbIFxcXFx0XSspKFswLTldWzAtOV0/KTooWzAtOV1bMC05XSk6KFswLTldWzAtOV0pKD86XFxcXC4oWzAtOV0qKSk/KD86WyBcXFxcdF0qKFp8KFstK10pKFswLTldWzAtOV0/KSg/OjooWzAtOV1bMC05XSkpPykpPyRcIik7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6dGltZXN0YW1wXCIse2tpbmQ6XCJzY2FsYXJcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZSYmKG51bGwhPT1pLmV4ZWMoZSl8fG51bGwhPT1vLmV4ZWMoZSkpfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7dmFyIHQscixuLGEscyx1LGwsYyxoPTAscD1udWxsO2lmKG51bGw9PT0odD1pLmV4ZWMoZSkpJiYodD1vLmV4ZWMoZSkpLG51bGw9PT10KXRocm93IG5ldyBFcnJvcihcIkRhdGUgcmVzb2x2ZSBlcnJvclwiKTtpZihyPSt0WzFdLG49K3RbMl0tMSxhPSt0WzNdLCF0WzRdKXJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyhyLG4sYSkpO2lmKHM9K3RbNF0sdT0rdFs1XSxsPSt0WzZdLHRbN10pe2ZvcihoPXRbN10uc2xpY2UoMCwzKTtoLmxlbmd0aDwzOyloKz1cIjBcIjtoPStofXJldHVybiB0WzldJiYocD02ZTQqKDYwKit0WzEwXSsgKyh0WzExXXx8MCkpLFwiLVwiPT09dFs5XSYmKHA9LXApKSxjPW5ldyBEYXRlKERhdGUuVVRDKHIsbixhLHMsdSxsLGgpKSxwJiZjLnNldFRpbWUoYy5nZXRUaW1lKCktcCksY30saW5zdGFuY2VPZjpEYXRlLHJlcHJlc2VudDpmdW5jdGlvbihlKXtyZXR1cm4gZS50b0lTT1N0cmluZygpfX0pfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMCk7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6bWVyZ2VcIix7a2luZDpcInNjYWxhclwiLHJlc29sdmU6ZnVuY3Rpb24oZSl7cmV0dXJuXCI8PFwiPT09ZXx8bnVsbD09PWV9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbjt0cnl7bj1yKDE0NSkuQnVmZmVyfWNhdGNoKGUpe312YXIgaT1yKDEwKSxvPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cXG5cXHJcIjtlLmV4cG9ydHM9bmV3IGkoXCJ0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnlcIix7a2luZDpcInNjYWxhclwiLHJlc29sdmU6ZnVuY3Rpb24oZSl7aWYobnVsbD09PWUpcmV0dXJuITE7dmFyIHQscixuPTAsaT1lLmxlbmd0aCxhPW87Zm9yKHI9MDtyPGk7cisrKWlmKCEoKHQ9YS5pbmRleE9mKGUuY2hhckF0KHIpKSk+NjQpKXtpZih0PDApcmV0dXJuITE7bis9Nn1yZXR1cm4gbiU4PT0wfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oZSl7dmFyIHQscixpPWUucmVwbGFjZSgvW1xcclxcbj1dL2csXCJcIiksYT1pLmxlbmd0aCxzPW8sdT0wLGw9W107Zm9yKHQ9MDt0PGE7dCsrKXQlND09MCYmdCYmKGwucHVzaCh1Pj4xNiYyNTUpLGwucHVzaCh1Pj44JjI1NSksbC5wdXNoKDI1NSZ1KSksdT11PDw2fHMuaW5kZXhPZihpLmNoYXJBdCh0KSk7cmV0dXJuIDA9PT0ocj1hJTQqNik/KGwucHVzaCh1Pj4xNiYyNTUpLGwucHVzaCh1Pj44JjI1NSksbC5wdXNoKDI1NSZ1KSk6MTg9PT1yPyhsLnB1c2godT4+MTAmMjU1KSxsLnB1c2godT4+MiYyNTUpKToxMj09PXImJmwucHVzaCh1Pj40JjI1NSksbj9uLmZyb20/bi5mcm9tKGwpOm5ldyBuKGwpOmx9LHByZWRpY2F0ZTpmdW5jdGlvbihlKXtyZXR1cm4gbiYmbi5pc0J1ZmZlcihlKX0scmVwcmVzZW50OmZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1cIlwiLGk9MCxhPWUubGVuZ3RoLHM9bztmb3IodD0wO3Q8YTt0KyspdCUzPT0wJiZ0JiYobis9c1tpPj4xOCY2M10sbis9c1tpPj4xMiY2M10sbis9c1tpPj42JjYzXSxuKz1zWzYzJmldKSxpPShpPDw4KStlW3RdO3JldHVybiAwPT09KHI9YSUzKT8obis9c1tpPj4xOCY2M10sbis9c1tpPj4xMiY2M10sbis9c1tpPj42JjYzXSxuKz1zWzYzJmldKToyPT09cj8obis9c1tpPj4xMCY2M10sbis9c1tpPj40JjYzXSxuKz1zW2k8PDImNjNdLG4rPXNbNjRdKToxPT09ciYmKG4rPXNbaT4+MiY2M10sbis9c1tpPDw0JjYzXSxuKz1zWzY0XSxuKz1zWzY0XSksbn19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApLGk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxvPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6b21hcFwiLHtraW5kOlwic2VxdWVuY2VcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiEwO3ZhciB0LHIsbixhLHMsdT1bXSxsPWU7Zm9yKHQ9MCxyPWwubGVuZ3RoO3Q8cjt0Kz0xKXtpZihuPWxbdF0scz0hMSxcIltvYmplY3QgT2JqZWN0XVwiIT09by5jYWxsKG4pKXJldHVybiExO2ZvcihhIGluIG4paWYoaS5jYWxsKG4sYSkpe2lmKHMpcmV0dXJuITE7cz0hMH1pZighcylyZXR1cm4hMTtpZigtMSE9PXUuaW5kZXhPZihhKSlyZXR1cm4hMTt1LnB1c2goYSl9cmV0dXJuITB9LGNvbnN0cnVjdDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWU/ZTpbXX19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApLGk9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztlLmV4cG9ydHM9bmV3IG4oXCJ0YWc6eWFtbC5vcmcsMjAwMjpwYWlyc1wiLHtraW5kOlwic2VxdWVuY2VcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiEwO3ZhciB0LHIsbixvLGEscz1lO2ZvcihhPW5ldyBBcnJheShzLmxlbmd0aCksdD0wLHI9cy5sZW5ndGg7dDxyO3QrPTEpe2lmKG49c1t0XSxcIltvYmplY3QgT2JqZWN0XVwiIT09aS5jYWxsKG4pKXJldHVybiExO2lmKDEhPT0obz1PYmplY3Qua2V5cyhuKSkubGVuZ3RoKXJldHVybiExO2FbdF09W29bMF0sbltvWzBdXV19cmV0dXJuITB9LGNvbnN0cnVjdDpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm5bXTt2YXIgdCxyLG4saSxvLGE9ZTtmb3Iobz1uZXcgQXJyYXkoYS5sZW5ndGgpLHQ9MCxyPWEubGVuZ3RoO3Q8cjt0Kz0xKW49YVt0XSxpPU9iamVjdC5rZXlzKG4pLG9bdF09W2lbMF0sbltpWzBdXV07cmV0dXJuIG99fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEwKSxpPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZS5leHBvcnRzPW5ldyBuKFwidGFnOnlhbWwub3JnLDIwMDI6c2V0XCIse2tpbmQ6XCJtYXBwaW5nXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMDt2YXIgdCxyPWU7Zm9yKHQgaW4gcilpZihpLmNhbGwocix0KSYmbnVsbCE9PXJbdF0pcmV0dXJuITE7cmV0dXJuITB9LGNvbnN0cnVjdDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWU/ZTp7fX19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApO2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOmpzL3VuZGVmaW5lZFwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbigpe3JldHVybiEwfSxjb25zdHJ1Y3Q6ZnVuY3Rpb24oKXt9LHByZWRpY2F0ZTpmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZX0scmVwcmVzZW50OmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn19KX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTApO2UuZXhwb3J0cz1uZXcgbihcInRhZzp5YW1sLm9yZywyMDAyOmpzL3JlZ2V4cFwiLHtraW5kOlwic2NhbGFyXCIscmVzb2x2ZTpmdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4hMTtpZigwPT09ZS5sZW5ndGgpcmV0dXJuITE7dmFyIHQ9ZSxyPS9cXC8oW2dpbV0qKSQvLmV4ZWMoZSksbj1cIlwiO2lmKFwiL1wiPT09dFswXSl7aWYociYmKG49clsxXSksbi5sZW5ndGg+MylyZXR1cm4hMTtpZihcIi9cIiE9PXRbdC5sZW5ndGgtbi5sZW5ndGgtMV0pcmV0dXJuITF9cmV0dXJuITB9LGNvbnN0cnVjdDpmdW5jdGlvbihlKXt2YXIgdD1lLHI9L1xcLyhbZ2ltXSopJC8uZXhlYyhlKSxuPVwiXCI7cmV0dXJuXCIvXCI9PT10WzBdJiYociYmKG49clsxXSksdD10LnNsaWNlKDEsdC5sZW5ndGgtbi5sZW5ndGgtMSkpLG5ldyBSZWdFeHAodCxuKX0scHJlZGljYXRlOmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBSZWdFeHBdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LHJlcHJlc2VudDpmdW5jdGlvbihlKXt2YXIgdD1cIi9cIitlLnNvdXJjZStcIi9cIjtyZXR1cm4gZS5nbG9iYWwmJih0Kz1cImdcIiksZS5tdWx0aWxpbmUmJih0Kz1cIm1cIiksZS5pZ25vcmVDYXNlJiYodCs9XCJpXCIpLHR9fSl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbjt0cnl7bj1yKDMwMil9Y2F0Y2goZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKG49d2luZG93LmVzcHJpbWEpfXZhciBpPXIoMTApO2UuZXhwb3J0cz1uZXcgaShcInRhZzp5YW1sLm9yZywyMDAyOmpzL2Z1bmN0aW9uXCIse2tpbmQ6XCJzY2FsYXJcIixyZXNvbHZlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiExO3RyeXt2YXIgdD1cIihcIitlK1wiKVwiLHI9bi5wYXJzZSh0LHtyYW5nZTohMH0pO3JldHVyblwiUHJvZ3JhbVwiPT09ci50eXBlJiYxPT09ci5ib2R5Lmxlbmd0aCYmXCJFeHByZXNzaW9uU3RhdGVtZW50XCI9PT1yLmJvZHlbMF0udHlwZSYmKFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIj09PXIuYm9keVswXS5leHByZXNzaW9uLnR5cGV8fFwiRnVuY3Rpb25FeHByZXNzaW9uXCI9PT1yLmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlKX1jYXRjaChlKXtyZXR1cm4hMX19LGNvbnN0cnVjdDpmdW5jdGlvbihlKXt2YXIgdCxyPVwiKFwiK2UrXCIpXCIsaT1uLnBhcnNlKHIse3JhbmdlOiEwfSksbz1bXTtpZihcIlByb2dyYW1cIiE9PWkudHlwZXx8MSE9PWkuYm9keS5sZW5ndGh8fFwiRXhwcmVzc2lvblN0YXRlbWVudFwiIT09aS5ib2R5WzBdLnR5cGV8fFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiE9PWkuYm9keVswXS5leHByZXNzaW9uLnR5cGUmJlwiRnVuY3Rpb25FeHByZXNzaW9uXCIhPT1pLmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byByZXNvbHZlIGZ1bmN0aW9uXCIpO3JldHVybiBpLmJvZHlbMF0uZXhwcmVzc2lvbi5wYXJhbXMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7by5wdXNoKGUubmFtZSl9KSksdD1pLmJvZHlbMF0uZXhwcmVzc2lvbi5ib2R5LnJhbmdlLFwiQmxvY2tTdGF0ZW1lbnRcIj09PWkuYm9keVswXS5leHByZXNzaW9uLmJvZHkudHlwZT9uZXcgRnVuY3Rpb24obyxyLnNsaWNlKHRbMF0rMSx0WzFdLTEpKTpuZXcgRnVuY3Rpb24obyxcInJldHVybiBcIityLnNsaWNlKHRbMF0sdFsxXSkpfSxwcmVkaWNhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSxyZXByZXNlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9TdHJpbmcoKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuO249ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gcihuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIGk9dFtuXT17ZXhwb3J0czp7fSxpZDpuLGxvYWRlZDohMX07cmV0dXJuIGVbbl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsciksaS5sb2FkZWQ9ITAsaS5leHBvcnRzfXJldHVybiByLm09ZSxyLmM9dCxyLnA9XCJcIixyKDApfShbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1yKDMpLG89cig4KSxhPXIoMTUpO2Z1bmN0aW9uIHMoZSx0LHIpe3ZhciBhPW51bGwscz1mdW5jdGlvbihlLHQpe3ImJnIoZSx0KSxhJiZhLnZpc2l0KGUsdCl9LHU9XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9zOm51bGwsbD0hMTtpZih0KXtsPVwiYm9vbGVhblwiPT10eXBlb2YgdC5jb21tZW50JiZ0LmNvbW1lbnQ7dmFyIGM9XCJib29sZWFuXCI9PXR5cGVvZiB0LmF0dGFjaENvbW1lbnQmJnQuYXR0YWNoQ29tbWVudDsobHx8YykmJigoYT1uZXcgbi5Db21tZW50SGFuZGxlcikuYXR0YWNoPWMsdC5jb21tZW50PSEwLHU9cyl9dmFyIGgscD0hMTt0JiZcInN0cmluZ1wiPT10eXBlb2YgdC5zb3VyY2VUeXBlJiYocD1cIm1vZHVsZVwiPT09dC5zb3VyY2VUeXBlKSxoPXQmJlwiYm9vbGVhblwiPT10eXBlb2YgdC5qc3gmJnQuanN4P25ldyBpLkpTWFBhcnNlcihlLHQsdSk6bmV3IG8uUGFyc2VyKGUsdCx1KTt2YXIgZj1wP2gucGFyc2VNb2R1bGUoKTpoLnBhcnNlU2NyaXB0KCk7cmV0dXJuIGwmJmEmJihmLmNvbW1lbnRzPWEuY29tbWVudHMpLGguY29uZmlnLnRva2VucyYmKGYudG9rZW5zPWgudG9rZW5zKSxoLmNvbmZpZy50b2xlcmFudCYmKGYuZXJyb3JzPWguZXJyb3JIYW5kbGVyLmVycm9ycyksZn10LnBhcnNlPXMsdC5wYXJzZU1vZHVsZT1mdW5jdGlvbihlLHQscil7dmFyIG49dHx8e307cmV0dXJuIG4uc291cmNlVHlwZT1cIm1vZHVsZVwiLHMoZSxuLHIpfSx0LnBhcnNlU2NyaXB0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10fHx7fTtyZXR1cm4gbi5zb3VyY2VUeXBlPVwic2NyaXB0XCIscyhlLG4scil9LHQudG9rZW5pemU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGk9bmV3IGEuVG9rZW5pemVyKGUsdCk7bj1bXTt0cnl7Zm9yKDs7KXt2YXIgbz1pLmdldE5leHRUb2tlbigpO2lmKCFvKWJyZWFrO3ImJihvPXIobykpLG4ucHVzaChvKX19Y2F0Y2goZSl7aS5lcnJvckhhbmRsZXIudG9sZXJhdGUoZSl9cmV0dXJuIGkuZXJyb3JIYW5kbGVyLnRvbGVyYW50JiYobi5lcnJvcnM9aS5lcnJvcnMoKSksbn07dmFyIHU9cigyKTt0LlN5bnRheD11LlN5bnRheCx0LnZlcnNpb249XCI0LjAuMVwifSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49cigyKSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMuYXR0YWNoPSExLHRoaXMuY29tbWVudHM9W10sdGhpcy5zdGFjaz1bXSx0aGlzLmxlYWRpbmc9W10sdGhpcy50cmFpbGluZz1bXX1yZXR1cm4gZS5wcm90b3R5cGUuaW5zZXJ0SW5uZXJDb21tZW50cz1mdW5jdGlvbihlLHQpe2lmKGUudHlwZT09PW4uU3ludGF4LkJsb2NrU3RhdGVtZW50JiYwPT09ZS5ib2R5Lmxlbmd0aCl7Zm9yKHZhciByPVtdLGk9dGhpcy5sZWFkaW5nLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgbz10aGlzLmxlYWRpbmdbaV07dC5lbmQub2Zmc2V0Pj1vLnN0YXJ0JiYoci51bnNoaWZ0KG8uY29tbWVudCksdGhpcy5sZWFkaW5nLnNwbGljZShpLDEpLHRoaXMudHJhaWxpbmcuc3BsaWNlKGksMSkpfXIubGVuZ3RoJiYoZS5pbm5lckNvbW1lbnRzPXIpfX0sZS5wcm90b3R5cGUuZmluZFRyYWlsaW5nQ29tbWVudHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107aWYodGhpcy50cmFpbGluZy5sZW5ndGg+MCl7Zm9yKHZhciByPXRoaXMudHJhaWxpbmcubGVuZ3RoLTE7cj49MDstLXIpe3ZhciBuPXRoaXMudHJhaWxpbmdbcl07bi5zdGFydD49ZS5lbmQub2Zmc2V0JiZ0LnVuc2hpZnQobi5jb21tZW50KX1yZXR1cm4gdGhpcy50cmFpbGluZy5sZW5ndGg9MCx0fXZhciBpPXRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGgtMV07aWYoaSYmaS5ub2RlLnRyYWlsaW5nQ29tbWVudHMpe3ZhciBvPWkubm9kZS50cmFpbGluZ0NvbW1lbnRzWzBdO28mJm8ucmFuZ2VbMF0+PWUuZW5kLm9mZnNldCYmKHQ9aS5ub2RlLnRyYWlsaW5nQ29tbWVudHMsZGVsZXRlIGkubm9kZS50cmFpbGluZ0NvbW1lbnRzKX1yZXR1cm4gdH0sZS5wcm90b3R5cGUuZmluZExlYWRpbmdDb21tZW50cz1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1bXTt0aGlzLnN0YWNrLmxlbmd0aD4wJiYoKG89dGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aC0xXSkmJm8uc3RhcnQ+PWUuc3RhcnQub2Zmc2V0KTspdD1vLm5vZGUsdGhpcy5zdGFjay5wb3AoKTtpZih0KXtmb3IodmFyIG49KHQubGVhZGluZ0NvbW1lbnRzP3QubGVhZGluZ0NvbW1lbnRzLmxlbmd0aDowKS0xO24+PTA7LS1uKXt2YXIgaT10LmxlYWRpbmdDb21tZW50c1tuXTtpLnJhbmdlWzFdPD1lLnN0YXJ0Lm9mZnNldCYmKHIudW5zaGlmdChpKSx0LmxlYWRpbmdDb21tZW50cy5zcGxpY2UobiwxKSl9cmV0dXJuIHQubGVhZGluZ0NvbW1lbnRzJiYwPT09dC5sZWFkaW5nQ29tbWVudHMubGVuZ3RoJiZkZWxldGUgdC5sZWFkaW5nQ29tbWVudHMscn1mb3Iobj10aGlzLmxlYWRpbmcubGVuZ3RoLTE7bj49MDstLW4pe3ZhciBvOyhvPXRoaXMubGVhZGluZ1tuXSkuc3RhcnQ8PWUuc3RhcnQub2Zmc2V0JiYoci51bnNoaWZ0KG8uY29tbWVudCksdGhpcy5sZWFkaW5nLnNwbGljZShuLDEpKX1yZXR1cm4gcn0sZS5wcm90b3R5cGUudmlzaXROb2RlPWZ1bmN0aW9uKGUsdCl7aWYoIShlLnR5cGU9PT1uLlN5bnRheC5Qcm9ncmFtJiZlLmJvZHkubGVuZ3RoPjApKXt0aGlzLmluc2VydElubmVyQ29tbWVudHMoZSx0KTt2YXIgcj10aGlzLmZpbmRUcmFpbGluZ0NvbW1lbnRzKHQpLGk9dGhpcy5maW5kTGVhZGluZ0NvbW1lbnRzKHQpO2kubGVuZ3RoPjAmJihlLmxlYWRpbmdDb21tZW50cz1pKSxyLmxlbmd0aD4wJiYoZS50cmFpbGluZ0NvbW1lbnRzPXIpLHRoaXMuc3RhY2sucHVzaCh7bm9kZTplLHN0YXJ0OnQuc3RhcnQub2Zmc2V0fSl9fSxlLnByb3RvdHlwZS52aXNpdENvbW1lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1cIkxcIj09PWUudHlwZVswXT9cIkxpbmVcIjpcIkJsb2NrXCIsbj17dHlwZTpyLHZhbHVlOmUudmFsdWV9O2lmKGUucmFuZ2UmJihuLnJhbmdlPWUucmFuZ2UpLGUubG9jJiYobi5sb2M9ZS5sb2MpLHRoaXMuY29tbWVudHMucHVzaChuKSx0aGlzLmF0dGFjaCl7dmFyIGk9e2NvbW1lbnQ6e3R5cGU6cix2YWx1ZTplLnZhbHVlLHJhbmdlOlt0LnN0YXJ0Lm9mZnNldCx0LmVuZC5vZmZzZXRdfSxzdGFydDp0LnN0YXJ0Lm9mZnNldH07ZS5sb2MmJihpLmNvbW1lbnQubG9jPWUubG9jKSxlLnR5cGU9cix0aGlzLmxlYWRpbmcucHVzaChpKSx0aGlzLnRyYWlsaW5nLnB1c2goaSl9fSxlLnByb3RvdHlwZS52aXNpdD1mdW5jdGlvbihlLHQpe1wiTGluZUNvbW1lbnRcIj09PWUudHlwZXx8XCJCbG9ja0NvbW1lbnRcIj09PWUudHlwZT90aGlzLnZpc2l0Q29tbWVudChlLHQpOnRoaXMuYXR0YWNoJiZ0aGlzLnZpc2l0Tm9kZShlLHQpfSxlfSgpO3QuQ29tbWVudEhhbmRsZXI9aX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlN5bnRheD17QXNzaWdubWVudEV4cHJlc3Npb246XCJBc3NpZ25tZW50RXhwcmVzc2lvblwiLEFzc2lnbm1lbnRQYXR0ZXJuOlwiQXNzaWdubWVudFBhdHRlcm5cIixBcnJheUV4cHJlc3Npb246XCJBcnJheUV4cHJlc3Npb25cIixBcnJheVBhdHRlcm46XCJBcnJheVBhdHRlcm5cIixBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjpcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIsQXdhaXRFeHByZXNzaW9uOlwiQXdhaXRFeHByZXNzaW9uXCIsQmxvY2tTdGF0ZW1lbnQ6XCJCbG9ja1N0YXRlbWVudFwiLEJpbmFyeUV4cHJlc3Npb246XCJCaW5hcnlFeHByZXNzaW9uXCIsQnJlYWtTdGF0ZW1lbnQ6XCJCcmVha1N0YXRlbWVudFwiLENhbGxFeHByZXNzaW9uOlwiQ2FsbEV4cHJlc3Npb25cIixDYXRjaENsYXVzZTpcIkNhdGNoQ2xhdXNlXCIsQ2xhc3NCb2R5OlwiQ2xhc3NCb2R5XCIsQ2xhc3NEZWNsYXJhdGlvbjpcIkNsYXNzRGVjbGFyYXRpb25cIixDbGFzc0V4cHJlc3Npb246XCJDbGFzc0V4cHJlc3Npb25cIixDb25kaXRpb25hbEV4cHJlc3Npb246XCJDb25kaXRpb25hbEV4cHJlc3Npb25cIixDb250aW51ZVN0YXRlbWVudDpcIkNvbnRpbnVlU3RhdGVtZW50XCIsRG9XaGlsZVN0YXRlbWVudDpcIkRvV2hpbGVTdGF0ZW1lbnRcIixEZWJ1Z2dlclN0YXRlbWVudDpcIkRlYnVnZ2VyU3RhdGVtZW50XCIsRW1wdHlTdGF0ZW1lbnQ6XCJFbXB0eVN0YXRlbWVudFwiLEV4cG9ydEFsbERlY2xhcmF0aW9uOlwiRXhwb3J0QWxsRGVjbGFyYXRpb25cIixFeHBvcnREZWZhdWx0RGVjbGFyYXRpb246XCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIixFeHBvcnROYW1lZERlY2xhcmF0aW9uOlwiRXhwb3J0TmFtZWREZWNsYXJhdGlvblwiLEV4cG9ydFNwZWNpZmllcjpcIkV4cG9ydFNwZWNpZmllclwiLEV4cHJlc3Npb25TdGF0ZW1lbnQ6XCJFeHByZXNzaW9uU3RhdGVtZW50XCIsRm9yU3RhdGVtZW50OlwiRm9yU3RhdGVtZW50XCIsRm9yT2ZTdGF0ZW1lbnQ6XCJGb3JPZlN0YXRlbWVudFwiLEZvckluU3RhdGVtZW50OlwiRm9ySW5TdGF0ZW1lbnRcIixGdW5jdGlvbkRlY2xhcmF0aW9uOlwiRnVuY3Rpb25EZWNsYXJhdGlvblwiLEZ1bmN0aW9uRXhwcmVzc2lvbjpcIkZ1bmN0aW9uRXhwcmVzc2lvblwiLElkZW50aWZpZXI6XCJJZGVudGlmaWVyXCIsSWZTdGF0ZW1lbnQ6XCJJZlN0YXRlbWVudFwiLEltcG9ydERlY2xhcmF0aW9uOlwiSW1wb3J0RGVjbGFyYXRpb25cIixJbXBvcnREZWZhdWx0U3BlY2lmaWVyOlwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiLEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcjpcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiLEltcG9ydFNwZWNpZmllcjpcIkltcG9ydFNwZWNpZmllclwiLExpdGVyYWw6XCJMaXRlcmFsXCIsTGFiZWxlZFN0YXRlbWVudDpcIkxhYmVsZWRTdGF0ZW1lbnRcIixMb2dpY2FsRXhwcmVzc2lvbjpcIkxvZ2ljYWxFeHByZXNzaW9uXCIsTWVtYmVyRXhwcmVzc2lvbjpcIk1lbWJlckV4cHJlc3Npb25cIixNZXRhUHJvcGVydHk6XCJNZXRhUHJvcGVydHlcIixNZXRob2REZWZpbml0aW9uOlwiTWV0aG9kRGVmaW5pdGlvblwiLE5ld0V4cHJlc3Npb246XCJOZXdFeHByZXNzaW9uXCIsT2JqZWN0RXhwcmVzc2lvbjpcIk9iamVjdEV4cHJlc3Npb25cIixPYmplY3RQYXR0ZXJuOlwiT2JqZWN0UGF0dGVyblwiLFByb2dyYW06XCJQcm9ncmFtXCIsUHJvcGVydHk6XCJQcm9wZXJ0eVwiLFJlc3RFbGVtZW50OlwiUmVzdEVsZW1lbnRcIixSZXR1cm5TdGF0ZW1lbnQ6XCJSZXR1cm5TdGF0ZW1lbnRcIixTZXF1ZW5jZUV4cHJlc3Npb246XCJTZXF1ZW5jZUV4cHJlc3Npb25cIixTcHJlYWRFbGVtZW50OlwiU3ByZWFkRWxlbWVudFwiLFN1cGVyOlwiU3VwZXJcIixTd2l0Y2hDYXNlOlwiU3dpdGNoQ2FzZVwiLFN3aXRjaFN0YXRlbWVudDpcIlN3aXRjaFN0YXRlbWVudFwiLFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjpcIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvblwiLFRlbXBsYXRlRWxlbWVudDpcIlRlbXBsYXRlRWxlbWVudFwiLFRlbXBsYXRlTGl0ZXJhbDpcIlRlbXBsYXRlTGl0ZXJhbFwiLFRoaXNFeHByZXNzaW9uOlwiVGhpc0V4cHJlc3Npb25cIixUaHJvd1N0YXRlbWVudDpcIlRocm93U3RhdGVtZW50XCIsVHJ5U3RhdGVtZW50OlwiVHJ5U3RhdGVtZW50XCIsVW5hcnlFeHByZXNzaW9uOlwiVW5hcnlFeHByZXNzaW9uXCIsVXBkYXRlRXhwcmVzc2lvbjpcIlVwZGF0ZUV4cHJlc3Npb25cIixWYXJpYWJsZURlY2xhcmF0aW9uOlwiVmFyaWFibGVEZWNsYXJhdGlvblwiLFZhcmlhYmxlRGVjbGFyYXRvcjpcIlZhcmlhYmxlRGVjbGFyYXRvclwiLFdoaWxlU3RhdGVtZW50OlwiV2hpbGVTdGF0ZW1lbnRcIixXaXRoU3RhdGVtZW50OlwiV2l0aFN0YXRlbWVudFwiLFlpZWxkRXhwcmVzc2lvbjpcIllpZWxkRXhwcmVzc2lvblwifX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihlW3JdPXRbcl0pfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXIoNCksYT1yKDUpLHM9cig2KSx1PXIoNyksbD1yKDgpLGM9cigxMyksaD1yKDE0KTtmdW5jdGlvbiBwKGUpe3ZhciB0O3N3aXRjaChlLnR5cGUpe2Nhc2Ugcy5KU1hTeW50YXguSlNYSWRlbnRpZmllcjp0PWUubmFtZTticmVhaztjYXNlIHMuSlNYU3ludGF4LkpTWE5hbWVzcGFjZWROYW1lOnZhciByPWU7dD1wKHIubmFtZXNwYWNlKStcIjpcIitwKHIubmFtZSk7YnJlYWs7Y2FzZSBzLkpTWFN5bnRheC5KU1hNZW1iZXJFeHByZXNzaW9uOnZhciBuPWU7dD1wKG4ub2JqZWN0KStcIi5cIitwKG4ucHJvcGVydHkpfXJldHVybiB0fWMuVG9rZW5OYW1lWzEwMF09XCJKU1hJZGVudGlmaWVyXCIsYy5Ub2tlbk5hbWVbMTAxXT1cIkpTWFRleHRcIjt2YXIgZj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQscixuKXtyZXR1cm4gZS5jYWxsKHRoaXMsdCxyLG4pfHx0aGlzfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUucGFyc2VQcmltYXJ5RXhwcmVzc2lvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hdGNoKFwiPFwiKT90aGlzLnBhcnNlSlNYUm9vdCgpOmUucHJvdG90eXBlLnBhcnNlUHJpbWFyeUV4cHJlc3Npb24uY2FsbCh0aGlzKX0sdC5wcm90b3R5cGUuc3RhcnRKU1g9ZnVuY3Rpb24oKXt0aGlzLnNjYW5uZXIuaW5kZXg9dGhpcy5zdGFydE1hcmtlci5pbmRleCx0aGlzLnNjYW5uZXIubGluZU51bWJlcj10aGlzLnN0YXJ0TWFya2VyLmxpbmUsdGhpcy5zY2FubmVyLmxpbmVTdGFydD10aGlzLnN0YXJ0TWFya2VyLmluZGV4LXRoaXMuc3RhcnRNYXJrZXIuY29sdW1ufSx0LnByb3RvdHlwZS5maW5pc2hKU1g9ZnVuY3Rpb24oKXt0aGlzLm5leHRUb2tlbigpfSx0LnByb3RvdHlwZS5yZWVudGVySlNYPWZ1bmN0aW9uKCl7dGhpcy5zdGFydEpTWCgpLHRoaXMuZXhwZWN0SlNYKFwifVwiKSx0aGlzLmNvbmZpZy50b2tlbnMmJnRoaXMudG9rZW5zLnBvcCgpfSx0LnByb3RvdHlwZS5jcmVhdGVKU1hOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29sbGVjdENvbW1lbnRzKCkse2luZGV4OnRoaXMuc2Nhbm5lci5pbmRleCxsaW5lOnRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLGNvbHVtbjp0aGlzLnNjYW5uZXIuaW5kZXgtdGhpcy5zY2FubmVyLmxpbmVTdGFydH19LHQucHJvdG90eXBlLmNyZWF0ZUpTWENoaWxkTm9kZT1mdW5jdGlvbigpe3JldHVybntpbmRleDp0aGlzLnNjYW5uZXIuaW5kZXgsbGluZTp0aGlzLnNjYW5uZXIubGluZU51bWJlcixjb2x1bW46dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnR9fSx0LnByb3RvdHlwZS5zY2FuWEhUTUxFbnRpdHk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiJlwiLHI9ITAsbj0hMSxpPSExLGE9ITE7IXRoaXMuc2Nhbm5lci5lb2YoKSYmciYmIW47KXt2YXIgcz10aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleF07aWYocz09PWUpYnJlYWs7aWYobj1cIjtcIj09PXMsdCs9cywrK3RoaXMuc2Nhbm5lci5pbmRleCwhbilzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMjppPVwiI1wiPT09czticmVhaztjYXNlIDM6aSYmKHI9KGE9XCJ4XCI9PT1zKXx8by5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQocy5jaGFyQ29kZUF0KDApKSxpPWkmJiFhKTticmVhaztkZWZhdWx0OnI9KHI9ciYmIShpJiYhby5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQocy5jaGFyQ29kZUF0KDApKSkpJiYhKGEmJiFvLkNoYXJhY3Rlci5pc0hleERpZ2l0KHMuY2hhckNvZGVBdCgwKSkpfX1pZihyJiZuJiZ0Lmxlbmd0aD4yKXt2YXIgdT10LnN1YnN0cigxLHQubGVuZ3RoLTIpO2kmJnUubGVuZ3RoPjE/dD1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHUuc3Vic3RyKDEpLDEwKSk6YSYmdS5sZW5ndGg+Mj90PVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoXCIwXCIrdS5zdWJzdHIoMSksMTYpKTppfHxhfHwhaC5YSFRNTEVudGl0aWVzW3VdfHwodD1oLlhIVE1MRW50aXRpZXNbdV0pfXJldHVybiB0fSx0LnByb3RvdHlwZS5sZXhKU1g9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4KTtpZig2MD09PWV8fDYyPT09ZXx8NDc9PT1lfHw1OD09PWV8fDYxPT09ZXx8MTIzPT09ZXx8MTI1PT09ZSlyZXR1cm57dHlwZTo3LHZhbHVlOnM9dGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXgrK10sbGluZU51bWJlcjp0aGlzLnNjYW5uZXIubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5zY2FubmVyLmxpbmVTdGFydCxzdGFydDp0aGlzLnNjYW5uZXIuaW5kZXgtMSxlbmQ6dGhpcy5zY2FubmVyLmluZGV4fTtpZigzND09PWV8fDM5PT09ZSl7Zm9yKHZhciB0PXRoaXMuc2Nhbm5lci5pbmRleCxyPXRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4KytdLG49XCJcIjshdGhpcy5zY2FubmVyLmVvZigpJiYodT10aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleCsrXSkhPT1yOyluKz1cIiZcIj09PXU/dGhpcy5zY2FuWEhUTUxFbnRpdHkocik6dTtyZXR1cm57dHlwZTo4LHZhbHVlOm4sbGluZU51bWJlcjp0aGlzLnNjYW5uZXIubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5zY2FubmVyLmxpbmVTdGFydCxzdGFydDp0LGVuZDp0aGlzLnNjYW5uZXIuaW5kZXh9fWlmKDQ2PT09ZSl7dmFyIGk9dGhpcy5zY2FubmVyLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuc2Nhbm5lci5pbmRleCsxKSxhPXRoaXMuc2Nhbm5lci5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLnNjYW5uZXIuaW5kZXgrMikscz00Nj09PWkmJjQ2PT09YT9cIi4uLlwiOlwiLlwiO3JldHVybiB0PXRoaXMuc2Nhbm5lci5pbmRleCx0aGlzLnNjYW5uZXIuaW5kZXgrPXMubGVuZ3RoLHt0eXBlOjcsdmFsdWU6cyxsaW5lTnVtYmVyOnRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLnNjYW5uZXIubGluZVN0YXJ0LHN0YXJ0OnQsZW5kOnRoaXMuc2Nhbm5lci5pbmRleH19aWYoOTY9PT1lKXJldHVybnt0eXBlOjEwLHZhbHVlOlwiXCIsbGluZU51bWJlcjp0aGlzLnNjYW5uZXIubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5zY2FubmVyLmxpbmVTdGFydCxzdGFydDp0aGlzLnNjYW5uZXIuaW5kZXgsZW5kOnRoaXMuc2Nhbm5lci5pbmRleH07aWYoby5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQoZSkmJjkyIT09ZSl7Zm9yKHQ9dGhpcy5zY2FubmVyLmluZGV4LCsrdGhpcy5zY2FubmVyLmluZGV4OyF0aGlzLnNjYW5uZXIuZW9mKCk7KXt2YXIgdT10aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4KTtpZihvLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KHUpJiY5MiE9PXUpKyt0aGlzLnNjYW5uZXIuaW5kZXg7ZWxzZXtpZig0NSE9PXUpYnJlYWs7Kyt0aGlzLnNjYW5uZXIuaW5kZXh9fXJldHVybnt0eXBlOjEwMCx2YWx1ZTp0aGlzLnNjYW5uZXIuc291cmNlLnNsaWNlKHQsdGhpcy5zY2FubmVyLmluZGV4KSxsaW5lTnVtYmVyOnRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLnNjYW5uZXIubGluZVN0YXJ0LHN0YXJ0OnQsZW5kOnRoaXMuc2Nhbm5lci5pbmRleH19cmV0dXJuIHRoaXMuc2Nhbm5lci5sZXgoKX0sdC5wcm90b3R5cGUubmV4dEpTWFRva2VuPWZ1bmN0aW9uKCl7dGhpcy5jb2xsZWN0Q29tbWVudHMoKSx0aGlzLnN0YXJ0TWFya2VyLmluZGV4PXRoaXMuc2Nhbm5lci5pbmRleCx0aGlzLnN0YXJ0TWFya2VyLmxpbmU9dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsdGhpcy5zdGFydE1hcmtlci5jb2x1bW49dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7dmFyIGU9dGhpcy5sZXhKU1goKTtyZXR1cm4gdGhpcy5sYXN0TWFya2VyLmluZGV4PXRoaXMuc2Nhbm5lci5pbmRleCx0aGlzLmxhc3RNYXJrZXIubGluZT10aGlzLnNjYW5uZXIubGluZU51bWJlcix0aGlzLmxhc3RNYXJrZXIuY29sdW1uPXRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0LHRoaXMuY29uZmlnLnRva2VucyYmdGhpcy50b2tlbnMucHVzaCh0aGlzLmNvbnZlcnRUb2tlbihlKSksZX0sdC5wcm90b3R5cGUubmV4dEpTWFRleHQ9ZnVuY3Rpb24oKXt0aGlzLnN0YXJ0TWFya2VyLmluZGV4PXRoaXMuc2Nhbm5lci5pbmRleCx0aGlzLnN0YXJ0TWFya2VyLmxpbmU9dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsdGhpcy5zdGFydE1hcmtlci5jb2x1bW49dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7Zm9yKHZhciBlPXRoaXMuc2Nhbm5lci5pbmRleCx0PVwiXCI7IXRoaXMuc2Nhbm5lci5lb2YoKTspe3ZhciByPXRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4XTtpZihcIntcIj09PXJ8fFwiPFwiPT09cilicmVhazsrK3RoaXMuc2Nhbm5lci5pbmRleCx0Kz1yLG8uQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3Ioci5jaGFyQ29kZUF0KDApKSYmKCsrdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXCJcXHJcIj09PXImJlwiXFxuXCI9PT10aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleF0mJisrdGhpcy5zY2FubmVyLmluZGV4LHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ9dGhpcy5zY2FubmVyLmluZGV4KX10aGlzLmxhc3RNYXJrZXIuaW5kZXg9dGhpcy5zY2FubmVyLmluZGV4LHRoaXMubGFzdE1hcmtlci5saW5lPXRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLHRoaXMubGFzdE1hcmtlci5jb2x1bW49dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7dmFyIG49e3R5cGU6MTAxLHZhbHVlOnQsbGluZU51bWJlcjp0aGlzLnNjYW5uZXIubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5zY2FubmVyLmxpbmVTdGFydCxzdGFydDplLGVuZDp0aGlzLnNjYW5uZXIuaW5kZXh9O3JldHVybiB0Lmxlbmd0aD4wJiZ0aGlzLmNvbmZpZy50b2tlbnMmJnRoaXMudG9rZW5zLnB1c2godGhpcy5jb252ZXJ0VG9rZW4obikpLG59LHQucHJvdG90eXBlLnBlZWtKU1hUb2tlbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuc2Nhbm5lci5zYXZlU3RhdGUoKTt0aGlzLnNjYW5uZXIuc2NhbkNvbW1lbnRzKCk7dmFyIHQ9dGhpcy5sZXhKU1goKTtyZXR1cm4gdGhpcy5zY2FubmVyLnJlc3RvcmVTdGF0ZShlKSx0fSx0LnByb3RvdHlwZS5leHBlY3RKU1g9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5uZXh0SlNYVG9rZW4oKTs3PT09dC50eXBlJiZ0LnZhbHVlPT09ZXx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0KX0sdC5wcm90b3R5cGUubWF0Y2hKU1g9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wZWVrSlNYVG9rZW4oKTtyZXR1cm4gNz09PXQudHlwZSYmdC52YWx1ZT09PWV9LHQucHJvdG90eXBlLnBhcnNlSlNYSWRlbnRpZmllcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlSlNYTm9kZSgpLHQ9dGhpcy5uZXh0SlNYVG9rZW4oKTtyZXR1cm4gMTAwIT09dC50eXBlJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHQpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hJZGVudGlmaWVyKHQudmFsdWUpKX0sdC5wcm90b3R5cGUucGFyc2VKU1hFbGVtZW50TmFtZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlSlNYTm9kZSgpLHQ9dGhpcy5wYXJzZUpTWElkZW50aWZpZXIoKTtpZih0aGlzLm1hdGNoSlNYKFwiOlwiKSl7dmFyIHI9dDt0aGlzLmV4cGVjdEpTWChcIjpcIik7dmFyIG49dGhpcy5wYXJzZUpTWElkZW50aWZpZXIoKTt0PXRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hOYW1lc3BhY2VkTmFtZShyLG4pKX1lbHNlIGlmKHRoaXMubWF0Y2hKU1goXCIuXCIpKWZvcig7dGhpcy5tYXRjaEpTWChcIi5cIik7KXt2YXIgaT10O3RoaXMuZXhwZWN0SlNYKFwiLlwiKTt2YXIgbz10aGlzLnBhcnNlSlNYSWRlbnRpZmllcigpO3Q9dGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWE1lbWJlckV4cHJlc3Npb24oaSxvKSl9cmV0dXJuIHR9LHQucHJvdG90eXBlLnBhcnNlSlNYQXR0cmlidXRlTmFtZT1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5jcmVhdGVKU1hOb2RlKCkscj10aGlzLnBhcnNlSlNYSWRlbnRpZmllcigpO2lmKHRoaXMubWF0Y2hKU1goXCI6XCIpKXt2YXIgbj1yO3RoaXMuZXhwZWN0SlNYKFwiOlwiKTt2YXIgaT10aGlzLnBhcnNlSlNYSWRlbnRpZmllcigpO2U9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkpTWE5hbWVzcGFjZWROYW1lKG4saSkpfWVsc2UgZT1yO3JldHVybiBlfSx0LnByb3RvdHlwZS5wYXJzZUpTWFN0cmluZ0xpdGVyYWxBdHRyaWJ1dGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZUpTWE5vZGUoKSx0PXRoaXMubmV4dEpTWFRva2VuKCk7OCE9PXQudHlwZSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0KTt2YXIgcj10aGlzLmdldFRva2VuUmF3KHQpO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IHUuTGl0ZXJhbCh0LnZhbHVlLHIpKX0sdC5wcm90b3R5cGUucGFyc2VKU1hFeHByZXNzaW9uQXR0cmlidXRlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVKU1hOb2RlKCk7dGhpcy5leHBlY3RKU1goXCJ7XCIpLHRoaXMuZmluaXNoSlNYKCksdGhpcy5tYXRjaChcIn1cIikmJnRoaXMudG9sZXJhdGVFcnJvcihcIkpTWCBhdHRyaWJ1dGVzIG11c3Qgb25seSBiZSBhc3NpZ25lZCBhIG5vbi1lbXB0eSBleHByZXNzaW9uXCIpO3ZhciB0PXRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO3JldHVybiB0aGlzLnJlZW50ZXJKU1goKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuSlNYRXhwcmVzc2lvbkNvbnRhaW5lcih0KSl9LHQucHJvdG90eXBlLnBhcnNlSlNYQXR0cmlidXRlVmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXRjaEpTWChcIntcIik/dGhpcy5wYXJzZUpTWEV4cHJlc3Npb25BdHRyaWJ1dGUoKTp0aGlzLm1hdGNoSlNYKFwiPFwiKT90aGlzLnBhcnNlSlNYRWxlbWVudCgpOnRoaXMucGFyc2VKU1hTdHJpbmdMaXRlcmFsQXR0cmlidXRlKCl9LHQucHJvdG90eXBlLnBhcnNlSlNYTmFtZVZhbHVlQXR0cmlidXRlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVKU1hOb2RlKCksdD10aGlzLnBhcnNlSlNYQXR0cmlidXRlTmFtZSgpLHI9bnVsbDtyZXR1cm4gdGhpcy5tYXRjaEpTWChcIj1cIikmJih0aGlzLmV4cGVjdEpTWChcIj1cIikscj10aGlzLnBhcnNlSlNYQXR0cmlidXRlVmFsdWUoKSksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWEF0dHJpYnV0ZSh0LHIpKX0sdC5wcm90b3R5cGUucGFyc2VKU1hTcHJlYWRBdHRyaWJ1dGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZUpTWE5vZGUoKTt0aGlzLmV4cGVjdEpTWChcIntcIiksdGhpcy5leHBlY3RKU1goXCIuLi5cIiksdGhpcy5maW5pc2hKU1goKTt2YXIgdD10aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtyZXR1cm4gdGhpcy5yZWVudGVySlNYKCksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWFNwcmVhZEF0dHJpYnV0ZSh0KSl9LHQucHJvdG90eXBlLnBhcnNlSlNYQXR0cmlidXRlcz1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXTshdGhpcy5tYXRjaEpTWChcIi9cIikmJiF0aGlzLm1hdGNoSlNYKFwiPlwiKTspe3ZhciB0PXRoaXMubWF0Y2hKU1goXCJ7XCIpP3RoaXMucGFyc2VKU1hTcHJlYWRBdHRyaWJ1dGUoKTp0aGlzLnBhcnNlSlNYTmFtZVZhbHVlQXR0cmlidXRlKCk7ZS5wdXNoKHQpfXJldHVybiBlfSx0LnByb3RvdHlwZS5wYXJzZUpTWE9wZW5pbmdFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVKU1hOb2RlKCk7dGhpcy5leHBlY3RKU1goXCI8XCIpO3ZhciB0PXRoaXMucGFyc2VKU1hFbGVtZW50TmFtZSgpLHI9dGhpcy5wYXJzZUpTWEF0dHJpYnV0ZXMoKSxuPXRoaXMubWF0Y2hKU1goXCIvXCIpO3JldHVybiBuJiZ0aGlzLmV4cGVjdEpTWChcIi9cIiksdGhpcy5leHBlY3RKU1goXCI+XCIpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5KU1hPcGVuaW5nRWxlbWVudCh0LG4scikpfSx0LnByb3RvdHlwZS5wYXJzZUpTWEJvdW5kYXJ5RWxlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlSlNYTm9kZSgpO2lmKHRoaXMuZXhwZWN0SlNYKFwiPFwiKSx0aGlzLm1hdGNoSlNYKFwiL1wiKSl7dGhpcy5leHBlY3RKU1goXCIvXCIpO3ZhciB0PXRoaXMucGFyc2VKU1hFbGVtZW50TmFtZSgpO3JldHVybiB0aGlzLmV4cGVjdEpTWChcIj5cIiksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWENsb3NpbmdFbGVtZW50KHQpKX12YXIgcj10aGlzLnBhcnNlSlNYRWxlbWVudE5hbWUoKSxuPXRoaXMucGFyc2VKU1hBdHRyaWJ1dGVzKCksaT10aGlzLm1hdGNoSlNYKFwiL1wiKTtyZXR1cm4gaSYmdGhpcy5leHBlY3RKU1goXCIvXCIpLHRoaXMuZXhwZWN0SlNYKFwiPlwiKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuSlNYT3BlbmluZ0VsZW1lbnQocixpLG4pKX0sdC5wcm90b3R5cGUucGFyc2VKU1hFbXB0eUV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZUpTWENoaWxkTm9kZSgpO3JldHVybiB0aGlzLmNvbGxlY3RDb21tZW50cygpLHRoaXMubGFzdE1hcmtlci5pbmRleD10aGlzLnNjYW5uZXIuaW5kZXgsdGhpcy5sYXN0TWFya2VyLmxpbmU9dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsdGhpcy5sYXN0TWFya2VyLmNvbHVtbj10aGlzLnNjYW5uZXIuaW5kZXgtdGhpcy5zY2FubmVyLmxpbmVTdGFydCx0aGlzLmZpbmFsaXplKGUsbmV3IGEuSlNYRW1wdHlFeHByZXNzaW9uKX0sdC5wcm90b3R5cGUucGFyc2VKU1hFeHByZXNzaW9uQ29udGFpbmVyPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmNyZWF0ZUpTWE5vZGUoKTtyZXR1cm4gdGhpcy5leHBlY3RKU1goXCJ7XCIpLHRoaXMubWF0Y2hKU1goXCJ9XCIpPyhlPXRoaXMucGFyc2VKU1hFbXB0eUV4cHJlc3Npb24oKSx0aGlzLmV4cGVjdEpTWChcIn1cIikpOih0aGlzLmZpbmlzaEpTWCgpLGU9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCksdGhpcy5yZWVudGVySlNYKCkpLHRoaXMuZmluYWxpemUodCxuZXcgYS5KU1hFeHByZXNzaW9uQ29udGFpbmVyKGUpKX0sdC5wcm90b3R5cGUucGFyc2VKU1hDaGlsZHJlbj1mdW5jdGlvbigpe2Zvcih2YXIgZT1bXTshdGhpcy5zY2FubmVyLmVvZigpOyl7dmFyIHQ9dGhpcy5jcmVhdGVKU1hDaGlsZE5vZGUoKSxyPXRoaXMubmV4dEpTWFRleHQoKTtpZihyLnN0YXJ0PHIuZW5kKXt2YXIgbj10aGlzLmdldFRva2VuUmF3KHIpLGk9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkpTWFRleHQoci52YWx1ZSxuKSk7ZS5wdXNoKGkpfWlmKFwie1wiIT09dGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdKWJyZWFrO3ZhciBvPXRoaXMucGFyc2VKU1hFeHByZXNzaW9uQ29udGFpbmVyKCk7ZS5wdXNoKG8pfXJldHVybiBlfSx0LnByb3RvdHlwZS5wYXJzZUNvbXBsZXhKU1hFbGVtZW50PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXTshdGhpcy5zY2FubmVyLmVvZigpOyl7ZS5jaGlsZHJlbj1lLmNoaWxkcmVuLmNvbmNhdCh0aGlzLnBhcnNlSlNYQ2hpbGRyZW4oKSk7dmFyIHI9dGhpcy5jcmVhdGVKU1hDaGlsZE5vZGUoKSxuPXRoaXMucGFyc2VKU1hCb3VuZGFyeUVsZW1lbnQoKTtpZihuLnR5cGU9PT1zLkpTWFN5bnRheC5KU1hPcGVuaW5nRWxlbWVudCl7dmFyIGk9bjtpZihpLnNlbGZDbG9zaW5nKXt2YXIgbz10aGlzLmZpbmFsaXplKHIsbmV3IGEuSlNYRWxlbWVudChpLFtdLG51bGwpKTtlLmNoaWxkcmVuLnB1c2gobyl9ZWxzZSB0LnB1c2goZSksZT17bm9kZTpyLG9wZW5pbmc6aSxjbG9zaW5nOm51bGwsY2hpbGRyZW46W119fWlmKG4udHlwZT09PXMuSlNYU3ludGF4LkpTWENsb3NpbmdFbGVtZW50KXtlLmNsb3Npbmc9bjt2YXIgdT1wKGUub3BlbmluZy5uYW1lKTtpZih1IT09cChlLmNsb3NpbmcubmFtZSkmJnRoaXMudG9sZXJhdGVFcnJvcihcIkV4cGVjdGVkIGNvcnJlc3BvbmRpbmcgSlNYIGNsb3NpbmcgdGFnIGZvciAlMFwiLHUpLCEodC5sZW5ndGg+MCkpYnJlYWs7bz10aGlzLmZpbmFsaXplKGUubm9kZSxuZXcgYS5KU1hFbGVtZW50KGUub3BlbmluZyxlLmNoaWxkcmVuLGUuY2xvc2luZykpLChlPXRbdC5sZW5ndGgtMV0pLmNoaWxkcmVuLnB1c2gobyksdC5wb3AoKX19cmV0dXJuIGV9LHQucHJvdG90eXBlLnBhcnNlSlNYRWxlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlSlNYTm9kZSgpLHQ9dGhpcy5wYXJzZUpTWE9wZW5pbmdFbGVtZW50KCkscj1bXSxuPW51bGw7aWYoIXQuc2VsZkNsb3Npbmcpe3ZhciBpPXRoaXMucGFyc2VDb21wbGV4SlNYRWxlbWVudCh7bm9kZTplLG9wZW5pbmc6dCxjbG9zaW5nOm4sY2hpbGRyZW46cn0pO3I9aS5jaGlsZHJlbixuPWkuY2xvc2luZ31yZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLkpTWEVsZW1lbnQodCxyLG4pKX0sdC5wcm90b3R5cGUucGFyc2VKU1hSb290PWZ1bmN0aW9uKCl7dGhpcy5jb25maWcudG9rZW5zJiZ0aGlzLnRva2Vucy5wb3AoKSx0aGlzLnN0YXJ0SlNYKCk7dmFyIGU9dGhpcy5wYXJzZUpTWEVsZW1lbnQoKTtyZXR1cm4gdGhpcy5maW5pc2hKU1goKSxlfSx0LnByb3RvdHlwZS5pc1N0YXJ0T2ZFeHByZXNzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIGUucHJvdG90eXBlLmlzU3RhcnRPZkV4cHJlc3Npb24uY2FsbCh0aGlzKXx8dGhpcy5tYXRjaChcIjxcIil9LHR9KGwuUGFyc2VyKTt0LkpTWFBhcnNlcj1mfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPXtOb25Bc2NpaUlkZW50aWZpZXJTdGFydDovW1xceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVFLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTgtXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUItXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjlEXFx1QTZBMC1cXHVBNkVGXFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FEXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REQ0MC1cXHVERDc0XFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYzMC1cXHVERjRBXFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXFx1REZEMS1cXHVERkQ1XXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzNcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXXxcXHVEODA0W1xcdURDMDMtXFx1REMzN1xcdURDODMtXFx1RENBRlxcdURDRDAtXFx1RENFOFxcdUREMDMtXFx1REQyNlxcdURENTAtXFx1REQ3MlxcdURENzZcXHVERDgzLVxcdUREQjJcXHVEREMxLVxcdUREQzRcXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUyQlxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFREVcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzRFxcdURGNTBcXHVERjVELVxcdURGNjFdfFxcdUQ4MDVbXFx1REM4MC1cXHVEQ0FGXFx1RENDNFxcdURDQzVcXHVEQ0M3XFx1REQ4MC1cXHVEREFFXFx1REREOC1cXHVERERCXFx1REUwMC1cXHVERTJGXFx1REU0NFxcdURFODAtXFx1REVBQVxcdURGMDAtXFx1REYxOV18XFx1RDgwNltcXHVEQ0EwLVxcdURDREZcXHVEQ0ZGXFx1REVDMC1cXHVERUY4XXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REYwMC1cXHVERjQ0XFx1REY1MFxcdURGOTMtXFx1REY5Rl18XFx1RDgyQ1tcXHVEQzAwXFx1REMwMV18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQl18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXS8sTm9uQXNjaWlJZGVudGlmaWVyUGFydDovW1xceEFBXFx4QjVcXHhCN1xceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzMDAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODYtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDgzLVxcdTA0ODdcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDU5MS1cXHUwNUJEXFx1MDVCRlxcdTA1QzFcXHUwNUMyXFx1MDVDNFxcdTA1QzVcXHUwNUM3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYxMC1cXHUwNjFBXFx1MDYyMC1cXHUwNjY5XFx1MDY2RS1cXHUwNkQzXFx1MDZENS1cXHUwNkRDXFx1MDZERi1cXHUwNkU4XFx1MDZFQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTAtXFx1MDc0QVxcdTA3NEQtXFx1MDdCMVxcdTA3QzAtXFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MkRcXHUwODQwLVxcdTA4NUJcXHUwOEEwLVxcdTA4QjRcXHUwOEUzLVxcdTA5NjNcXHUwOTY2LVxcdTA5NkZcXHUwOTcxLVxcdTA5ODNcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJDLVxcdTA5QzRcXHUwOUM3XFx1MDlDOFxcdTA5Q0ItXFx1MDlDRVxcdTA5RDdcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFM1xcdTA5RTYtXFx1MDlGMVxcdTBBMDEtXFx1MEEwM1xcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEEzQ1xcdTBBM0UtXFx1MEE0MlxcdTBBNDdcXHUwQTQ4XFx1MEE0Qi1cXHUwQTREXFx1MEE1MVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTY2LVxcdTBBNzVcXHUwQTgxLVxcdTBBODNcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkMtXFx1MEFDNVxcdTBBQzctXFx1MEFDOVxcdTBBQ0ItXFx1MEFDRFxcdTBBRDBcXHUwQUUwLVxcdTBBRTNcXHUwQUU2LVxcdTBBRUZcXHUwQUY5XFx1MEIwMS1cXHUwQjAzXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0MtXFx1MEI0NFxcdTBCNDdcXHUwQjQ4XFx1MEI0Qi1cXHUwQjREXFx1MEI1NlxcdTBCNTdcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2M1xcdTBCNjYtXFx1MEI2RlxcdTBCNzFcXHUwQjgyXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkJFLVxcdTBCQzJcXHUwQkM2LVxcdTBCQzhcXHUwQkNBLVxcdTBCQ0RcXHUwQkQwXFx1MEJEN1xcdTBCRTYtXFx1MEJFRlxcdTBDMDAtXFx1MEMwM1xcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0QtXFx1MEM0NFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM1OC1cXHUwQzVBXFx1MEM2MC1cXHUwQzYzXFx1MEM2Ni1cXHUwQzZGXFx1MEM4MS1cXHUwQzgzXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCQy1cXHUwQ0M0XFx1MENDNi1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NEXFx1MENENVxcdTBDRDZcXHUwQ0RFXFx1MENFMC1cXHUwQ0UzXFx1MENFNi1cXHUwQ0VGXFx1MENGMVxcdTBDRjJcXHUwRDAxLVxcdTBEMDNcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNELVxcdTBENDRcXHUwRDQ2LVxcdTBENDhcXHUwRDRBLVxcdTBENEVcXHUwRDU3XFx1MEQ1Ri1cXHUwRDYzXFx1MEQ2Ni1cXHUwRDZGXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4MlxcdTBEODNcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREU2LVxcdTBERUZcXHUwREYyXFx1MERGM1xcdTBFMDEtXFx1MEUzQVxcdTBFNDAtXFx1MEU0RVxcdTBFNTAtXFx1MEU1OVxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUI5XFx1MEVCQi1cXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFQzgtXFx1MEVDRFxcdTBFRDAtXFx1MEVEOVxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjE4XFx1MEYxOVxcdTBGMjAtXFx1MEYyOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGM0UtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGNzEtXFx1MEY4NFxcdTBGODYtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQzZcXHUxMDAwLVxcdTEwNDlcXHUxMDUwLVxcdTEwOURcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM1RC1cXHUxMzVGXFx1MTM2OS1cXHUxMzcxXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzE0XFx1MTcyMC1cXHUxNzM0XFx1MTc0MC1cXHUxNzUzXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc3MlxcdTE3NzNcXHUxNzgwLVxcdTE3RDNcXHUxN0Q3XFx1MTdEQ1xcdTE3RERcXHUxN0UwLVxcdTE3RTlcXHUxODBCLVxcdTE4MERcXHUxODEwLVxcdTE4MTlcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTIwLVxcdTE5MkJcXHUxOTMwLVxcdTE5M0JcXHUxOTQ2LVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxOUQwLVxcdTE5REFcXHUxQTAwLVxcdTFBMUJcXHUxQTIwLVxcdTFBNUVcXHUxQTYwLVxcdTFBN0NcXHUxQTdGLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUE3XFx1MUFCMC1cXHUxQUJEXFx1MUIwMC1cXHUxQjRCXFx1MUI1MC1cXHUxQjU5XFx1MUI2Qi1cXHUxQjczXFx1MUI4MC1cXHUxQkYzXFx1MUMwMC1cXHUxQzM3XFx1MUM0MC1cXHUxQzQ5XFx1MUM0RC1cXHUxQzdEXFx1MUNEMC1cXHUxQ0QyXFx1MUNENC1cXHUxQ0Y2XFx1MUNGOFxcdTFDRjlcXHUxRDAwLVxcdTFERjVcXHUxREZDLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjAwQ1xcdTIwMERcXHUyMDNGXFx1MjA0MFxcdTIwNTRcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIwRDAtXFx1MjBEQ1xcdTIwRTFcXHUyMEU1LVxcdTIwRjBcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE2MC1cXHUyMTg4XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ3Ri1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkRFMC1cXHUyREZGXFx1MzAwNS1cXHUzMDA3XFx1MzAyMS1cXHUzMDJGXFx1MzAzMS1cXHUzMDM1XFx1MzAzOC1cXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5OS1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkQ1XFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjJCXFx1QTY0MC1cXHVBNjZGXFx1QTY3NC1cXHVBNjdEXFx1QTY3Ri1cXHVBNkYxXFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FEXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODI3XFx1QTg0MC1cXHVBODczXFx1QTg4MC1cXHVBOEM0XFx1QThEMC1cXHVBOEQ5XFx1QThFMC1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTAwLVxcdUE5MkRcXHVBOTMwLVxcdUE5NTNcXHVBOTYwLVxcdUE5N0NcXHVBOTgwLVxcdUE5QzBcXHVBOUNGLVxcdUE5RDlcXHVBOUUwLVxcdUE5RkVcXHVBQTAwLVxcdUFBMzZcXHVBQTQwLVxcdUFBNERcXHVBQTUwLVxcdUFBNTlcXHVBQTYwLVxcdUFBNzZcXHVBQTdBLVxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUZcXHVBQUYyLVxcdUFBRjZcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjVcXHVBQjcwLVxcdUFCRUFcXHVBQkVDXFx1QUJFRFxcdUFCRjAtXFx1QUJGOVxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMUQtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJGXFx1RkUzM1xcdUZFMzRcXHVGRTRELVxcdUZFNEZcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjEwLVxcdUZGMTlcXHVGRjIxLVxcdUZGM0FcXHVGRjNGXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REQ0MC1cXHVERDc0XFx1RERGRFxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURFRTBcXHVERjAwLVxcdURGMUZcXHVERjMwLVxcdURGNEFcXHVERjUwLVxcdURGN0FcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZcXHVERkQxLVxcdURGRDVdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzlEXFx1RENBMC1cXHVEQ0E5XFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMC1cXHVERTAzXFx1REUwNVxcdURFMDZcXHVERTBDLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzNcXHVERTM4LVxcdURFM0FcXHVERTNGXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU2XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMl18XFx1RDgwNFtcXHVEQzAwLVxcdURDNDZcXHVEQzY2LVxcdURDNkZcXHVEQzdGLVxcdURDQkFcXHVEQ0QwLVxcdURDRThcXHVEQ0YwLVxcdURDRjlcXHVERDAwLVxcdUREMzRcXHVERDM2LVxcdUREM0ZcXHVERDUwLVxcdURENzNcXHVERDc2XFx1REQ4MC1cXHVEREM0XFx1RERDQS1cXHVERENDXFx1REREMC1cXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUzN1xcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFRUFcXHVERUYwLVxcdURFRjlcXHVERjAwLVxcdURGMDNcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzQy1cXHVERjQ0XFx1REY0N1xcdURGNDhcXHVERjRCLVxcdURGNERcXHVERjUwXFx1REY1N1xcdURGNUQtXFx1REY2M1xcdURGNjYtXFx1REY2Q1xcdURGNzAtXFx1REY3NF18XFx1RDgwNVtcXHVEQzgwLVxcdURDQzVcXHVEQ0M3XFx1RENEMC1cXHVEQ0Q5XFx1REQ4MC1cXHVEREI1XFx1RERCOC1cXHVEREMwXFx1REREOC1cXHVEREREXFx1REUwMC1cXHVERTQwXFx1REU0NFxcdURFNTAtXFx1REU1OVxcdURFODAtXFx1REVCN1xcdURFQzAtXFx1REVDOVxcdURGMDAtXFx1REYxOVxcdURGMUQtXFx1REYyQlxcdURGMzAtXFx1REYzOV18XFx1RDgwNltcXHVEQ0EwLVxcdURDRTlcXHVEQ0ZGXFx1REVDMC1cXHVERUY4XXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERTYwLVxcdURFNjlcXHVERUQwLVxcdURFRURcXHVERUYwLVxcdURFRjRcXHVERjAwLVxcdURGMzZcXHVERjQwLVxcdURGNDNcXHVERjUwLVxcdURGNTlcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REYwMC1cXHVERjQ0XFx1REY1MC1cXHVERjdFXFx1REY4Ri1cXHVERjlGXXxcXHVEODJDW1xcdURDMDBcXHVEQzAxXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OVxcdURDOURcXHVEQzlFXXxcXHVEODM0W1xcdURENjUtXFx1REQ2OVxcdURENkQtXFx1REQ3MlxcdUREN0ItXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRFxcdURFNDItXFx1REU0NF18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXFx1REZDRS1cXHVERkZGXXxcXHVEODM2W1xcdURFMDAtXFx1REUzNlxcdURFM0ItXFx1REU2Q1xcdURFNzVcXHVERTg0XFx1REU5Qi1cXHVERTlGXFx1REVBMS1cXHVERUFGXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdURDRDAtXFx1RENENl18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMV18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdfFxcdURCNDBbXFx1REQwMC1cXHVEREVGXS99O3QuQ2hhcmFjdGVyPXtmcm9tQ29kZVBvaW50OmZ1bmN0aW9uKGUpe3JldHVybiBlPDY1NTM2P1N0cmluZy5mcm9tQ2hhckNvZGUoZSk6U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NisoZS02NTUzNj4+MTApKStTdHJpbmcuZnJvbUNoYXJDb2RlKDU2MzIwKyhlLTY1NTM2JjEwMjMpKX0saXNXaGl0ZVNwYWNlOmZ1bmN0aW9uKGUpe3JldHVybiAzMj09PWV8fDk9PT1lfHwxMT09PWV8fDEyPT09ZXx8MTYwPT09ZXx8ZT49NTc2MCYmWzU3NjAsODE5Miw4MTkzLDgxOTQsODE5NSw4MTk2LDgxOTcsODE5OCw4MTk5LDgyMDAsODIwMSw4MjAyLDgyMzksODI4NywxMjI4OCw2NTI3OV0uaW5kZXhPZihlKT49MH0saXNMaW5lVGVybWluYXRvcjpmdW5jdGlvbihlKXtyZXR1cm4gMTA9PT1lfHwxMz09PWV8fDgyMzI9PT1lfHw4MjMzPT09ZX0saXNJZGVudGlmaWVyU3RhcnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIDM2PT09ZXx8OTU9PT1lfHxlPj02NSYmZTw9OTB8fGU+PTk3JiZlPD0xMjJ8fDkyPT09ZXx8ZT49MTI4JiZyLk5vbkFzY2lpSWRlbnRpZmllclN0YXJ0LnRlc3QodC5DaGFyYWN0ZXIuZnJvbUNvZGVQb2ludChlKSl9LGlzSWRlbnRpZmllclBhcnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIDM2PT09ZXx8OTU9PT1lfHxlPj02NSYmZTw9OTB8fGU+PTk3JiZlPD0xMjJ8fGU+PTQ4JiZlPD01N3x8OTI9PT1lfHxlPj0xMjgmJnIuTm9uQXNjaWlJZGVudGlmaWVyUGFydC50ZXN0KHQuQ2hhcmFjdGVyLmZyb21Db2RlUG9pbnQoZSkpfSxpc0RlY2ltYWxEaWdpdDpmdW5jdGlvbihlKXtyZXR1cm4gZT49NDgmJmU8PTU3fSxpc0hleERpZ2l0OmZ1bmN0aW9uKGUpe3JldHVybiBlPj00OCYmZTw9NTd8fGU+PTY1JiZlPD03MHx8ZT49OTcmJmU8PTEwMn0saXNPY3RhbERpZ2l0OmZ1bmN0aW9uKGUpe3JldHVybiBlPj00OCYmZTw9NTV9fX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNiksaT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5KU1hTeW50YXguSlNYQ2xvc2luZ0VsZW1lbnQsdGhpcy5uYW1lPWV9O3QuSlNYQ2xvc2luZ0VsZW1lbnQ9aTt2YXIgbz1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWEVsZW1lbnQsdGhpcy5vcGVuaW5nRWxlbWVudD1lLHRoaXMuY2hpbGRyZW49dCx0aGlzLmNsb3NpbmdFbGVtZW50PXJ9O3QuSlNYRWxlbWVudD1vO3ZhciBhPWZ1bmN0aW9uKCl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWEVtcHR5RXhwcmVzc2lvbn07dC5KU1hFbXB0eUV4cHJlc3Npb249YTt2YXIgcz1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5KU1hTeW50YXguSlNYRXhwcmVzc2lvbkNvbnRhaW5lcix0aGlzLmV4cHJlc3Npb249ZX07dC5KU1hFeHByZXNzaW9uQ29udGFpbmVyPXM7dmFyIHU9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWElkZW50aWZpZXIsdGhpcy5uYW1lPWV9O3QuSlNYSWRlbnRpZmllcj11O3ZhciBsPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWE1lbWJlckV4cHJlc3Npb24sdGhpcy5vYmplY3Q9ZSx0aGlzLnByb3BlcnR5PXR9O3QuSlNYTWVtYmVyRXhwcmVzc2lvbj1sO3ZhciBjPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWEF0dHJpYnV0ZSx0aGlzLm5hbWU9ZSx0aGlzLnZhbHVlPXR9O3QuSlNYQXR0cmlidXRlPWM7dmFyIGg9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5KU1hTeW50YXguSlNYTmFtZXNwYWNlZE5hbWUsdGhpcy5uYW1lc3BhY2U9ZSx0aGlzLm5hbWU9dH07dC5KU1hOYW1lc3BhY2VkTmFtZT1oO3ZhciBwPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5KU1hTeW50YXguSlNYT3BlbmluZ0VsZW1lbnQsdGhpcy5uYW1lPWUsdGhpcy5zZWxmQ2xvc2luZz10LHRoaXMuYXR0cmlidXRlcz1yfTt0LkpTWE9wZW5pbmdFbGVtZW50PXA7dmFyIGY9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uSlNYU3ludGF4LkpTWFNwcmVhZEF0dHJpYnV0ZSx0aGlzLmFyZ3VtZW50PWV9O3QuSlNYU3ByZWFkQXR0cmlidXRlPWY7dmFyIGQ9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5KU1hTeW50YXguSlNYVGV4dCx0aGlzLnZhbHVlPWUsdGhpcy5yYXc9dH07dC5KU1hUZXh0PWR9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5KU1hTeW50YXg9e0pTWEF0dHJpYnV0ZTpcIkpTWEF0dHJpYnV0ZVwiLEpTWENsb3NpbmdFbGVtZW50OlwiSlNYQ2xvc2luZ0VsZW1lbnRcIixKU1hFbGVtZW50OlwiSlNYRWxlbWVudFwiLEpTWEVtcHR5RXhwcmVzc2lvbjpcIkpTWEVtcHR5RXhwcmVzc2lvblwiLEpTWEV4cHJlc3Npb25Db250YWluZXI6XCJKU1hFeHByZXNzaW9uQ29udGFpbmVyXCIsSlNYSWRlbnRpZmllcjpcIkpTWElkZW50aWZpZXJcIixKU1hNZW1iZXJFeHByZXNzaW9uOlwiSlNYTWVtYmVyRXhwcmVzc2lvblwiLEpTWE5hbWVzcGFjZWROYW1lOlwiSlNYTmFtZXNwYWNlZE5hbWVcIixKU1hPcGVuaW5nRWxlbWVudDpcIkpTWE9wZW5pbmdFbGVtZW50XCIsSlNYU3ByZWFkQXR0cmlidXRlOlwiSlNYU3ByZWFkQXR0cmlidXRlXCIsSlNYVGV4dDpcIkpTWFRleHRcIn19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIpLGk9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkFycmF5RXhwcmVzc2lvbix0aGlzLmVsZW1lbnRzPWV9O3QuQXJyYXlFeHByZXNzaW9uPWk7dmFyIG89ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkFycmF5UGF0dGVybix0aGlzLmVsZW1lbnRzPWV9O3QuQXJyYXlQYXR0ZXJuPW87dmFyIGE9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbix0aGlzLmlkPW51bGwsdGhpcy5wYXJhbXM9ZSx0aGlzLmJvZHk9dCx0aGlzLmdlbmVyYXRvcj0hMSx0aGlzLmV4cHJlc3Npb249cix0aGlzLmFzeW5jPSExfTt0LkFycm93RnVuY3Rpb25FeHByZXNzaW9uPWE7dmFyIHM9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5Bc3NpZ25tZW50RXhwcmVzc2lvbix0aGlzLm9wZXJhdG9yPWUsdGhpcy5sZWZ0PXQsdGhpcy5yaWdodD1yfTt0LkFzc2lnbm1lbnRFeHByZXNzaW9uPXM7dmFyIHU9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguQXNzaWdubWVudFBhdHRlcm4sdGhpcy5sZWZ0PWUsdGhpcy5yaWdodD10fTt0LkFzc2lnbm1lbnRQYXR0ZXJuPXU7dmFyIGw9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbix0aGlzLmlkPW51bGwsdGhpcy5wYXJhbXM9ZSx0aGlzLmJvZHk9dCx0aGlzLmdlbmVyYXRvcj0hMSx0aGlzLmV4cHJlc3Npb249cix0aGlzLmFzeW5jPSEwfTt0LkFzeW5jQXJyb3dGdW5jdGlvbkV4cHJlc3Npb249bDt2YXIgYz1mdW5jdGlvbihlLHQscil7dGhpcy50eXBlPW4uU3ludGF4LkZ1bmN0aW9uRGVjbGFyYXRpb24sdGhpcy5pZD1lLHRoaXMucGFyYW1zPXQsdGhpcy5ib2R5PXIsdGhpcy5nZW5lcmF0b3I9ITEsdGhpcy5leHByZXNzaW9uPSExLHRoaXMuYXN5bmM9ITB9O3QuQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uPWM7dmFyIGg9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5GdW5jdGlvbkV4cHJlc3Npb24sdGhpcy5pZD1lLHRoaXMucGFyYW1zPXQsdGhpcy5ib2R5PXIsdGhpcy5nZW5lcmF0b3I9ITEsdGhpcy5leHByZXNzaW9uPSExLHRoaXMuYXN5bmM9ITB9O3QuQXN5bmNGdW5jdGlvbkV4cHJlc3Npb249aDt2YXIgcD1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguQXdhaXRFeHByZXNzaW9uLHRoaXMuYXJndW1lbnQ9ZX07dC5Bd2FpdEV4cHJlc3Npb249cDt2YXIgZj1mdW5jdGlvbihlLHQscil7dmFyIGk9XCJ8fFwiPT09ZXx8XCImJlwiPT09ZTt0aGlzLnR5cGU9aT9uLlN5bnRheC5Mb2dpY2FsRXhwcmVzc2lvbjpuLlN5bnRheC5CaW5hcnlFeHByZXNzaW9uLHRoaXMub3BlcmF0b3I9ZSx0aGlzLmxlZnQ9dCx0aGlzLnJpZ2h0PXJ9O3QuQmluYXJ5RXhwcmVzc2lvbj1mO3ZhciBkPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5CbG9ja1N0YXRlbWVudCx0aGlzLmJvZHk9ZX07dC5CbG9ja1N0YXRlbWVudD1kO3ZhciBtPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5CcmVha1N0YXRlbWVudCx0aGlzLmxhYmVsPWV9O3QuQnJlYWtTdGF0ZW1lbnQ9bTt2YXIgeT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5DYWxsRXhwcmVzc2lvbix0aGlzLmNhbGxlZT1lLHRoaXMuYXJndW1lbnRzPXR9O3QuQ2FsbEV4cHJlc3Npb249eTt2YXIgdj1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5DYXRjaENsYXVzZSx0aGlzLnBhcmFtPWUsdGhpcy5ib2R5PXR9O3QuQ2F0Y2hDbGF1c2U9djt2YXIgXz1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguQ2xhc3NCb2R5LHRoaXMuYm9keT1lfTt0LkNsYXNzQm9keT1fO3ZhciBnPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguQ2xhc3NEZWNsYXJhdGlvbix0aGlzLmlkPWUsdGhpcy5zdXBlckNsYXNzPXQsdGhpcy5ib2R5PXJ9O3QuQ2xhc3NEZWNsYXJhdGlvbj1nO3ZhciBiPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguQ2xhc3NFeHByZXNzaW9uLHRoaXMuaWQ9ZSx0aGlzLnN1cGVyQ2xhc3M9dCx0aGlzLmJvZHk9cn07dC5DbGFzc0V4cHJlc3Npb249Yjt2YXIgeD1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5NZW1iZXJFeHByZXNzaW9uLHRoaXMuY29tcHV0ZWQ9ITAsdGhpcy5vYmplY3Q9ZSx0aGlzLnByb3BlcnR5PXR9O3QuQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uPXg7dmFyIHc9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5Db25kaXRpb25hbEV4cHJlc3Npb24sdGhpcy50ZXN0PWUsdGhpcy5jb25zZXF1ZW50PXQsdGhpcy5hbHRlcm5hdGU9cn07dC5Db25kaXRpb25hbEV4cHJlc3Npb249dzt2YXIgRT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguQ29udGludWVTdGF0ZW1lbnQsdGhpcy5sYWJlbD1lfTt0LkNvbnRpbnVlU3RhdGVtZW50PUU7dmFyIEQ9ZnVuY3Rpb24oKXt0aGlzLnR5cGU9bi5TeW50YXguRGVidWdnZXJTdGF0ZW1lbnR9O3QuRGVidWdnZXJTdGF0ZW1lbnQ9RDt2YXIgUz1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5FeHByZXNzaW9uU3RhdGVtZW50LHRoaXMuZXhwcmVzc2lvbj1lLHRoaXMuZGlyZWN0aXZlPXR9O3QuRGlyZWN0aXZlPVM7dmFyIEM9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguRG9XaGlsZVN0YXRlbWVudCx0aGlzLmJvZHk9ZSx0aGlzLnRlc3Q9dH07dC5Eb1doaWxlU3RhdGVtZW50PUM7dmFyIEE9ZnVuY3Rpb24oKXt0aGlzLnR5cGU9bi5TeW50YXguRW1wdHlTdGF0ZW1lbnR9O3QuRW1wdHlTdGF0ZW1lbnQ9QTt2YXIgTj1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguRXhwb3J0QWxsRGVjbGFyYXRpb24sdGhpcy5zb3VyY2U9ZX07dC5FeHBvcnRBbGxEZWNsYXJhdGlvbj1OO3ZhciBUPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb24sdGhpcy5kZWNsYXJhdGlvbj1lfTt0LkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbj1UO3ZhciBPPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguRXhwb3J0TmFtZWREZWNsYXJhdGlvbix0aGlzLmRlY2xhcmF0aW9uPWUsdGhpcy5zcGVjaWZpZXJzPXQsdGhpcy5zb3VyY2U9cn07dC5FeHBvcnROYW1lZERlY2xhcmF0aW9uPU87dmFyIEY9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguRXhwb3J0U3BlY2lmaWVyLHRoaXMuZXhwb3J0ZWQ9dCx0aGlzLmxvY2FsPWV9O3QuRXhwb3J0U3BlY2lmaWVyPUY7dmFyIGs9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkV4cHJlc3Npb25TdGF0ZW1lbnQsdGhpcy5leHByZXNzaW9uPWV9O3QuRXhwcmVzc2lvblN0YXRlbWVudD1rO3ZhciBQPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguRm9ySW5TdGF0ZW1lbnQsdGhpcy5sZWZ0PWUsdGhpcy5yaWdodD10LHRoaXMuYm9keT1yLHRoaXMuZWFjaD0hMX07dC5Gb3JJblN0YXRlbWVudD1QO3ZhciBJPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguRm9yT2ZTdGF0ZW1lbnQsdGhpcy5sZWZ0PWUsdGhpcy5yaWdodD10LHRoaXMuYm9keT1yfTt0LkZvck9mU3RhdGVtZW50PUk7dmFyIEw9ZnVuY3Rpb24oZSx0LHIsaSl7dGhpcy50eXBlPW4uU3ludGF4LkZvclN0YXRlbWVudCx0aGlzLmluaXQ9ZSx0aGlzLnRlc3Q9dCx0aGlzLnVwZGF0ZT1yLHRoaXMuYm9keT1pfTt0LkZvclN0YXRlbWVudD1MO3ZhciBNPWZ1bmN0aW9uKGUsdCxyLGkpe3RoaXMudHlwZT1uLlN5bnRheC5GdW5jdGlvbkRlY2xhcmF0aW9uLHRoaXMuaWQ9ZSx0aGlzLnBhcmFtcz10LHRoaXMuYm9keT1yLHRoaXMuZ2VuZXJhdG9yPWksdGhpcy5leHByZXNzaW9uPSExLHRoaXMuYXN5bmM9ITF9O3QuRnVuY3Rpb25EZWNsYXJhdGlvbj1NO3ZhciBCPWZ1bmN0aW9uKGUsdCxyLGkpe3RoaXMudHlwZT1uLlN5bnRheC5GdW5jdGlvbkV4cHJlc3Npb24sdGhpcy5pZD1lLHRoaXMucGFyYW1zPXQsdGhpcy5ib2R5PXIsdGhpcy5nZW5lcmF0b3I9aSx0aGlzLmV4cHJlc3Npb249ITEsdGhpcy5hc3luYz0hMX07dC5GdW5jdGlvbkV4cHJlc3Npb249Qjt2YXIgaj1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguSWRlbnRpZmllcix0aGlzLm5hbWU9ZX07dC5JZGVudGlmaWVyPWo7dmFyIFI9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5JZlN0YXRlbWVudCx0aGlzLnRlc3Q9ZSx0aGlzLmNvbnNlcXVlbnQ9dCx0aGlzLmFsdGVybmF0ZT1yfTt0LklmU3RhdGVtZW50PVI7dmFyIHo9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguSW1wb3J0RGVjbGFyYXRpb24sdGhpcy5zcGVjaWZpZXJzPWUsdGhpcy5zb3VyY2U9dH07dC5JbXBvcnREZWNsYXJhdGlvbj16O3ZhciBVPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5JbXBvcnREZWZhdWx0U3BlY2lmaWVyLHRoaXMubG9jYWw9ZX07dC5JbXBvcnREZWZhdWx0U3BlY2lmaWVyPVU7dmFyIEc9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LkltcG9ydE5hbWVzcGFjZVNwZWNpZmllcix0aGlzLmxvY2FsPWV9O3QuSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyPUc7dmFyIFg9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguSW1wb3J0U3BlY2lmaWVyLHRoaXMubG9jYWw9ZSx0aGlzLmltcG9ydGVkPXR9O3QuSW1wb3J0U3BlY2lmaWVyPVg7dmFyIHE9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguTGFiZWxlZFN0YXRlbWVudCx0aGlzLmxhYmVsPWUsdGhpcy5ib2R5PXR9O3QuTGFiZWxlZFN0YXRlbWVudD1xO3ZhciBXPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LkxpdGVyYWwsdGhpcy52YWx1ZT1lLHRoaXMucmF3PXR9O3QuTGl0ZXJhbD1XO3ZhciBIPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4Lk1ldGFQcm9wZXJ0eSx0aGlzLm1ldGE9ZSx0aGlzLnByb3BlcnR5PXR9O3QuTWV0YVByb3BlcnR5PUg7dmFyIEo9ZnVuY3Rpb24oZSx0LHIsaSxvKXt0aGlzLnR5cGU9bi5TeW50YXguTWV0aG9kRGVmaW5pdGlvbix0aGlzLmtleT1lLHRoaXMuY29tcHV0ZWQ9dCx0aGlzLnZhbHVlPXIsdGhpcy5raW5kPWksdGhpcy5zdGF0aWM9b307dC5NZXRob2REZWZpbml0aW9uPUo7dmFyIFk9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LlByb2dyYW0sdGhpcy5ib2R5PWUsdGhpcy5zb3VyY2VUeXBlPVwibW9kdWxlXCJ9O3QuTW9kdWxlPVk7dmFyIFY9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguTmV3RXhwcmVzc2lvbix0aGlzLmNhbGxlZT1lLHRoaXMuYXJndW1lbnRzPXR9O3QuTmV3RXhwcmVzc2lvbj1WO3ZhciBLPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5PYmplY3RFeHByZXNzaW9uLHRoaXMucHJvcGVydGllcz1lfTt0Lk9iamVjdEV4cHJlc3Npb249Szt2YXIgJD1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguT2JqZWN0UGF0dGVybix0aGlzLnByb3BlcnRpZXM9ZX07dC5PYmplY3RQYXR0ZXJuPSQ7dmFyIFE9ZnVuY3Rpb24oZSx0LHIsaSxvLGEpe3RoaXMudHlwZT1uLlN5bnRheC5Qcm9wZXJ0eSx0aGlzLmtleT10LHRoaXMuY29tcHV0ZWQ9cix0aGlzLnZhbHVlPWksdGhpcy5raW5kPWUsdGhpcy5tZXRob2Q9byx0aGlzLnNob3J0aGFuZD1hfTt0LlByb3BlcnR5PVE7dmFyIFo9ZnVuY3Rpb24oZSx0LHIsaSl7dGhpcy50eXBlPW4uU3ludGF4LkxpdGVyYWwsdGhpcy52YWx1ZT1lLHRoaXMucmF3PXQsdGhpcy5yZWdleD17cGF0dGVybjpyLGZsYWdzOml9fTt0LlJlZ2V4TGl0ZXJhbD1aO3ZhciBlZT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguUmVzdEVsZW1lbnQsdGhpcy5hcmd1bWVudD1lfTt0LlJlc3RFbGVtZW50PWVlO3ZhciB0ZT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguUmV0dXJuU3RhdGVtZW50LHRoaXMuYXJndW1lbnQ9ZX07dC5SZXR1cm5TdGF0ZW1lbnQ9dGU7dmFyIHJlPWZ1bmN0aW9uKGUpe3RoaXMudHlwZT1uLlN5bnRheC5Qcm9ncmFtLHRoaXMuYm9keT1lLHRoaXMuc291cmNlVHlwZT1cInNjcmlwdFwifTt0LlNjcmlwdD1yZTt2YXIgbmU9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbix0aGlzLmV4cHJlc3Npb25zPWV9O3QuU2VxdWVuY2VFeHByZXNzaW9uPW5lO3ZhciBpZT1mdW5jdGlvbihlKXt0aGlzLnR5cGU9bi5TeW50YXguU3ByZWFkRWxlbWVudCx0aGlzLmFyZ3VtZW50PWV9O3QuU3ByZWFkRWxlbWVudD1pZTt2YXIgb2U9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguTWVtYmVyRXhwcmVzc2lvbix0aGlzLmNvbXB1dGVkPSExLHRoaXMub2JqZWN0PWUsdGhpcy5wcm9wZXJ0eT10fTt0LlN0YXRpY01lbWJlckV4cHJlc3Npb249b2U7dmFyIGFlPWZ1bmN0aW9uKCl7dGhpcy50eXBlPW4uU3ludGF4LlN1cGVyfTt0LlN1cGVyPWFlO3ZhciBzZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5Td2l0Y2hDYXNlLHRoaXMudGVzdD1lLHRoaXMuY29uc2VxdWVudD10fTt0LlN3aXRjaENhc2U9c2U7dmFyIHVlPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LlN3aXRjaFN0YXRlbWVudCx0aGlzLmRpc2NyaW1pbmFudD1lLHRoaXMuY2FzZXM9dH07dC5Td2l0Y2hTdGF0ZW1lbnQ9dWU7dmFyIGxlPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbix0aGlzLnRhZz1lLHRoaXMucXVhc2k9dH07dC5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb249bGU7dmFyIGNlPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LlRlbXBsYXRlRWxlbWVudCx0aGlzLnZhbHVlPWUsdGhpcy50YWlsPXR9O3QuVGVtcGxhdGVFbGVtZW50PWNlO3ZhciBoZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5UZW1wbGF0ZUxpdGVyYWwsdGhpcy5xdWFzaXM9ZSx0aGlzLmV4cHJlc3Npb25zPXR9O3QuVGVtcGxhdGVMaXRlcmFsPWhlO3ZhciBwZT1mdW5jdGlvbigpe3RoaXMudHlwZT1uLlN5bnRheC5UaGlzRXhwcmVzc2lvbn07dC5UaGlzRXhwcmVzc2lvbj1wZTt2YXIgZmU9ZnVuY3Rpb24oZSl7dGhpcy50eXBlPW4uU3ludGF4LlRocm93U3RhdGVtZW50LHRoaXMuYXJndW1lbnQ9ZX07dC5UaHJvd1N0YXRlbWVudD1mZTt2YXIgZGU9ZnVuY3Rpb24oZSx0LHIpe3RoaXMudHlwZT1uLlN5bnRheC5UcnlTdGF0ZW1lbnQsdGhpcy5ibG9jaz1lLHRoaXMuaGFuZGxlcj10LHRoaXMuZmluYWxpemVyPXJ9O3QuVHJ5U3RhdGVtZW50PWRlO3ZhciBtZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5VbmFyeUV4cHJlc3Npb24sdGhpcy5vcGVyYXRvcj1lLHRoaXMuYXJndW1lbnQ9dCx0aGlzLnByZWZpeD0hMH07dC5VbmFyeUV4cHJlc3Npb249bWU7dmFyIHllPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnR5cGU9bi5TeW50YXguVXBkYXRlRXhwcmVzc2lvbix0aGlzLm9wZXJhdG9yPWUsdGhpcy5hcmd1bWVudD10LHRoaXMucHJlZml4PXJ9O3QuVXBkYXRlRXhwcmVzc2lvbj15ZTt2YXIgdmU9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguVmFyaWFibGVEZWNsYXJhdGlvbix0aGlzLmRlY2xhcmF0aW9ucz1lLHRoaXMua2luZD10fTt0LlZhcmlhYmxlRGVjbGFyYXRpb249dmU7dmFyIF9lPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LlZhcmlhYmxlRGVjbGFyYXRvcix0aGlzLmlkPWUsdGhpcy5pbml0PXR9O3QuVmFyaWFibGVEZWNsYXJhdG9yPV9lO3ZhciBnZT1mdW5jdGlvbihlLHQpe3RoaXMudHlwZT1uLlN5bnRheC5XaGlsZVN0YXRlbWVudCx0aGlzLnRlc3Q9ZSx0aGlzLmJvZHk9dH07dC5XaGlsZVN0YXRlbWVudD1nZTt2YXIgYmU9ZnVuY3Rpb24oZSx0KXt0aGlzLnR5cGU9bi5TeW50YXguV2l0aFN0YXRlbWVudCx0aGlzLm9iamVjdD1lLHRoaXMuYm9keT10fTt0LldpdGhTdGF0ZW1lbnQ9YmU7dmFyIHhlPWZ1bmN0aW9uKGUsdCl7dGhpcy50eXBlPW4uU3ludGF4LllpZWxkRXhwcmVzc2lvbix0aGlzLmFyZ3VtZW50PWUsdGhpcy5kZWxlZ2F0ZT10fTt0LllpZWxkRXhwcmVzc2lvbj14ZX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOSksaT1yKDEwKSxvPXIoMTEpLGE9cig3KSxzPXIoMTIpLHU9cigyKSxsPXIoMTMpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxyKXt2b2lkIDA9PT10JiYodD17fSksdGhpcy5jb25maWc9e3JhbmdlOlwiYm9vbGVhblwiPT10eXBlb2YgdC5yYW5nZSYmdC5yYW5nZSxsb2M6XCJib29sZWFuXCI9PXR5cGVvZiB0LmxvYyYmdC5sb2Msc291cmNlOm51bGwsdG9rZW5zOlwiYm9vbGVhblwiPT10eXBlb2YgdC50b2tlbnMmJnQudG9rZW5zLGNvbW1lbnQ6XCJib29sZWFuXCI9PXR5cGVvZiB0LmNvbW1lbnQmJnQuY29tbWVudCx0b2xlcmFudDpcImJvb2xlYW5cIj09dHlwZW9mIHQudG9sZXJhbnQmJnQudG9sZXJhbnR9LHRoaXMuY29uZmlnLmxvYyYmdC5zb3VyY2UmJm51bGwhPT10LnNvdXJjZSYmKHRoaXMuY29uZmlnLnNvdXJjZT1TdHJpbmcodC5zb3VyY2UpKSx0aGlzLmRlbGVnYXRlPXIsdGhpcy5lcnJvckhhbmRsZXI9bmV3IGkuRXJyb3JIYW5kbGVyLHRoaXMuZXJyb3JIYW5kbGVyLnRvbGVyYW50PXRoaXMuY29uZmlnLnRvbGVyYW50LHRoaXMuc2Nhbm5lcj1uZXcgcy5TY2FubmVyKGUsdGhpcy5lcnJvckhhbmRsZXIpLHRoaXMuc2Nhbm5lci50cmFja0NvbW1lbnQ9dGhpcy5jb25maWcuY29tbWVudCx0aGlzLm9wZXJhdG9yUHJlY2VkZW5jZT17XCIpXCI6MCxcIjtcIjowLFwiLFwiOjAsXCI9XCI6MCxcIl1cIjowLFwifHxcIjoxLFwiJiZcIjoyLFwifFwiOjMsXCJeXCI6NCxcIiZcIjo1LFwiPT1cIjo2LFwiIT1cIjo2LFwiPT09XCI6NixcIiE9PVwiOjYsXCI8XCI6NyxcIj5cIjo3LFwiPD1cIjo3LFwiPj1cIjo3LFwiPDxcIjo4LFwiPj5cIjo4LFwiPj4+XCI6OCxcIitcIjo5LFwiLVwiOjksXCIqXCI6MTEsXCIvXCI6MTEsXCIlXCI6MTF9LHRoaXMubG9va2FoZWFkPXt0eXBlOjIsdmFsdWU6XCJcIixsaW5lTnVtYmVyOnRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLGxpbmVTdGFydDowLHN0YXJ0OjAsZW5kOjB9LHRoaXMuaGFzTGluZVRlcm1pbmF0b3I9ITEsdGhpcy5jb250ZXh0PXtpc01vZHVsZTohMSxhd2FpdDohMSxhbGxvd0luOiEwLGFsbG93U3RyaWN0RGlyZWN0aXZlOiEwLGFsbG93WWllbGQ6ITAsZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yOm51bGwsaXNBc3NpZ25tZW50VGFyZ2V0OiExLGlzQmluZGluZ0VsZW1lbnQ6ITEsaW5GdW5jdGlvbkJvZHk6ITEsaW5JdGVyYXRpb246ITEsaW5Td2l0Y2g6ITEsbGFiZWxTZXQ6e30sc3RyaWN0OiExfSx0aGlzLnRva2Vucz1bXSx0aGlzLnN0YXJ0TWFya2VyPXtpbmRleDowLGxpbmU6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsY29sdW1uOjB9LHRoaXMubGFzdE1hcmtlcj17aW5kZXg6MCxsaW5lOnRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLGNvbHVtbjowfSx0aGlzLm5leHRUb2tlbigpLHRoaXMubGFzdE1hcmtlcj17aW5kZXg6dGhpcy5zY2FubmVyLmluZGV4LGxpbmU6dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuc2Nhbm5lci5pbmRleC10aGlzLnNjYW5uZXIubGluZVN0YXJ0fX1yZXR1cm4gZS5wcm90b3R5cGUudGhyb3dFcnJvcj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTt2YXIgaT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksbz1lLnJlcGxhY2UoLyUoXFxkKS9nLChmdW5jdGlvbihlLHQpe3JldHVybiBuLmFzc2VydCh0PGkubGVuZ3RoLFwiTWVzc2FnZSByZWZlcmVuY2UgbXVzdCBiZSBpbiByYW5nZVwiKSxpW3RdfSkpLGE9dGhpcy5sYXN0TWFya2VyLmluZGV4LHM9dGhpcy5sYXN0TWFya2VyLmxpbmUsdT10aGlzLmxhc3RNYXJrZXIuY29sdW1uKzE7dGhyb3cgdGhpcy5lcnJvckhhbmRsZXIuY3JlYXRlRXJyb3IoYSxzLHUsbyl9LGUucHJvdG90eXBlLnRvbGVyYXRlRXJyb3I9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXRbci0xXT1hcmd1bWVudHNbcl07dmFyIGk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLG89ZS5yZXBsYWNlKC8lKFxcZCkvZywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5hc3NlcnQodDxpLmxlbmd0aCxcIk1lc3NhZ2UgcmVmZXJlbmNlIG11c3QgYmUgaW4gcmFuZ2VcIiksaVt0XX0pKSxhPXRoaXMubGFzdE1hcmtlci5pbmRleCxzPXRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLHU9dGhpcy5sYXN0TWFya2VyLmNvbHVtbisxO3RoaXMuZXJyb3JIYW5kbGVyLnRvbGVyYXRlRXJyb3IoYSxzLHUsbyl9LGUucHJvdG90eXBlLnVuZXhwZWN0ZWRUb2tlbkVycm9yPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj10fHxvLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbjtpZihlPyh0fHwobj0yPT09ZS50eXBlP28uTWVzc2FnZXMuVW5leHBlY3RlZEVPUzozPT09ZS50eXBlP28uTWVzc2FnZXMuVW5leHBlY3RlZElkZW50aWZpZXI6Nj09PWUudHlwZT9vLk1lc3NhZ2VzLlVuZXhwZWN0ZWROdW1iZXI6OD09PWUudHlwZT9vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRTdHJpbmc6MTA9PT1lLnR5cGU/by5NZXNzYWdlcy5VbmV4cGVjdGVkVGVtcGxhdGU6by5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4sND09PWUudHlwZSYmKHRoaXMuc2Nhbm5lci5pc0Z1dHVyZVJlc2VydmVkV29yZChlLnZhbHVlKT9uPW8uTWVzc2FnZXMuVW5leHBlY3RlZFJlc2VydmVkOnRoaXMuY29udGV4dC5zdHJpY3QmJnRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQoZS52YWx1ZSkmJihuPW8uTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkKSkpLHI9ZS52YWx1ZSk6cj1cIklMTEVHQUxcIixuPW4ucmVwbGFjZShcIiUwXCIsciksZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGluZU51bWJlcil7dmFyIGk9ZS5zdGFydCxhPWUubGluZU51bWJlcixzPXRoaXMubGFzdE1hcmtlci5pbmRleC10aGlzLmxhc3RNYXJrZXIuY29sdW1uLHU9ZS5zdGFydC1zKzE7cmV0dXJuIHRoaXMuZXJyb3JIYW5kbGVyLmNyZWF0ZUVycm9yKGksYSx1LG4pfXJldHVybiBpPXRoaXMubGFzdE1hcmtlci5pbmRleCxhPXRoaXMubGFzdE1hcmtlci5saW5lLHU9dGhpcy5sYXN0TWFya2VyLmNvbHVtbisxLHRoaXMuZXJyb3JIYW5kbGVyLmNyZWF0ZUVycm9yKGksYSx1LG4pfSxlLnByb3RvdHlwZS50aHJvd1VuZXhwZWN0ZWRUb2tlbj1mdW5jdGlvbihlLHQpe3Rocm93IHRoaXMudW5leHBlY3RlZFRva2VuRXJyb3IoZSx0KX0sZS5wcm90b3R5cGUudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW49ZnVuY3Rpb24oZSx0KXt0aGlzLmVycm9ySGFuZGxlci50b2xlcmF0ZSh0aGlzLnVuZXhwZWN0ZWRUb2tlbkVycm9yKGUsdCkpfSxlLnByb3RvdHlwZS5jb2xsZWN0Q29tbWVudHM9ZnVuY3Rpb24oKXtpZih0aGlzLmNvbmZpZy5jb21tZW50KXt2YXIgZT10aGlzLnNjYW5uZXIuc2NhbkNvbW1lbnRzKCk7aWYoZS5sZW5ndGg+MCYmdGhpcy5kZWxlZ2F0ZSlmb3IodmFyIHQ9MDt0PGUubGVuZ3RoOysrdCl7dmFyIHI9ZVt0XSxuPXZvaWQgMDtuPXt0eXBlOnIubXVsdGlMaW5lP1wiQmxvY2tDb21tZW50XCI6XCJMaW5lQ29tbWVudFwiLHZhbHVlOnRoaXMuc2Nhbm5lci5zb3VyY2Uuc2xpY2Uoci5zbGljZVswXSxyLnNsaWNlWzFdKX0sdGhpcy5jb25maWcucmFuZ2UmJihuLnJhbmdlPXIucmFuZ2UpLHRoaXMuY29uZmlnLmxvYyYmKG4ubG9jPXIubG9jKTt2YXIgaT17c3RhcnQ6e2xpbmU6ci5sb2Muc3RhcnQubGluZSxjb2x1bW46ci5sb2Muc3RhcnQuY29sdW1uLG9mZnNldDpyLnJhbmdlWzBdfSxlbmQ6e2xpbmU6ci5sb2MuZW5kLmxpbmUsY29sdW1uOnIubG9jLmVuZC5jb2x1bW4sb2Zmc2V0OnIucmFuZ2VbMV19fTt0aGlzLmRlbGVnYXRlKG4saSl9fWVsc2UgdGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpfSxlLnByb3RvdHlwZS5nZXRUb2tlblJhdz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZShlLnN0YXJ0LGUuZW5kKX0sZS5wcm90b3R5cGUuY29udmVydFRva2VuPWZ1bmN0aW9uKGUpe3ZhciB0PXt0eXBlOmwuVG9rZW5OYW1lW2UudHlwZV0sdmFsdWU6dGhpcy5nZXRUb2tlblJhdyhlKX07aWYodGhpcy5jb25maWcucmFuZ2UmJih0LnJhbmdlPVtlLnN0YXJ0LGUuZW5kXSksdGhpcy5jb25maWcubG9jJiYodC5sb2M9e3N0YXJ0OntsaW5lOnRoaXMuc3RhcnRNYXJrZXIubGluZSxjb2x1bW46dGhpcy5zdGFydE1hcmtlci5jb2x1bW59LGVuZDp7bGluZTp0aGlzLnNjYW5uZXIubGluZU51bWJlcixjb2x1bW46dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnR9fSksOT09PWUudHlwZSl7dmFyIHI9ZS5wYXR0ZXJuLG49ZS5mbGFnczt0LnJlZ2V4PXtwYXR0ZXJuOnIsZmxhZ3M6bn19cmV0dXJuIHR9LGUucHJvdG90eXBlLm5leHRUb2tlbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubG9va2FoZWFkO3RoaXMubGFzdE1hcmtlci5pbmRleD10aGlzLnNjYW5uZXIuaW5kZXgsdGhpcy5sYXN0TWFya2VyLmxpbmU9dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsdGhpcy5sYXN0TWFya2VyLmNvbHVtbj10aGlzLnNjYW5uZXIuaW5kZXgtdGhpcy5zY2FubmVyLmxpbmVTdGFydCx0aGlzLmNvbGxlY3RDb21tZW50cygpLHRoaXMuc2Nhbm5lci5pbmRleCE9PXRoaXMuc3RhcnRNYXJrZXIuaW5kZXgmJih0aGlzLnN0YXJ0TWFya2VyLmluZGV4PXRoaXMuc2Nhbm5lci5pbmRleCx0aGlzLnN0YXJ0TWFya2VyLmxpbmU9dGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsdGhpcy5zdGFydE1hcmtlci5jb2x1bW49dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnQpO3ZhciB0PXRoaXMuc2Nhbm5lci5sZXgoKTtyZXR1cm4gdGhpcy5oYXNMaW5lVGVybWluYXRvcj1lLmxpbmVOdW1iZXIhPT10LmxpbmVOdW1iZXIsdCYmdGhpcy5jb250ZXh0LnN0cmljdCYmMz09PXQudHlwZSYmdGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZCh0LnZhbHVlKSYmKHQudHlwZT00KSx0aGlzLmxvb2thaGVhZD10LHRoaXMuY29uZmlnLnRva2VucyYmMiE9PXQudHlwZSYmdGhpcy50b2tlbnMucHVzaCh0aGlzLmNvbnZlcnRUb2tlbih0KSksZX0sZS5wcm90b3R5cGUubmV4dFJlZ2V4VG9rZW49ZnVuY3Rpb24oKXt0aGlzLmNvbGxlY3RDb21tZW50cygpO3ZhciBlPXRoaXMuc2Nhbm5lci5zY2FuUmVnRXhwKCk7cmV0dXJuIHRoaXMuY29uZmlnLnRva2VucyYmKHRoaXMudG9rZW5zLnBvcCgpLHRoaXMudG9rZW5zLnB1c2godGhpcy5jb252ZXJ0VG9rZW4oZSkpKSx0aGlzLmxvb2thaGVhZD1lLHRoaXMubmV4dFRva2VuKCksZX0sZS5wcm90b3R5cGUuY3JlYXRlTm9kZT1mdW5jdGlvbigpe3JldHVybntpbmRleDp0aGlzLnN0YXJ0TWFya2VyLmluZGV4LGxpbmU6dGhpcy5zdGFydE1hcmtlci5saW5lLGNvbHVtbjp0aGlzLnN0YXJ0TWFya2VyLmNvbHVtbn19LGUucHJvdG90eXBlLnN0YXJ0Tm9kZT1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PTApO3ZhciByPWUuc3RhcnQtZS5saW5lU3RhcnQsbj1lLmxpbmVOdW1iZXI7cmV0dXJuIHI8MCYmKHIrPXQsbi0tKSx7aW5kZXg6ZS5zdGFydCxsaW5lOm4sY29sdW1uOnJ9fSxlLnByb3RvdHlwZS5maW5hbGl6ZT1mdW5jdGlvbihlLHQpe2lmKHRoaXMuY29uZmlnLnJhbmdlJiYodC5yYW5nZT1bZS5pbmRleCx0aGlzLmxhc3RNYXJrZXIuaW5kZXhdKSx0aGlzLmNvbmZpZy5sb2MmJih0LmxvYz17c3RhcnQ6e2xpbmU6ZS5saW5lLGNvbHVtbjplLmNvbHVtbn0sZW5kOntsaW5lOnRoaXMubGFzdE1hcmtlci5saW5lLGNvbHVtbjp0aGlzLmxhc3RNYXJrZXIuY29sdW1ufX0sdGhpcy5jb25maWcuc291cmNlJiYodC5sb2Muc291cmNlPXRoaXMuY29uZmlnLnNvdXJjZSkpLHRoaXMuZGVsZWdhdGUpe3ZhciByPXtzdGFydDp7bGluZTplLmxpbmUsY29sdW1uOmUuY29sdW1uLG9mZnNldDplLmluZGV4fSxlbmQ6e2xpbmU6dGhpcy5sYXN0TWFya2VyLmxpbmUsY29sdW1uOnRoaXMubGFzdE1hcmtlci5jb2x1bW4sb2Zmc2V0OnRoaXMubGFzdE1hcmtlci5pbmRleH19O3RoaXMuZGVsZWdhdGUodCxyKX1yZXR1cm4gdH0sZS5wcm90b3R5cGUuZXhwZWN0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubmV4dFRva2VuKCk7Nz09PXQudHlwZSYmdC52YWx1ZT09PWV8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCl9LGUucHJvdG90eXBlLmV4cGVjdENvbW1hU2VwYXJhdG9yPWZ1bmN0aW9uKCl7aWYodGhpcy5jb25maWcudG9sZXJhbnQpe3ZhciBlPXRoaXMubG9va2FoZWFkOzc9PT1lLnR5cGUmJlwiLFwiPT09ZS52YWx1ZT90aGlzLm5leHRUb2tlbigpOjc9PT1lLnR5cGUmJlwiO1wiPT09ZS52YWx1ZT8odGhpcy5uZXh0VG9rZW4oKSx0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGUpKTp0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGUsby5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4pfWVsc2UgdGhpcy5leHBlY3QoXCIsXCIpfSxlLnByb3RvdHlwZS5leHBlY3RLZXl3b3JkPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubmV4dFRva2VuKCk7ND09PXQudHlwZSYmdC52YWx1ZT09PWV8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCl9LGUucHJvdG90eXBlLm1hdGNoPWZ1bmN0aW9uKGUpe3JldHVybiA3PT09dGhpcy5sb29rYWhlYWQudHlwZSYmdGhpcy5sb29rYWhlYWQudmFsdWU9PT1lfSxlLnByb3RvdHlwZS5tYXRjaEtleXdvcmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIDQ9PT10aGlzLmxvb2thaGVhZC50eXBlJiZ0aGlzLmxvb2thaGVhZC52YWx1ZT09PWV9LGUucHJvdG90eXBlLm1hdGNoQ29udGV4dHVhbEtleXdvcmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIDM9PT10aGlzLmxvb2thaGVhZC50eXBlJiZ0aGlzLmxvb2thaGVhZC52YWx1ZT09PWV9LGUucHJvdG90eXBlLm1hdGNoQXNzaWduPWZ1bmN0aW9uKCl7aWYoNyE9PXRoaXMubG9va2FoZWFkLnR5cGUpcmV0dXJuITE7dmFyIGU9dGhpcy5sb29rYWhlYWQudmFsdWU7cmV0dXJuXCI9XCI9PT1lfHxcIio9XCI9PT1lfHxcIioqPVwiPT09ZXx8XCIvPVwiPT09ZXx8XCIlPVwiPT09ZXx8XCIrPVwiPT09ZXx8XCItPVwiPT09ZXx8XCI8PD1cIj09PWV8fFwiPj49XCI9PT1lfHxcIj4+Pj1cIj09PWV8fFwiJj1cIj09PWV8fFwiXj1cIj09PWV8fFwifD1cIj09PWV9LGUucHJvdG90eXBlLmlzb2xhdGVDb3ZlckdyYW1tYXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQscj10aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0LG49dGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcjt0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMCx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSEwLHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I9bnVsbDt2YXIgaT1lLmNhbGwodGhpcyk7cmV0dXJuIG51bGwhPT10aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IpLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PXQsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD1yLHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I9bixpfSxlLnByb3RvdHlwZS5pbmhlcml0Q292ZXJHcmFtbWFyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50LHI9dGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCxuPXRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I7dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITAsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMCx0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yPW51bGw7dmFyIGk9ZS5jYWxsKHRoaXMpO3JldHVybiB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD10aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCYmdCx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PXRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQmJnIsdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcj1ufHx0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yLGl9LGUucHJvdG90eXBlLmNvbnN1bWVTZW1pY29sb249ZnVuY3Rpb24oKXt0aGlzLm1hdGNoKFwiO1wiKT90aGlzLm5leHRUb2tlbigpOnRoaXMuaGFzTGluZVRlcm1pbmF0b3J8fCgyPT09dGhpcy5sb29rYWhlYWQudHlwZXx8dGhpcy5tYXRjaChcIn1cIil8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpLHRoaXMubGFzdE1hcmtlci5pbmRleD10aGlzLnN0YXJ0TWFya2VyLmluZGV4LHRoaXMubGFzdE1hcmtlci5saW5lPXRoaXMuc3RhcnRNYXJrZXIubGluZSx0aGlzLmxhc3RNYXJrZXIuY29sdW1uPXRoaXMuc3RhcnRNYXJrZXIuY29sdW1uKX0sZS5wcm90b3R5cGUucGFyc2VQcmltYXJ5RXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlLHQscixuPXRoaXMuY3JlYXRlTm9kZSgpO3N3aXRjaCh0aGlzLmxvb2thaGVhZC50eXBlKXtjYXNlIDM6KHRoaXMuY29udGV4dC5pc01vZHVsZXx8dGhpcy5jb250ZXh0LmF3YWl0KSYmXCJhd2FpdFwiPT09dGhpcy5sb29rYWhlYWQudmFsdWUmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpLGU9dGhpcy5tYXRjaEFzeW5jRnVuY3Rpb24oKT90aGlzLnBhcnNlRnVuY3Rpb25FeHByZXNzaW9uKCk6dGhpcy5maW5hbGl6ZShuLG5ldyBhLklkZW50aWZpZXIodGhpcy5uZXh0VG9rZW4oKS52YWx1ZSkpO2JyZWFrO2Nhc2UgNjpjYXNlIDg6dGhpcy5jb250ZXh0LnN0cmljdCYmdGhpcy5sb29rYWhlYWQub2N0YWwmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQsby5NZXNzYWdlcy5TdHJpY3RPY3RhbExpdGVyYWwpLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsdD10aGlzLm5leHRUb2tlbigpLHI9dGhpcy5nZXRUb2tlblJhdyh0KSxlPXRoaXMuZmluYWxpemUobixuZXcgYS5MaXRlcmFsKHQudmFsdWUscikpO2JyZWFrO2Nhc2UgMTp0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLHQ9dGhpcy5uZXh0VG9rZW4oKSxyPXRoaXMuZ2V0VG9rZW5SYXcodCksZT10aGlzLmZpbmFsaXplKG4sbmV3IGEuTGl0ZXJhbChcInRydWVcIj09PXQudmFsdWUscikpO2JyZWFrO2Nhc2UgNTp0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLHQ9dGhpcy5uZXh0VG9rZW4oKSxyPXRoaXMuZ2V0VG9rZW5SYXcodCksZT10aGlzLmZpbmFsaXplKG4sbmV3IGEuTGl0ZXJhbChudWxsLHIpKTticmVhaztjYXNlIDEwOmU9dGhpcy5wYXJzZVRlbXBsYXRlTGl0ZXJhbCgpO2JyZWFrO2Nhc2UgNzpzd2l0Y2godGhpcy5sb29rYWhlYWQudmFsdWUpe2Nhc2VcIihcIjp0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSxlPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlR3JvdXBFeHByZXNzaW9uKTticmVhaztjYXNlXCJbXCI6ZT10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFycmF5SW5pdGlhbGl6ZXIpO2JyZWFrO2Nhc2VcIntcIjplPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlT2JqZWN0SW5pdGlhbGl6ZXIpO2JyZWFrO2Nhc2VcIi9cIjpjYXNlXCIvPVwiOnRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsdGhpcy5zY2FubmVyLmluZGV4PXRoaXMuc3RhcnRNYXJrZXIuaW5kZXgsdD10aGlzLm5leHRSZWdleFRva2VuKCkscj10aGlzLmdldFRva2VuUmF3KHQpLGU9dGhpcy5maW5hbGl6ZShuLG5ldyBhLlJlZ2V4TGl0ZXJhbCh0LnJlZ2V4LHIsdC5wYXR0ZXJuLHQuZmxhZ3MpKTticmVhaztkZWZhdWx0OmU9dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKX1icmVhaztjYXNlIDQ6IXRoaXMuY29udGV4dC5zdHJpY3QmJnRoaXMuY29udGV4dC5hbGxvd1lpZWxkJiZ0aGlzLm1hdGNoS2V5d29yZChcInlpZWxkXCIpP2U9dGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk6IXRoaXMuY29udGV4dC5zdHJpY3QmJnRoaXMubWF0Y2hLZXl3b3JkKFwibGV0XCIpP2U9dGhpcy5maW5hbGl6ZShuLG5ldyBhLklkZW50aWZpZXIodGhpcy5uZXh0VG9rZW4oKS52YWx1ZSkpOih0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLHRoaXMubWF0Y2hLZXl3b3JkKFwiZnVuY3Rpb25cIik/ZT10aGlzLnBhcnNlRnVuY3Rpb25FeHByZXNzaW9uKCk6dGhpcy5tYXRjaEtleXdvcmQoXCJ0aGlzXCIpPyh0aGlzLm5leHRUb2tlbigpLGU9dGhpcy5maW5hbGl6ZShuLG5ldyBhLlRoaXNFeHByZXNzaW9uKSk6ZT10aGlzLm1hdGNoS2V5d29yZChcImNsYXNzXCIpP3RoaXMucGFyc2VDbGFzc0V4cHJlc3Npb24oKTp0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpKTticmVhaztkZWZhdWx0OmU9dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKX1yZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VTcHJlYWRFbGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3QoXCIuLi5cIik7dmFyIHQ9dGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5TcHJlYWRFbGVtZW50KHQpKX0sZS5wcm90b3R5cGUucGFyc2VBcnJheUluaXRpYWxpemVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD1bXTtmb3IodGhpcy5leHBlY3QoXCJbXCIpOyF0aGlzLm1hdGNoKFwiXVwiKTspaWYodGhpcy5tYXRjaChcIixcIikpdGhpcy5uZXh0VG9rZW4oKSx0LnB1c2gobnVsbCk7ZWxzZSBpZih0aGlzLm1hdGNoKFwiLi4uXCIpKXt2YXIgcj10aGlzLnBhcnNlU3ByZWFkRWxlbWVudCgpO3RoaXMubWF0Y2goXCJdXCIpfHwodGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0aGlzLmV4cGVjdChcIixcIikpLHQucHVzaChyKX1lbHNlIHQucHVzaCh0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSksdGhpcy5tYXRjaChcIl1cIil8fHRoaXMuZXhwZWN0KFwiLFwiKTtyZXR1cm4gdGhpcy5leHBlY3QoXCJdXCIpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5BcnJheUV4cHJlc3Npb24odCkpfSxlLnByb3RvdHlwZS5wYXJzZVByb3BlcnR5TWV0aG9kPWZ1bmN0aW9uKGUpe3RoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITE7dmFyIHQ9dGhpcy5jb250ZXh0LnN0cmljdCxyPXRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZTt0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU9ZS5zaW1wbGU7dmFyIG49dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKTtyZXR1cm4gdGhpcy5jb250ZXh0LnN0cmljdCYmZS5maXJzdFJlc3RyaWN0ZWQmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oZS5maXJzdFJlc3RyaWN0ZWQsZS5tZXNzYWdlKSx0aGlzLmNvbnRleHQuc3RyaWN0JiZlLnN0cmljdGVkJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGUuc3RyaWN0ZWQsZS5tZXNzYWdlKSx0aGlzLmNvbnRleHQuc3RyaWN0PXQsdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlPXIsbn0sZS5wcm90b3R5cGUucGFyc2VQcm9wZXJ0eU1ldGhvZEZ1bmN0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLmNvbnRleHQuYWxsb3dZaWVsZDt0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0hMDt2YXIgcj10aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVycygpLG49dGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kKHIpO3JldHVybiB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD10LHRoaXMuZmluYWxpemUoZSxuZXcgYS5GdW5jdGlvbkV4cHJlc3Npb24obnVsbCxyLnBhcmFtcyxuLCExKSl9LGUucHJvdG90eXBlLnBhcnNlUHJvcGVydHlNZXRob2RBc3luY0Z1bmN0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLmNvbnRleHQuYWxsb3dZaWVsZCxyPXRoaXMuY29udGV4dC5hd2FpdDt0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0hMSx0aGlzLmNvbnRleHQuYXdhaXQ9ITA7dmFyIG49dGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKSxpPXRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChuKTtyZXR1cm4gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9dCx0aGlzLmNvbnRleHQuYXdhaXQ9cix0aGlzLmZpbmFsaXplKGUsbmV3IGEuQXN5bmNGdW5jdGlvbkV4cHJlc3Npb24obnVsbCxuLnBhcmFtcyxpKSl9LGUucHJvdG90eXBlLnBhcnNlT2JqZWN0UHJvcGVydHlLZXk9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuY3JlYXRlTm9kZSgpLHI9dGhpcy5uZXh0VG9rZW4oKTtzd2l0Y2goci50eXBlKXtjYXNlIDg6Y2FzZSA2OnRoaXMuY29udGV4dC5zdHJpY3QmJnIub2N0YWwmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4ocixvLk1lc3NhZ2VzLlN0cmljdE9jdGFsTGl0ZXJhbCk7dmFyIG49dGhpcy5nZXRUb2tlblJhdyhyKTtlPXRoaXMuZmluYWxpemUodCxuZXcgYS5MaXRlcmFsKHIudmFsdWUsbikpO2JyZWFrO2Nhc2UgMzpjYXNlIDE6Y2FzZSA1OmNhc2UgNDplPXRoaXMuZmluYWxpemUodCxuZXcgYS5JZGVudGlmaWVyKHIudmFsdWUpKTticmVhaztjYXNlIDc6XCJbXCI9PT1yLnZhbHVlPyhlPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pLHRoaXMuZXhwZWN0KFwiXVwiKSk6ZT10aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHIpO2JyZWFrO2RlZmF1bHQ6ZT10aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHIpfXJldHVybiBlfSxlLnByb3RvdHlwZS5pc1Byb3BlcnR5S2V5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUudHlwZT09PXUuU3ludGF4LklkZW50aWZpZXImJmUubmFtZT09PXR8fGUudHlwZT09PXUuU3ludGF4LkxpdGVyYWwmJmUudmFsdWU9PT10fSxlLnByb3RvdHlwZS5wYXJzZU9iamVjdFByb3BlcnR5PWZ1bmN0aW9uKGUpe3ZhciB0LHI9dGhpcy5jcmVhdGVOb2RlKCksbj10aGlzLmxvb2thaGVhZCxpPW51bGwscz1udWxsLHU9ITEsbD0hMSxjPSExLGg9ITE7aWYoMz09PW4udHlwZSl7dmFyIHA9bi52YWx1ZTt0aGlzLm5leHRUb2tlbigpLHU9dGhpcy5tYXRjaChcIltcIiksaT0oaD0hKHRoaXMuaGFzTGluZVRlcm1pbmF0b3J8fFwiYXN5bmNcIiE9PXB8fHRoaXMubWF0Y2goXCI6XCIpfHx0aGlzLm1hdGNoKFwiKFwiKXx8dGhpcy5tYXRjaChcIipcIil8fHRoaXMubWF0Y2goXCIsXCIpKSk/dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCk6dGhpcy5maW5hbGl6ZShyLG5ldyBhLklkZW50aWZpZXIocCkpfWVsc2UgdGhpcy5tYXRjaChcIipcIik/dGhpcy5uZXh0VG9rZW4oKToodT10aGlzLm1hdGNoKFwiW1wiKSxpPXRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpKTt2YXIgZj10aGlzLnF1YWxpZmllZFByb3BlcnR5TmFtZSh0aGlzLmxvb2thaGVhZCk7aWYoMz09PW4udHlwZSYmIWgmJlwiZ2V0XCI9PT1uLnZhbHVlJiZmKXQ9XCJnZXRcIix1PXRoaXMubWF0Y2goXCJbXCIpLGk9dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCksdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITEscz10aGlzLnBhcnNlR2V0dGVyTWV0aG9kKCk7ZWxzZSBpZigzPT09bi50eXBlJiYhaCYmXCJzZXRcIj09PW4udmFsdWUmJmYpdD1cInNldFwiLHU9dGhpcy5tYXRjaChcIltcIiksaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSxzPXRoaXMucGFyc2VTZXR0ZXJNZXRob2QoKTtlbHNlIGlmKDc9PT1uLnR5cGUmJlwiKlwiPT09bi52YWx1ZSYmZil0PVwiaW5pdFwiLHU9dGhpcy5tYXRjaChcIltcIiksaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSxzPXRoaXMucGFyc2VHZW5lcmF0b3JNZXRob2QoKSxsPSEwO2Vsc2UgaWYoaXx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCksdD1cImluaXRcIix0aGlzLm1hdGNoKFwiOlwiKSYmIWgpIXUmJnRoaXMuaXNQcm9wZXJ0eUtleShpLFwiX19wcm90b19fXCIpJiYoZS52YWx1ZSYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuRHVwbGljYXRlUHJvdG9Qcm9wZXJ0eSksZS52YWx1ZT0hMCksdGhpcy5uZXh0VG9rZW4oKSxzPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO2Vsc2UgaWYodGhpcy5tYXRjaChcIihcIikpcz1oP3RoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZEFzeW5jRnVuY3Rpb24oKTp0aGlzLnBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbigpLGw9ITA7ZWxzZSBpZigzPT09bi50eXBlKWlmKHA9dGhpcy5maW5hbGl6ZShyLG5ldyBhLklkZW50aWZpZXIobi52YWx1ZSkpLHRoaXMubWF0Y2goXCI9XCIpKXt0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yPXRoaXMubG9va2FoZWFkLHRoaXMubmV4dFRva2VuKCksYz0hMDt2YXIgZD10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtzPXRoaXMuZmluYWxpemUocixuZXcgYS5Bc3NpZ25tZW50UGF0dGVybihwLGQpKX1lbHNlIGM9ITAscz1wO2Vsc2UgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtyZXR1cm4gdGhpcy5maW5hbGl6ZShyLG5ldyBhLlByb3BlcnR5KHQsaSx1LHMsbCxjKSl9LGUucHJvdG90eXBlLnBhcnNlT2JqZWN0SW5pdGlhbGl6ZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdChcIntcIik7Zm9yKHZhciB0PVtdLHI9e3ZhbHVlOiExfTshdGhpcy5tYXRjaChcIn1cIik7KXQucHVzaCh0aGlzLnBhcnNlT2JqZWN0UHJvcGVydHkocikpLHRoaXMubWF0Y2goXCJ9XCIpfHx0aGlzLmV4cGVjdENvbW1hU2VwYXJhdG9yKCk7cmV0dXJuIHRoaXMuZXhwZWN0KFwifVwiKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuT2JqZWN0RXhwcmVzc2lvbih0KSl9LGUucHJvdG90eXBlLnBhcnNlVGVtcGxhdGVIZWFkPWZ1bmN0aW9uKCl7bi5hc3NlcnQodGhpcy5sb29rYWhlYWQuaGVhZCxcIlRlbXBsYXRlIGxpdGVyYWwgbXVzdCBzdGFydCB3aXRoIGEgdGVtcGxhdGUgaGVhZFwiKTt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMubmV4dFRva2VuKCkscj10LnZhbHVlLGk9dC5jb29rZWQ7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5UZW1wbGF0ZUVsZW1lbnQoe3JhdzpyLGNvb2tlZDppfSx0LnRhaWwpKX0sZS5wcm90b3R5cGUucGFyc2VUZW1wbGF0ZUVsZW1lbnQ9ZnVuY3Rpb24oKXsxMCE9PXRoaXMubG9va2FoZWFkLnR5cGUmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMubmV4dFRva2VuKCkscj10LnZhbHVlLG49dC5jb29rZWQ7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5UZW1wbGF0ZUVsZW1lbnQoe3JhdzpyLGNvb2tlZDpufSx0LnRhaWwpKX0sZS5wcm90b3R5cGUucGFyc2VUZW1wbGF0ZUxpdGVyYWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PVtdLHI9W10sbj10aGlzLnBhcnNlVGVtcGxhdGVIZWFkKCk7Zm9yKHIucHVzaChuKTshbi50YWlsOyl0LnB1c2godGhpcy5wYXJzZUV4cHJlc3Npb24oKSksbj10aGlzLnBhcnNlVGVtcGxhdGVFbGVtZW50KCksci5wdXNoKG4pO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuVGVtcGxhdGVMaXRlcmFsKHIsdCkpfSxlLnByb3RvdHlwZS5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm49ZnVuY3Rpb24oZSl7c3dpdGNoKGUudHlwZSl7Y2FzZSB1LlN5bnRheC5JZGVudGlmaWVyOmNhc2UgdS5TeW50YXguTWVtYmVyRXhwcmVzc2lvbjpjYXNlIHUuU3ludGF4LlJlc3RFbGVtZW50OmNhc2UgdS5TeW50YXguQXNzaWdubWVudFBhdHRlcm46YnJlYWs7Y2FzZSB1LlN5bnRheC5TcHJlYWRFbGVtZW50OmUudHlwZT11LlN5bnRheC5SZXN0RWxlbWVudCx0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihlLmFyZ3VtZW50KTticmVhaztjYXNlIHUuU3ludGF4LkFycmF5RXhwcmVzc2lvbjplLnR5cGU9dS5TeW50YXguQXJyYXlQYXR0ZXJuO2Zvcih2YXIgdD0wO3Q8ZS5lbGVtZW50cy5sZW5ndGg7dCsrKW51bGwhPT1lLmVsZW1lbnRzW3RdJiZ0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihlLmVsZW1lbnRzW3RdKTticmVhaztjYXNlIHUuU3ludGF4Lk9iamVjdEV4cHJlc3Npb246Zm9yKGUudHlwZT11LlN5bnRheC5PYmplY3RQYXR0ZXJuLHQ9MDt0PGUucHJvcGVydGllcy5sZW5ndGg7dCsrKXRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGUucHJvcGVydGllc1t0XS52YWx1ZSk7YnJlYWs7Y2FzZSB1LlN5bnRheC5Bc3NpZ25tZW50RXhwcmVzc2lvbjplLnR5cGU9dS5TeW50YXguQXNzaWdubWVudFBhdHRlcm4sZGVsZXRlIGUub3BlcmF0b3IsdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZS5sZWZ0KX19LGUucHJvdG90eXBlLnBhcnNlR3JvdXBFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU7aWYodGhpcy5leHBlY3QoXCIoXCIpLHRoaXMubWF0Y2goXCIpXCIpKXRoaXMubmV4dFRva2VuKCksdGhpcy5tYXRjaChcIj0+XCIpfHx0aGlzLmV4cGVjdChcIj0+XCIpLGU9e3R5cGU6XCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCIscGFyYW1zOltdLGFzeW5jOiExfTtlbHNle3ZhciB0PXRoaXMubG9va2FoZWFkLHI9W107aWYodGhpcy5tYXRjaChcIi4uLlwiKSllPXRoaXMucGFyc2VSZXN0RWxlbWVudChyKSx0aGlzLmV4cGVjdChcIilcIiksdGhpcy5tYXRjaChcIj0+XCIpfHx0aGlzLmV4cGVjdChcIj0+XCIpLGU9e3R5cGU6XCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCIscGFyYW1zOltlXSxhc3luYzohMX07ZWxzZXt2YXIgbj0hMTtpZih0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMCxlPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pLHRoaXMubWF0Y2goXCIsXCIpKXt2YXIgaT1bXTtmb3IodGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSxpLnB1c2goZSk7MiE9PXRoaXMubG9va2FoZWFkLnR5cGUmJnRoaXMubWF0Y2goXCIsXCIpOyl7aWYodGhpcy5uZXh0VG9rZW4oKSx0aGlzLm1hdGNoKFwiKVwiKSl7dGhpcy5uZXh0VG9rZW4oKTtmb3IodmFyIG89MDtvPGkubGVuZ3RoO28rKyl0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihpW29dKTtuPSEwLGU9e3R5cGU6XCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCIscGFyYW1zOmksYXN5bmM6ITF9fWVsc2UgaWYodGhpcy5tYXRjaChcIi4uLlwiKSl7Zm9yKHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50fHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSxpLnB1c2godGhpcy5wYXJzZVJlc3RFbGVtZW50KHIpKSx0aGlzLmV4cGVjdChcIilcIiksdGhpcy5tYXRjaChcIj0+XCIpfHx0aGlzLmV4cGVjdChcIj0+XCIpLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLG89MDtvPGkubGVuZ3RoO28rKyl0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihpW29dKTtuPSEwLGU9e3R5cGU6XCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCIscGFyYW1zOmksYXN5bmM6ITF9fWVsc2UgaS5wdXNoKHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pKTtpZihuKWJyZWFrfW58fChlPXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUodCksbmV3IGEuU2VxdWVuY2VFeHByZXNzaW9uKGkpKSl9aWYoIW4pe2lmKHRoaXMuZXhwZWN0KFwiKVwiKSx0aGlzLm1hdGNoKFwiPT5cIikmJihlLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyJiZcInlpZWxkXCI9PT1lLm5hbWUmJihuPSEwLGU9e3R5cGU6XCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCIscGFyYW1zOltlXSxhc3luYzohMX0pLCFuKSl7aWYodGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnR8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpLGUudHlwZT09PXUuU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbilmb3Iobz0wO288ZS5leHByZXNzaW9ucy5sZW5ndGg7bysrKXRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGUuZXhwcmVzc2lvbnNbb10pO2Vsc2UgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZSk7ZT17dHlwZTpcIkFycm93UGFyYW1ldGVyUGxhY2VIb2xkZXJcIixwYXJhbXM6ZS50eXBlPT09dS5TeW50YXguU2VxdWVuY2VFeHByZXNzaW9uP2UuZXhwcmVzc2lvbnM6W2VdLGFzeW5jOiExfX10aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMX19fXJldHVybiBlfSxlLnByb3RvdHlwZS5wYXJzZUFyZ3VtZW50cz1mdW5jdGlvbigpe3RoaXMuZXhwZWN0KFwiKFwiKTt2YXIgZT1bXTtpZighdGhpcy5tYXRjaChcIilcIikpZm9yKDs7KXt2YXIgdD10aGlzLm1hdGNoKFwiLi4uXCIpP3RoaXMucGFyc2VTcHJlYWRFbGVtZW50KCk6dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7aWYoZS5wdXNoKHQpLHRoaXMubWF0Y2goXCIpXCIpKWJyZWFrO2lmKHRoaXMuZXhwZWN0Q29tbWFTZXBhcmF0b3IoKSx0aGlzLm1hdGNoKFwiKVwiKSlicmVha31yZXR1cm4gdGhpcy5leHBlY3QoXCIpXCIpLGV9LGUucHJvdG90eXBlLmlzSWRlbnRpZmllck5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIDM9PT1lLnR5cGV8fDQ9PT1lLnR5cGV8fDE9PT1lLnR5cGV8fDU9PT1lLnR5cGV9LGUucHJvdG90eXBlLnBhcnNlSWRlbnRpZmllck5hbWU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMubmV4dFRva2VuKCk7cmV0dXJuIHRoaXMuaXNJZGVudGlmaWVyTmFtZSh0KXx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0KSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuSWRlbnRpZmllcih0LnZhbHVlKSl9LGUucHJvdG90eXBlLnBhcnNlTmV3RXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5jcmVhdGVOb2RlKCkscj10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtpZihuLmFzc2VydChcIm5ld1wiPT09ci5uYW1lLFwiTmV3IGV4cHJlc3Npb24gbXVzdCBzdGFydCB3aXRoIGBuZXdgXCIpLHRoaXMubWF0Y2goXCIuXCIpKWlmKHRoaXMubmV4dFRva2VuKCksMz09PXRoaXMubG9va2FoZWFkLnR5cGUmJnRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSYmXCJ0YXJnZXRcIj09PXRoaXMubG9va2FoZWFkLnZhbHVlKXt2YXIgaT10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtlPW5ldyBhLk1ldGFQcm9wZXJ0eShyLGkpfWVsc2UgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7ZWxzZXt2YXIgbz10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb24pLHM9dGhpcy5tYXRjaChcIihcIik/dGhpcy5wYXJzZUFyZ3VtZW50cygpOltdO2U9bmV3IGEuTmV3RXhwcmVzc2lvbihvLHMpLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITF9cmV0dXJuIHRoaXMuZmluYWxpemUodCxlKX0sZS5wcm90b3R5cGUucGFyc2VBc3luY0FyZ3VtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7cmV0dXJuIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I9bnVsbCxlfSxlLnByb3RvdHlwZS5wYXJzZUFzeW5jQXJndW1lbnRzPWZ1bmN0aW9uKCl7dGhpcy5leHBlY3QoXCIoXCIpO3ZhciBlPVtdO2lmKCF0aGlzLm1hdGNoKFwiKVwiKSlmb3IoOzspe3ZhciB0PXRoaXMubWF0Y2goXCIuLi5cIik/dGhpcy5wYXJzZVNwcmVhZEVsZW1lbnQoKTp0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzeW5jQXJndW1lbnQpO2lmKGUucHVzaCh0KSx0aGlzLm1hdGNoKFwiKVwiKSlicmVhaztpZih0aGlzLmV4cGVjdENvbW1hU2VwYXJhdG9yKCksdGhpcy5tYXRjaChcIilcIikpYnJlYWt9cmV0dXJuIHRoaXMuZXhwZWN0KFwiKVwiKSxlfSxlLnByb3RvdHlwZS5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb25BbGxvd0NhbGw9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMubG9va2FoZWFkLHI9dGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwiYXN5bmNcIiksbj10aGlzLmNvbnRleHQuYWxsb3dJbjtmb3IodGhpcy5jb250ZXh0LmFsbG93SW49ITAsdGhpcy5tYXRjaEtleXdvcmQoXCJzdXBlclwiKSYmdGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5PyhlPXRoaXMuY3JlYXRlTm9kZSgpLHRoaXMubmV4dFRva2VuKCksZT10aGlzLmZpbmFsaXplKGUsbmV3IGEuU3VwZXIpLHRoaXMubWF0Y2goXCIoXCIpfHx0aGlzLm1hdGNoKFwiLlwiKXx8dGhpcy5tYXRjaChcIltcIil8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpKTplPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLm1hdGNoS2V5d29yZChcIm5ld1wiKT90aGlzLnBhcnNlTmV3RXhwcmVzc2lvbjp0aGlzLnBhcnNlUHJpbWFyeUV4cHJlc3Npb24pOzspaWYodGhpcy5tYXRjaChcIi5cIikpe3RoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITAsdGhpcy5leHBlY3QoXCIuXCIpO3ZhciBpPXRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO2U9dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZSh0KSxuZXcgYS5TdGF0aWNNZW1iZXJFeHByZXNzaW9uKGUsaSkpfWVsc2UgaWYodGhpcy5tYXRjaChcIihcIikpe3ZhciBvPXImJnQubGluZU51bWJlcj09PXRoaXMubG9va2FoZWFkLmxpbmVOdW1iZXI7dGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITEsdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMTt2YXIgcz1vP3RoaXMucGFyc2VBc3luY0FyZ3VtZW50cygpOnRoaXMucGFyc2VBcmd1bWVudHMoKTtpZihlPXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUodCksbmV3IGEuQ2FsbEV4cHJlc3Npb24oZSxzKSksbyYmdGhpcy5tYXRjaChcIj0+XCIpKXtmb3IodmFyIHU9MDt1PHMubGVuZ3RoOysrdSl0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihzW3VdKTtlPXt0eXBlOlwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiLHBhcmFtczpzLGFzeW5jOiEwfX19ZWxzZSBpZih0aGlzLm1hdGNoKFwiW1wiKSl0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSEwLHRoaXMuZXhwZWN0KFwiW1wiKSxpPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwcmVzc2lvbiksdGhpcy5leHBlY3QoXCJdXCIpLGU9dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZSh0KSxuZXcgYS5Db21wdXRlZE1lbWJlckV4cHJlc3Npb24oZSxpKSk7ZWxzZXtpZigxMCE9PXRoaXMubG9va2FoZWFkLnR5cGV8fCF0aGlzLmxvb2thaGVhZC5oZWFkKWJyZWFrO3ZhciBsPXRoaXMucGFyc2VUZW1wbGF0ZUxpdGVyYWwoKTtlPXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUodCksbmV3IGEuVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uKGUsbCkpfXJldHVybiB0aGlzLmNvbnRleHQuYWxsb3dJbj1uLGV9LGUucHJvdG90eXBlLnBhcnNlU3VwZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTtyZXR1cm4gdGhpcy5leHBlY3RLZXl3b3JkKFwic3VwZXJcIiksdGhpcy5tYXRjaChcIltcIil8fHRoaXMubWF0Y2goXCIuXCIpfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuU3VwZXIpfSxlLnByb3RvdHlwZS5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb249ZnVuY3Rpb24oKXtuLmFzc2VydCh0aGlzLmNvbnRleHQuYWxsb3dJbixcImNhbGxlZSBvZiBuZXcgZXhwcmVzc2lvbiBhbHdheXMgYWxsb3cgaW4ga2V5d29yZC5cIik7Zm9yKHZhciBlPXRoaXMuc3RhcnROb2RlKHRoaXMubG9va2FoZWFkKSx0PXRoaXMubWF0Y2hLZXl3b3JkKFwic3VwZXJcIikmJnRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keT90aGlzLnBhcnNlU3VwZXIoKTp0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5tYXRjaEtleXdvcmQoXCJuZXdcIik/dGhpcy5wYXJzZU5ld0V4cHJlc3Npb246dGhpcy5wYXJzZVByaW1hcnlFeHByZXNzaW9uKTs7KWlmKHRoaXMubWF0Y2goXCJbXCIpKXt0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSEwLHRoaXMuZXhwZWN0KFwiW1wiKTt2YXIgcj10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUV4cHJlc3Npb24pO3RoaXMuZXhwZWN0KFwiXVwiKSx0PXRoaXMuZmluYWxpemUoZSxuZXcgYS5Db21wdXRlZE1lbWJlckV4cHJlc3Npb24odCxyKSl9ZWxzZSBpZih0aGlzLm1hdGNoKFwiLlwiKSl0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSEwLHRoaXMuZXhwZWN0KFwiLlwiKSxyPXRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpLHQ9dGhpcy5maW5hbGl6ZShlLG5ldyBhLlN0YXRpY01lbWJlckV4cHJlc3Npb24odCxyKSk7ZWxzZXtpZigxMCE9PXRoaXMubG9va2FoZWFkLnR5cGV8fCF0aGlzLmxvb2thaGVhZC5oZWFkKWJyZWFrO3ZhciBpPXRoaXMucGFyc2VUZW1wbGF0ZUxpdGVyYWwoKTt0PXRoaXMuZmluYWxpemUoZSxuZXcgYS5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24odCxpKSl9cmV0dXJuIHR9LGUucHJvdG90eXBlLnBhcnNlVXBkYXRlRXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5sb29rYWhlYWQ7aWYodGhpcy5tYXRjaChcIisrXCIpfHx0aGlzLm1hdGNoKFwiLS1cIikpe3ZhciByPXRoaXMuc3RhcnROb2RlKHQpLG49dGhpcy5uZXh0VG9rZW4oKTtlPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKSx0aGlzLmNvbnRleHQuc3RyaWN0JiZlLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyJiZ0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChlLm5hbWUpJiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5TdHJpY3RMSFNQcmVmaXgpLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXR8fHRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkludmFsaWRMSFNJbkFzc2lnbm1lbnQpO3ZhciBpPSEwO2U9dGhpcy5maW5hbGl6ZShyLG5ldyBhLlVwZGF0ZUV4cHJlc3Npb24obi52YWx1ZSxlLGkpKSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExfWVsc2UgaWYoZT10aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb25BbGxvd0NhbGwpLCF0aGlzLmhhc0xpbmVUZXJtaW5hdG9yJiY3PT09dGhpcy5sb29rYWhlYWQudHlwZSYmKHRoaXMubWF0Y2goXCIrK1wiKXx8dGhpcy5tYXRjaChcIi0tXCIpKSl7dGhpcy5jb250ZXh0LnN0cmljdCYmZS50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmdGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoZS5uYW1lKSYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuU3RyaWN0TEhTUG9zdGZpeCksdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldHx8dGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuSW52YWxpZExIU0luQXNzaWdubWVudCksdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMTt2YXIgcz10aGlzLm5leHRUb2tlbigpLnZhbHVlO2k9ITEsZT10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHQpLG5ldyBhLlVwZGF0ZUV4cHJlc3Npb24ocyxlLGkpKX1yZXR1cm4gZX0sZS5wcm90b3R5cGUucGFyc2VBd2FpdEV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLm5leHRUb2tlbigpO3ZhciB0PXRoaXMucGFyc2VVbmFyeUV4cHJlc3Npb24oKTtyZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLkF3YWl0RXhwcmVzc2lvbih0KSl9LGUucHJvdG90eXBlLnBhcnNlVW5hcnlFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU7aWYodGhpcy5tYXRjaChcIitcIil8fHRoaXMubWF0Y2goXCItXCIpfHx0aGlzLm1hdGNoKFwiflwiKXx8dGhpcy5tYXRjaChcIiFcIil8fHRoaXMubWF0Y2hLZXl3b3JkKFwiZGVsZXRlXCIpfHx0aGlzLm1hdGNoS2V5d29yZChcInZvaWRcIil8fHRoaXMubWF0Y2hLZXl3b3JkKFwidHlwZW9mXCIpKXt2YXIgdD10aGlzLnN0YXJ0Tm9kZSh0aGlzLmxvb2thaGVhZCkscj10aGlzLm5leHRUb2tlbigpO2U9dGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VVbmFyeUV4cHJlc3Npb24pLGU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLlVuYXJ5RXhwcmVzc2lvbihyLnZhbHVlLGUpKSx0aGlzLmNvbnRleHQuc3RyaWN0JiZcImRlbGV0ZVwiPT09ZS5vcGVyYXRvciYmZS5hcmd1bWVudC50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuU3RyaWN0RGVsZXRlKSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExfWVsc2UgZT10aGlzLmNvbnRleHQuYXdhaXQmJnRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImF3YWl0XCIpP3RoaXMucGFyc2VBd2FpdEV4cHJlc3Npb24oKTp0aGlzLnBhcnNlVXBkYXRlRXhwcmVzc2lvbigpO3JldHVybiBlfSxlLnByb3RvdHlwZS5wYXJzZUV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubG9va2FoZWFkLHQ9dGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VVbmFyeUV4cHJlc3Npb24pO2lmKHQudHlwZSE9PXUuU3ludGF4LlVuYXJ5RXhwcmVzc2lvbiYmdGhpcy5tYXRjaChcIioqXCIpKXt0aGlzLm5leHRUb2tlbigpLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITE7dmFyIHI9dCxuPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uKTt0PXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoZSksbmV3IGEuQmluYXJ5RXhwcmVzc2lvbihcIioqXCIscixuKSl9cmV0dXJuIHR9LGUucHJvdG90eXBlLmJpbmFyeVByZWNlZGVuY2U9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS52YWx1ZTtyZXR1cm4gNz09PWUudHlwZT90aGlzLm9wZXJhdG9yUHJlY2VkZW5jZVt0XXx8MDo0PT09ZS50eXBlJiYoXCJpbnN0YW5jZW9mXCI9PT10fHx0aGlzLmNvbnRleHQuYWxsb3dJbiYmXCJpblwiPT09dCk/NzowfSxlLnByb3RvdHlwZS5wYXJzZUJpbmFyeUV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxvb2thaGVhZCx0PXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uKSxyPXRoaXMubG9va2FoZWFkLG49dGhpcy5iaW5hcnlQcmVjZWRlbmNlKHIpO2lmKG4+MCl7dGhpcy5uZXh0VG9rZW4oKSx0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0PSExLHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50PSExO2Zvcih2YXIgaT1bZSx0aGlzLmxvb2thaGVhZF0sbz10LHM9dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24pLHU9W28sci52YWx1ZSxzXSxsPVtuXTshKChuPXRoaXMuYmluYXJ5UHJlY2VkZW5jZSh0aGlzLmxvb2thaGVhZCkpPD0wKTspe2Zvcig7dS5sZW5ndGg+MiYmbjw9bFtsLmxlbmd0aC0xXTspe3M9dS5wb3AoKTt2YXIgYz11LnBvcCgpO2wucG9wKCksbz11LnBvcCgpLGkucG9wKCk7dmFyIGg9dGhpcy5zdGFydE5vZGUoaVtpLmxlbmd0aC0xXSk7dS5wdXNoKHRoaXMuZmluYWxpemUoaCxuZXcgYS5CaW5hcnlFeHByZXNzaW9uKGMsbyxzKSkpfXUucHVzaCh0aGlzLm5leHRUb2tlbigpLnZhbHVlKSxsLnB1c2gobiksaS5wdXNoKHRoaXMubG9va2FoZWFkKSx1LnB1c2godGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24pKX12YXIgcD11Lmxlbmd0aC0xO3Q9dVtwXTtmb3IodmFyIGY9aS5wb3AoKTtwPjE7KXt2YXIgZD1pLnBvcCgpLG09ZiYmZi5saW5lU3RhcnQ7aD10aGlzLnN0YXJ0Tm9kZShkLG0pLGM9dVtwLTFdLHQ9dGhpcy5maW5hbGl6ZShoLG5ldyBhLkJpbmFyeUV4cHJlc3Npb24oYyx1W3AtMl0sdCkpLHAtPTIsZj1kfX1yZXR1cm4gdH0sZS5wcm90b3R5cGUucGFyc2VDb25kaXRpb25hbEV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxvb2thaGVhZCx0PXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQmluYXJ5RXhwcmVzc2lvbik7aWYodGhpcy5tYXRjaChcIj9cIikpe3RoaXMubmV4dFRva2VuKCk7dmFyIHI9dGhpcy5jb250ZXh0LmFsbG93SW47dGhpcy5jb250ZXh0LmFsbG93SW49ITA7dmFyIG49dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7dGhpcy5jb250ZXh0LmFsbG93SW49cix0aGlzLmV4cGVjdChcIjpcIik7dmFyIGk9dGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7dD10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKGUpLG5ldyBhLkNvbmRpdGlvbmFsRXhwcmVzc2lvbih0LG4saSkpLHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQ9ITEsdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ9ITF9cmV0dXJuIHR9LGUucHJvdG90eXBlLmNoZWNrUGF0dGVyblBhcmFtPWZ1bmN0aW9uKGUsdCl7c3dpdGNoKHQudHlwZSl7Y2FzZSB1LlN5bnRheC5JZGVudGlmaWVyOnRoaXMudmFsaWRhdGVQYXJhbShlLHQsdC5uYW1lKTticmVhaztjYXNlIHUuU3ludGF4LlJlc3RFbGVtZW50OnRoaXMuY2hlY2tQYXR0ZXJuUGFyYW0oZSx0LmFyZ3VtZW50KTticmVhaztjYXNlIHUuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuOnRoaXMuY2hlY2tQYXR0ZXJuUGFyYW0oZSx0LmxlZnQpO2JyZWFrO2Nhc2UgdS5TeW50YXguQXJyYXlQYXR0ZXJuOmZvcih2YXIgcj0wO3I8dC5lbGVtZW50cy5sZW5ndGg7cisrKW51bGwhPT10LmVsZW1lbnRzW3JdJiZ0aGlzLmNoZWNrUGF0dGVyblBhcmFtKGUsdC5lbGVtZW50c1tyXSk7YnJlYWs7Y2FzZSB1LlN5bnRheC5PYmplY3RQYXR0ZXJuOmZvcihyPTA7cjx0LnByb3BlcnRpZXMubGVuZ3RoO3IrKyl0aGlzLmNoZWNrUGF0dGVyblBhcmFtKGUsdC5wcm9wZXJ0aWVzW3JdLnZhbHVlKX1lLnNpbXBsZT1lLnNpbXBsZSYmdCBpbnN0YW5jZW9mIGEuSWRlbnRpZmllcn0sZS5wcm90b3R5cGUucmVpbnRlcnByZXRBc0NvdmVyRm9ybWFsc0xpc3Q9ZnVuY3Rpb24oZSl7dmFyIHQscj1bZV0sbj0hMTtzd2l0Y2goZS50eXBlKXtjYXNlIHUuU3ludGF4LklkZW50aWZpZXI6YnJlYWs7Y2FzZVwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlclwiOnI9ZS5wYXJhbXMsbj1lLmFzeW5jO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIG51bGx9dD17c2ltcGxlOiEwLHBhcmFtU2V0Ont9fTtmb3IodmFyIGk9MDtpPHIubGVuZ3RoOysraSkoYT1yW2ldKS50eXBlPT09dS5TeW50YXguQXNzaWdubWVudFBhdHRlcm4/YS5yaWdodC50eXBlPT09dS5TeW50YXguWWllbGRFeHByZXNzaW9uJiYoYS5yaWdodC5hcmd1bWVudCYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCksYS5yaWdodC50eXBlPXUuU3ludGF4LklkZW50aWZpZXIsYS5yaWdodC5uYW1lPVwieWllbGRcIixkZWxldGUgYS5yaWdodC5hcmd1bWVudCxkZWxldGUgYS5yaWdodC5kZWxlZ2F0ZSk6biYmYS50eXBlPT09dS5TeW50YXguSWRlbnRpZmllciYmXCJhd2FpdFwiPT09YS5uYW1lJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSx0aGlzLmNoZWNrUGF0dGVyblBhcmFtKHQsYSkscltpXT1hO2lmKHRoaXMuY29udGV4dC5zdHJpY3R8fCF0aGlzLmNvbnRleHQuYWxsb3dZaWVsZClmb3IoaT0wO2k8ci5sZW5ndGg7KytpKXt2YXIgYTsoYT1yW2ldKS50eXBlPT09dS5TeW50YXguWWllbGRFeHByZXNzaW9uJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKX1pZih0Lm1lc3NhZ2U9PT1vLk1lc3NhZ2VzLlN0cmljdFBhcmFtRHVwZSl7dmFyIHM9dGhpcy5jb250ZXh0LnN0cmljdD90LnN0cmljdGVkOnQuZmlyc3RSZXN0cmljdGVkO3RoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4ocyx0Lm1lc3NhZ2UpfXJldHVybntzaW1wbGU6dC5zaW1wbGUscGFyYW1zOnIsc3RyaWN0ZWQ6dC5zdHJpY3RlZCxmaXJzdFJlc3RyaWN0ZWQ6dC5maXJzdFJlc3RyaWN0ZWQsbWVzc2FnZTp0Lm1lc3NhZ2V9fSxlLnByb3RvdHlwZS5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU7aWYoIXRoaXMuY29udGV4dC5hbGxvd1lpZWxkJiZ0aGlzLm1hdGNoS2V5d29yZChcInlpZWxkXCIpKWU9dGhpcy5wYXJzZVlpZWxkRXhwcmVzc2lvbigpO2Vsc2V7dmFyIHQ9dGhpcy5sb29rYWhlYWQscj10O2lmKGU9dGhpcy5wYXJzZUNvbmRpdGlvbmFsRXhwcmVzc2lvbigpLDM9PT1yLnR5cGUmJnIubGluZU51bWJlcj09PXRoaXMubG9va2FoZWFkLmxpbmVOdW1iZXImJlwiYXN5bmNcIj09PXIudmFsdWUmJigzPT09dGhpcy5sb29rYWhlYWQudHlwZXx8dGhpcy5tYXRjaEtleXdvcmQoXCJ5aWVsZFwiKSkpe3ZhciBuPXRoaXMucGFyc2VQcmltYXJ5RXhwcmVzc2lvbigpO3RoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKG4pLGU9e3R5cGU6XCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCIscGFyYW1zOltuXSxhc3luYzohMH19aWYoXCJBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyXCI9PT1lLnR5cGV8fHRoaXMubWF0Y2goXCI9PlwiKSl7dGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMTt2YXIgaT1lLmFzeW5jLHM9dGhpcy5yZWludGVycHJldEFzQ292ZXJGb3JtYWxzTGlzdChlKTtpZihzKXt0aGlzLmhhc0xpbmVUZXJtaW5hdG9yJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSx0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yPW51bGw7dmFyIGw9dGhpcy5jb250ZXh0LnN0cmljdCxjPXRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZTt0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU9cy5zaW1wbGU7dmFyIGg9dGhpcy5jb250ZXh0LmFsbG93WWllbGQscD10aGlzLmNvbnRleHQuYXdhaXQ7dGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITAsdGhpcy5jb250ZXh0LmF3YWl0PWk7dmFyIGY9dGhpcy5zdGFydE5vZGUodCk7dGhpcy5leHBlY3QoXCI9PlwiKTt2YXIgZD12b2lkIDA7aWYodGhpcy5tYXRjaChcIntcIikpe3ZhciBtPXRoaXMuY29udGV4dC5hbGxvd0luO3RoaXMuY29udGV4dC5hbGxvd0luPSEwLGQ9dGhpcy5wYXJzZUZ1bmN0aW9uU291cmNlRWxlbWVudHMoKSx0aGlzLmNvbnRleHQuYWxsb3dJbj1tfWVsc2UgZD10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTt2YXIgeT1kLnR5cGUhPT11LlN5bnRheC5CbG9ja1N0YXRlbWVudDt0aGlzLmNvbnRleHQuc3RyaWN0JiZzLmZpcnN0UmVzdHJpY3RlZCYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihzLmZpcnN0UmVzdHJpY3RlZCxzLm1lc3NhZ2UpLHRoaXMuY29udGV4dC5zdHJpY3QmJnMuc3RyaWN0ZWQmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4ocy5zdHJpY3RlZCxzLm1lc3NhZ2UpLGU9aT90aGlzLmZpbmFsaXplKGYsbmV3IGEuQXN5bmNBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbihzLnBhcmFtcyxkLHkpKTp0aGlzLmZpbmFsaXplKGYsbmV3IGEuQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ocy5wYXJhbXMsZCx5KSksdGhpcy5jb250ZXh0LnN0cmljdD1sLHRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZT1jLHRoaXMuY29udGV4dC5hbGxvd1lpZWxkPWgsdGhpcy5jb250ZXh0LmF3YWl0PXB9fWVsc2UgaWYodGhpcy5tYXRjaEFzc2lnbigpKXtpZih0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0fHx0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5JbnZhbGlkTEhTSW5Bc3NpZ25tZW50KSx0aGlzLmNvbnRleHQuc3RyaWN0JiZlLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyKXt2YXIgdj1lO3RoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKHYubmFtZSkmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4ocixvLk1lc3NhZ2VzLlN0cmljdExIU0Fzc2lnbm1lbnQpLHRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQodi5uYW1lKSYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihyLG8uTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkKX10aGlzLm1hdGNoKFwiPVwiKT90aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihlKToodGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMSx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMSk7dmFyIF89KHI9dGhpcy5uZXh0VG9rZW4oKSkudmFsdWUsZz10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtlPXRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUodCksbmV3IGEuQXNzaWdubWVudEV4cHJlc3Npb24oXyxlLGcpKSx0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yPW51bGx9fXJldHVybiBlfSxlLnByb3RvdHlwZS5wYXJzZUV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxvb2thaGVhZCx0PXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO2lmKHRoaXMubWF0Y2goXCIsXCIpKXt2YXIgcj1bXTtmb3Ioci5wdXNoKHQpOzIhPT10aGlzLmxvb2thaGVhZC50eXBlJiZ0aGlzLm1hdGNoKFwiLFwiKTspdGhpcy5uZXh0VG9rZW4oKSxyLnB1c2godGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbikpO3Q9dGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShlKSxuZXcgYS5TZXF1ZW5jZUV4cHJlc3Npb24ocikpfXJldHVybiB0fSxlLnByb3RvdHlwZS5wYXJzZVN0YXRlbWVudExpc3RJdGVtPWZ1bmN0aW9uKCl7dmFyIGU7aWYodGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldD0hMCx0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudD0hMCw0PT09dGhpcy5sb29rYWhlYWQudHlwZSlzd2l0Y2godGhpcy5sb29rYWhlYWQudmFsdWUpe2Nhc2VcImV4cG9ydFwiOnRoaXMuY29udGV4dC5pc01vZHVsZXx8dGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCxvLk1lc3NhZ2VzLklsbGVnYWxFeHBvcnREZWNsYXJhdGlvbiksZT10aGlzLnBhcnNlRXhwb3J0RGVjbGFyYXRpb24oKTticmVhaztjYXNlXCJpbXBvcnRcIjp0aGlzLmNvbnRleHQuaXNNb2R1bGV8fHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQsby5NZXNzYWdlcy5JbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb24pLGU9dGhpcy5wYXJzZUltcG9ydERlY2xhcmF0aW9uKCk7YnJlYWs7Y2FzZVwiY29uc3RcIjplPXRoaXMucGFyc2VMZXhpY2FsRGVjbGFyYXRpb24oe2luRm9yOiExfSk7YnJlYWs7Y2FzZVwiZnVuY3Rpb25cIjplPXRoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk7YnJlYWs7Y2FzZVwiY2xhc3NcIjplPXRoaXMucGFyc2VDbGFzc0RlY2xhcmF0aW9uKCk7YnJlYWs7Y2FzZVwibGV0XCI6ZT10aGlzLmlzTGV4aWNhbERlY2xhcmF0aW9uKCk/dGhpcy5wYXJzZUxleGljYWxEZWNsYXJhdGlvbih7aW5Gb3I6ITF9KTp0aGlzLnBhcnNlU3RhdGVtZW50KCk7YnJlYWs7ZGVmYXVsdDplPXRoaXMucGFyc2VTdGF0ZW1lbnQoKX1lbHNlIGU9dGhpcy5wYXJzZVN0YXRlbWVudCgpO3JldHVybiBlfSxlLnByb3RvdHlwZS5wYXJzZUJsb2NrPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3QoXCJ7XCIpO2Zvcih2YXIgdD1bXTshdGhpcy5tYXRjaChcIn1cIik7KXQucHVzaCh0aGlzLnBhcnNlU3RhdGVtZW50TGlzdEl0ZW0oKSk7cmV0dXJuIHRoaXMuZXhwZWN0KFwifVwiKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuQmxvY2tTdGF0ZW1lbnQodCkpfSxlLnByb3RvdHlwZS5wYXJzZUxleGljYWxCaW5kaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5jcmVhdGVOb2RlKCksbj10aGlzLnBhcnNlUGF0dGVybihbXSxlKTt0aGlzLmNvbnRleHQuc3RyaWN0JiZuLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyJiZ0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChuLm5hbWUpJiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5TdHJpY3RWYXJOYW1lKTt2YXIgaT1udWxsO3JldHVyblwiY29uc3RcIj09PWU/dGhpcy5tYXRjaEtleXdvcmQoXCJpblwiKXx8dGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwib2ZcIil8fCh0aGlzLm1hdGNoKFwiPVwiKT8odGhpcy5uZXh0VG9rZW4oKSxpPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pKTp0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5EZWNsYXJhdGlvbk1pc3NpbmdJbml0aWFsaXplcixcImNvbnN0XCIpKTooIXQuaW5Gb3ImJm4udHlwZSE9PXUuU3ludGF4LklkZW50aWZpZXJ8fHRoaXMubWF0Y2goXCI9XCIpKSYmKHRoaXMuZXhwZWN0KFwiPVwiKSxpPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pKSx0aGlzLmZpbmFsaXplKHIsbmV3IGEuVmFyaWFibGVEZWNsYXJhdG9yKG4saSkpfSxlLnByb3RvdHlwZS5wYXJzZUJpbmRpbmdMaXN0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPVt0aGlzLnBhcnNlTGV4aWNhbEJpbmRpbmcoZSx0KV07dGhpcy5tYXRjaChcIixcIik7KXRoaXMubmV4dFRva2VuKCksci5wdXNoKHRoaXMucGFyc2VMZXhpY2FsQmluZGluZyhlLHQpKTtyZXR1cm4gcn0sZS5wcm90b3R5cGUuaXNMZXhpY2FsRGVjbGFyYXRpb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnNjYW5uZXIuc2F2ZVN0YXRlKCk7dGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpO3ZhciB0PXRoaXMuc2Nhbm5lci5sZXgoKTtyZXR1cm4gdGhpcy5zY2FubmVyLnJlc3RvcmVTdGF0ZShlKSwzPT09dC50eXBlfHw3PT09dC50eXBlJiZcIltcIj09PXQudmFsdWV8fDc9PT10LnR5cGUmJlwie1wiPT09dC52YWx1ZXx8ND09PXQudHlwZSYmXCJsZXRcIj09PXQudmFsdWV8fDQ9PT10LnR5cGUmJlwieWllbGRcIj09PXQudmFsdWV9LGUucHJvdG90eXBlLnBhcnNlTGV4aWNhbERlY2xhcmF0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuY3JlYXRlTm9kZSgpLHI9dGhpcy5uZXh0VG9rZW4oKS52YWx1ZTtuLmFzc2VydChcImxldFwiPT09cnx8XCJjb25zdFwiPT09cixcIkxleGljYWwgZGVjbGFyYXRpb24gbXVzdCBiZSBlaXRoZXIgbGV0IG9yIGNvbnN0XCIpO3ZhciBpPXRoaXMucGFyc2VCaW5kaW5nTGlzdChyLGUpO3JldHVybiB0aGlzLmNvbnN1bWVTZW1pY29sb24oKSx0aGlzLmZpbmFsaXplKHQsbmV3IGEuVmFyaWFibGVEZWNsYXJhdGlvbihpLHIpKX0sZS5wcm90b3R5cGUucGFyc2VCaW5kaW5nUmVzdEVsZW1lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdChcIi4uLlwiKTt2YXIgbj10aGlzLnBhcnNlUGF0dGVybihlLHQpO3JldHVybiB0aGlzLmZpbmFsaXplKHIsbmV3IGEuUmVzdEVsZW1lbnQobikpfSxlLnByb3RvdHlwZS5wYXJzZUFycmF5UGF0dGVybj1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0KFwiW1wiKTtmb3IodmFyIG49W107IXRoaXMubWF0Y2goXCJdXCIpOylpZih0aGlzLm1hdGNoKFwiLFwiKSl0aGlzLm5leHRUb2tlbigpLG4ucHVzaChudWxsKTtlbHNle2lmKHRoaXMubWF0Y2goXCIuLi5cIikpe24ucHVzaCh0aGlzLnBhcnNlQmluZGluZ1Jlc3RFbGVtZW50KGUsdCkpO2JyZWFrfW4ucHVzaCh0aGlzLnBhcnNlUGF0dGVybldpdGhEZWZhdWx0KGUsdCkpLHRoaXMubWF0Y2goXCJdXCIpfHx0aGlzLmV4cGVjdChcIixcIil9cmV0dXJuIHRoaXMuZXhwZWN0KFwiXVwiKSx0aGlzLmZpbmFsaXplKHIsbmV3IGEuQXJyYXlQYXR0ZXJuKG4pKX0sZS5wcm90b3R5cGUucGFyc2VQcm9wZXJ0eVBhdHRlcm49ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGk9dGhpcy5jcmVhdGVOb2RlKCksbz0hMSxzPSExO2lmKDM9PT10aGlzLmxvb2thaGVhZC50eXBlKXt2YXIgdT10aGlzLmxvb2thaGVhZDtyPXRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTt2YXIgbD10aGlzLmZpbmFsaXplKGksbmV3IGEuSWRlbnRpZmllcih1LnZhbHVlKSk7aWYodGhpcy5tYXRjaChcIj1cIikpe2UucHVzaCh1KSxzPSEwLHRoaXMubmV4dFRva2VuKCk7dmFyIGM9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7bj10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHUpLG5ldyBhLkFzc2lnbm1lbnRQYXR0ZXJuKGwsYykpfWVsc2UgdGhpcy5tYXRjaChcIjpcIik/KHRoaXMuZXhwZWN0KFwiOlwiKSxuPXRoaXMucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQoZSx0KSk6KGUucHVzaCh1KSxzPSEwLG49bCl9ZWxzZSBvPXRoaXMubWF0Y2goXCJbXCIpLHI9dGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCksdGhpcy5leHBlY3QoXCI6XCIpLG49dGhpcy5wYXJzZVBhdHRlcm5XaXRoRGVmYXVsdChlLHQpO3JldHVybiB0aGlzLmZpbmFsaXplKGksbmV3IGEuUHJvcGVydHkoXCJpbml0XCIscixvLG4sITEscykpfSxlLnByb3RvdHlwZS5wYXJzZU9iamVjdFBhdHRlcm49ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmNyZWF0ZU5vZGUoKSxuPVtdO2Zvcih0aGlzLmV4cGVjdChcIntcIik7IXRoaXMubWF0Y2goXCJ9XCIpOyluLnB1c2godGhpcy5wYXJzZVByb3BlcnR5UGF0dGVybihlLHQpKSx0aGlzLm1hdGNoKFwifVwiKXx8dGhpcy5leHBlY3QoXCIsXCIpO3JldHVybiB0aGlzLmV4cGVjdChcIn1cIiksdGhpcy5maW5hbGl6ZShyLG5ldyBhLk9iamVjdFBhdHRlcm4obikpfSxlLnByb3RvdHlwZS5wYXJzZVBhdHRlcm49ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gdGhpcy5tYXRjaChcIltcIik/cj10aGlzLnBhcnNlQXJyYXlQYXR0ZXJuKGUsdCk6dGhpcy5tYXRjaChcIntcIik/cj10aGlzLnBhcnNlT2JqZWN0UGF0dGVybihlLHQpOighdGhpcy5tYXRjaEtleXdvcmQoXCJsZXRcIil8fFwiY29uc3RcIiE9PXQmJlwibGV0XCIhPT10fHx0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkLG8uTWVzc2FnZXMuTGV0SW5MZXhpY2FsQmluZGluZyksZS5wdXNoKHRoaXMubG9va2FoZWFkKSxyPXRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIodCkpLHJ9LGUucHJvdG90eXBlLnBhcnNlUGF0dGVybldpdGhEZWZhdWx0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5sb29rYWhlYWQsbj10aGlzLnBhcnNlUGF0dGVybihlLHQpO2lmKHRoaXMubWF0Y2goXCI9XCIpKXt0aGlzLm5leHRUb2tlbigpO3ZhciBpPXRoaXMuY29udGV4dC5hbGxvd1lpZWxkO3RoaXMuY29udGV4dC5hbGxvd1lpZWxkPSEwO3ZhciBvPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO3RoaXMuY29udGV4dC5hbGxvd1lpZWxkPWksbj10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHIpLG5ldyBhLkFzc2lnbm1lbnRQYXR0ZXJuKG4sbykpfXJldHVybiBufSxlLnByb3RvdHlwZS5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmNyZWF0ZU5vZGUoKSxyPXRoaXMubmV4dFRva2VuKCk7cmV0dXJuIDQ9PT1yLnR5cGUmJlwieWllbGRcIj09PXIudmFsdWU/dGhpcy5jb250ZXh0LnN0cmljdD90aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHIsby5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpOnRoaXMuY29udGV4dC5hbGxvd1lpZWxkfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHIpOjMhPT1yLnR5cGU/dGhpcy5jb250ZXh0LnN0cmljdCYmND09PXIudHlwZSYmdGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChyLnZhbHVlKT90aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHIsby5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpOih0aGlzLmNvbnRleHQuc3RyaWN0fHxcImxldFwiIT09ci52YWx1ZXx8XCJ2YXJcIiE9PWUpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHIpOih0aGlzLmNvbnRleHQuaXNNb2R1bGV8fHRoaXMuY29udGV4dC5hd2FpdCkmJjM9PT1yLnR5cGUmJlwiYXdhaXRcIj09PXIudmFsdWUmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4ociksdGhpcy5maW5hbGl6ZSh0LG5ldyBhLklkZW50aWZpZXIoci52YWx1ZSkpfSxlLnByb3RvdHlwZS5wYXJzZVZhcmlhYmxlRGVjbGFyYXRpb249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jcmVhdGVOb2RlKCkscj10aGlzLnBhcnNlUGF0dGVybihbXSxcInZhclwiKTt0aGlzLmNvbnRleHQuc3RyaWN0JiZyLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyJiZ0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChyLm5hbWUpJiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5TdHJpY3RWYXJOYW1lKTt2YXIgbj1udWxsO3JldHVybiB0aGlzLm1hdGNoKFwiPVwiKT8odGhpcy5uZXh0VG9rZW4oKSxuPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pKTpyLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyfHxlLmluRm9yfHx0aGlzLmV4cGVjdChcIj1cIiksdGhpcy5maW5hbGl6ZSh0LG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRvcihyLG4pKX0sZS5wcm90b3R5cGUucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdD1mdW5jdGlvbihlKXt2YXIgdD17aW5Gb3I6ZS5pbkZvcn0scj1bXTtmb3Ioci5wdXNoKHRoaXMucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uKHQpKTt0aGlzLm1hdGNoKFwiLFwiKTspdGhpcy5uZXh0VG9rZW4oKSxyLnB1c2godGhpcy5wYXJzZVZhcmlhYmxlRGVjbGFyYXRpb24odCkpO3JldHVybiByfSxlLnByb3RvdHlwZS5wYXJzZVZhcmlhYmxlU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwidmFyXCIpO3ZhciB0PXRoaXMucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCh7aW5Gb3I6ITF9KTtyZXR1cm4gdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksdGhpcy5maW5hbGl6ZShlLG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRpb24odCxcInZhclwiKSl9LGUucHJvdG90eXBlLnBhcnNlRW1wdHlTdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTtyZXR1cm4gdGhpcy5leHBlY3QoXCI7XCIpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5FbXB0eVN0YXRlbWVudCl9LGUucHJvdG90eXBlLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTtyZXR1cm4gdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksdGhpcy5maW5hbGl6ZShlLG5ldyBhLkV4cHJlc3Npb25TdGF0ZW1lbnQodCkpfSxlLnByb3RvdHlwZS5wYXJzZUlmQ2xhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGV4dC5zdHJpY3QmJnRoaXMubWF0Y2hLZXl3b3JkKFwiZnVuY3Rpb25cIikmJnRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uKSx0aGlzLnBhcnNlU3RhdGVtZW50KCl9LGUucHJvdG90eXBlLnBhcnNlSWZTdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuY3JlYXRlTm9kZSgpLHI9bnVsbDt0aGlzLmV4cGVjdEtleXdvcmQoXCJpZlwiKSx0aGlzLmV4cGVjdChcIihcIik7dmFyIG49dGhpcy5wYXJzZUV4cHJlc3Npb24oKTtyZXR1cm4hdGhpcy5tYXRjaChcIilcIikmJnRoaXMuY29uZmlnLnRvbGVyYW50Pyh0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpLGU9dGhpcy5maW5hbGl6ZSh0aGlzLmNyZWF0ZU5vZGUoKSxuZXcgYS5FbXB0eVN0YXRlbWVudCkpOih0aGlzLmV4cGVjdChcIilcIiksZT10aGlzLnBhcnNlSWZDbGF1c2UoKSx0aGlzLm1hdGNoS2V5d29yZChcImVsc2VcIikmJih0aGlzLm5leHRUb2tlbigpLHI9dGhpcy5wYXJzZUlmQ2xhdXNlKCkpKSx0aGlzLmZpbmFsaXplKHQsbmV3IGEuSWZTdGF0ZW1lbnQobixlLHIpKX0sZS5wcm90b3R5cGUucGFyc2VEb1doaWxlU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwiZG9cIik7dmFyIHQ9dGhpcy5jb250ZXh0LmluSXRlcmF0aW9uO3RoaXMuY29udGV4dC5pbkl0ZXJhdGlvbj0hMDt2YXIgcj10aGlzLnBhcnNlU3RhdGVtZW50KCk7dGhpcy5jb250ZXh0LmluSXRlcmF0aW9uPXQsdGhpcy5leHBlY3RLZXl3b3JkKFwid2hpbGVcIiksdGhpcy5leHBlY3QoXCIoXCIpO3ZhciBuPXRoaXMucGFyc2VFeHByZXNzaW9uKCk7cmV0dXJuIXRoaXMubWF0Y2goXCIpXCIpJiZ0aGlzLmNvbmZpZy50b2xlcmFudD90aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpOih0aGlzLmV4cGVjdChcIilcIiksdGhpcy5tYXRjaChcIjtcIikmJnRoaXMubmV4dFRva2VuKCkpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5Eb1doaWxlU3RhdGVtZW50KHIsbikpfSxlLnByb3RvdHlwZS5wYXJzZVdoaWxlU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdEtleXdvcmQoXCJ3aGlsZVwiKSx0aGlzLmV4cGVjdChcIihcIik7dmFyIHI9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTtpZighdGhpcy5tYXRjaChcIilcIikmJnRoaXMuY29uZmlnLnRvbGVyYW50KXRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSksZT10aGlzLmZpbmFsaXplKHRoaXMuY3JlYXRlTm9kZSgpLG5ldyBhLkVtcHR5U3RhdGVtZW50KTtlbHNle3RoaXMuZXhwZWN0KFwiKVwiKTt2YXIgbj10aGlzLmNvbnRleHQuaW5JdGVyYXRpb247dGhpcy5jb250ZXh0LmluSXRlcmF0aW9uPSEwLGU9dGhpcy5wYXJzZVN0YXRlbWVudCgpLHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbj1ufXJldHVybiB0aGlzLmZpbmFsaXplKHQsbmV3IGEuV2hpbGVTdGF0ZW1lbnQocixlKSl9LGUucHJvdG90eXBlLnBhcnNlRm9yU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGUsdCxyLG49bnVsbCxpPW51bGwscz1udWxsLGw9ITAsYz10aGlzLmNyZWF0ZU5vZGUoKTtpZih0aGlzLmV4cGVjdEtleXdvcmQoXCJmb3JcIiksdGhpcy5leHBlY3QoXCIoXCIpLHRoaXMubWF0Y2goXCI7XCIpKXRoaXMubmV4dFRva2VuKCk7ZWxzZSBpZih0aGlzLm1hdGNoS2V5d29yZChcInZhclwiKSl7bj10aGlzLmNyZWF0ZU5vZGUoKSx0aGlzLm5leHRUb2tlbigpO3ZhciBoPXRoaXMuY29udGV4dC5hbGxvd0luO3RoaXMuY29udGV4dC5hbGxvd0luPSExO3ZhciBwPXRoaXMucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCh7aW5Gb3I6ITB9KTtpZih0aGlzLmNvbnRleHQuYWxsb3dJbj1oLDE9PT1wLmxlbmd0aCYmdGhpcy5tYXRjaEtleXdvcmQoXCJpblwiKSl7dmFyIGY9cFswXTtmLmluaXQmJihmLmlkLnR5cGU9PT11LlN5bnRheC5BcnJheVBhdHRlcm58fGYuaWQudHlwZT09PXUuU3ludGF4Lk9iamVjdFBhdHRlcm58fHRoaXMuY29udGV4dC5zdHJpY3QpJiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5Gb3JJbk9mTG9vcEluaXRpYWxpemVyLFwiZm9yLWluXCIpLG49dGhpcy5maW5hbGl6ZShuLG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRpb24ocCxcInZhclwiKSksdGhpcy5uZXh0VG9rZW4oKSxlPW4sdD10aGlzLnBhcnNlRXhwcmVzc2lvbigpLG49bnVsbH1lbHNlIDE9PT1wLmxlbmd0aCYmbnVsbD09PXBbMF0uaW5pdCYmdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwib2ZcIik/KG49dGhpcy5maW5hbGl6ZShuLG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRpb24ocCxcInZhclwiKSksdGhpcy5uZXh0VG9rZW4oKSxlPW4sdD10aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKSxuPW51bGwsbD0hMSk6KG49dGhpcy5maW5hbGl6ZShuLG5ldyBhLlZhcmlhYmxlRGVjbGFyYXRpb24ocCxcInZhclwiKSksdGhpcy5leHBlY3QoXCI7XCIpKX1lbHNlIGlmKHRoaXMubWF0Y2hLZXl3b3JkKFwiY29uc3RcIil8fHRoaXMubWF0Y2hLZXl3b3JkKFwibGV0XCIpKXtuPXRoaXMuY3JlYXRlTm9kZSgpO3ZhciBkPXRoaXMubmV4dFRva2VuKCkudmFsdWU7dGhpcy5jb250ZXh0LnN0cmljdHx8XCJpblwiIT09dGhpcy5sb29rYWhlYWQudmFsdWU/KGg9dGhpcy5jb250ZXh0LmFsbG93SW4sdGhpcy5jb250ZXh0LmFsbG93SW49ITEscD10aGlzLnBhcnNlQmluZGluZ0xpc3QoZCx7aW5Gb3I6ITB9KSx0aGlzLmNvbnRleHQuYWxsb3dJbj1oLDE9PT1wLmxlbmd0aCYmbnVsbD09PXBbMF0uaW5pdCYmdGhpcy5tYXRjaEtleXdvcmQoXCJpblwiKT8obj10aGlzLmZpbmFsaXplKG4sbmV3IGEuVmFyaWFibGVEZWNsYXJhdGlvbihwLGQpKSx0aGlzLm5leHRUb2tlbigpLGU9bix0PXRoaXMucGFyc2VFeHByZXNzaW9uKCksbj1udWxsKToxPT09cC5sZW5ndGgmJm51bGw9PT1wWzBdLmluaXQmJnRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcIm9mXCIpPyhuPXRoaXMuZmluYWxpemUobixuZXcgYS5WYXJpYWJsZURlY2xhcmF0aW9uKHAsZCkpLHRoaXMubmV4dFRva2VuKCksZT1uLHQ9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCksbj1udWxsLGw9ITEpOih0aGlzLmNvbnN1bWVTZW1pY29sb24oKSxuPXRoaXMuZmluYWxpemUobixuZXcgYS5WYXJpYWJsZURlY2xhcmF0aW9uKHAsZCkpKSk6KG49dGhpcy5maW5hbGl6ZShuLG5ldyBhLklkZW50aWZpZXIoZCkpLHRoaXMubmV4dFRva2VuKCksZT1uLHQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKSxuPW51bGwpfWVsc2V7dmFyIG09dGhpcy5sb29rYWhlYWQ7aWYoaD10aGlzLmNvbnRleHQuYWxsb3dJbix0aGlzLmNvbnRleHQuYWxsb3dJbj0hMSxuPXRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pLHRoaXMuY29udGV4dC5hbGxvd0luPWgsdGhpcy5tYXRjaEtleXdvcmQoXCJpblwiKSl0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0JiZuLnR5cGUhPT11LlN5bnRheC5Bc3NpZ25tZW50RXhwcmVzc2lvbnx8dGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuSW52YWxpZExIU0luRm9ySW4pLHRoaXMubmV4dFRva2VuKCksdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4obiksZT1uLHQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKSxuPW51bGw7ZWxzZSBpZih0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJvZlwiKSl0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0JiZuLnR5cGUhPT11LlN5bnRheC5Bc3NpZ25tZW50RXhwcmVzc2lvbnx8dGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuSW52YWxpZExIU0luRm9yTG9vcCksdGhpcy5uZXh0VG9rZW4oKSx0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihuKSxlPW4sdD10aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKSxuPW51bGwsbD0hMTtlbHNle2lmKHRoaXMubWF0Y2goXCIsXCIpKXtmb3IodmFyIHk9W25dO3RoaXMubWF0Y2goXCIsXCIpOyl0aGlzLm5leHRUb2tlbigpLHkucHVzaCh0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk7bj10aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKG0pLG5ldyBhLlNlcXVlbmNlRXhwcmVzc2lvbih5KSl9dGhpcy5leHBlY3QoXCI7XCIpfX1pZih2b2lkIDA9PT1lJiYodGhpcy5tYXRjaChcIjtcIil8fChpPXRoaXMucGFyc2VFeHByZXNzaW9uKCkpLHRoaXMuZXhwZWN0KFwiO1wiKSx0aGlzLm1hdGNoKFwiKVwiKXx8KHM9dGhpcy5wYXJzZUV4cHJlc3Npb24oKSkpLCF0aGlzLm1hdGNoKFwiKVwiKSYmdGhpcy5jb25maWcudG9sZXJhbnQpdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKSxyPXRoaXMuZmluYWxpemUodGhpcy5jcmVhdGVOb2RlKCksbmV3IGEuRW1wdHlTdGF0ZW1lbnQpO2Vsc2V7dGhpcy5leHBlY3QoXCIpXCIpO3ZhciB2PXRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbjt0aGlzLmNvbnRleHQuaW5JdGVyYXRpb249ITAscj10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZVN0YXRlbWVudCksdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uPXZ9cmV0dXJuIHZvaWQgMD09PWU/dGhpcy5maW5hbGl6ZShjLG5ldyBhLkZvclN0YXRlbWVudChuLGkscyxyKSk6bD90aGlzLmZpbmFsaXplKGMsbmV3IGEuRm9ySW5TdGF0ZW1lbnQoZSx0LHIpKTp0aGlzLmZpbmFsaXplKGMsbmV3IGEuRm9yT2ZTdGF0ZW1lbnQoZSx0LHIpKX0sZS5wcm90b3R5cGUucGFyc2VDb250aW51ZVN0YXRlbWVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcImNvbnRpbnVlXCIpO3ZhciB0PW51bGw7aWYoMz09PXRoaXMubG9va2FoZWFkLnR5cGUmJiF0aGlzLmhhc0xpbmVUZXJtaW5hdG9yKXt2YXIgcj10aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7dD1yO3ZhciBuPVwiJFwiK3IubmFtZTtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb250ZXh0LmxhYmVsU2V0LG4pfHx0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5Vbmtub3duTGFiZWwsci5uYW1lKX1yZXR1cm4gdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksbnVsbCE9PXR8fHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbnx8dGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuSWxsZWdhbENvbnRpbnVlKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuQ29udGludWVTdGF0ZW1lbnQodCkpfSxlLnByb3RvdHlwZS5wYXJzZUJyZWFrU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwiYnJlYWtcIik7dmFyIHQ9bnVsbDtpZigzPT09dGhpcy5sb29rYWhlYWQudHlwZSYmIXRoaXMuaGFzTGluZVRlcm1pbmF0b3Ipe3ZhciByPXRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKSxuPVwiJFwiK3IubmFtZTtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb250ZXh0LmxhYmVsU2V0LG4pfHx0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5Vbmtub3duTGFiZWwsci5uYW1lKSx0PXJ9cmV0dXJuIHRoaXMuY29uc3VtZVNlbWljb2xvbigpLG51bGwhPT10fHx0aGlzLmNvbnRleHQuaW5JdGVyYXRpb258fHRoaXMuY29udGV4dC5pblN3aXRjaHx8dGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuSWxsZWdhbEJyZWFrKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuQnJlYWtTdGF0ZW1lbnQodCkpfSxlLnByb3RvdHlwZS5wYXJzZVJldHVyblN0YXRlbWVudD1mdW5jdGlvbigpe3RoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keXx8dGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuSWxsZWdhbFJldHVybik7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwicmV0dXJuXCIpO3ZhciB0PSh0aGlzLm1hdGNoKFwiO1wiKXx8dGhpcy5tYXRjaChcIn1cIil8fHRoaXMuaGFzTGluZVRlcm1pbmF0b3J8fDI9PT10aGlzLmxvb2thaGVhZC50eXBlKSYmOCE9PXRoaXMubG9va2FoZWFkLnR5cGUmJjEwIT09dGhpcy5sb29rYWhlYWQudHlwZT9udWxsOnRoaXMucGFyc2VFeHByZXNzaW9uKCk7cmV0dXJuIHRoaXMuY29uc3VtZVNlbWljb2xvbigpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5SZXR1cm5TdGF0ZW1lbnQodCkpfSxlLnByb3RvdHlwZS5wYXJzZVdpdGhTdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt0aGlzLmNvbnRleHQuc3RyaWN0JiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5TdHJpY3RNb2RlV2l0aCk7dmFyIGUsdD10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdEtleXdvcmQoXCJ3aXRoXCIpLHRoaXMuZXhwZWN0KFwiKFwiKTt2YXIgcj10aGlzLnBhcnNlRXhwcmVzc2lvbigpO3JldHVybiF0aGlzLm1hdGNoKFwiKVwiKSYmdGhpcy5jb25maWcudG9sZXJhbnQ/KHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSksZT10aGlzLmZpbmFsaXplKHRoaXMuY3JlYXRlTm9kZSgpLG5ldyBhLkVtcHR5U3RhdGVtZW50KSk6KHRoaXMuZXhwZWN0KFwiKVwiKSxlPXRoaXMucGFyc2VTdGF0ZW1lbnQoKSksdGhpcy5maW5hbGl6ZSh0LG5ldyBhLldpdGhTdGF0ZW1lbnQocixlKSl9LGUucHJvdG90eXBlLnBhcnNlU3dpdGNoQ2FzZT1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5tYXRjaEtleXdvcmQoXCJkZWZhdWx0XCIpPyh0aGlzLm5leHRUb2tlbigpLGU9bnVsbCk6KHRoaXMuZXhwZWN0S2V5d29yZChcImNhc2VcIiksZT10aGlzLnBhcnNlRXhwcmVzc2lvbigpKSx0aGlzLmV4cGVjdChcIjpcIik7Zm9yKHZhciByPVtdOyEodGhpcy5tYXRjaChcIn1cIil8fHRoaXMubWF0Y2hLZXl3b3JkKFwiZGVmYXVsdFwiKXx8dGhpcy5tYXRjaEtleXdvcmQoXCJjYXNlXCIpKTspci5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtyZXR1cm4gdGhpcy5maW5hbGl6ZSh0LG5ldyBhLlN3aXRjaENhc2UoZSxyKSl9LGUucHJvdG90eXBlLnBhcnNlU3dpdGNoU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwic3dpdGNoXCIpLHRoaXMuZXhwZWN0KFwiKFwiKTt2YXIgdD10aGlzLnBhcnNlRXhwcmVzc2lvbigpO3RoaXMuZXhwZWN0KFwiKVwiKTt2YXIgcj10aGlzLmNvbnRleHQuaW5Td2l0Y2g7dGhpcy5jb250ZXh0LmluU3dpdGNoPSEwO3ZhciBuPVtdLGk9ITE7Zm9yKHRoaXMuZXhwZWN0KFwie1wiKTshdGhpcy5tYXRjaChcIn1cIik7KXt2YXIgcz10aGlzLnBhcnNlU3dpdGNoQ2FzZSgpO251bGw9PT1zLnRlc3QmJihpJiZ0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5NdWx0aXBsZURlZmF1bHRzSW5Td2l0Y2gpLGk9ITApLG4ucHVzaChzKX1yZXR1cm4gdGhpcy5leHBlY3QoXCJ9XCIpLHRoaXMuY29udGV4dC5pblN3aXRjaD1yLHRoaXMuZmluYWxpemUoZSxuZXcgYS5Td2l0Y2hTdGF0ZW1lbnQodCxuKSl9LGUucHJvdG90eXBlLnBhcnNlTGFiZWxsZWRTdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuY3JlYXRlTm9kZSgpLHI9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTtpZihyLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyJiZ0aGlzLm1hdGNoKFwiOlwiKSl7dGhpcy5uZXh0VG9rZW4oKTt2YXIgbj1yLGk9XCIkXCIrbi5uYW1lO09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNvbnRleHQubGFiZWxTZXQsaSkmJnRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLlJlZGVjbGFyYXRpb24sXCJMYWJlbFwiLG4ubmFtZSksdGhpcy5jb250ZXh0LmxhYmVsU2V0W2ldPSEwO3ZhciBzPXZvaWQgMDtpZih0aGlzLm1hdGNoS2V5d29yZChcImNsYXNzXCIpKXRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpLHM9dGhpcy5wYXJzZUNsYXNzRGVjbGFyYXRpb24oKTtlbHNlIGlmKHRoaXMubWF0Y2hLZXl3b3JkKFwiZnVuY3Rpb25cIikpe3ZhciBsPXRoaXMubG9va2FoZWFkLGM9dGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKTt0aGlzLmNvbnRleHQuc3RyaWN0P3RoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4obCxvLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uKTpjLmdlbmVyYXRvciYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihsLG8uTWVzc2FnZXMuR2VuZXJhdG9ySW5MZWdhY3lDb250ZXh0KSxzPWN9ZWxzZSBzPXRoaXMucGFyc2VTdGF0ZW1lbnQoKTtkZWxldGUgdGhpcy5jb250ZXh0LmxhYmVsU2V0W2ldLGU9bmV3IGEuTGFiZWxlZFN0YXRlbWVudChuLHMpfWVsc2UgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksZT1uZXcgYS5FeHByZXNzaW9uU3RhdGVtZW50KHIpO3JldHVybiB0aGlzLmZpbmFsaXplKHQsZSl9LGUucHJvdG90eXBlLnBhcnNlVGhyb3dTdGF0ZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdEtleXdvcmQoXCJ0aHJvd1wiKSx0aGlzLmhhc0xpbmVUZXJtaW5hdG9yJiZ0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5OZXdsaW5lQWZ0ZXJUaHJvdyk7dmFyIHQ9dGhpcy5wYXJzZUV4cHJlc3Npb24oKTtyZXR1cm4gdGhpcy5jb25zdW1lU2VtaWNvbG9uKCksdGhpcy5maW5hbGl6ZShlLG5ldyBhLlRocm93U3RhdGVtZW50KHQpKX0sZS5wcm90b3R5cGUucGFyc2VDYXRjaENsYXVzZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcImNhdGNoXCIpLHRoaXMuZXhwZWN0KFwiKFwiKSx0aGlzLm1hdGNoKFwiKVwiKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7Zm9yKHZhciB0PVtdLHI9dGhpcy5wYXJzZVBhdHRlcm4odCksbj17fSxpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBzPVwiJFwiK3RbaV0udmFsdWU7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scykmJnRoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkR1cGxpY2F0ZUJpbmRpbmcsdFtpXS52YWx1ZSksbltzXT0hMH10aGlzLmNvbnRleHQuc3RyaWN0JiZyLnR5cGU9PT11LlN5bnRheC5JZGVudGlmaWVyJiZ0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChyLm5hbWUpJiZ0aGlzLnRvbGVyYXRlRXJyb3Ioby5NZXNzYWdlcy5TdHJpY3RDYXRjaFZhcmlhYmxlKSx0aGlzLmV4cGVjdChcIilcIik7dmFyIGw9dGhpcy5wYXJzZUJsb2NrKCk7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5DYXRjaENsYXVzZShyLGwpKX0sZS5wcm90b3R5cGUucGFyc2VGaW5hbGx5Q2xhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXhwZWN0S2V5d29yZChcImZpbmFsbHlcIiksdGhpcy5wYXJzZUJsb2NrKCl9LGUucHJvdG90eXBlLnBhcnNlVHJ5U3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3RLZXl3b3JkKFwidHJ5XCIpO3ZhciB0PXRoaXMucGFyc2VCbG9jaygpLHI9dGhpcy5tYXRjaEtleXdvcmQoXCJjYXRjaFwiKT90aGlzLnBhcnNlQ2F0Y2hDbGF1c2UoKTpudWxsLG49dGhpcy5tYXRjaEtleXdvcmQoXCJmaW5hbGx5XCIpP3RoaXMucGFyc2VGaW5hbGx5Q2xhdXNlKCk6bnVsbDtyZXR1cm4gcnx8bnx8dGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuTm9DYXRjaE9yRmluYWxseSksdGhpcy5maW5hbGl6ZShlLG5ldyBhLlRyeVN0YXRlbWVudCh0LHIsbikpfSxlLnByb3RvdHlwZS5wYXJzZURlYnVnZ2VyU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCk7cmV0dXJuIHRoaXMuZXhwZWN0S2V5d29yZChcImRlYnVnZ2VyXCIpLHRoaXMuY29uc3VtZVNlbWljb2xvbigpLHRoaXMuZmluYWxpemUoZSxuZXcgYS5EZWJ1Z2dlclN0YXRlbWVudCl9LGUucHJvdG90eXBlLnBhcnNlU3RhdGVtZW50PWZ1bmN0aW9uKCl7dmFyIGU7c3dpdGNoKHRoaXMubG9va2FoZWFkLnR5cGUpe2Nhc2UgMTpjYXNlIDU6Y2FzZSA2OmNhc2UgODpjYXNlIDEwOmNhc2UgOTplPXRoaXMucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KCk7YnJlYWs7Y2FzZSA3OnZhciB0PXRoaXMubG9va2FoZWFkLnZhbHVlO2U9XCJ7XCI9PT10P3RoaXMucGFyc2VCbG9jaygpOlwiKFwiPT09dD90aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCgpOlwiO1wiPT09dD90aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQoKTp0aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCgpO2JyZWFrO2Nhc2UgMzplPXRoaXMubWF0Y2hBc3luY0Z1bmN0aW9uKCk/dGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKTp0aGlzLnBhcnNlTGFiZWxsZWRTdGF0ZW1lbnQoKTticmVhaztjYXNlIDQ6c3dpdGNoKHRoaXMubG9va2FoZWFkLnZhbHVlKXtjYXNlXCJicmVha1wiOmU9dGhpcy5wYXJzZUJyZWFrU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwiY29udGludWVcIjplPXRoaXMucGFyc2VDb250aW51ZVN0YXRlbWVudCgpO2JyZWFrO2Nhc2VcImRlYnVnZ2VyXCI6ZT10aGlzLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQoKTticmVhaztjYXNlXCJkb1wiOmU9dGhpcy5wYXJzZURvV2hpbGVTdGF0ZW1lbnQoKTticmVhaztjYXNlXCJmb3JcIjplPXRoaXMucGFyc2VGb3JTdGF0ZW1lbnQoKTticmVhaztjYXNlXCJmdW5jdGlvblwiOmU9dGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKTticmVhaztjYXNlXCJpZlwiOmU9dGhpcy5wYXJzZUlmU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwicmV0dXJuXCI6ZT10aGlzLnBhcnNlUmV0dXJuU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwic3dpdGNoXCI6ZT10aGlzLnBhcnNlU3dpdGNoU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwidGhyb3dcIjplPXRoaXMucGFyc2VUaHJvd1N0YXRlbWVudCgpO2JyZWFrO2Nhc2VcInRyeVwiOmU9dGhpcy5wYXJzZVRyeVN0YXRlbWVudCgpO2JyZWFrO2Nhc2VcInZhclwiOmU9dGhpcy5wYXJzZVZhcmlhYmxlU3RhdGVtZW50KCk7YnJlYWs7Y2FzZVwid2hpbGVcIjplPXRoaXMucGFyc2VXaGlsZVN0YXRlbWVudCgpO2JyZWFrO2Nhc2VcIndpdGhcIjplPXRoaXMucGFyc2VXaXRoU3RhdGVtZW50KCk7YnJlYWs7ZGVmYXVsdDplPXRoaXMucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KCl9YnJlYWs7ZGVmYXVsdDplPXRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpfXJldHVybiBlfSxlLnByb3RvdHlwZS5wYXJzZUZ1bmN0aW9uU291cmNlRWxlbWVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdChcIntcIik7dmFyIHQ9dGhpcy5wYXJzZURpcmVjdGl2ZVByb2xvZ3VlcygpLHI9dGhpcy5jb250ZXh0LmxhYmVsU2V0LG49dGhpcy5jb250ZXh0LmluSXRlcmF0aW9uLGk9dGhpcy5jb250ZXh0LmluU3dpdGNoLG89dGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5O2Zvcih0aGlzLmNvbnRleHQubGFiZWxTZXQ9e30sdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uPSExLHRoaXMuY29udGV4dC5pblN3aXRjaD0hMSx0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHk9ITA7MiE9PXRoaXMubG9va2FoZWFkLnR5cGUmJiF0aGlzLm1hdGNoKFwifVwiKTspdC5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtyZXR1cm4gdGhpcy5leHBlY3QoXCJ9XCIpLHRoaXMuY29udGV4dC5sYWJlbFNldD1yLHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbj1uLHRoaXMuY29udGV4dC5pblN3aXRjaD1pLHRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keT1vLHRoaXMuZmluYWxpemUoZSxuZXcgYS5CbG9ja1N0YXRlbWVudCh0KSl9LGUucHJvdG90eXBlLnZhbGlkYXRlUGFyYW09ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPVwiJFwiK3I7dGhpcy5jb250ZXh0LnN0cmljdD8odGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQocikmJihlLnN0cmljdGVkPXQsZS5tZXNzYWdlPW8uTWVzc2FnZXMuU3RyaWN0UGFyYW1OYW1lKSxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZS5wYXJhbVNldCxuKSYmKGUuc3RyaWN0ZWQ9dCxlLm1lc3NhZ2U9by5NZXNzYWdlcy5TdHJpY3RQYXJhbUR1cGUpKTplLmZpcnN0UmVzdHJpY3RlZHx8KHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKHIpPyhlLmZpcnN0UmVzdHJpY3RlZD10LGUubWVzc2FnZT1vLk1lc3NhZ2VzLlN0cmljdFBhcmFtTmFtZSk6dGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChyKT8oZS5maXJzdFJlc3RyaWN0ZWQ9dCxlLm1lc3NhZ2U9by5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLnBhcmFtU2V0LG4pJiYoZS5zdHJpY3RlZD10LGUubWVzc2FnZT1vLk1lc3NhZ2VzLlN0cmljdFBhcmFtRHVwZSkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wYXJhbVNldCxuLHt2YWx1ZTohMCxlbnVtZXJhYmxlOiEwLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pOmUucGFyYW1TZXRbbl09ITB9LGUucHJvdG90eXBlLnBhcnNlUmVzdEVsZW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5jcmVhdGVOb2RlKCk7dGhpcy5leHBlY3QoXCIuLi5cIik7dmFyIHI9dGhpcy5wYXJzZVBhdHRlcm4oZSk7cmV0dXJuIHRoaXMubWF0Y2goXCI9XCIpJiZ0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5EZWZhdWx0UmVzdFBhcmFtZXRlciksdGhpcy5tYXRjaChcIilcIil8fHRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLlBhcmFtZXRlckFmdGVyUmVzdFBhcmFtZXRlciksdGhpcy5maW5hbGl6ZSh0LG5ldyBhLlJlc3RFbGVtZW50KHIpKX0sZS5wcm90b3R5cGUucGFyc2VGb3JtYWxQYXJhbWV0ZXI9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9dGhpcy5tYXRjaChcIi4uLlwiKT90aGlzLnBhcnNlUmVzdEVsZW1lbnQodCk6dGhpcy5wYXJzZVBhdHRlcm5XaXRoRGVmYXVsdCh0KSxuPTA7bjx0Lmxlbmd0aDtuKyspdGhpcy52YWxpZGF0ZVBhcmFtKGUsdFtuXSx0W25dLnZhbHVlKTtlLnNpbXBsZT1lLnNpbXBsZSYmciBpbnN0YW5jZW9mIGEuSWRlbnRpZmllcixlLnBhcmFtcy5wdXNoKHIpfSxlLnByb3RvdHlwZS5wYXJzZUZvcm1hbFBhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7dmFyIHQ7aWYodD17c2ltcGxlOiEwLHBhcmFtczpbXSxmaXJzdFJlc3RyaWN0ZWQ6ZX0sdGhpcy5leHBlY3QoXCIoXCIpLCF0aGlzLm1hdGNoKFwiKVwiKSlmb3IodC5wYXJhbVNldD17fTsyIT09dGhpcy5sb29rYWhlYWQudHlwZSYmKHRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXIodCksIXRoaXMubWF0Y2goXCIpXCIpKSYmKHRoaXMuZXhwZWN0KFwiLFwiKSwhdGhpcy5tYXRjaChcIilcIikpOyk7cmV0dXJuIHRoaXMuZXhwZWN0KFwiKVwiKSx7c2ltcGxlOnQuc2ltcGxlLHBhcmFtczp0LnBhcmFtcyxzdHJpY3RlZDp0LnN0cmljdGVkLGZpcnN0UmVzdHJpY3RlZDp0LmZpcnN0UmVzdHJpY3RlZCxtZXNzYWdlOnQubWVzc2FnZX19LGUucHJvdG90eXBlLm1hdGNoQXN5bmNGdW5jdGlvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzeW5jXCIpO2lmKGUpe3ZhciB0PXRoaXMuc2Nhbm5lci5zYXZlU3RhdGUoKTt0aGlzLnNjYW5uZXIuc2NhbkNvbW1lbnRzKCk7dmFyIHI9dGhpcy5zY2FubmVyLmxleCgpO3RoaXMuc2Nhbm5lci5yZXN0b3JlU3RhdGUodCksZT10LmxpbmVOdW1iZXI9PT1yLmxpbmVOdW1iZXImJjQ9PT1yLnR5cGUmJlwiZnVuY3Rpb25cIj09PXIudmFsdWV9cmV0dXJuIGV9LGUucHJvdG90eXBlLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmNyZWF0ZU5vZGUoKSxyPXRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzeW5jXCIpO3ImJnRoaXMubmV4dFRva2VuKCksdGhpcy5leHBlY3RLZXl3b3JkKFwiZnVuY3Rpb25cIik7dmFyIG4saT0hciYmdGhpcy5tYXRjaChcIipcIik7aSYmdGhpcy5uZXh0VG9rZW4oKTt2YXIgcz1udWxsLHU9bnVsbDtpZighZXx8IXRoaXMubWF0Y2goXCIoXCIpKXt2YXIgbD10aGlzLmxvb2thaGVhZDtzPXRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKSx0aGlzLmNvbnRleHQuc3RyaWN0P3RoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGwudmFsdWUpJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGwsby5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbk5hbWUpOnRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGwudmFsdWUpPyh1PWwsbj1vLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZSk6dGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChsLnZhbHVlKSYmKHU9bCxuPW8uTWVzc2FnZXMuU3RyaWN0UmVzZXJ2ZWRXb3JkKX12YXIgYz10aGlzLmNvbnRleHQuYXdhaXQsaD10aGlzLmNvbnRleHQuYWxsb3dZaWVsZDt0aGlzLmNvbnRleHQuYXdhaXQ9cix0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0haTt2YXIgcD10aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVycyh1KSxmPXAucGFyYW1zLGQ9cC5zdHJpY3RlZDt1PXAuZmlyc3RSZXN0cmljdGVkLHAubWVzc2FnZSYmKG49cC5tZXNzYWdlKTt2YXIgbT10aGlzLmNvbnRleHQuc3RyaWN0LHk9dGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlO3RoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZT1wLnNpbXBsZTt2YXIgdj10aGlzLnBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cygpO3JldHVybiB0aGlzLmNvbnRleHQuc3RyaWN0JiZ1JiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHUsbiksdGhpcy5jb250ZXh0LnN0cmljdCYmZCYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihkLG4pLHRoaXMuY29udGV4dC5zdHJpY3Q9bSx0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU9eSx0aGlzLmNvbnRleHQuYXdhaXQ9Yyx0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD1oLHI/dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbihzLGYsdikpOnRoaXMuZmluYWxpemUodCxuZXcgYS5GdW5jdGlvbkRlY2xhcmF0aW9uKHMsZix2LGkpKX0sZS5wcm90b3R5cGUucGFyc2VGdW5jdGlvbkV4cHJlc3Npb249ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzeW5jXCIpO3QmJnRoaXMubmV4dFRva2VuKCksdGhpcy5leHBlY3RLZXl3b3JkKFwiZnVuY3Rpb25cIik7dmFyIHIsbj0hdCYmdGhpcy5tYXRjaChcIipcIik7biYmdGhpcy5uZXh0VG9rZW4oKTt2YXIgaSxzPW51bGwsdT10aGlzLmNvbnRleHQuYXdhaXQsbD10aGlzLmNvbnRleHQuYWxsb3dZaWVsZDtpZih0aGlzLmNvbnRleHQuYXdhaXQ9dCx0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0hbiwhdGhpcy5tYXRjaChcIihcIikpe3ZhciBjPXRoaXMubG9va2FoZWFkO3M9dGhpcy5jb250ZXh0LnN0cmljdHx8bnx8IXRoaXMubWF0Y2hLZXl3b3JkKFwieWllbGRcIik/dGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpOnRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpLHRoaXMuY29udGV4dC5zdHJpY3Q/dGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoYy52YWx1ZSkmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oYyxvLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZSk6dGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoYy52YWx1ZSk/KGk9YyxyPW8uTWVzc2FnZXMuU3RyaWN0RnVuY3Rpb25OYW1lKTp0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKGMudmFsdWUpJiYoaT1jLHI9by5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpfXZhciBoPXRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKGkpLHA9aC5wYXJhbXMsZj1oLnN0cmljdGVkO2k9aC5maXJzdFJlc3RyaWN0ZWQsaC5tZXNzYWdlJiYocj1oLm1lc3NhZ2UpO3ZhciBkPXRoaXMuY29udGV4dC5zdHJpY3QsbT10aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU7dGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlPWguc2ltcGxlO3ZhciB5PXRoaXMucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCk7cmV0dXJuIHRoaXMuY29udGV4dC5zdHJpY3QmJmkmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oaSxyKSx0aGlzLmNvbnRleHQuc3RyaWN0JiZmJiZ0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKGYsciksdGhpcy5jb250ZXh0LnN0cmljdD1kLHRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZT1tLHRoaXMuY29udGV4dC5hd2FpdD11LHRoaXMuY29udGV4dC5hbGxvd1lpZWxkPWwsdD90aGlzLmZpbmFsaXplKGUsbmV3IGEuQXN5bmNGdW5jdGlvbkV4cHJlc3Npb24ocyxwLHkpKTp0aGlzLmZpbmFsaXplKGUsbmV3IGEuRnVuY3Rpb25FeHByZXNzaW9uKHMscCx5LG4pKX0sZS5wcm90b3R5cGUucGFyc2VEaXJlY3RpdmU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmxvb2thaGVhZCx0PXRoaXMuY3JlYXRlTm9kZSgpLHI9dGhpcy5wYXJzZUV4cHJlc3Npb24oKSxuPXIudHlwZT09PXUuU3ludGF4LkxpdGVyYWw/dGhpcy5nZXRUb2tlblJhdyhlKS5zbGljZSgxLC0xKTpudWxsO3JldHVybiB0aGlzLmNvbnN1bWVTZW1pY29sb24oKSx0aGlzLmZpbmFsaXplKHQsbj9uZXcgYS5EaXJlY3RpdmUocixuKTpuZXcgYS5FeHByZXNzaW9uU3RhdGVtZW50KHIpKX0sZS5wcm90b3R5cGUucGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9bnVsbCx0PVtdOzspe3ZhciByPXRoaXMubG9va2FoZWFkO2lmKDghPT1yLnR5cGUpYnJlYWs7dmFyIG49dGhpcy5wYXJzZURpcmVjdGl2ZSgpO3QucHVzaChuKTt2YXIgaT1uLmRpcmVjdGl2ZTtpZihcInN0cmluZ1wiIT10eXBlb2YgaSlicmVhaztcInVzZSBzdHJpY3RcIj09PWk/KHRoaXMuY29udGV4dC5zdHJpY3Q9ITAsZSYmdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihlLG8uTWVzc2FnZXMuU3RyaWN0T2N0YWxMaXRlcmFsKSx0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmV8fHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4ocixvLk1lc3NhZ2VzLklsbGVnYWxMYW5ndWFnZU1vZGVEaXJlY3RpdmUpKTohZSYmci5vY3RhbCYmKGU9cil9cmV0dXJuIHR9LGUucHJvdG90eXBlLnF1YWxpZmllZFByb3BlcnR5TmFtZT1mdW5jdGlvbihlKXtzd2l0Y2goZS50eXBlKXtjYXNlIDM6Y2FzZSA4OmNhc2UgMTpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpyZXR1cm4hMDtjYXNlIDc6cmV0dXJuXCJbXCI9PT1lLnZhbHVlfXJldHVybiExfSxlLnByb3RvdHlwZS5wYXJzZUdldHRlck1ldGhvZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5jb250ZXh0LmFsbG93WWllbGQ7dGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITA7dmFyIHI9dGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKTtyLnBhcmFtcy5sZW5ndGg+MCYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuQmFkR2V0dGVyQXJpdHkpO3ZhciBuPXRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChyKTtyZXR1cm4gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9dCx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRnVuY3Rpb25FeHByZXNzaW9uKG51bGwsci5wYXJhbXMsbiwhMSkpfSxlLnByb3RvdHlwZS5wYXJzZVNldHRlck1ldGhvZD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5jb250ZXh0LmFsbG93WWllbGQ7dGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITA7dmFyIHI9dGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKTsxIT09ci5wYXJhbXMubGVuZ3RoP3RoaXMudG9sZXJhdGVFcnJvcihvLk1lc3NhZ2VzLkJhZFNldHRlckFyaXR5KTpyLnBhcmFtc1swXWluc3RhbmNlb2YgYS5SZXN0RWxlbWVudCYmdGhpcy50b2xlcmF0ZUVycm9yKG8uTWVzc2FnZXMuQmFkU2V0dGVyUmVzdFBhcmFtZXRlcik7dmFyIG49dGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kKHIpO3JldHVybiB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD10LHRoaXMuZmluYWxpemUoZSxuZXcgYS5GdW5jdGlvbkV4cHJlc3Npb24obnVsbCxyLnBhcmFtcyxuLCExKSl9LGUucHJvdG90eXBlLnBhcnNlR2VuZXJhdG9yTWV0aG9kPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLmNvbnRleHQuYWxsb3dZaWVsZDt0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0hMDt2YXIgcj10aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVycygpO3RoaXMuY29udGV4dC5hbGxvd1lpZWxkPSExO3ZhciBuPXRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChyKTtyZXR1cm4gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9dCx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRnVuY3Rpb25FeHByZXNzaW9uKG51bGwsci5wYXJhbXMsbiwhMCkpfSxlLnByb3RvdHlwZS5pc1N0YXJ0T2ZFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9ITAsdD10aGlzLmxvb2thaGVhZC52YWx1ZTtzd2l0Y2godGhpcy5sb29rYWhlYWQudHlwZSl7Y2FzZSA3OmU9XCJbXCI9PT10fHxcIihcIj09PXR8fFwie1wiPT09dHx8XCIrXCI9PT10fHxcIi1cIj09PXR8fFwiIVwiPT09dHx8XCJ+XCI9PT10fHxcIisrXCI9PT10fHxcIi0tXCI9PT10fHxcIi9cIj09PXR8fFwiLz1cIj09PXQ7YnJlYWs7Y2FzZSA0OmU9XCJjbGFzc1wiPT09dHx8XCJkZWxldGVcIj09PXR8fFwiZnVuY3Rpb25cIj09PXR8fFwibGV0XCI9PT10fHxcIm5ld1wiPT09dHx8XCJzdXBlclwiPT09dHx8XCJ0aGlzXCI9PT10fHxcInR5cGVvZlwiPT09dHx8XCJ2b2lkXCI9PT10fHxcInlpZWxkXCI9PT10fXJldHVybiBlfSxlLnByb3RvdHlwZS5wYXJzZVlpZWxkRXhwcmVzc2lvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpO3RoaXMuZXhwZWN0S2V5d29yZChcInlpZWxkXCIpO3ZhciB0PW51bGwscj0hMTtpZighdGhpcy5oYXNMaW5lVGVybWluYXRvcil7dmFyIG49dGhpcy5jb250ZXh0LmFsbG93WWllbGQ7dGhpcy5jb250ZXh0LmFsbG93WWllbGQ9ITEsKHI9dGhpcy5tYXRjaChcIipcIikpPyh0aGlzLm5leHRUb2tlbigpLHQ9dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCkpOnRoaXMuaXNTdGFydE9mRXhwcmVzc2lvbigpJiYodD10aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKSksdGhpcy5jb250ZXh0LmFsbG93WWllbGQ9bn1yZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLllpZWxkRXhwcmVzc2lvbih0LHIpKX0sZS5wcm90b3R5cGUucGFyc2VDbGFzc0VsZW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sb29rYWhlYWQscj10aGlzLmNyZWF0ZU5vZGUoKSxuPVwiXCIsaT1udWxsLHM9bnVsbCx1PSExLGw9ITEsYz0hMSxoPSExO2lmKHRoaXMubWF0Y2goXCIqXCIpKXRoaXMubmV4dFRva2VuKCk7ZWxzZSBpZih1PXRoaXMubWF0Y2goXCJbXCIpLFwic3RhdGljXCI9PT0oaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSkubmFtZSYmKHRoaXMucXVhbGlmaWVkUHJvcGVydHlOYW1lKHRoaXMubG9va2FoZWFkKXx8dGhpcy5tYXRjaChcIipcIikpJiYodD10aGlzLmxvb2thaGVhZCxjPSEwLHU9dGhpcy5tYXRjaChcIltcIiksdGhpcy5tYXRjaChcIipcIik/dGhpcy5uZXh0VG9rZW4oKTppPXRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpKSwzPT09dC50eXBlJiYhdGhpcy5oYXNMaW5lVGVybWluYXRvciYmXCJhc3luY1wiPT09dC52YWx1ZSl7dmFyIHA9dGhpcy5sb29rYWhlYWQudmFsdWU7XCI6XCIhPT1wJiZcIihcIiE9PXAmJlwiKlwiIT09cCYmKGg9ITAsdD10aGlzLmxvb2thaGVhZCxpPXRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpLDM9PT10LnR5cGUmJlwiY29uc3RydWN0b3JcIj09PXQudmFsdWUmJnRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odCxvLk1lc3NhZ2VzLkNvbnN0cnVjdG9ySXNBc3luYykpfXZhciBmPXRoaXMucXVhbGlmaWVkUHJvcGVydHlOYW1lKHRoaXMubG9va2FoZWFkKTtyZXR1cm4gMz09PXQudHlwZT9cImdldFwiPT09dC52YWx1ZSYmZj8obj1cImdldFwiLHU9dGhpcy5tYXRjaChcIltcIiksaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSx0aGlzLmNvbnRleHQuYWxsb3dZaWVsZD0hMSxzPXRoaXMucGFyc2VHZXR0ZXJNZXRob2QoKSk6XCJzZXRcIj09PXQudmFsdWUmJmYmJihuPVwic2V0XCIsdT10aGlzLm1hdGNoKFwiW1wiKSxpPXRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpLHM9dGhpcy5wYXJzZVNldHRlck1ldGhvZCgpKTo3PT09dC50eXBlJiZcIipcIj09PXQudmFsdWUmJmYmJihuPVwiaW5pdFwiLHU9dGhpcy5tYXRjaChcIltcIiksaT10aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKSxzPXRoaXMucGFyc2VHZW5lcmF0b3JNZXRob2QoKSxsPSEwKSwhbiYmaSYmdGhpcy5tYXRjaChcIihcIikmJihuPVwiaW5pdFwiLHM9aD90aGlzLnBhcnNlUHJvcGVydHlNZXRob2RBc3luY0Z1bmN0aW9uKCk6dGhpcy5wYXJzZVByb3BlcnR5TWV0aG9kRnVuY3Rpb24oKSxsPSEwKSxufHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKSxcImluaXRcIj09PW4mJihuPVwibWV0aG9kXCIpLHV8fChjJiZ0aGlzLmlzUHJvcGVydHlLZXkoaSxcInByb3RvdHlwZVwiKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0LG8uTWVzc2FnZXMuU3RhdGljUHJvdG90eXBlKSwhYyYmdGhpcy5pc1Byb3BlcnR5S2V5KGksXCJjb25zdHJ1Y3RvclwiKSYmKChcIm1ldGhvZFwiIT09bnx8IWx8fHMmJnMuZ2VuZXJhdG9yKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0LG8uTWVzc2FnZXMuQ29uc3RydWN0b3JTcGVjaWFsTWV0aG9kKSxlLnZhbHVlP3RoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odCxvLk1lc3NhZ2VzLkR1cGxpY2F0ZUNvbnN0cnVjdG9yKTplLnZhbHVlPSEwLG49XCJjb25zdHJ1Y3RvclwiKSksdGhpcy5maW5hbGl6ZShyLG5ldyBhLk1ldGhvZERlZmluaXRpb24oaSx1LHMsbixjKSl9LGUucHJvdG90eXBlLnBhcnNlQ2xhc3NFbGVtZW50TGlzdD1mdW5jdGlvbigpe3ZhciBlPVtdLHQ9e3ZhbHVlOiExfTtmb3IodGhpcy5leHBlY3QoXCJ7XCIpOyF0aGlzLm1hdGNoKFwifVwiKTspdGhpcy5tYXRjaChcIjtcIik/dGhpcy5uZXh0VG9rZW4oKTplLnB1c2godGhpcy5wYXJzZUNsYXNzRWxlbWVudCh0KSk7cmV0dXJuIHRoaXMuZXhwZWN0KFwifVwiKSxlfSxlLnByb3RvdHlwZS5wYXJzZUNsYXNzQm9keT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5wYXJzZUNsYXNzRWxlbWVudExpc3QoKTtyZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLkNsYXNzQm9keSh0KSl9LGUucHJvdG90eXBlLnBhcnNlQ2xhc3NEZWNsYXJhdGlvbj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmNyZWF0ZU5vZGUoKSxyPXRoaXMuY29udGV4dC5zdHJpY3Q7dGhpcy5jb250ZXh0LnN0cmljdD0hMCx0aGlzLmV4cGVjdEtleXdvcmQoXCJjbGFzc1wiKTt2YXIgbj1lJiYzIT09dGhpcy5sb29rYWhlYWQudHlwZT9udWxsOnRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKSxpPW51bGw7dGhpcy5tYXRjaEtleXdvcmQoXCJleHRlbmRzXCIpJiYodGhpcy5uZXh0VG9rZW4oKSxpPXRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlTGVmdEhhbmRTaWRlRXhwcmVzc2lvbkFsbG93Q2FsbCkpO3ZhciBvPXRoaXMucGFyc2VDbGFzc0JvZHkoKTtyZXR1cm4gdGhpcy5jb250ZXh0LnN0cmljdD1yLHRoaXMuZmluYWxpemUodCxuZXcgYS5DbGFzc0RlY2xhcmF0aW9uKG4saSxvKSl9LGUucHJvdG90eXBlLnBhcnNlQ2xhc3NFeHByZXNzaW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLmNvbnRleHQuc3RyaWN0O3RoaXMuY29udGV4dC5zdHJpY3Q9ITAsdGhpcy5leHBlY3RLZXl3b3JkKFwiY2xhc3NcIik7dmFyIHI9Mz09PXRoaXMubG9va2FoZWFkLnR5cGU/dGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpOm51bGwsbj1udWxsO3RoaXMubWF0Y2hLZXl3b3JkKFwiZXh0ZW5kc1wiKSYmKHRoaXMubmV4dFRva2VuKCksbj10aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb25BbGxvd0NhbGwpKTt2YXIgaT10aGlzLnBhcnNlQ2xhc3NCb2R5KCk7cmV0dXJuIHRoaXMuY29udGV4dC5zdHJpY3Q9dCx0aGlzLmZpbmFsaXplKGUsbmV3IGEuQ2xhc3NFeHByZXNzaW9uKHIsbixpKSl9LGUucHJvdG90eXBlLnBhcnNlTW9kdWxlPWZ1bmN0aW9uKCl7dGhpcy5jb250ZXh0LnN0cmljdD0hMCx0aGlzLmNvbnRleHQuaXNNb2R1bGU9ITAsdGhpcy5zY2FubmVyLmlzTW9kdWxlPSEwO2Zvcih2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKSx0PXRoaXMucGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXMoKTsyIT09dGhpcy5sb29rYWhlYWQudHlwZTspdC5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtyZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLk1vZHVsZSh0KSl9LGUucHJvdG90eXBlLnBhcnNlU2NyaXB0PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5wYXJzZURpcmVjdGl2ZVByb2xvZ3VlcygpOzIhPT10aGlzLmxvb2thaGVhZC50eXBlOyl0LnB1c2godGhpcy5wYXJzZVN0YXRlbWVudExpc3RJdGVtKCkpO3JldHVybiB0aGlzLmZpbmFsaXplKGUsbmV3IGEuU2NyaXB0KHQpKX0sZS5wcm90b3R5cGUucGFyc2VNb2R1bGVTcGVjaWZpZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTs4IT09dGhpcy5sb29rYWhlYWQudHlwZSYmdGhpcy50aHJvd0Vycm9yKG8uTWVzc2FnZXMuSW52YWxpZE1vZHVsZVNwZWNpZmllcik7dmFyIHQ9dGhpcy5uZXh0VG9rZW4oKSxyPXRoaXMuZ2V0VG9rZW5SYXcodCk7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5MaXRlcmFsKHQudmFsdWUscikpfSxlLnByb3RvdHlwZS5wYXJzZUltcG9ydFNwZWNpZmllcj1mdW5jdGlvbigpe3ZhciBlLHQscj10aGlzLmNyZWF0ZU5vZGUoKTtyZXR1cm4gMz09PXRoaXMubG9va2FoZWFkLnR5cGU/KHQ9ZT10aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCksdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwiYXNcIikmJih0aGlzLm5leHRUb2tlbigpLHQ9dGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpKSk6KHQ9ZT10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKSx0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJhc1wiKT8odGhpcy5uZXh0VG9rZW4oKSx0PXRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKSk6dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKSksdGhpcy5maW5hbGl6ZShyLG5ldyBhLkltcG9ydFNwZWNpZmllcih0LGUpKX0sZS5wcm90b3R5cGUucGFyc2VOYW1lZEltcG9ydHM9ZnVuY3Rpb24oKXt0aGlzLmV4cGVjdChcIntcIik7Zm9yKHZhciBlPVtdOyF0aGlzLm1hdGNoKFwifVwiKTspZS5wdXNoKHRoaXMucGFyc2VJbXBvcnRTcGVjaWZpZXIoKSksdGhpcy5tYXRjaChcIn1cIil8fHRoaXMuZXhwZWN0KFwiLFwiKTtyZXR1cm4gdGhpcy5leHBlY3QoXCJ9XCIpLGV9LGUucHJvdG90eXBlLnBhcnNlSW1wb3J0RGVmYXVsdFNwZWNpZmllcj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuY3JlYXRlTm9kZSgpLHQ9dGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7cmV0dXJuIHRoaXMuZmluYWxpemUoZSxuZXcgYS5JbXBvcnREZWZhdWx0U3BlY2lmaWVyKHQpKX0sZS5wcm90b3R5cGUucGFyc2VJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdChcIipcIiksdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwiYXNcIil8fHRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLk5vQXNBZnRlckltcG9ydE5hbWVzcGFjZSksdGhpcy5uZXh0VG9rZW4oKTt2YXIgdD10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtyZXR1cm4gdGhpcy5maW5hbGl6ZShlLG5ldyBhLkltcG9ydE5hbWVzcGFjZVNwZWNpZmllcih0KSl9LGUucHJvdG90eXBlLnBhcnNlSW1wb3J0RGVjbGFyYXRpb249ZnVuY3Rpb24oKXt0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkmJnRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLklsbGVnYWxJbXBvcnREZWNsYXJhdGlvbik7dmFyIGUsdD10aGlzLmNyZWF0ZU5vZGUoKTt0aGlzLmV4cGVjdEtleXdvcmQoXCJpbXBvcnRcIik7dmFyIHI9W107aWYoOD09PXRoaXMubG9va2FoZWFkLnR5cGUpZT10aGlzLnBhcnNlTW9kdWxlU3BlY2lmaWVyKCk7ZWxzZXtpZih0aGlzLm1hdGNoKFwie1wiKT9yPXIuY29uY2F0KHRoaXMucGFyc2VOYW1lZEltcG9ydHMoKSk6dGhpcy5tYXRjaChcIipcIik/ci5wdXNoKHRoaXMucGFyc2VJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIoKSk6dGhpcy5pc0lkZW50aWZpZXJOYW1lKHRoaXMubG9va2FoZWFkKSYmIXRoaXMubWF0Y2hLZXl3b3JkKFwiZGVmYXVsdFwiKT8oci5wdXNoKHRoaXMucGFyc2VJbXBvcnREZWZhdWx0U3BlY2lmaWVyKCkpLHRoaXMubWF0Y2goXCIsXCIpJiYodGhpcy5uZXh0VG9rZW4oKSx0aGlzLm1hdGNoKFwiKlwiKT9yLnB1c2godGhpcy5wYXJzZUltcG9ydE5hbWVzcGFjZVNwZWNpZmllcigpKTp0aGlzLm1hdGNoKFwie1wiKT9yPXIuY29uY2F0KHRoaXMucGFyc2VOYW1lZEltcG9ydHMoKSk6dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCkpKTp0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpLCF0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoXCJmcm9tXCIpKXt2YXIgbj10aGlzLmxvb2thaGVhZC52YWx1ZT9vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbjpvLk1lc3NhZ2VzLk1pc3NpbmdGcm9tQ2xhdXNlO3RoaXMudGhyb3dFcnJvcihuLHRoaXMubG9va2FoZWFkLnZhbHVlKX10aGlzLm5leHRUb2tlbigpLGU9dGhpcy5wYXJzZU1vZHVsZVNwZWNpZmllcigpfXJldHVybiB0aGlzLmNvbnN1bWVTZW1pY29sb24oKSx0aGlzLmZpbmFsaXplKHQsbmV3IGEuSW1wb3J0RGVjbGFyYXRpb24ocixlKSl9LGUucHJvdG90eXBlLnBhcnNlRXhwb3J0U3BlY2lmaWVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jcmVhdGVOb2RlKCksdD10aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKSxyPXQ7cmV0dXJuIHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImFzXCIpJiYodGhpcy5uZXh0VG9rZW4oKSxyPXRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpKSx0aGlzLmZpbmFsaXplKGUsbmV3IGEuRXhwb3J0U3BlY2lmaWVyKHQscikpfSxlLnByb3RvdHlwZS5wYXJzZUV4cG9ydERlY2xhcmF0aW9uPWZ1bmN0aW9uKCl7dGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5JiZ0aGlzLnRocm93RXJyb3Ioby5NZXNzYWdlcy5JbGxlZ2FsRXhwb3J0RGVjbGFyYXRpb24pO3ZhciBlLHQ9dGhpcy5jcmVhdGVOb2RlKCk7aWYodGhpcy5leHBlY3RLZXl3b3JkKFwiZXhwb3J0XCIpLHRoaXMubWF0Y2hLZXl3b3JkKFwiZGVmYXVsdFwiKSlpZih0aGlzLm5leHRUb2tlbigpLHRoaXMubWF0Y2hLZXl3b3JkKFwiZnVuY3Rpb25cIikpe3ZhciByPXRoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCEwKTtlPXRoaXMuZmluYWxpemUodCxuZXcgYS5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb24ocikpfWVsc2UgdGhpcy5tYXRjaEtleXdvcmQoXCJjbGFzc1wiKT8ocj10aGlzLnBhcnNlQ2xhc3NEZWNsYXJhdGlvbighMCksZT10aGlzLmZpbmFsaXplKHQsbmV3IGEuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKHIpKSk6dGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwiYXN5bmNcIik/KHI9dGhpcy5tYXRjaEFzeW5jRnVuY3Rpb24oKT90aGlzLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbighMCk6dGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCksZT10aGlzLmZpbmFsaXplKHQsbmV3IGEuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKHIpKSk6KHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImZyb21cIikmJnRoaXMudGhyb3dFcnJvcihvLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbix0aGlzLmxvb2thaGVhZC52YWx1ZSkscj10aGlzLm1hdGNoKFwie1wiKT90aGlzLnBhcnNlT2JqZWN0SW5pdGlhbGl6ZXIoKTp0aGlzLm1hdGNoKFwiW1wiKT90aGlzLnBhcnNlQXJyYXlJbml0aWFsaXplcigpOnRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpLHRoaXMuY29uc3VtZVNlbWljb2xvbigpLGU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbihyKSkpO2Vsc2UgaWYodGhpcy5tYXRjaChcIipcIikpe2lmKHRoaXMubmV4dFRva2VuKCksIXRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZChcImZyb21cIikpe3ZhciBuPXRoaXMubG9va2FoZWFkLnZhbHVlP28uTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuOm8uTWVzc2FnZXMuTWlzc2luZ0Zyb21DbGF1c2U7dGhpcy50aHJvd0Vycm9yKG4sdGhpcy5sb29rYWhlYWQudmFsdWUpfXRoaXMubmV4dFRva2VuKCk7dmFyIGk9dGhpcy5wYXJzZU1vZHVsZVNwZWNpZmllcigpO3RoaXMuY29uc3VtZVNlbWljb2xvbigpLGU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkV4cG9ydEFsbERlY2xhcmF0aW9uKGkpKX1lbHNlIGlmKDQ9PT10aGlzLmxvb2thaGVhZC50eXBlKXtzd2l0Y2gocj12b2lkIDAsdGhpcy5sb29rYWhlYWQudmFsdWUpe2Nhc2VcImxldFwiOmNhc2VcImNvbnN0XCI6cj10aGlzLnBhcnNlTGV4aWNhbERlY2xhcmF0aW9uKHtpbkZvcjohMX0pO2JyZWFrO2Nhc2VcInZhclwiOmNhc2VcImNsYXNzXCI6Y2FzZVwiZnVuY3Rpb25cIjpyPXRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpO2JyZWFrO2RlZmF1bHQ6dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCl9ZT10aGlzLmZpbmFsaXplKHQsbmV3IGEuRXhwb3J0TmFtZWREZWNsYXJhdGlvbihyLFtdLG51bGwpKX1lbHNlIGlmKHRoaXMubWF0Y2hBc3luY0Z1bmN0aW9uKCkpcj10aGlzLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbigpLGU9dGhpcy5maW5hbGl6ZSh0LG5ldyBhLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24ocixbXSxudWxsKSk7ZWxzZXt2YXIgcz1bXSx1PW51bGwsbD0hMTtmb3IodGhpcy5leHBlY3QoXCJ7XCIpOyF0aGlzLm1hdGNoKFwifVwiKTspbD1sfHx0aGlzLm1hdGNoS2V5d29yZChcImRlZmF1bHRcIikscy5wdXNoKHRoaXMucGFyc2VFeHBvcnRTcGVjaWZpZXIoKSksdGhpcy5tYXRjaChcIn1cIil8fHRoaXMuZXhwZWN0KFwiLFwiKTt0aGlzLmV4cGVjdChcIn1cIiksdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKFwiZnJvbVwiKT8odGhpcy5uZXh0VG9rZW4oKSx1PXRoaXMucGFyc2VNb2R1bGVTcGVjaWZpZXIoKSx0aGlzLmNvbnN1bWVTZW1pY29sb24oKSk6bD8obj10aGlzLmxvb2thaGVhZC52YWx1ZT9vLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbjpvLk1lc3NhZ2VzLk1pc3NpbmdGcm9tQ2xhdXNlLHRoaXMudGhyb3dFcnJvcihuLHRoaXMubG9va2FoZWFkLnZhbHVlKSk6dGhpcy5jb25zdW1lU2VtaWNvbG9uKCksZT10aGlzLmZpbmFsaXplKHQsbmV3IGEuRXhwb3J0TmFtZWREZWNsYXJhdGlvbihudWxsLHMsdSkpfXJldHVybiBlfSxlfSgpO3QuUGFyc2VyPWN9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5hc3NlcnQ9ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJBU1NFUlQ6IFwiK3QpfX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLmVycm9ycz1bXSx0aGlzLnRvbGVyYW50PSExfXJldHVybiBlLnByb3RvdHlwZS5yZWNvcmRFcnJvcj1mdW5jdGlvbihlKXt0aGlzLmVycm9ycy5wdXNoKGUpfSxlLnByb3RvdHlwZS50b2xlcmF0ZT1mdW5jdGlvbihlKXtpZighdGhpcy50b2xlcmFudCl0aHJvdyBlO3RoaXMucmVjb3JkRXJyb3IoZSl9LGUucHJvdG90eXBlLmNvbnN0cnVjdEVycm9yPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IEVycm9yKGUpO3RyeXt0aHJvdyByfWNhdGNoKGUpe09iamVjdC5jcmVhdGUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmKHI9T2JqZWN0LmNyZWF0ZShlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImNvbHVtblwiLHt2YWx1ZTp0fSkpfXJldHVybiByfSxlLnByb3RvdHlwZS5jcmVhdGVFcnJvcj1mdW5jdGlvbihlLHQscixuKXt2YXIgaT1cIkxpbmUgXCIrdCtcIjogXCIrbixvPXRoaXMuY29uc3RydWN0RXJyb3IoaSxyKTtyZXR1cm4gby5pbmRleD1lLG8ubGluZU51bWJlcj10LG8uZGVzY3JpcHRpb249bixvfSxlLnByb3RvdHlwZS50aHJvd0Vycm9yPWZ1bmN0aW9uKGUsdCxyLG4pe3Rocm93IHRoaXMuY3JlYXRlRXJyb3IoZSx0LHIsbil9LGUucHJvdG90eXBlLnRvbGVyYXRlRXJyb3I9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9dGhpcy5jcmVhdGVFcnJvcihlLHQscixuKTtpZighdGhpcy50b2xlcmFudCl0aHJvdyBpO3RoaXMucmVjb3JkRXJyb3IoaSl9LGV9KCk7dC5FcnJvckhhbmRsZXI9cn0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1lc3NhZ2VzPXtCYWRHZXR0ZXJBcml0eTpcIkdldHRlciBtdXN0IG5vdCBoYXZlIGFueSBmb3JtYWwgcGFyYW1ldGVyc1wiLEJhZFNldHRlckFyaXR5OlwiU2V0dGVyIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBmb3JtYWwgcGFyYW1ldGVyXCIsQmFkU2V0dGVyUmVzdFBhcmFtZXRlcjpcIlNldHRlciBmdW5jdGlvbiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIHJlc3QgcGFyYW1ldGVyXCIsQ29uc3RydWN0b3JJc0FzeW5jOlwiQ2xhc3MgY29uc3RydWN0b3IgbWF5IG5vdCBiZSBhbiBhc3luYyBtZXRob2RcIixDb25zdHJ1Y3RvclNwZWNpYWxNZXRob2Q6XCJDbGFzcyBjb25zdHJ1Y3RvciBtYXkgbm90IGJlIGFuIGFjY2Vzc29yXCIsRGVjbGFyYXRpb25NaXNzaW5nSW5pdGlhbGl6ZXI6XCJNaXNzaW5nIGluaXRpYWxpemVyIGluICUwIGRlY2xhcmF0aW9uXCIsRGVmYXVsdFJlc3RQYXJhbWV0ZXI6XCJVbmV4cGVjdGVkIHRva2VuID1cIixEdXBsaWNhdGVCaW5kaW5nOlwiRHVwbGljYXRlIGJpbmRpbmcgJTBcIixEdXBsaWNhdGVDb25zdHJ1Y3RvcjpcIkEgY2xhc3MgbWF5IG9ubHkgaGF2ZSBvbmUgY29uc3RydWN0b3JcIixEdXBsaWNhdGVQcm90b1Byb3BlcnR5OlwiRHVwbGljYXRlIF9fcHJvdG9fXyBmaWVsZHMgYXJlIG5vdCBhbGxvd2VkIGluIG9iamVjdCBsaXRlcmFsc1wiLEZvckluT2ZMb29wSW5pdGlhbGl6ZXI6XCIlMCBsb29wIHZhcmlhYmxlIGRlY2xhcmF0aW9uIG1heSBub3QgaGF2ZSBhbiBpbml0aWFsaXplclwiLEdlbmVyYXRvckluTGVnYWN5Q29udGV4dDpcIkdlbmVyYXRvciBkZWNsYXJhdGlvbnMgYXJlIG5vdCBhbGxvd2VkIGluIGxlZ2FjeSBjb250ZXh0c1wiLElsbGVnYWxCcmVhazpcIklsbGVnYWwgYnJlYWsgc3RhdGVtZW50XCIsSWxsZWdhbENvbnRpbnVlOlwiSWxsZWdhbCBjb250aW51ZSBzdGF0ZW1lbnRcIixJbGxlZ2FsRXhwb3J0RGVjbGFyYXRpb246XCJVbmV4cGVjdGVkIHRva2VuXCIsSWxsZWdhbEltcG9ydERlY2xhcmF0aW9uOlwiVW5leHBlY3RlZCB0b2tlblwiLElsbGVnYWxMYW5ndWFnZU1vZGVEaXJlY3RpdmU6XCJJbGxlZ2FsICd1c2Ugc3RyaWN0JyBkaXJlY3RpdmUgaW4gZnVuY3Rpb24gd2l0aCBub24tc2ltcGxlIHBhcmFtZXRlciBsaXN0XCIsSWxsZWdhbFJldHVybjpcIklsbGVnYWwgcmV0dXJuIHN0YXRlbWVudFwiLEludmFsaWRFc2NhcGVkUmVzZXJ2ZWRXb3JkOlwiS2V5d29yZCBtdXN0IG5vdCBjb250YWluIGVzY2FwZWQgY2hhcmFjdGVyc1wiLEludmFsaWRIZXhFc2NhcGVTZXF1ZW5jZTpcIkludmFsaWQgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlXCIsSW52YWxpZExIU0luQXNzaWdubWVudDpcIkludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gYXNzaWdubWVudFwiLEludmFsaWRMSFNJbkZvckluOlwiSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiBmb3ItaW5cIixJbnZhbGlkTEhTSW5Gb3JMb29wOlwiSW52YWxpZCBsZWZ0LWhhbmQgc2lkZSBpbiBmb3ItbG9vcFwiLEludmFsaWRNb2R1bGVTcGVjaWZpZXI6XCJVbmV4cGVjdGVkIHRva2VuXCIsSW52YWxpZFJlZ0V4cDpcIkludmFsaWQgcmVndWxhciBleHByZXNzaW9uXCIsTGV0SW5MZXhpY2FsQmluZGluZzpcImxldCBpcyBkaXNhbGxvd2VkIGFzIGEgbGV4aWNhbGx5IGJvdW5kIG5hbWVcIixNaXNzaW5nRnJvbUNsYXVzZTpcIlVuZXhwZWN0ZWQgdG9rZW5cIixNdWx0aXBsZURlZmF1bHRzSW5Td2l0Y2g6XCJNb3JlIHRoYW4gb25lIGRlZmF1bHQgY2xhdXNlIGluIHN3aXRjaCBzdGF0ZW1lbnRcIixOZXdsaW5lQWZ0ZXJUaHJvdzpcIklsbGVnYWwgbmV3bGluZSBhZnRlciB0aHJvd1wiLE5vQXNBZnRlckltcG9ydE5hbWVzcGFjZTpcIlVuZXhwZWN0ZWQgdG9rZW5cIixOb0NhdGNoT3JGaW5hbGx5OlwiTWlzc2luZyBjYXRjaCBvciBmaW5hbGx5IGFmdGVyIHRyeVwiLFBhcmFtZXRlckFmdGVyUmVzdFBhcmFtZXRlcjpcIlJlc3QgcGFyYW1ldGVyIG11c3QgYmUgbGFzdCBmb3JtYWwgcGFyYW1ldGVyXCIsUmVkZWNsYXJhdGlvbjpcIiUwICclMScgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZFwiLFN0YXRpY1Byb3RvdHlwZTpcIkNsYXNzZXMgbWF5IG5vdCBoYXZlIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBwcm90b3R5cGVcIixTdHJpY3RDYXRjaFZhcmlhYmxlOlwiQ2F0Y2ggdmFyaWFibGUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZVwiLFN0cmljdERlbGV0ZTpcIkRlbGV0ZSBvZiBhbiB1bnF1YWxpZmllZCBpZGVudGlmaWVyIGluIHN0cmljdCBtb2RlLlwiLFN0cmljdEZ1bmN0aW9uOlwiSW4gc3RyaWN0IG1vZGUgY29kZSwgZnVuY3Rpb25zIGNhbiBvbmx5IGJlIGRlY2xhcmVkIGF0IHRvcCBsZXZlbCBvciBpbnNpZGUgYSBibG9ja1wiLFN0cmljdEZ1bmN0aW9uTmFtZTpcIkZ1bmN0aW9uIG5hbWUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZVwiLFN0cmljdExIU0Fzc2lnbm1lbnQ6XCJBc3NpZ25tZW50IHRvIGV2YWwgb3IgYXJndW1lbnRzIGlzIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlXCIsU3RyaWN0TEhTUG9zdGZpeDpcIlBvc3RmaXggaW5jcmVtZW50L2RlY3JlbWVudCBtYXkgbm90IGhhdmUgZXZhbCBvciBhcmd1bWVudHMgb3BlcmFuZCBpbiBzdHJpY3QgbW9kZVwiLFN0cmljdExIU1ByZWZpeDpcIlByZWZpeCBpbmNyZW1lbnQvZGVjcmVtZW50IG1heSBub3QgaGF2ZSBldmFsIG9yIGFyZ3VtZW50cyBvcGVyYW5kIGluIHN0cmljdCBtb2RlXCIsU3RyaWN0TW9kZVdpdGg6XCJTdHJpY3QgbW9kZSBjb2RlIG1heSBub3QgaW5jbHVkZSBhIHdpdGggc3RhdGVtZW50XCIsU3RyaWN0T2N0YWxMaXRlcmFsOlwiT2N0YWwgbGl0ZXJhbHMgYXJlIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlLlwiLFN0cmljdFBhcmFtRHVwZTpcIlN0cmljdCBtb2RlIGZ1bmN0aW9uIG1heSBub3QgaGF2ZSBkdXBsaWNhdGUgcGFyYW1ldGVyIG5hbWVzXCIsU3RyaWN0UGFyYW1OYW1lOlwiUGFyYW1ldGVyIG5hbWUgZXZhbCBvciBhcmd1bWVudHMgaXMgbm90IGFsbG93ZWQgaW4gc3RyaWN0IG1vZGVcIixTdHJpY3RSZXNlcnZlZFdvcmQ6XCJVc2Ugb2YgZnV0dXJlIHJlc2VydmVkIHdvcmQgaW4gc3RyaWN0IG1vZGVcIixTdHJpY3RWYXJOYW1lOlwiVmFyaWFibGUgbmFtZSBtYXkgbm90IGJlIGV2YWwgb3IgYXJndW1lbnRzIGluIHN0cmljdCBtb2RlXCIsVGVtcGxhdGVPY3RhbExpdGVyYWw6XCJPY3RhbCBsaXRlcmFscyBhcmUgbm90IGFsbG93ZWQgaW4gdGVtcGxhdGUgc3RyaW5ncy5cIixVbmV4cGVjdGVkRU9TOlwiVW5leHBlY3RlZCBlbmQgb2YgaW5wdXRcIixVbmV4cGVjdGVkSWRlbnRpZmllcjpcIlVuZXhwZWN0ZWQgaWRlbnRpZmllclwiLFVuZXhwZWN0ZWROdW1iZXI6XCJVbmV4cGVjdGVkIG51bWJlclwiLFVuZXhwZWN0ZWRSZXNlcnZlZDpcIlVuZXhwZWN0ZWQgcmVzZXJ2ZWQgd29yZFwiLFVuZXhwZWN0ZWRTdHJpbmc6XCJVbmV4cGVjdGVkIHN0cmluZ1wiLFVuZXhwZWN0ZWRUZW1wbGF0ZTpcIlVuZXhwZWN0ZWQgcXVhc2kgJTBcIixVbmV4cGVjdGVkVG9rZW46XCJVbmV4cGVjdGVkIHRva2VuICUwXCIsVW5leHBlY3RlZFRva2VuSWxsZWdhbDpcIlVuZXhwZWN0ZWQgdG9rZW4gSUxMRUdBTFwiLFVua25vd25MYWJlbDpcIlVuZGVmaW5lZCBsYWJlbCAnJTAnXCIsVW50ZXJtaW5hdGVkUmVnRXhwOlwiSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb246IG1pc3NpbmcgL1wifX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOSksaT1yKDQpLG89cigxMSk7ZnVuY3Rpb24gYShlKXtyZXR1cm5cIjAxMjM0NTY3ODlhYmNkZWZcIi5pbmRleE9mKGUudG9Mb3dlckNhc2UoKSl9ZnVuY3Rpb24gcyhlKXtyZXR1cm5cIjAxMjM0NTY3XCIuaW5kZXhPZihlKX12YXIgdT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLnNvdXJjZT1lLHRoaXMuZXJyb3JIYW5kbGVyPXQsdGhpcy50cmFja0NvbW1lbnQ9ITEsdGhpcy5pc01vZHVsZT0hMSx0aGlzLmxlbmd0aD1lLmxlbmd0aCx0aGlzLmluZGV4PTAsdGhpcy5saW5lTnVtYmVyPWUubGVuZ3RoPjA/MTowLHRoaXMubGluZVN0YXJ0PTAsdGhpcy5jdXJseVN0YWNrPVtdfXJldHVybiBlLnByb3RvdHlwZS5zYXZlU3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm57aW5kZXg6dGhpcy5pbmRleCxsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5saW5lU3RhcnR9fSxlLnByb3RvdHlwZS5yZXN0b3JlU3RhdGU9ZnVuY3Rpb24oZSl7dGhpcy5pbmRleD1lLmluZGV4LHRoaXMubGluZU51bWJlcj1lLmxpbmVOdW1iZXIsdGhpcy5saW5lU3RhcnQ9ZS5saW5lU3RhcnR9LGUucHJvdG90eXBlLmVvZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmluZGV4Pj10aGlzLmxlbmd0aH0sZS5wcm90b3R5cGUudGhyb3dVbmV4cGVjdGVkVG9rZW49ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPW8uTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuSWxsZWdhbCksdGhpcy5lcnJvckhhbmRsZXIudGhyb3dFcnJvcih0aGlzLmluZGV4LHRoaXMubGluZU51bWJlcix0aGlzLmluZGV4LXRoaXMubGluZVN0YXJ0KzEsZSl9LGUucHJvdG90eXBlLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPW8uTWVzc2FnZXMuVW5leHBlY3RlZFRva2VuSWxsZWdhbCksdGhpcy5lcnJvckhhbmRsZXIudG9sZXJhdGVFcnJvcih0aGlzLmluZGV4LHRoaXMubGluZU51bWJlcix0aGlzLmluZGV4LXRoaXMubGluZVN0YXJ0KzEsZSl9LGUucHJvdG90eXBlLnNraXBTaW5nbGVMaW5lQ29tbWVudD1mdW5jdGlvbihlKXt2YXIgdCxyLG49W107Zm9yKHRoaXMudHJhY2tDb21tZW50JiYobj1bXSx0PXRoaXMuaW5kZXgtZSxyPXtzdGFydDp7bGluZTp0aGlzLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuaW5kZXgtdGhpcy5saW5lU3RhcnQtZX0sZW5kOnt9fSk7IXRoaXMuZW9mKCk7KXt2YXIgbz10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO2lmKCsrdGhpcy5pbmRleCxpLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKG8pKXtpZih0aGlzLnRyYWNrQ29tbWVudCl7ci5lbmQ9e2xpbmU6dGhpcy5saW5lTnVtYmVyLGNvbHVtbjp0aGlzLmluZGV4LXRoaXMubGluZVN0YXJ0LTF9O3ZhciBhPXttdWx0aUxpbmU6ITEsc2xpY2U6W3QrZSx0aGlzLmluZGV4LTFdLHJhbmdlOlt0LHRoaXMuaW5kZXgtMV0sbG9jOnJ9O24ucHVzaChhKX1yZXR1cm4gMTM9PT1vJiYxMD09PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkmJisrdGhpcy5pbmRleCwrK3RoaXMubGluZU51bWJlcix0aGlzLmxpbmVTdGFydD10aGlzLmluZGV4LG59fXJldHVybiB0aGlzLnRyYWNrQ29tbWVudCYmKHIuZW5kPXtsaW5lOnRoaXMubGluZU51bWJlcixjb2x1bW46dGhpcy5pbmRleC10aGlzLmxpbmVTdGFydH0sYT17bXVsdGlMaW5lOiExLHNsaWNlOlt0K2UsdGhpcy5pbmRleF0scmFuZ2U6W3QsdGhpcy5pbmRleF0sbG9jOnJ9LG4ucHVzaChhKSksbn0sZS5wcm90b3R5cGUuc2tpcE11bHRpTGluZUNvbW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZSx0LHI9W107Zm9yKHRoaXMudHJhY2tDb21tZW50JiYocj1bXSxlPXRoaXMuaW5kZXgtMix0PXtzdGFydDp7bGluZTp0aGlzLmxpbmVOdW1iZXIsY29sdW1uOnRoaXMuaW5kZXgtdGhpcy5saW5lU3RhcnQtMn0sZW5kOnt9fSk7IXRoaXMuZW9mKCk7KXt2YXIgbj10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO2lmKGkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IobikpMTM9PT1uJiYxMD09PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCsxKSYmKyt0aGlzLmluZGV4LCsrdGhpcy5saW5lTnVtYmVyLCsrdGhpcy5pbmRleCx0aGlzLmxpbmVTdGFydD10aGlzLmluZGV4O2Vsc2UgaWYoNDI9PT1uKXtpZig0Nz09PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCsxKSl7aWYodGhpcy5pbmRleCs9Mix0aGlzLnRyYWNrQ29tbWVudCl7dC5lbmQ9e2xpbmU6dGhpcy5saW5lTnVtYmVyLGNvbHVtbjp0aGlzLmluZGV4LXRoaXMubGluZVN0YXJ0fTt2YXIgbz17bXVsdGlMaW5lOiEwLHNsaWNlOltlKzIsdGhpcy5pbmRleC0yXSxyYW5nZTpbZSx0aGlzLmluZGV4XSxsb2M6dH07ci5wdXNoKG8pfXJldHVybiByfSsrdGhpcy5pbmRleH1lbHNlKyt0aGlzLmluZGV4fXJldHVybiB0aGlzLnRyYWNrQ29tbWVudCYmKHQuZW5kPXtsaW5lOnRoaXMubGluZU51bWJlcixjb2x1bW46dGhpcy5pbmRleC10aGlzLmxpbmVTdGFydH0sbz17bXVsdGlMaW5lOiEwLHNsaWNlOltlKzIsdGhpcy5pbmRleF0scmFuZ2U6W2UsdGhpcy5pbmRleF0sbG9jOnR9LHIucHVzaChvKSksdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbigpLHJ9LGUucHJvdG90eXBlLnNjYW5Db21tZW50cz1mdW5jdGlvbigpe3ZhciBlO3RoaXMudHJhY2tDb21tZW50JiYoZT1bXSk7Zm9yKHZhciB0PTA9PT10aGlzLmluZGV4OyF0aGlzLmVvZigpOyl7dmFyIHI9dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtpZihpLkNoYXJhY3Rlci5pc1doaXRlU3BhY2UocikpKyt0aGlzLmluZGV4O2Vsc2UgaWYoaS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihyKSkrK3RoaXMuaW5kZXgsMTM9PT1yJiYxMD09PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkmJisrdGhpcy5pbmRleCwrK3RoaXMubGluZU51bWJlcix0aGlzLmxpbmVTdGFydD10aGlzLmluZGV4LHQ9ITA7ZWxzZSBpZig0Nz09PXIpaWYoNDc9PT0ocj10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgrMSkpKXt0aGlzLmluZGV4Kz0yO3ZhciBuPXRoaXMuc2tpcFNpbmdsZUxpbmVDb21tZW50KDIpO3RoaXMudHJhY2tDb21tZW50JiYoZT1lLmNvbmNhdChuKSksdD0hMH1lbHNle2lmKDQyIT09cilicmVhazt0aGlzLmluZGV4Kz0yLG49dGhpcy5za2lwTXVsdGlMaW5lQ29tbWVudCgpLHRoaXMudHJhY2tDb21tZW50JiYoZT1lLmNvbmNhdChuKSl9ZWxzZSBpZih0JiY0NT09PXIpe2lmKDQ1IT09dGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KzEpfHw2MiE9PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCsyKSlicmVhazt0aGlzLmluZGV4Kz0zLG49dGhpcy5za2lwU2luZ2xlTGluZUNvbW1lbnQoMyksdGhpcy50cmFja0NvbW1lbnQmJihlPWUuY29uY2F0KG4pKX1lbHNle2lmKDYwIT09cnx8dGhpcy5pc01vZHVsZSlicmVhaztpZihcIiEtLVwiIT09dGhpcy5zb3VyY2Uuc2xpY2UodGhpcy5pbmRleCsxLHRoaXMuaW5kZXgrNCkpYnJlYWs7dGhpcy5pbmRleCs9NCxuPXRoaXMuc2tpcFNpbmdsZUxpbmVDb21tZW50KDQpLHRoaXMudHJhY2tDb21tZW50JiYoZT1lLmNvbmNhdChuKSl9fXJldHVybiBlfSxlLnByb3RvdHlwZS5pc0Z1dHVyZVJlc2VydmVkV29yZD1mdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwiZW51bVwiOmNhc2VcImV4cG9ydFwiOmNhc2VcImltcG9ydFwiOmNhc2VcInN1cGVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LGUucHJvdG90eXBlLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZD1mdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwiaW1wbGVtZW50c1wiOmNhc2VcImludGVyZmFjZVwiOmNhc2VcInBhY2thZ2VcIjpjYXNlXCJwcml2YXRlXCI6Y2FzZVwicHJvdGVjdGVkXCI6Y2FzZVwicHVibGljXCI6Y2FzZVwic3RhdGljXCI6Y2FzZVwieWllbGRcIjpjYXNlXCJsZXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sZS5wcm90b3R5cGUuaXNSZXN0cmljdGVkV29yZD1mdW5jdGlvbihlKXtyZXR1cm5cImV2YWxcIj09PWV8fFwiYXJndW1lbnRzXCI9PT1lfSxlLnByb3RvdHlwZS5pc0tleXdvcmQ9ZnVuY3Rpb24oZSl7c3dpdGNoKGUubGVuZ3RoKXtjYXNlIDI6cmV0dXJuXCJpZlwiPT09ZXx8XCJpblwiPT09ZXx8XCJkb1wiPT09ZTtjYXNlIDM6cmV0dXJuXCJ2YXJcIj09PWV8fFwiZm9yXCI9PT1lfHxcIm5ld1wiPT09ZXx8XCJ0cnlcIj09PWV8fFwibGV0XCI9PT1lO2Nhc2UgNDpyZXR1cm5cInRoaXNcIj09PWV8fFwiZWxzZVwiPT09ZXx8XCJjYXNlXCI9PT1lfHxcInZvaWRcIj09PWV8fFwid2l0aFwiPT09ZXx8XCJlbnVtXCI9PT1lO2Nhc2UgNTpyZXR1cm5cIndoaWxlXCI9PT1lfHxcImJyZWFrXCI9PT1lfHxcImNhdGNoXCI9PT1lfHxcInRocm93XCI9PT1lfHxcImNvbnN0XCI9PT1lfHxcInlpZWxkXCI9PT1lfHxcImNsYXNzXCI9PT1lfHxcInN1cGVyXCI9PT1lO2Nhc2UgNjpyZXR1cm5cInJldHVyblwiPT09ZXx8XCJ0eXBlb2ZcIj09PWV8fFwiZGVsZXRlXCI9PT1lfHxcInN3aXRjaFwiPT09ZXx8XCJleHBvcnRcIj09PWV8fFwiaW1wb3J0XCI9PT1lO2Nhc2UgNzpyZXR1cm5cImRlZmF1bHRcIj09PWV8fFwiZmluYWxseVwiPT09ZXx8XCJleHRlbmRzXCI9PT1lO2Nhc2UgODpyZXR1cm5cImZ1bmN0aW9uXCI9PT1lfHxcImNvbnRpbnVlXCI9PT1lfHxcImRlYnVnZ2VyXCI9PT1lO2Nhc2UgMTA6cmV0dXJuXCJpbnN0YW5jZW9mXCI9PT1lO2RlZmF1bHQ6cmV0dXJuITF9fSxlLnByb3RvdHlwZS5jb2RlUG9pbnRBdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KGUpO2lmKHQ+PTU1Mjk2JiZ0PD01NjMxOSl7dmFyIHI9dGhpcy5zb3VyY2UuY2hhckNvZGVBdChlKzEpO3I+PTU2MzIwJiZyPD01NzM0MyYmKHQ9MTAyNCoodC01NTI5Nikrci01NjMyMCs2NTUzNil9cmV0dXJuIHR9LGUucHJvdG90eXBlLnNjYW5IZXhFc2NhcGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwidVwiPT09ZT80OjIscj0wLG49MDtuPHQ7KytuKXtpZih0aGlzLmVvZigpfHwhaS5DaGFyYWN0ZXIuaXNIZXhEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSlyZXR1cm4gbnVsbDtyPTE2KnIrYSh0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKX1yZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShyKX0sZS5wcm90b3R5cGUuc2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSx0PTA7Zm9yKFwifVwiPT09ZSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpOyF0aGlzLmVvZigpJiYoZT10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdLGkuQ2hhcmFjdGVyLmlzSGV4RGlnaXQoZS5jaGFyQ29kZUF0KDApKSk7KXQ9MTYqdCthKGUpO3JldHVybih0PjExMTQxMTF8fFwifVwiIT09ZSkmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSxpLkNoYXJhY3Rlci5mcm9tQ29kZVBvaW50KHQpfSxlLnByb3RvdHlwZS5nZXRJZGVudGlmaWVyPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuaW5kZXgrKzshdGhpcy5lb2YoKTspe3ZhciB0PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7aWYoOTI9PT10KXJldHVybiB0aGlzLmluZGV4PWUsdGhpcy5nZXRDb21wbGV4SWRlbnRpZmllcigpO2lmKHQ+PTU1Mjk2JiZ0PDU3MzQzKXJldHVybiB0aGlzLmluZGV4PWUsdGhpcy5nZXRDb21wbGV4SWRlbnRpZmllcigpO2lmKCFpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KHQpKWJyZWFrOysrdGhpcy5pbmRleH1yZXR1cm4gdGhpcy5zb3VyY2Uuc2xpY2UoZSx0aGlzLmluZGV4KX0sZS5wcm90b3R5cGUuZ2V0Q29tcGxleElkZW50aWZpZXI9ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuY29kZVBvaW50QXQodGhpcy5pbmRleCkscj1pLkNoYXJhY3Rlci5mcm9tQ29kZVBvaW50KHQpO2Zvcih0aGlzLmluZGV4Kz1yLmxlbmd0aCw5Mj09PXQmJigxMTchPT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCksKyt0aGlzLmluZGV4LFwie1wiPT09dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0/KCsrdGhpcy5pbmRleCxlPXRoaXMuc2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGUoKSk6bnVsbCE9PShlPXRoaXMuc2NhbkhleEVzY2FwZShcInVcIikpJiZcIlxcXFxcIiE9PWUmJmkuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KGUuY2hhckNvZGVBdCgwKSl8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSxyPWUpOyF0aGlzLmVvZigpJiYodD10aGlzLmNvZGVQb2ludEF0KHRoaXMuaW5kZXgpLGkuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclBhcnQodCkpOylyKz1lPWkuQ2hhcmFjdGVyLmZyb21Db2RlUG9pbnQodCksdGhpcy5pbmRleCs9ZS5sZW5ndGgsOTI9PT10JiYocj1yLnN1YnN0cigwLHIubGVuZ3RoLTEpLDExNyE9PXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSwrK3RoaXMuaW5kZXgsXCJ7XCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XT8oKyt0aGlzLmluZGV4LGU9dGhpcy5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpKTpudWxsIT09KGU9dGhpcy5zY2FuSGV4RXNjYXBlKFwidVwiKSkmJlwiXFxcXFwiIT09ZSYmaS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydChlLmNoYXJDb2RlQXQoMCkpfHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCkscis9ZSk7cmV0dXJuIHJ9LGUucHJvdG90eXBlLm9jdGFsVG9EZWNpbWFsPWZ1bmN0aW9uKGUpe3ZhciB0PVwiMFwiIT09ZSxyPXMoZSk7cmV0dXJuIXRoaXMuZW9mKCkmJmkuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSYmKHQ9ITAscj04KnIrcyh0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKSxcIjAxMjNcIi5pbmRleE9mKGUpPj0wJiYhdGhpcy5lb2YoKSYmaS5DaGFyYWN0ZXIuaXNPY3RhbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpJiYocj04KnIrcyh0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKSkpLHtjb2RlOnIsb2N0YWw6dH19LGUucHJvdG90eXBlLnNjYW5JZGVudGlmaWVyPWZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLmluZGV4LHI9OTI9PT10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHQpP3RoaXMuZ2V0Q29tcGxleElkZW50aWZpZXIoKTp0aGlzLmdldElkZW50aWZpZXIoKTtpZigzIT0oZT0xPT09ci5sZW5ndGg/Mzp0aGlzLmlzS2V5d29yZChyKT80OlwibnVsbFwiPT09cj81OlwidHJ1ZVwiPT09cnx8XCJmYWxzZVwiPT09cj8xOjMpJiZ0K3IubGVuZ3RoIT09dGhpcy5pbmRleCl7dmFyIG49dGhpcy5pbmRleDt0aGlzLmluZGV4PXQsdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihvLk1lc3NhZ2VzLkludmFsaWRFc2NhcGVkUmVzZXJ2ZWRXb3JkKSx0aGlzLmluZGV4PW59cmV0dXJue3R5cGU6ZSx2YWx1ZTpyLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDp0LGVuZDp0aGlzLmluZGV4fX0sZS5wcm90b3R5cGUuc2NhblB1bmN0dWF0b3I9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmluZGV4LHQ9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF07c3dpdGNoKHQpe2Nhc2VcIihcIjpjYXNlXCJ7XCI6XCJ7XCI9PT10JiZ0aGlzLmN1cmx5U3RhY2sucHVzaChcIntcIiksKyt0aGlzLmluZGV4O2JyZWFrO2Nhc2VcIi5cIjorK3RoaXMuaW5kZXgsXCIuXCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSYmXCIuXCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4KzFdJiYodGhpcy5pbmRleCs9Mix0PVwiLi4uXCIpO2JyZWFrO2Nhc2VcIn1cIjorK3RoaXMuaW5kZXgsdGhpcy5jdXJseVN0YWNrLnBvcCgpO2JyZWFrO2Nhc2VcIilcIjpjYXNlXCI7XCI6Y2FzZVwiLFwiOmNhc2VcIltcIjpjYXNlXCJdXCI6Y2FzZVwiOlwiOmNhc2VcIj9cIjpjYXNlXCJ+XCI6Kyt0aGlzLmluZGV4O2JyZWFrO2RlZmF1bHQ6XCI+Pj49XCI9PT0odD10aGlzLnNvdXJjZS5zdWJzdHIodGhpcy5pbmRleCw0KSk/dGhpcy5pbmRleCs9NDpcIj09PVwiPT09KHQ9dC5zdWJzdHIoMCwzKSl8fFwiIT09XCI9PT10fHxcIj4+PlwiPT09dHx8XCI8PD1cIj09PXR8fFwiPj49XCI9PT10fHxcIioqPVwiPT09dD90aGlzLmluZGV4Kz0zOlwiJiZcIj09PSh0PXQuc3Vic3RyKDAsMikpfHxcInx8XCI9PT10fHxcIj09XCI9PT10fHxcIiE9XCI9PT10fHxcIis9XCI9PT10fHxcIi09XCI9PT10fHxcIio9XCI9PT10fHxcIi89XCI9PT10fHxcIisrXCI9PT10fHxcIi0tXCI9PT10fHxcIjw8XCI9PT10fHxcIj4+XCI9PT10fHxcIiY9XCI9PT10fHxcInw9XCI9PT10fHxcIl49XCI9PT10fHxcIiU9XCI9PT10fHxcIjw9XCI9PT10fHxcIj49XCI9PT10fHxcIj0+XCI9PT10fHxcIioqXCI9PT10P3RoaXMuaW5kZXgrPTI6KHQ9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0sXCI8Pj0hKy0qJSZ8Xi9cIi5pbmRleE9mKHQpPj0wJiYrK3RoaXMuaW5kZXgpfXJldHVybiB0aGlzLmluZGV4PT09ZSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpLHt0eXBlOjcsdmFsdWU6dCxsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5saW5lU3RhcnQsc3RhcnQ6ZSxlbmQ6dGhpcy5pbmRleH19LGUucHJvdG90eXBlLnNjYW5IZXhMaXRlcmFsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cIlwiOyF0aGlzLmVvZigpJiZpLkNoYXJhY3Rlci5pc0hleERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpOyl0Kz10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO3JldHVybiAwPT09dC5sZW5ndGgmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSxpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpLHt0eXBlOjYsdmFsdWU6cGFyc2VJbnQoXCIweFwiK3QsMTYpLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDplLGVuZDp0aGlzLmluZGV4fX0sZS5wcm90b3R5cGUuc2NhbkJpbmFyeUxpdGVyYWw9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9XCJcIjshdGhpcy5lb2YoKSYmKFwiMFwiPT09KHQ9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0pfHxcIjFcIj09PXQpOylyKz10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO3JldHVybiAwPT09ci5sZW5ndGgmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSx0aGlzLmVvZigpfHwodD10aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpLChpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydCh0KXx8aS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodCkpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCkpLHt0eXBlOjYsdmFsdWU6cGFyc2VJbnQociwyKSxsaW5lTnVtYmVyOnRoaXMubGluZU51bWJlcixsaW5lU3RhcnQ6dGhpcy5saW5lU3RhcnQsc3RhcnQ6ZSxlbmQ6dGhpcy5pbmRleH19LGUucHJvdG90eXBlLnNjYW5PY3RhbExpdGVyYWw9ZnVuY3Rpb24oZSx0KXt2YXIgcj1cIlwiLG49ITE7Zm9yKGkuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChlLmNoYXJDb2RlQXQoMCkpPyhuPSEwLHI9XCIwXCIrdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSk6Kyt0aGlzLmluZGV4OyF0aGlzLmVvZigpJiZpLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSk7KXIrPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107cmV0dXJuIG58fDAhPT1yLmxlbmd0aHx8dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpLChpLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKXx8aS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpJiZ0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCkse3R5cGU6Nix2YWx1ZTpwYXJzZUludChyLDgpLG9jdGFsOm4sbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0LHN0YXJ0OnQsZW5kOnRoaXMuaW5kZXh9fSxlLnByb3RvdHlwZS5pc0ltcGxpY2l0T2N0YWxMaXRlcmFsPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuaW5kZXgrMTtlPHRoaXMubGVuZ3RoOysrZSl7dmFyIHQ9dGhpcy5zb3VyY2VbZV07aWYoXCI4XCI9PT10fHxcIjlcIj09PXQpcmV0dXJuITE7aWYoIWkuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdCh0LmNoYXJDb2RlQXQoMCkpKXJldHVybiEwfXJldHVybiEwfSxlLnByb3RvdHlwZS5zY2FuTnVtZXJpY0xpdGVyYWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmluZGV4LHQ9dGhpcy5zb3VyY2VbZV07bi5hc3NlcnQoaS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodC5jaGFyQ29kZUF0KDApKXx8XCIuXCI9PT10LFwiTnVtZXJpYyBsaXRlcmFsIG11c3Qgc3RhcnQgd2l0aCBhIGRlY2ltYWwgZGlnaXQgb3IgYSBkZWNpbWFsIHBvaW50XCIpO3ZhciByPVwiXCI7aWYoXCIuXCIhPT10KXtpZihyPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK10sdD10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSxcIjBcIj09PXIpe2lmKFwieFwiPT09dHx8XCJYXCI9PT10KXJldHVybisrdGhpcy5pbmRleCx0aGlzLnNjYW5IZXhMaXRlcmFsKGUpO2lmKFwiYlwiPT09dHx8XCJCXCI9PT10KXJldHVybisrdGhpcy5pbmRleCx0aGlzLnNjYW5CaW5hcnlMaXRlcmFsKGUpO2lmKFwib1wiPT09dHx8XCJPXCI9PT10KXJldHVybiB0aGlzLnNjYW5PY3RhbExpdGVyYWwodCxlKTtpZih0JiZpLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQodC5jaGFyQ29kZUF0KDApKSYmdGhpcy5pc0ltcGxpY2l0T2N0YWxMaXRlcmFsKCkpcmV0dXJuIHRoaXMuc2Nhbk9jdGFsTGl0ZXJhbCh0LGUpfWZvcig7aS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSk7KXIrPXRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107dD10aGlzLnNvdXJjZVt0aGlzLmluZGV4XX1pZihcIi5cIj09PXQpe2ZvcihyKz10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO2kuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpOylyKz10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO3Q9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF19aWYoXCJlXCI9PT10fHxcIkVcIj09PXQpaWYocis9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSxcIitcIiE9PSh0PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdKSYmXCItXCIhPT10fHwocis9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSksaS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpZm9yKDtpLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKTspcis9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtlbHNlIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtyZXR1cm4gaS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSx7dHlwZTo2LHZhbHVlOnBhcnNlRmxvYXQociksbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0LHN0YXJ0OmUsZW5kOnRoaXMuaW5kZXh9fSxlLnByb3RvdHlwZS5zY2FuU3RyaW5nTGl0ZXJhbD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaW5kZXgsdD10aGlzLnNvdXJjZVtlXTtuLmFzc2VydChcIidcIj09PXR8fCdcIic9PT10LFwiU3RyaW5nIGxpdGVyYWwgbXVzdCBzdGFydHMgd2l0aCBhIHF1b3RlXCIpLCsrdGhpcy5pbmRleDtmb3IodmFyIHI9ITEsYT1cIlwiOyF0aGlzLmVvZigpOyl7dmFyIHM9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtpZihzPT09dCl7dD1cIlwiO2JyZWFrfWlmKFwiXFxcXFwiPT09cylpZigocz10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKSYmaS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihzLmNoYXJDb2RlQXQoMCkpKSsrdGhpcy5saW5lTnVtYmVyLFwiXFxyXCI9PT1zJiZcIlxcblwiPT09dGhpcy5zb3VyY2VbdGhpcy5pbmRleF0mJisrdGhpcy5pbmRleCx0aGlzLmxpbmVTdGFydD10aGlzLmluZGV4O2Vsc2Ugc3dpdGNoKHMpe2Nhc2VcInVcIjppZihcIntcIj09PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdKSsrdGhpcy5pbmRleCxhKz10aGlzLnNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlKCk7ZWxzZXt2YXIgdT10aGlzLnNjYW5IZXhFc2NhcGUocyk7bnVsbD09PXUmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSxhKz11fWJyZWFrO2Nhc2VcInhcIjp2YXIgbD10aGlzLnNjYW5IZXhFc2NhcGUocyk7bnVsbD09PWwmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5JbnZhbGlkSGV4RXNjYXBlU2VxdWVuY2UpLGErPWw7YnJlYWs7Y2FzZVwiblwiOmErPVwiXFxuXCI7YnJlYWs7Y2FzZVwiclwiOmErPVwiXFxyXCI7YnJlYWs7Y2FzZVwidFwiOmErPVwiXFx0XCI7YnJlYWs7Y2FzZVwiYlwiOmErPVwiXFxiXCI7YnJlYWs7Y2FzZVwiZlwiOmErPVwiXFxmXCI7YnJlYWs7Y2FzZVwidlwiOmErPVwiXFx2XCI7YnJlYWs7Y2FzZVwiOFwiOmNhc2VcIjlcIjphKz1zLHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oKTticmVhaztkZWZhdWx0OmlmKHMmJmkuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChzLmNoYXJDb2RlQXQoMCkpKXt2YXIgYz10aGlzLm9jdGFsVG9EZWNpbWFsKHMpO3I9Yy5vY3RhbHx8cixhKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGMuY29kZSl9ZWxzZSBhKz1zfWVsc2V7aWYoaS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihzLmNoYXJDb2RlQXQoMCkpKWJyZWFrO2ErPXN9fXJldHVyblwiXCIhPT10JiYodGhpcy5pbmRleD1lLHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKSkse3R5cGU6OCx2YWx1ZTphLG9jdGFsOnIsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0LHN0YXJ0OmUsZW5kOnRoaXMuaW5kZXh9fSxlLnByb3RvdHlwZS5zY2FuVGVtcGxhdGU9ZnVuY3Rpb24oKXt2YXIgZT1cIlwiLHQ9ITEscj10aGlzLmluZGV4LG49XCJgXCI9PT10aGlzLnNvdXJjZVtyXSxhPSExLHM9Mjtmb3IoKyt0aGlzLmluZGV4OyF0aGlzLmVvZigpOyl7dmFyIHU9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtpZihcImBcIj09PXUpe3M9MSxhPSEwLHQ9ITA7YnJlYWt9aWYoXCIkXCI9PT11KXtpZihcIntcIj09PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdKXt0aGlzLmN1cmx5U3RhY2sucHVzaChcIiR7XCIpLCsrdGhpcy5pbmRleCx0PSEwO2JyZWFrfWUrPXV9ZWxzZSBpZihcIlxcXFxcIj09PXUpaWYodT10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdLGkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IodS5jaGFyQ29kZUF0KDApKSkrK3RoaXMubGluZU51bWJlcixcIlxcclwiPT09dSYmXCJcXG5cIj09PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdJiYrK3RoaXMuaW5kZXgsdGhpcy5saW5lU3RhcnQ9dGhpcy5pbmRleDtlbHNlIHN3aXRjaCh1KXtjYXNlXCJuXCI6ZSs9XCJcXG5cIjticmVhaztjYXNlXCJyXCI6ZSs9XCJcXHJcIjticmVhaztjYXNlXCJ0XCI6ZSs9XCJcXHRcIjticmVhaztjYXNlXCJ1XCI6aWYoXCJ7XCI9PT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XSkrK3RoaXMuaW5kZXgsZSs9dGhpcy5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpO2Vsc2V7dmFyIGw9dGhpcy5pbmRleCxjPXRoaXMuc2NhbkhleEVzY2FwZSh1KTtudWxsIT09Yz9lKz1jOih0aGlzLmluZGV4PWwsZSs9dSl9YnJlYWs7Y2FzZVwieFwiOnZhciBoPXRoaXMuc2NhbkhleEVzY2FwZSh1KTtudWxsPT09aCYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihvLk1lc3NhZ2VzLkludmFsaWRIZXhFc2NhcGVTZXF1ZW5jZSksZSs9aDticmVhaztjYXNlXCJiXCI6ZSs9XCJcXGJcIjticmVhaztjYXNlXCJmXCI6ZSs9XCJcXGZcIjticmVhaztjYXNlXCJ2XCI6ZSs9XCJcXHZcIjticmVhaztkZWZhdWx0OlwiMFwiPT09dT8oaS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkmJnRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5UZW1wbGF0ZU9jdGFsTGl0ZXJhbCksZSs9XCJcXDBcIik6aS5DaGFyYWN0ZXIuaXNPY3RhbERpZ2l0KHUuY2hhckNvZGVBdCgwKSk/dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihvLk1lc3NhZ2VzLlRlbXBsYXRlT2N0YWxMaXRlcmFsKTplKz11fWVsc2UgaS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcih1LmNoYXJDb2RlQXQoMCkpPygrK3RoaXMubGluZU51bWJlcixcIlxcclwiPT09dSYmXCJcXG5cIj09PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdJiYrK3RoaXMuaW5kZXgsdGhpcy5saW5lU3RhcnQ9dGhpcy5pbmRleCxlKz1cIlxcblwiKTplKz11fXJldHVybiB0fHx0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCksbnx8dGhpcy5jdXJseVN0YWNrLnBvcCgpLHt0eXBlOjEwLHZhbHVlOnRoaXMuc291cmNlLnNsaWNlKHIrMSx0aGlzLmluZGV4LXMpLGNvb2tlZDplLGhlYWQ6bix0YWlsOmEsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0LHN0YXJ0OnIsZW5kOnRoaXMuaW5kZXh9fSxlLnByb3RvdHlwZS50ZXN0UmVnRXhwPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZSxuPXRoaXM7dC5pbmRleE9mKFwidVwiKT49MCYmKHI9ci5yZXBsYWNlKC9cXFxcdVxceyhbMC05YS1mQS1GXSspXFx9fFxcXFx1KFthLWZBLUYwLTldezR9KS9nLChmdW5jdGlvbihlLHQscil7dmFyIGk9cGFyc2VJbnQodHx8ciwxNik7cmV0dXJuIGk+MTExNDExMSYmbi50aHJvd1VuZXhwZWN0ZWRUb2tlbihvLk1lc3NhZ2VzLkludmFsaWRSZWdFeHApLGk8PTY1NTM1P1N0cmluZy5mcm9tQ2hhckNvZGUoaSk6XCJcdUZGRkZcIn0pKS5yZXBsYWNlKC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2csXCJcdUZGRkZcIikpO3RyeXtSZWdFeHAocil9Y2F0Y2goZSl7dGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihvLk1lc3NhZ2VzLkludmFsaWRSZWdFeHApfXRyeXtyZXR1cm4gbmV3IFJlZ0V4cChlLHQpfWNhdGNoKGUpe3JldHVybiBudWxsfX0sZS5wcm90b3R5cGUuc2NhblJlZ0V4cEJvZHk9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnNvdXJjZVt0aGlzLmluZGV4XTtuLmFzc2VydChcIi9cIj09PWUsXCJSZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbCBtdXN0IHN0YXJ0IHdpdGggYSBzbGFzaFwiKTtmb3IodmFyIHQ9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSxyPSExLGE9ITE7IXRoaXMuZW9mKCk7KWlmKHQrPWU9dGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSxcIlxcXFxcIj09PWUpZT10aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdLGkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoZS5jaGFyQ29kZUF0KDApKSYmdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihvLk1lc3NhZ2VzLlVudGVybWluYXRlZFJlZ0V4cCksdCs9ZTtlbHNlIGlmKGkuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoZS5jaGFyQ29kZUF0KDApKSl0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKG8uTWVzc2FnZXMuVW50ZXJtaW5hdGVkUmVnRXhwKTtlbHNlIGlmKHIpXCJdXCI9PT1lJiYocj0hMSk7ZWxzZXtpZihcIi9cIj09PWUpe2E9ITA7YnJlYWt9XCJbXCI9PT1lJiYocj0hMCl9cmV0dXJuIGF8fHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oby5NZXNzYWdlcy5VbnRlcm1pbmF0ZWRSZWdFeHApLHQuc3Vic3RyKDEsdC5sZW5ndGgtMil9LGUucHJvdG90eXBlLnNjYW5SZWdFeHBGbGFncz1mdW5jdGlvbigpe2Zvcih2YXIgZT1cIlwiOyF0aGlzLmVvZigpOyl7dmFyIHQ9dGhpcy5zb3VyY2VbdGhpcy5pbmRleF07aWYoIWkuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclBhcnQodC5jaGFyQ29kZUF0KDApKSlicmVhaztpZigrK3RoaXMuaW5kZXgsXCJcXFxcXCIhPT10fHx0aGlzLmVvZigpKWUrPXQ7ZWxzZSBpZihcInVcIj09PSh0PXRoaXMuc291cmNlW3RoaXMuaW5kZXhdKSl7Kyt0aGlzLmluZGV4O3ZhciByPXRoaXMuaW5kZXgsbj10aGlzLnNjYW5IZXhFc2NhcGUoXCJ1XCIpO2lmKG51bGwhPT1uKWZvcihlKz1uO3I8dGhpcy5pbmRleDsrK3IpdGhpcy5zb3VyY2Vbcl07ZWxzZSB0aGlzLmluZGV4PXIsZSs9XCJ1XCI7dGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbigpfWVsc2UgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbigpfXJldHVybiBlfSxlLnByb3RvdHlwZS5zY2FuUmVnRXhwPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5pbmRleCx0PXRoaXMuc2NhblJlZ0V4cEJvZHkoKSxyPXRoaXMuc2NhblJlZ0V4cEZsYWdzKCk7cmV0dXJue3R5cGU6OSx2YWx1ZTpcIlwiLHBhdHRlcm46dCxmbGFnczpyLHJlZ2V4OnRoaXMudGVzdFJlZ0V4cCh0LHIpLGxpbmVOdW1iZXI6dGhpcy5saW5lTnVtYmVyLGxpbmVTdGFydDp0aGlzLmxpbmVTdGFydCxzdGFydDplLGVuZDp0aGlzLmluZGV4fX0sZS5wcm90b3R5cGUubGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5lb2YoKSlyZXR1cm57dHlwZToyLHZhbHVlOlwiXCIsbGluZU51bWJlcjp0aGlzLmxpbmVOdW1iZXIsbGluZVN0YXJ0OnRoaXMubGluZVN0YXJ0LHN0YXJ0OnRoaXMuaW5kZXgsZW5kOnRoaXMuaW5kZXh9O3ZhciBlPXRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7cmV0dXJuIGkuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KGUpP3RoaXMuc2NhbklkZW50aWZpZXIoKTo0MD09PWV8fDQxPT09ZXx8NTk9PT1lP3RoaXMuc2NhblB1bmN0dWF0b3IoKTozOT09PWV8fDM0PT09ZT90aGlzLnNjYW5TdHJpbmdMaXRlcmFsKCk6NDY9PT1lP2kuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCsxKSk/dGhpcy5zY2FuTnVtZXJpY0xpdGVyYWwoKTp0aGlzLnNjYW5QdW5jdHVhdG9yKCk6aS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQoZSk/dGhpcy5zY2FuTnVtZXJpY0xpdGVyYWwoKTo5Nj09PWV8fDEyNT09PWUmJlwiJHtcIj09PXRoaXMuY3VybHlTdGFja1t0aGlzLmN1cmx5U3RhY2subGVuZ3RoLTFdP3RoaXMuc2NhblRlbXBsYXRlKCk6ZT49NTUyOTYmJmU8NTczNDMmJmkuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KHRoaXMuY29kZVBvaW50QXQodGhpcy5pbmRleCkpP3RoaXMuc2NhbklkZW50aWZpZXIoKTp0aGlzLnNjYW5QdW5jdHVhdG9yKCl9LGV9KCk7dC5TY2FubmVyPXV9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Ub2tlbk5hbWU9e30sdC5Ub2tlbk5hbWVbMV09XCJCb29sZWFuXCIsdC5Ub2tlbk5hbWVbMl09XCI8ZW5kPlwiLHQuVG9rZW5OYW1lWzNdPVwiSWRlbnRpZmllclwiLHQuVG9rZW5OYW1lWzRdPVwiS2V5d29yZFwiLHQuVG9rZW5OYW1lWzVdPVwiTnVsbFwiLHQuVG9rZW5OYW1lWzZdPVwiTnVtZXJpY1wiLHQuVG9rZW5OYW1lWzddPVwiUHVuY3R1YXRvclwiLHQuVG9rZW5OYW1lWzhdPVwiU3RyaW5nXCIsdC5Ub2tlbk5hbWVbOV09XCJSZWd1bGFyRXhwcmVzc2lvblwiLHQuVG9rZW5OYW1lWzEwXT1cIlRlbXBsYXRlXCJ9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5YSFRNTEVudGl0aWVzPXtxdW90OidcIicsYW1wOlwiJlwiLGFwb3M6XCInXCIsZ3Q6XCI+XCIsbmJzcDpcIlx1MDBBMFwiLGlleGNsOlwiXHUwMEExXCIsY2VudDpcIlx1MDBBMlwiLHBvdW5kOlwiXHUwMEEzXCIsY3VycmVuOlwiXHUwMEE0XCIseWVuOlwiXHUwMEE1XCIsYnJ2YmFyOlwiXHUwMEE2XCIsc2VjdDpcIlx1MDBBN1wiLHVtbDpcIlx1MDBBOFwiLGNvcHk6XCJcdTAwQTlcIixvcmRmOlwiXHUwMEFBXCIsbGFxdW86XCJcdTAwQUJcIixub3Q6XCJcdTAwQUNcIixzaHk6XCJcdTAwQURcIixyZWc6XCJcdTAwQUVcIixtYWNyOlwiXHUwMEFGXCIsZGVnOlwiXHUwMEIwXCIscGx1c21uOlwiXHUwMEIxXCIsc3VwMjpcIlx1MDBCMlwiLHN1cDM6XCJcdTAwQjNcIixhY3V0ZTpcIlx1MDBCNFwiLG1pY3JvOlwiXHUwMEI1XCIscGFyYTpcIlx1MDBCNlwiLG1pZGRvdDpcIlx1MDBCN1wiLGNlZGlsOlwiXHUwMEI4XCIsc3VwMTpcIlx1MDBCOVwiLG9yZG06XCJcdTAwQkFcIixyYXF1bzpcIlx1MDBCQlwiLGZyYWMxNDpcIlx1MDBCQ1wiLGZyYWMxMjpcIlx1MDBCRFwiLGZyYWMzNDpcIlx1MDBCRVwiLGlxdWVzdDpcIlx1MDBCRlwiLEFncmF2ZTpcIlx1MDBDMFwiLEFhY3V0ZTpcIlx1MDBDMVwiLEFjaXJjOlwiXHUwMEMyXCIsQXRpbGRlOlwiXHUwMEMzXCIsQXVtbDpcIlx1MDBDNFwiLEFyaW5nOlwiXHUwMEM1XCIsQUVsaWc6XCJcdTAwQzZcIixDY2VkaWw6XCJcdTAwQzdcIixFZ3JhdmU6XCJcdTAwQzhcIixFYWN1dGU6XCJcdTAwQzlcIixFY2lyYzpcIlx1MDBDQVwiLEV1bWw6XCJcdTAwQ0JcIixJZ3JhdmU6XCJcdTAwQ0NcIixJYWN1dGU6XCJcdTAwQ0RcIixJY2lyYzpcIlx1MDBDRVwiLEl1bWw6XCJcdTAwQ0ZcIixFVEg6XCJcdTAwRDBcIixOdGlsZGU6XCJcdTAwRDFcIixPZ3JhdmU6XCJcdTAwRDJcIixPYWN1dGU6XCJcdTAwRDNcIixPY2lyYzpcIlx1MDBENFwiLE90aWxkZTpcIlx1MDBENVwiLE91bWw6XCJcdTAwRDZcIix0aW1lczpcIlx1MDBEN1wiLE9zbGFzaDpcIlx1MDBEOFwiLFVncmF2ZTpcIlx1MDBEOVwiLFVhY3V0ZTpcIlx1MDBEQVwiLFVjaXJjOlwiXHUwMERCXCIsVXVtbDpcIlx1MDBEQ1wiLFlhY3V0ZTpcIlx1MDBERFwiLFRIT1JOOlwiXHUwMERFXCIsc3psaWc6XCJcdTAwREZcIixhZ3JhdmU6XCJcdTAwRTBcIixhYWN1dGU6XCJcdTAwRTFcIixhY2lyYzpcIlx1MDBFMlwiLGF0aWxkZTpcIlx1MDBFM1wiLGF1bWw6XCJcdTAwRTRcIixhcmluZzpcIlx1MDBFNVwiLGFlbGlnOlwiXHUwMEU2XCIsY2NlZGlsOlwiXHUwMEU3XCIsZWdyYXZlOlwiXHUwMEU4XCIsZWFjdXRlOlwiXHUwMEU5XCIsZWNpcmM6XCJcdTAwRUFcIixldW1sOlwiXHUwMEVCXCIsaWdyYXZlOlwiXHUwMEVDXCIsaWFjdXRlOlwiXHUwMEVEXCIsaWNpcmM6XCJcdTAwRUVcIixpdW1sOlwiXHUwMEVGXCIsZXRoOlwiXHUwMEYwXCIsbnRpbGRlOlwiXHUwMEYxXCIsb2dyYXZlOlwiXHUwMEYyXCIsb2FjdXRlOlwiXHUwMEYzXCIsb2NpcmM6XCJcdTAwRjRcIixvdGlsZGU6XCJcdTAwRjVcIixvdW1sOlwiXHUwMEY2XCIsZGl2aWRlOlwiXHUwMEY3XCIsb3NsYXNoOlwiXHUwMEY4XCIsdWdyYXZlOlwiXHUwMEY5XCIsdWFjdXRlOlwiXHUwMEZBXCIsdWNpcmM6XCJcdTAwRkJcIix1dW1sOlwiXHUwMEZDXCIseWFjdXRlOlwiXHUwMEZEXCIsdGhvcm46XCJcdTAwRkVcIix5dW1sOlwiXHUwMEZGXCIsT0VsaWc6XCJcdTAxNTJcIixvZWxpZzpcIlx1MDE1M1wiLFNjYXJvbjpcIlx1MDE2MFwiLHNjYXJvbjpcIlx1MDE2MVwiLFl1bWw6XCJcdTAxNzhcIixmbm9mOlwiXHUwMTkyXCIsY2lyYzpcIlx1MDJDNlwiLHRpbGRlOlwiXHUwMkRDXCIsQWxwaGE6XCJcdTAzOTFcIixCZXRhOlwiXHUwMzkyXCIsR2FtbWE6XCJcdTAzOTNcIixEZWx0YTpcIlx1MDM5NFwiLEVwc2lsb246XCJcdTAzOTVcIixaZXRhOlwiXHUwMzk2XCIsRXRhOlwiXHUwMzk3XCIsVGhldGE6XCJcdTAzOThcIixJb3RhOlwiXHUwMzk5XCIsS2FwcGE6XCJcdTAzOUFcIixMYW1iZGE6XCJcdTAzOUJcIixNdTpcIlx1MDM5Q1wiLE51OlwiXHUwMzlEXCIsWGk6XCJcdTAzOUVcIixPbWljcm9uOlwiXHUwMzlGXCIsUGk6XCJcdTAzQTBcIixSaG86XCJcdTAzQTFcIixTaWdtYTpcIlx1MDNBM1wiLFRhdTpcIlx1MDNBNFwiLFVwc2lsb246XCJcdTAzQTVcIixQaGk6XCJcdTAzQTZcIixDaGk6XCJcdTAzQTdcIixQc2k6XCJcdTAzQThcIixPbWVnYTpcIlx1MDNBOVwiLGFscGhhOlwiXHUwM0IxXCIsYmV0YTpcIlx1MDNCMlwiLGdhbW1hOlwiXHUwM0IzXCIsZGVsdGE6XCJcdTAzQjRcIixlcHNpbG9uOlwiXHUwM0I1XCIsemV0YTpcIlx1MDNCNlwiLGV0YTpcIlx1MDNCN1wiLHRoZXRhOlwiXHUwM0I4XCIsaW90YTpcIlx1MDNCOVwiLGthcHBhOlwiXHUwM0JBXCIsbGFtYmRhOlwiXHUwM0JCXCIsbXU6XCJcdTAzQkNcIixudTpcIlx1MDNCRFwiLHhpOlwiXHUwM0JFXCIsb21pY3JvbjpcIlx1MDNCRlwiLHBpOlwiXHUwM0MwXCIscmhvOlwiXHUwM0MxXCIsc2lnbWFmOlwiXHUwM0MyXCIsc2lnbWE6XCJcdTAzQzNcIix0YXU6XCJcdTAzQzRcIix1cHNpbG9uOlwiXHUwM0M1XCIscGhpOlwiXHUwM0M2XCIsY2hpOlwiXHUwM0M3XCIscHNpOlwiXHUwM0M4XCIsb21lZ2E6XCJcdTAzQzlcIix0aGV0YXN5bTpcIlx1MDNEMVwiLHVwc2loOlwiXHUwM0QyXCIscGl2OlwiXHUwM0Q2XCIsZW5zcDpcIlx1MjAwMlwiLGVtc3A6XCJcdTIwMDNcIix0aGluc3A6XCJcdTIwMDlcIix6d25qOlwiXHUyMDBDXCIsendqOlwiXHUyMDBEXCIsbHJtOlwiXHUyMDBFXCIscmxtOlwiXHUyMDBGXCIsbmRhc2g6XCJcdTIwMTNcIixtZGFzaDpcIlx1MjAxNFwiLGxzcXVvOlwiXHUyMDE4XCIscnNxdW86XCJcdTIwMTlcIixzYnF1bzpcIlx1MjAxQVwiLGxkcXVvOlwiXHUyMDFDXCIscmRxdW86XCJcdTIwMURcIixiZHF1bzpcIlx1MjAxRVwiLGRhZ2dlcjpcIlx1MjAyMFwiLERhZ2dlcjpcIlx1MjAyMVwiLGJ1bGw6XCJcdTIwMjJcIixoZWxsaXA6XCJcdTIwMjZcIixwZXJtaWw6XCJcdTIwMzBcIixwcmltZTpcIlx1MjAzMlwiLFByaW1lOlwiXHUyMDMzXCIsbHNhcXVvOlwiXHUyMDM5XCIscnNhcXVvOlwiXHUyMDNBXCIsb2xpbmU6XCJcdTIwM0VcIixmcmFzbDpcIlx1MjA0NFwiLGV1cm86XCJcdTIwQUNcIixpbWFnZTpcIlx1MjExMVwiLHdlaWVycDpcIlx1MjExOFwiLHJlYWw6XCJcdTIxMUNcIix0cmFkZTpcIlx1MjEyMlwiLGFsZWZzeW06XCJcdTIxMzVcIixsYXJyOlwiXHUyMTkwXCIsdWFycjpcIlx1MjE5MVwiLHJhcnI6XCJcdTIxOTJcIixkYXJyOlwiXHUyMTkzXCIsaGFycjpcIlx1MjE5NFwiLGNyYXJyOlwiXHUyMUI1XCIsbEFycjpcIlx1MjFEMFwiLHVBcnI6XCJcdTIxRDFcIixyQXJyOlwiXHUyMUQyXCIsZEFycjpcIlx1MjFEM1wiLGhBcnI6XCJcdTIxRDRcIixmb3JhbGw6XCJcdTIyMDBcIixwYXJ0OlwiXHUyMjAyXCIsZXhpc3Q6XCJcdTIyMDNcIixlbXB0eTpcIlx1MjIwNVwiLG5hYmxhOlwiXHUyMjA3XCIsaXNpbjpcIlx1MjIwOFwiLG5vdGluOlwiXHUyMjA5XCIsbmk6XCJcdTIyMEJcIixwcm9kOlwiXHUyMjBGXCIsc3VtOlwiXHUyMjExXCIsbWludXM6XCJcdTIyMTJcIixsb3dhc3Q6XCJcdTIyMTdcIixyYWRpYzpcIlx1MjIxQVwiLHByb3A6XCJcdTIyMURcIixpbmZpbjpcIlx1MjIxRVwiLGFuZzpcIlx1MjIyMFwiLGFuZDpcIlx1MjIyN1wiLG9yOlwiXHUyMjI4XCIsY2FwOlwiXHUyMjI5XCIsY3VwOlwiXHUyMjJBXCIsaW50OlwiXHUyMjJCXCIsdGhlcmU0OlwiXHUyMjM0XCIsc2ltOlwiXHUyMjNDXCIsY29uZzpcIlx1MjI0NVwiLGFzeW1wOlwiXHUyMjQ4XCIsbmU6XCJcdTIyNjBcIixlcXVpdjpcIlx1MjI2MVwiLGxlOlwiXHUyMjY0XCIsZ2U6XCJcdTIyNjVcIixzdWI6XCJcdTIyODJcIixzdXA6XCJcdTIyODNcIixuc3ViOlwiXHUyMjg0XCIsc3ViZTpcIlx1MjI4NlwiLHN1cGU6XCJcdTIyODdcIixvcGx1czpcIlx1MjI5NVwiLG90aW1lczpcIlx1MjI5N1wiLHBlcnA6XCJcdTIyQTVcIixzZG90OlwiXHUyMkM1XCIsbGNlaWw6XCJcdTIzMDhcIixyY2VpbDpcIlx1MjMwOVwiLGxmbG9vcjpcIlx1MjMwQVwiLHJmbG9vcjpcIlx1MjMwQlwiLGxvejpcIlx1MjVDQVwiLHNwYWRlczpcIlx1MjY2MFwiLGNsdWJzOlwiXHUyNjYzXCIsaGVhcnRzOlwiXHUyNjY1XCIsZGlhbXM6XCJcdTI2NjZcIixsYW5nOlwiXHUyN0U4XCIscmFuZzpcIlx1MjdFOVwifX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMTApLGk9cigxMiksbz1yKDEzKSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMudmFsdWVzPVtdLHRoaXMuY3VybHk9dGhpcy5wYXJlbj0tMX1yZXR1cm4gZS5wcm90b3R5cGUuYmVmb3JlRnVuY3Rpb25FeHByZXNzaW9uPWZ1bmN0aW9uKGUpe3JldHVybltcIihcIixcIntcIixcIltcIixcImluXCIsXCJ0eXBlb2ZcIixcImluc3RhbmNlb2ZcIixcIm5ld1wiLFwicmV0dXJuXCIsXCJjYXNlXCIsXCJkZWxldGVcIixcInRocm93XCIsXCJ2b2lkXCIsXCI9XCIsXCIrPVwiLFwiLT1cIixcIio9XCIsXCIqKj1cIixcIi89XCIsXCIlPVwiLFwiPDw9XCIsXCI+Pj1cIixcIj4+Pj1cIixcIiY9XCIsXCJ8PVwiLFwiXj1cIixcIixcIixcIitcIixcIi1cIixcIipcIixcIioqXCIsXCIvXCIsXCIlXCIsXCIrK1wiLFwiLS1cIixcIjw8XCIsXCI+PlwiLFwiPj4+XCIsXCImXCIsXCJ8XCIsXCJeXCIsXCIhXCIsXCJ+XCIsXCImJlwiLFwifHxcIixcIj9cIixcIjpcIixcIj09PVwiLFwiPT1cIixcIj49XCIsXCI8PVwiLFwiPFwiLFwiPlwiLFwiIT1cIixcIiE9PVwiXS5pbmRleE9mKGUpPj0wfSxlLnByb3RvdHlwZS5pc1JlZ2V4U3RhcnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnZhbHVlc1t0aGlzLnZhbHVlcy5sZW5ndGgtMV0sdD1udWxsIT09ZTtzd2l0Y2goZSl7Y2FzZVwidGhpc1wiOmNhc2VcIl1cIjp0PSExO2JyZWFrO2Nhc2VcIilcIjp2YXIgcj10aGlzLnZhbHVlc1t0aGlzLnBhcmVuLTFdO3Q9XCJpZlwiPT09cnx8XCJ3aGlsZVwiPT09cnx8XCJmb3JcIj09PXJ8fFwid2l0aFwiPT09cjticmVhaztjYXNlXCJ9XCI6aWYodD0hMSxcImZ1bmN0aW9uXCI9PT10aGlzLnZhbHVlc1t0aGlzLmN1cmx5LTNdKXQ9ISEobj10aGlzLnZhbHVlc1t0aGlzLmN1cmx5LTRdKSYmIXRoaXMuYmVmb3JlRnVuY3Rpb25FeHByZXNzaW9uKG4pO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dGhpcy52YWx1ZXNbdGhpcy5jdXJseS00XSl7dmFyIG47dD0hKG49dGhpcy52YWx1ZXNbdGhpcy5jdXJseS01XSl8fCF0aGlzLmJlZm9yZUZ1bmN0aW9uRXhwcmVzc2lvbihuKX19cmV0dXJuIHR9LGUucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSl7Nz09PWUudHlwZXx8ND09PWUudHlwZT8oXCJ7XCI9PT1lLnZhbHVlP3RoaXMuY3VybHk9dGhpcy52YWx1ZXMubGVuZ3RoOlwiKFwiPT09ZS52YWx1ZSYmKHRoaXMucGFyZW49dGhpcy52YWx1ZXMubGVuZ3RoKSx0aGlzLnZhbHVlcy5wdXNoKGUudmFsdWUpKTp0aGlzLnZhbHVlcy5wdXNoKG51bGwpfSxlfSgpLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5lcnJvckhhbmRsZXI9bmV3IG4uRXJyb3JIYW5kbGVyLHRoaXMuZXJyb3JIYW5kbGVyLnRvbGVyYW50PSEhdCYmXCJib29sZWFuXCI9PXR5cGVvZiB0LnRvbGVyYW50JiZ0LnRvbGVyYW50LHRoaXMuc2Nhbm5lcj1uZXcgaS5TY2FubmVyKGUsdGhpcy5lcnJvckhhbmRsZXIpLHRoaXMuc2Nhbm5lci50cmFja0NvbW1lbnQ9ISF0JiZcImJvb2xlYW5cIj09dHlwZW9mIHQuY29tbWVudCYmdC5jb21tZW50LHRoaXMudHJhY2tSYW5nZT0hIXQmJlwiYm9vbGVhblwiPT10eXBlb2YgdC5yYW5nZSYmdC5yYW5nZSx0aGlzLnRyYWNrTG9jPSEhdCYmXCJib29sZWFuXCI9PXR5cGVvZiB0LmxvYyYmdC5sb2MsdGhpcy5idWZmZXI9W10sdGhpcy5yZWFkZXI9bmV3IGF9cmV0dXJuIGUucHJvdG90eXBlLmVycm9ycz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVycm9ySGFuZGxlci5lcnJvcnN9LGUucHJvdG90eXBlLmdldE5leHRUb2tlbj1mdW5jdGlvbigpe2lmKDA9PT10aGlzLmJ1ZmZlci5sZW5ndGgpe3ZhciBlPXRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtpZih0aGlzLnNjYW5uZXIudHJhY2tDb21tZW50KWZvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7Kyt0KXt2YXIgcj1lW3RdLG49dGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZShyLnNsaWNlWzBdLHIuc2xpY2VbMV0pLGk9e3R5cGU6ci5tdWx0aUxpbmU/XCJCbG9ja0NvbW1lbnRcIjpcIkxpbmVDb21tZW50XCIsdmFsdWU6bn07dGhpcy50cmFja1JhbmdlJiYoaS5yYW5nZT1yLnJhbmdlKSx0aGlzLnRyYWNrTG9jJiYoaS5sb2M9ci5sb2MpLHRoaXMuYnVmZmVyLnB1c2goaSl9aWYoIXRoaXMuc2Nhbm5lci5lb2YoKSl7dmFyIGE9dm9pZCAwO3RoaXMudHJhY2tMb2MmJihhPXtzdGFydDp7bGluZTp0aGlzLnNjYW5uZXIubGluZU51bWJlcixjb2x1bW46dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnR9LGVuZDp7fX0pO3ZhciBzPVwiL1wiPT09dGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdJiZ0aGlzLnJlYWRlci5pc1JlZ2V4U3RhcnQoKT90aGlzLnNjYW5uZXIuc2NhblJlZ0V4cCgpOnRoaXMuc2Nhbm5lci5sZXgoKTt0aGlzLnJlYWRlci5wdXNoKHMpO3ZhciB1PXt0eXBlOm8uVG9rZW5OYW1lW3MudHlwZV0sdmFsdWU6dGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZShzLnN0YXJ0LHMuZW5kKX07aWYodGhpcy50cmFja1JhbmdlJiYodS5yYW5nZT1bcy5zdGFydCxzLmVuZF0pLHRoaXMudHJhY2tMb2MmJihhLmVuZD17bGluZTp0aGlzLnNjYW5uZXIubGluZU51bWJlcixjb2x1bW46dGhpcy5zY2FubmVyLmluZGV4LXRoaXMuc2Nhbm5lci5saW5lU3RhcnR9LHUubG9jPWEpLDk9PT1zLnR5cGUpe3ZhciBsPXMucGF0dGVybixjPXMuZmxhZ3M7dS5yZWdleD17cGF0dGVybjpsLGZsYWdzOmN9fXRoaXMuYnVmZmVyLnB1c2godSl9fXJldHVybiB0aGlzLmJ1ZmZlci5zaGlmdCgpfSxlfSgpO3QuVG9rZW5pemVyPXN9XSl9LGUuZXhwb3J0cz1uKCl9LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDM4KSxpPXIoNTMpLG89cig3NiksYT1yKDU0KSxzPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsdT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGw9ezA6XCJcXFxcMFwiLDc6XCJcXFxcYVwiLDg6XCJcXFxcYlwiLDk6XCJcXFxcdFwiLDEwOlwiXFxcXG5cIiwxMTpcIlxcXFx2XCIsMTI6XCJcXFxcZlwiLDEzOlwiXFxcXHJcIiwyNzpcIlxcXFxlXCIsMzQ6J1xcXFxcIicsOTI6XCJcXFxcXFxcXFwiLDEzMzpcIlxcXFxOXCIsMTYwOlwiXFxcXF9cIiw4MjMyOlwiXFxcXExcIiw4MjMzOlwiXFxcXFBcIn0sYz1bXCJ5XCIsXCJZXCIsXCJ5ZXNcIixcIlllc1wiLFwiWUVTXCIsXCJvblwiLFwiT25cIixcIk9OXCIsXCJuXCIsXCJOXCIsXCJub1wiLFwiTm9cIixcIk5PXCIsXCJvZmZcIixcIk9mZlwiLFwiT0ZGXCJdO2Z1bmN0aW9uIGgoZSl7dmFyIHQscixvO2lmKHQ9ZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSxlPD0yNTUpcj1cInhcIixvPTI7ZWxzZSBpZihlPD02NTUzNSlyPVwidVwiLG89NDtlbHNle2lmKCEoZTw9NDI5NDk2NzI5NSkpdGhyb3cgbmV3IGkoXCJjb2RlIHBvaW50IHdpdGhpbiBhIHN0cmluZyBtYXkgbm90IGJlIGdyZWF0ZXIgdGhhbiAweEZGRkZGRkZGXCIpO3I9XCJVXCIsbz04fXJldHVyblwiXFxcXFwiK3Irbi5yZXBlYXQoXCIwXCIsby10Lmxlbmd0aCkrdH1mdW5jdGlvbiBwKGUpe3RoaXMuc2NoZW1hPWUuc2NoZW1hfHxvLHRoaXMuaW5kZW50PU1hdGgubWF4KDEsZS5pbmRlbnR8fDIpLHRoaXMubm9BcnJheUluZGVudD1lLm5vQXJyYXlJbmRlbnR8fCExLHRoaXMuc2tpcEludmFsaWQ9ZS5za2lwSW52YWxpZHx8ITEsdGhpcy5mbG93TGV2ZWw9bi5pc05vdGhpbmcoZS5mbG93TGV2ZWwpPy0xOmUuZmxvd0xldmVsLHRoaXMuc3R5bGVNYXA9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxhLHMsbDtpZihudWxsPT09dClyZXR1cm57fTtmb3Iocj17fSxpPTAsbz0obj1PYmplY3Qua2V5cyh0KSkubGVuZ3RoO2k8bztpKz0xKWE9bltpXSxzPVN0cmluZyh0W2FdKSxcIiEhXCI9PT1hLnNsaWNlKDAsMikmJihhPVwidGFnOnlhbWwub3JnLDIwMDI6XCIrYS5zbGljZSgyKSksKGw9ZS5jb21waWxlZFR5cGVNYXAuZmFsbGJhY2tbYV0pJiZ1LmNhbGwobC5zdHlsZUFsaWFzZXMscykmJihzPWwuc3R5bGVBbGlhc2VzW3NdKSxyW2FdPXM7cmV0dXJuIHJ9KHRoaXMuc2NoZW1hLGUuc3R5bGVzfHxudWxsKSx0aGlzLnNvcnRLZXlzPWUuc29ydEtleXN8fCExLHRoaXMubGluZVdpZHRoPWUubGluZVdpZHRofHw4MCx0aGlzLm5vUmVmcz1lLm5vUmVmc3x8ITEsdGhpcy5ub0NvbXBhdE1vZGU9ZS5ub0NvbXBhdE1vZGV8fCExLHRoaXMuY29uZGVuc2VGbG93PWUuY29uZGVuc2VGbG93fHwhMSx0aGlzLmltcGxpY2l0VHlwZXM9dGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdCx0aGlzLmV4cGxpY2l0VHlwZXM9dGhpcy5zY2hlbWEuY29tcGlsZWRFeHBsaWNpdCx0aGlzLnRhZz1udWxsLHRoaXMucmVzdWx0PVwiXCIsdGhpcy5kdXBsaWNhdGVzPVtdLHRoaXMudXNlZER1cGxpY2F0ZXM9bnVsbH1mdW5jdGlvbiBmKGUsdCl7Zm9yKHZhciByLGk9bi5yZXBlYXQoXCIgXCIsdCksbz0wLGE9LTEscz1cIlwiLHU9ZS5sZW5ndGg7bzx1OyktMT09PShhPWUuaW5kZXhPZihcIlxcblwiLG8pKT8ocj1lLnNsaWNlKG8pLG89dSk6KHI9ZS5zbGljZShvLGErMSksbz1hKzEpLHIubGVuZ3RoJiZcIlxcblwiIT09ciYmKHMrPWkpLHMrPXI7cmV0dXJuIHN9ZnVuY3Rpb24gZChlLHQpe3JldHVyblwiXFxuXCIrbi5yZXBlYXQoXCIgXCIsZS5pbmRlbnQqdCl9ZnVuY3Rpb24gbShlKXtyZXR1cm4gMzI9PT1lfHw5PT09ZX1mdW5jdGlvbiB5KGUpe3JldHVybiAzMjw9ZSYmZTw9MTI2fHwxNjE8PWUmJmU8PTU1Mjk1JiY4MjMyIT09ZSYmODIzMyE9PWV8fDU3MzQ0PD1lJiZlPD02NTUzMyYmNjUyNzkhPT1lfHw2NTUzNjw9ZSYmZTw9MTExNDExMX1mdW5jdGlvbiB2KGUsdCl7cmV0dXJuIHkoZSkmJjY1Mjc5IT09ZSYmNDQhPT1lJiY5MSE9PWUmJjkzIT09ZSYmMTIzIT09ZSYmMTI1IT09ZSYmNTghPT1lJiYoMzUhPT1lfHx0JiZmdW5jdGlvbihlKXtyZXR1cm4geShlKSYmIW0oZSkmJjY1Mjc5IT09ZSYmMTMhPT1lJiYxMCE9PWV9KHQpKX1mdW5jdGlvbiBfKGUpe3JldHVybi9eXFxuKiAvLnRlc3QoZSl9ZnVuY3Rpb24gZyhlLHQscixuLGkpe3ZhciBvLGEscyx1LGw9ITEsYz0hMSxoPS0xIT09bixwPS0xLGY9eSh1PWUuY2hhckNvZGVBdCgwKSkmJjY1Mjc5IT09dSYmIW0odSkmJjQ1IT09dSYmNjMhPT11JiY1OCE9PXUmJjQ0IT09dSYmOTEhPT11JiY5MyE9PXUmJjEyMyE9PXUmJjEyNSE9PXUmJjM1IT09dSYmMzghPT11JiY0MiE9PXUmJjMzIT09dSYmMTI0IT09dSYmNjEhPT11JiY2MiE9PXUmJjM5IT09dSYmMzQhPT11JiYzNyE9PXUmJjY0IT09dSYmOTYhPT11JiYhbShlLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSkpO2lmKHQpZm9yKG89MDtvPGUubGVuZ3RoO28rKyl7aWYoIXkoYT1lLmNoYXJDb2RlQXQobykpKXJldHVybiA1O3M9bz4wP2UuY2hhckNvZGVBdChvLTEpOm51bGwsZj1mJiZ2KGEscyl9ZWxzZXtmb3Iobz0wO288ZS5sZW5ndGg7bysrKXtpZigxMD09PShhPWUuY2hhckNvZGVBdChvKSkpbD0hMCxoJiYoYz1jfHxvLXAtMT5uJiZcIiBcIiE9PWVbcCsxXSxwPW8pO2Vsc2UgaWYoIXkoYSkpcmV0dXJuIDU7cz1vPjA/ZS5jaGFyQ29kZUF0KG8tMSk6bnVsbCxmPWYmJnYoYSxzKX1jPWN8fGgmJm8tcC0xPm4mJlwiIFwiIT09ZVtwKzFdfXJldHVybiBsfHxjP3I+OSYmXyhlKT81OmM/NDozOmYmJiFpKGUpPzE6Mn1mdW5jdGlvbiBiKGUsdCxyLG4pe2UuZHVtcD1mdW5jdGlvbigpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm5cIicnXCI7aWYoIWUubm9Db21wYXRNb2RlJiYtMSE9PWMuaW5kZXhPZih0KSlyZXR1cm5cIidcIit0K1wiJ1wiO3ZhciBvPWUuaW5kZW50Kk1hdGgubWF4KDEsciksYT0tMT09PWUubGluZVdpZHRoPy0xOk1hdGgubWF4KE1hdGgubWluKGUubGluZVdpZHRoLDQwKSxlLmxpbmVXaWR0aC1vKSxzPW58fGUuZmxvd0xldmVsPi0xJiZyPj1lLmZsb3dMZXZlbDtzd2l0Y2goZyh0LHMsZS5pbmRlbnQsYSwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtmb3Iocj0wLG49ZS5pbXBsaWNpdFR5cGVzLmxlbmd0aDtyPG47cis9MSlpZihlLmltcGxpY2l0VHlwZXNbcl0ucmVzb2x2ZSh0KSlyZXR1cm4hMDtyZXR1cm4hMX0oZSx0KX0pKSl7Y2FzZSAxOnJldHVybiB0O2Nhc2UgMjpyZXR1cm5cIidcIit0LnJlcGxhY2UoLycvZyxcIicnXCIpK1wiJ1wiO2Nhc2UgMzpyZXR1cm5cInxcIit4KHQsZS5pbmRlbnQpK3coZih0LG8pKTtjYXNlIDQ6cmV0dXJuXCI+XCIreCh0LGUuaW5kZW50KSt3KGYoZnVuY3Rpb24oZSx0KXt2YXIgcixuLGk9LyhcXG4rKShbXlxcbl0qKS9nLG89KHM9ZS5pbmRleE9mKFwiXFxuXCIpLHM9LTEhPT1zP3M6ZS5sZW5ndGgsaS5sYXN0SW5kZXg9cyxFKGUuc2xpY2UoMCxzKSx0KSksYT1cIlxcblwiPT09ZVswXXx8XCIgXCI9PT1lWzBdO3ZhciBzO2Zvcig7bj1pLmV4ZWMoZSk7KXt2YXIgdT1uWzFdLGw9blsyXTtyPVwiIFwiPT09bFswXSxvKz11KyhhfHxyfHxcIlwiPT09bD9cIlwiOlwiXFxuXCIpK0UobCx0KSxhPXJ9cmV0dXJuIG99KHQsYSksbykpO2Nhc2UgNTpyZXR1cm4nXCInK2Z1bmN0aW9uKGUpe2Zvcih2YXIgdCxyLG4saT1cIlwiLG89MDtvPGUubGVuZ3RoO28rKykodD1lLmNoYXJDb2RlQXQobykpPj01NTI5NiYmdDw9NTYzMTkmJihyPWUuY2hhckNvZGVBdChvKzEpKT49NTYzMjAmJnI8PTU3MzQzPyhpKz1oKDEwMjQqKHQtNTUyOTYpK3ItNTYzMjArNjU1MzYpLG8rKyk6KG49bFt0XSxpKz0hbiYmeSh0KT9lW29dOm58fGgodCkpO3JldHVybiBpfSh0KSsnXCInO2RlZmF1bHQ6dGhyb3cgbmV3IGkoXCJpbXBvc3NpYmxlIGVycm9yOiBpbnZhbGlkIHNjYWxhciBzdHlsZVwiKX19KCl9ZnVuY3Rpb24geChlLHQpe3ZhciByPV8oZSk/U3RyaW5nKHQpOlwiXCIsbj1cIlxcblwiPT09ZVtlLmxlbmd0aC0xXTtyZXR1cm4gcisobiYmKFwiXFxuXCI9PT1lW2UubGVuZ3RoLTJdfHxcIlxcblwiPT09ZSk/XCIrXCI6bj9cIlwiOlwiLVwiKStcIlxcblwifWZ1bmN0aW9uIHcoZSl7cmV0dXJuXCJcXG5cIj09PWVbZS5sZW5ndGgtMV0/ZS5zbGljZSgwLC0xKTplfWZ1bmN0aW9uIEUoZSx0KXtpZihcIlwiPT09ZXx8XCIgXCI9PT1lWzBdKXJldHVybiBlO2Zvcih2YXIgcixuLGk9LyBbXiBdL2csbz0wLGE9MCxzPTAsdT1cIlwiO3I9aS5leGVjKGUpOykocz1yLmluZGV4KS1vPnQmJihuPWE+bz9hOnMsdSs9XCJcXG5cIitlLnNsaWNlKG8sbiksbz1uKzEpLGE9cztyZXR1cm4gdSs9XCJcXG5cIixlLmxlbmd0aC1vPnQmJmE+bz91Kz1lLnNsaWNlKG8sYSkrXCJcXG5cIitlLnNsaWNlKGErMSk6dSs9ZS5zbGljZShvKSx1LnNsaWNlKDEpfWZ1bmN0aW9uIEQoZSx0LHIpe3ZhciBuLG8sYSxsLGMsaDtmb3IoYT0wLGw9KG89cj9lLmV4cGxpY2l0VHlwZXM6ZS5pbXBsaWNpdFR5cGVzKS5sZW5ndGg7YTxsO2ErPTEpaWYoKChjPW9bYV0pLmluc3RhbmNlT2Z8fGMucHJlZGljYXRlKSYmKCFjLmluc3RhbmNlT2Z8fFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0IGluc3RhbmNlb2YgYy5pbnN0YW5jZU9mKSYmKCFjLnByZWRpY2F0ZXx8Yy5wcmVkaWNhdGUodCkpKXtpZihlLnRhZz1yP2MudGFnOlwiP1wiLGMucmVwcmVzZW50KXtpZihoPWUuc3R5bGVNYXBbYy50YWddfHxjLmRlZmF1bHRTdHlsZSxcIltvYmplY3QgRnVuY3Rpb25dXCI9PT1zLmNhbGwoYy5yZXByZXNlbnQpKW49Yy5yZXByZXNlbnQodCxoKTtlbHNle2lmKCF1LmNhbGwoYy5yZXByZXNlbnQsaCkpdGhyb3cgbmV3IGkoXCIhPFwiK2MudGFnKyc+IHRhZyByZXNvbHZlciBhY2NlcHRzIG5vdCBcIicraCsnXCIgc3R5bGUnKTtuPWMucmVwcmVzZW50W2hdKHQsaCl9ZS5kdW1wPW59cmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gUyhlLHQscixuLG8sYSl7ZS50YWc9bnVsbCxlLmR1bXA9cixEKGUsciwhMSl8fEQoZSxyLCEwKTt2YXIgdT1zLmNhbGwoZS5kdW1wKTtuJiYobj1lLmZsb3dMZXZlbDwwfHxlLmZsb3dMZXZlbD50KTt2YXIgbCxjLGg9XCJbb2JqZWN0IE9iamVjdF1cIj09PXV8fFwiW29iamVjdCBBcnJheV1cIj09PXU7aWYoaCYmKGM9LTEhPT0obD1lLmR1cGxpY2F0ZXMuaW5kZXhPZihyKSkpLChudWxsIT09ZS50YWcmJlwiP1wiIT09ZS50YWd8fGN8fDIhPT1lLmluZGVudCYmdD4wKSYmKG89ITEpLGMmJmUudXNlZER1cGxpY2F0ZXNbbF0pZS5kdW1wPVwiKnJlZl9cIitsO2Vsc2V7aWYoaCYmYyYmIWUudXNlZER1cGxpY2F0ZXNbbF0mJihlLnVzZWREdXBsaWNhdGVzW2xdPSEwKSxcIltvYmplY3QgT2JqZWN0XVwiPT09dSluJiYwIT09T2JqZWN0LmtleXMoZS5kdW1wKS5sZW5ndGg/KCFmdW5jdGlvbihlLHQscixuKXt2YXIgbyxhLHMsdSxsLGMsaD1cIlwiLHA9ZS50YWcsZj1PYmplY3Qua2V5cyhyKTtpZighMD09PWUuc29ydEtleXMpZi5zb3J0KCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnNvcnRLZXlzKWYuc29ydChlLnNvcnRLZXlzKTtlbHNlIGlmKGUuc29ydEtleXMpdGhyb3cgbmV3IGkoXCJzb3J0S2V5cyBtdXN0IGJlIGEgYm9vbGVhbiBvciBhIGZ1bmN0aW9uXCIpO2ZvcihvPTAsYT1mLmxlbmd0aDtvPGE7bys9MSljPVwiXCIsbiYmMD09PW98fChjKz1kKGUsdCkpLHU9cltzPWZbb11dLFMoZSx0KzEscywhMCwhMCwhMCkmJigobD1udWxsIT09ZS50YWcmJlwiP1wiIT09ZS50YWd8fGUuZHVtcCYmZS5kdW1wLmxlbmd0aD4xMDI0KSYmKGUuZHVtcCYmMTA9PT1lLmR1bXAuY2hhckNvZGVBdCgwKT9jKz1cIj9cIjpjKz1cIj8gXCIpLGMrPWUuZHVtcCxsJiYoYys9ZChlLHQpKSxTKGUsdCsxLHUsITAsbCkmJihlLmR1bXAmJjEwPT09ZS5kdW1wLmNoYXJDb2RlQXQoMCk/Yys9XCI6XCI6Yys9XCI6IFwiLGgrPWMrPWUuZHVtcCkpO2UudGFnPXAsZS5kdW1wPWh8fFwie31cIn0oZSx0LGUuZHVtcCxvKSxjJiYoZS5kdW1wPVwiJnJlZl9cIitsK2UuZHVtcCkpOighZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbyxhLHMsdT1cIlwiLGw9ZS50YWcsYz1PYmplY3Qua2V5cyhyKTtmb3Iobj0wLGk9Yy5sZW5ndGg7bjxpO24rPTEpcz1cIlwiLDAhPT1uJiYocys9XCIsIFwiKSxlLmNvbmRlbnNlRmxvdyYmKHMrPSdcIicpLGE9cltvPWNbbl1dLFMoZSx0LG8sITEsITEpJiYoZS5kdW1wLmxlbmd0aD4xMDI0JiYocys9XCI/IFwiKSxzKz1lLmR1bXArKGUuY29uZGVuc2VGbG93PydcIic6XCJcIikrXCI6XCIrKGUuY29uZGVuc2VGbG93P1wiXCI6XCIgXCIpLFMoZSx0LGEsITEsITEpJiYodSs9cys9ZS5kdW1wKSk7ZS50YWc9bCxlLmR1bXA9XCJ7XCIrdStcIn1cIn0oZSx0LGUuZHVtcCksYyYmKGUuZHVtcD1cIiZyZWZfXCIrbCtcIiBcIitlLmR1bXApKTtlbHNlIGlmKFwiW29iamVjdCBBcnJheV1cIj09PXUpe3ZhciBwPWUubm9BcnJheUluZGVudCYmdD4wP3QtMTp0O24mJjAhPT1lLmR1bXAubGVuZ3RoPyghZnVuY3Rpb24oZSx0LHIsbil7dmFyIGksbyxhPVwiXCIscz1lLnRhZztmb3IoaT0wLG89ci5sZW5ndGg7aTxvO2krPTEpUyhlLHQrMSxyW2ldLCEwLCEwKSYmKG4mJjA9PT1pfHwoYSs9ZChlLHQpKSxlLmR1bXAmJjEwPT09ZS5kdW1wLmNoYXJDb2RlQXQoMCk/YSs9XCItXCI6YSs9XCItIFwiLGErPWUuZHVtcCk7ZS50YWc9cyxlLmR1bXA9YXx8XCJbXVwifShlLHAsZS5kdW1wLG8pLGMmJihlLmR1bXA9XCImcmVmX1wiK2wrZS5kdW1wKSk6KCFmdW5jdGlvbihlLHQscil7dmFyIG4saSxvPVwiXCIsYT1lLnRhZztmb3Iobj0wLGk9ci5sZW5ndGg7bjxpO24rPTEpUyhlLHQscltuXSwhMSwhMSkmJigwIT09biYmKG8rPVwiLFwiKyhlLmNvbmRlbnNlRmxvdz9cIlwiOlwiIFwiKSksbys9ZS5kdW1wKTtlLnRhZz1hLGUuZHVtcD1cIltcIitvK1wiXVwifShlLHAsZS5kdW1wKSxjJiYoZS5kdW1wPVwiJnJlZl9cIitsK1wiIFwiK2UuZHVtcCkpfWVsc2V7aWYoXCJbb2JqZWN0IFN0cmluZ11cIiE9PXUpe2lmKGUuc2tpcEludmFsaWQpcmV0dXJuITE7dGhyb3cgbmV3IGkoXCJ1bmFjY2VwdGFibGUga2luZCBvZiBhbiBvYmplY3QgdG8gZHVtcCBcIit1KX1cIj9cIiE9PWUudGFnJiZiKGUsZS5kdW1wLHQsYSl9bnVsbCE9PWUudGFnJiZcIj9cIiE9PWUudGFnJiYoZS5kdW1wPVwiITxcIitlLnRhZytcIj4gXCIrZS5kdW1wKX1yZXR1cm4hMH1mdW5jdGlvbiBDKGUsdCl7dmFyIHIsbixpPVtdLG89W107Zm9yKGZ1bmN0aW9uIGUodCxyLG4pe3ZhciBpLG8sYTtpZihudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQpaWYoLTEhPT0obz1yLmluZGV4T2YodCkpKS0xPT09bi5pbmRleE9mKG8pJiZuLnB1c2gobyk7ZWxzZSBpZihyLnB1c2godCksQXJyYXkuaXNBcnJheSh0KSlmb3Iobz0wLGE9dC5sZW5ndGg7bzxhO28rPTEpZSh0W29dLHIsbik7ZWxzZSBmb3IoaT1PYmplY3Qua2V5cyh0KSxvPTAsYT1pLmxlbmd0aDtvPGE7bys9MSllKHRbaVtvXV0scixuKX0oZSxpLG8pLHI9MCxuPW8ubGVuZ3RoO3I8bjtyKz0xKXQuZHVwbGljYXRlcy5wdXNoKGlbb1tyXV0pO3QudXNlZER1cGxpY2F0ZXM9bmV3IEFycmF5KG4pfWZ1bmN0aW9uIEEoZSx0KXt2YXIgcj1uZXcgcCh0PXR8fHt9KTtyZXR1cm4gci5ub1JlZnN8fEMoZSxyKSxTKHIsMCxlLCEwLCEwKT9yLmR1bXArXCJcXG5cIjpcIlwifWUuZXhwb3J0cy5kdW1wPUEsZS5leHBvcnRzLnNhZmVEdW1wPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEEoZSxuLmV4dGVuZCh7c2NoZW1hOmF9LHQpKX19LGZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyKDMxKSxyKDMyKSxyKDMzKSxyKDY0KSxyKDE5KSxyKDY1KSxyKDIwKSxyKDY4KSxyKDkyKSxyKDE0NCkscigyMikscig5NCkscigyMyk7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSksbz10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxhPXRoaXMmJnRoaXMuX19yZWFkfHxmdW5jdGlvbihlLHQpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdO2lmKCFyKXJldHVybiBlO3ZhciBuLGksbz1yLmNhbGwoZSksYT1bXTt0cnl7Zm9yKDsodm9pZCAwPT09dHx8dC0tID4wKSYmIShuPW8ubmV4dCgpKS5kb25lOylhLnB1c2gobi52YWx1ZSl9Y2F0Y2goZSl7aT17ZXJyb3I6ZX19ZmluYWxseXt0cnl7biYmIW4uZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZihpKXRocm93IGkuZXJyb3J9fXJldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1yKDkxKSx1PXIoMSksbD1yKDE4MyksYz1yKDApLGg9cig3KSxwPXIoOTUpLGY9cig2OSksZD1yKDMpLG09cigzMDUpLHk9cigzMDYpLHY9cigzMDcpLF89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LHIpe3ZvaWQgMD09PXImJihyPSExKTt2YXIgbj1lLmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4uX2hhc0RlY2xhcmF0aW9uPSExLG4uX2RvY1R5cGVOYW1lPVwiXCIsbi5faGFzRG9jdW1lbnRFbGVtZW50PSExLG4uX2N1cnJlbnRFbGVtZW50U2VyaWFsaXplZD0hMSxuLl9vcGVuVGFncz1bXSxuLl9lbmRlZD0hMSxuLl9mcmFnbWVudD1yLG4uX29wdGlvbnM9dS5hcHBseURlZmF1bHRzKHR8fHt9LHMuRGVmYXVsdFhNTEJ1aWxkZXJDQk9wdGlvbnMpLG4uX2J1aWxkZXJPcHRpb25zPXtkZWZhdWx0TmFtZXNwYWNlOm4uX29wdGlvbnMuZGVmYXVsdE5hbWVzcGFjZSxuYW1lc3BhY2VBbGlhczpuLl9vcHRpb25zLm5hbWVzcGFjZUFsaWFzfSxcImpzb25cIj09PW4uX29wdGlvbnMuZm9ybWF0P24uX3dyaXRlcj1uZXcgeS5KU09OQ0JXcml0ZXIobi5fb3B0aW9ucyk6XCJ5YW1sXCI9PT1uLl9vcHRpb25zLmZvcm1hdD9uLl93cml0ZXI9bmV3IHYuWUFNTENCV3JpdGVyKG4uX29wdGlvbnMpOm4uX3dyaXRlcj1uZXcgbS5YTUxDQldyaXRlcihuLl9vcHRpb25zKSx2b2lkIDAhPT1uLl9vcHRpb25zLmRhdGEmJm4ub24oXCJkYXRhXCIsbi5fb3B0aW9ucy5kYXRhKSx2b2lkIDAhPT1uLl9vcHRpb25zLmVuZCYmbi5vbihcImVuZFwiLG4uX29wdGlvbnMuZW5kKSx2b2lkIDAhPT1uLl9vcHRpb25zLmVycm9yJiZuLm9uKFwiZXJyb3JcIixuLl9vcHRpb25zLmVycm9yKSxuLl9wcmVmaXhNYXA9bmV3IHAuTmFtZXNwYWNlUHJlZml4TWFwLG4uX3ByZWZpeE1hcC5zZXQoXCJ4bWxcIixoLm5hbWVzcGFjZS5YTUwpLG4uX3ByZWZpeEluZGV4PXt2YWx1ZToxfSxuLl9wdXNoKG4uX3dyaXRlci5mcm9udE1hdHRlcigpKSxufXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuZWxlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpO2lmKHUuaXNPYmplY3QoZSl8fHUuaXNTdHJpbmcoZSkmJigvXlxccyo8Ly50ZXN0KGUpfHwvXlxccypbXFx7XFxbXS8udGVzdChlKXx8L14oXFxzKnwoIy4qKXwoJS4qKSkqLS0tLy50ZXN0KGUpKSl7dmFyIGE9bC5mcmFnbWVudCgpLnNldCh0aGlzLl9vcHRpb25zKTt0cnl7YS5lbGUoZSl9Y2F0Y2goZSl7cmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpc310cnl7Zm9yKHZhciBzPW8oYS5ub2RlLmNoaWxkTm9kZXMpLGM9cy5uZXh0KCk7IWMuZG9uZTtjPXMubmV4dCgpKXt2YXIgaD1jLnZhbHVlO3RoaXMuX2Zyb21Ob2RlKGgpfX1jYXRjaChlKXtuPXtlcnJvcjplfX1maW5hbGx5e3RyeXtjJiYhYy5kb25lJiYoaT1zLnJldHVybikmJmkuY2FsbChzKX1maW5hbGx5e2lmKG4pdGhyb3cgbi5lcnJvcn19cmV0dXJuIHRoaXN9aWYodGhpcy5fc2VyaWFsaXplT3BlblRhZyghMCksIXRoaXMuX2ZyYWdtZW50JiZ0aGlzLl9oYXNEb2N1bWVudEVsZW1lbnQmJjA9PT10aGlzLl93cml0ZXIubGV2ZWwpcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiRG9jdW1lbnQgY2Fubm90IGhhdmUgbXVsdGlwbGUgZG9jdW1lbnQgZWxlbWVudCBub2Rlcy5cIikpLHRoaXM7dHJ5e3RoaXMuX2N1cnJlbnRFbGVtZW50PWwuZnJhZ21lbnQodGhpcy5fYnVpbGRlck9wdGlvbnMpLmVsZShlLHQscil9Y2F0Y2goZSl7cmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpc31yZXR1cm4gdGhpcy5fZnJhZ21lbnR8fHRoaXMuX2hhc0RvY3VtZW50RWxlbWVudHx8XCJcIj09PXRoaXMuX2RvY1R5cGVOYW1lfHx0aGlzLl9jdXJyZW50RWxlbWVudC5ub2RlLl9xdWFsaWZpZWROYW1lPT09dGhpcy5fZG9jVHlwZU5hbWU/KHRoaXMuX2N1cnJlbnRFbGVtZW50U2VyaWFsaXplZD0hMSx0aGlzLl9mcmFnbWVudHx8KHRoaXMuX2hhc0RvY3VtZW50RWxlbWVudD0hMCksdGhpcyk6KHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiRG9jdW1lbnQgZWxlbWVudCBuYW1lIGRvZXMgbm90IG1hdGNoIERvY1R5cGUgZGVjbGFyYXRpb24gbmFtZS5cIikpLHRoaXMpfSx0LnByb3RvdHlwZS5hdHQ9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXRoaXMuX2N1cnJlbnRFbGVtZW50KXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgYW4gYXR0cmlidXRlIG5vZGUgYXMgY2hpbGQgb2YgYSBkb2N1bWVudCBub2RlLlwiKSksdGhpczt0cnl7dGhpcy5fY3VycmVudEVsZW1lbnQuYXR0KGUsdCxyKX1jYXRjaChlKXtyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixlKSx0aGlzfXJldHVybiB0aGlzfSx0LnByb3RvdHlwZS5jb209ZnVuY3Rpb24oZSl7dmFyIHQ7dGhpcy5fc2VyaWFsaXplT3BlblRhZyghMCk7dHJ5e3Q9bC5mcmFnbWVudCh0aGlzLl9idWlsZGVyT3B0aW9ucykuY29tKGUpLmZpcnN0KCkubm9kZX1jYXRjaChlKXtyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixlKSx0aGlzfXJldHVybiF0aGlzLl9vcHRpb25zLndlbGxGb3JtZWR8fGMueG1sX2lzTGVnYWxDaGFyKHQuZGF0YSkmJi0xPT09dC5kYXRhLmluZGV4T2YoXCItLVwiKSYmIXQuZGF0YS5lbmRzV2l0aChcIi1cIik/KHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmNvbW1lbnQodC5kYXRhKSksdGhpcyk6KHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiQ29tbWVudCBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSksdGhpcyl9LHQucHJvdG90eXBlLnR4dD1mdW5jdGlvbihlKXtpZighdGhpcy5fZnJhZ21lbnQmJnZvaWQgMD09PXRoaXMuX2N1cnJlbnRFbGVtZW50KXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgYSB0ZXh0IG5vZGUgYXMgY2hpbGQgb2YgYSBkb2N1bWVudCBub2RlLlwiKSksdGhpczt2YXIgdDt0aGlzLl9zZXJpYWxpemVPcGVuVGFnKCEwKTt0cnl7dD1sLmZyYWdtZW50KHRoaXMuX2J1aWxkZXJPcHRpb25zKS50eHQoZSkuZmlyc3QoKS5ub2RlfWNhdGNoKGUpe3JldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLGUpLHRoaXN9aWYodGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkJiYhYy54bWxfaXNMZWdhbENoYXIodC5kYXRhKSlyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJUZXh0IGRhdGEgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKSx0aGlzO3ZhciByPXQuZGF0YS5yZXBsYWNlKC8oPyEmKGx0fGd0fGFtcHxhcG9zfHF1b3QpOykmL2csXCImYW1wO1wiKS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoLz4vZyxcIiZndDtcIik7cmV0dXJuIHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLnRleHQocikpLHRoaXN9LHQucHJvdG90eXBlLmlucz1mdW5jdGlvbihlLHQpe3ZhciByO3ZvaWQgMD09PXQmJih0PVwiXCIpLHRoaXMuX3NlcmlhbGl6ZU9wZW5UYWcoITApO3RyeXtyPWwuZnJhZ21lbnQodGhpcy5fYnVpbGRlck9wdGlvbnMpLmlucyhlLHQpLmZpcnN0KCkubm9kZX1jYXRjaChlKXtyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixlKSx0aGlzfXJldHVybiB0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQmJigtMSE9PXIudGFyZ2V0LmluZGV4T2YoXCI6XCIpfHwvXnhtbCQvaS50ZXN0KHIudGFyZ2V0KSk/KHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiUHJvY2Vzc2luZyBpbnN0cnVjdGlvbiB0YXJnZXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKSx0aGlzKTp0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQmJiFjLnhtbF9pc0xlZ2FsQ2hhcihyLmRhdGEpPyh0aGlzLmVtaXQoXCJlcnJvclwiLEVycm9yKFwiUHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBkYXRhIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSksdGhpcyk6KHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmluc3RydWN0aW9uKHIudGFyZ2V0LHIuZGF0YSkpLHRoaXMpfSx0LnByb3RvdHlwZS5kYXQ9ZnVuY3Rpb24oZSl7dmFyIHQ7dGhpcy5fc2VyaWFsaXplT3BlblRhZyghMCk7dHJ5e3Q9bC5mcmFnbWVudCh0aGlzLl9idWlsZGVyT3B0aW9ucykuZGF0KGUpLmZpcnN0KCkubm9kZX1jYXRjaChlKXtyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixlKSx0aGlzfXJldHVybiB0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5jZGF0YSh0LmRhdGEpKSx0aGlzfSx0LnByb3RvdHlwZS5kZWM9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXt2ZXJzaW9uOlwiMS4wXCJ9KSx0aGlzLl9mcmFnbWVudD8odGhpcy5lbWl0KFwiZXJyb3JcIixFcnJvcihcIkNhbm5vdCBpbnNlcnQgYW4gWE1MIGRlY2xhcmF0aW9uIGludG8gYSBkb2N1bWVudCBmcmFnbWVudC5cIikpLHRoaXMpOnRoaXMuX2hhc0RlY2xhcmF0aW9uPyh0aGlzLmVtaXQoXCJlcnJvclwiLEVycm9yKFwiWE1MIGRlY2xhcmF0aW9uIGlzIGFscmVhZHkgaW5zZXJ0ZWQuXCIpKSx0aGlzKToodGhpcy5fcHVzaCh0aGlzLl93cml0ZXIuZGVjbGFyYXRpb24oZS52ZXJzaW9ufHxcIjEuMFwiLGUuZW5jb2RpbmcsZS5zdGFuZGFsb25lKSksdGhpcy5faGFzRGVjbGFyYXRpb249ITAsdGhpcyl9LHQucHJvdG90eXBlLmR0ZD1mdW5jdGlvbihlKXtpZih0aGlzLl9mcmFnbWVudClyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixFcnJvcihcIkNhbm5vdCBpbnNlcnQgYSBEb2NUeXBlIGRlY2xhcmF0aW9uIGludG8gYSBkb2N1bWVudCBmcmFnbWVudC5cIikpLHRoaXM7aWYoXCJcIiE9PXRoaXMuX2RvY1R5cGVOYW1lKXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkRvY1R5cGUgZGVjbGFyYXRpb24gaXMgYWxyZWFkeSBpbnNlcnRlZC5cIikpLHRoaXM7aWYodGhpcy5faGFzRG9jdW1lbnRFbGVtZW50KXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkNhbm5vdCBpbnNlcnQgRG9jVHlwZSBkZWNsYXJhdGlvbiBhZnRlciBkb2N1bWVudCBlbGVtZW50LlwiKSksdGhpczt2YXIgdDt0cnl7dD1sLmNyZWF0ZSgpLmR0ZChlKS5maXJzdCgpLm5vZGV9Y2F0Y2goZSl7cmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsZSksdGhpc31yZXR1cm4gdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkJiYhYy54bWxfaXNQdWJpZENoYXIodC5wdWJsaWNJZCk/KHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiRG9jVHlwZSBwdWJsaWMgaWRlbnRpZmllciBkb2VzIG5vdCBtYXRjaCBQdWJpZENoYXIgY29uc3RydWN0ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKSx0aGlzKTp0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQmJighYy54bWxfaXNMZWdhbENoYXIodC5zeXN0ZW1JZCl8fC0xIT09dC5zeXN0ZW1JZC5pbmRleE9mKCdcIicpJiYtMSE9PXQuc3lzdGVtSWQuaW5kZXhPZihcIidcIikpPyh0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkRvY1R5cGUgc3lzdGVtIGlkZW50aWZpZXIgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKSx0aGlzKToodGhpcy5fZG9jVHlwZU5hbWU9ZS5uYW1lLHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmRvY1R5cGUoZS5uYW1lLHQucHVibGljSWQsdC5zeXN0ZW1JZCkpLHRoaXMpfSx0LnByb3RvdHlwZS5pbXBvcnQ9ZnVuY3Rpb24oZSl7dmFyIHQscixuPWwuZnJhZ21lbnQoKS5zZXQodGhpcy5fb3B0aW9ucyk7dHJ5e24uaW1wb3J0KGUpfWNhdGNoKGUpe3JldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLGUpLHRoaXN9dHJ5e2Zvcih2YXIgaT1vKG4ubm9kZS5jaGlsZE5vZGVzKSxhPWkubmV4dCgpOyFhLmRvbmU7YT1pLm5leHQoKSl7dmFyIHM9YS52YWx1ZTt0aGlzLl9mcm9tTm9kZShzKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKHI9aS5yZXR1cm4pJiZyLmNhbGwoaSl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXJldHVybiB0aGlzfSx0LnByb3RvdHlwZS51cD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXJpYWxpemVPcGVuVGFnKCExKSx0aGlzLl9zZXJpYWxpemVDbG9zZVRhZygpLHRoaXN9LHQucHJvdG90eXBlLmVuZD1mdW5jdGlvbigpe2Zvcih0aGlzLl9zZXJpYWxpemVPcGVuVGFnKCExKTt0aGlzLl9vcGVuVGFncy5sZW5ndGg+MDspdGhpcy5fc2VyaWFsaXplQ2xvc2VUYWcoKTtyZXR1cm4gdGhpcy5fcHVzaChudWxsKSx0aGlzfSx0LnByb3RvdHlwZS5fc2VyaWFsaXplT3BlblRhZz1mdW5jdGlvbihlKXtpZighdGhpcy5fY3VycmVudEVsZW1lbnRTZXJpYWxpemVkJiZ2b2lkIDAhPT10aGlzLl9jdXJyZW50RWxlbWVudCl7dmFyIHI9dGhpcy5fY3VycmVudEVsZW1lbnQubm9kZTtpZighdGhpcy5fb3B0aW9ucy53ZWxsRm9ybWVkfHwtMT09PXIubG9jYWxOYW1lLmluZGV4T2YoXCI6XCIpJiZjLnhtbF9pc05hbWUoci5sb2NhbE5hbWUpKXt2YXIgbj1cIlwiLGk9ITEsbz10aGlzLl9wcmVmaXhNYXAuY29weSgpLGE9e30scz10aGlzLl9yZWNvcmROYW1lc3BhY2VJbmZvcm1hdGlvbihyLG8sYSksdT0wPT09dGhpcy5fb3BlblRhZ3MubGVuZ3RoP251bGw6dGhpcy5fb3BlblRhZ3NbdGhpcy5fb3BlblRhZ3MubGVuZ3RoLTFdWzFdLGw9ci5uYW1lc3BhY2VVUkk7aWYobnVsbD09PWwmJihsPXUpLHU9PT1sKW51bGwhPT1zJiYoaT0hMCksbj1sPT09aC5uYW1lc3BhY2UuWE1MP1wieG1sOlwiK3IubG9jYWxOYW1lOnIubG9jYWxOYW1lLHRoaXMuX3dyaXRlci5iZWdpbkVsZW1lbnQobiksdGhpcy5fcHVzaCh0aGlzLl93cml0ZXIub3BlblRhZ0JlZ2luKG4pKTtlbHNle3ZhciBwPXIucHJlZml4LGY9bnVsbDtpZihudWxsPT09cCYmbD09PXN8fChmPW8uZ2V0KHAsbCkpLFwieG1sbnNcIj09PXApe2lmKHRoaXMuX29wdGlvbnMud2VsbEZvcm1lZClyZXR1cm4gdm9pZCB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkFuIGVsZW1lbnQgY2Fubm90IGhhdmUgdGhlICd4bWxucycgcHJlZml4ICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKTtmPXB9bnVsbCE9PWY/KG49ZitcIjpcIityLmxvY2FsTmFtZSxudWxsIT09cyYmcyE9PWgubmFtZXNwYWNlLlhNTCYmKHU9c3x8bnVsbCksdGhpcy5fd3JpdGVyLmJlZ2luRWxlbWVudChuKSx0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5vcGVuVGFnQmVnaW4obikpKTpudWxsIT09cD8ocCBpbiBhJiYocD10aGlzLl9nZW5lcmF0ZVByZWZpeChsLG8sdGhpcy5fcHJlZml4SW5kZXgpKSxvLnNldChwLGwpLG4rPXArXCI6XCIrci5sb2NhbE5hbWUsdGhpcy5fd3JpdGVyLmJlZ2luRWxlbWVudChuKSx0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5vcGVuVGFnQmVnaW4obikpLHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmF0dHJpYnV0ZShcInhtbG5zOlwiK3AsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUobCx0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQpKSksbnVsbCE9PXMmJih1PXN8fG51bGwpKTpudWxsPT09c3x8bnVsbCE9PXMmJnMhPT1sPyhpPSEwLG4rPXIubG9jYWxOYW1lLHU9bCx0aGlzLl93cml0ZXIuYmVnaW5FbGVtZW50KG4pLHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLm9wZW5UYWdCZWdpbihuKSksdGhpcy5fcHVzaCh0aGlzLl93cml0ZXIuYXR0cmlidXRlKFwieG1sbnNcIix0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZShsLHRoaXMuX29wdGlvbnMud2VsbEZvcm1lZCkpKSk6KG4rPXIubG9jYWxOYW1lLHU9bCx0aGlzLl93cml0ZXIuYmVnaW5FbGVtZW50KG4pLHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLm9wZW5UYWdCZWdpbihuKSkpfXRoaXMuX3NlcmlhbGl6ZUF0dHJpYnV0ZXMocixvLHRoaXMuX3ByZWZpeEluZGV4LGEsaSx0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQpO3ZhciBkPWw9PT1oLm5hbWVzcGFjZS5IVE1MO2QmJiFlJiZ0Ll9Wb2lkRWxlbWVudE5hbWVzLmhhcyhyLmxvY2FsTmFtZSk/KHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLm9wZW5UYWdFbmQobiwhMCwhMCkpLHRoaXMuX3dyaXRlci5lbmRFbGVtZW50KG4pKTpkfHxlP3RoaXMuX3B1c2godGhpcy5fd3JpdGVyLm9wZW5UYWdFbmQobiwhMSwhMSkpOih0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5vcGVuVGFnRW5kKG4sITAsITEpKSx0aGlzLl93cml0ZXIuZW5kRWxlbWVudChuKSksdGhpcy5fY3VycmVudEVsZW1lbnRTZXJpYWxpemVkPSEwLHRoaXMuX29wZW5UYWdzLnB1c2goW24sdSx0aGlzLl9wcmVmaXhNYXAsZV0pLHRoaXMuX2lzUHJlZml4TWFwTW9kaWZpZWQodGhpcy5fcHJlZml4TWFwLG8pJiYodGhpcy5fcHJlZml4TWFwPW8pLHRoaXMuX3dyaXRlci5sZXZlbCsrfWVsc2UgdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJOb2RlIGxvY2FsIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKX19LHQucHJvdG90eXBlLl9zZXJpYWxpemVDbG9zZVRhZz1mdW5jdGlvbigpe3RoaXMuX3dyaXRlci5sZXZlbC0tO3ZhciBlPXRoaXMuX29wZW5UYWdzLnBvcCgpO2lmKHZvaWQgMCE9PWUpe3ZhciB0PWEoZSw0KSxyPXRbMF0sbj0odFsxXSx0WzJdKSxpPXRbM107dGhpcy5fcHJlZml4TWFwPW4saSYmKHRoaXMuX3B1c2godGhpcy5fd3JpdGVyLmNsb3NlVGFnKHIpKSx0aGlzLl93cml0ZXIuZW5kRWxlbWVudChyKSl9ZWxzZSB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkxhc3QgZWxlbWVudCBpcyB1bmRlZmluZWQuXCIpKX0sdC5wcm90b3R5cGUuX3B1c2g9ZnVuY3Rpb24oZSl7bnVsbD09PWU/KHRoaXMuX2VuZGVkPSEwLHRoaXMuZW1pdChcImVuZFwiKSk6dGhpcy5fZW5kZWQ/dGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJDYW5ub3QgcHVzaCB0byBlbmRlZCBzdHJlYW0uXCIpKTowIT09ZS5sZW5ndGgmJih0aGlzLl93cml0ZXIuaGFzRGF0YT0hMCx0aGlzLmVtaXQoXCJkYXRhXCIsZSx0aGlzLl93cml0ZXIubGV2ZWwpKX0sdC5wcm90b3R5cGUuX2Zyb21Ob2RlPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpO2lmKGQuR3VhcmQuaXNFbGVtZW50Tm9kZShlKSl7dmFyIGE9ZS5wcmVmaXg/ZS5wcmVmaXgrXCI6XCIrZS5sb2NhbE5hbWU6ZS5sb2NhbE5hbWU7bnVsbCE9PWUubmFtZXNwYWNlVVJJP3RoaXMuZWxlKGUubmFtZXNwYWNlVVJJLGEpOnRoaXMuZWxlKGEpO3RyeXtmb3IodmFyIHM9byhlLmF0dHJpYnV0ZXMpLHU9cy5uZXh0KCk7IXUuZG9uZTt1PXMubmV4dCgpKXt2YXIgbD11LnZhbHVlLGM9bC5wcmVmaXg/bC5wcmVmaXgrXCI6XCIrbC5sb2NhbE5hbWU6bC5sb2NhbE5hbWU7bnVsbCE9PWwubmFtZXNwYWNlVVJJP3RoaXMuYXR0KGwubmFtZXNwYWNlVVJJLGMsbC52YWx1ZSk6dGhpcy5hdHQoYyxsLnZhbHVlKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7dSYmIXUuZG9uZSYmKHI9cy5yZXR1cm4pJiZyLmNhbGwocyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fXRyeXtmb3IodmFyIGg9byhlLmNoaWxkTm9kZXMpLHA9aC5uZXh0KCk7IXAuZG9uZTtwPWgubmV4dCgpKXt2YXIgZj1wLnZhbHVlO3RoaXMuX2Zyb21Ob2RlKGYpfX1jYXRjaChlKXtuPXtlcnJvcjplfX1maW5hbGx5e3RyeXtwJiYhcC5kb25lJiYoaT1oLnJldHVybikmJmkuY2FsbChoKX1maW5hbGx5e2lmKG4pdGhyb3cgbi5lcnJvcn19dGhpcy51cCgpfWVsc2UgZC5HdWFyZC5pc0V4Y2x1c2l2ZVRleHROb2RlKGUpJiZlLmRhdGE/dGhpcy50eHQoZS5kYXRhKTpkLkd1YXJkLmlzQ29tbWVudE5vZGUoZSk/dGhpcy5jb20oZS5kYXRhKTpkLkd1YXJkLmlzQ0RBVEFTZWN0aW9uTm9kZShlKT90aGlzLmRhdChlLmRhdGEpOmQuR3VhcmQuaXNQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25Ob2RlKGUpJiZ0aGlzLmlucyhlLnRhcmdldCxlLmRhdGEpfSx0LnByb3RvdHlwZS5fc2VyaWFsaXplQXR0cmlidXRlcz1mdW5jdGlvbihlLHQscixuLGksYSl7dmFyIHMsdSxsPWE/bmV3IGYuTG9jYWxOYW1lU2V0OnZvaWQgMDt0cnl7Zm9yKHZhciBwPW8oZS5hdHRyaWJ1dGVzKSxkPXAubmV4dCgpOyFkLmRvbmU7ZD1wLm5leHQoKSl7dmFyIG09ZC52YWx1ZTtpZihhfHxpfHxudWxsIT09bS5uYW1lc3BhY2VVUkkpe2lmKGEmJmwmJmwuaGFzKG0ubmFtZXNwYWNlVVJJLG0ubG9jYWxOYW1lKSlyZXR1cm4gdm9pZCB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkVsZW1lbnQgY29udGFpbnMgZHVwbGljYXRlIGF0dHJpYnV0ZXMgKHdlbGwtZm9ybWVkIHJlcXVpcmVkKS5cIikpO2EmJmwmJmwuc2V0KG0ubmFtZXNwYWNlVVJJLG0ubG9jYWxOYW1lKTt2YXIgeT1tLm5hbWVzcGFjZVVSSSx2PW51bGw7aWYobnVsbCE9PXkpaWYodj10LmdldChtLnByZWZpeCx5KSx5PT09aC5uYW1lc3BhY2UuWE1MTlMpe2lmKG0udmFsdWU9PT1oLm5hbWVzcGFjZS5YTUx8fG51bGw9PT1tLnByZWZpeCYmaXx8bnVsbCE9PW0ucHJlZml4JiYoIShtLmxvY2FsTmFtZSBpbiBuKXx8blttLmxvY2FsTmFtZV0hPT1tLnZhbHVlKSYmdC5oYXMobS5sb2NhbE5hbWUsbS52YWx1ZSkpY29udGludWU7aWYoYSYmbS52YWx1ZT09PWgubmFtZXNwYWNlLlhNTE5TKXJldHVybiB2b2lkIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiWE1MTlMgbmFtZXNwYWNlIGlzIHJlc2VydmVkICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKTtpZihhJiZcIlwiPT09bS52YWx1ZSlyZXR1cm4gdm9pZCB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIk5hbWVzcGFjZSBwcmVmaXggZGVjbGFyYXRpb25zIGNhbm5vdCBiZSB1c2VkIHRvIHVuZGVjbGFyZSBhIG5hbWVzcGFjZSAod2VsbC1mb3JtZWQgcmVxdWlyZWQpLlwiKSk7XCJ4bWxuc1wiPT09bS5wcmVmaXgmJih2PVwieG1sbnNcIil9ZWxzZSBudWxsPT09diYmKHY9bnVsbD09PW0ucHJlZml4fHx0Lmhhc1ByZWZpeChtLnByZWZpeCkmJiF0LmhhcyhtLnByZWZpeCx5KT90aGlzLl9nZW5lcmF0ZVByZWZpeCh5LHQscik6bS5wcmVmaXgsdGhpcy5fcHVzaCh0aGlzLl93cml0ZXIuYXR0cmlidXRlKFwieG1sbnM6XCIrdix0aGlzLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZSh5LHRoaXMuX29wdGlvbnMud2VsbEZvcm1lZCkpKSk7aWYoYSYmKC0xIT09bS5sb2NhbE5hbWUuaW5kZXhPZihcIjpcIil8fCFjLnhtbF9pc05hbWUobS5sb2NhbE5hbWUpfHxcInhtbG5zXCI9PT1tLmxvY2FsTmFtZSYmbnVsbD09PXkpKXJldHVybiB2b2lkIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiQXR0cmlidXRlIGxvY2FsIG5hbWUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzICh3ZWxsLWZvcm1lZCByZXF1aXJlZCkuXCIpKTt0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5hdHRyaWJ1dGUoKG51bGwhPT12P3YrXCI6XCI6XCJcIikrbS5sb2NhbE5hbWUsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUobS52YWx1ZSx0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQpKSl9ZWxzZSB0aGlzLl9wdXNoKHRoaXMuX3dyaXRlci5hdHRyaWJ1dGUobS5sb2NhbE5hbWUsdGhpcy5fc2VyaWFsaXplQXR0cmlidXRlVmFsdWUobS52YWx1ZSx0aGlzLl9vcHRpb25zLndlbGxGb3JtZWQpKSl9fWNhdGNoKGUpe3M9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2QmJiFkLmRvbmUmJih1PXAucmV0dXJuKSYmdS5jYWxsKHApfWZpbmFsbHl7aWYocyl0aHJvdyBzLmVycm9yfX19LHQucHJvdG90eXBlLl9zZXJpYWxpemVBdHRyaWJ1dGVWYWx1ZT1mdW5jdGlvbihlLHQpe3JldHVybiB0JiZudWxsIT09ZSYmIWMueG1sX2lzTGVnYWxDaGFyKGUpPyh0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVycyBpbiBhdHRyaWJ1dGUgdmFsdWUuXCIpKSxcIlwiKTpudWxsPT09ZT9cIlwiOmUucmVwbGFjZSgvKD8hJihsdHxndHxhbXB8YXBvc3xxdW90KTspJi9nLFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csXCImZ3Q7XCIpLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIil9LHQucHJvdG90eXBlLl9yZWNvcmROYW1lc3BhY2VJbmZvcm1hdGlvbj1mdW5jdGlvbihlLHQscil7dmFyIG4saSxhPW51bGw7dHJ5e2Zvcih2YXIgcz1vKGUuYXR0cmlidXRlcyksdT1zLm5leHQoKTshdS5kb25lO3U9cy5uZXh0KCkpe3ZhciBsPXUudmFsdWUsYz1sLm5hbWVzcGFjZVVSSSxwPWwucHJlZml4O2lmKGM9PT1oLm5hbWVzcGFjZS5YTUxOUyl7aWYobnVsbD09PXApe2E9bC52YWx1ZTtjb250aW51ZX12YXIgZj1sLmxvY2FsTmFtZSxkPWwudmFsdWU7aWYoZD09PWgubmFtZXNwYWNlLlhNTCljb250aW51ZTtpZihcIlwiPT09ZCYmKGQ9bnVsbCksdC5oYXMoZixkKSljb250aW51ZTt0LnNldChmLGQpLHJbZl09ZHx8XCJcIn19fWNhdGNoKGUpe249e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3UmJiF1LmRvbmUmJihpPXMucmV0dXJuKSYmaS5jYWxsKHMpfWZpbmFsbHl7aWYobil0aHJvdyBuLmVycm9yfX1yZXR1cm4gYX0sdC5wcm90b3R5cGUuX2dlbmVyYXRlUHJlZml4PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1cIm5zXCIrci52YWx1ZTtyZXR1cm4gci52YWx1ZSsrLHQuc2V0KG4sZSksbn0sdC5wcm90b3R5cGUuX2lzUHJlZml4TWFwTW9kaWZpZWQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLl9pdGVtcyxuPXQuX2l0ZW1zLGk9ZS5fbnVsbEl0ZW1zLG89dC5fbnVsbEl0ZW1zO2Zvcih2YXIgYSBpbiBuKXt2YXIgcz1yW2FdO2lmKHZvaWQgMD09PXMpcmV0dXJuITA7dmFyIHU9blthXTtpZihzLmxlbmd0aCE9PXUubGVuZ3RoKXJldHVybiEwO2Zvcih2YXIgbD0wO2w8cy5sZW5ndGg7bCsrKWlmKHNbbF0hPT11W2xdKXJldHVybiEwfWlmKGkubGVuZ3RoIT09by5sZW5ndGgpcmV0dXJuITA7Zm9yKGw9MDtsPGkubGVuZ3RoO2wrKylpZihpW2xdIT09b1tsXSlyZXR1cm4hMDtyZXR1cm4hMX0sdC5fVm9pZEVsZW1lbnROYW1lcz1uZXcgU2V0KFtcImFyZWFcIixcImJhc2VcIixcImJhc2Vmb250XCIsXCJiZ3NvdW5kXCIsXCJiclwiLFwiY29sXCIsXCJlbWJlZFwiLFwiZnJhbWVcIixcImhyXCIsXCJpbWdcIixcImlucHV0XCIsXCJrZXlnZW5cIixcImxpbmtcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJwYXJhbVwiLFwic291cmNlXCIsXCJ0cmFja1wiLFwid2JyXCJdKSx0fShyKDMwOCkuRXZlbnRFbWl0dGVyKTt0LlhNTEJ1aWxkZXJDQkltcGw9X30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoNzQpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIHI9ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIHIuX2xpbmVMZW5ndGg9MCxyfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuZnJvbnRNYXR0ZXI9ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSx0LnByb3RvdHlwZS5kZWNsYXJhdGlvbj1mdW5jdGlvbihlLHQscil7dmFyIG49dGhpcy5fYmVnaW5MaW5lKCkrXCI8P3htbFwiO3JldHVybiBuKz0nIHZlcnNpb249XCInK2UrJ1wiJyx2b2lkIDAhPT10JiYobis9JyBlbmNvZGluZz1cIicrdCsnXCInKSx2b2lkIDAhPT1yJiYobis9JyBzdGFuZGFsb25lPVwiJysocj9cInllc1wiOlwibm9cIikrJ1wiJyksbis9XCI/PlwifSx0LnByb3RvdHlwZS5kb2NUeXBlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzLl9iZWdpbkxpbmUoKTtyZXR1cm4gbis9dCYmcj9cIjwhRE9DVFlQRSBcIitlKycgUFVCTElDIFwiJyt0KydcIiBcIicrcisnXCI+Jzp0P1wiPCFET0NUWVBFIFwiK2UrJyBQVUJMSUMgXCInK3QrJ1wiPic6cj9cIjwhRE9DVFlQRSBcIitlKycgU1lTVEVNIFwiJytyKydcIj4nOlwiPCFET0NUWVBFIFwiK2UrXCI+XCJ9LHQucHJvdG90eXBlLmNvbW1lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2JlZ2luTGluZSgpK1wiXFx4M2MhLS1cIitlK1wiLS1cXHgzZVwifSx0LnByb3RvdHlwZS50ZXh0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9iZWdpbkxpbmUoKStlfSx0LnByb3RvdHlwZS5pbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe3JldHVybiB0P3RoaXMuX2JlZ2luTGluZSgpK1wiPD9cIitlK1wiIFwiK3QrXCI/PlwiOnRoaXMuX2JlZ2luTGluZSgpK1wiPD9cIitlK1wiPz5cIn0sdC5wcm90b3R5cGUuY2RhdGE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2JlZ2luTGluZSgpK1wiPCFbQ0RBVEFbXCIrZStcIl1dPlwifSx0LnByb3RvdHlwZS5vcGVuVGFnQmVnaW49ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2xpbmVMZW5ndGgrPTErZS5sZW5ndGgsdGhpcy5fYmVnaW5MaW5lKCkrXCI8XCIrZX0sdC5wcm90b3R5cGUub3BlblRhZ0VuZD1mdW5jdGlvbihlLHQscil7cmV0dXJuIHI/XCIgLz5cIjp0P3RoaXMuX3dyaXRlck9wdGlvbnMuYWxsb3dFbXB0eVRhZ3M/XCI+PC9cIitlK1wiPlwiOnRoaXMuX3dyaXRlck9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaD9cIiAvPlwiOlwiLz5cIjpcIj5cIn0sdC5wcm90b3R5cGUuY2xvc2VUYWc9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2JlZ2luTGluZSgpK1wiPC9cIitlK1wiPlwifSx0LnByb3RvdHlwZS5hdHRyaWJ1dGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lKyc9XCInK3QrJ1wiJztyZXR1cm4gdGhpcy5fd3JpdGVyT3B0aW9ucy5wcmV0dHlQcmludCYmdGhpcy5fd3JpdGVyT3B0aW9ucy53aWR0aD4wJiZ0aGlzLl9saW5lTGVuZ3RoKzErci5sZW5ndGg+dGhpcy5fd3JpdGVyT3B0aW9ucy53aWR0aD8ocj10aGlzLl9iZWdpbkxpbmUoKSt0aGlzLl9pbmRlbnQoMSkrcix0aGlzLl9saW5lTGVuZ3RoPXIubGVuZ3RoLHIpOih0aGlzLl9saW5lTGVuZ3RoKz0xK3IubGVuZ3RoLFwiIFwiK3IpfSx0LnByb3RvdHlwZS5iZWdpbkVsZW1lbnQ9ZnVuY3Rpb24oZSl7fSx0LnByb3RvdHlwZS5lbmRFbGVtZW50PWZ1bmN0aW9uKGUpe30sdC5wcm90b3R5cGUuX2JlZ2luTGluZT1mdW5jdGlvbigpe2lmKHRoaXMuX3dyaXRlck9wdGlvbnMucHJldHR5UHJpbnQpe3ZhciBlPSh0aGlzLmhhc0RhdGE/dGhpcy5fd3JpdGVyT3B0aW9ucy5uZXdsaW5lOlwiXCIpK3RoaXMuX2luZGVudCh0aGlzLl93cml0ZXJPcHRpb25zLm9mZnNldCt0aGlzLmxldmVsKTtyZXR1cm4gdGhpcy5fbGluZUxlbmd0aD1lLmxlbmd0aCxlfXJldHVyblwiXCJ9LHQucHJvdG90eXBlLl9pbmRlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8PTA/XCJcIjp0aGlzLl93cml0ZXJPcHRpb25zLmluZGVudC5yZXBlYXQoZSl9LHR9KHIoMTE0KS5CYXNlQ0JXcml0ZXIpO3QuWE1MQ0JXcml0ZXI9b30sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3IoNzQpO3ZhciBuLGk9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmKGVbcl09dFtyXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KHIucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyByKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIHI9ZS5jYWxsKHRoaXMsdCl8fHRoaXM7cmV0dXJuIHIuX2hhc0NoaWxkcmVuPVtdLHIuX2FkZGl0aW9uYWxMZXZlbD0wLHJ9cmV0dXJuIGkodCxlKSx0LnByb3RvdHlwZS5mcm9udE1hdHRlcj1mdW5jdGlvbigpe3JldHVyblwiXCJ9LHQucHJvdG90eXBlLmRlY2xhcmF0aW9uPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cIlwifSx0LnByb3RvdHlwZS5kb2NUeXBlPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm5cIlwifSx0LnByb3RvdHlwZS5jb21tZW50PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9jb21tYSgpK3RoaXMuX2JlZ2luTGluZSgpK1wie1wiK3RoaXMuX3NlcCgpK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LmNvbW1lbnQpK3RoaXMuX3NlcCgpK3RoaXMuX3ZhbChlKSt0aGlzLl9zZXAoKStcIn1cIn0sdC5wcm90b3R5cGUudGV4dD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fY29tbWEoKSt0aGlzLl9iZWdpbkxpbmUoKStcIntcIit0aGlzLl9zZXAoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC50ZXh0KSt0aGlzLl9zZXAoKSt0aGlzLl92YWwoZSkrdGhpcy5fc2VwKCkrXCJ9XCJ9LHQucHJvdG90eXBlLmluc3RydWN0aW9uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuX2NvbW1hKCkrdGhpcy5fYmVnaW5MaW5lKCkrXCJ7XCIrdGhpcy5fc2VwKCkrdGhpcy5fa2V5KHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQuaW5zKSt0aGlzLl9zZXAoKSt0aGlzLl92YWwodD9lK1wiIFwiK3Q6ZSkrdGhpcy5fc2VwKCkrXCJ9XCJ9LHQucHJvdG90eXBlLmNkYXRhPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9jb21tYSgpK3RoaXMuX2JlZ2luTGluZSgpK1wie1wiK3RoaXMuX3NlcCgpK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LmNkYXRhKSt0aGlzLl9zZXAoKSt0aGlzLl92YWwoZSkrdGhpcy5fc2VwKCkrXCJ9XCJ9LHQucHJvdG90eXBlLmF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9jb21tYSgpK3RoaXMuX2JlZ2luTGluZSgxKStcIntcIit0aGlzLl9zZXAoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5hdHQrZSkrdGhpcy5fc2VwKCkrdGhpcy5fdmFsKHQpK3RoaXMuX3NlcCgpK1wifVwifSx0LnByb3RvdHlwZS5vcGVuVGFnQmVnaW49ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fY29tbWEoKSt0aGlzLl9iZWdpbkxpbmUoKStcIntcIit0aGlzLl9zZXAoKSt0aGlzLl9rZXkoZSkrdGhpcy5fc2VwKCkrXCJ7XCI7cmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxMZXZlbCsrLHRoaXMuaGFzRGF0YT0hMCx0Kz10aGlzLl9iZWdpbkxpbmUoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC50ZXh0KSt0aGlzLl9zZXAoKStcIltcIix0aGlzLl9oYXNDaGlsZHJlbi5wdXNoKCExKSx0fSx0LnByb3RvdHlwZS5vcGVuVGFnRW5kPWZ1bmN0aW9uKGUsdCxyKXtpZih0KXt2YXIgbj10aGlzLl9zZXAoKStcIl1cIjtyZXR1cm4gdGhpcy5fYWRkaXRpb25hbExldmVsLS0sbis9dGhpcy5fYmVnaW5MaW5lKCkrXCJ9XCIrdGhpcy5fc2VwKCkrXCJ9XCJ9cmV0dXJuXCJcIn0sdC5wcm90b3R5cGUuY2xvc2VUYWc9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fYmVnaW5MaW5lKCkrXCJdXCI7cmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxMZXZlbC0tLHQrPXRoaXMuX2JlZ2luTGluZSgpK1wifVwiK3RoaXMuX3NlcCgpK1wifVwifSx0LnByb3RvdHlwZS5iZWdpbkVsZW1lbnQ9ZnVuY3Rpb24oZSl7fSx0LnByb3RvdHlwZS5lbmRFbGVtZW50PWZ1bmN0aW9uKGUpe3RoaXMuX2hhc0NoaWxkcmVuLnBvcCgpfSx0LnByb3RvdHlwZS5fYmVnaW5MaW5lPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0wKSx0aGlzLl93cml0ZXJPcHRpb25zLnByZXR0eVByaW50Pyh0aGlzLmhhc0RhdGE/dGhpcy5fd3JpdGVyT3B0aW9ucy5uZXdsaW5lOlwiXCIpK3RoaXMuX2luZGVudCh0aGlzLl93cml0ZXJPcHRpb25zLm9mZnNldCt0aGlzLmxldmVsK2UpOlwiXCJ9LHQucHJvdG90eXBlLl9pbmRlbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUrdGhpcy5fYWRkaXRpb25hbExldmVsPD0wP1wiXCI6dGhpcy5fd3JpdGVyT3B0aW9ucy5pbmRlbnQucmVwZWF0KGUrdGhpcy5fYWRkaXRpb25hbExldmVsKX0sdC5wcm90b3R5cGUuX2NvbW1hPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5faGFzQ2hpbGRyZW5bdGhpcy5faGFzQ2hpbGRyZW4ubGVuZ3RoLTFdP1wiLFwiOlwiXCI7cmV0dXJuIHRoaXMuX2hhc0NoaWxkcmVuLmxlbmd0aD4wJiYodGhpcy5faGFzQ2hpbGRyZW5bdGhpcy5faGFzQ2hpbGRyZW4ubGVuZ3RoLTFdPSEwKSxlfSx0LnByb3RvdHlwZS5fc2VwPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dyaXRlck9wdGlvbnMucHJldHR5UHJpbnQ/XCIgXCI6XCJcIn0sdC5wcm90b3R5cGUuX2tleT1mdW5jdGlvbihlKXtyZXR1cm4nXCInK2UrJ1wiOid9LHQucHJvdG90eXBlLl92YWw9ZnVuY3Rpb24oZSl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfSx0fShyKDExNCkuQmFzZUNCV3JpdGVyKTt0LkpTT05DQldyaXRlcj1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cig3NCk7dmFyIG4saT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8KG49ZnVuY3Rpb24oZSx0KXtyZXR1cm4obj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oZSx0KXtlLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYoZVtyXT10W3JdKX0pKGUsdCl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX1uKGUsdCksZS5wcm90b3R5cGU9bnVsbD09PXQ/T2JqZWN0LmNyZWF0ZSh0KTooci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXt2YXIgcj1lLmNhbGwodGhpcyx0KXx8dGhpcztpZihyLl9yb290V3JpdHRlbj0hMSxyLl9hZGRpdGlvbmFsTGV2ZWw9MCx0LmluZGVudC5sZW5ndGg8Mil0aHJvdyBuZXcgRXJyb3IoXCJZQU1MIGluZGVudGVudGF0aW9uIHN0cmluZyBtdXN0IGJlIGF0IGxlYXN0IHR3byBjaGFyYWN0ZXJzIGxvbmcuXCIpO2lmKHQub2Zmc2V0PDApdGhyb3cgbmV3IEVycm9yKFwiWUFNTCBvZmZzZXQgc2hvdWxkIGJlIHplcm8gb3IgYSBwb3NpdGl2ZSBudW1iZXIuXCIpO3JldHVybiByfXJldHVybiBpKHQsZSksdC5wcm90b3R5cGUuZnJvbnRNYXR0ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYmVnaW5MaW5lKCkrXCItLS1cIn0sdC5wcm90b3R5cGUuZGVjbGFyYXRpb249ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwiXCJ9LHQucHJvdG90eXBlLmRvY1R5cGU9ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwiXCJ9LHQucHJvdG90eXBlLmNvbW1lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2JlZ2luTGluZSgpK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LmNvbW1lbnQpK1wiIFwiK3RoaXMuX3ZhbChlKX0sdC5wcm90b3R5cGUudGV4dD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fYmVnaW5MaW5lKCkrdGhpcy5fa2V5KHRoaXMuX2J1aWxkZXJPcHRpb25zLmNvbnZlcnQudGV4dCkrXCIgXCIrdGhpcy5fdmFsKGUpfSx0LnByb3RvdHlwZS5pbnN0cnVjdGlvbj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl9iZWdpbkxpbmUoKSt0aGlzLl9rZXkodGhpcy5fYnVpbGRlck9wdGlvbnMuY29udmVydC5pbnMpK1wiIFwiK3RoaXMuX3ZhbCh0P2UrXCIgXCIrdDplKX0sdC5wcm90b3R5cGUuY2RhdGE9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2JlZ2luTGluZSgpK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LmNkYXRhKStcIiBcIit0aGlzLl92YWwoZSl9LHQucHJvdG90eXBlLmF0dHJpYnV0ZT1mdW5jdGlvbihlLHQpe3RoaXMuX2FkZGl0aW9uYWxMZXZlbCsrO3ZhciByPXRoaXMuX2JlZ2luTGluZSgpK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LmF0dCtlKStcIiBcIit0aGlzLl92YWwodCk7cmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxMZXZlbC0tLHJ9LHQucHJvdG90eXBlLm9wZW5UYWdCZWdpbj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLl9iZWdpbkxpbmUoKSt0aGlzLl9rZXkoZSk7cmV0dXJuIHRoaXMuX3Jvb3RXcml0dGVufHwodGhpcy5fcm9vdFdyaXR0ZW49ITApLHRoaXMuaGFzRGF0YT0hMCx0aGlzLl9hZGRpdGlvbmFsTGV2ZWwrKyx0Kz10aGlzLl9iZWdpbkxpbmUoITApK3RoaXMuX2tleSh0aGlzLl9idWlsZGVyT3B0aW9ucy5jb252ZXJ0LnRleHQpfSx0LnByb3RvdHlwZS5vcGVuVGFnRW5kPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdD9cIiBcIit0aGlzLl92YWwoXCJcIik6XCJcIn0sdC5wcm90b3R5cGUuY2xvc2VUYWc9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2FkZGl0aW9uYWxMZXZlbC0tLFwiXCJ9LHQucHJvdG90eXBlLmJlZ2luRWxlbWVudD1mdW5jdGlvbihlKXt9LHQucHJvdG90eXBlLmVuZEVsZW1lbnQ9ZnVuY3Rpb24oZSl7fSx0LnByb3RvdHlwZS5fYmVnaW5MaW5lPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksKHRoaXMuaGFzRGF0YT90aGlzLl93cml0ZXJPcHRpb25zLm5ld2xpbmU6XCJcIikrdGhpcy5faW5kZW50KHRoaXMuX3dyaXRlck9wdGlvbnMub2Zmc2V0K3RoaXMubGV2ZWwsZSl9LHQucHJvdG90eXBlLl9pbmRlbnQ9ZnVuY3Rpb24oZSx0KXtpZihlK3RoaXMuX2FkZGl0aW9uYWxMZXZlbDw9MClyZXR1cm5cIlwiO3ZhciByPXRoaXMuX3dyaXRlck9wdGlvbnMuaW5kZW50LnJlcGVhdChlK3RoaXMuX2FkZGl0aW9uYWxMZXZlbCk7cmV0dXJuIXQmJnRoaXMuX3Jvb3RXcml0dGVuP3Iuc3Vic3RyKDAsci5sZW5ndGgtMikrXCItXCIrci5zdWJzdHIoLTEsMSk6cn0sdC5wcm90b3R5cGUuX2tleT1mdW5jdGlvbihlKXtyZXR1cm4nXCInK2UrJ1wiOid9LHQucHJvdG90eXBlLl92YWw9ZnVuY3Rpb24oZSl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfSx0fShyKDExNCkuQmFzZUNCV3JpdGVyKTt0LllBTUxDQldyaXRlcj1vfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT1cIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdD9SZWZsZWN0Om51bGwsbz1pJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmFwcGx5P2kuYXBwbHk6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChlLHQscil9O249aSYmXCJmdW5jdGlvblwiPT10eXBlb2YgaS5vd25LZXlzP2kub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKSl9OmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKX07dmFyIGE9TnVtYmVyLmlzTmFOfHxmdW5jdGlvbihlKXtyZXR1cm4gZSE9ZX07ZnVuY3Rpb24gcygpe3MuaW5pdC5jYWxsKHRoaXMpfWUuZXhwb3J0cz1zLHMuRXZlbnRFbWl0dGVyPXMscy5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAscy5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAscy5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIHU9MTA7ZnVuY3Rpb24gbChlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGUpfWZ1bmN0aW9uIGMoZSl7cmV0dXJuIHZvaWQgMD09PWUuX21heExpc3RlbmVycz9zLmRlZmF1bHRNYXhMaXN0ZW5lcnM6ZS5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIGgoZSx0LHIsbil7dmFyIGksbyxhLHM7aWYobChyKSx2b2lkIDA9PT0obz1lLl9ldmVudHMpPyhvPWUuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1vLm5ld0xpc3RlbmVyJiYoZS5lbWl0KFwibmV3TGlzdGVuZXJcIix0LHIubGlzdGVuZXI/ci5saXN0ZW5lcjpyKSxvPWUuX2V2ZW50cyksYT1vW3RdKSx2b2lkIDA9PT1hKWE9b1t0XT1yLCsrZS5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2E9b1t0XT1uP1tyLGFdOlthLHJdOm4/YS51bnNoaWZ0KHIpOmEucHVzaChyKSwoaT1jKGUpKT4wJiZhLmxlbmd0aD5pJiYhYS53YXJuZWQpe2Eud2FybmVkPSEwO3ZhciB1PW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrYS5sZW5ndGgrXCIgXCIrU3RyaW5nKHQpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7dS5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsdS5lbWl0dGVyPWUsdS50eXBlPXQsdS5jb3VudD1hLmxlbmd0aCxzPXUsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4ocyl9cmV0dXJuIGV9ZnVuY3Rpb24gcCgpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gZihlLHQscil7dmFyIG49e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OmUsdHlwZTp0LGxpc3RlbmVyOnJ9LGk9cC5iaW5kKG4pO3JldHVybiBpLmxpc3RlbmVyPXIsbi53cmFwRm49aSxpfWZ1bmN0aW9uIGQoZSx0LHIpe3ZhciBuPWUuX2V2ZW50cztpZih2b2lkIDA9PT1uKXJldHVybltdO3ZhciBpPW5bdF07cmV0dXJuIHZvaWQgMD09PWk/W106XCJmdW5jdGlvblwiPT10eXBlb2YgaT9yP1tpLmxpc3RlbmVyfHxpXTpbaV06cj9mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUubGVuZ3RoKSxyPTA7cjx0Lmxlbmd0aDsrK3IpdFtyXT1lW3JdLmxpc3RlbmVyfHxlW3JdO3JldHVybiB0fShpKTp5KGksaS5sZW5ndGgpfWZ1bmN0aW9uIG0oZSl7dmFyIHQ9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXQpe3ZhciByPXRbZV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgcilyZXR1cm4gMTtpZih2b2lkIDAhPT1yKXJldHVybiByLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiB5KGUsdCl7Zm9yKHZhciByPW5ldyBBcnJheSh0KSxuPTA7bjx0OysrbilyW25dPWVbbl07cmV0dXJuIHJ9T2JqZWN0LmRlZmluZVByb3BlcnR5KHMsXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxhKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlK1wiLlwiKTt1PWV9fSkscy5pbml0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHMhPT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH0scy5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fGEoZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9ZSx0aGlzfSxzLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzKX0scy5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdC5wdXNoKGFyZ3VtZW50c1tyXSk7dmFyIG49XCJlcnJvclwiPT09ZSxpPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1pKW49biYmdm9pZCAwPT09aS5lcnJvcjtlbHNlIGlmKCFuKXJldHVybiExO2lmKG4pe3ZhciBhO2lmKHQubGVuZ3RoPjAmJihhPXRbMF0pLGEgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBhO3ZhciBzPW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisoYT9cIiAoXCIrYS5tZXNzYWdlK1wiKVwiOlwiXCIpKTt0aHJvdyBzLmNvbnRleHQ9YSxzfXZhciB1PWlbZV07aWYodm9pZCAwPT09dSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1KW8odSx0aGlzLHQpO2Vsc2V7dmFyIGw9dS5sZW5ndGgsYz15KHUsbCk7Zm9yKHI9MDtyPGw7KytyKW8oY1tyXSx0aGlzLHQpfXJldHVybiEwfSxzLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3JldHVybiBoKHRoaXMsZSx0LCExKX0scy5wcm90b3R5cGUub249cy5wcm90b3R5cGUuYWRkTGlzdGVuZXIscy5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgodGhpcyxlLHQsITApfSxzLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGwodCksdGhpcy5vbihlLGYodGhpcyxlLHQpKSx0aGlzfSxzLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGwodCksdGhpcy5wcmVwZW5kTGlzdGVuZXIoZSxmKHRoaXMsZSx0KSksdGhpc30scy5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxhO2lmKGwodCksdm9pZCAwPT09KG49dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT0ocj1uW2VdKSlyZXR1cm4gdGhpcztpZihyPT09dHx8ci5saXN0ZW5lcj09PXQpMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTooZGVsZXRlIG5bZV0sbi5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLHIubGlzdGVuZXJ8fHQpKTtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpe2ZvcihpPS0xLG89ci5sZW5ndGgtMTtvPj0wO28tLSlpZihyW29dPT09dHx8cltvXS5saXN0ZW5lcj09PXQpe2E9cltvXS5saXN0ZW5lcixpPW87YnJlYWt9aWYoaTwwKXJldHVybiB0aGlzOzA9PT1pP3Iuc2hpZnQoKTpmdW5jdGlvbihlLHQpe2Zvcig7dCsxPGUubGVuZ3RoO3QrKyllW3RdPWVbdCsxXTtlLnBvcCgpfShyLGkpLDE9PT1yLmxlbmd0aCYmKG5bZV09clswXSksdm9pZCAwIT09bi5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIixlLGF8fHQpfXJldHVybiB0aGlzfSxzLnByb3RvdHlwZS5vZmY9cy5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIscy5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbjtpZih2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PXIucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTp2b2lkIDAhPT1yW2VdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgcltlXSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGksbz1PYmplY3Qua2V5cyhyKTtmb3Iobj0wO248by5sZW5ndGg7KytuKVwicmVtb3ZlTGlzdGVuZXJcIiE9PShpPW9bbl0pJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhpKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YodD1yW2VdKSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdCk7ZWxzZSBpZih2b2lkIDAhPT10KWZvcihuPXQubGVuZ3RoLTE7bj49MDtuLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHRbbl0pO3JldHVybiB0aGlzfSxzLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGQodGhpcyxlLCEwKX0scy5wcm90b3R5cGUucmF3TGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBkKHRoaXMsZSwhMSl9LHMubGlzdGVuZXJDb3VudD1mdW5jdGlvbihlLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUubGlzdGVuZXJDb3VudD9lLmxpc3RlbmVyQ291bnQodCk6bS5jYWxsKGUsdCl9LHMucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9bSxzLnByb3RvdHlwZS5ldmVudE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50PjA/bih0aGlzLl9ldmVudHMpOltdfX0sZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNzcpO3QuY3JlYXRlQ0I9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBuLlhNTEJ1aWxkZXJDQkltcGwoZSl9LHQuZnJhZ21lbnRDQj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IG4uWE1MQnVpbGRlckNCSW1wbChlLCEwKX19XSl9KSk7IiwgImltcG9ydCB7IEVkaXRvciwgTWFya2Rvd25WaWV3LCBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IERFRkFVTFRfU0VUVElOR1MsIFdvcmRwcmVzc1BsdWdpblNldHRpbmdzLCBXb3JkcHJlc3NTZXR0aW5nVGFiIH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcbmltcG9ydCB7IGFkZEljb25zIH0gZnJvbSAnLi9pY29ucyc7XHJcbmltcG9ydCB7IFdvcmRQcmVzc1Bvc3RQYXJhbXMgfSBmcm9tICcuL3dwLWNsaWVudCc7XHJcbmltcG9ydCB7IGdldFdvcmRQcmVzc0NsaWVudCB9IGZyb20gJy4vd3AtY2xpZW50cyc7XHJcbmltcG9ydCB7IEkxOG4gfSBmcm9tICcuL2kxOG4nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29yZHByZXNzUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHJcblx0c2V0dGluZ3M6IFdvcmRwcmVzc1BsdWdpblNldHRpbmdzO1xyXG5cclxuICBpMThuOiBJMThuO1xyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnbG9hZGluZyBvYnNpZGlhbi13b3JkcHJlc3MgcGx1Z2luJyk7XHJcblxyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICAvLyBsYW5nIHNob3VsZCBiZSBsb2FkIGVhcmx5LCBidXQgYWZ0ZXIgc2V0dGluZ3NcclxuICAgIHRoaXMuaTE4biA9IG5ldyBJMThuKHRoaXMuc2V0dGluZ3MubGFuZyk7XHJcblxyXG4gICAgYWRkSWNvbnMoKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVJpYmJvbkljb24oKTtcclxuXHJcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICBpZDogJ2RlZmF1bHRQdWJsaXNoJyxcclxuICAgICAgbmFtZTogdGhpcy5pMThuLnQoJ2NvbW1hbmRfcHVibGlzaFdpdGhEZWZhdWx0JyksXHJcbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtczogV29yZFByZXNzUG9zdFBhcmFtcyA9IHtcclxuICAgICAgICAgIHN0YXR1czogdGhpcy5zZXR0aW5ncy5kZWZhdWx0UG9zdFN0YXR1cyxcclxuICAgICAgICAgIGNhdGVnb3JpZXM6IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnB1Ymxpc2hQb3N0KHBhcmFtcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiAncHVibGlzaCcsXHJcbiAgICAgIG5hbWU6IHRoaXMuaTE4bi50KCdjb21tYW5kX3B1Ymxpc2gnKSxcclxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XHJcbiAgICAgICAgdGhpcy5wdWJsaXNoUG9zdCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFdvcmRwcmVzc1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxuXHJcbiAgdXBkYXRlUmliYm9uSWNvbigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJpYmJvbkljb25UaXRsZSA9IHRoaXMuaTE4bi50KCdyaWJib25faWNvblRpdGxlJyk7XHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93UmliYm9uSWNvbikge1xyXG4gICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ3dwLWxvZ28nLCByaWJib25JY29uVGl0bGUsICgpID0+IHtcclxuICAgICAgICB0aGlzLnB1Ymxpc2hQb3N0KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgbGVmdFJpYmJvbjogYW55ID0gdGhpcy5hcHAud29ya3NwYWNlLmxlZnRSaWJib247IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgY29uc3QgY2hpbGRyZW4gPSBsZWZ0UmliYm9uLnJpYmJvbkFjdGlvbnNFbC5jaGlsZHJlbjtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChjaGlsZHJlbi5pdGVtKGkpLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpID09PSByaWJib25JY29uVGl0bGUpIHtcclxuICAgICAgICAgIChjaGlsZHJlbi5pdGVtKGkpIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwdWJsaXNoUG9zdChkZWZhdWx0UG9zdFBhcmFtcz86IFdvcmRQcmVzc1Bvc3RQYXJhbXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNsaWVudCA9IGdldFdvcmRQcmVzc0NsaWVudCh0aGlzLmFwcCwgdGhpcyk7XHJcbiAgICBpZiAoY2xpZW50KSB7XHJcbiAgICAgIGNsaWVudC5uZXdQb3N0KGRlZmF1bHRQb3N0UGFyYW1zKS50aGVuKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgV29yZHByZXNzUGx1Z2luIGZyb20gJy4vbWFpbic7XHJcbmltcG9ydCB7IFBvc3RTdGF0dXMgfSBmcm9tICcuL3dwLWFwaSc7XHJcbmltcG9ydCB7IExhbmd1YWdlV2l0aEF1dG8sIFRyYW5zbGF0ZUtleSB9IGZyb20gJy4vaTE4bic7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGVudW0gQXBpVHlwZSB7XHJcbiAgWE1MX1JQQyA9ICd4bWwtcnBjJyxcclxuICBSZXN0QVBJX21pbmlPcmFuZ2UgPSAnbWluaU9yYW5nZSdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXb3JkcHJlc3NQbHVnaW5TZXR0aW5ncyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFBsdWdpbiBsYW5ndWFnZS5cclxuICAgKi9cclxuICBsYW5nOiBMYW5ndWFnZVdpdGhBdXRvO1xyXG5cclxuICAvKipcclxuICAgKiBBUEkgdHlwZS5cclxuICAgKi9cclxuICBhcGlUeXBlOiBBcGlUeXBlO1xyXG5cclxuICAvKipcclxuICAgKiBFbmRwb2ludC5cclxuICAgKi9cclxuICBlbmRwb2ludDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBXb3JkUHJlc3MgdXNlcm5hbWUuXHJcbiAgICovXHJcbiAgdXNlck5hbWU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFdvcmRQcmVzcyBwYXNzd29yZC5cclxuICAgKi9cclxuICBwYXNzd29yZD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZSB1c2VybmFtZSB0byBsb2NhbCBkYXRhLlxyXG4gICAqL1xyXG4gIHNhdmVVc2VyTmFtZTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZSB1c2VyIHBhc3N3b3JkIHRvIGxvY2FsIGRhdGEuXHJcbiAgICovXHJcbiAgc2F2ZVBhc3N3b3JkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBTaG93IHBsdWdpbiBpY29uIGluIHNpZGUuXHJcbiAgICovXHJcbiAgc2hvd1JpYmJvbkljb246IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgcG9zdCBzdGF0dXMuXHJcbiAgICovXHJcbiAgZGVmYXVsdFBvc3RTdGF0dXM6IFBvc3RTdGF0dXM7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBXb3JkcHJlc3NQbHVnaW5TZXR0aW5ncyA9IHtcclxuICBsYW5nOiAnYXV0bycsXHJcbiAgYXBpVHlwZTogQXBpVHlwZS5YTUxfUlBDLFxyXG4gIGVuZHBvaW50OiAnJyxcclxuICBzYXZlVXNlck5hbWU6IGZhbHNlLFxyXG4gIHNhdmVQYXNzd29yZDogZmFsc2UsXHJcbiAgc2hvd1JpYmJvbkljb246IGZhbHNlLFxyXG4gIGRlZmF1bHRQb3N0U3RhdHVzOiBQb3N0U3RhdHVzLkRyYWZ0XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXb3JkcHJlc3NTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG4gICAgYXBwOiBBcHAsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBsdWdpbjogV29yZHByZXNzUGx1Z2luXHJcbiAgKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgY29uc3QgdCA9IChrZXk6IFRyYW5zbGF0ZUtleSwgdmFycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBzdHJpbmcgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5wbHVnaW4uaTE4bi50KGtleSwgdmFycyk7XHJcbiAgICB9O1xyXG5cclxuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDEnLCB7IHRleHQ6IHQoJ3NldHRpbmdzX3RpdGxlJykgfSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKHQoJ3NldHRpbmdzX3VybCcpKVxyXG5cdFx0XHQuc2V0RGVzYyh0KCdzZXR0aW5nc191cmxEZXNjJykpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcih0KCdzZXR0aW5nc191cmxQbGFjZWhvbGRlcicpKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRwb2ludClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRwb2ludCA9IHZhbHVlO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKHQoJ3NldHRpbmdzX2FwaVR5cGUnKSlcclxuICAgICAgLnNldERlc2ModCgnc2V0dGluZ3NfYXBpVHlwZURlc2MnKSlcclxuICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAuYWRkT3B0aW9uKEFwaVR5cGUuWE1MX1JQQywgdCgnc2V0dGluZ3NfYXBpVHlwZVhtbFJwYycpKVxyXG4gICAgICAgICAgLmFkZE9wdGlvbihBcGlUeXBlLlJlc3RBUElfbWluaU9yYW5nZSwgdCgnc2V0dGluZ3NfYXBpVHlwZVJlc3RNaW5pT3JhbmdlJykpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpVHlwZSlcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IEFwaVR5cGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpVHlwZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUodCgnc2V0dGluZ3Nfc2hvd1JpYmJvbkljb24nKSlcclxuICAgICAgLnNldERlc2ModCgnc2V0dGluZ3Nfc2hvd1JpYmJvbkljb25EZXNjJykpXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGVcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93UmliYm9uSWNvbilcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd1JpYmJvbkljb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4udXBkYXRlUmliYm9uSWNvbigpO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICk7XHJcblxyXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKHQoJ3NldHRpbmdzX2RlZmF1bHRQb3N0U3RhdHVzJykpXHJcbiAgICAgIC5zZXREZXNjKHQoJ3NldHRpbmdzX2RlZmF1bHRQb3N0U3RhdHVzRGVzYycpKVxyXG4gICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgIC5hZGRPcHRpb24oUG9zdFN0YXR1cy5EcmFmdCwgdCgnc2V0dGluZ3NfZGVmYXVsdFBvc3RTdGF0dXNEcmFmdCcpKVxyXG4gICAgICAgICAgLmFkZE9wdGlvbihQb3N0U3RhdHVzLlB1Ymxpc2gsIHQoJ3NldHRpbmdzX2RlZmF1bHRQb3N0U3RhdHVzUHVibGlzaCcpKVxyXG4gICAgICAgICAgLy8gLmFkZE9wdGlvbihQb3N0U3RhdHVzLkZ1dHVyZSwgJ2Z1dHVyZScpXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFBvc3RTdGF0dXMpXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBQb3N0U3RhdHVzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRQb3N0U3RhdHVzID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHR9XHJcblxyXG59XHJcbiIsICJpbXBvcnQgeyBhZGRJY29uIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuY29uc3QgaWNvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XHJcbiAgJ3dwLWxvZ28nOiBgXHJcbjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiPlxyXG4gIDxnIGZpbGw9XCJjdXJyZW50Q29sb3JcIj5cclxuICAgIDxwYXRoIGQ9XCJNIDcuMTA5Mzc1IDUwIEMgNy4xMDkzNzUgNjYuOTc2NTYyIDE2Ljk3NjU2MiA4MS42NDg0MzggMzEuMjgxMjUgODguNjAxNTYyIEwgMTAuODIwMzEyIDMyLjU0Mjk2OSBDIDguNDQxNDA2IDM3Ljg3ODkwNiA3LjEwOTM3NSA0My43ODEyNSA3LjEwOTM3NSA1MCBaIE0gNy4xMDkzNzUgNTAgXCIvPlxyXG4gICAgPHBhdGggZD1cIk0gNzguOTU3MDMxIDQ3LjgzNTkzOCBDIDc4Ljk1NzAzMSA0Mi41MzUxNTYgNzcuMDU0Njg4IDM4Ljg2MzI4MSA3NS40MjE4NzUgMzYuMDAzOTA2IEMgNzMuMjQ2MDk0IDMyLjQ3MjY1NiA3MS4yMDcwMzEgMjkuNDgwNDY5IDcxLjIwNzAzMSAyNS45NDUzMTIgQyA3MS4yMDcwMzEgMjIuMDAzOTA2IDc0LjE5OTIxOSAxOC4zMzIwMzEgNzguNDEwMTU2IDE4LjMzMjAzMSBDIDc4LjYwMTU2MiAxOC4zMzIwMzEgNzguNzgxMjUgMTguMzU1NDY5IDc4Ljk2ODc1IDE4LjM2NzE4OCBDIDcxLjMzNTkzOCAxMS4zNzUgNjEuMTY3OTY5IDcuMTA1NDY5IDUwIDcuMTA1NDY5IEMgMzUuMDE1NjI1IDcuMTA1NDY5IDIxLjgzMjAzMSAxNC43OTY4NzUgMTQuMTY0MDYyIDI2LjQ0MTQwNiBDIDE1LjE2Nzk2OSAyNi40NzI2NTYgMTYuMTE3MTg4IDI2LjQ5MjE4OCAxNi45MjE4NzUgMjYuNDkyMTg4IEMgMjEuNDEwMTU2IDI2LjQ5MjE4OCAyOC4zNTU0NjkgMjUuOTQ5MjE5IDI4LjM1NTQ2OSAyNS45NDkyMTkgQyAzMC42Njc5NjkgMjUuODEyNSAzMC45NDE0MDYgMjkuMjA3MDMxIDI4LjYyODkwNiAyOS40ODA0NjkgQyAyOC42Mjg5MDYgMjkuNDgwNDY5IDI2LjMwNDY4OCAyOS43NTM5MDYgMjMuNzIyNjU2IDI5Ljg5MDYyNSBMIDM5LjMzOTg0NCA3Ni4zNTE1NjIgTCA0OC43MjY1NjIgNDguMTk5MjE5IEwgNDIuMDQyOTY5IDI5Ljg4NjcxOSBDIDM5LjczNDM3NSAyOS43NTM5MDYgMzcuNTQ2ODc1IDI5LjQ4MDQ2OSAzNy41NDY4NzUgMjkuNDgwNDY5IEMgMzUuMjM0Mzc1IDI5LjM0Mzc1IDM1LjUwNzgxMiAyNS44MDg1OTQgMzcuODE2NDA2IDI1Ljk0NTMxMiBDIDM3LjgxNjQwNiAyNS45NDUzMTIgNDQuOTAyMzQ0IDI2LjQ5MjE4OCA0OS4xMTcxODggMjYuNDkyMTg4IEMgNTMuNjAxNTYyIDI2LjQ5MjE4OCA2MC41NDY4NzUgMjUuOTQ1MzEyIDYwLjU0Njg3NSAyNS45NDUzMTIgQyA2Mi44NTkzNzUgMjUuODA4NTk0IDYzLjEzMjgxMiAyOS4yMDcwMzEgNjAuODI0MjE5IDI5LjQ4MDQ2OSBDIDYwLjgyNDIxOSAyOS40ODA0NjkgNTguNDkyMTg4IDI5Ljc1MzkwNiA1NS45MTQwNjIgMjkuODg2NzE5IEwgNzEuNDE0MDYyIDc1Ljk5NjA5NCBMIDc1LjY5MTQwNiA2MS42OTkyMTkgQyA3Ny41NDY4NzUgNTUuNzY1NjI1IDc4Ljk1NzAzMSA1MS41MDc4MTIgNzguOTU3MDMxIDQ3LjgzNTkzOCBaIE0gNzguOTU3MDMxIDQ3LjgzNTkzOCBcIi8+XHJcbiAgICA8cGF0aCBkPVwiTSA1MC43NTM5MDYgNTMuNzUgTCAzNy44ODI4MTIgOTEuMTQ4NDM4IEMgNDEuNzI2NTYyIDkyLjI3NzM0NCA0NS43ODkwNjIgOTIuODk0NTMxIDUwIDkyLjg5NDUzMSBDIDU0Ljk5NjA5NCA5Mi44OTQ1MzEgNTkuNzg1MTU2IDkyLjAzMTI1IDY0LjI0NjA5NCA5MC40NjQ4NDQgQyA2NC4xMjg5MDYgOTAuMjgxMjUgNjQuMDI3MzQ0IDkwLjA4NTkzOCA2My45NDE0MDYgODkuODcxMDk0IFogTSA1MC43NTM5MDYgNTMuNzUgXCIvPlxyXG4gICAgPHBhdGggZD1cIk0gODcuNjM2NzE5IDI5LjQxNzk2OSBDIDg3LjgyNDIxOSAzMC43ODUxNTYgODcuOTI1NzgxIDMyLjI1MzkwNiA4Ny45MjU3ODEgMzMuODMyMDMxIEMgODcuOTI1NzgxIDM4LjE4MzU5NCA4Ny4xMTMyODEgNDMuMDc0MjE5IDg0LjY2Nzk2OSA0OS4xOTUzMTIgTCA3MS41NjI1IDg3LjA3NDIxOSBDIDg0LjMxNjQwNiA3OS42NDA2MjUgOTIuODk0NTMxIDY1LjgyNDIxOSA5Mi44OTQ1MzEgNTAgQyA5Mi44OTQ1MzEgNDIuNTQyOTY5IDkwLjk4ODI4MSAzNS41MzEyNSA4Ny42MzY3MTkgMjkuNDE3OTY5IFogTSA4Ny42MzY3MTkgMjkuNDE3OTY5IFwiLz5cclxuICAgIDxwYXRoIGQ9XCJNIDUwIDAgQyAyMi40MzM1OTQgMCAwIDIyLjQyOTY4OCAwIDUwIEMgMCA3Ny41NzAzMTIgMjIuNDMzNTk0IDEwMCA1MCAxMDAgQyA3Ny41NzAzMTIgMTAwIDEwMC4wMDM5MDYgNzcuNTcwMzEyIDEwMC4wMDM5MDYgNTAgQyAxMDAuMDAzOTA2IDIyLjQyOTY4OCA3Ny41NzAzMTIgMCA1MCAwIFogTSA1MCA5Ny43MDcwMzEgQyAyMy42OTUzMTIgOTcuNzA3MDMxIDIuMjkyOTY5IDc2LjMwNDY4OCAyLjI5Mjk2OSA1MCBDIDIuMjkyOTY5IDIzLjY5NTMxMiAyMy42OTUzMTIgMi4yOTI5NjkgNTAgMi4yOTI5NjkgQyA3Ni4zMDQ2ODggMi4yOTI5NjkgOTcuNzA3MDMxIDIzLjY5NTMxMiA5Ny43MDcwMzEgNTAgQyA5Ny43MDcwMzEgNzYuMzA0Njg4IDc2LjMwNDY4OCA5Ny43MDcwMzEgNTAgOTcuNzA3MDMxIFogTSA1MCA5Ny43MDcwMzEgXCIvPlxyXG4gIDwvZz5cclxuPC9zdmc+YFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZEljb25zID0gKCk6IHZvaWQgPT4ge1xyXG4gIE9iamVjdC5rZXlzKGljb25zKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIGFkZEljb24oa2V5LCBpY29uc1trZXldKTtcclxuICB9KTtcclxufTtcclxuIiwgImltcG9ydCB7IEFwcCwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgV29yZHByZXNzUGx1Z2luIGZyb20gJy4vbWFpbic7XHJcbmltcG9ydCB7IEFwaVR5cGUgfSBmcm9tICcuL3NldHRpbmdzJztcclxuaW1wb3J0IHsgV3BYbWxScGNDbGllbnQgfSBmcm9tICcuL3dwLXhtbC1ycGMtY2xpZW50JztcclxuaW1wb3J0IHsgV3BSZXN0Q2xpZW50LCBXcFJlc3RDbGllbnRNaW5pT3JhbmdlQ29udGV4dCB9IGZyb20gJy4vd3AtcmVzdC1jbGllbnQnO1xyXG5pbXBvcnQgeyBXb3JkUHJlc3NDbGllbnQgfSBmcm9tICcuL3dwLWNsaWVudCc7XHJcblxyXG5cclxuY29uc3Qgd3BDbGllbnRzQ2FjaGUgPSBuZXcgTWFwPEFwaVR5cGUsIFdvcmRQcmVzc0NsaWVudD4oKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXb3JkUHJlc3NDbGllbnQoXHJcbiAgYXBwOiBBcHAsXHJcbiAgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW5cclxuKTogV29yZFByZXNzQ2xpZW50IHwgbnVsbCB7XHJcbiAgaWYgKCFwbHVnaW4uc2V0dGluZ3MuZW5kcG9pbnQgfHwgcGx1Z2luLnNldHRpbmdzLmVuZHBvaW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgbmV3IE5vdGljZShwbHVnaW4uaTE4bi50KCdlcnJvcl9ub0VuZHBvaW50JykpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIGNvbnN0IGNhY2hlZCA9IHdwQ2xpZW50c0NhY2hlLmdldChwbHVnaW4uc2V0dGluZ3MuYXBpVHlwZSk7XHJcbiAgaWYgKGNhY2hlZCkge1xyXG4gICAgcmV0dXJuIGNhY2hlZDtcclxuICB9IGVsc2Uge1xyXG4gICAgbGV0IG5ld0NsaWVudDogV29yZFByZXNzQ2xpZW50IHwgbnVsbDtcclxuICAgIHN3aXRjaCAocGx1Z2luLnNldHRpbmdzLmFwaVR5cGUpIHtcclxuICAgICAgY2FzZSBBcGlUeXBlLlhNTF9SUEM6XHJcbiAgICAgICAgbmV3Q2xpZW50ID0gbmV3IFdwWG1sUnBjQ2xpZW50KGFwcCwgcGx1Z2luKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBBcGlUeXBlLlJlc3RBUElfbWluaU9yYW5nZTpcclxuICAgICAgICBuZXdDbGllbnQgPSBuZXcgV3BSZXN0Q2xpZW50KGFwcCwgcGx1Z2luLCBuZXcgV3BSZXN0Q2xpZW50TWluaU9yYW5nZUNvbnRleHQoKSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgbmV3Q2xpZW50ID0gbnVsbDtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIGlmIChuZXdDbGllbnQpIHtcclxuICAgICAgd3BDbGllbnRzQ2FjaGUuc2V0KHBsdWdpbi5zZXR0aW5ncy5hcGlUeXBlLCBuZXdDbGllbnQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld0NsaWVudDtcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7IHJlcXVlc3QgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ3htbGJ1aWxkZXIyJztcclxuaW1wb3J0IHsgWE1MQnVpbGRlciB9IGZyb20gJ3htbGJ1aWxkZXIyL2xpYi9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgZ2V0LCBpc0FycmF5LCBpc0Jvb2xlYW4sIGlzRGF0ZSwgaXNOdW1iZXIsIGlzT2JqZWN0LCBpc1NhZmVJbnRlZ2VyIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgZm9ybWF0LCBwYXJzZSB9IGZyb20gJ2RhdGUtZm5zJztcclxuXHJcbmludGVyZmFjZSBYbWxScGNPcHRpb25zIHtcclxuICB1cmw6IFVSTDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFhtbFJwY0NsaWVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBYbWxScGNPcHRpb25zXHJcbiAgKSB7XHJcbiAgICBjb25zb2xlLmxvZyhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIG1ldGhvZENhbGwoXHJcbiAgICBtZXRob2Q6IHN0cmluZyxcclxuICAgIHBhcmFtczogdW5rbm93blxyXG4gICk6IFByb21pc2U8dW5rbm93bj4ge1xyXG4gICAgY29uc29sZS5sb2coYEVuZHBvaW50OiAke3RoaXMub3B0aW9ucy51cmwuaHJlZn14bWxycGMucGhwYCk7XHJcblxyXG4gICAgY29uc3QgeG1sID0gdGhpcy5vYmplY3RUb1htbChtZXRob2QsIHBhcmFtcykuZW5kKHsgcHJldHR5UHJpbnQ6IHRydWUgfSk7XHJcbiAgICBjb25zb2xlLmxvZyh4bWwpO1xyXG5cclxuICAgIHJldHVybiByZXF1ZXN0KHtcclxuICAgICAgdXJsOiBgJHt0aGlzLm9wdGlvbnMudXJsLmhyZWZ9eG1scnBjLnBocGAsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3htbCcsXHJcbiAgICAgICAgJ1VzZXItQWdlbnQnOiAnb2JzaWRpYW4ubWQnXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IHhtbFxyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlVG9PYmplY3QocmVzKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9iamVjdFRvWG1sKG1ldGhvZDogc3RyaW5nLCAuLi5vYmo6IHVua25vd25bXSk6IFhNTEJ1aWxkZXIge1xyXG4gICAgY29uc3QgeG1sID0gY3JlYXRlKHsgdmVyc2lvbjogJzEuMCcgfSlcclxuICAgICAgLmVsZSgnbWV0aG9kQ2FsbCcpXHJcbiAgICAgIC5lbGUoJ21ldGhvZE5hbWUnKS50eHQobWV0aG9kKS51cCgpXHJcbiAgICAgIC5lbGUoJ3BhcmFtcycpO1xyXG4gICAgb2JqLmZvckVhY2goaXQgPT4gdGhpcy5jcmVhdGVQYXJhbShpdCwgeG1sKSk7XHJcbiAgICByZXR1cm4geG1sO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVQYXJhbShvYmo6IHVua25vd24sIHhtbDogWE1MQnVpbGRlcik6IHZvaWQge1xyXG4gICAgY29uc3QgcGFyYW0gPSB4bWwuZWxlKCdwYXJhbScpO1xyXG4gICAgdGhpcy5jcmVhdGVWYWx1ZShvYmosIHBhcmFtKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlVmFsdWUoZGF0YTogdW5rbm93biwgcGFyYW06IFhNTEJ1aWxkZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHZhbHVlID0gcGFyYW0uZWxlKCd2YWx1ZScpO1xyXG4gICAgaWYgKGlzU2FmZUludGVnZXIoZGF0YSkpIHtcclxuICAgICAgdmFsdWUuZWxlKCdpNCcpLnR4dCgoZGF0YSBhcyBhbnkpLnRvU3RyaW5nKCkpO1xyXG4gICAgfSBlbHNlIGlmIChpc051bWJlcihkYXRhKSkge1xyXG4gICAgICB2YWx1ZS5lbGUoJ2RvdWJsZScpLnR4dChkYXRhLnRvU3RyaW5nKCkpO1xyXG4gICAgfSBlbHNlIGlmIChpc0Jvb2xlYW4oZGF0YSkpIHtcclxuICAgICAgdmFsdWUuZWxlKCdib29sZWFuJykudHh0KGRhdGEgPyAnMScgOiAnMCcpO1xyXG4gICAgfSBlbHNlIGlmIChpc0RhdGUoZGF0YSkpIHtcclxuICAgICAgdmFsdWUuZWxlKCdkYXRlVGltZS5pc284NjAxJykudHh0KGZvcm1hdChkYXRhIGFzIERhdGUsICd5eXl5TU1kZFRISDptbTpzcycpKTtcclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xyXG4gICAgICBjb25zdCBhcnJheSA9IHZhbHVlXHJcbiAgICAgICAgLmVsZSgnYXJyYXknKVxyXG4gICAgICAgIC5lbGUoJ2RhdGEnKTtcclxuICAgICAgKGRhdGEgYXMgdW5rbm93bltdKS5mb3JFYWNoKGl0ID0+IHRoaXMuY3JlYXRlVmFsdWUoaXQsIGFycmF5KSk7XHJcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgIGNvbnN0IHN0cnVjdCA9IHZhbHVlLmVsZSgnc3RydWN0Jyk7XHJcbiAgICAgIGZvciAoY29uc3QgWyBwcm9wLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHtcclxuICAgICAgICBjb25zdCBtZW1iZXIgPSBzdHJ1Y3RcclxuICAgICAgICAgIC5lbGUoJ21lbWJlcicpXHJcbiAgICAgICAgICAuZWxlKCduYW1lJykudHh0KHByb3ApXHJcbiAgICAgICAgICAudXAoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVZhbHVlKHZhbHVlLCBtZW1iZXIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YWx1ZS5lbGUoJ3N0cmluZycpLmRhdCgoZGF0YSBhcyBhbnkpLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXNwb25zZVRvT2JqZWN0KHJlc3BvbnNlOiBzdHJpbmcpOiB1bmtub3duIHtcclxuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZShyZXNwb25zZSkuZW5kKHsgZm9ybWF0OiAnb2JqZWN0JyB9KTtcclxuICAgIGlmIChnZXQocmVzLCAnbWV0aG9kUmVzcG9uc2UucGFyYW1zJykpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZnJvbVZhbHVlKGdldChyZXMsICdtZXRob2RSZXNwb25zZS5wYXJhbXMucGFyYW0udmFsdWUnKSk7XHJcbiAgICB9IGVsc2UgaWYgKGdldChyZXMsICdtZXRob2RSZXNwb25zZS5mYXVsdCcpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmZyb21WYWx1ZShnZXQocmVzLCAnbWV0aG9kUmVzcG9uc2UuZmF1bHQudmFsdWUnKSk7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgWE1MLVJQQyByZXNwb25zZS4nKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZnJvbVZhbHVlKHZhbHVlOiB1bmtub3duKTogdW5rbm93biB7XHJcbiAgICBpZiAoZ2V0KHZhbHVlLCAnaTQnKSB8fCBnZXQodmFsdWUsICdpbnQnKSkge1xyXG4gICAgICByZXR1cm4gZ2V0KHZhbHVlLCAnaTQnKSB8fCBnZXQodmFsdWUsICdpbnQnKTtcclxuICAgIH0gZWxzZSBpZiAoZ2V0KHZhbHVlLCAnZG91YmxlJykpIHtcclxuICAgICAgcmV0dXJuIGdldCh2YWx1ZSwgJ2RvdWJsZScpO1xyXG4gICAgfSBlbHNlIGlmIChnZXQodmFsdWUsICdib29sZWFuJykpIHtcclxuICAgICAgcmV0dXJuIGdldCh2YWx1ZSwgJ2Jvb2xlYW4nKSA9PT0gJzEnO1xyXG4gICAgfSBlbHNlIGlmIChnZXQodmFsdWUsICdkYXRlVGltZS5pc284NjAxJykpIHtcclxuICAgICAgY29uc3QgZGF0ZXRpbWUgPSBnZXQodmFsdWUsICdkYXRlVGltZS5pc284NjAxJyk7XHJcbiAgICAgIGlmIChkYXRldGltZSkge1xyXG4gICAgICAgIHJldHVybiBwYXJzZShkYXRldGltZSwgJ3l5eXlNTWRkVEhIOm1tOnNzJywgbmV3IERhdGUoKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZ2V0KHZhbHVlLCAnYXJyYXknKSkge1xyXG4gICAgICBjb25zdCBhcnJheTogdW5rbm93bltdID0gW107XHJcbiAgICAgIGNvbnN0IGRhdGE6IHVua25vd24gPSBnZXQodmFsdWUsICdhcnJheS5kYXRhLnZhbHVlJyk7XHJcbiAgICAgIGlmIChpc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgZGF0YS5mb3JFYWNoKChpdDogdW5rbm93bikgPT4ge1xyXG4gICAgICAgICAgYXJyYXkucHVzaCh0aGlzLmZyb21WYWx1ZShpdCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFycmF5LnB1c2godGhpcy5mcm9tVmFsdWUoZGF0YSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH0gZWxzZSBpZiAoZ2V0KHZhbHVlLCAnc3RydWN0JykpIHtcclxuICAgICAgY29uc3Qgc3RydWN0OiBhbnkgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICBjb25zdCBtZW1iZXJzOiB1bmtub3duID0gZ2V0KHZhbHVlLCAnc3RydWN0Lm1lbWJlcicpO1xyXG4gICAgICBpZiAoaXNBcnJheShtZW1iZXJzKSkge1xyXG4gICAgICAgIG1lbWJlcnMuZm9yRWFjaCgobWVtYmVyOiB1bmtub3duKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0KG1lbWJlciwgJ25hbWUnKTtcclxuICAgICAgICAgIGlmIChuYW1lKSB7XHJcbiAgICAgICAgICAgIHN0cnVjdFtuYW1lXSA9IHRoaXMuZnJvbVZhbHVlKGdldChtZW1iZXIsICd2YWx1ZScpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBuYW1lID0gZ2V0KG1lbWJlcnMsICduYW1lJyk7XHJcbiAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgIHN0cnVjdFtuYW1lXSA9IHRoaXMuZnJvbVZhbHVlKGdldChtZW1iZXJzLCAndmFsdWUnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzdHJ1Y3Q7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZ2V0KHZhbHVlLCAnc3RyaW5nJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsICIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwgImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCAiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCAiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsICIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCAiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsICJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuIiwgIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TWFwO1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5O1xuIiwgImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVG9TdHJpbmc7XG4iLCAiLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0cmltbWVkRW5kSW5kZXg7XG4iLCAiaW1wb3J0IHRyaW1tZWRFbmRJbmRleCBmcm9tICcuL190cmltbWVkRW5kSW5kZXguanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUcmltO1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsICJpbXBvcnQgYmFzZVRyaW0gZnJvbSAnLi9fYmFzZVRyaW0uanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9OdW1iZXI7XG4iLCAiaW1wb3J0IHRvTnVtYmVyIGZyb20gJy4vdG9OdW1iZXIuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEyLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0Zpbml0ZSgzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvRmluaXRlKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICB9XG4gIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gIH1cbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9GaW5pdGU7XG4iLCAiaW1wb3J0IHRvRmluaXRlIGZyb20gJy4vdG9GaW5pdGUuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvSW50ZWdlcigzLjIpO1xuICogLy8gPT4gM1xuICpcbiAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gMFxuICpcbiAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gKlxuICogXy50b0ludGVnZXIoJzMuMicpO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0ludGVnZXI7XG4iLCAiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaWRlbnRpdHk7XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRnVuY3Rpb247XG4iLCAiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNvcmVKc0RhdGE7XG4iLCAiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwgIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCAiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc01hc2tlZCBmcm9tICcuL19pc01hc2tlZC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNOYXRpdmU7XG4iLCAiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwgImltcG9ydCBiYXNlSXNOYXRpdmUgZnJvbSAnLi9fYmFzZUlzTmF0aXZlLmpzJztcbmltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL19nZXRWYWx1ZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5hdGl2ZTtcbiIsICIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFwcGx5O1xuIiwgIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hvcnRPdXQ7XG4iLCAiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnN0YW50O1xuIiwgImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZVByb3BlcnR5O1xuIiwgImltcG9ydCBjb25zdGFudCBmcm9tICcuL2NvbnN0YW50LmpzJztcbmltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlU2V0VG9TdHJpbmc7XG4iLCAiaW1wb3J0IGJhc2VTZXRUb1N0cmluZyBmcm9tICcuL19iYXNlU2V0VG9TdHJpbmcuanMnO1xuaW1wb3J0IHNob3J0T3V0IGZyb20gJy4vX3Nob3J0T3V0LmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuZXhwb3J0IGRlZmF1bHQgc2V0VG9TdHJpbmc7XG4iLCAiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0luZGV4O1xuIiwgImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZTtcbiIsICIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG4iLCAiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ25WYWx1ZTtcbiIsICJpbXBvcnQgYXNzaWduVmFsdWUgZnJvbSAnLi9fYXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weU9iamVjdDtcbiIsICJpbXBvcnQgYXBwbHkgZnJvbSAnLi9fYXBwbHkuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyUmVzdDtcbiIsICJpbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgb3ZlclJlc3QgZnJvbSAnLi9fb3ZlclJlc3QuanMnO1xuaW1wb3J0IHNldFRvU3RyaW5nIGZyb20gJy4vX3NldFRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VSZXN0O1xuIiwgIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGg7XG4iLCAiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlMaWtlO1xuIiwgImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc0luZGV4IGZyb20gJy4vX2lzSW5kZXguanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSXRlcmF0ZWVDYWxsO1xuIiwgImltcG9ydCBiYXNlUmVzdCBmcm9tICcuL19iYXNlUmVzdC5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcjtcbiIsICIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvdG90eXBlO1xuIiwgIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUaW1lcztcbiIsICJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcmd1bWVudHM7XG4iLCAiaW1wb3J0IGJhc2VJc0FyZ3VtZW50cyBmcm9tICcuL19iYXNlSXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc0FyZ3VtZW50cztcbiIsICIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJGYWxzZTtcbiIsICJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwgImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzVHlwZWRBcnJheTtcbiIsICIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsICJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCAiaW1wb3J0IGJhc2VJc1R5cGVkQXJyYXkgZnJvbSAnLi9fYmFzZUlzVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNUeXBlZEFycmF5O1xuIiwgImltcG9ydCBiYXNlVGltZXMgZnJvbSAnLi9fYmFzZVRpbWVzLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TGlrZUtleXM7XG4iLCAiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCAiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5cztcbiIsICJpbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXMgZnJvbSAnLi9fbmF0aXZlS2V5cy5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXM7XG4iLCAiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXMgZnJvbSAnLi9fYmFzZUtleXMuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5cztcbiIsICIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5c0luO1xuIiwgImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5c0luIGZyb20gJy4vX25hdGl2ZUtleXNJbi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzSW47XG4iLCAiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXNJbiBmcm9tICcuL19iYXNlS2V5c0luLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXNJbjtcbiIsICJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBjcmVhdGVBc3NpZ25lciBmcm9tICcuL19jcmVhdGVBc3NpZ25lci5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gKiB9XG4gKlxuICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICpcbiAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKi9cbnZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzc2lnbkluV2l0aDtcbiIsICJpbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5O1xuIiwgImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlQ3JlYXRlO1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hDbGVhcjtcbiIsICIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoRGVsZXRlO1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoR2V0O1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCAiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwgIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCAiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NvY0luZGV4T2Y7XG4iLCAiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZURlbGV0ZTtcbiIsICJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsICJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVIYXM7XG4iLCAiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZVNldDtcbiIsICJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsICJpbXBvcnQgSGFzaCBmcm9tICcuL19IYXNoLmpzJztcbmltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUNsZWFyO1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNLZXlhYmxlO1xuIiwgImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwgImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVEZWxldGU7XG4iLCAiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCAiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwgImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlU2V0O1xuIiwgImltcG9ydCBtYXBDYWNoZUNsZWFyIGZyb20gJy4vX21hcENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IG1hcENhY2hlRGVsZXRlIGZyb20gJy4vX21hcENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBtYXBDYWNoZUdldCBmcm9tICcuL19tYXBDYWNoZUdldC5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVIYXMgZnJvbSAnLi9fbWFwQ2FjaGVIYXMuanMnO1xuaW1wb3J0IG1hcENhY2hlU2V0IGZyb20gJy4vX21hcENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcENhY2hlO1xuIiwgImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsICJpbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVDYXBwZWQ7XG4iLCAiaW1wb3J0IG1lbW9pemVDYXBwZWQgZnJvbSAnLi9fbWVtb2l6ZUNhcHBlZC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5nVG9QYXRoO1xuIiwgImltcG9ydCBiYXNlVG9TdHJpbmcgZnJvbSAnLi9fYmFzZVRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZztcbiIsICJpbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vX2lzS2V5LmpzJztcbmltcG9ydCBzdHJpbmdUb1BhdGggZnJvbSAnLi9fc3RyaW5nVG9QYXRoLmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FzdFBhdGg7XG4iLCAiaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9LZXk7XG4iLCAiaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vX2Nhc3RQYXRoLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXQ7XG4iLCAiaW1wb3J0IGJhc2VHZXQgZnJvbSAnLi9fYmFzZUdldC5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0O1xuIiwgImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwgImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsICJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRXJyb3IoRXJyb3IpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNFcnJvcjtcbiIsICJpbXBvcnQgYXBwbHkgZnJvbSAnLi9fYXBwbHkuanMnO1xuaW1wb3J0IGJhc2VSZXN0IGZyb20gJy4vX2Jhc2VSZXN0LmpzJztcbmltcG9ydCBpc0Vycm9yIGZyb20gJy4vaXNFcnJvci5qcyc7XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9ycy5cbiAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gKiB9LCAnPl8+Jyk7XG4gKlxuICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAqICAgZWxlbWVudHMgPSBbXTtcbiAqIH1cbiAqL1xudmFyIGF0dGVtcHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhdHRlbXB0O1xuIiwgIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5T2Y7XG4iLCAiaW1wb3J0IGJhc2VQcm9wZXJ0eU9mIGZyb20gJy4vX2Jhc2VQcm9wZXJ0eU9mLmpzJztcblxuLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbnZhciBodG1sRXNjYXBlcyA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7J1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICovXG52YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbmV4cG9ydCBkZWZhdWx0IGVzY2FwZUh0bWxDaGFyO1xuIiwgImltcG9ydCBlc2NhcGVIdG1sQ2hhciBmcm9tICcuL19lc2NhcGVIdG1sQ2hhci5qcyc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbnZhciByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gKlxuICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAqXG4gKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAqIFhTUyB2ZWN0b3JzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVzY2FwZTtcbiIsICJpbXBvcnQgYXJyYXlNYXAgZnJvbSAnLi9fYXJyYXlNYXAuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAqIG9mIGBwcm9wc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVZhbHVlcztcbiIsICJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Jvb2xlYW47XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzRGF0ZTtcbiIsICJpbXBvcnQgYmFzZUlzRGF0ZSBmcm9tICcuL19iYXNlSXNEYXRlLmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgaXNEYXRlO1xuIiwgImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi90b0ludGVnZXIuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNJbnRlZ2VyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0ludGVnZXI7XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc051bWJlcigzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc051bWJlcjtcbiIsICJpbXBvcnQgaXNJbnRlZ2VyIGZyb20gJy4vaXNJbnRlZ2VyLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU2FmZUludGVnZXI7XG4iLCAiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgcmV0dXJuIHNyY1ZhbHVlO1xuICB9XG4gIHJldHVybiBvYmpWYWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbjtcbiIsICIvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbnZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAnXFxcXCc6ICdcXFxcJyxcbiAgXCInXCI6IFwiJ1wiLFxuICAnXFxuJzogJ24nLFxuICAnXFxyJzogJ3InLFxuICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICdcXHUyMDI5JzogJ3UyMDI5J1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVzY2FwZVN0cmluZ0NoYXI7XG4iLCAiLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbnZhciByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbmV4cG9ydCBkZWZhdWx0IHJlSW50ZXJwb2xhdGU7XG4iLCAiLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbnZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nO1xuXG5leHBvcnQgZGVmYXVsdCByZUVzY2FwZTtcbiIsICIvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xudmFyIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nO1xuXG5leHBvcnQgZGVmYXVsdCByZUV2YWx1YXRlO1xuIiwgImltcG9ydCBlc2NhcGUgZnJvbSAnLi9lc2NhcGUuanMnO1xuaW1wb3J0IHJlRXNjYXBlIGZyb20gJy4vX3JlRXNjYXBlLmpzJztcbmltcG9ydCByZUV2YWx1YXRlIGZyb20gJy4vX3JlRXZhbHVhdGUuanMnO1xuaW1wb3J0IHJlSW50ZXJwb2xhdGUgZnJvbSAnLi9fcmVJbnRlcnBvbGF0ZS5qcyc7XG5cbi8qKlxuICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgdGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAvKipcbiAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICogQHR5cGUge1JlZ0V4cH1cbiAgICovXG4gICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAvKipcbiAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICogQHR5cGUge1JlZ0V4cH1cbiAgICovXG4gICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAqIEB0eXBlIHtSZWdFeHB9XG4gICAqL1xuICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICd2YXJpYWJsZSc6ICcnLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gICdpbXBvcnRzJzoge1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgICdfJzogeyAnZXNjYXBlJzogZXNjYXBlIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGVtcGxhdGVTZXR0aW5ncztcbiIsICJpbXBvcnQgYXNzaWduSW5XaXRoIGZyb20gJy4vYXNzaWduSW5XaXRoLmpzJztcbmltcG9ydCBhdHRlbXB0IGZyb20gJy4vYXR0ZW1wdC5qcyc7XG5pbXBvcnQgYmFzZVZhbHVlcyBmcm9tICcuL19iYXNlVmFsdWVzLmpzJztcbmltcG9ydCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluIGZyb20gJy4vX2N1c3RvbURlZmF1bHRzQXNzaWduSW4uanMnO1xuaW1wb3J0IGVzY2FwZVN0cmluZ0NoYXIgZnJvbSAnLi9fZXNjYXBlU3RyaW5nQ2hhci5qcyc7XG5pbXBvcnQgaXNFcnJvciBmcm9tICcuL2lzRXJyb3IuanMnO1xuaW1wb3J0IGlzSXRlcmF0ZWVDYWxsIGZyb20gJy4vX2lzSXRlcmF0ZWVDYWxsLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgcmVJbnRlcnBvbGF0ZSBmcm9tICcuL19yZUludGVycG9sYXRlLmpzJztcbmltcG9ydCB0ZW1wbGF0ZVNldHRpbmdzIGZyb20gJy4vdGVtcGxhdGVTZXR0aW5ncy5qcyc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUID0gJ0ludmFsaWQgYHZhcmlhYmxlYCBvcHRpb24gcGFzc2VkIGludG8gYF8udGVtcGxhdGVgJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbnZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuLyoqXG4gKiBVc2VkIHRvIHZhbGlkYXRlIHRoZSBgdmFsaWRhdGVgIG9wdGlvbiBpbiBgXy50ZW1wbGF0ZWAgdmFyaWFibGUuXG4gKlxuICogRm9yYmlkcyBjaGFyYWN0ZXJzIHdoaWNoIGNvdWxkIHBvdGVudGlhbGx5IGNoYW5nZSB0aGUgbWVhbmluZyBvZiB0aGUgZnVuY3Rpb24gYXJndW1lbnQgZGVmaW5pdGlvbjpcbiAqIC0gXCIoKSxcIiAobW9kaWZpY2F0aW9uIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICogLSBcIltde31cIiAoZGVzdHJ1Y3R1cmluZyBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICogLSBcIi9cIiAoYmVnaW5uaW5nIG9mIGEgY29tbWVudClcbiAqIC0gd2hpdGVzcGFjZVxuICovXG52YXIgcmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMgPSAvWygpPSx7fVxcW1xcXVxcL1xcc10vO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2hcbiAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gKi9cbnZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbi8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbnZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbnZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICpcbiAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSd0ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAqXG4gKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAqXG4gKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gKlxuICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICpcbiAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICpcbiAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gKlxuICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICpcbiAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gKiBjb21waWxlZChkYXRhKTtcbiAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gKlxuICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gKiBjb21waWxlZC5zb3VyY2U7XG4gKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gKiAvLyAgIHJldHVybiBfX3A7XG4gKiAvLyB9XG4gKlxuICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gKlxuICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gKiAgIHZhciBKU1QgPSB7XFxcbiAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICogICB9O1xcXG4gKiAnKTtcbiAqL1xuZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gIHZhciBzZXR0aW5ncyA9IHRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0cy5fLnRlbXBsYXRlU2V0dGluZ3MgfHwgdGVtcGxhdGVTZXR0aW5ncztcblxuICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICB9XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICB2YXIgaXNFc2NhcGluZyxcbiAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICwgJ2cnKTtcblxuICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgLy8gdG8gbm9ybWFsaXplIGFsbCBraW5kcyBvZiB3aGl0ZXNwYWNlLCBzbyBlLmcuIG5ld2xpbmVzIChhbmQgdW5pY29kZSB2ZXJzaW9ucyBvZiBpdCkgY2FuJ3Qgc25lYWsgaW5cbiAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICB2YXIgc291cmNlVVJMID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICA/ICgnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvXFxzL2csICcgJykgK1xuICAgICAgICdcXG4nKVxuICAgIDogJyc7XG5cbiAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgfVxuICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgIH1cbiAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgfVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH0pO1xuXG4gIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgaWYgKCF2YXJpYWJsZSkge1xuICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICB9XG4gIC8vIFRocm93IGFuIGVycm9yIGlmIGEgZm9yYmlkZGVuIGNoYXJhY3RlciB3YXMgZm91bmQgaW4gYHZhcmlhYmxlYCwgdG8gcHJldmVudFxuICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgZWxzZSBpZiAocmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMudGVzdCh2YXJpYWJsZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCk7XG4gIH1cblxuICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICh2YXJpYWJsZVxuICAgICAgPyAnJ1xuICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICkgK1xuICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgKGlzRXNjYXBpbmdcbiAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgIDogJydcbiAgICApICtcbiAgICAoaXNFdmFsdWF0aW5nXG4gICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICA6ICc7XFxuJ1xuICAgICkgK1xuICAgIHNvdXJjZSArXG4gICAgJ3JldHVybiBfX3BcXG59JztcblxuICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICB9KTtcblxuICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgIHRocm93IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0ZW1wbGF0ZTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJlc1wiIC1vIC4vYFxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5leHBvcnQgeyBkZWZhdWx0IGFzIGFkZCB9IGZyb20gJy4vYWRkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYWZ0ZXIgfSBmcm9tICcuL2FmdGVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXJ5IH0gZnJvbSAnLi9hcnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBhc3NpZ24gfSBmcm9tICcuL2Fzc2lnbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFzc2lnbkluIH0gZnJvbSAnLi9hc3NpZ25Jbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFzc2lnbkluV2l0aCB9IGZyb20gJy4vYXNzaWduSW5XaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXNzaWduV2l0aCB9IGZyb20gJy4vYXNzaWduV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGF0IH0gZnJvbSAnLi9hdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGF0dGVtcHQgfSBmcm9tICcuL2F0dGVtcHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBiZWZvcmUgfSBmcm9tICcuL2JlZm9yZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGJpbmQgfSBmcm9tICcuL2JpbmQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBiaW5kQWxsIH0gZnJvbSAnLi9iaW5kQWxsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYmluZEtleSB9IGZyb20gJy4vYmluZEtleS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhbWVsQ2FzZSB9IGZyb20gJy4vY2FtZWxDYXNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJy4vY2FwaXRhbGl6ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhc3RBcnJheSB9IGZyb20gJy4vY2FzdEFycmF5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2VpbCB9IGZyb20gJy4vY2VpbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNoYWluIH0gZnJvbSAnLi9jaGFpbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNodW5rIH0gZnJvbSAnLi9jaHVuay5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNsYW1wIH0gZnJvbSAnLi9jbGFtcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNsb25lIH0gZnJvbSAnLi9jbG9uZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNsb25lRGVlcCB9IGZyb20gJy4vY2xvbmVEZWVwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2xvbmVEZWVwV2l0aCB9IGZyb20gJy4vY2xvbmVEZWVwV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNsb25lV2l0aCB9IGZyb20gJy4vY2xvbmVXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29tbWl0IH0gZnJvbSAnLi9jb21taXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjb21wYWN0IH0gZnJvbSAnLi9jb21wYWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29uY2F0IH0gZnJvbSAnLi9jb25jYXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjb25kIH0gZnJvbSAnLi9jb25kLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29uZm9ybXMgfSBmcm9tICcuL2NvbmZvcm1zLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29uZm9ybXNUbyB9IGZyb20gJy4vY29uZm9ybXNUby5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvbnN0YW50IH0gZnJvbSAnLi9jb25zdGFudC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNvdW50QnkgfSBmcm9tICcuL2NvdW50QnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGUgfSBmcm9tICcuL2NyZWF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGN1cnJ5IH0gZnJvbSAnLi9jdXJyeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGN1cnJ5UmlnaHQgfSBmcm9tICcuL2N1cnJ5UmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWJvdW5jZSB9IGZyb20gJy4vZGVib3VuY2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWJ1cnIgfSBmcm9tICcuL2RlYnVyci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHRUbyB9IGZyb20gJy4vZGVmYXVsdFRvLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmYXVsdHMgfSBmcm9tICcuL2RlZmF1bHRzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVmYXVsdHNEZWVwIH0gZnJvbSAnLi9kZWZhdWx0c0RlZXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWZlciB9IGZyb20gJy4vZGVmZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWxheSB9IGZyb20gJy4vZGVsYXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkaWZmZXJlbmNlIH0gZnJvbSAnLi9kaWZmZXJlbmNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGlmZmVyZW5jZUJ5IH0gZnJvbSAnLi9kaWZmZXJlbmNlQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkaWZmZXJlbmNlV2l0aCB9IGZyb20gJy4vZGlmZmVyZW5jZVdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkaXZpZGUgfSBmcm9tICcuL2RpdmlkZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRyb3AgfSBmcm9tICcuL2Ryb3AuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkcm9wUmlnaHQgfSBmcm9tICcuL2Ryb3BSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRyb3BSaWdodFdoaWxlIH0gZnJvbSAnLi9kcm9wUmlnaHRXaGlsZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRyb3BXaGlsZSB9IGZyb20gJy4vZHJvcFdoaWxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZWFjaCB9IGZyb20gJy4vZWFjaC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVhY2hSaWdodCB9IGZyb20gJy4vZWFjaFJpZ2h0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZW5kc1dpdGggfSBmcm9tICcuL2VuZHNXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZW50cmllcyB9IGZyb20gJy4vZW50cmllcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGVudHJpZXNJbiB9IGZyb20gJy4vZW50cmllc0luLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXEgfSBmcm9tICcuL2VxLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXNjYXBlIH0gZnJvbSAnLi9lc2NhcGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBlc2NhcGVSZWdFeHAgfSBmcm9tICcuL2VzY2FwZVJlZ0V4cC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV2ZXJ5IH0gZnJvbSAnLi9ldmVyeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGV4dGVuZCB9IGZyb20gJy4vZXh0ZW5kLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXh0ZW5kV2l0aCB9IGZyb20gJy4vZXh0ZW5kV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpbGwgfSBmcm9tICcuL2ZpbGwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaWx0ZXIgfSBmcm9tICcuL2ZpbHRlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpbmQgfSBmcm9tICcuL2ZpbmQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaW5kSW5kZXggfSBmcm9tICcuL2ZpbmRJbmRleC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZpbmRLZXkgfSBmcm9tICcuL2ZpbmRLZXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaW5kTGFzdCB9IGZyb20gJy4vZmluZExhc3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmaW5kTGFzdEluZGV4IH0gZnJvbSAnLi9maW5kTGFzdEluZGV4LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmluZExhc3RLZXkgfSBmcm9tICcuL2ZpbmRMYXN0S2V5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmlyc3QgfSBmcm9tICcuL2ZpcnN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmxhdE1hcCB9IGZyb20gJy4vZmxhdE1hcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsYXRNYXBEZWVwIH0gZnJvbSAnLi9mbGF0TWFwRGVlcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsYXRNYXBEZXB0aCB9IGZyb20gJy4vZmxhdE1hcERlcHRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmxhdHRlbiB9IGZyb20gJy4vZmxhdHRlbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsYXR0ZW5EZWVwIH0gZnJvbSAnLi9mbGF0dGVuRGVlcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsYXR0ZW5EZXB0aCB9IGZyb20gJy4vZmxhdHRlbkRlcHRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmxpcCB9IGZyb20gJy4vZmxpcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsb29yIH0gZnJvbSAnLi9mbG9vci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZsb3cgfSBmcm9tICcuL2Zsb3cuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmbG93UmlnaHQgfSBmcm9tICcuL2Zsb3dSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZvckVhY2ggfSBmcm9tICcuL2ZvckVhY2guanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmb3JFYWNoUmlnaHQgfSBmcm9tICcuL2ZvckVhY2hSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZvckluIH0gZnJvbSAnLi9mb3JJbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZvckluUmlnaHQgfSBmcm9tICcuL2ZvckluUmlnaHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmb3JPd24gfSBmcm9tICcuL2Zvck93bi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZvck93blJpZ2h0IH0gZnJvbSAnLi9mb3JPd25SaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGZyb21QYWlycyB9IGZyb20gJy4vZnJvbVBhaXJzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZnVuY3Rpb25zIH0gZnJvbSAnLi9mdW5jdGlvbnMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBmdW5jdGlvbnNJbiB9IGZyb20gJy4vZnVuY3Rpb25zSW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXQgfSBmcm9tICcuL2dldC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdyb3VwQnkgfSBmcm9tICcuL2dyb3VwQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBndCB9IGZyb20gJy4vZ3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBndGUgfSBmcm9tICcuL2d0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGhhcyB9IGZyb20gJy4vaGFzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaGFzSW4gfSBmcm9tICcuL2hhc0luLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaGVhZCB9IGZyb20gJy4vaGVhZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGluUmFuZ2UgfSBmcm9tICcuL2luUmFuZ2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbmNsdWRlcyB9IGZyb20gJy4vaW5jbHVkZXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbmRleE9mIH0gZnJvbSAnLi9pbmRleE9mLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW5pdGlhbCB9IGZyb20gJy4vaW5pdGlhbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludGVyc2VjdGlvbiB9IGZyb20gJy4vaW50ZXJzZWN0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW50ZXJzZWN0aW9uQnkgfSBmcm9tICcuL2ludGVyc2VjdGlvbkJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW50ZXJzZWN0aW9uV2l0aCB9IGZyb20gJy4vaW50ZXJzZWN0aW9uV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGludmVydCB9IGZyb20gJy4vaW52ZXJ0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW52ZXJ0QnkgfSBmcm9tICcuL2ludmVydEJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaW52b2tlIH0gZnJvbSAnLi9pbnZva2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpbnZva2VNYXAgfSBmcm9tICcuL2ludm9rZU1hcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJndW1lbnRzIH0gZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzQXJyYXkgfSBmcm9tICcuL2lzQXJyYXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0FycmF5QnVmZmVyIH0gZnJvbSAnLi9pc0FycmF5QnVmZmVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNBcnJheUxpa2UgfSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNBcnJheUxpa2VPYmplY3QgfSBmcm9tICcuL2lzQXJyYXlMaWtlT2JqZWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNCb29sZWFuIH0gZnJvbSAnLi9pc0Jvb2xlYW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0J1ZmZlciB9IGZyb20gJy4vaXNCdWZmZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0RhdGUgfSBmcm9tICcuL2lzRGF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRWxlbWVudCB9IGZyb20gJy4vaXNFbGVtZW50LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNFbXB0eSB9IGZyb20gJy4vaXNFbXB0eS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzRXF1YWwgfSBmcm9tICcuL2lzRXF1YWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0VxdWFsV2l0aCB9IGZyb20gJy4vaXNFcXVhbFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0Vycm9yIH0gZnJvbSAnLi9pc0Vycm9yLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNGaW5pdGUgfSBmcm9tICcuL2lzRmluaXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzSW50ZWdlciB9IGZyb20gJy4vaXNJbnRlZ2VyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNMZW5ndGggfSBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNNYXAgfSBmcm9tICcuL2lzTWFwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNNYXRjaCB9IGZyb20gJy4vaXNNYXRjaC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTWF0Y2hXaXRoIH0gZnJvbSAnLi9pc01hdGNoV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTmFOIH0gZnJvbSAnLi9pc05hTi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTmF0aXZlIH0gZnJvbSAnLi9pc05hdGl2ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTmlsIH0gZnJvbSAnLi9pc05pbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTnVsbCB9IGZyb20gJy4vaXNOdWxsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNOdW1iZXIgfSBmcm9tICcuL2lzTnVtYmVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNPYmplY3QgfSBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNPYmplY3RMaWtlIH0gZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnLi9pc1BsYWluT2JqZWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNSZWdFeHAgfSBmcm9tICcuL2lzUmVnRXhwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNTYWZlSW50ZWdlciB9IGZyb20gJy4vaXNTYWZlSW50ZWdlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzU2V0IH0gZnJvbSAnLi9pc1NldC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzU3RyaW5nIH0gZnJvbSAnLi9pc1N0cmluZy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzU3ltYm9sIH0gZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzVHlwZWRBcnJheSB9IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNVbmRlZmluZWQgfSBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNXZWFrTWFwIH0gZnJvbSAnLi9pc1dlYWtNYXAuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc1dlYWtTZXQgfSBmcm9tICcuL2lzV2Vha1NldC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGl0ZXJhdGVlIH0gZnJvbSAnLi9pdGVyYXRlZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGpvaW4gfSBmcm9tICcuL2pvaW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBrZWJhYkNhc2UgfSBmcm9tICcuL2tlYmFiQ2FzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGtleUJ5IH0gZnJvbSAnLi9rZXlCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGtleXMgfSBmcm9tICcuL2tleXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBrZXlzSW4gfSBmcm9tICcuL2tleXNJbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGxhc3QgfSBmcm9tICcuL2xhc3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsYXN0SW5kZXhPZiB9IGZyb20gJy4vbGFzdEluZGV4T2YuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsb2Rhc2ggfSBmcm9tICcuL3dyYXBwZXJMb2Rhc2guanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsb3dlckNhc2UgfSBmcm9tICcuL2xvd2VyQ2FzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGxvd2VyRmlyc3QgfSBmcm9tICcuL2xvd2VyRmlyc3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsdCB9IGZyb20gJy4vbHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBsdGUgfSBmcm9tICcuL2x0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1hcCB9IGZyb20gJy4vbWFwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWFwS2V5cyB9IGZyb20gJy4vbWFwS2V5cy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1hcFZhbHVlcyB9IGZyb20gJy4vbWFwVmFsdWVzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWF0Y2hlcyB9IGZyb20gJy4vbWF0Y2hlcy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1hdGNoZXNQcm9wZXJ0eSB9IGZyb20gJy4vbWF0Y2hlc1Byb3BlcnR5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWF4IH0gZnJvbSAnLi9tYXguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtYXhCeSB9IGZyb20gJy4vbWF4QnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZWFuIH0gZnJvbSAnLi9tZWFuLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWVhbkJ5IH0gZnJvbSAnLi9tZWFuQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZW1vaXplIH0gZnJvbSAnLi9tZW1vaXplLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWVyZ2UgfSBmcm9tICcuL21lcmdlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWVyZ2VXaXRoIH0gZnJvbSAnLi9tZXJnZVdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBtZXRob2QgfSBmcm9tICcuL21ldGhvZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1ldGhvZE9mIH0gZnJvbSAnLi9tZXRob2RPZi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG1pbiB9IGZyb20gJy4vbWluLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWluQnkgfSBmcm9tICcuL21pbkJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbWl4aW4gfSBmcm9tICcuL21peGluLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbXVsdGlwbHkgfSBmcm9tICcuL211bHRpcGx5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbmVnYXRlIH0gZnJvbSAnLi9uZWdhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBuZXh0IH0gZnJvbSAnLi9uZXh0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbm9vcCB9IGZyb20gJy4vbm9vcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG5vdyB9IGZyb20gJy4vbm93LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgbnRoIH0gZnJvbSAnLi9udGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBudGhBcmcgfSBmcm9tICcuL250aEFyZy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG9taXQgfSBmcm9tICcuL29taXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvbWl0QnkgfSBmcm9tICcuL29taXRCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG9uY2UgfSBmcm9tICcuL29uY2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvcmRlckJ5IH0gZnJvbSAnLi9vcmRlckJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3ZlciB9IGZyb20gJy4vb3Zlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG92ZXJBcmdzIH0gZnJvbSAnLi9vdmVyQXJncy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG92ZXJFdmVyeSB9IGZyb20gJy4vb3ZlckV2ZXJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3ZlclNvbWUgfSBmcm9tICcuL292ZXJTb21lLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFkIH0gZnJvbSAnLi9wYWQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYWRFbmQgfSBmcm9tICcuL3BhZEVuZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhZFN0YXJ0IH0gZnJvbSAnLi9wYWRTdGFydC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlSW50IH0gZnJvbSAnLi9wYXJzZUludC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnRpYWwgfSBmcm9tICcuL3BhcnRpYWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJ0aWFsUmlnaHQgfSBmcm9tICcuL3BhcnRpYWxSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnRpdGlvbiB9IGZyb20gJy4vcGFydGl0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGljayB9IGZyb20gJy4vcGljay5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBpY2tCeSB9IGZyb20gJy4vcGlja0J5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGxhbnQgfSBmcm9tICcuL3BsYW50LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHJvcGVydHkgfSBmcm9tICcuL3Byb3BlcnR5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHJvcGVydHlPZiB9IGZyb20gJy4vcHJvcGVydHlPZi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHB1bGwgfSBmcm9tICcuL3B1bGwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwdWxsQWxsIH0gZnJvbSAnLi9wdWxsQWxsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHVsbEFsbEJ5IH0gZnJvbSAnLi9wdWxsQWxsQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwdWxsQWxsV2l0aCB9IGZyb20gJy4vcHVsbEFsbFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwdWxsQXQgfSBmcm9tICcuL3B1bGxBdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJhbmRvbSB9IGZyb20gJy4vcmFuZG9tLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmFuZ2UgfSBmcm9tICcuL3JhbmdlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmFuZ2VSaWdodCB9IGZyb20gJy4vcmFuZ2VSaWdodC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlYXJnIH0gZnJvbSAnLi9yZWFyZy5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlZHVjZSB9IGZyb20gJy4vcmVkdWNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVkdWNlUmlnaHQgfSBmcm9tICcuL3JlZHVjZVJpZ2h0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVqZWN0IH0gZnJvbSAnLi9yZWplY3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZW1vdmUgfSBmcm9tICcuL3JlbW92ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlcGVhdCB9IGZyb20gJy4vcmVwZWF0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVwbGFjZSB9IGZyb20gJy4vcmVwbGFjZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlc3QgfSBmcm9tICcuL3Jlc3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByZXN1bHQgfSBmcm9tICcuL3Jlc3VsdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJldmVyc2UgfSBmcm9tICcuL3JldmVyc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyByb3VuZCB9IGZyb20gJy4vcm91bmQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzYW1wbGUgfSBmcm9tICcuL3NhbXBsZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNhbXBsZVNpemUgfSBmcm9tICcuL3NhbXBsZVNpemUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzZXQgfSBmcm9tICcuL3NldC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNldFdpdGggfSBmcm9tICcuL3NldFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzaHVmZmxlIH0gZnJvbSAnLi9zaHVmZmxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2l6ZSB9IGZyb20gJy4vc2l6ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNsaWNlIH0gZnJvbSAnLi9zbGljZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNuYWtlQ2FzZSB9IGZyb20gJy4vc25ha2VDYXNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc29tZSB9IGZyb20gJy4vc29tZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvcnRCeSB9IGZyb20gJy4vc29ydEJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc29ydGVkSW5kZXggfSBmcm9tICcuL3NvcnRlZEluZGV4LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc29ydGVkSW5kZXhCeSB9IGZyb20gJy4vc29ydGVkSW5kZXhCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvcnRlZEluZGV4T2YgfSBmcm9tICcuL3NvcnRlZEluZGV4T2YuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0ZWRMYXN0SW5kZXggfSBmcm9tICcuL3NvcnRlZExhc3RJbmRleC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvcnRlZExhc3RJbmRleEJ5IH0gZnJvbSAnLi9zb3J0ZWRMYXN0SW5kZXhCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvcnRlZExhc3RJbmRleE9mIH0gZnJvbSAnLi9zb3J0ZWRMYXN0SW5kZXhPZi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNvcnRlZFVuaXEgfSBmcm9tICcuL3NvcnRlZFVuaXEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzb3J0ZWRVbmlxQnkgfSBmcm9tICcuL3NvcnRlZFVuaXFCeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNwbGl0IH0gZnJvbSAnLi9zcGxpdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNwcmVhZCB9IGZyb20gJy4vc3ByZWFkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3RhcnRDYXNlIH0gZnJvbSAnLi9zdGFydENhc2UuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdGFydHNXaXRoIH0gZnJvbSAnLi9zdGFydHNXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3R1YkFycmF5IH0gZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHViRmFsc2UgfSBmcm9tICcuL3N0dWJGYWxzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0dWJPYmplY3QgfSBmcm9tICcuL3N0dWJPYmplY3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHViU3RyaW5nIH0gZnJvbSAnLi9zdHViU3RyaW5nLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3R1YlRydWUgfSBmcm9tICcuL3N0dWJUcnVlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3VidHJhY3QgfSBmcm9tICcuL3N1YnRyYWN0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3VtIH0gZnJvbSAnLi9zdW0uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdW1CeSB9IGZyb20gJy4vc3VtQnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0YWlsIH0gZnJvbSAnLi90YWlsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGFrZSB9IGZyb20gJy4vdGFrZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRha2VSaWdodCB9IGZyb20gJy4vdGFrZVJpZ2h0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGFrZVJpZ2h0V2hpbGUgfSBmcm9tICcuL3Rha2VSaWdodFdoaWxlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGFrZVdoaWxlIH0gZnJvbSAnLi90YWtlV2hpbGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0YXAgfSBmcm9tICcuL3RhcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRlbXBsYXRlU2V0dGluZ3MgfSBmcm9tICcuL3RlbXBsYXRlU2V0dGluZ3MuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0aHJvdHRsZSB9IGZyb20gJy4vdGhyb3R0bGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0aHJ1IH0gZnJvbSAnLi90aHJ1LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGltZXMgfSBmcm9tICcuL3RpbWVzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9BcnJheSB9IGZyb20gJy4vdG9BcnJheS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvRmluaXRlIH0gZnJvbSAnLi90b0Zpbml0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvSW50ZWdlciB9IGZyb20gJy4vdG9JbnRlZ2VyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9JdGVyYXRvciB9IGZyb20gJy4vdG9JdGVyYXRvci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvSlNPTiB9IGZyb20gJy4vdG9KU09OLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9MZW5ndGggfSBmcm9tICcuL3RvTGVuZ3RoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9Mb3dlciB9IGZyb20gJy4vdG9Mb3dlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvTnVtYmVyIH0gZnJvbSAnLi90b051bWJlci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvUGFpcnMgfSBmcm9tICcuL3RvUGFpcnMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b1BhaXJzSW4gfSBmcm9tICcuL3RvUGFpcnNJbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvUGF0aCB9IGZyb20gJy4vdG9QYXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdG9QbGFpbk9iamVjdCB9IGZyb20gJy4vdG9QbGFpbk9iamVjdC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvU2FmZUludGVnZXIgfSBmcm9tICcuL3RvU2FmZUludGVnZXIuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b1N0cmluZyB9IGZyb20gJy4vdG9TdHJpbmcuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0b1VwcGVyIH0gZnJvbSAnLi90b1VwcGVyLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdHJhbnNmb3JtIH0gZnJvbSAnLi90cmFuc2Zvcm0uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB0cmltIH0gZnJvbSAnLi90cmltLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdHJpbUVuZCB9IGZyb20gJy4vdHJpbUVuZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHRyaW1TdGFydCB9IGZyb20gJy4vdHJpbVN0YXJ0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdHJ1bmNhdGUgfSBmcm9tICcuL3RydW5jYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5hcnkgfSBmcm9tICcuL3VuYXJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5lc2NhcGUgfSBmcm9tICcuL3VuZXNjYXBlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5pb24gfSBmcm9tICcuL3VuaW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5pb25CeSB9IGZyb20gJy4vdW5pb25CeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaW9uV2l0aCB9IGZyb20gJy4vdW5pb25XaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5pcSB9IGZyb20gJy4vdW5pcS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuaXFCeSB9IGZyb20gJy4vdW5pcUJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5pcVdpdGggfSBmcm9tICcuL3VuaXFXaXRoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5pcXVlSWQgfSBmcm9tICcuL3VuaXF1ZUlkLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW5zZXQgfSBmcm9tICcuL3Vuc2V0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW56aXAgfSBmcm9tICcuL3VuemlwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdW56aXBXaXRoIH0gZnJvbSAnLi91bnppcFdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1cGRhdGUgfSBmcm9tICcuL3VwZGF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVwZGF0ZVdpdGggfSBmcm9tICcuL3VwZGF0ZVdpdGguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1cHBlckNhc2UgfSBmcm9tICcuL3VwcGVyQ2FzZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVwcGVyRmlyc3QgfSBmcm9tICcuL3VwcGVyRmlyc3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWx1ZSB9IGZyb20gJy4vdmFsdWUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWx1ZU9mIH0gZnJvbSAnLi92YWx1ZU9mLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsdWVzIH0gZnJvbSAnLi92YWx1ZXMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWx1ZXNJbiB9IGZyb20gJy4vdmFsdWVzSW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRob3V0IH0gZnJvbSAnLi93aXRob3V0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd29yZHMgfSBmcm9tICcuL3dvcmRzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHdyYXBwZXJBdCB9IGZyb20gJy4vd3JhcHBlckF0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlckNoYWluIH0gZnJvbSAnLi93cmFwcGVyQ2hhaW4uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3cmFwcGVyQ29tbWl0IH0gZnJvbSAnLi9jb21taXQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3cmFwcGVyTG9kYXNoIH0gZnJvbSAnLi93cmFwcGVyTG9kYXNoLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlck5leHQgfSBmcm9tICcuL25leHQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3cmFwcGVyUGxhbnQgfSBmcm9tICcuL3BsYW50LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlclJldmVyc2UgfSBmcm9tICcuL3dyYXBwZXJSZXZlcnNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd3JhcHBlclRvSXRlcmF0b3IgfSBmcm9tICcuL3RvSXRlcmF0b3IuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3cmFwcGVyVmFsdWUgfSBmcm9tICcuL3dyYXBwZXJWYWx1ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHhvciB9IGZyb20gJy4veG9yLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgeG9yQnkgfSBmcm9tICcuL3hvckJ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgeG9yV2l0aCB9IGZyb20gJy4veG9yV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHppcCB9IGZyb20gJy4vemlwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgemlwT2JqZWN0IH0gZnJvbSAnLi96aXBPYmplY3QuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB6aXBPYmplY3REZWVwIH0gZnJvbSAnLi96aXBPYmplY3REZWVwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgemlwV2l0aCB9IGZyb20gJy4vemlwV2l0aC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9sb2Rhc2guZGVmYXVsdC5qcyc7XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCAiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwgInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwgIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsICIvKipcbiAqIERheXMgaW4gMSB3ZWVrLlxuICpcbiAqIEBuYW1lIGRheXNJbldlZWtcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cbmV4cG9ydCB2YXIgZGF5c0luV2VlayA9IDc7XG4vKipcbiAqIERheXMgaW4gMSB5ZWFyXG4gKiBPbmUgeWVhcnMgZXF1YWxzIDM2NS4yNDI1IGRheXMgYWNjb3JkaW5nIHRvIHRoZSBmb3JtdWxhOlxuICpcbiAqID4gTGVhcCB5ZWFyIG9jY3VyZXMgZXZlcnkgNCB5ZWFycywgZXhjZXB0IGZvciB5ZWFycyB0aGF0IGFyZSBkaXZpc2FibGUgYnkgMTAwIGFuZCBub3QgZGl2aXNhYmxlIGJ5IDQwMC5cbiAqID4gMSBtZWFuIHllYXIgPSAoMzY1KzEvNC0xLzEwMCsxLzQwMCkgZGF5cyA9IDM2NS4yNDI1IGRheXNcbiAqXG4gKiBAbmFtZSBkYXlzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgZGF5c0luWWVhciA9IDM2NS4yNDI1O1xuLyoqXG4gKiBNYXhpbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtYXhUaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWF4VGltZSA9IE1hdGgucG93KDEwLCA4KSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luTWludXRlXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luSG91ciA9IDM2MDAwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIHNlY29uZFxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5TZWNvbmQgPSAxMDAwO1xuLyoqXG4gKiBNaW5pbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtaW5UaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWluVGltZSA9IC1tYXhUaW1lO1xuLyoqXG4gKiBNaW51dGVzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaW51dGVzSW5Ib3VyID0gNjA7XG4vKipcbiAqIE1vbnRocyBpbiAxIHF1YXJ0ZXJcbiAqXG4gKiBAbmFtZSBtb250aHNJblF1YXJ0ZXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtb250aHNJblF1YXJ0ZXIgPSAzO1xuLyoqXG4gKiBNb250aHMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgbW9udGhzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbW9udGhzSW5ZZWFyID0gMTI7XG4vKipcbiAqIFF1YXJ0ZXJzIGluIDEgeWVhclxuICpcbiAqIEBuYW1lIHF1YXJ0ZXJzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgcXVhcnRlcnNJblllYXIgPSA0O1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIHNlY29uZHNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbk1pbnV0ZSA9IDYwO1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgZGF5XG4gKlxuICogQG5hbWUgc2Vjb25kc0luRGF5XG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luRGF5ID0gc2Vjb25kc0luSG91ciAqIDI0O1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgd2Vla1xuICpcbiAqIEBuYW1lIHNlY29uZHNJbldlZWtcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5XZWVrID0gc2Vjb25kc0luRGF5ICogNztcbi8qKlxuICogU2Vjb25kcyBpbiAxIHllYXJcbiAqXG4gKiBAbmFtZSBzZWNvbmRzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luWWVhciA9IHNlY29uZHNJbkRheSAqIGRheXNJblllYXI7XG4vKipcbiAqIFNlY29uZHMgaW4gMSBtb250aFxuICpcbiAqIEBuYW1lIHNlY29uZHNJbk1vbnRoXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgc2Vjb25kc0luTW9udGggPSBzZWNvbmRzSW5ZZWFyIC8gMTI7XG4vKipcbiAqIFNlY29uZHMgaW4gMSBxdWFydGVyXG4gKlxuICogQG5hbWUgc2Vjb25kc0luUXVhcnRlclxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJblF1YXJ0ZXIgPSBzZWNvbmRzSW5Nb250aCAqIDM7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCAiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKCFpc0RhdGUoZGlydHlEYXRlKSAmJiB0eXBlb2YgZGlydHlEYXRlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCAiaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCAiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDApOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsICJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwgImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsICJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG5cbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiBHKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIFkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjsgLy8gVHdvIGRpZ2l0IHllYXJcblxuICAgIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgICAgdmFyIHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH0gLy8gT3JkaW5hbCBudW1iZXJcblxuXG4gICAgaWYgKHRva2VuID09PSAnWW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrWWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH0gLy8gUGFkZGluZ1xuXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiBSKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIHUoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gUShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiBxKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiBNKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiBMKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKG1vbnRoICsgMSk7XG4gICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgY2FzZSAnTEwnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiB3KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiBJKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiBkKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENEYXRlKCksIHtcbiAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiBEKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIEUoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIGUoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnZWUnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiBjKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiBpKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gYShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiBiKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gQihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuaChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiBLKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIGsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gUyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIFgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcblxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIHgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gTyhkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIHooZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiB0KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIFQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuXG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCAidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgdGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCAidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsICJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcblxudmFyIGZvcm1hdERpc3RhbmNlID0gZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsICJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCAidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsICJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gYXJndW1lbnRDYWxsYmFjayhxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCAiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayhpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCAiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsICJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0TG9jYWxlOyIsICJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiBcdTI2QTBcdUZFMEYgUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUzLCBfb3B0aW9ucyRsb2NhbGUzJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQ7XG5cbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIG9iamVjdCkge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhc3NpZ24gcmVxdWlyZXMgdGhhdCBpbnB1dCBwYXJhbWV0ZXIgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cblxuICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICA7XG4gICAgICB0YXJnZXRbcHJvcGVydHldID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIFRJTUVaT05FX1VOSVRfUFJJT1JJVFkgPSAxMDtcbmV4cG9ydCB2YXIgU2V0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2V0dGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZXR0ZXIpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3ViUHJpb3JpdHlcIiwgMCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2V0dGVyLCBbe1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfdXRjRGF0ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZXR0ZXI7XG59KCk7XG5leHBvcnQgdmFyIFZhbHVlU2V0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU2V0dGVyKSB7XG4gIF9pbmhlcml0cyhWYWx1ZVNldHRlciwgX1NldHRlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihWYWx1ZVNldHRlcik7XG5cbiAgZnVuY3Rpb24gVmFsdWVTZXR0ZXIodmFsdWUsIHZhbGlkYXRlVmFsdWUsIHNldFZhbHVlLCBwcmlvcml0eSwgc3ViUHJpb3JpdHkpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsdWVTZXR0ZXIpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIF90aGlzLnZhbGlkYXRlVmFsdWUgPSB2YWxpZGF0ZVZhbHVlO1xuICAgIF90aGlzLnNldFZhbHVlID0gc2V0VmFsdWU7XG4gICAgX3RoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcblxuICAgIGlmIChzdWJQcmlvcml0eSkge1xuICAgICAgX3RoaXMuc3ViUHJpb3JpdHkgPSBzdWJQcmlvcml0eTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmFsdWVTZXR0ZXIsIFt7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKHV0Y0RhdGUsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlVmFsdWUodXRjRGF0ZSwgdGhpcy52YWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQodXRjRGF0ZSwgZmxhZ3MsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFZhbHVlKHV0Y0RhdGUsIGZsYWdzLCB0aGlzLnZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmFsdWVTZXR0ZXI7XG59KFNldHRlcik7XG5leHBvcnQgdmFyIERhdGVUb1N5c3RlbVRpbWV6b25lU2V0dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU2V0dGVyMikge1xuICBfaW5oZXJpdHMoRGF0ZVRvU3lzdGVtVGltZXpvbmVTZXR0ZXIsIF9TZXR0ZXIyKTtcblxuICB2YXIgX3N1cGVyMiA9IF9jcmVhdGVTdXBlcihEYXRlVG9TeXN0ZW1UaW1lem9uZVNldHRlcik7XG5cbiAgZnVuY3Rpb24gRGF0ZVRvU3lzdGVtVGltZXpvbmVTZXR0ZXIoKSB7XG4gICAgdmFyIF90aGlzMjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlVG9TeXN0ZW1UaW1lem9uZVNldHRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMyID0gX3N1cGVyMi5jYWxsLmFwcGx5KF9zdXBlcjIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSwgXCJwcmlvcml0eVwiLCBUSU1FWk9ORV9VTklUX1BSSU9SSVRZKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksIFwic3ViUHJpb3JpdHlcIiwgLTEpO1xuXG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEYXRlVG9TeXN0ZW1UaW1lem9uZVNldHRlciwgW3tcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkYXRlLCBmbGFncykge1xuICAgICAgaWYgKGZsYWdzLnRpbWVzdGFtcElzU2V0KSB7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udmVydGVkRGF0ZSA9IG5ldyBEYXRlKDApO1xuICAgICAgY29udmVydGVkRGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRhdGUuZ2V0VVRDTW9udGgoKSwgZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgY29udmVydGVkRGF0ZS5zZXRIb3VycyhkYXRlLmdldFVUQ0hvdXJzKCksIGRhdGUuZ2V0VVRDTWludXRlcygpLCBkYXRlLmdldFVUQ1NlY29uZHMoKSwgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSk7XG4gICAgICByZXR1cm4gY29udmVydGVkRGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGF0ZVRvU3lzdGVtVGltZXpvbmVTZXR0ZXI7XG59KFNldHRlcik7IiwgImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IHsgVmFsdWVTZXR0ZXIgfSBmcm9tIFwiLi9TZXR0ZXIuanNcIjtcbmV4cG9ydCB2YXIgUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFyc2VyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXJzZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBhcnNlciwgW3tcbiAgICBrZXk6IFwicnVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJ1bihkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gsIG9wdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBtYXRjaCwgb3B0aW9ucyk7XG5cbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZXR0ZXI6IG5ldyBWYWx1ZVNldHRlcihyZXN1bHQudmFsdWUsIHRoaXMudmFsaWRhdGUsIHRoaXMuc2V0LCB0aGlzLnByaW9yaXR5LCB0aGlzLnN1YlByaW9yaXR5KSxcbiAgICAgICAgcmVzdDogcmVzdWx0LnJlc3RcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF91dGNEYXRlLCBfdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFyc2VyO1xufSgpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuZXhwb3J0IHZhciBFcmFQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKEVyYVBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihFcmFQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIEVyYVBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXJhUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgMTQwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNvbXBhdGlibGVUb2tlbnNcIiwgWydSJywgJ3UnLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEVyYVBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIEFELCBCQ1xuICAgICAgICBjYXNlICdHJzpcbiAgICAgICAgY2FzZSAnR0cnOlxuICAgICAgICBjYXNlICdHR0cnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5lcmEoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEEsIEJcblxuICAgICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgICBjYXNlICdHR0dHJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZXJhKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgZmxhZ3MsIHZhbHVlKSB7XG4gICAgICBmbGFncy5lcmEgPSB2YWx1ZTtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIodmFsdWUsIDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFcmFQYXJzZXI7XG59KFBhcnNlcik7IiwgImV4cG9ydCB2YXIgbnVtZXJpY1BhdHRlcm5zID0ge1xuICBtb250aDogL14oMVswLTJdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTJcbiAgZGF0ZTogL14oM1swLTFdfFswLTJdP1xcZCkvLFxuICAvLyAwIHRvIDMxXG4gIGRheU9mWWVhcjogL14oMzZbMC02XXwzWzAtNV1cXGR8WzAtMl0/XFxkP1xcZCkvLFxuICAvLyAwIHRvIDM2NlxuICB3ZWVrOiAvXig1WzAtM118WzAtNF0/XFxkKS8sXG4gIC8vIDAgdG8gNTNcbiAgaG91cjIzaDogL14oMlswLTNdfFswLTFdP1xcZCkvLFxuICAvLyAwIHRvIDIzXG4gIGhvdXIyNGg6IC9eKDJbMC00XXxbMC0xXT9cXGQpLyxcbiAgLy8gMCB0byAyNFxuICBob3VyMTFoOiAvXigxWzAtMV18MD9cXGQpLyxcbiAgLy8gMCB0byAxMVxuICBob3VyMTJoOiAvXigxWzAtMl18MD9cXGQpLyxcbiAgLy8gMCB0byAxMlxuICBtaW51dGU6IC9eWzAtNV0/XFxkLyxcbiAgLy8gMCB0byA1OVxuICBzZWNvbmQ6IC9eWzAtNV0/XFxkLyxcbiAgLy8gMCB0byA1OVxuICBzaW5nbGVEaWdpdDogL15cXGQvLFxuICAvLyAwIHRvIDlcbiAgdHdvRGlnaXRzOiAvXlxcZHsxLDJ9LyxcbiAgLy8gMCB0byA5OVxuICB0aHJlZURpZ2l0czogL15cXGR7MSwzfS8sXG4gIC8vIDAgdG8gOTk5XG4gIGZvdXJEaWdpdHM6IC9eXFxkezEsNH0vLFxuICAvLyAwIHRvIDk5OTlcbiAgYW55RGlnaXRzU2lnbmVkOiAvXi0/XFxkKy8sXG4gIHNpbmdsZURpZ2l0U2lnbmVkOiAvXi0/XFxkLyxcbiAgLy8gMCB0byA5LCAtMCB0byAtOVxuICB0d29EaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSwyfS8sXG4gIC8vIDAgdG8gOTksIC0wIHRvIC05OVxuICB0aHJlZURpZ2l0c1NpZ25lZDogL14tP1xcZHsxLDN9LyxcbiAgLy8gMCB0byA5OTksIC0wIHRvIC05OTlcbiAgZm91ckRpZ2l0c1NpZ25lZDogL14tP1xcZHsxLDR9LyAvLyAwIHRvIDk5OTksIC0wIHRvIC05OTk5XG5cbn07XG5leHBvcnQgdmFyIHRpbWV6b25lUGF0dGVybnMgPSB7XG4gIGJhc2ljT3B0aW9uYWxNaW51dGVzOiAvXihbKy1dKShcXGR7Mn0pKFxcZHsyfSk/fFovLFxuICBiYXNpYzogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pfFovLFxuICBiYXNpY09wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pKChcXGR7Mn0pKT98Wi8sXG4gIGV4dGVuZGVkOiAvXihbKy1dKShcXGR7Mn0pOihcXGR7Mn0pfFovLFxuICBleHRlbmRlZE9wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KTooXFxkezJ9KSg6KFxcZHsyfSkpP3xaL1xufTsiLCAiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5Ib3VyLCBtaWxsaXNlY29uZHNJbk1pbnV0ZSwgbWlsbGlzZWNvbmRzSW5TZWNvbmQgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBudW1lcmljUGF0dGVybnMgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBtYXBWYWx1ZShwYXJzZUZuUmVzdWx0LCBtYXBGbikge1xuICBpZiAoIXBhcnNlRm5SZXN1bHQpIHtcbiAgICByZXR1cm4gcGFyc2VGblJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IG1hcEZuKHBhcnNlRm5SZXN1bHQudmFsdWUpLFxuICAgIHJlc3Q6IHBhcnNlRm5SZXN1bHQucmVzdFxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTnVtZXJpY1BhdHRlcm4ocGF0dGVybiwgZGF0ZVN0cmluZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBkYXRlU3RyaW5nLm1hdGNoKHBhdHRlcm4pO1xuXG4gIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHBhcnNlSW50KG1hdGNoUmVzdWx0WzBdLCAxMCksXG4gICAgcmVzdDogZGF0ZVN0cmluZy5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUaW1lem9uZVBhdHRlcm4ocGF0dGVybiwgZGF0ZVN0cmluZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBkYXRlU3RyaW5nLm1hdGNoKHBhdHRlcm4pO1xuXG4gIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBJbnB1dCBpcyAnWidcblxuXG4gIGlmIChtYXRjaFJlc3VsdFswXSA9PT0gJ1onKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgcmVzdDogZGF0ZVN0cmluZy5zbGljZSgxKVxuICAgIH07XG4gIH1cblxuICB2YXIgc2lnbiA9IG1hdGNoUmVzdWx0WzFdID09PSAnKycgPyAxIDogLTE7XG4gIHZhciBob3VycyA9IG1hdGNoUmVzdWx0WzJdID8gcGFyc2VJbnQobWF0Y2hSZXN1bHRbMl0sIDEwKSA6IDA7XG4gIHZhciBtaW51dGVzID0gbWF0Y2hSZXN1bHRbM10gPyBwYXJzZUludChtYXRjaFJlc3VsdFszXSwgMTApIDogMDtcbiAgdmFyIHNlY29uZHMgPSBtYXRjaFJlc3VsdFs1XSA/IHBhcnNlSW50KG1hdGNoUmVzdWx0WzVdLCAxMCkgOiAwO1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBzaWduICogKGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlICsgc2Vjb25kcyAqIG1pbGxpc2Vjb25kc0luU2Vjb25kKSxcbiAgICByZXN0OiBkYXRlU3RyaW5nLnNsaWNlKG1hdGNoUmVzdWx0WzBdLmxlbmd0aClcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFueURpZ2l0c1NpZ25lZChkYXRlU3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5hbnlEaWdpdHNTaWduZWQsIGRhdGVTdHJpbmcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTkRpZ2l0cyhuLCBkYXRlU3RyaW5nKSB7XG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5zaW5nbGVEaWdpdCwgZGF0ZVN0cmluZyk7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMudHdvRGlnaXRzLCBkYXRlU3RyaW5nKTtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50aHJlZURpZ2l0cywgZGF0ZVN0cmluZyk7XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZm91ckRpZ2l0cywgZGF0ZVN0cmluZyk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obmV3IFJlZ0V4cCgnXlxcXFxkezEsJyArIG4gKyAnfScpLCBkYXRlU3RyaW5nKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTkRpZ2l0c1NpZ25lZChuLCBkYXRlU3RyaW5nKSB7XG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5zaW5nbGVEaWdpdFNpZ25lZCwgZGF0ZVN0cmluZyk7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMudHdvRGlnaXRzU2lnbmVkLCBkYXRlU3RyaW5nKTtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50aHJlZURpZ2l0c1NpZ25lZCwgZGF0ZVN0cmluZyk7XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZm91ckRpZ2l0c1NpZ25lZCwgZGF0ZVN0cmluZyk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obmV3IFJlZ0V4cCgnXi0/XFxcXGR7MSwnICsgbiArICd9JyksIGRhdGVTdHJpbmcpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZGF5UGVyaW9kRW51bVRvSG91cnMoZGF5UGVyaW9kKSB7XG4gIHN3aXRjaCAoZGF5UGVyaW9kKSB7XG4gICAgY2FzZSAnbW9ybmluZyc6XG4gICAgICByZXR1cm4gNDtcblxuICAgIGNhc2UgJ2V2ZW5pbmcnOlxuICAgICAgcmV0dXJuIDE3O1xuXG4gICAgY2FzZSAncG0nOlxuICAgIGNhc2UgJ25vb24nOlxuICAgIGNhc2UgJ2FmdGVybm9vbic6XG4gICAgICByZXR1cm4gMTI7XG5cbiAgICBjYXNlICdhbSc6XG4gICAgY2FzZSAnbWlkbmlnaHQnOlxuICAgIGNhc2UgJ25pZ2h0JzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDA7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUd29EaWdpdFllYXIodHdvRGlnaXRZZWFyLCBjdXJyZW50WWVhcikge1xuICB2YXIgaXNDb21tb25FcmEgPSBjdXJyZW50WWVhciA+IDA7IC8vIEFic29sdXRlIG51bWJlciBvZiB0aGUgY3VycmVudCB5ZWFyOlxuICAvLyAxIC0+IDEgQUNcbiAgLy8gMCAtPiAxIEJDXG4gIC8vIC0xIC0+IDIgQkNcblxuICB2YXIgYWJzQ3VycmVudFllYXIgPSBpc0NvbW1vbkVyYSA/IGN1cnJlbnRZZWFyIDogMSAtIGN1cnJlbnRZZWFyO1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmIChhYnNDdXJyZW50WWVhciA8PSA1MCkge1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciB8fCAxMDA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJhbmdlRW5kID0gYWJzQ3VycmVudFllYXIgKyA1MDtcbiAgICB2YXIgcmFuZ2VFbmRDZW50dXJ5ID0gTWF0aC5mbG9vcihyYW5nZUVuZCAvIDEwMCkgKiAxMDA7XG4gICAgdmFyIGlzUHJldmlvdXNDZW50dXJ5ID0gdHdvRGlnaXRZZWFyID49IHJhbmdlRW5kICUgMTAwO1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciArIHJhbmdlRW5kQ2VudHVyeSAtIChpc1ByZXZpb3VzQ2VudHVyeSA/IDEwMCA6IDApO1xuICB9XG5cbiAgcmV0dXJuIGlzQ29tbW9uRXJhID8gcmVzdWx0IDogMSAtIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xlYXBZZWFySW5kZXgoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCB5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwO1xufSIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgbWFwVmFsdWUsIG5vcm1hbGl6ZVR3b0RpZ2l0WWVhciwgcGFyc2VORGlnaXRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG4vLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X1BhdHRlcm5zXG4vLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4vLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4vLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4vLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4vLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4vLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4vLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5leHBvcnQgdmFyIFllYXJQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKFllYXJQYXJzZXIsIF9QYXJzZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoWWVhclBhcnNlcik7XG5cbiAgZnVuY3Rpb24gWWVhclBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWWVhclBhcnNlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByaW9yaXR5XCIsIDEzMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsnWScsICdSJywgJ3UnLCAndycsICdJJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhZZWFyUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh5ZWFyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgICBpc1R3b0RpZ2l0WWVhcjogdG9rZW4gPT09ICd5eSdcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgcmV0dXJuIG1hcFZhbHVlKHBhcnNlTkRpZ2l0cyg0LCBkYXRlU3RyaW5nKSwgdmFsdWVDYWxsYmFjayk7XG5cbiAgICAgICAgY2FzZSAneW8nOlxuICAgICAgICAgIHJldHVybiBtYXBWYWx1ZShtYXRjaC5vcmRpbmFsTnVtYmVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgICAgIH0pLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXBWYWx1ZShwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBkYXRlU3RyaW5nKSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF9kYXRlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLmlzVHdvRGlnaXRZZWFyIHx8IHZhbHVlLnllYXIgPiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIGZsYWdzLCB2YWx1ZSkge1xuICAgICAgdmFyIGN1cnJlbnRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuXG4gICAgICBpZiAodmFsdWUuaXNUd29EaWdpdFllYXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRUd29EaWdpdFllYXIgPSBub3JtYWxpemVUd29EaWdpdFllYXIodmFsdWUueWVhciwgY3VycmVudFllYXIpO1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKG5vcm1hbGl6ZWRUd29EaWdpdFllYXIsIDAsIDEpO1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHllYXIgPSAhKCdlcmEnIGluIGZsYWdzKSB8fCBmbGFncy5lcmEgPT09IDEgPyB2YWx1ZS55ZWFyIDogMSAtIHZhbHVlLnllYXI7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBZZWFyUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgcGFyc2VORGlnaXRzLCBub3JtYWxpemVUd29EaWdpdFllYXIsIG1hcFZhbHVlIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuZXhwb3J0IHZhciBMb2NhbFdlZWtZZWFyUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhMb2NhbFdlZWtZZWFyUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKExvY2FsV2Vla1llYXJQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIExvY2FsV2Vla1llYXJQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2FsV2Vla1llYXJQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAxMzApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ3knLCAnUicsICd1JywgJ1EnLCAncScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnaScsICd0JywgJ1QnXSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9jYWxXZWVrWWVhclBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soeWVhcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgICAgaXNUd29EaWdpdFllYXI6IHRva2VuID09PSAnWVknXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgIHJldHVybiBtYXBWYWx1ZShwYXJzZU5EaWdpdHMoNCwgZGF0ZVN0cmluZyksIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgICAgIGNhc2UgJ1lvJzpcbiAgICAgICAgICByZXR1cm4gbWFwVmFsdWUobWF0Y2gub3JkaW5hbE51bWJlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAneWVhcidcbiAgICAgICAgICB9KSwgdmFsdWVDYWxsYmFjayk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWFwVmFsdWUocGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgZGF0ZVN0cmluZyksIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfZGF0ZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5pc1R3b0RpZ2l0WWVhciB8fCB2YWx1ZS55ZWFyID4gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkYXRlLCBmbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjdXJyZW50WWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAodmFsdWUuaXNUd29EaWdpdFllYXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRUd29EaWdpdFllYXIgPSBub3JtYWxpemVUd29EaWdpdFllYXIodmFsdWUueWVhciwgY3VycmVudFllYXIpO1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKG5vcm1hbGl6ZWRUd29EaWdpdFllYXIsIDAsIG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgeWVhciA9ICEoJ2VyYScgaW4gZmxhZ3MpIHx8IGZsYWdzLmVyYSA9PT0gMSA/IHZhbHVlLnllYXIgOiAxIC0gdmFsdWUueWVhcjtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9jYWxXZWVrWWVhclBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IHBhcnNlTkRpZ2l0c1NpZ25lZCB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7IC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG5cbmV4cG9ydCB2YXIgSVNPV2Vla1llYXJQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKElTT1dlZWtZZWFyUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKElTT1dlZWtZZWFyUGFyc2VyKTtcblxuICBmdW5jdGlvbiBJU09XZWVrWWVhclBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSVNPV2Vla1llYXJQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAxMzApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ0cnLCAneScsICdZJywgJ3UnLCAnUScsICdxJywgJ00nLCAnTCcsICd3JywgJ2QnLCAnRCcsICdlJywgJ2MnLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKElTT1dlZWtZZWFyUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbikge1xuICAgICAgaWYgKHRva2VuID09PSAnUicpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0c1NpZ25lZCg0LCBkYXRlU3RyaW5nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0c1NpZ25lZCh0b2tlbi5sZW5ndGgsIGRhdGVTdHJpbmcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KF9kYXRlLCBfZmxhZ3MsIHZhbHVlKSB7XG4gICAgICB2YXIgZmlyc3RXZWVrT2ZZZWFyID0gbmV3IERhdGUoMCk7XG4gICAgICBmaXJzdFdlZWtPZlllYXIuc2V0VVRDRnVsbFllYXIodmFsdWUsIDAsIDQpO1xuICAgICAgZmlyc3RXZWVrT2ZZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENJU09XZWVrKGZpcnN0V2Vla09mWWVhcik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElTT1dlZWtZZWFyUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgcGFyc2VORGlnaXRzU2lnbmVkIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIEV4dGVuZGVkWWVhclBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoRXh0ZW5kZWRZZWFyUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEV4dGVuZGVkWWVhclBhcnNlcik7XG5cbiAgZnVuY3Rpb24gRXh0ZW5kZWRZZWFyUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFeHRlbmRlZFllYXJQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAxMzApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ0cnLCAneScsICdZJywgJ1InLCAndycsICdJJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFeHRlbmRlZFllYXJQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuKSB7XG4gICAgICBpZiAodG9rZW4gPT09ICd1Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKDQsIGRhdGVTdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKHRva2VuLmxlbmd0aCwgZGF0ZVN0cmluZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih2YWx1ZSwgMCwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEV4dGVuZGVkWWVhclBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IHBhcnNlTkRpZ2l0cyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuZXhwb3J0IHZhciBRdWFydGVyUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhRdWFydGVyUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFF1YXJ0ZXJQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIFF1YXJ0ZXJQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1YXJ0ZXJQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAxMjApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ1knLCAnUicsICdxJywgJ00nLCAnTCcsICd3JywgJ0knLCAnZCcsICdEJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWFydGVyUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgY2FzZSAnUVEnOlxuICAgICAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIGRhdGVTdHJpbmcpO1xuICAgICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgICBjYXNlICdRbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgICBjYXNlICdRUVFRJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gucXVhcnRlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF9kYXRlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkYXRlLCBfZmxhZ3MsIHZhbHVlKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKCh2YWx1ZSAtIDEpICogMywgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFF1YXJ0ZXJQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBwYXJzZU5EaWdpdHMgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmV4cG9ydCB2YXIgU3RhbmRBbG9uZVF1YXJ0ZXJQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKFN0YW5kQWxvbmVRdWFydGVyUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFN0YW5kQWxvbmVRdWFydGVyUGFyc2VyKTtcblxuICBmdW5jdGlvbiBTdGFuZEFsb25lUXVhcnRlclBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhbmRBbG9uZVF1YXJ0ZXJQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAxMjApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ1knLCAnUicsICdRJywgJ00nLCAnTCcsICd3JywgJ0knLCAnZCcsICdEJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdGFuZEFsb25lUXVhcnRlclBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgICAgY2FzZSAncSc6XG4gICAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBkYXRlU3RyaW5nKTtcbiAgICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgICAgY2FzZSAncW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgICAgY2FzZSAncXFxcSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfZGF0ZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCgodmFsdWUgLSAxKSAqIDMsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdGFuZEFsb25lUXVhcnRlclBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IG1hcFZhbHVlLCBwYXJzZU5EaWdpdHMsIHBhcnNlTnVtZXJpY1BhdHRlcm4gfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IG51bWVyaWNQYXR0ZXJucyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmV4cG9ydCB2YXIgTW9udGhQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKE1vbnRoUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1vbnRoUGFyc2VyKTtcblxuICBmdW5jdGlvbiBNb250aFBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9udGhQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNvbXBhdGlibGVUb2tlbnNcIiwgWydZJywgJ1InLCAncScsICdRJywgJ0wnLCAndycsICdJJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ10pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByaW9yaXR5XCIsIDExMCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTW9udGhQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBtYXRjaCkge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAtIDE7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgcmV0dXJuIG1hcFZhbHVlKHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLm1vbnRoLCBkYXRlU3RyaW5nKSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICByZXR1cm4gbWFwVmFsdWUocGFyc2VORGlnaXRzKDIsIGRhdGVTdHJpbmcpLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgICByZXR1cm4gbWFwVmFsdWUobWF0Y2gub3JkaW5hbE51bWJlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgICAgfSksIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgICBjYXNlICdNTU0nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm1vbnRoKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGUoX2RhdGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAxMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkYXRlLCBfZmxhZ3MsIHZhbHVlKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKHZhbHVlLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTW9udGhQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBudW1lcmljUGF0dGVybnMgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBwYXJzZU51bWVyaWNQYXR0ZXJuLCBwYXJzZU5EaWdpdHMsIG1hcFZhbHVlIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIFN0YW5kQWxvbmVNb250aFBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoU3RhbmRBbG9uZU1vbnRoUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFN0YW5kQWxvbmVNb250aFBhcnNlcik7XG5cbiAgZnVuY3Rpb24gU3RhbmRBbG9uZU1vbnRoUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGFuZEFsb25lTW9udGhQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAxMTApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ1knLCAnUicsICdxJywgJ1EnLCAnTScsICd3JywgJ0knLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RhbmRBbG9uZU1vbnRoUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgLSAxO1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgIHJldHVybiBtYXBWYWx1ZShwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5tb250aCwgZGF0ZVN0cmluZyksIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgICBjYXNlICdMTCc6XG4gICAgICAgICAgcmV0dXJuIG1hcFZhbHVlKHBhcnNlTkRpZ2l0cygyLCBkYXRlU3RyaW5nKSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgICBjYXNlICdMbyc6XG4gICAgICAgICAgcmV0dXJuIG1hcFZhbHVlKG1hdGNoLm9yZGluYWxOdW1iZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICAgIH0pLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5tb250aChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgICBjYXNlICdMTExMJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF9kYXRlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCh2YWx1ZSwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0YW5kQWxvbmVNb250aFBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eVdlZWssIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB3ZWVrID0gdG9JbnRlZ2VyKGRpcnR5V2Vlayk7XG4gIHZhciBkaWZmID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKSAtIHdlZWs7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYgKiA3KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBudW1lcmljUGF0dGVybnMgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBwYXJzZU51bWVyaWNQYXR0ZXJuLCBwYXJzZU5EaWdpdHMgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBzZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL3NldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiOyAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcblxuZXhwb3J0IHZhciBMb2NhbFdlZWtQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKExvY2FsV2Vla1BhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihMb2NhbFdlZWtQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIExvY2FsV2Vla1BhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9jYWxXZWVrUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgMTAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNvbXBhdGlibGVUb2tlbnNcIiwgWyd5JywgJ1InLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ0knLCAnZCcsICdEJywgJ2knLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2FsV2Vla1BhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy53ZWVrLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICd3byc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgZGF0ZVN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF9kYXRlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNTM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENXZWVrKHNldFVUQ1dlZWsoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9jYWxXZWVrUGFyc2VyO1xufShQYXJzZXIpOyIsICJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VVRDSVNPV2VlayhkaXJ0eURhdGUsIGRpcnR5SVNPV2Vlaykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGlzb1dlZWsgPSB0b0ludGVnZXIoZGlydHlJU09XZWVrKTtcbiAgdmFyIGRpZmYgPSBnZXRVVENJU09XZWVrKGRhdGUpIC0gaXNvV2VlaztcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZiAqIDcpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IG51bWVyaWNQYXR0ZXJucyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IHBhcnNlTnVtZXJpY1BhdHRlcm4sIHBhcnNlTkRpZ2l0cyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IHNldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7IC8vIElTTyB3ZWVrIG9mIHllYXJcblxuZXhwb3J0IHZhciBJU09XZWVrUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhJU09XZWVrUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKElTT1dlZWtQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIElTT1dlZWtQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElTT1dlZWtQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAxMDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ3knLCAnWScsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAndycsICdkJywgJ0QnLCAnZScsICdjJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJU09XZWVrUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnSSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLndlZWssIGRhdGVTdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBkYXRlU3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGUoX2RhdGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSA1MztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkYXRlLCBfZmxhZ3MsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gc3RhcnRPZlVUQ0lTT1dlZWsoc2V0VVRDSVNPV2VlayhkYXRlLCB2YWx1ZSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJU09XZWVrUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgaXNMZWFwWWVhckluZGV4LCBwYXJzZU5EaWdpdHMsIHBhcnNlTnVtZXJpY1BhdHRlcm4gfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IG51bWVyaWNQYXR0ZXJucyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbnZhciBEQVlTX0lOX01PTlRIID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xudmFyIERBWVNfSU5fTU9OVEhfTEVBUF9ZRUFSID0gWzMxLCAyOSwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdOyAvLyBEYXkgb2YgdGhlIG1vbnRoXG5cbmV4cG9ydCB2YXIgRGF0ZVBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoRGF0ZVBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihEYXRlUGFyc2VyKTtcblxuICBmdW5jdGlvbiBEYXRlUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXRlUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgOTApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN1YlByaW9yaXR5XCIsIDEpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ1knLCAnUicsICdxJywgJ1EnLCAndycsICdJJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERhdGVQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBtYXRjaCkge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZGF0ZSwgZGF0ZVN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnZG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIGRhdGVTdHJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShkYXRlLCB2YWx1ZSkge1xuICAgICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICB2YXIgaXNMZWFwWWVhciA9IGlzTGVhcFllYXJJbmRleCh5ZWFyKTtcbiAgICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgICAgaWYgKGlzTGVhcFllYXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gREFZU19JTl9NT05USF9MRUFQX1lFQVJbbW9udGhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gREFZU19JTl9NT05USFttb250aF07XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENEYXRlKHZhbHVlKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGF0ZVBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IG51bWVyaWNQYXR0ZXJucyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IHBhcnNlTnVtZXJpY1BhdHRlcm4sIHBhcnNlTkRpZ2l0cywgaXNMZWFwWWVhckluZGV4IH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIERheU9mWWVhclBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoRGF5T2ZZZWFyUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERheU9mWWVhclBhcnNlcik7XG5cbiAgZnVuY3Rpb24gRGF5T2ZZZWFyUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXlPZlllYXJQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCA5MCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3VicHJpb3JpdHlcIiwgMSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsnWScsICdSJywgJ3EnLCAnUScsICdNJywgJ0wnLCAndycsICdJJywgJ2QnLCAnRScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGF5T2ZZZWFyUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgIGNhc2UgJ0REJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZGF5T2ZZZWFyLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICdEbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgZGF0ZVN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKGRhdGUsIHZhbHVlKSB7XG4gICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIHZhciBpc0xlYXBZZWFyID0gaXNMZWFwWWVhckluZGV4KHllYXIpO1xuXG4gICAgICBpZiAoaXNMZWFwWWVhcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAzNjY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAzNjU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCgwLCB2YWx1ZSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERheU9mWWVhclBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFVUQ0RheShkaXJ0eURhdGUsIGRpcnR5RGF5LCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcblxuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gdG9JbnRlZ2VyKGRpcnR5RGF5KTtcbiAgdmFyIGN1cnJlbnREYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgcmVtYWluZGVyID0gZGF5ICUgNztcbiAgdmFyIGRheUluZGV4ID0gKHJlbWFpbmRlciArIDcpICUgNztcbiAgdmFyIGRpZmYgPSAoZGF5SW5kZXggPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSBjdXJyZW50RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgc2V0VVRDRGF5IGZyb20gXCIuLi8uLi8uLi9fbGliL3NldFVUQ0RheS9pbmRleC5qc1wiOyAvLyBEYXkgb2Ygd2Vla1xuXG5leHBvcnQgdmFyIERheVBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoRGF5UGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERheVBhcnNlcik7XG5cbiAgZnVuY3Rpb24gRGF5UGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYXlQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCA5MCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGF5UGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gVHVlXG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICBjYXNlICdFRSc6XG4gICAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVFxuXG4gICAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdVxuXG4gICAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlc2RheVxuXG4gICAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGUoX2RhdGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA2O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIGRhdGUgPSBzZXRVVENEYXkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEYXlQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBtYXBWYWx1ZSwgcGFyc2VORGlnaXRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgc2V0VVRDRGF5IGZyb20gXCIuLi8uLi8uLi9fbGliL3NldFVUQ0RheS9pbmRleC5qc1wiOyAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuXG5leHBvcnQgdmFyIExvY2FsRGF5UGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhMb2NhbERheVBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihMb2NhbERheVBhcnNlcik7XG5cbiAgZnVuY3Rpb24gTG9jYWxEYXlQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2FsRGF5UGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgOTApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnRScsICdpJywgJ2MnLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvY2FsRGF5UGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbiwgbWF0Y2gsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgICB2YXIgd2hvbGVXZWVrRGF5cyA9IE1hdGguZmxvb3IoKHZhbHVlIC0gMSkgLyA3KSAqIDc7XG4gICAgICAgIHJldHVybiAodmFsdWUgKyBvcHRpb25zLndlZWtTdGFydHNPbiArIDYpICUgNyArIHdob2xlV2Vla0RheXM7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDNcbiAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgICAvLyAwM1xuICAgICAgICAgIHJldHVybiBtYXBWYWx1ZShwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBkYXRlU3RyaW5nKSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIDNyZFxuXG4gICAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgICByZXR1cm4gbWFwVmFsdWUobWF0Y2gub3JkaW5hbE51bWJlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICAgIH0pLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gVHVlXG5cbiAgICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1XG5cbiAgICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfZGF0ZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgZGF0ZSA9IHNldFVUQ0RheShkYXRlLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvY2FsRGF5UGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgbWFwVmFsdWUsIHBhcnNlTkRpZ2l0cyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IHNldFVUQ0RheSBmcm9tIFwiLi4vLi4vLi4vX2xpYi9zZXRVVENEYXkvaW5kZXguanNcIjsgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcblxuZXhwb3J0IHZhciBTdGFuZEFsb25lTG9jYWxEYXlQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKFN0YW5kQWxvbmVMb2NhbERheVBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTdGFuZEFsb25lTG9jYWxEYXlQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIFN0YW5kQWxvbmVMb2NhbERheVBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhbmRBbG9uZUxvY2FsRGF5UGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgOTApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnRScsICdpJywgJ2UnLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN0YW5kQWxvbmVMb2NhbERheVBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgICAgdmFyIHdob2xlV2Vla0RheXMgPSBNYXRoLmZsb29yKCh2YWx1ZSAtIDEpIC8gNykgKiA3O1xuICAgICAgICByZXR1cm4gKHZhbHVlICsgb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA2KSAlIDcgKyB3aG9sZVdlZWtEYXlzO1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAzXG4gICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICBjYXNlICdjYyc6XG4gICAgICAgICAgLy8gMDNcbiAgICAgICAgICByZXR1cm4gbWFwVmFsdWUocGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgZGF0ZVN0cmluZyksIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAzcmRcblxuICAgICAgICBjYXNlICdjbyc6XG4gICAgICAgICAgcmV0dXJuIG1hcFZhbHVlKG1hdGNoLm9yZGluYWxOdW1iZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgICB9KSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIFR1ZVxuXG4gICAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVFxuXG4gICAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdVxuXG4gICAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlc2RheVxuXG4gICAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidmFsaWRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGUoX2RhdGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA2O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIGRhdGUgPSBzZXRVVENEYXkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdGFuZEFsb25lTG9jYWxEYXlQYXJzZXI7XG59KFBhcnNlcik7IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFVUQ0lTT0RheShkaXJ0eURhdGUsIGRpcnR5RGF5KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF5ID0gdG9JbnRlZ2VyKGRpcnR5RGF5KTtcblxuICBpZiAoZGF5ICUgNyA9PT0gMCkge1xuICAgIGRheSA9IGRheSAtIDc7XG4gIH1cblxuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGN1cnJlbnREYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgcmVtYWluZGVyID0gZGF5ICUgNztcbiAgdmFyIGRheUluZGV4ID0gKHJlbWFpbmRlciArIDcpICUgNztcbiAgdmFyIGRpZmYgPSAoZGF5SW5kZXggPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSBjdXJyZW50RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBtYXBWYWx1ZSwgcGFyc2VORGlnaXRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgc2V0VVRDSVNPRGF5IGZyb20gXCIuLi8uLi8uLi9fbGliL3NldFVUQ0lTT0RheS9pbmRleC5qc1wiOyAvLyBJU08gZGF5IG9mIHdlZWtcblxuZXhwb3J0IHZhciBJU09EYXlQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKElTT0RheVBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihJU09EYXlQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIElTT0RheVBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSVNPRGF5UGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgOTApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ3knLCAnWScsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAndycsICdkJywgJ0QnLCAnRScsICdlJywgJ2MnLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKElTT0RheVBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIDc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDJcbiAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgICAvLyAwMlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBkYXRlU3RyaW5nKTtcbiAgICAgICAgLy8gMm5kXG5cbiAgICAgICAgY2FzZSAnaW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZVxuXG4gICAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgICAgcmV0dXJuIG1hcFZhbHVlKG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIFRcblxuICAgICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgICAgcmV0dXJuIG1hcFZhbHVlKG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICAgIC8vIFR1XG5cbiAgICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgICByZXR1cm4gbWFwVmFsdWUobWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gVHVlc2RheVxuXG4gICAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXBWYWx1ZShtYXRjaC5kYXkoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSwgdmFsdWVDYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF9kYXRlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkYXRlLCBfZmxhZ3MsIHZhbHVlKSB7XG4gICAgICBkYXRlID0gc2V0VVRDSVNPRGF5KGRhdGUsIHZhbHVlKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSVNPRGF5UGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgZGF5UGVyaW9kRW51bVRvSG91cnMgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmV4cG9ydCB2YXIgQU1QTVBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoQU1QTVBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBTVBNUGFyc2VyKTtcblxuICBmdW5jdGlvbiBBTVBNUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBTVBNUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgODApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ2InLCAnQicsICdIJywgJ2snLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFNUE1QYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBtYXRjaCkge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgY2FzZSAnYWEnOlxuICAgICAgICBjYXNlICdhYWEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUpIHtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoZGF5UGVyaW9kRW51bVRvSG91cnModmFsdWUpLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBTVBNUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgZGF5UGVyaW9kRW51bVRvSG91cnMgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmV4cG9ydCB2YXIgQU1QTU1pZG5pZ2h0UGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhBTVBNTWlkbmlnaHRQYXJzZXIsIF9QYXJzZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQU1QTU1pZG5pZ2h0UGFyc2VyKTtcblxuICBmdW5jdGlvbiBBTVBNTWlkbmlnaHRQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFNUE1NaWRuaWdodFBhcnNlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByaW9yaXR5XCIsIDgwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNvbXBhdGlibGVUb2tlbnNcIiwgWydhJywgJ0InLCAnSCcsICdrJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBTVBNTWlkbmlnaHRQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBtYXRjaCkge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgY2FzZSAnYmInOlxuICAgICAgICBjYXNlICdiYmInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYmJiYic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUpIHtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoZGF5UGVyaW9kRW51bVRvSG91cnModmFsdWUpLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBTVBNTWlkbmlnaHRQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBkYXlQZXJpb2RFbnVtVG9Ib3VycyB9IGZyb20gXCIuLi91dGlscy5qc1wiOyAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG5cbmV4cG9ydCB2YXIgRGF5UGVyaW9kUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhEYXlQZXJpb2RQYXJzZXIsIF9QYXJzZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRGF5UGVyaW9kUGFyc2VyKTtcblxuICBmdW5jdGlvbiBEYXlQZXJpb2RQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERheVBlcmlvZFBhcnNlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByaW9yaXR5XCIsIDgwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNvbXBhdGlibGVUb2tlbnNcIiwgWydhJywgJ2InLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERheVBlcmlvZFBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0InOlxuICAgICAgICBjYXNlICdCQic6XG4gICAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdCQkJCJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2QoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENIb3VycyhkYXlQZXJpb2RFbnVtVG9Ib3Vycyh2YWx1ZSksIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERheVBlcmlvZFBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IG51bWVyaWNQYXR0ZXJucyB9IGZyb20gXCIuLi9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IHBhcnNlTnVtZXJpY1BhdHRlcm4sIHBhcnNlTkRpZ2l0cyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuZXhwb3J0IHZhciBIb3VyMXRvMTJQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKEhvdXIxdG8xMlBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihIb3VyMXRvMTJQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIEhvdXIxdG8xMlBhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSG91cjF0bzEyUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgNzApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ0gnLCAnSycsICdrJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhIb3VyMXRvMTJQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBtYXRjaCkge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjEyaCwgZGF0ZVN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnaG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIGRhdGVTdHJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfZGF0ZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDEyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUpIHtcbiAgICAgIHZhciBpc1BNID0gZGF0ZS5nZXRVVENIb3VycygpID49IDEyO1xuXG4gICAgICBpZiAoaXNQTSAmJiB2YWx1ZSA8IDEyKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUgKyAxMiwgMCwgMCwgMCk7XG4gICAgICB9IGVsc2UgaWYgKCFpc1BNICYmIHZhbHVlID09PSAxMikge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSwgMCwgMCwgMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIb3VyMXRvMTJQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBudW1lcmljUGF0dGVybnMgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBwYXJzZU51bWVyaWNQYXR0ZXJuLCBwYXJzZU5EaWdpdHMgfSBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmV4cG9ydCB2YXIgSG91cjB0bzIzUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhIb3VyMHRvMjNQYXJzZXIsIF9QYXJzZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoSG91cjB0bzIzUGFyc2VyKTtcblxuICBmdW5jdGlvbiBIb3VyMHRvMjNQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhvdXIwdG8yM1BhcnNlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByaW9yaXR5XCIsIDcwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNvbXBhdGlibGVUb2tlbnNcIiwgWydhJywgJ2InLCAnaCcsICdLJywgJ2snLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhvdXIwdG8yM1BhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMjNoLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICdIbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgZGF0ZVN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF9kYXRlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMjM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSG91cjB0bzIzUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgbnVtZXJpY1BhdHRlcm5zIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdW1lcmljUGF0dGVybiwgcGFyc2VORGlnaXRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIEhvdXIwVG8xMVBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoSG91cjBUbzExUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEhvdXIwVG8xMVBhcnNlcik7XG5cbiAgZnVuY3Rpb24gSG91cjBUbzExUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb3VyMFRvMTFQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCA3MCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsnaCcsICdIJywgJ2snLCAndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhvdXIwVG8xMVBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0snOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMTFoLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICdLbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoZGF0ZVN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgZGF0ZVN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZhbGlkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlKF9kYXRlLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgdmFyIGlzUE0gPSBkYXRlLmdldFVUQ0hvdXJzKCkgPj0gMTI7XG5cbiAgICAgIGlmIChpc1BNICYmIHZhbHVlIDwgMTIpIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSArIDEyLCAwLCAwLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUsIDAsIDAsIDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSG91cjBUbzExUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgbnVtZXJpY1BhdHRlcm5zIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdW1lcmljUGF0dGVybiwgcGFyc2VORGlnaXRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIEhvdXIxVG8yNFBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoSG91cjFUbzI0UGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEhvdXIxVG8yNFBhcnNlcik7XG5cbiAgZnVuY3Rpb24gSG91cjFUbzI0UGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb3VyMVRvMjRQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCA3MCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsnYScsICdiJywgJ2gnLCAnSCcsICdLJywgJ3QnLCAnVCddKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhIb3VyMVRvMjRQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBtYXRjaCkge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdrJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjI0aCwgZGF0ZVN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAna28nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKGRhdGVTdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIGRhdGVTdHJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfZGF0ZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDI0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUpIHtcbiAgICAgIHZhciBob3VycyA9IHZhbHVlIDw9IDI0ID8gdmFsdWUgJSAyNCA6IHZhbHVlO1xuICAgICAgZGF0ZS5zZXRVVENIb3Vycyhob3VycywgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSG91cjFUbzI0UGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgbnVtZXJpY1BhdHRlcm5zIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdW1lcmljUGF0dGVybiwgcGFyc2VORGlnaXRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIE1pbnV0ZVBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoTWludXRlUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1pbnV0ZVBhcnNlcik7XG5cbiAgZnVuY3Rpb24gTWludXRlUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNaW51dGVQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCA2MCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1pbnV0ZVBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5taW51dGUsIGRhdGVTdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ21vJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIGRhdGVTdHJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfZGF0ZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDU5O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUpIHtcbiAgICAgIGRhdGUuc2V0VVRDTWludXRlcyh2YWx1ZSwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWludXRlUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgbnVtZXJpY1BhdHRlcm5zIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdW1lcmljUGF0dGVybiwgcGFyc2VORGlnaXRzIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIFNlY29uZFBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoU2Vjb25kUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFNlY29uZFBhcnNlcik7XG5cbiAgZnVuY3Rpb24gU2Vjb25kUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWNvbmRQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCA1MCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNlY29uZFBhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZywgdG9rZW4sIG1hdGNoKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5zZWNvbmQsIGRhdGVTdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3NvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihkYXRlU3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIGRhdGVTdHJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ2YWxpZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZShfZGF0ZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDU5O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIF9mbGFncywgdmFsdWUpIHtcbiAgICAgIGRhdGUuc2V0VVRDU2Vjb25kcyh2YWx1ZSwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2Vjb25kUGFyc2VyO1xufShQYXJzZXIpOyIsICJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4uL1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgbWFwVmFsdWUsIHBhcnNlTkRpZ2l0cyB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuZXhwb3J0IHZhciBGcmFjdGlvbk9mU2Vjb25kUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhGcmFjdGlvbk9mU2Vjb25kUGFyc2VyLCBfUGFyc2VyKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEZyYWN0aW9uT2ZTZWNvbmRQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIEZyYWN0aW9uT2ZTZWNvbmRQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZyYWN0aW9uT2ZTZWNvbmRQYXJzZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmlvcml0eVwiLCAzMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5jb21wYXRpYmxlVG9rZW5zXCIsIFsndCcsICdUJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZyYWN0aW9uT2ZTZWNvbmRQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsdWUgKiBNYXRoLnBvdygxMCwgLXRva2VuLmxlbmd0aCArIDMpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBtYXBWYWx1ZShwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBkYXRlU3RyaW5nKSwgdmFsdWVDYWxsYmFjayk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSkge1xuICAgICAgZGF0ZS5zZXRVVENNaWxsaXNlY29uZHModmFsdWUpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZyYWN0aW9uT2ZTZWNvbmRQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyB0aW1lem9uZVBhdHRlcm5zIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgcGFyc2VUaW1lem9uZVBhdHRlcm4gfSBmcm9tIFwiLi4vdXRpbHMuanNcIjsgLy8gVGltZXpvbmUgKElTTy04NjAxLiArMDA6MDAgaXMgYCdaJ2ApXG5cbmV4cG9ydCB2YXIgSVNPVGltZXpvbmVXaXRoWlBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BhcnNlcikge1xuICBfaW5oZXJpdHMoSVNPVGltZXpvbmVXaXRoWlBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihJU09UaW1lem9uZVdpdGhaUGFyc2VyKTtcblxuICBmdW5jdGlvbiBJU09UaW1lem9uZVdpdGhaUGFyc2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJU09UaW1lem9uZVdpdGhaUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgMTApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ3QnLCAnVCcsICd4J10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKElTT1RpbWV6b25lV2l0aFpQYXJzZXIsIFt7XG4gICAga2V5OiBcInBhcnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKGRhdGVTdHJpbmcsIHRva2VuKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ1gnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxNaW51dGVzLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICdYWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWMsIGRhdGVTdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxTZWNvbmRzLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICdYWFhYWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuZXh0ZW5kZWRPcHRpb25hbFNlY29uZHMsIGRhdGVTdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWCc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuZXh0ZW5kZWQsIGRhdGVTdHJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGRhdGUsIGZsYWdzLCB2YWx1ZSkge1xuICAgICAgaWYgKGZsYWdzLnRpbWVzdGFtcElzU2V0KSB7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSB2YWx1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIElTT1RpbWV6b25lV2l0aFpQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyB0aW1lem9uZVBhdHRlcm5zIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgcGFyc2VUaW1lem9uZVBhdHRlcm4gfSBmcm9tIFwiLi4vdXRpbHMuanNcIjsgLy8gVGltZXpvbmUgKElTTy04NjAxKVxuXG5leHBvcnQgdmFyIElTT1RpbWV6b25lUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyc2VyKSB7XG4gIF9pbmhlcml0cyhJU09UaW1lem9uZVBhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihJU09UaW1lem9uZVBhcnNlcik7XG5cbiAgZnVuY3Rpb24gSVNPVGltZXpvbmVQYXJzZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElTT1RpbWV6b25lUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgMTApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCBbJ3QnLCAnVCcsICdYJ10pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKElTT1RpbWV6b25lUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nLCB0b2tlbikge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpY09wdGlvbmFsTWludXRlcywgZGF0ZVN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAneHgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHh4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpY09wdGlvbmFsU2Vjb25kcywgZGF0ZVN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkT3B0aW9uYWxTZWNvbmRzLCBkYXRlU3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHgnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkLCBkYXRlU3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkYXRlLCBmbGFncywgdmFsdWUpIHtcbiAgICAgIGlmIChmbGFncy50aW1lc3RhbXBJc1NldCkge1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpIC0gdmFsdWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJU09UaW1lem9uZVBhcnNlcjtcbn0oUGFyc2VyKTsiLCAiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuLi9QYXJzZXIuanNcIjtcbmltcG9ydCB7IHBhcnNlQW55RGlnaXRzU2lnbmVkIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5leHBvcnQgdmFyIFRpbWVzdGFtcFNlY29uZHNQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKFRpbWVzdGFtcFNlY29uZHNQYXJzZXIsIF9QYXJzZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVGltZXN0YW1wU2Vjb25kc1BhcnNlcik7XG5cbiAgZnVuY3Rpb24gVGltZXN0YW1wU2Vjb25kc1BhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZXN0YW1wU2Vjb25kc1BhcnNlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInByaW9yaXR5XCIsIDQwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbmNvbXBhdGlibGVUb2tlbnNcIiwgJyonKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUaW1lc3RhbXBTZWNvbmRzUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShkYXRlU3RyaW5nKSB7XG4gICAgICByZXR1cm4gcGFyc2VBbnlEaWdpdHNTaWduZWQoZGF0ZVN0cmluZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoX2RhdGUsIF9mbGFncywgdmFsdWUpIHtcbiAgICAgIHJldHVybiBbbmV3IERhdGUodmFsdWUgKiAxMDAwKSwge1xuICAgICAgICB0aW1lc3RhbXBJc1NldDogdHJ1ZVxuICAgICAgfV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbWVzdGFtcFNlY29uZHNQYXJzZXI7XG59KFBhcnNlcik7IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUFueURpZ2l0c1NpZ25lZCB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuZXhwb3J0IHZhciBUaW1lc3RhbXBNaWxsaXNlY29uZHNQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJzZXIpIHtcbiAgX2luaGVyaXRzKFRpbWVzdGFtcE1pbGxpc2Vjb25kc1BhcnNlciwgX1BhcnNlcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUaW1lc3RhbXBNaWxsaXNlY29uZHNQYXJzZXIpO1xuXG4gIGZ1bmN0aW9uIFRpbWVzdGFtcE1pbGxpc2Vjb25kc1BhcnNlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZXN0YW1wTWlsbGlzZWNvbmRzUGFyc2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJpb3JpdHlcIiwgMjApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImluY29tcGF0aWJsZVRva2Vuc1wiLCAnKicpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRpbWVzdGFtcE1pbGxpc2Vjb25kc1BhcnNlciwgW3tcbiAgICBrZXk6IFwicGFyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UoZGF0ZVN0cmluZykge1xuICAgICAgcmV0dXJuIHBhcnNlQW55RGlnaXRzU2lnbmVkKGRhdGVTdHJpbmcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KF9kYXRlLCBfZmxhZ3MsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gW25ldyBEYXRlKHZhbHVlKSwge1xuICAgICAgICB0aW1lc3RhbXBJc1NldDogdHJ1ZVxuICAgICAgfV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRpbWVzdGFtcE1pbGxpc2Vjb25kc1BhcnNlcjtcbn0oUGFyc2VyKTsiLCAiaW1wb3J0IHsgRXJhUGFyc2VyIH0gZnJvbSBcIi4vRXJhUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBZZWFyUGFyc2VyIH0gZnJvbSBcIi4vWWVhclBhcnNlci5qc1wiO1xuaW1wb3J0IHsgTG9jYWxXZWVrWWVhclBhcnNlciB9IGZyb20gXCIuL0xvY2FsV2Vla1llYXJQYXJzZXIuanNcIjtcbmltcG9ydCB7IElTT1dlZWtZZWFyUGFyc2VyIH0gZnJvbSBcIi4vSVNPV2Vla1llYXJQYXJzZXIuanNcIjtcbmltcG9ydCB7IEV4dGVuZGVkWWVhclBhcnNlciB9IGZyb20gXCIuL0V4dGVuZGVkWWVhclBhcnNlci5qc1wiO1xuaW1wb3J0IHsgUXVhcnRlclBhcnNlciB9IGZyb20gXCIuL1F1YXJ0ZXJQYXJzZXIuanNcIjtcbmltcG9ydCB7IFN0YW5kQWxvbmVRdWFydGVyUGFyc2VyIH0gZnJvbSBcIi4vU3RhbmRBbG9uZVF1YXJ0ZXJQYXJzZXIuanNcIjtcbmltcG9ydCB7IE1vbnRoUGFyc2VyIH0gZnJvbSBcIi4vTW9udGhQYXJzZXIuanNcIjtcbmltcG9ydCB7IFN0YW5kQWxvbmVNb250aFBhcnNlciB9IGZyb20gXCIuL1N0YW5kQWxvbmVNb250aFBhcnNlci5qc1wiO1xuaW1wb3J0IHsgTG9jYWxXZWVrUGFyc2VyIH0gZnJvbSBcIi4vTG9jYWxXZWVrUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBJU09XZWVrUGFyc2VyIH0gZnJvbSBcIi4vSVNPV2Vla1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgRGF0ZVBhcnNlciB9IGZyb20gXCIuL0RhdGVQYXJzZXIuanNcIjtcbmltcG9ydCB7IERheU9mWWVhclBhcnNlciB9IGZyb20gXCIuL0RheU9mWWVhclBhcnNlci5qc1wiO1xuaW1wb3J0IHsgRGF5UGFyc2VyIH0gZnJvbSBcIi4vRGF5UGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBMb2NhbERheVBhcnNlciB9IGZyb20gXCIuL0xvY2FsRGF5UGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBTdGFuZEFsb25lTG9jYWxEYXlQYXJzZXIgfSBmcm9tIFwiLi9TdGFuZEFsb25lTG9jYWxEYXlQYXJzZXIuanNcIjtcbmltcG9ydCB7IElTT0RheVBhcnNlciB9IGZyb20gXCIuL0lTT0RheVBhcnNlci5qc1wiO1xuaW1wb3J0IHsgQU1QTVBhcnNlciB9IGZyb20gXCIuL0FNUE1QYXJzZXIuanNcIjtcbmltcG9ydCB7IEFNUE1NaWRuaWdodFBhcnNlciB9IGZyb20gXCIuL0FNUE1NaWRuaWdodFBhcnNlci5qc1wiO1xuaW1wb3J0IHsgRGF5UGVyaW9kUGFyc2VyIH0gZnJvbSBcIi4vRGF5UGVyaW9kUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBIb3VyMXRvMTJQYXJzZXIgfSBmcm9tIFwiLi9Ib3VyMXRvMTJQYXJzZXIuanNcIjtcbmltcG9ydCB7IEhvdXIwdG8yM1BhcnNlciB9IGZyb20gXCIuL0hvdXIwdG8yM1BhcnNlci5qc1wiO1xuaW1wb3J0IHsgSG91cjBUbzExUGFyc2VyIH0gZnJvbSBcIi4vSG91cjBUbzExUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBIb3VyMVRvMjRQYXJzZXIgfSBmcm9tIFwiLi9Ib3VyMVRvMjRQYXJzZXIuanNcIjtcbmltcG9ydCB7IE1pbnV0ZVBhcnNlciB9IGZyb20gXCIuL01pbnV0ZVBhcnNlci5qc1wiO1xuaW1wb3J0IHsgU2Vjb25kUGFyc2VyIH0gZnJvbSBcIi4vU2Vjb25kUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBGcmFjdGlvbk9mU2Vjb25kUGFyc2VyIH0gZnJvbSBcIi4vRnJhY3Rpb25PZlNlY29uZFBhcnNlci5qc1wiO1xuaW1wb3J0IHsgSVNPVGltZXpvbmVXaXRoWlBhcnNlciB9IGZyb20gXCIuL0lTT1RpbWV6b25lV2l0aFpQYXJzZXIuanNcIjtcbmltcG9ydCB7IElTT1RpbWV6b25lUGFyc2VyIH0gZnJvbSBcIi4vSVNPVGltZXpvbmVQYXJzZXIuanNcIjtcbmltcG9ydCB7IFRpbWVzdGFtcFNlY29uZHNQYXJzZXIgfSBmcm9tIFwiLi9UaW1lc3RhbXBTZWNvbmRzUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBUaW1lc3RhbXBNaWxsaXNlY29uZHNQYXJzZXIgfSBmcm9tIFwiLi9UaW1lc3RhbXBNaWxsaXNlY29uZHNQYXJzZXIuanNcIjtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBQICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6KiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYHBhcnNlYCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqL1xuXG5leHBvcnQgdmFyIHBhcnNlcnMgPSB7XG4gIEc6IG5ldyBFcmFQYXJzZXIoKSxcbiAgeTogbmV3IFllYXJQYXJzZXIoKSxcbiAgWTogbmV3IExvY2FsV2Vla1llYXJQYXJzZXIoKSxcbiAgUjogbmV3IElTT1dlZWtZZWFyUGFyc2VyKCksXG4gIHU6IG5ldyBFeHRlbmRlZFllYXJQYXJzZXIoKSxcbiAgUTogbmV3IFF1YXJ0ZXJQYXJzZXIoKSxcbiAgcTogbmV3IFN0YW5kQWxvbmVRdWFydGVyUGFyc2VyKCksXG4gIE06IG5ldyBNb250aFBhcnNlcigpLFxuICBMOiBuZXcgU3RhbmRBbG9uZU1vbnRoUGFyc2VyKCksXG4gIHc6IG5ldyBMb2NhbFdlZWtQYXJzZXIoKSxcbiAgSTogbmV3IElTT1dlZWtQYXJzZXIoKSxcbiAgZDogbmV3IERhdGVQYXJzZXIoKSxcbiAgRDogbmV3IERheU9mWWVhclBhcnNlcigpLFxuICBFOiBuZXcgRGF5UGFyc2VyKCksXG4gIGU6IG5ldyBMb2NhbERheVBhcnNlcigpLFxuICBjOiBuZXcgU3RhbmRBbG9uZUxvY2FsRGF5UGFyc2VyKCksXG4gIGk6IG5ldyBJU09EYXlQYXJzZXIoKSxcbiAgYTogbmV3IEFNUE1QYXJzZXIoKSxcbiAgYjogbmV3IEFNUE1NaWRuaWdodFBhcnNlcigpLFxuICBCOiBuZXcgRGF5UGVyaW9kUGFyc2VyKCksXG4gIGg6IG5ldyBIb3VyMXRvMTJQYXJzZXIoKSxcbiAgSDogbmV3IEhvdXIwdG8yM1BhcnNlcigpLFxuICBLOiBuZXcgSG91cjBUbzExUGFyc2VyKCksXG4gIGs6IG5ldyBIb3VyMVRvMjRQYXJzZXIoKSxcbiAgbTogbmV3IE1pbnV0ZVBhcnNlcigpLFxuICBzOiBuZXcgU2Vjb25kUGFyc2VyKCksXG4gIFM6IG5ldyBGcmFjdGlvbk9mU2Vjb25kUGFyc2VyKCksXG4gIFg6IG5ldyBJU09UaW1lem9uZVdpdGhaUGFyc2VyKCksXG4gIHg6IG5ldyBJU09UaW1lem9uZVBhcnNlcigpLFxuICB0OiBuZXcgVGltZXN0YW1wU2Vjb25kc1BhcnNlcigpLFxuICBUOiBuZXcgVGltZXN0YW1wTWlsbGlzZWNvbmRzUGFyc2VyKClcbn07IiwgImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGFzc2lnbiBmcm9tIFwiLi4vX2xpYi9hc3NpZ24vaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBEYXRlVG9TeXN0ZW1UaW1lem9uZVNldHRlciB9IGZyb20gXCIuL19saWIvU2V0dGVyLmpzXCI7XG5pbXBvcnQgeyBwYXJzZXJzIH0gZnJvbSBcIi4vX2xpYi9wYXJzZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciBub3RXaGl0ZXNwYWNlUmVnRXhwID0gL1xcUy87XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBwYXJzZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBQYXJzZSB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZGF0ZSBwYXJzZWQgZnJvbSBzdHJpbmcgdXNpbmcgdGhlIGdpdmVuIGZvcm1hdCBzdHJpbmcuXG4gKlxuICogPiBcdTI2QTBcdUZFMEYgUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyBpbiB0aGUgZm9ybWF0IHN0cmluZyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqXG4gKiBGb3JtYXQgb2YgdGhlIGZvcm1hdCBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDUgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBOb3QgYWxsIHRva2VucyBhcmUgY29tcGF0aWJsZS4gQ29tYmluYXRpb25zIHRoYXQgZG9uJ3QgbWFrZSBzZW5zZSBvciBjb3VsZCBsZWFkIHRvIGJ1Z3MgYXJlIHByb2hpYml0ZWRcbiAqIGFuZCB3aWxsIHRocm93IGBSYW5nZUVycm9yYC4gRm9yIGV4YW1wbGUgdXNhZ2Ugb2YgMjQtaG91ciBmb3JtYXQgdG9rZW4gd2l0aCBBTS9QTSB0b2tlbiB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbjpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBwYXJzZSgnMjMgQU0nLCAnSEggYScsIG5ldyBEYXRlKCkpXG4gKiAvLz0+IFJhbmdlRXJyb3I6IFRoZSBmb3JtYXQgc3RyaW5nIG11c3RuJ3QgY29udGFpbiBgSEhgIGFuZCBgYWAgYXQgdGhlIHNhbWUgdGltZVxuICogYGBgXG4gKlxuICogU2VlIHRoZSBjb21wYXRpYmlsaXR5IHRhYmxlOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC9lLzJQQUNYLTF2UU9QVTN4VWhwbGxsNmR5b01tVlVYSEtsXzhDUkRzNl91ZUxtZXgzU29xd2h1b2xrdU4zTzA1bDRycXg1aDFkS1g4ZWI0NlVsLUNDU3JxL3B1Ymh0bWw/Z2lkPTAmc2luZ2xlPXRydWVcbiAqXG4gKiBBY2NlcHRlZCBmb3JtYXQgc3RyaW5nIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxQcmlvcnwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAxNDAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCAxMzAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcsIDk5OTkgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCA5OTk5OTk5dGggICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDEyMywgOTk5ICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCAxMzAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcsIDkwMDAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCA5OTk5OTk5dGggICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA0LDYgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDEyMywgOTk5ICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDQsNiAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCAxMzAgfCBSICAgICAgIHwgLTQzLCAxLCAxOTAwLCAyMDE3LCA5OTk5LCAtOTk5OSAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlIgICAgICB8IC00MywgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDEsIDEyMywgOTk5LCAtOTk5ICAgICAgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDEsIDIwMTcsIDk5OTksIC05OTk5ICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCw1IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IDEzMCB8IHUgICAgICAgfCAtNDMsIDEsIDE5MDAsIDIwMTcsIDk5OTksIC05OTkgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgOTksIC05OSAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTIzLCA5OTksIC05OTkgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMjAxNywgOTk5OSwgLTk5OTkgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiw0ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgMTIwIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgMTIwIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgMTEwIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgMTEwIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgMTAwIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgMTAwIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgIDkwIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgIDkwIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCAgOTAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgIDkwIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDUgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8ICA5MCB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCAgOTAgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDgwIHwgYS4uYWFhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgIDgwIHwgYi4uYmJiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgIDgwIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgIDcwIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDYwIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDUwIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgIDQwIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCAgMzAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgIDIwIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCAgMTAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8ICAxMCB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgIE5BIHwgUCAgICAgICB8IDA1LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQICAgICAgfCBNYXkgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFAgICAgIHwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQUCAgICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgICAgICAgICAgICB8IDIsNSw4IHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8ICBOQSB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgIE5BIHwgUHAgICAgICB8IDA1LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQcHAgICAgfCBNYXkgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFBwcCAgIHwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBQUHBwICB8IFN1bmRheSwgTWF5IDI5dGgsIDE0NTMgYXQgLi4uICAgICB8IDIsNSw4IHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXIuXG4gKiAgICBJbiBgZm9ybWF0YCBmdW5jdGlvbiwgdGhleSB3aWxsIHByb2R1Y2UgZGlmZmVyZW50IHJlc3VsdDpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogICAgYHBhcnNlYCB3aWxsIHRyeSB0byBtYXRjaCBib3RoIGZvcm1hdHRpbmcgYW5kIHN0YW5kLWFsb25lIHVuaXRzIGludGVyY2hhbmdhYmx5LlxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZTpcbiAqICAgIC0gZm9yIG51bWVyaWNhbCB1bml0cyAoYHl5eXl5eXl5YCkgYHBhcnNlYCB3aWxsIHRyeSB0byBtYXRjaCBhIG51bWJlclxuICogICAgICBhcyB3aWRlIGFzIHRoZSBzZXF1ZW5jZVxuICogICAgLSBmb3IgdGV4dCB1bml0cyAoYE1NTU1NTU1NYCkgYHBhcnNlYCB3aWxsIHRyeSB0byBtYXRjaCB0aGUgd2lkZXN0IHZhcmlhdGlvbiBvZiB0aGUgdW5pdC5cbiAqICAgICAgVGhlc2UgdmFyaWF0aW9ucyBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAzLiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA0LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIHdpbGwgdHJ5IHRvIGd1ZXNzIHRoZSBjZW50dXJ5IG9mIHR3byBkaWdpdCB5ZWFyIGJ5IHByb3hpbWl0eSB3aXRoIGByZWZlcmVuY2VEYXRlYDpcbiAqXG4gKiAgICBgcGFyc2UoJzUwJywgJ3l5JywgbmV3IERhdGUoMjAxOCwgMCwgMSkpIC8vPT4gU2F0IEphbiAwMSAyMDUwIDAwOjAwOjAwYFxuICpcbiAqICAgIGBwYXJzZSgnNzUnLCAneXknLCBuZXcgRGF0ZSgyMDE4LCAwLCAxKSkgLy89PiBXZWQgSmFuIDAxIDE5NzUgMDA6MDA6MDBgXG4gKlxuICogICAgd2hpbGUgYHV1YCB3aWxsIGp1c3QgYXNzaWduIHRoZSB5ZWFyIGFzIGlzOlxuICpcbiAqICAgIGBwYXJzZSgnNTAnLCAndXUnLCBuZXcgRGF0ZSgyMDE4LCAwLCAxKSkgLy89PiBTYXQgSmFuIDAxIDAwNTAgMDA6MDA6MDBgXG4gKlxuICogICAgYHBhcnNlKCc3NScsICd1dScsIG5ldyBEYXRlKDIwMTgsIDAsIDEpKSAvLz0+IFR1ZSBKYW4gMDEgMDA3NSAwMDowMDowMGBcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtzZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9zZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbc2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3Mvc2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA1LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDYuIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogNy4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0aGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOC4gYFArYCB0b2tlbnMgZG8gbm90IGhhdmUgYSBkZWZpbmVkIHByaW9yaXR5IHNpbmNlIHRoZXkgYXJlIG1lcmVseSBhbGlhc2VzIHRvIG90aGVyIHRva2VucyBiYXNlZFxuICogICAgb24gdGhlIGdpdmVuIGxvY2FsZS5cbiAqXG4gKiAgICB1c2luZyBgZW4tVVNgIGxvY2FsZTogYFBgID0+IGBNTS9kZC95eXl5YFxuICogICAgdXNpbmcgYGVuLVVTYCBsb2NhbGU6IGBwYCA9PiBgaGg6bW0gYWBcbiAqICAgIHVzaW5nIGBwdC1CUmAgbG9jYWxlOiBgUGAgPT4gYGRkL01NL3l5eXlgXG4gKiAgICB1c2luZyBgcHQtQlJgIGxvY2FsZTogYHBgID0+IGBISDptbWBcbiAqXG4gKiBWYWx1ZXMgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgZGF0ZSBpbiB0aGUgZGVzY2VuZGluZyBvcmRlciBvZiBpdHMgdW5pdCdzIHByaW9yaXR5LlxuICogVW5pdHMgb2YgYW4gZXF1YWwgcHJpb3JpdHkgb3ZlcndyaXRlIGVhY2ggb3RoZXIgaW4gdGhlIG9yZGVyIG9mIGFwcGVhcmFuY2UuXG4gKlxuICogSWYgbm8gdmFsdWVzIG9mIGhpZ2hlciBwcmlvcml0eSBhcmUgcGFyc2VkIChlLmcuIHdoZW4gcGFyc2luZyBzdHJpbmcgJ0phbnVhcnkgMXN0JyB3aXRob3V0IGEgeWVhciksXG4gKiB0aGUgdmFsdWVzIHdpbGwgYmUgdGFrZW4gZnJvbSAzcmQgYXJndW1lbnQgYHJlZmVyZW5jZURhdGVgIHdoaWNoIHdvcmtzIGFzIGEgY29udGV4dCBvZiBwYXJzaW5nLlxuICpcbiAqIGByZWZlcmVuY2VEYXRlYCBtdXN0IGJlIHBhc3NlZCBmb3IgY29ycmVjdCB3b3JrIG9mIHRoZSBmdW5jdGlvbi5cbiAqIElmIHlvdSdyZSBub3Qgc3VyZSB3aGljaCBgcmVmZXJlbmNlRGF0ZWAgdG8gc3VwcGx5LCBjcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgRGF0ZTpcbiAqIGBwYXJzZSgnMDIvMTEvMjAxNCcsICdNTS9kZC95eXl5JywgbmV3IERhdGUoKSlgXG4gKiBJbiB0aGlzIGNhc2UgcGFyc2luZyB3aWxsIGJlIGRvbmUgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGN1cnJlbnQgZGF0ZS5cbiAqIElmIGByZWZlcmVuY2VEYXRlYCBpcyBgSW52YWxpZCBEYXRlYCBvciBhIHZhbHVlIG5vdCBjb252ZXJ0aWJsZSB0byB2YWxpZCBgRGF0ZWAsXG4gKiB0aGVuIGBJbnZhbGlkIERhdGVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICogVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogSWYgYGZvcm1hdFN0cmluZ2AgbWF0Y2hlcyB3aXRoIGBkYXRlU3RyaW5nYCBidXQgZG9lcyBub3QgcHJvdmlkZXMgdG9rZW5zLCBgcmVmZXJlbmNlRGF0ZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAqXG4gKiBJZiBwYXJzaW5nIGZhaWxlZCwgYEludmFsaWQgRGF0ZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGVTdHJpbmcgLSB0aGUgc3RyaW5nIHRvIHBhcnNlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0U3RyaW5nIC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IHJlZmVyZW5jZURhdGUgLSBkZWZpbmVzIHZhbHVlcyBtaXNzaW5nIGZyb20gdGhlIHBhcnNlZCBkYXRlU3RyaW5nXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7MXwyfDN8NHw1fDZ8N30gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAzIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYG1hdGNoYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFBhcnNlIDExIEZlYnJ1YXJ5IDIwMTQgZnJvbSBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBwYXJzZSgnMDIvMTEvMjAxNCcsICdNTS9kZC95eXl5JywgbmV3IERhdGUoKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFBhcnNlIDI4dGggb2YgRmVicnVhcnkgaW4gRXNwZXJhbnRvIGxvY2FsZSBpbiB0aGUgY29udGV4dCBvZiAyMDEwIHllYXI6XG4gKiBpbXBvcnQgZW8gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IHBhcnNlKCcyOC1hIGRlIGZlYnJ1YXJvJywgXCJkbyAnZGUnIE1NTU1cIiwgbmV3IERhdGUoMjAxMCwgMCwgMSksIHtcbiAqICAgbG9jYWxlOiBlb1xuICogfSlcbiAqIC8vPT4gU3VuIEZlYiAyOCAyMDEwIDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2UoZGlydHlEYXRlU3RyaW5nLCBkaXJ0eUZvcm1hdFN0cmluZywgZGlydHlSZWZlcmVuY2VEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfb3B0aW9ucyRsb2NhbGUsIF9yZWYyLCBfcmVmMywgX3JlZjQsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlMiwgX29wdGlvbnMkbG9jYWxlMiRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIsIF9yZWY1LCBfcmVmNiwgX3JlZjcsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlMywgX29wdGlvbnMkbG9jYWxlMyRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0O1xuXG4gIHJlcXVpcmVkQXJncygzLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZVN0cmluZyA9IFN0cmluZyhkaXJ0eURhdGVTdHJpbmcpO1xuICB2YXIgZm9ybWF0U3RyaW5nID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyaW5nKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGxvY2FsZSA9IChfcmVmID0gKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9vcHRpb25zJGxvY2FsZSAhPT0gdm9pZCAwID8gX29wdGlvbnMkbG9jYWxlIDogZGVmYXVsdE9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogZGVmYXVsdExvY2FsZTtcblxuICBpZiAoIWxvY2FsZS5tYXRjaCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIG1hdGNoIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKGZvcm1hdFN0cmluZyA9PT0gJycpIHtcbiAgICBpZiAoZGF0ZVN0cmluZyA9PT0gJycpIHtcbiAgICAgIHJldHVybiB0b0RhdGUoZGlydHlSZWZlcmVuY2VEYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN1YkZuT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZVxuICB9OyAvLyBJZiB0aW1lem9uZSBpc24ndCBzcGVjaWZpZWQsIGl0IHdpbGwgYmUgc2V0IHRvIHRoZSBzeXN0ZW0gdGltZXpvbmVcblxuICB2YXIgc2V0dGVycyA9IFtuZXcgRGF0ZVRvU3lzdGVtVGltZXpvbmVTZXR0ZXIoKV07XG4gIHZhciB0b2tlbnMgPSBmb3JtYXRTdHJpbmcubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyIGluIGxvbmdGb3JtYXR0ZXJzKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApO1xuICB2YXIgdXNlZFRva2VucyA9IFtdO1xuXG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0b2tlbnMpLFxuICAgICAgX3N0ZXA7XG5cbiAgdHJ5IHtcbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICAgIHZhciB0b2tlbiA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXRTdHJpbmcsIGRpcnR5RGF0ZVN0cmluZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0U3RyaW5nLCBkaXJ0eURhdGVTdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSB0b2tlblswXTtcbiAgICAgIHZhciBwYXJzZXIgPSBwYXJzZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgICAgaWYgKHBhcnNlcikge1xuICAgICAgICB2YXIgaW5jb21wYXRpYmxlVG9rZW5zID0gcGFyc2VyLmluY29tcGF0aWJsZVRva2VucztcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbmNvbXBhdGlibGVUb2tlbnMpKSB7XG4gICAgICAgICAgdmFyIGluY29tcGF0aWJsZVRva2VuID0gdXNlZFRva2Vucy5maW5kKGZ1bmN0aW9uICh1c2VkVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBpbmNvbXBhdGlibGVUb2tlbnMuaW5jbHVkZXModXNlZFRva2VuLnRva2VuKSB8fCB1c2VkVG9rZW4udG9rZW4gPT09IGZpcnN0Q2hhcmFjdGVyO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGluY29tcGF0aWJsZVRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBmb3JtYXQgc3RyaW5nIG11c3RuJ3QgY29udGFpbiBgXCIuY29uY2F0KGluY29tcGF0aWJsZVRva2VuLmZ1bGxUb2tlbiwgXCJgIGFuZCBgXCIpLmNvbmNhdCh0b2tlbiwgXCJgIGF0IHRoZSBzYW1lIHRpbWVcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXJzZXIuaW5jb21wYXRpYmxlVG9rZW5zID09PSAnKicgJiYgdXNlZFRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGUgZm9ybWF0IHN0cmluZyBtdXN0bid0IGNvbnRhaW4gYFwiLmNvbmNhdCh0b2tlbiwgXCJgIGFuZCBhbnkgb3RoZXIgdG9rZW4gYXQgdGhlIHNhbWUgdGltZVwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICB1c2VkVG9rZW5zLnB1c2goe1xuICAgICAgICAgIHRva2VuOiBmaXJzdENoYXJhY3RlcixcbiAgICAgICAgICBmdWxsVG9rZW46IHRva2VuXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcGFyc2VSZXN1bHQgPSBwYXJzZXIucnVuKGRhdGVTdHJpbmcsIHRva2VuLCBsb2NhbGUubWF0Y2gsIHN1YkZuT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCFwYXJzZVJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2OiBuZXcgRGF0ZShOYU4pXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldHRlcnMucHVzaChwYXJzZVJlc3VsdC5zZXR0ZXIpO1xuICAgICAgICBkYXRlU3RyaW5nID0gcGFyc2VSZXN1bHQucmVzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgICAgICB9IC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcblxuXG4gICAgICAgIGlmICh0b2tlbiA9PT0gXCInJ1wiKSB7XG4gICAgICAgICAgdG9rZW4gPSBcIidcIjtcbiAgICAgICAgfSBlbHNlIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgICAgICB0b2tlbiA9IGNsZWFuRXNjYXBlZFN0cmluZyh0b2tlbik7XG4gICAgICAgIH0gLy8gQ3V0IHRva2VuIGZyb20gc3RyaW5nLCBvciwgaWYgc3RyaW5nIGRvZXNuJ3QgbWF0Y2ggdGhlIHRva2VuLCByZXR1cm4gSW52YWxpZCBEYXRlXG5cblxuICAgICAgICBpZiAoZGF0ZVN0cmluZy5pbmRleE9mKHRva2VuKSA9PT0gMCkge1xuICAgICAgICAgIGRhdGVTdHJpbmcgPSBkYXRlU3RyaW5nLnNsaWNlKHRva2VuLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHY6IG5ldyBEYXRlKE5hTilcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKCk7XG5cbiAgICAgIGlmIChfdHlwZW9mKF9yZXQpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuICAgIH0gLy8gQ2hlY2sgaWYgdGhlIHJlbWFpbmluZyBpbnB1dCBjb250YWlucyBzb21ldGhpbmcgb3RoZXIgdGhhbiB3aGl0ZXNwYWNlXG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IuZigpO1xuICB9XG5cbiAgaWYgKGRhdGVTdHJpbmcubGVuZ3RoID4gMCAmJiBub3RXaGl0ZXNwYWNlUmVnRXhwLnRlc3QoZGF0ZVN0cmluZykpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIHZhciB1bmlxdWVQcmlvcml0eVNldHRlcnMgPSBzZXR0ZXJzLm1hcChmdW5jdGlvbiAoc2V0dGVyKSB7XG4gICAgcmV0dXJuIHNldHRlci5wcmlvcml0eTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiIC0gYTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChwcmlvcml0eSwgaW5kZXgsIGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LmluZGV4T2YocHJpb3JpdHkpID09PSBpbmRleDtcbiAgfSkubWFwKGZ1bmN0aW9uIChwcmlvcml0eSkge1xuICAgIHJldHVybiBzZXR0ZXJzLmZpbHRlcihmdW5jdGlvbiAoc2V0dGVyKSB7XG4gICAgICByZXR1cm4gc2V0dGVyLnByaW9yaXR5ID09PSBwcmlvcml0eTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYi5zdWJQcmlvcml0eSAtIGEuc3ViUHJpb3JpdHk7XG4gICAgfSk7XG4gIH0pLm1hcChmdW5jdGlvbiAoc2V0dGVyQXJyYXkpIHtcbiAgICByZXR1cm4gc2V0dGVyQXJyYXlbMF07XG4gIH0pO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eVJlZmVyZW5jZURhdGUpO1xuXG4gIGlmIChpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cblxuXG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKGRhdGUsIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkpO1xuICB2YXIgZmxhZ3MgPSB7fTtcblxuICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHVuaXF1ZVByaW9yaXR5U2V0dGVycyksXG4gICAgICBfc3RlcDI7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgdmFyIHNldHRlciA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgaWYgKCFzZXR0ZXIudmFsaWRhdGUodXRjRGF0ZSwgc3ViRm5PcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IHNldHRlci5zZXQodXRjRGF0ZSwgZmxhZ3MsIHN1YkZuT3B0aW9ucyk7IC8vIFJlc3VsdCBpcyB0dXBsZSAoZGF0ZSwgZmxhZ3MpXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgdXRjRGF0ZSA9IHJlc3VsdFswXTtcbiAgICAgICAgYXNzaWduKGZsYWdzLCByZXN1bHRbMV0pOyAvLyBSZXN1bHQgaXMgZGF0ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRjRGF0ZSA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvcjIuZigpO1xuICB9XG5cbiAgcmV0dXJuIHV0Y0RhdGU7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsICJpbXBvcnQgeyBBcHAsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IFdvcmRwcmVzc1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBXcExvZ2luTW9kYWwgfSBmcm9tICcuL3dwLWxvZ2luLW1vZGFsJztcclxuaW1wb3J0IHtcclxuICBXb3JkUHJlc3NDbGllbnQsXHJcbiAgV29yZFByZXNzQ2xpZW50UmVzdWx0LFxyXG4gIFdvcmRQcmVzc0NsaWVudFJldHVybkNvZGUsXHJcbiAgV29yZFByZXNzUG9zdFBhcmFtc1xyXG59IGZyb20gJy4vd3AtY2xpZW50JztcclxuaW1wb3J0IHsgbWFya2VkIH0gZnJvbSAnbWFya2VkJztcclxuaW1wb3J0IHsgV3BQdWJsaXNoTW9kYWwgfSBmcm9tICcuL3dwLXB1Ymxpc2gtbW9kYWwnO1xyXG5pbXBvcnQgeyBUZXJtIH0gZnJvbSAnLi93cC1hcGknO1xyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFdvcmRQcmVzc0NsaWVudCBpbXBsZW1lbnRzIFdvcmRQcmVzc0NsaWVudCB7XHJcblxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBhcHA6IEFwcCxcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBwbHVnaW46IFdvcmRwcmVzc1BsdWdpblxyXG4gICkgeyB9XHJcblxyXG4gIGFic3RyYWN0IHB1Ymxpc2goXHJcbiAgICB0aXRsZTogc3RyaW5nLFxyXG4gICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgcG9zdFBhcmFtczogV29yZFByZXNzUG9zdFBhcmFtcyxcclxuICAgIHdwOiB7XHJcbiAgICAgIHVzZXJOYW1lOiBzdHJpbmcsXHJcbiAgICAgIHBhc3N3b3JkOiBzdHJpbmdcclxuICAgIH1cclxuICApOiBQcm9taXNlPFdvcmRQcmVzc0NsaWVudFJlc3VsdD47XHJcblxyXG4gIGFic3RyYWN0IGdldENhdGVnb3JpZXMoXHJcbiAgICB3cDoge1xyXG4gICAgICB1c2VyTmFtZTogc3RyaW5nLFxyXG4gICAgICBwYXNzd29yZDogc3RyaW5nXHJcbiAgICB9XHJcbiAgKTogUHJvbWlzZTxUZXJtW10+O1xyXG5cclxuICBuZXdQb3N0KGRlZmF1bHRQb3N0UGFyYW1zPzogV29yZFByZXNzUG9zdFBhcmFtcyk6IFByb21pc2U8V29yZFByZXNzQ2xpZW50UmVzdWx0PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmVuZHBvaW50IHx8IHRoaXMucGx1Z2luLnNldHRpbmdzLmVuZHBvaW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIG5ldyBOb3RpY2UodGhpcy5wbHVnaW4uaTE4bi50KCdlcnJvcl9ub0VuZHBvaW50JykpO1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vIGVuZHBvaW50IHNldC4nKSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgeyB3b3Jrc3BhY2UgfSA9IHRoaXMuYXBwO1xyXG4gICAgICBjb25zdCBhY3RpdmVWaWV3ID0gd29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuICAgICAgaWYgKCBhY3RpdmVWaWV3ICkge1xyXG4gICAgICAgIG5ldyBXcExvZ2luTW9kYWwoXHJcbiAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgIHRoaXMucGx1Z2luLFxyXG4gICAgICAgICAgYXN5bmMgKHVzZXJOYW1lLCBwYXNzd29yZCwgbG9naW5Nb2RhbCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChhY3RpdmVWaWV3LmZpbGUpO1xyXG4gICAgICAgICAgICBjb25zdCB0aXRsZSA9IGFjdGl2ZVZpZXcuZmlsZS5iYXNlbmFtZTtcclxuICAgICAgICAgICAgaWYgKGRlZmF1bHRQb3N0UGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kb1B1Ymxpc2goe1xyXG4gICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgdXNlck5hbWUsXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZCxcclxuICAgICAgICAgICAgICAgIHBvc3RQYXJhbXM6IGRlZmF1bHRQb3N0UGFyYW1zXHJcbiAgICAgICAgICAgICAgfSwgbG9naW5Nb2RhbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcmllcyA9IGF3YWl0IHRoaXMuZ2V0Q2F0ZWdvcmllcyh7XHJcbiAgICAgICAgICAgICAgICB1c2VyTmFtZSxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgbmV3IFdwUHVibGlzaE1vZGFsKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbixcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMsXHJcbiAgICAgICAgICAgICAgICBhc3luYyAocG9zdFBhcmFtcywgcHVibGlzaE1vZGFsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZG9QdWJsaXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc3RQYXJhbXNcclxuICAgICAgICAgICAgICAgICAgfSwgbG9naW5Nb2RhbCwgcHVibGlzaE1vZGFsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICApLm9wZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICkub3BlbigpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gJ1RoZXJlIGlzIG5vIGVkaXRvciBmb3VuZC4gTm90aGluZyB3aWxsIGJlIHB1Ymxpc2hlZC4nO1xyXG4gICAgICAgIGNvbnNvbGUud2FybihlcnJvcik7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihlcnJvcikpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgZG9QdWJsaXNoKFxyXG4gICAgd3BQYXJhbXM6IHtcclxuICAgICAgdGl0bGU6IHN0cmluZyxcclxuICAgICAgY29udGVudDogc3RyaW5nLFxyXG4gICAgICB1c2VyTmFtZTogc3RyaW5nLFxyXG4gICAgICBwYXNzd29yZDogc3RyaW5nLFxyXG4gICAgICBwb3N0UGFyYW1zOiBXb3JkUHJlc3NQb3N0UGFyYW1zXHJcbiAgICB9LFxyXG4gICAgbG9naW5Nb2RhbDogTW9kYWwsXHJcbiAgICBwdWJsaXNoTW9kYWw/OiBNb2RhbFxyXG4gICk6IFByb21pc2U8V29yZFByZXNzQ2xpZW50UmVzdWx0PiB7XHJcbiAgICBjb25zdCB7IHRpdGxlLCBjb250ZW50LCB1c2VyTmFtZSwgcGFzc3dvcmQsIHBvc3RQYXJhbXMgfSA9IHdwUGFyYW1zO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wdWJsaXNoKFxyXG4gICAgICAgIHRpdGxlID8/ICdBIHBvc3QgZnJvbSBPYnNpZGlhbiEnLFxyXG4gICAgICAgIG1hcmtlZC5wYXJzZShjb250ZW50KSA/PyAnJyxcclxuICAgICAgICBwb3N0UGFyYW1zLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHVzZXJOYW1lLFxyXG4gICAgICAgICAgcGFzc3dvcmRcclxuICAgICAgICB9KTtcclxuICAgICAgY29uc29sZS5sb2coJ25ld1Bvc3QnLCByZXN1bHQpO1xyXG4gICAgICBpZiAocmVzdWx0LmNvZGUgPT09IFdvcmRQcmVzc0NsaWVudFJldHVybkNvZGUuRXJyb3IpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gcmVzdWx0LmRhdGEgYXMgYW55OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgICAgbmV3IE5vdGljZShgUG9zdCBwdWJsaXNoZWQgZmFpbGVkIVxcbiR7ZGF0YS5jb2RlfTogJHtkYXRhLm1lc3NhZ2V9YCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV3IE5vdGljZSgnUG9zdCBwdWJsaXNoZWQgc3VjY2Vzc2Z1bGx5IScpO1xyXG4gICAgICAgIGlmIChwdWJsaXNoTW9kYWwpIHtcclxuICAgICAgICAgIHB1Ymxpc2hNb2RhbC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2dpbk1vZGFsLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdSZWFkaW5nIGZpbGUgY29udGVudCBmb3IgXFwnbmV3UG9zdFxcJyBmYWlsZWQ6ICcsIGVycm9yKTtcclxuICAgICAgbmV3IE5vdGljZShlcnJvci50b1N0cmluZygpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnWW91IHNob3VsZCBub3QgYmUgaGVyZSEnKTtcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBXb3JkcHJlc3NQbHVnaW4gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlS2V5IH0gZnJvbSAnLi9pMThuJztcclxuXHJcbi8qKlxyXG4gKiBXb3JkUHJlc3MgbG9naW4gbW9kYWwgd2l0aCB1c2VybmFtZSBhbmQgcGFzc3dvcmQgaW5wdXRzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdwTG9naW5Nb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBhcHA6IEFwcCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGx1Z2luOiBXb3JkcHJlc3NQbHVnaW4sXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uU3VibWl0OiAodXNlck5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgbW9kYWw6IE1vZGFsKSA9PiB2b2lkXHJcbiAgKSB7XHJcbiAgICBzdXBlcihhcHApO1xyXG4gIH1cclxuXHJcbiAgb25PcGVuKCkge1xyXG4gICAgY29uc3QgdCA9IChrZXk6IFRyYW5zbGF0ZUtleSwgdmFycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBzdHJpbmcgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5wbHVnaW4uaTE4bi50KGtleSwgdmFycyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cclxuICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDEnLCB7IHRleHQ6IHQoJ2xvZ2luTW9kYWxfdGl0bGUnKSB9KTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKHQoJ2xvZ2luTW9kYWxfdXNlcm5hbWUnKSlcclxuICAgICAgLnNldERlc2ModCgnbG9naW5Nb2RhbF91c2VybmFtZURlc2MnLCB7IHVybDogdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5kcG9pbnQgfSkpXHJcbiAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VyTmFtZSA/PyAnJylcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZVVzZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZXJOYW1lID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgLnNldE5hbWUodCgnbG9naW5Nb2RhbF9wYXNzd29yZCcpKVxyXG4gICAgICAuc2V0RGVzYyh0KCdsb2dpbk1vZGFsX3Bhc3N3b3JkRGVzYycsIHsgdXJsOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmRwb2ludCB9KSlcclxuICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3N3b3JkID8/ICcnKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlUGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzc3dvcmQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuc2V0TmFtZSh0KCdsb2dpbk1vZGFsX3JlbWVtYmVyVXNlcm5hbWUnKSlcclxuICAgICAgLnNldERlc2ModCgnbG9naW5Nb2RhbF9yZW1lbWJlclVzZXJuYW1lRGVzYycpKVxyXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZVVzZXJOYW1lKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlVXNlck5hbWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5zZXR0aW5ncy5zYXZlVXNlck5hbWUpIHtcclxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlck5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgLnNldE5hbWUodCgnbG9naW5Nb2RhbF9yZW1lbWJlclBhc3N3b3JkJykpXHJcbiAgICAgIC5zZXREZXNjKHQoJ2xvZ2luTW9kYWxfcmVtZW1iZXJQYXNzd29yZERlc2MnKSlcclxuICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVQYXNzd29yZClcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZVBhc3N3b3JkID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZVBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3N3b3JkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxyXG4gICAgICAgIC5zZXRCdXR0b25UZXh0KHQoJ2xvZ2luTW9kYWxfbG9naW5CdXR0b25UZXh0JykpXHJcbiAgICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VyTmFtZSEsIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3N3b3JkISwgdGhpcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIG9uQ2xvc2UoKSB7XHJcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gIH1cclxufVxyXG4iLCAiLyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMjIsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkXG4gKi9cblxuLyoqXG4gKiBETyBOT1QgRURJVCBUSElTIEZJTEVcbiAqIFRoZSBjb2RlIGluIHRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgZnJvbSBmaWxlcyBpbiAuL3NyYy9cbiAqL1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0cygpIHtcbiAgcmV0dXJuIHtcbiAgICBhc3luYzogZmFsc2UsXG4gICAgYmFzZVVybDogbnVsbCxcbiAgICBicmVha3M6IGZhbHNlLFxuICAgIGV4dGVuc2lvbnM6IG51bGwsXG4gICAgZ2ZtOiB0cnVlLFxuICAgIGhlYWRlcklkczogdHJ1ZSxcbiAgICBoZWFkZXJQcmVmaXg6ICcnLFxuICAgIGhpZ2hsaWdodDogbnVsbCxcbiAgICBsYW5nUHJlZml4OiAnbGFuZ3VhZ2UtJyxcbiAgICBtYW5nbGU6IHRydWUsXG4gICAgcGVkYW50aWM6IGZhbHNlLFxuICAgIHJlbmRlcmVyOiBudWxsLFxuICAgIHNhbml0aXplOiBmYWxzZSxcbiAgICBzYW5pdGl6ZXI6IG51bGwsXG4gICAgc2lsZW50OiBmYWxzZSxcbiAgICBzbWFydHlwYW50czogZmFsc2UsXG4gICAgdG9rZW5pemVyOiBudWxsLFxuICAgIHdhbGtUb2tlbnM6IG51bGwsXG4gICAgeGh0bWw6IGZhbHNlXG4gIH07XG59XG5cbmxldCBkZWZhdWx0cyA9IGdldERlZmF1bHRzKCk7XG5cbmZ1bmN0aW9uIGNoYW5nZURlZmF1bHRzKG5ld0RlZmF1bHRzKSB7XG4gIGRlZmF1bHRzID0gbmV3RGVmYXVsdHM7XG59XG5cbi8qKlxuICogSGVscGVyc1xuICovXG5jb25zdCBlc2NhcGVUZXN0ID0gL1smPD5cIiddLztcbmNvbnN0IGVzY2FwZVJlcGxhY2UgPSBuZXcgUmVnRXhwKGVzY2FwZVRlc3Quc291cmNlLCAnZycpO1xuY29uc3QgZXNjYXBlVGVzdE5vRW5jb2RlID0gL1s8PlwiJ118Jig/ISgjXFxkezEsN318I1tYeF1bYS1mQS1GMC05XXsxLDZ9fFxcdyspOykvO1xuY29uc3QgZXNjYXBlUmVwbGFjZU5vRW5jb2RlID0gbmV3IFJlZ0V4cChlc2NhcGVUZXN0Tm9FbmNvZGUuc291cmNlLCAnZycpO1xuY29uc3QgZXNjYXBlUmVwbGFjZW1lbnRzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnXG59O1xuY29uc3QgZ2V0RXNjYXBlUmVwbGFjZW1lbnQgPSAoY2gpID0+IGVzY2FwZVJlcGxhY2VtZW50c1tjaF07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCwgZW5jb2RlKSB7XG4gIGlmIChlbmNvZGUpIHtcbiAgICBpZiAoZXNjYXBlVGVzdC50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2UsIGdldEVzY2FwZVJlcGxhY2VtZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVzY2FwZVRlc3ROb0VuY29kZS50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZVJlcGxhY2VOb0VuY29kZSwgZ2V0RXNjYXBlUmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBodG1sO1xufVxuXG5jb25zdCB1bmVzY2FwZVRlc3QgPSAvJigjKD86XFxkKyl8KD86I3hbMC05QS1GYS1mXSspfCg/OlxcdyspKTs/L2lnO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKi9cbmZ1bmN0aW9uIHVuZXNjYXBlKGh0bWwpIHtcbiAgLy8gZXhwbGljaXRseSBtYXRjaCBkZWNpbWFsLCBoZXgsIGFuZCBuYW1lZCBIVE1MIGVudGl0aWVzXG4gIHJldHVybiBodG1sLnJlcGxhY2UodW5lc2NhcGVUZXN0LCAoXywgbikgPT4ge1xuICAgIG4gPSBuLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKG4gPT09ICdjb2xvbicpIHJldHVybiAnOic7XG4gICAgaWYgKG4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgIHJldHVybiBuLmNoYXJBdCgxKSA9PT0gJ3gnXG4gICAgICAgID8gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChuLnN1YnN0cmluZygyKSwgMTYpKVxuICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoK24uc3Vic3RyaW5nKDEpKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9KTtcbn1cblxuY29uc3QgY2FyZXQgPSAvKF58W15cXFtdKVxcXi9nO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nIHwgUmVnRXhwfSByZWdleFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdFxuICovXG5mdW5jdGlvbiBlZGl0KHJlZ2V4LCBvcHQpIHtcbiAgcmVnZXggPSB0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnID8gcmVnZXggOiByZWdleC5zb3VyY2U7XG4gIG9wdCA9IG9wdCB8fCAnJztcbiAgY29uc3Qgb2JqID0ge1xuICAgIHJlcGxhY2U6IChuYW1lLCB2YWwpID0+IHtcbiAgICAgIHZhbCA9IHZhbC5zb3VyY2UgfHwgdmFsO1xuICAgICAgdmFsID0gdmFsLnJlcGxhY2UoY2FyZXQsICckMScpO1xuICAgICAgcmVnZXggPSByZWdleC5yZXBsYWNlKG5hbWUsIHZhbCk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgZ2V0UmVnZXg6ICgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LCBvcHQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9uV29yZEFuZENvbG9uVGVzdCA9IC9bXlxcdzpdL2c7XG5jb25zdCBvcmlnaW5JbmRlcGVuZGVudFVybCA9IC9eJHxeW2Etel1bYS16MC05Ky4tXSo6fF5bPyNdL2k7XG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSBzYW5pdGl6ZVxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBocmVmXG4gKi9cbmZ1bmN0aW9uIGNsZWFuVXJsKHNhbml0aXplLCBiYXNlLCBocmVmKSB7XG4gIGlmIChzYW5pdGl6ZSkge1xuICAgIGxldCBwcm90O1xuICAgIHRyeSB7XG4gICAgICBwcm90ID0gZGVjb2RlVVJJQ29tcG9uZW50KHVuZXNjYXBlKGhyZWYpKVxuICAgICAgICAucmVwbGFjZShub25Xb3JkQW5kQ29sb25UZXN0LCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm90LmluZGV4T2YoJ2phdmFzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCd2YnNjcmlwdDonKSA9PT0gMCB8fCBwcm90LmluZGV4T2YoJ2RhdGE6JykgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoYmFzZSAmJiAhb3JpZ2luSW5kZXBlbmRlbnRVcmwudGVzdChocmVmKSkge1xuICAgIGhyZWYgPSByZXNvbHZlVXJsKGJhc2UsIGhyZWYpO1xuICB9XG4gIHRyeSB7XG4gICAgaHJlZiA9IGVuY29kZVVSSShocmVmKS5yZXBsYWNlKC8lMjUvZywgJyUnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBocmVmO1xufVxuXG5jb25zdCBiYXNlVXJscyA9IHt9O1xuY29uc3QganVzdERvbWFpbiA9IC9eW146XSs6XFwvKlteL10qJC87XG5jb25zdCBwcm90b2NvbCA9IC9eKFteOl0rOilbXFxzXFxTXSokLztcbmNvbnN0IGRvbWFpbiA9IC9eKFteOl0rOlxcLypbXi9dKilbXFxzXFxTXSokLztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVxuICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gIGlmICghYmFzZVVybHNbJyAnICsgYmFzZV0pIHtcbiAgICAvLyB3ZSBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgaW4gYmFzZSBhZnRlciB0aGUgbGFzdCBzbGFzaCBvZiBpdHMgcGF0aCBjb21wb25lbnQsXG4gICAgLy8gYnV0IHdlIG1pZ2h0IG5lZWQgdG8gYWRkIF90aGF0X1xuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tM1xuICAgIGlmIChqdXN0RG9tYWluLnRlc3QoYmFzZSkpIHtcbiAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVVybHNbJyAnICsgYmFzZV0gPSBydHJpbShiYXNlLCAnLycsIHRydWUpO1xuICAgIH1cbiAgfVxuICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG4gIGNvbnN0IHJlbGF0aXZlQmFzZSA9IGJhc2UuaW5kZXhPZignOicpID09PSAtMTtcblxuICBpZiAoaHJlZi5zdWJzdHJpbmcoMCwgMikgPT09ICcvLycpIHtcbiAgICBpZiAocmVsYXRpdmVCYXNlKSB7XG4gICAgICByZXR1cm4gaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShwcm90b2NvbCwgJyQxJykgKyBocmVmO1xuICB9IGVsc2UgaWYgKGhyZWYuY2hhckF0KDApID09PSAnLycpIHtcbiAgICBpZiAocmVsYXRpdmVCYXNlKSB7XG4gICAgICByZXR1cm4gaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShkb21haW4sICckMScpICsgaHJlZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZSArIGhyZWY7XG4gIH1cbn1cblxuY29uc3Qgbm9vcFRlc3QgPSB7IGV4ZWM6IGZ1bmN0aW9uIG5vb3BUZXN0KCkge30gfTtcblxuZnVuY3Rpb24gbWVyZ2Uob2JqKSB7XG4gIGxldCBpID0gMSxcbiAgICB0YXJnZXQsXG4gICAga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBzcGxpdENlbGxzKHRhYmxlUm93LCBjb3VudCkge1xuICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAvLyBiZWZvcmUgaXQgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbSBhbiBlc2NhcGVkIHBpcGVcbiAgY29uc3Qgcm93ID0gdGFibGVSb3cucmVwbGFjZSgvXFx8L2csIChtYXRjaCwgb2Zmc2V0LCBzdHIpID0+IHtcbiAgICAgIGxldCBlc2NhcGVkID0gZmFsc2UsXG4gICAgICAgIGN1cnIgPSBvZmZzZXQ7XG4gICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICAgIC8vIG9kZCBudW1iZXIgb2Ygc2xhc2hlcyBtZWFucyB8IGlzIGVzY2FwZWRcbiAgICAgICAgLy8gc28gd2UgbGVhdmUgaXQgYWxvbmVcbiAgICAgICAgcmV0dXJuICd8JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFkZCBzcGFjZSBiZWZvcmUgdW5lc2NhcGVkIHxcbiAgICAgICAgcmV0dXJuICcgfCc7XG4gICAgICB9XG4gICAgfSksXG4gICAgY2VsbHMgPSByb3cuc3BsaXQoLyBcXHwvKTtcbiAgbGV0IGkgPSAwO1xuXG4gIC8vIEZpcnN0L2xhc3QgY2VsbCBpbiBhIHJvdyBjYW5ub3QgYmUgZW1wdHkgaWYgaXQgaGFzIG5vIGxlYWRpbmcvdHJhaWxpbmcgcGlwZVxuICBpZiAoIWNlbGxzWzBdLnRyaW0oKSkgeyBjZWxscy5zaGlmdCgpOyB9XG4gIGlmIChjZWxscy5sZW5ndGggPiAwICYmICFjZWxsc1tjZWxscy5sZW5ndGggLSAxXS50cmltKCkpIHsgY2VsbHMucG9wKCk7IH1cblxuICBpZiAoY2VsbHMubGVuZ3RoID4gY291bnQpIHtcbiAgICBjZWxscy5zcGxpY2UoY291bnQpO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChjZWxscy5sZW5ndGggPCBjb3VudCkgY2VsbHMucHVzaCgnJyk7XG4gIH1cblxuICBmb3IgKDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlIGlzIGlnbm9yZWQgcGVyIHRoZSBnZm0gc3BlY1xuICAgIGNlbGxzW2ldID0gY2VsbHNbaV0udHJpbSgpLnJlcGxhY2UoL1xcXFxcXHwvZywgJ3wnKTtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59XG5cbi8qKlxuICogUmVtb3ZlIHRyYWlsaW5nICdjJ3MuIEVxdWl2YWxlbnQgdG8gc3RyLnJlcGxhY2UoL2MqJC8sICcnKS5cbiAqIC9jKiQvIGlzIHZ1bG5lcmFibGUgdG8gUkVET1MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtzdHJpbmd9IGNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW52ZXJ0IFJlbW92ZSBzdWZmaXggb2Ygbm9uLWMgY2hhcnMgaW5zdGVhZC4gRGVmYXVsdCBmYWxzZXkuXG4gKi9cbmZ1bmN0aW9uIHJ0cmltKHN0ciwgYywgaW52ZXJ0KSB7XG4gIGNvbnN0IGwgPSBzdHIubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8vIExlbmd0aCBvZiBzdWZmaXggbWF0Y2hpbmcgdGhlIGludmVydCBjb25kaXRpb24uXG4gIGxldCBzdWZmTGVuID0gMDtcblxuICAvLyBTdGVwIGxlZnQgdW50aWwgd2UgZmFpbCB0byBtYXRjaCB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgd2hpbGUgKHN1ZmZMZW4gPCBsKSB7XG4gICAgY29uc3QgY3VyckNoYXIgPSBzdHIuY2hhckF0KGwgLSBzdWZmTGVuIC0gMSk7XG4gICAgaWYgKGN1cnJDaGFyID09PSBjICYmICFpbnZlcnQpIHtcbiAgICAgIHN1ZmZMZW4rKztcbiAgICB9IGVsc2UgaWYgKGN1cnJDaGFyICE9PSBjICYmIGludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyLnNsaWNlKDAsIGwgLSBzdWZmTGVuKTtcbn1cblxuZnVuY3Rpb24gZmluZENsb3NpbmdCcmFja2V0KHN0ciwgYikge1xuICBpZiAoc3RyLmluZGV4T2YoYlsxXSkgPT09IC0xKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGNvbnN0IGwgPSBzdHIubGVuZ3RoO1xuICBsZXQgbGV2ZWwgPSAwLFxuICAgIGkgPSAwO1xuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChzdHJbaV0gPT09ICdcXFxcJykge1xuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAoc3RyW2ldID09PSBiWzBdKSB7XG4gICAgICBsZXZlbCsrO1xuICAgIH0gZWxzZSBpZiAoc3RyW2ldID09PSBiWzFdKSB7XG4gICAgICBsZXZlbC0tO1xuICAgICAgaWYgKGxldmVsIDwgMCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KSB7XG4gIGlmIChvcHQgJiYgb3B0LnNhbml0aXplICYmICFvcHQuc2lsZW50KSB7XG4gICAgY29uc29sZS53YXJuKCdtYXJrZWQoKTogc2FuaXRpemUgYW5kIHNhbml0aXplciBwYXJhbWV0ZXJzIGFyZSBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMC43LjAsIHNob3VsZCBub3QgYmUgdXNlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuIFJlYWQgbW9yZSBoZXJlOiBodHRwczovL21hcmtlZC5qcy5vcmcvIy9VU0lOR19BRFZBTkNFRC5tZCNvcHRpb25zJyk7XG4gIH1cbn1cblxuLy8gY29waWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU0NTAxMTMvODA2Nzc3XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqL1xuZnVuY3Rpb24gcmVwZWF0U3RyaW5nKHBhdHRlcm4sIGNvdW50KSB7XG4gIGlmIChjb3VudCA8IDEpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgbGV0IHJlc3VsdCA9ICcnO1xuICB3aGlsZSAoY291bnQgPiAxKSB7XG4gICAgaWYgKGNvdW50ICYgMSkge1xuICAgICAgcmVzdWx0ICs9IHBhdHRlcm47XG4gICAgfVxuICAgIGNvdW50ID4+PSAxO1xuICAgIHBhdHRlcm4gKz0gcGF0dGVybjtcbiAgfVxuICByZXR1cm4gcmVzdWx0ICsgcGF0dGVybjtcbn1cblxuZnVuY3Rpb24gb3V0cHV0TGluayhjYXAsIGxpbmssIHJhdywgbGV4ZXIpIHtcbiAgY29uc3QgaHJlZiA9IGxpbmsuaHJlZjtcbiAgY29uc3QgdGl0bGUgPSBsaW5rLnRpdGxlID8gZXNjYXBlKGxpbmsudGl0bGUpIDogbnVsbDtcbiAgY29uc3QgdGV4dCA9IGNhcFsxXS5yZXBsYWNlKC9cXFxcKFtcXFtcXF1dKS9nLCAnJDEnKTtcblxuICBpZiAoY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnKSB7XG4gICAgbGV4ZXIuc3RhdGUuaW5MaW5rID0gdHJ1ZTtcbiAgICBjb25zdCB0b2tlbiA9IHtcbiAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgIHJhdyxcbiAgICAgIGhyZWYsXG4gICAgICB0aXRsZSxcbiAgICAgIHRleHQsXG4gICAgICB0b2tlbnM6IGxleGVyLmlubGluZVRva2Vucyh0ZXh0KVxuICAgIH07XG4gICAgbGV4ZXIuc3RhdGUuaW5MaW5rID0gZmFsc2U7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2ltYWdlJyxcbiAgICByYXcsXG4gICAgaHJlZixcbiAgICB0aXRsZSxcbiAgICB0ZXh0OiBlc2NhcGUodGV4dClcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZW50Q29kZUNvbXBlbnNhdGlvbihyYXcsIHRleHQpIHtcbiAgY29uc3QgbWF0Y2hJbmRlbnRUb0NvZGUgPSByYXcubWF0Y2goL14oXFxzKykoPzpgYGApLyk7XG5cbiAgaWYgKG1hdGNoSW5kZW50VG9Db2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBjb25zdCBpbmRlbnRUb0NvZGUgPSBtYXRjaEluZGVudFRvQ29kZVsxXTtcblxuICByZXR1cm4gdGV4dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAubWFwKG5vZGUgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hJbmRlbnRJbk5vZGUgPSBub2RlLm1hdGNoKC9eXFxzKy8pO1xuICAgICAgaWYgKG1hdGNoSW5kZW50SW5Ob2RlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbaW5kZW50SW5Ob2RlXSA9IG1hdGNoSW5kZW50SW5Ob2RlO1xuXG4gICAgICBpZiAoaW5kZW50SW5Ob2RlLmxlbmd0aCA+PSBpbmRlbnRUb0NvZGUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBub2RlLnNsaWNlKGluZGVudFRvQ29kZS5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9KVxuICAgIC5qb2luKCdcXG4nKTtcbn1cblxuLyoqXG4gKiBUb2tlbml6ZXJcbiAqL1xuY2xhc3MgVG9rZW5pemVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgZGVmYXVsdHM7XG4gIH1cblxuICBzcGFjZShzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLm5ld2xpbmUuZXhlYyhzcmMpO1xuICAgIGlmIChjYXAgJiYgY2FwWzBdLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdzcGFjZScsXG4gICAgICAgIHJhdzogY2FwWzBdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGNvZGUoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5jb2RlLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gY2FwWzBdLnJlcGxhY2UoL14gezEsNH0vZ20sICcnKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIGNvZGVCbG9ja1N0eWxlOiAnaW5kZW50ZWQnLFxuICAgICAgICB0ZXh0OiAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgPyBydHJpbSh0ZXh0LCAnXFxuJylcbiAgICAgICAgICA6IHRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZmVuY2VzKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suZmVuY2VzLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBjb25zdCByYXcgPSBjYXBbMF07XG4gICAgICBjb25zdCB0ZXh0ID0gaW5kZW50Q29kZUNvbXBlbnNhdGlvbihyYXcsIGNhcFszXSB8fCAnJyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgcmF3LFxuICAgICAgICBsYW5nOiBjYXBbMl0gPyBjYXBbMl0udHJpbSgpLnJlcGxhY2UodGhpcy5ydWxlcy5pbmxpbmUuX2VzY2FwZXMsICckMScpIDogY2FwWzJdLFxuICAgICAgICB0ZXh0XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGhlYWRpbmcoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5oZWFkaW5nLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgdGV4dCA9IGNhcFsyXS50cmltKCk7XG5cbiAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyAjc1xuICAgICAgaWYgKC8jJC8udGVzdCh0ZXh0KSkge1xuICAgICAgICBjb25zdCB0cmltbWVkID0gcnRyaW0odGV4dCwgJyMnKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAgIHRleHQgPSB0cmltbWVkLnRyaW0oKTtcbiAgICAgICAgfSBlbHNlIGlmICghdHJpbW1lZCB8fCAvICQvLnRlc3QodHJpbW1lZCkpIHtcbiAgICAgICAgICAvLyBDb21tb25NYXJrIHJlcXVpcmVzIHNwYWNlIGJlZm9yZSB0cmFpbGluZyAjc1xuICAgICAgICAgIHRleHQgPSB0cmltbWVkLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBkZXB0aDogY2FwWzFdLmxlbmd0aCxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZSh0ZXh0KVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBocihzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmhyLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnaHInLFxuICAgICAgICByYXc6IGNhcFswXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBibG9ja3F1b3RlKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suYmxvY2txdW90ZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdGV4dCA9IGNhcFswXS5yZXBsYWNlKC9eICo+WyBcXHRdPy9nbSwgJycpO1xuICAgICAgY29uc3QgdG9wID0gdGhpcy5sZXhlci5zdGF0ZS50b3A7XG4gICAgICB0aGlzLmxleGVyLnN0YXRlLnRvcCA9IHRydWU7XG4gICAgICBjb25zdCB0b2tlbnMgPSB0aGlzLmxleGVyLmJsb2NrVG9rZW5zKHRleHQpO1xuICAgICAgdGhpcy5sZXhlci5zdGF0ZS50b3AgPSB0b3A7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZScsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICB0b2tlbnMsXG4gICAgICAgIHRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgbGlzdChzcmMpIHtcbiAgICBsZXQgY2FwID0gdGhpcy5ydWxlcy5ibG9jay5saXN0LmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBsZXQgcmF3LCBpc3Rhc2ssIGlzY2hlY2tlZCwgaW5kZW50LCBpLCBibGFua0xpbmUsIGVuZHNXaXRoQmxhbmtMaW5lLFxuICAgICAgICBsaW5lLCBuZXh0TGluZSwgcmF3TGluZSwgaXRlbUNvbnRlbnRzLCBlbmRFYXJseTtcblxuICAgICAgbGV0IGJ1bGwgPSBjYXBbMV0udHJpbSgpO1xuICAgICAgY29uc3QgaXNvcmRlcmVkID0gYnVsbC5sZW5ndGggPiAxO1xuXG4gICAgICBjb25zdCBsaXN0ID0ge1xuICAgICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICAgIHJhdzogJycsXG4gICAgICAgIG9yZGVyZWQ6IGlzb3JkZXJlZCxcbiAgICAgICAgc3RhcnQ6IGlzb3JkZXJlZCA/ICtidWxsLnNsaWNlKDAsIC0xKSA6ICcnLFxuICAgICAgICBsb29zZTogZmFsc2UsXG4gICAgICAgIGl0ZW1zOiBbXVxuICAgICAgfTtcblxuICAgICAgYnVsbCA9IGlzb3JkZXJlZCA/IGBcXFxcZHsxLDl9XFxcXCR7YnVsbC5zbGljZSgtMSl9YCA6IGBcXFxcJHtidWxsfWA7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgYnVsbCA9IGlzb3JkZXJlZCA/IGJ1bGwgOiAnWyorLV0nO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgbmV4dCBsaXN0IGl0ZW1cbiAgICAgIGNvbnN0IGl0ZW1SZWdleCA9IG5ldyBSZWdFeHAoYF4oIHswLDN9JHtidWxsfSkoKD86W1xcdCBdW15cXFxcbl0qKT8oPzpcXFxcbnwkKSlgKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgY3VycmVudCBidWxsZXQgcG9pbnQgY2FuIHN0YXJ0IGEgbmV3IExpc3QgSXRlbVxuICAgICAgd2hpbGUgKHNyYykge1xuICAgICAgICBlbmRFYXJseSA9IGZhbHNlO1xuICAgICAgICBpZiAoIShjYXAgPSBpdGVtUmVnZXguZXhlYyhzcmMpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucnVsZXMuYmxvY2suaHIudGVzdChzcmMpKSB7IC8vIEVuZCBsaXN0IGlmIGJ1bGxldCB3YXMgYWN0dWFsbHkgSFIgKHBvc3NpYmx5IG1vdmUgaW50byBpdGVtUmVnZXg/KVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmF3ID0gY2FwWzBdO1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHJhdy5sZW5ndGgpO1xuXG4gICAgICAgIGxpbmUgPSBjYXBbMl0uc3BsaXQoJ1xcbicsIDEpWzBdO1xuICAgICAgICBuZXh0TGluZSA9IHNyYy5zcGxpdCgnXFxuJywgMSlbMF07XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgICAgIGluZGVudCA9IDI7XG4gICAgICAgICAgaXRlbUNvbnRlbnRzID0gbGluZS50cmltTGVmdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluZGVudCA9IGNhcFsyXS5zZWFyY2goL1teIF0vKTsgLy8gRmluZCBmaXJzdCBub24tc3BhY2UgY2hhclxuICAgICAgICAgIGluZGVudCA9IGluZGVudCA+IDQgPyAxIDogaW5kZW50OyAvLyBUcmVhdCBpbmRlbnRlZCBjb2RlIGJsb2NrcyAoPiA0IHNwYWNlcykgYXMgaGF2aW5nIG9ubHkgMSBpbmRlbnRcbiAgICAgICAgICBpdGVtQ29udGVudHMgPSBsaW5lLnNsaWNlKGluZGVudCk7XG4gICAgICAgICAgaW5kZW50ICs9IGNhcFsxXS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBibGFua0xpbmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIWxpbmUgJiYgL14gKiQvLnRlc3QobmV4dExpbmUpKSB7IC8vIEl0ZW1zIGJlZ2luIHdpdGggYXQgbW9zdCBvbmUgYmxhbmsgbGluZVxuICAgICAgICAgIHJhdyArPSBuZXh0TGluZSArICdcXG4nO1xuICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcobmV4dExpbmUubGVuZ3RoICsgMSk7XG4gICAgICAgICAgZW5kRWFybHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlbmRFYXJseSkge1xuICAgICAgICAgIGNvbnN0IG5leHRCdWxsZXRSZWdleCA9IG5ldyBSZWdFeHAoYF4gezAsJHtNYXRoLm1pbigzLCBpbmRlbnQgLSAxKX19KD86WyorLV18XFxcXGR7MSw5fVsuKV0pKCg/OiBbXlxcXFxuXSopPyg/OlxcXFxufCQpKWApO1xuICAgICAgICAgIGNvbnN0IGhyUmVnZXggPSBuZXcgUmVnRXhwKGBeIHswLCR7TWF0aC5taW4oMywgaW5kZW50IC0gMSl9fSgoPzotICopezMsfXwoPzpfICopezMsfXwoPzpcXFxcKiAqKXszLH0pKD86XFxcXG4rfCQpYCk7XG4gICAgICAgICAgY29uc3QgZmVuY2VzQmVnaW5SZWdleCA9IG5ldyBSZWdFeHAoYF4gezAsJHtNYXRoLm1pbigzLCBpbmRlbnQgLSAxKX19KD86XFxgXFxgXFxgfH5+filgKTtcbiAgICAgICAgICBjb25zdCBoZWFkaW5nQmVnaW5SZWdleCA9IG5ldyBSZWdFeHAoYF4gezAsJHtNYXRoLm1pbigzLCBpbmRlbnQgLSAxKX19I2ApO1xuXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgZm9sbG93aW5nIGxpbmVzIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBMaXN0IEl0ZW1cbiAgICAgICAgICB3aGlsZSAoc3JjKSB7XG4gICAgICAgICAgICByYXdMaW5lID0gc3JjLnNwbGl0KCdcXG4nLCAxKVswXTtcbiAgICAgICAgICAgIGxpbmUgPSByYXdMaW5lO1xuXG4gICAgICAgICAgICAvLyBSZS1hbGlnbiB0byBmb2xsb3cgY29tbW9ubWFyayBuZXN0aW5nIHJ1bGVzXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoL14gezEsNH0oPz0oIHs0fSkqW14gXSkvZywgJyAgJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVuZCBsaXN0IGl0ZW0gaWYgZm91bmQgY29kZSBmZW5jZXNcbiAgICAgICAgICAgIGlmIChmZW5jZXNCZWdpblJlZ2V4LnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVuZCBsaXN0IGl0ZW0gaWYgZm91bmQgc3RhcnQgb2YgbmV3IGhlYWRpbmdcbiAgICAgICAgICAgIGlmIChoZWFkaW5nQmVnaW5SZWdleC50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbmQgbGlzdCBpdGVtIGlmIGZvdW5kIHN0YXJ0IG9mIG5ldyBidWxsZXRcbiAgICAgICAgICAgIGlmIChuZXh0QnVsbGV0UmVnZXgudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSG9yaXpvbnRhbCBydWxlIGZvdW5kXG4gICAgICAgICAgICBpZiAoaHJSZWdleC50ZXN0KHNyYykpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsaW5lLnNlYXJjaCgvW14gXS8pID49IGluZGVudCB8fCAhbGluZS50cmltKCkpIHsgLy8gRGVkZW50IGlmIHBvc3NpYmxlXG4gICAgICAgICAgICAgIGl0ZW1Db250ZW50cyArPSAnXFxuJyArIGxpbmUuc2xpY2UoaW5kZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWJsYW5rTGluZSkgeyAvLyBVbnRpbCBibGFuayBsaW5lLCBpdGVtIGRvZXNuJ3QgbmVlZCBpbmRlbnRhdGlvblxuICAgICAgICAgICAgICBpdGVtQ29udGVudHMgKz0gJ1xcbicgKyBsaW5lO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gT3RoZXJ3aXNlLCBpbXByb3BlciBpbmRlbnRhdGlvbiBlbmRzIHRoaXMgaXRlbVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFibGFua0xpbmUgJiYgIWxpbmUudHJpbSgpKSB7IC8vIENoZWNrIGlmIGN1cnJlbnQgbGluZSBpcyBibGFua1xuICAgICAgICAgICAgICBibGFua0xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByYXcgKz0gcmF3TGluZSArICdcXG4nO1xuICAgICAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhyYXdMaW5lLmxlbmd0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbGlzdC5sb29zZSkge1xuICAgICAgICAgIC8vIElmIHRoZSBwcmV2aW91cyBpdGVtIGVuZGVkIHdpdGggYSBibGFuayBsaW5lLCB0aGUgbGlzdCBpcyBsb29zZVxuICAgICAgICAgIGlmIChlbmRzV2l0aEJsYW5rTGluZSkge1xuICAgICAgICAgICAgbGlzdC5sb29zZSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXFxuICpcXG4gKiQvLnRlc3QocmF3KSkge1xuICAgICAgICAgICAgZW5kc1dpdGhCbGFua0xpbmUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciB0YXNrIGxpc3QgaXRlbXNcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICAgICAgICBpc3Rhc2sgPSAvXlxcW1sgeFhdXFxdIC8uZXhlYyhpdGVtQ29udGVudHMpO1xuICAgICAgICAgIGlmIChpc3Rhc2spIHtcbiAgICAgICAgICAgIGlzY2hlY2tlZCA9IGlzdGFza1swXSAhPT0gJ1sgXSAnO1xuICAgICAgICAgICAgaXRlbUNvbnRlbnRzID0gaXRlbUNvbnRlbnRzLnJlcGxhY2UoL15cXFtbIHhYXVxcXSArLywgJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QuaXRlbXMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2xpc3RfaXRlbScsXG4gICAgICAgICAgcmF3LFxuICAgICAgICAgIHRhc2s6ICEhaXN0YXNrLFxuICAgICAgICAgIGNoZWNrZWQ6IGlzY2hlY2tlZCxcbiAgICAgICAgICBsb29zZTogZmFsc2UsXG4gICAgICAgICAgdGV4dDogaXRlbUNvbnRlbnRzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxpc3QucmF3ICs9IHJhdztcbiAgICAgIH1cblxuICAgICAgLy8gRG8gbm90IGNvbnN1bWUgbmV3bGluZXMgYXQgZW5kIG9mIGZpbmFsIGl0ZW0uIEFsdGVybmF0aXZlbHksIG1ha2UgaXRlbVJlZ2V4ICpzdGFydCogd2l0aCBhbnkgbmV3bGluZXMgdG8gc2ltcGxpZnkvc3BlZWQgdXAgZW5kc1dpdGhCbGFua0xpbmUgbG9naWNcbiAgICAgIGxpc3QuaXRlbXNbbGlzdC5pdGVtcy5sZW5ndGggLSAxXS5yYXcgPSByYXcudHJpbVJpZ2h0KCk7XG4gICAgICBsaXN0Lml0ZW1zW2xpc3QuaXRlbXMubGVuZ3RoIC0gMV0udGV4dCA9IGl0ZW1Db250ZW50cy50cmltUmlnaHQoKTtcbiAgICAgIGxpc3QucmF3ID0gbGlzdC5yYXcudHJpbVJpZ2h0KCk7XG5cbiAgICAgIGNvbnN0IGwgPSBsaXN0Lml0ZW1zLmxlbmd0aDtcblxuICAgICAgLy8gSXRlbSBjaGlsZCB0b2tlbnMgaGFuZGxlZCBoZXJlIGF0IGVuZCBiZWNhdXNlIHdlIG5lZWRlZCB0byBoYXZlIHRoZSBmaW5hbCBpdGVtIHRvIHRyaW0gaXQgZmlyc3RcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5sZXhlci5zdGF0ZS50b3AgPSBmYWxzZTtcbiAgICAgICAgbGlzdC5pdGVtc1tpXS50b2tlbnMgPSB0aGlzLmxleGVyLmJsb2NrVG9rZW5zKGxpc3QuaXRlbXNbaV0udGV4dCwgW10pO1xuXG4gICAgICAgIGlmICghbGlzdC5sb29zZSkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIGxpc3Qgc2hvdWxkIGJlIGxvb3NlXG4gICAgICAgICAgY29uc3Qgc3BhY2VycyA9IGxpc3QuaXRlbXNbaV0udG9rZW5zLmZpbHRlcih0ID0+IHQudHlwZSA9PT0gJ3NwYWNlJyk7XG4gICAgICAgICAgY29uc3QgaGFzTXVsdGlwbGVMaW5lQnJlYWtzID0gc3BhY2Vycy5sZW5ndGggPiAwICYmIHNwYWNlcnMuc29tZSh0ID0+IC9cXG4uKlxcbi8udGVzdCh0LnJhdykpO1xuXG4gICAgICAgICAgbGlzdC5sb29zZSA9IGhhc011bHRpcGxlTGluZUJyZWFrcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTZXQgYWxsIGl0ZW1zIHRvIGxvb3NlIGlmIGxpc3QgaXMgbG9vc2VcbiAgICAgIGlmIChsaXN0Lmxvb3NlKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBsaXN0Lml0ZW1zW2ldLmxvb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gIH1cblxuICBodG1sKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suaHRtbC5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6ICdodG1sJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHByZTogIXRoaXMub3B0aW9ucy5zYW5pdGl6ZXJcbiAgICAgICAgICAmJiAoY2FwWzFdID09PSAncHJlJyB8fCBjYXBbMV0gPT09ICdzY3JpcHQnIHx8IGNhcFsxXSA9PT0gJ3N0eWxlJyksXG4gICAgICAgIHRleHQ6IGNhcFswXVxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2FuaXRpemUpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSkgOiBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgdG9rZW4udHlwZSA9ICdwYXJhZ3JhcGgnO1xuICAgICAgICB0b2tlbi50ZXh0ID0gdGV4dDtcbiAgICAgICAgdG9rZW4udG9rZW5zID0gdGhpcy5sZXhlci5pbmxpbmUodGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgZGVmKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuYmxvY2suZGVmLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICBjb25zdCB0YWcgPSBjYXBbMV0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICBjb25zdCBocmVmID0gY2FwWzJdID8gY2FwWzJdLnJlcGxhY2UoL148KC4qKT4kLywgJyQxJykucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5fZXNjYXBlcywgJyQxJykgOiAnJztcbiAgICAgIGNvbnN0IHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnN1YnN0cmluZygxLCBjYXBbM10ubGVuZ3RoIC0gMSkucmVwbGFjZSh0aGlzLnJ1bGVzLmlubGluZS5fZXNjYXBlcywgJyQxJykgOiBjYXBbM107XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZGVmJyxcbiAgICAgICAgdGFnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgaHJlZixcbiAgICAgICAgdGl0bGVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdGFibGUoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5ibG9jay50YWJsZS5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXSkubWFwKGMgPT4geyByZXR1cm4geyB0ZXh0OiBjIH07IH0pLFxuICAgICAgICBhbGlnbjogY2FwWzJdLnJlcGxhY2UoL14gKnxcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIHJvd3M6IGNhcFszXSAmJiBjYXBbM10udHJpbSgpID8gY2FwWzNdLnJlcGxhY2UoL1xcblsgXFx0XSokLywgJycpLnNwbGl0KCdcXG4nKSA6IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoaXRlbS5oZWFkZXIubGVuZ3RoID09PSBpdGVtLmFsaWduLmxlbmd0aCkge1xuICAgICAgICBpdGVtLnJhdyA9IGNhcFswXTtcblxuICAgICAgICBsZXQgbCA9IGl0ZW0uYWxpZ24ubGVuZ3RoO1xuICAgICAgICBsZXQgaSwgaiwgaywgcm93O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGwgPSBpdGVtLnJvd3MubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaXRlbS5yb3dzW2ldID0gc3BsaXRDZWxscyhpdGVtLnJvd3NbaV0sIGl0ZW0uaGVhZGVyLmxlbmd0aCkubWFwKGMgPT4geyByZXR1cm4geyB0ZXh0OiBjIH07IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFyc2UgY2hpbGQgdG9rZW5zIGluc2lkZSBoZWFkZXJzIGFuZCBjZWxsc1xuXG4gICAgICAgIC8vIGhlYWRlciBjaGlsZCB0b2tlbnNcbiAgICAgICAgbCA9IGl0ZW0uaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuICAgICAgICAgIGl0ZW0uaGVhZGVyW2pdLnRva2VucyA9IHRoaXMubGV4ZXIuaW5saW5lKGl0ZW0uaGVhZGVyW2pdLnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2VsbCBjaGlsZCB0b2tlbnNcbiAgICAgICAgbCA9IGl0ZW0ucm93cy5sZW5ndGg7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICByb3cgPSBpdGVtLnJvd3Nbal07XG4gICAgICAgICAgZm9yIChrID0gMDsgayA8IHJvdy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgcm93W2tdLnRva2VucyA9IHRoaXMubGV4ZXIuaW5saW5lKHJvd1trXS50ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsaGVhZGluZyhzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLmxoZWFkaW5nLmV4ZWMoc3JjKTtcbiAgICBpZiAoY2FwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICBkZXB0aDogY2FwWzJdLmNoYXJBdCgwKSA9PT0gJz0nID8gMSA6IDIsXG4gICAgICAgIHRleHQ6IGNhcFsxXSxcbiAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZShjYXBbMV0pXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHBhcmFncmFwaChzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLnBhcmFncmFwaC5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgY29uc3QgdGV4dCA9IGNhcFsxXS5jaGFyQXQoY2FwWzFdLmxlbmd0aCAtIDEpID09PSAnXFxuJ1xuICAgICAgICA/IGNhcFsxXS5zbGljZSgwLCAtMSlcbiAgICAgICAgOiBjYXBbMV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQsXG4gICAgICAgIHRva2VuczogdGhpcy5sZXhlci5pbmxpbmUodGV4dClcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdGV4dChzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrLnRleHQuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQ6IGNhcFswXSxcbiAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZShjYXBbMF0pXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGVzY2FwZShzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5lc2NhcGUuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdlc2NhcGUnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdGV4dDogZXNjYXBlKGNhcFsxXSlcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdGFnKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLnRhZy5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgaWYgKCF0aGlzLmxleGVyLnN0YXRlLmluTGluayAmJiAvXjxhIC9pLnRlc3QoY2FwWzBdKSkge1xuICAgICAgICB0aGlzLmxleGVyLnN0YXRlLmluTGluayA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rICYmIC9ePFxcL2E+L2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5MaW5rID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayAmJiAvXjwocHJlfGNvZGV8a2JkfHNjcmlwdCkoXFxzfD4pL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayAmJiAvXjxcXC8ocHJlfGNvZGV8a2JkfHNjcmlwdCkoXFxzfD4pL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jayA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgICA/ICd0ZXh0J1xuICAgICAgICAgIDogJ2h0bWwnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgaW5MaW5rOiB0aGlzLmxleGVyLnN0YXRlLmluTGluayxcbiAgICAgICAgaW5SYXdCbG9jazogdGhpcy5sZXhlci5zdGF0ZS5pblJhd0Jsb2NrLFxuICAgICAgICB0ZXh0OiB0aGlzLm9wdGlvbnMuc2FuaXRpemVcbiAgICAgICAgICA/ICh0aGlzLm9wdGlvbnMuc2FuaXRpemVyXG4gICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKVxuICAgICAgICAgICAgOiBlc2NhcGUoY2FwWzBdKSlcbiAgICAgICAgICA6IGNhcFswXVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBsaW5rKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmxpbmsuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGNvbnN0IHRyaW1tZWRVcmwgPSBjYXBbMl0udHJpbSgpO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucGVkYW50aWMgJiYgL148Ly50ZXN0KHRyaW1tZWRVcmwpKSB7XG4gICAgICAgIC8vIGNvbW1vbm1hcmsgcmVxdWlyZXMgbWF0Y2hpbmcgYW5nbGUgYnJhY2tldHNcbiAgICAgICAgaWYgKCEoLz4kLy50ZXN0KHRyaW1tZWRVcmwpKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuZGluZyBhbmdsZSBicmFja2V0IGNhbm5vdCBiZSBlc2NhcGVkXG4gICAgICAgIGNvbnN0IHJ0cmltU2xhc2ggPSBydHJpbSh0cmltbWVkVXJsLnNsaWNlKDAsIC0xKSwgJ1xcXFwnKTtcbiAgICAgICAgaWYgKCh0cmltbWVkVXJsLmxlbmd0aCAtIHJ0cmltU2xhc2gubGVuZ3RoKSAlIDIgPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGZpbmQgY2xvc2luZyBwYXJlbnRoZXNpc1xuICAgICAgICBjb25zdCBsYXN0UGFyZW5JbmRleCA9IGZpbmRDbG9zaW5nQnJhY2tldChjYXBbMl0sICcoKScpO1xuICAgICAgICBpZiAobGFzdFBhcmVuSW5kZXggPiAtMSkge1xuICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gY2FwWzBdLmluZGV4T2YoJyEnKSA9PT0gMCA/IDUgOiA0O1xuICAgICAgICAgIGNvbnN0IGxpbmtMZW4gPSBzdGFydCArIGNhcFsxXS5sZW5ndGggKyBsYXN0UGFyZW5JbmRleDtcbiAgICAgICAgICBjYXBbMl0gPSBjYXBbMl0uc3Vic3RyaW5nKDAsIGxhc3RQYXJlbkluZGV4KTtcbiAgICAgICAgICBjYXBbMF0gPSBjYXBbMF0uc3Vic3RyaW5nKDAsIGxpbmtMZW4pLnRyaW0oKTtcbiAgICAgICAgICBjYXBbM10gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGhyZWYgPSBjYXBbMl07XG4gICAgICBsZXQgdGl0bGUgPSAnJztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgLy8gc3BsaXQgcGVkYW50aWMgaHJlZiBhbmQgdGl0bGVcbiAgICAgICAgY29uc3QgbGluayA9IC9eKFteJ1wiXSpbXlxcc10pXFxzKyhbJ1wiXSkoLiopXFwyLy5leGVjKGhyZWYpO1xuXG4gICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgaHJlZiA9IGxpbmtbMV07XG4gICAgICAgICAgdGl0bGUgPSBsaW5rWzNdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aXRsZSA9IGNhcFszXSA/IGNhcFszXS5zbGljZSgxLCAtMSkgOiAnJztcbiAgICAgIH1cblxuICAgICAgaHJlZiA9IGhyZWYudHJpbSgpO1xuICAgICAgaWYgKC9ePC8udGVzdChocmVmKSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljICYmICEoLz4kLy50ZXN0KHRyaW1tZWRVcmwpKSkge1xuICAgICAgICAgIC8vIHBlZGFudGljIGFsbG93cyBzdGFydGluZyBhbmdsZSBicmFja2V0IHdpdGhvdXQgZW5kaW5nIGFuZ2xlIGJyYWNrZXRcbiAgICAgICAgICBocmVmID0gaHJlZi5zbGljZSgxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBocmVmID0gaHJlZi5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXRMaW5rKGNhcCwge1xuICAgICAgICBocmVmOiBocmVmID8gaHJlZi5yZXBsYWNlKHRoaXMucnVsZXMuaW5saW5lLl9lc2NhcGVzLCAnJDEnKSA6IGhyZWYsXG4gICAgICAgIHRpdGxlOiB0aXRsZSA/IHRpdGxlLnJlcGxhY2UodGhpcy5ydWxlcy5pbmxpbmUuX2VzY2FwZXMsICckMScpIDogdGl0bGVcbiAgICAgIH0sIGNhcFswXSwgdGhpcy5sZXhlcik7XG4gICAgfVxuICB9XG5cbiAgcmVmbGluayhzcmMsIGxpbmtzKSB7XG4gICAgbGV0IGNhcDtcbiAgICBpZiAoKGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLnJlZmxpbmsuZXhlYyhzcmMpKVxuICAgICAgICB8fCAoY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUubm9saW5rLmV4ZWMoc3JjKSkpIHtcbiAgICAgIGxldCBsaW5rID0gKGNhcFsyXSB8fCBjYXBbMV0pLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIGxpbmsgPSBsaW5rc1tsaW5rLnRvTG93ZXJDYXNlKCldO1xuICAgICAgaWYgKCFsaW5rKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBjYXBbMF0uY2hhckF0KDApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICByYXc6IHRleHQsXG4gICAgICAgICAgdGV4dFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dHB1dExpbmsoY2FwLCBsaW5rLCBjYXBbMF0sIHRoaXMubGV4ZXIpO1xuICAgIH1cbiAgfVxuXG4gIGVtU3Ryb25nKHNyYywgbWFza2VkU3JjLCBwcmV2Q2hhciA9ICcnKSB7XG4gICAgbGV0IG1hdGNoID0gdGhpcy5ydWxlcy5pbmxpbmUuZW1TdHJvbmcubERlbGltLmV4ZWMoc3JjKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm47XG5cbiAgICAvLyBfIGNhbid0IGJlIGJldHdlZW4gdHdvIGFscGhhbnVtZXJpY3MuIFxccHtMfVxccHtOfSBpbmNsdWRlcyBub24tZW5nbGlzaCBhbHBoYWJldC9udW1iZXJzIGFzIHdlbGxcbiAgICBpZiAobWF0Y2hbM10gJiYgcHJldkNoYXIubWF0Y2goL1tcXHB7TH1cXHB7Tn1dL3UpKSByZXR1cm47XG5cbiAgICBjb25zdCBuZXh0Q2hhciA9IG1hdGNoWzFdIHx8IG1hdGNoWzJdIHx8ICcnO1xuXG4gICAgaWYgKCFuZXh0Q2hhciB8fCAobmV4dENoYXIgJiYgKHByZXZDaGFyID09PSAnJyB8fCB0aGlzLnJ1bGVzLmlubGluZS5wdW5jdHVhdGlvbi5leGVjKHByZXZDaGFyKSkpKSB7XG4gICAgICBjb25zdCBsTGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoIC0gMTtcbiAgICAgIGxldCByRGVsaW0sIHJMZW5ndGgsIGRlbGltVG90YWwgPSBsTGVuZ3RoLCBtaWREZWxpbVRvdGFsID0gMDtcblxuICAgICAgY29uc3QgZW5kUmVnID0gbWF0Y2hbMF1bMF0gPT09ICcqJyA/IHRoaXMucnVsZXMuaW5saW5lLmVtU3Ryb25nLnJEZWxpbUFzdCA6IHRoaXMucnVsZXMuaW5saW5lLmVtU3Ryb25nLnJEZWxpbVVuZDtcbiAgICAgIGVuZFJlZy5sYXN0SW5kZXggPSAwO1xuXG4gICAgICAvLyBDbGlwIG1hc2tlZFNyYyB0byBzYW1lIHNlY3Rpb24gb2Ygc3RyaW5nIGFzIHNyYyAobW92ZSB0byBsZXhlcj8pXG4gICAgICBtYXNrZWRTcmMgPSBtYXNrZWRTcmMuc2xpY2UoLTEgKiBzcmMubGVuZ3RoICsgbExlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgobWF0Y2ggPSBlbmRSZWcuZXhlYyhtYXNrZWRTcmMpKSAhPSBudWxsKSB7XG4gICAgICAgIHJEZWxpbSA9IG1hdGNoWzFdIHx8IG1hdGNoWzJdIHx8IG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IG1hdGNoWzZdO1xuXG4gICAgICAgIGlmICghckRlbGltKSBjb250aW51ZTsgLy8gc2tpcCBzaW5nbGUgKiBpbiBfX2FiYyphYmNfX1xuXG4gICAgICAgIHJMZW5ndGggPSByRGVsaW0ubGVuZ3RoO1xuXG4gICAgICAgIGlmIChtYXRjaFszXSB8fCBtYXRjaFs0XSkgeyAvLyBmb3VuZCBhbm90aGVyIExlZnQgRGVsaW1cbiAgICAgICAgICBkZWxpbVRvdGFsICs9IHJMZW5ndGg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbNV0gfHwgbWF0Y2hbNl0pIHsgLy8gZWl0aGVyIExlZnQgb3IgUmlnaHQgRGVsaW1cbiAgICAgICAgICBpZiAobExlbmd0aCAlIDMgJiYgISgobExlbmd0aCArIHJMZW5ndGgpICUgMykpIHtcbiAgICAgICAgICAgIG1pZERlbGltVG90YWwgKz0gckxlbmd0aDtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBDb21tb25NYXJrIEVtcGhhc2lzIFJ1bGVzIDktMTBcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZWxpbVRvdGFsIC09IHJMZW5ndGg7XG5cbiAgICAgICAgaWYgKGRlbGltVG90YWwgPiAwKSBjb250aW51ZTsgLy8gSGF2ZW4ndCBmb3VuZCBlbm91Z2ggY2xvc2luZyBkZWxpbWl0ZXJzXG5cbiAgICAgICAgLy8gUmVtb3ZlIGV4dHJhIGNoYXJhY3RlcnMuICphKioqIC0+ICphKlxuICAgICAgICByTGVuZ3RoID0gTWF0aC5taW4ockxlbmd0aCwgckxlbmd0aCArIGRlbGltVG90YWwgKyBtaWREZWxpbVRvdGFsKTtcblxuICAgICAgICBjb25zdCByYXcgPSBzcmMuc2xpY2UoMCwgbExlbmd0aCArIG1hdGNoLmluZGV4ICsgKG1hdGNoWzBdLmxlbmd0aCAtIHJEZWxpbS5sZW5ndGgpICsgckxlbmd0aCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGBlbWAgaWYgc21hbGxlc3QgZGVsaW1pdGVyIGhhcyBvZGQgY2hhciBjb3VudC4gKmEqKipcbiAgICAgICAgaWYgKE1hdGgubWluKGxMZW5ndGgsIHJMZW5ndGgpICUgMikge1xuICAgICAgICAgIGNvbnN0IHRleHQgPSByYXcuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZW0nLFxuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHRva2VuczogdGhpcy5sZXhlci5pbmxpbmVUb2tlbnModGV4dClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlICdzdHJvbmcnIGlmIHNtYWxsZXN0IGRlbGltaXRlciBoYXMgZXZlbiBjaGFyIGNvdW50LiAqKmEqKipcbiAgICAgICAgY29uc3QgdGV4dCA9IHJhdy5zbGljZSgyLCAtMik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ3N0cm9uZycsXG4gICAgICAgICAgcmF3LFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgdG9rZW5zOiB0aGlzLmxleGVyLmlubGluZVRva2Vucyh0ZXh0KVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvZGVzcGFuKHNyYykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLmNvZGUuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGxldCB0ZXh0ID0gY2FwWzJdLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xuICAgICAgY29uc3QgaGFzTm9uU3BhY2VDaGFycyA9IC9bXiBdLy50ZXN0KHRleHQpO1xuICAgICAgY29uc3QgaGFzU3BhY2VDaGFyc09uQm90aEVuZHMgPSAvXiAvLnRlc3QodGV4dCkgJiYgLyAkLy50ZXN0KHRleHQpO1xuICAgICAgaWYgKGhhc05vblNwYWNlQ2hhcnMgJiYgaGFzU3BhY2VDaGFyc09uQm90aEVuZHMpIHtcbiAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDEsIHRleHQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICB0ZXh0ID0gZXNjYXBlKHRleHQsIHRydWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2NvZGVzcGFuJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHRcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgYnIoc3JjKSB7XG4gICAgY29uc3QgY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUuYnIuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdicicsXG4gICAgICAgIHJhdzogY2FwWzBdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGRlbChzcmMpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5kZWwuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkZWwnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdGV4dDogY2FwWzJdLFxuICAgICAgICB0b2tlbnM6IHRoaXMubGV4ZXIuaW5saW5lVG9rZW5zKGNhcFsyXSlcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgYXV0b2xpbmsoc3JjLCBtYW5nbGUpIHtcbiAgICBjb25zdCBjYXAgPSB0aGlzLnJ1bGVzLmlubGluZS5hdXRvbGluay5leGVjKHNyYyk7XG4gICAgaWYgKGNhcCkge1xuICAgICAgbGV0IHRleHQsIGhyZWY7XG4gICAgICBpZiAoY2FwWzJdID09PSAnQCcpIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZSh0aGlzLm9wdGlvbnMubWFuZ2xlID8gbWFuZ2xlKGNhcFsxXSkgOiBjYXBbMV0pO1xuICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzFdKTtcbiAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdsaW5rJyxcbiAgICAgICAgcmF3OiBjYXBbMF0sXG4gICAgICAgIHRleHQsXG4gICAgICAgIGhyZWYsXG4gICAgICAgIHRva2VuczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHJhdzogdGV4dCxcbiAgICAgICAgICAgIHRleHRcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdXJsKHNyYywgbWFuZ2xlKSB7XG4gICAgbGV0IGNhcDtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5pbmxpbmUudXJsLmV4ZWMoc3JjKSkge1xuICAgICAgbGV0IHRleHQsIGhyZWY7XG4gICAgICBpZiAoY2FwWzJdID09PSAnQCcpIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZSh0aGlzLm9wdGlvbnMubWFuZ2xlID8gbWFuZ2xlKGNhcFswXSkgOiBjYXBbMF0pO1xuICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvIGV4dGVuZGVkIGF1dG9saW5rIHBhdGggdmFsaWRhdGlvblxuICAgICAgICBsZXQgcHJldkNhcFplcm87XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBwcmV2Q2FwWmVybyA9IGNhcFswXTtcbiAgICAgICAgICBjYXBbMF0gPSB0aGlzLnJ1bGVzLmlubGluZS5fYmFja3BlZGFsLmV4ZWMoY2FwWzBdKVswXTtcbiAgICAgICAgfSB3aGlsZSAocHJldkNhcFplcm8gIT09IGNhcFswXSk7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgaWYgKGNhcFsxXSA9PT0gJ3d3dy4nKSB7XG4gICAgICAgICAgaHJlZiA9ICdodHRwOi8vJyArIGNhcFswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBocmVmID0gY2FwWzBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnbGluaycsXG4gICAgICAgIHJhdzogY2FwWzBdLFxuICAgICAgICB0ZXh0LFxuICAgICAgICBocmVmLFxuICAgICAgICB0b2tlbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICByYXc6IHRleHQsXG4gICAgICAgICAgICB0ZXh0XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGlubGluZVRleHQoc3JjLCBzbWFydHlwYW50cykge1xuICAgIGNvbnN0IGNhcCA9IHRoaXMucnVsZXMuaW5saW5lLnRleHQuZXhlYyhzcmMpO1xuICAgIGlmIChjYXApIHtcbiAgICAgIGxldCB0ZXh0O1xuICAgICAgaWYgKHRoaXMubGV4ZXIuc3RhdGUuaW5SYXdCbG9jaykge1xuICAgICAgICB0ZXh0ID0gdGhpcy5vcHRpb25zLnNhbml0aXplID8gKHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSkgOiBlc2NhcGUoY2FwWzBdKSkgOiBjYXBbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKHRoaXMub3B0aW9ucy5zbWFydHlwYW50cyA/IHNtYXJ0eXBhbnRzKGNhcFswXSkgOiBjYXBbMF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICByYXc6IGNhcFswXSxcbiAgICAgICAgdGV4dFxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBCbG9jay1MZXZlbCBHcmFtbWFyXG4gKi9cbmNvbnN0IGJsb2NrID0ge1xuICBuZXdsaW5lOiAvXig/OiAqKD86XFxufCQpKSsvLFxuICBjb2RlOiAvXiggezR9W15cXG5dKyg/Olxcbig/OiAqKD86XFxufCQpKSopPykrLyxcbiAgZmVuY2VzOiAvXiB7MCwzfShgezMsfSg/PVteYFxcbl0qXFxuKXx+ezMsfSkoW15cXG5dKilcXG4oPzp8KFtcXHNcXFNdKj8pXFxuKSg/OiB7MCwzfVxcMVt+YF0qICooPz1cXG58JCl8JCkvLFxuICBocjogL14gezAsM30oKD86LVtcXHQgXSopezMsfXwoPzpfWyBcXHRdKil7Myx9fCg/OlxcKlsgXFx0XSopezMsfSkoPzpcXG4rfCQpLyxcbiAgaGVhZGluZzogL14gezAsM30oI3sxLDZ9KSg/PVxcc3wkKSguKikoPzpcXG4rfCQpLyxcbiAgYmxvY2txdW90ZTogL14oIHswLDN9PiA/KHBhcmFncmFwaHxbXlxcbl0qKSg/OlxcbnwkKSkrLyxcbiAgbGlzdDogL14oIHswLDN9YnVsbCkoWyBcXHRdW15cXG5dKz8pPyg/OlxcbnwkKS8sXG4gIGh0bWw6ICdeIHswLDN9KD86JyAvLyBvcHRpb25hbCBpbmRlbnRhdGlvblxuICAgICsgJzwoc2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYSlbXFxcXHM+XVtcXFxcc1xcXFxTXSo/KD86PC9cXFxcMT5bXlxcXFxuXSpcXFxcbit8JCknIC8vICgxKVxuICAgICsgJ3xjb21tZW50W15cXFxcbl0qKFxcXFxuK3wkKScgLy8gKDIpXG4gICAgKyAnfDxcXFxcP1tcXFxcc1xcXFxTXSo/KD86XFxcXD8+XFxcXG4qfCQpJyAvLyAoMylcbiAgICArICd8PCFbQS1aXVtcXFxcc1xcXFxTXSo/KD86PlxcXFxuKnwkKScgLy8gKDQpXG4gICAgKyAnfDwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj8oPzpcXFxcXVxcXFxdPlxcXFxuKnwkKScgLy8gKDUpXG4gICAgKyAnfDwvPyh0YWcpKD86ICt8XFxcXG58Lz8+KVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg2KVxuICAgICsgJ3w8KD8hc2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYSkoW2Etel1bXFxcXHctXSopKD86YXR0cmlidXRlKSo/ICovPz4oPz1bIFxcXFx0XSooPzpcXFxcbnwkKSlbXFxcXHNcXFxcU10qPyg/Oig/OlxcXFxuICopK1xcXFxufCQpJyAvLyAoNykgb3BlbiB0YWdcbiAgICArICd8PC8oPyFzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhKVthLXpdW1xcXFx3LV0qXFxcXHMqPig/PVsgXFxcXHRdKig/OlxcXFxufCQpKVtcXFxcc1xcXFxTXSo/KD86KD86XFxcXG4gKikrXFxcXG58JCknIC8vICg3KSBjbG9zaW5nIHRhZ1xuICAgICsgJyknLFxuICBkZWY6IC9eIHswLDN9XFxbKGxhYmVsKVxcXTogKig/OlxcbiAqKT8oW148XFxzXVteXFxzXSp8PC4qPz4pKD86KD86ICsoPzpcXG4gKik/fCAqXFxuICopKHRpdGxlKSk/ICooPzpcXG4rfCQpLyxcbiAgdGFibGU6IG5vb3BUZXN0LFxuICBsaGVhZGluZzogL14oKD86LnxcXG4oPyFcXG4pKSs/KVxcbiB7MCwzfSg9K3wtKykgKig/Olxcbit8JCkvLFxuICAvLyByZWdleCB0ZW1wbGF0ZSwgcGxhY2Vob2xkZXJzIHdpbGwgYmUgcmVwbGFjZWQgYWNjb3JkaW5nIHRvIGRpZmZlcmVudCBwYXJhZ3JhcGhcbiAgLy8gaW50ZXJydXB0aW9uIHJ1bGVzIG9mIGNvbW1vbm1hcmsgYW5kIHRoZSBvcmlnaW5hbCBtYXJrZG93biBzcGVjOlxuICBfcGFyYWdyYXBoOiAvXihbXlxcbl0rKD86XFxuKD8haHJ8aGVhZGluZ3xsaGVhZGluZ3xibG9ja3F1b3RlfGZlbmNlc3xsaXN0fGh0bWx8dGFibGV8ICtcXG4pW15cXG5dKykqKS8sXG4gIHRleHQ6IC9eW15cXG5dKy9cbn07XG5cbmJsb2NrLl9sYWJlbCA9IC8oPyFcXHMqXFxdKSg/OlxcXFwufFteXFxbXFxdXFxcXF0pKy87XG5ibG9jay5fdGl0bGUgPSAvKD86XCIoPzpcXFxcXCI/fFteXCJcXFxcXSkqXCJ8J1teJ1xcbl0qKD86XFxuW14nXFxuXSspKlxcbj8nfFxcKFteKCldKlxcKSkvO1xuYmxvY2suZGVmID0gZWRpdChibG9jay5kZWYpXG4gIC5yZXBsYWNlKCdsYWJlbCcsIGJsb2NrLl9sYWJlbClcbiAgLnJlcGxhY2UoJ3RpdGxlJywgYmxvY2suX3RpdGxlKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suYnVsbGV0ID0gLyg/OlsqKy1dfFxcZHsxLDl9Wy4pXSkvO1xuYmxvY2subGlzdEl0ZW1TdGFydCA9IGVkaXQoL14oICopKGJ1bGwpICovKVxuICAucmVwbGFjZSgnYnVsbCcsIGJsb2NrLmJ1bGxldClcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmxpc3QgPSBlZGl0KGJsb2NrLmxpc3QpXG4gIC5yZXBsYWNlKC9idWxsL2csIGJsb2NrLmJ1bGxldClcbiAgLnJlcGxhY2UoJ2hyJywgJ1xcXFxuKyg/PVxcXFwxPyg/Oig/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcXFwqICopezMsfSkoPzpcXFxcbit8JCkpJylcbiAgLnJlcGxhY2UoJ2RlZicsICdcXFxcbisoPz0nICsgYmxvY2suZGVmLnNvdXJjZSArICcpJylcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLl90YWcgPSAnYWRkcmVzc3xhcnRpY2xlfGFzaWRlfGJhc2V8YmFzZWZvbnR8YmxvY2txdW90ZXxib2R5fGNhcHRpb24nXG4gICsgJ3xjZW50ZXJ8Y29sfGNvbGdyb3VwfGRkfGRldGFpbHN8ZGlhbG9nfGRpcnxkaXZ8ZGx8ZHR8ZmllbGRzZXR8ZmlnY2FwdGlvbidcbiAgKyAnfGZpZ3VyZXxmb290ZXJ8Zm9ybXxmcmFtZXxmcmFtZXNldHxoWzEtNl18aGVhZHxoZWFkZXJ8aHJ8aHRtbHxpZnJhbWUnXG4gICsgJ3xsZWdlbmR8bGl8bGlua3xtYWlufG1lbnV8bWVudWl0ZW18bWV0YXxuYXZ8bm9mcmFtZXN8b2x8b3B0Z3JvdXB8b3B0aW9uJ1xuICArICd8cHxwYXJhbXxzZWN0aW9ufHNvdXJjZXxzdW1tYXJ5fHRhYmxlfHRib2R5fHRkfHRmb290fHRofHRoZWFkfHRpdGxlfHRyJ1xuICArICd8dHJhY2t8dWwnO1xuYmxvY2suX2NvbW1lbnQgPSAvPCEtLSg/IS0/PilbXFxzXFxTXSo/KD86LS0+fCQpLztcbmJsb2NrLmh0bWwgPSBlZGl0KGJsb2NrLmh0bWwsICdpJylcbiAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpXG4gIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCAvICtbYS16QS1aOl9dW1xcdy46LV0qKD86ICo9ICpcIlteXCJcXG5dKlwifCAqPSAqJ1teJ1xcbl0qJ3wgKj0gKlteXFxzXCInPTw+YF0rKT8vKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2sucGFyYWdyYXBoID0gZWRpdChibG9jay5fcGFyYWdyYXBoKVxuICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnIHswLDN9I3sxLDZ9ICcpXG4gIC5yZXBsYWNlKCd8bGhlYWRpbmcnLCAnJykgLy8gc2V0ZXggaGVhZGluZ3MgZG9uJ3QgaW50ZXJydXB0IGNvbW1vbm1hcmsgcGFyYWdyYXBoc1xuICAucmVwbGFjZSgnfHRhYmxlJywgJycpXG4gIC5yZXBsYWNlKCdibG9ja3F1b3RlJywgJyB7MCwzfT4nKVxuICAucmVwbGFjZSgnZmVuY2VzJywgJyB7MCwzfSg/OmB7Myx9KD89W15gXFxcXG5dKlxcXFxuKXx+ezMsfSlbXlxcXFxuXSpcXFxcbicpXG4gIC5yZXBsYWNlKCdsaXN0JywgJyB7MCwzfSg/OlsqKy1dfDFbLildKSAnKSAvLyBvbmx5IGxpc3RzIHN0YXJ0aW5nIGZyb20gMSBjYW4gaW50ZXJydXB0XG4gIC5yZXBsYWNlKCdodG1sJywgJzwvPyg/OnRhZykoPzogK3xcXFxcbnwvPz4pfDwoPzpzY3JpcHR8cHJlfHN0eWxlfHRleHRhcmVhfCEtLSknKVxuICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykgLy8gcGFycyBjYW4gYmUgaW50ZXJydXB0ZWQgYnkgdHlwZSAoNikgaHRtbCBibG9ja3NcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmJsb2NrcXVvdGUgPSBlZGl0KGJsb2NrLmJsb2NrcXVvdGUpXG4gIC5yZXBsYWNlKCdwYXJhZ3JhcGgnLCBibG9jay5wYXJhZ3JhcGgpXG4gIC5nZXRSZWdleCgpO1xuXG4vKipcbiAqIE5vcm1hbCBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2subm9ybWFsID0gbWVyZ2Uoe30sIGJsb2NrKTtcblxuLyoqXG4gKiBHRk0gQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLmdmbSA9IG1lcmdlKHt9LCBibG9jay5ub3JtYWwsIHtcbiAgdGFibGU6ICdeICooW15cXFxcbiBdLipcXFxcfC4qKVxcXFxuJyAvLyBIZWFkZXJcbiAgICArICcgezAsM30oPzpcXFxcfCAqKT8oOj8tKzo/ICooPzpcXFxcfCAqOj8tKzo/ICopKikoPzpcXFxcfCAqKT8nIC8vIEFsaWduXG4gICAgKyAnKD86XFxcXG4oKD86KD8hICpcXFxcbnxocnxoZWFkaW5nfGJsb2NrcXVvdGV8Y29kZXxmZW5jZXN8bGlzdHxodG1sKS4qKD86XFxcXG58JCkpKilcXFxcbip8JCknIC8vIENlbGxzXG59KTtcblxuYmxvY2suZ2ZtLnRhYmxlID0gZWRpdChibG9jay5nZm0udGFibGUpXG4gIC5yZXBsYWNlKCdocicsIGJsb2NrLmhyKVxuICAucmVwbGFjZSgnaGVhZGluZycsICcgezAsM30jezEsNn0gJylcbiAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gIC5yZXBsYWNlKCdjb2RlJywgJyB7NH1bXlxcXFxuXScpXG4gIC5yZXBsYWNlKCdmZW5jZXMnLCAnIHswLDN9KD86YHszLH0oPz1bXmBcXFxcbl0qXFxcXG4pfH57Myx9KVteXFxcXG5dKlxcXFxuJylcbiAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgLnJlcGxhY2UoJ2h0bWwnLCAnPC8/KD86dGFnKSg/OiArfFxcXFxufC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWF8IS0tKScpXG4gIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKSAvLyB0YWJsZXMgY2FuIGJlIGludGVycnVwdGVkIGJ5IHR5cGUgKDYpIGh0bWwgYmxvY2tzXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5nZm0ucGFyYWdyYXBoID0gZWRpdChibG9jay5fcGFyYWdyYXBoKVxuICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnIHswLDN9I3sxLDZ9ICcpXG4gIC5yZXBsYWNlKCd8bGhlYWRpbmcnLCAnJykgLy8gc2V0ZXggaGVhZGluZ3MgZG9uJ3QgaW50ZXJydXB0IGNvbW1vbm1hcmsgcGFyYWdyYXBoc1xuICAucmVwbGFjZSgndGFibGUnLCBibG9jay5nZm0udGFibGUpIC8vIGludGVycnVwdCBwYXJhZ3JhcGhzIHdpdGggdGFibGVcbiAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gIC5yZXBsYWNlKCdmZW5jZXMnLCAnIHswLDN9KD86YHszLH0oPz1bXmBcXFxcbl0qXFxcXG4pfH57Myx9KVteXFxcXG5dKlxcXFxuJylcbiAgLnJlcGxhY2UoJ2xpc3QnLCAnIHswLDN9KD86WyorLV18MVsuKV0pICcpIC8vIG9ubHkgbGlzdHMgc3RhcnRpbmcgZnJvbSAxIGNhbiBpbnRlcnJ1cHRcbiAgLnJlcGxhY2UoJ2h0bWwnLCAnPC8/KD86dGFnKSg/OiArfFxcXFxufC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWF8IS0tKScpXG4gIC5yZXBsYWNlKCd0YWcnLCBibG9jay5fdGFnKSAvLyBwYXJzIGNhbiBiZSBpbnRlcnJ1cHRlZCBieSB0eXBlICg2KSBodG1sIGJsb2Nrc1xuICAuZ2V0UmVnZXgoKTtcbi8qKlxuICogUGVkYW50aWMgZ3JhbW1hciAob3JpZ2luYWwgSm9obiBHcnViZXIncyBsb29zZSBtYXJrZG93biBzcGVjaWZpY2F0aW9uKVxuICovXG5cbmJsb2NrLnBlZGFudGljID0gbWVyZ2Uoe30sIGJsb2NrLm5vcm1hbCwge1xuICBodG1sOiBlZGl0KFxuICAgICdeICooPzpjb21tZW50ICooPzpcXFxcbnxcXFxccyokKSdcbiAgICArICd8PCh0YWcpW1xcXFxzXFxcXFNdKz88L1xcXFwxPiAqKD86XFxcXG57Mix9fFxcXFxzKiQpJyAvLyBjbG9zZWQgdGFnXG4gICAgKyAnfDx0YWcoPzpcIlteXCJdKlwifFxcJ1teXFwnXSpcXCd8XFxcXHNbXlxcJ1wiLz5cXFxcc10qKSo/Lz8+ICooPzpcXFxcbnsyLH18XFxcXHMqJCkpJylcbiAgICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAgIC5yZXBsYWNlKC90YWcvZywgJyg/ISg/OidcbiAgICAgICsgJ2F8ZW18c3Ryb25nfHNtYWxsfHN8Y2l0ZXxxfGRmbnxhYmJyfGRhdGF8dGltZXxjb2RlfHZhcnxzYW1wfGtiZHxzdWInXG4gICAgICArICd8c3VwfGl8Ynx1fG1hcmt8cnVieXxydHxycHxiZGl8YmRvfHNwYW58YnJ8d2JyfGluc3xkZWx8aW1nKSdcbiAgICAgICsgJ1xcXFxiKVxcXFx3Kyg/ITp8W15cXFxcd1xcXFxzQF0qQClcXFxcYicpXG4gICAgLmdldFJlZ2V4KCksXG4gIGRlZjogL14gKlxcWyhbXlxcXV0rKVxcXTogKjw/KFteXFxzPl0rKT4/KD86ICsoW1wiKF1bXlxcbl0rW1wiKV0pKT8gKig/Olxcbit8JCkvLFxuICBoZWFkaW5nOiAvXigjezEsNn0pKC4qKSg/Olxcbit8JCkvLFxuICBmZW5jZXM6IG5vb3BUZXN0LCAvLyBmZW5jZXMgbm90IHN1cHBvcnRlZFxuICBsaGVhZGluZzogL14oLis/KVxcbiB7MCwzfSg9K3wtKykgKig/Olxcbit8JCkvLFxuICBwYXJhZ3JhcGg6IGVkaXQoYmxvY2subm9ybWFsLl9wYXJhZ3JhcGgpXG4gICAgLnJlcGxhY2UoJ2hyJywgYmxvY2suaHIpXG4gICAgLnJlcGxhY2UoJ2hlYWRpbmcnLCAnICojezEsNn0gKlteXFxuXScpXG4gICAgLnJlcGxhY2UoJ2xoZWFkaW5nJywgYmxvY2subGhlYWRpbmcpXG4gICAgLnJlcGxhY2UoJ2Jsb2NrcXVvdGUnLCAnIHswLDN9PicpXG4gICAgLnJlcGxhY2UoJ3xmZW5jZXMnLCAnJylcbiAgICAucmVwbGFjZSgnfGxpc3QnLCAnJylcbiAgICAucmVwbGFjZSgnfGh0bWwnLCAnJylcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogSW5saW5lLUxldmVsIEdyYW1tYXJcbiAqL1xuY29uc3QgaW5saW5lID0ge1xuICBlc2NhcGU6IC9eXFxcXChbIVwiIyQlJicoKSorLFxcLS4vOjs8PT4/QFxcW1xcXVxcXFxeX2B7fH1+XSkvLFxuICBhdXRvbGluazogL148KHNjaGVtZTpbXlxcc1xceDAwLVxceDFmPD5dKnxlbWFpbCk+LyxcbiAgdXJsOiBub29wVGVzdCxcbiAgdGFnOiAnXmNvbW1lbnQnXG4gICAgKyAnfF48L1thLXpBLVpdW1xcXFx3Oi1dKlxcXFxzKj4nIC8vIHNlbGYtY2xvc2luZyB0YWdcbiAgICArICd8XjxbYS16QS1aXVtcXFxcdy1dKig/OmF0dHJpYnV0ZSkqP1xcXFxzKi8/PicgLy8gb3BlbiB0YWdcbiAgICArICd8XjxcXFxcP1tcXFxcc1xcXFxTXSo/XFxcXD8+JyAvLyBwcm9jZXNzaW5nIGluc3RydWN0aW9uLCBlLmcuIDw/cGhwID8+XG4gICAgKyAnfF48IVthLXpBLVpdK1xcXFxzW1xcXFxzXFxcXFNdKj8+JyAvLyBkZWNsYXJhdGlvbiwgZS5nLiA8IURPQ1RZUEUgaHRtbD5cbiAgICArICd8XjwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPicsIC8vIENEQVRBIHNlY3Rpb25cbiAgbGluazogL14hP1xcWyhsYWJlbClcXF1cXChcXHMqKGhyZWYpKD86XFxzKyh0aXRsZSkpP1xccypcXCkvLFxuICByZWZsaW5rOiAvXiE/XFxbKGxhYmVsKVxcXVxcWyhyZWYpXFxdLyxcbiAgbm9saW5rOiAvXiE/XFxbKHJlZilcXF0oPzpcXFtcXF0pPy8sXG4gIHJlZmxpbmtTZWFyY2g6ICdyZWZsaW5rfG5vbGluayg/IVxcXFwoKScsXG4gIGVtU3Ryb25nOiB7XG4gICAgbERlbGltOiAvXig/OlxcKisoPzooW3B1bmN0X10pfFteXFxzKl0pKXxeXysoPzooW3B1bmN0Kl0pfChbXlxcc19dKSkvLFxuICAgIC8vICAgICAgICAoMSkgYW5kICgyKSBjYW4gb25seSBiZSBhIFJpZ2h0IERlbGltaXRlci4gKDMpIGFuZCAoNCkgY2FuIG9ubHkgYmUgTGVmdC4gICg1KSBhbmQgKDYpIGNhbiBiZSBlaXRoZXIgTGVmdCBvciBSaWdodC5cbiAgICAvLyAgICAgICAgICAoKSBTa2lwIG9ycGhhbiBpbnNpZGUgc3Ryb25nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKSBDb25zdW1lIHRvIGRlbGltICAgICAoMSkgIyoqKiAgICAgICAgICAgICAgICAoMikgYSoqKiMsIGEqKiogICAgICAgICAgICAgICAgICAgICAgICAgICAgICgzKSAjKioqYSwgKioqYSAgICAgICAgICAgICAgICAgKDQpICoqKiMgICAgICAgICAgICAgICg1KSAjKioqIyAgICAgICAgICAgICAgICAgKDYpIGEqKiphXG4gICAgckRlbGltQXN0OiAvXig/OlteXypcXFxcXXxcXFxcLikqP1xcX1xcXyg/OlteXypcXFxcXXxcXFxcLikqP1xcKig/OlteXypcXFxcXXxcXFxcLikqPyg/PVxcX1xcXyl8KD86W14qXFxcXF18XFxcXC4pKyg/PVteKl0pfFtwdW5jdF9dKFxcKispKD89W1xcc118JCl8KD86W15wdW5jdCpfXFxzXFxcXF18XFxcXC4pKFxcKispKD89W3B1bmN0X1xcc118JCl8W3B1bmN0X1xcc10oXFwqKykoPz1bXnB1bmN0Kl9cXHNdKXxbXFxzXShcXCorKSg/PVtwdW5jdF9dKXxbcHVuY3RfXShcXCorKSg/PVtwdW5jdF9dKXwoPzpbXnB1bmN0Kl9cXHNcXFxcXXxcXFxcLikoXFwqKykoPz1bXnB1bmN0Kl9cXHNdKS8sXG4gICAgckRlbGltVW5kOiAvXig/OlteXypcXFxcXXxcXFxcLikqP1xcKlxcKig/OlteXypcXFxcXXxcXFxcLikqP1xcXyg/OlteXypcXFxcXXxcXFxcLikqPyg/PVxcKlxcKil8KD86W15fXFxcXF18XFxcXC4pKyg/PVteX10pfFtwdW5jdCpdKFxcXyspKD89W1xcc118JCl8KD86W15wdW5jdCpfXFxzXFxcXF18XFxcXC4pKFxcXyspKD89W3B1bmN0Klxcc118JCl8W3B1bmN0Klxcc10oXFxfKykoPz1bXnB1bmN0Kl9cXHNdKXxbXFxzXShcXF8rKSg/PVtwdW5jdCpdKXxbcHVuY3QqXShcXF8rKSg/PVtwdW5jdCpdKS8gLy8gXi0gTm90IGFsbG93ZWQgZm9yIF9cbiAgfSxcbiAgY29kZTogL14oYCspKFteYF18W15gXVtcXHNcXFNdKj9bXmBdKVxcMSg/IWApLyxcbiAgYnI6IC9eKCB7Mix9fFxcXFwpXFxuKD8hXFxzKiQpLyxcbiAgZGVsOiBub29wVGVzdCxcbiAgdGV4dDogL14oYCt8W15gXSkoPzooPz0gezIsfVxcbil8W1xcc1xcU10qPyg/Oig/PVtcXFxcPCFcXFtgKl9dfFxcYl98JCl8W14gXSg/PSB7Mix9XFxuKSkpLyxcbiAgcHVuY3R1YXRpb246IC9eKFtcXHNwdW5jdHVhdGlvbl0pL1xufTtcblxuLy8gbGlzdCBvZiBwdW5jdHVhdGlvbiBtYXJrcyBmcm9tIENvbW1vbk1hcmsgc3BlY1xuLy8gd2l0aG91dCAqIGFuZCBfIHRvIGhhbmRsZSB0aGUgZGlmZmVyZW50IGVtcGhhc2lzIG1hcmtlcnMgKiBhbmQgX1xuaW5saW5lLl9wdW5jdHVhdGlvbiA9ICchXCIjJCUmXFwnKCkrXFxcXC0uLC86Ozw9Pj9AXFxcXFtcXFxcXWBee3x9fic7XG5pbmxpbmUucHVuY3R1YXRpb24gPSBlZGl0KGlubGluZS5wdW5jdHVhdGlvbikucmVwbGFjZSgvcHVuY3R1YXRpb24vZywgaW5saW5lLl9wdW5jdHVhdGlvbikuZ2V0UmVnZXgoKTtcblxuLy8gc2VxdWVuY2VzIGVtIHNob3VsZCBza2lwIG92ZXIgW3RpdGxlXShsaW5rKSwgYGNvZGVgLCA8aHRtbD5cbmlubGluZS5ibG9ja1NraXAgPSAvXFxbW15cXF1dKj9cXF1cXChbXlxcKV0qP1xcKXxgW15gXSo/YHw8W14+XSo/Pi9nO1xuLy8gbG9va2JlaGluZCBpcyBub3QgYXZhaWxhYmxlIG9uIFNhZmFyaSBhcyBvZiB2ZXJzaW9uIDE2XG4vLyBpbmxpbmUuZXNjYXBlZEVtU3QgPSAvKD88PSg/Ol58W15cXFxcKSg/OlxcXFxbXl0pKilcXFxcWypfXS9nO1xuaW5saW5lLmVzY2FwZWRFbVN0ID0gLyg/Ol58W15cXFxcXSkoPzpcXFxcXFxcXCkqXFxcXFsqX10vZztcblxuaW5saW5lLl9jb21tZW50ID0gZWRpdChibG9jay5fY29tbWVudCkucmVwbGFjZSgnKD86LS0+fCQpJywgJy0tPicpLmdldFJlZ2V4KCk7XG5cbmlubGluZS5lbVN0cm9uZy5sRGVsaW0gPSBlZGl0KGlubGluZS5lbVN0cm9uZy5sRGVsaW0pXG4gIC5yZXBsYWNlKC9wdW5jdC9nLCBpbmxpbmUuX3B1bmN0dWF0aW9uKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLmVtU3Ryb25nLnJEZWxpbUFzdCA9IGVkaXQoaW5saW5lLmVtU3Ryb25nLnJEZWxpbUFzdCwgJ2cnKVxuICAucmVwbGFjZSgvcHVuY3QvZywgaW5saW5lLl9wdW5jdHVhdGlvbilcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5lbVN0cm9uZy5yRGVsaW1VbmQgPSBlZGl0KGlubGluZS5lbVN0cm9uZy5yRGVsaW1VbmQsICdnJylcbiAgLnJlcGxhY2UoL3B1bmN0L2csIGlubGluZS5fcHVuY3R1YXRpb24pXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuX2VzY2FwZXMgPSAvXFxcXChbIVwiIyQlJicoKSorLFxcLS4vOjs8PT4/QFxcW1xcXVxcXFxeX2B7fH1+XSkvZztcblxuaW5saW5lLl9zY2hlbWUgPSAvW2EtekEtWl1bYS16QS1aMC05Ky4tXXsxLDMxfS87XG5pbmxpbmUuX2VtYWlsID0gL1thLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rKEApW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSsoPyFbLV9dKS87XG5pbmxpbmUuYXV0b2xpbmsgPSBlZGl0KGlubGluZS5hdXRvbGluaylcbiAgLnJlcGxhY2UoJ3NjaGVtZScsIGlubGluZS5fc2NoZW1lKVxuICAucmVwbGFjZSgnZW1haWwnLCBpbmxpbmUuX2VtYWlsKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9hdHRyaWJ1dGUgPSAvXFxzK1thLXpBLVo6X11bXFx3LjotXSooPzpcXHMqPVxccypcIlteXCJdKlwifFxccyo9XFxzKidbXiddKid8XFxzKj1cXHMqW15cXHNcIic9PD5gXSspPy87XG5cbmlubGluZS50YWcgPSBlZGl0KGlubGluZS50YWcpXG4gIC5yZXBsYWNlKCdjb21tZW50JywgaW5saW5lLl9jb21tZW50KVxuICAucmVwbGFjZSgnYXR0cmlidXRlJywgaW5saW5lLl9hdHRyaWJ1dGUpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuX2xhYmVsID0gLyg/OlxcWyg/OlxcXFwufFteXFxbXFxdXFxcXF0pKlxcXXxcXFxcLnxgW15gXSpgfFteXFxbXFxdXFxcXGBdKSo/LztcbmlubGluZS5faHJlZiA9IC88KD86XFxcXC58W15cXG48PlxcXFxdKSs+fFteXFxzXFx4MDAtXFx4MWZdKi87XG5pbmxpbmUuX3RpdGxlID0gL1wiKD86XFxcXFwiP3xbXlwiXFxcXF0pKlwifCcoPzpcXFxcJz98W14nXFxcXF0pKid8XFwoKD86XFxcXFxcKT98W14pXFxcXF0pKlxcKS87XG5cbmlubGluZS5saW5rID0gZWRpdChpbmxpbmUubGluaylcbiAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgLnJlcGxhY2UoJ2hyZWYnLCBpbmxpbmUuX2hyZWYpXG4gIC5yZXBsYWNlKCd0aXRsZScsIGlubGluZS5fdGl0bGUpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUucmVmbGluayA9IGVkaXQoaW5saW5lLnJlZmxpbmspXG4gIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gIC5yZXBsYWNlKCdyZWYnLCBibG9jay5fbGFiZWwpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUubm9saW5rID0gZWRpdChpbmxpbmUubm9saW5rKVxuICAucmVwbGFjZSgncmVmJywgYmxvY2suX2xhYmVsKVxuICAuZ2V0UmVnZXgoKTtcblxuaW5saW5lLnJlZmxpbmtTZWFyY2ggPSBlZGl0KGlubGluZS5yZWZsaW5rU2VhcmNoLCAnZycpXG4gIC5yZXBsYWNlKCdyZWZsaW5rJywgaW5saW5lLnJlZmxpbmspXG4gIC5yZXBsYWNlKCdub2xpbmsnLCBpbmxpbmUubm9saW5rKVxuICAuZ2V0UmVnZXgoKTtcblxuLyoqXG4gKiBOb3JtYWwgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUubm9ybWFsID0gbWVyZ2Uoe30sIGlubGluZSk7XG5cbi8qKlxuICogUGVkYW50aWMgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUucGVkYW50aWMgPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwge1xuICBzdHJvbmc6IHtcbiAgICBzdGFydDogL15fX3xcXCpcXCovLFxuICAgIG1pZGRsZTogL15fXyg/PVxcUykoW1xcc1xcU10qP1xcUylfXyg/IV8pfF5cXCpcXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqXFwqKD8hXFwqKS8sXG4gICAgZW5kQXN0OiAvXFwqXFwqKD8hXFwqKS9nLFxuICAgIGVuZFVuZDogL19fKD8hXykvZ1xuICB9LFxuICBlbToge1xuICAgIHN0YXJ0OiAvXl98XFwqLyxcbiAgICBtaWRkbGU6IC9eKClcXCooPz1cXFMpKFtcXHNcXFNdKj9cXFMpXFwqKD8hXFwqKXxeXyg/PVxcUykoW1xcc1xcU10qP1xcUylfKD8hXykvLFxuICAgIGVuZEFzdDogL1xcKig/IVxcKikvZyxcbiAgICBlbmRVbmQ6IC9fKD8hXykvZ1xuICB9LFxuICBsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFwoKC4qPylcXCkvKVxuICAgIC5yZXBsYWNlKCdsYWJlbCcsIGlubGluZS5fbGFiZWwpXG4gICAgLmdldFJlZ2V4KCksXG4gIHJlZmxpbms6IGVkaXQoL14hP1xcWyhsYWJlbClcXF1cXHMqXFxbKFteXFxdXSopXFxdLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBHRk0gSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuZ2ZtID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgZXNjYXBlOiBlZGl0KGlubGluZS5lc2NhcGUpLnJlcGxhY2UoJ10pJywgJ358XSknKS5nZXRSZWdleCgpLFxuICBfZXh0ZW5kZWRfZW1haWw6IC9bQS1aYS16MC05Ll8rLV0rKEApW2EtekEtWjAtOS1fXSsoPzpcXC5bYS16QS1aMC05LV9dKlthLXpBLVowLTldKSsoPyFbLV9dKS8sXG4gIHVybDogL14oKD86ZnRwfGh0dHBzPyk6XFwvXFwvfHd3d1xcLikoPzpbYS16QS1aMC05XFwtXStcXC4/KStbXlxcczxdKnxeZW1haWwvLFxuICBfYmFja3BlZGFsOiAvKD86W14/IS4sOjsqXydcIn4oKSZdK3xcXChbXildKlxcKXwmKD8hW2EtekEtWjAtOV0rOyQpfFs/IS4sOjsqXydcIn4pXSsoPyEkKSkrLyxcbiAgZGVsOiAvXih+fj8pKD89W15cXHN+XSkoW1xcc1xcU10qP1teXFxzfl0pXFwxKD89W15+XXwkKS8sXG4gIHRleHQ6IC9eKFtgfl0rfFteYH5dKSg/Oig/PSB7Mix9XFxuKXwoPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApfFtcXHNcXFNdKj8oPzooPz1bXFxcXDwhXFxbYCp+X118XFxiX3xodHRwcz86XFwvXFwvfGZ0cDpcXC9cXC98d3d3XFwufCQpfFteIF0oPz0gezIsfVxcbil8W15hLXpBLVowLTkuISMkJSYnKitcXC89P19ge1xcfH1+LV0oPz1bYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dK0ApKSkvXG59KTtcblxuaW5saW5lLmdmbS51cmwgPSBlZGl0KGlubGluZS5nZm0udXJsLCAnaScpXG4gIC5yZXBsYWNlKCdlbWFpbCcsIGlubGluZS5nZm0uX2V4dGVuZGVkX2VtYWlsKVxuICAuZ2V0UmVnZXgoKTtcbi8qKlxuICogR0ZNICsgTGluZSBCcmVha3MgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuYnJlYWtzID0gbWVyZ2Uoe30sIGlubGluZS5nZm0sIHtcbiAgYnI6IGVkaXQoaW5saW5lLmJyKS5yZXBsYWNlKCd7Mix9JywgJyonKS5nZXRSZWdleCgpLFxuICB0ZXh0OiBlZGl0KGlubGluZS5nZm0udGV4dClcbiAgICAucmVwbGFjZSgnXFxcXGJfJywgJ1xcXFxiX3wgezIsfVxcXFxuJylcbiAgICAucmVwbGFjZSgvXFx7MixcXH0vZywgJyonKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBzbWFydHlwYW50cyB0ZXh0IHJlcGxhY2VtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICovXG5mdW5jdGlvbiBzbWFydHlwYW50cyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLy8gZW0tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tLS9nLCAnXFx1MjAxNCcpXG4gICAgLy8gZW4tZGFzaGVzXG4gICAgLnJlcGxhY2UoLy0tL2csICdcXHUyMDEzJylcbiAgICAvLyBvcGVuaW5nIHNpbmdsZXNcbiAgICAucmVwbGFjZSgvKF58Wy1cXHUyMDE0LyhcXFt7XCJcXHNdKScvZywgJyQxXFx1MjAxOCcpXG4gICAgLy8gY2xvc2luZyBzaW5nbGVzICYgYXBvc3Ryb3BoZXNcbiAgICAucmVwbGFjZSgvJy9nLCAnXFx1MjAxOScpXG4gICAgLy8gb3BlbmluZyBkb3VibGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1xcdTIwMThcXHNdKVwiL2csICckMVxcdTIwMWMnKVxuICAgIC8vIGNsb3NpbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC9cIi9nLCAnXFx1MjAxZCcpXG4gICAgLy8gZWxsaXBzZXNcbiAgICAucmVwbGFjZSgvXFwuezN9L2csICdcXHUyMDI2Jyk7XG59XG5cbi8qKlxuICogbWFuZ2xlIGVtYWlsIGFkZHJlc3Nlc1xuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqL1xuZnVuY3Rpb24gbWFuZ2xlKHRleHQpIHtcbiAgbGV0IG91dCA9ICcnLFxuICAgIGksXG4gICAgY2g7XG5cbiAgY29uc3QgbCA9IHRleHQubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcbiAgICAgIGNoID0gJ3gnICsgY2gudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBvdXQgKz0gJyYjJyArIGNoICsgJzsnO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBCbG9jayBMZXhlclxuICovXG5jbGFzcyBMZXhlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLnRva2VucyA9IFtdO1xuICAgIHRoaXMudG9rZW5zLmxpbmtzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IGRlZmF1bHRzO1xuICAgIHRoaXMub3B0aW9ucy50b2tlbml6ZXIgPSB0aGlzLm9wdGlvbnMudG9rZW5pemVyIHx8IG5ldyBUb2tlbml6ZXIoKTtcbiAgICB0aGlzLnRva2VuaXplciA9IHRoaXMub3B0aW9ucy50b2tlbml6ZXI7XG4gICAgdGhpcy50b2tlbml6ZXIub3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICB0aGlzLnRva2VuaXplci5sZXhlciA9IHRoaXM7XG4gICAgdGhpcy5pbmxpbmVRdWV1ZSA9IFtdO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpbkxpbms6IGZhbHNlLFxuICAgICAgaW5SYXdCbG9jazogZmFsc2UsXG4gICAgICB0b3A6IHRydWVcbiAgICB9O1xuXG4gICAgY29uc3QgcnVsZXMgPSB7XG4gICAgICBibG9jazogYmxvY2subm9ybWFsLFxuICAgICAgaW5saW5lOiBpbmxpbmUubm9ybWFsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgIHJ1bGVzLmJsb2NrID0gYmxvY2sucGVkYW50aWM7XG4gICAgICBydWxlcy5pbmxpbmUgPSBpbmxpbmUucGVkYW50aWM7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgICBydWxlcy5ibG9jayA9IGJsb2NrLmdmbTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnJlYWtzKSB7XG4gICAgICAgIHJ1bGVzLmlubGluZSA9IGlubGluZS5icmVha3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydWxlcy5pbmxpbmUgPSBpbmxpbmUuZ2ZtO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRva2VuaXplci5ydWxlcyA9IHJ1bGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9zZSBSdWxlc1xuICAgKi9cbiAgc3RhdGljIGdldCBydWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmxvY2ssXG4gICAgICBpbmxpbmVcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBMZXggTWV0aG9kXG4gICAqL1xuICBzdGF0aWMgbGV4KHNyYywgb3B0aW9ucykge1xuICAgIGNvbnN0IGxleGVyID0gbmV3IExleGVyKG9wdGlvbnMpO1xuICAgIHJldHVybiBsZXhlci5sZXgoc3JjKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgTGV4IElubGluZSBNZXRob2RcbiAgICovXG4gIHN0YXRpYyBsZXhJbmxpbmUoc3JjLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGV4ZXIgPSBuZXcgTGV4ZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIGxleGVyLmlubGluZVRva2VucyhzcmMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXByb2Nlc3NpbmdcbiAgICovXG4gIGxleChzcmMpIHtcbiAgICBzcmMgPSBzcmNcbiAgICAgIC5yZXBsYWNlKC9cXHJcXG58XFxyL2csICdcXG4nKTtcblxuICAgIHRoaXMuYmxvY2tUb2tlbnMoc3JjLCB0aGlzLnRva2Vucyk7XG5cbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAobmV4dCA9IHRoaXMuaW5saW5lUXVldWUuc2hpZnQoKSkge1xuICAgICAgdGhpcy5pbmxpbmVUb2tlbnMobmV4dC5zcmMsIG5leHQudG9rZW5zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50b2tlbnM7XG4gIH1cblxuICAvKipcbiAgICogTGV4aW5nXG4gICAqL1xuICBibG9ja1Rva2VucyhzcmMsIHRva2VucyA9IFtdKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgICAgc3JjID0gc3JjLnJlcGxhY2UoL1xcdC9nLCAnICAgICcpLnJlcGxhY2UoL14gKyQvZ20sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3JjID0gc3JjLnJlcGxhY2UoL14oICopKFxcdCspL2dtLCAoXywgbGVhZGluZywgdGFicykgPT4ge1xuICAgICAgICByZXR1cm4gbGVhZGluZyArICcgICAgJy5yZXBlYXQodGFicy5sZW5ndGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHRva2VuLCBsYXN0VG9rZW4sIGN1dFNyYywgbGFzdFBhcmFncmFwaENsaXBwZWQ7XG5cbiAgICB3aGlsZSAoc3JjKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnNcbiAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuYmxvY2tcbiAgICAgICAgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuYmxvY2suc29tZSgoZXh0VG9rZW5pemVyKSA9PiB7XG4gICAgICAgICAgaWYgKHRva2VuID0gZXh0VG9rZW5pemVyLmNhbGwoeyBsZXhlcjogdGhpcyB9LCBzcmMsIHRva2VucykpIHtcbiAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gbmV3bGluZVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuc3BhY2Uoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICBpZiAodG9rZW4ucmF3Lmxlbmd0aCA9PT0gMSAmJiB0b2tlbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYSBzaW5nbGUgXFxuIGFzIGEgc3BhY2VyLCBpdCdzIHRlcm1pbmF0aW5nIHRoZSBsYXN0IGxpbmUsXG4gICAgICAgICAgLy8gc28gbW92ZSBpdCB0aGVyZSBzbyB0aGF0IHdlIGRvbid0IGdldCB1bmVjZXNzYXJ5IHBhcmFncmFwaCB0YWdzXG4gICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS5yYXcgKz0gJ1xcbic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBjb2RlXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5jb2RlKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgLy8gQW4gaW5kZW50ZWQgY29kZSBibG9jayBjYW5ub3QgaW50ZXJydXB0IGEgcGFyYWdyYXBoLlxuICAgICAgICBpZiAobGFzdFRva2VuICYmIChsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcgfHwgbGFzdFRva2VuLnR5cGUgPT09ICd0ZXh0JykpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4udGV4dDtcbiAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlW3RoaXMuaW5saW5lUXVldWUubGVuZ3RoIC0gMV0uc3JjID0gbGFzdFRva2VuLnRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBmZW5jZXNcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmZlbmNlcyhzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGhlYWRpbmdcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmhlYWRpbmcoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBoclxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuaHIoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBibG9ja3F1b3RlXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5ibG9ja3F1b3RlKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gbGlzdFxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIubGlzdChzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGh0bWxcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmh0bWwoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBkZWZcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmRlZihzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0VG9rZW4gJiYgKGxhc3RUb2tlbi50eXBlID09PSAncGFyYWdyYXBoJyB8fCBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSkge1xuICAgICAgICAgIGxhc3RUb2tlbi5yYXcgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gJ1xcbicgKyB0b2tlbi5yYXc7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZVt0aGlzLmlubGluZVF1ZXVlLmxlbmd0aCAtIDFdLnNyYyA9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnRva2Vucy5saW5rc1t0b2tlbi50YWddKSB7XG4gICAgICAgICAgdGhpcy50b2tlbnMubGlua3NbdG9rZW4udGFnXSA9IHtcbiAgICAgICAgICAgIGhyZWY6IHRva2VuLmhyZWYsXG4gICAgICAgICAgICB0aXRsZTogdG9rZW4udGl0bGVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyB0YWJsZSAoZ2ZtKVxuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIudGFibGUoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBsaGVhZGluZ1xuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIubGhlYWRpbmcoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyB0b3AtbGV2ZWwgcGFyYWdyYXBoXG4gICAgICAvLyBwcmV2ZW50IHBhcmFncmFwaCBjb25zdW1pbmcgZXh0ZW5zaW9ucyBieSBjbGlwcGluZyAnc3JjJyB0byBleHRlbnNpb24gc3RhcnRcbiAgICAgIGN1dFNyYyA9IHNyYztcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5zdGFydEJsb2NrKSB7XG4gICAgICAgIGxldCBzdGFydEluZGV4ID0gSW5maW5pdHk7XG4gICAgICAgIGNvbnN0IHRlbXBTcmMgPSBzcmMuc2xpY2UoMSk7XG4gICAgICAgIGxldCB0ZW1wU3RhcnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnN0YXJ0QmxvY2suZm9yRWFjaChmdW5jdGlvbihnZXRTdGFydEluZGV4KSB7XG4gICAgICAgICAgdGVtcFN0YXJ0ID0gZ2V0U3RhcnRJbmRleC5jYWxsKHsgbGV4ZXI6IHRoaXMgfSwgdGVtcFNyYyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wU3RhcnQgPT09ICdudW1iZXInICYmIHRlbXBTdGFydCA+PSAwKSB7IHN0YXJ0SW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4LCB0ZW1wU3RhcnQpOyB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3RhcnRJbmRleCA8IEluZmluaXR5ICYmIHN0YXJ0SW5kZXggPj0gMCkge1xuICAgICAgICAgIGN1dFNyYyA9IHNyYy5zdWJzdHJpbmcoMCwgc3RhcnRJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS50b3AgJiYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIucGFyYWdyYXBoKGN1dFNyYykpKSB7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0UGFyYWdyYXBoQ2xpcHBlZCAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9ICdcXG4nICsgdG9rZW4ucmF3O1xuICAgICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgdG9rZW4udGV4dDtcbiAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlLnBvcCgpO1xuICAgICAgICAgIHRoaXMuaW5saW5lUXVldWVbdGhpcy5pbmxpbmVRdWV1ZS5sZW5ndGggLSAxXS5zcmMgPSBsYXN0VG9rZW4udGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFBhcmFncmFwaENsaXBwZWQgPSAoY3V0U3JjLmxlbmd0aCAhPT0gc3JjLmxlbmd0aCk7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyB0ZXh0XG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci50ZXh0KHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnJhdyArPSAnXFxuJyArIHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSAnXFxuJyArIHRva2VuLnRleHQ7XG4gICAgICAgICAgdGhpcy5pbmxpbmVRdWV1ZS5wb3AoKTtcbiAgICAgICAgICB0aGlzLmlubGluZVF1ZXVlW3RoaXMuaW5saW5lUXVldWUubGVuZ3RoIC0gMV0uc3JjID0gbGFzdFRva2VuLnRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGNvbnN0IGVyck1zZyA9ICdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLnRvcCA9IHRydWU7XG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxuXG4gIGlubGluZShzcmMsIHRva2VucyA9IFtdKSB7XG4gICAgdGhpcy5pbmxpbmVRdWV1ZS5wdXNoKHsgc3JjLCB0b2tlbnMgfSk7XG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxuXG4gIC8qKlxuICAgKiBMZXhpbmcvQ29tcGlsaW5nXG4gICAqL1xuICBpbmxpbmVUb2tlbnMoc3JjLCB0b2tlbnMgPSBbXSkge1xuICAgIGxldCB0b2tlbiwgbGFzdFRva2VuLCBjdXRTcmM7XG5cbiAgICAvLyBTdHJpbmcgd2l0aCBsaW5rcyBtYXNrZWQgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIHdpdGggZW0gYW5kIHN0cm9uZ1xuICAgIGxldCBtYXNrZWRTcmMgPSBzcmM7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCBrZWVwUHJldkNoYXIsIHByZXZDaGFyO1xuXG4gICAgLy8gTWFzayBvdXQgcmVmbGlua3NcbiAgICBpZiAodGhpcy50b2tlbnMubGlua3MpIHtcbiAgICAgIGNvbnN0IGxpbmtzID0gT2JqZWN0LmtleXModGhpcy50b2tlbnMubGlua3MpO1xuICAgICAgaWYgKGxpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChsaW5rcy5pbmNsdWRlcyhtYXRjaFswXS5zbGljZShtYXRjaFswXS5sYXN0SW5kZXhPZignWycpICsgMSwgLTEpKSkge1xuICAgICAgICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArIHJlcGVhdFN0cmluZygnYScsIG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5yZWZsaW5rU2VhcmNoLmxhc3RJbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE1hc2sgb3V0IG90aGVyIGJsb2Nrc1xuICAgIHdoaWxlICgobWF0Y2ggPSB0aGlzLnRva2VuaXplci5ydWxlcy5pbmxpbmUuYmxvY2tTa2lwLmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4KSArICdbJyArIHJlcGVhdFN0cmluZygnYScsIG1hdGNoWzBdLmxlbmd0aCAtIDIpICsgJ10nICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5ibG9ja1NraXAubGFzdEluZGV4KTtcbiAgICB9XG5cbiAgICAvLyBNYXNrIG91dCBlc2NhcGVkIGVtICYgc3Ryb25nIGRlbGltaXRlcnNcbiAgICB3aGlsZSAoKG1hdGNoID0gdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmVzY2FwZWRFbVN0LmV4ZWMobWFza2VkU3JjKSkgIT0gbnVsbCkge1xuICAgICAgbWFza2VkU3JjID0gbWFza2VkU3JjLnNsaWNlKDAsIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIC0gMikgKyAnKysnICsgbWFza2VkU3JjLnNsaWNlKHRoaXMudG9rZW5pemVyLnJ1bGVzLmlubGluZS5lc2NhcGVkRW1TdC5sYXN0SW5kZXgpO1xuICAgICAgdGhpcy50b2tlbml6ZXIucnVsZXMuaW5saW5lLmVzY2FwZWRFbVN0Lmxhc3RJbmRleC0tO1xuICAgIH1cblxuICAgIHdoaWxlIChzcmMpIHtcbiAgICAgIGlmICgha2VlcFByZXZDaGFyKSB7XG4gICAgICAgIHByZXZDaGFyID0gJyc7XG4gICAgICB9XG4gICAgICBrZWVwUHJldkNoYXIgPSBmYWxzZTtcblxuICAgICAgLy8gZXh0ZW5zaW9uc1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zXG4gICAgICAgICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLmlubGluZVxuICAgICAgICAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5pbmxpbmUuc29tZSgoZXh0VG9rZW5pemVyKSA9PiB7XG4gICAgICAgICAgaWYgKHRva2VuID0gZXh0VG9rZW5pemVyLmNhbGwoeyBsZXhlcjogdGhpcyB9LCBzcmMsIHRva2VucykpIHtcbiAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNjYXBlXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5lc2NhcGUoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyB0YWdcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLnRhZyhzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0VG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gJ3RleHQnICYmIGxhc3RUb2tlbi50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICBsYXN0VG9rZW4ucmF3ICs9IHRva2VuLnJhdztcbiAgICAgICAgICBsYXN0VG9rZW4udGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gbGlua1xuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIubGluayhzcmMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlZmxpbmssIG5vbGlua1xuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIucmVmbGluayhzcmMsIHRoaXMudG9rZW5zLmxpbmtzKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdFRva2VuICYmIHRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnJhdyArPSB0b2tlbi5yYXc7XG4gICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gdG9rZW4udGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtICYgc3Ryb25nXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5lbVN0cm9uZyhzcmMsIG1hc2tlZFNyYywgcHJldkNoYXIpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGNvZGVcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmNvZGVzcGFuKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gYnJcbiAgICAgIGlmICh0b2tlbiA9IHRoaXMudG9rZW5pemVyLmJyKHNyYykpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyh0b2tlbi5yYXcubGVuZ3RoKTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZGVsIChnZm0pXG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5kZWwoc3JjKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBhdXRvbGlua1xuICAgICAgaWYgKHRva2VuID0gdGhpcy50b2tlbml6ZXIuYXV0b2xpbmsoc3JjLCBtYW5nbGUpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHVybCAoZ2ZtKVxuICAgICAgaWYgKCF0aGlzLnN0YXRlLmluTGluayAmJiAodG9rZW4gPSB0aGlzLnRva2VuaXplci51cmwoc3JjLCBtYW5nbGUpKSkge1xuICAgICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKHRva2VuLnJhdy5sZW5ndGgpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyB0ZXh0XG4gICAgICAvLyBwcmV2ZW50IGlubGluZVRleHQgY29uc3VtaW5nIGV4dGVuc2lvbnMgYnkgY2xpcHBpbmcgJ3NyYycgdG8gZXh0ZW5zaW9uIHN0YXJ0XG4gICAgICBjdXRTcmMgPSBzcmM7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRJbmxpbmUpIHtcbiAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBJbmZpbml0eTtcbiAgICAgICAgY29uc3QgdGVtcFNyYyA9IHNyYy5zbGljZSgxKTtcbiAgICAgICAgbGV0IHRlbXBTdGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMuc3RhcnRJbmxpbmUuZm9yRWFjaChmdW5jdGlvbihnZXRTdGFydEluZGV4KSB7XG4gICAgICAgICAgdGVtcFN0YXJ0ID0gZ2V0U3RhcnRJbmRleC5jYWxsKHsgbGV4ZXI6IHRoaXMgfSwgdGVtcFNyYyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wU3RhcnQgPT09ICdudW1iZXInICYmIHRlbXBTdGFydCA+PSAwKSB7IHN0YXJ0SW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4LCB0ZW1wU3RhcnQpOyB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3RhcnRJbmRleCA8IEluZmluaXR5ICYmIHN0YXJ0SW5kZXggPj0gMCkge1xuICAgICAgICAgIGN1dFNyYyA9IHNyYy5zdWJzdHJpbmcoMCwgc3RhcnRJbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodG9rZW4gPSB0aGlzLnRva2VuaXplci5pbmxpbmVUZXh0KGN1dFNyYywgc21hcnR5cGFudHMpKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcodG9rZW4ucmF3Lmxlbmd0aCk7XG4gICAgICAgIGlmICh0b2tlbi5yYXcuc2xpY2UoLTEpICE9PSAnXycpIHsgLy8gVHJhY2sgcHJldkNoYXIgYmVmb3JlIHN0cmluZyBvZiBfX19fIHN0YXJ0ZWRcbiAgICAgICAgICBwcmV2Q2hhciA9IHRva2VuLnJhdy5zbGljZSgtMSk7XG4gICAgICAgIH1cbiAgICAgICAga2VlcFByZXZDaGFyID0gdHJ1ZTtcbiAgICAgICAgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiBsYXN0VG9rZW4udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnJhdyArPSB0b2tlbi5yYXc7XG4gICAgICAgICAgbGFzdFRva2VuLnRleHQgKz0gdG9rZW4udGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgY29uc3QgZXJyTXNnID0gJ0luZmluaXRlIGxvb3Agb24gYnl0ZTogJyArIHNyYy5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b2tlbnM7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW5kZXJlclxuICovXG5jbGFzcyBSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IGRlZmF1bHRzO1xuICB9XG5cbiAgY29kZShjb2RlLCBpbmZvc3RyaW5nLCBlc2NhcGVkKSB7XG4gICAgY29uc3QgbGFuZyA9IChpbmZvc3RyaW5nIHx8ICcnKS5tYXRjaCgvXFxTKi8pWzBdO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KSB7XG4gICAgICBjb25zdCBvdXQgPSB0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KGNvZGUsIGxhbmcpO1xuICAgICAgaWYgKG91dCAhPSBudWxsICYmIG91dCAhPT0gY29kZSkge1xuICAgICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgY29kZSA9IG91dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb2RlID0gY29kZS5yZXBsYWNlKC9cXG4kLywgJycpICsgJ1xcbic7XG5cbiAgICBpZiAoIWxhbmcpIHtcbiAgICAgIHJldHVybiAnPHByZT48Y29kZT4nXG4gICAgICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICAgICArICc8L2NvZGU+PC9wcmU+XFxuJztcbiAgICB9XG5cbiAgICByZXR1cm4gJzxwcmU+PGNvZGUgY2xhc3M9XCInXG4gICAgICArIHRoaXMub3B0aW9ucy5sYW5nUHJlZml4XG4gICAgICArIGVzY2FwZShsYW5nKVxuICAgICAgKyAnXCI+J1xuICAgICAgKyAoZXNjYXBlZCA/IGNvZGUgOiBlc2NhcGUoY29kZSwgdHJ1ZSkpXG4gICAgICArICc8L2NvZGU+PC9wcmU+XFxuJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVvdGVcbiAgICovXG4gIGJsb2NrcXVvdGUocXVvdGUpIHtcbiAgICByZXR1cm4gYDxibG9ja3F1b3RlPlxcbiR7cXVvdGV9PC9ibG9ja3F1b3RlPlxcbmA7XG4gIH1cblxuICBodG1sKGh0bWwpIHtcbiAgICByZXR1cm4gaHRtbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJhd1xuICAgKiBAcGFyYW0ge2FueX0gc2x1Z2dlclxuICAgKi9cbiAgaGVhZGluZyh0ZXh0LCBsZXZlbCwgcmF3LCBzbHVnZ2VyKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJJZHMpIHtcbiAgICAgIGNvbnN0IGlkID0gdGhpcy5vcHRpb25zLmhlYWRlclByZWZpeCArIHNsdWdnZXIuc2x1ZyhyYXcpO1xuICAgICAgcmV0dXJuIGA8aCR7bGV2ZWx9IGlkPVwiJHtpZH1cIj4ke3RleHR9PC9oJHtsZXZlbH0+XFxuYDtcbiAgICB9XG5cbiAgICAvLyBpZ25vcmUgSURzXG4gICAgcmV0dXJuIGA8aCR7bGV2ZWx9PiR7dGV4dH08L2gke2xldmVsfT5cXG5gO1xuICB9XG5cbiAgaHIoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy54aHRtbCA/ICc8aHIvPlxcbicgOiAnPGhyPlxcbic7XG4gIH1cblxuICBsaXN0KGJvZHksIG9yZGVyZWQsIHN0YXJ0KSB7XG4gICAgY29uc3QgdHlwZSA9IG9yZGVyZWQgPyAnb2wnIDogJ3VsJyxcbiAgICAgIHN0YXJ0YXR0ID0gKG9yZGVyZWQgJiYgc3RhcnQgIT09IDEpID8gKCcgc3RhcnQ9XCInICsgc3RhcnQgKyAnXCInKSA6ICcnO1xuICAgIHJldHVybiAnPCcgKyB0eXBlICsgc3RhcnRhdHQgKyAnPlxcbicgKyBib2R5ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICovXG4gIGxpc3RpdGVtKHRleHQpIHtcbiAgICByZXR1cm4gYDxsaT4ke3RleHR9PC9saT5cXG5gO1xuICB9XG5cbiAgY2hlY2tib3goY2hlY2tlZCkge1xuICAgIHJldHVybiAnPGlucHV0ICdcbiAgICAgICsgKGNoZWNrZWQgPyAnY2hlY2tlZD1cIlwiICcgOiAnJylcbiAgICAgICsgJ2Rpc2FibGVkPVwiXCIgdHlwZT1cImNoZWNrYm94XCInXG4gICAgICArICh0aGlzLm9wdGlvbnMueGh0bWwgPyAnIC8nIDogJycpXG4gICAgICArICc+ICc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICovXG4gIHBhcmFncmFwaCh0ZXh0KSB7XG4gICAgcmV0dXJuIGA8cD4ke3RleHR9PC9wPlxcbmA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYm9keVxuICAgKi9cbiAgdGFibGUoaGVhZGVyLCBib2R5KSB7XG4gICAgaWYgKGJvZHkpIGJvZHkgPSBgPHRib2R5PiR7Ym9keX08L3Rib2R5PmA7XG5cbiAgICByZXR1cm4gJzx0YWJsZT5cXG4nXG4gICAgICArICc8dGhlYWQ+XFxuJ1xuICAgICAgKyBoZWFkZXJcbiAgICAgICsgJzwvdGhlYWQ+XFxuJ1xuICAgICAgKyBib2R5XG4gICAgICArICc8L3RhYmxlPlxcbic7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICovXG4gIHRhYmxlcm93KGNvbnRlbnQpIHtcbiAgICByZXR1cm4gYDx0cj5cXG4ke2NvbnRlbnR9PC90cj5cXG5gO1xuICB9XG5cbiAgdGFibGVjZWxsKGNvbnRlbnQsIGZsYWdzKSB7XG4gICAgY29uc3QgdHlwZSA9IGZsYWdzLmhlYWRlciA/ICd0aCcgOiAndGQnO1xuICAgIGNvbnN0IHRhZyA9IGZsYWdzLmFsaWduXG4gICAgICA/IGA8JHt0eXBlfSBhbGlnbj1cIiR7ZmxhZ3MuYWxpZ259XCI+YFxuICAgICAgOiBgPCR7dHlwZX0+YDtcbiAgICByZXR1cm4gdGFnICsgY29udGVudCArIGA8LyR7dHlwZX0+XFxuYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBzcGFuIGxldmVsIHJlbmRlcmVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAqL1xuICBzdHJvbmcodGV4dCkge1xuICAgIHJldHVybiBgPHN0cm9uZz4ke3RleHR9PC9zdHJvbmc+YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKi9cbiAgZW0odGV4dCkge1xuICAgIHJldHVybiBgPGVtPiR7dGV4dH08L2VtPmA7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICovXG4gIGNvZGVzcGFuKHRleHQpIHtcbiAgICByZXR1cm4gYDxjb2RlPiR7dGV4dH08L2NvZGU+YDtcbiAgfVxuXG4gIGJyKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGJyLz4nIDogJzxicj4nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAqL1xuICBkZWwodGV4dCkge1xuICAgIHJldHVybiBgPGRlbD4ke3RleHR9PC9kZWw+YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaHJlZlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICovXG4gIGxpbmsoaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICBocmVmID0gY2xlYW5VcmwodGhpcy5vcHRpb25zLnNhbml0aXplLCB0aGlzLm9wdGlvbnMuYmFzZVVybCwgaHJlZik7XG4gICAgaWYgKGhyZWYgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBsZXQgb3V0ID0gJzxhIGhyZWY9XCInICsgaHJlZiArICdcIic7XG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBvdXQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuICAgIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAqL1xuICBpbWFnZShocmVmLCB0aXRsZSwgdGV4dCkge1xuICAgIGhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgICBpZiAoaHJlZiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgbGV0IG91dCA9IGA8aW1nIHNyYz1cIiR7aHJlZn1cIiBhbHQ9XCIke3RleHR9XCJgO1xuICAgIGlmICh0aXRsZSkge1xuICAgICAgb3V0ICs9IGAgdGl0bGU9XCIke3RpdGxlfVwiYDtcbiAgICB9XG4gICAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHRleHQodGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG59XG5cbi8qKlxuICogVGV4dFJlbmRlcmVyXG4gKiByZXR1cm5zIG9ubHkgdGhlIHRleHR1YWwgcGFydCBvZiB0aGUgdG9rZW5cbiAqL1xuY2xhc3MgVGV4dFJlbmRlcmVyIHtcbiAgLy8gbm8gbmVlZCBmb3IgYmxvY2sgbGV2ZWwgcmVuZGVyZXJzXG4gIHN0cm9uZyh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBlbSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBjb2Rlc3Bhbih0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBkZWwodGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgaHRtbCh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0KHRleHQpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIGxpbmsoaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG5cbiAgaW1hZ2UoaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG5cbiAgYnIoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogU2x1Z2dlciBnZW5lcmF0ZXMgaGVhZGVyIGlkXG4gKi9cbmNsYXNzIFNsdWdnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNlZW4gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC50cmltKClcbiAgICAgIC8vIHJlbW92ZSBodG1sIHRhZ3NcbiAgICAgIC5yZXBsYWNlKC88WyFcXC9hLXpdLio/Pi9pZywgJycpXG4gICAgICAvLyByZW1vdmUgdW53YW50ZWQgY2hhcnNcbiAgICAgIC5yZXBsYWNlKC9bXFx1MjAwMC1cXHUyMDZGXFx1MkUwMC1cXHUyRTdGXFxcXCchXCIjJCUmKCkqKywuLzo7PD0+P0BbXFxdXmB7fH1+XS9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHMvZywgJy0nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgbmV4dCBzYWZlICh1bmlxdWUpIHNsdWcgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW5hbFNsdWdcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0RyeVJ1blxuICAgKi9cbiAgZ2V0TmV4dFNhZmVTbHVnKG9yaWdpbmFsU2x1ZywgaXNEcnlSdW4pIHtcbiAgICBsZXQgc2x1ZyA9IG9yaWdpbmFsU2x1ZztcbiAgICBsZXQgb2NjdXJlbmNlQWNjdW11bGF0b3IgPSAwO1xuICAgIGlmICh0aGlzLnNlZW4uaGFzT3duUHJvcGVydHkoc2x1ZykpIHtcbiAgICAgIG9jY3VyZW5jZUFjY3VtdWxhdG9yID0gdGhpcy5zZWVuW29yaWdpbmFsU2x1Z107XG4gICAgICBkbyB7XG4gICAgICAgIG9jY3VyZW5jZUFjY3VtdWxhdG9yKys7XG4gICAgICAgIHNsdWcgPSBvcmlnaW5hbFNsdWcgKyAnLScgKyBvY2N1cmVuY2VBY2N1bXVsYXRvcjtcbiAgICAgIH0gd2hpbGUgKHRoaXMuc2Vlbi5oYXNPd25Qcm9wZXJ0eShzbHVnKSk7XG4gICAgfVxuICAgIGlmICghaXNEcnlSdW4pIHtcbiAgICAgIHRoaXMuc2VlbltvcmlnaW5hbFNsdWddID0gb2NjdXJlbmNlQWNjdW11bGF0b3I7XG4gICAgICB0aGlzLnNlZW5bc2x1Z10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gc2x1ZztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHN0cmluZyB0byB1bmlxdWUgaWRcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRyeXJ1bl0gR2VuZXJhdGVzIHRoZSBuZXh0IHVuaXF1ZSBzbHVnIHdpdGhvdXRcbiAgICogdXBkYXRpbmcgdGhlIGludGVybmFsIGFjY3VtdWxhdG9yLlxuICAgKi9cbiAgc2x1Zyh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc2x1ZyA9IHRoaXMuc2VyaWFsaXplKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5nZXROZXh0U2FmZVNsdWcoc2x1Zywgb3B0aW9ucy5kcnlydW4pO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2luZyAmIENvbXBpbGluZ1xuICovXG5jbGFzcyBQYXJzZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBkZWZhdWx0cztcbiAgICB0aGlzLm9wdGlvbnMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IFJlbmRlcmVyKCk7XG4gICAgdGhpcy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlcjtcbiAgICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdGhpcy50ZXh0UmVuZGVyZXIgPSBuZXcgVGV4dFJlbmRlcmVyKCk7XG4gICAgdGhpcy5zbHVnZ2VyID0gbmV3IFNsdWdnZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgUGFyc2UgTWV0aG9kXG4gICAqL1xuICBzdGF0aWMgcGFyc2UodG9rZW5zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihvcHRpb25zKTtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlKHRva2Vucyk7XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIFBhcnNlIElubGluZSBNZXRob2RcbiAgICovXG4gIHN0YXRpYyBwYXJzZUlubGluZSh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMpO1xuICAgIHJldHVybiBwYXJzZXIucGFyc2VJbmxpbmUodG9rZW5zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBMb29wXG4gICAqL1xuICBwYXJzZSh0b2tlbnMsIHRvcCA9IHRydWUpIHtcbiAgICBsZXQgb3V0ID0gJycsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIGssXG4gICAgICBsMixcbiAgICAgIGwzLFxuICAgICAgcm93LFxuICAgICAgY2VsbCxcbiAgICAgIGhlYWRlcixcbiAgICAgIGJvZHksXG4gICAgICB0b2tlbixcbiAgICAgIG9yZGVyZWQsXG4gICAgICBzdGFydCxcbiAgICAgIGxvb3NlLFxuICAgICAgaXRlbUJvZHksXG4gICAgICBpdGVtLFxuICAgICAgY2hlY2tlZCxcbiAgICAgIHRhc2ssXG4gICAgICBjaGVja2JveCxcbiAgICAgIHJldDtcblxuICAgIGNvbnN0IGwgPSB0b2tlbnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICAvLyBSdW4gYW55IHJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnMgJiYgdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdKSB7XG4gICAgICAgIHJldCA9IHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVyc1t0b2tlbi50eXBlXS5jYWxsKHsgcGFyc2VyOiB0aGlzIH0sIHRva2VuKTtcbiAgICAgICAgaWYgKHJldCAhPT0gZmFsc2UgfHwgIVsnc3BhY2UnLCAnaHInLCAnaGVhZGluZycsICdjb2RlJywgJ3RhYmxlJywgJ2Jsb2NrcXVvdGUnLCAnbGlzdCcsICdodG1sJywgJ3BhcmFncmFwaCcsICd0ZXh0J10uaW5jbHVkZXModG9rZW4udHlwZSkpIHtcbiAgICAgICAgICBvdXQgKz0gcmV0IHx8ICcnO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdzcGFjZSc6IHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdocic6IHtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5ocigpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2hlYWRpbmcnOiB7XG4gICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuaGVhZGluZyhcbiAgICAgICAgICAgIHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zKSxcbiAgICAgICAgICAgIHRva2VuLmRlcHRoLFxuICAgICAgICAgICAgdW5lc2NhcGUodGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMsIHRoaXMudGV4dFJlbmRlcmVyKSksXG4gICAgICAgICAgICB0aGlzLnNsdWdnZXIpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2NvZGUnOiB7XG4gICAgICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuY29kZSh0b2tlbi50ZXh0LFxuICAgICAgICAgICAgdG9rZW4ubGFuZyxcbiAgICAgICAgICAgIHRva2VuLmVzY2FwZWQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3RhYmxlJzoge1xuICAgICAgICAgIGhlYWRlciA9ICcnO1xuXG4gICAgICAgICAgLy8gaGVhZGVyXG4gICAgICAgICAgY2VsbCA9ICcnO1xuICAgICAgICAgIGwyID0gdG9rZW4uaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbDI7IGorKykge1xuICAgICAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICAgICAgdGhpcy5wYXJzZUlubGluZSh0b2tlbi5oZWFkZXJbal0udG9rZW5zKSxcbiAgICAgICAgICAgICAgeyBoZWFkZXI6IHRydWUsIGFsaWduOiB0b2tlbi5hbGlnbltqXSB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoZWFkZXIgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcblxuICAgICAgICAgIGJvZHkgPSAnJztcbiAgICAgICAgICBsMiA9IHRva2VuLnJvd3MubGVuZ3RoO1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsMjsgaisrKSB7XG4gICAgICAgICAgICByb3cgPSB0b2tlbi5yb3dzW2pdO1xuXG4gICAgICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgICAgICBsMyA9IHJvdy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbDM7IGsrKykge1xuICAgICAgICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKFxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VJbmxpbmUocm93W2tdLnRva2VucyksXG4gICAgICAgICAgICAgICAgeyBoZWFkZXI6IGZhbHNlLCBhbGlnbjogdG9rZW4uYWxpZ25ba10gfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlKGhlYWRlciwgYm9keSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2txdW90ZSc6IHtcbiAgICAgICAgICBib2R5ID0gdGhpcy5wYXJzZSh0b2tlbi50b2tlbnMpO1xuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmJsb2NrcXVvdGUoYm9keSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnbGlzdCc6IHtcbiAgICAgICAgICBvcmRlcmVkID0gdG9rZW4ub3JkZXJlZDtcbiAgICAgICAgICBzdGFydCA9IHRva2VuLnN0YXJ0O1xuICAgICAgICAgIGxvb3NlID0gdG9rZW4ubG9vc2U7XG4gICAgICAgICAgbDIgPSB0b2tlbi5pdGVtcy5sZW5ndGg7XG5cbiAgICAgICAgICBib2R5ID0gJyc7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGwyOyBqKyspIHtcbiAgICAgICAgICAgIGl0ZW0gPSB0b2tlbi5pdGVtc1tqXTtcbiAgICAgICAgICAgIGNoZWNrZWQgPSBpdGVtLmNoZWNrZWQ7XG4gICAgICAgICAgICB0YXNrID0gaXRlbS50YXNrO1xuXG4gICAgICAgICAgICBpdGVtQm9keSA9ICcnO1xuICAgICAgICAgICAgaWYgKGl0ZW0udGFzaykge1xuICAgICAgICAgICAgICBjaGVja2JveCA9IHRoaXMucmVuZGVyZXIuY2hlY2tib3goY2hlY2tlZCk7XG4gICAgICAgICAgICAgIGlmIChsb29zZSkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnRva2Vucy5sZW5ndGggPiAwICYmIGl0ZW0udG9rZW5zWzBdLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgICAgICAgICAgICBpdGVtLnRva2Vuc1swXS50ZXh0ID0gY2hlY2tib3ggKyAnICcgKyBpdGVtLnRva2Vuc1swXS50ZXh0O1xuICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udG9rZW5zWzBdLnRva2VucyAmJiBpdGVtLnRva2Vuc1swXS50b2tlbnMubGVuZ3RoID4gMCAmJiBpdGVtLnRva2Vuc1swXS50b2tlbnNbMF0udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udG9rZW5zWzBdLnRva2Vuc1swXS50ZXh0ID0gY2hlY2tib3ggKyAnICcgKyBpdGVtLnRva2Vuc1swXS50b2tlbnNbMF0udGV4dDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaXRlbS50b2tlbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogY2hlY2tib3hcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtQm9keSArPSBjaGVja2JveDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtQm9keSArPSB0aGlzLnBhcnNlKGl0ZW0udG9rZW5zLCBsb29zZSk7XG4gICAgICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oaXRlbUJvZHksIHRhc2ssIGNoZWNrZWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpc3QoYm9keSwgb3JkZXJlZCwgc3RhcnQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2h0bWwnOiB7XG4gICAgICAgICAgLy8gVE9ETyBwYXJzZSBpbmxpbmUgY29udGVudCBpZiBwYXJhbWV0ZXIgbWFya2Rvd249MVxuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmh0bWwodG9rZW4udGV4dCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAncGFyYWdyYXBoJzoge1xuICAgICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaCh0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucykpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3RleHQnOiB7XG4gICAgICAgICAgYm9keSA9IHRva2VuLnRva2VucyA/IHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zKSA6IHRva2VuLnRleHQ7XG4gICAgICAgICAgd2hpbGUgKGkgKyAxIDwgbCAmJiB0b2tlbnNbaSArIDFdLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbKytpXTtcbiAgICAgICAgICAgIGJvZHkgKz0gJ1xcbicgKyAodG9rZW4udG9rZW5zID8gdGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMpIDogdG9rZW4udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSB0b3AgPyB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaChib2R5KSA6IGJvZHk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgY29uc3QgZXJyTXNnID0gJ1Rva2VuIHdpdGggXCInICsgdG9rZW4udHlwZSArICdcIiB0eXBlIHdhcyBub3QgZm91bmQuJztcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNpbGVudCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIElubGluZSBUb2tlbnNcbiAgICovXG4gIHBhcnNlSW5saW5lKHRva2VucywgcmVuZGVyZXIpIHtcbiAgICByZW5kZXJlciA9IHJlbmRlcmVyIHx8IHRoaXMucmVuZGVyZXI7XG4gICAgbGV0IG91dCA9ICcnLFxuICAgICAgaSxcbiAgICAgIHRva2VuLFxuICAgICAgcmV0O1xuXG4gICAgY29uc3QgbCA9IHRva2Vucy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIC8vIFJ1biBhbnkgcmVuZGVyZXIgZXh0ZW5zaW9uc1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHRlbnNpb25zICYmIHRoaXMub3B0aW9ucy5leHRlbnNpb25zLnJlbmRlcmVycyAmJiB0aGlzLm9wdGlvbnMuZXh0ZW5zaW9ucy5yZW5kZXJlcnNbdG9rZW4udHlwZV0pIHtcbiAgICAgICAgcmV0ID0gdGhpcy5vcHRpb25zLmV4dGVuc2lvbnMucmVuZGVyZXJzW3Rva2VuLnR5cGVdLmNhbGwoeyBwYXJzZXI6IHRoaXMgfSwgdG9rZW4pO1xuICAgICAgICBpZiAocmV0ICE9PSBmYWxzZSB8fCAhWydlc2NhcGUnLCAnaHRtbCcsICdsaW5rJywgJ2ltYWdlJywgJ3N0cm9uZycsICdlbScsICdjb2Rlc3BhbicsICdicicsICdkZWwnLCAndGV4dCddLmluY2x1ZGVzKHRva2VuLnR5cGUpKSB7XG4gICAgICAgICAgb3V0ICs9IHJldCB8fCAnJztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZXNjYXBlJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci50ZXh0KHRva2VuLnRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2h0bWwnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmh0bWwodG9rZW4udGV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnbGluayc6IHtcbiAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIubGluayh0b2tlbi5ocmVmLCB0b2tlbi50aXRsZSwgdGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMsIHJlbmRlcmVyKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnaW1hZ2UnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmltYWdlKHRva2VuLmhyZWYsIHRva2VuLnRpdGxlLCB0b2tlbi50ZXh0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdzdHJvbmcnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLnN0cm9uZyh0aGlzLnBhcnNlSW5saW5lKHRva2VuLnRva2VucywgcmVuZGVyZXIpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdlbSc6IHtcbiAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuZW0odGhpcy5wYXJzZUlubGluZSh0b2tlbi50b2tlbnMsIHJlbmRlcmVyKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnY29kZXNwYW4nOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLmNvZGVzcGFuKHRva2VuLnRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2JyJzoge1xuICAgICAgICAgIG91dCArPSByZW5kZXJlci5icigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2RlbCc6IHtcbiAgICAgICAgICBvdXQgKz0gcmVuZGVyZXIuZGVsKHRoaXMucGFyc2VJbmxpbmUodG9rZW4udG9rZW5zLCByZW5kZXJlcikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3RleHQnOiB7XG4gICAgICAgICAgb3V0ICs9IHJlbmRlcmVyLnRleHQodG9rZW4udGV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGNvbnN0IGVyck1zZyA9ICdUb2tlbiB3aXRoIFwiJyArIHRva2VuLnR5cGUgKyAnXCIgdHlwZSB3YXMgbm90IGZvdW5kLic7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyck1zZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbn1cblxuLyoqXG4gKiBNYXJrZWRcbiAqL1xuZnVuY3Rpb24gbWFya2VkKHNyYywgb3B0LCBjYWxsYmFjaykge1xuICAvLyB0aHJvdyBlcnJvciBpbiBjYXNlIG9mIG5vbiBzdHJpbmcgaW5wdXRcbiAgaWYgKHR5cGVvZiBzcmMgPT09ICd1bmRlZmluZWQnIHx8IHNyYyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkKCk6IGlucHV0IHBhcmFtZXRlciBpcyB1bmRlZmluZWQgb3IgbnVsbCcpO1xuICB9XG4gIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkKCk6IGlucHV0IHBhcmFtZXRlciBpcyBvZiB0eXBlICdcbiAgICAgICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNyYykgKyAnLCBzdHJpbmcgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHQ7XG4gICAgb3B0ID0gbnVsbDtcbiAgfVxuXG4gIG9wdCA9IG1lcmdlKHt9LCBtYXJrZWQuZGVmYXVsdHMsIG9wdCB8fCB7fSk7XG4gIGNoZWNrU2FuaXRpemVEZXByZWNhdGlvbihvcHQpO1xuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGNvbnN0IGhpZ2hsaWdodCA9IG9wdC5oaWdobGlnaHQ7XG4gICAgbGV0IHRva2VucztcblxuICAgIHRyeSB7XG4gICAgICB0b2tlbnMgPSBMZXhlci5sZXgoc3JjLCBvcHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICB9XG5cbiAgICBjb25zdCBkb25lID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBsZXQgb3V0O1xuXG4gICAgICBpZiAoIWVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChvcHQud2Fsa1Rva2Vucykge1xuICAgICAgICAgICAgbWFya2VkLndhbGtUb2tlbnModG9rZW5zLCBvcHQud2Fsa1Rva2Vucyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCA9IFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBlcnIgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG5cbiAgICAgIHJldHVybiBlcnJcbiAgICAgICAgPyBjYWxsYmFjayhlcnIpXG4gICAgICAgIDogY2FsbGJhY2sobnVsbCwgb3V0KTtcbiAgICB9O1xuXG4gICAgaWYgKCFoaWdobGlnaHQgfHwgaGlnaGxpZ2h0Lmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIG9wdC5oaWdobGlnaHQ7XG5cbiAgICBpZiAoIXRva2Vucy5sZW5ndGgpIHJldHVybiBkb25lKCk7XG5cbiAgICBsZXQgcGVuZGluZyA9IDA7XG4gICAgbWFya2VkLndhbGtUb2tlbnModG9rZW5zLCBmdW5jdGlvbih0b2tlbikge1xuICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdjb2RlJykge1xuICAgICAgICBwZW5kaW5nKys7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGhpZ2hsaWdodCh0b2tlbi50ZXh0LCB0b2tlbi5sYW5nLCBmdW5jdGlvbihlcnIsIGNvZGUpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2RlICE9IG51bGwgJiYgY29kZSAhPT0gdG9rZW4udGV4dCkge1xuICAgICAgICAgICAgICB0b2tlbi50ZXh0ID0gY29kZTtcbiAgICAgICAgICAgICAgdG9rZW4uZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBlbmRpbmctLTtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nID09PSAwKSB7XG4gICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocGVuZGluZyA9PT0gMCkge1xuICAgICAgZG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRXJyb3IoZSkge1xuICAgIGUubWVzc2FnZSArPSAnXFxuUGxlYXNlIHJlcG9ydCB0aGlzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWQuJztcbiAgICBpZiAob3B0LnNpbGVudCkge1xuICAgICAgcmV0dXJuICc8cD5BbiBlcnJvciBvY2N1cnJlZDo8L3A+PHByZT4nXG4gICAgICAgICsgZXNjYXBlKGUubWVzc2FnZSArICcnLCB0cnVlKVxuICAgICAgICArICc8L3ByZT4nO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCB0b2tlbnMgPSBMZXhlci5sZXgoc3JjLCBvcHQpO1xuICAgIGlmIChvcHQud2Fsa1Rva2Vucykge1xuICAgICAgaWYgKG9wdC5hc3luYykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobWFya2VkLndhbGtUb2tlbnModG9rZW5zLCBvcHQud2Fsa1Rva2VucykpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2gob25FcnJvcik7XG4gICAgICB9XG4gICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICB9XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZSh0b2tlbnMsIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvbkVycm9yKGUpO1xuICB9XG59XG5cbi8qKlxuICogT3B0aW9uc1xuICovXG5cbm1hcmtlZC5vcHRpb25zID1cbm1hcmtlZC5zZXRPcHRpb25zID0gZnVuY3Rpb24ob3B0KSB7XG4gIG1lcmdlKG1hcmtlZC5kZWZhdWx0cywgb3B0KTtcbiAgY2hhbmdlRGVmYXVsdHMobWFya2VkLmRlZmF1bHRzKTtcbiAgcmV0dXJuIG1hcmtlZDtcbn07XG5cbm1hcmtlZC5nZXREZWZhdWx0cyA9IGdldERlZmF1bHRzO1xuXG5tYXJrZWQuZGVmYXVsdHMgPSBkZWZhdWx0cztcblxuLyoqXG4gKiBVc2UgRXh0ZW5zaW9uXG4gKi9cblxubWFya2VkLnVzZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgY29uc3QgZXh0ZW5zaW9ucyA9IG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zIHx8IHsgcmVuZGVyZXJzOiB7fSwgY2hpbGRUb2tlbnM6IHt9IH07XG5cbiAgYXJncy5mb3JFYWNoKChwYWNrKSA9PiB7XG4gICAgLy8gY29weSBvcHRpb25zIHRvIG5ldyBvYmplY3RcbiAgICBjb25zdCBvcHRzID0gbWVyZ2Uoe30sIHBhY2spO1xuXG4gICAgLy8gc2V0IGFzeW5jIHRvIHRydWUgaWYgaXQgd2FzIHNldCB0byB0cnVlIGJlZm9yZVxuICAgIG9wdHMuYXN5bmMgPSBtYXJrZWQuZGVmYXVsdHMuYXN5bmMgfHwgb3B0cy5hc3luYztcblxuICAgIC8vID09LS0gUGFyc2UgXCJhZGRvblwiIGV4dGVuc2lvbnMgLS09PSAvL1xuICAgIGlmIChwYWNrLmV4dGVuc2lvbnMpIHtcbiAgICAgIHBhY2suZXh0ZW5zaW9ucy5mb3JFYWNoKChleHQpID0+IHtcbiAgICAgICAgaWYgKCFleHQubmFtZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXh0ZW5zaW9uIG5hbWUgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0LnJlbmRlcmVyKSB7IC8vIFJlbmRlcmVyIGV4dGVuc2lvbnNcbiAgICAgICAgICBjb25zdCBwcmV2UmVuZGVyZXIgPSBleHRlbnNpb25zLnJlbmRlcmVyc1tleHQubmFtZV07XG4gICAgICAgICAgaWYgKHByZXZSZW5kZXJlcikge1xuICAgICAgICAgICAgLy8gUmVwbGFjZSBleHRlbnNpb24gd2l0aCBmdW5jIHRvIHJ1biBuZXcgZXh0ZW5zaW9uIGJ1dCBmYWxsIGJhY2sgaWYgZmFsc2VcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgbGV0IHJldCA9IGV4dC5yZW5kZXJlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBwcmV2UmVuZGVyZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbnMucmVuZGVyZXJzW2V4dC5uYW1lXSA9IGV4dC5yZW5kZXJlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dC50b2tlbml6ZXIpIHsgLy8gVG9rZW5pemVyIEV4dGVuc2lvbnNcbiAgICAgICAgICBpZiAoIWV4dC5sZXZlbCB8fCAoZXh0LmxldmVsICE9PSAnYmxvY2snICYmIGV4dC5sZXZlbCAhPT0gJ2lubGluZScpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHRlbnNpb24gbGV2ZWwgbXVzdCBiZSAnYmxvY2snIG9yICdpbmxpbmUnXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uc1tleHQubGV2ZWxdKSB7XG4gICAgICAgICAgICBleHRlbnNpb25zW2V4dC5sZXZlbF0udW5zaGlmdChleHQudG9rZW5pemVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHQubGV2ZWxdID0gW2V4dC50b2tlbml6ZXJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXh0LnN0YXJ0KSB7IC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGZvciBzdGFydCBvZiB0b2tlblxuICAgICAgICAgICAgaWYgKGV4dC5sZXZlbCA9PT0gJ2Jsb2NrJykge1xuICAgICAgICAgICAgICBpZiAoZXh0ZW5zaW9ucy5zdGFydEJsb2NrKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydEJsb2NrLnB1c2goZXh0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zLnN0YXJ0QmxvY2sgPSBbZXh0LnN0YXJ0XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChleHQubGV2ZWwgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgICAgIGlmIChleHRlbnNpb25zLnN0YXJ0SW5saW5lKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydElubGluZS5wdXNoKGV4dC5zdGFydCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFydElubGluZSA9IFtleHQuc3RhcnRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHQuY2hpbGRUb2tlbnMpIHsgLy8gQ2hpbGQgdG9rZW5zIHRvIGJlIHZpc2l0ZWQgYnkgd2Fsa1Rva2Vuc1xuICAgICAgICAgIGV4dGVuc2lvbnMuY2hpbGRUb2tlbnNbZXh0Lm5hbWVdID0gZXh0LmNoaWxkVG9rZW5zO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG9wdHMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gICAgfVxuXG4gICAgLy8gPT0tLSBQYXJzZSBcIm92ZXJ3cml0ZVwiIGV4dGVuc2lvbnMgLS09PSAvL1xuICAgIGlmIChwYWNrLnJlbmRlcmVyKSB7XG4gICAgICBjb25zdCByZW5kZXJlciA9IG1hcmtlZC5kZWZhdWx0cy5yZW5kZXJlciB8fCBuZXcgUmVuZGVyZXIoKTtcbiAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBwYWNrLnJlbmRlcmVyKSB7XG4gICAgICAgIGNvbnN0IHByZXZSZW5kZXJlciA9IHJlbmRlcmVyW3Byb3BdO1xuICAgICAgICAvLyBSZXBsYWNlIHJlbmRlcmVyIHdpdGggZnVuYyB0byBydW4gZXh0ZW5zaW9uLCBidXQgZmFsbCBiYWNrIGlmIGZhbHNlXG4gICAgICAgIHJlbmRlcmVyW3Byb3BdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICBsZXQgcmV0ID0gcGFjay5yZW5kZXJlcltwcm9wXS5hcHBseShyZW5kZXJlciwgYXJncyk7XG4gICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldCA9IHByZXZSZW5kZXJlci5hcHBseShyZW5kZXJlciwgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBvcHRzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgfVxuICAgIGlmIChwYWNrLnRva2VuaXplcikge1xuICAgICAgY29uc3QgdG9rZW5pemVyID0gbWFya2VkLmRlZmF1bHRzLnRva2VuaXplciB8fCBuZXcgVG9rZW5pemVyKCk7XG4gICAgICBmb3IgKGNvbnN0IHByb3AgaW4gcGFjay50b2tlbml6ZXIpIHtcbiAgICAgICAgY29uc3QgcHJldlRva2VuaXplciA9IHRva2VuaXplcltwcm9wXTtcbiAgICAgICAgLy8gUmVwbGFjZSB0b2tlbml6ZXIgd2l0aCBmdW5jIHRvIHJ1biBleHRlbnNpb24sIGJ1dCBmYWxsIGJhY2sgaWYgZmFsc2VcbiAgICAgICAgdG9rZW5pemVyW3Byb3BdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICBsZXQgcmV0ID0gcGFjay50b2tlbml6ZXJbcHJvcF0uYXBwbHkodG9rZW5pemVyLCBhcmdzKTtcbiAgICAgICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0ID0gcHJldlRva2VuaXplci5hcHBseSh0b2tlbml6ZXIsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgb3B0cy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XG4gICAgfVxuXG4gICAgLy8gPT0tLSBQYXJzZSBXYWxrVG9rZW5zIGV4dGVuc2lvbnMgLS09PSAvL1xuICAgIGlmIChwYWNrLndhbGtUb2tlbnMpIHtcbiAgICAgIGNvbnN0IHdhbGtUb2tlbnMgPSBtYXJrZWQuZGVmYXVsdHMud2Fsa1Rva2VucztcbiAgICAgIG9wdHMud2Fsa1Rva2VucyA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgdmFsdWVzLnB1c2gocGFjay53YWxrVG9rZW5zLmNhbGwodGhpcywgdG9rZW4pKTtcbiAgICAgICAgaWYgKHdhbGtUb2tlbnMpIHtcbiAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHdhbGtUb2tlbnMuY2FsbCh0aGlzLCB0b2tlbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICB9O1xuICAgIH1cblxuICAgIG1hcmtlZC5zZXRPcHRpb25zKG9wdHMpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUnVuIGNhbGxiYWNrIGZvciBldmVyeSB0b2tlblxuICovXG5cbm1hcmtlZC53YWxrVG9rZW5zID0gZnVuY3Rpb24odG9rZW5zLCBjYWxsYmFjaykge1xuICBsZXQgdmFsdWVzID0gW107XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChjYWxsYmFjay5jYWxsKG1hcmtlZCwgdG9rZW4pKTtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RhYmxlJzoge1xuICAgICAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdG9rZW4uaGVhZGVyKSB7XG4gICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChtYXJrZWQud2Fsa1Rva2VucyhjZWxsLnRva2VucywgY2FsbGJhY2spKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0b2tlbi5yb3dzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBjZWxsIG9mIHJvdykge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChtYXJrZWQud2Fsa1Rva2VucyhjZWxsLnRva2VucywgY2FsbGJhY2spKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdsaXN0Jzoge1xuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KG1hcmtlZC53YWxrVG9rZW5zKHRva2VuLml0ZW1zLCBjYWxsYmFjaykpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zICYmIG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zLmNoaWxkVG9rZW5zICYmIG1hcmtlZC5kZWZhdWx0cy5leHRlbnNpb25zLmNoaWxkVG9rZW5zW3Rva2VuLnR5cGVdKSB7IC8vIFdhbGsgYW55IGV4dGVuc2lvbnNcbiAgICAgICAgICBtYXJrZWQuZGVmYXVsdHMuZXh0ZW5zaW9ucy5jaGlsZFRva2Vuc1t0b2tlbi50eXBlXS5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkVG9rZW5zKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KG1hcmtlZC53YWxrVG9rZW5zKHRva2VuW2NoaWxkVG9rZW5zXSwgY2FsbGJhY2spKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2tlbi50b2tlbnMpIHtcbiAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KG1hcmtlZC53YWxrVG9rZW5zKHRva2VuLnRva2VucywgY2FsbGJhY2spKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufTtcblxuLyoqXG4gKiBQYXJzZSBJbmxpbmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNcbiAqL1xubWFya2VkLnBhcnNlSW5saW5lID0gZnVuY3Rpb24oc3JjLCBvcHQpIHtcbiAgLy8gdGhyb3cgZXJyb3IgaW4gY2FzZSBvZiBub24gc3RyaW5nIGlucHV0XG4gIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZC5wYXJzZUlubGluZSgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgfVxuICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZC5wYXJzZUlubGluZSgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSAnXG4gICAgICArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJyk7XG4gIH1cblxuICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuICBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KTtcblxuICB0cnkge1xuICAgIGNvbnN0IHRva2VucyA9IExleGVyLmxleElubGluZShzcmMsIG9wdCk7XG4gICAgaWYgKG9wdC53YWxrVG9rZW5zKSB7XG4gICAgICBtYXJrZWQud2Fsa1Rva2Vucyh0b2tlbnMsIG9wdC53YWxrVG9rZW5zKTtcbiAgICB9XG4gICAgcmV0dXJuIFBhcnNlci5wYXJzZUlubGluZSh0b2tlbnMsIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkLic7XG4gICAgaWYgKG9wdC5zaWxlbnQpIHtcbiAgICAgIHJldHVybiAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHBvc2VcbiAqL1xubWFya2VkLlBhcnNlciA9IFBhcnNlcjtcbm1hcmtlZC5wYXJzZXIgPSBQYXJzZXIucGFyc2U7XG5tYXJrZWQuUmVuZGVyZXIgPSBSZW5kZXJlcjtcbm1hcmtlZC5UZXh0UmVuZGVyZXIgPSBUZXh0UmVuZGVyZXI7XG5tYXJrZWQuTGV4ZXIgPSBMZXhlcjtcbm1hcmtlZC5sZXhlciA9IExleGVyLmxleDtcbm1hcmtlZC5Ub2tlbml6ZXIgPSBUb2tlbml6ZXI7XG5tYXJrZWQuU2x1Z2dlciA9IFNsdWdnZXI7XG5tYXJrZWQucGFyc2UgPSBtYXJrZWQ7XG5cbmNvbnN0IG9wdGlvbnMgPSBtYXJrZWQub3B0aW9ucztcbmNvbnN0IHNldE9wdGlvbnMgPSBtYXJrZWQuc2V0T3B0aW9ucztcbmNvbnN0IHVzZSA9IG1hcmtlZC51c2U7XG5jb25zdCB3YWxrVG9rZW5zID0gbWFya2VkLndhbGtUb2tlbnM7XG5jb25zdCBwYXJzZUlubGluZSA9IG1hcmtlZC5wYXJzZUlubGluZTtcbmNvbnN0IHBhcnNlID0gbWFya2VkO1xuY29uc3QgcGFyc2VyID0gUGFyc2VyLnBhcnNlO1xuY29uc3QgbGV4ZXIgPSBMZXhlci5sZXg7XG5cbmV4cG9ydCB7IExleGVyLCBQYXJzZXIsIFJlbmRlcmVyLCBTbHVnZ2VyLCBUZXh0UmVuZGVyZXIsIFRva2VuaXplciwgZGVmYXVsdHMsIGdldERlZmF1bHRzLCBsZXhlciwgbWFya2VkLCBvcHRpb25zLCBwYXJzZSwgcGFyc2VJbmxpbmUsIHBhcnNlciwgc2V0T3B0aW9ucywgdXNlLCB3YWxrVG9rZW5zIH07XG4iLCAiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IFdvcmRwcmVzc1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBXb3JkUHJlc3NQb3N0UGFyYW1zIH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5pbXBvcnQgeyBQb3N0U3RhdHVzLCBUZXJtIH0gZnJvbSAnLi93cC1hcGknO1xyXG5pbXBvcnQgeyB0b051bWJlciB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZUtleSB9IGZyb20gJy4vaTE4bic7XHJcblxyXG4vKipcclxuICogV29yZFByZXNzIHB1Ymxpc2ggbW9kYWwuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV3BQdWJsaXNoTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgYXBwOiBBcHAsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBsdWdpbjogV29yZHByZXNzUGx1Z2luLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYXRlZ29yaWVzOiBUZXJtW10sXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uU3VibWl0OiAocGFyYW1zOiBXb3JkUHJlc3NQb3N0UGFyYW1zLCBtb2RhbDogTW9kYWwpID0+IHZvaWRcclxuICApIHtcclxuICAgIHN1cGVyKGFwcCk7XHJcbiAgfVxyXG5cclxuICBvbk9wZW4oKSB7XHJcbiAgICBjb25zdCB0ID0gKGtleTogVHJhbnNsYXRlS2V5LCB2YXJzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IHN0cmluZyA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBsdWdpbi5pMThuLnQoa2V5LCB2YXJzKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcGFyYW1zOiBXb3JkUHJlc3NQb3N0UGFyYW1zID0ge1xyXG4gICAgICBzdGF0dXM6IHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRQb3N0U3RhdHVzLFxyXG4gICAgICBjYXRlZ29yaWVzOiBbIDEgXVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuXHJcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gxJywgeyB0ZXh0OiB0KCdwdWJsaXNoTW9kYWxfdGl0bGUnKSB9KTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKHQoJ3B1Ymxpc2hNb2RhbF9wb3N0U3RhdHVzJykpXHJcbiAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgLmFkZE9wdGlvbihQb3N0U3RhdHVzLkRyYWZ0LCB0KCdwdWJsaXNoTW9kYWxfcG9zdFN0YXR1c0RyYWZ0JykpXHJcbiAgICAgICAgICAuYWRkT3B0aW9uKFBvc3RTdGF0dXMuUHVibGlzaCwgdCgncHVibGlzaE1vZGFsX3Bvc3RTdGF0dXNQdWJsaXNoJykpXHJcbiAgICAgICAgICAvLyAuYWRkT3B0aW9uKFBvc3RTdGF0dXMuRnV0dXJlLCAnZnV0dXJlJylcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0UG9zdFN0YXR1cylcclxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6IFBvc3RTdGF0dXMpID0+IHtcclxuICAgICAgICAgICAgcGFyYW1zLnN0YXR1cyA9IHZhbHVlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgaWYgKHRoaXMuY2F0ZWdvcmllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAuc2V0TmFtZSh0KCdwdWJsaXNoTW9kYWxfY2F0ZWdvcnknKSlcclxuICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMuZm9yRWFjaChpdCA9PiB7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihpdC5pZCwgaXQubmFtZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgIC5zZXRWYWx1ZShcIjFcIilcclxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgcGFyYW1zLmNhdGVnb3JpZXMgPSBbIHRvTnVtYmVyKHZhbHVlKSBdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT4gYnV0dG9uXHJcbiAgICAgICAgLnNldEJ1dHRvblRleHQodCgncHVibGlzaE1vZGFsX3B1Ymxpc2hCdXR0b25UZXh0JykpXHJcbiAgICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5vblN1Ym1pdChwYXJhbXMsIHRoaXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICBvbkNsb3NlKCkge1xyXG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICB9XHJcblxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBXb3JkcHJlc3NQbHVnaW4gZnJvbSAnLi9tYWluJztcclxuaW1wb3J0IHsgV29yZFByZXNzQ2xpZW50UmVzdWx0LCBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlLCBXb3JkUHJlc3NQb3N0UGFyYW1zIH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5pbXBvcnQgeyBYbWxScGNDbGllbnQgfSBmcm9tICcuL3htbHJwYy1jbGllbnQnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdFdvcmRQcmVzc0NsaWVudCB9IGZyb20gJy4vYWJzdHJhY3Qtd3AtY2xpZW50JztcclxuaW1wb3J0IHsgVGVybSB9IGZyb20gJy4vd3AtYXBpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBXcFhtbFJwY0NsaWVudCBleHRlbmRzIEFic3RyYWN0V29yZFByZXNzQ2xpZW50IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBjbGllbnQ6IFhtbFJwY0NsaWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZWFkb25seSBhcHA6IEFwcCxcclxuICAgIHJlYWRvbmx5IHBsdWdpbjogV29yZHByZXNzUGx1Z2luXHJcbiAgKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBYbWxScGNDbGllbnQoe1xyXG4gICAgICB1cmw6IG5ldyBVUkwocGx1Z2luLnNldHRpbmdzLmVuZHBvaW50KVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaXNoKHRpdGxlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgcG9zdFBhcmFtczogV29yZFByZXNzUG9zdFBhcmFtcywgd3A6IHtcclxuICAgIHVzZXJOYW1lOiBzdHJpbmcsXHJcbiAgICBwYXNzd29yZDogc3RyaW5nXHJcbiAgfSk6IFByb21pc2U8V29yZFByZXNzQ2xpZW50UmVzdWx0PiB7XHJcbiAgICByZXR1cm4gdGhpcy5jbGllbnQubWV0aG9kQ2FsbCgnd3AubmV3UG9zdCcsIFtcclxuICAgICAgMCxcclxuICAgICAgd3AudXNlck5hbWUsXHJcbiAgICAgIHdwLnBhc3N3b3JkLFxyXG4gICAgICB7XHJcbiAgICAgICAgcG9zdF90eXBlOiAncG9zdCcsXHJcbiAgICAgICAgcG9zdF9zdGF0dXM6IHBvc3RQYXJhbXMuc3RhdHVzLFxyXG4gICAgICAgIHBvc3RfdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgIHBvc3RfY29udGVudDogY29udGVudCxcclxuICAgICAgICB0ZXJtczoge1xyXG4gICAgICAgICAgJ2NhdGVnb3J5JzogcG9zdFBhcmFtcy5jYXRlZ29yaWVzXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICBdKVxyXG4gICAgICAudGhlbigocmVzcG9uc2U6IGFueSkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmZhdWx0Q29kZSAmJiByZXNwb25zZS5mYXVsdFN0cmluZykge1xyXG4gICAgICAgICAgLy8gaXQgbWVhbnMgZXJyb3IgaGFwcGVuc1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29kZTogV29yZFByZXNzQ2xpZW50UmV0dXJuQ29kZS5FcnJvcixcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgIGNvZGU6IHJlc3BvbnNlLmZhdWx0Q29kZSxcclxuICAgICAgICAgICAgICBtZXNzYWdlOiByZXNwb25zZS5mYXVsdFN0cmluZ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb2RlOiBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlLk9LLFxyXG4gICAgICAgICAgICBkYXRhOiByZXNwb25zZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYXRlZ29yaWVzKHdwOiB7IHVzZXJOYW1lOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfSk6IFByb21pc2U8VGVybVtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jbGllbnQubWV0aG9kQ2FsbCgnd3AuZ2V0VGVybXMnLCBbXHJcbiAgICAgIDAsXHJcbiAgICAgIHdwLnVzZXJOYW1lLFxyXG4gICAgICB3cC5wYXNzd29yZCxcclxuICAgICAgJ2NhdGVnb3J5J1xyXG4gICAgXSlcclxuICAgICAgLnRoZW4oKGRhdGE6IHVua25vd25bXSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBkYXRhLm1hcCgoaXQ6IGFueSkgPT4gKHtcclxuICAgICAgICAgIC4uLml0LFxyXG4gICAgICAgICAgaWQ6IGl0LnRlcm1faWRcclxuICAgICAgICB9KSkgPz8gW107XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgcmVxdWVzdFVybCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgV29yZFByZXNzQ2xpZW50UmVzdWx0LCBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlLCBXb3JkUHJlc3NQb3N0UGFyYW1zIH0gZnJvbSAnLi93cC1jbGllbnQnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdFdvcmRQcmVzc0NsaWVudCB9IGZyb20gJy4vYWJzdHJhY3Qtd3AtY2xpZW50JztcclxuaW1wb3J0IFdvcmRwcmVzc1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBUZXJtIH0gZnJvbSAnLi93cC1hcGknO1xyXG5cclxuaW50ZXJmYWNlIFJlc3RPcHRpb25zIHtcclxuICB1cmw6IFVSTDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdwUmVzdENsaWVudCBleHRlbmRzIEFic3RyYWN0V29yZFByZXNzQ2xpZW50IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBSZXN0T3B0aW9ucztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZWFkb25seSBhcHA6IEFwcCxcclxuICAgIHJlYWRvbmx5IHBsdWdpbjogV29yZHByZXNzUGx1Z2luLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250ZXh0OiBXcFJlc3RDbGllbnRDb250ZXh0XHJcbiAgKSB7XHJcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgIHVybDogbmV3IFVSTChwbHVnaW4uc2V0dGluZ3MuZW5kcG9pbnQpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGlzaCh0aXRsZTogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIHBvc3RQYXJhbXM6IFdvcmRQcmVzc1Bvc3RQYXJhbXMsIHdwOiB7XHJcbiAgICB1c2VyTmFtZTogc3RyaW5nLFxyXG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xyXG4gIH0pOiBQcm9taXNlPFdvcmRQcmVzc0NsaWVudFJlc3VsdD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cFBvc3QoXHJcbiAgICAgICd3cC1qc29uL3dwL3YyL3Bvc3RzJyxcclxuICAgICAge1xyXG4gICAgICAgIHRpdGxlLFxyXG4gICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgc3RhdHVzOiBwb3N0UGFyYW1zLnN0YXR1cyxcclxuICAgICAgICBjYXRlZ29yaWVzOiBwb3N0UGFyYW1zLmNhdGVnb3JpZXNcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuY29udGV4dC5nZXRIZWFkZXJzKHdwKVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigocmVzcDogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1dwUmVzdENsaWVudCByZXNwb25zZScsIHJlc3ApO1xyXG4gICAgICAgIGlmIChyZXNwLmNvZGUgJiYgcmVzcC5tZXNzYWdlKSB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb2RlOiBXb3JkUHJlc3NDbGllbnRSZXR1cm5Db2RlLkVycm9yLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgY29kZTogcmVzcC5jb2RlLFxyXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3AubWVzc2FnZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmVzcC5pZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29kZTogV29yZFByZXNzQ2xpZW50UmV0dXJuQ29kZS5PSyxcclxuICAgICAgICAgICAgZGF0YTogcmVzcFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29kZTogV29yZFByZXNzQ2xpZW50UmV0dXJuQ29kZS5FcnJvcixcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgIGNvZGU6IDUwMCxcclxuICAgICAgICAgICAgICBtZXNzYWdlOiAnQ2Fubm90IHBhcnNlIFdvcmRQcmVzcyBSRVNUIEFQSSByZXNwb25zZS4nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldENhdGVnb3JpZXMod3A6IHsgdXNlck5hbWU6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9KTogUHJvbWlzZTxUZXJtW10+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBHZXQoXHJcbiAgICAgICd3cC1qc29uL3dwL3YyL2NhdGVnb3JpZXMnLFxyXG4gICAgICB7XHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5jb250ZXh0LmdldEhlYWRlcnMod3ApXHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSBhcyBUZXJtW10gPz8gW10pO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGh0dHBHZXQoXHJcbiAgICBwYXRoOiBzdHJpbmcsXHJcbiAgICBvcHRpb25zPzoge1xyXG4gICAgICBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+XHJcbiAgICB9XHJcbiAgKTogUHJvbWlzZTx1bmtub3duPiB7XHJcbiAgICBjb25zdCBvcHRzID0ge1xyXG4gICAgICBoZWFkZXJzOiB7fSxcclxuICAgICAgLi4ub3B0aW9uc1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coJ1JFU1QgR0VUJywgYCR7dGhpcy5vcHRpb25zLnVybC50b1N0cmluZygpfSR7cGF0aH1gLCBvcHRzKTtcclxuICAgIHJldHVybiByZXF1ZXN0VXJsKHtcclxuICAgICAgdXJsOiBgJHt0aGlzLm9wdGlvbnMudXJsLnRvU3RyaW5nKCl9JHtwYXRofWAsXHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICdVc2VyLUFnZW50JzogJ29ic2lkaWFuLm1kJyxcclxuICAgICAgICAuLi5vcHRzLmhlYWRlcnNcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdHRVQgcmVzcG9uc2UnLCByZXNwb25zZSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb247XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGh0dHBQb3N0KFxyXG4gICAgcGF0aDogc3RyaW5nLFxyXG4gICAgYm9keTogdW5rbm93bixcclxuICAgIG9wdGlvbnM/OiB7XHJcbiAgICAgIGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cclxuICAgIH0pOiBQcm9taXNlPHVua25vd24+IHtcclxuICAgIGNvbnN0IG9wdHMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IHt9LFxyXG4gICAgICAuLi5vcHRpb25zXHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZygnUkVTVCBQT1NUJywgYCR7dGhpcy5vcHRpb25zLnVybC50b1N0cmluZygpfSR7cGF0aH1gLCBvcHRzKTtcclxuICAgIHJldHVybiByZXF1ZXN0VXJsKHtcclxuICAgICAgdXJsOiBgJHt0aGlzLm9wdGlvbnMudXJsLnRvU3RyaW5nKCl9JHtwYXRofWAsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAnVXNlci1BZ2VudCc6ICdvYnNpZGlhbi5tZCcsXHJcbiAgICAgICAgLi4ub3B0cy5oZWFkZXJzXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1BPU1QgcmVzcG9uc2UnLCByZXNwb25zZSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb247XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmludGVyZmFjZSBXcFJlc3RDbGllbnRDb250ZXh0IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIGdldEhlYWRlcnMod3A6IHsgdXNlck5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyB9KTogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdwUmVzdENsaWVudE1pbmlPcmFuZ2VDb250ZXh0IGltcGxlbWVudHMgV3BSZXN0Q2xpZW50Q29udGV4dCB7XHJcbiAgbmFtZTogJ1dwUmVzdENsaWVudE1pbmlPcmFuZ2VDb250ZXh0JztcclxuXHJcbiAgZ2V0SGVhZGVycyh3cDogeyB1c2VyTmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nIH0pOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICdBdXRob3JpemF0aW9uJzogYEJhc2ljICR7QnVmZmVyLmZyb20oYCR7d3AudXNlck5hbWV9OiR7d3AucGFzc3dvcmR9YCkudG9TdHJpbmcoJ2Jhc2U2NCcpfWBcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwgImltcG9ydCAqIGFzIGVuIGZyb20gJy4vZW4uanNvbic7XHJcbmltcG9ydCAqIGFzIHpoX2NuIGZyb20gJy4vemgtY24uanNvbic7XHJcblxyXG5leHBvcnQgY29uc3QgTEFOR1VBR0VTID0ge1xyXG4gIGVuLFxyXG4gIHpoX2NuXHJcbn07XHJcbiIsICJpbXBvcnQgeyBMQU5HVUFHRVMgfSBmcm9tICcuL2kxOG4vbGFuZ3MnO1xyXG5pbXBvcnQgeyBtb21lbnQgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuXHJcbmV4cG9ydCB0eXBlIExhbmd1YWdlID0ga2V5b2YgdHlwZW9mIExBTkdVQUdFUztcclxuZXhwb3J0IHR5cGUgTGFuZ3VhZ2VXaXRoQXV0byA9IExhbmd1YWdlIHwgJ2F1dG8nO1xyXG5leHBvcnQgdHlwZSBUcmFuc2xhdGVLZXkgPSBrZXlvZiB0eXBlb2YgTEFOR1VBR0VTWydlbiddO1xyXG5cclxuZXhwb3J0IGNsYXNzIEkxOG4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbGFuZzogTGFuZ3VhZ2VXaXRoQXV0byA9ICdhdXRvJ1xyXG4gICkge1xyXG4gICAgdGhpcy5sYW5nID0gbGFuZztcclxuICB9XHJcblxyXG4gIHQoa2V5OiBUcmFuc2xhdGVLZXksIHZhcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHN0cmluZyA9IHRoaXMuI2dldChrZXkpO1xyXG4gICAgaWYgKHZhcnMpIHtcclxuICAgICAgY29uc3QgY29tcGlsZWQgPSB0ZW1wbGF0ZShzdHJpbmcpO1xyXG4gICAgICByZXR1cm4gY29tcGlsZWQodmFycyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gc3RyaW5nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgI2dldChrZXk6IFRyYW5zbGF0ZUtleSk6IHN0cmluZyB7XHJcbiAgICBsZXQgbGFuZzogTGFuZ3VhZ2U7XHJcbiAgICBpZiAodGhpcy5sYW5nID09PSAnYXV0bycgJiYgbW9tZW50LmxvY2FsZSgpLnJlcGxhY2UoJy0nLCAnXycpIGluIExBTkdVQUdFUykge1xyXG4gICAgICBsYW5nID0gbW9tZW50LmxvY2FsZSgpLnJlcGxhY2UoJy0nLCAnXycpIGFzIExhbmd1YWdlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGFuZyA9ICdlbic7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTEFOR1VBR0VTW2xhbmddW2tleV0gfHwgTEFOR1VBR0VTWydlbiddW2tleV0gfHwga2V5O1xyXG4gIH1cclxuXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUEsS0FBQyxTQUFTLElBQUUsSUFBRTtBQUFDLE1BQVUsT0FBTyxZQUFqQixZQUEwQixBQUFVLE9BQU8sV0FBakIsV0FBd0IsUUFBTyxVQUFRLEdBQUUsSUFBRSxBQUFZLE9BQU8sVUFBbkIsY0FBMkIsT0FBTyxNQUFJLE9BQU8sQ0FBQyxHQUFFLEVBQUMsSUFBRSxBQUFVLE9BQU8sWUFBakIsV0FBeUIsU0FBUSxjQUFZLEdBQUUsSUFBRSxHQUFFLGNBQVksR0FBRTtBQUFBLElBQUMsRUFBRSxVQUFNLFdBQVU7QUFBQyxhQUFPLFNBQVMsSUFBRTtBQUFDLFlBQUksS0FBRSxDQUFDO0FBQUUsbUJBQVcsR0FBRTtBQUFDLGNBQUcsR0FBRTtBQUFHLG1CQUFPLEdBQUUsR0FBRztBQUFRLGNBQUksS0FBRSxHQUFFLEtBQUcsRUFBQyxHQUFFLEdBQUUsR0FBRSxPQUFHLFNBQVEsQ0FBQyxFQUFDO0FBQUUsaUJBQU8sR0FBRSxHQUFHLEtBQUssR0FBRSxTQUFRLElBQUUsR0FBRSxTQUFRLENBQUMsR0FBRSxHQUFFLElBQUUsTUFBRyxHQUFFO0FBQUEsUUFBTztBQUFDLGVBQU8sRUFBRSxJQUFFLElBQUUsRUFBRSxJQUFFLElBQUUsRUFBRSxJQUFFLFNBQVMsSUFBRSxJQUFFLEdBQUU7QUFBQyxZQUFFLEVBQUUsSUFBRSxFQUFDLEtBQUcsT0FBTyxlQUFlLElBQUUsSUFBRSxFQUFDLFlBQVcsTUFBRyxLQUFJLEVBQUMsQ0FBQztBQUFBLFFBQUMsR0FBRSxFQUFFLElBQUUsU0FBUyxJQUFFO0FBQUMsVUFBYSxPQUFPLFVBQXBCLGVBQTRCLE9BQU8sZUFBYSxPQUFPLGVBQWUsSUFBRSxPQUFPLGFBQVksRUFBQyxPQUFNLFNBQVEsQ0FBQyxHQUFFLE9BQU8sZUFBZSxJQUFFLGNBQWEsRUFBQyxPQUFNLEtBQUUsQ0FBQztBQUFBLFFBQUMsR0FBRSxFQUFFLElBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFHLElBQUUsTUFBSSxNQUFFLEVBQUUsRUFBQyxJQUFHLElBQUU7QUFBRSxtQkFBTztBQUFFLGNBQUcsSUFBRSxNQUFHLEFBQVUsT0FBTyxNQUFqQixZQUFvQixNQUFHLEdBQUU7QUFBVyxtQkFBTztBQUFFLGNBQUksSUFBRSx1QkFBTyxPQUFPLElBQUk7QUFBRSxjQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUUsT0FBTyxlQUFlLEdBQUUsV0FBVSxFQUFDLFlBQVcsTUFBRyxPQUFNLEdBQUMsQ0FBQyxHQUFFLElBQUUsTUFBRyxBQUFVLE9BQU8sTUFBakI7QUFBbUIscUJBQVEsTUFBSztBQUFFLGdCQUFFLEVBQUUsR0FBRSxJQUFFLFNBQVMsSUFBRTtBQUFDLHVCQUFPLEdBQUU7QUFBQSxjQUFFLEVBQUUsS0FBSyxNQUFLLEVBQUMsQ0FBQztBQUFFLGlCQUFPO0FBQUEsUUFBQyxHQUFFLEVBQUUsSUFBRSxTQUFTLElBQUU7QUFBQyxjQUFJLEtBQUUsTUFBRyxHQUFFLGFBQVcsV0FBVTtBQUFDLG1CQUFPLEdBQUU7QUFBQSxVQUFPLElBQUUsV0FBVTtBQUFDLG1CQUFPO0FBQUEsVUFBQztBQUFFLGlCQUFPLEVBQUUsRUFBRSxJQUFFLEtBQUksRUFBQyxHQUFFO0FBQUEsUUFBQyxHQUFFLEVBQUUsSUFBRSxTQUFTLElBQUUsSUFBRTtBQUFDLGlCQUFPLE9BQU8sVUFBVSxlQUFlLEtBQUssSUFBRSxFQUFDO0FBQUEsUUFBQyxHQUFFLEVBQUUsSUFBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLEdBQUc7QUFBQSxNQUFDLEVBQUUsQ0FBQyxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxtQkFBVyxJQUFFO0FBQUMsbUJBQVEsTUFBSztBQUFFLGVBQUUsZUFBZSxFQUFDLEtBQUksSUFBRSxNQUFHLEdBQUU7QUFBQSxRQUFHO0FBQUMsZUFBTyxlQUFlLElBQUUsY0FBYSxFQUFDLE9BQU0sS0FBRSxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsUUFBTSxLQUFLLFlBQVUsU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFF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RztBQUFFLFdBQUUsV0FBUyxFQUFFO0FBQUEsTUFBUSxHQUFFLFNBQVMsSUFBRSxJQUFFLEdBQUU7QUFBQyxZQUFJLElBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEVBQUUsRUFBRSxHQUFFLElBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxHQUFHLEdBQUUsSUFBRSxFQUFFLEdBQUc7QUFBRSxXQUFFLFVBQVEsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsSUFBRSxJQUFFLEdBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxLQUFFLEdBQUUsUUFBTyxLQUFFLEdBQUU7QUFBSyxjQUFHLEtBQUUsS0FBRSxJQUFFLEtBQUUsRUFBRSxPQUFJLEdBQUUsSUFBRSxDQUFDLENBQUMsSUFBRyxHQUFFLE9BQUksQ0FBQyxHQUFHO0FBQVUsaUJBQUksTUFBSyxJQUFFO0FBQUMsa0JBQUcsSUFBRSxHQUFFLEtBQUcsS0FBRSxHQUFFLGNBQWEsS0FBRSxHQUFFLElBQUUsRUFBQyxNQUFJLEVBQUUsUUFBTSxHQUFFLEtBQUcsQ0FBQyxFQUFFLEtBQUUsS0FBRSxLQUFHLE1BQUUsTUFBSSxPQUFLLElBQUUsR0FBRSxNQUFNLEtBQUcsQUFBUyxPQUFULFFBQVc7QUFBQyxvQkFBRyxPQUFPLEtBQUcsT0FBTztBQUFFO0FBQVMsbUJBQUUsR0FBRSxFQUFDO0FBQUEsY0FBQztBQUFDLGNBQUMsSUFBRSxRQUFNLE1BQUcsR0FBRSxTQUFPLEVBQUUsR0FBRSxRQUFPLElBQUUsR0FBRSxHQUFFLElBQUUsSUFBRSxHQUFFLEVBQUM7QUFBQSxZQUFDO0FBQUEsUUFBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFF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SUFBRSxFQUFFLEVBQUUsR0FBRSxJQUFFLEVBQUUsRUFBRSxHQUFFLElBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLElBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEVBQUUsR0FBRSxJQUFFLEVBQUUsQ0FBQyxHQUFFLEtBQUUsRUFBRSxHQUFHLEdBQUUsS0FBRSxFQUFFLEdBQUcsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFRLEtBQUUsR0FBRSxRQUFRLEdBQUUsS0FBRSxFQUFFLGFBQWEsR0FBRSxJQUFFLEdBQUUsS0FBSSxLQUFFLEdBQUUsVUFBVSxRQUFRLEdBQUUsS0FBRSxPQUFPLFdBQVUsS0FBRSxHQUFFLFFBQU8sSUFBRSxFQUFFLFFBQU8sV0FBVyxHQUFFLEtBQUUsR0FBRSxHQUFFLElBQUUsR0FBRSxHQUFFLEtBQUUsR0FBRSxHQUFFLElBQUUsRUFBRSxHQUFFLEtBQUUsR0FBRSxTQUFTLEdBQUUsSUFBRSxHQUFFLFlBQVksR0FBRSxLQUFFLEdBQUUsMkJBQTJCLEdBQUUsSUFBRSxHQUFFLDJCQUEyQixHQUFFLEtBQUcsR0FBRSxLQUFLLEdBQUUsS0FBRyxHQUFFLFNBQVEsS0FBRyxDQUFDLE1BQUksQ0FBQyxHQUFHLGFBQVcsQ0FBQyxHQUFHLFVBQVUsV0FBVSxLQUFHLE1BQUcsR0FBRyxXQUFVO0FBQUMsaUJBQU8sQUFBRyxFQUFFLEVBQUUsQ0FBQyxHQUFFLEtBQUksRUFBQyxLQUFJLFdBQVU7QUFBQyxtQkFBTyxFQUFFLE1BQUssS0FBSSxFQUFDLE9BQU0sRUFBQyxDQUFDLEVBQUU7QUFBQSxVQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBakU7QUFBQSxRQUFrRSxDQUFFLElBQUUsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLElBQUUsRUFBQztBQUFFLGdCQUFHLE9BQU8sR0FBRSxLQUFHLEVBQUUsSUFBRSxJQUFFLEVBQUMsR0FBRSxNQUFHLE9BQUksTUFBRyxFQUFFLElBQUUsSUFBRSxFQUFDO0FBQUEsUUFBQyxJQUFFLEdBQUUsS0FBRyxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLE1BQUcsRUFBRSxHQUFFLFNBQVM7QUFBRSxpQkFBTyxFQUFFLElBQUUsRUFBQyxNQUFLLFVBQVMsS0FBSSxJQUFFLGFBQVksR0FBQyxDQUFDLEdBQUUsTUFBSSxJQUFFLGNBQVksS0FBRztBQUFBLFFBQUMsR0FBRSxLQUFHLElBQUUsU0FBUyxJQUFFO0FBQUMsaUJBQU0sQUFBVSxPQUFPLE1BQWpCO0FBQUEsUUFBa0IsSUFBRSxTQUFTLElBQUU7QUFBQyxpQkFBTyxPQUFPLEVBQUMsYUFBWTtBQUFBLFFBQUMsR0FBRSxLQUFHLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBSSxNQUFHLEdBQUcsR0FBRSxJQUFFLEVBQUMsR0FBRSxHQUFFLEVBQUM7QUFBRSxjQUFJLEtBQUUsRUFBRSxJQUFFLElBQUU7QUFBRSxpQkFBTyxHQUFFLEVBQUMsR0FBRSxHQUFFLElBQUUsRUFBQyxJQUFHLElBQUUsYUFBWSxJQUFFLElBQUUsRUFBQyxLQUFHLEdBQUUsSUFBRyxPQUFLLElBQUUsSUFBRyxNQUFHLFFBQUksS0FBRSxFQUFFLElBQUUsRUFBQyxZQUFXLEVBQUUsR0FBRSxLQUFFLEVBQUMsQ0FBQyxLQUFJLElBQUUsSUFBRSxFQUFDLEtBQUcsRUFBRSxJQUFFLElBQUUsRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUUsR0FBRSxJQUFHLE1BQUcsT0FBSSxHQUFHLElBQUUsSUFBRSxFQUFDLEtBQUcsRUFBRSxJQUFFLElBQUUsRUFBQztBQUFBLFFBQUMsR0FBRSxLQUFHLFNBQVMsSUFBRSxJQUFFO0FBQUMsYUFBRSxFQUFDO0FBQUUsY0FBSSxLQUFFLEdBQUUsRUFBQyxHQUFFLEtBQUUsR0FBRSxFQUFDLEVBQUUsT0FBTyxHQUFHLEVBQUMsQ0FBQztBQUFFLGlCQUFPLEVBQUUsSUFBRyxTQUFTLElBQUU7QUFBQyxrQkFBRyxDQUFDLEdBQUcsS0FBSyxJQUFFLEVBQUMsS0FBRyxHQUFHLElBQUUsSUFBRSxHQUFFLEdBQUU7QUFBQSxVQUFDLENBQUUsR0FBRTtBQUFBLFFBQUMsR0FBRSxLQUFHLFNBQVMsSUFBRTtBQUFDLGNBQUksS0FBRSxFQUFFLElBQUUsSUFBRSxHQUFFLEtBQUUsRUFBRSxLQUFLLE1BQUssRUFBQztBQUFFLGlCQUFNLENBQUUsVUFBTyxNQUFHLEdBQUUsSUFBRSxFQUFDLEtBQUcsQ0FBQyxHQUFFLEdBQUUsRUFBQyxNQUFLLEVBQUUsT0FBRyxDQUFDLEdBQUUsTUFBSyxFQUFDLEtBQUcsQ0FBQyxHQUFFLElBQUUsRUFBQyxLQUFHLEdBQUUsTUFBSyxFQUFDLEtBQUcsS0FBSyxJQUFHLFFBQUs7QUFBQSxRQUFFLEdBQUUsS0FBRyxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLEVBQUMsR0FBRSxLQUFFLEVBQUUsSUFBRSxJQUFFO0FBQUUsY0FBRyxPQUFJLE1BQUcsQ0FBQyxHQUFFLElBQUUsRUFBQyxLQUFHLEdBQUUsR0FBRSxFQUFDLEdBQUU7QUFBQyxnQkFBSSxLQUFFLEdBQUUsSUFBRSxFQUFDO0FBQUUsbUJBQU0sQ0FBQyxNQUFHLENBQUMsR0FBRSxJQUFFLEVBQUMsS0FBRyxHQUFFLElBQUUsRUFBQyxLQUFHLEdBQUUsSUFBRyxPQUFLLElBQUUsYUFBVyxPQUFJO0FBQUEsVUFBQztBQUFBLFFBQUMsR0FBRSxLQUFHLFNBQVMsSUFBRTtBQUFDLGNBQUksS0FBRSxHQUFFLEdBQUUsRUFBQyxDQUFDLEdBQUUsS0FBRSxDQUFDO0FBQUUsaUJBQU8sRUFBRSxJQUFHLFNBQVMsSUFBRTtBQUFDLGVBQUUsSUFBRSxFQUFDLEtBQUcsR0FBRSxHQUFFLEVBQUMsS0FBRyxHQUFFLEtBQUssRUFBQztBQUFBLFVBQUMsQ0FBRSxHQUFFO0FBQUEsUUFBQyxHQUFFLEtBQUcsU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLE9BQUksSUFBRSxLQUFFLEdBQUUsS0FBRSxJQUFFLEdBQUUsRUFB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V0FBVyxFQUFDLEtBQUcsU0FBTyxLQUFFLFNBQU8sS0FBRSxNQUFJLEtBQUksTUFBRSxHQUFFLFdBQVcsS0FBRSxDQUFDLEtBQUcsU0FBTyxLQUFFLFFBQU0sS0FBRSxHQUFFLE9BQU8sRUFBQyxJQUFFLEtBQUUsS0FBRSxHQUFFLE1BQU0sSUFBRSxLQUFFLENBQUMsSUFBRSxLQUFFLFFBQU8sTUFBRSxTQUFPLE1BQUk7QUFBQSxVQUFLO0FBQUEsUUFBQztBQUFFLFdBQUUsVUFBUSxFQUFDLFFBQU8sRUFBRSxLQUFFLEdBQUUsUUFBTyxFQUFFLElBQUUsRUFBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsQ0FBQyxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEVBQUU7QUFBRSxVQUFFLEVBQUMsUUFBTyxVQUFTLE1BQUssTUFBRyxRQUFPLEVBQUUsQ0FBQyxFQUFHLFdBQVU7QUFBQyxZQUFFLENBQUM7QUFBQSxRQUFDLENBQUUsRUFBQyxHQUFFLEVBQUMsTUFBSyxTQUFTLElBQUU7QUFBQyxpQkFBTyxFQUFFLEdBQUUsRUFBQyxDQUFDO0FBQUEsUUFBQyxFQUFDLENBQUM7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxJQUFFLEVBQUUsQ0FBQyxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEdBQUcsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxHQUFHLEdBQUUsS0FBRSxFQUFFLEdBQUcsR0FBRSxJQUFFLEVBQUUsR0FBRyxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLENBQUMsR0FBRSxJQUFFLEVBQUUsR0FBRyxHQUFFLElBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEdBQUc7QUFBRSxXQUFFLFVBQVEsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxBQUFLLEdBQUUsUUFBUSxLQUFLLE1BQXBCLElBQXNCLEtB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RSxFQUFFLElBQUUsRUFBQztBQUFFLG1CQUFPLEtBQUUsR0FBRSxRQUFNLEtBQUcsSUFBRSxPQUFLLEtBQUUsRUFBQyxPQUFNLEtBQUUsRUFBRSxJQUFFLElBQUUsR0FBRSxLQUFJLElBQUUsT0FBTSxJQUFFLFVBQVMsS0FBRSxHQUFFLE1BQUssTUFBSyxRQUFPLFNBQVEsTUFBRSxHQUFFLEdBQUUsU0FBUSxJQUFFLFFBQU0sS0FBRyxNQUFJLElBQUUsT0FBSyxLQUFHLEtBQUUsR0FBRSxTQUFPLEdBQUUsUUFBTyxBQUFNLE9BQU4sT0FBVSxJQUFFLE1BQU0sTUFBRyxNQUFJO0FBQUEsVUFBQyxHQUFFLElBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBSSxJQUFFLEtBQUUsR0FBRSxFQUFDLEdBQUUsS0FBRSxFQUFFLEVBQUM7QUFBRSxnQkFBRyxBQUFNLE9BQU47QUFBUSxxQkFBTyxHQUFFLE1BQU07QUFBRyxpQkFBSSxLQUFFLEdBQUUsT0FBTSxJQUFFLEtBQUUsR0FBRTtBQUFLLGtCQUFHLEdBQUUsT0FBSztBQUFFLHVCQUFPO0FBQUEsVUFBQztBQUFFLGlCQUFPLEVBQUUsR0FBRSxXQUFVLEVBQUMsT0FBTSxXQUFVO0FBQUMscUJBQVEsS0FBRSxHQUFFLElBQUksR0FBRSxLQUFFLEdBQUUsT0FBTSxLQUFFLEdBQUUsT0FBTTtBQUFHLGlCQUFFLFVBQVEsTUFBRyxHQUFFLFlBQVcsSUFBRSxXQUFTLEdBQUUsU0FBUyxPQUFLLFNBQVEsT0FBTyxHQUFFLEdBQUUsUUFBTyxLQUFFLEdBQUU7QUFBSyxlQUFFLFFBQU0sR0FBRSxPQUFLLFFBQU8sS0FBRSxHQUFFLE9BQUssSUFBRSxLQUFLLE9BQUs7QUFBQSxVQUFDLEdBQUUsUUFBTyxTQUFTLElBQUU7QUFBQyxnQkFBSSxLQUFFLEdBQUUsSUFBSSxHQUFFLEtBQUUsRUFBRSxNQUFLLEVBQUM7QUFBRSxnQkFBRyxJQUFFO0FBQUMsa0JBQUksS0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFO0FBQVMscUJBQU8sR0FBRSxNQUFNLEdBQUUsUUFBTyxHQUFFLFVBQVEsTUFBRyxNQUFJLElBQUUsT0FBSyxLQUFHLE1BQUksSUFBRSxXQUFTLEtBQUcsR0FBRSxTQUFPLE1BQUksSUFBRSxRQUFNLEtBQUcsR0FBRSxRQUFNLE1BQUksSUFBRSxPQUFLLEtBQUcsS0FBRSxHQUFFLFNBQU8sS0FBSztBQUFBLFlBQU07QUFBQyxtQkFBTSxDQUFDLENBQUM7QUFBQSxVQUFDLEdBQUUsU0FBUSxTQUFTLElBQUU7QUFBQyxxQkFBUSxJQUFFLEtBQUUsR0FBRSxJQUFJLEdBQUUsS0FBRSxHQUFFLElBQUUsVUFBVSxTQUFPLElBQUUsVUFBVSxLQUFHLFFBQU8sQ0FBQyxHQUFFLEtBQUUsS0FBRSxHQUFFLE9BQUssR0FBRTtBQUFPLG1CQUFJLEdBQUUsR0FBRSxPQUFNLEdBQUUsS0FBSSxJQUFJLEdBQUUsTUFBRyxHQUFFO0FBQVMscUJBQUUsR0FBRTtBQUFBLFVBQVEsR0FBRSxLQUFJLFNBQVMsSUFBRTtBQUFDLG1CQUFNLENBQUMsQ0FBQyxFQUFFLE1BQUssRUFBQztBQUFBLFVBQUMsRUFBQyxDQUFDLEdBQUUsRUFBRSxHQUFFLFdBQVUsS0FBRSxFQUFDLEtBQUksU0FBUyxJQUFFO0FBQUMsZ0JBQUksS0FBRSxFQUFFLE1BQUssRUFBQztBQUFFLG1CQUFPLE1BQUcsR0FBRTtBQUFBLFVBQUssR0FBRSxLQUFJLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sR0FBRSxNQUFLLEFBQUksT0FBSixJQUFNLElBQUUsSUFBRSxFQUFDO0FBQUEsVUFBQyxFQUFDLElBQUUsRUFBQyxLQUFJLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEdBQUUsTUFBSyxLQUFFLEFBQUksT0FBSixJQUFNLElBQUUsSUFBRSxFQUFDO0FBQUEsVUFBQyxFQUFDLENBQUMsR0FBRSxNQUFHLEVBQUUsR0FBRSxXQUFVLFFBQU8sRUFBQyxLQUFJLFdBQVU7QUFBQyxtQkFBTyxHQUFFLElBQUksRUFBRTtBQUFBLFVBQUksRUFBQyxDQUFDLEdBQUU7QUFBQSxRQUFDLEdBQUUsV0FBVSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFLEtBQUUsYUFBWSxLQUFFLEdBQUUsRUFBQyxHQUFFLEtBQUUsR0FBRSxFQUFDO0FBQUUsWUFBRSxJQUFFLElBQUcsU0FBUyxJQUFFLElBQUU7QUFBQyxlQUFFLE1BQUssRUFBQyxNQUFLLElBQUUsUUFBTyxJQUFFLE9BQU0sR0FBRSxFQUFDLEdBQUUsTUFBSyxJQUFFLE1BQUssT0FBTSxDQUFDO0FBQUEsVUFBQyxHQUFJLFdBQVU7QUFBQyxxQkFBUSxLQUFFLEdBQUUsSUFBSSxHQUFFLEtBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxNQUFLLE1BQUcsR0FBRTtBQUFTLG1CQUFFLEdBQUU7QUFBUyxtQkFBTyxHQUFFLFVBQVMsSUFBRSxPQUFLLEtBQUUsS0FBRSxHQUFFLE9BQUssR0FBRSxNQUFNLFNBQU8sQUFBUSxNQUFSLFNBQVUsRUFBQyxPQUFNLEdBQUUsS0FBSSxNQUFLLE1BQUUsSUFBRSxBQUFVLE1BQVYsV0FBWSxFQUFDLE9BQU0sR0FBRSxPQUFNLE1BQUssTUFBRSxJQUFFLEVBQUMsT0FBTSxDQUFDLEdBQUUsS0FBSSxHQUFFLEtBQUssR0FBRSxNQUFLLE1BQUUsSUFBRyxJQUFFLFNBQU8sUUFBTyxFQUFDLE9BQU0sUUFBTyxNQUFLLEtBQUU7QUFBQSxVQUFFLEdBQUcsS0FBRSxZQUFVLFVBQVMsQ0FBQyxJQUFFLElBQUUsR0FBRSxHQUFFLEVBQUM7QUFBQSxRQUFDLEVBQUM7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxHQUFFLEtBQUUsRUFBRSxDQUFDLEdBQUUsSUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEdBQUcsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLElBQUUsRUFBRSxHQUFHLEdBQUUsS0FBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEdBQUcsVUFBUyxJQUFFLEtBQUssS0FBSSxJQUFFLEVBQUUsVUFBVTtBQUFFLFdBQUUsRUFBQyxRQUFPLFVBQVMsT0FBTSxN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LEtBQUUsR0FBRSxLQUFFLElBQUUsRUFBRSxJQUFFO0FBQUMsa0JBQUksS0FBRSxTQUFTLEdBQUUsT0FBTyxJQUFFLElBQUUsQ0FBQyxHQUFFLEVBQUU7QUFBRSxrQkFBRyxNQUFNLEVBQUM7QUFBRSx1QkFBTztBQUFFLGlCQUFFLEtBQUUsTUFBRztBQUFBLFlBQUM7QUFBQyxtQkFBTztBQUFBLFVBQUM7QUFBQyxzQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQU8sR0FBRSxHQUFFLElBQUUsR0FBRSxTQUFPLEVBQUMsR0FBRSxJQUFFLElBQUUsRUFBQztBQUFBLFVBQUM7QUFBQyxzQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQU8sR0FBRSxTQUFTLElBQUU7QUFBQyx1QkFBUSxLQUFFLENBQUMsR0FBRSxLQUFFLEdBQUUsS0FBRSxHQUFFLFFBQU8sRUFBRTtBQUFFLG1CQUFFLEtBQUssTUFBSSxHQUFFLFdBQVcsRUFBQyxDQUFDO0FBQUUscUJBQU87QUFBQSxZQUFDLEVBQUUsRUFBQyxHQUFFLElBQUUsSUFBRSxFQUFDO0FBQUEsVUFBQztBQUFDLHNCQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxHQUFFLElBQUUsSUFBRSxJQUFFLEVBQUM7QUFBQSxVQUFDO0FBQUMsc0JBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEdBQUUsRUFBRSxFQUFDLEdBQUUsSUFBRSxJQUFFLEVBQUM7QUFBQSxVQUFDO0FBQUMsc0JBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEdBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyx1QkFBUSxJQUFFLElBQUUsSUFBRSxLQUFFLENBQUMsR0FBRSxLQUFFLEdBQUUsS0FBRSxHQUFFLFVBQVEsQ0FBRyxRQUFHLEtBQUcsSUFBRyxFQUFFO0FBQUUscUJBQUUsR0FBRSxXQUFXLEVBQUMsR0FBRSxLQUFFLE1BQUcsR0FBRSxLQUFFLEtBQUUsS0FBSSxHQUFFLEtBQUssRUFBQyxHQUFFLEdBQUUsS0FBSyxFQUFDO0FBQUUscUJBQU87QUFBQSxZQUFDLEVBQUUsSUFBRSxHQUFFLFNBQU8sRUFBQyxHQUFFLElBQUUsSUFBRSxFQUFDO0FBQUEsVUFBQztBQUFDLHNCQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQU8sQUFBSSxPQUFKLEtBQU8sT0FBSSxHQUFFLFNBQU8sRUFBRSxjQUFjLEVBQUMsSUFBRSxFQUFFLGNBQWMsR0FBRSxNQUFNLElBQUUsRUFBQyxDQUFDO0FBQUEsVUFBQztBQUFDLHFCQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsaUJBQUUsS0FBSyxJQUFJLEdBQUUsUUFBTyxFQUFDO0FBQUUscUJBQVEsS0FBRSxDQUFDLEdBQUUsS0FBRSxJQUFFLEtBQUUsTUFBRztBQUFDLGtCQUFJLElBQUUsSUFBRSxJQUFFLElBQUUsS0FBRSxHQUFFLEtBQUcsS0FBRSxNQUFLLEtBQUUsS0FBRSxNQUFJLElBQUUsS0FBRSxNQUFJLElBQUUsS0FBRSxNQUFJLElBQUU7QUFBRSxrQkFBRyxLQUFFLE1BQUc7QUFBRSx3QkFBTztBQUFBLHVCQUFRO0FBQUUseUJBQUUsT0FBTSxNQUFFO0FBQUc7QUFBQSx1QkFBVztBQUFFLG9CQUFNLE9BQUssTUFBRSxHQUFFLEtBQUUsUUFBakIsT0FBd0IsTUFBRyxNQUFHLE9BQUksSUFBRSxLQUFHLE1BQUcsT0FBTSxNQUFFO0FBQUc7QUFBQSx1QkFBVztBQUFFLHlCQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLElBQUcsQUFBTSxPQUFJLE9BQVYsT0FBYyxBQUFNLE9BQUksT0FBVixPQUFlLE1BQUcsTUFBRyxPQUFJLEtBQUksTUFBRyxPQUFJLElBQUUsS0FBRyxNQUFHLFFBQU8sTUFBRSxTQUFPLEtBQUUsVUFBUyxNQUFFO0FBQUc7QUFBQSx1QkFBVztBQUFFLHlCQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsSUFBRyxBQUFNLE9BQUksT0FBVixPQUFjLEFBQU0sT0FBSSxPQUFWLE9BQWMsQUFBTSxPQUFJLE9BQVYsT0FBZSxNQUFHLE1BQUcsT0FBSSxLQUFJLE1BQUcsT0FBSSxLQUFJLE1BQUcsT0FBSSxJQUFFLEtBQUcsTUFBRyxTQUFPLEtBQUUsV0FBVSxNQUFFO0FBQUE7QUFBRyxjQUFPLE9BQVAsT0FBVSxNQUFFLE9BQU0sS0FBRSxLQUFHLEtBQUUsU0FBUSxPQUFHLE9BQU0sR0FBRSxLQUFLLE9BQUksS0FBRyxPQUFLLEtBQUssR0FBRSxLQUFFLFFBQU0sT0FBSyxLQUFHLEdBQUUsS0FBSyxFQUFDLEdBQUUsTUFBRztBQUFBLFlBQUM7QUFBQyxtQkFBTyxTQUFTLElBQUU7QUFBQyxrQkFBSSxLQUFFLEdBQUU7QUFBTyxrQkFBRyxNQUFHO0FBQUssdUJBQU8sT0FBTyxhQUFhLE1BQU0sUUFBTyxFQUFDO0FBQUUsa0JBQUksS0FBRSxJQUFHLEtBQUU7QUFBRSxxQkFBSyxLQUFFO0FBQUcsc0JBQUcsT0FBTyxhQUFhLE1BQU0sUUFBTyxHQUFFLE1BQU0sSUFBRSxNQUFHLElBQUksQ0FBQztBQUFFLHFCQUFPO0FBQUEsWUFBQyxFQUFFLEVBQUM7QUFBQSxVQUFDO0FBQUMsYUFBRSxTQUFPLElBQUUsR0FBRSxhQUFXLFNBQVMsSUFBRTtBQUFDLGFBQUMsTUFBRyxNQUFJLE1BQUU7QUFBRyxtQkFBTyxHQUFFLE1BQU0sQ0FBQyxFQUFDO0FBQUEsVUFBQyxHQUFFLEdBQUUsb0JBQWtCLElBQUcsR0FBRSxzQkFBb0IsQUFBUyxHQUFFLHdCQUFYLFNBQStCLEdBQUUsc0JBQW9CLFdBQVU7QUFBQyxnQkFBRztBQUFDLGtCQUFJLEtBQUUsSUFBSSxXQUFXLENBQUM7QUFBRSxxQkFBTyxHQUFFLFlBQVUsRUFBQyxXQUFVLFdBQVcsV0FBVSxLQUFJLFdBQVU7QUFBQyx1QkFBTztBQUFBLGNBQUUsRUFBQyxHQUFFLEFBQUssR0FBRSxJQUFJLE1BQVgsTUFBYyxBQUFZLE9BQU8sR0FBRSxZQUFyQixjQUErQixBQUFJLEdBQUUsU0FBUyxHQUFFLENBQUMsRUFBRSxlQUFwQjtBQUFBLFlBQThCLFNBQU8sSUFBTjtBQUFTLHFCQUFNO0FBQUEsWUFBRTtBQUFBLFVBQUMsRUFBRSxHQUFFLEdBQUUsYUFBVyxHQUFFLEdBQUUsR0FBRSxXQUFTLE1BQUssR0FBRSxXQUFTLFNBQVMsSUFBRTtBQUFDLG1CQUFPLEdBQUUsWUFBVSxHQUFFLFdBQVU7QUFBQSxVQUFDLEdBQUUsR0FBRSxPQUFLLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxFQUFFLE1BQUssSUFBRSxJQUFFLEVBQUM7QUFBQSxVQUFDLEdBQUUsR0FBRSx1QkFBc0IsSUFBRSxVQUFVLFlBQVUsV0FBVyxXQUFVLEdBQUUsWUFBVSxZQUFXLEFBQWEsT0FBTyxVQUFwQixlQUE0QixPQUFPLFdBQVMsR0FBRSxPQUFPLGFBQVcsTUFBRyxPQUFPLGVBQWUsSUFBRSxPQUFPLFNBQVEsRUFBQyxPQUFNLE1BQUssY0FBYSxLQUFFLENBQUMsSUFBRyxHQUFFLFFBQU0sU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLHFCQUFPLEdBQUUsRUFBQyxHQUFFLE1BQUcsSUFBRSxHQUFFLElBQUUsRUFBQyxJQUFFLEFBQVMsT0FBVCxTQUFXLEFBQVUsT0FBTyxNQUFqQixXQUFtQixHQUFFLElBQUUsRUFBQyxFQUFFLEtBQUssSUFBRSxFQUFDLElBQUUsR0FBRSxJQUFFLEVBQUMsRUFBRSxLQUFLLEVBQUMsSUFBRSxHQUFFLElBQUUsRUFBQztBQUFBLFlBQUMsRUFBRSxNQUFLLElBQUUsSUFBRSxFQUFDO0FBQUEsVUFBQyxHQUFFLEdBQUUsY0FBWSxTQUFTLElBQUU7QUFBQyxtQkFBTyxHQUFFLE1BQUssRUFBQztBQUFBLFVBQUMsR0FBRSxHQUFFLGtCQUFnQixTQUFTLElBQUU7QUFBQyxtQkFBTyxHQUFFLE1BQUssRUFBQztBQUFBLFVBQUMsR0FBRSxHQUFFLFdBQVMsU0FBUyxJQUFFO0FBQUMsbUJBQU0sQ0FBRSxDQUFNLE1BQU4sUUFBUyxDQUFDLEdBQUU7QUFBQSxVQUFVLEdBQUUsR0FBRSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsZ0JBQUcsQ0FBQyxHQUFFLFNBQVMsRUFBQyxLQUFHLENBQUMsR0FBRSxTQUFTLEVBQUM7QUFBRSxvQkFBTSxJQUFJLFVBQVUsMkJBQTJCO0FBQUUsZ0JBQUcsT0FBSTtBQUFFLHFCQUFPO0FBQUUscUJBQVEsS0FBRSxHQUFFLFFBQU8sS0FBRSxHQUFFLFFBQU8sS0FBRSxHQUFFLEtBQUUsS0FBSyxJQUFJLElBQUUsRUFBQyxHQUFFLEtBQUUsSUFBRSxFQUFFO0FBQUUsa0JBQUcsR0FBRSxRQUFLLEdBQUUsS0FBRztBQUFDLHFCQUFFLEdBQUUsS0FBRyxLQUFFLEdBQUU7QUFBRztBQUFBLGNBQUs7QUFBQyxtQkFBTyxLQUFFLEtBQUUsS0FBRyxLQUFFLEtBQUUsSUFBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLGFBQVcsU0FBUyxJQUFFO0FBQUMsb0JBQU8sT0FBTyxFQUFDLEVBQUUsWUFBWTtBQUFBLG1CQUFPO0FBQUEsbUJBQVU7QUFBQSxtQkFBVztBQUFBLG1CQUFZO0FBQUEsbUJBQVk7QUFBQSxtQkFBYTtBQUFBLG1CQUFhO0FBQUEsbUJBQWE7QUFBQSxtQkFBVztBQUFBLG1CQUFZO0FBQUEsbUJBQWM7QUFBVyx1QkFBTTtBQUFBO0FBQVcsdUJBQU07QUFBQTtBQUFBLFVBQUcsR0FBRSxHQUFFLFNBQU8sU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBRyxDQUFDLEVBQUUsRUFBQztBQUFFLG9CQUFNLElBQUksVUFBVSw2Q0FBNkM7QUFBRSxnQkFBRyxBQUFJLEdBQUUsV0FBTjtBQUFhLHFCQUFPLEdBQUUsTUFBTSxDQUFDO0FBQUUsZ0JBQUk7QUFBRSxnQkFBRyxBQUFTLE9BQVQ7QUFBVyxtQkFBSSxLQUFFLEdBQUUsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEVBQUU7QUFBRSxzQkFBRyxHQUFFLElBQUc7QUFBTyxnQkFBSSxLQUFFLEdBQUUsWUFBWSxFQUFDLEdBQUUsS0FBRTtBQUFFLGlCQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxFQUFFLElBQUU7QUFBQyxrQkFBSSxLQUFFLEdBQUU7QUFBRyxrQkFBRyxDQUFDLEdBQUUsU0FBUyxFQUFDO0FBQUUsc0JBQU0sSUFBSSxVQUFVLDZDQUE2QztBQUFFLGlCQUFFLEtBQUssSUFBRSxFQUFDLEdBQUUsTUFBRyxHQUFFO0FBQUEsWUFBTTtBQUFDLG1CQUFPO0FBQUEsVUFBQyxHQUFFLEdBQUUsYUFBVyxJQUFFLEdBQUUsVUFBVSxZQUFVLE1BQUcsR0FBRSxVQUFVLFNBQU8sV0FBVTtBQUFDLGdCQUFJLEtBQUUsS0FBSztBQUFPLGdCQUFHLEtBQUUsS0FBRztBQUFFLG9CQUFNLElBQUksV0FBVywyQ0FBMkM7QUFBRSxxQkFBUSxLQUFFLEdBQUUsS0FBRSxJQUFFLE1BQUc7QUFBRSxpQkFBRSxNQUFLLElBQUUsS0FBRSxDQUFDO0FBQUUsbUJBQU87QUFBQSxVQUFJLEdBQUUsR0FBRSxVQUFVLFNBQU8sV0FBVTtBQUFDLGdCQUFJLEtBQUUsS0FBSztBQUFPLGdCQUFHLEtBQUUsS0FBRztBQUFFLG9CQUFNLElBQUksV0FBVywyQ0FBMkM7QUFBRSxxQkFBUSxLQUFFLEdBQUUsS0FBRSxJQUFFLE1BQUc7QUFBRSxpQkFBRSxNQUFLLElBQUUsS0FBRSxDQUFDLEdBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxLQUFFLENBQUM7QUFBRSxtQkFBTztBQUFBLFVBQUksR0FBRSxHQUFFLFVBQVUsU0FBTyxXQUFVO0FBQUMsZ0JBQUksS0FBRSxLQUFLO0FBQU8sZ0JBQUcsS0FBRSxLQUFHO0FBQUUsb0JBQU0sSUFBSSxXQUFXLDJDQUEyQztBQUFFLHFCQUFRLEtBQUUsR0FBRSxLQUFFLElBQUUsTUFBRztBQUFFLGlCQUFFLE1BQUssSUFBRSxLQUFFLENBQUMsR0FBRSxHQUFFLE1BQUssS0FBRSxHQUFFLEtBQUUsQ0FBQyxHQUFFLEdBQUUsTUFBSyxLQUFFLEdBQUUsS0FBRSxDQUFDLEdBQUUsR0FBRSxNQUFLLEtBQUUsR0FBRSxLQUFFLENBQUM7QUFBRSxtQkFBTztBQUFBLFVBQUksR0FBRSxHQUFFLFVBQVUsV0FBUyxXQUFVO0FBQUMsZ0JBQUksS0FBRSxJQUFFLEtBQUs7QUFBTyxtQkFBTyxBQUFJLE9BQUosSUFBTSxLQUFHLEFBQUksVUFBVSxXQUFkLElBQXFCLEVBQUUsTUFBSyxHQUFFLEVBQUMsSUFBRSxHQUFFLE1BQU0sTUFBSyxTQUFTO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxTQUFPLFNBQVMsSUFBRTtBQUFDLGdCQUFHLENBQUMsR0FBRSxTQUFTLEVBQUM7QUFBRSxvQkFBTSxJQUFJLFVBQVUsMkJBQTJCO0FBQUUsbUJBQU8sU0FBTyxNQUFHLEFBQUksR0FBRSxRQUFRLE1BQUssRUFBQyxNQUFwQjtBQUFBLFVBQXFCLEdBQUUsR0FBRSxVQUFVLFVBQVEsV0FBVTtBQUFDLGdCQUFJLEtBQUUsSUFBRyxLQUFFLEdBQUU7QUFBa0IsbUJBQU8sS0FBSyxTQUFPLEtBQUksTUFBRSxLQUFLLFNBQVMsT0FBTSxHQUFFLEVBQUMsRUFBRSxNQUFNLE9BQU8sRUFBRSxLQUFLLEdBQUcsR0FBRSxLQUFLLFNBQU8sTUFBSSxPQUFHLFdBQVUsYUFBVyxLQUFFO0FBQUEsVUFBRyxHQUFFLEdBQUUsVUFBVSxVQUFRLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUcsQ0FBQyxHQUFFLFNBQVMsRUFBQztBQUFFLG9CQUFNLElBQUksVUFBVSwyQkFBMkI7QUFBRSxnQkFBRyxBQUFTLE9BQVQsVUFBYSxNQUFFLElBQUcsQUFBUyxPQUFULFVBQWEsTUFBRSxLQUFFLEdBQUUsU0FBTyxJQUFHLEFBQVMsT0FBVCxVQUFhLE1BQUUsSUFBRyxBQUFTLE9BQVQsVUFBYSxNQUFFLEtBQUssU0FBUSxLQUFFLEtBQUcsS0FBRSxHQUFFLFVBQVEsS0FBRSxLQUFHLEtBQUUsS0FBSztBQUFPLG9CQUFNLElBQUksV0FBVyxvQkFBb0I7QUFBRSxnQkFBRyxNQUFHLE1BQUcsTUFBRztBQUFFLHFCQUFPO0FBQUUsZ0JBQUcsTUFBRztBQUFFLHFCQUFNO0FBQUcsZ0JBQUcsTUFBRztBQUFFLHFCQUFPO0FBQUUsZ0JBQUcsU0FBTztBQUFFLHFCQUFPO0FBQUUscUJBQVEsS0FBRyxTQUFLLEtBQUksU0FBSyxJQUFHLEtBQUcsU0FBSyxLQUFJLFNBQUssSUFBRyxLQUFFLEtBQUssSUFBSSxJQUFFLEVBQUMsR0FBRSxLQUFFLEtBQUssTUFBTSxJQUFFLEVBQUMsR0FBRSxLQUFFLEdBQUUsTUFBTSxJQUFFLEVBQUMsR0FBRSxLQUFFLEdBQUUsS0FBRSxJQUFFLEVBQUU7QUFBRSxrQkFBRyxHQUFFLFFBQUssR0FBRSxLQUFHO0FBQUMscUJBQUUsR0FBRSxLQUFHLEtBQUUsR0FBRTtBQUFHO0FBQUEsY0FBSztBQUFDLG1CQUFPLEtBQUUsS0FBRSxLQUFHLEtBQUUsS0FBRSxJQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxXQUFTLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTSxBQUFLLEtBQUssUUFBUSxJQUFFLElBQUUsRUFBQyxNQUF2QjtBQUFBLFVBQXdCLEdBQUUsR0FBRSxVQUFVLFVBQVEsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEVBQUUsTUFBSyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxjQUFZLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxFQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsUUFBTSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBRyxBQUFTLE9BQVQ7QUFBVyxtQkFBRSxRQUFPLEtBQUUsS0FBSyxRQUFPLEtBQUU7QUFBQSxxQkFBVSxBQUFTLE9BQVQsVUFBWSxBQUFVLE9BQU8sTUFBakI7QUFBbUIsbUJBQUUsSUFBRSxLQUFFLEtBQUssUUFBTyxLQUFFO0FBQUEsaUJBQU07QUFBQyxrQkFBRyxDQUFDLFNBQVMsRUFBQztBQUFFLHNCQUFNLElBQUksTUFBTSx5RUFBeUU7QUFBRSxvQkFBRyxHQUFFLFNBQVMsRUFBQyxJQUFHLE9BQUcsR0FBRSxBQUFTLE9BQVQsVUFBYSxNQUFFLFdBQVUsTUFBRSxJQUFFLEtBQUU7QUFBQSxZQUFPO0FBQUMsZ0JBQUksS0FBRSxLQUFLLFNBQU87QUFBRSxnQkFBSSxDQUFTLE9BQVQsVUFBWSxLQUFFLE9BQUssTUFBRSxLQUFHLEdBQUUsU0FBTyxLQUFJLE1BQUUsS0FBRyxLQUFFLE1BQUksS0FBRSxLQUFLO0FBQU8sb0JBQU0sSUFBSSxXQUFXLHdDQUF3QztBQUFFLGtCQUFJLE1BQUU7QUFBUSxxQkFBUSxLQUFFO0FBQUssc0JBQU87QUFBQSxxQkFBTztBQUFNLHlCQUFPLEVBQUUsTUFBSyxJQUFFLElBQUUsRUFBQztBQUFBLHFCQUFNO0FBQUEscUJBQVc7QUFBUSx5QkFBTyxHQUFFLE1BQUssSUFBRSxJQUFFLEVBQUM7QUFBQSxxQkFBTTtBQUFRLHlCQUFPLEdBQUUsTUFBSyxJQUFFLElBQUUsRUFBQztBQUFBLHFCQUFNO0FBQUEscUJBQWE7QUFBUyx5QkFBTyxHQUFFLE1BQUssSUFBRSxJQUFFLEVBQUM7QUFBQSxxQkFBTTtBQUFTLHlCQUFPLEdBQUUsTUFBSyxJQUFFLElBQUUsRUFBQztBQUFBLHFCQUFNO0FBQUEscUJBQVc7QUFBQSxxQkFBWTtBQUFBLHFCQUFjO0FBQVcseUJBQU8sR0FBRSxNQUFLLElBQUUsSUFBRSxFQUFDO0FBQUE7QUFBVSxzQkFBRztBQUFFLDBCQUFNLElBQUksVUFBVSx1QkFBcUIsRUFBQztBQUFFLHVCQUFHLE1BQUcsSUFBRyxZQUFZLEdBQUUsS0FBRTtBQUFBO0FBQUEsVUFBRyxHQUFFLEdBQUUsVUFBVSxTQUFPLFdBQVU7QUFBQyxtQkFBTSxFQUFDLE1BQUssVUFBUyxNQUFLLE1BQU0sVUFBVSxNQUFNLEtBQUssS0FBSyxRQUFNLE1BQUssQ0FBQyxFQUFDO0FBQUEsVUFBQztBQUFFLHFCQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUksS0FBRTtBQUFHLGlCQUFFLEtBQUssSUFBSSxHQUFFLFFBQU8sRUFBQztBQUFFLHFCQUFRLEtBQUUsSUFBRSxLQUFFLElBQUUsRUFBRTtBQUFFLG9CQUFHLE9BQU8sYUFBYSxNQUFJLEdBQUUsR0FBRTtBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUFDLHFCQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUksS0FBRTtBQUFHLGlCQUFFLEtBQUssSUFBSSxHQUFFLFFBQU8sRUFBQztBQUFFLHFCQUFRLEtBQUUsSUFBRSxLQUFFLElBQUUsRUFBRTtBQUFFLG9CQUFHLE9BQU8sYUFBYSxHQUFFLEdBQUU7QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFBQyxzQkFBVyxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFJLEtBQUUsR0FBRTtBQUFPLFlBQUMsRUFBQyxNQUFHLEtBQUUsTUFBSyxNQUFFLElBQUksRUFBQyxNQUFHLEtBQUUsS0FBRyxLQUFFLE9BQUssTUFBRTtBQUFHLHFCQUFRLEtBQUUsSUFBRyxLQUFFLElBQUUsS0FBRSxJQUFFLEVBQUU7QUFBRSxvQkFBRyxHQUFFLEdBQUUsR0FBRTtBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUFDLHNCQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMscUJBQVEsS0FBRSxHQUFFLE1BQU0sSUFBRSxFQUFDLEdBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsUUFBTyxNQUFHO0FBQUUsb0JBQUcsT0FBTyxhQUFhLEdBQUUsTUFBRyxNQUFJLEdBQUUsS0FBRSxFQUFFO0FBQUUsbUJBQU87QUFBQSxVQUFDO0FBQUMscUJBQVcsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBRyxLQUFFLEtBQUcsS0FBRyxLQUFFO0FBQUUsb0JBQU0sSUFBSSxXQUFXLG9CQUFvQjtBQUFFLGdCQUFHLEtBQUUsS0FBRTtBQUFFLG9CQUFNLElBQUksV0FBVyx1Q0FBdUM7QUFBQSxVQUFDO0FBQUMsc0JBQVcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBRyxDQUFDLEdBQUUsU0FBUyxFQUFDO0FBQUUsb0JBQU0sSUFBSSxVQUFVLDZDQUE2QztBQUFFLGdCQUFHLEtBQUUsTUFBRyxLQUFFO0FBQUUsb0JBQU0sSUFBSSxXQUFXLG1DQUFtQztBQUFFLGdCQUFHLEtBQUUsS0FBRSxHQUFFO0FBQU8sb0JBQU0sSUFBSSxXQUFXLG9CQUFvQjtBQUFBLFVBQUM7QUFBQyxxQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsaUJBQUUsS0FBSSxNQUFFLFFBQU0sS0FBRTtBQUFHLHFCQUFRLEtBQUUsR0FBRSxLQUFFLEtBQUssSUFBSSxHQUFFLFNBQU8sSUFBRSxDQUFDLEdBQUUsS0FBRSxJQUFFLEVBQUU7QUFBRSxpQkFBRSxLQUFFLE1BQUksTUFBRSxPQUFLLElBQUcsTUFBRSxLQUFFLElBQUUsU0FBTSxJQUFHLE1BQUUsS0FBRSxJQUFFO0FBQUEsVUFBRTtBQUFDLHNCQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxpQkFBRSxLQUFJLE1BQUUsYUFBVyxLQUFFO0FBQUcscUJBQVEsS0FBRSxHQUFFLEtBQUUsS0FBSyxJQUFJLEdBQUUsU0FBTyxJQUFFLENBQUMsR0FBRSxLQUFFLElBQUUsRUFBRTtBQUFFLGlCQUFFLEtBQUUsTUFBRyxPQUFJLElBQUcsTUFBRSxLQUFFLElBQUUsTUFBRztBQUFBLFVBQUc7QUFBQyxzQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFHLEtBQUUsS0FBRSxHQUFFO0FBQU8sb0JBQU0sSUFBSSxXQUFXLG9CQUFvQjtBQUFFLGdCQUFHLEtBQUU7QUFBRSxvQkFBTSxJQUFJLFdBQVcsb0JBQW9CO0FBQUEsVUFBQztBQUFDLHNCQUFXLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsR0FBRSxJQUFFLEdBQUUsSUFBRSxDQUFDLEdBQUUsR0FBRSxNQUFNLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxDQUFDLEdBQUUsS0FBRTtBQUFBLFVBQUM7QUFBQyxzQkFBVyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFHLEdBQUUsSUFBRSxHQUFFLElBQUUsQ0FBQyxHQUFFLEdBQUUsTUFBTSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUcsQ0FBQyxHQUFFLEtBQUU7QUFBQSxVQUFDO0FBQUMsYUFBRSxVQUFVLFFBQU0sU0FBUyxJQUFFLElBQUU7QUFBQyxnQkFBSSxJQUFFLEtBQUUsS0FBSztBQUFPLGdCQUFJLE1BQUUsQ0FBQyxDQUFDLE1BQUcsSUFBRyxPQUFHLE1BQUcsS0FBSSxNQUFFLEtBQUcsS0FBRSxNQUFJLE1BQUUsS0FBSSxNQUFFLEFBQVMsT0FBVCxTQUFXLEtBQUUsQ0FBQyxDQUFDLE1BQUcsSUFBRyxPQUFHLE1BQUcsS0FBSSxNQUFFLEtBQUcsS0FBRSxNQUFJLE1BQUUsS0FBRyxLQUFFLE1BQUksTUFBRSxLQUFHLEdBQUU7QUFBb0IsY0FBQyxNQUFFLEtBQUssU0FBUyxJQUFFLEVBQUMsR0FBRyxZQUFVLEdBQUU7QUFBQSxpQkFBYztBQUFDLGtCQUFJLEtBQUUsS0FBRTtBQUFFLG1CQUFFLElBQUksR0FBRSxJQUFFLE1BQU07QUFBRSx1QkFBUSxLQUFFLEdBQUUsS0FBRSxJQUFFLEVBQUU7QUFBRSxtQkFBRSxNQUFHLEtBQUssS0FBRTtBQUFBLFlBQUU7QUFBQyxtQkFBTztBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsYUFBVyxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsa0JBQUcsR0FBRSxNQUFHLEdBQUUsTUFBRyxFQUFFLElBQUUsSUFBRSxLQUFLLE1BQU07QUFBRSxxQkFBUSxLQUFFLEtBQUssS0FBRyxLQUFFLEdBQUUsS0FBRSxHQUFFLEVBQUUsS0FBRSxNQUFJLE9BQUc7QUFBTSxvQkFBRyxLQUFLLEtBQUUsTUFBRztBQUFFLG1CQUFPO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxhQUFXLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxrQkFBRyxHQUFFLE1BQUcsR0FBRSxNQUFHLEVBQUUsSUFBRSxJQUFFLEtBQUssTUFBTTtBQUFFLHFCQUFRLEtBQUUsS0FBSyxLQUFFLEVBQUUsS0FBRyxLQUFFLEdBQUUsS0FBRSxLQUFJLE9BQUc7QUFBTSxvQkFBRyxLQUFLLEtBQUUsRUFBRSxNQUFHO0FBQUUsbUJBQU87QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLFlBQVUsU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUssTUFBTSxHQUFFLEtBQUs7QUFBQSxVQUFFLEdBQUUsR0FBRSxVQUFVLGVBQWEsU0FBUyxJQUFFLElBQUU7QUFBQyxtQkFBTyxNQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUssTUFBTSxHQUFFLEtBQUssTUFBRyxLQUFLLEtBQUUsTUFBSTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsZUFBYSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxNQUFNLEdBQUUsS0FBSyxPQUFJLElBQUUsS0FBSyxLQUFFO0FBQUEsVUFBRSxHQUFFLEdBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxFQUFFLElBQUUsR0FBRSxLQUFLLE1BQU0sR0FBRyxNQUFLLE1BQUcsS0FBSyxLQUFFLE1BQUksSUFBRSxLQUFLLEtBQUUsTUFBSSxNQUFJLFdBQVMsS0FBSyxLQUFFO0FBQUEsVUFBRSxHQUFFLEdBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxFQUFFLElBQUUsR0FBRSxLQUFLLE1BQU0sR0FBRSxXQUFTLEtBQUssTUFBSSxNQUFLLEtBQUUsTUFBSSxLQUFHLEtBQUssS0FBRSxNQUFJLElBQUUsS0FBSyxLQUFFO0FBQUEsVUFBRyxHQUFFLEdBQUUsVUFBVSxZQUFVLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxrQkFBRyxHQUFFLE1BQUcsR0FBRSxNQUFHLEVBQUUsSUFBRSxJQUFFLEtBQUssTUFBTTtBQUFFLHFCQUFRLEtBQUUsS0FBSyxLQUFHLEtBQUUsR0FBRSxLQUFFLEdBQUUsRUFBRSxLQUFFLE1BQUksT0FBRztBQUFNLG9CQUFHLEtBQUssS0FBRSxNQUFHO0FBQUUsbUJBQU8sTUFBSSxPQUFHLFFBQU8sT0FBRyxLQUFLLElBQUksR0FBRSxJQUFFLEVBQUMsSUFBRztBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsWUFBVSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsa0JBQUcsR0FBRSxNQUFHLEdBQUUsTUFBRyxFQUFFLElBQUUsSUFBRSxLQUFLLE1BQU07QUFBRSxxQkFBUSxLQUFFLElBQUUsS0FBRSxHQUFFLEtBQUUsS0FBSyxLQUFFLEVBQUUsS0FBRyxLQUFFLEtBQUksT0FBRztBQUFNLG9CQUFHLEtBQUssS0FBRSxFQUFFLE1BQUc7QUFBRSxtQkFBTyxNQUFJLE9BQUcsUUFBTyxPQUFHLEtBQUssSUFBSSxHQUFFLElBQUUsRUFBQyxJQUFHO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxXQUFTLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sTUFBRyxFQUFFLElBQUUsR0FBRSxLQUFLLE1BQU0sR0FBRSxNQUFJLEtBQUssTUFBRyxLQUFJLE9BQUksS0FBSyxNQUFHLEtBQUcsS0FBSztBQUFBLFVBQUUsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLGtCQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUssTUFBTTtBQUFFLGdCQUFJLEtBQUUsS0FBSyxNQUFHLEtBQUssS0FBRSxNQUFJO0FBQUUsbUJBQU8sUUFBTSxLQUFFLGFBQVcsS0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLGtCQUFHLEVBQUUsSUFBRSxHQUFFLEtBQUssTUFBTTtBQUFFLGdCQUFJLEtBQUUsS0FBSyxLQUFFLEtBQUcsS0FBSyxPQUFJO0FBQUUsbUJBQU8sUUFBTSxLQUFFLGFBQVcsS0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxNQUFNLEdBQUUsS0FBSyxNQUFHLEtBQUssS0FBRSxNQUFJLElBQUUsS0FBSyxLQUFFLE1BQUksS0FBRyxLQUFLLEtBQUUsTUFBSTtBQUFBLFVBQUUsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxNQUFNLEdBQUUsS0FBSyxPQUFJLEtBQUcsS0FBSyxLQUFFLE1BQUksS0FBRyxLQUFLLEtBQUUsTUFBSSxJQUFFLEtBQUssS0FBRTtBQUFBLFVBQUUsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxNQUFNLEdBQUUsR0FBRSxLQUFLLE1BQUssSUFBRSxNQUFHLElBQUcsQ0FBQztBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxNQUFNLEdBQUUsR0FBRSxLQUFLLE1BQUssSUFBRSxPQUFHLElBQUcsQ0FBQztBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsZUFBYSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxNQUFNLEdBQUUsR0FBRSxLQUFLLE1BQUssSUFBRSxNQUFHLElBQUcsQ0FBQztBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsZUFBYSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLE1BQUcsRUFBRSxJQUFFLEdBQUUsS0FBSyxNQUFNLEdBQUUsR0FBRSxLQUFLLE1BQUssSUFBRSxPQUFHLElBQUcsQ0FBQztBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFDLE1BQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsT0FBSSxHQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBSyxJQUFJLEdBQUUsSUFBRSxFQUFDLElBQUUsR0FBRSxDQUFDO0FBQUUsZ0JBQUksS0FBRSxHQUFFLEtBQUU7QUFBRSxpQkFBSSxLQUFLLE1BQUcsTUFBSSxJQUFFLEVBQUUsS0FBRSxNQUFJLE9BQUc7QUFBTSxtQkFBSyxLQUFFLE1BQUcsS0FBRSxLQUFFO0FBQUksbUJBQU8sS0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxZQUFDLE1BQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsT0FBSSxHQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBSyxJQUFJLEdBQUUsSUFBRSxFQUFDLElBQUUsR0FBRSxDQUFDO0FBQUUsZ0JBQUksS0FBRSxLQUFFLEdBQUUsS0FBRTtBQUFFLGlCQUFJLEtBQUssS0FBRSxNQUFHLE1BQUksSUFBRSxFQUFFLE1BQUcsS0FBSSxPQUFHO0FBQU0sbUJBQUssS0FBRSxNQUFHLEtBQUUsS0FBRTtBQUFJLG1CQUFPLEtBQUU7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLGFBQVcsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEtBQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsTUFBSyxJQUFFLElBQUUsR0FBRSxLQUFJLENBQUMsR0FBRSxHQUFFLHVCQUFzQixNQUFFLEtBQUssTUFBTSxFQUFDLElBQUcsS0FBSyxNQUFHLE1BQUksSUFBRSxLQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxnQkFBYyxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQU8sS0FBRSxDQUFDLElBQUUsTUFBRyxHQUFFLE1BQUcsR0FBRSxNQUFLLElBQUUsSUFBRSxHQUFFLE9BQU0sQ0FBQyxHQUFFLEdBQUUsc0JBQXFCLE1BQUssTUFBRyxNQUFJLElBQUUsS0FBSyxLQUFFLEtBQUcsT0FBSSxLQUFHLEVBQUUsTUFBSyxJQUFFLElBQUUsSUFBRSxHQUFFLEtBQUU7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLGdCQUFjLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxLQUFFLENBQUMsSUFBRSxNQUFHLEdBQUUsTUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLEdBQUUsT0FBTSxDQUFDLEdBQUUsR0FBRSxzQkFBcUIsTUFBSyxNQUFHLE9BQUksR0FBRSxLQUFLLEtBQUUsS0FBRyxNQUFJLE1BQUcsRUFBRSxNQUFLLElBQUUsSUFBRSxLQUFFLEdBQUUsS0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsZ0JBQWMsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEtBQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsTUFBSyxJQUFFLElBQUUsR0FBRSxZQUFXLENBQUMsR0FBRSxHQUFFLHNCQUFxQixNQUFLLEtBQUUsS0FBRyxPQUFJLElBQUcsS0FBSyxLQUFFLEtBQUcsT0FBSSxJQUFHLEtBQUssS0FBRSxLQUFHLE9BQUksR0FBRSxLQUFLLE1BQUcsTUFBSSxNQUFHLEdBQUUsTUFBSyxJQUFFLElBQUUsSUFBRSxHQUFFLEtBQUU7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLGdCQUFjLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxLQUFFLENBQUMsSUFBRSxNQUFHLEdBQUUsTUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLEdBQUUsWUFBVyxDQUFDLEdBQUUsR0FBRSxzQkFBcUIsTUFBSyxNQUFHLE9BQUksSUFBRyxLQUFLLEtBQUUsS0FBRyxPQUFJLElBQUcsS0FBSyxLQUFFLEtBQUcsT0FBSSxHQUFFLEtBQUssS0FBRSxLQUFHLE1BQUksTUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLEtBQUUsR0FBRSxLQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxhQUFXLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFHLEtBQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxDQUFDLElBQUU7QUFBQyxrQkFBSSxLQUFFLEtBQUssSUFBSSxHQUFFLElBQUUsS0FBRSxDQUFDO0FBQUUsaUJBQUUsTUFBSyxJQUFFLElBQUUsSUFBRSxLQUFFLEdBQUUsQ0FBQyxFQUFDO0FBQUEsWUFBQztBQUFDLGdCQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUUsS0FBRTtBQUFFLGlCQUFJLEtBQUssTUFBRyxNQUFJLElBQUUsRUFBRSxLQUFFLE1BQUksT0FBRztBQUFNLG1CQUFFLEtBQUcsQUFBSSxPQUFKLEtBQU8sQUFBSSxLQUFLLEtBQUUsS0FBRSxPQUFiLEtBQWtCLE1BQUUsSUFBRyxLQUFLLEtBQUUsTUFBSSxNQUFFLE1BQUcsS0FBRyxLQUFFO0FBQUksbUJBQU8sS0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsYUFBVyxTQUFTLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxnQkFBRyxLQUFFLENBQUMsSUFBRSxNQUFHLEdBQUUsQ0FBQyxJQUFFO0FBQUMsa0JBQUksS0FBRSxLQUFLLElBQUksR0FBRSxJQUFFLEtBQUUsQ0FBQztBQUFFLGlCQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBRSxHQUFFLENBQUMsRUFBQztBQUFBLFlBQUM7QUFBQyxnQkFBSSxLQUFFLEtBQUUsR0FBRSxLQUFFLEdBQUUsS0FBRTtBQUFFLGlCQUFJLEtBQUssS0FBRSxNQUFHLE1BQUksSUFBRSxFQUFFLE1BQUcsS0FBSSxPQUFHO0FBQU0sbUJBQUUsS0FBRyxBQUFJLE9BQUosS0FBTyxBQUFJLEtBQUssS0FBRSxLQUFFLE9BQWIsS0FBa0IsTUFBRSxJQUFHLEtBQUssS0FBRSxNQUFJLE1BQUUsTUFBRyxLQUFHLEtBQUU7QUFBSSxtQkFBTyxLQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxZQUFVLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxLQUFFLENBQUMsSUFBRSxNQUFHLEdBQUUsTUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLEdBQUUsS0FBSSxJQUFJLEdBQUUsR0FBRSx1QkFBc0IsTUFBRSxLQUFLLE1BQU0sRUFBQyxJQUFHLEtBQUUsS0FBSSxNQUFFLE1BQUksS0FBRSxJQUFHLEtBQUssTUFBRyxNQUFJLElBQUUsS0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsZUFBYSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQU8sS0FBRSxDQUFDLElBQUUsTUFBRyxHQUFFLE1BQUcsR0FBRSxNQUFLLElBQUUsSUFBRSxHQUFFLE9BQU0sTUFBTSxHQUFFLEdBQUUsc0JBQXFCLE1BQUssTUFBRyxNQUFJLElBQUUsS0FBSyxLQUFFLEtBQUcsT0FBSSxLQUFHLEVBQUUsTUFBSyxJQUFFLElBQUUsSUFBRSxHQUFFLEtBQUU7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLGVBQWEsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLG1CQUFPLEtBQUUsQ0FBQyxJQUFFLE1BQUcsR0FBRSxNQUFHLEdBQUUsTUFBSyxJQUFFLElBQUUsR0FBRSxPQUFNLE1BQU0sR0FBRSxHQUFFLHNCQUFxQixNQUFLLE1BQUcsT0FBSSxHQUFFLEtBQUssS0FBRSxLQUFHLE1BQUksTUFBRyxFQUFFLE1BQUssSUFBRSxJQUFFLEtBQUUsR0FBRSxLQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxLQUFFLENBQUMsSUFBRSxNQUFHLEdBQUUsTUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLEdBQUUsWUFBVyxXQUFXLEdBQUUsR0FBRSxzQkFBcUIsTUFBSyxNQUFHLE1BQUksSUFBRSxLQUFLLEtBQUUsS0FBRyxPQUFJLEdBQUUsS0FBSyxLQUFFLEtBQUcsT0FBSSxJQUFHLEtBQUssS0FBRSxLQUFHLE9BQUksTUFBSSxHQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsR0FBRSxLQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxlQUFhLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxtQkFBTyxLQUFFLENBQUMsSUFBRSxNQUFHLEdBQUUsTUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLEdBQUUsWUFBVyxXQUFXLEdBQUUsS0FBRSxLQUFJLE1BQUUsYUFBVyxLQUFFLElBQUcsR0FBRSxzQkFBcUIsTUFBSyxNQUFHLE9BQUksSUFBRyxLQUFLLEtBQUUsS0FBRyxPQUFJLElBQUcsS0FBSyxLQUFFLEtBQUcsT0FBSSxHQUFFLEtBQUssS0FBRSxLQUFHLE1BQUksTUFBRyxHQUFFLE1BQUssSUFBRSxJQUFFLEtBQUUsR0FBRSxLQUFFO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxl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QU87QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLE9BQUssV0FBVTtBQUFDLGdCQUFJO0FBQUUsbUJBQU8sTUFBRSxDQUFDLEdBQUcsT0FBTyxZQUFVLFdBQVU7QUFBQyxrQkFBSSxLQUFFO0FBQUUscUJBQU0sRUFBQyxNQUFLLFdBQVU7QUFBQyx1QkFBTyxPQUFJLEtBQUssU0FBTyxFQUFDLE1BQUssTUFBRyxPQUFNLEtBQUksSUFBRSxFQUFDLE1BQUssT0FBRyxPQUFNLEtBQUc7QUFBQSxjQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUM7QUFBQSxZQUFDLEVBQUUsS0FBSyxJQUFJLEdBQUU7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLFNBQU8sV0FBVTtBQUFDLGdCQUFJO0FBQUUsbUJBQU8sTUFBRSxDQUFDLEdBQUcsT0FBTyxZQUFVLFdBQVU7QUFBQyxrQkFBSSxLQUFFLEtBQUssT0FBTyxVQUFVO0FBQUUscUJBQU0sRUFBQyxNQUFLLFdBQVU7QUFBQyx1QkFBTyxHQUFFLEtBQUs7QUFBQSxjQUFDLEVBQUM7QUFBQSxZQUFDLEVBQUUsS0FBSyxJQUFJLEdBQUU7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLFVBQVEsV0FBVTtBQUFDLGdCQUFJO0FBQUUsbUJBQU8sTUFBRSxDQUFDLEdBQUcsT0FBTyxZQUFVLFdBQVU7QUFBQyxrQkFBSSxLQUFFLEtBQUssT0FBTyxVQUFVLEdBQUUsS0FBRTtBQUFFLHFCQUFNLEVBQUMsTUFBSyxXQUFVO0FBQUMsb0JBQUksS0FBRSxHQUFFLEtBQUs7QUFBRSx1QkFBTyxHQUFFLE9BQUssRUFBQyxNQUFLLE1BQUcsT0FBTSxLQUFJLElBQUUsRUFBQyxNQUFLLE9BQUcsT0FBTSxDQUFDLE1BQUksR0FBRSxLQUFLLEVBQUM7QUFBQSxjQUFDLEVBQUM7QUFBQSxZQUFDLEVBQUUsS0FBSyxJQUFJLEdBQUU7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLE9BQU8sWUFBVSxXQUFVO0FBQUMsbUJBQU8sS0FBSyxNQUFNLFVBQVUsT0FBTyxVQUFVO0FBQUEsVUFBQyxHQUFFLEdBQUUsVUFBVSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsZ0JBQUksSUFBRTtBQUFFLFlBQVMsT0FBVCxVQUFhLE1BQUUsR0FBRSxJQUFJO0FBQVEsZ0JBQUksS0FBRTtBQUFFLGdCQUFHO0FBQUMsdUJBQVEsS0FBRSxFQUFFLEtBQUssTUFBTSxTQUFTLEdBQUUsS0FBRSxHQUFFLEtBQUssR0FBRSxDQUFDLEdBQUUsTUFBSyxLQUFFLEdBQUUsS0FBSyxHQUFFO0FBQUMsb0JBQUksSUFBRSxHQUFFO0FBQU0sbUJBQUUsS0FBSyxJQUFFLEdBQUUsTUFBSSxJQUFJO0FBQUEsY0FBQztBQUFBLFlBQUMsU0FBTyxJQUFOO0FBQVMsbUJBQUUsRUFBQyxPQUFNLEdBQUM7QUFBQSxZQUFDLFVBQUM7QUFBUSxrQkFBRztBQUFDLHNCQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSyxFQUFDO0FBQUEsY0FBQyxVQUFDO0FBQVEsb0JBQUc7QUFBRSx3QkFBTSxHQUFFO0FBQUEsY0FBSztBQUFBLFlBQUM7QUFBQSxVQUFDLEdBQUUsR0FBRSxVQUFVLE1BQUksU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGdCQUFHLENBQUMsRUFBRSxTQUFTLEVBQUM7QUFBRSxxQkFBTyxRQUFRLElBQUksSUFBRSxJQUFFLEVBQUM7QUFBRSxnQkFBSSxLQUFFLE9BQU8sRUFBQztBQUFFLG1CQUFPLE1BQU0sRUFBQyxJQUFFLFFBQVEsSUFBSSxJQUFFLElBQUUsRUFBQyxJQUFFLEdBQUUsS0FBSyxFQUFDLEtBQUc7QUFBQSxVQUFNLEdBQUUsR0FBRSxVQUFVLE1BQUksU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsZ0JBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBQztBQUFFLHFCQUFPLFFBQVEsSUFBSSxJQUFFLElBQUUsSUFBRSxFQUFDO0FBQUUsZ0JBQUksS0FBRSxPQUFPLEVBQUM7QUFBRSxnQkFBRyxNQUFNLEVBQUM7QUFBRSxxQkFBTyxRQUFRLElBQUksSUFBRSxJQUFFLElBQUUsRUFBQztBQUFFLGdCQUFJLEtBQUUsR0FBRSxLQUFLLEVBQUMsS0FBRztBQUFPLG1CQUFNLENBQUMsQ0FBQyxNQUFJLEVBQUMsQ0FBQyxHQUFFLFdBQVUsSUFBRSxpQkFBaUIsSUFBRSxJQUFFLEdBQUUsT0FBTyxHQUFFO0FBQUEsVUFBSSxHQUFFLEdBQUUsVUFBUSxTQUFTLElBQUU7QUFBQyxtQkFBTyxJQUFJLEdBQUUsRUFBQztBQUFBLFVBQUMsR0FBRTtBQUFBLFFBQUMsRUFBRTtBQUFFLFdBQUUsZUFBYTtBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsUUFBTSxLQUFLLFlBQVUsU0FBUyxJQUFFO0FBQUMsY0FBSSxLQUFFLEFBQVksT0FBTyxVQUFuQixjQUEyQixPQUFPLFVBQVMsS0FBRSxNQUFHLEdBQUUsS0FBRyxLQUFFO0FBQUUsY0FBRztBQUFFLG1CQUFPLEdBQUUsS0FBSyxFQUFDO0FBQUUsY0FBRyxNQUFHLEFBQVUsT0FBTyxHQUFFLFVBQW5CO0FBQTBCLG1CQUFNLEVBQUMsTUFBSyxXQUFVO0FBQUMscUJBQU8sTUFBRyxNQUFHLEdBQUUsVUFBUyxNQUFFLFNBQVEsRUFBQyxPQUFNLE1BQUcsR0FBRSxPQUFLLE1BQUssQ0FBQyxHQUFDO0FBQUEsWUFBQyxFQUFDO0FBQUUsZ0JBQU0sSUFBSSxVQUFVLEtBQUUsNEJBQTBCLGlDQUFpQztBQUFBLFFBQUM7QUFBRSxlQUFPLGVBQWUsSUFBRSxjQUFhLEVBQUMsT0FBTSxLQUFFLENBQUM7QUFBRSxZQUFJLEtBQUUsRUFBRSxDQUFDLEdBQUUsSUFBRSxFQUFFLENBQUMsR0FBRSxLQUFFLFdBQVU7QUFBQyxzQkFBVyxJQUFFO0FBQUMsbUJBQU8sS0FBSyxRQUFNLE9BQUcsS0FBSyxTQUFPLENBQUMsR0FBRSxLQUFLLFVBQVEsR0FBRSxLQUFLLFFBQU0sSUFBRSxLQUFLLFNBQU8sQ0FBQyxHQUFFLEtBQUssVUFBUSxTQUFTLElBQUU7QUFBQyxxQkFBTTtBQUFBLFlBQUUsR0FBRSxJQUFJLE1BQU0sTUFBSyxJQUFJO0FBQUEsVUFBQztBQUFDLGlCQUFPLE9BQU8sZUFBZSxHQUFFLFdBQVUsVUFBUyxFQUFDLEtBQUksV0FBVTtBQUFDLG1CQUFPLEtBQUssT0FBTztBQUFBLFVBQU0sR0FBRSxZQUFXLE1BQUcsY0FBYSxLQUFFLENBQUMsR0FBRSxHQUFFLFVBQVUsT0FBSyxTQUFTLElBQUU7QUFBQyxtQkFBTyxLQUFFLEtBQUcsS0FBRSxLQUFLLFNBQU8sSUFBRSxPQUFLLEtBQUssT0FBTztBQUFBLFVBQUUsR0FBRSxHQUFFLFVBQVUsT0FBSyxXQUFVO0FBQUMsZ0JBQUk7QUFBRSxtQkFBTyxNQUFFLENBQUMsR0FBRyxPQUFPLFlBQVUsV0FBVTtBQUFDLGtCQUFJLEtBQUU7QUFBRSxxQkFBTSxFQUFDLE1BQUssV0FBVTtBQUFDLHVCQUFPLE9BQUksS0FBSyxTQUFPLEVBQUMsTUFBSyxNQUFHLE9BQU0sS0FBSSxJQUFFLEVBQUMsTUFBSyxPQUFHLE9BQU0sS0FBRztBQUFBLGNBQUMsRUFBRSxLQUFLLElBQUksRUFBQztBQUFBLFlBQUMsRUFBRSxLQUFLLElBQUksR0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsU0FBTyxXQUFVO0FBQUMsZ0JBQUk7QUFBRSxtQkFBTyxNQUFFLENBQUMsR0FBRyxPQUFPLFlBQVUsV0FBVTtBQUFDLGtCQUFJLEtBQUUsS0FBSyxPQUFPLFVBQVU7QUFBRSxxQkFBTSxFQUFDLE1BQUssV0FBVTtBQUFDLHVCQUFPLEdBQUUsS0FBSztBQUFBLGNBQUMsRUFBQztBQUFBLFlBQUMsRUFBRSxLQUFLLElBQUksR0FBRTtBQUFBLFVBQUMsR0FBRSxHQUFFLFVBQVUsVUFBUSxXQUFVO0FBQUMsZ0JBQUk7QUFBRSxtQkFBTyxNQUFFLENBQUMsR0FBRyxPQUFPLFlBQVUsV0FBVTtBQUFDLGtCQUFJLEtBQUUsS0FBSyxPQUFPLFVBQVUsR0FBRSxLQUFFO0FBQUUscUJBQU0sRUFBQyxNQUFLLFdBQVU7QUFBQyxvQkFBSSxLQUFFLEdBQUUsS0FBSztBQUFFLHVCQUFPLEdBQUUsT0FBSyxFQUFDLE1BQUssTUFBRyxP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LEtBQUUsR0FBRSxBQUFTLE9BQVQsVUFBWSxFQUFFLEVBQUMsSUFBRSxLQUFFLEVBQUUscUJBQXFCLEdBQUUsS0FBRSxFQUFFLEVBQUMsSUFBRSxLQUFFLElBQUUsS0FBRSxHQUFFLGVBQWU7QUFBRSxhQUFFLElBQUUsSUFBRSxJQUFFO0FBQUUsY0FBSSxLQUFFLElBQUksR0FBRSxlQUFlLEdBQUUsdUJBQXVCLENBQUM7QUFBRSxpQkFBTyxBQUFTLE9BQVQsVUFBWSxHQUFFLElBQUksRUFBQyxHQUFFO0FBQUEsUUFBQyxHQUFFLEdBQUUsVUFBUSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUU7QUFBRSxpQkFBTyxFQUFFLEVBQUMsS0FBRyxBQUFTLE9BQVQsU0FBWSxNQUFFLElBQUUsS0FBRSxJQUFFLEtBQUUsTUFBSSxNQUFFLEVBQUUsdUJBQXNCLEtBQUUsSUFBRSxLQUFFLE1BQUcsU0FBUSxHQUFFLElBQUUsRUFBQyxFQUFFLElBQUksRUFBQztBQUFBLFFBQUM7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDO0FBQWEsZUFBTyxlQUFlLElBQUUsY0FBYSxFQUFDLE9BQU0sS0FBRSxDQUFDO0FBQUUsWUFBSSxJQUFFLEVBQUUsRUFBRTtBQUFFLFdBQUUsVUFBUSxFQUFFLFNBQVEsR0FBRSxTQUFPLEVBQUUsUUFBTyxHQUFFLFdBQVMsRUFBRSxVQUFTLEdBQUUsVUFBUSxFQUFFLFNBQVEsR0FBRSxXQUFTLEVBQUUsVUFBUyxHQUFFLGFBQVcsRUFBRTtBQUFBLE1BQVUsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxVQUFFLEVBQUUsR0FBRSxFQUFFLEVBQUUsR0FBRSxFQUFFLEVBQUUsR0FBRSxFQUFFLEdBQUcsR0FBRSxFQUFFLEdBQUcsR0FBRSxFQUFFLEdBQUcsR0FBRSxFQUFFLEVBQUUsR0FBRSxFQUFFLEVBQUUsR0FBRSxFQUFFLEdBQUcsR0FBRSxFQUFFLEdBQUcsR0FBRSxFQUFFLEVBQUUsR0FBRSxFQUFFLEdBQUcsR0FBRSxF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QUFFLENBQUMsR0FBRSxLQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU0sSUFBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxPQUFPLEdBQUUsS0FBRSxHQUFFLE9BQU87QUFBRSxVQUFFLEVBQUMsUUFBTyxTQUFRLE9BQU0sTUFBRyxRQUFPLENBQUMsTUFBRyxDQUFDLEdBQUMsR0FBRSxFQUFDLE9BQU0sU0FBUyxJQUFFO0FBQUMsaUJBQU8sR0FBRSxNQUFLLElBQUUsVUFBVSxTQUFPLElBQUUsVUFBVSxLQUFHLE1BQU07QUFBQSxRQUFDLEVBQUMsQ0FBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsRUFBRSxDQUFDLEdBQUUsS0FBRSxFQUFFLEVBQUUsRUFBRSxRQUFPLElBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsUUFBUSxHQUFFLEtBQUUsR0FBRSxRQUFRO0FBQUUsVUFBRSxFQUFDLFFBQU8sU0FBUSxPQUFNLE1BQUcsUUFBTyxDQUFDLE1BQUcsQ0FBQyxHQUFDLEdBQUUsRUFBQyxRQUFPLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEdBQUUsTUFBSyxJQUFFLFVBQVUsU0FBTyxJQUFFLFVBQVUsS0FBRyxNQUFNO0FBQUEsUUFBQyxFQUFDLENBQUM7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDLFlBQUksSUFBRSxFQUFFLEVBQUU7QUFBRSxXQUFFLFVBQVEsRUFBRSxhQUFZLFdBQVcsS0FBRztBQUFBLE1BQUUsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsRUFBRSxDQUFDLEdBQUUsS0FBRSxFQUFFLEVBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxHQUFHLEdBQUUsS0FBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLE1BQUcsS0FBRSxHQUFFLE1BQU07QUFBRSxrQkFBUSxDQUFDLEtBQUcsTUFBTSxDQUFDLEVBQUUsS0FBTSxXQUFVO0FBQUMsZUFBRTtBQUFBLFFBQUUsQ0FBRSxHQUFFLEVBQUUsRUFBQyxRQUFPLFNBQVEsT0FBTSxNQUFHLFFBQU8sTUFBRyxDQUFDLEdBQUMsR0FBRSxFQUFDLE1BQUssU0FBUyxJQUFFO0FBQUMsaUJBQU8sR0FBRSxNQUFLLElBQUUsVUFBVSxTQUFPLElBQUUsVUFBVSxLQUFHLE1BQU07QUFBQSxRQUFDLEVBQUMsQ0FBQyxHQUFFLEVBQUUsTUFBTTtBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsRUFBRSxHQUFHLEVBQUUsbUJBQWtCLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxXQUFVO0FBQUMsaUJBQU87QUFBQSxRQUFJO0FBQUUsV0FBRSxVQUFRLFNBQVMsSUFBRSxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsS0FBRTtBQUFZLGlCQUFPLEdBQUUsWUFBVSxHQUFFLEdBQUUsRUFBQyxNQUFLLEVBQUUsR0FBRSxFQUFDLEVBQUMsQ0FBQyxHQUFFLEdBQUUsSUFBRSxHQUFFLE9BQUcsSUFBRSxHQUFFLEdBQUUsS0FBRyxJQUFFO0FBQUEsUUFBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsQ0FBQztBQUFFLFdBQUUsVUFBUSxDQUFDLEVBQUcsV0FBVTtBQUFDLHdCQUFZO0FBQUEsVUFBQztBQUFDLGlCQUFPLEdBQUUsVUFBVSxjQUFZLE1BQUssT0FBTyxlQUFlLElBQUksSUFBQyxNQUFJLEdBQUU7QUFBQSxRQUFTLENBQUU7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDLFlBQUksSUFBRSxFQUFFLEVBQUU7QUFBRSxXQUFFLFVBQVEsU0FBUyxJQUFFO0FBQUMsY0FBRyxDQUFDLEVBQUUsRUFBQyxLQUFHLEFBQU8sT0FBUDtBQUFTLGtCQUFNLFVBQVUsZUFBYSxPQUFPLEVBQUMsSUFBRSxpQkFBaUI7QUFBRSxpQkFBTztBQUFBLFFBQUM7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxJQUFFLEVBQUUsQ0FBQyxHQUFFLEtBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEtBQUssR0FBRSxLQUFFLEdBQUUsS0FBSztBQUFFLFVBQUUsRUFBQyxRQUFPLFNBQVEsT0FBTSxNQUFHLFFBQU8sQ0FBQyxNQUFHLENBQUMsR0FBQyxHQUFFLEVBQUMsS0FBSSxTQUFTLElBQUU7QUFBQyxpQkFBTyxHQUFFLE1BQUssSUFBRSxVQUFVLFNBQU8sSUFBRSxVQUFVLEtBQUcsTUFBTTtBQUFBLFFBQUMsRUFBQyxDQUFDO0FBQUEsTUFBQyxHQUFFLFNBQVMsSUFBRSxJQUFFLEdBQUU7QUFBQztBQUFhLFlBQUksSUFBRSxFQUFFLENBQUMsR0FBRSxLQUFFLEVBQUUsR0FBRyxFQUFFLE1BQUssSUFBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxRQUFRLEdBQUUsS0FBRSxHQUFFLFVBQVMsRUFBQyxHQUFFLEVBQUMsQ0FBQztBQUFFLFVBQUUsRUFBQyxRQUFPLFNBQVEsT0FBTSxNQUFHLFFBQU8sQ0FBQyxNQUFHLENBQUMsR0FBQyxHQUFFLEVBQUMsUUFBTyxTQUFTLElBQUU7QUFBQyxpQkFBTyxHQUFFLE1BQUssSUFBRSxVQUFVLFFBQU8sVUFBVSxTQUFPLElBQUUsVUFBVSxLQUFHLE1BQU07QUFBQSxRQUFDLEVBQUMsQ0FBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsR0FBRyxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsU0FBUyxJQUFFO0FBQUMsaUJBQU8sU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBRSxFQUFDO0FBQUUsZ0JBQUksSUFBRSxHQUFFLEVBQUMsR0FBRSxLQUFFLEVBQUUsQ0FBQyxHQUFFLEtBQUUsR0FBRSxFQUFFLE1BQU0sR0FBRSxJQUFFLEtBQUUsS0FBRSxJQUFFLEdBQUUsSUFBRSxLQUFFLEtBQUc7QUFBRSxnQkFBRyxLQUFFO0FBQUUseUJBQU87QUFBQyxvQkFBRyxLQUFLLElBQUU7QUFBQyx1QkFBRSxHQUFFLElBQUcsS0FBRztBQUFFO0FBQUEsZ0JBQUs7QUFBQyxvQkFBRyxLQUFHLEdBQUUsS0FBRSxJQUFFLElBQUUsTUFBRztBQUFFLHdCQUFNLFVBQVUsNkNBQTZDO0FBQUEsY0FBQztBQUFDLG1CQUFLLEtBQUUsS0FBRyxJQUFFLEtBQUUsR0FBRSxLQUFHO0FBQUUsbUJBQUssTUFBSSxNQUFFLEdBQUUsSUFBRSxHQUFFLElBQUcsR0FBRSxDQUFDO0FBQUcsbUJBQU87QUFBQSxVQUFDO0FBQUEsUUFBQztBQUFFLFdBQUUsVUFBUSxFQUFDLE1BQUssR0FBRSxLQUFFLEdBQUUsT0FBTSxHQUFFLElBQUUsRUFBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUM7QUFBYSxZQUFJLElBQUUsRUFBRSxDQUFDLEdBQUUsS0FBRSxFQUFFLEVBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxFQUFFLEdBQUUsS0FBRSxFQUFFLEVBQUUsR0FBRSxLQUFFLEVBQUUsTUFBTSxHQUFFLEtBQUUsR0FBRSxNQUFNO0FBQUUsVUFBRSxFQUFDLFFBQU8sU0FBUSxPQUFNLE1BQUcsUUFBTyxDQUFDLE1BQUcsQ0FBQyxHQUFDLEdBQUUsRUFBQyxNQUFLLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEdBQUUsTUFBSyxJQUFFLFVBQVUsU0FBTyxJQUFFLFVBQVUsS0FBRyxNQUFNO0FBQUEsUUFBQyxFQUFDLENBQUM7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDO0FBQWEsWUFBSSxJQUFFLEVBQUUsRUFBRSxHQUFFLEtBQUUsRUFBRSxHQUFHO0FBQUUsV0FBRSxVQUFRLElBQUUsQ0FBQyxFQUFFLFdBQVMsV0FBVTtBQUFDLGlCQUFNLGFBQVcsR0FBRSxJQUFJLElBQUU7QUFBQSxRQUFHO0FBQUEsTUFBQyxHQUFFLFNBQVMsSUFBRSxJQUFFO0FBQUMsV0FBRSxVQUFRLEVBQUMsYUFBWSxHQUFFLHFCQUFvQixHQUFFLGNBQWEsR0FBRSxnQkFBZSxHQUFFLGFBQVksR0FBRSxlQUFjLEdBQUUsY0FBYSxHQUFFLHNCQUFxQixHQUFFLFVBQVMsR0FBRSxtQkFBa0IsR0FBRSxnQkFBZSxHQUFFLGlCQUFnQixHQUFFLG1CQUFrQixHQUFFLFdBQVUsR0FBRSxlQUFjLEdBQUUsY0FBYSxHQUFFLFVBQVMsR0FBRSxrQkFBaUIsR0FBRSxRQUFPLEdBQUUsYUFBWSxHQUFFLGVBQWMsR0FBRSxlQUFjLEdBQUUsZ0JBQWUsR0FBRSxjQUFhLEdBQUUsZUFBYyxHQUFFLGtCQUFpQixHQUFFLGtCQUFpQixHQUFFLGdCQUFlLEdBQUUsa0JBQWlCLEdBQUUsZUFBYyxHQUFFLFdBQVUsRUFBQztBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsQ0FBQztBQUFFLFdBQUUsVUFBUSxDQUFDLEVBQUcsV0FBVTtBQUFDLGlCQUFPLE9BQU8sYUFBYSxPQUFPLGtCQUFrQixDQUFDLENBQUMsQ0FBQztBQUFBLFFBQUMsQ0FBRTtBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsQ0FBQyxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLFVBQVUsR0FBRSxLQUFFLE1BQU07QUFBVSxXQUFFLFVBQVEsU0FBUyxJQUFFO0FBQUMsaUJBQU8sQUFBUyxPQUFULFVBQWEsSUFBRSxVQUFRLE1BQUcsR0FBRSxPQUFLO0FBQUEsUUFBRTtBQUFBLE1BQUMsR0FBRSxTQUFTLElBQUUsSUFBRSxHQUFFO0FBQUMsWUFBSSxJQUFFLEVBQUUsR0FBRyxHQUFFLEtBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVO0FBQUUsV0FBRSxVQUFRLFNBQVMsSUFBRTtBQUFDLGNBQUcsQUFBTSxNQUFOO0FBQVEsbUJBQU8sR0FBRSxNQUFJLEdBQUUsaUJBQWUsR0FBRSxFQUFFLEVBQUM7QUFBQSxRQUFFO0FBQUEsTUFBQyxHQUFFLFNBQVMsSUFBRSxJQUFFLEdBQUU7QUFBQyxZQUFJLElBQUUsRUFBRSxFQUFFO0FBQUUsV0FBRSxVQUFRLFNBQVMsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUc7QUFBQyxtQkFBTyxLQUFFLEdBQUUsRUFBRSxFQUFDLEVBQUUsSUFBRyxHQUFFLEVBQUUsSUFBRSxHQUFFLEVBQUM7QUFBQSxVQUFDLFNBQU8sSUFBTjtBQUFTLGdCQUFJLElBQUUsR0FBRTtBQUFPLGtCQUFNLEFBQVMsTUFBVCxVQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUMsQ0FBQyxHQUFFO0FBQUEsVUFBQztBQUFBLFFBQUM7QUFBQSxNQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsR0FBRTtBQUFDLFlBQUksSUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLEdBQUUsS0FBRTtBQUFHLFlBQUc7QUFBQyxjQUFJLElBQUUsR0FBRSxLQUFFLEVBQUMsTUFBSyxXQUFVO0FBQUMsbUJBQU0sRUFBQyxNQUFLLENBQUMsQ0FBQyxJQUFHO0FBQUEsVUFBQyxHQUFFLFFBQU8sV0FBVTtBQUFDLGlCQUFFO0FBQUEsVUFBRSxFQUFDO0FBQUUsYUFBRSxLQUFHLFdBQVU7QUFBQyxtQkFBTztBQUFBLFVBQUksR0FBRSxNQUFNLEtBQUssSUFBRyxXQUFVO0FBQUMsa0JBQU07QUFBQSxVQUFDLENBQUU7QUFBQSxRQUFDLFNBQU8sSUFBTjtBQUFBLFFBQVM7QUFBQyxXQUFFLFVBQVEsU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFHLENBQUMsTUFBRyxDQUFDO0FBQUUsbUJBQU07QUFBRyxjQUFJLEtBQUU7QUFBRyxjQUFHO0FBQUMsZ0JBQUksS0FBRSxDQUFDO0FBQUUsZUFBRSxLQUFHLFdB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REFBZ0Q7QUFBRSxjQUFJLEtBQUUsR0FBRSxRQUFRLEdBQUc7QUFBRSxpQkFBTSxBQUFLLE9BQUwsTUFBUyxNQUFFLEtBQUcsQ0FBQyxJQUFFLE9BQUksS0FBRSxJQUFFLElBQUUsS0FBRSxDQUFDO0FBQUEsUUFBQztBQUFDLG9CQUFXLElBQUUsSUFBRSxJQUFFO0FBQUMsbUJBQVEsSUFBRSxJQUFFLEtBQUUsQ0FBQyxHQUFFLEtBQUUsSUFBRSxLQUFFLElBQUUsTUFBRztBQUFFLGlCQUFHLElBQUUsT0FBSSxLQUFHLFlBQVcsSUFBRSxLQUFFLE1BQUksSUFBRSxTQUFRLE9BQUksR0FBRSxLQUFFLEtBQUksR0FBRSxLQUFLLEVBQUcsTUFBRSxPQUFJLEtBQUcsTUFBSSxFQUFFLE1BQUcsS0FBRyxNQUFJLEVBQUUsTUFBRyxJQUFFLE1BQUksRUFBRSxLQUFHLEdBQUU7QUFBRSxpQkFBTyxHQUFFLEtBQUssRUFBRTtBQUFBLFFBQUM7QUFBQyxXQUFFLElBQUksV0FBVyxDQUFDLEtBQUcsSUFBRyxHQUFFLElBQUksV0FBVyxDQUFDLEtBQUc7QUFBQSxNQUFFLEdBQUUsU0FBUyxJQUFFLElBQUU7QUFBQyxXQUFFLE9BQUssU0FBUyxJQUFFLElBQUUsR0FBRSxHQUFFLElBQUU7QUFBQyxjQUFJLEdBQUUsSUFBRSxLQUFFLElBQUUsS0FBRSxJQUFFLEdBQUUsS0FBRyxNQUFHLE1BQUcsR0FBRSxJQUFFLE1BQUcsR0FBRSxLQUFFLElBQUcsS0FBRSxJQUFFLEtBQUUsSUFBRSxHQUFFLElBQUUsSUFBRSxLQUFHLEdBQUUsSUFBRSxHQUFFLEtBQUU7QUFBRyxlQUFJLE1BQUcsR0FBRSxJQUFFLElBQUcsTUFBRyxDQUFDLE1BQUcsR0FBRSxNQUFJLENBQUMsSUFBRSxNQUFHLElBQUUsS0FBRSxHQUFFLElBQUUsTUFBSSxJQUFFLEdBQUUsS0FBRSxLQUFHLE1BQUcsR0FBRSxNQUFHO0FBQUU7QUFBQyxlQUFJLEtBQUUsSUFBRyxNQUFHLENBQUMsTUFBRyxHQUFFLE1BQUksQ0FBQyxJQUFFLE1BQUcsR0FBRSxLQUFFLEdBQUUsS0FBRSxNQUFJLEtBQUUsR0FBRSxLQUFFLEtBQUcsTUFBRyxHQUFFLE1BQUc7QUFBRTtBQUFDLGNBQUcsQUFBSSxNQUFKO0FBQU0sZ0JBQUUsSUFBRTtBQUFBLGVBQU07QUFBQyxnQkFBRyxNQUFJO0FBQUUscUJBQU8sS0FBRSxNQUFJLElBQUUsSUFBRyxLQUFFLEtBQUc7QUFBRyxrQkFBRyxLQUFLLElBQUksR0FBRSxDQUFDLEdBQUUsS0FBRztBQUFBLFVBQUM7QUFBQyxpQkFBTyxLQUFFLEtBQUcsS0FBRyxLQUFFLEtBQUssSUFBSSxHQUFFLElBQUUsQ0FBQztBQUFBLFFBQUMsR0FBRSxHQUFFLFFBQU0sU0FBUyxJQUFFLElBQUUsR0FBRSxHQUFFLElBQUUsR0FBRTtBQUFDLGNBQUksSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsS0FBRSxHQUFFLEtBQUcsTUFBRyxLQUFHLEdBQUUsS0FBRSxNQUFHLEdBQUUsSUFBRSxBQUFLLE9BQUwsS0FBTyxLQUFLLElBQUksR0FBRSxHQUFHLElBQUUsS0FBSyxJQUFJLEdBQUUsR0FBRyxJQUFFLEdBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxHQUFFLEtBQUUsSUFBRSxJQUFFLElBQUcsS0FBRSxLQUFFLEtBQUcsQUFBSSxPQUFKLEtBQU8sSUFBRSxLQUFFLElBQUUsSUFBRTtBQUFFLGVBQUksS0FBRSxLQUFLLElBQUksRUFBQyxHQUFFLE1BQU0sRUFBQyxLQUFHLE9BQUksSUFBRSxJQUFHLE1BQUUsTUFBTSxFQUFDLElBQUUsSUFBRSxHQUFFLEtBQUUsTUFBSSxNQUFFLEtBQUssTUFBTSxLQUFLLElBQUksRUFBQyxJQUFFLEtBQUssR0FBRyxHQUFFLEtBQUcsTUFBRSxLQUFLLElBQUksR0FBRSxDQUFDLEVBQUMsS0FBRyxLQUFJLE9BQUksTUFBRyxJQUFJLE9BQUcsS0FBRSxNQUFHLElBQUUsSUFBRSxLQUFFLElBQUUsS0FBSyxJQUFJLEdBQUUsSUFBRSxFQUFDLEtBQUcsTUFBRyxLQUFJLE9BQUksTUFBRyxJQUFHLEtBQUUsTUFBRyxLQUFH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LEdBQUU7QUFBQSxZQUFLO0FBQUEsVUFBQztBQUFDLGlCQUFPO0FBQUEsUUFBQyxHQUFFLEtBQUUsUUFBTSxLQUFLLFlBQVUsV0FBVTtBQUFDLG1CQUFRLEtBQUUsQ0FBQyxHQUFFLEtBQUUsR0FBRSxLQUFFLFVBQVUsUUFBTztBQUFJLGlCQUFFLEdBQUUsT0FBTyxFQUFFLFVBQVUsR0FBRSxDQUFDO0FBQUUsaUJBQU87QUFBQSxRQUFDO0FBQUUsZUFBTyxlQUFlLElBQUUsY0FBYSxFQUFDLE9BQU0sS0FBRSxDQUFDO0FBQUUsWUFBSSxLQUFFLEVBQUUsQ0FBQztBQUFFLFdBQUUsTUFBSSxTQUFTLElBQUUsSUFBRTtBQUFDLGlCQUFPLEdBQUUsSUFBSSxFQUFDO0FBQUEsUUFBQyxHQUFFLEdBQUUsTUFBSSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsYUFBRSxJQUFJLElBQUUsRUFBQztBQUFBLFFBQUMsR0FBRSxHQUFFLFNBQU8sU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsSUFBRSxJQUFFO0FBQUUsY0FBRyxHQUFFLFdBQVcsRUFBQyxHQUFFO0FBQUMsZ0JBQUksS0FBRSxDQUFDO0FBQUUsZ0JBQUc7QUFBQyx1QkFBUSxJQUFFLEdBQUUsRUFBQyxHQUFFLEtBQUUsRUFBRSxLQUFLLEdBQUUsQ0FBQyxHQUFFLE1BQUssS0FBRSxFQUFFLEtBQUssR0FBRTtBQUFDLG9CQUFJLEtBQUUsR0FBRTtBQUFNLG1CQUFFLEtBQUssTUFBSyxFQUFDLEtBQUcsR0FBRSxLQUFLLEdBQUUsRUFBRTtBQUFBLGNBQUM7QUFBQSxZQUFDLFNBQU8sSUFBTjtBQUFTLG1CQUFFLEVBQUMsT0FBTSxHQUFDO0FBQUEsWUFBQyxVQUFDO0FBQVEsa0JBQUc7QUFBQyxzQkFBRyxDQUFDLEdBQUUsUUFBTyxNQUFFLEVBQUUsV0FBUyxHQUFFLEtBQUssQ0FBQztBQUFBLGNBQUMsVUFBQztBQUFRLG9CQUFHO0FBQUUsd0JBQU0sR0FBRTtBQUFBLGNBQUs7QUFBQSxZQUFDO0FBQUMsZ0JBQUc7QUFBQyx1QkFBUSxJQUFFLEdB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QUUsQ0FBQyxDQUFDLEdBQUUsS0FBRSxHQUFFLEVBQUMsR0FBRSxLQUFFLEdBQUUsS0FBSyxHQUFFLEdBQUUsUUFBTTtBQUFBLG1CQUFPO0FBQUUsdUJBQU8sR0FBRSxPQUFLLENBQUMsR0FBRSxDQUFDLElBQUcsTUFBRSxHQUFFLE9BQU0sR0FBRSxLQUFLLE1BQUssRUFBQyxJQUFFLENBQUMsR0FBRSxFQUFDLElBQUUsQ0FBQyxHQUFFLENBQUM7QUFBQSxtQkFBUTtBQUFFLG1CQUFFLEtBQUssR0FBRSxHQUFFLFFBQU07QUFBQSxtQkFBTztBQUFFLHVCQUFPLEtBQUUsR0FBRSxLQUFLLEdBQUUsQ0FBQyxHQUFFLENBQUM7QUFBQSxtQkFBTztBQUFFLHVCQUFNLENBQUMsR0FBRSxDQUFDO0FBQUEsbUJBQU87QUFBRSx1QkFBTyxLQUFFLEdBQUUsS0FBSyxHQUFFLEtBQUUsRUFBQyxPQUFNLEdBQUMsR0FBRSxDQUFDLEdBQUUsQ0FBQztBQUFBLG1CQUFPO0FBQUUsb0JBQUc7QUFBQyx3QkFBRyxDQUFDLEdBQUUsUUFBTyxLQUFFLEdBQUUsV0FBUyxFQUFFLEtBQUssRUFBQztBQUFBLGdCQUFDLFVBQUM7QUFBUSxzQkFBRztBQUFFLDBCQUFNLEdBQUU7QUFBQSxnQkFBSztBQUFDLHVCQUFNLENBQUMsQ0FBQztBQUFBLG1CQUFPO0FBQUUsdUJBQU0sQ0FBQyxDQUFDO0FBQUE7QUFBQSxVQUFFLENBQUU7QUFBQSxRQUFDLEdBQUUsR0FBRSxRQUFNLFNBQVMsSUFBRTtBQUFDLGlCQUFPLElBQUksSUFBSSxFQUFDO0FBQUEsUUFBQyxHQUFFLEdBQUUsdUJBQXFCLFNBQVMsSUFBRSxJQUFFO0FBQUMsY0FBSSxLQUFFLElBQUksT0FBTSxLQUFLLE1BQU0sT0FBTSxHQUFFLENBQUMsTUFBTSxHQUFFLEVBQUMsQ0FBQztBQUFHLGlCQUFPLEdBQUUsS0FBTSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLEdBQUUsS0FBSyxNQUFLLElBQUUsRUFBQyxJQUFFLEtBQUc7QUFBQSxVQUFDLENBQUUsR0FBRSxJQUFJLElB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QUssR0FBRTtBQUFDLGtCQUFJLEtBQUUsR0FBRTtBQUFNLGtCQUFHLENBQUMsR0FBRSxJQUFJLEVBQUM7QUFBRSx1QkFBTTtBQUFBLFlBQUU7QUFBQSxVQUFDLFNBQU8sSUFBTjtBQUFTLGlCQUFFLEVBQUMsT0FBTSxHQUFDO0FBQUEsVUFBQyxVQUFDO0FBQVEsZ0JBQUc7QUFBQyxvQkFBRyxDQUFDLEdBQUUsUUFBTyxNQUFFLEdBQUUsV0FBUyxHQUFFLEtBQUssRUFBQztBQUFBLFlBQUMsVUFBQztBQUFRLGtCQUFHO0FBQUUsc0JBQU0sR0FBRTtBQUFBLFlBQUs7QUFBQSxVQUFDO0FBQUMsaUJBQU07QUFBQSxRQUFFO0FBQUMsV0FBRSxTQUFPLFNBQVMsSUFBRSxJQUFFO0FBQUMsYUFBRSxJQUFJLEVBQUM7QUFBQSxRQUFDLEdBQUUsR0FBRSxTQUFPLFNBQVMsSUFBRSxJQUFFO0FBQUMsYUFBRSxRQUFRLEdBQUUsS0FBSSxFQUFDO0FBQUEsUUFBQyxHQUFFLEdBQUUsVUFBUSxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUksS0FBRSxJQUFJLElBQUksRUFBQztBQUFFLGFBQUUsTUFBTSxHQUFFLEdBQUUsSUFBSSxFQUFDLEdBQUUsR0FBRSxRQUFRLEdBQUUsS0FBSSxFQUFDO0FBQUEsUUFBQyxHQUFFLEdBQUUsVUFBUSxTQUFTLElBQUUsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUUsS0FBRSxvQkFBSTtBQUFJLGNBQUc7QUFBQyxxQkFBUSxLQUFFLEdBQUUsRUFBQyxHQUFFLElBQUUsR0FBRSxLQUFLLEdBQUUsQ0FBQyxFQUFFLE1BQUssSUFBRSxHQUFFLEtBQUssR0FBRTtBQUFDLGtCQUFJLEtBQUUsRUFBRTtBQUFNLGlCQUFFLFdBQVcsRUFBQyxJQUFFLEdBQUUsS0FBSyxNQUFLLEVBQUMsSUFBRSxHQUFFLElBQUksRUFBQyxJQUFFLEdBQUUsSUFBSSxFQUFDLElBQUUsT0FBSSxLQUFFLEdBQUUsSUFBSSxFQUFDLElBQUUsR0FBRSxJQUFJLEVBQUM7QUFBQSxZQUFDO0FBQUEsVUFBQyxTQUFPLElBQU47QUFBUyxpQkFBRSxFQUFDLE9BQU0sR0FBQztBQUFBLFVBQUMsVUFBQztBQUFRLGdCQUFHO0FBQUMsbUJBQUcsQ0FBQyxFQUFFLFFBQU8sTUFBRSxHQUFFLFdBQVMsR0FBRSxLQUFLLEVBQUM7QUFBQSxZQUFDLFVBQUM7QUFBUSxrQkFBRztBQUFFLHNCQUFNLEdBQUU7QUFBQSxZQUFLO0FBQUEsVUFBQztBQUFDLGFBQUUsTUFBTSxHQUFFLEdBQUUsUUFBUSxHQUFFLEtBQUksRUFBQztBQUFBLFFBQUMsR0FBRSxHQUFFLFNBQU8sU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDLGNBQUksSUFBRSxJQUFFLEtBQUUsb0JBQUksT0FBSSxLQUFFO0FBQUUsY0FBRztBQUFDLHFCQUFRLEtBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRSxHQUFFLEtBQUssR0FBRSxDQUFDLEVBQUUsTUFBSyxJQUFFLEdBQUUsS0FBSyxHQUFFO0FBQUMsa0JBQUksS0FBRSxFQUFFO0FBQU0scUJBQUksTUFBRyxHQUFFLElBQUksRUFBQyxHQUFFLEdBQUUsSUFBSSxFQUFDLEdBQUU7QUFBQSxZQUFHO0FBQUEsVUFBQyxTQUFPLElBQU47QUFBUyxpQkFBRSxFQUFDLE9BQU0sR0FBQztBQUFBLFVBQUMsVUFBQztBQUFRLGdCQUFHO0FBQUMsbUJBQUcsQ0FBQyxFQUFFLFFBQU8sTUFBRSxHQUFFLFdBQVMsR0FBRSxLQUFLLEVBQUM7QUFBQSxZQUFDLFVBQUM7QUFBUSxrQkFBRztBQUFFLHNCQUFNLEdBQUU7QUFBQSxZQUFLO0FBQUEsVUFBQztBQUFDLGFBQUUsTUFBTSxHQUFFLEdBQUUsUUFBUSxHQUFFLEtBQUksRUFBQztBQUFBLFFBQUMsR0FBRSxHQUFFLFNBQU8sU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUUsSUFBRSxJQUFFO0FBQUUsY0FBRyxHQUFFLFdBQVcsRUFBQyxHQUFFO0FBQUMsZ0JBQUksS0FBRSxDQUFDO0FBQUUsZ0JBQUc7QUFBQyx1QkFBUSxJQUFFLEdBQUUsRUFBQyxHQUFFLEtBQUUsRUFBRSxLQUFLLEdBQUUsQ0FBQyxHQUFFLE1BQUssS0FBRSxFQUFFLEtBQUssR0FBRTtBQUFDLG9CQUFJLEtBQUUsR0FBRTtBQUFNLG1CQUFFLEtBQUssTUFBSyxFQUFDLEtBQUcsR0FBRSxLQUFLLEVBQUM7QUFBQSxjQUFDO0FBQUEsWUFBQyxTQUFPLElBQU47QUFBUyxtQkFBRSxFQUFDLE9BQU0sR0FBQztBQUFBLFlBQUMsVUFBQztBQUFRLGtCQUFHO0FBQUMsc0JBQUcsQ0FBQyxHQUFFLFFBQU8sTUFBRSxFQUFFLFdBQVMsR0FBRSxLQUFLLENBQUM7QUFBQSxjQUFDLFVBQUM7QUFBUSxvQkFBRztBQUFFLHdCQUFNLEdBQUU7QUFBQSxjQUFLO0FBQUEsWUFBQztBQUFDLGdCQUFHO0FBQUMsdUJBQVEsSUFBRSxHQUFFLEVBQUMsR0FBRSxJQUFFLEVBQUUsS0FBSyxHQUFFLENBQUMsRUFBRSxNQUFLLElBQUUsRUFBRSxLQUFLLEdBQUU7QUFBQyxvQkFBSSxLQUFFLEVBQUU7QUFBTSxtQkFBRSxPQUFPLEVBQUM7QUFBQSxjQUFDO0FBQUEsWUFBQyxTQUFPLElBQU47QUFBUyxtQkFBRSxFQUFDLE9BQU0sR0FBQztBQUFBLFlBQUMsVUFBQztBQUFRLGtCQUFHO0FBQUMscUJBQUcsQ0FBQyxFQUFFLFFBQU8sTUFBRSxFQUFFLFdBQVMsR0FBRSxLQUFLLENBQUM7QUFBQSxjQUFDLFVBQUM7QUFBUSxvQkFBRztBQUFFLHdCQUFNLEdBQUU7QUFBQSxjQUFLO0FBQUEsWUFBQztBQUFBLFVBQUM7QUFBTSxlQUFFLE9BQU8sRUFBQztBQUFBLFFBQUMsR0FBRSxHQUFFLFFBQU0sU0FBUyxJQUFFO0FBQUMsYUFBRSxNQUFNO0FBQUEsUUFBQyxHQUFFLEdBQUUsV0FBUyxTQUFTLElBQUUsSUFBRTtBQUFDLGNBQUksSUFBRTtBQUFFLGNBQUcsQ0FBQyxHQUFFLFdBQVcsRUFBQztBQUFFLG1CQUFPLEdBQUUsSUFBSSxFQUFDO0FBQUUsY0FBRztBQUFDLHFCQUFRLEtBQUUsR0FBRSxFQUFDLEdBQUUsS0FBRSxHQUFFLEtBQUssR0FBRSxDQUFDLEdBQUUsTUFBSyxLQUFFLEdBQUUsS0FBSyxHQUFFO0FBQUMsa0JBQUksS0FBRSxHQUFFO0FBQU0sa0JBQUcsR0FBRSxLQUFLLE1BQUssRUFBQztBQUFFLHVCQUFNO0FBQUEsWUFBRTtBQUFBLFVBQUMsU0FBTyxJQUFOO0FBQVMsaUJBQUUsRUFBQyxPQUFNLEdBQUM7QUFBQSxVQUFDLFVBQUM7QUFBUSxnQkFBRztBQUFDLG9CQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSyxFQUFDO0FBQUEsWUFBQyxVQUFDO0FBQVEsa0JBQUc7QUFBRSxzQkFBTSxHQUFFO0FBQUEsWUFBSztBQUFBLFVBQUM7QUFBQyxpQkFBTTtBQUFBLFFBQUUsR0FBRSxHQUFFLE9BQUssU0FBUyxJQUFFLElBQUU7QUFBQyxjQUFJLElBQUU7QUFBRSxjQUFHLEFBQVMsT0FBVDtBQUFXLG1CQUFPLEdBQUU7QUFBSyxjQUFJLEtBQUU7QUFBRSxjQUFHO0FBQUMscUJBQVEsS0FBRSxHQUFFLEVBQUMsR0FBRSxLQUFFLEdBQUUsS0FBSyxHQUFFLENBQUMsR0FBRSxNQUFLLEtBQUUsR0FBRSxLQUFLLEdBQUU7QUFBQyxrQkFBSSxLQUFFLEdBQUU7QUFBTSxpQkFBRSxLQUFLLE1BQUssRUFBQyxLQUFHO0FBQUEsWUFBRztBQUFBLFVBQUMsU0FBTyxJQUFOO0FBQVMsaUJBQUUsRUFBQyxPQUFNLEdBQUM7QUFBQSxVQUFDLFVBQUM7QUFBUSxnQkFBRztBQUFDLG9CQUFHLENBQUMsR0FBRSxRQUFPLE1BQUUsR0FBRSxXQUFTLEdBQUUsS0FBSyxFQUFDO0FBQUEsWUFBQyxVQUFDO0FBQVEsa0JBQUc7QUFBRSxzQkFBTSxHQUFFO0FBQUEsWUFBSztBQUFBLFVBQUM7QUFBQyxpQkFBTztBQUFBLFFBQUMsR0FBRSxHQUFFLFVBQVEsU0FBUyxJQUFFO0FBQUMsaUJBQU8sQUFBSSxHQUFFLFNBQU47QUFBQSxRQUFVLEdBQUUsR0FBRSxVQUFRLFNBQVMsSUFBRSxJQUFFO0FBQUMsY0FBSSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBRSxpQkFBTyxFQUFFLE1BQU0sU0FBUyxJQUFFO0FBQUMsb0JBQU8sR0FBRTtBQUFBLG1CQUFZO0FBQUUsdUJBQU8sQUFBUyxPQUFULFNBQVcsQ0FBQyxHQUFFLENBQUMsSUFBRSxDQUFDLEdBQUUsR0FBRSxFQUFDLENBQUM7QUFBQSxtQkFBTztBQUFFLHVCQUFPLEdBQUUsS0FBSyxHQUFFLENBQUMsR0FBRSxDQUFDO0FBQUEsbUJBQU87QUFBRSxtQkFBRSxLQUFLLEtBQUssQ0FBQyxHQUFFLEdBQUUsR0FBRSxDQUFDLENBQUMsR0FBRSxLQUFFLEdBQUUsRUFBQyxHQUFFLEtBQUUsR0FBRSxLQUFLLEdBQUUsR0FBRSxRQUFNO0FBQUEsbUJBQU87QUFBRSx1QkFBTyxHQUFFLE9BQUssQ0FBQyxHQUFFLENBQUMsSUFBRyxNQUFFLEdBQUUsT0FBTSxHQUFFLEtBQUssTUFBSyxFQUFDLElBQUUsQ0FBQyxHQUFFLEVBQUMsSUFBRSxDQUFDLEdBQUUsQ0FBQztBQUFBLG1CQUFRO0FBQUUsbUJBQUUsS0FBSyxHQUFFLEdBQUUsUUFBTTtBQUFBLG1CQUFPO0FBQUUsdUJBQU8sS0FBRSxHQUFFLEtBQUssR0FBRSxDQUFDLEdBQUUsQ0FBQztBQUFBLG1CQUFPO0FBQUUsdUJBQU0sQ0FBQyxHQUFFLENBQUM7QUFBQSxtQkFBTztBQUFFLHVCQUFPLEtBQUUsR0FBRSxLQUFLLEdBQUUsS0FBRSxFQUFDLE9BQU0sR0FBQyxHQUFFLENBQUMsR0FBRSxDQUFDO0FBQUEsbUJBQU87QUFBRSxvQkFBRztBQUFDLHdCQUFHLENBQUMsR0FBRSxRQUFPLEtBQUUsR0FBRSxXQUFTLEVBQUUsS0FBSyxFQUFDO0FBQUEsZ0JBQUMsVUFBQztBQUFRLHNCQUFHO0FBQUUsMEJBQU0sR0FBRTtBQUFBLGdCQUFLO0FBQUMsdUJBQU0sQ0FBQyxDQUFDO0FBQUEsbUJBQU87QUFBRSx1QkFBTSxDQUFDLENBQUM7QUFBQTtBQUFBLFVBQUUsQ0FBRTtBQUFBLFFBQUMsR0FBRSxHQUFFLFFBQU0sU0FBUyxJQUFFO0FBQUMsaUJBQU8s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LEtBQUUsSUFBRyxNQUFHLE1BQUcsR0FBRSxlQUFlLEdBQUksT0FBRyxNQUFFLEdBQUUsV0FBVyxJQUFHLEtBQUcsS0FBRyxLQUFHLEtBQUUsS0FBRyxLQUFFLEtBQUcsS0FBRyxLQUFFLEtBQUcsS0FBRSxLQUFHLEtBQUcsS0FBRSxLQUFHLE9BQUssTUFBSSxLQUFFLEVBQUcsTUFBRSxNQUFHLEVBQUMsTUFBSSxHQUFFLFVBQVUsR0FBRSxNQUFHLEtBQUUsSUFBRSxDQUFFLE1BQUcsTUFBRSxNQUFHLEtBQUUsSUFBRSxNQUFHLEtBQUUsS0FBRyxLQUFHLEtBQUUsTUFBSSxNQUFHO0FBQUcsdUJBQUUsRUFBRSxLQUFHLE1BQUUsS0FBRyxHQUFFLEtBQUcsR0FBRSxVQUFVLEdBQUUsTUFBRztBQUFFLHFCQUFFLEdBQUUsS0FBRSxJQUFFLEtBQUUsR0FBRSxTQUFPLEdBQUUsQUFBRyxNQUFILENBQUksR0FBRSxFQUFFLEtBQUUsRUFBQyxJQUFFLEtBQUUsTUFBRyxHQUFFLFVBQVUsR0FBRSxNQUFHLEVBQUUsS0FBRSxFQUFDLEdBQUUsTUFBRyxJQUFFLEdBQUUsT0FBTyxNQUFJLEdBQUUsRUFBQztBQUFBLGNBQUM7QUFBQyxxQkFBTyxFQUFFLEVBQUM7QUFBQSxZQUFDO0FBQUMsd0JBQVcsSUFBRTtBQUFDLGtCQUFJLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFLEtBQUUsQ0FBQztBQUFFLG1CQUFJLEtBQUcsTUFBRSxFQUFFLEVBQUMsR0FBRyxRQUFPLEtBQUUsS0FBSSxLQUFFLEdBQUUsS0FBRSxJQUFHLEtBQUUsR0FBRSxLQUFFLElBQUUsRUFBRTtBQUFFLGdCQUFDLE1BQUUsR0FBRSxPQUFJLE9BQUssR0FBRSxLQUFLLEdBQUUsRUFBQyxDQUFDO0FBQUUsbUJBQUksS0FBRSxLQUFFLEdBQUUsUUFBTyxNQUFHLEdBQUUsS0FBSyxHQUFHLEdBQUUsS0FBRSxNQUFHO0FBQUMscUJBQUksS0FBRSxJQUFFLEtBQUUsR0FBRSxLQUFFLElBQUUsRUFBRTtBQUFFLGtCQUFDLE1BQUUsR0FBRSxRQUFLLE1BQUcsS0FBRSxNQUFJLE1BQUU7QUFBRyxxQkFBSSxLQUFFLEtBQUUsRUFBRyxNQUFFLE1BQUksTUFBRSxLQUFFLEVBQUUsS0FBRyxHQUFFLFVBQVUsR0FBRSxNQUFJLE1BQUUsTUFBRyxJQUFFLEtBQUUsSUFBRSxLQUFFLEdBQUUsS0FBRSxJQUFFLEVBQUU7QUFBRSxzQkFBSSxNQUFFLEdBQUUsT0FBSSxNQUFHLEVBQUUsS0FBRSxNQUFHLEdBQUUsVUFBVSxHQUFFLE1BQUcsSUFBRTtBQUFDLHlCQUFJLEtBQUUsSUFBRSxLQUFFLElBQUcsQ0FBRSxNQUFHLE1BQUUsTUFBRyxLQUFFLElBQUUsTUFBRyxLQUFFLEtBQUcsS0FBRyxLQUFFLE1BQUksTUFBRztBQUFHLDJCQUFFLEtBQUUsSUFBRSxLQUFFLEtBQUcsSUFBRSxHQUFFLEtBQUssR0FBRSxHQUFFLEtBQUUsS0FBRSxJQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUUsS0FBRSxFQUFFLEtBQUUsRUFBQztBQUFFLHVCQUFFLEtBQUssR0FBRSxHQUFFLElBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRSxLQUFFLEdBQUUsSUFBRSxJQUFFLE1BQUcsRUFBQyxHQUFFLEtBQUUsR0FBRSxFQUFFO0FBQUEsa0JBQUM7QUFBQyxrQkFBRSxJQUFFLEVBQUU7QUFBQSxjQUFDO0FBQUMscUJBQU8sR0FBRSxLQUFLLEVBQUU7QUFBQSxZQUFDO0FBQUMsaUJBQUUsRUFBQyxTQUFRLFNBQVEsTUFBSyxFQUFDLFFBQU8sR0FBRSxRQUFPLEVBQUMsR0FBRSxRQUFPLElBQUUsUUFBTyxJQUFFLFNBQVEsU0FBUyxJQUFFO0FBQUMscUJBQU8sRUFBRSxJQUFHLFNBQVMsSUFBRTtBQUFDLHVCQUFPLEdBQUUsS0FBSyxFQUFDLElBQUUsU0FBTyxHQUFFLEVBQUMsSUFBRTtBQUFBLGNBQUMsQ0FBRTtBQUFBLFlBQUMsR0FBRSxXQUFVLFNBQVMsSUFBRTtBQUFDLHFCQUFPLEVBQUUsSUFBRyxTQUFTLElB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RSxjQUFhLEdBQUUsYUFBVyxBQUFRLEtBQUssU0FBUyxHQUFFLFVBQVUsTUFBbEMsUUFBcUMsR0FBRSxJQUFJLENBQUM7QUFBRTtBQUFBLHFCQUFXLEdBQUUsVUFBVTtBQUFRLHNCQUFJLElBQUU7QUFBRSx1QkFBRSxLQUFLLFFBQVEsSUFBRSxLQUFLLFNBQVMsRUFBRSxJQUFJLEdBQUUsS0FBSyxTQUFTLEVBQUUsS0FBSyxHQUFFLEtBQUssU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFHO0FBQUU7QUFBQSxxQkFBVyxHQUFFLFVBQVU7QUFBTSxzQkFBSSxLQUFFO0FBQUUsdUJBQUUsS0FBSyxNQUFNLElBQUUsS0FBSyxTQUFTLEdBQUUsSUFBSSxDQUFDLEtBQUc7QUFBRTtBQUFBLHFCQUFXLEdBQUUsVUFBVTtBQUFRLHNCQUFJLEtBQUU7QUFBRSx1QkFBRSxLQUFLLFFBQVEsSUFBRSxLQUFLLFNBQVMsR0FBRSxJQUFJLENBQUMsS0FBRztBQUFFO0FBQUEscUJBQVcsR0FBRSxVQUFVO0FBQUcsc0JBQUksS0FBRTtBQUFFLHVCQUFFLEtBQUssWUFBWSxJQUFFLEtBQUssU0FBUyxHQUFFLE1BQU0sR0FBRSxLQUFLLFNBQVMsR0FBRSxJQUFJLENBQUMsS0FBRztBQUFFO0FBQUEscUJBQVcsR0FBRSxVQUFVO0FBQUssc0JBQUksS0FBRTtBQUFFLHVCQUFFLEtBQUssS0FBSyxJQUFFLEtBQUssWUFBWSxLQUFLLFNBQVMsR0FBRSxJQUFJLENBQUMsQ0FBQyxLQUFHO0FBQUU7QUFBQSxxQkFBVyxHQUFFLFVBQVU7QUFBUSxzQkFBSSxLQUFFLElBQUUsS0FBRSxLQUFLLFNBQVMsR0FBRSxJQUFJLEdBQUUsSUFBRSxFQUFFLEdBQUUsdUJBQXVCLEVBQUMsR0FBRSxDQUFDLEVBQUUsSUFBRyxJQUFFLEdBQUUsS0FBSyxtQkFBbUIsQ0FBQyxHQUFFLElBQUUsQ0FBQztBQUFFLHNCQUFHO0FBQUMsNkJBQVEsS0FBRyxNQUFFLFFBQU8sR0FBRSxHQUFFLFVBQVUsSUFBRyxLQUFFLEdBQUUsS0FBSyxHQUFFLENBQUMsR0FB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RyxLQUFHLE1BQUksR0FBRSxLQUFLLE1BQUcsS0FBRyxHQUFHLEdBQUUsRUFBRSxLQUFLLE1BQUcsSUFBRSxHQUFHLEdBQUUsRUFBRSxLQUFLLE1BQUksRUFBQyxJQUFHLEtBQUUsTUFBRyxJQUFFLEdBQUUsUUFBUSxHQUFFLE9BQU8sRUFBQyxDQUFDO0FBQUUsaUJBQU8sQUFBSyxNQUFFLEtBQUUsSUFBRSxPQUFYLElBQWUsR0FBRSxLQUFLLE1BQUcsS0FBRyxHQUFHLEdBQUUsRUFBRSxLQUFLLE1BQUcsSUFBRSxHQUFHLEdBQUUsRUFBRSxLQUFLLE1BQUksRUFBQyxLQUFHLEFBQUssT0FBTCxLQUFRLEdBQUUsS0FBSyxNQUFHLEtBQUcsR0FBRyxHQUFFLEVBQUUsS0FBSyxNQUFHLElBQUUsR0FBRyxLQUFHLEFBQUssT0FBTCxNQUFRLEVBQUUsS0FBSyxNQUFHLElBQUUsR0FBRyxHQUFFLElBQUUsRUFBRSxPQUFLLEVBQUUsS0FBSyxDQUFDLElBQUUsSUFBSSxFQUFFLENBQUMsSUFBRTtBQUFBLFFBQUMsR0FBRSxXQUFVLFNBQVMsSUFBRTtBQUFDLGlCQUFPLEtBQUcsRUFBRSxTQUFTLEVBQUM7QUFBQSxRQUFDLEdBQUUsV0FBVSxTQUFTLElBQUU7QUFBQyxjQUFJLElBQUUsSUFBRSxLQUFFLElBQUcsS0FBRSxHQUFFLEtBQUUsR0FBRSxRQUFPLEtBQUU7QUFBRSxlQUFJLEtBQUUsR0FBRSxLQUFFLElBQUU7QUFBSSxpQkFBRSxLQUFHLEtBQUcsTUFBSSxPQUFHLEdBQUUsTUFBRyxLQUFHLEtBQUksTUFBRyxHQUFFLE1BQUcsS0FBRyxLQUFJLE1BQUcsR0FBRSxNQUFHLElBQUUsS0FBSSxNQUFHLEdBQUUsS0FBRyxNQUFJLEtBQUcsT0FBRyxLQUFHLEdBQUU7QUFBRyxpQkFBTyxBQUFLLE1BQUUsS0FBRSxPQUFULElBQWEsT0FBRyxHQUFFLE1BQUcsS0FBRyxLQUFJLE1BQUcsR0FBRSxNQUFHLEtBQUcsS0FBSSxNQUFHLEdBQUUsTUFBRyxJQUFFLEtBQUksTUFBRyxHQUFFLEtBQUcsT0FBSSxBQUFJ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M0MsU0FBOEMsS0FBSyxTQUFPLElBQUUsQUFBUyxNQUFFLEdBQUUsT0FBTyxHQUFFLENBQUMsT0FBdkIsU0FBMkIsQUFBUSxPQUFSLFNBQVcsQUFBUSxPQUFSLFNBQVcsQUFBUSxPQUFSLFNBQVcsQUFBUSxPQUFSLFNBQVcsQUFBUSxPQUFSLFFBQVUsS0FBSyxTQUFPLElBQUUsQUFBUSxNQUFFLEdBQUUsT0FBTyxHQUFFLENBQUMsT0FBdEIsUUFBMEIsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLFFBQVUsQUFBTyxPQUFQLE9BQVMsS0FBSyxTQUFPLElBQUcsTUFBRSxLQUFLLE9BQU8sS0FBSyxRQUFPLGVBQWUsUUFBUSxFQUFDLEtBQUcsS0FBRyxFQUFFLEtBQUs7QUFBQTtBQUFPLHVCQUFPLEtBQUssVUFBUSxNQUFHLEtBQUsscUJBQXFCLEdBQUUsRUFBQyxNQUFLLEdBQUUsT0FBTSxJQUFFLFlBQVcsS0FBSyxZQUFXLFdBQVUsS0FBSyxXQUFVLE9BQU0sSUFBRSxLQUFJLEtBQUssTUFBSztBQUFBLGNBQUMsR0FBRSxHQUFFLFVBQVUsaUJBQWUsU0FBUyxJQUFFO0FBQUMseUJBQVEsS0FBRSxJQUFHLENBQUMsS0FBSyxJQUFJLEtBQUcsR0FBRSxVQUFVLFdBQVcsS0FBSyxPQUFPLFdBQVcsS0FBSyxLQUFLLENBQUM7QUFBRyx3QkFBRyxLQUFLLE9BQU8sS0FBSztBQUFTLHVCQUFPLEFBQUksR0FBRSxXQUFOLEtBQWMsS0FBSyxxQkFBcUIsR0FBRSxHQUFFLFVBQVUsa0JB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SSxNQUFLLFFBQUksT0FBTSxRQUFJLEtBQUksUUFBSSxLQUFJLFFBQUksS0FBSSxRQUFJLE1BQUssUUFBSSxLQUFJLFFBQUksUUFBTyxRQUFJLE1BQUssUUFBSSxNQUFLLFFBQUksT0FBTSxRQUFJLE9BQU0sUUFBSSxNQUFLLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxNQUFLLFFBQUksTUFBSyxRQUFJLE9BQU0sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksUUFBTyxRQUFJLE1BQUssUUFBSSxPQUFNLFFBQUksT0FBTSxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxNQUFLLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksTUFBSyxRQUFJLEtBQUksUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksUUFBTyxRQUFJLE1BQUssUUFBSSxPQUFNLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLE1BQUssUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLE9BQU0sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxRQUFPLFFBQUksTUFBSyxRQUFJLE9BQU0sUUFBSSxPQUFNLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksT0FBTSxRQUFJLE1BQUssUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxNQUFLLFFBQUksS0FBSSxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLE9BQU0sUUFBSSxRQUFPLFFBQUksTUFBSyxRQUFJLFFBQU8sUUFBSSxRQUFPLFFBQUksUUFBTyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksTUFBSyxRQUFJLFFBQU8sUUFBSSxPQUFNLFFBQUksTUFBSyxRQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksUUFBTyxVQUFJLFFBQU8sVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLFNBQVEsVUFBSSxNQUFLLFVBQUksS0FBSSxVQUFJLE9BQU0sVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLFFBQU8sVUFBSSxJQUFHLFVBQUksSUFBRyxVQUFJLElBQUcsVUFBSSxTQUFRLFVBQUksSUFBRyxVQUFJLEtBQUksVUFBSSxPQUFNLFVBQUksS0FBSSxVQUFJLFNBQVEsVUFBSSxLQUFJLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLFNBQVEsVUFBSSxNQUFLLFVBQUksS0FBSSxVQUFJLE9BQU0sVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLFFBQU8sVUFBSSxJQUFHLFVBQUksSUFBRyxVQUFJLElBQUcsVUFBSSxTQUFRLFVBQUksSUFBRyxVQUFJLEtBQUksVUFBSSxRQUFPLFVBQUksT0FBTSxVQUFJLEtBQUksVUFBSSxTQUFRLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxLQUFJLFVBQUksT0FBTSxVQUFJLFVBQVMsVUFBSSxPQUFNLFVBQUksS0FBSSxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksUUFBTyxVQUFJLE1BQUssVUFBSSxLQUFJLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLFFBQU8sVUFBSSxRQUFPLFVBQUksTUFBSyxVQUFJLFFBQU8sVUFBSSxRQUFPLFVBQUksT0FBTSxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksUUFBTyxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxTQUFRLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxRQUFPLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksT0FBTSxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksSUFBRyxVQUFJLE1BQUssVUFBSSxLQUFJLFVBQUksT0FBTSxVQUFJLFFBQU8sVUFBSSxPQUFNLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxLQUFJLFVBQUksS0FBSSxVQUFJLElBQUcsVUFBSSxLQUFJLFVBQUksS0FBSSxVQUFJLEtBQUksVUFBSSxRQUFPLFVBQUksS0FBSSxVQUFJLE1BQUssVUFBSSxPQUFNLFVBQUksSUFBRyxVQUFJLE9BQU0sVUFBSSxJQUFHLFVBQUksSUFBRyxVQUFJLEtBQUksVUFBSSxLQUFJLFVBQUksTUFBSyxVQUFJLE1BQUssVUFBSSxNQUFLLFVBQUksT0FBTSxVQUFJLFFBQU8sVUFBSSxNQUFLLFVBQUksTUFBSyxVQUFJLE9BQU0sVUFBSSxPQUFNLFVBQUksUUFBTyxVQUFJLFFBQU8sVUFBSSxLQUFJLFVBQUksUUFBTyxVQUFJLE9BQU0sVUFBSSxRQUFPLFVBQUksT0FBTSxVQUFJLE1BQUssVUFBSSxNQUFLLFNBQUc7QUFBQSxVQUFDLEdBQUUsU0FBUyxJQUFFLElBQUUsSUFBRTtBQUFDO0FBQWEsbUJBQU8sZUFBZSxJQUFFLGNBQWEsRUFBQyxPQUFNLEtBQUUsQ0FBQztBQUFFLGdCQUFJLEtBQUUsR0FBRSxFQUFFLEdBQUUsS0FBRSxHQUFFLEVBQUUsR0FBRSxJQUFFLEdBQUUsRUFBRSxHQUFFLEtBQUUsV0FBVTtBQUFDLDRCQUFZO0FBQUMscUJBQUssU0FBTyxDQUFDLEdBQUUsS0FBSyxRQUFNLEtBQUssUUFBTTtBQUFBLGNBQUU7QUFBQyxxQkFBTyxHQUFFLFVBQVUsMkJBQXlCLFNBQVMsSUFBRTtBQUFDLHVCQUFNLENBQUMsS0FBSSxLQUFJLEtBQUksTUFBSyxVQUFTLGNBQWEs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QUMsSUFBRSxLQUFLLEtBQUssSUFBRTtBQUFBLFVBQUcsR0FBRSxHQUFFLFVBQVUsY0FBWSxTQUFTLElBQUUsSUFBRTtBQUFDLG1CQUFPLEtBQUssT0FBTyxJQUFFLEtBQUssV0FBVyxJQUFFLE1BQUksS0FBSyxLQUFLLElBQUUsS0FBSyxLQUFLLEtBQUssZ0JBQWdCLFFBQVEsR0FBRyxJQUFFLEtBQUssS0FBSyxJQUFFLEtBQUssS0FBSyxLQUFFLEtBQUUsTUFBSSxLQUFFLEVBQUMsSUFBRSxLQUFLLEtBQUssSUFBRTtBQUFBLFVBQUcsR0FBRSxHQUFFLFVBQVUsUUFBTSxTQUFTLElBQUU7QUFBQyxtQkFBTyxLQUFLLE9BQU8sSUFBRSxLQUFLLFdBQVcsSUFBRSxNQUFJLEtBQUssS0FBSyxJQUFFLEtBQUssS0FBSyxLQUFLLGdCQUFnQixRQUFRLEtBQUssSUFBRSxLQUFLLEtBQUssSUFBRSxLQUFLLEtBQUssRUFBQyxJQUFFLEtBQUssS0FBSyxJQUFFO0FBQUEsVUFBRyxHQUFFLEdBQUUsVUFBVSxZQUFVLFNBQVMsSUFBRSxJQUFFO0FBQUMsbUJBQU8sS0FBSyxPQUFPLElBQUUsS0FBSyxXQUFXLENBQUMsSUFBRSxNQUFJLEtBQUssS0FBSyxJQUFFLEtBQUssS0FBSyxLQUFLLGdCQUFnQixRQUFRLE1BQUksRUFBQyxJQUFFLEtBQUssS0FBSyxJQUFFLEtBQUssS0FBSyxFQUFDLElBQUUsS0FBSyxLQUFLLElBQUU7QUFBQSxVQUFHLEdBQUUsR0FBRSxVQUFVLGVBQWEsU0FBUyxJQUFFO0FBQUMsZ0JBQUksS0FBRSxLQUFLLE9BQU8sSUFBRSxLQUFLLFdBQVcsSUFBRSxNQUFJLEtBQUssS0FBSyxJQUFFLEtBQUssS0FBSyxFQUFDLElBQUUsS0FBSyxLQUFLLElBQUU7QUFBSSxtQkFBTyxLQUFLLG9CQUFtQixLQUFLLFVBQVEsTUFBRyxNQUFHLEtBQUssV0FBVyxJQUFFLEtBQUssS0FBSyxLQUFLLGdCQUFnQixRQUFRLElBQUksSUFBRSxLQUFLLEtBQUssSUFBRSxLQUFJLEtBQUssYUFBYSxLQUFLLEtB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
