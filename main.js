/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/xmlbuilder2/lib/xmlbuilder2.min.js
var require_xmlbuilder2_min = __commonJS({
  "node_modules/xmlbuilder2/lib/xmlbuilder2.min.js"(exports2, module2) {
    !function(e, t) {
      typeof exports2 == "object" && typeof module2 == "object" ? module2.exports = t() : typeof define == "function" && define.amd ? define([], t) : typeof exports2 == "object" ? exports2.xmlbuilder2 = t() : e.xmlbuilder2 = t();
    }(exports2, function() {
      return function(e) {
        var t = {};
        function r(n) {
          if (t[n])
            return t[n].exports;
          var i = t[n] = { i: n, l: false, exports: {} };
          return e[n].call(i.exports, i, i.exports, r), i.l = true, i.exports;
        }
        return r.m = e, r.c = t, r.d = function(e2, t2, n) {
          r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
        }, r.r = function(e2) {
          typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, r.t = function(e2, t2) {
          if (1 & t2 && (e2 = r(e2)), 8 & t2)
            return e2;
          if (4 & t2 && typeof e2 == "object" && e2 && e2.__esModule)
            return e2;
          var n = Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && typeof e2 != "string")
            for (var i in e2)
              r.d(n, i, function(t3) {
                return e2[t3];
              }.bind(null, i));
          return n;
        }, r.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return r.d(t2, "a", t2), t2;
        }, r.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, r.p = "", r(r.s = 184);
      }([function(e, t, r) {
        "use strict";
        function n(e2) {
          for (var r2 in e2)
            t.hasOwnProperty(r2) || (t[r2] = e2[r2]);
        }
        Object.defineProperty(t, "__esModule", { value: true }), n(r(240)), n(r(251)), n(r(175)), n(r(107)), n(r(29)), n(r(73)), n(r(106)), n(r(30)), n(r(252)), n(r(52)), n(r(97)), n(r(253)), n(r(37)), n(r(51)), n(r(173)), n(r(176)), n(r(172)), n(r(108)), n(r(254)), n(r(255)), n(r(256)), n(r(72)), n(r(177)), n(r(105)), n(r(17)), n(r(257)), n(r(12)), n(r(174));
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(212);
        t.FixedSizeSet = i.FixedSizeSet;
        var o = r(213);
        t.ObjectCache = o.ObjectCache;
        var a = r(214);
        t.CompareCache = a.CompareCache;
        var s = r(215);
        t.Lazy = s.Lazy;
        var u = r(216);
        function l(e2, t2, r2) {
          if (m(e2))
            e2.forEach(function(e3, n3) {
              return t2.call(r2, n3, e3);
            });
          else
            for (var n2 in e2)
              e2.hasOwnProperty(n2) && t2.call(r2, n2, e2[n2]);
        }
        function c(e2) {
          var t2, r2;
          if (h(e2))
            return e2;
          if (f(e2)) {
            var i2 = [];
            try {
              for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                i2.push(c(s2));
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return i2;
          }
          if (p(e2)) {
            i2 = {};
            for (var u2 in e2)
              if (e2.hasOwnProperty(u2)) {
                var l2 = e2[u2];
                i2[u2] = c(l2);
              }
            return i2;
          }
          return e2;
        }
        function h(e2) {
          return !!e2 && Object.prototype.toString.call(e2) === "[object Function]";
        }
        function p(e2) {
          var t2 = typeof e2;
          return !!e2 && (t2 === "function" || t2 === "object");
        }
        function f(e2) {
          return Array.isArray(e2);
        }
        function d(e2) {
          return e2 instanceof Set;
        }
        function m(e2) {
          return e2 instanceof Map;
        }
        function y(e2) {
          if (p(e2)) {
            var t2 = Object.getPrototypeOf(e2), r2 = t2.constructor;
            return t2 && r2 && typeof r2 == "function" && r2 instanceof r2 && Function.prototype.toString.call(r2) === Function.prototype.toString.call(Object);
          }
          return false;
        }
        t.StringWalker = u.StringWalker, t.applyMixin = function(e2, t2) {
          for (var r2 = [], n2 = 2; n2 < arguments.length; n2++)
            r2[n2 - 2] = arguments[n2];
          Object.getOwnPropertyNames(t2.prototype).forEach(function(n3) {
            if (n3 !== "constructor") {
              if (r2.indexOf(n3) !== -1) {
                var i2 = Object.getOwnPropertyDescriptor(e2.prototype, n3);
                i2 && Object.defineProperty(e2.prototype, "_" + n3, i2);
              }
              var o2 = Object.getOwnPropertyDescriptor(t2.prototype, n3);
              o2 && Object.defineProperty(e2.prototype, n3, o2);
            }
          });
        }, t.applyDefaults = function e2(t2, r2, n2) {
          n2 === void 0 && (n2 = false);
          var i2 = c(t2 || {});
          return l(r2, function(t3, r3) {
            y(r3) ? i2[t3] = e2(i2[t3], r3, n2) : (n2 || i2[t3] === void 0) && (i2[t3] = r3);
          }), i2;
        }, t.forEachArray = function(e2, t2, r2) {
          e2.forEach(t2, r2);
        }, t.forEachObject = l, t.arrayLength = function(e2) {
          return d(e2) ? e2.size : e2.length;
        }, t.objectLength = function(e2) {
          return m(e2) ? e2.size : Object.keys(e2).length;
        }, t.getObjectValue = function(e2, t2) {
          return m(e2) ? e2.get(t2) : e2[t2];
        }, t.removeObjectValue = function(e2, t2) {
          m(e2) ? e2.delete(t2) : delete e2[t2];
        }, t.clone = c, t.isBoolean = function(e2) {
          return typeof e2 == "boolean";
        }, t.isNumber = function(e2) {
          return typeof e2 == "number";
        }, t.isString = function(e2) {
          return typeof e2 == "string";
        }, t.isFunction = h, t.isObject = p, t.isArray = f, t.isSet = d, t.isMap = m, t.isEmpty = function(e2) {
          if (f(e2))
            return !e2.length;
          if (d(e2))
            return !e2.size;
          if (m(e2))
            return !e2.size;
          if (p(e2)) {
            for (var t2 in e2)
              if (e2.hasOwnProperty(t2))
                return false;
            return true;
          }
          return false;
        }, t.isPlainObject = y, t.isIterable = function(e2) {
          return e2 && typeof e2[Symbol.iterator] == "function";
        }, t.getValue = function(e2) {
          return h(e2.valueOf) ? e2.valueOf() : e2;
        }, t.utf8Encode = function(e2) {
          for (var t2 = new Uint8Array(4 * e2.length), r2 = 0, n2 = 0; n2 < e2.length; n2++) {
            var i2 = e2.charCodeAt(n2);
            if (i2 < 128)
              t2[r2++] = i2;
            else {
              if (i2 < 2048)
                t2[r2++] = i2 >> 6 | 192;
              else {
                if (i2 > 55295 && i2 < 56320) {
                  if (++n2 >= e2.length)
                    throw new Error("Incomplete surrogate pair.");
                  var o2 = e2.charCodeAt(n2);
                  if (o2 < 56320 || o2 > 57343)
                    throw new Error("Invalid surrogate character.");
                  i2 = 65536 + ((1023 & i2) << 10) + (1023 & o2), t2[r2++] = i2 >> 18 | 240, t2[r2++] = i2 >> 12 & 63 | 128;
                } else
                  t2[r2++] = i2 >> 12 | 224;
                t2[r2++] = i2 >> 6 & 63 | 128;
              }
              t2[r2++] = 63 & i2 | 128;
            }
          }
          return t2.subarray(0, r2);
        }, t.utf8Decode = function(e2) {
          for (var t2 = "", r2 = 0; r2 < e2.length; ) {
            var n2 = e2[r2++];
            if (n2 > 127)
              if (n2 > 191 && n2 < 224) {
                if (r2 >= e2.length)
                  throw new Error("Incomplete 2-byte sequence.");
                n2 = (31 & n2) << 6 | 63 & e2[r2++];
              } else if (n2 > 223 && n2 < 240) {
                if (r2 + 1 >= e2.length)
                  throw new Error("Incomplete 3-byte sequence.");
                n2 = (15 & n2) << 12 | (63 & e2[r2++]) << 6 | 63 & e2[r2++];
              } else {
                if (!(n2 > 239 && n2 < 248))
                  throw new Error("Unknown multi-byte start.");
                if (r2 + 2 >= e2.length)
                  throw new Error("Incomplete 4-byte sequence.");
                n2 = (7 & n2) << 18 | (63 & e2[r2++]) << 12 | (63 & e2[r2++]) << 6 | 63 & e2[r2++];
              }
            if (n2 <= 65535)
              t2 += String.fromCharCode(n2);
            else {
              if (!(n2 <= 1114111))
                throw new Error("Code point exceeds UTF-16 limit.");
              n2 -= 65536, t2 += String.fromCharCode(n2 >> 10 | 55296), t2 += String.fromCharCode(1023 & n2 | 56320);
            }
          }
          return t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
          e2[e2.Before = 0] = "Before", e2[e2.Equal = 1] = "Equal", e2[e2.After = 2] = "After";
        }(t.BoundaryPosition || (t.BoundaryPosition = {})), function(e2) {
          e2[e2.None = 0] = "None", e2[e2.Capturing = 1] = "Capturing", e2[e2.AtTarget = 2] = "AtTarget", e2[e2.Bubbling = 3] = "Bubbling";
        }(t.EventPhase || (t.EventPhase = {})), function(e2) {
          e2[e2.Element = 1] = "Element", e2[e2.Attribute = 2] = "Attribute", e2[e2.Text = 3] = "Text", e2[e2.CData = 4] = "CData", e2[e2.EntityReference = 5] = "EntityReference", e2[e2.Entity = 6] = "Entity", e2[e2.ProcessingInstruction = 7] = "ProcessingInstruction", e2[e2.Comment = 8] = "Comment", e2[e2.Document = 9] = "Document", e2[e2.DocumentType = 10] = "DocumentType", e2[e2.DocumentFragment = 11] = "DocumentFragment", e2[e2.Notation = 12] = "Notation";
        }(t.NodeType || (t.NodeType = {})), function(e2) {
          e2[e2.Disconnected = 1] = "Disconnected", e2[e2.Preceding = 2] = "Preceding", e2[e2.Following = 4] = "Following", e2[e2.Contains = 8] = "Contains", e2[e2.ContainedBy = 16] = "ContainedBy", e2[e2.ImplementationSpecific = 32] = "ImplementationSpecific";
        }(t.Position || (t.Position = {})), function(e2) {
          e2[e2.Accept = 1] = "Accept", e2[e2.Reject = 2] = "Reject", e2[e2.Skip = 3] = "Skip";
        }(t.FilterResult || (t.FilterResult = {})), function(e2) {
          e2[e2.All = 4294967295] = "All", e2[e2.Element = 1] = "Element", e2[e2.Attribute = 2] = "Attribute", e2[e2.Text = 4] = "Text", e2[e2.CDataSection = 8] = "CDataSection", e2[e2.EntityReference = 16] = "EntityReference", e2[e2.Entity = 32] = "Entity", e2[e2.ProcessingInstruction = 64] = "ProcessingInstruction", e2[e2.Comment = 128] = "Comment", e2[e2.Document = 256] = "Document", e2[e2.DocumentType = 512] = "DocumentType", e2[e2.DocumentFragment = 1024] = "DocumentFragment", e2[e2.Notation = 2048] = "Notation";
        }(t.WhatToShow || (t.WhatToShow = {})), function(e2) {
          e2[e2.StartToStart = 0] = "StartToStart", e2[e2.StartToEnd = 1] = "StartToEnd", e2[e2.EndToEnd = 2] = "EndToEnd", e2[e2.EndToStart = 3] = "EndToStart";
        }(t.HowToCompare || (t.HowToCompare = {}));
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(241);
        t.Cast = n.Cast;
        var i = r(150);
        t.Guard = i.Guard;
        var o = r(242);
        t.EmptySet = o.EmptySet;
      }, function(e, t, r) {
        var n = r(11), i = r(55).f, o = r(21), a = r(25), s = r(80), u = r(119), l = r(123);
        e.exports = function(e2, t2) {
          var r2, c, h, p, f, d = e2.target, m = e2.global, y = e2.stat;
          if (r2 = m ? n : y ? n[d] || s(d, {}) : (n[d] || {}).prototype)
            for (c in t2) {
              if (p = t2[c], h = e2.noTargetGet ? (f = i(r2, c)) && f.value : r2[c], !l(m ? c : d + (y ? "." : "#") + c, e2.forced) && h !== void 0) {
                if (typeof p == typeof h)
                  continue;
                u(p, h);
              }
              (e2.sham || h && h.sham) && o(p, "sham", true), a(r2, c, p, e2);
            }
        };
      }, function(e, t, r) {
        var n = r(11), i = r(81), o = r(14), a = r(58), s = r(86), u = r(124), l = i("wks"), c = n.Symbol, h = u ? c : c && c.withoutSetter || a;
        e.exports = function(e2) {
          return o(l, e2) || (s && o(c, e2) ? l[e2] = c[e2] : l[e2] = h("Symbol." + e2)), l[e2];
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(1), i = r(29), o = function() {
          function e2() {
            this._features = { mutationObservers: true, customElements: true, slots: true, steps: true }, this._window = null, this._compareCache = new n.CompareCache(), this._rangeList = new n.FixedSizeSet();
          }
          return e2.prototype.setFeatures = function(e3) {
            if (e3 === void 0 && (e3 = true), n.isObject(e3))
              for (var t2 in e3)
                this._features[t2] = e3[t2] || false;
            else
              for (var t2 in this._features)
                this._features[t2] = e3;
          }, Object.defineProperty(e2.prototype, "features", { get: function() {
            return this._features;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "window", { get: function() {
            return this._window === null && (this._window = i.create_window()), this._window;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "compareCache", { get: function() {
            return this._compareCache;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "rangeList", { get: function() {
            return this._rangeList;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2, "instance", { get: function() {
            return e2._instance || (e2._instance = new e2()), e2._instance;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.dom = o.instance;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = n(r(228));
        t.base64 = i;
        var o = n(r(146));
        t.byte = o;
        var a = n(r(147));
        t.byteSequence = a;
        var s = n(r(96));
        t.codePoint = s;
        var u = n(r(232));
        t.json = u;
        var l = n(r(233));
        t.list = l;
        var c = n(r(234));
        t.map = c;
        var h = n(r(235));
        t.namespace = h;
        var p = n(r(236));
        t.queue = p;
        var f = n(r(237));
        t.set = f;
        var d = n(r(238));
        t.stack = d;
        var m = n(r(239));
        t.string = m;
      }, function(e, t) {
        e.exports = function(e2) {
          try {
            return !!e2();
          } catch (e3) {
            return true;
          }
        };
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = e2.call(this, r2) || this;
            return n2.name = t3, n2;
          }
          return i(t2, e2), t2;
        }(Error);
        t.DOMException = o;
        var a = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "DOMStringSizeError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.DOMStringSizeError = a;
        var s = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "WrongDocumentError", "The object is in the wrong document. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.WrongDocumentError = s;
        var u = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NoDataAllowedError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NoDataAllowedError = u;
        var l = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NoModificationAllowedError", "The object can not be modified. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NoModificationAllowedError = l;
        var c = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NotSupportedError", "The operation is not supported. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NotSupportedError = c;
        var h = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InUseAttributeError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InUseAttributeError = h;
        var p = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidStateError", "The object is in an invalid state. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidStateError = p;
        var f = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidModificationError", "The object can not be modified in this way. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidModificationError = f;
        var d = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NamespaceError", "The operation is not allowed by Namespaces in XML. [XMLNS] " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NamespaceError = d;
        var m = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidAccessError", "The object does not support the operation or argument. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidAccessError = m;
        var y = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "ValidationError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.ValidationError = y;
        var v = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "TypeMismatchError", t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.TypeMismatchError = v;
        var _ = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "SecurityError", "The operation is insecure. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.SecurityError = _;
        var g = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NetworkError", "A network error occurred. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NetworkError = g;
        var b = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "AbortError", "The operation was aborted. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.AbortError = b;
        var x = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "URLMismatchError", "The given URL does not match another URL. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.URLMismatchError = x;
        var w = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "QuotaExceededError", "The quota has been exceeded. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.QuotaExceededError = w;
        var E = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "TimeoutError", "The operation timed out. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.TimeoutError = E;
        var D = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidNodeTypeError", "The supplied node is incorrect or has an incorrect ancestor for this operation. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidNodeTypeError = D;
        var S = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "DataCloneError", "The object can not be cloned. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.DataCloneError = S;
        var C = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NotImplementedError", "The DOM method is not implemented by this module. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NotImplementedError = C;
        var A = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "HierarchyRequestError", "The operation would yield an incorrect node tree. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.HierarchyRequestError = A;
        var N = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "NotFoundError", "The object can not be found here. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.NotFoundError = N;
        var T = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "IndexSizeError", "The index is not in the allowed range. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.IndexSizeError = T;
        var O = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "SyntaxError", "The string did not match the expected pattern. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.SyntaxError = O;
        var F = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, "InvalidCharacterError", "The string contains invalid characters. " + t3) || this;
          }
          return i(t2, e2), t2;
        }(o);
        t.InvalidCharacterError = F;
      }, function(e, t, r) {
        "use strict";
        var n = r(53), i = ["kind", "resolve", "construct", "instanceOf", "predicate", "represent", "defaultStyle", "styleAliases"], o = ["scalar", "sequence", "mapping"];
        e.exports = function(e2, t2) {
          var r2, a;
          if (t2 = t2 || {}, Object.keys(t2).forEach(function(t3) {
            if (i.indexOf(t3) === -1)
              throw new n('Unknown option "' + t3 + '" is met in definition of "' + e2 + '" YAML type.');
          }), this.tag = e2, this.kind = t2.kind || null, this.resolve = t2.resolve || function() {
            return true;
          }, this.construct = t2.construct || function(e3) {
            return e3;
          }, this.instanceOf = t2.instanceOf || null, this.predicate = t2.predicate || null, this.represent = t2.represent || null, this.defaultStyle = t2.defaultStyle || null, this.styleAliases = (r2 = t2.styleAliases || null, a = {}, r2 !== null && Object.keys(r2).forEach(function(e3) {
            r2[e3].forEach(function(t3) {
              a[String(t3)] = e3;
            });
          }), a), o.indexOf(this.kind) === -1)
            throw new n('Unknown kind "' + this.kind + '" is specified for "' + e2 + '" YAML type.');
        };
      }, function(e, t, r) {
        (function(t2) {
          var r2 = function(e2) {
            return e2 && e2.Math == Math && e2;
          };
          e.exports = r2(typeof globalThis == "object" && globalThis) || r2(typeof window == "object" && window) || r2(typeof self == "object" && self) || r2(typeof t2 == "object" && t2) || Function("return this")();
        }).call(this, r(78));
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.idl_defineConst = function(e2, t2, r2) {
          Object.defineProperty(e2, t2, { writable: false, enumerable: true, configurable: false, value: r2 });
        };
      }, function(e, t) {
        e.exports = function(e2) {
          return typeof e2 == "object" ? e2 !== null : typeof e2 == "function";
        };
      }, function(e, t) {
        var r = {}.hasOwnProperty;
        e.exports = function(e2, t2) {
          return r.call(e2, t2);
        };
      }, function(e, t, r) {
        var n = r(16), i = r(115), o = r(18), a = r(56), s = Object.defineProperty;
        t.f = n ? s : function(e2, t2, r2) {
          if (o(e2), t2 = a(t2, true), o(r2), i)
            try {
              return s(e2, t2, r2);
            } catch (e3) {
            }
          if ("get" in r2 || "set" in r2)
            throw TypeError("Accessors not supported");
          return "value" in r2 && (e2[t2] = r2.value), e2;
        };
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !n(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(3), o = r(2);
        function a(e2, t2, r2) {
          if (r2 === void 0 && (r2 = false), r2 && i.Guard.isElementNode(t2) && i.Guard.isShadowRoot(t2.shadowRoot) && t2.shadowRoot._firstChild)
            return t2.shadowRoot._firstChild;
          if (t2._firstChild)
            return t2._firstChild;
          if (t2 === e2)
            return null;
          if (t2._nextSibling)
            return t2._nextSibling;
          for (var n2 = t2._parent; n2 && n2 !== e2; ) {
            if (n2._nextSibling)
              return n2._nextSibling;
            n2 = n2._parent;
          }
          return null;
        }
        function s() {
          var e2;
          return (e2 = {})[Symbol.iterator] = function() {
            return { next: function() {
              return { done: true, value: null };
            } };
          }, e2;
        }
        function u(e2, t2, r2, n2) {
          t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false);
          for (var i2 = t2 ? e2 : a(e2, e2, r2); i2 && n2 && !n2(i2); )
            i2 = a(e2, i2, r2);
          return i2;
        }
        function l(e2, t2, r2, n2, i2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = a(e2, t2, n2); o2 && i2 && !i2(o2); )
            o2 = a(e2, o2, n2);
          return o2;
        }
        function c(e2, t2, r2, n2) {
          var i2;
          return t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false), t2 || e2._children.size !== 0 ? ((i2 = {})[Symbol.iterator] = function() {
            var i3 = t2 ? e2 : a(e2, e2, r2);
            return { next: function() {
              for (; i3 && n2 && !n2(i3); )
                i3 = a(e2, i3, r2);
              if (i3 === null)
                return { done: true, value: null };
              var t3 = { done: false, value: i3 };
              return i3 = a(e2, i3, r2), t3;
            } };
          }, i2) : s();
        }
        function h(e2, t2, r2) {
          t2 === void 0 && (t2 = false);
          for (var n2 = t2 ? e2 : e2._parent; n2 && r2 && !r2(n2); )
            n2 = n2._parent;
          return n2;
        }
        function p(e2, t2, r2, n2) {
          r2 === void 0 && (r2 = false);
          for (var i2 = t2._parent; i2 && n2 && !n2(i2); )
            i2 = i2._parent;
          return i2;
        }
        function f(e2) {
          return i.Guard.isDocumentTypeNode(e2) ? 0 : i.Guard.isCharacterDataNode(e2) ? e2._data.length : e2._children.size;
        }
        function d(e2, t2) {
          if (t2 === void 0 && (t2 = false), t2) {
            var r2 = d(e2, false);
            return i.Guard.isShadowRoot(r2) ? d(r2._host, true) : r2;
          }
          return e2._parent ? d(e2._parent) : e2;
        }
        function m(e2, t2, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var o2 = r2 ? e2 : n2 && i.Guard.isShadowRoot(e2) ? e2._host : e2._parent; o2 !== null; ) {
            if (o2 === t2)
              return true;
            o2 = n2 && i.Guard.isShadowRoot(o2) ? o2._host : o2._parent;
          }
          return false;
        }
        function y(e2) {
          for (var t2 = d(e2), r2 = 0, n2 = u(t2); n2 !== null; ) {
            if (r2++, n2 === e2)
              return r2;
            n2 = l(t2, n2);
          }
          return -1;
        }
        t.tree_getFirstDescendantNode = u, t.tree_getNextDescendantNode = l, t.tree_getDescendantNodes = c, t.tree_getDescendantElements = function(e2, t2, r2, n2) {
          var o2;
          return t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false), t2 || e2._children.size !== 0 ? ((o2 = {})[Symbol.iterator] = function() {
            var o3 = c(e2, t2, r2, function(e3) {
              return i.Guard.isElementNode(e3);
            })[Symbol.iterator](), a2 = o3.next().value;
            return { next: function() {
              for (; a2 && n2 && !n2(a2); )
                a2 = o3.next().value;
              if (a2 === null)
                return { done: true, value: null };
              var e3 = { done: false, value: a2 };
              return a2 = o3.next().value, e3;
            } };
          }, o2) : s();
        }, t.tree_getSiblingNodes = function(e2, t2, r2) {
          var n2;
          return t2 === void 0 && (t2 = false), e2._parent && e2._parent._children.size !== 0 ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = e2._parent ? e2._parent._firstChild : null;
            return { next: function() {
              for (; n3 && (r2 && !r2(n3) || !t2 && n3 === e2); )
                n3 = n3._nextSibling;
              if (n3 === null)
                return { done: true, value: null };
              var i2 = { done: false, value: n3 };
              return n3 = n3._nextSibling, i2;
            } };
          }, n2) : s();
        }, t.tree_getFirstAncestorNode = h, t.tree_getNextAncestorNode = p, t.tree_getAncestorNodes = function(e2, t2, r2) {
          var n2;
          return t2 === void 0 && (t2 = false), t2 || e2._parent ? ((n2 = {})[Symbol.iterator] = function() {
            var n3 = h(e2, t2, r2);
            return { next: function() {
              if (n3 === null)
                return { done: true, value: null };
              var e3 = { done: false, value: n3 };
              return n3 = p(0, n3, t2, r2), e3;
            } };
          }, n2) : s();
        }, t.tree_getCommonAncestor = function(e2, t2) {
          if (e2 === t2)
            return e2._parent;
          for (var r2 = [], n2 = [], i2 = h(e2, true); i2 !== null; )
            r2.push(i2), i2 = p(0, i2, true);
          for (var o2 = h(t2, true); o2 !== null; )
            n2.push(o2), o2 = p(0, o2, true);
          for (var a2 = r2.length, s2 = n2.length, u2 = null, l2 = Math.min(a2, s2); l2 > 0; l2--) {
            var c2 = r2[--a2];
            if (c2 !== n2[--s2])
              break;
            u2 = c2;
          }
          return u2;
        }, t.tree_getFollowingNode = function(e2, t2) {
          if (t2._firstChild)
            return t2._firstChild;
          if (t2._nextSibling)
            return t2._nextSibling;
          for (; ; ) {
            var r2 = t2._parent;
            if (r2 === null || r2 === e2)
              return null;
            if (r2._nextSibling)
              return r2._nextSibling;
            t2 = r2;
          }
        }, t.tree_getPrecedingNode = function(e2, t2) {
          return t2 === e2 ? null : t2._previousSibling ? (t2 = t2._previousSibling)._lastChild ? t2._lastChild : t2 : t2._parent;
        }, t.tree_isConstrained = function e2(t2) {
          var r2, i2, a2, s2, u2, l2;
          switch (t2._nodeType) {
            case o.NodeType.Document:
              var c2 = false, h2 = false;
              try {
                for (var p2 = n(t2._children), f2 = p2.next(); !f2.done; f2 = p2.next()) {
                  switch (f2.value._nodeType) {
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.Comment:
                      break;
                    case o.NodeType.DocumentType:
                      if (c2 || h2)
                        return false;
                      c2 = true;
                      break;
                    case o.NodeType.Element:
                      if (h2)
                        return false;
                      h2 = true;
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  f2 && !f2.done && (i2 = p2.return) && i2.call(p2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              break;
            case o.NodeType.DocumentFragment:
            case o.NodeType.Element:
              try {
                for (var d2 = n(t2._children), m2 = d2.next(); !m2.done; m2 = d2.next()) {
                  switch (m2.value._nodeType) {
                    case o.NodeType.Element:
                    case o.NodeType.Text:
                    case o.NodeType.ProcessingInstruction:
                    case o.NodeType.CData:
                    case o.NodeType.Comment:
                      break;
                    default:
                      return false;
                  }
                }
              } catch (e3) {
                a2 = { error: e3 };
              } finally {
                try {
                  m2 && !m2.done && (s2 = d2.return) && s2.call(d2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              break;
            case o.NodeType.DocumentType:
            case o.NodeType.Text:
            case o.NodeType.ProcessingInstruction:
            case o.NodeType.CData:
            case o.NodeType.Comment:
              return !t2.hasChildNodes();
          }
          try {
            for (var y2 = n(t2._children), v = y2.next(); !v.done; v = y2.next()) {
              if (!e2(v.value))
                return false;
            }
          } catch (e3) {
            u2 = { error: e3 };
          } finally {
            try {
              v && !v.done && (l2 = y2.return) && l2.call(y2);
            } finally {
              if (u2)
                throw u2.error;
            }
          }
          return true;
        }, t.tree_nodeLength = f, t.tree_isEmpty = function(e2) {
          return f(e2) === 0;
        }, t.tree_rootNode = d, t.tree_isDescendantOf = function(e2, t2, r2, n2) {
          r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
          for (var i2 = u(e2, r2, n2); i2 !== null; ) {
            if (i2 === t2)
              return true;
            i2 = l(e2, i2, r2, n2);
          }
          return false;
        }, t.tree_isAncestorOf = m, t.tree_isHostIncludingAncestorOf = function e2(t2, r2, n2) {
          if (n2 === void 0 && (n2 = false), m(t2, r2, n2))
            return true;
          var o2 = d(t2);
          return !(!i.Guard.isDocumentFragmentNode(o2) || o2._host === null || !e2(o2._host, r2, n2));
        }, t.tree_isSiblingOf = function(e2, t2, r2) {
          return r2 === void 0 && (r2 = false), e2 !== t2 ? e2._parent !== null && e2._parent === t2._parent : !!r2;
        }, t.tree_isPreceding = function(e2, t2) {
          var r2 = y(e2), n2 = y(t2);
          return r2 !== -1 && n2 !== -1 && (d(e2) === d(t2) && n2 < r2);
        }, t.tree_isFollowing = function(e2, t2) {
          var r2 = y(e2), n2 = y(t2);
          return r2 !== -1 && n2 !== -1 && (d(e2) === d(t2) && n2 > r2);
        }, t.tree_isParentOf = function(e2, t2) {
          return e2._parent === t2;
        }, t.tree_isChildOf = function(e2, t2) {
          return t2._parent === e2;
        }, t.tree_previousSibling = function(e2) {
          return e2._previousSibling;
        }, t.tree_nextSibling = function(e2) {
          return e2._nextSibling;
        }, t.tree_firstChild = function(e2) {
          return e2._firstChild;
        }, t.tree_lastChild = function(e2) {
          return e2._lastChild;
        }, t.tree_treePosition = y, t.tree_index = function(e2) {
          for (var t2 = 0; e2._previousSibling !== null; )
            t2++, e2 = e2._previousSibling;
          return t2;
        }, t.tree_retarget = function(e2, t2) {
          for (; ; ) {
            if (!e2 || !i.Guard.isNode(e2))
              return e2;
            var r2 = d(e2);
            if (!i.Guard.isShadowRoot(r2))
              return e2;
            if (t2 && i.Guard.isNode(t2) && m(r2, t2, true, true))
              return e2;
            e2 = r2.host;
          }
        };
      }, function(e, t, r) {
        var n = r(13);
        e.exports = function(e2) {
          if (!n(e2))
            throw TypeError(String(e2) + " is not an object");
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(24), i = r(130), o = r(49), a = r(43), s = r(88), u = a.set, l = a.getterFor("Array Iterator");
        e.exports = s(Array, "Array", function(e2, t2) {
          u(this, { type: "Array Iterator", target: n(e2), index: 0, kind: t2 });
        }, function() {
          var e2 = l(this), t2 = e2.target, r2 = e2.kind, n2 = e2.index++;
          return !t2 || n2 >= t2.length ? (e2.target = void 0, { value: void 0, done: true }) : r2 == "keys" ? { value: n2, done: false } : r2 == "values" ? { value: t2[n2], done: false } : { value: [n2, t2[n2]], done: false };
        }, "values"), o.Arguments = o.Array, i("keys"), i("values"), i("entries");
      }, function(e, t, r) {
        var n = r(90), i = r(25), o = r(202);
        n || i(Object.prototype, "toString", o, { unsafe: true });
      }, function(e, t, r) {
        var n = r(16), i = r(15), o = r(40);
        e.exports = n ? function(e2, t2, r2) {
          return i.f(e2, t2, o(1, r2));
        } : function(e2, t2, r2) {
          return e2[t2] = r2, e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(137).charAt, i = r(43), o = r(88), a = i.set, s = i.getterFor("String Iterator");
        o(String, "String", function(e2) {
          a(this, { type: "String Iterator", string: String(e2), index: 0 });
        }, function() {
          var e2, t2 = s(this), r2 = t2.string, i2 = t2.index;
          return i2 >= r2.length ? { value: void 0, done: true } : (e2 = n(r2, i2), t2.index += e2.length, { value: e2, done: false });
        });
      }, function(e, t, r) {
        var n = r(11), i = r(203), o = r(19), a = r(21), s = r(5), u = s("iterator"), l = s("toStringTag"), c = o.values;
        for (var h in i) {
          var p = n[h], f = p && p.prototype;
          if (f) {
            if (f[u] !== c)
              try {
                a(f, u, c);
              } catch (e2) {
                f[u] = c;
              }
            if (f[l] || a(f, l, h), i[h]) {
              for (var d in o)
                if (f[d] !== o[d])
                  try {
                    a(f, d, o[d]);
                  } catch (e2) {
                    f[d] = o[d];
                  }
            }
          }
        }
      }, function(e, t, r) {
        var n = r(41), i = r(35);
        e.exports = function(e2) {
          return n(i(e2));
        };
      }, function(e, t, r) {
        var n = r(11), i = r(21), o = r(14), a = r(80), s = r(117), u = r(43), l = u.get, c = u.enforce, h = String(String).split("String");
        (e.exports = function(e2, t2, r2, s2) {
          var u2 = !!s2 && !!s2.unsafe, l2 = !!s2 && !!s2.enumerable, p = !!s2 && !!s2.noTargetGet;
          typeof r2 == "function" && (typeof t2 != "string" || o(r2, "name") || i(r2, "name", t2), c(r2).source = h.join(typeof t2 == "string" ? t2 : "")), e2 !== n ? (u2 ? !p && e2[t2] && (l2 = true) : delete e2[t2], l2 ? e2[t2] = r2 : i(e2, t2, r2)) : l2 ? e2[t2] = r2 : a(t2, r2);
        })(Function.prototype, "toString", function() {
          return typeof this == "function" && l(this).source || s(this);
        });
      }, function(e, t, r) {
        var n = r(47), i = Math.min;
        e.exports = function(e2) {
          return e2 > 0 ? i(n(e2), 9007199254740991) : 0;
        };
      }, function(e, t, r) {
        var n = r(35);
        e.exports = function(e2) {
          return Object(n(e2));
        };
      }, function(e, t, r) {
        var n = r(16), i = r(8), o = r(14), a = Object.defineProperty, s = {}, u = function(e2) {
          throw e2;
        };
        e.exports = function(e2, t2) {
          if (o(s, e2))
            return s[e2];
          t2 || (t2 = {});
          var r2 = [][e2], l = !!o(t2, "ACCESSORS") && t2.ACCESSORS, c = o(t2, 0) ? t2[0] : u, h = o(t2, 1) ? t2[1] : void 0;
          return s[e2] = !!r2 && !i(function() {
            if (l && !n)
              return true;
            var e3 = { length: -1 };
            l ? a(e3, 1, { enumerable: true, get: u }) : e3[1] = 1, r2.call(e3, c, h);
          });
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(148), i = r(149), o = r(151), a = r(98), s = r(153), u = r(154), l = r(155), c = r(99), h = r(100), p = r(156), f = r(157), d = r(101), m = r(158), y = r(159), v = r(160), _ = r(161), g = r(162), b = r(163), x = r(164), w = r(165), E = r(166), D = r(167), S = r(168), C = r(169), A = r(170);
        t.create_domImplementation = function(e2) {
          return n.DOMImplementationImpl._create(e2);
        }, t.create_window = function() {
          return i.WindowImpl._create();
        }, t.create_xmlDocument = function() {
          return new o.XMLDocumentImpl();
        }, t.create_document = function() {
          return new a.DocumentImpl();
        }, t.create_abortController = function() {
          return new s.AbortControllerImpl();
        }, t.create_abortSignal = function() {
          return u.AbortSignalImpl._create();
        }, t.create_documentType = function(e2, t2, r2, n2) {
          return l.DocumentTypeImpl._create(e2, t2, r2, n2);
        }, t.create_element = function(e2, t2, r2, n2) {
          return c.ElementImpl._create(e2, t2, r2, n2);
        }, t.create_htmlElement = function(e2, t2, r2, n2) {
          return c.ElementImpl._create(e2, t2, r2, n2);
        }, t.create_htmlUnknownElement = function(e2, t2, r2, n2) {
          return c.ElementImpl._create(e2, t2, r2, n2);
        }, t.create_documentFragment = function(e2) {
          return h.DocumentFragmentImpl._create(e2);
        }, t.create_shadowRoot = function(e2, t2) {
          return p.ShadowRootImpl._create(e2, t2);
        }, t.create_attr = function(e2, t2) {
          return f.AttrImpl._create(e2, t2);
        }, t.create_text = function(e2, t2) {
          return d.TextImpl._create(e2, t2);
        }, t.create_cdataSection = function(e2, t2) {
          return m.CDATASectionImpl._create(e2, t2);
        }, t.create_comment = function(e2, t2) {
          return y.CommentImpl._create(e2, t2);
        }, t.create_processingInstruction = function(e2, t2, r2) {
          return v.ProcessingInstructionImpl._create(e2, t2, r2);
        }, t.create_htmlCollection = function(e2, t2) {
          return t2 === void 0 && (t2 = function() {
            return true;
          }), _.HTMLCollectionImpl._create(e2, t2);
        }, t.create_nodeList = function(e2) {
          return g.NodeListImpl._create(e2);
        }, t.create_nodeListStatic = function(e2, t2) {
          return b.NodeListStaticImpl._create(e2, t2);
        }, t.create_namedNodeMap = function(e2) {
          return x.NamedNodeMapImpl._create(e2);
        }, t.create_range = function(e2, t2) {
          return w.RangeImpl._create(e2, t2);
        }, t.create_nodeIterator = function(e2, t2, r2) {
          return E.NodeIteratorImpl._create(e2, t2, r2);
        }, t.create_treeWalker = function(e2, t2) {
          return D.TreeWalkerImpl._create(e2, t2);
        }, t.create_nodeFilter = function() {
          return S.NodeFilterImpl._create();
        }, t.create_mutationRecord = function(e2, t2, r2, n2, i2, o2, a2, s2, u2) {
          return C.MutationRecordImpl._create(e2, t2, r2, n2, i2, o2, a2, s2, u2);
        }, t.create_domTokenList = function(e2, t2) {
          return A.DOMTokenListImpl._create(e2, t2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(17), a = r(3), s = r(72), u = new Map();
        function l(e2, t2) {
          if (t2 !== e2._root && o.tree_isAncestorOf(e2._reference, t2, true)) {
            if (e2._pointerBeforeReference)
              for (; ; ) {
                var r2 = o.tree_getFollowingNode(e2._root, t2);
                if (r2 !== null && o.tree_isDescendantOf(e2._root, r2, true) && !o.tree_isDescendantOf(t2, r2, true))
                  return void (e2._reference = r2);
                if (r2 === null)
                  return void (e2._pointerBeforeReference = false);
              }
            if (t2._previousSibling === null)
              t2._parent !== null && (e2._reference = t2._parent);
            else {
              for (var n2 = t2._previousSibling, i2 = o.tree_getFirstDescendantNode(t2._previousSibling, true, false); i2 !== null; )
                i2 !== null && (n2 = i2), i2 = o.tree_getNextDescendantNode(t2._previousSibling, i2, true, false);
              e2._reference = n2;
            }
          }
        }
        function c(e2, t2, r2, n2, i2) {
          if (a.Guard.isSlot(e2) && t2 === "name" && i2 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e2._name = n2 === null || n2 === "" ? "" : n2, s.shadowTree_assignSlotablesForATree(o.tree_rootNode(e2));
          }
        }
        function h(e2, t2, r2, n2, i2) {
          if (a.Guard.isSlotable(e2) && t2 === "slot" && i2 === null) {
            if (n2 === r2)
              return;
            if (n2 === null && r2 === "")
              return;
            if (n2 === "" && r2 === null)
              return;
            e2._name = n2 === null || n2 === "" ? "" : n2, s.shadowTree_isAssigned(e2) && s.shadowTree_assignSlotables(e2._assignedSlot), s.shadowTree_assignASlot(e2);
          }
        }
        function p(e2, t2, r2, n2) {
          t2 === "id" && n2 === null && (e2._uniqueIdentifier = r2 || void 0);
        }
        t.dom_runRemovingSteps = function(e2, t2) {
        }, t.dom_runCloningSteps = function(e2, t2, r2, n2) {
        }, t.dom_runAdoptingSteps = function(e2, t2) {
        }, t.dom_runAttributeChangeSteps = function(e2, t2, r2, o2, a2) {
          var s2, u2;
          i.dom.features.slots && (h.call(e2, e2, t2, r2, o2, a2), c.call(e2, e2, t2, r2, o2, a2)), p.call(e2, e2, t2, o2, a2);
          try {
            for (var l2 = n(e2._attributeChangeSteps), f = l2.next(); !f.done; f = l2.next()) {
              f.value.call(e2, e2, t2, r2, o2, a2);
            }
          } catch (e3) {
            s2 = { error: e3 };
          } finally {
            try {
              f && !f.done && (u2 = l2.return) && u2.call(l2);
            } finally {
              if (s2)
                throw s2.error;
            }
          }
        }, t.dom_runInsertionSteps = function(e2) {
        }, t.dom_runNodeIteratorPreRemovingSteps = function(e2, t2) {
          l.call(e2, e2, t2);
        }, t.dom_hasSupportedTokens = function(e2) {
          return u.has(e2);
        }, t.dom_getSupportedTokens = function(e2) {
          return u.get(e2) || new Set();
        }, t.dom_runEventConstructingSteps = function(e2) {
        }, t.dom_runChildTextContentChangeSteps = function(e2) {
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(11), o = r(46), a = r(44), s = r(16), u = r(86), l = r(124), c = r(8), h = r(14), p = r(59), f = r(13), d = r(18), m = r(27), y = r(24), v = r(56), _ = r(40), g = r(60), b = r(61), x = r(82), w = r(190), E = r(85), D = r(55), S = r(15), C = r(79), A = r(21), N = r(25), T = r(81), O = r(57), F = r(45), k = r(58), P = r(5), I = r(125), L = r(126), M = r(62), B = r(43), j = r(36).forEach, R = O("hidden"), z = P("toPrimitive"), U = B.set, G = B.getterFor("Symbol"), X = Object.prototype, q = i.Symbol, W = o("JSON", "stringify"), H = D.f, J = S.f, Y = w.f, V = C.f, K = T("symbols"), $ = T("op-symbols"), Q = T("string-to-symbol-registry"), Z = T("symbol-to-string-registry"), ee = T("wks"), te = i.QObject, re = !te || !te.prototype || !te.prototype.findChild, ne = s && c(function() {
          return g(J({}, "a", { get: function() {
            return J(this, "a", { value: 7 }).a;
          } })).a != 7;
        }) ? function(e2, t2, r2) {
          var n2 = H(X, t2);
          n2 && delete X[t2], J(e2, t2, r2), n2 && e2 !== X && J(X, t2, n2);
        } : J, ie = function(e2, t2) {
          var r2 = K[e2] = g(q.prototype);
          return U(r2, { type: "Symbol", tag: e2, description: t2 }), s || (r2.description = t2), r2;
        }, oe = l ? function(e2) {
          return typeof e2 == "symbol";
        } : function(e2) {
          return Object(e2) instanceof q;
        }, ae = function(e2, t2, r2) {
          e2 === X && ae($, t2, r2), d(e2);
          var n2 = v(t2, true);
          return d(r2), h(K, n2) ? (r2.enumerable ? (h(e2, R) && e2[R][n2] && (e2[R][n2] = false), r2 = g(r2, { enumerable: _(0, false) })) : (h(e2, R) || J(e2, R, _(1, {})), e2[R][n2] = true), ne(e2, n2, r2)) : J(e2, n2, r2);
        }, se = function(e2, t2) {
          d(e2);
          var r2 = y(t2), n2 = b(r2).concat(he(r2));
          return j(n2, function(t3) {
            s && !ue.call(r2, t3) || ae(e2, t3, r2[t3]);
          }), e2;
        }, ue = function(e2) {
          var t2 = v(e2, true), r2 = V.call(this, t2);
          return !(this === X && h(K, t2) && !h($, t2)) && (!(r2 || !h(this, t2) || !h(K, t2) || h(this, R) && this[R][t2]) || r2);
        }, le = function(e2, t2) {
          var r2 = y(e2), n2 = v(t2, true);
          if (r2 !== X || !h(K, n2) || h($, n2)) {
            var i2 = H(r2, n2);
            return !i2 || !h(K, n2) || h(r2, R) && r2[R][n2] || (i2.enumerable = true), i2;
          }
        }, ce = function(e2) {
          var t2 = Y(y(e2)), r2 = [];
          return j(t2, function(e3) {
            h(K, e3) || h(F, e3) || r2.push(e3);
          }), r2;
        }, he = function(e2) {
          var t2 = e2 === X, r2 = Y(t2 ? $ : y(e2)), n2 = [];
          return j(r2, function(e3) {
            !h(K, e3) || t2 && !h(X, e3) || n2.push(K[e3]);
          }), n2;
        };
        (u || (N((q = function() {
          if (this instanceof q)
            throw TypeError("Symbol is not a constructor");
          var e2 = arguments.length && arguments[0] !== void 0 ? String(arguments[0]) : void 0, t2 = k(e2), r2 = function(e3) {
            this === X && r2.call($, e3), h(this, R) && h(this[R], t2) && (this[R][t2] = false), ne(this, t2, _(1, e3));
          };
          return s && re && ne(X, t2, { configurable: true, set: r2 }), ie(t2, e2);
        }).prototype, "toString", function() {
          return G(this).tag;
        }), N(q, "withoutSetter", function(e2) {
          return ie(k(e2), e2);
        }), C.f = ue, S.f = ae, D.f = le, x.f = w.f = ce, E.f = he, I.f = function(e2) {
          return ie(P(e2), e2);
        }, s && (J(q.prototype, "description", { configurable: true, get: function() {
          return G(this).description;
        } }), a || N(X, "propertyIsEnumerable", ue, { unsafe: true }))), n({ global: true, wrap: true, forced: !u, sham: !u }, { Symbol: q }), j(b(ee), function(e2) {
          L(e2);
        }), n({ target: "Symbol", stat: true, forced: !u }, { for: function(e2) {
          var t2 = String(e2);
          if (h(Q, t2))
            return Q[t2];
          var r2 = q(t2);
          return Q[t2] = r2, Z[r2] = t2, r2;
        }, keyFor: function(e2) {
          if (!oe(e2))
            throw TypeError(e2 + " is not a symbol");
          if (h(Z, e2))
            return Z[e2];
        }, useSetter: function() {
          re = true;
        }, useSimple: function() {
          re = false;
        } }), n({ target: "Object", stat: true, forced: !u, sham: !s }, { create: function(e2, t2) {
          return t2 === void 0 ? g(e2) : se(g(e2), t2);
        }, defineProperty: ae, defineProperties: se, getOwnPropertyDescriptor: le }), n({ target: "Object", stat: true, forced: !u }, { getOwnPropertyNames: ce, getOwnPropertySymbols: he }), n({ target: "Object", stat: true, forced: c(function() {
          E.f(1);
        }) }, { getOwnPropertySymbols: function(e2) {
          return E.f(m(e2));
        } }), W) && n({ target: "JSON", stat: true, forced: !u || c(function() {
          var e2 = q();
          return W([e2]) != "[null]" || W({ a: e2 }) != "{}" || W(Object(e2)) != "{}";
        }) }, { stringify: function(e2, t2, r2) {
          for (var n2, i2 = [e2], o2 = 1; arguments.length > o2; )
            i2.push(arguments[o2++]);
          if (n2 = t2, (f(t2) || e2 !== void 0) && !oe(e2))
            return p(t2) || (t2 = function(e3, t3) {
              if (typeof n2 == "function" && (t3 = n2.call(this, e3, t3)), !oe(t3))
                return t3;
            }), i2[1] = t2, W.apply(null, i2);
        } });
        q.prototype[z] || A(q.prototype, z, q.prototype.valueOf), M(q, "Symbol"), F[R] = true;
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(16), o = r(11), a = r(14), s = r(13), u = r(15).f, l = r(119), c = o.Symbol;
        if (i && typeof c == "function" && (!("description" in c.prototype) || c().description !== void 0)) {
          var h = {}, p = function() {
            var e2 = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]), t2 = this instanceof p ? new c(e2) : e2 === void 0 ? c() : c(e2);
            return e2 === "" && (h[t2] = true), t2;
          };
          l(p, c);
          var f = p.prototype = c.prototype;
          f.constructor = p;
          var d = f.toString, m = String(c("test")) == "Symbol(test)", y = /^Symbol\((.*)\)[^)]+$/;
          u(f, "description", { configurable: true, get: function() {
            var e2 = s(this) ? this.valueOf() : this, t2 = d.call(e2);
            if (a(h, e2))
              return "";
            var r2 = m ? t2.slice(7, -1) : t2.replace(y, "$1");
            return r2 === "" ? void 0 : r2;
          } }), n({ global: true, forced: true }, { Symbol: p });
        }
      }, function(e, t, r) {
        r(126)("iterator");
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(2), u = r(70), l = r(3), c = r(9), h = r(0), p = r(152), f = r(12), d = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._parent = null, t3._firstChild = null, t3._lastChild = null, t3._previousSibling = null, t3._nextSibling = null, t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "_childNodes", { get: function() {
            return this.__childNodes || (this.__childNodes = h.create_nodeList(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverride || a.dom.window._associatedDocument;
          }, set: function(e3) {
            this._nodeDocumentOverride = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_registeredObserverList", { get: function() {
            return this.__registeredObserverList || (this.__registeredObserverList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeType", { get: function() {
            return this._nodeType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeName", { get: function() {
            return l.Guard.isElementNode(this) ? this._htmlUppercasedQualifiedName : l.Guard.isAttrNode(this) ? this._qualifiedName : l.Guard.isExclusiveTextNode(this) ? "#text" : l.Guard.isCDATASectionNode(this) ? "#cdata-section" : l.Guard.isProcessingInstructionNode(this) ? this._target : l.Guard.isCommentNode(this) ? "#comment" : l.Guard.isDocumentNode(this) ? "#document" : l.Guard.isDocumentTypeNode(this) ? this._name : l.Guard.isDocumentFragmentNode(this) ? "#document-fragment" : "";
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "baseURI", { get: function() {
            return p.urlSerializer(this._nodeDocument._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "isConnected", { get: function() {
            return l.Guard.isElementNode(this) && h.shadowTree_isConnected(this);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "ownerDocument", { get: function() {
            return this._nodeType === s.NodeType.Document ? null : this._nodeDocument;
          }, enumerable: true, configurable: true }), t2.prototype.getRootNode = function(e3) {
            return h.tree_rootNode(this, !!e3 && e3.composed);
          }, Object.defineProperty(t2.prototype, "parentNode", { get: function() {
            return this._nodeType === s.NodeType.Attribute ? null : this._parent;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "parentElement", { get: function() {
            return this._parent && l.Guard.isElementNode(this._parent) ? this._parent : null;
          }, enumerable: true, configurable: true }), t2.prototype.hasChildNodes = function() {
            return this._firstChild !== null;
          }, Object.defineProperty(t2.prototype, "childNodes", { get: function() {
            return this._childNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstChild", { get: function() {
            return this._firstChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastChild", { get: function() {
            return this._lastChild;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeValue", { get: function() {
            return l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e3) {
            e3 === null && (e3 = ""), l.Guard.isAttrNode(this) ? h.attr_setAnExistingAttributeValue(this, e3) : l.Guard.isCharacterDataNode(this) && h.characterData_replaceData(this, 0, this._data.length, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "textContent", { get: function() {
            return l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h.text_descendantTextContent(this) : l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
          }, set: function(e3) {
            e3 === null && (e3 = ""), l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h.node_stringReplaceAll(e3, this) : l.Guard.isAttrNode(this) ? h.attr_setAnExistingAttributeValue(this, e3) : l.Guard.isCharacterDataNode(this) && h.characterData_replaceData(this, 0, h.tree_nodeLength(this), e3);
          }, enumerable: true, configurable: true }), t2.prototype.normalize = function() {
            for (var e3, t3, r2, n2, i2 = [], s2 = h.tree_getFirstDescendantNode(this, false, false, function(e4) {
              return l.Guard.isExclusiveTextNode(e4);
            }); s2 !== null; )
              i2.push(s2), s2 = h.tree_getNextDescendantNode(this, s2, false, false, function(e4) {
                return l.Guard.isExclusiveTextNode(e4);
              });
            for (var u2 = 0; u2 < i2.length; u2++) {
              var c2 = i2[u2];
              if (c2._parent !== null) {
                var p2 = h.tree_nodeLength(c2);
                if (p2 !== 0) {
                  var f2 = [], d2 = "";
                  try {
                    for (var m = (e3 = void 0, o(h.text_contiguousExclusiveTextNodes(c2))), y = m.next(); !y.done; y = m.next()) {
                      var v = y.value;
                      f2.push(v), d2 += v._data;
                    }
                  } catch (t4) {
                    e3 = { error: t4 };
                  } finally {
                    try {
                      y && !y.done && (t3 = m.return) && t3.call(m);
                    } finally {
                      if (e3)
                        throw e3.error;
                    }
                  }
                  if (h.characterData_replaceData(c2, p2, 0, d2), a.dom.rangeList.size !== 0)
                    for (var _ = c2._nextSibling; _ !== null && l.Guard.isExclusiveTextNode(_); ) {
                      var g = _, b = h.tree_index(g);
                      try {
                        for (var x = (r2 = void 0, o(a.dom.rangeList)), w = x.next(); !w.done; w = x.next()) {
                          var E = w.value;
                          E._start[0] === g && (E._start[0] = c2, E._start[1] += p2), E._end[0] === g && (E._end[0] = c2, E._end[1] += p2), E._start[0] === g._parent && E._start[1] === b && (E._start[0] = c2, E._start[1] = p2), E._end[0] === g._parent && E._end[1] === b && (E._end[0] = c2, E._end[1] = p2);
                        }
                      } catch (e4) {
                        r2 = { error: e4 };
                      } finally {
                        try {
                          w && !w.done && (n2 = x.return) && n2.call(x);
                        } finally {
                          if (r2)
                            throw r2.error;
                        }
                      }
                      p2 += h.tree_nodeLength(_), _ = _._nextSibling;
                    }
                  for (var D = 0; D < f2.length; D++) {
                    (v = f2[D])._parent !== null && h.mutation_remove(v, v._parent);
                  }
                } else
                  h.mutation_remove(c2, c2._parent);
              }
            }
          }, t2.prototype.cloneNode = function(e3) {
            if (e3 === void 0 && (e3 = false), l.Guard.isShadowRoot(this))
              throw new c.NotSupportedError();
            return h.node_clone(this, null, e3);
          }, t2.prototype.isEqualNode = function(e3) {
            return e3 === void 0 && (e3 = null), e3 !== null && h.node_equals(this, e3);
          }, t2.prototype.isSameNode = function(e3) {
            return e3 === void 0 && (e3 = null), this === e3;
          }, t2.prototype.compareDocumentPosition = function(e3) {
            if (e3 === this)
              return 0;
            var t3 = e3, r2 = this, n2 = null, i2 = null;
            if (l.Guard.isAttrNode(t3) && (t3 = (n2 = t3)._element), l.Guard.isAttrNode(r2) && (r2 = (i2 = r2)._element, n2 && t3 && t3 === r2))
              for (var o2 = 0; o2 < r2._attributeList.length; o2++) {
                var u2 = r2._attributeList[o2];
                if (h.node_equals(u2, n2))
                  return s.Position.ImplementationSpecific | s.Position.Preceding;
                if (h.node_equals(u2, i2))
                  return s.Position.ImplementationSpecific | s.Position.Following;
              }
            return t3 === null || r2 === null || h.tree_rootNode(t3) !== h.tree_rootNode(r2) ? s.Position.Disconnected | s.Position.ImplementationSpecific | (a.dom.compareCache.check(this, e3) ? s.Position.Preceding : s.Position.Following) : !n2 && h.tree_isAncestorOf(r2, t3) || i2 && t3 === r2 ? s.Position.Contains | s.Position.Preceding : !i2 && h.tree_isDescendantOf(r2, t3) || n2 && t3 === r2 ? s.Position.ContainedBy | s.Position.Following : h.tree_isPreceding(r2, t3) ? s.Position.Preceding : s.Position.Following;
          }, t2.prototype.contains = function(e3) {
            return e3 !== null && h.tree_isDescendantOf(this, e3, true);
          }, t2.prototype.lookupPrefix = function(e3) {
            return e3 ? l.Guard.isElementNode(this) ? h.node_locateANamespacePrefix(this, e3) : l.Guard.isDocumentNode(this) ? this.documentElement === null ? null : h.node_locateANamespacePrefix(this.documentElement, e3) : l.Guard.isDocumentTypeNode(this) || l.Guard.isDocumentFragmentNode(this) ? null : l.Guard.isAttrNode(this) ? this._element === null ? null : h.node_locateANamespacePrefix(this._element, e3) : this._parent !== null && l.Guard.isElementNode(this._parent) ? h.node_locateANamespacePrefix(this._parent, e3) : null : null;
          }, t2.prototype.lookupNamespaceURI = function(e3) {
            return h.node_locateANamespace(this, e3 || null);
          }, t2.prototype.isDefaultNamespace = function(e3) {
            return e3 || (e3 = null), h.node_locateANamespace(this, null) === e3;
          }, t2.prototype.insertBefore = function(e3, t3) {
            return h.mutation_preInsert(e3, this, t3);
          }, t2.prototype.appendChild = function(e3) {
            return h.mutation_append(e3, this);
          }, t2.prototype.replaceChild = function(e3, t3) {
            return h.mutation_replace(t3, e3, this);
          }, t2.prototype.removeChild = function(e3) {
            return h.mutation_preRemove(e3, this);
          }, t2.prototype._getTheParent = function(e3) {
            return l.Guard.isSlotable(this) && h.shadowTree_isAssigned(this) ? this._assignedSlot : this._parent;
          }, t2.ELEMENT_NODE = 1, t2.ATTRIBUTE_NODE = 2, t2.TEXT_NODE = 3, t2.CDATA_SECTION_NODE = 4, t2.ENTITY_REFERENCE_NODE = 5, t2.ENTITY_NODE = 6, t2.PROCESSING_INSTRUCTION_NODE = 7, t2.COMMENT_NODE = 8, t2.DOCUMENT_NODE = 9, t2.DOCUMENT_TYPE_NODE = 10, t2.DOCUMENT_FRAGMENT_NODE = 11, t2.NOTATION_NODE = 12, t2.DOCUMENT_POSITION_DISCONNECTED = 1, t2.DOCUMENT_POSITION_PRECEDING = 2, t2.DOCUMENT_POSITION_FOLLOWING = 4, t2.DOCUMENT_POSITION_CONTAINS = 8, t2.DOCUMENT_POSITION_CONTAINED_BY = 16, t2.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32, t2;
        }(u.EventTargetImpl);
        t.NodeImpl = d, d.prototype._children = new l.EmptySet(), f.idl_defineConst(d.prototype, "ELEMENT_NODE", 1), f.idl_defineConst(d.prototype, "ATTRIBUTE_NODE", 2), f.idl_defineConst(d.prototype, "TEXT_NODE", 3), f.idl_defineConst(d.prototype, "CDATA_SECTION_NODE", 4), f.idl_defineConst(d.prototype, "ENTITY_REFERENCE_NODE", 5), f.idl_defineConst(d.prototype, "ENTITY_NODE", 6), f.idl_defineConst(d.prototype, "PROCESSING_INSTRUCTION_NODE", 7), f.idl_defineConst(d.prototype, "COMMENT_NODE", 8), f.idl_defineConst(d.prototype, "DOCUMENT_NODE", 9), f.idl_defineConst(d.prototype, "DOCUMENT_TYPE_NODE", 10), f.idl_defineConst(d.prototype, "DOCUMENT_FRAGMENT_NODE", 11), f.idl_defineConst(d.prototype, "NOTATION_NODE", 12), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_DISCONNECTED", 1), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_PRECEDING", 2), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_FOLLOWING", 4), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_CONTAINS", 8), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_CONTAINED_BY", 16), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", 32);
      }, function(e, t) {
        e.exports = function(e2) {
          if (e2 == null)
            throw TypeError("Can't call method on " + e2);
          return e2;
        };
      }, function(e, t, r) {
        var n = r(87), i = r(41), o = r(27), a = r(26), s = r(128), u = [].push, l = function(e2) {
          var t2 = e2 == 1, r2 = e2 == 2, l2 = e2 == 3, c = e2 == 4, h = e2 == 6, p = e2 == 5 || h;
          return function(f, d, m, y) {
            for (var v, _, g = o(f), b = i(g), x = n(d, m, 3), w = a(b.length), E = 0, D = y || s, S = t2 ? D(f, w) : r2 ? D(f, 0) : void 0; w > E; E++)
              if ((p || E in b) && (_ = x(v = b[E], E, g), e2)) {
                if (t2)
                  S[E] = _;
                else if (_)
                  switch (e2) {
                    case 3:
                      return true;
                    case 5:
                      return v;
                    case 6:
                      return E;
                    case 2:
                      u.call(S, v);
                  }
                else if (c)
                  return false;
              }
            return h ? -1 : l2 || c ? c : S;
          };
        };
        e.exports = { forEach: l(0), map: l(1), filter: l(2), some: l(3), every: l(4), find: l(5), findIndex: l(6) };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(9), u = r(2), l = r(3), c = r(1), h = r(7), p = r(73), f = r(17), d = r(172), m = r(72), y = r(51), v = r(30), _ = r(106);
        function g(e2, t2, r2) {
          var i2, o2, a2, l2, c2, h2, p2, d2, m2 = t2._nodeType, y2 = e2._nodeType, v2 = r2 ? r2._nodeType : null;
          if (m2 !== u.NodeType.Document && m2 !== u.NodeType.DocumentFragment && m2 !== u.NodeType.Element)
            throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + t2.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(t2, e2, true))
            throw new s.HierarchyRequestError("The node to be inserted cannot be an inclusive ancestor of parent node. Node is " + e2.nodeName + ", parent node is " + t2.nodeName + ".");
          if (r2 !== null && r2._parent !== t2)
            throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is " + r2.nodeName + ", parent node is " + t2.nodeName + ".");
          if (y2 !== u.NodeType.DocumentFragment && y2 !== u.NodeType.DocumentType && y2 !== u.NodeType.Element && y2 !== u.NodeType.Text && y2 !== u.NodeType.ProcessingInstruction && y2 !== u.NodeType.CData && y2 !== u.NodeType.Comment)
            throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + e2.nodeName + ".");
          if (y2 === u.NodeType.Text && m2 === u.NodeType.Document)
            throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + e2.nodeName + ".");
          if (y2 === u.NodeType.DocumentType && m2 !== u.NodeType.Document)
            throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + t2.nodeName + ".");
          if (m2 === u.NodeType.Document) {
            if (y2 === u.NodeType.DocumentFragment) {
              var _2 = 0;
              try {
                for (var g2 = n(e2._children), b2 = g2.next(); !b2.done; b2 = g2.next()) {
                  var x2 = b2.value;
                  if (x2._nodeType === u.NodeType.Element)
                    _2++;
                  else if (x2._nodeType === u.NodeType.Text)
                    throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + x2.nodeName + ".");
                }
              } catch (e3) {
                i2 = { error: e3 };
              } finally {
                try {
                  b2 && !b2.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              if (_2 > 1)
                throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + _2 + " element nodes.");
              if (_2 === 1) {
                try {
                  for (var w2 = n(t2._children), E = w2.next(); !E.done; E = w2.next()) {
                    if (E.value._nodeType === u.NodeType.Element)
                      throw new s.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e3) {
                  a2 = { error: e3 };
                } finally {
                  try {
                    E && !E.done && (l2 = w2.return) && l2.call(w2);
                  } finally {
                    if (a2)
                      throw a2.error;
                  }
                }
                if (r2) {
                  if (v2 === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  for (var D = r2._nextSibling; D; ) {
                    if (D._nodeType === u.NodeType.DocumentType)
                      throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                    D = D._nextSibling;
                  }
                }
              }
            } else if (y2 === u.NodeType.Element) {
              try {
                for (var S = n(t2._children), C = S.next(); !C.done; C = S.next()) {
                  if (C.value._nodeType === u.NodeType.Element)
                    throw new s.HierarchyRequestError("Document already has a document element node. Node is " + e2.nodeName + ".");
                }
              } catch (e3) {
                c2 = { error: e3 };
              } finally {
                try {
                  C && !C.done && (h2 = S.return) && h2.call(S);
                } finally {
                  if (c2)
                    throw c2.error;
                }
              }
              if (r2) {
                if (v2 === u.NodeType.DocumentType)
                  throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e2.nodeName + ".");
                for (D = r2._nextSibling; D; ) {
                  if (D._nodeType === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e2.nodeName + ".");
                  D = D._nextSibling;
                }
              }
            } else if (y2 === u.NodeType.DocumentType) {
              try {
                for (var A = n(t2._children), N = A.next(); !N.done; N = A.next()) {
                  if (N.value._nodeType === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Document already has a document type node. Node is " + e2.nodeName + ".");
                }
              } catch (e3) {
                p2 = { error: e3 };
              } finally {
                try {
                  N && !N.done && (d2 = A.return) && d2.call(A);
                } finally {
                  if (p2)
                    throw p2.error;
                }
              }
              if (r2)
                for (var T = r2._previousSibling; T; ) {
                  if (T._nodeType === u.NodeType.Element)
                    throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e2.nodeName + ".");
                  T = T._previousSibling;
                }
              else
                for (T = t2._firstChild; T; ) {
                  if (T._nodeType === u.NodeType.Element)
                    throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e2.nodeName + ".");
                  T = T._nextSibling;
                }
            }
          }
        }
        function b(e2, t2, r2) {
          g(e2, t2, r2);
          var n2 = r2;
          return n2 === e2 && (n2 = e2._nextSibling), _.document_adopt(e2, t2._nodeDocument), x(e2, t2, n2), e2;
        }
        function x(e2, t2, r2, i2) {
          var s2, d2;
          if (r2 !== null || e2._nodeType === u.NodeType.DocumentFragment) {
            var _2 = e2._nodeType === u.NodeType.DocumentFragment ? e2._children.size : 1;
            if (r2 !== null && a.dom.rangeList.size !== 0) {
              var g2 = f.tree_index(r2);
              try {
                for (var b2 = n(a.dom.rangeList), x2 = b2.next(); !x2.done; x2 = b2.next()) {
                  var E = x2.value;
                  E._start[0] === t2 && E._start[1] > g2 && (E._start[1] += _2), E._end[0] === t2 && E._end[1] > g2 && (E._end[1] += _2);
                }
              } catch (e3) {
                s2 = { error: e3 };
              } finally {
                try {
                  x2 && !x2.done && (d2 = b2.return) && d2.call(b2);
                } finally {
                  if (s2)
                    throw s2.error;
                }
              }
            }
            var D = e2._nodeType === u.NodeType.DocumentFragment ? new (Array.bind.apply(Array, o([void 0], e2._children)))() : [e2];
            if (e2._nodeType === u.NodeType.DocumentFragment)
              for (; e2._firstChild; )
                w(e2._firstChild, e2, true);
            a.dom.features.mutationObservers && e2._nodeType === u.NodeType.DocumentFragment && y.observer_queueTreeMutationRecord(e2, [], D, null, null);
            for (var S = r2 ? r2._previousSibling : t2._lastChild, C = r2 === null ? -1 : f.tree_index(r2), A = 0; A < D.length; A++) {
              var N = D[A];
              if (l.Guard.isElementNode(N) && (l.Guard.isDocumentNode(t2) && (t2._documentElement = N), N._nodeDocument._hasNamespaces || N._namespace === null && N._namespacePrefix === null || (N._nodeDocument._hasNamespaces = true)), N._parent = t2, r2 === null ? h.set.append(t2._children, N) : (h.set.insert(t2._children, N, C), C++), t2._firstChild === null)
                N._previousSibling = null, N._nextSibling = null, t2._firstChild = N, t2._lastChild = N;
              else {
                var T = r2 ? r2._previousSibling : t2._lastChild, O = r2 || null;
                N._previousSibling = T, N._nextSibling = O, T && (T._nextSibling = N), O && (O._previousSibling = N), T || (t2._firstChild = N), O || (t2._lastChild = N);
              }
              a.dom.features.slots && t2._shadowRoot !== null && l.Guard.isSlotable(N) && m.shadowTree_assignASlot(N), a.dom.features.steps && l.Guard.isTextNode(N) && v.dom_runChildTextContentChangeSteps(t2), a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t2)) && l.Guard.isSlot(t2) && c.isEmpty(t2._assignedNodes) && m.shadowTree_signalASlotChange(t2), a.dom.features.slots && m.shadowTree_assignSlotablesForATree(f.tree_rootNode(N));
              for (var F = f.tree_getFirstDescendantNode(N, true, true); F !== null; )
                a.dom.features.steps && v.dom_runInsertionSteps(F), a.dom.features.customElements && l.Guard.isElementNode(F) && m.shadowTree_isConnected(F) && (l.Guard.isCustomElementNode(F) ? p.customElement_enqueueACustomElementCallbackReaction(F, "connectedCallback", []) : p.customElement_tryToUpgrade(F)), F = f.tree_getNextDescendantNode(N, F, true, true);
            }
            a.dom.features.mutationObservers && (i2 || y.observer_queueTreeMutationRecord(t2, D, [], S, r2));
          } else
            !function(e3, t3, r3) {
              var n2 = t3._lastChild;
              l.Guard.isElementNode(e3) && (l.Guard.isDocumentNode(t3) && (t3._documentElement = e3), e3._nodeDocument._hasNamespaces || e3._namespace === null && e3._namespacePrefix === null || (e3._nodeDocument._hasNamespaces = true));
              if (e3._parent = t3, t3._children.add(e3), t3._firstChild === null)
                e3._previousSibling = null, e3._nextSibling = null, t3._firstChild = e3, t3._lastChild = e3;
              else {
                var i3 = t3._lastChild;
                e3._previousSibling = i3, e3._nextSibling = null, i3 && (i3._nextSibling = e3), i3 || (t3._firstChild = e3), t3._lastChild = e3;
              }
              a.dom.features.slots && t3._shadowRoot !== null && l.Guard.isSlotable(e3) && m.shadowTree_assignASlot(e3);
              a.dom.features.steps && l.Guard.isTextNode(e3) && v.dom_runChildTextContentChangeSteps(t3);
              a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t3)) && l.Guard.isSlot(t3) && c.isEmpty(t3._assignedNodes) && m.shadowTree_signalASlotChange(t3);
              a.dom.features.slots && m.shadowTree_assignSlotablesForATree(f.tree_rootNode(e3));
              a.dom.features.steps && v.dom_runInsertionSteps(e3);
              a.dom.features.customElements && l.Guard.isElementNode(e3) && m.shadowTree_isConnected(e3) && (l.Guard.isCustomElementNode(e3) ? p.customElement_enqueueACustomElementCallbackReaction(e3, "connectedCallback", []) : p.customElement_tryToUpgrade(e3));
              a.dom.features.mutationObservers && (r3 || y.observer_queueTreeMutationRecord(t3, [e3], [], n2, null));
            }(e2, t2, i2);
        }
        function w(e2, t2, r2) {
          var i2, o2, s2, u2, h2, _2, g2, b2;
          if (a.dom.rangeList.size !== 0) {
            var x2 = f.tree_index(e2);
            try {
              for (var w2 = n(a.dom.rangeList), E = w2.next(); !E.done; E = w2.next()) {
                var D = E.value;
                f.tree_isDescendantOf(e2, D._start[0], true) && (D._start = [t2, x2]), f.tree_isDescendantOf(e2, D._end[0], true) && (D._end = [t2, x2]), D._start[0] === t2 && D._start[1] > x2 && D._start[1]--, D._end[0] === t2 && D._end[1] > x2 && D._end[1]--;
              }
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                E && !E.done && (o2 = w2.return) && o2.call(w2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            try {
              for (var S = n(a.dom.rangeList), C = S.next(); !C.done; C = S.next()) {
                (D = C.value)._start[0] === t2 && D._start[1] > x2 && (D._start[1] -= 1), D._end[0] === t2 && D._end[1] > x2 && (D._end[1] -= 1);
              }
            } catch (e3) {
              s2 = { error: e3 };
            } finally {
              try {
                C && !C.done && (u2 = S.return) && u2.call(S);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }
          if (a.dom.features.steps)
            try {
              for (var A = n(d.nodeIterator_iteratorList()), N = A.next(); !N.done; N = A.next()) {
                var T = N.value;
                T._root._nodeDocument === e2._nodeDocument && v.dom_runNodeIteratorPreRemovingSteps(T, e2);
              }
            } catch (e3) {
              h2 = { error: e3 };
            } finally {
              try {
                N && !N.done && (_2 = A.return) && _2.call(A);
              } finally {
                if (h2)
                  throw h2.error;
              }
            }
          var O = e2._previousSibling, F = e2._nextSibling;
          l.Guard.isDocumentNode(t2) && l.Guard.isElementNode(e2) && (t2._documentElement = null), e2._parent = null, t2._children.delete(e2);
          var k = e2._previousSibling, P = e2._nextSibling;
          (e2._previousSibling = null, e2._nextSibling = null, k && (k._nextSibling = P), P && (P._previousSibling = k), k || (t2._firstChild = P), P || (t2._lastChild = k), a.dom.features.slots && l.Guard.isSlotable(e2) && e2._assignedSlot !== null && m.shadowTree_isAssigned(e2) && m.shadowTree_assignSlotables(e2._assignedSlot), a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t2)) && l.Guard.isSlot(t2) && c.isEmpty(t2._assignedNodes) && m.shadowTree_signalASlotChange(t2), a.dom.features.slots) && (f.tree_getFirstDescendantNode(e2, true, false, function(e3) {
            return l.Guard.isSlot(e3);
          }) !== null && (m.shadowTree_assignSlotablesForATree(f.tree_rootNode(t2)), m.shadowTree_assignSlotablesForATree(e2)));
          a.dom.features.steps && v.dom_runRemovingSteps(e2, t2), a.dom.features.customElements && l.Guard.isCustomElementNode(e2) && p.customElement_enqueueACustomElementCallbackReaction(e2, "disconnectedCallback", []);
          for (var I = f.tree_getFirstDescendantNode(e2, false, true); I !== null; )
            a.dom.features.steps && v.dom_runRemovingSteps(I, e2), a.dom.features.customElements && l.Guard.isCustomElementNode(I) && p.customElement_enqueueACustomElementCallbackReaction(I, "disconnectedCallback", []), I = f.tree_getNextDescendantNode(e2, I, false, true);
          if (a.dom.features.mutationObservers)
            for (var L = f.tree_getFirstAncestorNode(t2, true); L !== null; ) {
              try {
                for (var M = (g2 = void 0, n(L._registeredObserverList)), B = M.next(); !B.done; B = M.next()) {
                  var j = B.value;
                  j.options.subtree && e2._registeredObserverList.push({ observer: j.observer, options: j.options, source: j });
                }
              } catch (e3) {
                g2 = { error: e3 };
              } finally {
                try {
                  B && !B.done && (b2 = M.return) && b2.call(M);
                } finally {
                  if (g2)
                    throw g2.error;
                }
              }
              L = f.tree_getNextAncestorNode(t2, L, true);
            }
          a.dom.features.mutationObservers && (r2 || y.observer_queueTreeMutationRecord(t2, [], [e2], O, F)), a.dom.features.steps && l.Guard.isTextNode(e2) && v.dom_runChildTextContentChangeSteps(t2);
        }
        t.mutation_ensurePreInsertionValidity = g, t.mutation_preInsert = b, t.mutation_insert = x, t.mutation_append = function(e2, t2) {
          return b(e2, t2, null);
        }, t.mutation_replace = function(e2, t2, r2) {
          var i2, o2, l2, c2, h2, p2, d2, m2;
          if (r2._nodeType !== u.NodeType.Document && r2._nodeType !== u.NodeType.DocumentFragment && r2._nodeType !== u.NodeType.Element)
            throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + r2.nodeName + ".");
          if (f.tree_isHostIncludingAncestorOf(r2, t2, true))
            throw new s.HierarchyRequestError("The node to be inserted cannot be an ancestor of parent node. Node is " + t2.nodeName + ", parent node is " + r2.nodeName + ".");
          if (e2._parent !== r2)
            throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is " + e2.nodeName + ", parent node is " + r2.nodeName + ".");
          if (t2._nodeType !== u.NodeType.DocumentFragment && t2._nodeType !== u.NodeType.DocumentType && t2._nodeType !== u.NodeType.Element && t2._nodeType !== u.NodeType.Text && t2._nodeType !== u.NodeType.ProcessingInstruction && t2._nodeType !== u.NodeType.CData && t2._nodeType !== u.NodeType.Comment)
            throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + t2.nodeName + ".");
          if (t2._nodeType === u.NodeType.Text && r2._nodeType === u.NodeType.Document)
            throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + t2.nodeName + ".");
          if (t2._nodeType === u.NodeType.DocumentType && r2._nodeType !== u.NodeType.Document)
            throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + r2.nodeName + ".");
          if (r2._nodeType === u.NodeType.Document) {
            if (t2._nodeType === u.NodeType.DocumentFragment) {
              var v2 = 0;
              try {
                for (var g2 = n(t2._children), b2 = g2.next(); !b2.done; b2 = g2.next()) {
                  var E = b2.value;
                  if (E._nodeType === u.NodeType.Element)
                    v2++;
                  else if (E._nodeType === u.NodeType.Text)
                    throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + E.nodeName + ".");
                }
              } catch (e3) {
                i2 = { error: e3 };
              } finally {
                try {
                  b2 && !b2.done && (o2 = g2.return) && o2.call(g2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              if (v2 > 1)
                throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + v2 + " element nodes.");
              if (v2 === 1) {
                try {
                  for (var D = n(r2._children), S = D.next(); !S.done; S = D.next()) {
                    if ((F = S.value)._nodeType === u.NodeType.Element && F !== e2)
                      throw new s.HierarchyRequestError("The document node already has a document element node.");
                  }
                } catch (e3) {
                  l2 = { error: e3 };
                } finally {
                  try {
                    S && !S.done && (c2 = D.return) && c2.call(D);
                  } finally {
                    if (l2)
                      throw l2.error;
                  }
                }
                for (var C = e2._nextSibling; C; ) {
                  if (C._nodeType === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                  C = C._nextSibling;
                }
              }
            } else if (t2._nodeType === u.NodeType.Element) {
              try {
                for (var A = n(r2._children), N = A.next(); !N.done; N = A.next()) {
                  if ((F = N.value)._nodeType === u.NodeType.Element && F !== e2)
                    throw new s.HierarchyRequestError("Document already has a document element node. Node is " + t2.nodeName + ".");
                }
              } catch (e3) {
                h2 = { error: e3 };
              } finally {
                try {
                  N && !N.done && (p2 = A.return) && p2.call(A);
                } finally {
                  if (h2)
                    throw h2.error;
                }
              }
              for (C = e2._nextSibling; C; ) {
                if (C._nodeType === u.NodeType.DocumentType)
                  throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + t2.nodeName + ".");
                C = C._nextSibling;
              }
            } else if (t2._nodeType === u.NodeType.DocumentType) {
              try {
                for (var T = n(r2._children), O = T.next(); !O.done; O = T.next()) {
                  var F;
                  if ((F = O.value)._nodeType === u.NodeType.DocumentType && F !== e2)
                    throw new s.HierarchyRequestError("Document already has a document type node. Node is " + t2.nodeName + ".");
                }
              } catch (e3) {
                d2 = { error: e3 };
              } finally {
                try {
                  O && !O.done && (m2 = T.return) && m2.call(T);
                } finally {
                  if (d2)
                    throw d2.error;
                }
              }
              for (var k = e2._previousSibling; k; ) {
                if (k._nodeType === u.NodeType.Element)
                  throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + t2.nodeName + ".");
                k = k._previousSibling;
              }
            }
          }
          var P = e2._nextSibling;
          P === t2 && (P = t2._nextSibling);
          var I = e2._previousSibling;
          _.document_adopt(t2, r2._nodeDocument);
          var L = [];
          e2._parent !== null && (L.push(e2), w(e2, e2._parent, true));
          var M = [];
          return t2._nodeType === u.NodeType.DocumentFragment ? M = Array.from(t2._children) : M.push(t2), x(t2, r2, P, true), a.dom.features.mutationObservers && y.observer_queueTreeMutationRecord(r2, M, L, I, P), e2;
        }, t.mutation_replaceAll = function(e2, t2) {
          var r2, i2;
          e2 !== null && _.document_adopt(e2, t2._nodeDocument);
          var o2 = Array.from(t2._children), s2 = [];
          e2 && e2._nodeType === u.NodeType.DocumentFragment ? s2 = Array.from(e2._children) : e2 !== null && s2.push(e2);
          try {
            for (var l2 = n(o2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              w(c2.value, t2, true);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (i2 = l2.return) && i2.call(l2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e2 !== null && x(e2, t2, null, true), a.dom.features.mutationObservers && y.observer_queueTreeMutationRecord(t2, s2, o2, null, null);
        }, t.mutation_preRemove = function(e2, t2) {
          if (e2._parent !== t2)
            throw new s.NotFoundError("The child node cannot be found under parent node. Child node is " + e2.nodeName + ", parent node is " + t2.nodeName + ".");
          return w(e2, t2), e2;
        }, t.mutation_remove = w;
      }, function(e, t, r) {
        "use strict";
        function n(e2) {
          return e2 == null;
        }
        e.exports.isNothing = n, e.exports.isObject = function(e2) {
          return typeof e2 == "object" && e2 !== null;
        }, e.exports.toArray = function(e2) {
          return Array.isArray(e2) ? e2 : n(e2) ? [] : [e2];
        }, e.exports.repeat = function(e2, t2) {
          var r2, n2 = "";
          for (r2 = 0; r2 < t2; r2 += 1)
            n2 += e2;
          return n2;
        }, e.exports.isNegativeZero = function(e2) {
          return e2 === 0 && Number.NEGATIVE_INFINITY === 1 / e2;
        }, e.exports.extend = function(e2, t2) {
          var r2, n2, i, o;
          if (t2)
            for (r2 = 0, n2 = (o = Object.keys(t2)).length; r2 < n2; r2 += 1)
              e2[i = o[r2]] = t2[i];
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(53), o = r(10);
        function a(e2, t2, r2) {
          var n2 = [];
          return e2.include.forEach(function(e3) {
            r2 = a(e3, t2, r2);
          }), e2[t2].forEach(function(e3) {
            r2.forEach(function(t3, r3) {
              t3.tag === e3.tag && t3.kind === e3.kind && n2.push(r3);
            }), r2.push(e3);
          }), r2.filter(function(e3, t3) {
            return n2.indexOf(t3) === -1;
          });
        }
        function s(e2) {
          this.include = e2.include || [], this.implicit = e2.implicit || [], this.explicit = e2.explicit || [], this.implicit.forEach(function(e3) {
            if (e3.loadKind && e3.loadKind !== "scalar")
              throw new i("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }), this.compiledImplicit = a(this, "implicit", []), this.compiledExplicit = a(this, "explicit", []), this.compiledTypeMap = function() {
            var e3, t2, r2 = { scalar: {}, sequence: {}, mapping: {}, fallback: {} };
            function n2(e4) {
              r2[e4.kind][e4.tag] = r2.fallback[e4.tag] = e4;
            }
            for (e3 = 0, t2 = arguments.length; e3 < t2; e3 += 1)
              arguments[e3].forEach(n2);
            return r2;
          }(this.compiledImplicit, this.compiledExplicit);
        }
        s.DEFAULT = null, s.create = function() {
          var e2, t2;
          switch (arguments.length) {
            case 1:
              e2 = s.DEFAULT, t2 = arguments[0];
              break;
            case 2:
              e2 = arguments[0], t2 = arguments[1];
              break;
            default:
              throw new i("Wrong number of arguments for Schema.create function");
          }
          if (e2 = n.toArray(e2), t2 = n.toArray(t2), !e2.every(function(e3) {
            return e3 instanceof s;
          }))
            throw new i("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
          if (!t2.every(function(e3) {
            return e3 instanceof o;
          }))
            throw new i("Specified list of YAML types (or a single Type object) contains a non-Type object.");
          return new s({ include: e2, explicit: t2 });
        }, e.exports = s;
      }, function(e, t) {
        e.exports = function(e2, t2) {
          return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
        };
      }, function(e, t, r) {
        var n = r(8), i = r(42), o = "".split;
        e.exports = n(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(e2) {
          return i(e2) == "String" ? o.call(e2, "") : Object(e2);
        } : Object;
      }, function(e, t) {
        var r = {}.toString;
        e.exports = function(e2) {
          return r.call(e2).slice(8, -1);
        };
      }, function(e, t, r) {
        var n, i, o, a = r(186), s = r(11), u = r(13), l = r(21), c = r(14), h = r(57), p = r(45), f = s.WeakMap;
        if (a) {
          var d = new f(), m = d.get, y = d.has, v = d.set;
          n = function(e2, t2) {
            return v.call(d, e2, t2), t2;
          }, i = function(e2) {
            return m.call(d, e2) || {};
          }, o = function(e2) {
            return y.call(d, e2);
          };
        } else {
          var _ = h("state");
          p[_] = true, n = function(e2, t2) {
            return l(e2, _, t2), t2;
          }, i = function(e2) {
            return c(e2, _) ? e2[_] : {};
          }, o = function(e2) {
            return c(e2, _);
          };
        }
        e.exports = { set: n, get: i, has: o, enforce: function(e2) {
          return o(e2) ? i(e2) : n(e2, {});
        }, getterFor: function(e2) {
          return function(t2) {
            var r2;
            if (!u(t2) || (r2 = i(t2)).type !== e2)
              throw TypeError("Incompatible receiver, " + e2 + " required");
            return r2;
          };
        } };
      }, function(e, t) {
        e.exports = false;
      }, function(e, t) {
        e.exports = {};
      }, function(e, t, r) {
        var n = r(120), i = r(11), o = function(e2) {
          return typeof e2 == "function" ? e2 : void 0;
        };
        e.exports = function(e2, t2) {
          return arguments.length < 2 ? o(n[e2]) || o(i[e2]) : n[e2] && n[e2][t2] || i[e2] && i[e2][t2];
        };
      }, function(e, t) {
        var r = Math.ceil, n = Math.floor;
        e.exports = function(e2) {
          return isNaN(e2 = +e2) ? 0 : (e2 > 0 ? n : r)(e2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(8);
        e.exports = function(e2, t2) {
          var r2 = [][e2];
          return !!r2 && n(function() {
            r2.call(null, t2 || function() {
              throw 1;
            }, 1);
          });
        };
      }, function(e, t) {
        e.exports = {};
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(220), r(64), r(19), r(65), r(20), r(68), r(66), r(92), r(144), r(22), r(94), r(23);
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(2), s = r(69), u = r(95), l = r(7), c = r(0), h = function() {
          function e2(e3) {
            this.level = 0, this._builderOptions = e3;
          }
          return e2.prototype.declaration = function(e3, t2, r2) {
          }, e2.prototype.docType = function(e3, t2, r2) {
          }, e2.prototype.comment = function(e3) {
          }, e2.prototype.text = function(e3) {
          }, e2.prototype.instruction = function(e3, t2) {
          }, e2.prototype.cdata = function(e3) {
          }, e2.prototype.openTagBegin = function(e3) {
          }, e2.prototype.openTagEnd = function(e3, t2, r2) {
          }, e2.prototype.closeTag = function(e3) {
          }, e2.prototype.attributes = function(e3) {
            var t2, r2;
            try {
              for (var i2 = n(e3), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var a2 = o2.value;
                this.attribute(a2[1] === null ? a2[2] : a2[1] + ":" + a2[2], a2[3]);
              }
            } catch (e4) {
              t2 = { error: e4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
          }, e2.prototype.attribute = function(e3, t2) {
          }, e2.prototype.beginElement = function(e3) {
          }, e2.prototype.endElement = function(e3) {
          }, e2.prototype.serializeNode = function(e3, t2) {
            var r2 = e3._nodeDocument !== void 0 && e3._nodeDocument._hasNamespaces;
            if (this.level = 0, this.currentNode = e3, r2) {
              var n2 = new u.NamespacePrefixMap();
              n2.set("xml", l.namespace.XML);
              this._serializeNodeNS(e3, null, n2, { value: 1 }, t2);
            } else
              this._serializeNode(e3, t2);
          }, e2.prototype._serializeNodeNS = function(e3, t2, r2, n2, i2) {
            switch (this.currentNode = e3, e3.nodeType) {
              case a.NodeType.Element:
                this._serializeElementNS(e3, t2, r2, n2, i2);
                break;
              case a.NodeType.Document:
                this._serializeDocumentNS(e3, t2, r2, n2, i2);
                break;
              case a.NodeType.Comment:
                this._serializeComment(e3, i2);
                break;
              case a.NodeType.Text:
                this._serializeText(e3, i2);
                break;
              case a.NodeType.DocumentFragment:
                this._serializeDocumentFragmentNS(e3, t2, r2, n2, i2);
                break;
              case a.NodeType.DocumentType:
                this._serializeDocumentType(e3, i2);
                break;
              case a.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e3, i2);
                break;
              case a.NodeType.CData:
                this._serializeCData(e3, i2);
                break;
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeNode = function(e3, t2) {
            switch (this.currentNode = e3, e3.nodeType) {
              case a.NodeType.Element:
                this._serializeElement(e3, t2);
                break;
              case a.NodeType.Document:
                this._serializeDocument(e3, t2);
                break;
              case a.NodeType.Comment:
                this._serializeComment(e3, t2);
                break;
              case a.NodeType.Text:
                this._serializeText(e3, t2);
                break;
              case a.NodeType.DocumentFragment:
                this._serializeDocumentFragment(e3, t2);
                break;
              case a.NodeType.DocumentType:
                this._serializeDocumentType(e3, t2);
                break;
              case a.NodeType.ProcessingInstruction:
                this._serializeProcessingInstruction(e3, t2);
                break;
              case a.NodeType.CData:
                this._serializeCData(e3, t2);
                break;
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeElementNS = function(t2, r2, i2, a2, s2) {
            var u2, h2, p = [];
            if (s2 && (t2.localName.indexOf(":") !== -1 || !c.xml_isName(t2.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var f = "", d = false, m = false, y = i2.copy(), v = {}, _ = this._recordNamespaceInformation(t2, y, v), g = r2, b = t2.namespaceURI;
            if (g === b)
              _ !== null && (m = true), f = b === l.namespace.XML ? "xml:" + t2.localName : t2.localName, this.beginElement(f), this.openTagBegin(f);
            else {
              var x = t2.prefix, w = null;
              if (x === null && b === _ || (w = y.get(x, b)), x === "xmlns") {
                if (s2)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                w = x;
              }
              w !== null ? (f = w + ":" + t2.localName, _ !== null && _ !== l.namespace.XML && (g = _ || null), this.beginElement(f), this.openTagBegin(f)) : x !== null ? (x in v && (x = this._generatePrefix(b, y, a2)), y.set(x, b), f += x + ":" + t2.localName, this.beginElement(f), this.openTagBegin(f), p.push([null, "xmlns", x, this._serializeAttributeValue(b, s2)]), _ !== null && (g = _ || null)) : _ === null || _ !== null && _ !== b ? (m = true, f += t2.localName, g = b, this.beginElement(f), this.openTagBegin(f), p.push([null, null, "xmlns", this._serializeAttributeValue(b, s2)])) : (f += t2.localName, g = b, this.beginElement(f), this.openTagBegin(f));
            }
            p.push.apply(p, o(this._serializeAttributesNS(t2, y, a2, v, m, s2))), this.attributes(p);
            var E = b === l.namespace.HTML;
            if (E && t2.childNodes.length === 0 && e2._VoidElementNames.has(t2.localName) ? (this.openTagEnd(f, true, true), this.endElement(f), d = true) : E || t2.childNodes.length !== 0 ? this.openTagEnd(f, false, false) : (this.openTagEnd(f, true, false), this.endElement(f), d = true), !d) {
              if (E && t2.localName === "template")
                ;
              else
                try {
                  for (var D = n(t2.childNodes), S = D.next(); !S.done; S = D.next()) {
                    var C = S.value;
                    this.level++, this._serializeNodeNS(C, g, y, a2, s2), this.level--;
                  }
                } catch (e3) {
                  u2 = { error: e3 };
                } finally {
                  try {
                    S && !S.done && (h2 = D.return) && h2.call(D);
                  } finally {
                    if (u2)
                      throw u2.error;
                  }
                }
              this.closeTag(f), this.endElement(f);
            }
          }, e2.prototype._serializeElement = function(e3, t2) {
            var r2, i2;
            if (t2 && (e3.localName.indexOf(":") !== -1 || !c.xml_isName(e3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a2 = e3.localName;
            this.beginElement(a2), this.openTagBegin(a2);
            var s2 = this._serializeAttributes(e3, t2);
            if (this.attributes(s2), e3.hasChildNodes() ? this.openTagEnd(a2, false, false) : (this.openTagEnd(a2, true, false), this.endElement(a2), o2 = true), !o2) {
              try {
                for (var u2 = n(e3._children), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                  var h2 = l2.value;
                  this.level++, this._serializeNode(h2, t2), this.level--;
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  l2 && !l2.done && (i2 = u2.return) && i2.call(u2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              this.closeTag(a2), this.endElement(a2);
            }
          }, e2.prototype._serializeDocumentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2;
            if (o2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var u2 = n(e3.childNodes), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                var c2 = l2.value;
                this._serializeNodeNS(c2, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                l2 && !l2.done && (s2 = u2.return) && s2.call(u2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
          }, e2.prototype._serializeDocument = function(e3, t2) {
            var r2, i2;
            if (t2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            try {
              for (var o2 = n(e3._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                this._serializeNode(s2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (i2 = o2.return) && i2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype._serializeComment = function(e3, t2) {
            if (t2 && (!c.xml_isLegalChar(e3.data) || e3.data.indexOf("--") !== -1 || e3.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            this.comment(e3.data);
          }, e2.prototype._serializeText = function(e3, t2) {
            if (t2 && !c.xml_isLegalChar(e3.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            var r2 = e3.data.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            this.text(r2);
          }, e2.prototype._serializeDocumentFragmentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2;
            try {
              for (var u2 = n(e3.childNodes), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                var c2 = l2.value;
                this._serializeNodeNS(c2, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                l2 && !l2.done && (s2 = u2.return) && s2.call(u2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
          }, e2.prototype._serializeDocumentFragment = function(e3, t2) {
            var r2, i2;
            try {
              for (var o2 = n(e3._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                this._serializeNode(s2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (i2 = o2.return) && i2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype._serializeDocumentType = function(e3, t2) {
            if (t2 && !c.xml_isPubidChar(e3.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t2 && (!c.xml_isLegalChar(e3.systemId) || e3.systemId.indexOf('"') !== -1 && e3.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            this.docType(e3.name, e3.publicId, e3.systemId);
          }, e2.prototype._serializeProcessingInstruction = function(e3, t2) {
            if (t2 && (e3.target.indexOf(":") !== -1 || /^xml$/i.test(e3.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t2 && (!c.xml_isLegalChar(e3.data) || e3.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            this.instruction(e3.target, e3.data);
          }, e2.prototype._serializeCData = function(e3, t2) {
            if (t2 && e3.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            this.cdata(e3.data);
          }, e2.prototype._serializeAttributesNS = function(e3, t2, r2, i2, o2, a2) {
            var u2, h2, p = [], f = a2 ? new s.LocalNameSet() : void 0;
            try {
              for (var d = n(e3.attributes), m = d.next(); !m.done; m = d.next()) {
                var y = m.value;
                if (a2 || o2 || y.namespaceURI !== null) {
                  if (a2 && f && f.has(y.namespaceURI, y.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  a2 && f && f.set(y.namespaceURI, y.localName);
                  var v = y.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t2.get(y.prefix, v), v === l.namespace.XMLNS) {
                      if (y.value === l.namespace.XML || y.prefix === null && o2 || y.prefix !== null && (!(y.localName in i2) || i2[y.localName] !== y.value) && t2.has(y.localName, y.value))
                        continue;
                      if (a2 && y.value === l.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (a2 && y.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (_ = y.prefix === null || t2.hasPrefix(y.prefix) && !t2.has(y.prefix, v) ? this._generatePrefix(v, t2, r2) : y.prefix, p.push([null, "xmlns", _, this._serializeAttributeValue(v, a2)]));
                  if (_ !== null && _, a2 && (y.localName.indexOf(":") !== -1 || !c.xml_isName(y.localName) || y.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p.push([v, _, y.localName, this._serializeAttributeValue(y.value, a2)]);
                } else
                  p.push([null, null, y.localName, this._serializeAttributeValue(y.value, a2)]);
              }
            } catch (e4) {
              u2 = { error: e4 };
            } finally {
              try {
                m && !m.done && (h2 = d.return) && h2.call(d);
              } finally {
                if (u2)
                  throw u2.error;
              }
            }
            return p;
          }, e2.prototype._serializeAttributes = function(e3, t2) {
            var r2, i2, o2 = [], a2 = t2 ? {} : void 0;
            try {
              for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var l2 = u2.value;
                if (t2) {
                  if (t2 && a2 && l2.localName in a2)
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  if (t2 && a2 && (a2[l2.localName] = true), t2 && (l2.localName.indexOf(":") !== -1 || !c.xml_isName(l2.localName)))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t2)]);
                } else
                  o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t2)]);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype._recordNamespaceInformation = function(e3, t2, r2) {
            var i2, o2, a2 = null;
            try {
              for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var c2 = u2.value, h2 = c2.namespaceURI, p = c2.prefix;
                if (h2 === l.namespace.XMLNS) {
                  if (p === null) {
                    a2 = c2.value;
                    continue;
                  }
                  var f = c2.localName, d = c2.value;
                  if (d === l.namespace.XML)
                    continue;
                  if (d === "" && (d = null), t2.has(f, d))
                    continue;
                  t2.set(f, d), r2[f] = d || "";
                }
              }
            } catch (e4) {
              i2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, e2.prototype._generatePrefix = function(e3, t2, r2) {
            var n2 = "ns" + r2.value.toString();
            return r2.value++, t2.set(n2, e3), n2;
          }, e2.prototype._serializeAttributeValue = function(e3, t2) {
            if (t2 && e3 !== null && !c.xml_isLegalChar(e3))
              throw new Error("Invalid characters in attribute value.");
            return e3 === null ? "" : e3.replace(/(?!&([^&;]*);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, e2._VoidElementNames = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e2;
        }();
        t.BaseWriter = h;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(6), a = r(3), s = r(7), u = r(29), l = r(17), c = r(97);
        function h() {
          var e2 = o.dom.window;
          e2._mutationObserverMicrotaskQueued || (e2._mutationObserverMicrotaskQueued = true, Promise.resolve().then(function() {
            p();
          }));
        }
        function p() {
          var e2, t2, r2, i2, u2 = o.dom.window;
          u2._mutationObserverMicrotaskQueued = false;
          var l2 = s.set.clone(u2._mutationObservers), h2 = s.set.clone(u2._signalSlots);
          s.set.empty(u2._signalSlots);
          var p2 = function(e3) {
            var t3 = s.list.clone(e3._recordQueue);
            s.list.empty(e3._recordQueue);
            for (var r3 = 0; r3 < e3._nodeList.length; r3++) {
              var n2 = e3._nodeList[r3];
              s.list.remove(n2._registeredObserverList, function(t4) {
                return a.Guard.isTransientRegisteredObserver(t4) && t4.observer === e3;
              });
            }
            if (!s.list.isEmpty(t3))
              try {
                e3._callback.call(e3, t3, e3);
              } catch (e4) {
              }
          };
          try {
            for (var f2 = n(l2), d = f2.next(); !d.done; d = f2.next()) {
              p2(d.value);
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              d && !d.done && (t2 = f2.return) && t2.call(f2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          if (o.dom.features.slots)
            try {
              for (var m = n(h2), y = m.next(); !y.done; y = m.next()) {
                var v = y.value;
                c.event_fireAnEvent("slotchange", v, void 0, { bubbles: true });
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                y && !y.done && (i2 = m.return) && i2.call(m);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
        }
        function f(e2, t2, r2, o2, a2, s2, c2, p2, f2) {
          for (var d, m, y = new Map(), v = l.tree_getFirstAncestorNode(t2, true); v !== null; ) {
            for (var _ = 0; _ < v._registeredObserverList.length; _++) {
              var g = v._registeredObserverList[_], b = g.options;
              if ((v === t2 || b.subtree) && ((e2 !== "attributes" || b.attributes) && (e2 !== "attributes" || !b.attributeFilter || b.attributeFilter.indexOf(r2 || "") && o2 === null) && (e2 !== "characterData" || b.characterData) && (e2 !== "childList" || b.childList))) {
                var x = g.observer;
                y.has(x) || y.set(x, null), (e2 === "attributes" && b.attributeOldValue || e2 === "characterData" && b.characterDataOldValue) && y.set(x, a2);
              }
            }
            v = l.tree_getNextAncestorNode(t2, v, true);
          }
          try {
            for (var w = n(y), E = w.next(); !E.done; E = w.next()) {
              var D = i(E.value, 2), S = D[0], C = D[1], A = u.create_mutationRecord(e2, t2, u.create_nodeListStatic(t2, s2), u.create_nodeListStatic(t2, c2), p2, f2, r2, o2, C);
              S._recordQueue.push(A);
            }
          } catch (e3) {
            d = { error: e3 };
          } finally {
            try {
              E && !E.done && (m = w.return) && m.call(w);
            } finally {
              if (d)
                throw d.error;
            }
          }
          h();
        }
        t.observer_queueAMutationObserverMicrotask = h, t.observer_notifyMutationObservers = p, t.observer_queueMutationRecord = f, t.observer_queueTreeMutationRecord = function(e2, t2, r2, n2, i2) {
          f("childList", e2, null, null, null, t2, r2, n2, i2);
        }, t.observer_queueAttributeMutationRecord = function(e2, t2, r2, n2) {
          f("attributes", e2, t2, r2, n2, [], [], null, null);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(6), i = r(7), o = r(3), a = r(9), s = r(29), u = r(73), l = r(51), c = r(30), h = r(37), p = r(106);
        function f(e2, t2, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, e2._value, r2, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, e2._value, r2, e2._namespace), e2._value = r2;
        }
        function d(e2, t2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, null), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, null, e2._value, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, null, e2._value, e2._namespace), t2._attributeList._asArray().push(e2), e2._element = t2, t2._nodeDocument._hasNamespaces || e2._namespace === null && e2._namespacePrefix === null && e2._localName !== "xmlns" || (t2._nodeDocument._hasNamespaces = true);
        }
        function m(e2, t2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, e2._value, null, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, e2._value, null, e2._namespace);
          var r2 = t2._attributeList._asArray().indexOf(e2);
          t2._attributeList._asArray().splice(r2, 1), e2._element = null;
        }
        function y(e2, t2, r2) {
          n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(r2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(r2) && u.customElement_enqueueACustomElementCallbackReaction(r2, "attributeChangedCallback", [e2._localName, e2._value, t2._value, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(r2, e2._localName, e2._value, t2._value, e2._namespace);
          var i2 = r2._attributeList._asArray().indexOf(e2);
          i2 !== -1 && (r2._attributeList._asArray()[i2] = t2), e2._element = null, t2._element = r2, r2._nodeDocument._hasNamespaces || t2._namespace === null && t2._namespacePrefix === null && t2._localName !== "xmlns" || (r2._nodeDocument._hasNamespaces = true);
        }
        function v(e2, t2) {
          return t2._namespace === i.namespace.HTML && t2._nodeDocument._type === "html" && (e2 = e2.toLowerCase()), t2._attributeList._asArray().find(function(t3) {
            return t3._qualifiedName === e2;
          }) || null;
        }
        function _(e2, t2, r2) {
          var n2 = e2 || null;
          return r2._attributeList._asArray().find(function(e3) {
            return e3._namespace === n2 && e3._localName === t2;
          }) || null;
        }
        t.element_has = function(e2, t2) {
          return t2._attributeList._asArray().indexOf(e2) !== -1;
        }, t.element_change = f, t.element_append = d, t.element_remove = m, t.element_replace = y, t.element_getAnAttributeByName = v, t.element_getAnAttributeByNamespaceAndLocalName = _, t.element_getAnAttributeValue = function(e2, t2, r2) {
          r2 === void 0 && (r2 = "");
          var n2 = _(r2, t2, e2);
          return n2 === null ? "" : n2._value;
        }, t.element_setAnAttribute = function(e2, t2) {
          if (e2._element !== null && e2._element !== t2)
            throw new a.InUseAttributeError("This attribute already exists in the document: " + e2._qualifiedName + " as a child of " + e2._element._qualifiedName + ".");
          var r2 = _(e2._namespace || "", e2._localName, t2);
          return r2 === e2 ? e2 : (r2 !== null ? y(r2, e2, t2) : d(e2, t2), r2);
        }, t.element_setAnAttributeValue = function(e2, t2, r2, n2, i2) {
          n2 === void 0 && (n2 = null), i2 === void 0 && (i2 = null);
          var o2 = _(i2 || "", t2, e2);
          if (o2 === null) {
            var a2 = s.create_attr(e2._nodeDocument, t2);
            return a2._namespace = i2, a2._namespacePrefix = n2, a2._value = r2, void d(a2, e2);
          }
          f(o2, e2, r2);
        }, t.element_removeAnAttributeByName = function(e2, t2) {
          var r2 = v(e2, t2);
          return r2 !== null && m(r2, t2), r2;
        }, t.element_removeAnAttributeByNamespaceAndLocalName = function(e2, t2, r2) {
          var n2 = _(e2, t2, r2);
          return n2 !== null && m(n2, r2), n2;
        }, t.element_createAnElement = function(e2, t2, r2, o2, l2, c2) {
          o2 === void 0 && (o2 = null), l2 === void 0 && (l2 = null), c2 === void 0 && (c2 = false);
          var h2 = null;
          if (!n.dom.features.customElements)
            return (h2 = s.create_element(e2, t2, r2, o2))._customElementState = "uncustomized", h2._customElementDefinition = null, h2._is = l2, h2;
          var f2 = u.customElement_lookUpACustomElementDefinition(e2, r2, t2, l2);
          if (f2 !== null && f2.name !== f2.localName)
            (h2 = new (p.document_elementInterface(t2, i.namespace.HTML))())._localName = t2, h2._namespace = i.namespace.HTML, h2._namespacePrefix = o2, h2._customElementState = "undefined", h2._customElementDefinition = null, h2._is = l2, h2._nodeDocument = e2, c2 ? u.customElement_upgrade(f2, h2) : u.customElement_enqueueACustomElementUpgradeReaction(h2, f2);
          else if (f2 !== null)
            if (c2)
              try {
                var d2 = new (0, f2.constructor)();
                if (console.assert(d2._customElementState !== void 0), console.assert(d2._customElementDefinition !== void 0), console.assert(d2._namespace === i.namespace.HTML), d2._attributeList.length !== 0)
                  throw new a.NotSupportedError("Custom element already has attributes.");
                if (d2._children.size !== 0)
                  throw new a.NotSupportedError("Custom element already has child nodes.");
                if (d2._parent !== null)
                  throw new a.NotSupportedError("Custom element already has a parent node.");
                if (d2._nodeDocument !== e2)
                  throw new a.NotSupportedError("Custom element is already in a document.");
                if (d2._localName !== t2)
                  throw new a.NotSupportedError("Custom element has a different local name.");
                d2._namespacePrefix = o2, d2._is = null;
              } catch (r3) {
                (h2 = s.create_htmlUnknownElement(e2, t2, i.namespace.HTML, o2))._customElementState = "failed", h2._customElementDefinition = null, h2._is = null;
              }
            else
              (h2 = s.create_htmlElement(e2, t2, i.namespace.HTML, o2))._customElementState = "undefined", h2._customElementDefinition = null, h2._is = null, u.customElement_enqueueACustomElementUpgradeReaction(h2, f2);
          else {
            (h2 = new (p.document_elementInterface(t2, r2))())._localName = t2, h2._namespace = r2, h2._namespacePrefix = o2, h2._customElementState = "uncustomized", h2._customElementDefinition = null, h2._is = l2, h2._nodeDocument = e2, r2 !== i.namespace.HTML || l2 === null && !u.customElement_isValidCustomElementName(t2) || (h2._customElementState = "undefined");
          }
          if (h2 === null)
            throw new Error("Unable to create element.");
          return h2;
        }, t.element_insertAdjacent = function(e2, t2, r2) {
          switch (t2.toLowerCase()) {
            case "beforebegin":
              return e2._parent === null ? null : h.mutation_preInsert(r2, e2._parent, e2);
            case "afterbegin":
              return h.mutation_preInsert(r2, e2, e2._firstChild);
            case "beforeend":
              return h.mutation_preInsert(r2, e2, null);
            case "afterend":
              return e2._parent === null ? null : h.mutation_preInsert(r2, e2._parent, e2._nextSibling);
            default:
              throw new a.SyntaxError(`Invalid 'where' argument. "beforebegin", "afterbegin", "beforeend" or "afterend" expected`);
          }
        };
      }, function(e, t, r) {
        "use strict";
        function n(e2, t2) {
          Error.call(this), this.name = "YAMLException", this.reason = e2, this.mark = t2, this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : ""), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack || "";
        }
        n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n.prototype.toString = function(e2) {
          var t2 = this.name + ": ";
          return t2 += this.reason || "(unknown reason)", !e2 && this.mark && (t2 += " " + this.mark.toString()), t2;
        }, e.exports = n;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ include: [r(181)], implicit: [r(293), r(294)], explicit: [r(295), r(296), r(297), r(298)] });
      }, function(e, t, r) {
        var n = r(16), i = r(79), o = r(40), a = r(24), s = r(56), u = r(14), l = r(115), c = Object.getOwnPropertyDescriptor;
        t.f = n ? c : function(e2, t2) {
          if (e2 = a(e2), t2 = s(t2, true), l)
            try {
              return c(e2, t2);
            } catch (e3) {
            }
          if (u(e2, t2))
            return o(!i.f.call(e2, t2), e2[t2]);
        };
      }, function(e, t, r) {
        var n = r(13);
        e.exports = function(e2, t2) {
          if (!n(e2))
            return e2;
          var r2, i;
          if (t2 && typeof (r2 = e2.toString) == "function" && !n(i = r2.call(e2)))
            return i;
          if (typeof (r2 = e2.valueOf) == "function" && !n(i = r2.call(e2)))
            return i;
          if (!t2 && typeof (r2 = e2.toString) == "function" && !n(i = r2.call(e2)))
            return i;
          throw TypeError("Can't convert object to primitive value");
        };
      }, function(e, t, r) {
        var n = r(81), i = r(58), o = n("keys");
        e.exports = function(e2) {
          return o[e2] || (o[e2] = i(e2));
        };
      }, function(e, t) {
        var r = 0, n = Math.random();
        e.exports = function(e2) {
          return "Symbol(" + String(e2 === void 0 ? "" : e2) + ")_" + (++r + n).toString(36);
        };
      }, function(e, t, r) {
        var n = r(42);
        e.exports = Array.isArray || function(e2) {
          return n(e2) == "Array";
        };
      }, function(e, t, r) {
        var n, i = r(18), o = r(188), a = r(84), s = r(45), u = r(189), l = r(116), c = r(57), h = c("IE_PROTO"), p = function() {
        }, f = function(e2) {
          return "<script>" + e2 + "<\/script>";
        }, d = function() {
          try {
            n = document.domain && new ActiveXObject("htmlfile");
          } catch (e3) {
          }
          var e2, t2;
          d = n ? function(e3) {
            e3.write(f("")), e3.close();
            var t3 = e3.parentWindow.Object;
            return e3 = null, t3;
          }(n) : ((t2 = l("iframe")).style.display = "none", u.appendChild(t2), t2.src = String("javascript:"), (e2 = t2.contentWindow.document).open(), e2.write(f("document.F=Object")), e2.close(), e2.F);
          for (var r2 = a.length; r2--; )
            delete d.prototype[a[r2]];
          return d();
        };
        s[h] = true, e.exports = Object.create || function(e2, t2) {
          var r2;
          return e2 !== null ? (p.prototype = i(e2), r2 = new p(), p.prototype = null, r2[h] = e2) : r2 = d(), t2 === void 0 ? r2 : o(r2, t2);
        };
      }, function(e, t, r) {
        var n = r(121), i = r(84);
        e.exports = Object.keys || function(e2) {
          return n(e2, i);
        };
      }, function(e, t, r) {
        var n = r(15).f, i = r(14), o = r(5)("toStringTag");
        e.exports = function(e2, t2, r2) {
          e2 && !i(e2 = r2 ? e2 : e2.prototype, o) && n(e2, o, { configurable: true, value: t2 });
        };
      }, function(e, t, r) {
        var n = r(8), i = r(5), o = r(129), a = i("species");
        e.exports = function(e2) {
          return o >= 51 || !n(function() {
            var t2 = [];
            return (t2.constructor = {})[a] = function() {
              return { foo: 1 };
            }, t2[e2](Boolean).foo !== 1;
          });
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(122).indexOf, o = r(48), a = r(28), s = [].indexOf, u = !!s && 1 / [1].indexOf(1, -0) < 0, l = o("indexOf"), c = a("indexOf", { ACCESSORS: true, 1: 0 });
        n({ target: "Array", proto: true, forced: u || !l || !c }, { indexOf: function(e2) {
          return u ? s.apply(this, arguments) || 0 : i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        var n = r(16), i = r(15).f, o = Function.prototype, a = o.toString, s = /^\s*function ([^ (]*)/;
        n && !("name" in o) && i(o, "name", { configurable: true, get: function() {
          try {
            return a.call(this).match(s)[1];
          } catch (e2) {
            return "";
          }
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(25), i = r(18), o = r(8), a = r(136), s = RegExp.prototype, u = s.toString, l = o(function() {
          return u.call({ source: "a", flags: "b" }) != "/a/b";
        }), c = u.name != "toString";
        (l || c) && n(RegExp.prototype, "toString", function() {
          var e2 = i(this), t2 = String(e2.source), r2 = e2.flags;
          return "/" + t2 + "/" + String(r2 === void 0 && e2 instanceof RegExp && !("flags" in s) ? a.call(e2) : r2);
        }, { unsafe: true });
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(138), r(20), r(66), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(1), s = r(2), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._writerOptions = a.applyDefaults(r2, { format: "object", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            return this._currentList = [], this._currentIndex = 0, this._listRegister = [this._currentList], this.serializeNode(e3, this._writerOptions.wellFormed), this._process(this._currentList, this._writerOptions);
          }, t2.prototype._process = function(e3, t3) {
            var r2, n2, i2, o2, u2, l, c;
            if (e3.length === 0)
              return {};
            for (var h = {}, p = false, f = 0, d = 0, m = 0, y = 0, v = 0; v < e3.length; v++) {
              var _ = e3[v];
              switch (I = Object.keys(_)[0]) {
                case "@":
                  continue;
                case "#":
                  f++;
                  break;
                case "!":
                  d++;
                  break;
                case "?":
                  m++;
                  break;
                case "$":
                  y++;
                  break;
                default:
                  h[I] ? p = true : h[I] = true;
              }
            }
            var g = this._getAttrKey(), b = this._getNodeKey(s.NodeType.Text), x = this._getNodeKey(s.NodeType.Comment), w = this._getNodeKey(s.NodeType.ProcessingInstruction), E = this._getNodeKey(s.NodeType.CData);
            if (f === 1 && e3.length === 1 && a.isString(e3[0]["#"]))
              return e3[0]["#"];
            if (p) {
              var D = {};
              for (v = 0; v < e3.length; v++) {
                _ = e3[v];
                if ((I = Object.keys(_)[0]) === "@") {
                  var S = _["@"];
                  (L = Object.keys(S)).length === 1 ? D[g + L[0]] = S[L[0]] : D[g] = _["@"];
                }
              }
              var C = [];
              for (v = 0; v < e3.length; v++) {
                _ = e3[v];
                switch (I = Object.keys(_)[0]) {
                  case "@":
                    break;
                  case "#":
                    C.push(((r2 = {})[b] = _["#"], r2));
                    break;
                  case "!":
                    C.push(((n2 = {})[x] = _["!"], n2));
                    break;
                  case "?":
                    C.push(((i2 = {})[w] = _["?"], i2));
                    break;
                  case "$":
                    C.push(((o2 = {})[E] = _.$, o2));
                    break;
                  default:
                    if ((B = _)[I].length !== 0 && a.isArray(B[I][0])) {
                      for (var A = [], N = B[I], T = 0; T < N.length; T++)
                        A.push(this._process(N[T], t3));
                      C.push(((u2 = {})[I] = A, u2));
                    } else
                      t3.verbose ? C.push(((l = {})[I] = [this._process(B[I], t3)], l)) : C.push(((c = {})[I] = this._process(B[I], t3), c));
                }
              }
              return D[b] = C, D;
            }
            var O = 1, F = 1, k = 1, P = 1;
            for (D = {}, v = 0; v < e3.length; v++) {
              var I;
              _ = e3[v];
              switch (I = Object.keys(_)[0]) {
                case "@":
                  S = _["@"];
                  var L = Object.keys(S);
                  if (t3.group && L.length !== 1)
                    D[g] = S;
                  else
                    for (var M in S)
                      D[g + M] = S[M];
                  break;
                case "#":
                  O = this._processSpecItem(_["#"], D, t3.group, b, f, O);
                  break;
                case "!":
                  F = this._processSpecItem(_["!"], D, t3.group, x, d, F);
                  break;
                case "?":
                  k = this._processSpecItem(_["?"], D, t3.group, w, m, k);
                  break;
                case "$":
                  P = this._processSpecItem(_.$, D, t3.group, E, y, P);
                  break;
                default:
                  var B;
                  if ((B = _)[I].length !== 0 && a.isArray(B[I][0])) {
                    A = [], N = B[I];
                    for (var j = 0; j < N.length; j++)
                      A.push(this._process(N[j], t3));
                    D[I] = A;
                  } else
                    t3.verbose ? D[I] = [this._process(B[I], t3)] : D[I] = this._process(B[I], t3);
              }
            }
            return D;
          }, t2.prototype._processSpecItem = function(e3, t3, r2, n2, i2, s2) {
            var u2, l;
            if (!r2 && a.isArray(e3) && i2 + e3.length > 2)
              try {
                for (var c = o(e3), h = c.next(); !h.done; h = c.next()) {
                  var p = h.value;
                  t3[n2 + (s2++).toString()] = p;
                }
              } catch (e4) {
                u2 = { error: e4 };
              } finally {
                try {
                  h && !h.done && (l = c.return) && l.call(c);
                } finally {
                  if (u2)
                    throw u2.error;
                }
              }
            else
              t3[i2 > 1 ? n2 + (s2++).toString() : n2] = e3;
            return s2;
          }, t2.prototype.beginElement = function(e3) {
            var t3, r2, n2 = [];
            if (this._currentList.length === 0)
              this._currentList.push(((t3 = {})[e3] = n2, t3));
            else {
              var i2 = this._currentList[this._currentList.length - 1];
              if (this._isElementNode(i2, e3))
                if (i2[e3].length !== 0 && a.isArray(i2[e3][0]))
                  i2[e3].push(n2);
                else
                  i2[e3] = [i2[e3], n2];
              else
                this._currentList.push(((r2 = {})[e3] = n2, r2));
            }
            this._currentIndex++, this._listRegister.length > this._currentIndex ? this._listRegister[this._currentIndex] = n2 : this._listRegister.push(n2), this._currentList = n2;
          }, t2.prototype.endElement = function() {
            this._currentList = this._listRegister[--this._currentIndex];
          }, t2.prototype.attribute = function(e3, t3) {
            var r2, n2;
            if (this._currentList.length === 0)
              this._currentList.push({ "@": (r2 = {}, r2[e3] = t3, r2) });
            else {
              var i2 = this._currentList[this._currentList.length - 1];
              this._isAttrNode(i2) ? i2["@"][e3] = t3 : this._currentList.push({ "@": (n2 = {}, n2[e3] = t3, n2) });
            }
          }, t2.prototype.comment = function(e3) {
            if (this._currentList.length === 0)
              this._currentList.push({ "!": e3 });
            else {
              var t3 = this._currentList[this._currentList.length - 1];
              this._isCommentNode(t3) ? a.isArray(t3["!"]) ? t3["!"].push(e3) : t3["!"] = [t3["!"], e3] : this._currentList.push({ "!": e3 });
            }
          }, t2.prototype.text = function(e3) {
            if (this._currentList.length === 0)
              this._currentList.push({ "#": e3 });
            else {
              var t3 = this._currentList[this._currentList.length - 1];
              this._isTextNode(t3) ? a.isArray(t3["#"]) ? t3["#"].push(e3) : t3["#"] = [t3["#"], e3] : this._currentList.push({ "#": e3 });
            }
          }, t2.prototype.instruction = function(e3, t3) {
            var r2 = t3 === "" ? e3 : e3 + " " + t3;
            if (this._currentList.length === 0)
              this._currentList.push({ "?": r2 });
            else {
              var n2 = this._currentList[this._currentList.length - 1];
              this._isInstructionNode(n2) ? a.isArray(n2["?"]) ? n2["?"].push(r2) : n2["?"] = [n2["?"], r2] : this._currentList.push({ "?": r2 });
            }
          }, t2.prototype.cdata = function(e3) {
            if (this._currentList.length === 0)
              this._currentList.push({ $: e3 });
            else {
              var t3 = this._currentList[this._currentList.length - 1];
              this._isCDATANode(t3) ? a.isArray(t3.$) ? t3.$.push(e3) : t3.$ = [t3.$, e3] : this._currentList.push({ $: e3 });
            }
          }, t2.prototype._isAttrNode = function(e3) {
            return "@" in e3;
          }, t2.prototype._isTextNode = function(e3) {
            return "#" in e3;
          }, t2.prototype._isCommentNode = function(e3) {
            return "!" in e3;
          }, t2.prototype._isInstructionNode = function(e3) {
            return "?" in e3;
          }, t2.prototype._isCDATANode = function(e3) {
            return "$" in e3;
          }, t2.prototype._isElementNode = function(e3, t3) {
            return t3 in e3;
          }, t2.prototype._getAttrKey = function() {
            return this._builderOptions.convert.att;
          }, t2.prototype._getNodeKey = function(e3) {
            switch (e3) {
              case s.NodeType.Comment:
                return this._builderOptions.convert.comment;
              case s.NodeType.Text:
                return this._builderOptions.convert.text;
              case s.NodeType.ProcessingInstruction:
                return this._builderOptions.convert.ins;
              case s.NodeType.CData:
                return this._builderOptions.convert.cdata;
              default:
                throw new Error("Invalid node type.");
            }
          }, t2;
        }(r(50).BaseWriter);
        t.ObjectWriter = u;
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(93);
        n({ target: "RegExp", proto: true, forced: /./.exec !== i }, { exec: i });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
            this._items = {}, this._nullItems = {};
          }
          return e2.prototype.set = function(e3, t2) {
            e3 === null ? this._nullItems[t2] = true : (this._items[e3] || (this._items[e3] = {}), this._items[e3][t2] = true);
          }, e2.prototype.has = function(e3, t2) {
            return e3 === null ? this._nullItems[t2] === true : !!this._items[e3] && this._items[e3][t2] === true;
          }, e2;
        }();
        t.LocalNameSet = n;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(9), o = r(3), a = r(0), s = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "_eventListenerList", { get: function() {
            return this.__eventListenerList || (this.__eventListenerList = []);
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_eventHandlerMap", { get: function() {
            return this.__eventHandlerMap || (this.__eventHandlerMap = {});
          }, enumerable: true, configurable: true }), e2.prototype.addEventListener = function(e3, t2, r2) {
            r2 === void 0 && (r2 = { passive: false, once: false, capture: false });
            var i2, s2 = n(a.eventTarget_flattenMore(r2), 3), u = s2[0], l = s2[1], c = s2[2];
            t2 && (i2 = o.Guard.isEventListener(t2) ? t2 : { handleEvent: t2 }, a.eventTarget_addEventListener(this, { type: e3, callback: i2, capture: u, passive: l, once: c, removed: false }));
          }, e2.prototype.removeEventListener = function(e3, t2, r2) {
            r2 === void 0 && (r2 = { capture: false });
            var n2 = a.eventTarget_flatten(r2);
            if (t2)
              for (var i2 = 0; i2 < this._eventListenerList.length; i2++) {
                var s2 = this._eventListenerList[i2];
                if (s2.type === e3 && s2.capture === n2) {
                  if (o.Guard.isEventListener(t2) && s2.callback === t2) {
                    a.eventTarget_removeEventListener(this, s2, i2);
                    break;
                  }
                  if (t2 && s2.callback.handleEvent === t2) {
                    a.eventTarget_removeEventListener(this, s2, i2);
                    break;
                  }
                }
              }
          }, e2.prototype.dispatchEvent = function(e3) {
            if (e3._dispatchFlag || !e3._initializedFlag)
              throw new i.InvalidStateError();
            return e3._isTrusted = false, a.event_dispatch(e3, this);
          }, e2.prototype._getTheParent = function(e3) {
            return null;
          }, e2;
        }();
        t.EventTargetImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(34), a = r(0), s = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this) || this;
            return r2._data = t3, r2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "data", { get: function() {
            return this._data;
          }, set: function(e3) {
            a.characterData_replaceData(this, 0, this._data.length, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "length", { get: function() {
            return this._data.length;
          }, enumerable: true, configurable: true }), t2.prototype.substringData = function(e3, t3) {
            return a.characterData_substringData(this, e3, t3);
          }, t2.prototype.appendData = function(e3) {
            return a.characterData_replaceData(this, this._data.length, 0, e3);
          }, t2.prototype.insertData = function(e3, t3) {
            a.characterData_replaceData(this, e3, 0, t3);
          }, t2.prototype.deleteData = function(e3, t3) {
            a.characterData_replaceData(this, e3, t3, "");
          }, t2.prototype.replaceData = function(e3, t3, r2) {
            a.characterData_replaceData(this, e3, t3, r2);
          }, Object.defineProperty(t2.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.before = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.after = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.replaceWith = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2;
        }(o.NodeImpl);
        t.CharacterDataImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(3), u = r(1), l = r(17), c = r(51);
        function h(e2) {
          a.dom.window._signalSlots.add(e2), c.observer_queueAMutationObserverMicrotask();
        }
        function p(e2, t2) {
          t2 === void 0 && (t2 = false);
          var r2 = s.Cast.asNode(e2)._parent;
          if (r2 === null)
            return null;
          var n2 = r2._shadowRoot || null;
          if (n2 === null)
            return null;
          if (t2 && n2._mode !== "open")
            return null;
          for (var i2 = l.tree_getFirstDescendantNode(n2, false, true, function(e3) {
            return s.Guard.isSlot(e3);
          }); i2 !== null; ) {
            if (i2._name === e2._name)
              return i2;
            i2 = l.tree_getNextDescendantNode(n2, i2, false, true, function(e3) {
              return s.Guard.isSlot(e3);
            });
          }
          return null;
        }
        function f(e2) {
          var t2, r2, i2 = [], o2 = l.tree_rootNode(e2);
          if (!s.Guard.isShadowRoot(o2))
            return i2;
          var a2 = o2._host;
          try {
            for (var u2 = n(a2._children), c2 = u2.next(); !c2.done; c2 = u2.next()) {
              var h2 = c2.value;
              if (s.Guard.isSlotable(h2))
                p(h2) === e2 && i2.push(h2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (r2 = u2.return) && r2.call(u2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function d(e2) {
          var t2, r2, i2 = f(e2);
          if (i2.length === e2._assignedNodes.length) {
            for (var o2 = true, a2 = 0; a2 < i2.length; a2++)
              if (i2[a2] !== e2._assignedNodes[a2]) {
                o2 = false;
                break;
              }
            o2 || h(e2);
          }
          e2._assignedNodes = i2;
          try {
            for (var s2 = n(i2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
              u2.value._assignedSlot = e2;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
        }
        t.shadowTree_signalASlotChange = h, t.shadowTree_isConnected = function(e2) {
          return s.Guard.isDocumentNode(l.tree_rootNode(e2, true));
        }, t.shadowTree_isAssigned = function(e2) {
          return e2._assignedSlot !== null;
        }, t.shadowTree_findASlot = p, t.shadowTree_findSlotables = f, t.shadowTree_findFlattenedSlotables = function e2(t2) {
          var r2, i2, a2, c2, h2 = [], p2 = l.tree_rootNode(t2);
          if (!s.Guard.isShadowRoot(p2))
            return h2;
          var d2 = f(t2);
          if (u.isEmpty(d2))
            try {
              for (var m = n(t2._children), y = m.next(); !y.done; y = m.next()) {
                var v = y.value;
                s.Guard.isSlotable(v) && d2.push(v);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                y && !y.done && (i2 = m.return) && i2.call(m);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          try {
            for (var _ = n(d2), g = _.next(); !g.done; g = _.next()) {
              var b = g.value;
              if (s.Guard.isSlot(b) && s.Guard.isShadowRoot(l.tree_rootNode(b))) {
                var x = e2(b);
                h2.push.apply(h2, o(x));
              } else
                h2.push(b);
            }
          } catch (e3) {
            a2 = { error: e3 };
          } finally {
            try {
              g && !g.done && (c2 = _.return) && c2.call(_);
            } finally {
              if (a2)
                throw a2.error;
            }
          }
          return h2;
        }, t.shadowTree_assignSlotables = d, t.shadowTree_assignSlotablesForATree = function(e2) {
          for (var t2 = l.tree_getFirstDescendantNode(e2, true, false, function(e3) {
            return s.Guard.isSlot(e3);
          }); t2 !== null; )
            d(t2), t2 = l.tree_getNextDescendantNode(e2, t2, true, false, function(e3) {
              return s.Guard.isSlot(e3);
            });
        }, t.shadowTree_assignASlot = function(e2) {
          var t2 = p(e2);
          t2 !== null && d(t2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = /[a-z]([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*-([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*/, i = new Set(["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"]), o = new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]), a = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), s = new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]);
        t.customElement_isValidCustomElementName = function(e2) {
          return !!n.test(e2) && !i.has(e2);
        }, t.customElement_isValidElementName = function(e2) {
          return o.has(e2);
        }, t.customElement_isVoidElementName = function(e2) {
          return a.has(e2);
        }, t.customElement_isValidShadowHostName = function(e2) {
          return s.has(e2);
        }, t.customElement_enqueueACustomElementUpgradeReaction = function(e2, t2) {
        }, t.customElement_enqueueACustomElementCallbackReaction = function(e2, t2, r2) {
        }, t.customElement_upgrade = function(e2, t2) {
        }, t.customElement_tryToUpgrade = function(e2) {
        }, t.customElement_lookUpACustomElementDefinition = function(e2, t2, r2, n2) {
          return null;
        };
      }, function(e, t, r) {
        r(4)({ target: "String", proto: true }, { repeat: r(259) });
      }, function(e, t, r) {
        "use strict";
        r(278), r(68), r(179), r(94), Object.defineProperty(t, "__esModule", { value: true });
        var n = r(109), i = function() {
          function e2(e3) {
            this._builderOptions = e3, e3.parser && Object.assign(this, e3.parser);
          }
          return e2.prototype._docType = function(e3, t2, r2, n2) {
            return e3.dtd({ name: t2, pubID: r2, sysID: n2 });
          }, e2.prototype._comment = function(e3, t2) {
            return e3.com(t2);
          }, e2.prototype._text = function(e3, t2) {
            return e3.txt(t2);
          }, e2.prototype._instruction = function(e3, t2, r2) {
            return e3.ins(t2, r2);
          }, e2.prototype._cdata = function(e3, t2) {
            return e3.dat(t2);
          }, e2.prototype._element = function(e3, t2, r2) {
            return t2 === void 0 ? e3.ele(r2) : e3.ele(t2, r2);
          }, e2.prototype._attribute = function(e3, t2, r2, n2) {
            return t2 === void 0 ? e3.att(r2, n2) : e3.att(t2, r2, n2);
          }, e2.prototype._sanitize = function(e3) {
            return n.sanitizeInput(e3, this._builderOptions.invalidCharReplacement);
          }, e2.prototype._decodeText = function(t2) {
            return t2 == null ? t2 : t2.replace(/&(quot|amp|apos|lt|gt);/g, function(t3, r2) {
              return e2._entityTable[r2];
            }).replace(/&#(?:x([a-fA-F0-9]+)|([0-9]+));/g, function(e3, t3, r2) {
              return String.fromCodePoint(parseInt(t3 || r2, t3 ? 16 : 10));
            });
          }, e2.prototype._decodeAttributeValue = function(e3) {
            return this._decodeText(e3);
          }, e2.prototype.parse = function(e3, t2) {
            return this._parse(e3, t2);
          }, e2.prototype.docType = function(e3, t2, r2, n2) {
            return this._docType(e3, t2, r2, n2);
          }, e2.prototype.comment = function(e3, t2) {
            return this._comment(e3, t2);
          }, e2.prototype.text = function(e3, t2) {
            return this._text(e3, t2);
          }, e2.prototype.instruction = function(e3, t2, r2) {
            return this._instruction(e3, t2, r2);
          }, e2.prototype.cdata = function(e3, t2) {
            return this._cdata(e3, t2);
          }, e2.prototype.element = function(e3, t2, r2) {
            return this._element(e3, t2, r2);
          }, e2.prototype.attribute = function(e3, t2, r2, n2) {
            return this._attribute(e3, t2, r2, n2);
          }, e2.prototype.sanitize = function(e3) {
            return this._sanitize(e3);
          }, e2._entityTable = { lt: "<", gt: ">", amp: "&", quot: '"', apos: "'" }, e2;
        }();
        t.BaseReader = i;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = n.DEFAULT = new n({ include: [r(54)], explicit: [r(299), r(300), r(301)] });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(185);
        t.XMLBuilderImpl = n.XMLBuilderImpl;
        var i = r(304);
        t.XMLBuilderCBImpl = i.XMLBuilderCBImpl;
        var o = r(183);
        t.builder = o.builder, t.create = o.create, t.fragment = o.fragment, t.convert = o.convert;
        var a = r(309);
        t.createCB = a.createCB, t.fragmentCB = a.fragmentCB;
      }, function(e, t) {
        var r;
        r = function() {
          return this;
        }();
        try {
          r = r || new Function("return this")();
        } catch (e2) {
          typeof window == "object" && (r = window);
        }
        e.exports = r;
      }, function(e, t, r) {
        "use strict";
        var n = {}.propertyIsEnumerable, i = Object.getOwnPropertyDescriptor, o = i && !n.call({ 1: 2 }, 1);
        t.f = o ? function(e2) {
          var t2 = i(this, e2);
          return !!t2 && t2.enumerable;
        } : n;
      }, function(e, t, r) {
        var n = r(11), i = r(21);
        e.exports = function(e2, t2) {
          try {
            i(n, e2, t2);
          } catch (r2) {
            n[e2] = t2;
          }
          return t2;
        };
      }, function(e, t, r) {
        var n = r(44), i = r(118);
        (e.exports = function(e2, t2) {
          return i[e2] || (i[e2] = t2 !== void 0 ? t2 : {});
        })("versions", []).push({ version: "3.6.5", mode: n ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
      }, function(e, t, r) {
        var n = r(121), i = r(84).concat("length", "prototype");
        t.f = Object.getOwnPropertyNames || function(e2) {
          return n(e2, i);
        };
      }, function(e, t, r) {
        var n = r(47), i = Math.max, o = Math.min;
        e.exports = function(e2, t2) {
          var r2 = n(e2);
          return r2 < 0 ? i(r2 + t2, 0) : o(r2, t2);
        };
      }, function(e, t) {
        e.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
      }, function(e, t) {
        t.f = Object.getOwnPropertySymbols;
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !!Object.getOwnPropertySymbols && !n(function() {
          return !String(Symbol());
        });
      }, function(e, t, r) {
        var n = r(127);
        e.exports = function(e2, t2, r2) {
          if (n(e2), t2 === void 0)
            return e2;
          switch (r2) {
            case 0:
              return function() {
                return e2.call(t2);
              };
            case 1:
              return function(r3) {
                return e2.call(t2, r3);
              };
            case 2:
              return function(r3, n2) {
                return e2.call(t2, r3, n2);
              };
            case 3:
              return function(r3, n2, i) {
                return e2.call(t2, r3, n2, i);
              };
          }
          return function() {
            return e2.apply(t2, arguments);
          };
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(195), o = r(132), a = r(133), s = r(62), u = r(21), l = r(25), c = r(5), h = r(44), p = r(49), f = r(131), d = f.IteratorPrototype, m = f.BUGGY_SAFARI_ITERATORS, y = c("iterator"), v = function() {
          return this;
        };
        e.exports = function(e2, t2, r2, c2, f2, _, g) {
          i(r2, t2, c2);
          var b, x, w, E = function(e3) {
            if (e3 === f2 && N)
              return N;
            if (!m && e3 in C)
              return C[e3];
            switch (e3) {
              case "keys":
              case "values":
              case "entries":
                return function() {
                  return new r2(this, e3);
                };
            }
            return function() {
              return new r2(this);
            };
          }, D = t2 + " Iterator", S = false, C = e2.prototype, A = C[y] || C["@@iterator"] || f2 && C[f2], N = !m && A || E(f2), T = t2 == "Array" && C.entries || A;
          if (T && (b = o(T.call(new e2())), d !== Object.prototype && b.next && (h || o(b) === d || (a ? a(b, d) : typeof b[y] != "function" && u(b, y, v)), s(b, D, true, true), h && (p[D] = v))), f2 == "values" && A && A.name !== "values" && (S = true, N = function() {
            return A.call(this);
          }), h && !g || C[y] === N || u(C, y, N), p[t2] = N, f2)
            if (x = { values: E("values"), keys: _ ? N : E("keys"), entries: E("entries") }, g)
              for (w in x)
                (m || S || !(w in C)) && l(C, w, x[w]);
            else
              n({ target: t2, proto: true, forced: m || S }, x);
          return x;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(13), o = r(59), a = r(83), s = r(26), u = r(24), l = r(134), c = r(5), h = r(63), p = r(28), f = h("slice"), d = p("slice", { ACCESSORS: true, 0: 0, 1: 2 }), m = c("species"), y = [].slice, v = Math.max;
        n({ target: "Array", proto: true, forced: !f || !d }, { slice: function(e2, t2) {
          var r2, n2, c2, h2 = u(this), p2 = s(h2.length), f2 = a(e2, p2), d2 = a(t2 === void 0 ? p2 : t2, p2);
          if (o(h2) && (typeof (r2 = h2.constructor) != "function" || r2 !== Array && !o(r2.prototype) ? i(r2) && (r2 = r2[m]) === null && (r2 = void 0) : r2 = void 0, r2 === Array || r2 === void 0))
            return y.call(h2, f2, d2);
          for (n2 = new (r2 === void 0 ? Array : r2)(v(d2 - f2, 0)), c2 = 0; f2 < d2; f2++, c2++)
            f2 in h2 && l(n2, c2, h2[f2]);
          return n2.length = c2, n2;
        } });
      }, function(e, t, r) {
        var n = {};
        n[r(5)("toStringTag")] = "z", e.exports = String(n) === "[object z]";
      }, function(e, t, r) {
        "use strict";
        r(19), r(138), r(20), r(92), r(22), r(23), Object.defineProperty(t, "__esModule", { value: true }), t.DefaultBuilderOptions = { version: "1.0", encoding: void 0, standalone: void 0, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" }, invalidCharReplacement: void 0, parser: void 0 }, t.XMLBuilderOptionKeys = new Set(Object.keys(t.DefaultBuilderOptions)), t.DefaultXMLBuilderCBOptions = { format: "xml", wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, spaceBeforeSlash: false, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" } };
      }, function(e, t, r) {
        "use strict";
        var n = r(139), i = r(143);
        e.exports = n("Set", function(e2) {
          return function() {
            return e2(this, arguments.length ? arguments[0] : void 0);
          };
        }, i);
      }, function(e, t, r) {
        "use strict";
        var n, i, o = r(136), a = r(221), s = RegExp.prototype.exec, u = String.prototype.replace, l = s, c = (n = /a/, i = /b*/g, s.call(n, "a"), s.call(i, "a"), n.lastIndex !== 0 || i.lastIndex !== 0), h = a.UNSUPPORTED_Y || a.BROKEN_CARET, p = /()??/.exec("")[1] !== void 0;
        (c || p || h) && (l = function(e2) {
          var t2, r2, n2, i2, a2 = this, l2 = h && a2.sticky, f = o.call(a2), d = a2.source, m = 0, y = e2;
          return l2 && ((f = f.replace("y", "")).indexOf("g") === -1 && (f += "g"), y = String(e2).slice(a2.lastIndex), a2.lastIndex > 0 && (!a2.multiline || a2.multiline && e2[a2.lastIndex - 1] !== "\n") && (d = "(?: " + d + ")", y = " " + y, m++), r2 = new RegExp("^(?:" + d + ")", f)), p && (r2 = new RegExp("^" + d + "$(?!\\s)", f)), c && (t2 = a2.lastIndex), n2 = s.call(l2 ? r2 : a2, y), l2 ? n2 ? (n2.input = n2.input.slice(m), n2[0] = n2[0].slice(m), n2.index = a2.lastIndex, a2.lastIndex += n2[0].length) : a2.lastIndex = 0 : c && n2 && (a2.lastIndex = a2.global ? n2.index + n2[0].length : t2), p && n2 && n2.length > 1 && u.call(n2[0], r2, function() {
            for (i2 = 1; i2 < arguments.length - 2; i2++)
              arguments[i2] === void 0 && (n2[i2] = void 0);
          }), n2;
        }), e.exports = l;
      }, function(e, t, r) {
        "use strict";
        var n = r(225), i = r(18), o = r(27), a = r(26), s = r(47), u = r(35), l = r(226), c = r(227), h = Math.max, p = Math.min, f = Math.floor, d = /\$([$&'`]|\d\d?|<[^>]*>)/g, m = /\$([$&'`]|\d\d?)/g;
        n("replace", 2, function(e2, t2, r2, n2) {
          var y = n2.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, v = n2.REPLACE_KEEPS_$0, _ = y ? "$" : "$0";
          return [function(r3, n3) {
            var i2 = u(this), o2 = r3 == null ? void 0 : r3[e2];
            return o2 !== void 0 ? o2.call(r3, i2, n3) : t2.call(String(i2), r3, n3);
          }, function(e3, n3) {
            if (!y && v || typeof n3 == "string" && n3.indexOf(_) === -1) {
              var o2 = r2(t2, e3, this, n3);
              if (o2.done)
                return o2.value;
            }
            var u2 = i(e3), f2 = String(this), d2 = typeof n3 == "function";
            d2 || (n3 = String(n3));
            var m2 = u2.global;
            if (m2) {
              var b = u2.unicode;
              u2.lastIndex = 0;
            }
            for (var x = []; ; ) {
              var w = c(u2, f2);
              if (w === null)
                break;
              if (x.push(w), !m2)
                break;
              String(w[0]) === "" && (u2.lastIndex = l(f2, a(u2.lastIndex), b));
            }
            for (var E, D = "", S = 0, C = 0; C < x.length; C++) {
              w = x[C];
              for (var A = String(w[0]), N = h(p(s(w.index), f2.length), 0), T = [], O = 1; O < w.length; O++)
                T.push((E = w[O]) === void 0 ? E : String(E));
              var F = w.groups;
              if (d2) {
                var k = [A].concat(T, N, f2);
                F !== void 0 && k.push(F);
                var P = String(n3.apply(void 0, k));
              } else
                P = g(A, f2, N, T, F, n3);
              N >= S && (D += f2.slice(S, N) + P, S = N + A.length);
            }
            return D + f2.slice(S);
          }];
          function g(e3, r3, n3, i2, a2, s2) {
            var u2 = n3 + e3.length, l2 = i2.length, c2 = m;
            return a2 !== void 0 && (a2 = o(a2), c2 = d), t2.call(s2, c2, function(t3, o2) {
              var s3;
              switch (o2.charAt(0)) {
                case "$":
                  return "$";
                case "&":
                  return e3;
                case "`":
                  return r3.slice(0, n3);
                case "'":
                  return r3.slice(u2);
                case "<":
                  s3 = a2[o2.slice(1, -1)];
                  break;
                default:
                  var c3 = +o2;
                  if (c3 === 0)
                    return t3;
                  if (c3 > l2) {
                    var h2 = f(c3 / 10);
                    return h2 === 0 ? t3 : h2 <= l2 ? i2[h2 - 1] === void 0 ? o2.charAt(1) : i2[h2 - 1] + o2.charAt(1) : t3;
                  }
                  s3 = i2[c3 - 1];
              }
              return s3 === void 0 ? "" : s3;
            });
          }
        });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
            this._items = {}, this._nullItems = [];
          }
          return e2.prototype.copy = function() {
            var t2 = new e2();
            for (var r2 in this._items)
              t2._items[r2] = this._items[r2].slice(0);
            return t2._nullItems = this._nullItems.slice(0), t2;
          }, e2.prototype.get = function(e3, t2) {
            var r2 = t2 === null ? this._nullItems : this._items[t2] || null;
            if (r2 === null)
              return null;
            for (var n2 = null, i = 0; i < r2.length; i++)
              if ((n2 = r2[i]) === e3)
                return n2;
            return n2;
          }, e2.prototype.has = function(e3, t2) {
            var r2 = t2 === null ? this._nullItems : this._items[t2] || null;
            return r2 !== null && r2.indexOf(e3) !== -1;
          }, e2.prototype.hasPrefix = function(e3) {
            if (this._nullItems.indexOf(e3) !== -1)
              return true;
            for (var t2 in this._items)
              if (this._items[t2].indexOf(e3) !== -1)
                return true;
            return false;
          }, e2.prototype.set = function(e3, t2) {
            var r2 = t2 === null ? this._nullItems : this._items[t2] || null;
            t2 !== null && r2 === null ? this._items[t2] = [e3] : r2.push(e3);
          }, e2;
        }();
        t.NamespacePrefixMap = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.Surrogate = /[\uD800-\uDFFF]/, t.ScalarValue = /[\uD800-\uDFFF]/, t.NonCharacter = /[\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]/, t.ASCIICodePoint = /[\u0000-\u007F]/, t.ASCIITabOrNewLine = /[\t\n\r]/, t.ASCIIWhiteSpace = /[\t\n\f\r ]/, t.C0Control = /[\u0000-\u001F]/, t.C0ControlOrSpace = /[\u0000-\u001F ]/, t.Control = /[\u0000-\u001F\u007F-\u009F]/, t.ASCIIDigit = /[0-9]/, t.ASCIIUpperHexDigit = /[0-9A-F]/, t.ASCIILowerHexDigit = /[0-9a-f]/, t.ASCIIHexDigit = /[0-9A-Fa-f]/, t.ASCIIUpperAlpha = /[A-Z]/, t.ASCIILowerAlpha = /[a-z]/, t.ASCIIAlpha = /[A-Za-z]/, t.ASCIIAlphanumeric = /[0-9A-Za-z]/;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(2), u = r(3), l = r(171), c = r(104), h = r(9), p = r(17), f = r(72), d = r(30);
        function m(e2, t2) {
          t2 === void 0 && (t2 = void 0), t2 === void 0 && (t2 = null);
          var r2 = y(e2, t2, new Date(), {});
          return r2._isTrusted = true, r2;
        }
        function y(e2, t2, r2, n2) {
          var i2 = new e2("");
          return i2._initializedFlag = true, i2._timeStamp = r2.getTime(), Object.assign(i2, n2), a.dom.features.steps && d.dom_runEventConstructingSteps(i2), i2;
        }
        function v(e2, t2, r2, i2) {
          var o2, a2, l2, c2;
          r2 === void 0 && (r2 = false), i2 === void 0 && (i2 = { value: false });
          var h2 = false;
          e2._dispatchFlag = true;
          var d2 = t2;
          if (r2) {
            var m2 = t2._associatedDocument;
            u.Guard.isDocumentNode(m2) && (d2 = m2);
          }
          var y2 = null, v2 = p.tree_retarget(e2._relatedTarget, t2);
          if (t2 !== v2 || t2 === e2._relatedTarget) {
            var b2 = [];
            try {
              for (var x2 = n(e2._touchTargetList), w2 = x2.next(); !w2.done; w2 = x2.next()) {
                var E2 = w2.value;
                b2.push(p.tree_retarget(E2, t2));
              }
            } catch (e3) {
              o2 = { error: e3 };
            } finally {
              try {
                w2 && !w2.done && (a2 = x2.return) && a2.call(x2);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
            _(e2, t2, d2, v2, b2, false);
            var D2 = u.Guard.isMouseEvent(e2) && e2._type === "click";
            D2 && t2._activationBehavior !== void 0 && (y2 = t2);
            for (var S = u.Guard.isSlotable(t2) && f.shadowTree_isAssigned(t2) ? t2 : null, C = false, A = t2._getTheParent(e2); A !== null && u.Guard.isNode(A); ) {
              if (S !== null) {
                if (!u.Guard.isSlot(A))
                  throw new Error("Parent node of a slotable should be a slot.");
                S = null;
                var N = p.tree_rootNode(A, true);
                u.Guard.isShadowRoot(N) && N._mode === "closed" && (C = true);
              }
              u.Guard.isSlotable(A) && f.shadowTree_isAssigned(A) && (S = A), v2 = p.tree_retarget(e2._relatedTarget, A), b2 = [];
              try {
                for (var T = (l2 = void 0, n(e2._touchTargetList)), O = T.next(); !O.done; O = T.next()) {
                  E2 = O.value;
                  b2.push(p.tree_retarget(E2, A));
                }
              } catch (e3) {
                l2 = { error: e3 };
              } finally {
                try {
                  O && !O.done && (c2 = T.return) && c2.call(T);
                } finally {
                  if (l2)
                    throw l2.error;
                }
              }
              u.Guard.isWindow(A) || u.Guard.isNode(A) && u.Guard.isNode(t2) && p.tree_isAncestorOf(p.tree_rootNode(t2, true), A, true, true) ? (D2 && e2._bubbles && y2 === null && A._activationBehavior && (y2 = A), _(e2, A, null, v2, b2, C)) : A === v2 ? A = null : (t2 = A, D2 && y2 === null && t2._activationBehavior && (y2 = t2), _(e2, A, t2, v2, b2, C)), A !== null && (A = A._getTheParent(e2)), C = false;
            }
            for (var F = null, k = e2._path, P = k.length - 1; P >= 0; P--) {
              if ((L = k[P]).shadowAdjustedTarget !== null) {
                F = L;
                break;
              }
            }
            if (F !== null)
              if (u.Guard.isNode(F.shadowAdjustedTarget) && u.Guard.isShadowRoot(p.tree_rootNode(F.shadowAdjustedTarget, true)))
                h2 = true;
              else if (u.Guard.isNode(F.relatedTarget) && u.Guard.isShadowRoot(p.tree_rootNode(F.relatedTarget, true)))
                h2 = true;
              else
                for (var I = 0; I < F.touchTargetList.length; I++) {
                  var L = F.touchTargetList[I];
                  if (u.Guard.isNode(L) && u.Guard.isShadowRoot(p.tree_rootNode(L, true))) {
                    h2 = true;
                    break;
                  }
                }
            y2 !== null && y2._legacyPreActivationBehavior !== void 0 && y2._legacyPreActivationBehavior(e2);
            for (P = k.length - 1; P >= 0; P--) {
              (L = k[P]).shadowAdjustedTarget !== null ? e2._eventPhase = s.EventPhase.AtTarget : e2._eventPhase = s.EventPhase.Capturing, g(L, e2, "capturing", i2);
            }
            for (P = 0; P < k.length; P++) {
              if ((L = k[P]).shadowAdjustedTarget !== null)
                e2._eventPhase = s.EventPhase.AtTarget;
              else {
                if (!e2._bubbles)
                  continue;
                e2._eventPhase = s.EventPhase.Bubbling;
              }
              g(L, e2, "bubbling", i2);
            }
          }
          return e2._eventPhase = s.EventPhase.None, e2._currentTarget = null, e2._path = [], e2._dispatchFlag = false, e2._stopPropagationFlag = false, e2._stopImmediatePropagationFlag = false, h2 && (e2._target = null, e2._relatedTarget = null, e2._touchTargetList = []), y2 !== null && (e2._canceledFlag || y2._activationBehavior === void 0 ? y2._legacyCanceledActivationBehavior !== void 0 && y2._legacyCanceledActivationBehavior(e2) : y2._activationBehavior(e2)), !e2._canceledFlag;
        }
        function _(e2, t2, r2, n2, i2, o2) {
          var a2 = false;
          u.Guard.isNode(t2) && u.Guard.isShadowRoot(p.tree_rootNode(t2)) && (a2 = true);
          var s2 = false;
          u.Guard.isShadowRoot(t2) && t2._mode === "closed" && (s2 = true), e2._path.push({ invocationTarget: t2, invocationTargetInShadowTree: a2, shadowAdjustedTarget: r2, relatedTarget: n2, touchTargetList: i2, rootOfClosedTree: s2, slotInClosedTree: o2 });
        }
        function g(e2, t2, r2, n2) {
          n2 === void 0 && (n2 = { value: false });
          for (var i2 = t2._path, a2 = -1, s2 = 0; s2 < i2.length; s2++)
            if (i2[s2] === e2) {
              a2 = s2;
              break;
            }
          if (a2 !== -1) {
            var u2 = i2[a2];
            (u2.shadowAdjustedTarget !== null || a2 > 0 && (u2 = i2[a2 - 1]).shadowAdjustedTarget !== null) && (t2._target = u2.shadowAdjustedTarget);
          }
          if (t2._relatedTarget = e2.relatedTarget, t2._touchTargetList = e2.touchTargetList, !t2._stopPropagationFlag) {
            t2._currentTarget = e2.invocationTarget;
            var l2 = t2._currentTarget._eventListenerList, c2 = new (Array.bind.apply(Array, o([void 0], l2)))();
            if (!b(t2, c2, r2, e2, n2) && t2._isTrusted) {
              var h2 = t2._type;
              h2 === "animationend" ? t2._type = "webkitAnimationEnd" : h2 === "animationiteration" ? t2._type = "webkitAnimationIteration" : h2 === "animationstart" ? t2._type = "webkitAnimationStart" : h2 === "transitionend" && (t2._type = "webkitTransitionEnd"), b(t2, c2, r2, e2, n2), t2._type = h2;
            }
          }
        }
        function b(e2, t2, r2, n2, i2) {
          i2 === void 0 && (i2 = { value: false });
          for (var o2 = false, a2 = 0; a2 < t2.length; a2++) {
            var s2 = t2[a2];
            if (!s2.removed) {
              if (e2._type !== s2.type)
                continue;
              if (o2 = true, r2 === "capturing" && !s2.capture)
                continue;
              if (r2 === "bubbling" && s2.capture)
                continue;
              if (s2.once && e2._currentTarget !== null) {
                for (var l2 = e2._currentTarget, c2 = -1, h2 = 0; h2 < l2._eventListenerList.length; h2++)
                  if (l2._eventListenerList[h2] === s2) {
                    c2 = h2;
                    break;
                  }
                c2 !== -1 && l2._eventListenerList.splice(c2, 1);
              }
              var p2 = void 0, f2 = void 0;
              u.Guard.isWindow(p2) && (f2 = p2._currentEvent, n2.invocationTargetInShadowTree === false && (p2._currentEvent = e2)), s2.passive && (e2._inPassiveListenerFlag = true);
              try {
                s2.callback.handleEvent.call(e2._currentTarget, e2);
              } catch (e3) {
                i2.value = true;
              }
              if (s2.passive && (e2._inPassiveListenerFlag = false), u.Guard.isWindow(p2) && (p2._currentEvent = f2), e2._stopImmediatePropagationFlag)
                return o2;
            }
          }
          return o2;
        }
        function x(e2, t2) {
          return null;
        }
        function w(e2, t2) {
          return null;
        }
        function E(e2, t2) {
        }
        function D(e2, t2) {
        }
        t.event_setTheCanceledFlag = function(e2) {
          e2._cancelable && !e2._inPassiveListenerFlag && (e2._canceledFlag = true);
        }, t.event_initialize = function(e2, t2, r2, n2) {
          e2._initializedFlag = true, e2._stopPropagationFlag = false, e2._stopImmediatePropagationFlag = false, e2._canceledFlag = false, e2._isTrusted = false, e2._target = null, e2._type = t2, e2._bubbles = r2, e2._cancelable = n2;
        }, t.event_createAnEvent = m, t.event_innerEventCreationSteps = y, t.event_dispatch = v, t.event_appendToAnEventPath = _, t.event_invoke = g, t.event_innerInvoke = b, t.event_fireAnEvent = function(e2, t2, r2, n2, i2) {
          r2 === void 0 && (r2 = c.EventImpl);
          var o2 = m(r2);
          if (o2._type = e2, n2)
            for (var a2 in n2) {
              o2[a2] = n2[a2];
            }
          return v(o2, t2, i2);
        }, t.event_createLegacyEvent = function(e2) {
          var t2 = null;
          switch (e2.toLowerCase()) {
            case "beforeunloadevent":
            case "compositionevent":
              break;
            case "customevent":
              t2 = l.CustomEventImpl;
              break;
            case "devicemotionevent":
            case "deviceorientationevent":
            case "dragevent":
              break;
            case "event":
            case "events":
              t2 = c.EventImpl;
          }
          if (t2 === null)
            throw new h.NotSupportedError("Event constructor not found for interface " + e2 + ".");
          var r2 = new t2("");
          return r2._type = "", r2._timeStamp = new Date().getTime(), r2._isTrusted = false, r2._initializedFlag = false, r2;
        }, t.event_getterEventHandlerIDLAttribute = function(e2, t2) {
          return null;
        }, t.event_setterEventHandlerIDLAttribute = function(e2, t2, r2) {
        }, t.event_determineTheTargetOfAnEventHandler = x, t.event_getTheCurrentValueOfAnEventHandler = w, t.event_activateAnEventHandler = E, t.event_deactivateAnEventHandler = D;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(6), u = r(2), l = r(9), c = r(34), h = r(3), p = r(1), f = r(7), d = r(152), m = r(0), y = r(12), v = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._children = new Set(), t3._encoding = { name: "UTF-8", labels: ["unicode-1-1-utf-8", "utf-8", "utf8"] }, t3._contentType = "application/xml", t3._URL = { scheme: "about", username: "", password: "", host: null, port: null, path: ["blank"], query: null, fragment: null, _cannotBeABaseURLFlag: true, _blobURLEntry: null }, t3._origin = null, t3._type = "xml", t3._mode = "no-quirks", t3._documentElement = null, t3._hasNamespaces = false, t3._nodeDocumentOverwrite = null, t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "_nodeDocument", { get: function() {
            return this._nodeDocumentOverwrite || this;
          }, set: function(e3) {
            this._nodeDocumentOverwrite = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "implementation", { get: function() {
            return this._implementation || (this._implementation = m.create_domImplementation(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "URL", { get: function() {
            return d.urlSerializer(this._URL);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "documentURI", { get: function() {
            return this.URL;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "origin", { get: function() {
            return "null";
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "compatMode", { get: function() {
            return this._mode === "quirks" ? "BackCompat" : "CSS1Compat";
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "characterSet", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "charset", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "inputEncoding", { get: function() {
            return this._encoding.name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "contentType", { get: function() {
            return this._contentType;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "doctype", { get: function() {
            var e3, t3;
            try {
              for (var r2 = o(this._children), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                var i2 = n2.value;
                if (h.Guard.isDocumentTypeNode(i2))
                  return i2;
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                n2 && !n2.done && (t3 = r2.return) && t3.call(r2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "documentElement", { get: function() {
            return this._documentElement;
          }, enumerable: true, configurable: true }), t2.prototype.getElementsByTagName = function(e3) {
            return m.node_listOfElementsWithQualifiedName(e3, this);
          }, t2.prototype.getElementsByTagNameNS = function(e3, t3) {
            return m.node_listOfElementsWithNamespace(e3, t3, this);
          }, t2.prototype.getElementsByClassName = function(e3) {
            return m.node_listOfElementsWithClassNames(e3, this);
          }, t2.prototype.createElement = function(e3, t3) {
            if (!m.xml_isName(e3))
              throw new l.InvalidCharacterError();
            this._type === "html" && (e3 = e3.toLowerCase());
            var r2 = null;
            t3 !== void 0 && (r2 = p.isString(t3) ? t3 : t3.is);
            var n2 = this._type === "html" || this._contentType === "application/xhtml+xml" ? f.namespace.HTML : null;
            return m.element_createAnElement(this, e3, n2, null, r2, true);
          }, t2.prototype.createElementNS = function(e3, t3, r2) {
            return m.document_internalCreateElementNS(this, e3, t3, r2);
          }, t2.prototype.createDocumentFragment = function() {
            return m.create_documentFragment(this);
          }, t2.prototype.createTextNode = function(e3) {
            return m.create_text(this, e3);
          }, t2.prototype.createCDATASection = function(e3) {
            if (this._type === "html")
              throw new l.NotSupportedError();
            if (e3.indexOf("]]>") !== -1)
              throw new l.InvalidCharacterError();
            return m.create_cdataSection(this, e3);
          }, t2.prototype.createComment = function(e3) {
            return m.create_comment(this, e3);
          }, t2.prototype.createProcessingInstruction = function(e3, t3) {
            if (!m.xml_isName(e3))
              throw new l.InvalidCharacterError();
            if (t3.indexOf("?>") !== -1)
              throw new l.InvalidCharacterError();
            return m.create_processingInstruction(this, e3, t3);
          }, t2.prototype.importNode = function(e3, t3) {
            if (t3 === void 0 && (t3 = false), h.Guard.isDocumentNode(e3) || h.Guard.isShadowRoot(e3))
              throw new l.NotSupportedError();
            return m.node_clone(e3, this, t3);
          }, t2.prototype.adoptNode = function(e3) {
            if (h.Guard.isDocumentNode(e3))
              throw new l.NotSupportedError();
            if (h.Guard.isShadowRoot(e3))
              throw new l.HierarchyRequestError();
            return m.document_adopt(e3, this), e3;
          }, t2.prototype.createAttribute = function(e3) {
            if (!m.xml_isName(e3))
              throw new l.InvalidCharacterError();
            return this._type === "html" && (e3 = e3.toLowerCase()), m.create_attr(this, e3);
          }, t2.prototype.createAttributeNS = function(e3, t3) {
            var r2 = a(m.namespace_validateAndExtract(e3, t3), 3), n2 = r2[0], i2 = r2[1], o2 = r2[2], s2 = m.create_attr(this, o2);
            return s2._namespace = n2, s2._namespacePrefix = i2, s2;
          }, t2.prototype.createEvent = function(e3) {
            return m.event_createLegacyEvent(e3);
          }, t2.prototype.createRange = function() {
            var e3 = m.create_range();
            return e3._start = [this, 0], e3._end = [this, 0], e3;
          }, t2.prototype.createNodeIterator = function(e3, t3, r2) {
            t3 === void 0 && (t3 = u.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m.create_nodeIterator(e3, e3, true);
            return n2._whatToShow = t3, n2._iteratorCollection = m.create_nodeList(e3), p.isFunction(r2) ? (n2._filter = m.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t2.prototype.createTreeWalker = function(e3, t3, r2) {
            t3 === void 0 && (t3 = u.WhatToShow.All), r2 === void 0 && (r2 = null);
            var n2 = m.create_treeWalker(e3, e3);
            return n2._whatToShow = t3, p.isFunction(r2) ? (n2._filter = m.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
          }, t2.prototype._getTheParent = function(e3) {
            return e3._type === "load" ? null : s.dom.window;
          }, t2.prototype.getElementById = function(e3) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t2.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.append = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelector = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelectorAll = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2;
        }(c.NodeImpl);
        t.DocumentImpl = v, y.idl_defineConst(v.prototype, "_nodeType", u.NodeType.Document);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(2), u = r(34), l = r(9), c = r(7), h = r(0), p = r(12), f = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._children = new Set(), t3._namespace = null, t3._namespacePrefix = null, t3._localName = "", t3._customElementState = "undefined", t3._customElementDefinition = null, t3._is = null, t3._shadowRoot = null, t3._attributeList = h.create_namedNodeMap(t3), t3._attributeChangeSteps = [], t3._name = "", t3._assignedSlot = null, t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "tagName", { get: function() {
            return this._htmlUppercasedQualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "id", { get: function() {
            return h.element_getAnAttributeValue(this, "id");
          }, set: function(e3) {
            h.element_setAnAttributeValue(this, "id", e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "className", { get: function() {
            return h.element_getAnAttributeValue(this, "class");
          }, set: function(e3) {
            h.element_setAnAttributeValue(this, "class", e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "classList", { get: function() {
            var e3 = h.element_getAnAttributeByName("class", this);
            return e3 === null && (e3 = h.create_attr(this._nodeDocument, "class")), h.create_domTokenList(this, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "slot", { get: function() {
            return h.element_getAnAttributeValue(this, "slot");
          }, set: function(e3) {
            h.element_setAnAttributeValue(this, "slot", e3);
          }, enumerable: true, configurable: true }), t2.prototype.hasAttributes = function() {
            return this._attributeList.length !== 0;
          }, Object.defineProperty(t2.prototype, "attributes", { get: function() {
            return this._attributeList;
          }, enumerable: true, configurable: true }), t2.prototype.getAttributeNames = function() {
            var e3, t3, r2 = [];
            try {
              for (var n2 = o(this._attributeList), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                var a2 = i2.value;
                r2.push(a2._qualifiedName);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return r2;
          }, t2.prototype.getAttribute = function(e3) {
            var t3 = h.element_getAnAttributeByName(e3, this);
            return t3 ? t3._value : null;
          }, t2.prototype.getAttributeNS = function(e3, t3) {
            var r2 = h.element_getAnAttributeByNamespaceAndLocalName(e3, t3, this);
            return r2 ? r2._value : null;
          }, t2.prototype.setAttribute = function(e3, t3) {
            if (!h.xml_isName(e3))
              throw new l.InvalidCharacterError();
            this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i2 = this._attributeList[n2];
              if (i2._qualifiedName === e3) {
                r2 = i2;
                break;
              }
            }
            if (r2 === null)
              return (r2 = h.create_attr(this._nodeDocument, e3))._value = t3, void h.element_append(r2, this);
            h.element_change(r2, this, t3);
          }, t2.prototype.setAttributeNS = function(e3, t3, r2) {
            var n2 = a(h.namespace_validateAndExtract(e3, t3), 3), i2 = n2[0], o2 = n2[1], s2 = n2[2];
            h.element_setAnAttributeValue(this, s2, r2, o2, i2);
          }, t2.prototype.removeAttribute = function(e3) {
            h.element_removeAnAttributeByName(e3, this);
          }, t2.prototype.removeAttributeNS = function(e3, t3) {
            h.element_removeAnAttributeByNamespaceAndLocalName(e3, t3, this);
          }, t2.prototype.hasAttribute = function(e3) {
            this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toLowerCase());
            for (var t3 = 0; t3 < this._attributeList.length; t3++) {
              if (this._attributeList[t3]._qualifiedName === e3)
                return true;
            }
            return false;
          }, t2.prototype.toggleAttribute = function(e3, t3) {
            if (!h.xml_isName(e3))
              throw new l.InvalidCharacterError();
            this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toLowerCase());
            for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i2 = this._attributeList[n2];
              if (i2._qualifiedName === e3) {
                r2 = i2;
                break;
              }
            }
            return r2 === null ? (t3 === void 0 || t3 === true) && ((r2 = h.create_attr(this._nodeDocument, e3))._value = "", h.element_append(r2, this), true) : t3 !== void 0 && t3 !== false || (h.element_removeAnAttributeByName(e3, this), false);
          }, t2.prototype.hasAttributeNS = function(e3, t3) {
            for (var r2 = e3 || null, n2 = 0; n2 < this._attributeList.length; n2++) {
              var i2 = this._attributeList[n2];
              if (i2._namespace === r2 && i2._localName === t3)
                return true;
            }
            return false;
          }, t2.prototype.getAttributeNode = function(e3) {
            return h.element_getAnAttributeByName(e3, this);
          }, t2.prototype.getAttributeNodeNS = function(e3, t3) {
            return h.element_getAnAttributeByNamespaceAndLocalName(e3, t3, this);
          }, t2.prototype.setAttributeNode = function(e3) {
            return h.element_setAnAttribute(e3, this);
          }, t2.prototype.setAttributeNodeNS = function(e3) {
            return h.element_setAnAttribute(e3, this);
          }, t2.prototype.removeAttributeNode = function(e3) {
            for (var t3 = false, r2 = 0; r2 < this._attributeList.length; r2++) {
              if (this._attributeList[r2] === e3) {
                t3 = true;
                break;
              }
            }
            if (!t3)
              throw new l.NotFoundError();
            return h.element_remove(e3, this), e3;
          }, t2.prototype.attachShadow = function(e3) {
            if (this._namespace !== c.namespace.HTML)
              throw new l.NotSupportedError();
            if (!h.customElement_isValidCustomElementName(this._localName) && !h.customElement_isValidShadowHostName(this._localName))
              throw new l.NotSupportedError();
            if (h.customElement_isValidCustomElementName(this._localName) || this._is !== null) {
              var t3 = h.customElement_lookUpACustomElementDefinition(this._nodeDocument, this._namespace, this._localName, this._is);
              if (t3 !== null && t3.disableShadow === true)
                throw new l.NotSupportedError();
            }
            if (this._shadowRoot !== null)
              throw new l.NotSupportedError();
            var r2 = h.create_shadowRoot(this._nodeDocument, this);
            return r2._mode = e3.mode, this._shadowRoot = r2, r2;
          }, Object.defineProperty(t2.prototype, "shadowRoot", { get: function() {
            var e3 = this._shadowRoot;
            return e3 === null || e3.mode === "closed" ? null : e3;
          }, enumerable: true, configurable: true }), t2.prototype.closest = function(e3) {
            throw new l.NotImplementedError();
          }, t2.prototype.matches = function(e3) {
            throw new l.NotImplementedError();
          }, t2.prototype.webkitMatchesSelector = function(e3) {
            return this.matches(e3);
          }, t2.prototype.getElementsByTagName = function(e3) {
            return h.node_listOfElementsWithQualifiedName(e3, this);
          }, t2.prototype.getElementsByTagNameNS = function(e3, t3) {
            return h.node_listOfElementsWithNamespace(e3, t3, this);
          }, t2.prototype.getElementsByClassName = function(e3) {
            return h.node_listOfElementsWithClassNames(e3, this);
          }, t2.prototype.insertAdjacentElement = function(e3, t3) {
            return h.element_insertAdjacent(this, e3, t3);
          }, t2.prototype.insertAdjacentText = function(e3, t3) {
            var r2 = h.create_text(this._nodeDocument, t3);
            h.element_insertAdjacent(this, e3, r2);
          }, Object.defineProperty(t2.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_htmlUppercasedQualifiedName", { get: function() {
            var e3 = this._qualifiedName;
            return this._namespace === c.namespace.HTML && this._nodeDocument._type === "html" && (e3 = e3.toUpperCase()), e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.append = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelector = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelectorAll = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, Object.defineProperty(t2.prototype, "previousElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextElementSibling", { get: function() {
            throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.before = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.after = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.replaceWith = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, Object.defineProperty(t2.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2, n2, i2) {
            n2 === void 0 && (n2 = null), i2 === void 0 && (i2 = null);
            var o2 = new t2();
            return o2._localName = r2, o2._namespace = n2, o2._namespacePrefix = i2, o2._nodeDocument = e3, o2;
          }, t2;
        }(u.NodeImpl);
        t.ElementImpl = f, p.idl_defineConst(f.prototype, "_nodeType", s.NodeType.Element);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(34), s = r(12), u = function(e2) {
          function t2(t3) {
            t3 === void 0 && (t3 = null);
            var r2 = e2.call(this) || this;
            return r2._children = new Set(), r2._host = t3, r2;
          }
          return i(t2, e2), t2.prototype.getElementById = function(e3) {
            throw new Error("Mixin: NonElementParentNode not implemented.");
          }, Object.defineProperty(t2.prototype, "children", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
            throw new Error("Mixin: ParentNode not implemented.");
          }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.append = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelector = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2.prototype.querySelectorAll = function(e3) {
            throw new Error("Mixin: ParentNode not implemented.");
          }, t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(a.NodeImpl);
        t.DocumentFragmentImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.DocumentFragment);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(2), s = r(71), u = r(0), l = r(12), c = function(e2) {
          function t2(t3) {
            t3 === void 0 && (t3 = "");
            var r2 = e2.call(this, t3) || this;
            return r2._name = "", r2._assignedSlot = null, r2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "wholeText", { get: function() {
            var e3, t3, r2 = "";
            try {
              for (var n2 = o(u.text_contiguousTextNodes(this, true)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                r2 += i2.value._data;
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), t2.prototype.splitText = function(e3) {
            return u.text_split(this, e3);
          }, Object.defineProperty(t2.prototype, "assignedSlot", { get: function() {
            throw new Error("Mixin: Slotable not implemented.");
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(s.CharacterDataImpl);
        t.TextImpl = c, l.idl_defineConst(c.prototype, "_nodeType", a.NodeType.Text);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "_startNode", { get: function() {
            return this._start[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_startOffset", { get: function() {
            return this._start[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_endNode", { get: function() {
            return this._end[0];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_endOffset", { get: function() {
            return this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_collapsed", { get: function() {
            return this._start[0] === this._end[0] && this._start[1] === this._end[1];
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "startContainer", { get: function() {
            return this._startNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "startOffset", { get: function() {
            return this._startOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "endContainer", { get: function() {
            return this._endNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "endOffset", { get: function() {
            return this._endOffset;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "collapsed", { get: function() {
            return this._collapsed;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.AbstractRangeImpl = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = function() {
          function e2(e3) {
            this._activeFlag = false, this._root = e3, this._whatToShow = n.WhatToShow.All, this._filter = null;
          }
          return Object.defineProperty(e2.prototype, "root", { get: function() {
            return this._root;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "whatToShow", { get: function() {
            return this._whatToShow;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "filter", { get: function() {
            return this._filter;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.TraverserImpl = i;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(0), o = r(12), a = function() {
          function e2(e3, t2) {
            this._target = null, this._relatedTarget = null, this._touchTargetList = [], this._path = [], this._currentTarget = null, this._eventPhase = n.EventPhase.None, this._stopPropagationFlag = false, this._stopImmediatePropagationFlag = false, this._canceledFlag = false, this._inPassiveListenerFlag = false, this._composedFlag = false, this._initializedFlag = false, this._dispatchFlag = false, this._isTrusted = false, this._bubbles = false, this._cancelable = false, this._type = e3, t2 && (this._bubbles = t2.bubbles || false, this._cancelable = t2.cancelable || false, this._composedFlag = t2.composed || false), this._initializedFlag = true, this._timeStamp = new Date().getTime();
          }
          return Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "srcElement", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "currentTarget", { get: function() {
            return this._currentTarget;
          }, enumerable: true, configurable: true }), e2.prototype.composedPath = function() {
            var e3 = [], t2 = this._path;
            if (t2.length === 0)
              return e3;
            var r2 = this._currentTarget;
            if (r2 === null)
              throw new Error("Event currentTarget is null.");
            e3.push(r2);
            for (var n2 = 0, i2 = 0, o2 = t2.length - 1; o2 >= 0; ) {
              if (t2[o2].rootOfClosedTree && i2++, t2[o2].invocationTarget === r2) {
                n2 = o2;
                break;
              }
              t2[o2].slotInClosedTree && i2--, o2--;
            }
            var a2 = i2, s = i2;
            for (o2 = n2 - 1; o2 >= 0; )
              t2[o2].rootOfClosedTree && a2++, a2 <= s && e3.unshift(t2[o2].invocationTarget), t2[o2].slotInClosedTree && --a2 < s && (s = a2), o2--;
            for (a2 = i2, s = i2, o2 = n2 + 1; o2 < t2.length; )
              t2[o2].slotInClosedTree && a2++, a2 <= s && e3.push(t2[o2].invocationTarget), t2[o2].rootOfClosedTree && --a2 < s && (s = a2), o2++;
            return e3;
          }, Object.defineProperty(e2.prototype, "eventPhase", { get: function() {
            return this._eventPhase;
          }, enumerable: true, configurable: true }), e2.prototype.stopPropagation = function() {
            this._stopPropagationFlag = true;
          }, Object.defineProperty(e2.prototype, "cancelBubble", { get: function() {
            return this._stopPropagationFlag;
          }, set: function(e3) {
            e3 && this.stopPropagation();
          }, enumerable: true, configurable: true }), e2.prototype.stopImmediatePropagation = function() {
            this._stopPropagationFlag = true, this._stopImmediatePropagationFlag = true;
          }, Object.defineProperty(e2.prototype, "bubbles", { get: function() {
            return this._bubbles;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "cancelable", { get: function() {
            return this._cancelable;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "returnValue", { get: function() {
            return !this._canceledFlag;
          }, set: function(e3) {
            e3 || i.event_setTheCanceledFlag(this);
          }, enumerable: true, configurable: true }), e2.prototype.preventDefault = function() {
            i.event_setTheCanceledFlag(this);
          }, Object.defineProperty(e2.prototype, "defaultPrevented", { get: function() {
            return this._canceledFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "composed", { get: function() {
            return this._composedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "isTrusted", { get: function() {
            return this._isTrusted;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "timeStamp", { get: function() {
            return this._timeStamp;
          }, enumerable: true, configurable: true }), e2.prototype.initEvent = function(e3, t2, r2) {
            t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false), this._dispatchFlag || i.event_initialize(this, e3, t2, r2);
          }, e2.NONE = 0, e2.CAPTURING_PHASE = 1, e2.AT_TARGET = 2, e2.BUBBLING_PHASE = 3, e2;
        }();
        t.EventImpl = a, o.idl_defineConst(a.prototype, "NONE", 0), o.idl_defineConst(a.prototype, "CAPTURING_PHASE", 1), o.idl_defineConst(a.prototype, "AT_TARGET", 2), o.idl_defineConst(a.prototype, "BUBBLING_PHASE", 3);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(9);
        t.traversal_filter = function(e2, t2) {
          if (e2._activeFlag)
            throw new i.InvalidStateError();
          var r2 = 1 << t2._nodeType - 1;
          if ((e2.whatToShow & r2) == 0)
            return n.FilterResult.Skip;
          if (!e2.filter)
            return n.FilterResult.Accept;
          e2._activeFlag = true;
          var o = n.FilterResult.Reject;
          try {
            o = e2.filter.acceptNode(t2);
          } catch (t3) {
            throw e2._activeFlag = false, t3;
          }
          return e2._activeFlag = false, o;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(6), a = r(3), s = r(1), u = r(99), l = r(73), c = r(17), h = r(173), p = r(30), f = r(52), d = r(37);
        t.document_elementInterface = function(e2, t2) {
          return u.ElementImpl;
        }, t.document_internalCreateElementNS = function(e2, t2, r2, i2) {
          var o2 = n(h.namespace_validateAndExtract(t2, r2), 3), a2 = o2[0], u2 = o2[1], l2 = o2[2], c2 = null;
          return i2 !== void 0 && (c2 = s.isString(i2) ? i2 : i2.is), f.element_createAnElement(e2, l2, a2, u2, c2, true);
        }, t.document_adopt = function(e2, t2) {
          var r2, n2;
          if (e2._nodeDocument !== t2 || e2._parent !== null) {
            var s2 = e2._nodeDocument;
            if (e2._parent && d.mutation_remove(e2, e2._parent), t2 !== s2)
              for (var u2 = c.tree_getFirstDescendantNode(e2, true, true); u2 !== null; ) {
                if (u2._nodeDocument = t2, a.Guard.isElementNode(u2))
                  try {
                    for (var h2 = (r2 = void 0, i(u2._attributeList._asArray())), f2 = h2.next(); !f2.done; f2 = h2.next()) {
                      f2.value._nodeDocument = t2;
                    }
                  } catch (e3) {
                    r2 = { error: e3 };
                  } finally {
                    try {
                      f2 && !f2.done && (n2 = h2.return) && n2.call(h2);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                o.dom.features.customElements && a.Guard.isElementNode(u2) && u2._customElementState === "custom" && l.customElement_enqueueACustomElementCallbackReaction(u2, "adoptedCallback", [s2, t2]), o.dom.features.steps && p.dom_runAdoptingSteps(u2, s2), u2 = c.tree_getNextDescendantNode(e2, u2, true, true);
              }
          }
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(9), s = r(17), u = r(51), l = r(30);
        t.characterData_replaceData = function(e2, t2, r2, c) {
          var h, p, f = s.tree_nodeLength(e2);
          if (t2 > f)
            throw new a.IndexSizeError("Offset exceeds character data length. Offset: " + t2 + ", Length: " + f + ", Node is " + e2.nodeName + ".");
          t2 + r2 > f && (r2 = f - t2), i.dom.features.mutationObservers && u.observer_queueMutationRecord("characterData", e2, null, null, e2._data, [], [], null, null);
          var d = e2._data.substring(0, t2) + c + e2._data.substring(t2 + r2);
          e2._data = d;
          try {
            for (var m = n(i.dom.rangeList), y = m.next(); !y.done; y = m.next()) {
              var v = y.value;
              v._start[0] === e2 && v._start[1] > t2 && v._start[1] <= t2 + r2 && (v._start[1] = t2), v._end[0] === e2 && v._end[1] > t2 && v._end[1] <= t2 + r2 && (v._end[1] = t2), v._start[0] === e2 && v._start[1] > t2 + r2 && (v._start[1] += c.length - r2), v._end[0] === e2 && v._end[1] > t2 + r2 && (v._end[1] += c.length - r2);
            }
          } catch (e3) {
            h = { error: e3 };
          } finally {
            try {
              y && !y.done && (p = m.return) && p.call(m);
            } finally {
              if (h)
                throw h.error;
            }
          }
          i.dom.features.steps && o.Guard.isTextNode(e2) && e2._parent !== null && l.dom_runChildTextContentChangeSteps(e2._parent);
        }, t.characterData_substringData = function(e2, t2, r2) {
          var n2 = s.tree_nodeLength(e2);
          if (t2 > n2)
            throw new a.IndexSizeError("Offset exceeds character data length. Offset: " + t2 + ", Length: " + n2 + ", Node is " + e2.nodeName + ".");
          return t2 + r2 > n2 ? e2._data.substr(t2) : e2._data.substr(t2, r2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(n(arguments[t2]));
          return e2;
        }, o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(7);
        function s(e2) {
          var t2 = a.string.splitAStringOnASCIIWhitespace(e2);
          return new Set(t2);
        }
        function u(e2) {
          return i(e2).join(" ");
        }
        t.orderedSet_parse = s, t.orderedSet_serialize = u, t.orderedSet_sanitize = function(e2) {
          return u(s(e2));
        }, t.orderedSet_contains = function(e2, t2, r2) {
          var n2, i2, a2, s2;
          try {
            for (var u2 = o(t2), l = u2.next(); !l.done; l = u2.next()) {
              var c = l.value, h = false;
              try {
                for (var p = (a2 = void 0, o(e2)), f = p.next(); !f.done; f = p.next()) {
                  var d = f.value;
                  if (r2) {
                    if (d === c) {
                      h = true;
                      break;
                    }
                  } else if (d.toUpperCase() === c.toUpperCase()) {
                    h = true;
                    break;
                  }
                }
              } catch (e3) {
                a2 = { error: e3 };
              } finally {
                try {
                  f && !f.done && (s2 = p.return) && s2.call(p);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              if (!h)
                return false;
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (i2 = u2.return) && i2.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          return true;
        };
      }, function(e, t, r) {
        "use strict";
        r(179), Object.defineProperty(t, "__esModule", { value: true });
        var n = r(262), i = r(110), o = r(1);
        i.dom.setFeatures(false), t.createDocument = function() {
          var e2 = new n.DOMImplementation().createDocument(null, "root", null);
          return e2.documentElement && e2.removeChild(e2.documentElement), e2;
        }, t.sanitizeInput = function(e2, t2) {
          if (e2 == null)
            return e2;
          if (t2 === void 0)
            return e2 + "";
          var r2 = "";
          e2 += "";
          for (var n2 = 0; n2 < e2.length; n2++) {
            var i2 = e2.charCodeAt(n2);
            if (i2 === 9 || i2 === 10 || i2 === 13 || i2 >= 32 && i2 <= 55295 || i2 >= 57344 && i2 <= 65533)
              r2 += e2.charAt(n2);
            else if (i2 >= 55296 && i2 <= 56319 && n2 < e2.length - 1) {
              var a = e2.charCodeAt(n2 + 1);
              a >= 56320 && a <= 57343 ? (i2 = 1024 * (i2 - 55296) + a - 56320 + 65536, r2 += String.fromCodePoint(i2), n2++) : r2 += o.isString(t2) ? t2 : t2(e2.charAt(n2), n2, e2);
            } else
              r2 += o.isString(t2) ? t2 : t2(e2.charAt(n2), n2, e2);
          }
          return r2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(1), i = r(153);
        t.AbortController = i.AbortControllerImpl;
        var o = r(154);
        t.AbortSignal = o.AbortSignalImpl;
        var a = r(102);
        t.AbstractRange = a.AbstractRangeImpl;
        var s = r(157);
        t.Attr = s.AttrImpl;
        var u = r(158);
        t.CDATASection = u.CDATASectionImpl;
        var l = r(71);
        t.CharacterData = l.CharacterDataImpl;
        var c = r(263), h = r(159);
        t.Comment = h.CommentImpl;
        var p = r(171);
        t.CustomEvent = p.CustomEventImpl;
        var f = r(100);
        t.DocumentFragment = f.DocumentFragmentImpl;
        var d = r(98);
        t.Document = d.DocumentImpl;
        var m = r(264), y = r(155);
        t.DocumentType = y.DocumentTypeImpl;
        var v = r(6);
        t.dom = v.dom;
        var _ = r(148);
        t.DOMImplementation = _.DOMImplementationImpl;
        var g = r(170);
        t.DOMTokenList = g.DOMTokenListImpl;
        var b = r(99);
        t.Element = b.ElementImpl;
        var x = r(104);
        t.Event = x.EventImpl;
        var w = r(70);
        t.EventTarget = w.EventTargetImpl;
        var E = r(161);
        t.HTMLCollection = E.HTMLCollectionImpl;
        var D = r(265);
        t.MutationObserver = D.MutationObserverImpl;
        var S = r(169);
        t.MutationRecord = S.MutationRecordImpl;
        var C = r(164);
        t.NamedNodeMap = C.NamedNodeMapImpl;
        var A = r(168);
        t.NodeFilter = A.NodeFilterImpl;
        var N = r(34);
        t.Node = N.NodeImpl;
        var T = r(166);
        t.NodeIterator = T.NodeIteratorImpl;
        var O = r(162);
        t.NodeList = O.NodeListImpl;
        var F = r(163);
        t.NodeListStatic = F.NodeListStaticImpl;
        var k = r(266), P = r(267), I = r(268), L = r(160);
        t.ProcessingInstruction = L.ProcessingInstructionImpl;
        var M = r(165);
        t.Range = M.RangeImpl;
        var B = r(156);
        t.ShadowRoot = B.ShadowRootImpl;
        var j = r(269), R = r(270);
        t.StaticRange = R.StaticRangeImpl;
        var z = r(101);
        t.Text = z.TextImpl;
        var U = r(103);
        t.Traverser = U.TraverserImpl;
        var G = r(167);
        t.TreeWalker = G.TreeWalkerImpl;
        var X = r(149);
        t.Window = X.WindowImpl;
        var q = r(151);
        t.XMLDocument = q.XMLDocumentImpl, n.applyMixin(b.ElementImpl, c.ChildNodeImpl), n.applyMixin(l.CharacterDataImpl, c.ChildNodeImpl), n.applyMixin(y.DocumentTypeImpl, c.ChildNodeImpl), n.applyMixin(d.DocumentImpl, m.DocumentOrShadowRootImpl), n.applyMixin(B.ShadowRootImpl, m.DocumentOrShadowRootImpl), n.applyMixin(b.ElementImpl, k.NonDocumentTypeChildNodeImpl), n.applyMixin(l.CharacterDataImpl, k.NonDocumentTypeChildNodeImpl), n.applyMixin(d.DocumentImpl, P.NonElementParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, P.NonElementParentNodeImpl), n.applyMixin(d.DocumentImpl, I.ParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, I.ParentNodeImpl), n.applyMixin(b.ElementImpl, I.ParentNodeImpl), n.applyMixin(z.TextImpl, j.SlotableImpl), n.applyMixin(b.ElementImpl, j.SlotableImpl);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
          e2[e2.EOF = 0] = "EOF", e2[e2.Declaration = 1] = "Declaration", e2[e2.DocType = 2] = "DocType", e2[e2.Element = 3] = "Element", e2[e2.Text = 4] = "Text", e2[e2.CDATA = 5] = "CDATA", e2[e2.PI = 6] = "PI", e2[e2.Comment = 7] = "Comment", e2[e2.ClosingTag = 8] = "ClosingTag";
        }(t.TokenType || (t.TokenType = {}));
      }, function(e, t, r) {
        "use strict";
        r(64), r(20), r(66);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(1), a = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            var r2 = this, n2 = this._builderOptions, i2 = null;
            return o.isFunction(t3) ? i2 = this.parse(e3, t3.apply(this)) : o.isArray(t3) || o.isSet(t3) ? o.forEachArray(t3, function(t4) {
              return i2 = r2.parse(e3, t4);
            }, this) : o.isMap(t3) || o.isObject(t3) ? o.forEachObject(t3, function(t4, a2) {
              if (o.isFunction(a2) && (a2 = a2.apply(r2)), n2.ignoreConverters || t4.indexOf(n2.convert.att) !== 0)
                if (n2.ignoreConverters || t4.indexOf(n2.convert.text) !== 0)
                  if (n2.ignoreConverters || t4.indexOf(n2.convert.cdata) !== 0)
                    if (n2.ignoreConverters || t4.indexOf(n2.convert.comment) !== 0)
                      if (n2.ignoreConverters || t4.indexOf(n2.convert.ins) !== 0)
                        if ((o.isArray(a2) || o.isSet(a2)) && o.isEmpty(a2))
                          ;
                        else if ((o.isMap(a2) || o.isObject(a2)) && o.isEmpty(a2))
                          i2 = r2.element(e3, void 0, r2.sanitize(t4)) || i2;
                        else if (n2.keepNullNodes || a2 != null)
                          if (o.isArray(a2) || o.isSet(a2))
                            o.forEachArray(a2, function(n3) {
                              var o2 = {};
                              o2[t4] = n3, i2 = r2.parse(e3, o2);
                            }, r2);
                          else if (o.isMap(a2) || o.isObject(a2)) {
                            (s = r2.element(e3, void 0, r2.sanitize(t4))) && (i2 = s, r2.parse(s, a2));
                          } else if (a2 != null && a2 !== "") {
                            var s;
                            (s = r2.element(e3, void 0, r2.sanitize(t4))) && (i2 = s, r2.text(s, r2._decodeText(r2.sanitize(a2))));
                          } else
                            i2 = r2.element(e3, void 0, r2.sanitize(t4)) || i2;
                        else
                          ;
                      else if (o.isString(a2)) {
                        var u = a2.indexOf(" "), l = u === -1 ? a2 : a2.substr(0, u), c = u === -1 ? "" : a2.substr(u + 1);
                        i2 = r2.instruction(e3, r2.sanitize(l), r2.sanitize(c)) || i2;
                      } else
                        o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                          var n3 = t5.indexOf(" "), o2 = n3 === -1 ? t5 : t5.substr(0, n3), a3 = n3 === -1 ? "" : t5.substr(n3 + 1);
                          i2 = r2.instruction(e3, r2.sanitize(o2), r2.sanitize(a3)) || i2;
                        }, r2) : o.forEachObject(a2, function(t5, n3) {
                          return i2 = r2.instruction(e3, r2.sanitize(t5), r2.sanitize(n3)) || i2;
                        }, r2);
                    else
                      o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                        return i2 = r2.comment(e3, r2.sanitize(t5)) || i2;
                      }, r2) : i2 = r2.comment(e3, r2.sanitize(a2)) || i2;
                  else
                    o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                      return i2 = r2.cdata(e3, r2.sanitize(t5)) || i2;
                    }, r2) : i2 = r2.cdata(e3, r2.sanitize(a2)) || i2;
                else
                  i2 = o.isMap(a2) || o.isObject(a2) ? r2.parse(e3, a2) : r2.text(e3, r2._decodeText(r2.sanitize(a2))) || i2;
              else if (t4 === n2.convert.att) {
                if (o.isArray(a2) || o.isSet(a2))
                  throw new Error("Invalid attribute: " + a2.toString() + ". " + e3._debugInfo());
                o.forEachObject(a2, function(t5, n3) {
                  i2 = r2.attribute(e3, void 0, r2.sanitize(t5), r2._decodeAttributeValue(r2.sanitize(n3))) || i2;
                });
              } else
                i2 = r2.attribute(e3, void 0, r2.sanitize(t4.substr(n2.convert.att.length)), r2._decodeAttributeValue(r2.sanitize(a2))) || i2;
            }, this) : (n2.keepNullNodes || t3 != null) && (i2 = this.text(e3, this._decodeText(this.sanitize(t3))) || i2), i2 || e3;
          }, t2;
        }(r(75).BaseReader);
        t.ObjectReader = a;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ explicit: [r(286), r(287), r(288)] });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function(e2) {
          this.level = 0, this._builderOptions = e2, this._writerOptions = e2;
        };
        t.BaseCBWriter = n;
      }, function(e, t, r) {
        var n = r(16), i = r(8), o = r(116);
        e.exports = !n && !i(function() {
          return Object.defineProperty(o("div"), "a", { get: function() {
            return 7;
          } }).a != 7;
        });
      }, function(e, t, r) {
        var n = r(11), i = r(13), o = n.document, a = i(o) && i(o.createElement);
        e.exports = function(e2) {
          return a ? o.createElement(e2) : {};
        };
      }, function(e, t, r) {
        var n = r(118), i = Function.toString;
        typeof n.inspectSource != "function" && (n.inspectSource = function(e2) {
          return i.call(e2);
        }), e.exports = n.inspectSource;
      }, function(e, t, r) {
        var n = r(11), i = r(80), o = n["__core-js_shared__"] || i("__core-js_shared__", {});
        e.exports = o;
      }, function(e, t, r) {
        var n = r(14), i = r(187), o = r(55), a = r(15);
        e.exports = function(e2, t2) {
          for (var r2 = i(t2), s = a.f, u = o.f, l = 0; l < r2.length; l++) {
            var c = r2[l];
            n(e2, c) || s(e2, c, u(t2, c));
          }
        };
      }, function(e, t, r) {
        var n = r(11);
        e.exports = n;
      }, function(e, t, r) {
        var n = r(14), i = r(24), o = r(122).indexOf, a = r(45);
        e.exports = function(e2, t2) {
          var r2, s = i(e2), u = 0, l = [];
          for (r2 in s)
            !n(a, r2) && n(s, r2) && l.push(r2);
          for (; t2.length > u; )
            n(s, r2 = t2[u++]) && (~o(l, r2) || l.push(r2));
          return l;
        };
      }, function(e, t, r) {
        var n = r(24), i = r(26), o = r(83), a = function(e2) {
          return function(t2, r2, a2) {
            var s, u = n(t2), l = i(u.length), c = o(a2, l);
            if (e2 && r2 != r2) {
              for (; l > c; )
                if ((s = u[c++]) != s)
                  return true;
            } else
              for (; l > c; c++)
                if ((e2 || c in u) && u[c] === r2)
                  return e2 || c || 0;
            return !e2 && -1;
          };
        };
        e.exports = { includes: a(true), indexOf: a(false) };
      }, function(e, t, r) {
        var n = r(8), i = /#|\.prototype\./, o = function(e2, t2) {
          var r2 = s[a(e2)];
          return r2 == l || r2 != u && (typeof t2 == "function" ? n(t2) : !!t2);
        }, a = o.normalize = function(e2) {
          return String(e2).replace(i, ".").toLowerCase();
        }, s = o.data = {}, u = o.NATIVE = "N", l = o.POLYFILL = "P";
        e.exports = o;
      }, function(e, t, r) {
        var n = r(86);
        e.exports = n && !Symbol.sham && typeof Symbol.iterator == "symbol";
      }, function(e, t, r) {
        var n = r(5);
        t.f = n;
      }, function(e, t, r) {
        var n = r(120), i = r(14), o = r(125), a = r(15).f;
        e.exports = function(e2) {
          var t2 = n.Symbol || (n.Symbol = {});
          i(t2, e2) || a(t2, e2, { value: o.f(e2) });
        };
      }, function(e, t) {
        e.exports = function(e2) {
          if (typeof e2 != "function")
            throw TypeError(String(e2) + " is not a function");
          return e2;
        };
      }, function(e, t, r) {
        var n = r(13), i = r(59), o = r(5)("species");
        e.exports = function(e2, t2) {
          var r2;
          return i(e2) && (typeof (r2 = e2.constructor) != "function" || r2 !== Array && !i(r2.prototype) ? n(r2) && (r2 = r2[o]) === null && (r2 = void 0) : r2 = void 0), new (r2 === void 0 ? Array : r2)(t2 === 0 ? 0 : t2);
        };
      }, function(e, t, r) {
        var n, i, o = r(11), a = r(193), s = o.process, u = s && s.versions, l = u && u.v8;
        l ? i = (n = l.split("."))[0] + n[1] : a && (!(n = a.match(/Edge\/(\d+)/)) || n[1] >= 74) && (n = a.match(/Chrome\/(\d+)/)) && (i = n[1]), e.exports = i && +i;
      }, function(e, t, r) {
        var n = r(5), i = r(60), o = r(15), a = n("unscopables"), s = Array.prototype;
        s[a] == null && o.f(s, a, { configurable: true, value: i(null) }), e.exports = function(e2) {
          s[a][e2] = true;
        };
      }, function(e, t, r) {
        "use strict";
        var n, i, o, a = r(132), s = r(21), u = r(14), l = r(5), c = r(44), h = l("iterator"), p = false;
        [].keys && ("next" in (o = [].keys()) ? (i = a(a(o))) !== Object.prototype && (n = i) : p = true), n == null && (n = {}), c || u(n, h) || s(n, h, function() {
          return this;
        }), e.exports = { IteratorPrototype: n, BUGGY_SAFARI_ITERATORS: p };
      }, function(e, t, r) {
        var n = r(14), i = r(27), o = r(57), a = r(196), s = o("IE_PROTO"), u = Object.prototype;
        e.exports = a ? Object.getPrototypeOf : function(e2) {
          return e2 = i(e2), n(e2, s) ? e2[s] : typeof e2.constructor == "function" && e2 instanceof e2.constructor ? e2.constructor.prototype : e2 instanceof Object ? u : null;
        };
      }, function(e, t, r) {
        var n = r(18), i = r(197);
        e.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var e2, t2 = false, r2 = {};
          try {
            (e2 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r2, []), t2 = r2 instanceof Array;
          } catch (e3) {
          }
          return function(r3, o) {
            return n(r3), i(o), t2 ? e2.call(r3, o) : r3.__proto__ = o, r3;
          };
        }() : void 0);
      }, function(e, t, r) {
        "use strict";
        var n = r(56), i = r(15), o = r(40);
        e.exports = function(e2, t2, r2) {
          var a = n(t2);
          a in e2 ? i.f(e2, a, o(0, r2)) : e2[a] = r2;
        };
      }, function(e, t, r) {
        var n = r(90), i = r(42), o = r(5)("toStringTag"), a = i(function() {
          return arguments;
        }()) == "Arguments";
        e.exports = n ? i : function(e2) {
          var t2, r2, n2;
          return e2 === void 0 ? "Undefined" : e2 === null ? "Null" : typeof (r2 = function(e3, t3) {
            try {
              return e3[t3];
            } catch (e4) {
            }
          }(t2 = Object(e2), o)) == "string" ? r2 : a ? i(t2) : (n2 = i(t2)) == "Object" && typeof t2.callee == "function" ? "Arguments" : n2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(18);
        e.exports = function() {
          var e2 = n(this), t2 = "";
          return e2.global && (t2 += "g"), e2.ignoreCase && (t2 += "i"), e2.multiline && (t2 += "m"), e2.dotAll && (t2 += "s"), e2.unicode && (t2 += "u"), e2.sticky && (t2 += "y"), t2;
        };
      }, function(e, t, r) {
        var n = r(47), i = r(35), o = function(e2) {
          return function(t2, r2) {
            var o2, a, s = String(i(t2)), u = n(r2), l = s.length;
            return u < 0 || u >= l ? e2 ? "" : void 0 : (o2 = s.charCodeAt(u)) < 55296 || o2 > 56319 || u + 1 === l || (a = s.charCodeAt(u + 1)) < 56320 || a > 57343 ? e2 ? s.charAt(u) : o2 : e2 ? s.slice(u, u + 2) : a - 56320 + (o2 - 55296 << 10) + 65536;
          };
        };
        e.exports = { codeAt: o(false), charAt: o(true) };
      }, function(e, t, r) {
        var n = r(4), i = r(27), o = r(61);
        n({ target: "Object", stat: true, forced: r(8)(function() {
          o(1);
        }) }, { keys: function(e2) {
          return o(i(e2));
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(11), o = r(123), a = r(25), s = r(140), u = r(141), l = r(142), c = r(13), h = r(8), p = r(208), f = r(62), d = r(209);
        e.exports = function(e2, t2, r2) {
          var m = e2.indexOf("Map") !== -1, y = e2.indexOf("Weak") !== -1, v = m ? "set" : "add", _ = i[e2], g = _ && _.prototype, b = _, x = {}, w = function(e3) {
            var t3 = g[e3];
            a(g, e3, e3 == "add" ? function(e4) {
              return t3.call(this, e4 === 0 ? 0 : e4), this;
            } : e3 == "delete" ? function(e4) {
              return !(y && !c(e4)) && t3.call(this, e4 === 0 ? 0 : e4);
            } : e3 == "get" ? function(e4) {
              return y && !c(e4) ? void 0 : t3.call(this, e4 === 0 ? 0 : e4);
            } : e3 == "has" ? function(e4) {
              return !(y && !c(e4)) && t3.call(this, e4 === 0 ? 0 : e4);
            } : function(e4, r3) {
              return t3.call(this, e4 === 0 ? 0 : e4, r3), this;
            });
          };
          if (o(e2, typeof _ != "function" || !(y || g.forEach && !h(function() {
            new _().entries().next();
          }))))
            b = r2.getConstructor(t2, e2, m, v), s.REQUIRED = true;
          else if (o(e2, true)) {
            var E = new b(), D = E[v](y ? {} : -0, 1) != E, S = h(function() {
              E.has(1);
            }), C = p(function(e3) {
              new _(e3);
            }), A = !y && h(function() {
              for (var e3 = new _(), t3 = 5; t3--; )
                e3[v](t3, t3);
              return !e3.has(-0);
            });
            C || ((b = t2(function(t3, r3) {
              l(t3, b, e2);
              var n2 = d(new _(), t3, b);
              return r3 != null && u(r3, n2[v], n2, m), n2;
            })).prototype = g, g.constructor = b), (S || A) && (w("delete"), w("has"), m && w("get")), (A || D) && w(v), y && g.clear && delete g.clear;
          }
          return x[e2] = b, n({ global: true, forced: b != _ }, x), f(b, e2), y || r2.setStrong(b, e2, m), b;
        };
      }, function(e, t, r) {
        var n = r(45), i = r(13), o = r(14), a = r(15).f, s = r(58), u = r(204), l = s("meta"), c = 0, h = Object.isExtensible || function() {
          return true;
        }, p = function(e2) {
          a(e2, l, { value: { objectID: "O" + ++c, weakData: {} } });
        }, f = e.exports = { REQUIRED: false, fastKey: function(e2, t2) {
          if (!i(e2))
            return typeof e2 == "symbol" ? e2 : (typeof e2 == "string" ? "S" : "P") + e2;
          if (!o(e2, l)) {
            if (!h(e2))
              return "F";
            if (!t2)
              return "E";
            p(e2);
          }
          return e2[l].objectID;
        }, getWeakData: function(e2, t2) {
          if (!o(e2, l)) {
            if (!h(e2))
              return true;
            if (!t2)
              return false;
            p(e2);
          }
          return e2[l].weakData;
        }, onFreeze: function(e2) {
          return u && f.REQUIRED && h(e2) && !o(e2, l) && p(e2), e2;
        } };
        n[l] = true;
      }, function(e, t, r) {
        var n = r(18), i = r(205), o = r(26), a = r(87), s = r(206), u = r(207), l = function(e2, t2) {
          this.stopped = e2, this.result = t2;
        };
        (e.exports = function(e2, t2, r2, c, h) {
          var p, f, d, m, y, v, _, g = a(t2, r2, c ? 2 : 1);
          if (h)
            p = e2;
          else {
            if (typeof (f = s(e2)) != "function")
              throw TypeError("Target is not iterable");
            if (i(f)) {
              for (d = 0, m = o(e2.length); m > d; d++)
                if ((y = c ? g(n(_ = e2[d])[0], _[1]) : g(e2[d])) && y instanceof l)
                  return y;
              return new l(false);
            }
            p = f.call(e2);
          }
          for (v = p.next; !(_ = v.call(p)).done; )
            if (typeof (y = u(p, g, _.value, c)) == "object" && y && y instanceof l)
              return y;
          return new l(false);
        }).stop = function(e2) {
          return new l(true, e2);
        };
      }, function(e, t) {
        e.exports = function(e2, t2, r) {
          if (!(e2 instanceof t2))
            throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(15).f, i = r(60), o = r(210), a = r(87), s = r(142), u = r(141), l = r(88), c = r(211), h = r(16), p = r(140).fastKey, f = r(43), d = f.set, m = f.getterFor;
        e.exports = { getConstructor: function(e2, t2, r2, l2) {
          var c2 = e2(function(e3, n2) {
            s(e3, c2, t2), d(e3, { type: t2, index: i(null), first: void 0, last: void 0, size: 0 }), h || (e3.size = 0), n2 != null && u(n2, e3[l2], e3, r2);
          }), f2 = m(t2), y = function(e3, t3, r3) {
            var n2, i2, o2 = f2(e3), a2 = v(e3, t3);
            return a2 ? a2.value = r3 : (o2.last = a2 = { index: i2 = p(t3, true), key: t3, value: r3, previous: n2 = o2.last, next: void 0, removed: false }, o2.first || (o2.first = a2), n2 && (n2.next = a2), h ? o2.size++ : e3.size++, i2 !== "F" && (o2.index[i2] = a2)), e3;
          }, v = function(e3, t3) {
            var r3, n2 = f2(e3), i2 = p(t3);
            if (i2 !== "F")
              return n2.index[i2];
            for (r3 = n2.first; r3; r3 = r3.next)
              if (r3.key == t3)
                return r3;
          };
          return o(c2.prototype, { clear: function() {
            for (var e3 = f2(this), t3 = e3.index, r3 = e3.first; r3; )
              r3.removed = true, r3.previous && (r3.previous = r3.previous.next = void 0), delete t3[r3.index], r3 = r3.next;
            e3.first = e3.last = void 0, h ? e3.size = 0 : this.size = 0;
          }, delete: function(e3) {
            var t3 = f2(this), r3 = v(this, e3);
            if (r3) {
              var n2 = r3.next, i2 = r3.previous;
              delete t3.index[r3.index], r3.removed = true, i2 && (i2.next = n2), n2 && (n2.previous = i2), t3.first == r3 && (t3.first = n2), t3.last == r3 && (t3.last = i2), h ? t3.size-- : this.size--;
            }
            return !!r3;
          }, forEach: function(e3) {
            for (var t3, r3 = f2(this), n2 = a(e3, arguments.length > 1 ? arguments[1] : void 0, 3); t3 = t3 ? t3.next : r3.first; )
              for (n2(t3.value, t3.key, this); t3 && t3.removed; )
                t3 = t3.previous;
          }, has: function(e3) {
            return !!v(this, e3);
          } }), o(c2.prototype, r2 ? { get: function(e3) {
            var t3 = v(this, e3);
            return t3 && t3.value;
          }, set: function(e3, t3) {
            return y(this, e3 === 0 ? 0 : e3, t3);
          } } : { add: function(e3) {
            return y(this, e3 = e3 === 0 ? 0 : e3, e3);
          } }), h && n(c2.prototype, "size", { get: function() {
            return f2(this).size;
          } }), c2;
        }, setStrong: function(e2, t2, r2) {
          var n2 = t2 + " Iterator", i2 = m(t2), o2 = m(n2);
          l(e2, t2, function(e3, t3) {
            d(this, { type: n2, target: e3, state: i2(e3), kind: t3, last: void 0 });
          }, function() {
            for (var e3 = o2(this), t3 = e3.kind, r3 = e3.last; r3 && r3.removed; )
              r3 = r3.previous;
            return e3.target && (e3.last = r3 = r3 ? r3.next : e3.state.first) ? t3 == "keys" ? { value: r3.key, done: false } : t3 == "values" ? { value: r3.value, done: false } : { value: [r3.key, r3.value], done: false } : (e3.target = void 0, { value: void 0, done: true });
          }, r2 ? "entries" : "values", !r2, true), c(t2);
        } };
      }, function(e, t, r) {
        "use strict";
        var n, i = r(4), o = r(55).f, a = r(26), s = r(222), u = r(35), l = r(224), c = r(44), h = "".endsWith, p = Math.min, f = l("endsWith");
        i({ target: "String", proto: true, forced: !!(c || f || (n = o(String.prototype, "endsWith"), !n || n.writable)) && !f }, { endsWith: function(e2) {
          var t2 = String(u(this));
          s(e2);
          var r2 = arguments.length > 1 ? arguments[1] : void 0, n2 = a(t2.length), i2 = r2 === void 0 ? n2 : p(a(r2), n2), o2 = String(e2);
          return h ? h.call(t2, o2, i2) : t2.slice(i2 - o2.length, i2) === o2;
        } });
      }, function(e, t, r) {
        "use strict";
        (function(e2) {
          var n = r(229), i = r(230), o = r(231);
          function a() {
            return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
          }
          function s(e3, t2) {
            if (a() < t2)
              throw new RangeError("Invalid typed array length");
            return u.TYPED_ARRAY_SUPPORT ? (e3 = new Uint8Array(t2)).__proto__ = u.prototype : (e3 === null && (e3 = new u(t2)), e3.length = t2), e3;
          }
          function u(e3, t2, r2) {
            if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u))
              return new u(e3, t2, r2);
            if (typeof e3 == "number") {
              if (typeof t2 == "string")
                throw new Error("If encoding is specified then the first argument must be a string");
              return h(this, e3);
            }
            return l(this, e3, t2, r2);
          }
          function l(e3, t2, r2, n2) {
            if (typeof t2 == "number")
              throw new TypeError('"value" argument must not be a number');
            return typeof ArrayBuffer != "undefined" && t2 instanceof ArrayBuffer ? function(e4, t3, r3, n3) {
              if (t3.byteLength, r3 < 0 || t3.byteLength < r3)
                throw new RangeError("'offset' is out of bounds");
              if (t3.byteLength < r3 + (n3 || 0))
                throw new RangeError("'length' is out of bounds");
              t3 = r3 === void 0 && n3 === void 0 ? new Uint8Array(t3) : n3 === void 0 ? new Uint8Array(t3, r3) : new Uint8Array(t3, r3, n3);
              u.TYPED_ARRAY_SUPPORT ? (e4 = t3).__proto__ = u.prototype : e4 = p(e4, t3);
              return e4;
            }(e3, t2, r2, n2) : typeof t2 == "string" ? function(e4, t3, r3) {
              typeof r3 == "string" && r3 !== "" || (r3 = "utf8");
              if (!u.isEncoding(r3))
                throw new TypeError('"encoding" must be a valid string encoding');
              var n3 = 0 | d(t3, r3), i2 = (e4 = s(e4, n3)).write(t3, r3);
              i2 !== n3 && (e4 = e4.slice(0, i2));
              return e4;
            }(e3, t2, r2) : function(e4, t3) {
              if (u.isBuffer(t3)) {
                var r3 = 0 | f(t3.length);
                return (e4 = s(e4, r3)).length === 0 || t3.copy(e4, 0, 0, r3), e4;
              }
              if (t3) {
                if (typeof ArrayBuffer != "undefined" && t3.buffer instanceof ArrayBuffer || "length" in t3)
                  return typeof t3.length != "number" || (n3 = t3.length) != n3 ? s(e4, 0) : p(e4, t3);
                if (t3.type === "Buffer" && o(t3.data))
                  return p(e4, t3.data);
              }
              var n3;
              throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
            }(e3, t2);
          }
          function c(e3) {
            if (typeof e3 != "number")
              throw new TypeError('"size" argument must be a number');
            if (e3 < 0)
              throw new RangeError('"size" argument must not be negative');
          }
          function h(e3, t2) {
            if (c(t2), e3 = s(e3, t2 < 0 ? 0 : 0 | f(t2)), !u.TYPED_ARRAY_SUPPORT)
              for (var r2 = 0; r2 < t2; ++r2)
                e3[r2] = 0;
            return e3;
          }
          function p(e3, t2) {
            var r2 = t2.length < 0 ? 0 : 0 | f(t2.length);
            e3 = s(e3, r2);
            for (var n2 = 0; n2 < r2; n2 += 1)
              e3[n2] = 255 & t2[n2];
            return e3;
          }
          function f(e3) {
            if (e3 >= a())
              throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a().toString(16) + " bytes");
            return 0 | e3;
          }
          function d(e3, t2) {
            if (u.isBuffer(e3))
              return e3.length;
            if (typeof ArrayBuffer != "undefined" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(e3) || e3 instanceof ArrayBuffer))
              return e3.byteLength;
            typeof e3 != "string" && (e3 = "" + e3);
            var r2 = e3.length;
            if (r2 === 0)
              return 0;
            for (var n2 = false; ; )
              switch (t2) {
                case "ascii":
                case "latin1":
                case "binary":
                  return r2;
                case "utf8":
                case "utf-8":
                case void 0:
                  return z(e3).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return 2 * r2;
                case "hex":
                  return r2 >>> 1;
                case "base64":
                  return U(e3).length;
                default:
                  if (n2)
                    return z(e3).length;
                  t2 = ("" + t2).toLowerCase(), n2 = true;
              }
          }
          function m(e3, t2, r2) {
            var n2 = false;
            if ((t2 === void 0 || t2 < 0) && (t2 = 0), t2 > this.length)
              return "";
            if ((r2 === void 0 || r2 > this.length) && (r2 = this.length), r2 <= 0)
              return "";
            if ((r2 >>>= 0) <= (t2 >>>= 0))
              return "";
            for (e3 || (e3 = "utf8"); ; )
              switch (e3) {
                case "hex":
                  return T(this, t2, r2);
                case "utf8":
                case "utf-8":
                  return C(this, t2, r2);
                case "ascii":
                  return A(this, t2, r2);
                case "latin1":
                case "binary":
                  return N(this, t2, r2);
                case "base64":
                  return S(this, t2, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return O(this, t2, r2);
                default:
                  if (n2)
                    throw new TypeError("Unknown encoding: " + e3);
                  e3 = (e3 + "").toLowerCase(), n2 = true;
              }
          }
          function y(e3, t2, r2) {
            var n2 = e3[t2];
            e3[t2] = e3[r2], e3[r2] = n2;
          }
          function v(e3, t2, r2, n2, i2) {
            if (e3.length === 0)
              return -1;
            if (typeof r2 == "string" ? (n2 = r2, r2 = 0) : r2 > 2147483647 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), r2 = +r2, isNaN(r2) && (r2 = i2 ? 0 : e3.length - 1), r2 < 0 && (r2 = e3.length + r2), r2 >= e3.length) {
              if (i2)
                return -1;
              r2 = e3.length - 1;
            } else if (r2 < 0) {
              if (!i2)
                return -1;
              r2 = 0;
            }
            if (typeof t2 == "string" && (t2 = u.from(t2, n2)), u.isBuffer(t2))
              return t2.length === 0 ? -1 : _(e3, t2, r2, n2, i2);
            if (typeof t2 == "number")
              return t2 &= 255, u.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? i2 ? Uint8Array.prototype.indexOf.call(e3, t2, r2) : Uint8Array.prototype.lastIndexOf.call(e3, t2, r2) : _(e3, [t2], r2, n2, i2);
            throw new TypeError("val must be string, number or Buffer");
          }
          function _(e3, t2, r2, n2, i2) {
            var o2, a2 = 1, s2 = e3.length, u2 = t2.length;
            if (n2 !== void 0 && ((n2 = String(n2).toLowerCase()) === "ucs2" || n2 === "ucs-2" || n2 === "utf16le" || n2 === "utf-16le")) {
              if (e3.length < 2 || t2.length < 2)
                return -1;
              a2 = 2, s2 /= 2, u2 /= 2, r2 /= 2;
            }
            function l2(e4, t3) {
              return a2 === 1 ? e4[t3] : e4.readUInt16BE(t3 * a2);
            }
            if (i2) {
              var c2 = -1;
              for (o2 = r2; o2 < s2; o2++)
                if (l2(e3, o2) === l2(t2, c2 === -1 ? 0 : o2 - c2)) {
                  if (c2 === -1 && (c2 = o2), o2 - c2 + 1 === u2)
                    return c2 * a2;
                } else
                  c2 !== -1 && (o2 -= o2 - c2), c2 = -1;
            } else
              for (r2 + u2 > s2 && (r2 = s2 - u2), o2 = r2; o2 >= 0; o2--) {
                for (var h2 = true, p2 = 0; p2 < u2; p2++)
                  if (l2(e3, o2 + p2) !== l2(t2, p2)) {
                    h2 = false;
                    break;
                  }
                if (h2)
                  return o2;
              }
            return -1;
          }
          function g(e3, t2, r2, n2) {
            r2 = Number(r2) || 0;
            var i2 = e3.length - r2;
            n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : n2 = i2;
            var o2 = t2.length;
            if (o2 % 2 != 0)
              throw new TypeError("Invalid hex string");
            n2 > o2 / 2 && (n2 = o2 / 2);
            for (var a2 = 0; a2 < n2; ++a2) {
              var s2 = parseInt(t2.substr(2 * a2, 2), 16);
              if (isNaN(s2))
                return a2;
              e3[r2 + a2] = s2;
            }
            return a2;
          }
          function b(e3, t2, r2, n2) {
            return G(z(t2, e3.length - r2), e3, r2, n2);
          }
          function x(e3, t2, r2, n2) {
            return G(function(e4) {
              for (var t3 = [], r3 = 0; r3 < e4.length; ++r3)
                t3.push(255 & e4.charCodeAt(r3));
              return t3;
            }(t2), e3, r2, n2);
          }
          function w(e3, t2, r2, n2) {
            return x(e3, t2, r2, n2);
          }
          function E(e3, t2, r2, n2) {
            return G(U(t2), e3, r2, n2);
          }
          function D(e3, t2, r2, n2) {
            return G(function(e4, t3) {
              for (var r3, n3, i2, o2 = [], a2 = 0; a2 < e4.length && !((t3 -= 2) < 0); ++a2)
                r3 = e4.charCodeAt(a2), n3 = r3 >> 8, i2 = r3 % 256, o2.push(i2), o2.push(n3);
              return o2;
            }(t2, e3.length - r2), e3, r2, n2);
          }
          function S(e3, t2, r2) {
            return t2 === 0 && r2 === e3.length ? n.fromByteArray(e3) : n.fromByteArray(e3.slice(t2, r2));
          }
          function C(e3, t2, r2) {
            r2 = Math.min(e3.length, r2);
            for (var n2 = [], i2 = t2; i2 < r2; ) {
              var o2, a2, s2, u2, l2 = e3[i2], c2 = null, h2 = l2 > 239 ? 4 : l2 > 223 ? 3 : l2 > 191 ? 2 : 1;
              if (i2 + h2 <= r2)
                switch (h2) {
                  case 1:
                    l2 < 128 && (c2 = l2);
                    break;
                  case 2:
                    (192 & (o2 = e3[i2 + 1])) == 128 && (u2 = (31 & l2) << 6 | 63 & o2) > 127 && (c2 = u2);
                    break;
                  case 3:
                    o2 = e3[i2 + 1], a2 = e3[i2 + 2], (192 & o2) == 128 && (192 & a2) == 128 && (u2 = (15 & l2) << 12 | (63 & o2) << 6 | 63 & a2) > 2047 && (u2 < 55296 || u2 > 57343) && (c2 = u2);
                    break;
                  case 4:
                    o2 = e3[i2 + 1], a2 = e3[i2 + 2], s2 = e3[i2 + 3], (192 & o2) == 128 && (192 & a2) == 128 && (192 & s2) == 128 && (u2 = (15 & l2) << 18 | (63 & o2) << 12 | (63 & a2) << 6 | 63 & s2) > 65535 && u2 < 1114112 && (c2 = u2);
                }
              c2 === null ? (c2 = 65533, h2 = 1) : c2 > 65535 && (c2 -= 65536, n2.push(c2 >>> 10 & 1023 | 55296), c2 = 56320 | 1023 & c2), n2.push(c2), i2 += h2;
            }
            return function(e4) {
              var t3 = e4.length;
              if (t3 <= 4096)
                return String.fromCharCode.apply(String, e4);
              var r3 = "", n3 = 0;
              for (; n3 < t3; )
                r3 += String.fromCharCode.apply(String, e4.slice(n3, n3 += 4096));
              return r3;
            }(n2);
          }
          t.Buffer = u, t.SlowBuffer = function(e3) {
            +e3 != e3 && (e3 = 0);
            return u.alloc(+e3);
          }, t.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = e2.TYPED_ARRAY_SUPPORT !== void 0 ? e2.TYPED_ARRAY_SUPPORT : function() {
            try {
              var e3 = new Uint8Array(1);
              return e3.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                return 42;
              } }, e3.foo() === 42 && typeof e3.subarray == "function" && e3.subarray(1, 1).byteLength === 0;
            } catch (e4) {
              return false;
            }
          }(), t.kMaxLength = a(), u.poolSize = 8192, u._augment = function(e3) {
            return e3.__proto__ = u.prototype, e3;
          }, u.from = function(e3, t2, r2) {
            return l(null, e3, t2, r2);
          }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, typeof Symbol != "undefined" && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, { value: null, configurable: true })), u.alloc = function(e3, t2, r2) {
            return function(e4, t3, r3, n2) {
              return c(t3), t3 <= 0 ? s(e4, t3) : r3 !== void 0 ? typeof n2 == "string" ? s(e4, t3).fill(r3, n2) : s(e4, t3).fill(r3) : s(e4, t3);
            }(null, e3, t2, r2);
          }, u.allocUnsafe = function(e3) {
            return h(null, e3);
          }, u.allocUnsafeSlow = function(e3) {
            return h(null, e3);
          }, u.isBuffer = function(e3) {
            return !(e3 == null || !e3._isBuffer);
          }, u.compare = function(e3, t2) {
            if (!u.isBuffer(e3) || !u.isBuffer(t2))
              throw new TypeError("Arguments must be Buffers");
            if (e3 === t2)
              return 0;
            for (var r2 = e3.length, n2 = t2.length, i2 = 0, o2 = Math.min(r2, n2); i2 < o2; ++i2)
              if (e3[i2] !== t2[i2]) {
                r2 = e3[i2], n2 = t2[i2];
                break;
              }
            return r2 < n2 ? -1 : n2 < r2 ? 1 : 0;
          }, u.isEncoding = function(e3) {
            switch (String(e3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, u.concat = function(e3, t2) {
            if (!o(e3))
              throw new TypeError('"list" argument must be an Array of Buffers');
            if (e3.length === 0)
              return u.alloc(0);
            var r2;
            if (t2 === void 0)
              for (t2 = 0, r2 = 0; r2 < e3.length; ++r2)
                t2 += e3[r2].length;
            var n2 = u.allocUnsafe(t2), i2 = 0;
            for (r2 = 0; r2 < e3.length; ++r2) {
              var a2 = e3[r2];
              if (!u.isBuffer(a2))
                throw new TypeError('"list" argument must be an Array of Buffers');
              a2.copy(n2, i2), i2 += a2.length;
            }
            return n2;
          }, u.byteLength = d, u.prototype._isBuffer = true, u.prototype.swap16 = function() {
            var e3 = this.length;
            if (e3 % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var t2 = 0; t2 < e3; t2 += 2)
              y(this, t2, t2 + 1);
            return this;
          }, u.prototype.swap32 = function() {
            var e3 = this.length;
            if (e3 % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var t2 = 0; t2 < e3; t2 += 4)
              y(this, t2, t2 + 3), y(this, t2 + 1, t2 + 2);
            return this;
          }, u.prototype.swap64 = function() {
            var e3 = this.length;
            if (e3 % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var t2 = 0; t2 < e3; t2 += 8)
              y(this, t2, t2 + 7), y(this, t2 + 1, t2 + 6), y(this, t2 + 2, t2 + 5), y(this, t2 + 3, t2 + 4);
            return this;
          }, u.prototype.toString = function() {
            var e3 = 0 | this.length;
            return e3 === 0 ? "" : arguments.length === 0 ? C(this, 0, e3) : m.apply(this, arguments);
          }, u.prototype.equals = function(e3) {
            if (!u.isBuffer(e3))
              throw new TypeError("Argument must be a Buffer");
            return this === e3 || u.compare(this, e3) === 0;
          }, u.prototype.inspect = function() {
            var e3 = "", r2 = t.INSPECT_MAX_BYTES;
            return this.length > 0 && (e3 = this.toString("hex", 0, r2).match(/.{2}/g).join(" "), this.length > r2 && (e3 += " ... ")), "<Buffer " + e3 + ">";
          }, u.prototype.compare = function(e3, t2, r2, n2, i2) {
            if (!u.isBuffer(e3))
              throw new TypeError("Argument must be a Buffer");
            if (t2 === void 0 && (t2 = 0), r2 === void 0 && (r2 = e3 ? e3.length : 0), n2 === void 0 && (n2 = 0), i2 === void 0 && (i2 = this.length), t2 < 0 || r2 > e3.length || n2 < 0 || i2 > this.length)
              throw new RangeError("out of range index");
            if (n2 >= i2 && t2 >= r2)
              return 0;
            if (n2 >= i2)
              return -1;
            if (t2 >= r2)
              return 1;
            if (this === e3)
              return 0;
            for (var o2 = (i2 >>>= 0) - (n2 >>>= 0), a2 = (r2 >>>= 0) - (t2 >>>= 0), s2 = Math.min(o2, a2), l2 = this.slice(n2, i2), c2 = e3.slice(t2, r2), h2 = 0; h2 < s2; ++h2)
              if (l2[h2] !== c2[h2]) {
                o2 = l2[h2], a2 = c2[h2];
                break;
              }
            return o2 < a2 ? -1 : a2 < o2 ? 1 : 0;
          }, u.prototype.includes = function(e3, t2, r2) {
            return this.indexOf(e3, t2, r2) !== -1;
          }, u.prototype.indexOf = function(e3, t2, r2) {
            return v(this, e3, t2, r2, true);
          }, u.prototype.lastIndexOf = function(e3, t2, r2) {
            return v(this, e3, t2, r2, false);
          }, u.prototype.write = function(e3, t2, r2, n2) {
            if (t2 === void 0)
              n2 = "utf8", r2 = this.length, t2 = 0;
            else if (r2 === void 0 && typeof t2 == "string")
              n2 = t2, r2 = this.length, t2 = 0;
            else {
              if (!isFinite(t2))
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              t2 |= 0, isFinite(r2) ? (r2 |= 0, n2 === void 0 && (n2 = "utf8")) : (n2 = r2, r2 = void 0);
            }
            var i2 = this.length - t2;
            if ((r2 === void 0 || r2 > i2) && (r2 = i2), e3.length > 0 && (r2 < 0 || t2 < 0) || t2 > this.length)
              throw new RangeError("Attempt to write outside buffer bounds");
            n2 || (n2 = "utf8");
            for (var o2 = false; ; )
              switch (n2) {
                case "hex":
                  return g(this, e3, t2, r2);
                case "utf8":
                case "utf-8":
                  return b(this, e3, t2, r2);
                case "ascii":
                  return x(this, e3, t2, r2);
                case "latin1":
                case "binary":
                  return w(this, e3, t2, r2);
                case "base64":
                  return E(this, e3, t2, r2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return D(this, e3, t2, r2);
                default:
                  if (o2)
                    throw new TypeError("Unknown encoding: " + n2);
                  n2 = ("" + n2).toLowerCase(), o2 = true;
              }
          }, u.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          };
          function A(e3, t2, r2) {
            var n2 = "";
            r2 = Math.min(e3.length, r2);
            for (var i2 = t2; i2 < r2; ++i2)
              n2 += String.fromCharCode(127 & e3[i2]);
            return n2;
          }
          function N(e3, t2, r2) {
            var n2 = "";
            r2 = Math.min(e3.length, r2);
            for (var i2 = t2; i2 < r2; ++i2)
              n2 += String.fromCharCode(e3[i2]);
            return n2;
          }
          function T(e3, t2, r2) {
            var n2 = e3.length;
            (!t2 || t2 < 0) && (t2 = 0), (!r2 || r2 < 0 || r2 > n2) && (r2 = n2);
            for (var i2 = "", o2 = t2; o2 < r2; ++o2)
              i2 += R(e3[o2]);
            return i2;
          }
          function O(e3, t2, r2) {
            for (var n2 = e3.slice(t2, r2), i2 = "", o2 = 0; o2 < n2.length; o2 += 2)
              i2 += String.fromCharCode(n2[o2] + 256 * n2[o2 + 1]);
            return i2;
          }
          function F(e3, t2, r2) {
            if (e3 % 1 != 0 || e3 < 0)
              throw new RangeError("offset is not uint");
            if (e3 + t2 > r2)
              throw new RangeError("Trying to access beyond buffer length");
          }
          function k(e3, t2, r2, n2, i2, o2) {
            if (!u.isBuffer(e3))
              throw new TypeError('"buffer" argument must be a Buffer instance');
            if (t2 > i2 || t2 < o2)
              throw new RangeError('"value" argument is out of bounds');
            if (r2 + n2 > e3.length)
              throw new RangeError("Index out of range");
          }
          function P(e3, t2, r2, n2) {
            t2 < 0 && (t2 = 65535 + t2 + 1);
            for (var i2 = 0, o2 = Math.min(e3.length - r2, 2); i2 < o2; ++i2)
              e3[r2 + i2] = (t2 & 255 << 8 * (n2 ? i2 : 1 - i2)) >>> 8 * (n2 ? i2 : 1 - i2);
          }
          function I(e3, t2, r2, n2) {
            t2 < 0 && (t2 = 4294967295 + t2 + 1);
            for (var i2 = 0, o2 = Math.min(e3.length - r2, 4); i2 < o2; ++i2)
              e3[r2 + i2] = t2 >>> 8 * (n2 ? i2 : 3 - i2) & 255;
          }
          function L(e3, t2, r2, n2, i2, o2) {
            if (r2 + n2 > e3.length)
              throw new RangeError("Index out of range");
            if (r2 < 0)
              throw new RangeError("Index out of range");
          }
          function M(e3, t2, r2, n2, o2) {
            return o2 || L(e3, 0, r2, 4), i.write(e3, t2, r2, n2, 23, 4), r2 + 4;
          }
          function B(e3, t2, r2, n2, o2) {
            return o2 || L(e3, 0, r2, 8), i.write(e3, t2, r2, n2, 52, 8), r2 + 8;
          }
          u.prototype.slice = function(e3, t2) {
            var r2, n2 = this.length;
            if ((e3 = ~~e3) < 0 ? (e3 += n2) < 0 && (e3 = 0) : e3 > n2 && (e3 = n2), (t2 = t2 === void 0 ? n2 : ~~t2) < 0 ? (t2 += n2) < 0 && (t2 = 0) : t2 > n2 && (t2 = n2), t2 < e3 && (t2 = e3), u.TYPED_ARRAY_SUPPORT)
              (r2 = this.subarray(e3, t2)).__proto__ = u.prototype;
            else {
              var i2 = t2 - e3;
              r2 = new u(i2, void 0);
              for (var o2 = 0; o2 < i2; ++o2)
                r2[o2] = this[o2 + e3];
            }
            return r2;
          }, u.prototype.readUIntLE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t2 && (i2 *= 256); )
              n2 += this[e3 + o2] * i2;
            return n2;
          }, u.prototype.readUIntBE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = this[e3 + --t2], i2 = 1; t2 > 0 && (i2 *= 256); )
              n2 += this[e3 + --t2] * i2;
            return n2;
          }, u.prototype.readUInt8 = function(e3, t2) {
            return t2 || F(e3, 1, this.length), this[e3];
          }, u.prototype.readUInt16LE = function(e3, t2) {
            return t2 || F(e3, 2, this.length), this[e3] | this[e3 + 1] << 8;
          }, u.prototype.readUInt16BE = function(e3, t2) {
            return t2 || F(e3, 2, this.length), this[e3] << 8 | this[e3 + 1];
          }, u.prototype.readUInt32LE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), (this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16) + 16777216 * this[e3 + 3];
          }, u.prototype.readUInt32BE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), 16777216 * this[e3] + (this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3]);
          }, u.prototype.readIntLE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t2 && (i2 *= 256); )
              n2 += this[e3 + o2] * i2;
            return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * t2)), n2;
          }, u.prototype.readIntBE = function(e3, t2, r2) {
            e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
            for (var n2 = t2, i2 = 1, o2 = this[e3 + --n2]; n2 > 0 && (i2 *= 256); )
              o2 += this[e3 + --n2] * i2;
            return o2 >= (i2 *= 128) && (o2 -= Math.pow(2, 8 * t2)), o2;
          }, u.prototype.readInt8 = function(e3, t2) {
            return t2 || F(e3, 1, this.length), 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
          }, u.prototype.readInt16LE = function(e3, t2) {
            t2 || F(e3, 2, this.length);
            var r2 = this[e3] | this[e3 + 1] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u.prototype.readInt16BE = function(e3, t2) {
            t2 || F(e3, 2, this.length);
            var r2 = this[e3 + 1] | this[e3] << 8;
            return 32768 & r2 ? 4294901760 | r2 : r2;
          }, u.prototype.readInt32LE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16 | this[e3 + 3] << 24;
          }, u.prototype.readInt32BE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), this[e3] << 24 | this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3];
          }, u.prototype.readFloatLE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), i.read(this, e3, true, 23, 4);
          }, u.prototype.readFloatBE = function(e3, t2) {
            return t2 || F(e3, 4, this.length), i.read(this, e3, false, 23, 4);
          }, u.prototype.readDoubleLE = function(e3, t2) {
            return t2 || F(e3, 8, this.length), i.read(this, e3, true, 52, 8);
          }, u.prototype.readDoubleBE = function(e3, t2) {
            return t2 || F(e3, 8, this.length), i.read(this, e3, false, 52, 8);
          }, u.prototype.writeUIntLE = function(e3, t2, r2, n2) {
            (e3 = +e3, t2 |= 0, r2 |= 0, n2) || k(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i2 = 1, o2 = 0;
            for (this[t2] = 255 & e3; ++o2 < r2 && (i2 *= 256); )
              this[t2 + o2] = e3 / i2 & 255;
            return t2 + r2;
          }, u.prototype.writeUIntBE = function(e3, t2, r2, n2) {
            (e3 = +e3, t2 |= 0, r2 |= 0, n2) || k(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
            var i2 = r2 - 1, o2 = 1;
            for (this[t2 + i2] = 255 & e3; --i2 >= 0 && (o2 *= 256); )
              this[t2 + i2] = e3 / o2 & 255;
            return t2 + r2;
          }, u.prototype.writeUInt8 = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), this[t2] = 255 & e3, t2 + 1;
          }, u.prototype.writeUInt16LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8) : P(this, e3, t2, true), t2 + 2;
          }, u.prototype.writeUInt16BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3) : P(this, e3, t2, false), t2 + 2;
          }, u.prototype.writeUInt32LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2 + 3] = e3 >>> 24, this[t2 + 2] = e3 >>> 16, this[t2 + 1] = e3 >>> 8, this[t2] = 255 & e3) : I(this, e3, t2, true), t2 + 4;
          }, u.prototype.writeUInt32BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3) : I(this, e3, t2, false), t2 + 4;
          }, u.prototype.writeIntLE = function(e3, t2, r2, n2) {
            if (e3 = +e3, t2 |= 0, !n2) {
              var i2 = Math.pow(2, 8 * r2 - 1);
              k(this, e3, t2, r2, i2 - 1, -i2);
            }
            var o2 = 0, a2 = 1, s2 = 0;
            for (this[t2] = 255 & e3; ++o2 < r2 && (a2 *= 256); )
              e3 < 0 && s2 === 0 && this[t2 + o2 - 1] !== 0 && (s2 = 1), this[t2 + o2] = (e3 / a2 >> 0) - s2 & 255;
            return t2 + r2;
          }, u.prototype.writeIntBE = function(e3, t2, r2, n2) {
            if (e3 = +e3, t2 |= 0, !n2) {
              var i2 = Math.pow(2, 8 * r2 - 1);
              k(this, e3, t2, r2, i2 - 1, -i2);
            }
            var o2 = r2 - 1, a2 = 1, s2 = 0;
            for (this[t2 + o2] = 255 & e3; --o2 >= 0 && (a2 *= 256); )
              e3 < 0 && s2 === 0 && this[t2 + o2 + 1] !== 0 && (s2 = 1), this[t2 + o2] = (e3 / a2 >> 0) - s2 & 255;
            return t2 + r2;
          }, u.prototype.writeInt8 = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), e3 < 0 && (e3 = 255 + e3 + 1), this[t2] = 255 & e3, t2 + 1;
          }, u.prototype.writeInt16LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8) : P(this, e3, t2, true), t2 + 2;
          }, u.prototype.writeInt16BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3) : P(this, e3, t2, false), t2 + 2;
          }, u.prototype.writeInt32LE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8, this[t2 + 2] = e3 >>> 16, this[t2 + 3] = e3 >>> 24) : I(this, e3, t2, true), t2 + 4;
          }, u.prototype.writeInt32BE = function(e3, t2, r2) {
            return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 2147483647, -2147483648), e3 < 0 && (e3 = 4294967295 + e3 + 1), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3) : I(this, e3, t2, false), t2 + 4;
          }, u.prototype.writeFloatLE = function(e3, t2, r2) {
            return M(this, e3, t2, true, r2);
          }, u.prototype.writeFloatBE = function(e3, t2, r2) {
            return M(this, e3, t2, false, r2);
          }, u.prototype.writeDoubleLE = function(e3, t2, r2) {
            return B(this, e3, t2, true, r2);
          }, u.prototype.writeDoubleBE = function(e3, t2, r2) {
            return B(this, e3, t2, false, r2);
          }, u.prototype.copy = function(e3, t2, r2, n2) {
            if (r2 || (r2 = 0), n2 || n2 === 0 || (n2 = this.length), t2 >= e3.length && (t2 = e3.length), t2 || (t2 = 0), n2 > 0 && n2 < r2 && (n2 = r2), n2 === r2)
              return 0;
            if (e3.length === 0 || this.length === 0)
              return 0;
            if (t2 < 0)
              throw new RangeError("targetStart out of bounds");
            if (r2 < 0 || r2 >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (n2 < 0)
              throw new RangeError("sourceEnd out of bounds");
            n2 > this.length && (n2 = this.length), e3.length - t2 < n2 - r2 && (n2 = e3.length - t2 + r2);
            var i2, o2 = n2 - r2;
            if (this === e3 && r2 < t2 && t2 < n2)
              for (i2 = o2 - 1; i2 >= 0; --i2)
                e3[i2 + t2] = this[i2 + r2];
            else if (o2 < 1e3 || !u.TYPED_ARRAY_SUPPORT)
              for (i2 = 0; i2 < o2; ++i2)
                e3[i2 + t2] = this[i2 + r2];
            else
              Uint8Array.prototype.set.call(e3, this.subarray(r2, r2 + o2), t2);
            return o2;
          }, u.prototype.fill = function(e3, t2, r2, n2) {
            if (typeof e3 == "string") {
              if (typeof t2 == "string" ? (n2 = t2, t2 = 0, r2 = this.length) : typeof r2 == "string" && (n2 = r2, r2 = this.length), e3.length === 1) {
                var i2 = e3.charCodeAt(0);
                i2 < 256 && (e3 = i2);
              }
              if (n2 !== void 0 && typeof n2 != "string")
                throw new TypeError("encoding must be a string");
              if (typeof n2 == "string" && !u.isEncoding(n2))
                throw new TypeError("Unknown encoding: " + n2);
            } else
              typeof e3 == "number" && (e3 &= 255);
            if (t2 < 0 || this.length < t2 || this.length < r2)
              throw new RangeError("Out of range index");
            if (r2 <= t2)
              return this;
            var o2;
            if (t2 >>>= 0, r2 = r2 === void 0 ? this.length : r2 >>> 0, e3 || (e3 = 0), typeof e3 == "number")
              for (o2 = t2; o2 < r2; ++o2)
                this[o2] = e3;
            else {
              var a2 = u.isBuffer(e3) ? e3 : z(new u(e3, n2).toString()), s2 = a2.length;
              for (o2 = 0; o2 < r2 - t2; ++o2)
                this[o2 + t2] = a2[o2 % s2];
            }
            return this;
          };
          var j = /[^+\/0-9A-Za-z-_]/g;
          function R(e3) {
            return e3 < 16 ? "0" + e3.toString(16) : e3.toString(16);
          }
          function z(e3, t2) {
            var r2;
            t2 = t2 || 1 / 0;
            for (var n2 = e3.length, i2 = null, o2 = [], a2 = 0; a2 < n2; ++a2) {
              if ((r2 = e3.charCodeAt(a2)) > 55295 && r2 < 57344) {
                if (!i2) {
                  if (r2 > 56319) {
                    (t2 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  if (a2 + 1 === n2) {
                    (t2 -= 3) > -1 && o2.push(239, 191, 189);
                    continue;
                  }
                  i2 = r2;
                  continue;
                }
                if (r2 < 56320) {
                  (t2 -= 3) > -1 && o2.push(239, 191, 189), i2 = r2;
                  continue;
                }
                r2 = 65536 + (i2 - 55296 << 10 | r2 - 56320);
              } else
                i2 && (t2 -= 3) > -1 && o2.push(239, 191, 189);
              if (i2 = null, r2 < 128) {
                if ((t2 -= 1) < 0)
                  break;
                o2.push(r2);
              } else if (r2 < 2048) {
                if ((t2 -= 2) < 0)
                  break;
                o2.push(r2 >> 6 | 192, 63 & r2 | 128);
              } else if (r2 < 65536) {
                if ((t2 -= 3) < 0)
                  break;
                o2.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              } else {
                if (!(r2 < 1114112))
                  throw new Error("Invalid code point");
                if ((t2 -= 4) < 0)
                  break;
                o2.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, 63 & r2 | 128);
              }
            }
            return o2;
          }
          function U(e3) {
            return n.toByteArray(function(e4) {
              if ((e4 = function(e5) {
                return e5.trim ? e5.trim() : e5.replace(/^\s+|\s+$/g, "");
              }(e4).replace(j, "")).length < 2)
                return "";
              for (; e4.length % 4 != 0; )
                e4 += "=";
              return e4;
            }(e3));
          }
          function G(e3, t2, r2, n2) {
            for (var i2 = 0; i2 < n2 && !(i2 + r2 >= t2.length || i2 >= e3.length); ++i2)
              t2[i2 + r2] = e3[i2];
            return i2;
          }
        }).call(this, r(78));
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.isASCIIByte = function(e2) {
          return e2 >= 0 && e2 <= 127;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o = r2.call(e2), a = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o.next()).done; )
              a.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o.return) && r2.call(o);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a;
        }, i = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(n(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true }), t.length = function(e2) {
          return e2.length;
        }, t.byteLowercase = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2[t2];
            r2 >= 65 && r2 <= 90 && (e2[t2] = r2 + 32);
          }
        }, t.byteUppercase = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2[t2];
            r2 >= 97 && r2 <= 122 && (e2[t2] = r2 - 32);
          }
        }, t.byteCaseInsensitiveMatch = function(e2, t2) {
          if (e2.length !== t2.length)
            return false;
          for (var r2 = 0; r2 < e2.length; r2++) {
            var n2 = e2[r2], i2 = t2[r2];
            if (n2 >= 65 && n2 <= 90 && (n2 += 32), i2 >= 65 && i2 <= 90 && (i2 += 32), n2 !== i2)
              return false;
          }
          return true;
        }, t.startsWith = function(e2, t2) {
          for (var r2 = 0; ; ) {
            if (r2 >= e2.length)
              return false;
            if (r2 >= t2.length)
              return true;
            if (e2[r2] !== t2[r2])
              return false;
            r2++;
          }
        }, t.byteLessThan = function(e2, t2) {
          for (var r2 = 0; ; ) {
            if (r2 >= e2.length)
              return false;
            if (r2 >= t2.length)
              return true;
            var n2 = e2[r2], i2 = t2[r2];
            if (n2 < i2)
              return true;
            if (n2 > i2)
              return false;
            r2++;
          }
        }, t.isomorphicDecode = function(e2) {
          return String.fromCodePoint.apply(String, i(e2));
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(6), i = r(7), o = r(0), a = r(12), s = function() {
          function e2(e3) {
            this._associatedDocument = e3 || n.dom.window.document;
          }
          return e2.prototype.createDocumentType = function(e3, t2, r2) {
            return o.namespace_validate(e3), o.create_documentType(this._associatedDocument, e3, t2, r2);
          }, e2.prototype.createDocument = function(e3, t2, r2) {
            r2 === void 0 && (r2 = null);
            var n2 = o.create_xmlDocument(), a2 = null;
            return t2 && (a2 = o.document_internalCreateElementNS(n2, e3, t2)), r2 && n2.appendChild(r2), a2 && n2.appendChild(a2), n2._origin = this._associatedDocument._origin, e3 === i.namespace.HTML ? n2._contentType = "application/xhtml+xml" : e3 === i.namespace.SVG ? n2._contentType = "image/svg+xml" : n2._contentType = "application/xml", n2;
          }, e2.prototype.createHTMLDocument = function(e3) {
            var t2 = o.create_document();
            t2._type = "html", t2._contentType = "text/html", t2.appendChild(o.create_documentType(t2, "html", "", ""));
            var r2 = o.element_createAnElement(t2, "html", i.namespace.HTML);
            t2.appendChild(r2);
            var n2 = o.element_createAnElement(t2, "head", i.namespace.HTML);
            if (r2.appendChild(n2), e3 !== void 0) {
              var a2 = o.element_createAnElement(t2, "title", i.namespace.HTML);
              n2.appendChild(a2);
              var s2 = o.create_text(t2, e3);
              a2.appendChild(s2);
            }
            var u = o.element_createAnElement(t2, "body", i.namespace.HTML);
            return r2.appendChild(u), t2._origin = this._associatedDocument._origin, t2;
          }, e2.prototype.hasFeature = function() {
            return true;
          }, e2._create = function(t2) {
            return new e2(t2);
          }, e2;
        }();
        t.DOMImplementationImpl = s, a.idl_defineConst(s.prototype, "_ID", "@oozcitak/dom");
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(70), a = r(1), s = r(0), u = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._signalSlots = new Set(), t3._mutationObserverMicrotaskQueued = false, t3._mutationObservers = new Set(), t3._iteratorList = new a.FixedSizeSet(), t3._associatedDocument = s.create_document(), t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "document", { get: function() {
            return this._associatedDocument;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "event", { get: function() {
            return this._currentEvent;
          }, enumerable: true, configurable: true }), t2._create = function() {
            return new t2();
          }, t2;
        }(o.EventTargetImpl);
        t.WindowImpl = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = function() {
          function e2() {
          }
          return e2.isNode = function(e3) {
            return !!e3 && e3._nodeType !== void 0;
          }, e2.isDocumentNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Document;
          }, e2.isDocumentTypeNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.DocumentType;
          }, e2.isDocumentFragmentNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.DocumentFragment;
          }, e2.isAttrNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Attribute;
          }, e2.isCharacterDataNode = function(t2) {
            if (!e2.isNode(t2))
              return false;
            var r2 = t2._nodeType;
            return r2 === n.NodeType.Text || r2 === n.NodeType.ProcessingInstruction || r2 === n.NodeType.Comment || r2 === n.NodeType.CData;
          }, e2.isTextNode = function(t2) {
            return e2.isNode(t2) && (t2._nodeType === n.NodeType.Text || t2._nodeType === n.NodeType.CData);
          }, e2.isExclusiveTextNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Text;
          }, e2.isCDATASectionNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.CData;
          }, e2.isCommentNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Comment;
          }, e2.isProcessingInstructionNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.ProcessingInstruction;
          }, e2.isElementNode = function(t2) {
            return e2.isNode(t2) && t2._nodeType === n.NodeType.Element;
          }, e2.isCustomElementNode = function(t2) {
            return e2.isElementNode(t2) && t2._customElementState === "custom";
          }, e2.isShadowRoot = function(e3) {
            return !!e3 && e3.host !== void 0;
          }, e2.isMouseEvent = function(e3) {
            return !!e3 && e3.screenX !== void 0 && e3.screenY != null;
          }, e2.isSlotable = function(t2) {
            return !!t2 && t2._name !== void 0 && t2._assignedSlot !== void 0 && (e2.isTextNode(t2) || e2.isElementNode(t2));
          }, e2.isSlot = function(t2) {
            return !!t2 && t2._name !== void 0 && t2._assignedNodes !== void 0 && e2.isElementNode(t2);
          }, e2.isWindow = function(e3) {
            return !!e3 && e3.navigator !== void 0;
          }, e2.isEventListener = function(e3) {
            return !!e3 && e3.handleEvent !== void 0;
          }, e2.isRegisteredObserver = function(e3) {
            return !!e3 && e3.observer !== void 0 && e3.options !== void 0;
          }, e2.isTransientRegisteredObserver = function(t2) {
            return !!t2 && t2.source !== void 0 && e2.isRegisteredObserver(t2);
          }, e2;
        }();
        t.Guard = i;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2() {
            return e2.call(this) || this;
          }
          return i(t2, e2), t2;
        }(r(98).DocumentImpl);
        t.XMLDocumentImpl = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o, a = r(1), s = r(243), u = r(7), l = r(244), c = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, h = /[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, p = /[ "<>`]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, f = /[ "<>`#?{}]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, d = /[ "<>`#?{}/:;=@\[\]\\\^\|]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, m = /[0-9A-Za-z!\$&-\/:;=\?@_~\xA0-\uD7FF\uE000-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDC00-\uDFFD]/, y = /[\0\t\f\r #%/:?@\[\\\]]/;
        function v(e2) {
          o !== void 0 && o.call(null, "Validation Error: " + e2);
        }
        function _() {
          return { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
        }
        function g(e2) {
          return e2 in c;
        }
        function b(e2) {
          return g(e2.scheme);
        }
        function x(e2) {
          return c[e2] || null;
        }
        function w(e2) {
          return e2.username !== "" || e2.password !== "";
        }
        function E(e2, t2) {
          var r2, i2;
          t2 === void 0 && (t2 = false);
          var o2 = e2.scheme + ":";
          if (e2.host !== null ? (o2 += "//", w(e2) && (o2 += e2.username, e2.password !== "" && (o2 += ":" + e2.password), o2 += "@"), o2 += D(e2.host), e2.port !== null && (o2 += ":" + e2.port)) : e2.host === null && e2.scheme === "file" && (o2 += "//"), e2._cannotBeABaseURLFlag)
            o2 += e2.path[0];
          else
            try {
              for (var a2 = n(e2.path), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                o2 += "/" + s2.value;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          return e2.query !== null && (o2 += "?" + e2.query), t2 || e2.fragment === null || (o2 += "#" + e2.fragment), o2;
        }
        function D(e2) {
          return a.isNumber(e2) ? S(e2) : a.isArray(e2) ? "[" + C(e2) + "]" : e2;
        }
        function S(e2) {
          for (var t2 = "", r2 = e2, n2 = 1; n2 <= 4; n2++)
            t2 = (r2 % 256).toString() + t2, n2 !== 4 && (t2 = "." + t2), r2 = Math.floor(r2 / 256);
          return t2;
        }
        function C(e2) {
          for (var t2 = "", r2 = null, n2 = -1, i2 = 0, o2 = 0, a2 = 0; a2 < 8; a2++)
            if (e2[a2] === 0) {
              i2 = 1;
              for (var s2 = a2 + 1; s2 < 8 && e2[s2] === 0; s2++)
                i2++;
              i2 > o2 && (o2 = i2, n2 = a2);
            }
          o2 > 1 && (r2 = n2);
          for (var u2 = false, l2 = 0; l2 < 8; l2++)
            u2 && e2[l2] === 0 || (u2 && (u2 = false), r2 !== l2 ? (t2 += e2[l2].toString(16), l2 !== 7 && (t2 += ":")) : (t2 += l2 === 0 ? "::" : ":", u2 = true));
          return t2;
        }
        function A(e2, t2, r2, i2, o2) {
          var l2, c2, y2, _2;
          if (i2 === void 0) {
            i2 = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
            var E2 = /^[\u0000-\u001F\u0020]+/, D2 = /[\u0000-\u001F\u0020]+$/;
            (E2.test(e2) || D2.test(e2)) && v("Input string contains leading or trailing control characters or space."), e2 = (e2 = e2.replace(E2, "")).replace(D2, "");
          }
          var S2 = /[\u0009\u000A\u000D]/g;
          S2.test(e2) && v("Input string contains tab or newline characters."), e2 = e2.replace(S2, "");
          var C2 = o2 === void 0 ? s.ParserState.SchemeStart : o2;
          t2 === void 0 && (t2 = null);
          for (var A2 = r2 === void 0 || r2 === "replacement" || r2 === "UTF-16BE" || r2 === "UTF-16LE" ? "UTF-8" : r2, L2 = "", M2 = false, B2 = false, j2 = false, R2 = new a.StringWalker(e2); ; ) {
            switch (C2) {
              case s.ParserState.SchemeStart:
                if (u.codePoint.ASCIIAlpha.test(R2.c()))
                  L2 += R2.c().toLowerCase(), C2 = s.ParserState.Scheme;
                else {
                  if (o2 !== void 0)
                    return v("Invalid scheme start character."), null;
                  C2 = s.ParserState.NoScheme, R2.pointer--;
                }
                break;
              case s.ParserState.Scheme:
                if (u.codePoint.ASCIIAlphanumeric.test(R2.c()) || R2.c() === "+" || R2.c() === "-" || R2.c() === ".")
                  L2 += R2.c().toLowerCase();
                else {
                  if (R2.c() !== ":") {
                    if (o2 === void 0) {
                      L2 = "", C2 = s.ParserState.NoScheme, R2.pointer = 0;
                      continue;
                    }
                    return v("Invalid input string."), null;
                  }
                  if (o2 !== void 0) {
                    if (g(i2.scheme) && !g(L2))
                      return i2;
                    if (!g(i2.scheme) && g(L2))
                      return i2;
                    if ((w(i2) || i2.port !== null) && L2 === "file")
                      return i2;
                    if (i2.scheme === "file" && (i2.host === "" || i2.host === null))
                      return i2;
                  }
                  if (i2.scheme = L2, o2 !== void 0)
                    return i2.port === x(i2.scheme) && (i2.port = null), i2;
                  L2 = "", i2.scheme === "file" ? (R2.remaining().startsWith("//") || v("Invalid file URL scheme, '//' expected."), C2 = s.ParserState.File) : b(i2) && t2 !== null && t2.scheme === i2.scheme ? C2 = s.ParserState.SpecialRelativeOrAuthority : b(i2) ? C2 = s.ParserState.SpecialAuthoritySlashes : R2.remaining().startsWith("/") ? (C2 = s.ParserState.PathOrAuthority, R2.pointer++) : (i2._cannotBeABaseURLFlag = true, i2.path.push(""), C2 = s.ParserState.CannotBeABaseURLPath);
                }
                break;
              case s.ParserState.NoScheme:
                if (t2 === null || t2._cannotBeABaseURLFlag && R2.c() !== "#")
                  return v("Invalid input string."), null;
                t2._cannotBeABaseURLFlag && R2.c() === "#" ? (i2.scheme = t2.scheme, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", i2._cannotBeABaseURLFlag = true, C2 = s.ParserState.Fragment) : t2.scheme !== "file" ? (C2 = s.ParserState.Relative, R2.pointer--) : (C2 = s.ParserState.File, R2.pointer--);
                break;
              case s.ParserState.SpecialRelativeOrAuthority:
                R2.c() === "/" && R2.remaining().startsWith("/") ? (C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer++) : (v("Invalid input string."), C2 = s.ParserState.Relative, R2.pointer--);
                break;
              case s.ParserState.PathOrAuthority:
                R2.c() === "/" ? C2 = s.ParserState.Authority : (C2 = s.ParserState.Path, R2.pointer--);
                break;
              case s.ParserState.Relative:
                if (t2 === null)
                  throw new Error("Invalid parser state. Base URL is null.");
                switch (i2.scheme = t2.scheme, R2.c()) {
                  case "":
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = t2.query;
                    break;
                  case "/":
                    C2 = s.ParserState.RelativeSlash;
                    break;
                  case "?":
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = "", C2 = s.ParserState.Query;
                    break;
                  case "#":
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", C2 = s.ParserState.Fragment;
                    break;
                  default:
                    b(i2) && R2.c() === "\\" ? (v("Invalid input string."), C2 = s.ParserState.RelativeSlash) : (i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.path.length !== 0 && i2.path.splice(i2.path.length - 1, 1), C2 = s.ParserState.Path, R2.pointer--);
                }
                break;
              case s.ParserState.RelativeSlash:
                if (!b(i2) || R2.c() !== "/" && R2.c() !== "\\")
                  if (R2.c() === "/")
                    C2 = s.ParserState.Authority;
                  else {
                    if (t2 === null)
                      throw new Error("Invalid parser state. Base URL is null.");
                    i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, C2 = s.ParserState.Path, R2.pointer--;
                  }
                else
                  R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.SpecialAuthorityIgnoreSlashes;
                break;
              case s.ParserState.SpecialAuthoritySlashes:
                R2.c() === "/" && R2.remaining().startsWith("/") ? (C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer++) : (v("Expected '//'."), C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer--);
                break;
              case s.ParserState.SpecialAuthorityIgnoreSlashes:
                R2.c() !== "/" && R2.c() !== "\\" ? (C2 = s.ParserState.Authority, R2.pointer--) : v("Unexpected '/' or '\\'.");
                break;
              case s.ParserState.Authority:
                if (R2.c() === "@") {
                  v("Unexpected '@'."), M2 && (L2 = "%40" + L2), M2 = true;
                  try {
                    for (var U2 = (l2 = void 0, n(L2)), G2 = U2.next(); !G2.done; G2 = U2.next()) {
                      var q2 = G2.value;
                      if (q2 !== ":" || j2) {
                        var W2 = X(q2, d);
                        j2 ? i2.password += W2 : i2.username += W2;
                      } else
                        j2 = true;
                    }
                  } catch (e3) {
                    l2 = { error: e3 };
                  } finally {
                    try {
                      G2 && !G2.done && (c2 = U2.return) && c2.call(U2);
                    } finally {
                      if (l2)
                        throw l2.error;
                    }
                  }
                  L2 = "";
                } else if (R2.c() === "" || R2.c() === "/" || R2.c() === "?" || R2.c() === "#" || b(i2) && R2.c() === "\\") {
                  if (M2 && L2 === "")
                    return v("Invalid input string."), null;
                  R2.pointer -= L2.length + 1, L2 = "", C2 = s.ParserState.Host;
                } else
                  L2 += R2.c();
                break;
              case s.ParserState.Host:
              case s.ParserState.Hostname:
                if (o2 !== void 0 && i2.scheme === "file")
                  R2.pointer--, C2 = s.ParserState.FileHost;
                else if (R2.c() !== ":" || B2)
                  if (R2.c() === "" || R2.c() === "/" || R2.c() === "?" || R2.c() === "#" || b(i2) && R2.c() === "\\") {
                    if (R2.pointer--, b(i2) && L2 === "")
                      return v("Invalid input string."), null;
                    if (o2 !== void 0 && L2 === "" && (w(i2) || i2.port !== null))
                      return v("Invalid input string."), i2;
                    if ((J = I(L2, !b(i2))) === null)
                      return null;
                    if (i2.host = J, L2 = "", C2 = s.ParserState.PathStart, o2 !== void 0)
                      return i2;
                  } else
                    R2.c() === "[" && (B2 = true), R2.c() === "]" && (B2 = false), L2 += R2.c();
                else {
                  if (L2 === "")
                    return v("Invalid input string."), null;
                  if ((J = I(L2, !b(i2))) === null)
                    return null;
                  if (i2.host = J, L2 = "", C2 = s.ParserState.Port, o2 === s.ParserState.Hostname)
                    return i2;
                }
                break;
              case s.ParserState.Port:
                if (u.codePoint.ASCIIDigit.test(R2.c()))
                  L2 += R2.c();
                else {
                  if (!(R2.c() === "" || R2.c() === "/" || R2.c() === "?" || R2.c() === "#" || b(i2) && R2.c() === "\\" || o2))
                    return v("Invalid input string."), null;
                  if (L2 !== "" && L2 !== "") {
                    var H2 = parseInt(L2, 10);
                    if (H2 > Math.pow(2, 16) - 1)
                      return v("Invalid port number."), null;
                    i2.port = H2 === x(i2.scheme) ? null : H2, L2 = "";
                  }
                  if (o2 !== void 0)
                    return i2;
                  C2 = s.ParserState.PathStart, R2.pointer--;
                }
                break;
              case s.ParserState.File:
                if (i2.scheme = "file", R2.c() === "/" || R2.c() === "\\")
                  R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.FileSlash;
                else if (t2 !== null && t2.scheme === "file")
                  switch (R2.c()) {
                    case "":
                      i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = t2.query;
                      break;
                    case "?":
                      i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = "", C2 = s.ParserState.Query;
                      break;
                    case "#":
                      i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", C2 = s.ParserState.Fragment;
                      break;
                    default:
                      P(R2.substring()) ? v("Unexpected windows drive letter in input string.") : (i2.host = t2.host, i2.path = u.list.clone(t2.path), O(i2)), C2 = s.ParserState.Path, R2.pointer--;
                  }
                else
                  C2 = s.ParserState.Path, R2.pointer--;
                break;
              case s.ParserState.FileSlash:
                R2.c() === "/" || R2.c() === "\\" ? (R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.FileHost) : (t2 === null || t2.scheme !== "file" || P(R2.substring()) || (F(t2.path[0]) ? i2.path.push(t2.path[0]) : i2.host = t2.host), C2 = s.ParserState.Path, R2.pointer--);
                break;
              case s.ParserState.FileHost:
                if (R2.c() === "" || R2.c() === "/" || R2.c() === "\\" || R2.c() === "?" || R2.c() === "#")
                  if (R2.pointer--, o2 === void 0 && k(L2))
                    v("Unexpected windows drive letter in input string."), C2 = s.ParserState.Path;
                  else if (L2 === "") {
                    if (i2.host = "", o2 !== void 0)
                      return i2;
                    C2 = s.ParserState.PathStart;
                  } else {
                    var J;
                    if ((J = I(L2, !b(i2))) === null)
                      return null;
                    if (J === "localhost" && (J = ""), i2.host = J, o2 !== void 0)
                      return i2;
                    L2 = "", C2 = s.ParserState.PathStart;
                  }
                else
                  L2 += R2.c();
                break;
              case s.ParserState.PathStart:
                b(i2) ? (R2.c() === "\\" && v("Invalid input string."), C2 = s.ParserState.Path, R2.c() !== "/" && R2.c() !== "\\" && R2.pointer--) : o2 === void 0 && R2.c() === "?" ? (i2.query = "", C2 = s.ParserState.Query) : o2 === void 0 && R2.c() === "#" ? (i2.fragment = "", C2 = s.ParserState.Fragment) : R2.c() !== "" && (C2 = s.ParserState.Path, R2.c() !== "/" && R2.pointer--);
                break;
              case s.ParserState.Path:
                if (R2.c() === "" || R2.c() === "/" || b(i2) && R2.c() === "\\" || o2 === void 0 && (R2.c() === "?" || R2.c() === "#")) {
                  if (b(i2) && R2.c() === "\\" && v("Invalid input string."), T(L2))
                    O(i2), R2.c() === "/" || b(i2) && R2.c() === "\\" || i2.path.push("");
                  else if (!N(L2) || R2.c() === "/" || b(i2) && R2.c() === "\\") {
                    if (!N(L2)) {
                      if (i2.scheme === "file" && i2.path.length === 0 && k(L2)) {
                        i2.host !== null && i2.host !== "" && (v("Invalid input string."), i2.host = "");
                        var Y = Array.from(L2);
                        L2 = Y.slice(0, 1) + ":" + Y.slice(2);
                      }
                      i2.path.push(L2);
                    }
                  } else
                    i2.path.push("");
                  if (L2 = "", i2.scheme === "file" && (R2.c() === "" || R2.c() === "?" || R2.c() === "#"))
                    for (; i2.path.length > 1 && i2.path[0] === ""; )
                      v("Invalid input string."), i2.path.splice(0, 1);
                  R2.c() === "?" && (i2.query = "", C2 = s.ParserState.Query), R2.c() === "#" && (i2.fragment = "", C2 = s.ParserState.Fragment);
                } else
                  m.test(R2.c()) || R2.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R2.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), L2 += X(R2.c(), f);
                break;
              case s.ParserState.CannotBeABaseURLPath:
                R2.c() === "?" ? (i2.query = "", C2 = s.ParserState.Query) : R2.c() === "#" ? (i2.fragment = "", C2 = s.ParserState.Fragment) : (R2.c() === "" || m.test(R2.c()) || R2.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R2.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), R2.c() !== "" && (i2.path[0] += X(R2.c(), h)));
                break;
              case s.ParserState.Query:
                if (A2 === "UTF-8" || b(i2) && i2.scheme !== "ws" && i2.scheme !== "wss" || (A2 = "UTF-8"), o2 === void 0 && R2.c() === "#")
                  i2.fragment = "", C2 = s.ParserState.Fragment;
                else if (R2.c() !== "") {
                  if (m.test(R2.c()) || R2.c() === "%" || v("Character is not a URL code point or a percent encoded character."), R2.c() !== "%" || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), A2.toUpperCase() !== "UTF-8")
                    throw new Error("Only UTF-8 encoding is supported.");
                  var V = a.utf8Encode(R2.c());
                  if (V.length >= 3 && V[0] === 38 && V[1] === 35 && V[V.length - 1] === 59)
                    V = V.subarray(2, V.length - 1), i2.query += "%26%23" + u.byteSequence.isomorphicDecode(V) + "%3B";
                  else
                    try {
                      for (var K = (y2 = void 0, n(V)), $ = K.next(); !$.done; $ = K.next()) {
                        var Q = $.value;
                        Q < 33 || Q > 126 || Q === 34 || Q === 35 || Q === 60 || Q === 62 || Q === 39 && b(i2) ? i2.query += z(Q) : i2.query += String.fromCharCode(Q);
                      }
                    } catch (e3) {
                      y2 = { error: e3 };
                    } finally {
                      try {
                        $ && !$.done && (_2 = K.return) && _2.call(K);
                      } finally {
                        if (y2)
                          throw y2.error;
                      }
                    }
                }
                break;
              case s.ParserState.Fragment:
                R2.c() === "" || (R2.c() === "\0" ? v("NULL character in input string.") : (m.test(R2.c()) || R2.c() === "%" || v("Unexpected character in fragment string."), R2.c() !== "%" || /^[A-Za-z0-9][A-Za-z0-9]/.test(R2.remaining()) || v("Unexpected character in fragment string."), i2.fragment += X(R2.c(), p)));
            }
            if (R2.eof)
              break;
            R2.pointer++;
          }
          return i2;
        }
        function N(e2) {
          return e2 === "." || e2.toLowerCase() === "%2e";
        }
        function T(e2) {
          var t2 = e2.toLowerCase();
          return t2 === ".." || t2 === ".%2e" || t2 === "%2e." || t2 === "%2e%2e";
        }
        function O(e2) {
          var t2 = e2.path;
          t2.length !== 0 && (e2.scheme === "file" && t2.length === 1 && F(t2[0]) || e2.path.splice(e2.path.length - 1, 1));
        }
        function F(e2) {
          return e2.length >= 2 && u.codePoint.ASCIIAlpha.test(e2[0]) && e2[1] === ":";
        }
        function k(e2) {
          return e2.length >= 2 && u.codePoint.ASCIIAlpha.test(e2[0]) && (e2[1] === ":" || e2[1] === "|");
        }
        function P(e2) {
          return e2.length >= 2 && k(e2) && (e2.length === 2 || e2[2] === "/" || e2[2] === "\\" || e2[2] === "?" || e2[2] === "#");
        }
        function I(e2, t2) {
          if (t2 === void 0 && (t2 = false), e2.startsWith("["))
            return e2.endsWith("]") ? B(e2.substring(1, e2.length - 1)) : (v("Expected ']' after '['."), null);
          if (t2)
            return j(e2);
          var r2 = H(a.utf8Decode(G(e2)));
          if (r2 === null)
            return v("Invalid domain."), null;
          if (y.test(r2))
            return v("Invalid domain."), null;
          var n2 = M(r2);
          return n2 === null || a.isNumber(n2) ? n2 : r2;
        }
        function L(e2, t2) {
          t2 === void 0 && (t2 = { value: false });
          var r2 = 10;
          return e2.startsWith("0x") || e2.startsWith("0X") ? (t2.value = true, e2 = e2.substr(2), r2 = 16) : e2.length >= 2 && e2[0] === "0" && (t2.value = true, e2 = e2.substr(1), r2 = 8), e2 === "" ? 0 : (r2 === 10 ? /^[0-9]+$/ : r2 === 16 ? /^[0-9A-Fa-f]+$/ : /^[0-7]+$/).test(e2) ? parseInt(e2, r2) : null;
        }
        function M(e2) {
          var t2, r2, i2, o2, a2 = { value: false }, s2 = e2.split(".");
          if (s2[s2.length - 1] === "" && (a2.value = true, s2.length > 1 && s2.pop()), s2.length > 4)
            return e2;
          var u2 = [];
          try {
            for (var l2 = n(s2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              var h2 = c2.value;
              if (h2 === "")
                return e2;
              if ((_2 = L(h2, a2)) === null)
                return e2;
              u2.push(_2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          a2.value && v("Invalid IP v4 address.");
          for (var p2 = 0; p2 < u2.length; p2++) {
            if (u2[p2] > 255 && (v("Invalid IP v4 address."), p2 < u2.length - 1))
              return null;
          }
          if (u2[u2.length - 1] >= Math.pow(256, 5 - u2.length))
            return v("Invalid IP v4 address."), null;
          var f2 = u2[u2.length - 1];
          u2.pop();
          var d2 = 0;
          try {
            for (var m2 = n(u2), y2 = m2.next(); !y2.done; y2 = m2.next()) {
              var _2;
              f2 += (_2 = y2.value) * Math.pow(256, 3 - d2), d2++;
            }
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              y2 && !y2.done && (o2 = m2.return) && o2.call(m2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return f2;
        }
        function B(e2) {
          var t2, r2 = [0, 0, 0, 0, 0, 0, 0, 0], n2 = 0, o2 = null, s2 = new a.StringWalker(e2);
          if (s2.c() === ":") {
            if (!s2.remaining().startsWith(":"))
              return v("Invalid IP v6 address."), null;
            s2.pointer += 2, o2 = n2 += 1;
          }
          for (; s2.c() !== ""; ) {
            if (n2 === 8)
              return v("Invalid IP v6 address."), null;
            if (s2.c() !== ":") {
              for (var l2 = 0, c2 = 0; c2 < 4 && u.codePoint.ASCIIHexDigit.test(s2.c()); )
                l2 = 16 * l2 + parseInt(s2.c(), 16), s2.pointer++, c2++;
              if (s2.c() === ".") {
                if (c2 === 0)
                  return v("Invalid IP v6 address."), null;
                if (s2.pointer -= c2, n2 > 6)
                  return v("Invalid IP v6 address."), null;
                for (var h2 = 0; s2.c() !== ""; ) {
                  var p2 = null;
                  if (h2 > 0) {
                    if (!(s2.c() === "." && h2 < 4))
                      return v("Invalid IP v6 address."), null;
                    s2.pointer++;
                  }
                  if (!u.codePoint.ASCIIDigit.test(s2.c()))
                    return v("Invalid IP v6 address."), null;
                  for (; u.codePoint.ASCIIDigit.test(s2.c()); ) {
                    var f2 = parseInt(s2.c(), 10);
                    if (p2 === null)
                      p2 = f2;
                    else {
                      if (p2 === 0)
                        return v("Invalid IP v6 address."), null;
                      p2 = 10 * p2 + f2;
                    }
                    if (p2 > 255)
                      return v("Invalid IP v6 address."), null;
                    s2.pointer++;
                  }
                  if (p2 === null)
                    return v("Invalid IP v6 address."), null;
                  r2[n2] = 256 * r2[n2] + p2, ++h2 !== 2 && h2 !== 4 || n2++;
                }
                if (h2 !== 4)
                  return v("Invalid IP v6 address."), null;
                break;
              }
              if (s2.c() === ":") {
                if (s2.pointer++, s2.c() === "")
                  return v("Invalid IP v6 address."), null;
              } else if (s2.c() !== "")
                return v("Invalid IP v6 address."), null;
              r2[n2] = l2, n2++;
            } else {
              if (o2 !== null)
                return v("Invalid IP v6 address."), null;
              s2.pointer++, o2 = ++n2;
            }
          }
          if (o2 !== null) {
            var d2 = n2 - o2;
            for (n2 = 7; n2 !== 0 && d2 > 0; )
              t2 = i([r2[o2 + d2 - 1], r2[n2]], 2), r2[n2] = t2[0], r2[o2 + d2 - 1] = t2[1], n2--, d2--;
          } else if (o2 === null && n2 !== 8)
            return v("Invalid IP v6 address."), null;
          return r2;
        }
        function j(e2) {
          var t2, r2;
          if (/[\x00\t\f\r #/:?@\[\\\]]/.test(e2))
            return v("Invalid host string."), null;
          var i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              i2 += X(a2.value, h);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function R(e2) {
          return null;
        }
        function z(e2) {
          return "%" + ("00" + e2.toString(16).toUpperCase()).slice(-2);
        }
        function U(e2) {
          for (var t2 = function(e3) {
            return e3 >= 48 && e3 <= 57 || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
          }, r2 = new Uint8Array(e2.length), n2 = 0, i2 = 0; i2 < e2.length; i2++) {
            var o2 = e2[i2];
            if (o2 !== 37)
              r2[n2] = o2, n2++;
            else if (o2 === 37 && i2 >= e2.length - 2)
              r2[n2] = o2, n2++;
            else if (o2 !== 37 || t2(e2[i2 + 1]) && t2(e2[i2 + 2])) {
              var s2 = parseInt(a.utf8Decode(Uint8Array.of(e2[i2 + 1], e2[i2 + 2])), 16);
              r2[n2] = s2, n2++, i2 += 2;
            } else
              r2[n2] = o2, n2++;
          }
          return r2.subarray(0, n2);
        }
        function G(e2) {
          return U(a.utf8Encode(e2));
        }
        function X(e2, t2) {
          var r2, i2;
          if (!t2.test(e2))
            return e2;
          var o2 = a.utf8Encode(e2), s2 = "";
          try {
            for (var u2 = n(o2), l2 = u2.next(); !l2.done; l2 = u2.next()) {
              s2 += z(l2.value);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              l2 && !l2.done && (i2 = u2.return) && i2.call(u2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return s2;
        }
        function q(e2) {
          var t2, r2, i2, o2, s2 = [], u2 = [];
          try {
            for (var l2 = n(e2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              var h2 = c2.value;
              h2 === 38 ? (s2.push(Uint8Array.from(u2)), u2 = []) : u2.push(h2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              c2 && !c2.done && (r2 = l2.return) && r2.call(l2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          u2.length !== 0 && s2.push(Uint8Array.from(u2));
          var p2 = [];
          try {
            for (var f2 = n(s2), d2 = f2.next(); !d2.done; d2 = f2.next()) {
              var m2 = d2.value;
              if (m2.length !== 0) {
                for (var y2 = m2.indexOf(61), v2 = y2 !== -1 ? m2.slice(0, y2) : m2, _2 = y2 !== -1 ? m2.slice(y2 + 1) : new Uint8Array(), g2 = 0; g2 < v2.length; g2++)
                  v2[g2] === 43 && (v2[g2] = 32);
                for (g2 = 0; g2 < _2.length; g2++)
                  _2[g2] === 43 && (_2[g2] = 32);
                var b2 = a.utf8Decode(v2), x2 = a.utf8Decode(_2);
                p2.push([b2, x2]);
              }
            }
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              d2 && !d2.done && (o2 = f2.return) && o2.call(f2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return p2;
        }
        function W(e2) {
          var t2, r2, i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value;
              i2 += s2 === 32 ? "+" : s2 === 42 || s2 === 45 || s2 === 46 || s2 >= 48 && s2 <= 57 || s2 >= 65 && s2 <= 90 || s2 === 95 || s2 >= 97 && s2 <= 122 ? String.fromCodePoint(s2) : z(s2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function H(e2, t2) {
          t2 === void 0 && (t2 = false);
          var r2 = l.domainToASCII(e2);
          return r2 === "" ? (v("Invalid domain name."), null) : r2;
        }
        t.setValidationErrorCallback = function(e2) {
          o = e2;
        }, t.newURL = _, t.isSpecialScheme = g, t.isSpecial = b, t.defaultPort = x, t.includesCredentials = w, t.cannotHaveAUsernamePasswordPort = function(e2) {
          return e2.host === null || e2.host === "" || e2._cannotBeABaseURLFlag || e2.scheme === "file";
        }, t.urlSerializer = E, t.hostSerializer = D, t.iPv4Serializer = S, t.iPv6Serializer = C, t.urlParser = function(e2, t2, r2) {
          var n2 = A(e2, t2, r2);
          return n2 === null ? null : (n2.scheme !== "blob" || (n2._blobURLEntry = null), n2);
        }, t.basicURLParser = A, t.setTheUsername = function(e2, t2) {
          var r2, i2, o2 = "";
          try {
            for (var a2 = n(t2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              o2 += X(s2.value, d);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e2.username = o2;
        }, t.setThePassword = function(e2, t2) {
          var r2, i2, o2 = "";
          try {
            for (var a2 = n(t2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              o2 += X(s2.value, d);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          e2.password = o2;
        }, t.isSingleDotPathSegment = N, t.isDoubleDotPathSegment = T, t.shorten = O, t.isNormalizedWindowsDriveLetter = F, t.isWindowsDriveLetter = k, t.startsWithAWindowsDriveLetter = P, t.hostParser = I, t.iPv4NumberParser = L, t.iPv4Parser = M, t.iPv6Parser = B, t.opaqueHostParser = j, t.resolveABlobURL = R, t.percentEncode = z, t.percentDecode = U, t.stringPercentDecode = G, t.utf8PercentEncode = X, t.hostEquals = function(e2, t2) {
          return e2 === t2;
        }, t.urlEquals = function(e2, t2, r2) {
          return r2 === void 0 && (r2 = false), E(e2, r2) === E(t2, r2);
        }, t.urlEncodedStringParser = function(e2) {
          return q(a.utf8Encode(e2));
        }, t.urlEncodedParser = q, t.urlEncodedByteSerializer = W, t.urlEncodedSerializer = function(e2, t2) {
          var r2, i2;
          if ((t2 === void 0 || t2 === "replacement" || t2 === "UTF-16BE" || t2 === "UTF-16LE" ? "UTF-8" : t2).toUpperCase() !== "UTF-8")
            throw new Error("Only UTF-8 encoding is supported.");
          var o2 = "";
          try {
            for (var s2 = n(e2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
              var l2 = u2.value, c2 = W(a.utf8Encode(l2[0])), h2 = l2[1];
              h2 = W(a.utf8Encode(h2)), o2 !== "" && (o2 += "&"), o2 += c2 + "=" + h2;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.origin = function e2(t2) {
          switch (t2.scheme) {
            case "blob":
              t2._blobURLEntry;
              var r2 = A(t2.path[0]);
              return r2 === null ? s.OpaqueOrigin : e2(r2);
            case "ftp":
            case "http":
            case "https":
            case "ws":
            case "wss":
              return [t2.scheme, t2.host === null ? "" : t2.host, t2.port, null];
            case "file":
            default:
              return s.OpaqueOrigin;
          }
        }, t.domainToASCII = H, t.domainToUnicode = function(e2, t2) {
          t2 === void 0 && (t2 = false);
          var r2 = l.domainToUnicode(e2);
          return r2 === "" && v("Invalid domain name."), r2;
        }, t.asciiSerializationOfAnOrigin = function(e2) {
          if (e2[0] === "" && e2[1] === "" && e2[2] === null && e2[3] === null)
            return "null";
          var t2 = e2[0] + "://" + D(e2[1]);
          return e2[2] !== null && (t2 += ":" + e2[2].toString()), t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(0), i = function() {
          function e2() {
            this._signal = n.create_abortSignal();
          }
          return Object.defineProperty(e2.prototype, "signal", { get: function() {
            return this._signal;
          }, enumerable: true, configurable: true }), e2.prototype.abort = function() {
            n.abort_signalAbort(this._signal);
          }, e2;
        }();
        t.AbortControllerImpl = i;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(70), a = r(0), s = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this;
            return t3._abortedFlag = false, t3._abortAlgorithms = new Set(), t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "aborted", { get: function() {
            return this._abortedFlag;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "onabort", { get: function() {
            return a.event_getterEventHandlerIDLAttribute(this, "onabort");
          }, set: function(e3) {
            a.event_setterEventHandlerIDLAttribute(this, "onabort", e3);
          }, enumerable: true, configurable: true }), t2._create = function() {
            return new t2();
          }, t2;
        }(o.EventTargetImpl);
        t.AbortSignalImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(34), s = r(12), u = function(e2) {
          function t2(t3, r2, n2) {
            var i2 = e2.call(this) || this;
            return i2._name = "", i2._publicId = "", i2._systemId = "", i2._name = t3, i2._publicId = r2, i2._systemId = n2, i2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "name", { get: function() {
            return this._name;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "publicId", { get: function() {
            return this._publicId;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "systemId", { get: function() {
            return this._systemId;
          }, enumerable: true, configurable: true }), t2.prototype.before = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.after = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.replaceWith = function() {
            for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
              e3[t3] = arguments[t3];
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2.prototype.remove = function() {
            throw new Error("Mixin: ChildNode not implemented.");
          }, t2._create = function(e3, r2, n2, i2) {
            n2 === void 0 && (n2 = ""), i2 === void 0 && (i2 = "");
            var o2 = new t2(r2, n2, i2);
            return o2._nodeDocument = e3, o2;
          }, t2;
        }(a.NodeImpl);
        t.DocumentTypeImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.DocumentType);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(100), a = r(1), s = r(0), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this) || this;
            return n2._host = t3, n2._mode = r2, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "mode", { get: function() {
            return this._mode;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "host", { get: function() {
            return this._host;
          }, enumerable: true, configurable: true }), t2.prototype._getTheParent = function(e3) {
            return e3._composedFlag || a.isEmpty(e3._path) || s.tree_rootNode(e3._path[0].invocationTarget) !== this ? this._host : null;
          }, t2._create = function(e3, r2) {
            return new t2(r2, "closed");
          }, t2;
        }(o.DocumentFragmentImpl);
        t.ShadowRootImpl = u;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(34), s = r(0), u = r(12), l = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this) || this;
            return r2._namespace = null, r2._namespacePrefix = null, r2._element = null, r2._value = "", r2._localName = t3, r2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "ownerElement", { get: function() {
            return this._element;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "namespaceURI", { get: function() {
            return this._namespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "prefix", { get: function() {
            return this._namespacePrefix;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "localName", { get: function() {
            return this._localName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "name", { get: function() {
            return this._qualifiedName;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "value", { get: function() {
            return this._value;
          }, set: function(e3) {
            s.attr_setAnExistingAttributeValue(this, e3);
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_qualifiedName", { get: function() {
            return this._namespacePrefix !== null ? this._namespacePrefix + ":" + this._localName : this._localName;
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2) {
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(a.NodeImpl);
        t.AttrImpl = l, u.idl_defineConst(l.prototype, "_nodeType", o.NodeType.Attribute), u.idl_defineConst(l.prototype, "specified", true);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(101), a = r(2), s = r(12), u = function(e2) {
          function t2(t3) {
            return e2.call(this, t3) || this;
          }
          return i(t2, e2), t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(o.TextImpl);
        t.CDATASectionImpl = u, s.idl_defineConst(u.prototype, "_nodeType", a.NodeType.CData);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(71), s = r(12), u = function(e2) {
          function t2(t3) {
            return t3 === void 0 && (t3 = ""), e2.call(this, t3) || this;
          }
          return i(t2, e2), t2._create = function(e3, r2) {
            r2 === void 0 && (r2 = "");
            var n2 = new t2(r2);
            return n2._nodeDocument = e3, n2;
          }, t2;
        }(a.CharacterDataImpl);
        t.CommentImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.Comment);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(71), s = r(12), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, r2) || this;
            return n2._target = t3, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), t2._create = function(e3, r2, n2) {
            var i2 = new t2(r2, n2);
            return i2._nodeDocument = e3, i2;
          }, t2;
        }(a.CharacterDataImpl);
        t.ProcessingInstructionImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.ProcessingInstruction);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(7), i = r(0), o = r(3), a = r(1), s = function() {
          function e2(e3, t2) {
            return this._live = true, this._root = e3, this._filter = t2, new Proxy(this, this);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            for (var e3 = this, t2 = 0, r2 = i.tree_getFirstDescendantNode(this._root, false, false, function(t3) {
              return o.Guard.isElementNode(t3) && e3._filter(t3);
            }); r2 !== null; )
              t2++, r2 = i.tree_getNextDescendantNode(this._root, r2, false, false, function(t3) {
                return o.Guard.isElementNode(t3) && e3._filter(t3);
              });
            return t2;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            for (var t2 = this, r2 = 0, n2 = i.tree_getFirstDescendantNode(this._root, false, false, function(e4) {
              return o.Guard.isElementNode(e4) && t2._filter(e4);
            }); n2 !== null; ) {
              if (r2 === e3)
                return n2;
              r2++, n2 = i.tree_getNextDescendantNode(this._root, n2, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2._filter(e4);
              });
            }
            return null;
          }, e2.prototype.namedItem = function(e3) {
            var t2 = this;
            if (e3 === "")
              return null;
            for (var r2 = i.tree_getFirstDescendantNode(this._root, false, false, function(e4) {
              return o.Guard.isElementNode(e4) && t2._filter(e4);
            }); r2 != null; ) {
              if (r2._uniqueIdentifier === e3)
                return r2;
              if (r2._namespace === n.namespace.HTML)
                for (var a2 = 0; a2 < r2._attributeList.length; a2++) {
                  var s2 = r2._attributeList[a2];
                  if (s2._localName === "name" && s2._namespace === null && s2._namespacePrefix === null && s2._value === e3)
                    return r2;
                }
              r2 = i.tree_getNextDescendantNode(this._root, r2, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2._filter(e4);
              });
            }
            return null;
          }, e2.prototype[Symbol.iterator] = function() {
            var e3 = this._root, t2 = this._filter, r2 = i.tree_getFirstDescendantNode(e3, false, false, function(e4) {
              return o.Guard.isElementNode(e4) && t2(e4);
            });
            return { next: function() {
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = i.tree_getNextDescendantNode(e3, r2, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2(e4);
              }), n2;
            } };
          }, e2.prototype.get = function(t2, r2, n2) {
            if (!a.isString(r2) || e2.reservedNames.indexOf(r2) !== -1)
              return Reflect.get(t2, r2, n2);
            var i2 = Number(r2);
            return isNaN(i2) ? t2.namedItem(r2) || void 0 : t2.item(i2) || void 0;
          }, e2.prototype.set = function(t2, r2, n2, o2) {
            if (!a.isString(r2) || e2.reservedNames.indexOf(r2) !== -1)
              return Reflect.set(t2, r2, n2, o2);
            var s2 = Number(r2), u = isNaN(s2) ? t2.namedItem(r2) || void 0 : t2.item(s2) || void 0;
            return !(!u || !u._parent) && (i.mutation_replace(u, n2, u._parent), true);
          }, e2._create = function(t2, r2) {
            return r2 === void 0 && (r2 = function() {
              return true;
            }), new e2(t2, r2);
          }, e2.reservedNames = ["_root", "_live", "_filter", "length", "item", "namedItem", "get", "set"], e2;
        }();
        t.HTMLCollectionImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(1), a = r(0), s = function() {
          function e2(e3) {
            return this._live = true, this._filter = null, this._length = 0, this._root = e3, new Proxy(this, this);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._root._children.size;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            if (e3 < 0 || e3 > this.length - 1)
              return null;
            if (e3 < this.length / 2) {
              for (var t2 = 0, r2 = this._root._firstChild; r2 !== null && t2 !== e3; )
                r2 = r2._nextSibling, t2++;
              return r2;
            }
            for (t2 = this.length - 1, r2 = this._root._lastChild; r2 !== null && t2 !== e3; )
              r2 = r2._previousSibling, t2--;
            return r2;
          }, e2.prototype.keys = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = 0;
              return { next: function() {
                return e4 === this.length ? { done: true, value: null } : { done: false, value: e4++ };
              }.bind(this) };
            }.bind(this), e3;
          }, e2.prototype.values = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator]();
              return { next: function() {
                return e4.next();
              } };
            }.bind(this), e3;
          }, e2.prototype.entries = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator](), t2 = 0;
              return { next: function() {
                var r2 = e4.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t2++, r2.value] };
              } };
            }.bind(this), e3;
          }, e2.prototype[Symbol.iterator] = function() {
            return this._root._children[Symbol.iterator]();
          }, e2.prototype.forEach = function(e3, t2) {
            var r2, o2;
            t2 === void 0 && (t2 = i.dom.window);
            var a2 = 0;
            try {
              for (var s2 = n(this._root._children), u = s2.next(); !u.done; u = s2.next()) {
                var l = u.value;
                e3.call(t2, l, a2++, this);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u && !u.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype.get = function(e3, t2, r2) {
            if (!o.isString(t2))
              return Reflect.get(e3, t2, r2);
            var n2 = Number(t2);
            return isNaN(n2) ? Reflect.get(e3, t2, r2) : e3.item(n2) || void 0;
          }, e2.prototype.set = function(e3, t2, r2, n2) {
            if (!o.isString(t2))
              return Reflect.set(e3, t2, r2, n2);
            var i2 = Number(t2);
            if (isNaN(i2))
              return Reflect.set(e3, t2, r2, n2);
            var s2 = e3.item(i2) || void 0;
            return !!s2 && (!!s2._parent && (a.mutation_replace(s2, r2, s2._parent), true));
          }, e2._create = function(t2) {
            return new e2(t2);
          }, e2;
        }();
        t.NodeListImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(1), a = function() {
          function e2(e3) {
            return this._live = false, this._items = [], this._length = 0, this._root = e3, this._items = [], this._filter = function(e4) {
              return true;
            }, new Proxy(this, this);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._items.length;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            return e3 < 0 || e3 > this.length - 1 ? null : this._items[e3];
          }, e2.prototype.keys = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = 0;
              return { next: function() {
                return e4 === this.length ? { done: true, value: null } : { done: false, value: e4++ };
              }.bind(this) };
            }.bind(this), e3;
          }, e2.prototype.values = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator]();
              return { next: function() {
                return e4.next();
              } };
            }.bind(this), e3;
          }, e2.prototype.entries = function() {
            var e3;
            return (e3 = {})[Symbol.iterator] = function() {
              var e4 = this[Symbol.iterator](), t2 = 0;
              return { next: function() {
                var r2 = e4.next();
                return r2.done ? { done: true, value: null } : { done: false, value: [t2++, r2.value] };
              } };
            }.bind(this), e3;
          }, e2.prototype[Symbol.iterator] = function() {
            var e3 = this._items[Symbol.iterator]();
            return { next: function() {
              return e3.next();
            } };
          }, e2.prototype.forEach = function(e3, t2) {
            var r2, o2;
            t2 === void 0 && (t2 = i.dom.window);
            var a2 = 0;
            try {
              for (var s = n(this._items), u = s.next(); !u.done; u = s.next()) {
                var l = u.value;
                e3.call(t2, l, a2++, this);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u && !u.done && (o2 = s.return) && o2.call(s);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype.get = function(e3, t2, r2) {
            if (!o.isString(t2))
              return Reflect.get(e3, t2, r2);
            var n2 = Number(t2);
            return isNaN(n2) ? Reflect.get(e3, t2, r2) : e3._items[n2] || void 0;
          }, e2.prototype.set = function(e3, t2, r2, n2) {
            if (!o.isString(t2))
              return Reflect.set(e3, t2, r2, n2);
            var i2 = Number(t2);
            return isNaN(i2) ? Reflect.set(e3, t2, r2, n2) : i2 >= 0 && i2 < e3._items.length && (e3._items[i2] = r2, true);
          }, e2._create = function(t2, r2) {
            var n2 = new e2(t2);
            return n2._items = r2, n2;
          }, e2;
        }();
        t.NodeListStaticImpl = a;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(9), a = r(0), s = function(e2) {
          function t2(r2) {
            var n2 = e2.call(this) || this;
            return n2._element = r2, Object.setPrototypeOf(n2, t2.prototype), n2;
          }
          return i(t2, e2), t2.prototype._asArray = function() {
            return this;
          }, t2.prototype.item = function(e3) {
            return this[e3] || null;
          }, t2.prototype.getNamedItem = function(e3) {
            return a.element_getAnAttributeByName(e3, this._element);
          }, t2.prototype.getNamedItemNS = function(e3, t3) {
            return a.element_getAnAttributeByNamespaceAndLocalName(e3 || "", t3, this._element);
          }, t2.prototype.setNamedItem = function(e3) {
            return a.element_setAnAttribute(e3, this._element);
          }, t2.prototype.setNamedItemNS = function(e3) {
            return a.element_setAnAttribute(e3, this._element);
          }, t2.prototype.removeNamedItem = function(e3) {
            var t3 = a.element_removeAnAttributeByName(e3, this._element);
            if (t3 === null)
              throw new o.NotFoundError();
            return t3;
          }, t2.prototype.removeNamedItemNS = function(e3, t3) {
            var r2 = a.element_removeAnAttributeByNamespaceAndLocalName(e3 || "", t3, this._element);
            if (r2 === null)
              throw new o.NotFoundError();
            return r2;
          }, t2._create = function(e3) {
            return new t2(e3);
          }, t2;
        }(Array);
        t.NamedNodeMapImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(6), s = r(2), u = r(102), l = r(9), c = r(0), h = r(12), p = r(3), f = function(e2) {
          function t2() {
            var t3 = e2.call(this) || this, r2 = a.dom.window._associatedDocument;
            return t3._start = [r2, 0], t3._end = [r2, 0], a.dom.rangeList.add(t3), t3;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "commonAncestorContainer", { get: function() {
            for (var e3 = this._start[0]; !c.tree_isAncestorOf(this._end[0], e3, true); ) {
              if (e3._parent === null)
                throw new Error("Parent node  is null.");
              e3 = e3._parent;
            }
            return e3;
          }, enumerable: true, configurable: true }), t2.prototype.setStart = function(e3, t3) {
            c.range_setTheStart(this, e3, t3);
          }, t2.prototype.setEnd = function(e3, t3) {
            c.range_setTheEnd(this, e3, t3);
          }, t2.prototype.setStartBefore = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheStart(this, t3, c.tree_index(e3));
          }, t2.prototype.setStartAfter = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheStart(this, t3, c.tree_index(e3) + 1);
          }, t2.prototype.setEndBefore = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheEnd(this, t3, c.tree_index(e3));
          }, t2.prototype.setEndAfter = function(e3) {
            var t3 = e3._parent;
            if (t3 === null)
              throw new l.InvalidNodeTypeError();
            c.range_setTheEnd(this, t3, c.tree_index(e3) + 1);
          }, t2.prototype.collapse = function(e3) {
            e3 ? this._end = this._start : this._start = this._end;
          }, t2.prototype.selectNode = function(e3) {
            c.range_select(e3, this);
          }, t2.prototype.selectNodeContents = function(e3) {
            if (p.Guard.isDocumentTypeNode(e3))
              throw new l.InvalidNodeTypeError();
            var t3 = c.tree_nodeLength(e3);
            this._start = [e3, 0], this._end = [e3, t3];
          }, t2.prototype.compareBoundaryPoints = function(e3, t3) {
            if (e3 !== s.HowToCompare.StartToStart && e3 !== s.HowToCompare.StartToEnd && e3 !== s.HowToCompare.EndToEnd && e3 !== s.HowToCompare.EndToStart)
              throw new l.NotSupportedError();
            if (c.range_root(this) !== c.range_root(t3))
              throw new l.WrongDocumentError();
            var r2, n2;
            switch (e3) {
              case s.HowToCompare.StartToStart:
                r2 = this._start, n2 = t3._start;
                break;
              case s.HowToCompare.StartToEnd:
                r2 = this._end, n2 = t3._start;
                break;
              case s.HowToCompare.EndToEnd:
                r2 = this._end, n2 = t3._end;
                break;
              case s.HowToCompare.EndToStart:
                r2 = this._start, n2 = t3._end;
                break;
              default:
                throw new l.NotSupportedError();
            }
            var i2 = c.boundaryPoint_position(r2, n2);
            return i2 === s.BoundaryPosition.Before ? -1 : i2 === s.BoundaryPosition.After ? 1 : 0;
          }, t2.prototype.deleteContents = function() {
            var e3, t3, r2, n2;
            if (!c.range_collapsed(this)) {
              var i2 = this._startNode, a2 = this._startOffset, s2 = this._endNode, u2 = this._endOffset;
              if (i2 === s2 && p.Guard.isCharacterDataNode(i2))
                c.characterData_replaceData(i2, a2, u2 - a2, "");
              else {
                var l2, h2, f2 = [];
                try {
                  for (var d = o(c.range_getContainedNodes(this)), m = d.next(); !m.done; m = d.next()) {
                    var y = (b = m.value)._parent;
                    y !== null && c.range_isContained(y, this) || f2.push(b);
                  }
                } catch (t4) {
                  e3 = { error: t4 };
                } finally {
                  try {
                    m && !m.done && (t3 = d.return) && t3.call(d);
                  } finally {
                    if (e3)
                      throw e3.error;
                  }
                }
                if (c.tree_isAncestorOf(s2, i2, true))
                  l2 = i2, h2 = a2;
                else {
                  for (var v = i2; v._parent !== null && !c.tree_isAncestorOf(s2, v._parent, true); )
                    v = v._parent;
                  if (v._parent === null)
                    throw new Error("Parent node is null.");
                  l2 = v._parent, h2 = c.tree_index(v) + 1;
                }
                p.Guard.isCharacterDataNode(i2) && c.characterData_replaceData(i2, a2, c.tree_nodeLength(i2) - a2, "");
                try {
                  for (var _ = o(f2), g = _.next(); !g.done; g = _.next()) {
                    var b;
                    (b = g.value)._parent && c.mutation_remove(b, b._parent);
                  }
                } catch (e4) {
                  r2 = { error: e4 };
                } finally {
                  try {
                    g && !g.done && (n2 = _.return) && n2.call(_);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
                p.Guard.isCharacterDataNode(s2) && c.characterData_replaceData(s2, 0, u2, ""), this._start = [l2, h2], this._end = [l2, h2];
              }
            }
          }, t2.prototype.extractContents = function() {
            return c.range_extract(this);
          }, t2.prototype.cloneContents = function() {
            return c.range_cloneTheContents(this);
          }, t2.prototype.insertNode = function(e3) {
            return c.range_insert(e3, this);
          }, t2.prototype.surroundContents = function(e3) {
            var t3, r2;
            try {
              for (var n2 = o(c.range_getPartiallyContainedNodes(this)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                var a2 = i2.value;
                if (!p.Guard.isTextNode(a2))
                  throw new l.InvalidStateError();
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                i2 && !i2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            if (p.Guard.isDocumentNode(e3) || p.Guard.isDocumentTypeNode(e3) || p.Guard.isDocumentFragmentNode(e3))
              throw new l.InvalidNodeTypeError();
            var s2 = c.range_extract(this);
            e3._children.size !== 0 && c.mutation_replaceAll(null, e3), c.range_insert(e3, this), c.mutation_append(s2, e3), c.range_select(e3, this);
          }, t2.prototype.cloneRange = function() {
            return c.create_range(this._start, this._end);
          }, t2.prototype.detach = function() {
            a.dom.rangeList.delete(this);
          }, t2.prototype.isPointInRange = function(e3, t3) {
            if (c.tree_rootNode(e3) !== c.range_root(this))
              return false;
            if (p.Guard.isDocumentTypeNode(e3))
              throw new l.InvalidNodeTypeError();
            if (t3 > c.tree_nodeLength(e3))
              throw new l.IndexSizeError();
            var r2 = [e3, t3];
            return c.boundaryPoint_position(r2, this._start) !== s.BoundaryPosition.Before && c.boundaryPoint_position(r2, this._end) !== s.BoundaryPosition.After;
          }, t2.prototype.comparePoint = function(e3, t3) {
            if (c.tree_rootNode(e3) !== c.range_root(this))
              throw new l.WrongDocumentError();
            if (p.Guard.isDocumentTypeNode(e3))
              throw new l.InvalidNodeTypeError();
            if (t3 > c.tree_nodeLength(e3))
              throw new l.IndexSizeError();
            var r2 = [e3, t3];
            return c.boundaryPoint_position(r2, this._start) === s.BoundaryPosition.Before ? -1 : c.boundaryPoint_position(r2, this._end) === s.BoundaryPosition.After ? 1 : 0;
          }, t2.prototype.intersectsNode = function(e3) {
            if (c.tree_rootNode(e3) !== c.range_root(this))
              return false;
            var t3 = e3._parent;
            if (t3 === null)
              return true;
            var r2 = c.tree_index(e3);
            return c.boundaryPoint_position([t3, r2], this._end) === s.BoundaryPosition.Before && c.boundaryPoint_position([t3, r2 + 1], this._start) === s.BoundaryPosition.After;
          }, t2.prototype.toString = function() {
            var e3, t3, r2 = "";
            if (this._startNode === this._endNode && p.Guard.isTextNode(this._startNode))
              return this._startNode._data.substring(this._startOffset, this._endOffset);
            p.Guard.isTextNode(this._startNode) && (r2 += this._startNode._data.substring(this._startOffset));
            try {
              for (var n2 = o(c.range_getContainedNodes(this)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                var a2 = i2.value;
                p.Guard.isTextNode(a2) && (r2 += a2._data);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return p.Guard.isTextNode(this._endNode) && (r2 += this._endNode._data.substring(0, this._endOffset)), r2;
          }, t2._create = function(e3, r2) {
            var n2 = new t2();
            return e3 && (n2._start = e3), r2 && (n2._end = r2), n2;
          }, t2.START_TO_START = 0, t2.START_TO_END = 1, t2.END_TO_END = 2, t2.END_TO_START = 3, t2;
        }(u.AbstractRangeImpl);
        t.RangeImpl = f, h.idl_defineConst(f.prototype, "START_TO_START", 0), h.idl_defineConst(f.prototype, "START_TO_END", 1), h.idl_defineConst(f.prototype, "END_TO_END", 2), h.idl_defineConst(f.prototype, "END_TO_START", 3);
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(103), a = r(0), s = function(e2) {
          function t2(t3, r2, n2) {
            var i2 = e2.call(this, t3) || this;
            return i2._iteratorCollection = void 0, i2._reference = r2, i2._pointerBeforeReference = n2, a.nodeIterator_iteratorList().add(i2), i2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "referenceNode", { get: function() {
            return this._reference;
          }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "pointerBeforeReferenceNode", { get: function() {
            return this._pointerBeforeReference;
          }, enumerable: true, configurable: true }), t2.prototype.nextNode = function() {
            return a.nodeIterator_traverse(this, true);
          }, t2.prototype.previousNode = function() {
            return a.nodeIterator_traverse(this, false);
          }, t2.prototype.detach = function() {
            a.nodeIterator_iteratorList().delete(this);
          }, t2._create = function(e3, r2, n2) {
            return new t2(e3, r2, n2);
          }, t2;
        }(o.TraverserImpl);
        t.NodeIteratorImpl = s;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(2), a = r(103), s = r(0), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._current = r2, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "currentNode", { get: function() {
            return this._current;
          }, set: function(e3) {
            this._current = e3;
          }, enumerable: true, configurable: true }), t2.prototype.parentNode = function() {
            for (var e3 = this._current; e3 !== null && e3 !== this._root; )
              if ((e3 = e3._parent) !== null && s.traversal_filter(this, e3) === o.FilterResult.Accept)
                return this._current = e3, e3;
            return null;
          }, t2.prototype.firstChild = function() {
            return s.treeWalker_traverseChildren(this, true);
          }, t2.prototype.lastChild = function() {
            return s.treeWalker_traverseChildren(this, false);
          }, t2.prototype.nextSibling = function() {
            return s.treeWalker_traverseSiblings(this, true);
          }, t2.prototype.previousNode = function() {
            for (var e3 = this._current; e3 !== this._root; ) {
              for (var t3 = e3._previousSibling; t3; ) {
                e3 = t3;
                for (var r2 = s.traversal_filter(this, e3); r2 !== o.FilterResult.Reject && e3._lastChild; )
                  e3 = e3._lastChild, r2 = s.traversal_filter(this, e3);
                if (r2 === o.FilterResult.Accept)
                  return this._current = e3, e3;
                t3 = e3._previousSibling;
              }
              if (e3 === this._root || e3._parent === null)
                return null;
              if (e3 = e3._parent, s.traversal_filter(this, e3) === o.FilterResult.Accept)
                return this._current = e3, e3;
            }
            return null;
          }, t2.prototype.previousSibling = function() {
            return s.treeWalker_traverseSiblings(this, false);
          }, t2.prototype.nextNode = function() {
            for (var e3 = this._current, t3 = o.FilterResult.Accept; ; ) {
              for (; t3 !== o.FilterResult.Reject && e3._firstChild; )
                if (e3 = e3._firstChild, (t3 = s.traversal_filter(this, e3)) === o.FilterResult.Accept)
                  return this._current = e3, e3;
              for (var r2 = null, n2 = e3; n2 !== null; ) {
                if (n2 === this._root)
                  return null;
                if ((r2 = n2._nextSibling) !== null) {
                  e3 = r2;
                  break;
                }
                n2 = n2._parent;
              }
              if ((t3 = s.traversal_filter(this, e3)) === o.FilterResult.Accept)
                return this._current = e3, e3;
            }
          }, t2._create = function(e3, r2) {
            return new t2(e3, r2);
          }, t2;
        }(a.TraverserImpl);
        t.TreeWalkerImpl = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(12), o = function() {
          function e2() {
          }
          return e2.prototype.acceptNode = function(e3) {
            return n.FilterResult.Accept;
          }, e2._create = function() {
            return new e2();
          }, e2.FILTER_ACCEPT = 1, e2.FILTER_REJECT = 2, e2.FILTER_SKIP = 3, e2.SHOW_ALL = 4294967295, e2.SHOW_ELEMENT = 1, e2.SHOW_ATTRIBUTE = 2, e2.SHOW_TEXT = 4, e2.SHOW_CDATA_SECTION = 8, e2.SHOW_ENTITY_REFERENCE = 16, e2.SHOW_ENTITY = 32, e2.SHOW_PROCESSING_INSTRUCTION = 64, e2.SHOW_COMMENT = 128, e2.SHOW_DOCUMENT = 256, e2.SHOW_DOCUMENT_TYPE = 512, e2.SHOW_DOCUMENT_FRAGMENT = 1024, e2.SHOW_NOTATION = 2048, e2;
        }();
        t.NodeFilterImpl = o, i.idl_defineConst(o.prototype, "FILTER_ACCEPT", 1), i.idl_defineConst(o.prototype, "FILTER_REJECT", 2), i.idl_defineConst(o.prototype, "FILTER_SKIP", 3), i.idl_defineConst(o.prototype, "SHOW_ALL", 4294967295), i.idl_defineConst(o.prototype, "SHOW_ELEMENT", 1), i.idl_defineConst(o.prototype, "SHOW_ATTRIBUTE", 2), i.idl_defineConst(o.prototype, "SHOW_TEXT", 4), i.idl_defineConst(o.prototype, "SHOW_CDATA_SECTION", 8), i.idl_defineConst(o.prototype, "SHOW_ENTITY_REFERENCE", 16), i.idl_defineConst(o.prototype, "SHOW_ENTITY", 32), i.idl_defineConst(o.prototype, "SHOW_PROCESSING_INSTRUCTION", 64), i.idl_defineConst(o.prototype, "SHOW_COMMENT", 128), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT", 256), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT_TYPE", 512), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT_FRAGMENT", 1024), i.idl_defineConst(o.prototype, "SHOW_NOTATION", 2048);
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3, t2, r2, n2, i, o, a, s, u) {
            this._type = e3, this._target = t2, this._addedNodes = r2, this._removedNodes = n2, this._previousSibling = i, this._nextSibling = o, this._attributeName = a, this._attributeNamespace = s, this._oldValue = u;
          }
          return Object.defineProperty(e2.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "target", { get: function() {
            return this._target;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "addedNodes", { get: function() {
            return this._addedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "removedNodes", { get: function() {
            return this._removedNodes;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "previousSibling", { get: function() {
            return this._previousSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "nextSibling", { get: function() {
            return this._nextSibling;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "attributeName", { get: function() {
            return this._attributeName;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "attributeNamespace", { get: function() {
            return this._attributeNamespace;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "oldValue", { get: function() {
            return this._oldValue;
          }, enumerable: true, configurable: true }), e2._create = function(t2, r2, n2, i, o, a, s, u, l) {
            return new e2(t2, r2, n2, i, o, a, s, u, l);
          }, e2;
        }();
        t.MutationRecordImpl = n;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(9), a = r(7), s = r(0), u = function() {
          function e2(e3, t2) {
            this._element = e3, this._attribute = t2, this._tokenSet = new Set();
            var r2 = t2._localName, n2 = s.element_getAnAttributeValue(e3, r2), o2 = this;
            this._element._attributeChangeSteps.push(function(e4, t3, r3, n3, i2) {
              t3 === o2._attribute._localName && i2 === null && (n3 ? o2._tokenSet = s.orderedSet_parse(n3) : o2._tokenSet.clear());
            }), i.dom.features.steps && s.dom_runAttributeChangeSteps(e3, r2, n2, n2, null);
          }
          return Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._tokenSet.size;
          }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
            var t2, r2, i2 = 0;
            try {
              for (var o2 = n(this._tokenSet), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                if (i2 === e3)
                  return s2;
                i2++;
              }
            } catch (e4) {
              t2 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return null;
          }, e2.prototype.contains = function(e3) {
            return this._tokenSet.has(e3);
          }, e2.prototype.add = function() {
            for (var e3, t2, r2 = [], i2 = 0; i2 < arguments.length; i2++)
              r2[i2] = arguments[i2];
            try {
              for (var u2 = n(r2), l = u2.next(); !l.done; l = u2.next()) {
                var c = l.value;
                if (c === "")
                  throw new o.SyntaxError("Cannot add an empty token.");
                if (a.codePoint.ASCIIWhiteSpace.test(c))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.add(c);
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                l && !l.done && (t2 = u2.return) && t2.call(u2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            s.tokenList_updateSteps(this);
          }, e2.prototype.remove = function() {
            for (var e3, t2, r2 = [], i2 = 0; i2 < arguments.length; i2++)
              r2[i2] = arguments[i2];
            try {
              for (var u2 = n(r2), l = u2.next(); !l.done; l = u2.next()) {
                var c = l.value;
                if (c === "")
                  throw new o.SyntaxError("Cannot remove an empty token.");
                if (a.codePoint.ASCIIWhiteSpace.test(c))
                  throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                this._tokenSet.delete(c);
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                l && !l.done && (t2 = u2.return) && t2.call(u2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            s.tokenList_updateSteps(this);
          }, e2.prototype.toggle = function(e3, t2) {
            if (t2 === void 0 && (t2 = void 0), e3 === "")
              throw new o.SyntaxError("Cannot toggle an empty token.");
            if (a.codePoint.ASCIIWhiteSpace.test(e3))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return this._tokenSet.has(e3) ? t2 !== void 0 && t2 !== false || (this._tokenSet.delete(e3), s.tokenList_updateSteps(this), false) : (t2 === void 0 || t2 === true) && (this._tokenSet.add(e3), s.tokenList_updateSteps(this), true);
          }, e2.prototype.replace = function(e3, t2) {
            if (e3 === "" || t2 === "")
              throw new o.SyntaxError("Cannot replace an empty token.");
            if (a.codePoint.ASCIIWhiteSpace.test(e3) || a.codePoint.ASCIIWhiteSpace.test(t2))
              throw new o.InvalidCharacterError("Token cannot contain whitespace.");
            return !!this._tokenSet.has(e3) && (a.set.replace(this._tokenSet, e3, t2), s.tokenList_updateSteps(this), true);
          }, e2.prototype.supports = function(e3) {
            return s.tokenList_validationSteps(this, e3);
          }, Object.defineProperty(e2.prototype, "value", { get: function() {
            return s.tokenList_serializeSteps(this);
          }, set: function(e3) {
            s.element_setAnAttributeValue(this._element, this._attribute._localName, e3);
          }, enumerable: true, configurable: true }), e2.prototype[Symbol.iterator] = function() {
            var e3 = this._tokenSet[Symbol.iterator]();
            return { next: function() {
              return e3.next();
            } };
          }, e2._create = function(t2, r2) {
            return new e2(t2, r2);
          }, e2;
        }();
        t.DOMTokenListImpl = u;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(104), a = r(0), s = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3, r2) || this;
            return n2._detail = null, n2._detail = r2 && r2.detail || null, n2;
          }
          return i(t2, e2), Object.defineProperty(t2.prototype, "detail", { get: function() {
            return this._detail;
          }, enumerable: true, configurable: true }), t2.prototype.initCustomEvent = function(e3, t3, r2, n2) {
            t3 === void 0 && (t3 = false), r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = null), this._dispatchFlag || (a.event_initialize(this, e3, t3, r2), this._detail = n2);
          }, t2;
        }(o.EventImpl);
        t.CustomEventImpl = s;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(6), i = r(2), o = r(105), a = r(17);
        t.nodeIterator_traverse = function(e2, t2) {
          for (var r2 = e2._reference, n2 = e2._pointerBeforeReference; ; ) {
            if (t2)
              if (n2)
                n2 = false;
              else {
                var s = a.tree_getFollowingNode(e2._root, r2);
                if (!s)
                  return null;
                r2 = s;
              }
            else if (n2) {
              var u = a.tree_getPrecedingNode(e2.root, r2);
              if (!u)
                return null;
              r2 = u;
            } else
              n2 = true;
            if (o.traversal_filter(e2, r2) === i.FilterResult.Accept)
              break;
          }
          return e2._reference = r2, e2._pointerBeforeReference = n2, r2;
        }, t.nodeIterator_iteratorList = function() {
          return n.dom.window._iteratorList;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(9), i = r(7), o = r(174);
        function a(e2) {
          if (!o.xml_isName(e2))
            throw new n.InvalidCharacterError("Invalid XML name: " + e2);
          if (!o.xml_isQName(e2))
            throw new n.InvalidCharacterError("Invalid XML qualified name: " + e2 + ".");
        }
        t.namespace_validate = a, t.namespace_validateAndExtract = function(e2, t2) {
          e2 || (e2 = null), a(t2);
          var r2 = t2.split(":"), o2 = r2.length === 2 ? r2[0] : null, s = r2.length === 2 ? r2[1] : t2;
          if (o2 && e2 === null)
            throw new n.NamespaceError("Qualified name includes a prefix but the namespace is null.");
          if (o2 === "xml" && e2 !== i.namespace.XML)
            throw new n.NamespaceError('Qualified name includes the "xml" prefix but the namespace is not the XML namespace.');
          if (e2 !== i.namespace.XMLNS && (o2 === "xmlns" || t2 === "xmlns"))
            throw new n.NamespaceError('Qualified name includes the "xmlns" prefix but the namespace is not the XMLNS namespace.');
          if (e2 === i.namespace.XMLNS && o2 !== "xmlns" && t2 !== "xmlns")
            throw new n.NamespaceError('Qualified name does not include the "xmlns" prefix but the namespace is the XMLNS namespace.');
          return [e2, o2, s];
        }, t.namespace_extractQName = function(e2) {
          a(e2);
          var t2 = e2.split(":");
          return [t2.length === 2 ? t2[0] : null, t2.length === 2 ? t2[1] : e2];
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.xml_isName = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2.charCodeAt(t2);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 === 58 || r2 === 95 || r2 >= 192 && r2 <= 214 || r2 >= 216 && r2 <= 246 || r2 >= 248 && r2 <= 767 || r2 >= 880 && r2 <= 893 || r2 >= 895 && r2 <= 8191 || r2 >= 8204 && r2 <= 8205 || r2 >= 8304 && r2 <= 8591 || r2 >= 11264 && r2 <= 12271 || r2 >= 12289 && r2 <= 55295 || r2 >= 63744 && r2 <= 64975 || r2 >= 65008 && r2 <= 65533) && (t2 === 0 || !(r2 === 45 || r2 === 46 || r2 >= 48 && r2 <= 57 || r2 === 183 || r2 >= 768 && r2 <= 879 || r2 >= 8255 && r2 <= 8256))) {
              if (r2 >= 55296 && r2 <= 56319 && t2 < e2.length - 1) {
                var n = e2.charCodeAt(t2 + 1);
                if (n >= 56320 && n <= 57343 && (t2++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 983039))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t.xml_isQName = function(e2) {
          for (var t2 = false, r2 = 0; r2 < e2.length; r2++) {
            var n = e2.charCodeAt(r2);
            if (!(n >= 97 && n <= 122 || n >= 65 && n <= 90 || n === 95 || n >= 192 && n <= 214 || n >= 216 && n <= 246 || n >= 248 && n <= 767 || n >= 880 && n <= 893 || n >= 895 && n <= 8191 || n >= 8204 && n <= 8205 || n >= 8304 && n <= 8591 || n >= 11264 && n <= 12271 || n >= 12289 && n <= 55295 || n >= 63744 && n <= 64975 || n >= 65008 && n <= 65533) && (r2 === 0 || !(n === 45 || n === 46 || n >= 48 && n <= 57 || n === 183 || n >= 768 && n <= 879 || n >= 8255 && n <= 8256))) {
              if (r2 === 0 || n !== 58) {
                if (n >= 55296 && n <= 56319 && r2 < e2.length - 1) {
                  var i = e2.charCodeAt(r2 + 1);
                  if (i >= 56320 && i <= 57343 && (r2++, (n = 1024 * (n - 55296) + i - 56320 + 65536) >= 65536 && n <= 983039))
                    continue;
                }
                return false;
              }
              if (t2)
                return false;
              if (r2 === e2.length - 1)
                return false;
              t2 = true;
            }
          }
          return true;
        }, t.xml_isLegalChar = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2.charCodeAt(t2);
            if (!(r2 === 9 || r2 === 10 || r2 === 13 || r2 >= 32 && r2 <= 55295 || r2 >= 57344 && r2 <= 65533)) {
              if (r2 >= 55296 && r2 <= 56319 && t2 < e2.length - 1) {
                var n = e2.charCodeAt(t2 + 1);
                if (n >= 56320 && n <= 57343 && (t2++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 1114111))
                  continue;
              }
              return false;
            }
          }
          return true;
        }, t.xml_isPubidChar = function(e2) {
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2.charCodeAt(t2);
            if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 >= 39 && r2 <= 59 || r2 === 32 || r2 === 13 || r2 === 10 || r2 >= 35 && r2 <= 37 || r2 === 33 || r2 === 61 || r2 === 63 || r2 === 64 || r2 === 95))
              return false;
          }
          return true;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(17);
        t.boundaryPoint_position = function e2(t2, r2) {
          var o = t2[0], a = t2[1], s = r2[0], u = r2[1];
          if (console.assert(i.tree_rootNode(o) === i.tree_rootNode(s), "Boundary points must share the same root node."), o === s)
            return a === u ? n.BoundaryPosition.Equal : a < u ? n.BoundaryPosition.Before : n.BoundaryPosition.After;
          if (i.tree_isFollowing(s, o)) {
            var l = e2([s, u], [o, a]);
            if (l === n.BoundaryPosition.Before)
              return n.BoundaryPosition.After;
            if (l === n.BoundaryPosition.After)
              return n.BoundaryPosition.Before;
          }
          if (i.tree_isAncestorOf(s, o)) {
            for (var c = s; !i.tree_isChildOf(o, c); )
              c._parent !== null && (c = c._parent);
            if (i.tree_index(c) < a)
              return n.BoundaryPosition.After;
          }
          return n.BoundaryPosition.Before;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(7), s = r(29), u = r(108), l = r(30), c = r(37), h = r(52);
        t.node_stringReplaceAll = function(e2, t2) {
          var r2 = null;
          e2 !== "" && (r2 = s.create_text(t2._nodeDocument, e2)), c.mutation_replaceAll(r2, t2);
        }, t.node_clone = function e2(t2, r2, a2) {
          var u2, p, f, d, m;
          if (r2 === void 0 && (r2 = null), a2 === void 0 && (a2 = false), r2 === null && (r2 = t2._nodeDocument), o.Guard.isElementNode(t2)) {
            m = h.element_createAnElement(r2, t2._localName, t2._namespace, t2._namespacePrefix, t2._is, false);
            try {
              for (var y = n(t2._attributeList), v = y.next(); !v.done; v = y.next()) {
                var _ = e2(v.value, r2);
                h.element_append(_, m);
              }
            } catch (e3) {
              u2 = { error: e3 };
            } finally {
              try {
                v && !v.done && (p = y.return) && p.call(y);
              } finally {
                if (u2)
                  throw u2.error;
              }
            }
          } else if (o.Guard.isDocumentNode(t2)) {
            var g = s.create_document();
            g._encoding = t2._encoding, g._contentType = t2._contentType, g._URL = t2._URL, g._origin = t2._origin, g._type = t2._type, g._mode = t2._mode, m = g;
          } else if (o.Guard.isDocumentTypeNode(t2)) {
            m = s.create_documentType(r2, t2._name, t2._publicId, t2._systemId);
          } else if (o.Guard.isAttrNode(t2)) {
            var b = s.create_attr(r2, t2.localName);
            b._namespace = t2._namespace, b._namespacePrefix = t2._namespacePrefix, b._value = t2._value, m = b;
          } else
            m = o.Guard.isExclusiveTextNode(t2) ? s.create_text(r2, t2._data) : o.Guard.isCDATASectionNode(t2) ? s.create_cdataSection(r2, t2._data) : o.Guard.isCommentNode(t2) ? s.create_comment(r2, t2._data) : o.Guard.isProcessingInstructionNode(t2) ? s.create_processingInstruction(r2, t2._target, t2._data) : o.Guard.isDocumentFragmentNode(t2) ? s.create_documentFragment(r2) : Object.create(t2);
          if (o.Guard.isDocumentNode(m) ? (m._nodeDocument = m, r2 = m) : m._nodeDocument = r2, i.dom.features.steps && l.dom_runCloningSteps(m, t2, r2, a2), a2)
            try {
              for (var x = n(t2._children), w = x.next(); !w.done; w = x.next()) {
                var E = e2(w.value, r2, true);
                c.mutation_append(E, m);
              }
            } catch (e3) {
              f = { error: e3 };
            } finally {
              try {
                w && !w.done && (d = x.return) && d.call(x);
              } finally {
                if (f)
                  throw f.error;
              }
            }
          return m;
        }, t.node_equals = function e2(t2, r2) {
          var i2, a2, s2, u2;
          if (t2._nodeType !== r2._nodeType)
            return false;
          if (o.Guard.isDocumentTypeNode(t2) && o.Guard.isDocumentTypeNode(r2)) {
            if (t2._name !== r2._name || t2._publicId !== r2._publicId || t2._systemId !== r2._systemId)
              return false;
          } else if (o.Guard.isElementNode(t2) && o.Guard.isElementNode(r2)) {
            if (t2._namespace !== r2._namespace || t2._namespacePrefix !== r2._namespacePrefix || t2._localName !== r2._localName || t2._attributeList.length !== r2._attributeList.length)
              return false;
          } else if (o.Guard.isAttrNode(t2) && o.Guard.isAttrNode(r2)) {
            if (t2._namespace !== r2._namespace || t2._localName !== r2._localName || t2._value !== r2._value)
              return false;
          } else if (o.Guard.isProcessingInstructionNode(t2) && o.Guard.isProcessingInstructionNode(r2)) {
            if (t2._target !== r2._target || t2._data !== r2._data)
              return false;
          } else if (o.Guard.isCharacterDataNode(t2) && o.Guard.isCharacterDataNode(r2) && t2._data !== r2._data)
            return false;
          if (o.Guard.isElementNode(t2) && o.Guard.isElementNode(r2)) {
            var l2 = {};
            try {
              for (var c2 = n(t2._attributeList), h2 = c2.next(); !h2.done; h2 = c2.next()) {
                l2[(d = h2.value)._localName] = d;
              }
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                h2 && !h2.done && (a2 = c2.return) && a2.call(c2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            try {
              for (var p = n(r2._attributeList), f = p.next(); !f.done; f = p.next()) {
                var d, m = f.value;
                if (!(d = l2[m._localName]))
                  return false;
                if (!e2(d, m))
                  return false;
              }
            } catch (e3) {
              s2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (u2 = p.return) && u2.call(p);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }
          if (t2._children.size !== r2._children.size)
            return false;
          for (var y = t2._children[Symbol.iterator](), v = r2._children[Symbol.iterator](), _ = y.next(), g = v.next(); !_.done && !g.done; ) {
            if (!e2(_.value, g.value))
              return false;
            _ = y.next(), g = v.next();
          }
          return true;
        }, t.node_listOfElementsWithQualifiedName = function(e2, t2) {
          return e2 === "*" ? s.create_htmlCollection(t2) : t2._nodeDocument._type === "html" ? s.create_htmlCollection(t2, function(t3) {
            return t3._namespace === a.namespace.HTML && t3._qualifiedName === e2.toLowerCase() || t3._namespace !== a.namespace.HTML && t3._qualifiedName === e2;
          }) : s.create_htmlCollection(t2, function(t3) {
            return t3._qualifiedName === e2;
          });
        }, t.node_listOfElementsWithNamespace = function(e2, t2, r2) {
          return e2 === "" && (e2 = null), e2 === "*" && t2 === "*" ? s.create_htmlCollection(r2) : e2 === "*" ? s.create_htmlCollection(r2, function(e3) {
            return e3._localName === t2;
          }) : t2 === "*" ? s.create_htmlCollection(r2, function(t3) {
            return t3._namespace === e2;
          }) : s.create_htmlCollection(r2, function(r3) {
            return r3._localName === t2 && r3._namespace === e2;
          });
        }, t.node_listOfElementsWithClassNames = function(e2, t2) {
          var r2 = u.orderedSet_parse(e2);
          if (r2.size === 0)
            return s.create_htmlCollection(t2, function() {
              return false;
            });
          var n2 = t2._nodeDocument._mode !== "quirks";
          return s.create_htmlCollection(t2, function(e3) {
            var t3 = e3.classList;
            return u.orderedSet_contains(t3._tokenSet, r2, n2);
          });
        }, t.node_locateANamespacePrefix = function e2(t2, r2) {
          if (t2._namespace === r2 && t2._namespacePrefix !== null)
            return t2._namespacePrefix;
          for (var n2 = 0; n2 < t2._attributeList.length; n2++) {
            var i2 = t2._attributeList[n2];
            if (i2._namespacePrefix === "xmlns" && i2._value === r2)
              return i2._localName;
          }
          return t2._parent && o.Guard.isElementNode(t2._parent) ? e2(t2._parent, r2) : null;
        }, t.node_locateANamespace = function e2(t2, r2) {
          if (o.Guard.isElementNode(t2)) {
            if (t2._namespace !== null && t2._namespacePrefix === r2)
              return t2._namespace;
            for (var n2 = 0; n2 < t2._attributeList.length; n2++) {
              var i2 = t2._attributeList[n2];
              if (i2._namespace === a.namespace.XMLNS && i2._namespacePrefix === "xmlns" && i2._localName === r2)
                return i2._value || null;
              if (r2 === null && i2._namespace === a.namespace.XMLNS && i2._namespacePrefix === null && i2._localName === "xmlns")
                return i2._value || null;
            }
            return t2.parentElement === null ? null : e2(t2.parentElement, r2);
          }
          return o.Guard.isDocumentNode(t2) ? t2.documentElement === null ? null : e2(t2.documentElement, r2) : o.Guard.isDocumentTypeNode(t2) || o.Guard.isDocumentFragmentNode(t2) ? null : o.Guard.isAttrNode(t2) ? t2._element === null ? null : e2(t2._element, r2) : t2._parent && o.Guard.isElementNode(t2._parent) ? e2(t2._parent, r2) : null;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(9), s = r(29), u = r(17), l = r(107), c = r(37);
        t.text_contiguousTextNodes = function(e2, t2) {
          var r2;
          return t2 === void 0 && (t2 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e2; r3 && o.Guard.isTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t2 && r3 === e2 && (r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t.text_contiguousExclusiveTextNodes = function(e2, t2) {
          var r2;
          return t2 === void 0 && (t2 = false), (r2 = {})[Symbol.iterator] = function() {
            for (var r3 = e2; r3 && o.Guard.isExclusiveTextNode(r3._previousSibling); )
              r3 = r3._previousSibling;
            return { next: function() {
              if (r3 && !t2 && r3 === e2 && (r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null), r3 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r3 };
              return r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
            } };
          }, r2;
        }, t.text_descendantTextContent = function(e2) {
          for (var t2 = "", r2 = u.tree_getFirstDescendantNode(e2, false, false, function(e3) {
            return o.Guard.isTextNode(e3);
          }); r2 !== null; )
            t2 += r2._data, r2 = u.tree_getNextDescendantNode(e2, r2, false, false, function(e3) {
              return o.Guard.isTextNode(e3);
            });
          return t2;
        }, t.text_split = function(e2, t2) {
          var r2, o2, h = e2._data.length;
          if (t2 > h)
            throw new a.IndexSizeError();
          var p = h - t2, f = l.characterData_substringData(e2, t2, p), d = s.create_text(e2._nodeDocument, f), m = e2._parent;
          if (m !== null) {
            c.mutation_insert(d, m, e2._nextSibling);
            try {
              for (var y = n(i.dom.rangeList), v = y.next(); !v.done; v = y.next()) {
                var _ = v.value;
                _._start[0] === e2 && _._start[1] > t2 && (_._start[0] = d, _._start[1] -= t2), _._end[0] === e2 && _._end[1] > t2 && (_._end[0] = d, _._end[1] -= t2);
                var g = u.tree_index(e2);
                _._start[0] === m && _._start[1] === g + 1 && _._start[1]++, _._end[0] === m && _._end[1] === g + 1 && _._end[1]++;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                v && !v.done && (o2 = y.return) && o2.call(y);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return l.characterData_replaceData(e2, t2, p, ""), d;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(41), o = r(24), a = r(48), s = [].join, u = i != Object, l = a("join", ",");
        n({ target: "Array", proto: true, forced: u || !l }, { join: function(e2) {
          return s.call(o(this), e2 === void 0 ? "," : e2);
        } });
      }, function(e, t, r) {
        var n = r(4), i = r(83), o = String.fromCharCode, a = String.fromCodePoint;
        n({ target: "String", stat: true, forced: !!a && a.length != 1 }, { fromCodePoint: function(e2) {
          for (var t2, r2 = [], n2 = arguments.length, a2 = 0; n2 > a2; ) {
            if (t2 = +arguments[a2++], i(t2, 1114111) !== t2)
              throw RangeError(t2 + " is not a valid code point");
            r2.push(t2 < 65536 ? o(t2) : o(55296 + ((t2 -= 65536) >> 10), t2 % 1024 + 56320));
          }
          return r2.join("");
        } });
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(111), o = function() {
          function e2(e3, t2) {
            this._options = { skipWhitespaceOnlyText: false }, this.err = { line: -1, col: -1, index: -1, str: "" }, this._str = e3, this._index = 0, this._length = e3.length, t2 && (this._options.skipWhitespaceOnlyText = t2.skipWhitespaceOnlyText || false);
          }
          return e2.prototype.nextToken = function() {
            if (this.eof())
              return { type: i.TokenType.EOF };
            var t2 = this.skipIfStartsWith("<") ? this.openBracket() : this.text();
            return this._options.skipWhitespaceOnlyText && t2.type === i.TokenType.Text && e2.isWhiteSpaceToken(t2) && (t2 = this.nextToken()), t2;
          }, e2.prototype.openBracket = function() {
            return this.skipIfStartsWith("?") ? this.skipIfStartsWith("xml") ? e2.isSpace(this._str[this._index]) ? this.declaration() : (this.seek(-3), this.pi()) : this.pi() : this.skipIfStartsWith("!") ? this.skipIfStartsWith("--") ? this.comment() : this.skipIfStartsWith("[CDATA[") ? this.cdata() : this.skipIfStartsWith("DOCTYPE") ? this.doctype() : void this.throwError("Invalid '!' in opening tag.") : this.skipIfStartsWith("/") ? this.closeTag() : this.openTag();
          }, e2.prototype.declaration = function() {
            for (var e3 = "", t2 = "", r2 = ""; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith("?>"))
                return { type: i.TokenType.Declaration, version: e3, encoding: t2, standalone: r2 };
              var o2 = n(this.attribute(), 2), a = o2[0], s = o2[1];
              a === "version" ? e3 = s : a === "encoding" ? t2 = s : a === "standalone" ? r2 = s : this.throwError("Invalid attribute name: " + a);
            }
            this.throwError("Missing declaration end symbol `?>`");
          }, e2.prototype.doctype = function() {
            var e3 = "", t2 = "";
            this.skipSpace();
            var r2 = this.takeUntil2("[", ">", true);
            return this.skipSpace(), this.skipIfStartsWith("PUBLIC") ? (e3 = this.quotedString(), t2 = this.quotedString()) : this.skipIfStartsWith("SYSTEM") && (t2 = this.quotedString()), this.skipSpace(), this.skipIfStartsWith("[") && (this.skipUntil("]"), this.skipIfStartsWith("]") || this.throwError("Missing end bracket of DTD internal subset")), this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing doctype end symbol `>`"), { type: i.TokenType.DocType, name: r2, pubId: e3, sysId: t2 };
          }, e2.prototype.pi = function() {
            var e3 = this.takeUntilStartsWith("?>", true);
            if (this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.skipSpace(), this.skipIfStartsWith("?>"))
              return { type: i.TokenType.PI, target: e3, data: "" };
            var t2 = this.takeUntilStartsWith("?>");
            return this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.seek(2), { type: i.TokenType.PI, target: e3, data: t2 };
          }, e2.prototype.text = function() {
            var e3 = this.takeUntil("<");
            return { type: i.TokenType.Text, data: e3 };
          }, e2.prototype.comment = function() {
            var e3 = this.takeUntilStartsWith("-->");
            return this.eof() && this.throwError("Missing comment end symbol `-->`"), this.seek(3), { type: i.TokenType.Comment, data: e3 };
          }, e2.prototype.cdata = function() {
            var e3 = this.takeUntilStartsWith("]]>");
            return this.eof() && this.throwError("Missing CDATA end symbol `]>`"), this.seek(3), { type: i.TokenType.CDATA, data: e3 };
          }, e2.prototype.openTag = function() {
            this.skipSpace();
            var e3 = this.takeUntil2(">", "/", true);
            if (this.skipSpace(), this.skipIfStartsWith(">"))
              return { type: i.TokenType.Element, name: e3, attributes: [], selfClosing: false };
            if (this.skipIfStartsWith("/>"))
              return { type: i.TokenType.Element, name: e3, attributes: [], selfClosing: true };
            for (var t2 = []; !this.eof(); ) {
              if (this.skipSpace(), this.skipIfStartsWith(">"))
                return { type: i.TokenType.Element, name: e3, attributes: t2, selfClosing: false };
              if (this.skipIfStartsWith("/>"))
                return { type: i.TokenType.Element, name: e3, attributes: t2, selfClosing: true };
              var r2 = this.attribute();
              t2.push(r2);
            }
            this.throwError("Missing opening element tag end symbol `>`");
          }, e2.prototype.closeTag = function() {
            this.skipSpace();
            var e3 = this.takeUntil(">", true);
            return this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing closing element tag end symbol `>`"), { type: i.TokenType.ClosingTag, name: e3 };
          }, e2.prototype.attribute = function() {
            this.skipSpace();
            var e3 = this.takeUntil("=", true);
            return this.skipSpace(), this.skipIfStartsWith("=") || this.throwError("Missing equals sign before attribute value"), [e3, this.quotedString()];
          }, e2.prototype.quotedString = function() {
            this.skipSpace();
            var t2 = this.take(1);
            e2.isQuote(t2) || this.throwError("Missing start quote character before quoted value");
            var r2 = this.takeUntil(t2);
            return this.skipIfStartsWith(t2) || this.throwError("Missing end quote character after quoted value"), r2;
          }, e2.prototype.eof = function() {
            return this._index >= this._length;
          }, e2.prototype.skipIfStartsWith = function(e3) {
            var t2 = e3.length;
            if (t2 === 1)
              return this._str[this._index] === e3 && (this._index++, true);
            for (var r2 = 0; r2 < t2; r2++)
              if (this._str[this._index + r2] !== e3[r2])
                return false;
            return this._index += t2, true;
          }, e2.prototype.seek = function(e3) {
            this._index += e3, this._index < 0 && (this._index = 0), this._index > this._length && (this._index = this._length);
          }, e2.prototype.skipSpace = function() {
            for (; !this.eof() && e2.isSpace(this._str[this._index]); )
              this._index++;
          }, e2.prototype.take = function(e3) {
            if (e3 === 1)
              return this._str[this._index++];
            var t2 = this._index;
            return this.seek(e3), this._str.slice(t2, this._index);
          }, e2.prototype.takeUntil = function(t2, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index; this._index < this._length; ) {
              var i2 = this._str[this._index];
              if (i2 === t2 || r2 && e2.isSpace(i2))
                break;
              this._index++;
            }
            return this._str.slice(n2, this._index);
          }, e2.prototype.takeUntil2 = function(t2, r2, n2) {
            n2 === void 0 && (n2 = false);
            for (var i2 = this._index; this._index < this._length; ) {
              var o2 = this._str[this._index];
              if (o2 === t2 || o2 === r2 || n2 && e2.isSpace(o2))
                break;
              this._index++;
            }
            return this._str.slice(i2, this._index);
          }, e2.prototype.takeUntilStartsWith = function(t2, r2) {
            r2 === void 0 && (r2 = false);
            for (var n2 = this._index, i2 = t2.length; this._index < this._length; ) {
              for (var o2 = true, a = 0; a < i2; a++) {
                var s = this._str[this._index + a], u = t2[a];
                if (r2 && e2.isSpace(s))
                  return this._str.slice(n2, this._index);
                if (s !== u) {
                  this._index++, o2 = false;
                  break;
                }
              }
              if (o2)
                return this._str.slice(n2, this._index);
            }
            return this._index = this._length, this._str.slice(n2);
          }, e2.prototype.skipUntil = function(e3) {
            for (; this._index < this._length; ) {
              if (this._str[this._index] === e3)
                break;
              this._index++;
            }
          }, e2.isWhiteSpaceToken = function(e3) {
            for (var t2 = e3.data, r2 = 0; r2 < t2.length; r2++) {
              var n2 = t2[r2];
              if (n2 !== " " && n2 !== "\n" && n2 !== "\r" && n2 !== "	" && n2 !== "\f")
                return false;
            }
            return true;
          }, e2.isSpace = function(e3) {
            return e3 === " " || e3 === "\n" || e3 === "\r" || e3 === "	";
          }, e2.isQuote = function(e3) {
            return e3 === '"' || e3 === "'";
          }, e2.prototype.throwError = function(e3) {
            for (var t2 = /\r\n|\r|\n/g, r2 = null, n2 = 0, i2 = 0, o2 = this._str.length; (r2 = t2.exec(this._str)) !== null && r2 !== null; )
              if (n2++, r2.index < this._index && (i2 = t2.lastIndex), r2.index > this._index) {
                o2 = r2.index;
                break;
              }
            throw this.err = { line: n2, col: this._index - i2, index: this._index, str: this._str.substring(i2, o2) }, new Error(e3 + "\nIndex: " + this.err.index + "\nLn: " + this.err.line + ", Col: " + this.err.col + "\nInput: " + this.err.str);
          }, e2.prototype[Symbol.iterator] = function() {
            return this._index = 0, { next: function() {
              var e3 = this.nextToken();
              return e3.type === i.TokenType.EOF ? { done: true, value: null } : { done: false, value: e3 };
            }.bind(this) };
          }, e2;
        }();
        t.XMLStringLexer = o;
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ include: [r(182)] });
      }, function(e, t, r) {
        "use strict";
        var n = r(39);
        e.exports = new n({ include: [r(113)], implicit: [r(289), r(290), r(291), r(292)] });
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(91), i = r(1), o = r(3), a = r(77), s = r(109);
        function u(e2, t2) {
          var r2 = c(e2 === void 0 || l(e2) ? e2 : n.DefaultBuilderOptions), i2 = l(e2) ? t2 : e2, o2 = s.createDocument();
          h(o2, r2);
          var u2 = new a.XMLBuilderImpl(o2);
          return i2 !== void 0 && u2.ele(i2), u2;
        }
        function l(e2) {
          if (!i.isPlainObject(e2))
            return false;
          for (var t2 in e2)
            if (e2.hasOwnProperty(t2) && !n.XMLBuilderOptionKeys.has(t2))
              return false;
          return true;
        }
        function c(e2) {
          e2 === void 0 && (e2 = {});
          var t2 = i.applyDefaults(e2, n.DefaultBuilderOptions);
          if (t2.convert.att.length === 0 || t2.convert.ins.length === 0 || t2.convert.text.length === 0 || t2.convert.cdata.length === 0 || t2.convert.comment.length === 0)
            throw new Error("JS object converter strings cannot be zero length.");
          return t2;
        }
        function h(e2, t2, r2) {
          var n2 = e2;
          n2._xmlBuilderOptions = t2, n2._isFragment = r2;
        }
        t.builder = function(e2, t2) {
          var r2 = c(l(e2) ? e2 : n.DefaultBuilderOptions), s2 = o.Guard.isNode(e2) || i.isArray(e2) ? e2 : t2;
          if (s2 === void 0)
            throw new Error("Invalid arguments.");
          if (i.isArray(s2)) {
            for (var u2 = [], h2 = 0; h2 < s2.length; h2++) {
              var p = new a.XMLBuilderImpl(s2[h2]);
              p.set(r2), u2.push(p);
            }
            return u2;
          }
          var f = new a.XMLBuilderImpl(s2);
          return f.set(r2), f;
        }, t.create = u, t.fragment = function(e2, t2) {
          var r2 = c(e2 === void 0 || l(e2) ? e2 : n.DefaultBuilderOptions), i2 = l(e2) ? t2 : e2, o2 = s.createDocument();
          h(o2, r2, true);
          var u2 = new a.XMLBuilderImpl(o2.createDocumentFragment());
          return i2 !== void 0 && u2.ele(i2), u2;
        }, t.convert = function(e2, t2, r2) {
          var i2, o2, a2;
          return l(e2) && t2 !== void 0 ? (i2 = e2, o2 = t2, a2 = r2) : (i2 = n.DefaultBuilderOptions, o2 = e2, a2 = t2 || void 0), u(i2, o2).end(a2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(77);
        t.builder = n.builder, t.create = n.create, t.fragment = n.fragment, t.convert = n.convert, t.createCB = n.createCB, t.fragmentCB = n.fragmentCB;
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(191), r(192), r(194), r(64), r(19), r(198), r(199), r(89), r(201), r(65), r(20), r(66), r(22), r(23);
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(91), a = r(1), s = r(217), u = r(2), l = r(3), c = r(0), h = r(109), p = r(7), f = r(276), d = function() {
          function e2(e3) {
            this._domNode = e3;
          }
          return Object.defineProperty(e2.prototype, "node", { get: function() {
            return this._domNode;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "options", { get: function() {
            return this._options;
          }, enumerable: true, configurable: true }), e2.prototype.set = function(e3) {
            return this._options = a.applyDefaults(a.applyDefaults(this._options, e3, true), o.DefaultBuilderOptions), this;
          }, e2.prototype.ele = function(t2, r2, i2) {
            var o2, s2, u2, l2, p2, d2;
            if (a.isObject(t2))
              return new f.ObjectReader(this._options).parse(this, t2);
            if (t2 !== null && /^\s*</.test(t2))
              return new f.XMLReader(this._options).parse(this, t2);
            if (t2 !== null && /^\s*[\{\[]/.test(t2))
              return new f.JSONReader(this._options).parse(this, t2);
            if (t2 !== null && /^(\s*|(#.*)|(%.*))*---/.test(t2))
              return new f.YAMLReader(this._options).parse(this, t2);
            if ((t2 === null || a.isString(t2)) && a.isString(r2))
              l2 = (o2 = n([t2, r2, i2], 3))[0], p2 = o2[1], d2 = o2[2];
            else {
              if (t2 === null)
                throw new Error("Element name cannot be null. " + this._debugInfo());
              l2 = (s2 = n([void 0, t2, a.isObject(r2) ? r2 : void 0], 3))[0], p2 = s2[1], d2 = s2[2];
            }
            if (d2 && (d2 = a.getValue(d2)), l2 = (u2 = n(this._extractNamespace(h.sanitizeInput(l2, this._options.invalidCharReplacement), h.sanitizeInput(p2, this._options.invalidCharReplacement), true), 2))[0], p2 = u2[1], l2 === void 0) {
              var m = n(c.namespace_extractQName(p2), 1)[0];
              l2 = this.node.lookupNamespaceURI(m);
            }
            var y = l2 != null ? this._doc.createElementNS(l2, p2) : this._doc.createElement(p2);
            this.node.appendChild(y);
            var v = new e2(y), _ = this._doc.doctype;
            if (y === this._doc.documentElement && _ !== null) {
              var g = this._doc.implementation.createDocumentType(this._doc.documentElement.tagName, _.publicId, _.systemId);
              this._doc.replaceChild(g, _);
            }
            return d2 && !a.isEmpty(d2) && v.att(d2), v;
          }, e2.prototype.remove = function() {
            var e3 = this.up();
            return e3.node.removeChild(this.node), e3;
          }, e2.prototype.att = function(e3, t2, r2) {
            var i2, o2, s2, u2, f2, d2, m = this;
            if (a.isMap(e3) || a.isObject(e3))
              return a.forEachObject(e3, function(e4, t3) {
                return m.att(e4, t3);
              }, this), this;
            if (e3 != null && (e3 = a.getValue(e3 + "")), t2 != null && (t2 = a.getValue(t2 + "")), r2 != null && (r2 = a.getValue(r2 + "")), e3 !== null && !a.isString(e3) || !a.isString(t2) || r2 !== null && !a.isString(r2)) {
              if (!a.isString(e3) || t2 != null && !a.isString(t2))
                throw new Error("Attribute name and value not specified. " + this._debugInfo());
              u2 = (o2 = n([void 0, e3, t2], 3))[0], f2 = o2[1], d2 = o2[2];
            } else
              u2 = (i2 = n([e3, t2, r2], 3))[0], f2 = i2[1], d2 = i2[2];
            if (this._options.keepNullAttributes && d2 == null)
              d2 = "";
            else if (d2 == null)
              return this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be assigned to an element node.");
            var y = this.node;
            u2 = (s2 = n(this._extractNamespace(u2, f2, false), 2))[0], f2 = s2[1], f2 = h.sanitizeInput(f2, this._options.invalidCharReplacement), u2 = h.sanitizeInput(u2, this._options.invalidCharReplacement), d2 = h.sanitizeInput(d2, this._options.invalidCharReplacement);
            var v = n(c.namespace_extractQName(f2), 2), _ = v[0], g = v[1], b = n(c.namespace_extractQName(y.prefix ? y.prefix + ":" + y.localName : y.localName), 1)[0], x = null;
            return _ === "xmlns" ? (u2 = p.namespace.XMLNS, y.namespaceURI === null && b === g && (x = d2)) : _ === null && g === "xmlns" && b === null && (u2 = p.namespace.XMLNS, x = d2), x !== null && (this._updateNamespace(x), y = this.node), u2 !== void 0 ? y.setAttributeNS(u2, f2, d2) : y.setAttribute(f2, d2), this;
          }, e2.prototype.removeAtt = function(e3, t2) {
            var r2, n2, i2 = this;
            if (!l.Guard.isElementNode(this.node))
              throw new Error("An attribute can only be removed from an element node.");
            if (e3 = a.getValue(e3), t2 !== void 0 && (t2 = a.getValue(t2)), e3 !== null && t2 === void 0)
              n2 = e3;
            else {
              if (e3 !== null && !a.isString(e3) || t2 === void 0)
                throw new Error("Attribute namespace must be a string. " + this._debugInfo());
              r2 = e3, n2 = t2;
            }
            return a.isArray(n2) || a.isSet(n2) ? a.forEachArray(n2, function(e4) {
              return r2 === void 0 ? i2.removeAtt(e4) : i2.removeAtt(r2, e4);
            }, this) : r2 !== void 0 ? (n2 = h.sanitizeInput(n2, this._options.invalidCharReplacement), r2 = h.sanitizeInput(r2, this._options.invalidCharReplacement), this.node.removeAttributeNS(r2, n2)) : (n2 = h.sanitizeInput(n2, this._options.invalidCharReplacement), this.node.removeAttribute(n2)), this;
          }, e2.prototype.txt = function(e3) {
            if (e3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e3 = "";
            }
            var t2 = this._doc.createTextNode(h.sanitizeInput(e3, this._options.invalidCharReplacement));
            return this.node.appendChild(t2), this;
          }, e2.prototype.com = function(e3) {
            if (e3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e3 = "";
            }
            var t2 = this._doc.createComment(h.sanitizeInput(e3, this._options.invalidCharReplacement));
            return this.node.appendChild(t2), this;
          }, e2.prototype.dat = function(e3) {
            if (e3 == null) {
              if (!this._options.keepNullNodes)
                return this;
              e3 = "";
            }
            var t2 = this._doc.createCDATASection(h.sanitizeInput(e3, this._options.invalidCharReplacement));
            return this.node.appendChild(t2), this;
          }, e2.prototype.ins = function(e3, t2) {
            var r2 = this;
            if (t2 === void 0 && (t2 = ""), t2 == null) {
              if (!this._options.keepNullNodes)
                return this;
              t2 = "";
            }
            if (a.isArray(e3) || a.isSet(e3))
              a.forEachArray(e3, function(e4) {
                var t3 = (e4 += "").indexOf(" "), n3 = t3 === -1 ? e4 : e4.substr(0, t3), i2 = t3 === -1 ? "" : e4.substr(t3 + 1);
                r2.ins(n3, i2);
              }, this);
            else if (a.isMap(e3) || a.isObject(e3))
              a.forEachObject(e3, function(e4, t3) {
                return r2.ins(e4, t3);
              }, this);
            else {
              var n2 = this._doc.createProcessingInstruction(h.sanitizeInput(e3, this._options.invalidCharReplacement), h.sanitizeInput(t2, this._options.invalidCharReplacement));
              this.node.appendChild(n2);
            }
            return this;
          }, e2.prototype.dec = function(e3) {
            return this._options.version = e3.version || "1.0", this._options.encoding = e3.encoding, this._options.standalone = e3.standalone, this;
          }, e2.prototype.dtd = function(e3) {
            var t2 = h.sanitizeInput(e3 && e3.name || (this._doc.documentElement ? this._doc.documentElement.tagName : "ROOT"), this._options.invalidCharReplacement), r2 = h.sanitizeInput(e3 && e3.pubID || "", this._options.invalidCharReplacement), n2 = h.sanitizeInput(e3 && e3.sysID || "", this._options.invalidCharReplacement);
            if (this._doc.documentElement !== null && t2 !== this._doc.documentElement.tagName)
              throw new Error("DocType name does not match document element name.");
            var i2 = this._doc.implementation.createDocumentType(t2, r2, n2);
            return this._doc.doctype !== null ? this._doc.replaceChild(i2, this._doc.doctype) : this._doc.insertBefore(i2, this._doc.documentElement), this;
          }, e2.prototype.import = function(t2) {
            var r2, o2, a2 = this._domNode, s2 = this._doc, u2 = t2.node;
            if (l.Guard.isDocumentNode(u2)) {
              var h2 = u2.documentElement;
              if (h2 === null)
                throw new Error("Imported document has no document element node. " + this._debugInfo());
              var p2 = s2.importNode(h2, true);
              a2.appendChild(p2);
              var f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
              new e2(p2)._updateNamespace(d2);
            } else if (l.Guard.isDocumentFragmentNode(u2))
              try {
                for (var m = i(u2.childNodes), y = m.next(); !y.done; y = m.next()) {
                  var v = y.value;
                  p2 = s2.importNode(v, true);
                  if (a2.appendChild(p2), l.Guard.isElementNode(p2)) {
                    f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
                    new e2(p2)._updateNamespace(d2);
                  }
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  y && !y.done && (o2 = m.return) && o2.call(m);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            else {
              p2 = s2.importNode(u2, true);
              if (a2.appendChild(p2), l.Guard.isElementNode(p2)) {
                f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
                new e2(p2)._updateNamespace(d2);
              }
            }
            return this;
          }, e2.prototype.doc = function() {
            if (this._doc._isFragment) {
              for (var t2 = this.node; t2 && t2.nodeType !== u.NodeType.DocumentFragment; )
                t2 = t2.parentNode;
              if (t2 === null)
                throw new Error("Node has no parent node while searching for document fragment ancestor. " + this._debugInfo());
              return new e2(t2);
            }
            return new e2(this._doc);
          }, e2.prototype.root = function() {
            var t2 = this._doc.documentElement;
            if (!t2)
              throw new Error("Document root element is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.up = function() {
            var t2 = this._domNode.parentNode;
            if (!t2)
              throw new Error("Parent node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.prev = function() {
            var t2 = this._domNode.previousSibling;
            if (!t2)
              throw new Error("Previous sibling node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.next = function() {
            var t2 = this._domNode.nextSibling;
            if (!t2)
              throw new Error("Next sibling node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.first = function() {
            var t2 = this._domNode.firstChild;
            if (!t2)
              throw new Error("First child node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.last = function() {
            var t2 = this._domNode.lastChild;
            if (!t2)
              throw new Error("Last child node is null. " + this._debugInfo());
            return new e2(t2);
          }, e2.prototype.each = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
              t2.call(i2, new e2(o2[0]), o2[1], o2[2]), o2 = a2;
            }
            return this;
          }, e2.prototype.map = function(e3, t2, r2, n2) {
            t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false);
            var i2 = [];
            return this.each(function(t3, r3, o2) {
              return i2.push(e3.call(n2, t3, r3, o2));
            }, t2, r2), i2;
          }, e2.prototype.reduce = function(e3, t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            var o2 = t2;
            return this.each(function(t3, r3, n3) {
              return o2 = e3.call(i2, o2, t3, r3, n3);
            }, r2, n2), o2;
          }, e2.prototype.find = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = new e2(o2[0]);
              if (t2.call(i2, a2, o2[1], o2[2]))
                return a2;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
          }, e2.prototype.filter = function(e3, t2, r2, n2) {
            t2 === void 0 && (t2 = false), r2 === void 0 && (r2 = false);
            var i2 = [];
            return this.each(function(t3, r3, o2) {
              e3.call(n2, t3, r3, o2) && i2.push(t3);
            }, t2, r2), i2;
          }, e2.prototype.every = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = new e2(o2[0]);
              if (!t2.call(i2, a2, o2[1], o2[2]))
                return false;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return true;
          }, e2.prototype.some = function(t2, r2, n2, i2) {
            r2 === void 0 && (r2 = false), n2 === void 0 && (n2 = false);
            for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
              var a2 = new e2(o2[0]);
              if (t2.call(i2, a2, o2[1], o2[2]))
                return true;
              o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
            }
            return false;
          }, e2.prototype.toArray = function(e3, t2) {
            e3 === void 0 && (e3 = false), t2 === void 0 && (t2 = false);
            var r2 = [];
            return this.each(function(e4) {
              return r2.push(e4);
            }, e3, t2), r2;
          }, e2.prototype.toString = function(e3) {
            return (e3 = e3 || {}).format === void 0 && (e3.format = "xml"), this._serialize(e3);
          }, e2.prototype.toObject = function(e3) {
            return (e3 = e3 || {}).format === void 0 && (e3.format = "object"), this._serialize(e3);
          }, e2.prototype.end = function(e3) {
            return (e3 = e3 || {}).format === void 0 && (e3.format = "xml"), this.doc()._serialize(e3);
          }, e2.prototype._getFirstDescendantNode = function(e3, t2, r2) {
            return t2 ? [this._domNode, 0, 0] : r2 ? this._getNextDescendantNode(e3, e3, r2, 0, 0) : [this._domNode.firstChild, 0, 1];
          }, e2.prototype._getNextDescendantNode = function(e3, t2, r2, n2, i2) {
            if (!r2)
              return e3 === t2 ? [t2.firstChild, 0, i2 + 1] : [t2.nextSibling, n2 + 1, i2];
            if (t2.firstChild)
              return [t2.firstChild, 0, i2 + 1];
            if (t2 === e3)
              return [null, -1, -1];
            if (t2.nextSibling)
              return [t2.nextSibling, n2 + 1, i2];
            for (var o2 = t2.parentNode; o2 && o2 !== e3; ) {
              if (o2.nextSibling)
                return [o2.nextSibling, c.tree_index(o2.nextSibling), i2 - 1];
              o2 = o2.parentNode, i2--;
            }
            return [null, -1, -1];
          }, e2.prototype._serialize = function(e3) {
            if (e3.format === "xml")
              return new s.XMLWriter(this._options, e3).serialize(this.node);
            if (e3.format === "map")
              return new s.MapWriter(this._options, e3).serialize(this.node);
            if (e3.format === "object")
              return new s.ObjectWriter(this._options, e3).serialize(this.node);
            if (e3.format === "json")
              return new s.JSONWriter(this._options, e3).serialize(this.node);
            if (e3.format === "yaml")
              return new s.YAMLWriter(this._options, e3).serialize(this.node);
            throw new Error("Invalid writer format: " + e3.format + ". " + this._debugInfo());
          }, e2.prototype._extractNamespace = function(e3, t2, r2) {
            var n2 = t2.indexOf("@");
            if (n2 > 0 && (e3 === void 0 && (e3 = t2.slice(n2 + 1)), t2 = t2.slice(0, n2)), e3 === void 0)
              e3 = r2 ? this._options.defaultNamespace.ele : this._options.defaultNamespace.att;
            else if (e3 !== null && e3[0] === "@") {
              var i2 = e3.slice(1);
              if ((e3 = this._options.namespaceAlias[i2]) === void 0)
                throw new Error("Namespace alias `" + i2 + "` is not defined. " + this._debugInfo());
            }
            return [e3, t2];
          }, e2.prototype._updateNamespace = function(t2) {
            var r2, o2, a2, s2, u2 = this._domNode;
            if (l.Guard.isElementNode(u2) && t2 !== null && u2.namespaceURI !== t2) {
              var h2 = n(c.namespace_extractQName(u2.prefix ? u2.prefix + ":" + u2.localName : u2.localName), 2), p2 = h2[0], f2 = h2[1], d2 = c.create_element(this._doc, f2, t2, p2);
              try {
                for (var m = i(u2.attributes), y = m.next(); !y.done; y = m.next()) {
                  var v = y.value, _ = v.prefix ? v.prefix + ":" + v.localName : v.localName, g = n(c.namespace_extractQName(_), 1)[0], b = v.namespaceURI;
                  b === null && g !== null && (b = u2.lookupNamespaceURI(g)), b === null ? d2.setAttribute(_, v.value) : d2.setAttributeNS(b, _, v.value);
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  y && !y.done && (o2 = m.return) && o2.call(m);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              var x = u2.parentNode;
              if (x === null)
                throw new Error("Parent node is null." + this._debugInfo());
              x.replaceChild(d2, u2), this._domNode = d2;
              try {
                for (var w = i(u2.childNodes), E = w.next(); !E.done; E = w.next()) {
                  var D = E.value.cloneNode(true);
                  if (d2.appendChild(D), l.Guard.isElementNode(D)) {
                    var S = n(c.namespace_extractQName(D.prefix ? D.prefix + ":" + D.localName : D.localName), 1)[0], C = d2.lookupNamespaceURI(S);
                    new e2(D)._updateNamespace(C);
                  }
                }
              } catch (e3) {
                a2 = { error: e3 };
              } finally {
                try {
                  E && !E.done && (s2 = w.return) && s2.call(w);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
            }
          }, Object.defineProperty(e2.prototype, "_doc", { get: function() {
            var e3 = this.node;
            if (l.Guard.isDocumentNode(e3))
              return e3;
            var t2 = e3.ownerDocument;
            if (!t2)
              throw new Error("Owner document is null. " + this._debugInfo());
            return t2;
          }, enumerable: true, configurable: true }), e2.prototype._debugInfo = function(e3) {
            var t2 = this.node, r2 = t2.parentNode;
            e3 = e3 || t2.nodeName;
            var n2 = r2 ? r2.nodeName : "";
            return n2 ? "node: <" + e3 + ">, parent: <" + n2 + ">" : "node: <" + e3 + ">";
          }, Object.defineProperty(e2.prototype, "_options", { get: function() {
            var e3 = this._doc;
            if (e3._xmlBuilderOptions === void 0)
              throw new Error("Builder options is not set.");
            return e3._xmlBuilderOptions;
          }, set: function(e3) {
            this._doc._xmlBuilderOptions = e3;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.XMLBuilderImpl = d;
      }, function(e, t, r) {
        var n = r(11), i = r(117), o = n.WeakMap;
        e.exports = typeof o == "function" && /native code/.test(i(o));
      }, function(e, t, r) {
        var n = r(46), i = r(82), o = r(85), a = r(18);
        e.exports = n("Reflect", "ownKeys") || function(e2) {
          var t2 = i.f(a(e2)), r2 = o.f;
          return r2 ? t2.concat(r2(e2)) : t2;
        };
      }, function(e, t, r) {
        var n = r(16), i = r(15), o = r(18), a = r(61);
        e.exports = n ? Object.defineProperties : function(e2, t2) {
          o(e2);
          for (var r2, n2 = a(t2), s = n2.length, u = 0; s > u; )
            i.f(e2, r2 = n2[u++], t2[r2]);
          return e2;
        };
      }, function(e, t, r) {
        var n = r(46);
        e.exports = n("document", "documentElement");
      }, function(e, t, r) {
        var n = r(24), i = r(82).f, o = {}.toString, a = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        e.exports.f = function(e2) {
          return a && o.call(e2) == "[object Window]" ? function(e3) {
            try {
              return i(e3);
            } catch (e4) {
              return a.slice();
            }
          }(e2) : i(n(e2));
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).every, o = r(48), a = r(28), s = o("every"), u = a("every");
        n({ target: "Array", proto: true, forced: !s || !u }, { every: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).filter, o = r(63), a = r(28), s = o("filter"), u = a("filter");
        n({ target: "Array", proto: true, forced: !s || !u }, { filter: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        var n = r(46);
        e.exports = n("navigator", "userAgent") || "";
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).find, o = r(130), a = r(28), s = true, u = a("find");
        "find" in [] && Array(1).find(function() {
          s = false;
        }), n({ target: "Array", proto: true, forced: s || !u }, { find: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } }), o("find");
      }, function(e, t, r) {
        "use strict";
        var n = r(131).IteratorPrototype, i = r(60), o = r(40), a = r(62), s = r(49), u = function() {
          return this;
        };
        e.exports = function(e2, t2, r2) {
          var l = t2 + " Iterator";
          return e2.prototype = i(n, { next: o(1, r2) }), a(e2, l, false, true), s[l] = u, e2;
        };
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !n(function() {
          function e2() {
          }
          return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
        });
      }, function(e, t, r) {
        var n = r(13);
        e.exports = function(e2) {
          if (!n(e2) && e2 !== null)
            throw TypeError("Can't set " + String(e2) + " as a prototype");
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).map, o = r(63), a = r(28), s = o("map"), u = a("map");
        n({ target: "Array", proto: true, forced: !s || !u }, { map: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(200).left, o = r(48), a = r(28), s = o("reduce"), u = a("reduce", { 1: 0 });
        n({ target: "Array", proto: true, forced: !s || !u }, { reduce: function(e2) {
          return i(this, e2, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        var n = r(127), i = r(27), o = r(41), a = r(26), s = function(e2) {
          return function(t2, r2, s2, u) {
            n(r2);
            var l = i(t2), c = o(l), h = a(l.length), p = e2 ? h - 1 : 0, f = e2 ? -1 : 1;
            if (s2 < 2)
              for (; ; ) {
                if (p in c) {
                  u = c[p], p += f;
                  break;
                }
                if (p += f, e2 ? p < 0 : h <= p)
                  throw TypeError("Reduce of empty array with no initial value");
              }
            for (; e2 ? p >= 0 : h > p; p += f)
              p in c && (u = r2(u, c[p], p, l));
            return u;
          };
        };
        e.exports = { left: s(false), right: s(true) };
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(36).some, o = r(48), a = r(28), s = o("some"), u = a("some");
        n({ target: "Array", proto: true, forced: !s || !u }, { some: function(e2) {
          return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(90), i = r(135);
        e.exports = n ? {}.toString : function() {
          return "[object " + i(this) + "]";
        };
      }, function(e, t) {
        e.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
      }, function(e, t, r) {
        var n = r(8);
        e.exports = !n(function() {
          return Object.isExtensible(Object.preventExtensions({}));
        });
      }, function(e, t, r) {
        var n = r(5), i = r(49), o = n("iterator"), a = Array.prototype;
        e.exports = function(e2) {
          return e2 !== void 0 && (i.Array === e2 || a[o] === e2);
        };
      }, function(e, t, r) {
        var n = r(135), i = r(49), o = r(5)("iterator");
        e.exports = function(e2) {
          if (e2 != null)
            return e2[o] || e2["@@iterator"] || i[n(e2)];
        };
      }, function(e, t, r) {
        var n = r(18);
        e.exports = function(e2, t2, r2, i) {
          try {
            return i ? t2(n(r2)[0], r2[1]) : t2(r2);
          } catch (t3) {
            var o = e2.return;
            throw o !== void 0 && n(o.call(e2)), t3;
          }
        };
      }, function(e, t, r) {
        var n = r(5)("iterator"), i = false;
        try {
          var o = 0, a = { next: function() {
            return { done: !!o++ };
          }, return: function() {
            i = true;
          } };
          a[n] = function() {
            return this;
          }, Array.from(a, function() {
            throw 2;
          });
        } catch (e2) {
        }
        e.exports = function(e2, t2) {
          if (!t2 && !i)
            return false;
          var r2 = false;
          try {
            var o2 = {};
            o2[n] = function() {
              return { next: function() {
                return { done: r2 = true };
              } };
            }, e2(o2);
          } catch (e3) {
          }
          return r2;
        };
      }, function(e, t, r) {
        var n = r(13), i = r(133);
        e.exports = function(e2, t2, r2) {
          var o, a;
          return i && typeof (o = t2.constructor) == "function" && o !== r2 && n(a = o.prototype) && a !== r2.prototype && i(e2, a), e2;
        };
      }, function(e, t, r) {
        var n = r(25);
        e.exports = function(e2, t2, r2) {
          for (var i in t2)
            n(e2, i, t2[i], r2);
          return e2;
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(46), i = r(15), o = r(5), a = r(16), s = o("species");
        e.exports = function(e2) {
          var t2 = n(e2), r2 = i.f;
          a && t2 && !t2[s] && r2(t2, s, { configurable: true, get: function() {
            return this;
          } });
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s(0), throw: s(1), return: s(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s(o3) {
            return function(s2) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a.label++, { value: o4[1], done: false };
                      case 5:
                        a.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a.ops.pop(), a.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a.label < i2[1]) {
                          a.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a.label < i2[2]) {
                          a.label = i2[2], a.ops.push(o4);
                          break;
                        }
                        i2[2] && a.ops.pop(), a.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s2]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function() {
          function e2(e3) {
            e3 === void 0 && (e3 = 1e3), this._items = new Set(), this._limit = e3;
          }
          return e2.prototype.add = function(e3) {
            if (this._items.add(e3), this._items.size > this._limit) {
              var t2 = this._items.values().next();
              t2.done || this._items.delete(t2.value);
            }
            return this;
          }, e2.prototype.delete = function(e3) {
            return this._items.delete(e3);
          }, e2.prototype.has = function(e3) {
            return this._items.has(e3);
          }, e2.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e2.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e2.prototype.forEach = function(e3, t2) {
            var r2 = this;
            this._items.forEach(function(n2) {
              return e3.call(t2, n2, n2, r2);
            });
          }, e2.prototype.keys = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.keys())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.values = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.values())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.entries = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.entries())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype[Symbol.iterator] = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items)];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
            return "FixedSizeSet";
          }, enumerable: true, configurable: true }), e2;
        }();
        t.FixedSizeSet = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s(0), throw: s(1), return: s(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s(o3) {
            return function(s2) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a.label++, { value: o4[1], done: false };
                      case 5:
                        a.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a.ops.pop(), a.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a.label < i2[1]) {
                          a.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a.label < i2[2]) {
                          a.label = i2[2], a.ops.push(o4);
                          break;
                        }
                        i2[2] && a.ops.pop(), a.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s2]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function() {
          function e2(e3) {
            e3 === void 0 && (e3 = 1e3), this._items = new Map(), this._limit = e3;
          }
          return e2.prototype.get = function(e3) {
            return this._items.get(e3);
          }, e2.prototype.set = function(e3, t2) {
            if (this._items.set(e3, t2), this._items.size > this._limit) {
              var r2 = this._items.keys().next();
              r2.done || this._items.delete(r2.value);
            }
          }, e2.prototype.delete = function(e3) {
            return this._items.delete(e3);
          }, e2.prototype.has = function(e3) {
            return this._items.has(e3);
          }, e2.prototype.clear = function() {
            this._items.clear();
          }, Object.defineProperty(e2.prototype, "size", { get: function() {
            return this._items.size;
          }, enumerable: true, configurable: true }), e2.prototype.forEach = function(e3, t2) {
            this._items.forEach(function(r2, n2) {
              return e3.call(t2, n2, r2);
            });
          }, e2.prototype.keys = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.keys())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.values = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.values())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype.entries = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items.entries())];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, e2.prototype[Symbol.iterator] = function() {
            return n(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [5, i(this._items)];
                case 1:
                  return e3.sent(), [2];
              }
            });
          }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
            return "ObjectCache";
          }, enumerable: true, configurable: true }), e2;
        }();
        t.ObjectCache = o;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3) {
            e3 === void 0 && (e3 = 1e3), this._items = new Map(), this._limit = e3;
          }
          return e2.prototype.check = function(e3, t2) {
            if (this._items.get(e3) === t2)
              return true;
            if (this._items.get(t2) === e3)
              return false;
            var r2 = Math.random() < 0.5;
            if (r2 ? this._items.set(e3, t2) : this._items.set(t2, e3), this._items.size > this._limit) {
              var n2 = this._items.keys().next();
              n2.done || this._items.delete(n2.value);
            }
            return r2;
          }, e2;
        }();
        t.CompareCache = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3) {
            this._initialized = false, this._value = void 0, this._initFunc = e3;
          }
          return Object.defineProperty(e2.prototype, "value", { get: function() {
            return this._initialized || (this._value = this._initFunc(), this._initialized = true), this._value;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.Lazy = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2(e3) {
            this._pointer = 0, this._chars = Array.from(e3), this._length = this._chars.length;
          }
          return Object.defineProperty(e2.prototype, "eof", { get: function() {
            return this._pointer >= this._length;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "length", { get: function() {
            return this._length;
          }, enumerable: true, configurable: true }), e2.prototype.codePoint = function() {
            if (this._codePoint === void 0)
              if (this.eof)
                this._codePoint = -1;
              else {
                var e3 = this._chars[this._pointer].codePointAt(0);
                this._codePoint = e3 !== void 0 ? e3 : -1;
              }
            return this._codePoint;
          }, e2.prototype.c = function() {
            return this._c === void 0 && (this._c = this.eof ? "" : this._chars[this._pointer]), this._c;
          }, e2.prototype.remaining = function() {
            return this._remaining === void 0 && (this._remaining = this.eof ? "" : this._chars.slice(this._pointer + 1).join("")), this._remaining;
          }, e2.prototype.substring = function() {
            return this._substring === void 0 && (this._substring = this.eof ? "" : this._chars.slice(this._pointer).join("")), this._substring;
          }, Object.defineProperty(e2.prototype, "pointer", { get: function() {
            return this._pointer;
          }, set: function(e3) {
            e3 !== this._pointer && (this._pointer = e3, this._codePoint = void 0, this._c = void 0, this._remaining = void 0, this._substring = void 0);
          }, enumerable: true, configurable: true }), e2;
        }();
        t.StringWalker = n;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(218);
        t.MapWriter = n.MapWriter;
        var i = r(258);
        t.XMLWriter = i.XMLWriter;
        var o = r(67);
        t.ObjectWriter = o.ObjectWriter;
        var a = r(260);
        t.JSONWriter = a.JSONWriter;
        var s = r(261);
        t.YAMLWriter = s.YAMLWriter;
      }, function(e, t, r) {
        "use strict";
        r(19), r(219), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(1), a = r(67), s = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._writerOptions = o.applyDefaults(r2, { format: "map", wellFormed: false, group: false, verbose: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            var t3 = o.applyDefaults(this._writerOptions, { format: "object", wellFormed: false, verbose: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3);
            return this._convertObject(r2);
          }, t2.prototype._convertObject = function(e3) {
            if (o.isArray(e3)) {
              for (var t3 = 0; t3 < e3.length; t3++)
                e3[t3] = this._convertObject(e3[t3]);
              return e3;
            }
            if (o.isObject(e3)) {
              var r2 = new Map();
              for (var n2 in e3)
                r2.set(n2, this._convertObject(e3[n2]));
              return r2;
            }
            return e3;
          }, t2;
        }(r(50).BaseWriter);
        t.MapWriter = s;
      }, function(e, t, r) {
        "use strict";
        var n = r(139), i = r(143);
        e.exports = n("Map", function(e2) {
          return function() {
            return e2(this, arguments.length ? arguments[0] : void 0);
          };
        }, i);
      }, function(e, t, r) {
        "use strict";
        var n = r(4), i = r(8), o = r(59), a = r(13), s = r(27), u = r(26), l = r(134), c = r(128), h = r(63), p = r(5), f = r(129), d = p("isConcatSpreadable"), m = f >= 51 || !i(function() {
          var e2 = [];
          return e2[d] = false, e2.concat()[0] !== e2;
        }), y = h("concat"), v = function(e2) {
          if (!a(e2))
            return false;
          var t2 = e2[d];
          return t2 !== void 0 ? !!t2 : o(e2);
        };
        n({ target: "Array", proto: true, forced: !m || !y }, { concat: function(e2) {
          var t2, r2, n2, i2, o2, a2 = s(this), h2 = c(a2, 0), p2 = 0;
          for (t2 = -1, n2 = arguments.length; t2 < n2; t2++)
            if (v(o2 = t2 === -1 ? a2 : arguments[t2])) {
              if (p2 + (i2 = u(o2.length)) > 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              for (r2 = 0; r2 < i2; r2++, p2++)
                r2 in o2 && l(h2, p2, o2[r2]);
            } else {
              if (p2 >= 9007199254740991)
                throw TypeError("Maximum allowed index exceeded");
              l(h2, p2++, o2);
            }
          return h2.length = p2, h2;
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(8);
        function i(e2, t2) {
          return RegExp(e2, t2);
        }
        t.UNSUPPORTED_Y = n(function() {
          var e2 = i("a", "y");
          return e2.lastIndex = 2, e2.exec("abcd") != null;
        }), t.BROKEN_CARET = n(function() {
          var e2 = i("^r", "gy");
          return e2.lastIndex = 2, e2.exec("str") != null;
        });
      }, function(e, t, r) {
        var n = r(223);
        e.exports = function(e2) {
          if (n(e2))
            throw TypeError("The method doesn't accept regular expressions");
          return e2;
        };
      }, function(e, t, r) {
        var n = r(13), i = r(42), o = r(5)("match");
        e.exports = function(e2) {
          var t2;
          return n(e2) && ((t2 = e2[o]) !== void 0 ? !!t2 : i(e2) == "RegExp");
        };
      }, function(e, t, r) {
        var n = r(5)("match");
        e.exports = function(e2) {
          var t2 = /./;
          try {
            "/./"[e2](t2);
          } catch (r2) {
            try {
              return t2[n] = false, "/./"[e2](t2);
            } catch (e3) {
            }
          }
          return false;
        };
      }, function(e, t, r) {
        "use strict";
        r(68);
        var n = r(25), i = r(8), o = r(5), a = r(93), s = r(21), u = o("species"), l = !i(function() {
          var e2 = /./;
          return e2.exec = function() {
            var e3 = [];
            return e3.groups = { a: "7" }, e3;
          }, "".replace(e2, "$<a>") !== "7";
        }), c = "a".replace(/./, "$0") === "$0", h = o("replace"), p = !!/./[h] && /./[h]("a", "$0") === "", f = !i(function() {
          var e2 = /(?:)/, t2 = e2.exec;
          e2.exec = function() {
            return t2.apply(this, arguments);
          };
          var r2 = "ab".split(e2);
          return r2.length !== 2 || r2[0] !== "a" || r2[1] !== "b";
        });
        e.exports = function(e2, t2, r2, h2) {
          var d = o(e2), m = !i(function() {
            var t3 = {};
            return t3[d] = function() {
              return 7;
            }, ""[e2](t3) != 7;
          }), y = m && !i(function() {
            var t3 = false, r3 = /a/;
            return e2 === "split" && ((r3 = {}).constructor = {}, r3.constructor[u] = function() {
              return r3;
            }, r3.flags = "", r3[d] = /./[d]), r3.exec = function() {
              return t3 = true, null;
            }, r3[d](""), !t3;
          });
          if (!m || !y || e2 === "replace" && (!l || !c || p) || e2 === "split" && !f) {
            var v = /./[d], _ = r2(d, ""[e2], function(e3, t3, r3, n2, i2) {
              return t3.exec === a ? m && !i2 ? { done: true, value: v.call(t3, r3, n2) } : { done: true, value: e3.call(r3, t3, n2) } : { done: false };
            }, { REPLACE_KEEPS_$0: c, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: p }), g = _[0], b = _[1];
            n(String.prototype, e2, g), n(RegExp.prototype, d, t2 == 2 ? function(e3, t3) {
              return b.call(e3, this, t3);
            } : function(e3) {
              return b.call(e3, this);
            });
          }
          h2 && s(RegExp.prototype[d], "sham", true);
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(137).charAt;
        e.exports = function(e2, t2, r2) {
          return t2 + (r2 ? n(e2, t2).length : 1);
        };
      }, function(e, t, r) {
        var n = r(42), i = r(93);
        e.exports = function(e2, t2) {
          var r2 = e2.exec;
          if (typeof r2 == "function") {
            var o = r2.call(e2, t2);
            if (typeof o != "object")
              throw TypeError("RegExp exec method returned something other than an Object or null");
            return o;
          }
          if (n(e2) !== "RegExp")
            throw TypeError("RegExp#exec called on incompatible receiver");
          return i.call(e2, t2);
        };
      }, function(e, t, r) {
        "use strict";
        (function(e2) {
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(96);
          t.forgivingBase64Encode = function(t2) {
            return e2.from(t2).toString("base64");
          }, t.forgivingBase64Decode = function(t2) {
            return t2 === "" ? "" : ((t2 = t2.replace(n.ASCIIWhiteSpace, "")).length % 4 == 0 && (t2.endsWith("==") ? t2 = t2.substr(0, t2.length - 2) : t2.endsWith("=") && (t2 = t2.substr(0, t2.length - 1))), t2.length % 4 == 1 ? null : /[0-9A-Za-z+/]/.test(t2) ? e2.from(t2, "base64").toString("utf8") : null);
          };
        }).call(this, r(145).Buffer);
      }, function(e, t, r) {
        "use strict";
        t.byteLength = function(e2) {
          var t2 = l(e2), r2 = t2[0], n2 = t2[1];
          return 3 * (r2 + n2) / 4 - n2;
        }, t.toByteArray = function(e2) {
          var t2, r2, n2 = l(e2), a2 = n2[0], s2 = n2[1], u2 = new o(function(e3, t3, r3) {
            return 3 * (t3 + r3) / 4 - r3;
          }(0, a2, s2)), c2 = 0, h = s2 > 0 ? a2 - 4 : a2;
          for (r2 = 0; r2 < h; r2 += 4)
            t2 = i[e2.charCodeAt(r2)] << 18 | i[e2.charCodeAt(r2 + 1)] << 12 | i[e2.charCodeAt(r2 + 2)] << 6 | i[e2.charCodeAt(r2 + 3)], u2[c2++] = t2 >> 16 & 255, u2[c2++] = t2 >> 8 & 255, u2[c2++] = 255 & t2;
          s2 === 2 && (t2 = i[e2.charCodeAt(r2)] << 2 | i[e2.charCodeAt(r2 + 1)] >> 4, u2[c2++] = 255 & t2);
          s2 === 1 && (t2 = i[e2.charCodeAt(r2)] << 10 | i[e2.charCodeAt(r2 + 1)] << 4 | i[e2.charCodeAt(r2 + 2)] >> 2, u2[c2++] = t2 >> 8 & 255, u2[c2++] = 255 & t2);
          return u2;
        }, t.fromByteArray = function(e2) {
          for (var t2, r2 = e2.length, i2 = r2 % 3, o2 = [], a2 = 0, s2 = r2 - i2; a2 < s2; a2 += 16383)
            o2.push(c(e2, a2, a2 + 16383 > s2 ? s2 : a2 + 16383));
          i2 === 1 ? (t2 = e2[r2 - 1], o2.push(n[t2 >> 2] + n[t2 << 4 & 63] + "==")) : i2 === 2 && (t2 = (e2[r2 - 2] << 8) + e2[r2 - 1], o2.push(n[t2 >> 10] + n[t2 >> 4 & 63] + n[t2 << 2 & 63] + "="));
          return o2.join("");
        };
        for (var n = [], i = [], o = typeof Uint8Array != "undefined" ? Uint8Array : Array, a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, u = a.length; s < u; ++s)
          n[s] = a[s], i[a.charCodeAt(s)] = s;
        function l(e2) {
          var t2 = e2.length;
          if (t2 % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
          var r2 = e2.indexOf("=");
          return r2 === -1 && (r2 = t2), [r2, r2 === t2 ? 0 : 4 - r2 % 4];
        }
        function c(e2, t2, r2) {
          for (var i2, o2, a2 = [], s2 = t2; s2 < r2; s2 += 3)
            i2 = (e2[s2] << 16 & 16711680) + (e2[s2 + 1] << 8 & 65280) + (255 & e2[s2 + 2]), a2.push(n[(o2 = i2) >> 18 & 63] + n[o2 >> 12 & 63] + n[o2 >> 6 & 63] + n[63 & o2]);
          return a2.join("");
        }
        i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;
      }, function(e, t) {
        t.read = function(e2, t2, r, n, i) {
          var o, a, s = 8 * i - n - 1, u = (1 << s) - 1, l = u >> 1, c = -7, h = r ? i - 1 : 0, p = r ? -1 : 1, f = e2[t2 + h];
          for (h += p, o = f & (1 << -c) - 1, f >>= -c, c += s; c > 0; o = 256 * o + e2[t2 + h], h += p, c -= 8)
            ;
          for (a = o & (1 << -c) - 1, o >>= -c, c += n; c > 0; a = 256 * a + e2[t2 + h], h += p, c -= 8)
            ;
          if (o === 0)
            o = 1 - l;
          else {
            if (o === u)
              return a ? NaN : 1 / 0 * (f ? -1 : 1);
            a += Math.pow(2, n), o -= l;
          }
          return (f ? -1 : 1) * a * Math.pow(2, o - n);
        }, t.write = function(e2, t2, r, n, i, o) {
          var a, s, u, l = 8 * o - i - 1, c = (1 << l) - 1, h = c >> 1, p = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = n ? 0 : o - 1, d = n ? 1 : -1, m = t2 < 0 || t2 === 0 && 1 / t2 < 0 ? 1 : 0;
          for (t2 = Math.abs(t2), isNaN(t2) || t2 === 1 / 0 ? (s = isNaN(t2) ? 1 : 0, a = c) : (a = Math.floor(Math.log(t2) / Math.LN2), t2 * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (t2 += a + h >= 1 ? p / u : p * Math.pow(2, 1 - h)) * u >= 2 && (a++, u /= 2), a + h >= c ? (s = 0, a = c) : a + h >= 1 ? (s = (t2 * u - 1) * Math.pow(2, i), a += h) : (s = t2 * Math.pow(2, h - 1) * Math.pow(2, i), a = 0)); i >= 8; e2[r + f] = 255 & s, f += d, s /= 256, i -= 8)
            ;
          for (a = a << i | s, l += i; l > 0; e2[r + f] = 255 & a, f += d, a /= 256, l -= 8)
            ;
          e2[r + f - d] |= 128 * m;
        };
      }, function(e, t) {
        var r = {}.toString;
        e.exports = Array.isArray || function(e2) {
          return r.call(e2) == "[object Array]";
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(1);
        function o(e2) {
          var t2, r2;
          if (e2 === null || i.isString(e2) || i.isNumber(e2))
            return e2;
          if (i.isArray(e2)) {
            var a = new Array();
            try {
              for (var s = n(e2), u = s.next(); !u.done; u = s.next()) {
                var l = u.value;
                a.push(o(l));
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                u && !u.done && (r2 = s.return) && r2.call(s);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return a;
          }
          if (i.isObject(e2)) {
            a = new Map();
            for (var c in e2)
              if (e2.hasOwnProperty(c)) {
                var h = e2[c];
                a.set(c, o(h));
              }
            return a;
          }
          return e2;
        }
        t.parseJSONFromBytes = function(e2) {
          var t2 = i.utf8Decode(e2);
          return JSON.parse.call(void 0, t2);
        }, t.serializeJSONToBytes = function(e2) {
          var t2 = JSON.stringify.call(void 0, e2);
          return i.utf8Encode(t2);
        }, t.parseJSONIntoInfraValues = function(e2) {
          return o(JSON.parse.call(void 0, e2));
        }, t.convertAJSONDerivedJavaScriptValueToAnInfraValue = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s2(o3) {
            return function(s3) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a2; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a2.label++, { value: o4[1], done: false };
                      case 5:
                        a2.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a2 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a2.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(o4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a2);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s3]);
            };
          }
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        }, a = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(1);
        t.append = function(e2, t2) {
          e2.push(t2);
        }, t.extend = function(e2, t2) {
          e2.push.apply(e2, o(t2));
        }, t.prepend = function(e2, t2) {
          e2.unshift(t2);
        }, t.replace = function(e2, t2, r2) {
          var n2, i2, o2 = 0;
          try {
            for (var u = a(e2), l = u.next(); !l.done; l = u.next()) {
              var c = l.value;
              if (s.isFunction(t2))
                t2.call(null, c) && (e2[o2] = r2);
              else if (c === t2)
                return void (e2[o2] = r2);
              o2++;
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (i2 = u.return) && i2.call(u);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
        }, t.insert = function(e2, t2, r2) {
          e2.splice(r2, 0, t2);
        }, t.remove = function(e2, t2) {
          for (var r2 = e2.length; r2--; ) {
            var n2 = e2[r2];
            if (s.isFunction(t2))
              t2.call(null, n2) && e2.splice(r2, 1);
            else if (n2 === t2)
              return void e2.splice(r2, 1);
          }
        }, t.empty = function(e2) {
          e2.length = 0;
        }, t.contains = function(e2, t2) {
          var r2, n2;
          try {
            for (var i2 = a(e2), o2 = i2.next(); !o2.done; o2 = i2.next()) {
              var u = o2.value;
              if (s.isFunction(t2)) {
                if (t2.call(null, u))
                  return true;
              } else if (u === t2)
                return true;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              o2 && !o2.done && (n2 = i2.return) && n2.call(i2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t.size = function(e2, t2) {
          var r2, n2;
          if (t2 === void 0)
            return e2.length;
          var i2 = 0;
          try {
            for (var o2 = a(e2), s2 = o2.next(); !s2.done; s2 = o2.next()) {
              var u = s2.value;
              t2.call(null, u) && i2++;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return i2;
        }, t.isEmpty = function(e2) {
          return e2.length === 0;
        }, t.forEach = function(e2, t2) {
          var r2, i2, o2, s2, u, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t2 !== void 0 ? [3, 2] : [5, a(e2)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = a(e2), i2 = r2.next(), n2.label = 3;
              case 3:
                return i2.done ? [3, 6] : (o2 = i2.value, t2.call(null, o2) ? [4, o2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return i2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s2 = n2.sent(), u = { error: s2 }, [3, 9];
              case 8:
                try {
                  i2 && !i2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u)
                    throw u.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t.clone = function(e2) {
          return new (Array.bind.apply(Array, o([void 0], e2)))();
        }, t.sortInAscendingOrder = function(e2, t2) {
          return e2.sort(function(e3, r2) {
            return t2.call(null, e3, r2) ? -1 : 1;
          });
        }, t.sortInDescendingOrder = function(e2, t2) {
          return e2.sort(function(e3, r2) {
            return t2.call(null, e3, r2) ? 1 : -1;
          });
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s2(o3) {
            return function(s3) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a2; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a2.label++, { value: o4[1], done: false };
                      case 5:
                        a2.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a2 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a2.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(o4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a2);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s3]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, a = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(o(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(1);
        t.get = function(e2, t2) {
          return e2.get(t2);
        }, t.set = function(e2, t2, r2) {
          e2.set(t2, r2);
        }, t.remove = function(e2, t2) {
          var r2, n2, o2, a2;
          if (s.isFunction(t2)) {
            var u = [];
            try {
              for (var l = i(e2), c = l.next(); !c.done; c = l.next()) {
                var h = c.value;
                t2.call(null, h) && u.push(h[0]);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                c && !c.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i(u), f = p.next(); !f.done; f = p.next()) {
                var d = f.value;
                e2.delete(d);
              }
            } catch (e3) {
              o2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (a2 = p.return) && a2.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e2.delete(t2);
        }, t.contains = function(e2, t2) {
          var r2, n2;
          if (s.isFunction(t2)) {
            try {
              for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var u = a2.value;
                if (t2.call(null, u))
                  return true;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return false;
          }
          return e2.has(t2);
        }, t.keys = function(e2) {
          return new Set(e2.keys());
        }, t.values = function(e2) {
          return a(e2.values());
        }, t.size = function(e2, t2) {
          var r2, n2;
          if (t2 === void 0)
            return e2.size;
          var o2 = 0;
          try {
            for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              var u = s2.value;
              t2.call(null, u) && o2++;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.isEmpty = function(e2) {
          return e2.size === 0;
        }, t.forEach = function(e2, t2) {
          var r2, o2, a2, s2, u, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t2 !== void 0 ? [3, 2] : [5, i(e2)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i(e2), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a2 = o2.value, t2.call(null, a2) ? [4, a2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s2 = n2.sent(), u = { error: s2 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u)
                    throw u.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t.clone = function(e2) {
          return new Map(e2);
        }, t.sortInAscendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? -1 : 1;
          }), new Map(r2);
        }, t.sortInDescendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? 1 : -1;
          }), new Map(r2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.HTML = "http://www.w3.org/1999/xhtml", t.XML = "http://www.w3.org/XML/1998/namespace", t.XMLNS = "http://www.w3.org/2000/xmlns/", t.MathML = "http://www.w3.org/1998/Math/MathML", t.SVG = "http://www.w3.org/2000/svg", t.XLink = "http://www.w3.org/1999/xlink";
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.enqueue = function(e2, t2) {
          e2.push(t2);
        }, t.dequeue = function(e2) {
          return e2.shift() || null;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__generator || function(e2, t2) {
          var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
            if (1 & i2[0])
              throw i2[1];
            return i2[1];
          }, trys: [], ops: [] };
          return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (o2[Symbol.iterator] = function() {
            return this;
          }), o2;
          function s2(o3) {
            return function(s3) {
              return function(o4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a2; )
                  try {
                    if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                      return i2;
                    switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                      case 0:
                      case 1:
                        i2 = o4;
                        break;
                      case 4:
                        return a2.label++, { value: o4[1], done: false };
                      case 5:
                        a2.label++, n2 = o4[1], o4 = [0];
                        continue;
                      case 7:
                        o4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || o4[0] !== 6 && o4[0] !== 2)) {
                          a2 = 0;
                          continue;
                        }
                        if (o4[0] === 3 && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                          a2.label = o4[1];
                          break;
                        }
                        if (o4[0] === 6 && a2.label < i2[1]) {
                          a2.label = i2[1], i2 = o4;
                          break;
                        }
                        if (i2 && a2.label < i2[2]) {
                          a2.label = i2[2], a2.ops.push(o4);
                          break;
                        }
                        i2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    o4 = t2.call(e2, a2);
                  } catch (e3) {
                    o4 = [6, e3], n2 = 0;
                  } finally {
                    r2 = i2 = 0;
                  }
                if (5 & o4[0])
                  throw o4[1];
                return { value: o4[0] ? o4[1] : void 0, done: true };
              }([o3, s3]);
            };
          }
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, a = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(o(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(1);
        function u(e2, t2) {
          var r2, n2;
          try {
            for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value;
              if (!t2.has(s2))
                return false;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return true;
        }
        t.append = function(e2, t2) {
          e2.add(t2);
        }, t.extend = function(e2, t2) {
          t2.forEach(e2.add, e2);
        }, t.prepend = function(e2, t2) {
          var r2 = new Set(e2);
          e2.clear(), e2.add(t2), r2.forEach(e2.add, e2);
        }, t.replace = function(e2, t2, r2) {
          var n2, o2, a2 = new Set();
          try {
            for (var u2 = i(e2), l = u2.next(); !l.done; l = u2.next()) {
              var c = l.value;
              s.isFunction(t2) ? t2.call(null, c) ? a2.add(r2) : a2.add(c) : c === t2 ? a2.add(r2) : a2.add(c);
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (o2 = u2.return) && o2.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e2.clear(), a2.forEach(e2.add, e2);
        }, t.insert = function(e2, t2, r2) {
          var n2, o2, a2 = new Set(), s2 = 0;
          try {
            for (var u2 = i(e2), l = u2.next(); !l.done; l = u2.next()) {
              var c = l.value;
              s2 === r2 && a2.add(t2), a2.add(c), s2++;
            }
          } catch (e3) {
            n2 = { error: e3 };
          } finally {
            try {
              l && !l.done && (o2 = u2.return) && o2.call(u2);
            } finally {
              if (n2)
                throw n2.error;
            }
          }
          e2.clear(), a2.forEach(e2.add, e2);
        }, t.remove = function(e2, t2) {
          var r2, n2, o2, a2;
          if (s.isFunction(t2)) {
            var u2 = [];
            try {
              for (var l = i(e2), c = l.next(); !c.done; c = l.next()) {
                var h = c.value;
                t2.call(null, h) && u2.push(h);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                c && !c.done && (n2 = l.return) && n2.call(l);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            try {
              for (var p = i(u2), f = p.next(); !f.done; f = p.next()) {
                var d = f.value;
                e2.delete(d);
              }
            } catch (e3) {
              o2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (a2 = p.return) && a2.call(p);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          } else
            e2.delete(t2);
        }, t.empty = function(e2) {
          e2.clear();
        }, t.contains = function(e2, t2) {
          var r2, n2;
          if (!s.isFunction(t2))
            return e2.has(t2);
          try {
            for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var u2 = a2.value;
              if (t2.call(null, u2))
                return true;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return false;
        }, t.size = function(e2, t2) {
          var r2, n2;
          if (t2 === void 0)
            return e2.size;
          var o2 = 0;
          try {
            for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              var u2 = s2.value;
              t2.call(null, u2) && o2++;
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.isEmpty = function(e2) {
          return e2.size === 0;
        }, t.forEach = function(e2, t2) {
          var r2, o2, a2, s2, u2, l;
          return n(this, function(n2) {
            switch (n2.label) {
              case 0:
                return t2 !== void 0 ? [3, 2] : [5, i(e2)];
              case 1:
                return n2.sent(), [3, 9];
              case 2:
                n2.trys.push([2, 7, 8, 9]), r2 = i(e2), o2 = r2.next(), n2.label = 3;
              case 3:
                return o2.done ? [3, 6] : (a2 = o2.value, t2.call(null, a2) ? [4, a2] : [3, 5]);
              case 4:
                n2.sent(), n2.label = 5;
              case 5:
                return o2 = r2.next(), [3, 3];
              case 6:
                return [3, 9];
              case 7:
                return s2 = n2.sent(), u2 = { error: s2 }, [3, 9];
              case 8:
                try {
                  o2 && !o2.done && (l = r2.return) && l.call(r2);
                } finally {
                  if (u2)
                    throw u2.error;
                }
                return [7];
              case 9:
                return [2];
            }
          });
        }, t.clone = function(e2) {
          return new Set(e2);
        }, t.sortInAscendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? -1 : 1;
          }), new Set(r2);
        }, t.sortInDescendingOrder = function(e2, t2) {
          var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
          return r2.sort(function(e3, r3) {
            return t2.call(null, e3, r3) ? 1 : -1;
          }), new Set(r2);
        }, t.isSubsetOf = u, t.isSupersetOf = function(e2, t2) {
          return u(t2, e2);
        }, t.intersection = function(e2, t2) {
          var r2, n2, o2 = new Set();
          try {
            for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              var u2 = s2.value;
              t2.has(u2) && o2.add(u2);
            }
          } catch (e3) {
            r2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return o2;
        }, t.union = function(e2, t2) {
          var r2 = new Set(e2);
          return t2.forEach(r2.add, r2), r2;
        }, t.range = function(e2, t2) {
          for (var r2 = new Set(), n2 = e2; n2 <= t2; n2++)
            r2.add(n2);
          return r2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), t.push = function(e2, t2) {
          e2.push(t2);
        }, t.pop = function(e2) {
          return e2.pop() || null;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(96), o = r(147), a = r(146), s = r(1);
        function u(e2, t2) {
          for (var r2 = 0; ; ) {
            var n2 = r2 < e2.length ? e2.charCodeAt(r2) : null, i2 = r2 < t2.length ? t2.charCodeAt(r2) : null;
            if (n2 === null)
              return true;
            if (n2 !== i2)
              return false;
            r2++;
          }
        }
        function l(e2) {
          var t2, r2, i2 = Array.from(e2), o2 = new Uint8Array(i2.length), a2 = 0;
          try {
            for (var s2 = n(e2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
              var l2 = u2.value.codePointAt(0);
              console.assert(l2 !== void 0 && l2 <= 255, "isomorphicEncode requires string bytes to be less than or equal to 0x00FF."), l2 !== void 0 && l2 <= 255 && (o2[a2++] = l2);
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return o2;
        }
        function c(e2) {
          return /^[\u0000-\u007F]*$/.test(e2);
        }
        function h(e2) {
          var t2, r2, i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value, u2 = s2.codePointAt(0);
              i2 += u2 !== void 0 && u2 >= 65 && u2 <= 90 ? String.fromCodePoint(u2 + 32) : s2;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }
        function p(e2) {
          return e2.replace(/^[\t\n\f\r ]+/, "").replace(/[\t\n\f\r ]+$/, "");
        }
        function f(e2, t2, r2) {
          if (!s.isArray(t2))
            return f(e2, Array.from(t2), r2);
          for (var n2 = ""; r2.position < t2.length && e2.call(null, t2[r2.position]); )
            n2 += t2[r2.position], r2.position++;
          return n2;
        }
        function d(e2, t2) {
          f(function(e3) {
            return i.ASCIIWhiteSpace.test(e3);
          }, e2, t2);
        }
        t.isCodeUnitPrefix = u, t.isCodeUnitLessThan = function(e2, t2) {
          if (u(t2, e2))
            return false;
          if (u(e2, t2))
            return true;
          for (var r2 = 0; r2 < Math.min(e2.length, t2.length); r2++) {
            var n2 = e2.charCodeAt(r2), i2 = t2.charCodeAt(r2);
            if (n2 !== i2)
              return n2 < i2;
          }
          return false;
        }, t.isomorphicEncode = l, t.isASCIIString = c, t.asciiLowercase = h, t.asciiUppercase = function(e2) {
          var t2, r2, i2 = "";
          try {
            for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
              var s2 = a2.value, u2 = s2.codePointAt(0);
              i2 += u2 !== void 0 && u2 >= 97 && u2 <= 122 ? String.fromCodePoint(u2 - 32) : s2;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return i2;
        }, t.asciiCaseInsensitiveMatch = function(e2, t2) {
          return h(e2) === h(t2);
        }, t.asciiEncode = function(e2) {
          return console.assert(c(e2), "asciiEncode requires an ASCII string."), l(e2);
        }, t.asciiDecode = function(e2) {
          var t2, r2;
          try {
            for (var i2 = n(e2), s2 = i2.next(); !s2.done; s2 = i2.next()) {
              var u2 = s2.value;
              console.assert(a.isASCIIByte(u2), "asciiDecode requires an ASCII byte sequence.");
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              s2 && !s2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          return o.isomorphicDecode(e2);
        }, t.stripNewlines = function(e2) {
          return e2.replace(/[\n\r]/g, "");
        }, t.normalizeNewlines = function(e2) {
          return e2.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        }, t.stripLeadingAndTrailingASCIIWhitespace = p, t.stripAndCollapseASCIIWhitespace = function(e2) {
          return p(e2.replace(/[\t\n\f\r ]{2,}/g, " "));
        }, t.collectASequenceOfCodePoints = f, t.skipASCIIWhitespace = d, t.strictlySplit = function e2(t2, r2) {
          if (!s.isArray(t2))
            return e2(Array.from(t2), r2);
          var n2 = { position: 0 }, i2 = [], o2 = f(function(e3) {
            return r2 !== e3;
          }, t2, n2);
          for (i2.push(o2); n2.position < t2.length; )
            console.assert(t2[n2.position] === r2, "strictlySplit found no delimiter in input string."), n2.position++, o2 = f(function(e3) {
              return r2 !== e3;
            }, t2, n2), i2.push(o2);
          return i2;
        }, t.splitAStringOnASCIIWhitespace = function e2(t2) {
          if (!s.isArray(t2))
            return e2(Array.from(t2));
          var r2 = { position: 0 }, n2 = [];
          for (d(t2, r2); r2.position < t2.length; ) {
            var o2 = f(function(e3) {
              return !i.ASCIIWhiteSpace.test(e3);
            }, t2, r2);
            n2.push(o2), d(t2, r2);
          }
          return n2;
        }, t.splitAStringOnCommas = function e2(t2) {
          if (!s.isArray(t2))
            return e2(Array.from(t2));
          for (var r2 = { position: 0 }, n2 = []; r2.position < t2.length; ) {
            var i2 = f(function(e3) {
              return e3 !== ",";
            }, t2, r2);
            n2.push(p(i2)), r2.position < t2.length && (console.assert(t2[r2.position] === ",", "splitAStringOnCommas found no delimiter in input string."), r2.position++);
          }
          return n2;
        }, t.concatenate = function(e2, t2) {
          return t2 === void 0 && (t2 = ""), e2.length === 0 ? "" : e2.join(t2);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(97);
        t.abort_add = function(e2, t2) {
          t2._abortedFlag || t2._abortAlgorithms.add(e2);
        }, t.abort_remove = function(e2, t2) {
          t2._abortAlgorithms.delete(e2);
        }, t.abort_signalAbort = function(e2) {
          var t2, r2;
          if (!e2._abortedFlag) {
            e2._abortedFlag = true;
            try {
              for (var o = n(e2._abortAlgorithms), a = o.next(); !a.done; a = o.next()) {
                a.value.call(e2);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a && !a.done && (r2 = o.return) && r2.call(o);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            e2._abortAlgorithms.clear(), i.event_fireAnEvent("abort", e2);
          }
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(150), i = function() {
          function e2() {
          }
          return e2.asNode = function(e3) {
            if (n.Guard.isNode(e3))
              return e3;
            throw new Error("Invalid object. Node expected.");
          }, e2;
        }();
        t.Cast = i;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "size", { get: function() {
            return 0;
          }, enumerable: true, configurable: true }), e2.prototype.add = function(e3) {
            throw new Error("Cannot add to an empty set.");
          }, e2.prototype.clear = function() {
          }, e2.prototype.delete = function(e3) {
            return false;
          }, e2.prototype.forEach = function(e3, t2) {
          }, e2.prototype.has = function(e3) {
            return false;
          }, e2.prototype[Symbol.iterator] = function() {
            return new i();
          }, e2.prototype.entries = function() {
            return new i();
          }, e2.prototype.keys = function() {
            return new i();
          }, e2.prototype.values = function() {
            return new i();
          }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
            return "EmptySet";
          }, enumerable: true, configurable: true }), e2;
        }();
        t.EmptySet = n;
        var i = function() {
          function e2() {
          }
          return e2.prototype[Symbol.iterator] = function() {
            return this;
          }, e2.prototype.next = function() {
            return { done: true, value: null };
          }, e2;
        }();
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
          e2[e2.SchemeStart = 0] = "SchemeStart", e2[e2.Scheme = 1] = "Scheme", e2[e2.NoScheme = 2] = "NoScheme", e2[e2.SpecialRelativeOrAuthority = 3] = "SpecialRelativeOrAuthority", e2[e2.PathOrAuthority = 4] = "PathOrAuthority", e2[e2.Relative = 5] = "Relative", e2[e2.RelativeSlash = 6] = "RelativeSlash", e2[e2.SpecialAuthoritySlashes = 7] = "SpecialAuthoritySlashes", e2[e2.SpecialAuthorityIgnoreSlashes = 8] = "SpecialAuthorityIgnoreSlashes", e2[e2.Authority = 9] = "Authority", e2[e2.Host = 10] = "Host", e2[e2.Hostname = 11] = "Hostname", e2[e2.Port = 12] = "Port", e2[e2.File = 13] = "File", e2[e2.FileSlash = 14] = "FileSlash", e2[e2.FileHost = 15] = "FileHost", e2[e2.PathStart = 16] = "PathStart", e2[e2.Path = 17] = "Path", e2[e2.CannotBeABaseURLPath = 18] = "CannotBeABaseURLPath", e2[e2.Query = 19] = "Query", e2[e2.Fragment = 20] = "Fragment";
        }(t.ParserState || (t.ParserState = {})), t.OpaqueOrigin = ["", "", null, null];
      }, function(e, t, r) {
        "use strict";
        var n = r(245), i = r(247);
        function o() {
          this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
        }
        t.parse = g, t.resolve = function(e2, t2) {
          return g(e2, false, true).resolve(t2);
        }, t.resolveObject = function(e2, t2) {
          return e2 ? g(e2, false, true).resolveObject(t2) : t2;
        }, t.format = function(e2) {
          i.isString(e2) && (e2 = g(e2));
          return e2 instanceof o ? e2.format() : o.prototype.format.call(e2);
        }, t.Url = o;
        var a = /^([a-z0-9.+-]+:)/i, s = /:[0-9]*$/, u = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]), c = ["'"].concat(l), h = ["%", "/", "?", ";", "#"].concat(c), p = ["/", "?", "#"], f = /^[+a-z0-9A-Z_-]{0,63}$/, d = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, m = { javascript: true, "javascript:": true }, y = { javascript: true, "javascript:": true }, v = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, _ = r(248);
        function g(e2, t2, r2) {
          if (e2 && i.isObject(e2) && e2 instanceof o)
            return e2;
          var n2 = new o();
          return n2.parse(e2, t2, r2), n2;
        }
        o.prototype.parse = function(e2, t2, r2) {
          if (!i.isString(e2))
            throw new TypeError("Parameter 'url' must be a string, not " + typeof e2);
          var o2 = e2.indexOf("?"), s2 = o2 !== -1 && o2 < e2.indexOf("#") ? "?" : "#", l2 = e2.split(s2);
          l2[0] = l2[0].replace(/\\/g, "/");
          var g2 = e2 = l2.join(s2);
          if (g2 = g2.trim(), !r2 && e2.split("#").length === 1) {
            var b = u.exec(g2);
            if (b)
              return this.path = g2, this.href = g2, this.pathname = b[1], b[2] ? (this.search = b[2], this.query = t2 ? _.parse(this.search.substr(1)) : this.search.substr(1)) : t2 && (this.search = "", this.query = {}), this;
          }
          var x = a.exec(g2);
          if (x) {
            var w = (x = x[0]).toLowerCase();
            this.protocol = w, g2 = g2.substr(x.length);
          }
          if (r2 || x || g2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var E = g2.substr(0, 2) === "//";
            !E || x && y[x] || (g2 = g2.substr(2), this.slashes = true);
          }
          if (!y[x] && (E || x && !v[x])) {
            for (var D, S, C = -1, A = 0; A < p.length; A++) {
              (N = g2.indexOf(p[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            (S = C === -1 ? g2.lastIndexOf("@") : g2.lastIndexOf("@", C)) !== -1 && (D = g2.slice(0, S), g2 = g2.slice(S + 1), this.auth = decodeURIComponent(D)), C = -1;
            for (A = 0; A < h.length; A++) {
              var N;
              (N = g2.indexOf(h[A])) !== -1 && (C === -1 || N < C) && (C = N);
            }
            C === -1 && (C = g2.length), this.host = g2.slice(0, C), g2 = g2.slice(C), this.parseHost(), this.hostname = this.hostname || "";
            var T = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
            if (!T)
              for (var O = this.hostname.split(/\./), F = (A = 0, O.length); A < F; A++) {
                var k = O[A];
                if (k && !k.match(f)) {
                  for (var P = "", I = 0, L = k.length; I < L; I++)
                    k.charCodeAt(I) > 127 ? P += "x" : P += k[I];
                  if (!P.match(f)) {
                    var M = O.slice(0, A), B = O.slice(A + 1), j = k.match(d);
                    j && (M.push(j[1]), B.unshift(j[2])), B.length && (g2 = "/" + B.join(".") + g2), this.hostname = M.join(".");
                    break;
                  }
                }
              }
            this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T || (this.hostname = n.toASCII(this.hostname));
            var R = this.port ? ":" + this.port : "", z = this.hostname || "";
            this.host = z + R, this.href += this.host, T && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), g2[0] !== "/" && (g2 = "/" + g2));
          }
          if (!m[w])
            for (A = 0, F = c.length; A < F; A++) {
              var U = c[A];
              if (g2.indexOf(U) !== -1) {
                var G = encodeURIComponent(U);
                G === U && (G = escape(U)), g2 = g2.split(U).join(G);
              }
            }
          var X = g2.indexOf("#");
          X !== -1 && (this.hash = g2.substr(X), g2 = g2.slice(0, X));
          var q = g2.indexOf("?");
          if (q !== -1 ? (this.search = g2.substr(q), this.query = g2.substr(q + 1), t2 && (this.query = _.parse(this.query)), g2 = g2.slice(0, q)) : t2 && (this.search = "", this.query = {}), g2 && (this.pathname = g2), v[w] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
            R = this.pathname || "";
            var W = this.search || "";
            this.path = R + W;
          }
          return this.href = this.format(), this;
        }, o.prototype.format = function() {
          var e2 = this.auth || "";
          e2 && (e2 = (e2 = encodeURIComponent(e2)).replace(/%3A/i, ":"), e2 += "@");
          var t2 = this.protocol || "", r2 = this.pathname || "", n2 = this.hash || "", o2 = false, a2 = "";
          this.host ? o2 = e2 + this.host : this.hostname && (o2 = e2 + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (o2 += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (a2 = _.stringify(this.query));
          var s2 = this.search || a2 && "?" + a2 || "";
          return t2 && t2.substr(-1) !== ":" && (t2 += ":"), this.slashes || (!t2 || v[t2]) && o2 !== false ? (o2 = "//" + (o2 || ""), r2 && r2.charAt(0) !== "/" && (r2 = "/" + r2)) : o2 || (o2 = ""), n2 && n2.charAt(0) !== "#" && (n2 = "#" + n2), s2 && s2.charAt(0) !== "?" && (s2 = "?" + s2), t2 + o2 + (r2 = r2.replace(/[?#]/g, function(e3) {
            return encodeURIComponent(e3);
          })) + (s2 = s2.replace("#", "%23")) + n2;
        }, o.prototype.resolve = function(e2) {
          return this.resolveObject(g(e2, false, true)).format();
        }, o.prototype.resolveObject = function(e2) {
          if (i.isString(e2)) {
            var t2 = new o();
            t2.parse(e2, false, true), e2 = t2;
          }
          for (var r2 = new o(), n2 = Object.keys(this), a2 = 0; a2 < n2.length; a2++) {
            var s2 = n2[a2];
            r2[s2] = this[s2];
          }
          if (r2.hash = e2.hash, e2.href === "")
            return r2.href = r2.format(), r2;
          if (e2.slashes && !e2.protocol) {
            for (var u2 = Object.keys(e2), l2 = 0; l2 < u2.length; l2++) {
              var c2 = u2[l2];
              c2 !== "protocol" && (r2[c2] = e2[c2]);
            }
            return v[r2.protocol] && r2.hostname && !r2.pathname && (r2.path = r2.pathname = "/"), r2.href = r2.format(), r2;
          }
          if (e2.protocol && e2.protocol !== r2.protocol) {
            if (!v[e2.protocol]) {
              for (var h2 = Object.keys(e2), p2 = 0; p2 < h2.length; p2++) {
                var f2 = h2[p2];
                r2[f2] = e2[f2];
              }
              return r2.href = r2.format(), r2;
            }
            if (r2.protocol = e2.protocol, e2.host || y[e2.protocol])
              r2.pathname = e2.pathname;
            else {
              for (var d2 = (e2.pathname || "").split("/"); d2.length && !(e2.host = d2.shift()); )
                ;
              e2.host || (e2.host = ""), e2.hostname || (e2.hostname = ""), d2[0] !== "" && d2.unshift(""), d2.length < 2 && d2.unshift(""), r2.pathname = d2.join("/");
            }
            if (r2.search = e2.search, r2.query = e2.query, r2.host = e2.host || "", r2.auth = e2.auth, r2.hostname = e2.hostname || e2.host, r2.port = e2.port, r2.pathname || r2.search) {
              var m2 = r2.pathname || "", _2 = r2.search || "";
              r2.path = m2 + _2;
            }
            return r2.slashes = r2.slashes || e2.slashes, r2.href = r2.format(), r2;
          }
          var g2 = r2.pathname && r2.pathname.charAt(0) === "/", b = e2.host || e2.pathname && e2.pathname.charAt(0) === "/", x = b || g2 || r2.host && e2.pathname, w = x, E = r2.pathname && r2.pathname.split("/") || [], D = (d2 = e2.pathname && e2.pathname.split("/") || [], r2.protocol && !v[r2.protocol]);
          if (D && (r2.hostname = "", r2.port = null, r2.host && (E[0] === "" ? E[0] = r2.host : E.unshift(r2.host)), r2.host = "", e2.protocol && (e2.hostname = null, e2.port = null, e2.host && (d2[0] === "" ? d2[0] = e2.host : d2.unshift(e2.host)), e2.host = null), x = x && (d2[0] === "" || E[0] === "")), b)
            r2.host = e2.host || e2.host === "" ? e2.host : r2.host, r2.hostname = e2.hostname || e2.hostname === "" ? e2.hostname : r2.hostname, r2.search = e2.search, r2.query = e2.query, E = d2;
          else if (d2.length)
            E || (E = []), E.pop(), E = E.concat(d2), r2.search = e2.search, r2.query = e2.query;
          else if (!i.isNullOrUndefined(e2.search)) {
            if (D)
              r2.hostname = r2.host = E.shift(), (T = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T.shift(), r2.host = r2.hostname = T.shift());
            return r2.search = e2.search, r2.query = e2.query, i.isNull(r2.pathname) && i.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.href = r2.format(), r2;
          }
          if (!E.length)
            return r2.pathname = null, r2.search ? r2.path = "/" + r2.search : r2.path = null, r2.href = r2.format(), r2;
          for (var S = E.slice(-1)[0], C = (r2.host || e2.host || E.length > 1) && (S === "." || S === "..") || S === "", A = 0, N = E.length; N >= 0; N--)
            (S = E[N]) === "." ? E.splice(N, 1) : S === ".." ? (E.splice(N, 1), A++) : A && (E.splice(N, 1), A--);
          if (!x && !w)
            for (; A--; A)
              E.unshift("..");
          !x || E[0] === "" || E[0] && E[0].charAt(0) === "/" || E.unshift(""), C && E.join("/").substr(-1) !== "/" && E.push("");
          var T, O = E[0] === "" || E[0] && E[0].charAt(0) === "/";
          D && (r2.hostname = r2.host = O ? "" : E.length ? E.shift() : "", (T = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T.shift(), r2.host = r2.hostname = T.shift()));
          return (x = x || r2.host && E.length) && !O && E.unshift(""), E.length ? r2.pathname = E.join("/") : (r2.pathname = null, r2.path = null), i.isNull(r2.pathname) && i.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.auth = e2.auth || r2.auth, r2.slashes = r2.slashes || e2.slashes, r2.href = r2.format(), r2;
        }, o.prototype.parseHost = function() {
          var e2 = this.host, t2 = s.exec(e2);
          t2 && ((t2 = t2[0]) !== ":" && (this.port = t2.substr(1)), e2 = e2.substr(0, e2.length - t2.length)), e2 && (this.hostname = e2);
        };
      }, function(e, t, r) {
        (function(e2, n) {
          var i;
          !function(o) {
            t && t.nodeType, e2 && e2.nodeType;
            var a = typeof n == "object" && n;
            a.global !== a && a.window !== a && a.self;
            var s, u = 2147483647, l = /^xn--/, c = /[^\x20-\x7E]/, h = /[\x2E\u3002\uFF0E\uFF61]/g, p = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, f = Math.floor, d = String.fromCharCode;
            function m(e3) {
              throw new RangeError(p[e3]);
            }
            function y(e3, t2) {
              for (var r2 = e3.length, n2 = []; r2--; )
                n2[r2] = t2(e3[r2]);
              return n2;
            }
            function v(e3, t2) {
              var r2 = e3.split("@"), n2 = "";
              return r2.length > 1 && (n2 = r2[0] + "@", e3 = r2[1]), n2 + y((e3 = e3.replace(h, ".")).split("."), t2).join(".");
            }
            function _(e3) {
              for (var t2, r2, n2 = [], i2 = 0, o2 = e3.length; i2 < o2; )
                (t2 = e3.charCodeAt(i2++)) >= 55296 && t2 <= 56319 && i2 < o2 ? (64512 & (r2 = e3.charCodeAt(i2++))) == 56320 ? n2.push(((1023 & t2) << 10) + (1023 & r2) + 65536) : (n2.push(t2), i2--) : n2.push(t2);
              return n2;
            }
            function g(e3) {
              return y(e3, function(e4) {
                var t2 = "";
                return e4 > 65535 && (t2 += d((e4 -= 65536) >>> 10 & 1023 | 55296), e4 = 56320 | 1023 & e4), t2 += d(e4);
              }).join("");
            }
            function b(e3, t2) {
              return e3 + 22 + 75 * (e3 < 26) - ((t2 != 0) << 5);
            }
            function x(e3, t2, r2) {
              var n2 = 0;
              for (e3 = r2 ? f(e3 / 700) : e3 >> 1, e3 += f(e3 / t2); e3 > 455; n2 += 36)
                e3 = f(e3 / 35);
              return f(n2 + 36 * e3 / (e3 + 38));
            }
            function w(e3) {
              var t2, r2, n2, i2, o2, a2, s2, l2, c2, h2, p2, d2 = [], y2 = e3.length, v2 = 0, _2 = 128, b2 = 72;
              for ((r2 = e3.lastIndexOf("-")) < 0 && (r2 = 0), n2 = 0; n2 < r2; ++n2)
                e3.charCodeAt(n2) >= 128 && m("not-basic"), d2.push(e3.charCodeAt(n2));
              for (i2 = r2 > 0 ? r2 + 1 : 0; i2 < y2; ) {
                for (o2 = v2, a2 = 1, s2 = 36; i2 >= y2 && m("invalid-input"), ((l2 = (p2 = e3.charCodeAt(i2++)) - 48 < 10 ? p2 - 22 : p2 - 65 < 26 ? p2 - 65 : p2 - 97 < 26 ? p2 - 97 : 36) >= 36 || l2 > f((u - v2) / a2)) && m("overflow"), v2 += l2 * a2, !(l2 < (c2 = s2 <= b2 ? 1 : s2 >= b2 + 26 ? 26 : s2 - b2)); s2 += 36)
                  a2 > f(u / (h2 = 36 - c2)) && m("overflow"), a2 *= h2;
                b2 = x(v2 - o2, t2 = d2.length + 1, o2 == 0), f(v2 / t2) > u - _2 && m("overflow"), _2 += f(v2 / t2), v2 %= t2, d2.splice(v2++, 0, _2);
              }
              return g(d2);
            }
            function E(e3) {
              var t2, r2, n2, i2, o2, a2, s2, l2, c2, h2, p2, y2, v2, g2, w2, E2 = [];
              for (y2 = (e3 = _(e3)).length, t2 = 128, r2 = 0, o2 = 72, a2 = 0; a2 < y2; ++a2)
                (p2 = e3[a2]) < 128 && E2.push(d(p2));
              for (n2 = i2 = E2.length, i2 && E2.push("-"); n2 < y2; ) {
                for (s2 = u, a2 = 0; a2 < y2; ++a2)
                  (p2 = e3[a2]) >= t2 && p2 < s2 && (s2 = p2);
                for (s2 - t2 > f((u - r2) / (v2 = n2 + 1)) && m("overflow"), r2 += (s2 - t2) * v2, t2 = s2, a2 = 0; a2 < y2; ++a2)
                  if ((p2 = e3[a2]) < t2 && ++r2 > u && m("overflow"), p2 == t2) {
                    for (l2 = r2, c2 = 36; !(l2 < (h2 = c2 <= o2 ? 1 : c2 >= o2 + 26 ? 26 : c2 - o2)); c2 += 36)
                      w2 = l2 - h2, g2 = 36 - h2, E2.push(d(b(h2 + w2 % g2, 0))), l2 = f(w2 / g2);
                    E2.push(d(b(l2, 0))), o2 = x(r2, v2, n2 == i2), r2 = 0, ++n2;
                  }
                ++r2, ++t2;
              }
              return E2.join("");
            }
            s = { version: "1.4.1", ucs2: { decode: _, encode: g }, decode: w, encode: E, toASCII: function(e3) {
              return v(e3, function(e4) {
                return c.test(e4) ? "xn--" + E(e4) : e4;
              });
            }, toUnicode: function(e3) {
              return v(e3, function(e4) {
                return l.test(e4) ? w(e4.slice(4).toLowerCase()) : e4;
              });
            } }, (i = function() {
              return s;
            }.call(t, r, t, e2)) === void 0 || (e2.exports = i);
          }();
        }).call(this, r(246)(e), r(78));
      }, function(e, t) {
        e.exports = function(e2) {
          return e2.webpackPolyfill || (e2.deprecate = function() {
          }, e2.paths = [], e2.children || (e2.children = []), Object.defineProperty(e2, "loaded", { enumerable: true, get: function() {
            return e2.l;
          } }), Object.defineProperty(e2, "id", { enumerable: true, get: function() {
            return e2.i;
          } }), e2.webpackPolyfill = 1), e2;
        };
      }, function(e, t, r) {
        "use strict";
        e.exports = { isString: function(e2) {
          return typeof e2 == "string";
        }, isObject: function(e2) {
          return typeof e2 == "object" && e2 !== null;
        }, isNull: function(e2) {
          return e2 === null;
        }, isNullOrUndefined: function(e2) {
          return e2 == null;
        } };
      }, function(e, t, r) {
        "use strict";
        t.decode = t.parse = r(249), t.encode = t.stringify = r(250);
      }, function(e, t, r) {
        "use strict";
        function n(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }
        e.exports = function(e2, t2, r2, o) {
          t2 = t2 || "&", r2 = r2 || "=";
          var a = {};
          if (typeof e2 != "string" || e2.length === 0)
            return a;
          var s = /\+/g;
          e2 = e2.split(t2);
          var u = 1e3;
          o && typeof o.maxKeys == "number" && (u = o.maxKeys);
          var l = e2.length;
          u > 0 && l > u && (l = u);
          for (var c = 0; c < l; ++c) {
            var h, p, f, d, m = e2[c].replace(s, "%20"), y = m.indexOf(r2);
            y >= 0 ? (h = m.substr(0, y), p = m.substr(y + 1)) : (h = m, p = ""), f = decodeURIComponent(h), d = decodeURIComponent(p), n(a, f) ? i(a[f]) ? a[f].push(d) : a[f] = [a[f], d] : a[f] = d;
          }
          return a;
        };
        var i = Array.isArray || function(e2) {
          return Object.prototype.toString.call(e2) === "[object Array]";
        };
      }, function(e, t, r) {
        "use strict";
        var n = function(e2) {
          switch (typeof e2) {
            case "string":
              return e2;
            case "boolean":
              return e2 ? "true" : "false";
            case "number":
              return isFinite(e2) ? e2 : "";
            default:
              return "";
          }
        };
        e.exports = function(e2, t2, r2, s) {
          return t2 = t2 || "&", r2 = r2 || "=", e2 === null && (e2 = void 0), typeof e2 == "object" ? o(a(e2), function(a2) {
            var s2 = encodeURIComponent(n(a2)) + r2;
            return i(e2[a2]) ? o(e2[a2], function(e3) {
              return s2 + encodeURIComponent(n(e3));
            }).join(t2) : s2 + encodeURIComponent(n(e2[a2]));
          }).join(t2) : s ? encodeURIComponent(n(s)) + r2 + encodeURIComponent(n(e2)) : "";
        };
        var i = Array.isArray || function(e2) {
          return Object.prototype.toString.call(e2) === "[object Array]";
        };
        function o(e2, t2) {
          if (e2.map)
            return e2.map(t2);
          for (var r2 = [], n2 = 0; n2 < e2.length; n2++)
            r2.push(t2(e2[n2], n2));
          return r2;
        }
        var a = Object.keys || function(e2) {
          var t2 = [];
          for (var r2 in e2)
            Object.prototype.hasOwnProperty.call(e2, r2) && t2.push(r2);
          return t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(52);
        t.attr_setAnExistingAttributeValue = function(e2, t2) {
          e2._element === null ? e2._value = t2 : n.element_change(e2, e2._element, t2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(108), i = r(30), o = r(52);
        t.tokenList_validationSteps = function(e2, t2) {
          if (!i.dom_hasSupportedTokens(e2._attribute._localName))
            throw new TypeError("There are no supported tokens defined for attribute name: '" + e2._attribute._localName + "'.");
          return i.dom_getSupportedTokens(e2._attribute._localName).has(t2.toLowerCase());
        }, t.tokenList_updateSteps = function(e2) {
          (e2._element.hasAttribute(e2._attribute._localName) || e2._tokenSet.size !== 0) && o.element_setAnAttributeValue(e2._element, e2._attribute._localName, n.orderedSet_serialize(e2._tokenSet));
        }, t.tokenList_serializeSteps = function(e2) {
          return o.element_getAnAttributeValue(e2._element, e2._attribute._localName);
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(1);
        function o(e2) {
          return i.isBoolean(e2) ? e2 : e2.capture || false;
        }
        t.eventTarget_flatten = o, t.eventTarget_flattenMore = function(e2) {
          var t2 = o(e2), r2 = false, n2 = false;
          return i.isBoolean(e2) || (r2 = e2.once || false, n2 = e2.passive || false), [t2, n2, r2];
        }, t.eventTarget_addEventListener = function(e2, t2) {
          if (t2.callback !== null) {
            for (var r2 = 0; r2 < e2._eventListenerList.length; r2++) {
              var n2 = e2._eventListenerList[r2];
              if (n2.type === t2.type && n2.callback.handleEvent === t2.callback.handleEvent && n2.capture === t2.capture)
                return;
            }
            e2._eventListenerList.push(t2);
          }
        }, t.eventTarget_removeEventListener = function(e2, t2, r2) {
          t2.removed = true, e2._eventListenerList.splice(r2, 1);
        }, t.eventTarget_removeAllEventListeners = function(e2) {
          var t2, r2;
          try {
            for (var i2 = n(e2._eventListenerList), o2 = i2.next(); !o2.done; o2 = i2.next()) {
              o2.value.removed = true;
            }
          } catch (e3) {
            t2 = { error: e3 };
          } finally {
            try {
              o2 && !o2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (t2)
                throw t2.error;
            }
          }
          e2._eventListenerList.length = 0;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(1), o = r(29);
        t.parentNode_convertNodesIntoANode = function(e2, t2) {
          for (var r2, a, s = null, u = 0; u < e2.length; u++) {
            var l = e2[u];
            if (i.isString(l)) {
              var c = o.create_text(t2, l);
              e2[u] = c;
            }
          }
          if (e2.length === 1)
            s = e2[0];
          else {
            var h = s = o.create_documentFragment(t2);
            try {
              for (var p = n(e2), f = p.next(); !f.done; f = p.next()) {
                l = f.value;
                h.appendChild(l);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (a = p.return) && a.call(p);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return s;
        };
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, o = this && this.__spread || function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2 = e2.concat(i(arguments[t2]));
          return e2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(2), s = r(9), u = r(3), l = r(29), c = r(17), h = r(175), p = r(107), f = r(176), d = r(37), m = r(177);
        function y(e2) {
          return e2._startNode === e2._endNode && e2._startOffset === e2._endOffset;
        }
        function v(e2) {
          return c.tree_rootNode(e2._startNode);
        }
        function _(e2, t2) {
          return c.tree_rootNode(e2) === v(t2) && h.boundaryPoint_position([e2, 0], t2._start) === a.BoundaryPosition.After && h.boundaryPoint_position([e2, c.tree_nodeLength(e2)], t2._end) === a.BoundaryPosition.Before;
        }
        function g(e2, t2) {
          var r2 = c.tree_isAncestorOf(t2._startNode, e2, true), n2 = c.tree_isAncestorOf(t2._endNode, e2, true);
          return r2 && !n2 || !r2 && n2;
        }
        function b(e2) {
          var t2, r2, i2, a2, h2, m2, v2 = l.create_documentFragment(e2._startNode._nodeDocument);
          if (y(e2))
            return v2;
          var x = e2._startNode, w = e2._startOffset, E = e2._endNode, D = e2._endOffset;
          if (x === E && u.Guard.isCharacterDataNode(x))
            return (R = f.node_clone(x))._data = p.characterData_substringData(x, w, D - w), d.mutation_append(R, v2), p.characterData_replaceData(x, w, D - w, ""), v2;
          for (var S = x; !c.tree_isAncestorOf(E, S, true); ) {
            if (S._parent === null)
              throw new Error("Parent node  is null.");
            S = S._parent;
          }
          var C = null;
          if (!c.tree_isAncestorOf(E, x, true))
            try {
              for (var A = n(S._children), N = A.next(); !N.done; N = A.next()) {
                if (g(k = N.value, e2)) {
                  C = k;
                  break;
                }
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                N && !N.done && (r2 = A.return) && r2.call(A);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
          var T = null;
          if (!c.tree_isAncestorOf(x, E, true))
            for (var O = o(S._children), F = O.length - 1; F > 0; F--) {
              var k;
              if (g(k = O[F], e2)) {
                T = k;
                break;
              }
            }
          var P, I, L = [];
          try {
            for (var M = n(S._children), B = M.next(); !B.done; B = M.next()) {
              if (_(X = B.value, e2)) {
                if (u.Guard.isDocumentTypeNode(X))
                  throw new s.HierarchyRequestError();
                L.push(X);
              }
            }
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              B && !B.done && (a2 = M.return) && a2.call(M);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          if (c.tree_isAncestorOf(E, x, true))
            P = x, I = w;
          else {
            for (var j = x; j._parent !== null && !c.tree_isAncestorOf(E, j._parent); )
              j = j._parent;
            if (j._parent === null)
              throw new Error("Parent node is null.");
            P = j._parent, I = 1 + c.tree_index(j);
          }
          if (u.Guard.isCharacterDataNode(C))
            (R = f.node_clone(x))._data = p.characterData_substringData(x, w, c.tree_nodeLength(x) - w), d.mutation_append(R, v2), p.characterData_replaceData(x, w, c.tree_nodeLength(x) - w, "");
          else if (C !== null) {
            var R = f.node_clone(C);
            d.mutation_append(R, v2);
            var z = b(l.create_range([x, w], [C, c.tree_nodeLength(C)]));
            d.mutation_append(z, R);
          }
          try {
            for (var U = n(L), G = U.next(); !G.done; G = U.next()) {
              var X = G.value;
              d.mutation_append(X, v2);
            }
          } catch (e3) {
            h2 = { error: e3 };
          } finally {
            try {
              G && !G.done && (m2 = U.return) && m2.call(U);
            } finally {
              if (h2)
                throw h2.error;
            }
          }
          if (u.Guard.isCharacterDataNode(T))
            (R = f.node_clone(E))._data = p.characterData_substringData(E, 0, D), d.mutation_append(R, v2), p.characterData_replaceData(E, 0, D, "");
          else if (T !== null) {
            R = f.node_clone(T);
            d.mutation_append(R, v2);
            z = b(l.create_range([T, 0], [E, D]));
            d.mutation_append(z, R);
          }
          return e2._start = [P, I], e2._end = [P, I], v2;
        }
        t.range_collapsed = y, t.range_root = v, t.range_isContained = _, t.range_isPartiallyContained = g, t.range_setTheStart = function(e2, t2, r2) {
          if (u.Guard.isDocumentTypeNode(t2))
            throw new s.InvalidNodeTypeError();
          if (r2 > c.tree_nodeLength(t2))
            throw new s.IndexSizeError();
          var n2 = [t2, r2];
          v(e2) === c.tree_rootNode(t2) && h.boundaryPoint_position(n2, e2._end) !== a.BoundaryPosition.After || (e2._end = n2), e2._start = n2;
        }, t.range_setTheEnd = function(e2, t2, r2) {
          if (u.Guard.isDocumentTypeNode(t2))
            throw new s.InvalidNodeTypeError();
          if (r2 > c.tree_nodeLength(t2))
            throw new s.IndexSizeError();
          var n2 = [t2, r2];
          v(e2) === c.tree_rootNode(t2) && h.boundaryPoint_position(n2, e2._start) !== a.BoundaryPosition.Before || (e2._start = n2), e2._end = n2;
        }, t.range_select = function(e2, t2) {
          var r2 = e2._parent;
          if (r2 === null)
            throw new s.InvalidNodeTypeError();
          var n2 = c.tree_index(e2);
          t2._start = [r2, n2], t2._end = [r2, n2 + 1];
        }, t.range_extract = b, t.range_cloneTheContents = function e2(t2) {
          var r2, i2, a2, h2, m2, v2, x = l.create_documentFragment(t2._startNode._nodeDocument);
          if (y(t2))
            return x;
          var w = t2._startNode, E = t2._startOffset, D = t2._endNode, S = t2._endOffset;
          w === D && u.Guard.isCharacterDataNode(w) && ((B = f.node_clone(w))._data = p.characterData_substringData(w, E, S - E), d.mutation_append(B, x));
          for (var C = w; !c.tree_isAncestorOf(D, C, true); ) {
            if (C._parent === null)
              throw new Error("Parent node  is null.");
            C = C._parent;
          }
          var A = null;
          if (!c.tree_isAncestorOf(D, w, true))
            try {
              for (var N = n(C._children), T = N.next(); !T.done; T = N.next()) {
                if (g(P = T.value, t2)) {
                  A = P;
                  break;
                }
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                T && !T.done && (i2 = N.return) && i2.call(N);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          var O = null;
          if (!c.tree_isAncestorOf(w, D, true))
            for (var F = o(C._children), k = F.length - 1; k > 0; k--) {
              var P;
              if (g(P = F[k], t2)) {
                O = P;
                break;
              }
            }
          var I = [];
          try {
            for (var L = n(C._children), M = L.next(); !M.done; M = L.next()) {
              if (_(U = M.value, t2)) {
                if (u.Guard.isDocumentTypeNode(U))
                  throw new s.HierarchyRequestError();
                I.push(U);
              }
            }
          } catch (e3) {
            a2 = { error: e3 };
          } finally {
            try {
              M && !M.done && (h2 = L.return) && h2.call(L);
            } finally {
              if (a2)
                throw a2.error;
            }
          }
          if (u.Guard.isCharacterDataNode(A))
            (B = f.node_clone(w))._data = p.characterData_substringData(w, E, c.tree_nodeLength(w) - E), d.mutation_append(B, x);
          else if (A !== null) {
            var B = f.node_clone(A);
            d.mutation_append(B, x);
            var j = e2(l.create_range([w, E], [A, c.tree_nodeLength(A)]));
            d.mutation_append(j, B);
          }
          try {
            for (var R = n(I), z = R.next(); !z.done; z = R.next()) {
              var U = z.value, B = f.node_clone(U);
              d.mutation_append(B, x);
            }
          } catch (e3) {
            m2 = { error: e3 };
          } finally {
            try {
              z && !z.done && (v2 = R.return) && v2.call(R);
            } finally {
              if (m2)
                throw m2.error;
            }
          }
          if (u.Guard.isCharacterDataNode(O))
            (B = f.node_clone(D))._data = p.characterData_substringData(D, 0, S), d.mutation_append(B, x);
          else if (O !== null) {
            B = f.node_clone(O);
            x.append(B);
            j = b(l.create_range([O, 0], [D, S]));
            d.mutation_append(j, B);
          }
          return x;
        }, t.range_insert = function(e2, t2) {
          var r2, i2;
          if (u.Guard.isProcessingInstructionNode(t2._startNode) || u.Guard.isCommentNode(t2._startNode) || u.Guard.isTextNode(t2._startNode) && t2._startNode._parent === null || t2._startNode === e2)
            throw new s.HierarchyRequestError();
          var o2, a2 = null;
          if (u.Guard.isTextNode(t2._startNode))
            a2 = t2._startNode;
          else {
            var l2 = 0;
            try {
              for (var h2 = n(t2._startNode._children), p2 = h2.next(); !p2.done; p2 = h2.next()) {
                var f2 = p2.value;
                if (l2 === t2._startOffset) {
                  a2 = f2;
                  break;
                }
                l2++;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                p2 && !p2.done && (i2 = h2.return) && i2.call(h2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          if (a2 === null)
            o2 = t2._startNode;
          else {
            if (a2._parent === null)
              throw new Error("Parent node is null.");
            o2 = a2._parent;
          }
          d.mutation_ensurePreInsertionValidity(e2, o2, a2), u.Guard.isTextNode(t2._startNode) && (a2 = m.text_split(t2._startNode, t2._startOffset)), e2 === a2 && (a2 = e2._nextSibling), e2._parent !== null && d.mutation_remove(e2, e2._parent);
          var v2 = a2 === null ? c.tree_nodeLength(o2) : c.tree_index(a2);
          u.Guard.isDocumentFragmentNode(e2) ? v2 += c.tree_nodeLength(e2) : v2++, d.mutation_preInsert(e2, o2, a2), y(t2) && (t2._end = [o2, v2]);
        }, t.range_getContainedNodes = function(e2) {
          var t2;
          return (t2 = {})[Symbol.iterator] = function() {
            var t3 = e2.commonAncestorContainer, r2 = c.tree_getFirstDescendantNode(t3);
            return { next: function() {
              for (; r2 && !_(r2, e2); )
                r2 = c.tree_getNextDescendantNode(t3, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c.tree_getNextDescendantNode(t3, r2), n2;
            } };
          }, t2;
        }, t.range_getPartiallyContainedNodes = function(e2) {
          var t2;
          return (t2 = {})[Symbol.iterator] = function() {
            var t3 = e2.commonAncestorContainer, r2 = c.tree_getFirstDescendantNode(t3);
            return { next: function() {
              for (; r2 && !g(r2, e2); )
                r2 = c.tree_getNextDescendantNode(t3, r2);
              if (r2 === null)
                return { done: true, value: null };
              var n2 = { done: false, value: r2 };
              return r2 = c.tree_getNextDescendantNode(t3, r2), n2;
            } };
          }, t2;
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(9);
        t.selectors_scopeMatchASelectorsString = function(e2, t2) {
          throw new n.NotSupportedError();
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(2), i = r(105);
        t.treeWalker_traverseChildren = function(e2, t2) {
          for (var r2 = t2 ? e2._current._firstChild : e2._current._lastChild; r2 !== null; ) {
            var o = i.traversal_filter(e2, r2);
            if (o === n.FilterResult.Accept)
              return e2._current = r2, r2;
            if (o === n.FilterResult.Skip) {
              var a = t2 ? r2._firstChild : r2._lastChild;
              if (a !== null) {
                r2 = a;
                continue;
              }
            }
            for (; r2 !== null; ) {
              var s = t2 ? r2._nextSibling : r2._previousSibling;
              if (s !== null) {
                r2 = s;
                break;
              }
              var u = r2._parent;
              if (u === null || u === e2._root || u === e2._current)
                return null;
              r2 = u;
            }
          }
          return null;
        }, t.treeWalker_traverseSiblings = function(e2, t2) {
          var r2 = e2._current;
          if (r2 === e2._root)
            return null;
          for (; ; ) {
            for (var o = t2 ? r2._nextSibling : r2._previousSibling; o !== null; ) {
              r2 = o;
              var a = i.traversal_filter(e2, r2);
              if (a === n.FilterResult.Accept)
                return e2._current = r2, r2;
              o = t2 ? r2._firstChild : r2._lastChild, a !== n.FilterResult.Reject && o !== null || (o = t2 ? r2._nextSibling : r2._previousSibling);
            }
            if ((r2 = r2._parent) === null || r2 === e2._root)
              return null;
            if (i.traversal_filter(e2, r2) === n.FilterResult.Accept)
              return null;
          }
        };
      }, function(e, t, r) {
        "use strict";
        r(89), r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(1), a = r(2), s = r(50), u = r(3), l = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._indentation = {}, n2._lengthToLastNewline = 0, n2._writerOptions = o.applyDefaults(r2, { wellFormed: false, headless: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, indentTextOnlyNodes: false, spaceBeforeSlash: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            return this._refs = { suppressPretty: false, emptyNode: false, markup: "" }, e3.nodeType !== a.NodeType.Document || this._writerOptions.headless || this.declaration(this._builderOptions.version, this._builderOptions.encoding, this._builderOptions.standalone), this.serializeNode(e3, this._writerOptions.wellFormed), this._writerOptions.prettyPrint && this._refs.markup.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (this._refs.markup = this._refs.markup.slice(0, -this._writerOptions.newline.length)), this._refs.markup;
          }, t2.prototype.declaration = function(e3, t3, r2) {
            this._beginLine(), this._refs.markup += '<?xml version="' + e3 + '"', t3 !== void 0 && (this._refs.markup += ' encoding="' + t3 + '"'), r2 !== void 0 && (this._refs.markup += ' standalone="' + (r2 ? "yes" : "no") + '"'), this._refs.markup += "?>", this._endLine();
          }, t2.prototype.docType = function(e3, t3, r2) {
            this._beginLine(), this._refs.markup += t3 && r2 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '" "' + r2 + '">' : t3 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '">' : r2 ? "<!DOCTYPE " + e3 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e3 + ">", this._endLine();
          }, t2.prototype.openTagBegin = function(e3) {
            this._beginLine(), this._refs.markup += "<" + e3;
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            if (this._refs.suppressPretty = false, this._refs.emptyNode = false, this._writerOptions.prettyPrint && !t3 && !r2) {
              for (var n2 = true, i2 = true, o2 = this.currentNode.firstChild, a2 = 0, s2 = 0; o2; ) {
                if (u.Guard.isExclusiveTextNode(o2))
                  s2++;
                else {
                  if (!u.Guard.isCDATASectionNode(o2)) {
                    n2 = false, i2 = false;
                    break;
                  }
                  a2++;
                }
                o2.data !== "" && (i2 = false), o2 = o2.nextSibling;
              }
              this._refs.suppressPretty = !this._writerOptions.indentTextOnlyNodes && n2 && (a2 <= 1 && s2 === 0 || a2 === 0), this._refs.emptyNode = i2;
            }
            (r2 || t3 || this._refs.emptyNode) && this._writerOptions.allowEmptyTags ? this._refs.markup += "></" + e3 + ">" : this._refs.markup += r2 ? " />" : t3 || this._refs.emptyNode ? this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">", this._endLine();
          }, t2.prototype.closeTag = function(e3) {
            this._refs.emptyNode || (this._beginLine(), this._refs.markup += "</" + e3 + ">"), this._refs.suppressPretty = false, this._refs.emptyNode = false, this._endLine();
          }, t2.prototype.attribute = function(e3, t3) {
            var r2 = e3 + '="' + t3 + '"';
            this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._refs.markup.length - this._lengthToLastNewline + 1 + r2.length > this._writerOptions.width ? (this._endLine(), this._beginLine(), this._refs.markup += this._indent(1) + r2) : this._refs.markup += " " + r2;
          }, t2.prototype.text = function(e3) {
            e3 !== "" && (this._beginLine(), this._refs.markup += e3, this._endLine());
          }, t2.prototype.cdata = function(e3) {
            e3 !== "" && (this._beginLine(), this._refs.markup += "<![CDATA[" + e3 + "]]>", this._endLine());
          }, t2.prototype.comment = function(e3) {
            this._beginLine(), this._refs.markup += "<!--" + e3 + "-->", this._endLine();
          }, t2.prototype.instruction = function(e3, t3) {
            this._beginLine(), this._refs.markup += "<?" + (t3 === "" ? e3 : e3 + " " + t3) + "?>", this._endLine();
          }, t2.prototype._beginLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._indent(this._writerOptions.offset + this.level));
          }, t2.prototype._endLine = function() {
            this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._writerOptions.newline, this._lengthToLastNewline = this._refs.markup.length);
          }, t2.prototype._indent = function(e3) {
            if (e3 <= 0)
              return "";
            if (this._indentation[e3] !== void 0)
              return this._indentation[e3];
            var t3 = this._writerOptions.indent.repeat(e3);
            return this._indentation[e3] = t3, t3;
          }, t2;
        }(s.BaseWriter);
        t.XMLWriter = l;
      }, function(e, t, r) {
        "use strict";
        var n = r(47), i = r(35);
        e.exports = "".repeat || function(e2) {
          var t2 = String(i(this)), r2 = "", o = n(e2);
          if (o < 0 || o == 1 / 0)
            throw RangeError("Wrong number of repetitions");
          for (; o > 0; (o >>>= 1) && (t2 += t2))
            1 & o && (r2 += t2);
          return r2;
        };
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(67), s = r(1), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            return n2._writerOptions = s.applyDefaults(r2, { wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            var t3 = s.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3);
            return this._beginLine(this._writerOptions, 0) + this._convertObject(r2, this._writerOptions);
          }, t2.prototype._convertObject = function(e3, t3, r2) {
            var n2, i2, a2 = this;
            r2 === void 0 && (r2 = 0);
            var u2 = "", l = this._isLeafNode(e3);
            if (s.isArray(e3)) {
              u2 += "[";
              var c = e3.length, h = 0;
              try {
                for (var p = o(e3), f = p.next(); !f.done; f = p.next()) {
                  var d = f.value;
                  u2 += this._endLine(t3, r2 + 1) + this._beginLine(t3, r2 + 1) + this._convertObject(d, t3, r2 + 1), h < c - 1 && (u2 += ","), h++;
                }
              } catch (e4) {
                n2 = { error: e4 };
              } finally {
                try {
                  f && !f.done && (i2 = p.return) && i2.call(p);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              u2 += this._endLine(t3, r2) + this._beginLine(t3, r2), u2 += "]";
            } else if (s.isObject(e3)) {
              u2 += "{";
              var m = s.objectLength(e3), y = 0;
              s.forEachObject(e3, function(e4, n3) {
                l && t3.prettyPrint ? u2 += " " : u2 += a2._endLine(t3, r2 + 1) + a2._beginLine(t3, r2 + 1), u2 += a2._key(e4), t3.prettyPrint && (u2 += " "), u2 += a2._convertObject(n3, t3, r2 + 1), y < m - 1 && (u2 += ","), y++;
              }, this), l && t3.prettyPrint ? u2 += " " : u2 += this._endLine(t3, r2) + this._beginLine(t3, r2), u2 += "}";
            } else
              u2 += this._val(e3);
            return u2;
          }, t2.prototype._beginLine = function(e3, t3) {
            if (!e3.prettyPrint)
              return "";
            var r2 = e3.offset + t3 + 1;
            return r2 > 0 ? new Array(r2).join(e3.indent) : "";
          }, t2.prototype._endLine = function(e3, t3) {
            return e3.prettyPrint ? e3.newline : "";
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2.prototype._isLeafNode = function(e3) {
            return this._descendantCount(e3) <= 1;
          }, t2.prototype._descendantCount = function(e3, t3) {
            var r2 = this;
            return t3 === void 0 && (t3 = 0), s.isArray(e3) ? s.forEachArray(e3, function(e4) {
              return t3 += r2._descendantCount(e4, t3);
            }, this) : s.isObject(e3) ? s.forEachObject(e3, function(e4, n2) {
              return t3 += r2._descendantCount(n2, t3);
            }, this) : t3++, t3;
          }, t2;
        }(r(50).BaseWriter);
        t.JSONWriter = u;
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(178), r(89), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var a = r(67), s = r(1), u = function(e2) {
          function t2(t3, r2) {
            var n2 = e2.call(this, t3) || this;
            if (n2._writerOptions = s.applyDefaults(r2, { wellFormed: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2._writerOptions.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (n2._writerOptions.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return n2;
          }
          return i(t2, e2), t2.prototype.serialize = function(e3) {
            var t3 = s.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3), n2 = this._beginLine(this._writerOptions, 0) + "---" + this._endLine(this._writerOptions) + this._convertObject(r2, this._writerOptions, 0);
            return n2.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (n2 = n2.slice(0, -this._writerOptions.newline.length)), n2;
          }, t2.prototype._convertObject = function(e3, t3, r2, n2) {
            var i2, a2, u2 = this;
            n2 === void 0 && (n2 = false);
            var l = "";
            if (s.isArray(e3))
              try {
                for (var c = o(e3), h = c.next(); !h.done; h = c.next()) {
                  var p = h.value;
                  l += this._beginLine(t3, r2, true), s.isObject(p) ? s.isEmpty(p) ? l += '""' + this._endLine(t3) : l += this._convertObject(p, t3, r2, true) : l += this._val(p) + this._endLine(t3);
                }
              } catch (e4) {
                i2 = { error: e4 };
              } finally {
                try {
                  h && !h.done && (a2 = c.return) && a2.call(c);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
            else
              s.forEachObject(e3, function(e4, i3) {
                n2 ? (l += u2._key(e4), n2 = false) : l += u2._beginLine(t3, r2) + u2._key(e4), s.isObject(i3) ? s.isEmpty(i3) ? l += ' ""' + u2._endLine(t3) : l += u2._endLine(t3) + u2._convertObject(i3, t3, r2 + 1) : l += " " + u2._val(i3) + u2._endLine(t3);
              }, this);
            return l;
          }, t2.prototype._beginLine = function(e3, t3, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e3.offset + t3 + 1, i2 = new Array(n2).join(e3.indent);
            return r2 ? i2.substr(0, i2.length - 2) + "-" + i2.substr(-1, 1) : i2;
          }, t2.prototype._endLine = function(e3) {
            return e3.newline;
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2;
        }(r(50).BaseWriter);
        t.YAMLWriter = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true }), r(110).dom.setFeatures(true);
        var n = r(110);
        t.DOMImplementation = n.DOMImplementation;
        var i = r(271);
        t.DOMParser = i.DOMParser;
        var o = r(274);
        t.XMLSerializer = o.XMLSerializer;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(3), i = r(0), o = function() {
          function e2() {
          }
          return e2.prototype.before = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2 !== null) {
              for (var a = r2._previousSibling, s = true; s && a; ) {
                s = false;
                for (var u = 0; u < e3.length; u++) {
                  var l = e3[u];
                  if (l === a) {
                    a = a._previousSibling, s = true;
                    break;
                  }
                }
              }
              var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              a = a === null ? o2._firstChild : a._nextSibling, i.mutation_preInsert(c, o2, a);
            }
          }, e2.prototype.after = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a = r2._nextSibling, s = true; s && a; ) {
                s = false;
                for (var u = 0; u < e3.length; u++) {
                  var l = e3[u];
                  if (l === a) {
                    a = a._nextSibling, s = true;
                    break;
                  }
                }
              }
              var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              i.mutation_preInsert(c, o2, a);
            }
          }, e2.prototype.replaceWith = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = n.Cast.asNode(this), o2 = r2._parent;
            if (o2) {
              for (var a = r2._nextSibling, s = true; s && a; ) {
                s = false;
                for (var u = 0; u < e3.length; u++) {
                  var l = e3[u];
                  if (l === a) {
                    a = a._nextSibling, s = true;
                    break;
                  }
                }
              }
              var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              r2._parent === o2 ? i.mutation_replace(r2, c, o2) : i.mutation_preInsert(c, o2, a);
            }
          }, e2.prototype.remove = function() {
            var e3 = n.Cast.asNode(this), t2 = e3._parent;
            t2 && i.mutation_remove(e3, t2);
          }, e2;
        }();
        t.ChildNodeImpl = o;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = function() {
        };
        t.DocumentOrShadowRootImpl = n;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(6), o = r(3), a = r(7), s = function() {
          function e2(e3) {
            this._nodeList = [], this._recordQueue = [], this._callback = e3;
            var t2 = i.dom.window;
            a.set.append(t2._mutationObservers, this);
          }
          return e2.prototype.observe = function(e3, t2) {
            var r2, i2;
            if ((t2 = t2 || { childList: false, subtree: false }).attributeOldValue === void 0 && t2.attributeFilter === void 0 || t2.attributes !== void 0 || (t2.attributes = true), t2.characterDataOldValue !== void 0 && t2.characterData === void 0 && (t2.characterData = true), !t2.childList && !t2.attributes && !t2.characterData)
              throw new TypeError();
            if (t2.attributeOldValue && !t2.attributes)
              throw new TypeError();
            if (t2.attributeFilter !== void 0 && !t2.attributes)
              throw new TypeError();
            if (t2.characterDataOldValue && !t2.characterData)
              throw new TypeError();
            var s2 = false, u = t2, l = function(e4) {
              var t3, r3;
              if (e4.observer === c) {
                s2 = true;
                try {
                  for (var i3 = (t3 = void 0, n(c._nodeList)), l2 = i3.next(); !l2.done; l2 = i3.next()) {
                    var h2 = l2.value;
                    a.list.remove(h2._registeredObserverList, function(t4) {
                      return o.Guard.isTransientRegisteredObserver(t4) && t4.source === e4;
                    });
                  }
                } catch (e5) {
                  t3 = { error: e5 };
                } finally {
                  try {
                    l2 && !l2.done && (r3 = i3.return) && r3.call(i3);
                  } finally {
                    if (t3)
                      throw t3.error;
                  }
                }
                e4.options = u;
              }
            }, c = this;
            try {
              for (var h = n(e3._registeredObserverList), p = h.next(); !p.done; p = h.next()) {
                l(p.value);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                p && !p.done && (i2 = h.return) && i2.call(h);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            s2 || (e3._registeredObserverList.push({ observer: this, options: t2 }), this._nodeList.push(e3));
          }, e2.prototype.disconnect = function() {
            var e3, t2, r2 = this;
            try {
              for (var i2 = n(this._nodeList), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var s2 = o2.value;
                a.list.remove(s2._registeredObserverList, function(e4) {
                  return e4.observer === r2;
                });
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                o2 && !o2.done && (t2 = i2.return) && t2.call(i2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            this._recordQueue = [];
          }, e2.prototype.takeRecords = function() {
            var e3 = this._recordQueue;
            return this._recordQueue = [], e3;
          }, e2;
        }();
        t.MutationObserverImpl = s;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(3), i = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "previousElementSibling", { get: function() {
            for (var e3 = n.Cast.asNode(this)._previousSibling; e3; ) {
              if (n.Guard.isElementNode(e3))
                return e3;
              e3 = e3._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "nextElementSibling", { get: function() {
            for (var e3 = n.Cast.asNode(this)._nextSibling; e3; ) {
              if (n.Guard.isElementNode(e3))
                return e3;
              e3 = e3._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), e2;
        }();
        t.NonDocumentTypeChildNodeImpl = i;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(3), i = r(0), o = function() {
          function e2() {
          }
          return e2.prototype.getElementById = function(e3) {
            for (var t2 = i.tree_getFirstDescendantNode(n.Cast.asNode(this), false, false, function(e4) {
              return n.Guard.isElementNode(e4);
            }); t2 !== null; ) {
              if (t2._uniqueIdentifier === e3)
                return t2;
              t2 = i.tree_getNextDescendantNode(n.Cast.asNode(this), t2, false, false, function(e4) {
                return n.Guard.isElementNode(e4);
              });
            }
            return null;
          }, e2;
        }();
        t.NonElementParentNodeImpl = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(3), o = r(0), a = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "children", { get: function() {
            return o.create_htmlCollection(i.Cast.asNode(this));
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "firstElementChild", { get: function() {
            for (var e3 = i.Cast.asNode(this)._firstChild; e3; ) {
              if (i.Guard.isElementNode(e3))
                return e3;
              e3 = e3._nextSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "lastElementChild", { get: function() {
            for (var e3 = i.Cast.asNode(this)._lastChild; e3; ) {
              if (i.Guard.isElementNode(e3))
                return e3;
              e3 = e3._previousSibling;
            }
            return null;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "childElementCount", { get: function() {
            var e3, t2, r2 = 0;
            try {
              for (var o2 = n(i.Cast.asNode(this)._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s = a2.value;
                i.Guard.isElementNode(s) && r2++;
              }
            } catch (t3) {
              e3 = { error: t3 };
            } finally {
              try {
                a2 && !a2.done && (t2 = o2.return) && t2.call(o2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return r2;
          }, enumerable: true, configurable: true }), e2.prototype.prepend = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = i.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
            o.mutation_preInsert(n2, r2, r2._firstChild);
          }, e2.prototype.append = function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var r2 = i.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
            o.mutation_append(n2, r2);
          }, e2.prototype.querySelector = function(e3) {
            var t2 = i.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e3, t2);
            return r2.length === 0 ? null : r2[0];
          }, e2.prototype.querySelectorAll = function(e3) {
            var t2 = i.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e3, t2);
            return o.create_nodeListStatic(t2, r2);
          }, e2;
        }();
        t.ParentNodeImpl = a;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(0), i = function() {
          function e2() {
          }
          return Object.defineProperty(e2.prototype, "_name", { get: function() {
            return this.__name || "";
          }, set: function(e3) {
            this.__name = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_assignedSlot", { get: function() {
            return this.__assignedSlot || null;
          }, set: function(e3) {
            this.__assignedSlot = e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "assignedSlot", { get: function() {
            return n.shadowTree_findASlot(this, true);
          }, enumerable: true, configurable: true }), e2;
        }();
        t.SlotableImpl = i;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(102), a = r(9), s = r(3), u = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this) || this;
            if (s.Guard.isDocumentTypeNode(t3.startContainer) || s.Guard.isAttrNode(t3.startContainer) || s.Guard.isDocumentTypeNode(t3.endContainer) || s.Guard.isAttrNode(t3.endContainer))
              throw new a.InvalidNodeTypeError();
            return r2._start = [t3.startContainer, t3.startOffset], r2._end = [t3.endContainer, t3.endOffset], r2;
          }
          return i(t2, e2), t2;
        }(o.AbstractRangeImpl);
        t.StaticRangeImpl = u;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(272);
        t.DOMParser = n.DOMParserImpl;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(0), i = r(273), o = function() {
          function e2() {
          }
          return e2.prototype.parseFromString = function(e3, t2) {
            if (t2 === "text/html")
              throw new Error("HTML parser not implemented.");
            try {
              return (r2 = new i.XMLParserImpl().parse(e3))._contentType = t2, r2;
            } catch (e4) {
              var r2, o2 = "http://www.mozilla.org/newlayout/xml/parsererror.xml", a = (r2 = n.create_xmlDocument()).createElementNS(o2, "parsererror"), s = r2.createElementNS(o2, "error");
              return s.setAttribute("message", e4.message), a.appendChild(s), r2.appendChild(a), r2;
            }
          }, e2;
        }();
        t.DOMParserImpl = o;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, i = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(180), a = r(111), s = r(7), u = r(0), l = r(69), c = function() {
          function e2() {
          }
          return e2.prototype.parse = function(e3) {
            for (var t2, r2, c2, h, p = new o.XMLStringLexer(e3, { skipWhitespaceOnlyText: true }), f = u.create_document(), d = f, m = p.nextToken(); m.type !== a.TokenType.EOF; ) {
              switch (m.type) {
                case a.TokenType.Declaration:
                  var y = m;
                  if (y.version !== "1.0")
                    throw new Error("Invalid xml version: " + y.version);
                  break;
                case a.TokenType.DocType:
                  var v = m;
                  if (!u.xml_isPubidChar(v.pubId))
                    throw new Error("DocType public identifier does not match PubidChar construct.");
                  if (!u.xml_isLegalChar(v.sysId) || v.sysId.indexOf('"') !== -1 && v.sysId.indexOf("'") !== -1)
                    throw new Error("DocType system identifier contains invalid characters.");
                  d.appendChild(f.implementation.createDocumentType(v.name, v.pubId, v.sysId));
                  break;
                case a.TokenType.CDATA:
                  var _ = m;
                  if (!u.xml_isLegalChar(_.data) || _.data.indexOf("]]>") !== -1)
                    throw new Error("CDATA contains invalid characters.");
                  d.appendChild(f.createCDATASection(_.data));
                  break;
                case a.TokenType.Comment:
                  var g = m;
                  if (!u.xml_isLegalChar(g.data) || g.data.indexOf("--") !== -1 || g.data.endsWith("-"))
                    throw new Error("Comment data contains invalid characters.");
                  d.appendChild(f.createComment(g.data));
                  break;
                case a.TokenType.PI:
                  var b = m;
                  if (b.target.indexOf(":") !== -1 || /^xml$/i.test(b.target))
                    throw new Error("Processing instruction target contains invalid characters.");
                  if (!u.xml_isLegalChar(b.data) || b.data.indexOf("?>") !== -1)
                    throw new Error("Processing instruction data contains invalid characters.");
                  d.appendChild(f.createProcessingInstruction(b.target, b.data));
                  break;
                case a.TokenType.Text:
                  var x = m;
                  if (!u.xml_isLegalChar(x.data))
                    throw new Error("Text data contains invalid characters.");
                  d.appendChild(f.createTextNode(this._decodeText(x.data)));
                  break;
                case a.TokenType.Element:
                  var w = m, E = n(u.namespace_extractQName(w.name), 2), D = E[0], S = E[1];
                  if (S.indexOf(":") !== -1 || !u.xml_isName(S))
                    throw new Error("Node local name contains invalid characters.");
                  if (D === "xmlns")
                    throw new Error("An element cannot have the 'xmlns' prefix.");
                  var C = d.lookupNamespaceURI(D), A = {};
                  try {
                    for (var N = (t2 = void 0, i(w.attributes)), T = N.next(); !T.done; T = N.next()) {
                      var O = n(T.value, 2), F = O[0], k = O[1];
                      if (F === "xmlns")
                        C = k;
                      else {
                        var P = n(u.namespace_extractQName(F), 2), I = P[0], L = P[1];
                        I === "xmlns" && (L === D && (C = k), A[L] = k);
                      }
                    }
                  } catch (e4) {
                    t2 = { error: e4 };
                  } finally {
                    try {
                      T && !T.done && (r2 = N.return) && r2.call(N);
                    } finally {
                      if (t2)
                        throw t2.error;
                    }
                  }
                  var M = C !== null ? f.createElementNS(C, w.name) : f.createElement(w.name);
                  d.appendChild(M);
                  var B = new l.LocalNameSet();
                  try {
                    for (var j = (c2 = void 0, i(w.attributes)), R = j.next(); !R.done; R = j.next()) {
                      var z = n(R.value, 2), U = (F = z[0], k = z[1], n(u.namespace_extractQName(F), 2)), G = (I = U[0], L = U[1], null);
                      if (I === "xmlns" || I === null && L === "xmlns" ? G = s.namespace.XMLNS : (G = M.lookupNamespaceURI(I)) !== null && M.isDefaultNamespace(G) ? G = null : G === null && I !== null && (G = A[I] || null), B.has(G, L))
                        throw new Error("Element contains duplicate attributes.");
                      if (B.set(G, L), G === s.namespace.XMLNS && k === s.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved.");
                      if (L.indexOf(":") !== -1 || !u.xml_isName(L))
                        throw new Error("Attribute local name contains invalid characters.");
                      if (I === "xmlns" && k === "")
                        throw new Error("Empty XML namespace is not allowed.");
                      G !== null ? M.setAttributeNS(G, F, this._decodeAttributeValue(k)) : M.setAttribute(F, this._decodeAttributeValue(k));
                    }
                  } catch (e4) {
                    c2 = { error: e4 };
                  } finally {
                    try {
                      R && !R.done && (h = j.return) && h.call(j);
                    } finally {
                      if (c2)
                        throw c2.error;
                    }
                  }
                  w.selfClosing || (d = M);
                  break;
                case a.TokenType.ClosingTag:
                  if (m.name !== d.nodeName)
                    throw new Error("Closing tag name does not match opening tag name.");
                  d._parent && (d = d._parent);
              }
              m = p.nextToken();
            }
            return f;
          }, e2.prototype._decodeText = function(e3) {
            return e3 == null ? e3 : e3.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e2.prototype._decodeAttributeValue = function(e3) {
            return e3 == null ? e3 : e3.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
          }, e2;
        }();
        t.XMLParserImpl = c;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(275);
        t.XMLSerializer = n.XMLSerializerImpl;
      }, function(e, t, r) {
        "use strict";
        var n = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(2), o = r(69), a = r(95), s = r(9), u = r(7), l = r(0), c = function() {
          function e2() {
          }
          return e2.prototype.serializeToString = function(e3) {
            return this._xmlSerialization(e3, false);
          }, e2.prototype._xmlSerialization = function(e3, t2) {
            if (e3._nodeDocument === void 0 || e3._nodeDocument._hasNamespaces) {
              var r2 = new a.NamespacePrefixMap();
              r2.set("xml", u.namespace.XML);
              try {
                return this._serializeNodeNS(e3, null, r2, { value: 1 }, t2);
              } catch (e4) {
                throw new s.InvalidStateError();
              }
            } else
              try {
                return this._serializeNode(e3, t2);
              } catch (e4) {
                throw new s.InvalidStateError();
              }
          }, e2.prototype._serializeNodeNS = function(e3, t2, r2, n2, o2) {
            switch (e3.nodeType) {
              case i.NodeType.Element:
                return this._serializeElementNS(e3, t2, r2, n2, o2);
              case i.NodeType.Document:
                return this._serializeDocumentNS(e3, t2, r2, n2, o2);
              case i.NodeType.Comment:
                return this._serializeComment(e3, o2);
              case i.NodeType.Text:
                return this._serializeText(e3, o2);
              case i.NodeType.DocumentFragment:
                return this._serializeDocumentFragmentNS(e3, t2, r2, n2, o2);
              case i.NodeType.DocumentType:
                return this._serializeDocumentType(e3, o2);
              case i.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e3, o2);
              case i.NodeType.CData:
                return this._serializeCData(e3, o2);
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeNode = function(e3, t2) {
            switch (e3.nodeType) {
              case i.NodeType.Element:
                return this._serializeElement(e3, t2);
              case i.NodeType.Document:
                return this._serializeDocument(e3, t2);
              case i.NodeType.Comment:
                return this._serializeComment(e3, t2);
              case i.NodeType.Text:
                return this._serializeText(e3, t2);
              case i.NodeType.DocumentFragment:
                return this._serializeDocumentFragment(e3, t2);
              case i.NodeType.DocumentType:
                return this._serializeDocumentType(e3, t2);
              case i.NodeType.ProcessingInstruction:
                return this._serializeProcessingInstruction(e3, t2);
              case i.NodeType.CData:
                return this._serializeCData(e3, t2);
              default:
                throw new Error("Unknown node type: " + e3.nodeType);
            }
          }, e2.prototype._serializeElementNS = function(t2, r2, i2, o2, a2) {
            var s2, c2;
            if (a2 && (t2.localName.indexOf(":") !== -1 || !l.xml_isName(t2.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var h = "<", p = "", f = false, d = false, m = i2.copy(), y = {}, v = this._recordNamespaceInformation(t2, m, y), _ = r2, g = t2.namespaceURI;
            if (_ === g)
              v !== null && (d = true), h += p = g === u.namespace.XML ? "xml:" + t2.localName : t2.localName;
            else {
              var b = t2.prefix, x = null;
              if (b === null && g === v || (x = m.get(b, g)), b === "xmlns") {
                if (a2)
                  throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                x = b;
              }
              x !== null ? (p = x + ":" + t2.localName, v !== null && v !== u.namespace.XML && (_ = v || null), h += p) : b !== null ? (b in y && (b = this._generatePrefix(g, m, o2)), m.set(b, g), h += p += b + ":" + t2.localName, h += " xmlns:" + b + '="' + this._serializeAttributeValue(g, a2) + '"', v !== null && (_ = v || null)) : v === null || v !== null && v !== g ? (d = true, _ = g, h += p += t2.localName, h += ' xmlns="' + this._serializeAttributeValue(g, a2) + '"') : (_ = g, h += p += t2.localName);
            }
            h += this._serializeAttributesNS(t2, m, o2, y, d, a2);
            var w = g === u.namespace.HTML;
            if (w && t2.childNodes.length === 0 && e2._VoidElementNames.has(t2.localName) ? (h += " /", f = true) : w || t2.childNodes.length !== 0 || (h += "/", f = true), h += ">", f)
              return h;
            if (w && t2.localName === "template")
              ;
            else
              try {
                for (var E = n(t2._children || t2.childNodes), D = E.next(); !D.done; D = E.next()) {
                  var S = D.value;
                  h += this._serializeNodeNS(S, _, m, o2, a2);
                }
              } catch (e3) {
                s2 = { error: e3 };
              } finally {
                try {
                  D && !D.done && (c2 = E.return) && c2.call(E);
                } finally {
                  if (s2)
                    throw s2.error;
                }
              }
            return h += "</" + p + ">";
          }, e2.prototype._serializeDocumentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2;
            if (o2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var u2 = "";
            try {
              for (var l2 = n(e3._children || e3.childNodes), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                var h = c2.value;
                u2 += this._serializeNodeNS(h, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (s2 = l2.return) && s2.call(l2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
            return u2;
          }, e2.prototype._serializeComment = function(e3, t2) {
            if (t2 && (!l.xml_isLegalChar(e3.data) || e3.data.indexOf("--") !== -1 || e3.data.endsWith("-")))
              throw new Error("Comment data contains invalid characters (well-formed required).");
            return "<!--" + e3.data + "-->";
          }, e2.prototype._serializeText = function(e3, t2) {
            if (t2 && !l.xml_isLegalChar(e3.data))
              throw new Error("Text data contains invalid characters (well-formed required).");
            for (var r2 = "", n2 = 0; n2 < e3.data.length; n2++) {
              var i2 = e3.data[n2];
              r2 += i2 === "&" ? "&amp;" : i2 === "<" ? "&lt;" : i2 === ">" ? "&gt;" : i2;
            }
            return r2;
          }, e2.prototype._serializeDocumentFragmentNS = function(e3, t2, r2, i2, o2) {
            var a2, s2, u2 = "";
            try {
              for (var l2 = n(e3._children || e3.childNodes), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                var h = c2.value;
                u2 += this._serializeNodeNS(h, t2, r2, i2, o2);
              }
            } catch (e4) {
              a2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (s2 = l2.return) && s2.call(l2);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
            return u2;
          }, e2.prototype._serializeDocumentType = function(e3, t2) {
            if (t2 && !l.xml_isPubidChar(e3.publicId))
              throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
            if (t2 && (!l.xml_isLegalChar(e3.systemId) || e3.systemId.indexOf('"') !== -1 && e3.systemId.indexOf("'") !== -1))
              throw new Error("DocType system identifier contains invalid characters (well-formed required).");
            return e3.publicId && e3.systemId ? "<!DOCTYPE " + e3.name + ' PUBLIC "' + e3.publicId + '" "' + e3.systemId + '">' : e3.publicId ? "<!DOCTYPE " + e3.name + ' PUBLIC "' + e3.publicId + '">' : e3.systemId ? "<!DOCTYPE " + e3.name + ' SYSTEM "' + e3.systemId + '">' : "<!DOCTYPE " + e3.name + ">";
          }, e2.prototype._serializeProcessingInstruction = function(e3, t2) {
            if (t2 && (e3.target.indexOf(":") !== -1 || /^xml$/i.test(e3.target)))
              throw new Error("Processing instruction target contains invalid characters (well-formed required).");
            if (t2 && (!l.xml_isLegalChar(e3.data) || e3.data.indexOf("?>") !== -1))
              throw new Error("Processing instruction data contains invalid characters (well-formed required).");
            return "<?" + (e3.data === "" ? e3.target : e3.target + " " + e3.data) + "?>";
          }, e2.prototype._serializeCData = function(e3, t2) {
            if (t2 && e3.data.indexOf("]]>") !== -1)
              throw new Error("CDATA contains invalid characters (well-formed required).");
            return "<![CDATA[" + e3.data + "]]>";
          }, e2.prototype._serializeAttributesNS = function(e3, t2, r2, i2, a2, s2) {
            var c2, h, p = "", f = s2 ? new o.LocalNameSet() : void 0;
            try {
              for (var d = n(e3.attributes), m = d.next(); !m.done; m = d.next()) {
                var y = m.value;
                if (a2 || s2 || y.namespaceURI !== null) {
                  if (s2 && f && f.has(y.namespaceURI, y.localName))
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  s2 && f && f.set(y.namespaceURI, y.localName);
                  var v = y.namespaceURI, _ = null;
                  if (v !== null)
                    if (_ = t2.get(y.prefix, v), v === u.namespace.XMLNS) {
                      if (y.value === u.namespace.XML || y.prefix === null && a2 || y.prefix !== null && (!(y.localName in i2) || i2[y.localName] !== y.value) && t2.has(y.localName, y.value))
                        continue;
                      if (s2 && y.value === u.namespace.XMLNS)
                        throw new Error("XMLNS namespace is reserved (well-formed required).");
                      if (s2 && y.value === "")
                        throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                      y.prefix === "xmlns" && (_ = "xmlns");
                    } else
                      _ === null && (p += " xmlns:" + (_ = y.prefix === null || t2.hasPrefix(y.prefix) && !t2.has(y.prefix, v) ? this._generatePrefix(v, t2, r2) : y.prefix) + '="' + this._serializeAttributeValue(v, s2) + '"');
                  if (p += " ", _ !== null && (p += _ + ":"), s2 && (y.localName.indexOf(":") !== -1 || !l.xml_isName(y.localName) || y.localName === "xmlns" && v === null))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  p += y.localName + '="' + this._serializeAttributeValue(y.value, s2) + '"';
                } else
                  p += " " + y.localName + '="' + this._serializeAttributeValue(y.value, s2) + '"';
              }
            } catch (e4) {
              c2 = { error: e4 };
            } finally {
              try {
                m && !m.done && (h = d.return) && h.call(d);
              } finally {
                if (c2)
                  throw c2.error;
              }
            }
            return p;
          }, e2.prototype._recordNamespaceInformation = function(e3, t2, r2) {
            var i2, o2, a2 = null;
            try {
              for (var s2 = n(e3.attributes), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                var c2 = l2.value, h = c2.namespaceURI, p = c2.prefix;
                if (h === u.namespace.XMLNS) {
                  if (p === null) {
                    a2 = c2.value;
                    continue;
                  }
                  var f = c2.localName, d = c2.value;
                  if (d === u.namespace.XML)
                    continue;
                  if (d === "" && (d = null), t2.has(f, d))
                    continue;
                  t2.set(f, d), r2[f] = d || "";
                }
              }
            } catch (e4) {
              i2 = { error: e4 };
            } finally {
              try {
                l2 && !l2.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, e2.prototype._generatePrefix = function(e3, t2, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t2.set(n2, e3), n2;
          }, e2.prototype._serializeAttributeValue = function(e3, t2) {
            if (t2 && e3 !== null && !l.xml_isLegalChar(e3))
              throw new Error("Invalid characters in attribute value.");
            if (e3 === null)
              return "";
            for (var r2 = "", n2 = 0; n2 < e3.length; n2++) {
              var i2 = e3[n2];
              r2 += i2 === '"' ? "&quot;" : i2 === "&" ? "&amp;" : i2 === "<" ? "&lt;" : i2 === ">" ? "&gt;" : i2;
            }
            return r2;
          }, e2.prototype._serializeElement = function(e3, t2) {
            var r2, i2;
            if (t2 && (e3.localName.indexOf(":") !== -1 || !l.xml_isName(e3.localName)))
              throw new Error("Node local name contains invalid characters (well-formed required).");
            var o2 = false, a2 = e3.localName, s2 = "<" + a2;
            if (s2 += this._serializeAttributes(e3, t2), e3._children.size === 0 && (s2 += "/", o2 = true), s2 += ">", o2)
              return s2;
            try {
              for (var u2 = n(e3._children), c2 = u2.next(); !c2.done; c2 = u2.next()) {
                var h = c2.value;
                s2 += this._serializeNode(h, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (i2 = u2.return) && i2.call(u2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return s2 += "</" + a2 + ">";
          }, e2.prototype._serializeDocument = function(e3, t2) {
            var r2, i2;
            if (t2 && e3.documentElement === null)
              throw new Error("Missing document element (well-formed required).");
            var o2 = "";
            try {
              for (var a2 = n(e3._children), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var u2 = s2.value;
                o2 += this._serializeNode(u2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype._serializeDocumentFragment = function(e3, t2) {
            var r2, i2, o2 = "";
            try {
              for (var a2 = n(e3._children), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var u2 = s2.value;
                o2 += this._serializeNode(u2, t2);
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype._serializeAttributes = function(e3, t2) {
            var r2, i2, o2 = "", a2 = t2 ? {} : void 0;
            try {
              for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var c2 = u2.value;
                if (t2 && a2 && c2.localName in a2)
                  throw new Error("Element contains duplicate attributes (well-formed required).");
                if (t2 && a2 && (a2[c2.localName] = true), t2 && (c2.localName.indexOf(":") !== -1 || !l.xml_isName(c2.localName)))
                  throw new Error("Attribute local name contains invalid characters (well-formed required).");
                o2 += " " + c2.localName + '="' + this._serializeAttributeValue(c2.value, t2) + '"';
              }
            } catch (e4) {
              r2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2._VoidElementNames = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e2;
        }();
        t.XMLSerializerImpl = c;
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(277);
        t.XMLReader = n.XMLReader;
        var i = r(112);
        t.ObjectReader = i.ObjectReader;
        var o = r(280);
        t.JSONReader = o.JSONReader;
        var a = r(281);
        t.YAMLReader = a.YAMLReader;
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(19), r(65), r(20), r(22), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        }, a = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(180), u = r(111), l = r(7), c = r(0), h = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            for (var r2, n2, i2, h2, p = new s.XMLStringLexer(t3, { skipWhitespaceOnlyText: true }), f = e3, d = e3, m = p.nextToken(); m.type !== u.TokenType.EOF; ) {
              switch (m.type) {
                case u.TokenType.Declaration:
                  var y = m, v = this.sanitize(y.version);
                  if (v !== "1.0")
                    throw new Error("Invalid xml version: " + v);
                  var _ = { version: v };
                  y.encoding && (_.encoding = this.sanitize(y.encoding)), y.standalone && (_.standalone = this.sanitize(y.standalone) === "yes"), d.set(_);
                  break;
                case u.TokenType.DocType:
                  var g = m;
                  d = this.docType(d, this.sanitize(g.name), this.sanitize(g.pubId), this.sanitize(g.sysId)) || d;
                  break;
                case u.TokenType.CDATA:
                  var b = m;
                  d = this.cdata(d, this.sanitize(b.data)) || d;
                  break;
                case u.TokenType.Comment:
                  var x = m;
                  d = this.comment(d, this.sanitize(x.data)) || d;
                  break;
                case u.TokenType.PI:
                  var w = m;
                  d = this.instruction(d, this.sanitize(w.target), this.sanitize(w.data)) || d;
                  break;
                case u.TokenType.Text:
                  var E = m;
                  d = this.text(d, this._decodeText(this.sanitize(E.data))) || d;
                  break;
                case u.TokenType.Element:
                  var D = m, S = this.sanitize(D.name), C = o(c.namespace_extractQName(S), 1)[0], A = d.node.lookupNamespaceURI(C), N = {};
                  try {
                    for (var T = (r2 = void 0, a(D.attributes)), O = T.next(); !O.done; O = T.next()) {
                      var F = o(O.value, 2), k = F[0], P = F[1];
                      if (k = this.sanitize(k), P = this.sanitize(P), k === "xmlns")
                        A = P;
                      else {
                        var I = o(c.namespace_extractQName(k), 2), L = I[0], M = I[1];
                        L === "xmlns" && (M === C && (A = P), N[M] = P);
                      }
                    }
                  } catch (e4) {
                    r2 = { error: e4 };
                  } finally {
                    try {
                      O && !O.done && (n2 = T.return) && n2.call(T);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                  var B = A !== null ? this.element(d, A, S) : this.element(d, void 0, S);
                  if (B === void 0)
                    break;
                  d.node === e3.node && (f = B);
                  try {
                    for (var j = (i2 = void 0, a(D.attributes)), R = j.next(); !R.done; R = j.next()) {
                      var z = o(R.value, 2);
                      k = z[0], P = z[1];
                      k = this.sanitize(k), P = this.sanitize(P);
                      var U = o(c.namespace_extractQName(k), 2), G = (L = U[0], M = U[1], null);
                      L === "xmlns" || L === null && M === "xmlns" ? G = l.namespace.XMLNS : (G = B.node.lookupNamespaceURI(L)) !== null && B.node.isDefaultNamespace(G) ? G = null : G === null && L !== null && (G = N[L] || null), G !== null ? this.attribute(B, G, k, this._decodeAttributeValue(P)) : this.attribute(B, void 0, k, this._decodeAttributeValue(P));
                    }
                  } catch (e4) {
                    i2 = { error: e4 };
                  } finally {
                    try {
                      R && !R.done && (h2 = j.return) && h2.call(j);
                    } finally {
                      if (i2)
                        throw i2.error;
                    }
                  }
                  D.selfClosing || (d = B);
                  break;
                case u.TokenType.ClosingTag:
                  d.node.parentNode && (d = d.up());
              }
              m = p.nextToken();
            }
            return f;
          }, t2;
        }(r(75).BaseReader);
        t.XMLReader = h;
      }, function(e, t, r) {
        var n = r(4), i = r(279);
        n({ target: "Object", stat: true, forced: Object.assign !== i }, { assign: i });
      }, function(e, t, r) {
        "use strict";
        var n = r(16), i = r(8), o = r(61), a = r(85), s = r(79), u = r(27), l = r(41), c = Object.assign, h = Object.defineProperty;
        e.exports = !c || i(function() {
          if (n && c({ b: 1 }, c(h({}, "a", { enumerable: true, get: function() {
            h(this, "b", { value: 3, enumerable: false });
          } }), { b: 2 })).b !== 1)
            return true;
          var e2 = {}, t2 = {}, r2 = Symbol();
          return e2[r2] = 7, "abcdefghijklmnopqrst".split("").forEach(function(e3) {
            t2[e3] = e3;
          }), c({}, e2)[r2] != 7 || o(c({}, t2)).join("") != "abcdefghijklmnopqrst";
        }) ? function(e2, t2) {
          for (var r2 = u(e2), i2 = arguments.length, c2 = 1, h2 = a.f, p = s.f; i2 > c2; )
            for (var f, d = l(arguments[c2++]), m = h2 ? o(d).concat(h2(d)) : o(d), y = m.length, v = 0; y > v; )
              f = m[v++], n && !p.call(d, f) || (r2[f] = d[f]);
          return r2;
        } : c;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(112), a = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            return new o.ObjectReader(this._builderOptions).parse(e3, JSON.parse(t3));
          }, t2;
        }(r(75).BaseReader);
        t.JSONReader = a;
      }, function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = r(112), a = r(75), s = r(282), u = function(e2) {
          function t2() {
            return e2 !== null && e2.apply(this, arguments) || this;
          }
          return i(t2, e2), t2.prototype._parse = function(e3, t3) {
            var r2 = s.safeLoad(t3);
            if (r2 === void 0)
              throw new Error("Unable to parse YAML document.");
            return new o.ObjectReader(this._builderOptions).parse(e3, r2);
          }, t2;
        }(a.BaseReader);
        t.YAMLReader = u;
      }, function(e, t, r) {
        "use strict";
        var n = r(283);
        e.exports = n;
      }, function(e, t, r) {
        "use strict";
        var n = r(284), i = r(303);
        function o(e2) {
          return function() {
            throw new Error("Function " + e2 + " is deprecated and cannot be used.");
          };
        }
        e.exports.Type = r(10), e.exports.Schema = r(39), e.exports.FAILSAFE_SCHEMA = r(113), e.exports.JSON_SCHEMA = r(182), e.exports.CORE_SCHEMA = r(181), e.exports.DEFAULT_SAFE_SCHEMA = r(54), e.exports.DEFAULT_FULL_SCHEMA = r(76), e.exports.load = n.load, e.exports.loadAll = n.loadAll, e.exports.safeLoad = n.safeLoad, e.exports.safeLoadAll = n.safeLoadAll, e.exports.dump = i.dump, e.exports.safeDump = i.safeDump, e.exports.YAMLException = r(53), e.exports.MINIMAL_SCHEMA = r(113), e.exports.SAFE_SCHEMA = r(54), e.exports.DEFAULT_SCHEMA = r(76), e.exports.scan = o("scan"), e.exports.parse = o("parse"), e.exports.compose = o("compose"), e.exports.addConstructor = o("addConstructor");
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(53), o = r(285), a = r(54), s = r(76), u = Object.prototype.hasOwnProperty, l = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, c = /[\x85\u2028\u2029]/, h = /[,\[\]\{\}]/, p = /^(?:!|!!|![a-z\-]+!)$/i, f = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
        function d(e2) {
          return Object.prototype.toString.call(e2);
        }
        function m(e2) {
          return e2 === 10 || e2 === 13;
        }
        function y(e2) {
          return e2 === 9 || e2 === 32;
        }
        function v(e2) {
          return e2 === 9 || e2 === 32 || e2 === 10 || e2 === 13;
        }
        function _(e2) {
          return e2 === 44 || e2 === 91 || e2 === 93 || e2 === 123 || e2 === 125;
        }
        function g(e2) {
          var t2;
          return 48 <= e2 && e2 <= 57 ? e2 - 48 : 97 <= (t2 = 32 | e2) && t2 <= 102 ? t2 - 97 + 10 : -1;
        }
        function b(e2) {
          return e2 === 48 ? "\0" : e2 === 97 ? "\x07" : e2 === 98 ? "\b" : e2 === 116 || e2 === 9 ? "	" : e2 === 110 ? "\n" : e2 === 118 ? "\v" : e2 === 102 ? "\f" : e2 === 114 ? "\r" : e2 === 101 ? "" : e2 === 32 ? " " : e2 === 34 ? '"' : e2 === 47 ? "/" : e2 === 92 ? "\\" : e2 === 78 ? "\x85" : e2 === 95 ? "\xA0" : e2 === 76 ? "\u2028" : e2 === 80 ? "\u2029" : "";
        }
        function x(e2) {
          return e2 <= 65535 ? String.fromCharCode(e2) : String.fromCharCode(55296 + (e2 - 65536 >> 10), 56320 + (e2 - 65536 & 1023));
        }
        for (var w = new Array(256), E = new Array(256), D = 0; D < 256; D++)
          w[D] = b(D) ? 1 : 0, E[D] = b(D);
        function S(e2, t2) {
          this.input = e2, this.filename = t2.filename || null, this.schema = t2.schema || s, this.onWarning = t2.onWarning || null, this.legacy = t2.legacy || false, this.json = t2.json || false, this.listener = t2.listener || null, this.implicitTypes = this.schema.compiledImplicit, this.typeMap = this.schema.compiledTypeMap, this.length = e2.length, this.position = 0, this.line = 0, this.lineStart = 0, this.lineIndent = 0, this.documents = [];
        }
        function C(e2, t2) {
          return new i(t2, new o(e2.filename, e2.input, e2.position, e2.line, e2.position - e2.lineStart));
        }
        function A(e2, t2) {
          throw C(e2, t2);
        }
        function N(e2, t2) {
          e2.onWarning && e2.onWarning.call(null, C(e2, t2));
        }
        var T = { YAML: function(e2, t2, r2) {
          var n2, i2, o2;
          e2.version !== null && A(e2, "duplication of %YAML directive"), r2.length !== 1 && A(e2, "YAML directive accepts exactly one argument"), (n2 = /^([0-9]+)\.([0-9]+)$/.exec(r2[0])) === null && A(e2, "ill-formed argument of the YAML directive"), i2 = parseInt(n2[1], 10), o2 = parseInt(n2[2], 10), i2 !== 1 && A(e2, "unacceptable YAML version of the document"), e2.version = r2[0], e2.checkLineBreaks = o2 < 2, o2 !== 1 && o2 !== 2 && N(e2, "unsupported YAML version of the document");
        }, TAG: function(e2, t2, r2) {
          var n2, i2;
          r2.length !== 2 && A(e2, "TAG directive accepts exactly two arguments"), n2 = r2[0], i2 = r2[1], p.test(n2) || A(e2, "ill-formed tag handle (first argument) of the TAG directive"), u.call(e2.tagMap, n2) && A(e2, 'there is a previously declared suffix for "' + n2 + '" tag handle'), f.test(i2) || A(e2, "ill-formed tag prefix (second argument) of the TAG directive"), e2.tagMap[n2] = i2;
        } };
        function O(e2, t2, r2, n2) {
          var i2, o2, a2, s2;
          if (t2 < r2) {
            if (s2 = e2.input.slice(t2, r2), n2)
              for (i2 = 0, o2 = s2.length; i2 < o2; i2 += 1)
                (a2 = s2.charCodeAt(i2)) === 9 || 32 <= a2 && a2 <= 1114111 || A(e2, "expected valid JSON character");
            else
              l.test(s2) && A(e2, "the stream contains non-printable characters");
            e2.result += s2;
          }
        }
        function F(e2, t2, r2, i2) {
          var o2, a2, s2, l2;
          for (n.isObject(r2) || A(e2, "cannot merge mappings; the provided source object is unacceptable"), s2 = 0, l2 = (o2 = Object.keys(r2)).length; s2 < l2; s2 += 1)
            a2 = o2[s2], u.call(t2, a2) || (t2[a2] = r2[a2], i2[a2] = true);
        }
        function k(e2, t2, r2, n2, i2, o2, a2, s2) {
          var l2, c2;
          if (Array.isArray(i2))
            for (l2 = 0, c2 = (i2 = Array.prototype.slice.call(i2)).length; l2 < c2; l2 += 1)
              Array.isArray(i2[l2]) && A(e2, "nested arrays are not supported inside keys"), typeof i2 == "object" && d(i2[l2]) === "[object Object]" && (i2[l2] = "[object Object]");
          if (typeof i2 == "object" && d(i2) === "[object Object]" && (i2 = "[object Object]"), i2 = String(i2), t2 === null && (t2 = {}), n2 === "tag:yaml.org,2002:merge")
            if (Array.isArray(o2))
              for (l2 = 0, c2 = o2.length; l2 < c2; l2 += 1)
                F(e2, t2, o2[l2], r2);
            else
              F(e2, t2, o2, r2);
          else
            e2.json || u.call(r2, i2) || !u.call(t2, i2) || (e2.line = a2 || e2.line, e2.position = s2 || e2.position, A(e2, "duplicated mapping key")), t2[i2] = o2, delete r2[i2];
          return t2;
        }
        function P(e2) {
          var t2;
          (t2 = e2.input.charCodeAt(e2.position)) === 10 ? e2.position++ : t2 === 13 ? (e2.position++, e2.input.charCodeAt(e2.position) === 10 && e2.position++) : A(e2, "a line break is expected"), e2.line += 1, e2.lineStart = e2.position;
        }
        function I(e2, t2, r2) {
          for (var n2 = 0, i2 = e2.input.charCodeAt(e2.position); i2 !== 0; ) {
            for (; y(i2); )
              i2 = e2.input.charCodeAt(++e2.position);
            if (t2 && i2 === 35)
              do {
                i2 = e2.input.charCodeAt(++e2.position);
              } while (i2 !== 10 && i2 !== 13 && i2 !== 0);
            if (!m(i2))
              break;
            for (P(e2), i2 = e2.input.charCodeAt(e2.position), n2++, e2.lineIndent = 0; i2 === 32; )
              e2.lineIndent++, i2 = e2.input.charCodeAt(++e2.position);
          }
          return r2 !== -1 && n2 !== 0 && e2.lineIndent < r2 && N(e2, "deficient indentation"), n2;
        }
        function L(e2) {
          var t2, r2 = e2.position;
          return !((t2 = e2.input.charCodeAt(r2)) !== 45 && t2 !== 46 || t2 !== e2.input.charCodeAt(r2 + 1) || t2 !== e2.input.charCodeAt(r2 + 2) || (r2 += 3, (t2 = e2.input.charCodeAt(r2)) !== 0 && !v(t2)));
        }
        function M(e2, t2) {
          t2 === 1 ? e2.result += " " : t2 > 1 && (e2.result += n.repeat("\n", t2 - 1));
        }
        function B(e2, t2) {
          var r2, n2, i2 = e2.tag, o2 = e2.anchor, a2 = [], s2 = false;
          for (e2.anchor !== null && (e2.anchorMap[e2.anchor] = a2), n2 = e2.input.charCodeAt(e2.position); n2 !== 0 && n2 === 45 && v(e2.input.charCodeAt(e2.position + 1)); )
            if (s2 = true, e2.position++, I(e2, true, -1) && e2.lineIndent <= t2)
              a2.push(null), n2 = e2.input.charCodeAt(e2.position);
            else if (r2 = e2.line, z(e2, t2, 3, false, true), a2.push(e2.result), I(e2, true, -1), n2 = e2.input.charCodeAt(e2.position), (e2.line === r2 || e2.lineIndent > t2) && n2 !== 0)
              A(e2, "bad indentation of a sequence entry");
            else if (e2.lineIndent < t2)
              break;
          return !!s2 && (e2.tag = i2, e2.anchor = o2, e2.kind = "sequence", e2.result = a2, true);
        }
        function j(e2) {
          var t2, r2, n2, i2, o2 = false, a2 = false;
          if ((i2 = e2.input.charCodeAt(e2.position)) !== 33)
            return false;
          if (e2.tag !== null && A(e2, "duplication of a tag property"), (i2 = e2.input.charCodeAt(++e2.position)) === 60 ? (o2 = true, i2 = e2.input.charCodeAt(++e2.position)) : i2 === 33 ? (a2 = true, r2 = "!!", i2 = e2.input.charCodeAt(++e2.position)) : r2 = "!", t2 = e2.position, o2) {
            do {
              i2 = e2.input.charCodeAt(++e2.position);
            } while (i2 !== 0 && i2 !== 62);
            e2.position < e2.length ? (n2 = e2.input.slice(t2, e2.position), i2 = e2.input.charCodeAt(++e2.position)) : A(e2, "unexpected end of the stream within a verbatim tag");
          } else {
            for (; i2 !== 0 && !v(i2); )
              i2 === 33 && (a2 ? A(e2, "tag suffix cannot contain exclamation marks") : (r2 = e2.input.slice(t2 - 1, e2.position + 1), p.test(r2) || A(e2, "named tag handle cannot contain such characters"), a2 = true, t2 = e2.position + 1)), i2 = e2.input.charCodeAt(++e2.position);
            n2 = e2.input.slice(t2, e2.position), h.test(n2) && A(e2, "tag suffix cannot contain flow indicator characters");
          }
          return n2 && !f.test(n2) && A(e2, "tag name cannot contain such characters: " + n2), o2 ? e2.tag = n2 : u.call(e2.tagMap, r2) ? e2.tag = e2.tagMap[r2] + n2 : r2 === "!" ? e2.tag = "!" + n2 : r2 === "!!" ? e2.tag = "tag:yaml.org,2002:" + n2 : A(e2, 'undeclared tag handle "' + r2 + '"'), true;
        }
        function R(e2) {
          var t2, r2;
          if ((r2 = e2.input.charCodeAt(e2.position)) !== 38)
            return false;
          for (e2.anchor !== null && A(e2, "duplication of an anchor property"), r2 = e2.input.charCodeAt(++e2.position), t2 = e2.position; r2 !== 0 && !v(r2) && !_(r2); )
            r2 = e2.input.charCodeAt(++e2.position);
          return e2.position === t2 && A(e2, "name of an anchor node must contain at least one character"), e2.anchor = e2.input.slice(t2, e2.position), true;
        }
        function z(e2, t2, r2, i2, o2) {
          var a2, s2, l2, c2, h2, p2, f2, d2, b2 = 1, D2 = false, S2 = false;
          if (e2.listener !== null && e2.listener("open", e2), e2.tag = null, e2.anchor = null, e2.kind = null, e2.result = null, a2 = s2 = l2 = r2 === 4 || r2 === 3, i2 && I(e2, true, -1) && (D2 = true, e2.lineIndent > t2 ? b2 = 1 : e2.lineIndent === t2 ? b2 = 0 : e2.lineIndent < t2 && (b2 = -1)), b2 === 1)
            for (; j(e2) || R(e2); )
              I(e2, true, -1) ? (D2 = true, l2 = a2, e2.lineIndent > t2 ? b2 = 1 : e2.lineIndent === t2 ? b2 = 0 : e2.lineIndent < t2 && (b2 = -1)) : l2 = false;
          if (l2 && (l2 = D2 || o2), b2 !== 1 && r2 !== 4 || (f2 = r2 === 1 || r2 === 2 ? t2 : t2 + 1, d2 = e2.position - e2.lineStart, b2 === 1 ? l2 && (B(e2, d2) || function(e3, t3, r3) {
            var n2, i3, o3, a3, s3, u2 = e3.tag, l3 = e3.anchor, c3 = {}, h3 = {}, p3 = null, f3 = null, d3 = null, m2 = false, _2 = false;
            for (e3.anchor !== null && (e3.anchorMap[e3.anchor] = c3), s3 = e3.input.charCodeAt(e3.position); s3 !== 0; ) {
              if (n2 = e3.input.charCodeAt(e3.position + 1), o3 = e3.line, a3 = e3.position, s3 !== 63 && s3 !== 58 || !v(n2)) {
                if (!z(e3, r3, 2, false, true))
                  break;
                if (e3.line === o3) {
                  for (s3 = e3.input.charCodeAt(e3.position); y(s3); )
                    s3 = e3.input.charCodeAt(++e3.position);
                  if (s3 === 58)
                    v(s3 = e3.input.charCodeAt(++e3.position)) || A(e3, "a whitespace character is expected after the key-value separator within a block mapping"), m2 && (k(e3, c3, h3, p3, f3, null), p3 = f3 = d3 = null), _2 = true, m2 = false, i3 = false, p3 = e3.tag, f3 = e3.result;
                  else {
                    if (!_2)
                      return e3.tag = u2, e3.anchor = l3, true;
                    A(e3, "can not read an implicit mapping pair; a colon is missed");
                  }
                } else {
                  if (!_2)
                    return e3.tag = u2, e3.anchor = l3, true;
                  A(e3, "can not read a block mapping entry; a multiline key may not be an implicit key");
                }
              } else
                s3 === 63 ? (m2 && (k(e3, c3, h3, p3, f3, null), p3 = f3 = d3 = null), _2 = true, m2 = true, i3 = true) : m2 ? (m2 = false, i3 = true) : A(e3, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"), e3.position += 1, s3 = n2;
              if ((e3.line === o3 || e3.lineIndent > t3) && (z(e3, t3, 4, true, i3) && (m2 ? f3 = e3.result : d3 = e3.result), m2 || (k(e3, c3, h3, p3, f3, d3, o3, a3), p3 = f3 = d3 = null), I(e3, true, -1), s3 = e3.input.charCodeAt(e3.position)), e3.lineIndent > t3 && s3 !== 0)
                A(e3, "bad indentation of a mapping entry");
              else if (e3.lineIndent < t3)
                break;
            }
            return m2 && k(e3, c3, h3, p3, f3, null), _2 && (e3.tag = u2, e3.anchor = l3, e3.kind = "mapping", e3.result = c3), _2;
          }(e2, d2, f2)) || function(e3, t3) {
            var r3, n2, i3, o3, a3, s3, u2, l3, c3, h3, p3 = true, f3 = e3.tag, d3 = e3.anchor, m2 = {};
            if ((h3 = e3.input.charCodeAt(e3.position)) === 91)
              i3 = 93, s3 = false, n2 = [];
            else {
              if (h3 !== 123)
                return false;
              i3 = 125, s3 = true, n2 = {};
            }
            for (e3.anchor !== null && (e3.anchorMap[e3.anchor] = n2), h3 = e3.input.charCodeAt(++e3.position); h3 !== 0; ) {
              if (I(e3, true, t3), (h3 = e3.input.charCodeAt(e3.position)) === i3)
                return e3.position++, e3.tag = f3, e3.anchor = d3, e3.kind = s3 ? "mapping" : "sequence", e3.result = n2, true;
              p3 || A(e3, "missed comma between flow collection entries"), c3 = null, o3 = a3 = false, h3 === 63 && v(e3.input.charCodeAt(e3.position + 1)) && (o3 = a3 = true, e3.position++, I(e3, true, t3)), r3 = e3.line, z(e3, t3, 1, false, true), l3 = e3.tag, u2 = e3.result, I(e3, true, t3), h3 = e3.input.charCodeAt(e3.position), !a3 && e3.line !== r3 || h3 !== 58 || (o3 = true, h3 = e3.input.charCodeAt(++e3.position), I(e3, true, t3), z(e3, t3, 1, false, true), c3 = e3.result), s3 ? k(e3, n2, m2, l3, u2, c3) : o3 ? n2.push(k(e3, null, m2, l3, u2, c3)) : n2.push(u2), I(e3, true, t3), (h3 = e3.input.charCodeAt(e3.position)) === 44 ? (p3 = true, h3 = e3.input.charCodeAt(++e3.position)) : p3 = false;
            }
            A(e3, "unexpected end of the stream within a flow collection");
          }(e2, f2) ? S2 = true : (s2 && function(e3, t3) {
            var r3, i3, o3, a3, s3, u2 = 1, l3 = false, c3 = false, h3 = t3, p3 = 0, f3 = false;
            if ((a3 = e3.input.charCodeAt(e3.position)) === 124)
              i3 = false;
            else {
              if (a3 !== 62)
                return false;
              i3 = true;
            }
            for (e3.kind = "scalar", e3.result = ""; a3 !== 0; )
              if ((a3 = e3.input.charCodeAt(++e3.position)) === 43 || a3 === 45)
                u2 === 1 ? u2 = a3 === 43 ? 3 : 2 : A(e3, "repeat of a chomping mode identifier");
              else {
                if (!((o3 = 48 <= (s3 = a3) && s3 <= 57 ? s3 - 48 : -1) >= 0))
                  break;
                o3 === 0 ? A(e3, "bad explicit indentation width of a block scalar; it cannot be less than one") : c3 ? A(e3, "repeat of an indentation width identifier") : (h3 = t3 + o3 - 1, c3 = true);
              }
            if (y(a3)) {
              do {
                a3 = e3.input.charCodeAt(++e3.position);
              } while (y(a3));
              if (a3 === 35)
                do {
                  a3 = e3.input.charCodeAt(++e3.position);
                } while (!m(a3) && a3 !== 0);
            }
            for (; a3 !== 0; ) {
              for (P(e3), e3.lineIndent = 0, a3 = e3.input.charCodeAt(e3.position); (!c3 || e3.lineIndent < h3) && a3 === 32; )
                e3.lineIndent++, a3 = e3.input.charCodeAt(++e3.position);
              if (!c3 && e3.lineIndent > h3 && (h3 = e3.lineIndent), m(a3))
                p3++;
              else {
                if (e3.lineIndent < h3) {
                  u2 === 3 ? e3.result += n.repeat("\n", l3 ? 1 + p3 : p3) : u2 === 1 && l3 && (e3.result += "\n");
                  break;
                }
                for (i3 ? y(a3) ? (f3 = true, e3.result += n.repeat("\n", l3 ? 1 + p3 : p3)) : f3 ? (f3 = false, e3.result += n.repeat("\n", p3 + 1)) : p3 === 0 ? l3 && (e3.result += " ") : e3.result += n.repeat("\n", p3) : e3.result += n.repeat("\n", l3 ? 1 + p3 : p3), l3 = true, c3 = true, p3 = 0, r3 = e3.position; !m(a3) && a3 !== 0; )
                  a3 = e3.input.charCodeAt(++e3.position);
                O(e3, r3, e3.position, false);
              }
            }
            return true;
          }(e2, f2) || function(e3, t3) {
            var r3, n2, i3;
            if ((r3 = e3.input.charCodeAt(e3.position)) !== 39)
              return false;
            for (e3.kind = "scalar", e3.result = "", e3.position++, n2 = i3 = e3.position; (r3 = e3.input.charCodeAt(e3.position)) !== 0; )
              if (r3 === 39) {
                if (O(e3, n2, e3.position, true), (r3 = e3.input.charCodeAt(++e3.position)) !== 39)
                  return true;
                n2 = e3.position, e3.position++, i3 = e3.position;
              } else
                m(r3) ? (O(e3, n2, i3, true), M(e3, I(e3, false, t3)), n2 = i3 = e3.position) : e3.position === e3.lineStart && L(e3) ? A(e3, "unexpected end of the document within a single quoted scalar") : (e3.position++, i3 = e3.position);
            A(e3, "unexpected end of the stream within a single quoted scalar");
          }(e2, f2) || function(e3, t3) {
            var r3, n2, i3, o3, a3, s3, u2;
            if ((s3 = e3.input.charCodeAt(e3.position)) !== 34)
              return false;
            for (e3.kind = "scalar", e3.result = "", e3.position++, r3 = n2 = e3.position; (s3 = e3.input.charCodeAt(e3.position)) !== 0; ) {
              if (s3 === 34)
                return O(e3, r3, e3.position, true), e3.position++, true;
              if (s3 === 92) {
                if (O(e3, r3, e3.position, true), m(s3 = e3.input.charCodeAt(++e3.position)))
                  I(e3, false, t3);
                else if (s3 < 256 && w[s3])
                  e3.result += E[s3], e3.position++;
                else if ((a3 = (u2 = s3) === 120 ? 2 : u2 === 117 ? 4 : u2 === 85 ? 8 : 0) > 0) {
                  for (i3 = a3, o3 = 0; i3 > 0; i3--)
                    (a3 = g(s3 = e3.input.charCodeAt(++e3.position))) >= 0 ? o3 = (o3 << 4) + a3 : A(e3, "expected hexadecimal character");
                  e3.result += x(o3), e3.position++;
                } else
                  A(e3, "unknown escape sequence");
                r3 = n2 = e3.position;
              } else
                m(s3) ? (O(e3, r3, n2, true), M(e3, I(e3, false, t3)), r3 = n2 = e3.position) : e3.position === e3.lineStart && L(e3) ? A(e3, "unexpected end of the document within a double quoted scalar") : (e3.position++, n2 = e3.position);
            }
            A(e3, "unexpected end of the stream within a double quoted scalar");
          }(e2, f2) ? S2 = true : !function(e3) {
            var t3, r3, n2;
            if ((n2 = e3.input.charCodeAt(e3.position)) !== 42)
              return false;
            for (n2 = e3.input.charCodeAt(++e3.position), t3 = e3.position; n2 !== 0 && !v(n2) && !_(n2); )
              n2 = e3.input.charCodeAt(++e3.position);
            return e3.position === t3 && A(e3, "name of an alias node must contain at least one character"), r3 = e3.input.slice(t3, e3.position), e3.anchorMap.hasOwnProperty(r3) || A(e3, 'unidentified alias "' + r3 + '"'), e3.result = e3.anchorMap[r3], I(e3, true, -1), true;
          }(e2) ? function(e3, t3, r3) {
            var n2, i3, o3, a3, s3, u2, l3, c3, h3 = e3.kind, p3 = e3.result;
            if (v(c3 = e3.input.charCodeAt(e3.position)) || _(c3) || c3 === 35 || c3 === 38 || c3 === 42 || c3 === 33 || c3 === 124 || c3 === 62 || c3 === 39 || c3 === 34 || c3 === 37 || c3 === 64 || c3 === 96)
              return false;
            if ((c3 === 63 || c3 === 45) && (v(n2 = e3.input.charCodeAt(e3.position + 1)) || r3 && _(n2)))
              return false;
            for (e3.kind = "scalar", e3.result = "", i3 = o3 = e3.position, a3 = false; c3 !== 0; ) {
              if (c3 === 58) {
                if (v(n2 = e3.input.charCodeAt(e3.position + 1)) || r3 && _(n2))
                  break;
              } else if (c3 === 35) {
                if (v(e3.input.charCodeAt(e3.position - 1)))
                  break;
              } else {
                if (e3.position === e3.lineStart && L(e3) || r3 && _(c3))
                  break;
                if (m(c3)) {
                  if (s3 = e3.line, u2 = e3.lineStart, l3 = e3.lineIndent, I(e3, false, -1), e3.lineIndent >= t3) {
                    a3 = true, c3 = e3.input.charCodeAt(e3.position);
                    continue;
                  }
                  e3.position = o3, e3.line = s3, e3.lineStart = u2, e3.lineIndent = l3;
                  break;
                }
              }
              a3 && (O(e3, i3, o3, false), M(e3, e3.line - s3), i3 = o3 = e3.position, a3 = false), y(c3) || (o3 = e3.position + 1), c3 = e3.input.charCodeAt(++e3.position);
            }
            return O(e3, i3, o3, false), !!e3.result || (e3.kind = h3, e3.result = p3, false);
          }(e2, f2, r2 === 1) && (S2 = true, e2.tag === null && (e2.tag = "?")) : (S2 = true, e2.tag === null && e2.anchor === null || A(e2, "alias node should not have any properties")), e2.anchor !== null && (e2.anchorMap[e2.anchor] = e2.result)) : b2 === 0 && (S2 = l2 && B(e2, d2))), e2.tag !== null && e2.tag !== "!")
            if (e2.tag === "?") {
              for (e2.result !== null && e2.kind !== "scalar" && A(e2, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + e2.kind + '"'), c2 = 0, h2 = e2.implicitTypes.length; c2 < h2; c2 += 1)
                if ((p2 = e2.implicitTypes[c2]).resolve(e2.result)) {
                  e2.result = p2.construct(e2.result), e2.tag = p2.tag, e2.anchor !== null && (e2.anchorMap[e2.anchor] = e2.result);
                  break;
                }
            } else
              u.call(e2.typeMap[e2.kind || "fallback"], e2.tag) ? (p2 = e2.typeMap[e2.kind || "fallback"][e2.tag], e2.result !== null && p2.kind !== e2.kind && A(e2, "unacceptable node kind for !<" + e2.tag + '> tag; it should be "' + p2.kind + '", not "' + e2.kind + '"'), p2.resolve(e2.result) ? (e2.result = p2.construct(e2.result), e2.anchor !== null && (e2.anchorMap[e2.anchor] = e2.result)) : A(e2, "cannot resolve a node with !<" + e2.tag + "> explicit tag")) : A(e2, "unknown tag !<" + e2.tag + ">");
          return e2.listener !== null && e2.listener("close", e2), e2.tag !== null || e2.anchor !== null || S2;
        }
        function U(e2) {
          var t2, r2, n2, i2, o2 = e2.position, a2 = false;
          for (e2.version = null, e2.checkLineBreaks = e2.legacy, e2.tagMap = {}, e2.anchorMap = {}; (i2 = e2.input.charCodeAt(e2.position)) !== 0 && (I(e2, true, -1), i2 = e2.input.charCodeAt(e2.position), !(e2.lineIndent > 0 || i2 !== 37)); ) {
            for (a2 = true, i2 = e2.input.charCodeAt(++e2.position), t2 = e2.position; i2 !== 0 && !v(i2); )
              i2 = e2.input.charCodeAt(++e2.position);
            for (n2 = [], (r2 = e2.input.slice(t2, e2.position)).length < 1 && A(e2, "directive name must not be less than one character in length"); i2 !== 0; ) {
              for (; y(i2); )
                i2 = e2.input.charCodeAt(++e2.position);
              if (i2 === 35) {
                do {
                  i2 = e2.input.charCodeAt(++e2.position);
                } while (i2 !== 0 && !m(i2));
                break;
              }
              if (m(i2))
                break;
              for (t2 = e2.position; i2 !== 0 && !v(i2); )
                i2 = e2.input.charCodeAt(++e2.position);
              n2.push(e2.input.slice(t2, e2.position));
            }
            i2 !== 0 && P(e2), u.call(T, r2) ? T[r2](e2, r2, n2) : N(e2, 'unknown document directive "' + r2 + '"');
          }
          I(e2, true, -1), e2.lineIndent === 0 && e2.input.charCodeAt(e2.position) === 45 && e2.input.charCodeAt(e2.position + 1) === 45 && e2.input.charCodeAt(e2.position + 2) === 45 ? (e2.position += 3, I(e2, true, -1)) : a2 && A(e2, "directives end mark is expected"), z(e2, e2.lineIndent - 1, 4, false, true), I(e2, true, -1), e2.checkLineBreaks && c.test(e2.input.slice(o2, e2.position)) && N(e2, "non-ASCII line breaks are interpreted as content"), e2.documents.push(e2.result), e2.position === e2.lineStart && L(e2) ? e2.input.charCodeAt(e2.position) === 46 && (e2.position += 3, I(e2, true, -1)) : e2.position < e2.length - 1 && A(e2, "end of the stream or a document separator is expected");
        }
        function G(e2, t2) {
          t2 = t2 || {}, (e2 = String(e2)).length !== 0 && (e2.charCodeAt(e2.length - 1) !== 10 && e2.charCodeAt(e2.length - 1) !== 13 && (e2 += "\n"), e2.charCodeAt(0) === 65279 && (e2 = e2.slice(1)));
          var r2 = new S(e2, t2), n2 = e2.indexOf("\0");
          for (n2 !== -1 && (r2.position = n2, A(r2, "null byte is not allowed in input")), r2.input += "\0"; r2.input.charCodeAt(r2.position) === 32; )
            r2.lineIndent += 1, r2.position += 1;
          for (; r2.position < r2.length - 1; )
            U(r2);
          return r2.documents;
        }
        function X(e2, t2, r2) {
          t2 !== null && typeof t2 == "object" && r2 === void 0 && (r2 = t2, t2 = null);
          var n2 = G(e2, r2);
          if (typeof t2 != "function")
            return n2;
          for (var i2 = 0, o2 = n2.length; i2 < o2; i2 += 1)
            t2(n2[i2]);
        }
        function q(e2, t2) {
          var r2 = G(e2, t2);
          if (r2.length !== 0) {
            if (r2.length === 1)
              return r2[0];
            throw new i("expected a single document in the stream, but found more");
          }
        }
        e.exports.loadAll = X, e.exports.load = q, e.exports.safeLoadAll = function(e2, t2, r2) {
          return typeof t2 == "object" && t2 !== null && r2 === void 0 && (r2 = t2, t2 = null), X(e2, t2, n.extend({ schema: a }, r2));
        }, e.exports.safeLoad = function(e2, t2) {
          return q(e2, n.extend({ schema: a }, t2));
        };
      }, function(e, t, r) {
        "use strict";
        var n = r(38);
        function i(e2, t2, r2, n2, i2) {
          this.name = e2, this.buffer = t2, this.position = r2, this.line = n2, this.column = i2;
        }
        i.prototype.getSnippet = function(e2, t2) {
          var r2, i2, o, a, s;
          if (!this.buffer)
            return null;
          for (e2 = e2 || 4, t2 = t2 || 75, r2 = "", i2 = this.position; i2 > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(i2 - 1)) === -1; )
            if (i2 -= 1, this.position - i2 > t2 / 2 - 1) {
              r2 = " ... ", i2 += 5;
              break;
            }
          for (o = "", a = this.position; a < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(a)) === -1; )
            if ((a += 1) - this.position > t2 / 2 - 1) {
              o = " ... ", a -= 5;
              break;
            }
          return s = this.buffer.slice(i2, a), n.repeat(" ", e2) + r2 + s + o + "\n" + n.repeat(" ", e2 + this.position - i2 + r2.length) + "^";
        }, i.prototype.toString = function(e2) {
          var t2, r2 = "";
          return this.name && (r2 += 'in "' + this.name + '" '), r2 += "at line " + (this.line + 1) + ", column " + (this.column + 1), e2 || (t2 = this.getSnippet()) && (r2 += ":\n" + t2), r2;
        }, e.exports = i;
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:str", { kind: "scalar", construct: function(e2) {
          return e2 !== null ? e2 : "";
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:seq", { kind: "sequence", construct: function(e2) {
          return e2 !== null ? e2 : [];
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:map", { kind: "mapping", construct: function(e2) {
          return e2 !== null ? e2 : {};
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:null", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2 = e2.length;
          return t2 === 1 && e2 === "~" || t2 === 4 && (e2 === "null" || e2 === "Null" || e2 === "NULL");
        }, construct: function() {
          return null;
        }, predicate: function(e2) {
          return e2 === null;
        }, represent: { canonical: function() {
          return "~";
        }, lowercase: function() {
          return "null";
        }, uppercase: function() {
          return "NULL";
        }, camelcase: function() {
          return "Null";
        } }, defaultStyle: "lowercase" });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:bool", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          var t2 = e2.length;
          return t2 === 4 && (e2 === "true" || e2 === "True" || e2 === "TRUE") || t2 === 5 && (e2 === "false" || e2 === "False" || e2 === "FALSE");
        }, construct: function(e2) {
          return e2 === "true" || e2 === "True" || e2 === "TRUE";
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Boolean]";
        }, represent: { lowercase: function(e2) {
          return e2 ? "true" : "false";
        }, uppercase: function(e2) {
          return e2 ? "TRUE" : "FALSE";
        }, camelcase: function(e2) {
          return e2 ? "True" : "False";
        } }, defaultStyle: "lowercase" });
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(10);
        function o(e2) {
          return 48 <= e2 && e2 <= 55;
        }
        function a(e2) {
          return 48 <= e2 && e2 <= 57;
        }
        e.exports = new i("tag:yaml.org,2002:int", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          var t2, r2, n2 = e2.length, i2 = 0, s = false;
          if (!n2)
            return false;
          if ((t2 = e2[i2]) !== "-" && t2 !== "+" || (t2 = e2[++i2]), t2 === "0") {
            if (i2 + 1 === n2)
              return true;
            if ((t2 = e2[++i2]) === "b") {
              for (i2++; i2 < n2; i2++)
                if ((t2 = e2[i2]) !== "_") {
                  if (t2 !== "0" && t2 !== "1")
                    return false;
                  s = true;
                }
              return s && t2 !== "_";
            }
            if (t2 === "x") {
              for (i2++; i2 < n2; i2++)
                if ((t2 = e2[i2]) !== "_") {
                  if (!(48 <= (r2 = e2.charCodeAt(i2)) && r2 <= 57 || 65 <= r2 && r2 <= 70 || 97 <= r2 && r2 <= 102))
                    return false;
                  s = true;
                }
              return s && t2 !== "_";
            }
            for (; i2 < n2; i2++)
              if ((t2 = e2[i2]) !== "_") {
                if (!o(e2.charCodeAt(i2)))
                  return false;
                s = true;
              }
            return s && t2 !== "_";
          }
          if (t2 === "_")
            return false;
          for (; i2 < n2; i2++)
            if ((t2 = e2[i2]) !== "_") {
              if (t2 === ":")
                break;
              if (!a(e2.charCodeAt(i2)))
                return false;
              s = true;
            }
          return !(!s || t2 === "_") && (t2 !== ":" || /^(:[0-5]?[0-9])+$/.test(e2.slice(i2)));
        }, construct: function(e2) {
          var t2, r2, n2 = e2, i2 = 1, o2 = [];
          return n2.indexOf("_") !== -1 && (n2 = n2.replace(/_/g, "")), (t2 = n2[0]) !== "-" && t2 !== "+" || (t2 === "-" && (i2 = -1), t2 = (n2 = n2.slice(1))[0]), n2 === "0" ? 0 : t2 === "0" ? n2[1] === "b" ? i2 * parseInt(n2.slice(2), 2) : n2[1] === "x" ? i2 * parseInt(n2, 16) : i2 * parseInt(n2, 8) : n2.indexOf(":") !== -1 ? (n2.split(":").forEach(function(e3) {
            o2.unshift(parseInt(e3, 10));
          }), n2 = 0, r2 = 1, o2.forEach(function(e3) {
            n2 += e3 * r2, r2 *= 60;
          }), i2 * n2) : i2 * parseInt(n2, 10);
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Number]" && e2 % 1 == 0 && !n.isNegativeZero(e2);
        }, represent: { binary: function(e2) {
          return e2 >= 0 ? "0b" + e2.toString(2) : "-0b" + e2.toString(2).slice(1);
        }, octal: function(e2) {
          return e2 >= 0 ? "0" + e2.toString(8) : "-0" + e2.toString(8).slice(1);
        }, decimal: function(e2) {
          return e2.toString(10);
        }, hexadecimal: function(e2) {
          return e2 >= 0 ? "0x" + e2.toString(16).toUpperCase() : "-0x" + e2.toString(16).toUpperCase().slice(1);
        } }, defaultStyle: "decimal", styleAliases: { binary: [2, "bin"], octal: [8, "oct"], decimal: [10, "dec"], hexadecimal: [16, "hex"] } });
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(10), o = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
        var a = /^[-+]?[0-9]+e/;
        e.exports = new i("tag:yaml.org,2002:float", { kind: "scalar", resolve: function(e2) {
          return e2 !== null && !(!o.test(e2) || e2[e2.length - 1] === "_");
        }, construct: function(e2) {
          var t2, r2, n2, i2;
          return r2 = (t2 = e2.replace(/_/g, "").toLowerCase())[0] === "-" ? -1 : 1, i2 = [], "+-".indexOf(t2[0]) >= 0 && (t2 = t2.slice(1)), t2 === ".inf" ? r2 === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : t2 === ".nan" ? NaN : t2.indexOf(":") >= 0 ? (t2.split(":").forEach(function(e3) {
            i2.unshift(parseFloat(e3, 10));
          }), t2 = 0, n2 = 1, i2.forEach(function(e3) {
            t2 += e3 * n2, n2 *= 60;
          }), r2 * t2) : r2 * parseFloat(t2, 10);
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Number]" && (e2 % 1 != 0 || n.isNegativeZero(e2));
        }, represent: function(e2, t2) {
          var r2;
          if (isNaN(e2))
            switch (t2) {
              case "lowercase":
                return ".nan";
              case "uppercase":
                return ".NAN";
              case "camelcase":
                return ".NaN";
            }
          else if (Number.POSITIVE_INFINITY === e2)
            switch (t2) {
              case "lowercase":
                return ".inf";
              case "uppercase":
                return ".INF";
              case "camelcase":
                return ".Inf";
            }
          else if (Number.NEGATIVE_INFINITY === e2)
            switch (t2) {
              case "lowercase":
                return "-.inf";
              case "uppercase":
                return "-.INF";
              case "camelcase":
                return "-.Inf";
            }
          else if (n.isNegativeZero(e2))
            return "-0.0";
          return r2 = e2.toString(10), a.test(r2) ? r2.replace("e", ".e") : r2;
        }, defaultStyle: "lowercase" });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"), o = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
        e.exports = new n("tag:yaml.org,2002:timestamp", { kind: "scalar", resolve: function(e2) {
          return e2 !== null && (i.exec(e2) !== null || o.exec(e2) !== null);
        }, construct: function(e2) {
          var t2, r2, n2, a, s, u, l, c, h = 0, p = null;
          if ((t2 = i.exec(e2)) === null && (t2 = o.exec(e2)), t2 === null)
            throw new Error("Date resolve error");
          if (r2 = +t2[1], n2 = +t2[2] - 1, a = +t2[3], !t2[4])
            return new Date(Date.UTC(r2, n2, a));
          if (s = +t2[4], u = +t2[5], l = +t2[6], t2[7]) {
            for (h = t2[7].slice(0, 3); h.length < 3; )
              h += "0";
            h = +h;
          }
          return t2[9] && (p = 6e4 * (60 * +t2[10] + +(t2[11] || 0)), t2[9] === "-" && (p = -p)), c = new Date(Date.UTC(r2, n2, a, s, u, l, h)), p && c.setTime(c.getTime() - p), c;
        }, instanceOf: Date, represent: function(e2) {
          return e2.toISOString();
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:merge", { kind: "scalar", resolve: function(e2) {
          return e2 === "<<" || e2 === null;
        } });
      }, function(e, t, r) {
        "use strict";
        var n;
        try {
          n = r(145).Buffer;
        } catch (e2) {
        }
        var i = r(10), o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
        e.exports = new i("tag:yaml.org,2002:binary", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          var t2, r2, n2 = 0, i2 = e2.length, a = o;
          for (r2 = 0; r2 < i2; r2++)
            if (!((t2 = a.indexOf(e2.charAt(r2))) > 64)) {
              if (t2 < 0)
                return false;
              n2 += 6;
            }
          return n2 % 8 == 0;
        }, construct: function(e2) {
          var t2, r2, i2 = e2.replace(/[\r\n=]/g, ""), a = i2.length, s = o, u = 0, l = [];
          for (t2 = 0; t2 < a; t2++)
            t2 % 4 == 0 && t2 && (l.push(u >> 16 & 255), l.push(u >> 8 & 255), l.push(255 & u)), u = u << 6 | s.indexOf(i2.charAt(t2));
          return (r2 = a % 4 * 6) === 0 ? (l.push(u >> 16 & 255), l.push(u >> 8 & 255), l.push(255 & u)) : r2 === 18 ? (l.push(u >> 10 & 255), l.push(u >> 2 & 255)) : r2 === 12 && l.push(u >> 4 & 255), n ? n.from ? n.from(l) : new n(l) : l;
        }, predicate: function(e2) {
          return n && n.isBuffer(e2);
        }, represent: function(e2) {
          var t2, r2, n2 = "", i2 = 0, a = e2.length, s = o;
          for (t2 = 0; t2 < a; t2++)
            t2 % 3 == 0 && t2 && (n2 += s[i2 >> 18 & 63], n2 += s[i2 >> 12 & 63], n2 += s[i2 >> 6 & 63], n2 += s[63 & i2]), i2 = (i2 << 8) + e2[t2];
          return (r2 = a % 3) === 0 ? (n2 += s[i2 >> 18 & 63], n2 += s[i2 >> 12 & 63], n2 += s[i2 >> 6 & 63], n2 += s[63 & i2]) : r2 === 2 ? (n2 += s[i2 >> 10 & 63], n2 += s[i2 >> 4 & 63], n2 += s[i2 << 2 & 63], n2 += s[64]) : r2 === 1 && (n2 += s[i2 >> 2 & 63], n2 += s[i2 << 4 & 63], n2 += s[64], n2 += s[64]), n2;
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = Object.prototype.hasOwnProperty, o = Object.prototype.toString;
        e.exports = new n("tag:yaml.org,2002:omap", { kind: "sequence", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2, r2, n2, a, s, u = [], l = e2;
          for (t2 = 0, r2 = l.length; t2 < r2; t2 += 1) {
            if (n2 = l[t2], s = false, o.call(n2) !== "[object Object]")
              return false;
            for (a in n2)
              if (i.call(n2, a)) {
                if (s)
                  return false;
                s = true;
              }
            if (!s)
              return false;
            if (u.indexOf(a) !== -1)
              return false;
            u.push(a);
          }
          return true;
        }, construct: function(e2) {
          return e2 !== null ? e2 : [];
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = Object.prototype.toString;
        e.exports = new n("tag:yaml.org,2002:pairs", { kind: "sequence", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2, r2, n2, o, a, s = e2;
          for (a = new Array(s.length), t2 = 0, r2 = s.length; t2 < r2; t2 += 1) {
            if (n2 = s[t2], i.call(n2) !== "[object Object]")
              return false;
            if ((o = Object.keys(n2)).length !== 1)
              return false;
            a[t2] = [o[0], n2[o[0]]];
          }
          return true;
        }, construct: function(e2) {
          if (e2 === null)
            return [];
          var t2, r2, n2, i2, o, a = e2;
          for (o = new Array(a.length), t2 = 0, r2 = a.length; t2 < r2; t2 += 1)
            n2 = a[t2], i2 = Object.keys(n2), o[t2] = [i2[0], n2[i2[0]]];
          return o;
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10), i = Object.prototype.hasOwnProperty;
        e.exports = new n("tag:yaml.org,2002:set", { kind: "mapping", resolve: function(e2) {
          if (e2 === null)
            return true;
          var t2, r2 = e2;
          for (t2 in r2)
            if (i.call(r2, t2) && r2[t2] !== null)
              return false;
          return true;
        }, construct: function(e2) {
          return e2 !== null ? e2 : {};
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:js/undefined", { kind: "scalar", resolve: function() {
          return true;
        }, construct: function() {
        }, predicate: function(e2) {
          return e2 === void 0;
        }, represent: function() {
          return "";
        } });
      }, function(e, t, r) {
        "use strict";
        var n = r(10);
        e.exports = new n("tag:yaml.org,2002:js/regexp", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          if (e2.length === 0)
            return false;
          var t2 = e2, r2 = /\/([gim]*)$/.exec(e2), n2 = "";
          if (t2[0] === "/") {
            if (r2 && (n2 = r2[1]), n2.length > 3)
              return false;
            if (t2[t2.length - n2.length - 1] !== "/")
              return false;
          }
          return true;
        }, construct: function(e2) {
          var t2 = e2, r2 = /\/([gim]*)$/.exec(e2), n2 = "";
          return t2[0] === "/" && (r2 && (n2 = r2[1]), t2 = t2.slice(1, t2.length - n2.length - 1)), new RegExp(t2, n2);
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object RegExp]";
        }, represent: function(e2) {
          var t2 = "/" + e2.source + "/";
          return e2.global && (t2 += "g"), e2.multiline && (t2 += "m"), e2.ignoreCase && (t2 += "i"), t2;
        } });
      }, function(e, t, r) {
        "use strict";
        var n;
        try {
          n = r(302);
        } catch (e2) {
          typeof window != "undefined" && (n = window.esprima);
        }
        var i = r(10);
        e.exports = new i("tag:yaml.org,2002:js/function", { kind: "scalar", resolve: function(e2) {
          if (e2 === null)
            return false;
          try {
            var t2 = "(" + e2 + ")", r2 = n.parse(t2, { range: true });
            return r2.type === "Program" && r2.body.length === 1 && r2.body[0].type === "ExpressionStatement" && (r2.body[0].expression.type === "ArrowFunctionExpression" || r2.body[0].expression.type === "FunctionExpression");
          } catch (e3) {
            return false;
          }
        }, construct: function(e2) {
          var t2, r2 = "(" + e2 + ")", i2 = n.parse(r2, { range: true }), o = [];
          if (i2.type !== "Program" || i2.body.length !== 1 || i2.body[0].type !== "ExpressionStatement" || i2.body[0].expression.type !== "ArrowFunctionExpression" && i2.body[0].expression.type !== "FunctionExpression")
            throw new Error("Failed to resolve function");
          return i2.body[0].expression.params.forEach(function(e3) {
            o.push(e3.name);
          }), t2 = i2.body[0].expression.body.range, i2.body[0].expression.body.type === "BlockStatement" ? new Function(o, r2.slice(t2[0] + 1, t2[1] - 1)) : new Function(o, "return " + r2.slice(t2[0], t2[1]));
        }, predicate: function(e2) {
          return Object.prototype.toString.call(e2) === "[object Function]";
        }, represent: function(e2) {
          return e2.toString();
        } });
      }, function(e, t, r) {
        var n;
        n = function() {
          return function(e2) {
            var t2 = {};
            function r2(n2) {
              if (t2[n2])
                return t2[n2].exports;
              var i = t2[n2] = { exports: {}, id: n2, loaded: false };
              return e2[n2].call(i.exports, i, i.exports, r2), i.loaded = true, i.exports;
            }
            return r2.m = e2, r2.c = t2, r2.p = "", r2(0);
          }([function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(1), i = r2(3), o = r2(8), a = r2(15);
            function s(e3, t3, r3) {
              var a2 = null, s2 = function(e4, t4) {
                r3 && r3(e4, t4), a2 && a2.visit(e4, t4);
              }, u2 = typeof r3 == "function" ? s2 : null, l = false;
              if (t3) {
                l = typeof t3.comment == "boolean" && t3.comment;
                var c = typeof t3.attachComment == "boolean" && t3.attachComment;
                (l || c) && ((a2 = new n2.CommentHandler()).attach = c, t3.comment = true, u2 = s2);
              }
              var h, p = false;
              t3 && typeof t3.sourceType == "string" && (p = t3.sourceType === "module"), h = t3 && typeof t3.jsx == "boolean" && t3.jsx ? new i.JSXParser(e3, t3, u2) : new o.Parser(e3, t3, u2);
              var f = p ? h.parseModule() : h.parseScript();
              return l && a2 && (f.comments = a2.comments), h.config.tokens && (f.tokens = h.tokens), h.config.tolerant && (f.errors = h.errorHandler.errors), f;
            }
            t2.parse = s, t2.parseModule = function(e3, t3, r3) {
              var n3 = t3 || {};
              return n3.sourceType = "module", s(e3, n3, r3);
            }, t2.parseScript = function(e3, t3, r3) {
              var n3 = t3 || {};
              return n3.sourceType = "script", s(e3, n3, r3);
            }, t2.tokenize = function(e3, t3, r3) {
              var n3, i2 = new a.Tokenizer(e3, t3);
              n3 = [];
              try {
                for (; ; ) {
                  var o2 = i2.getNextToken();
                  if (!o2)
                    break;
                  r3 && (o2 = r3(o2)), n3.push(o2);
                }
              } catch (e4) {
                i2.errorHandler.tolerate(e4);
              }
              return i2.errorHandler.tolerant && (n3.errors = i2.errors()), n3;
            };
            var u = r2(2);
            t2.Syntax = u.Syntax, t2.version = "4.0.1";
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(2), i = function() {
              function e3() {
                this.attach = false, this.comments = [], this.stack = [], this.leading = [], this.trailing = [];
              }
              return e3.prototype.insertInnerComments = function(e4, t3) {
                if (e4.type === n2.Syntax.BlockStatement && e4.body.length === 0) {
                  for (var r3 = [], i2 = this.leading.length - 1; i2 >= 0; --i2) {
                    var o = this.leading[i2];
                    t3.end.offset >= o.start && (r3.unshift(o.comment), this.leading.splice(i2, 1), this.trailing.splice(i2, 1));
                  }
                  r3.length && (e4.innerComments = r3);
                }
              }, e3.prototype.findTrailingComments = function(e4) {
                var t3 = [];
                if (this.trailing.length > 0) {
                  for (var r3 = this.trailing.length - 1; r3 >= 0; --r3) {
                    var n3 = this.trailing[r3];
                    n3.start >= e4.end.offset && t3.unshift(n3.comment);
                  }
                  return this.trailing.length = 0, t3;
                }
                var i2 = this.stack[this.stack.length - 1];
                if (i2 && i2.node.trailingComments) {
                  var o = i2.node.trailingComments[0];
                  o && o.range[0] >= e4.end.offset && (t3 = i2.node.trailingComments, delete i2.node.trailingComments);
                }
                return t3;
              }, e3.prototype.findLeadingComments = function(e4) {
                for (var t3, r3 = []; this.stack.length > 0 && ((o = this.stack[this.stack.length - 1]) && o.start >= e4.start.offset); )
                  t3 = o.node, this.stack.pop();
                if (t3) {
                  for (var n3 = (t3.leadingComments ? t3.leadingComments.length : 0) - 1; n3 >= 0; --n3) {
                    var i2 = t3.leadingComments[n3];
                    i2.range[1] <= e4.start.offset && (r3.unshift(i2), t3.leadingComments.splice(n3, 1));
                  }
                  return t3.leadingComments && t3.leadingComments.length === 0 && delete t3.leadingComments, r3;
                }
                for (n3 = this.leading.length - 1; n3 >= 0; --n3) {
                  var o;
                  (o = this.leading[n3]).start <= e4.start.offset && (r3.unshift(o.comment), this.leading.splice(n3, 1));
                }
                return r3;
              }, e3.prototype.visitNode = function(e4, t3) {
                if (!(e4.type === n2.Syntax.Program && e4.body.length > 0)) {
                  this.insertInnerComments(e4, t3);
                  var r3 = this.findTrailingComments(t3), i2 = this.findLeadingComments(t3);
                  i2.length > 0 && (e4.leadingComments = i2), r3.length > 0 && (e4.trailingComments = r3), this.stack.push({ node: e4, start: t3.start.offset });
                }
              }, e3.prototype.visitComment = function(e4, t3) {
                var r3 = e4.type[0] === "L" ? "Line" : "Block", n3 = { type: r3, value: e4.value };
                if (e4.range && (n3.range = e4.range), e4.loc && (n3.loc = e4.loc), this.comments.push(n3), this.attach) {
                  var i2 = { comment: { type: r3, value: e4.value, range: [t3.start.offset, t3.end.offset] }, start: t3.start.offset };
                  e4.loc && (i2.comment.loc = e4.loc), e4.type = r3, this.leading.push(i2), this.trailing.push(i2);
                }
              }, e3.prototype.visit = function(e4, t3) {
                e4.type === "LineComment" || e4.type === "BlockComment" ? this.visitComment(e4, t3) : this.attach && this.visitNode(e4, t3);
              }, e3;
            }();
            t2.CommentHandler = i;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Syntax = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DoWhileStatement: "DoWhileStatement", DebuggerStatement: "DebuggerStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForOfStatement: "ForOfStatement", ForInStatement: "ForInStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchCase: "SwitchCase", SwitchStatement: "SwitchStatement", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" };
          }, function(e2, t2, r2) {
            "use strict";
            var n2, i = this && this.__extends || (n2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r3 in t3)
                t3.hasOwnProperty(r3) && (e3[r3] = t3[r3]);
            }, function(e3, t3) {
              function r3() {
                this.constructor = e3;
              }
              n2(e3, t3), e3.prototype = t3 === null ? Object.create(t3) : (r3.prototype = t3.prototype, new r3());
            });
            Object.defineProperty(t2, "__esModule", { value: true });
            var o = r2(4), a = r2(5), s = r2(6), u = r2(7), l = r2(8), c = r2(13), h = r2(14);
            function p(e3) {
              var t3;
              switch (e3.type) {
                case s.JSXSyntax.JSXIdentifier:
                  t3 = e3.name;
                  break;
                case s.JSXSyntax.JSXNamespacedName:
                  var r3 = e3;
                  t3 = p(r3.namespace) + ":" + p(r3.name);
                  break;
                case s.JSXSyntax.JSXMemberExpression:
                  var n3 = e3;
                  t3 = p(n3.object) + "." + p(n3.property);
              }
              return t3;
            }
            c.TokenName[100] = "JSXIdentifier", c.TokenName[101] = "JSXText";
            var f = function(e3) {
              function t3(t4, r3, n3) {
                return e3.call(this, t4, r3, n3) || this;
              }
              return i(t3, e3), t3.prototype.parsePrimaryExpression = function() {
                return this.match("<") ? this.parseJSXRoot() : e3.prototype.parsePrimaryExpression.call(this);
              }, t3.prototype.startJSX = function() {
                this.scanner.index = this.startMarker.index, this.scanner.lineNumber = this.startMarker.line, this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
              }, t3.prototype.finishJSX = function() {
                this.nextToken();
              }, t3.prototype.reenterJSX = function() {
                this.startJSX(), this.expectJSX("}"), this.config.tokens && this.tokens.pop();
              }, t3.prototype.createJSXNode = function() {
                return this.collectComments(), { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t3.prototype.createJSXChildNode = function() {
                return { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }, t3.prototype.scanXHTMLEntity = function(e4) {
                for (var t4 = "&", r3 = true, n3 = false, i2 = false, a2 = false; !this.scanner.eof() && r3 && !n3; ) {
                  var s2 = this.scanner.source[this.scanner.index];
                  if (s2 === e4)
                    break;
                  if (n3 = s2 === ";", t4 += s2, ++this.scanner.index, !n3)
                    switch (t4.length) {
                      case 2:
                        i2 = s2 === "#";
                        break;
                      case 3:
                        i2 && (r3 = (a2 = s2 === "x") || o.Character.isDecimalDigit(s2.charCodeAt(0)), i2 = i2 && !a2);
                        break;
                      default:
                        r3 = (r3 = r3 && !(i2 && !o.Character.isDecimalDigit(s2.charCodeAt(0)))) && !(a2 && !o.Character.isHexDigit(s2.charCodeAt(0)));
                    }
                }
                if (r3 && n3 && t4.length > 2) {
                  var u2 = t4.substr(1, t4.length - 2);
                  i2 && u2.length > 1 ? t4 = String.fromCharCode(parseInt(u2.substr(1), 10)) : a2 && u2.length > 2 ? t4 = String.fromCharCode(parseInt("0" + u2.substr(1), 16)) : i2 || a2 || !h.XHTMLEntities[u2] || (t4 = h.XHTMLEntities[u2]);
                }
                return t4;
              }, t3.prototype.lexJSX = function() {
                var e4 = this.scanner.source.charCodeAt(this.scanner.index);
                if (e4 === 60 || e4 === 62 || e4 === 47 || e4 === 58 || e4 === 61 || e4 === 123 || e4 === 125)
                  return { type: 7, value: s2 = this.scanner.source[this.scanner.index++], lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index - 1, end: this.scanner.index };
                if (e4 === 34 || e4 === 39) {
                  for (var t4 = this.scanner.index, r3 = this.scanner.source[this.scanner.index++], n3 = ""; !this.scanner.eof() && (u2 = this.scanner.source[this.scanner.index++]) !== r3; )
                    n3 += u2 === "&" ? this.scanXHTMLEntity(r3) : u2;
                  return { type: 8, value: n3, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                }
                if (e4 === 46) {
                  var i2 = this.scanner.source.charCodeAt(this.scanner.index + 1), a2 = this.scanner.source.charCodeAt(this.scanner.index + 2), s2 = i2 === 46 && a2 === 46 ? "..." : ".";
                  return t4 = this.scanner.index, this.scanner.index += s2.length, { type: 7, value: s2, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                }
                if (e4 === 96)
                  return { type: 10, value: "", lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index, end: this.scanner.index };
                if (o.Character.isIdentifierStart(e4) && e4 !== 92) {
                  for (t4 = this.scanner.index, ++this.scanner.index; !this.scanner.eof(); ) {
                    var u2 = this.scanner.source.charCodeAt(this.scanner.index);
                    if (o.Character.isIdentifierPart(u2) && u2 !== 92)
                      ++this.scanner.index;
                    else {
                      if (u2 !== 45)
                        break;
                      ++this.scanner.index;
                    }
                  }
                  return { type: 100, value: this.scanner.source.slice(t4, this.scanner.index), lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                }
                return this.scanner.lex();
              }, t3.prototype.nextJSXToken = function() {
                this.collectComments(), this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                var e4 = this.lexJSX();
                return this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.config.tokens && this.tokens.push(this.convertToken(e4)), e4;
              }, t3.prototype.nextJSXText = function() {
                this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                for (var e4 = this.scanner.index, t4 = ""; !this.scanner.eof(); ) {
                  var r3 = this.scanner.source[this.scanner.index];
                  if (r3 === "{" || r3 === "<")
                    break;
                  ++this.scanner.index, t4 += r3, o.Character.isLineTerminator(r3.charCodeAt(0)) && (++this.scanner.lineNumber, r3 === "\r" && this.scanner.source[this.scanner.index] === "\n" && ++this.scanner.index, this.scanner.lineStart = this.scanner.index);
                }
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                var n3 = { type: 101, value: t4, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: e4, end: this.scanner.index };
                return t4.length > 0 && this.config.tokens && this.tokens.push(this.convertToken(n3)), n3;
              }, t3.prototype.peekJSXToken = function() {
                var e4 = this.scanner.saveState();
                this.scanner.scanComments();
                var t4 = this.lexJSX();
                return this.scanner.restoreState(e4), t4;
              }, t3.prototype.expectJSX = function(e4) {
                var t4 = this.nextJSXToken();
                t4.type === 7 && t4.value === e4 || this.throwUnexpectedToken(t4);
              }, t3.prototype.matchJSX = function(e4) {
                var t4 = this.peekJSXToken();
                return t4.type === 7 && t4.value === e4;
              }, t3.prototype.parseJSXIdentifier = function() {
                var e4 = this.createJSXNode(), t4 = this.nextJSXToken();
                return t4.type !== 100 && this.throwUnexpectedToken(t4), this.finalize(e4, new a.JSXIdentifier(t4.value));
              }, t3.prototype.parseJSXElementName = function() {
                var e4 = this.createJSXNode(), t4 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var r3 = t4;
                  this.expectJSX(":");
                  var n3 = this.parseJSXIdentifier();
                  t4 = this.finalize(e4, new a.JSXNamespacedName(r3, n3));
                } else if (this.matchJSX("."))
                  for (; this.matchJSX("."); ) {
                    var i2 = t4;
                    this.expectJSX(".");
                    var o2 = this.parseJSXIdentifier();
                    t4 = this.finalize(e4, new a.JSXMemberExpression(i2, o2));
                  }
                return t4;
              }, t3.prototype.parseJSXAttributeName = function() {
                var e4, t4 = this.createJSXNode(), r3 = this.parseJSXIdentifier();
                if (this.matchJSX(":")) {
                  var n3 = r3;
                  this.expectJSX(":");
                  var i2 = this.parseJSXIdentifier();
                  e4 = this.finalize(t4, new a.JSXNamespacedName(n3, i2));
                } else
                  e4 = r3;
                return e4;
              }, t3.prototype.parseJSXStringLiteralAttribute = function() {
                var e4 = this.createJSXNode(), t4 = this.nextJSXToken();
                t4.type !== 8 && this.throwUnexpectedToken(t4);
                var r3 = this.getTokenRaw(t4);
                return this.finalize(e4, new u.Literal(t4.value, r3));
              }, t3.prototype.parseJSXExpressionAttribute = function() {
                var e4 = this.createJSXNode();
                this.expectJSX("{"), this.finishJSX(), this.match("}") && this.tolerateError("JSX attributes must only be assigned a non-empty expression");
                var t4 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e4, new a.JSXExpressionContainer(t4));
              }, t3.prototype.parseJSXAttributeValue = function() {
                return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
              }, t3.prototype.parseJSXNameValueAttribute = function() {
                var e4 = this.createJSXNode(), t4 = this.parseJSXAttributeName(), r3 = null;
                return this.matchJSX("=") && (this.expectJSX("="), r3 = this.parseJSXAttributeValue()), this.finalize(e4, new a.JSXAttribute(t4, r3));
              }, t3.prototype.parseJSXSpreadAttribute = function() {
                var e4 = this.createJSXNode();
                this.expectJSX("{"), this.expectJSX("..."), this.finishJSX();
                var t4 = this.parseAssignmentExpression();
                return this.reenterJSX(), this.finalize(e4, new a.JSXSpreadAttribute(t4));
              }, t3.prototype.parseJSXAttributes = function() {
                for (var e4 = []; !this.matchJSX("/") && !this.matchJSX(">"); ) {
                  var t4 = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                  e4.push(t4);
                }
                return e4;
              }, t3.prototype.parseJSXOpeningElement = function() {
                var e4 = this.createJSXNode();
                this.expectJSX("<");
                var t4 = this.parseJSXElementName(), r3 = this.parseJSXAttributes(), n3 = this.matchJSX("/");
                return n3 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e4, new a.JSXOpeningElement(t4, n3, r3));
              }, t3.prototype.parseJSXBoundaryElement = function() {
                var e4 = this.createJSXNode();
                if (this.expectJSX("<"), this.matchJSX("/")) {
                  this.expectJSX("/");
                  var t4 = this.parseJSXElementName();
                  return this.expectJSX(">"), this.finalize(e4, new a.JSXClosingElement(t4));
                }
                var r3 = this.parseJSXElementName(), n3 = this.parseJSXAttributes(), i2 = this.matchJSX("/");
                return i2 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e4, new a.JSXOpeningElement(r3, i2, n3));
              }, t3.prototype.parseJSXEmptyExpression = function() {
                var e4 = this.createJSXChildNode();
                return this.collectComments(), this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.finalize(e4, new a.JSXEmptyExpression());
              }, t3.prototype.parseJSXExpressionContainer = function() {
                var e4, t4 = this.createJSXNode();
                return this.expectJSX("{"), this.matchJSX("}") ? (e4 = this.parseJSXEmptyExpression(), this.expectJSX("}")) : (this.finishJSX(), e4 = this.parseAssignmentExpression(), this.reenterJSX()), this.finalize(t4, new a.JSXExpressionContainer(e4));
              }, t3.prototype.parseJSXChildren = function() {
                for (var e4 = []; !this.scanner.eof(); ) {
                  var t4 = this.createJSXChildNode(), r3 = this.nextJSXText();
                  if (r3.start < r3.end) {
                    var n3 = this.getTokenRaw(r3), i2 = this.finalize(t4, new a.JSXText(r3.value, n3));
                    e4.push(i2);
                  }
                  if (this.scanner.source[this.scanner.index] !== "{")
                    break;
                  var o2 = this.parseJSXExpressionContainer();
                  e4.push(o2);
                }
                return e4;
              }, t3.prototype.parseComplexJSXElement = function(e4) {
                for (var t4 = []; !this.scanner.eof(); ) {
                  e4.children = e4.children.concat(this.parseJSXChildren());
                  var r3 = this.createJSXChildNode(), n3 = this.parseJSXBoundaryElement();
                  if (n3.type === s.JSXSyntax.JSXOpeningElement) {
                    var i2 = n3;
                    if (i2.selfClosing) {
                      var o2 = this.finalize(r3, new a.JSXElement(i2, [], null));
                      e4.children.push(o2);
                    } else
                      t4.push(e4), e4 = { node: r3, opening: i2, closing: null, children: [] };
                  }
                  if (n3.type === s.JSXSyntax.JSXClosingElement) {
                    e4.closing = n3;
                    var u2 = p(e4.opening.name);
                    if (u2 !== p(e4.closing.name) && this.tolerateError("Expected corresponding JSX closing tag for %0", u2), !(t4.length > 0))
                      break;
                    o2 = this.finalize(e4.node, new a.JSXElement(e4.opening, e4.children, e4.closing)), (e4 = t4[t4.length - 1]).children.push(o2), t4.pop();
                  }
                }
                return e4;
              }, t3.prototype.parseJSXElement = function() {
                var e4 = this.createJSXNode(), t4 = this.parseJSXOpeningElement(), r3 = [], n3 = null;
                if (!t4.selfClosing) {
                  var i2 = this.parseComplexJSXElement({ node: e4, opening: t4, closing: n3, children: r3 });
                  r3 = i2.children, n3 = i2.closing;
                }
                return this.finalize(e4, new a.JSXElement(t4, r3, n3));
              }, t3.prototype.parseJSXRoot = function() {
                this.config.tokens && this.tokens.pop(), this.startJSX();
                var e4 = this.parseJSXElement();
                return this.finishJSX(), e4;
              }, t3.prototype.isStartOfExpression = function() {
                return e3.prototype.isStartOfExpression.call(this) || this.match("<");
              }, t3;
            }(l.Parser);
            t2.JSXParser = f;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var r2 = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ };
            t2.Character = { fromCodePoint: function(e3) {
              return e3 < 65536 ? String.fromCharCode(e3) : String.fromCharCode(55296 + (e3 - 65536 >> 10)) + String.fromCharCode(56320 + (e3 - 65536 & 1023));
            }, isWhiteSpace: function(e3) {
              return e3 === 32 || e3 === 9 || e3 === 11 || e3 === 12 || e3 === 160 || e3 >= 5760 && [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(e3) >= 0;
            }, isLineTerminator: function(e3) {
              return e3 === 10 || e3 === 13 || e3 === 8232 || e3 === 8233;
            }, isIdentifierStart: function(e3) {
              return e3 === 36 || e3 === 95 || e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122 || e3 === 92 || e3 >= 128 && r2.NonAsciiIdentifierStart.test(t2.Character.fromCodePoint(e3));
            }, isIdentifierPart: function(e3) {
              return e3 === 36 || e3 === 95 || e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122 || e3 >= 48 && e3 <= 57 || e3 === 92 || e3 >= 128 && r2.NonAsciiIdentifierPart.test(t2.Character.fromCodePoint(e3));
            }, isDecimalDigit: function(e3) {
              return e3 >= 48 && e3 <= 57;
            }, isHexDigit: function(e3) {
              return e3 >= 48 && e3 <= 57 || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
            }, isOctalDigit: function(e3) {
              return e3 >= 48 && e3 <= 55;
            } };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(6), i = function(e3) {
              this.type = n2.JSXSyntax.JSXClosingElement, this.name = e3;
            };
            t2.JSXClosingElement = i;
            var o = function(e3, t3, r3) {
              this.type = n2.JSXSyntax.JSXElement, this.openingElement = e3, this.children = t3, this.closingElement = r3;
            };
            t2.JSXElement = o;
            var a = function() {
              this.type = n2.JSXSyntax.JSXEmptyExpression;
            };
            t2.JSXEmptyExpression = a;
            var s = function(e3) {
              this.type = n2.JSXSyntax.JSXExpressionContainer, this.expression = e3;
            };
            t2.JSXExpressionContainer = s;
            var u = function(e3) {
              this.type = n2.JSXSyntax.JSXIdentifier, this.name = e3;
            };
            t2.JSXIdentifier = u;
            var l = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXMemberExpression, this.object = e3, this.property = t3;
            };
            t2.JSXMemberExpression = l;
            var c = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXAttribute, this.name = e3, this.value = t3;
            };
            t2.JSXAttribute = c;
            var h = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXNamespacedName, this.namespace = e3, this.name = t3;
            };
            t2.JSXNamespacedName = h;
            var p = function(e3, t3, r3) {
              this.type = n2.JSXSyntax.JSXOpeningElement, this.name = e3, this.selfClosing = t3, this.attributes = r3;
            };
            t2.JSXOpeningElement = p;
            var f = function(e3) {
              this.type = n2.JSXSyntax.JSXSpreadAttribute, this.argument = e3;
            };
            t2.JSXSpreadAttribute = f;
            var d = function(e3, t3) {
              this.type = n2.JSXSyntax.JSXText, this.value = e3, this.raw = t3;
            };
            t2.JSXText = d;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.JSXSyntax = { JSXAttribute: "JSXAttribute", JSXClosingElement: "JSXClosingElement", JSXElement: "JSXElement", JSXEmptyExpression: "JSXEmptyExpression", JSXExpressionContainer: "JSXExpressionContainer", JSXIdentifier: "JSXIdentifier", JSXMemberExpression: "JSXMemberExpression", JSXNamespacedName: "JSXNamespacedName", JSXOpeningElement: "JSXOpeningElement", JSXSpreadAttribute: "JSXSpreadAttribute", JSXText: "JSXText" };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(2), i = function(e3) {
              this.type = n2.Syntax.ArrayExpression, this.elements = e3;
            };
            t2.ArrayExpression = i;
            var o = function(e3) {
              this.type = n2.Syntax.ArrayPattern, this.elements = e3;
            };
            t2.ArrayPattern = o;
            var a = function(e3, t3, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e3, this.body = t3, this.generator = false, this.expression = r3, this.async = false;
            };
            t2.ArrowFunctionExpression = a;
            var s = function(e3, t3, r3) {
              this.type = n2.Syntax.AssignmentExpression, this.operator = e3, this.left = t3, this.right = r3;
            };
            t2.AssignmentExpression = s;
            var u = function(e3, t3) {
              this.type = n2.Syntax.AssignmentPattern, this.left = e3, this.right = t3;
            };
            t2.AssignmentPattern = u;
            var l = function(e3, t3, r3) {
              this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e3, this.body = t3, this.generator = false, this.expression = r3, this.async = true;
            };
            t2.AsyncArrowFunctionExpression = l;
            var c = function(e3, t3, r3) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e3, this.params = t3, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t2.AsyncFunctionDeclaration = c;
            var h = function(e3, t3, r3) {
              this.type = n2.Syntax.FunctionExpression, this.id = e3, this.params = t3, this.body = r3, this.generator = false, this.expression = false, this.async = true;
            };
            t2.AsyncFunctionExpression = h;
            var p = function(e3) {
              this.type = n2.Syntax.AwaitExpression, this.argument = e3;
            };
            t2.AwaitExpression = p;
            var f = function(e3, t3, r3) {
              var i2 = e3 === "||" || e3 === "&&";
              this.type = i2 ? n2.Syntax.LogicalExpression : n2.Syntax.BinaryExpression, this.operator = e3, this.left = t3, this.right = r3;
            };
            t2.BinaryExpression = f;
            var d = function(e3) {
              this.type = n2.Syntax.BlockStatement, this.body = e3;
            };
            t2.BlockStatement = d;
            var m = function(e3) {
              this.type = n2.Syntax.BreakStatement, this.label = e3;
            };
            t2.BreakStatement = m;
            var y = function(e3, t3) {
              this.type = n2.Syntax.CallExpression, this.callee = e3, this.arguments = t3;
            };
            t2.CallExpression = y;
            var v = function(e3, t3) {
              this.type = n2.Syntax.CatchClause, this.param = e3, this.body = t3;
            };
            t2.CatchClause = v;
            var _ = function(e3) {
              this.type = n2.Syntax.ClassBody, this.body = e3;
            };
            t2.ClassBody = _;
            var g = function(e3, t3, r3) {
              this.type = n2.Syntax.ClassDeclaration, this.id = e3, this.superClass = t3, this.body = r3;
            };
            t2.ClassDeclaration = g;
            var b = function(e3, t3, r3) {
              this.type = n2.Syntax.ClassExpression, this.id = e3, this.superClass = t3, this.body = r3;
            };
            t2.ClassExpression = b;
            var x = function(e3, t3) {
              this.type = n2.Syntax.MemberExpression, this.computed = true, this.object = e3, this.property = t3;
            };
            t2.ComputedMemberExpression = x;
            var w = function(e3, t3, r3) {
              this.type = n2.Syntax.ConditionalExpression, this.test = e3, this.consequent = t3, this.alternate = r3;
            };
            t2.ConditionalExpression = w;
            var E = function(e3) {
              this.type = n2.Syntax.ContinueStatement, this.label = e3;
            };
            t2.ContinueStatement = E;
            var D = function() {
              this.type = n2.Syntax.DebuggerStatement;
            };
            t2.DebuggerStatement = D;
            var S = function(e3, t3) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e3, this.directive = t3;
            };
            t2.Directive = S;
            var C = function(e3, t3) {
              this.type = n2.Syntax.DoWhileStatement, this.body = e3, this.test = t3;
            };
            t2.DoWhileStatement = C;
            var A = function() {
              this.type = n2.Syntax.EmptyStatement;
            };
            t2.EmptyStatement = A;
            var N = function(e3) {
              this.type = n2.Syntax.ExportAllDeclaration, this.source = e3;
            };
            t2.ExportAllDeclaration = N;
            var T = function(e3) {
              this.type = n2.Syntax.ExportDefaultDeclaration, this.declaration = e3;
            };
            t2.ExportDefaultDeclaration = T;
            var O = function(e3, t3, r3) {
              this.type = n2.Syntax.ExportNamedDeclaration, this.declaration = e3, this.specifiers = t3, this.source = r3;
            };
            t2.ExportNamedDeclaration = O;
            var F = function(e3, t3) {
              this.type = n2.Syntax.ExportSpecifier, this.exported = t3, this.local = e3;
            };
            t2.ExportSpecifier = F;
            var k = function(e3) {
              this.type = n2.Syntax.ExpressionStatement, this.expression = e3;
            };
            t2.ExpressionStatement = k;
            var P = function(e3, t3, r3) {
              this.type = n2.Syntax.ForInStatement, this.left = e3, this.right = t3, this.body = r3, this.each = false;
            };
            t2.ForInStatement = P;
            var I = function(e3, t3, r3) {
              this.type = n2.Syntax.ForOfStatement, this.left = e3, this.right = t3, this.body = r3;
            };
            t2.ForOfStatement = I;
            var L = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.ForStatement, this.init = e3, this.test = t3, this.update = r3, this.body = i2;
            };
            t2.ForStatement = L;
            var M = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.FunctionDeclaration, this.id = e3, this.params = t3, this.body = r3, this.generator = i2, this.expression = false, this.async = false;
            };
            t2.FunctionDeclaration = M;
            var B = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.FunctionExpression, this.id = e3, this.params = t3, this.body = r3, this.generator = i2, this.expression = false, this.async = false;
            };
            t2.FunctionExpression = B;
            var j = function(e3) {
              this.type = n2.Syntax.Identifier, this.name = e3;
            };
            t2.Identifier = j;
            var R = function(e3, t3, r3) {
              this.type = n2.Syntax.IfStatement, this.test = e3, this.consequent = t3, this.alternate = r3;
            };
            t2.IfStatement = R;
            var z = function(e3, t3) {
              this.type = n2.Syntax.ImportDeclaration, this.specifiers = e3, this.source = t3;
            };
            t2.ImportDeclaration = z;
            var U = function(e3) {
              this.type = n2.Syntax.ImportDefaultSpecifier, this.local = e3;
            };
            t2.ImportDefaultSpecifier = U;
            var G = function(e3) {
              this.type = n2.Syntax.ImportNamespaceSpecifier, this.local = e3;
            };
            t2.ImportNamespaceSpecifier = G;
            var X = function(e3, t3) {
              this.type = n2.Syntax.ImportSpecifier, this.local = e3, this.imported = t3;
            };
            t2.ImportSpecifier = X;
            var q = function(e3, t3) {
              this.type = n2.Syntax.LabeledStatement, this.label = e3, this.body = t3;
            };
            t2.LabeledStatement = q;
            var W = function(e3, t3) {
              this.type = n2.Syntax.Literal, this.value = e3, this.raw = t3;
            };
            t2.Literal = W;
            var H = function(e3, t3) {
              this.type = n2.Syntax.MetaProperty, this.meta = e3, this.property = t3;
            };
            t2.MetaProperty = H;
            var J = function(e3, t3, r3, i2, o2) {
              this.type = n2.Syntax.MethodDefinition, this.key = e3, this.computed = t3, this.value = r3, this.kind = i2, this.static = o2;
            };
            t2.MethodDefinition = J;
            var Y = function(e3) {
              this.type = n2.Syntax.Program, this.body = e3, this.sourceType = "module";
            };
            t2.Module = Y;
            var V = function(e3, t3) {
              this.type = n2.Syntax.NewExpression, this.callee = e3, this.arguments = t3;
            };
            t2.NewExpression = V;
            var K = function(e3) {
              this.type = n2.Syntax.ObjectExpression, this.properties = e3;
            };
            t2.ObjectExpression = K;
            var $ = function(e3) {
              this.type = n2.Syntax.ObjectPattern, this.properties = e3;
            };
            t2.ObjectPattern = $;
            var Q = function(e3, t3, r3, i2, o2, a2) {
              this.type = n2.Syntax.Property, this.key = t3, this.computed = r3, this.value = i2, this.kind = e3, this.method = o2, this.shorthand = a2;
            };
            t2.Property = Q;
            var Z = function(e3, t3, r3, i2) {
              this.type = n2.Syntax.Literal, this.value = e3, this.raw = t3, this.regex = { pattern: r3, flags: i2 };
            };
            t2.RegexLiteral = Z;
            var ee = function(e3) {
              this.type = n2.Syntax.RestElement, this.argument = e3;
            };
            t2.RestElement = ee;
            var te = function(e3) {
              this.type = n2.Syntax.ReturnStatement, this.argument = e3;
            };
            t2.ReturnStatement = te;
            var re = function(e3) {
              this.type = n2.Syntax.Program, this.body = e3, this.sourceType = "script";
            };
            t2.Script = re;
            var ne = function(e3) {
              this.type = n2.Syntax.SequenceExpression, this.expressions = e3;
            };
            t2.SequenceExpression = ne;
            var ie = function(e3) {
              this.type = n2.Syntax.SpreadElement, this.argument = e3;
            };
            t2.SpreadElement = ie;
            var oe = function(e3, t3) {
              this.type = n2.Syntax.MemberExpression, this.computed = false, this.object = e3, this.property = t3;
            };
            t2.StaticMemberExpression = oe;
            var ae = function() {
              this.type = n2.Syntax.Super;
            };
            t2.Super = ae;
            var se = function(e3, t3) {
              this.type = n2.Syntax.SwitchCase, this.test = e3, this.consequent = t3;
            };
            t2.SwitchCase = se;
            var ue = function(e3, t3) {
              this.type = n2.Syntax.SwitchStatement, this.discriminant = e3, this.cases = t3;
            };
            t2.SwitchStatement = ue;
            var le = function(e3, t3) {
              this.type = n2.Syntax.TaggedTemplateExpression, this.tag = e3, this.quasi = t3;
            };
            t2.TaggedTemplateExpression = le;
            var ce = function(e3, t3) {
              this.type = n2.Syntax.TemplateElement, this.value = e3, this.tail = t3;
            };
            t2.TemplateElement = ce;
            var he = function(e3, t3) {
              this.type = n2.Syntax.TemplateLiteral, this.quasis = e3, this.expressions = t3;
            };
            t2.TemplateLiteral = he;
            var pe = function() {
              this.type = n2.Syntax.ThisExpression;
            };
            t2.ThisExpression = pe;
            var fe = function(e3) {
              this.type = n2.Syntax.ThrowStatement, this.argument = e3;
            };
            t2.ThrowStatement = fe;
            var de = function(e3, t3, r3) {
              this.type = n2.Syntax.TryStatement, this.block = e3, this.handler = t3, this.finalizer = r3;
            };
            t2.TryStatement = de;
            var me = function(e3, t3) {
              this.type = n2.Syntax.UnaryExpression, this.operator = e3, this.argument = t3, this.prefix = true;
            };
            t2.UnaryExpression = me;
            var ye = function(e3, t3, r3) {
              this.type = n2.Syntax.UpdateExpression, this.operator = e3, this.argument = t3, this.prefix = r3;
            };
            t2.UpdateExpression = ye;
            var ve = function(e3, t3) {
              this.type = n2.Syntax.VariableDeclaration, this.declarations = e3, this.kind = t3;
            };
            t2.VariableDeclaration = ve;
            var _e = function(e3, t3) {
              this.type = n2.Syntax.VariableDeclarator, this.id = e3, this.init = t3;
            };
            t2.VariableDeclarator = _e;
            var ge = function(e3, t3) {
              this.type = n2.Syntax.WhileStatement, this.test = e3, this.body = t3;
            };
            t2.WhileStatement = ge;
            var be = function(e3, t3) {
              this.type = n2.Syntax.WithStatement, this.object = e3, this.body = t3;
            };
            t2.WithStatement = be;
            var xe = function(e3, t3) {
              this.type = n2.Syntax.YieldExpression, this.argument = e3, this.delegate = t3;
            };
            t2.YieldExpression = xe;
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(9), i = r2(10), o = r2(11), a = r2(7), s = r2(12), u = r2(2), l = r2(13), c = function() {
              function e3(e4, t3, r3) {
                t3 === void 0 && (t3 = {}), this.config = { range: typeof t3.range == "boolean" && t3.range, loc: typeof t3.loc == "boolean" && t3.loc, source: null, tokens: typeof t3.tokens == "boolean" && t3.tokens, comment: typeof t3.comment == "boolean" && t3.comment, tolerant: typeof t3.tolerant == "boolean" && t3.tolerant }, this.config.loc && t3.source && t3.source !== null && (this.config.source = String(t3.source)), this.delegate = r3, this.errorHandler = new i.ErrorHandler(), this.errorHandler.tolerant = this.config.tolerant, this.scanner = new s.Scanner(e4, this.errorHandler), this.scanner.trackComment = this.config.comment, this.operatorPrecedence = { ")": 0, ";": 0, ",": 0, "=": 0, "]": 0, "||": 1, "&&": 2, "|": 3, "^": 4, "&": 5, "==": 6, "!=": 6, "===": 6, "!==": 6, "<": 7, ">": 7, "<=": 7, ">=": 7, "<<": 8, ">>": 8, ">>>": 8, "+": 9, "-": 9, "*": 11, "/": 11, "%": 11 }, this.lookahead = { type: 2, value: "", lineNumber: this.scanner.lineNumber, lineStart: 0, start: 0, end: 0 }, this.hasLineTerminator = false, this.context = { isModule: false, await: false, allowIn: true, allowStrictDirective: true, allowYield: true, firstCoverInitializedNameError: null, isAssignmentTarget: false, isBindingElement: false, inFunctionBody: false, inIteration: false, inSwitch: false, labelSet: {}, strict: false }, this.tokens = [], this.startMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.lastMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.nextToken(), this.lastMarker = { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
              }
              return e3.prototype.throwError = function(e4) {
                for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                  t3[r3 - 1] = arguments[r3];
                var i2 = Array.prototype.slice.call(arguments, 1), o2 = e4.replace(/%(\d)/g, function(e5, t4) {
                  return n2.assert(t4 < i2.length, "Message reference must be in range"), i2[t4];
                }), a2 = this.lastMarker.index, s2 = this.lastMarker.line, u2 = this.lastMarker.column + 1;
                throw this.errorHandler.createError(a2, s2, u2, o2);
              }, e3.prototype.tolerateError = function(e4) {
                for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                  t3[r3 - 1] = arguments[r3];
                var i2 = Array.prototype.slice.call(arguments, 1), o2 = e4.replace(/%(\d)/g, function(e5, t4) {
                  return n2.assert(t4 < i2.length, "Message reference must be in range"), i2[t4];
                }), a2 = this.lastMarker.index, s2 = this.scanner.lineNumber, u2 = this.lastMarker.column + 1;
                this.errorHandler.tolerateError(a2, s2, u2, o2);
              }, e3.prototype.unexpectedTokenError = function(e4, t3) {
                var r3, n3 = t3 || o.Messages.UnexpectedToken;
                if (e4 ? (t3 || (n3 = e4.type === 2 ? o.Messages.UnexpectedEOS : e4.type === 3 ? o.Messages.UnexpectedIdentifier : e4.type === 6 ? o.Messages.UnexpectedNumber : e4.type === 8 ? o.Messages.UnexpectedString : e4.type === 10 ? o.Messages.UnexpectedTemplate : o.Messages.UnexpectedToken, e4.type === 4 && (this.scanner.isFutureReservedWord(e4.value) ? n3 = o.Messages.UnexpectedReserved : this.context.strict && this.scanner.isStrictModeReservedWord(e4.value) && (n3 = o.Messages.StrictReservedWord))), r3 = e4.value) : r3 = "ILLEGAL", n3 = n3.replace("%0", r3), e4 && typeof e4.lineNumber == "number") {
                  var i2 = e4.start, a2 = e4.lineNumber, s2 = this.lastMarker.index - this.lastMarker.column, u2 = e4.start - s2 + 1;
                  return this.errorHandler.createError(i2, a2, u2, n3);
                }
                return i2 = this.lastMarker.index, a2 = this.lastMarker.line, u2 = this.lastMarker.column + 1, this.errorHandler.createError(i2, a2, u2, n3);
              }, e3.prototype.throwUnexpectedToken = function(e4, t3) {
                throw this.unexpectedTokenError(e4, t3);
              }, e3.prototype.tolerateUnexpectedToken = function(e4, t3) {
                this.errorHandler.tolerate(this.unexpectedTokenError(e4, t3));
              }, e3.prototype.collectComments = function() {
                if (this.config.comment) {
                  var e4 = this.scanner.scanComments();
                  if (e4.length > 0 && this.delegate)
                    for (var t3 = 0; t3 < e4.length; ++t3) {
                      var r3 = e4[t3], n3 = void 0;
                      n3 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: this.scanner.source.slice(r3.slice[0], r3.slice[1]) }, this.config.range && (n3.range = r3.range), this.config.loc && (n3.loc = r3.loc);
                      var i2 = { start: { line: r3.loc.start.line, column: r3.loc.start.column, offset: r3.range[0] }, end: { line: r3.loc.end.line, column: r3.loc.end.column, offset: r3.range[1] } };
                      this.delegate(n3, i2);
                    }
                } else
                  this.scanner.scanComments();
              }, e3.prototype.getTokenRaw = function(e4) {
                return this.scanner.source.slice(e4.start, e4.end);
              }, e3.prototype.convertToken = function(e4) {
                var t3 = { type: l.TokenName[e4.type], value: this.getTokenRaw(e4) };
                if (this.config.range && (t3.range = [e4.start, e4.end]), this.config.loc && (t3.loc = { start: { line: this.startMarker.line, column: this.startMarker.column }, end: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart } }), e4.type === 9) {
                  var r3 = e4.pattern, n3 = e4.flags;
                  t3.regex = { pattern: r3, flags: n3 };
                }
                return t3;
              }, e3.prototype.nextToken = function() {
                var e4 = this.lookahead;
                this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.collectComments(), this.scanner.index !== this.startMarker.index && (this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart);
                var t3 = this.scanner.lex();
                return this.hasLineTerminator = e4.lineNumber !== t3.lineNumber, t3 && this.context.strict && t3.type === 3 && this.scanner.isStrictModeReservedWord(t3.value) && (t3.type = 4), this.lookahead = t3, this.config.tokens && t3.type !== 2 && this.tokens.push(this.convertToken(t3)), e4;
              }, e3.prototype.nextRegexToken = function() {
                this.collectComments();
                var e4 = this.scanner.scanRegExp();
                return this.config.tokens && (this.tokens.pop(), this.tokens.push(this.convertToken(e4))), this.lookahead = e4, this.nextToken(), e4;
              }, e3.prototype.createNode = function() {
                return { index: this.startMarker.index, line: this.startMarker.line, column: this.startMarker.column };
              }, e3.prototype.startNode = function(e4, t3) {
                t3 === void 0 && (t3 = 0);
                var r3 = e4.start - e4.lineStart, n3 = e4.lineNumber;
                return r3 < 0 && (r3 += t3, n3--), { index: e4.start, line: n3, column: r3 };
              }, e3.prototype.finalize = function(e4, t3) {
                if (this.config.range && (t3.range = [e4.index, this.lastMarker.index]), this.config.loc && (t3.loc = { start: { line: e4.line, column: e4.column }, end: { line: this.lastMarker.line, column: this.lastMarker.column } }, this.config.source && (t3.loc.source = this.config.source)), this.delegate) {
                  var r3 = { start: { line: e4.line, column: e4.column, offset: e4.index }, end: { line: this.lastMarker.line, column: this.lastMarker.column, offset: this.lastMarker.index } };
                  this.delegate(t3, r3);
                }
                return t3;
              }, e3.prototype.expect = function(e4) {
                var t3 = this.nextToken();
                t3.type === 7 && t3.value === e4 || this.throwUnexpectedToken(t3);
              }, e3.prototype.expectCommaSeparator = function() {
                if (this.config.tolerant) {
                  var e4 = this.lookahead;
                  e4.type === 7 && e4.value === "," ? this.nextToken() : e4.type === 7 && e4.value === ";" ? (this.nextToken(), this.tolerateUnexpectedToken(e4)) : this.tolerateUnexpectedToken(e4, o.Messages.UnexpectedToken);
                } else
                  this.expect(",");
              }, e3.prototype.expectKeyword = function(e4) {
                var t3 = this.nextToken();
                t3.type === 4 && t3.value === e4 || this.throwUnexpectedToken(t3);
              }, e3.prototype.match = function(e4) {
                return this.lookahead.type === 7 && this.lookahead.value === e4;
              }, e3.prototype.matchKeyword = function(e4) {
                return this.lookahead.type === 4 && this.lookahead.value === e4;
              }, e3.prototype.matchContextualKeyword = function(e4) {
                return this.lookahead.type === 3 && this.lookahead.value === e4;
              }, e3.prototype.matchAssign = function() {
                if (this.lookahead.type !== 7)
                  return false;
                var e4 = this.lookahead.value;
                return e4 === "=" || e4 === "*=" || e4 === "**=" || e4 === "/=" || e4 === "%=" || e4 === "+=" || e4 === "-=" || e4 === "<<=" || e4 === ">>=" || e4 === ">>>=" || e4 === "&=" || e4 === "^=" || e4 === "|=";
              }, e3.prototype.isolateCoverGrammar = function(e4) {
                var t3 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i2 = e4.call(this);
                return this.context.firstCoverInitializedNameError !== null && this.throwUnexpectedToken(this.context.firstCoverInitializedNameError), this.context.isBindingElement = t3, this.context.isAssignmentTarget = r3, this.context.firstCoverInitializedNameError = n3, i2;
              }, e3.prototype.inheritCoverGrammar = function(e4) {
                var t3 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                var i2 = e4.call(this);
                return this.context.isBindingElement = this.context.isBindingElement && t3, this.context.isAssignmentTarget = this.context.isAssignmentTarget && r3, this.context.firstCoverInitializedNameError = n3 || this.context.firstCoverInitializedNameError, i2;
              }, e3.prototype.consumeSemicolon = function() {
                this.match(";") ? this.nextToken() : this.hasLineTerminator || (this.lookahead.type === 2 || this.match("}") || this.throwUnexpectedToken(this.lookahead), this.lastMarker.index = this.startMarker.index, this.lastMarker.line = this.startMarker.line, this.lastMarker.column = this.startMarker.column);
              }, e3.prototype.parsePrimaryExpression = function() {
                var e4, t3, r3, n3 = this.createNode();
                switch (this.lookahead.type) {
                  case 3:
                    (this.context.isModule || this.context.await) && this.lookahead.value === "await" && this.tolerateUnexpectedToken(this.lookahead), e4 = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(n3, new a.Identifier(this.nextToken().value));
                    break;
                  case 6:
                  case 8:
                    this.context.strict && this.lookahead.octal && this.tolerateUnexpectedToken(this.lookahead, o.Messages.StrictOctalLiteral), this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(t3.value, r3));
                    break;
                  case 1:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(t3.value === "true", r3));
                    break;
                  case 5:
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(null, r3));
                    break;
                  case 10:
                    e4 = this.parseTemplateLiteral();
                    break;
                  case 7:
                    switch (this.lookahead.value) {
                      case "(":
                        this.context.isBindingElement = false, e4 = this.inheritCoverGrammar(this.parseGroupExpression);
                        break;
                      case "[":
                        e4 = this.inheritCoverGrammar(this.parseArrayInitializer);
                        break;
                      case "{":
                        e4 = this.inheritCoverGrammar(this.parseObjectInitializer);
                        break;
                      case "/":
                      case "/=":
                        this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.scanner.index = this.startMarker.index, t3 = this.nextRegexToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.RegexLiteral(t3.regex, r3, t3.pattern, t3.flags));
                        break;
                      default:
                        e4 = this.throwUnexpectedToken(this.nextToken());
                    }
                    break;
                  case 4:
                    !this.context.strict && this.context.allowYield && this.matchKeyword("yield") ? e4 = this.parseIdentifierName() : !this.context.strict && this.matchKeyword("let") ? e4 = this.finalize(n3, new a.Identifier(this.nextToken().value)) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.matchKeyword("function") ? e4 = this.parseFunctionExpression() : this.matchKeyword("this") ? (this.nextToken(), e4 = this.finalize(n3, new a.ThisExpression())) : e4 = this.matchKeyword("class") ? this.parseClassExpression() : this.throwUnexpectedToken(this.nextToken()));
                    break;
                  default:
                    e4 = this.throwUnexpectedToken(this.nextToken());
                }
                return e4;
              }, e3.prototype.parseSpreadElement = function() {
                var e4 = this.createNode();
                this.expect("...");
                var t3 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                return this.finalize(e4, new a.SpreadElement(t3));
              }, e3.prototype.parseArrayInitializer = function() {
                var e4 = this.createNode(), t3 = [];
                for (this.expect("["); !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), t3.push(null);
                  else if (this.match("...")) {
                    var r3 = this.parseSpreadElement();
                    this.match("]") || (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.expect(",")), t3.push(r3);
                  } else
                    t3.push(this.inheritCoverGrammar(this.parseAssignmentExpression)), this.match("]") || this.expect(",");
                return this.expect("]"), this.finalize(e4, new a.ArrayExpression(t3));
              }, e3.prototype.parsePropertyMethod = function(e4) {
                this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                var t3 = this.context.strict, r3 = this.context.allowStrictDirective;
                this.context.allowStrictDirective = e4.simple;
                var n3 = this.isolateCoverGrammar(this.parseFunctionSourceElements);
                return this.context.strict && e4.firstRestricted && this.tolerateUnexpectedToken(e4.firstRestricted, e4.message), this.context.strict && e4.stricted && this.tolerateUnexpectedToken(e4.stricted, e4.message), this.context.strict = t3, this.context.allowStrictDirective = r3, n3;
              }, e3.prototype.parsePropertyMethodFunction = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters(), n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
              }, e3.prototype.parsePropertyMethodAsyncFunction = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield, r3 = this.context.await;
                this.context.allowYield = false, this.context.await = true;
                var n3 = this.parseFormalParameters(), i2 = this.parsePropertyMethod(n3);
                return this.context.allowYield = t3, this.context.await = r3, this.finalize(e4, new a.AsyncFunctionExpression(null, n3.params, i2));
              }, e3.prototype.parseObjectPropertyKey = function() {
                var e4, t3 = this.createNode(), r3 = this.nextToken();
                switch (r3.type) {
                  case 8:
                  case 6:
                    this.context.strict && r3.octal && this.tolerateUnexpectedToken(r3, o.Messages.StrictOctalLiteral);
                    var n3 = this.getTokenRaw(r3);
                    e4 = this.finalize(t3, new a.Literal(r3.value, n3));
                    break;
                  case 3:
                  case 1:
                  case 5:
                  case 4:
                    e4 = this.finalize(t3, new a.Identifier(r3.value));
                    break;
                  case 7:
                    r3.value === "[" ? (e4 = this.isolateCoverGrammar(this.parseAssignmentExpression), this.expect("]")) : e4 = this.throwUnexpectedToken(r3);
                    break;
                  default:
                    e4 = this.throwUnexpectedToken(r3);
                }
                return e4;
              }, e3.prototype.isPropertyKey = function(e4, t3) {
                return e4.type === u.Syntax.Identifier && e4.name === t3 || e4.type === u.Syntax.Literal && e4.value === t3;
              }, e3.prototype.parseObjectProperty = function(e4) {
                var t3, r3 = this.createNode(), n3 = this.lookahead, i2 = null, s2 = null, u2 = false, l2 = false, c2 = false, h = false;
                if (n3.type === 3) {
                  var p = n3.value;
                  this.nextToken(), u2 = this.match("["), i2 = (h = !(this.hasLineTerminator || p !== "async" || this.match(":") || this.match("(") || this.match("*") || this.match(","))) ? this.parseObjectPropertyKey() : this.finalize(r3, new a.Identifier(p));
                } else
                  this.match("*") ? this.nextToken() : (u2 = this.match("["), i2 = this.parseObjectPropertyKey());
                var f = this.qualifiedPropertyName(this.lookahead);
                if (n3.type === 3 && !h && n3.value === "get" && f)
                  t3 = "get", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), this.context.allowYield = false, s2 = this.parseGetterMethod();
                else if (n3.type === 3 && !h && n3.value === "set" && f)
                  t3 = "set", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseSetterMethod();
                else if (n3.type === 7 && n3.value === "*" && f)
                  t3 = "init", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseGeneratorMethod(), l2 = true;
                else if (i2 || this.throwUnexpectedToken(this.lookahead), t3 = "init", this.match(":") && !h)
                  !u2 && this.isPropertyKey(i2, "__proto__") && (e4.value && this.tolerateError(o.Messages.DuplicateProtoProperty), e4.value = true), this.nextToken(), s2 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                else if (this.match("("))
                  s2 = h ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true;
                else if (n3.type === 3)
                  if (p = this.finalize(r3, new a.Identifier(n3.value)), this.match("=")) {
                    this.context.firstCoverInitializedNameError = this.lookahead, this.nextToken(), c2 = true;
                    var d = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    s2 = this.finalize(r3, new a.AssignmentPattern(p, d));
                  } else
                    c2 = true, s2 = p;
                else
                  this.throwUnexpectedToken(this.nextToken());
                return this.finalize(r3, new a.Property(t3, i2, u2, s2, l2, c2));
              }, e3.prototype.parseObjectInitializer = function() {
                var e4 = this.createNode();
                this.expect("{");
                for (var t3 = [], r3 = { value: false }; !this.match("}"); )
                  t3.push(this.parseObjectProperty(r3)), this.match("}") || this.expectCommaSeparator();
                return this.expect("}"), this.finalize(e4, new a.ObjectExpression(t3));
              }, e3.prototype.parseTemplateHead = function() {
                n2.assert(this.lookahead.head, "Template literal must start with a template head");
                var e4 = this.createNode(), t3 = this.nextToken(), r3 = t3.value, i2 = t3.cooked;
                return this.finalize(e4, new a.TemplateElement({ raw: r3, cooked: i2 }, t3.tail));
              }, e3.prototype.parseTemplateElement = function() {
                this.lookahead.type !== 10 && this.throwUnexpectedToken();
                var e4 = this.createNode(), t3 = this.nextToken(), r3 = t3.value, n3 = t3.cooked;
                return this.finalize(e4, new a.TemplateElement({ raw: r3, cooked: n3 }, t3.tail));
              }, e3.prototype.parseTemplateLiteral = function() {
                var e4 = this.createNode(), t3 = [], r3 = [], n3 = this.parseTemplateHead();
                for (r3.push(n3); !n3.tail; )
                  t3.push(this.parseExpression()), n3 = this.parseTemplateElement(), r3.push(n3);
                return this.finalize(e4, new a.TemplateLiteral(r3, t3));
              }, e3.prototype.reinterpretExpressionAsPattern = function(e4) {
                switch (e4.type) {
                  case u.Syntax.Identifier:
                  case u.Syntax.MemberExpression:
                  case u.Syntax.RestElement:
                  case u.Syntax.AssignmentPattern:
                    break;
                  case u.Syntax.SpreadElement:
                    e4.type = u.Syntax.RestElement, this.reinterpretExpressionAsPattern(e4.argument);
                    break;
                  case u.Syntax.ArrayExpression:
                    e4.type = u.Syntax.ArrayPattern;
                    for (var t3 = 0; t3 < e4.elements.length; t3++)
                      e4.elements[t3] !== null && this.reinterpretExpressionAsPattern(e4.elements[t3]);
                    break;
                  case u.Syntax.ObjectExpression:
                    for (e4.type = u.Syntax.ObjectPattern, t3 = 0; t3 < e4.properties.length; t3++)
                      this.reinterpretExpressionAsPattern(e4.properties[t3].value);
                    break;
                  case u.Syntax.AssignmentExpression:
                    e4.type = u.Syntax.AssignmentPattern, delete e4.operator, this.reinterpretExpressionAsPattern(e4.left);
                }
              }, e3.prototype.parseGroupExpression = function() {
                var e4;
                if (this.expect("("), this.match(")"))
                  this.nextToken(), this.match("=>") || this.expect("=>"), e4 = { type: "ArrowParameterPlaceHolder", params: [], async: false };
                else {
                  var t3 = this.lookahead, r3 = [];
                  if (this.match("..."))
                    e4 = this.parseRestElement(r3), this.expect(")"), this.match("=>") || this.expect("=>"), e4 = { type: "ArrowParameterPlaceHolder", params: [e4], async: false };
                  else {
                    var n3 = false;
                    if (this.context.isBindingElement = true, e4 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.match(",")) {
                      var i2 = [];
                      for (this.context.isAssignmentTarget = false, i2.push(e4); this.lookahead.type !== 2 && this.match(","); ) {
                        if (this.nextToken(), this.match(")")) {
                          this.nextToken();
                          for (var o2 = 0; o2 < i2.length; o2++)
                            this.reinterpretExpressionAsPattern(i2[o2]);
                          n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: i2, async: false };
                        } else if (this.match("...")) {
                          for (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), i2.push(this.parseRestElement(r3)), this.expect(")"), this.match("=>") || this.expect("=>"), this.context.isBindingElement = false, o2 = 0; o2 < i2.length; o2++)
                            this.reinterpretExpressionAsPattern(i2[o2]);
                          n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: i2, async: false };
                        } else
                          i2.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                        if (n3)
                          break;
                      }
                      n3 || (e4 = this.finalize(this.startNode(t3), new a.SequenceExpression(i2)));
                    }
                    if (!n3) {
                      if (this.expect(")"), this.match("=>") && (e4.type === u.Syntax.Identifier && e4.name === "yield" && (n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: [e4], async: false }), !n3)) {
                        if (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), e4.type === u.Syntax.SequenceExpression)
                          for (o2 = 0; o2 < e4.expressions.length; o2++)
                            this.reinterpretExpressionAsPattern(e4.expressions[o2]);
                        else
                          this.reinterpretExpressionAsPattern(e4);
                        e4 = { type: "ArrowParameterPlaceHolder", params: e4.type === u.Syntax.SequenceExpression ? e4.expressions : [e4], async: false };
                      }
                      this.context.isBindingElement = false;
                    }
                  }
                }
                return e4;
              }, e3.prototype.parseArguments = function() {
                this.expect("(");
                var e4 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t3 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                    if (e4.push(t3), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e4;
              }, e3.prototype.isIdentifierName = function(e4) {
                return e4.type === 3 || e4.type === 4 || e4.type === 1 || e4.type === 5;
              }, e3.prototype.parseIdentifierName = function() {
                var e4 = this.createNode(), t3 = this.nextToken();
                return this.isIdentifierName(t3) || this.throwUnexpectedToken(t3), this.finalize(e4, new a.Identifier(t3.value));
              }, e3.prototype.parseNewExpression = function() {
                var e4, t3 = this.createNode(), r3 = this.parseIdentifierName();
                if (n2.assert(r3.name === "new", "New expression must start with `new`"), this.match("."))
                  if (this.nextToken(), this.lookahead.type === 3 && this.context.inFunctionBody && this.lookahead.value === "target") {
                    var i2 = this.parseIdentifierName();
                    e4 = new a.MetaProperty(r3, i2);
                  } else
                    this.throwUnexpectedToken(this.lookahead);
                else {
                  var o2 = this.isolateCoverGrammar(this.parseLeftHandSideExpression), s2 = this.match("(") ? this.parseArguments() : [];
                  e4 = new a.NewExpression(o2, s2), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return this.finalize(t3, e4);
              }, e3.prototype.parseAsyncArgument = function() {
                var e4 = this.parseAssignmentExpression();
                return this.context.firstCoverInitializedNameError = null, e4;
              }, e3.prototype.parseAsyncArguments = function() {
                this.expect("(");
                var e4 = [];
                if (!this.match(")"))
                  for (; ; ) {
                    var t3 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                    if (e4.push(t3), this.match(")"))
                      break;
                    if (this.expectCommaSeparator(), this.match(")"))
                      break;
                  }
                return this.expect(")"), e4;
              }, e3.prototype.parseLeftHandSideExpressionAllowCall = function() {
                var e4, t3 = this.lookahead, r3 = this.matchContextualKeyword("async"), n3 = this.context.allowIn;
                for (this.context.allowIn = true, this.matchKeyword("super") && this.context.inFunctionBody ? (e4 = this.createNode(), this.nextToken(), e4 = this.finalize(e4, new a.Super()), this.match("(") || this.match(".") || this.match("[") || this.throwUnexpectedToken(this.lookahead)) : e4 = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match(".")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect(".");
                    var i2 = this.parseIdentifierName();
                    e4 = this.finalize(this.startNode(t3), new a.StaticMemberExpression(e4, i2));
                  } else if (this.match("(")) {
                    var o2 = r3 && t3.lineNumber === this.lookahead.lineNumber;
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = false;
                    var s2 = o2 ? this.parseAsyncArguments() : this.parseArguments();
                    if (e4 = this.finalize(this.startNode(t3), new a.CallExpression(e4, s2)), o2 && this.match("=>")) {
                      for (var u2 = 0; u2 < s2.length; ++u2)
                        this.reinterpretExpressionAsPattern(s2[u2]);
                      e4 = { type: "ArrowParameterPlaceHolder", params: s2, async: true };
                    }
                  } else if (this.match("["))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("["), i2 = this.isolateCoverGrammar(this.parseExpression), this.expect("]"), e4 = this.finalize(this.startNode(t3), new a.ComputedMemberExpression(e4, i2));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var l2 = this.parseTemplateLiteral();
                    e4 = this.finalize(this.startNode(t3), new a.TaggedTemplateExpression(e4, l2));
                  }
                return this.context.allowIn = n3, e4;
              }, e3.prototype.parseSuper = function() {
                var e4 = this.createNode();
                return this.expectKeyword("super"), this.match("[") || this.match(".") || this.throwUnexpectedToken(this.lookahead), this.finalize(e4, new a.Super());
              }, e3.prototype.parseLeftHandSideExpression = function() {
                n2.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
                for (var e4 = this.startNode(this.lookahead), t3 = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                  if (this.match("[")) {
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("[");
                    var r3 = this.isolateCoverGrammar(this.parseExpression);
                    this.expect("]"), t3 = this.finalize(e4, new a.ComputedMemberExpression(t3, r3));
                  } else if (this.match("."))
                    this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("."), r3 = this.parseIdentifierName(), t3 = this.finalize(e4, new a.StaticMemberExpression(t3, r3));
                  else {
                    if (this.lookahead.type !== 10 || !this.lookahead.head)
                      break;
                    var i2 = this.parseTemplateLiteral();
                    t3 = this.finalize(e4, new a.TaggedTemplateExpression(t3, i2));
                  }
                return t3;
              }, e3.prototype.parseUpdateExpression = function() {
                var e4, t3 = this.lookahead;
                if (this.match("++") || this.match("--")) {
                  var r3 = this.startNode(t3), n3 = this.nextToken();
                  e4 = this.inheritCoverGrammar(this.parseUnaryExpression), this.context.strict && e4.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(e4.name) && this.tolerateError(o.Messages.StrictLHSPrefix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment);
                  var i2 = true;
                  e4 = this.finalize(r3, new a.UpdateExpression(n3.value, e4, i2)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else if (e4 = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall), !this.hasLineTerminator && this.lookahead.type === 7 && (this.match("++") || this.match("--"))) {
                  this.context.strict && e4.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(e4.name) && this.tolerateError(o.Messages.StrictLHSPostfix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var s2 = this.nextToken().value;
                  i2 = false, e4 = this.finalize(this.startNode(t3), new a.UpdateExpression(s2, e4, i2));
                }
                return e4;
              }, e3.prototype.parseAwaitExpression = function() {
                var e4 = this.createNode();
                this.nextToken();
                var t3 = this.parseUnaryExpression();
                return this.finalize(e4, new a.AwaitExpression(t3));
              }, e3.prototype.parseUnaryExpression = function() {
                var e4;
                if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                  var t3 = this.startNode(this.lookahead), r3 = this.nextToken();
                  e4 = this.inheritCoverGrammar(this.parseUnaryExpression), e4 = this.finalize(t3, new a.UnaryExpression(r3.value, e4)), this.context.strict && e4.operator === "delete" && e4.argument.type === u.Syntax.Identifier && this.tolerateError(o.Messages.StrictDelete), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                } else
                  e4 = this.context.await && this.matchContextualKeyword("await") ? this.parseAwaitExpression() : this.parseUpdateExpression();
                return e4;
              }, e3.prototype.parseExponentiationExpression = function() {
                var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseUnaryExpression);
                if (t3.type !== u.Syntax.UnaryExpression && this.match("**")) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var r3 = t3, n3 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                  t3 = this.finalize(this.startNode(e4), new a.BinaryExpression("**", r3, n3));
                }
                return t3;
              }, e3.prototype.binaryPrecedence = function(e4) {
                var t3 = e4.value;
                return e4.type === 7 ? this.operatorPrecedence[t3] || 0 : e4.type === 4 && (t3 === "instanceof" || this.context.allowIn && t3 === "in") ? 7 : 0;
              }, e3.prototype.parseBinaryExpression = function() {
                var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseExponentiationExpression), r3 = this.lookahead, n3 = this.binaryPrecedence(r3);
                if (n3 > 0) {
                  this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  for (var i2 = [e4, this.lookahead], o2 = t3, s2 = this.isolateCoverGrammar(this.parseExponentiationExpression), u2 = [o2, r3.value, s2], l2 = [n3]; !((n3 = this.binaryPrecedence(this.lookahead)) <= 0); ) {
                    for (; u2.length > 2 && n3 <= l2[l2.length - 1]; ) {
                      s2 = u2.pop();
                      var c2 = u2.pop();
                      l2.pop(), o2 = u2.pop(), i2.pop();
                      var h = this.startNode(i2[i2.length - 1]);
                      u2.push(this.finalize(h, new a.BinaryExpression(c2, o2, s2)));
                    }
                    u2.push(this.nextToken().value), l2.push(n3), i2.push(this.lookahead), u2.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                  }
                  var p = u2.length - 1;
                  t3 = u2[p];
                  for (var f = i2.pop(); p > 1; ) {
                    var d = i2.pop(), m = f && f.lineStart;
                    h = this.startNode(d, m), c2 = u2[p - 1], t3 = this.finalize(h, new a.BinaryExpression(c2, u2[p - 2], t3)), p -= 2, f = d;
                  }
                }
                return t3;
              }, e3.prototype.parseConditionalExpression = function() {
                var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseBinaryExpression);
                if (this.match("?")) {
                  this.nextToken();
                  var r3 = this.context.allowIn;
                  this.context.allowIn = true;
                  var n3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowIn = r3, this.expect(":");
                  var i2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  t3 = this.finalize(this.startNode(e4), new a.ConditionalExpression(t3, n3, i2)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                }
                return t3;
              }, e3.prototype.checkPatternParam = function(e4, t3) {
                switch (t3.type) {
                  case u.Syntax.Identifier:
                    this.validateParam(e4, t3, t3.name);
                    break;
                  case u.Syntax.RestElement:
                    this.checkPatternParam(e4, t3.argument);
                    break;
                  case u.Syntax.AssignmentPattern:
                    this.checkPatternParam(e4, t3.left);
                    break;
                  case u.Syntax.ArrayPattern:
                    for (var r3 = 0; r3 < t3.elements.length; r3++)
                      t3.elements[r3] !== null && this.checkPatternParam(e4, t3.elements[r3]);
                    break;
                  case u.Syntax.ObjectPattern:
                    for (r3 = 0; r3 < t3.properties.length; r3++)
                      this.checkPatternParam(e4, t3.properties[r3].value);
                }
                e4.simple = e4.simple && t3 instanceof a.Identifier;
              }, e3.prototype.reinterpretAsCoverFormalsList = function(e4) {
                var t3, r3 = [e4], n3 = false;
                switch (e4.type) {
                  case u.Syntax.Identifier:
                    break;
                  case "ArrowParameterPlaceHolder":
                    r3 = e4.params, n3 = e4.async;
                    break;
                  default:
                    return null;
                }
                t3 = { simple: true, paramSet: {} };
                for (var i2 = 0; i2 < r3.length; ++i2)
                  (a2 = r3[i2]).type === u.Syntax.AssignmentPattern ? a2.right.type === u.Syntax.YieldExpression && (a2.right.argument && this.throwUnexpectedToken(this.lookahead), a2.right.type = u.Syntax.Identifier, a2.right.name = "yield", delete a2.right.argument, delete a2.right.delegate) : n3 && a2.type === u.Syntax.Identifier && a2.name === "await" && this.throwUnexpectedToken(this.lookahead), this.checkPatternParam(t3, a2), r3[i2] = a2;
                if (this.context.strict || !this.context.allowYield)
                  for (i2 = 0; i2 < r3.length; ++i2) {
                    var a2;
                    (a2 = r3[i2]).type === u.Syntax.YieldExpression && this.throwUnexpectedToken(this.lookahead);
                  }
                if (t3.message === o.Messages.StrictParamDupe) {
                  var s2 = this.context.strict ? t3.stricted : t3.firstRestricted;
                  this.throwUnexpectedToken(s2, t3.message);
                }
                return { simple: t3.simple, params: r3, stricted: t3.stricted, firstRestricted: t3.firstRestricted, message: t3.message };
              }, e3.prototype.parseAssignmentExpression = function() {
                var e4;
                if (!this.context.allowYield && this.matchKeyword("yield"))
                  e4 = this.parseYieldExpression();
                else {
                  var t3 = this.lookahead, r3 = t3;
                  if (e4 = this.parseConditionalExpression(), r3.type === 3 && r3.lineNumber === this.lookahead.lineNumber && r3.value === "async" && (this.lookahead.type === 3 || this.matchKeyword("yield"))) {
                    var n3 = this.parsePrimaryExpression();
                    this.reinterpretExpressionAsPattern(n3), e4 = { type: "ArrowParameterPlaceHolder", params: [n3], async: true };
                  }
                  if (e4.type === "ArrowParameterPlaceHolder" || this.match("=>")) {
                    this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                    var i2 = e4.async, s2 = this.reinterpretAsCoverFormalsList(e4);
                    if (s2) {
                      this.hasLineTerminator && this.tolerateUnexpectedToken(this.lookahead), this.context.firstCoverInitializedNameError = null;
                      var l2 = this.context.strict, c2 = this.context.allowStrictDirective;
                      this.context.allowStrictDirective = s2.simple;
                      var h = this.context.allowYield, p = this.context.await;
                      this.context.allowYield = true, this.context.await = i2;
                      var f = this.startNode(t3);
                      this.expect("=>");
                      var d = void 0;
                      if (this.match("{")) {
                        var m = this.context.allowIn;
                        this.context.allowIn = true, d = this.parseFunctionSourceElements(), this.context.allowIn = m;
                      } else
                        d = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      var y = d.type !== u.Syntax.BlockStatement;
                      this.context.strict && s2.firstRestricted && this.throwUnexpectedToken(s2.firstRestricted, s2.message), this.context.strict && s2.stricted && this.tolerateUnexpectedToken(s2.stricted, s2.message), e4 = i2 ? this.finalize(f, new a.AsyncArrowFunctionExpression(s2.params, d, y)) : this.finalize(f, new a.ArrowFunctionExpression(s2.params, d, y)), this.context.strict = l2, this.context.allowStrictDirective = c2, this.context.allowYield = h, this.context.await = p;
                    }
                  } else if (this.matchAssign()) {
                    if (this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.strict && e4.type === u.Syntax.Identifier) {
                      var v = e4;
                      this.scanner.isRestrictedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictLHSAssignment), this.scanner.isStrictModeReservedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord);
                    }
                    this.match("=") ? this.reinterpretExpressionAsPattern(e4) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false);
                    var _ = (r3 = this.nextToken()).value, g = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    e4 = this.finalize(this.startNode(t3), new a.AssignmentExpression(_, e4, g)), this.context.firstCoverInitializedNameError = null;
                  }
                }
                return e4;
              }, e3.prototype.parseExpression = function() {
                var e4 = this.lookahead, t3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                if (this.match(",")) {
                  var r3 = [];
                  for (r3.push(t3); this.lookahead.type !== 2 && this.match(","); )
                    this.nextToken(), r3.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                  t3 = this.finalize(this.startNode(e4), new a.SequenceExpression(r3));
                }
                return t3;
              }, e3.prototype.parseStatementListItem = function() {
                var e4;
                if (this.context.isAssignmentTarget = true, this.context.isBindingElement = true, this.lookahead.type === 4)
                  switch (this.lookahead.value) {
                    case "export":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalExportDeclaration), e4 = this.parseExportDeclaration();
                      break;
                    case "import":
                      this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalImportDeclaration), e4 = this.parseImportDeclaration();
                      break;
                    case "const":
                      e4 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "function":
                      e4 = this.parseFunctionDeclaration();
                      break;
                    case "class":
                      e4 = this.parseClassDeclaration();
                      break;
                    case "let":
                      e4 = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
                      break;
                    default:
                      e4 = this.parseStatement();
                  }
                else
                  e4 = this.parseStatement();
                return e4;
              }, e3.prototype.parseBlock = function() {
                var e4 = this.createNode();
                this.expect("{");
                for (var t3 = []; !this.match("}"); )
                  t3.push(this.parseStatementListItem());
                return this.expect("}"), this.finalize(e4, new a.BlockStatement(t3));
              }, e3.prototype.parseLexicalBinding = function(e4, t3) {
                var r3 = this.createNode(), n3 = this.parsePattern([], e4);
                this.context.strict && n3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(n3.name) && this.tolerateError(o.Messages.StrictVarName);
                var i2 = null;
                return e4 === "const" ? this.matchKeyword("in") || this.matchContextualKeyword("of") || (this.match("=") ? (this.nextToken(), i2 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : this.throwError(o.Messages.DeclarationMissingInitializer, "const")) : (!t3.inFor && n3.type !== u.Syntax.Identifier || this.match("=")) && (this.expect("="), i2 = this.isolateCoverGrammar(this.parseAssignmentExpression)), this.finalize(r3, new a.VariableDeclarator(n3, i2));
              }, e3.prototype.parseBindingList = function(e4, t3) {
                for (var r3 = [this.parseLexicalBinding(e4, t3)]; this.match(","); )
                  this.nextToken(), r3.push(this.parseLexicalBinding(e4, t3));
                return r3;
              }, e3.prototype.isLexicalDeclaration = function() {
                var e4 = this.scanner.saveState();
                this.scanner.scanComments();
                var t3 = this.scanner.lex();
                return this.scanner.restoreState(e4), t3.type === 3 || t3.type === 7 && t3.value === "[" || t3.type === 7 && t3.value === "{" || t3.type === 4 && t3.value === "let" || t3.type === 4 && t3.value === "yield";
              }, e3.prototype.parseLexicalDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.nextToken().value;
                n2.assert(r3 === "let" || r3 === "const", "Lexical declaration must be either let or const");
                var i2 = this.parseBindingList(r3, e4);
                return this.consumeSemicolon(), this.finalize(t3, new a.VariableDeclaration(i2, r3));
              }, e3.prototype.parseBindingRestElement = function(e4, t3) {
                var r3 = this.createNode();
                this.expect("...");
                var n3 = this.parsePattern(e4, t3);
                return this.finalize(r3, new a.RestElement(n3));
              }, e3.prototype.parseArrayPattern = function(e4, t3) {
                var r3 = this.createNode();
                this.expect("[");
                for (var n3 = []; !this.match("]"); )
                  if (this.match(","))
                    this.nextToken(), n3.push(null);
                  else {
                    if (this.match("...")) {
                      n3.push(this.parseBindingRestElement(e4, t3));
                      break;
                    }
                    n3.push(this.parsePatternWithDefault(e4, t3)), this.match("]") || this.expect(",");
                  }
                return this.expect("]"), this.finalize(r3, new a.ArrayPattern(n3));
              }, e3.prototype.parsePropertyPattern = function(e4, t3) {
                var r3, n3, i2 = this.createNode(), o2 = false, s2 = false;
                if (this.lookahead.type === 3) {
                  var u2 = this.lookahead;
                  r3 = this.parseVariableIdentifier();
                  var l2 = this.finalize(i2, new a.Identifier(u2.value));
                  if (this.match("=")) {
                    e4.push(u2), s2 = true, this.nextToken();
                    var c2 = this.parseAssignmentExpression();
                    n3 = this.finalize(this.startNode(u2), new a.AssignmentPattern(l2, c2));
                  } else
                    this.match(":") ? (this.expect(":"), n3 = this.parsePatternWithDefault(e4, t3)) : (e4.push(u2), s2 = true, n3 = l2);
                } else
                  o2 = this.match("["), r3 = this.parseObjectPropertyKey(), this.expect(":"), n3 = this.parsePatternWithDefault(e4, t3);
                return this.finalize(i2, new a.Property("init", r3, o2, n3, false, s2));
              }, e3.prototype.parseObjectPattern = function(e4, t3) {
                var r3 = this.createNode(), n3 = [];
                for (this.expect("{"); !this.match("}"); )
                  n3.push(this.parsePropertyPattern(e4, t3)), this.match("}") || this.expect(",");
                return this.expect("}"), this.finalize(r3, new a.ObjectPattern(n3));
              }, e3.prototype.parsePattern = function(e4, t3) {
                var r3;
                return this.match("[") ? r3 = this.parseArrayPattern(e4, t3) : this.match("{") ? r3 = this.parseObjectPattern(e4, t3) : (!this.matchKeyword("let") || t3 !== "const" && t3 !== "let" || this.tolerateUnexpectedToken(this.lookahead, o.Messages.LetInLexicalBinding), e4.push(this.lookahead), r3 = this.parseVariableIdentifier(t3)), r3;
              }, e3.prototype.parsePatternWithDefault = function(e4, t3) {
                var r3 = this.lookahead, n3 = this.parsePattern(e4, t3);
                if (this.match("=")) {
                  this.nextToken();
                  var i2 = this.context.allowYield;
                  this.context.allowYield = true;
                  var o2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  this.context.allowYield = i2, n3 = this.finalize(this.startNode(r3), new a.AssignmentPattern(n3, o2));
                }
                return n3;
              }, e3.prototype.parseVariableIdentifier = function(e4) {
                var t3 = this.createNode(), r3 = this.nextToken();
                return r3.type === 4 && r3.value === "yield" ? this.context.strict ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : this.context.allowYield || this.throwUnexpectedToken(r3) : r3.type !== 3 ? this.context.strict && r3.type === 4 && this.scanner.isStrictModeReservedWord(r3.value) ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : (this.context.strict || r3.value !== "let" || e4 !== "var") && this.throwUnexpectedToken(r3) : (this.context.isModule || this.context.await) && r3.type === 3 && r3.value === "await" && this.tolerateUnexpectedToken(r3), this.finalize(t3, new a.Identifier(r3.value));
              }, e3.prototype.parseVariableDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.parsePattern([], "var");
                this.context.strict && r3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictVarName);
                var n3 = null;
                return this.match("=") ? (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : r3.type === u.Syntax.Identifier || e4.inFor || this.expect("="), this.finalize(t3, new a.VariableDeclarator(r3, n3));
              }, e3.prototype.parseVariableDeclarationList = function(e4) {
                var t3 = { inFor: e4.inFor }, r3 = [];
                for (r3.push(this.parseVariableDeclaration(t3)); this.match(","); )
                  this.nextToken(), r3.push(this.parseVariableDeclaration(t3));
                return r3;
              }, e3.prototype.parseVariableStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("var");
                var t3 = this.parseVariableDeclarationList({ inFor: false });
                return this.consumeSemicolon(), this.finalize(e4, new a.VariableDeclaration(t3, "var"));
              }, e3.prototype.parseEmptyStatement = function() {
                var e4 = this.createNode();
                return this.expect(";"), this.finalize(e4, new a.EmptyStatement());
              }, e3.prototype.parseExpressionStatement = function() {
                var e4 = this.createNode(), t3 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e4, new a.ExpressionStatement(t3));
              }, e3.prototype.parseIfClause = function() {
                return this.context.strict && this.matchKeyword("function") && this.tolerateError(o.Messages.StrictFunction), this.parseStatement();
              }, e3.prototype.parseIfStatement = function() {
                var e4, t3 = this.createNode(), r3 = null;
                this.expectKeyword("if"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement())) : (this.expect(")"), e4 = this.parseIfClause(), this.matchKeyword("else") && (this.nextToken(), r3 = this.parseIfClause())), this.finalize(t3, new a.IfStatement(n3, e4, r3));
              }, e3.prototype.parseDoWhileStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("do");
                var t3 = this.context.inIteration;
                this.context.inIteration = true;
                var r3 = this.parseStatement();
                this.context.inIteration = t3, this.expectKeyword("while"), this.expect("(");
                var n3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? this.tolerateUnexpectedToken(this.nextToken()) : (this.expect(")"), this.match(";") && this.nextToken()), this.finalize(e4, new a.DoWhileStatement(r3, n3));
              }, e3.prototype.parseWhileStatement = function() {
                var e4, t3 = this.createNode();
                this.expectKeyword("while"), this.expect("(");
                var r3 = this.parseExpression();
                if (!this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement());
                else {
                  this.expect(")");
                  var n3 = this.context.inIteration;
                  this.context.inIteration = true, e4 = this.parseStatement(), this.context.inIteration = n3;
                }
                return this.finalize(t3, new a.WhileStatement(r3, e4));
              }, e3.prototype.parseForStatement = function() {
                var e4, t3, r3, n3 = null, i2 = null, s2 = null, l2 = true, c2 = this.createNode();
                if (this.expectKeyword("for"), this.expect("("), this.match(";"))
                  this.nextToken();
                else if (this.matchKeyword("var")) {
                  n3 = this.createNode(), this.nextToken();
                  var h = this.context.allowIn;
                  this.context.allowIn = false;
                  var p = this.parseVariableDeclarationList({ inFor: true });
                  if (this.context.allowIn = h, p.length === 1 && this.matchKeyword("in")) {
                    var f = p[0];
                    f.init && (f.id.type === u.Syntax.ArrayPattern || f.id.type === u.Syntax.ObjectPattern || this.context.strict) && this.tolerateError(o.Messages.ForInOfLoopInitializer, "for-in"), n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null;
                  } else
                    p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.nextToken(), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.expect(";"));
                } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                  n3 = this.createNode();
                  var d = this.nextToken().value;
                  this.context.strict || this.lookahead.value !== "in" ? (h = this.context.allowIn, this.context.allowIn = false, p = this.parseBindingList(d, { inFor: true }), this.context.allowIn = h, p.length === 1 && p[0].init === null && this.matchKeyword("in") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, d)), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null) : p.length === 1 && p[0].init === null && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, d)), this.nextToken(), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (this.consumeSemicolon(), n3 = this.finalize(n3, new a.VariableDeclaration(p, d)))) : (n3 = this.finalize(n3, new a.Identifier(d)), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null);
                } else {
                  var m = this.lookahead;
                  if (h = this.context.allowIn, this.context.allowIn = false, n3 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.context.allowIn = h, this.matchKeyword("in"))
                    this.context.isAssignmentTarget && n3.type !== u.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForIn), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e4 = n3, t3 = this.parseExpression(), n3 = null;
                  else if (this.matchContextualKeyword("of"))
                    this.context.isAssignmentTarget && n3.type !== u.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForLoop), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false;
                  else {
                    if (this.match(",")) {
                      for (var y = [n3]; this.match(","); )
                        this.nextToken(), y.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                      n3 = this.finalize(this.startNode(m), new a.SequenceExpression(y));
                    }
                    this.expect(";");
                  }
                }
                if (e4 === void 0 && (this.match(";") || (i2 = this.parseExpression()), this.expect(";"), this.match(")") || (s2 = this.parseExpression())), !this.match(")") && this.config.tolerant)
                  this.tolerateUnexpectedToken(this.nextToken()), r3 = this.finalize(this.createNode(), new a.EmptyStatement());
                else {
                  this.expect(")");
                  var v = this.context.inIteration;
                  this.context.inIteration = true, r3 = this.isolateCoverGrammar(this.parseStatement), this.context.inIteration = v;
                }
                return e4 === void 0 ? this.finalize(c2, new a.ForStatement(n3, i2, s2, r3)) : l2 ? this.finalize(c2, new a.ForInStatement(e4, t3, r3)) : this.finalize(c2, new a.ForOfStatement(e4, t3, r3));
              }, e3.prototype.parseContinueStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("continue");
                var t3 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier();
                  t3 = r3;
                  var n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name);
                }
                return this.consumeSemicolon(), t3 !== null || this.context.inIteration || this.throwError(o.Messages.IllegalContinue), this.finalize(e4, new a.ContinueStatement(t3));
              }, e3.prototype.parseBreakStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("break");
                var t3 = null;
                if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                  var r3 = this.parseVariableIdentifier(), n3 = "$" + r3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name), t3 = r3;
                }
                return this.consumeSemicolon(), t3 !== null || this.context.inIteration || this.context.inSwitch || this.throwError(o.Messages.IllegalBreak), this.finalize(e4, new a.BreakStatement(t3));
              }, e3.prototype.parseReturnStatement = function() {
                this.context.inFunctionBody || this.tolerateError(o.Messages.IllegalReturn);
                var e4 = this.createNode();
                this.expectKeyword("return");
                var t3 = (this.match(";") || this.match("}") || this.hasLineTerminator || this.lookahead.type === 2) && this.lookahead.type !== 8 && this.lookahead.type !== 10 ? null : this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e4, new a.ReturnStatement(t3));
              }, e3.prototype.parseWithStatement = function() {
                this.context.strict && this.tolerateError(o.Messages.StrictModeWith);
                var e4, t3 = this.createNode();
                this.expectKeyword("with"), this.expect("(");
                var r3 = this.parseExpression();
                return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement())) : (this.expect(")"), e4 = this.parseStatement()), this.finalize(t3, new a.WithStatement(r3, e4));
              }, e3.prototype.parseSwitchCase = function() {
                var e4, t3 = this.createNode();
                this.matchKeyword("default") ? (this.nextToken(), e4 = null) : (this.expectKeyword("case"), e4 = this.parseExpression()), this.expect(":");
                for (var r3 = []; !(this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")); )
                  r3.push(this.parseStatementListItem());
                return this.finalize(t3, new a.SwitchCase(e4, r3));
              }, e3.prototype.parseSwitchStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("switch"), this.expect("(");
                var t3 = this.parseExpression();
                this.expect(")");
                var r3 = this.context.inSwitch;
                this.context.inSwitch = true;
                var n3 = [], i2 = false;
                for (this.expect("{"); !this.match("}"); ) {
                  var s2 = this.parseSwitchCase();
                  s2.test === null && (i2 && this.throwError(o.Messages.MultipleDefaultsInSwitch), i2 = true), n3.push(s2);
                }
                return this.expect("}"), this.context.inSwitch = r3, this.finalize(e4, new a.SwitchStatement(t3, n3));
              }, e3.prototype.parseLabelledStatement = function() {
                var e4, t3 = this.createNode(), r3 = this.parseExpression();
                if (r3.type === u.Syntax.Identifier && this.match(":")) {
                  this.nextToken();
                  var n3 = r3, i2 = "$" + n3.name;
                  Object.prototype.hasOwnProperty.call(this.context.labelSet, i2) && this.throwError(o.Messages.Redeclaration, "Label", n3.name), this.context.labelSet[i2] = true;
                  var s2 = void 0;
                  if (this.matchKeyword("class"))
                    this.tolerateUnexpectedToken(this.lookahead), s2 = this.parseClassDeclaration();
                  else if (this.matchKeyword("function")) {
                    var l2 = this.lookahead, c2 = this.parseFunctionDeclaration();
                    this.context.strict ? this.tolerateUnexpectedToken(l2, o.Messages.StrictFunction) : c2.generator && this.tolerateUnexpectedToken(l2, o.Messages.GeneratorInLegacyContext), s2 = c2;
                  } else
                    s2 = this.parseStatement();
                  delete this.context.labelSet[i2], e4 = new a.LabeledStatement(n3, s2);
                } else
                  this.consumeSemicolon(), e4 = new a.ExpressionStatement(r3);
                return this.finalize(t3, e4);
              }, e3.prototype.parseThrowStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("throw"), this.hasLineTerminator && this.throwError(o.Messages.NewlineAfterThrow);
                var t3 = this.parseExpression();
                return this.consumeSemicolon(), this.finalize(e4, new a.ThrowStatement(t3));
              }, e3.prototype.parseCatchClause = function() {
                var e4 = this.createNode();
                this.expectKeyword("catch"), this.expect("("), this.match(")") && this.throwUnexpectedToken(this.lookahead);
                for (var t3 = [], r3 = this.parsePattern(t3), n3 = {}, i2 = 0; i2 < t3.length; i2++) {
                  var s2 = "$" + t3[i2].value;
                  Object.prototype.hasOwnProperty.call(n3, s2) && this.tolerateError(o.Messages.DuplicateBinding, t3[i2].value), n3[s2] = true;
                }
                this.context.strict && r3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictCatchVariable), this.expect(")");
                var l2 = this.parseBlock();
                return this.finalize(e4, new a.CatchClause(r3, l2));
              }, e3.prototype.parseFinallyClause = function() {
                return this.expectKeyword("finally"), this.parseBlock();
              }, e3.prototype.parseTryStatement = function() {
                var e4 = this.createNode();
                this.expectKeyword("try");
                var t3 = this.parseBlock(), r3 = this.matchKeyword("catch") ? this.parseCatchClause() : null, n3 = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
                return r3 || n3 || this.throwError(o.Messages.NoCatchOrFinally), this.finalize(e4, new a.TryStatement(t3, r3, n3));
              }, e3.prototype.parseDebuggerStatement = function() {
                var e4 = this.createNode();
                return this.expectKeyword("debugger"), this.consumeSemicolon(), this.finalize(e4, new a.DebuggerStatement());
              }, e3.prototype.parseStatement = function() {
                var e4;
                switch (this.lookahead.type) {
                  case 1:
                  case 5:
                  case 6:
                  case 8:
                  case 10:
                  case 9:
                    e4 = this.parseExpressionStatement();
                    break;
                  case 7:
                    var t3 = this.lookahead.value;
                    e4 = t3 === "{" ? this.parseBlock() : t3 === "(" ? this.parseExpressionStatement() : t3 === ";" ? this.parseEmptyStatement() : this.parseExpressionStatement();
                    break;
                  case 3:
                    e4 = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                    break;
                  case 4:
                    switch (this.lookahead.value) {
                      case "break":
                        e4 = this.parseBreakStatement();
                        break;
                      case "continue":
                        e4 = this.parseContinueStatement();
                        break;
                      case "debugger":
                        e4 = this.parseDebuggerStatement();
                        break;
                      case "do":
                        e4 = this.parseDoWhileStatement();
                        break;
                      case "for":
                        e4 = this.parseForStatement();
                        break;
                      case "function":
                        e4 = this.parseFunctionDeclaration();
                        break;
                      case "if":
                        e4 = this.parseIfStatement();
                        break;
                      case "return":
                        e4 = this.parseReturnStatement();
                        break;
                      case "switch":
                        e4 = this.parseSwitchStatement();
                        break;
                      case "throw":
                        e4 = this.parseThrowStatement();
                        break;
                      case "try":
                        e4 = this.parseTryStatement();
                        break;
                      case "var":
                        e4 = this.parseVariableStatement();
                        break;
                      case "while":
                        e4 = this.parseWhileStatement();
                        break;
                      case "with":
                        e4 = this.parseWithStatement();
                        break;
                      default:
                        e4 = this.parseExpressionStatement();
                    }
                    break;
                  default:
                    e4 = this.throwUnexpectedToken(this.lookahead);
                }
                return e4;
              }, e3.prototype.parseFunctionSourceElements = function() {
                var e4 = this.createNode();
                this.expect("{");
                var t3 = this.parseDirectivePrologues(), r3 = this.context.labelSet, n3 = this.context.inIteration, i2 = this.context.inSwitch, o2 = this.context.inFunctionBody;
                for (this.context.labelSet = {}, this.context.inIteration = false, this.context.inSwitch = false, this.context.inFunctionBody = true; this.lookahead.type !== 2 && !this.match("}"); )
                  t3.push(this.parseStatementListItem());
                return this.expect("}"), this.context.labelSet = r3, this.context.inIteration = n3, this.context.inSwitch = i2, this.context.inFunctionBody = o2, this.finalize(e4, new a.BlockStatement(t3));
              }, e3.prototype.validateParam = function(e4, t3, r3) {
                var n3 = "$" + r3;
                this.context.strict ? (this.scanner.isRestrictedWord(r3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamName), Object.prototype.hasOwnProperty.call(e4.paramSet, n3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamDupe)) : e4.firstRestricted || (this.scanner.isRestrictedWord(r3) ? (e4.firstRestricted = t3, e4.message = o.Messages.StrictParamName) : this.scanner.isStrictModeReservedWord(r3) ? (e4.firstRestricted = t3, e4.message = o.Messages.StrictReservedWord) : Object.prototype.hasOwnProperty.call(e4.paramSet, n3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamDupe)), typeof Object.defineProperty == "function" ? Object.defineProperty(e4.paramSet, n3, { value: true, enumerable: true, writable: true, configurable: true }) : e4.paramSet[n3] = true;
              }, e3.prototype.parseRestElement = function(e4) {
                var t3 = this.createNode();
                this.expect("...");
                var r3 = this.parsePattern(e4);
                return this.match("=") && this.throwError(o.Messages.DefaultRestParameter), this.match(")") || this.throwError(o.Messages.ParameterAfterRestParameter), this.finalize(t3, new a.RestElement(r3));
              }, e3.prototype.parseFormalParameter = function(e4) {
                for (var t3 = [], r3 = this.match("...") ? this.parseRestElement(t3) : this.parsePatternWithDefault(t3), n3 = 0; n3 < t3.length; n3++)
                  this.validateParam(e4, t3[n3], t3[n3].value);
                e4.simple = e4.simple && r3 instanceof a.Identifier, e4.params.push(r3);
              }, e3.prototype.parseFormalParameters = function(e4) {
                var t3;
                if (t3 = { simple: true, params: [], firstRestricted: e4 }, this.expect("("), !this.match(")"))
                  for (t3.paramSet = {}; this.lookahead.type !== 2 && (this.parseFormalParameter(t3), !this.match(")")) && (this.expect(","), !this.match(")")); )
                    ;
                return this.expect(")"), { simple: t3.simple, params: t3.params, stricted: t3.stricted, firstRestricted: t3.firstRestricted, message: t3.message };
              }, e3.prototype.matchAsyncFunction = function() {
                var e4 = this.matchContextualKeyword("async");
                if (e4) {
                  var t3 = this.scanner.saveState();
                  this.scanner.scanComments();
                  var r3 = this.scanner.lex();
                  this.scanner.restoreState(t3), e4 = t3.lineNumber === r3.lineNumber && r3.type === 4 && r3.value === "function";
                }
                return e4;
              }, e3.prototype.parseFunctionDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.matchContextualKeyword("async");
                r3 && this.nextToken(), this.expectKeyword("function");
                var n3, i2 = !r3 && this.match("*");
                i2 && this.nextToken();
                var s2 = null, u2 = null;
                if (!e4 || !this.match("(")) {
                  var l2 = this.lookahead;
                  s2 = this.parseVariableIdentifier(), this.context.strict ? this.scanner.isRestrictedWord(l2.value) && this.tolerateUnexpectedToken(l2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(l2.value) ? (u2 = l2, n3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(l2.value) && (u2 = l2, n3 = o.Messages.StrictReservedWord);
                }
                var c2 = this.context.await, h = this.context.allowYield;
                this.context.await = r3, this.context.allowYield = !i2;
                var p = this.parseFormalParameters(u2), f = p.params, d = p.stricted;
                u2 = p.firstRestricted, p.message && (n3 = p.message);
                var m = this.context.strict, y = this.context.allowStrictDirective;
                this.context.allowStrictDirective = p.simple;
                var v = this.parseFunctionSourceElements();
                return this.context.strict && u2 && this.throwUnexpectedToken(u2, n3), this.context.strict && d && this.tolerateUnexpectedToken(d, n3), this.context.strict = m, this.context.allowStrictDirective = y, this.context.await = c2, this.context.allowYield = h, r3 ? this.finalize(t3, new a.AsyncFunctionDeclaration(s2, f, v)) : this.finalize(t3, new a.FunctionDeclaration(s2, f, v, i2));
              }, e3.prototype.parseFunctionExpression = function() {
                var e4 = this.createNode(), t3 = this.matchContextualKeyword("async");
                t3 && this.nextToken(), this.expectKeyword("function");
                var r3, n3 = !t3 && this.match("*");
                n3 && this.nextToken();
                var i2, s2 = null, u2 = this.context.await, l2 = this.context.allowYield;
                if (this.context.await = t3, this.context.allowYield = !n3, !this.match("(")) {
                  var c2 = this.lookahead;
                  s2 = this.context.strict || n3 || !this.matchKeyword("yield") ? this.parseVariableIdentifier() : this.parseIdentifierName(), this.context.strict ? this.scanner.isRestrictedWord(c2.value) && this.tolerateUnexpectedToken(c2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(c2.value) ? (i2 = c2, r3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(c2.value) && (i2 = c2, r3 = o.Messages.StrictReservedWord);
                }
                var h = this.parseFormalParameters(i2), p = h.params, f = h.stricted;
                i2 = h.firstRestricted, h.message && (r3 = h.message);
                var d = this.context.strict, m = this.context.allowStrictDirective;
                this.context.allowStrictDirective = h.simple;
                var y = this.parseFunctionSourceElements();
                return this.context.strict && i2 && this.throwUnexpectedToken(i2, r3), this.context.strict && f && this.tolerateUnexpectedToken(f, r3), this.context.strict = d, this.context.allowStrictDirective = m, this.context.await = u2, this.context.allowYield = l2, t3 ? this.finalize(e4, new a.AsyncFunctionExpression(s2, p, y)) : this.finalize(e4, new a.FunctionExpression(s2, p, y, n3));
              }, e3.prototype.parseDirective = function() {
                var e4 = this.lookahead, t3 = this.createNode(), r3 = this.parseExpression(), n3 = r3.type === u.Syntax.Literal ? this.getTokenRaw(e4).slice(1, -1) : null;
                return this.consumeSemicolon(), this.finalize(t3, n3 ? new a.Directive(r3, n3) : new a.ExpressionStatement(r3));
              }, e3.prototype.parseDirectivePrologues = function() {
                for (var e4 = null, t3 = []; ; ) {
                  var r3 = this.lookahead;
                  if (r3.type !== 8)
                    break;
                  var n3 = this.parseDirective();
                  t3.push(n3);
                  var i2 = n3.directive;
                  if (typeof i2 != "string")
                    break;
                  i2 === "use strict" ? (this.context.strict = true, e4 && this.tolerateUnexpectedToken(e4, o.Messages.StrictOctalLiteral), this.context.allowStrictDirective || this.tolerateUnexpectedToken(r3, o.Messages.IllegalLanguageModeDirective)) : !e4 && r3.octal && (e4 = r3);
                }
                return t3;
              }, e3.prototype.qualifiedPropertyName = function(e4) {
                switch (e4.type) {
                  case 3:
                  case 8:
                  case 1:
                  case 5:
                  case 6:
                  case 4:
                    return true;
                  case 7:
                    return e4.value === "[";
                }
                return false;
              }, e3.prototype.parseGetterMethod = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length > 0 && this.tolerateError(o.Messages.BadGetterArity);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
              }, e3.prototype.parseSetterMethod = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                r3.params.length !== 1 ? this.tolerateError(o.Messages.BadSetterArity) : r3.params[0] instanceof a.RestElement && this.tolerateError(o.Messages.BadSetterRestParameter);
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
              }, e3.prototype.parseGeneratorMethod = function() {
                var e4 = this.createNode(), t3 = this.context.allowYield;
                this.context.allowYield = true;
                var r3 = this.parseFormalParameters();
                this.context.allowYield = false;
                var n3 = this.parsePropertyMethod(r3);
                return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, true));
              }, e3.prototype.isStartOfExpression = function() {
                var e4 = true, t3 = this.lookahead.value;
                switch (this.lookahead.type) {
                  case 7:
                    e4 = t3 === "[" || t3 === "(" || t3 === "{" || t3 === "+" || t3 === "-" || t3 === "!" || t3 === "~" || t3 === "++" || t3 === "--" || t3 === "/" || t3 === "/=";
                    break;
                  case 4:
                    e4 = t3 === "class" || t3 === "delete" || t3 === "function" || t3 === "let" || t3 === "new" || t3 === "super" || t3 === "this" || t3 === "typeof" || t3 === "void" || t3 === "yield";
                }
                return e4;
              }, e3.prototype.parseYieldExpression = function() {
                var e4 = this.createNode();
                this.expectKeyword("yield");
                var t3 = null, r3 = false;
                if (!this.hasLineTerminator) {
                  var n3 = this.context.allowYield;
                  this.context.allowYield = false, (r3 = this.match("*")) ? (this.nextToken(), t3 = this.parseAssignmentExpression()) : this.isStartOfExpression() && (t3 = this.parseAssignmentExpression()), this.context.allowYield = n3;
                }
                return this.finalize(e4, new a.YieldExpression(t3, r3));
              }, e3.prototype.parseClassElement = function(e4) {
                var t3 = this.lookahead, r3 = this.createNode(), n3 = "", i2 = null, s2 = null, u2 = false, l2 = false, c2 = false, h = false;
                if (this.match("*"))
                  this.nextToken();
                else if (u2 = this.match("["), (i2 = this.parseObjectPropertyKey()).name === "static" && (this.qualifiedPropertyName(this.lookahead) || this.match("*")) && (t3 = this.lookahead, c2 = true, u2 = this.match("["), this.match("*") ? this.nextToken() : i2 = this.parseObjectPropertyKey()), t3.type === 3 && !this.hasLineTerminator && t3.value === "async") {
                  var p = this.lookahead.value;
                  p !== ":" && p !== "(" && p !== "*" && (h = true, t3 = this.lookahead, i2 = this.parseObjectPropertyKey(), t3.type === 3 && t3.value === "constructor" && this.tolerateUnexpectedToken(t3, o.Messages.ConstructorIsAsync));
                }
                var f = this.qualifiedPropertyName(this.lookahead);
                return t3.type === 3 ? t3.value === "get" && f ? (n3 = "get", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), this.context.allowYield = false, s2 = this.parseGetterMethod()) : t3.value === "set" && f && (n3 = "set", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseSetterMethod()) : t3.type === 7 && t3.value === "*" && f && (n3 = "init", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseGeneratorMethod(), l2 = true), !n3 && i2 && this.match("(") && (n3 = "init", s2 = h ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true), n3 || this.throwUnexpectedToken(this.lookahead), n3 === "init" && (n3 = "method"), u2 || (c2 && this.isPropertyKey(i2, "prototype") && this.throwUnexpectedToken(t3, o.Messages.StaticPrototype), !c2 && this.isPropertyKey(i2, "constructor") && ((n3 !== "method" || !l2 || s2 && s2.generator) && this.throwUnexpectedToken(t3, o.Messages.ConstructorSpecialMethod), e4.value ? this.throwUnexpectedToken(t3, o.Messages.DuplicateConstructor) : e4.value = true, n3 = "constructor")), this.finalize(r3, new a.MethodDefinition(i2, u2, s2, n3, c2));
              }, e3.prototype.parseClassElementList = function() {
                var e4 = [], t3 = { value: false };
                for (this.expect("{"); !this.match("}"); )
                  this.match(";") ? this.nextToken() : e4.push(this.parseClassElement(t3));
                return this.expect("}"), e4;
              }, e3.prototype.parseClassBody = function() {
                var e4 = this.createNode(), t3 = this.parseClassElementList();
                return this.finalize(e4, new a.ClassBody(t3));
              }, e3.prototype.parseClassDeclaration = function(e4) {
                var t3 = this.createNode(), r3 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var n3 = e4 && this.lookahead.type !== 3 ? null : this.parseVariableIdentifier(), i2 = null;
                this.matchKeyword("extends") && (this.nextToken(), i2 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var o2 = this.parseClassBody();
                return this.context.strict = r3, this.finalize(t3, new a.ClassDeclaration(n3, i2, o2));
              }, e3.prototype.parseClassExpression = function() {
                var e4 = this.createNode(), t3 = this.context.strict;
                this.context.strict = true, this.expectKeyword("class");
                var r3 = this.lookahead.type === 3 ? this.parseVariableIdentifier() : null, n3 = null;
                this.matchKeyword("extends") && (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                var i2 = this.parseClassBody();
                return this.context.strict = t3, this.finalize(e4, new a.ClassExpression(r3, n3, i2));
              }, e3.prototype.parseModule = function() {
                this.context.strict = true, this.context.isModule = true, this.scanner.isModule = true;
                for (var e4 = this.createNode(), t3 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t3.push(this.parseStatementListItem());
                return this.finalize(e4, new a.Module(t3));
              }, e3.prototype.parseScript = function() {
                for (var e4 = this.createNode(), t3 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                  t3.push(this.parseStatementListItem());
                return this.finalize(e4, new a.Script(t3));
              }, e3.prototype.parseModuleSpecifier = function() {
                var e4 = this.createNode();
                this.lookahead.type !== 8 && this.throwError(o.Messages.InvalidModuleSpecifier);
                var t3 = this.nextToken(), r3 = this.getTokenRaw(t3);
                return this.finalize(e4, new a.Literal(t3.value, r3));
              }, e3.prototype.parseImportSpecifier = function() {
                var e4, t3, r3 = this.createNode();
                return this.lookahead.type === 3 ? (t3 = e4 = this.parseVariableIdentifier(), this.matchContextualKeyword("as") && (this.nextToken(), t3 = this.parseVariableIdentifier())) : (t3 = e4 = this.parseIdentifierName(), this.matchContextualKeyword("as") ? (this.nextToken(), t3 = this.parseVariableIdentifier()) : this.throwUnexpectedToken(this.nextToken())), this.finalize(r3, new a.ImportSpecifier(t3, e4));
              }, e3.prototype.parseNamedImports = function() {
                this.expect("{");
                for (var e4 = []; !this.match("}"); )
                  e4.push(this.parseImportSpecifier()), this.match("}") || this.expect(",");
                return this.expect("}"), e4;
              }, e3.prototype.parseImportDefaultSpecifier = function() {
                var e4 = this.createNode(), t3 = this.parseIdentifierName();
                return this.finalize(e4, new a.ImportDefaultSpecifier(t3));
              }, e3.prototype.parseImportNamespaceSpecifier = function() {
                var e4 = this.createNode();
                this.expect("*"), this.matchContextualKeyword("as") || this.throwError(o.Messages.NoAsAfterImportNamespace), this.nextToken();
                var t3 = this.parseIdentifierName();
                return this.finalize(e4, new a.ImportNamespaceSpecifier(t3));
              }, e3.prototype.parseImportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalImportDeclaration);
                var e4, t3 = this.createNode();
                this.expectKeyword("import");
                var r3 = [];
                if (this.lookahead.type === 8)
                  e4 = this.parseModuleSpecifier();
                else {
                  if (this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.isIdentifierName(this.lookahead) && !this.matchKeyword("default") ? (r3.push(this.parseImportDefaultSpecifier()), this.match(",") && (this.nextToken(), this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.throwUnexpectedToken(this.lookahead))) : this.throwUnexpectedToken(this.nextToken()), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken(), e4 = this.parseModuleSpecifier();
                }
                return this.consumeSemicolon(), this.finalize(t3, new a.ImportDeclaration(r3, e4));
              }, e3.prototype.parseExportSpecifier = function() {
                var e4 = this.createNode(), t3 = this.parseIdentifierName(), r3 = t3;
                return this.matchContextualKeyword("as") && (this.nextToken(), r3 = this.parseIdentifierName()), this.finalize(e4, new a.ExportSpecifier(t3, r3));
              }, e3.prototype.parseExportDeclaration = function() {
                this.context.inFunctionBody && this.throwError(o.Messages.IllegalExportDeclaration);
                var e4, t3 = this.createNode();
                if (this.expectKeyword("export"), this.matchKeyword("default"))
                  if (this.nextToken(), this.matchKeyword("function")) {
                    var r3 = this.parseFunctionDeclaration(true);
                    e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3));
                  } else
                    this.matchKeyword("class") ? (r3 = this.parseClassDeclaration(true), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3))) : this.matchContextualKeyword("async") ? (r3 = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression(), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3))) : (this.matchContextualKeyword("from") && this.throwError(o.Messages.UnexpectedToken, this.lookahead.value), r3 = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression(), this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3)));
                else if (this.match("*")) {
                  if (this.nextToken(), !this.matchContextualKeyword("from")) {
                    var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                    this.throwError(n3, this.lookahead.value);
                  }
                  this.nextToken();
                  var i2 = this.parseModuleSpecifier();
                  this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportAllDeclaration(i2));
                } else if (this.lookahead.type === 4) {
                  switch (r3 = void 0, this.lookahead.value) {
                    case "let":
                    case "const":
                      r3 = this.parseLexicalDeclaration({ inFor: false });
                      break;
                    case "var":
                    case "class":
                    case "function":
                      r3 = this.parseStatementListItem();
                      break;
                    default:
                      this.throwUnexpectedToken(this.lookahead);
                  }
                  e4 = this.finalize(t3, new a.ExportNamedDeclaration(r3, [], null));
                } else if (this.matchAsyncFunction())
                  r3 = this.parseFunctionDeclaration(), e4 = this.finalize(t3, new a.ExportNamedDeclaration(r3, [], null));
                else {
                  var s2 = [], u2 = null, l2 = false;
                  for (this.expect("{"); !this.match("}"); )
                    l2 = l2 || this.matchKeyword("default"), s2.push(this.parseExportSpecifier()), this.match("}") || this.expect(",");
                  this.expect("}"), this.matchContextualKeyword("from") ? (this.nextToken(), u2 = this.parseModuleSpecifier(), this.consumeSemicolon()) : l2 ? (n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause, this.throwError(n3, this.lookahead.value)) : this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportNamedDeclaration(null, s2, u2));
                }
                return e4;
              }, e3;
            }();
            t2.Parser = c;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.assert = function(e3, t3) {
              if (!e3)
                throw new Error("ASSERT: " + t3);
            };
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var r2 = function() {
              function e3() {
                this.errors = [], this.tolerant = false;
              }
              return e3.prototype.recordError = function(e4) {
                this.errors.push(e4);
              }, e3.prototype.tolerate = function(e4) {
                if (!this.tolerant)
                  throw e4;
                this.recordError(e4);
              }, e3.prototype.constructError = function(e4, t3) {
                var r3 = new Error(e4);
                try {
                  throw r3;
                } catch (e5) {
                  Object.create && Object.defineProperty && (r3 = Object.create(e5), Object.defineProperty(r3, "column", { value: t3 }));
                }
                return r3;
              }, e3.prototype.createError = function(e4, t3, r3, n2) {
                var i = "Line " + t3 + ": " + n2, o = this.constructError(i, r3);
                return o.index = e4, o.lineNumber = t3, o.description = n2, o;
              }, e3.prototype.throwError = function(e4, t3, r3, n2) {
                throw this.createError(e4, t3, r3, n2);
              }, e3.prototype.tolerateError = function(e4, t3, r3, n2) {
                var i = this.createError(e4, t3, r3, n2);
                if (!this.tolerant)
                  throw i;
                this.recordError(i);
              }, e3;
            }();
            t2.ErrorHandler = r2;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Messages = { BadGetterArity: "Getter must not have any formal parameters", BadSetterArity: "Setter must have exactly one formal parameter", BadSetterRestParameter: "Setter function argument must not be a rest parameter", ConstructorIsAsync: "Class constructor may not be an async method", ConstructorSpecialMethod: "Class constructor may not be an accessor", DeclarationMissingInitializer: "Missing initializer in %0 declaration", DefaultRestParameter: "Unexpected token =", DuplicateBinding: "Duplicate binding %0", DuplicateConstructor: "A class may only have one constructor", DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals", ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer", GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts", IllegalBreak: "Illegal break statement", IllegalContinue: "Illegal continue statement", IllegalExportDeclaration: "Unexpected token", IllegalImportDeclaration: "Unexpected token", IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list", IllegalReturn: "Illegal return statement", InvalidEscapedReservedWord: "Keyword must not contain escaped characters", InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence", InvalidLHSInAssignment: "Invalid left-hand side in assignment", InvalidLHSInForIn: "Invalid left-hand side in for-in", InvalidLHSInForLoop: "Invalid left-hand side in for-loop", InvalidModuleSpecifier: "Unexpected token", InvalidRegExp: "Invalid regular expression", LetInLexicalBinding: "let is disallowed as a lexically bound name", MissingFromClause: "Unexpected token", MultipleDefaultsInSwitch: "More than one default clause in switch statement", NewlineAfterThrow: "Illegal newline after throw", NoAsAfterImportNamespace: "Unexpected token", NoCatchOrFinally: "Missing catch or finally after try", ParameterAfterRestParameter: "Rest parameter must be last formal parameter", Redeclaration: "%0 '%1' has already been declared", StaticPrototype: "Classes may not have static property named prototype", StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode", StrictDelete: "Delete of an unqualified identifier in strict mode.", StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block", StrictFunctionName: "Function name may not be eval or arguments in strict mode", StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictModeWith: "Strict mode code may not include a with statement", StrictOctalLiteral: "Octal literals are not allowed in strict mode.", StrictParamDupe: "Strict mode function may not have duplicate parameter names", StrictParamName: "Parameter name eval or arguments is not allowed in strict mode", StrictReservedWord: "Use of future reserved word in strict mode", StrictVarName: "Variable name may not be eval or arguments in strict mode", TemplateOctalLiteral: "Octal literals are not allowed in template strings.", UnexpectedEOS: "Unexpected end of input", UnexpectedIdentifier: "Unexpected identifier", UnexpectedNumber: "Unexpected number", UnexpectedReserved: "Unexpected reserved word", UnexpectedString: "Unexpected string", UnexpectedTemplate: "Unexpected quasi %0", UnexpectedToken: "Unexpected token %0", UnexpectedTokenIllegal: "Unexpected token ILLEGAL", UnknownLabel: "Undefined label '%0'", UnterminatedRegExp: "Invalid regular expression: missing /" };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(9), i = r2(4), o = r2(11);
            function a(e3) {
              return "0123456789abcdef".indexOf(e3.toLowerCase());
            }
            function s(e3) {
              return "01234567".indexOf(e3);
            }
            var u = function() {
              function e3(e4, t3) {
                this.source = e4, this.errorHandler = t3, this.trackComment = false, this.isModule = false, this.length = e4.length, this.index = 0, this.lineNumber = e4.length > 0 ? 1 : 0, this.lineStart = 0, this.curlyStack = [];
              }
              return e3.prototype.saveState = function() {
                return { index: this.index, lineNumber: this.lineNumber, lineStart: this.lineStart };
              }, e3.prototype.restoreState = function(e4) {
                this.index = e4.index, this.lineNumber = e4.lineNumber, this.lineStart = e4.lineStart;
              }, e3.prototype.eof = function() {
                return this.index >= this.length;
              }, e3.prototype.throwUnexpectedToken = function(e4) {
                return e4 === void 0 && (e4 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, e4);
              }, e3.prototype.tolerateUnexpectedToken = function(e4) {
                e4 === void 0 && (e4 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, e4);
              }, e3.prototype.skipSingleLineComment = function(e4) {
                var t3, r3, n3 = [];
                for (this.trackComment && (n3 = [], t3 = this.index - e4, r3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - e4 }, end: {} }); !this.eof(); ) {
                  var o2 = this.source.charCodeAt(this.index);
                  if (++this.index, i.Character.isLineTerminator(o2)) {
                    if (this.trackComment) {
                      r3.end = { line: this.lineNumber, column: this.index - this.lineStart - 1 };
                      var a2 = { multiLine: false, slice: [t3 + e4, this.index - 1], range: [t3, this.index - 1], loc: r3 };
                      n3.push(a2);
                    }
                    return o2 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, n3;
                  }
                }
                return this.trackComment && (r3.end = { line: this.lineNumber, column: this.index - this.lineStart }, a2 = { multiLine: false, slice: [t3 + e4, this.index], range: [t3, this.index], loc: r3 }, n3.push(a2)), n3;
              }, e3.prototype.skipMultiLineComment = function() {
                var e4, t3, r3 = [];
                for (this.trackComment && (r3 = [], e4 = this.index - 2, t3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - 2 }, end: {} }); !this.eof(); ) {
                  var n3 = this.source.charCodeAt(this.index);
                  if (i.Character.isLineTerminator(n3))
                    n3 === 13 && this.source.charCodeAt(this.index + 1) === 10 && ++this.index, ++this.lineNumber, ++this.index, this.lineStart = this.index;
                  else if (n3 === 42) {
                    if (this.source.charCodeAt(this.index + 1) === 47) {
                      if (this.index += 2, this.trackComment) {
                        t3.end = { line: this.lineNumber, column: this.index - this.lineStart };
                        var o2 = { multiLine: true, slice: [e4 + 2, this.index - 2], range: [e4, this.index], loc: t3 };
                        r3.push(o2);
                      }
                      return r3;
                    }
                    ++this.index;
                  } else
                    ++this.index;
                }
                return this.trackComment && (t3.end = { line: this.lineNumber, column: this.index - this.lineStart }, o2 = { multiLine: true, slice: [e4 + 2, this.index], range: [e4, this.index], loc: t3 }, r3.push(o2)), this.tolerateUnexpectedToken(), r3;
              }, e3.prototype.scanComments = function() {
                var e4;
                this.trackComment && (e4 = []);
                for (var t3 = this.index === 0; !this.eof(); ) {
                  var r3 = this.source.charCodeAt(this.index);
                  if (i.Character.isWhiteSpace(r3))
                    ++this.index;
                  else if (i.Character.isLineTerminator(r3))
                    ++this.index, r3 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, t3 = true;
                  else if (r3 === 47)
                    if ((r3 = this.source.charCodeAt(this.index + 1)) === 47) {
                      this.index += 2;
                      var n3 = this.skipSingleLineComment(2);
                      this.trackComment && (e4 = e4.concat(n3)), t3 = true;
                    } else {
                      if (r3 !== 42)
                        break;
                      this.index += 2, n3 = this.skipMultiLineComment(), this.trackComment && (e4 = e4.concat(n3));
                    }
                  else if (t3 && r3 === 45) {
                    if (this.source.charCodeAt(this.index + 1) !== 45 || this.source.charCodeAt(this.index + 2) !== 62)
                      break;
                    this.index += 3, n3 = this.skipSingleLineComment(3), this.trackComment && (e4 = e4.concat(n3));
                  } else {
                    if (r3 !== 60 || this.isModule)
                      break;
                    if (this.source.slice(this.index + 1, this.index + 4) !== "!--")
                      break;
                    this.index += 4, n3 = this.skipSingleLineComment(4), this.trackComment && (e4 = e4.concat(n3));
                  }
                }
                return e4;
              }, e3.prototype.isFutureReservedWord = function(e4) {
                switch (e4) {
                  case "enum":
                  case "export":
                  case "import":
                  case "super":
                    return true;
                  default:
                    return false;
                }
              }, e3.prototype.isStrictModeReservedWord = function(e4) {
                switch (e4) {
                  case "implements":
                  case "interface":
                  case "package":
                  case "private":
                  case "protected":
                  case "public":
                  case "static":
                  case "yield":
                  case "let":
                    return true;
                  default:
                    return false;
                }
              }, e3.prototype.isRestrictedWord = function(e4) {
                return e4 === "eval" || e4 === "arguments";
              }, e3.prototype.isKeyword = function(e4) {
                switch (e4.length) {
                  case 2:
                    return e4 === "if" || e4 === "in" || e4 === "do";
                  case 3:
                    return e4 === "var" || e4 === "for" || e4 === "new" || e4 === "try" || e4 === "let";
                  case 4:
                    return e4 === "this" || e4 === "else" || e4 === "case" || e4 === "void" || e4 === "with" || e4 === "enum";
                  case 5:
                    return e4 === "while" || e4 === "break" || e4 === "catch" || e4 === "throw" || e4 === "const" || e4 === "yield" || e4 === "class" || e4 === "super";
                  case 6:
                    return e4 === "return" || e4 === "typeof" || e4 === "delete" || e4 === "switch" || e4 === "export" || e4 === "import";
                  case 7:
                    return e4 === "default" || e4 === "finally" || e4 === "extends";
                  case 8:
                    return e4 === "function" || e4 === "continue" || e4 === "debugger";
                  case 10:
                    return e4 === "instanceof";
                  default:
                    return false;
                }
              }, e3.prototype.codePointAt = function(e4) {
                var t3 = this.source.charCodeAt(e4);
                if (t3 >= 55296 && t3 <= 56319) {
                  var r3 = this.source.charCodeAt(e4 + 1);
                  r3 >= 56320 && r3 <= 57343 && (t3 = 1024 * (t3 - 55296) + r3 - 56320 + 65536);
                }
                return t3;
              }, e3.prototype.scanHexEscape = function(e4) {
                for (var t3 = e4 === "u" ? 4 : 2, r3 = 0, n3 = 0; n3 < t3; ++n3) {
                  if (this.eof() || !i.Character.isHexDigit(this.source.charCodeAt(this.index)))
                    return null;
                  r3 = 16 * r3 + a(this.source[this.index++]);
                }
                return String.fromCharCode(r3);
              }, e3.prototype.scanUnicodeCodePointEscape = function() {
                var e4 = this.source[this.index], t3 = 0;
                for (e4 === "}" && this.throwUnexpectedToken(); !this.eof() && (e4 = this.source[this.index++], i.Character.isHexDigit(e4.charCodeAt(0))); )
                  t3 = 16 * t3 + a(e4);
                return (t3 > 1114111 || e4 !== "}") && this.throwUnexpectedToken(), i.Character.fromCodePoint(t3);
              }, e3.prototype.getIdentifier = function() {
                for (var e4 = this.index++; !this.eof(); ) {
                  var t3 = this.source.charCodeAt(this.index);
                  if (t3 === 92)
                    return this.index = e4, this.getComplexIdentifier();
                  if (t3 >= 55296 && t3 < 57343)
                    return this.index = e4, this.getComplexIdentifier();
                  if (!i.Character.isIdentifierPart(t3))
                    break;
                  ++this.index;
                }
                return this.source.slice(e4, this.index);
              }, e3.prototype.getComplexIdentifier = function() {
                var e4, t3 = this.codePointAt(this.index), r3 = i.Character.fromCodePoint(t3);
                for (this.index += r3.length, t3 === 92 && (this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e4 = this.scanUnicodeCodePointEscape()) : (e4 = this.scanHexEscape("u")) !== null && e4 !== "\\" && i.Character.isIdentifierStart(e4.charCodeAt(0)) || this.throwUnexpectedToken(), r3 = e4); !this.eof() && (t3 = this.codePointAt(this.index), i.Character.isIdentifierPart(t3)); )
                  r3 += e4 = i.Character.fromCodePoint(t3), this.index += e4.length, t3 === 92 && (r3 = r3.substr(0, r3.length - 1), this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e4 = this.scanUnicodeCodePointEscape()) : (e4 = this.scanHexEscape("u")) !== null && e4 !== "\\" && i.Character.isIdentifierPart(e4.charCodeAt(0)) || this.throwUnexpectedToken(), r3 += e4);
                return r3;
              }, e3.prototype.octalToDecimal = function(e4) {
                var t3 = e4 !== "0", r3 = s(e4);
                return !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (t3 = true, r3 = 8 * r3 + s(this.source[this.index++]), "0123".indexOf(e4) >= 0 && !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (r3 = 8 * r3 + s(this.source[this.index++]))), { code: r3, octal: t3 };
              }, e3.prototype.scanIdentifier = function() {
                var e4, t3 = this.index, r3 = this.source.charCodeAt(t3) === 92 ? this.getComplexIdentifier() : this.getIdentifier();
                if ((e4 = r3.length === 1 ? 3 : this.isKeyword(r3) ? 4 : r3 === "null" ? 5 : r3 === "true" || r3 === "false" ? 1 : 3) != 3 && t3 + r3.length !== this.index) {
                  var n3 = this.index;
                  this.index = t3, this.tolerateUnexpectedToken(o.Messages.InvalidEscapedReservedWord), this.index = n3;
                }
                return { type: e4, value: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t3, end: this.index };
              }, e3.prototype.scanPunctuator = function() {
                var e4 = this.index, t3 = this.source[this.index];
                switch (t3) {
                  case "(":
                  case "{":
                    t3 === "{" && this.curlyStack.push("{"), ++this.index;
                    break;
                  case ".":
                    ++this.index, this.source[this.index] === "." && this.source[this.index + 1] === "." && (this.index += 2, t3 = "...");
                    break;
                  case "}":
                    ++this.index, this.curlyStack.pop();
                    break;
                  case ")":
                  case ";":
                  case ",":
                  case "[":
                  case "]":
                  case ":":
                  case "?":
                  case "~":
                    ++this.index;
                    break;
                  default:
                    (t3 = this.source.substr(this.index, 4)) === ">>>=" ? this.index += 4 : (t3 = t3.substr(0, 3)) === "===" || t3 === "!==" || t3 === ">>>" || t3 === "<<=" || t3 === ">>=" || t3 === "**=" ? this.index += 3 : (t3 = t3.substr(0, 2)) === "&&" || t3 === "||" || t3 === "==" || t3 === "!=" || t3 === "+=" || t3 === "-=" || t3 === "*=" || t3 === "/=" || t3 === "++" || t3 === "--" || t3 === "<<" || t3 === ">>" || t3 === "&=" || t3 === "|=" || t3 === "^=" || t3 === "%=" || t3 === "<=" || t3 === ">=" || t3 === "=>" || t3 === "**" ? this.index += 2 : (t3 = this.source[this.index], "<>=!+-*%&|^/".indexOf(t3) >= 0 && ++this.index);
                }
                return this.index === e4 && this.throwUnexpectedToken(), { type: 7, value: t3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanHexLiteral = function(e4) {
                for (var t3 = ""; !this.eof() && i.Character.isHexDigit(this.source.charCodeAt(this.index)); )
                  t3 += this.source[this.index++];
                return t3.length === 0 && this.throwUnexpectedToken(), i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseInt("0x" + t3, 16), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanBinaryLiteral = function(e4) {
                for (var t3, r3 = ""; !this.eof() && ((t3 = this.source[this.index]) === "0" || t3 === "1"); )
                  r3 += this.source[this.index++];
                return r3.length === 0 && this.throwUnexpectedToken(), this.eof() || (t3 = this.source.charCodeAt(this.index), (i.Character.isIdentifierStart(t3) || i.Character.isDecimalDigit(t3)) && this.throwUnexpectedToken()), { type: 6, value: parseInt(r3, 2), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanOctalLiteral = function(e4, t3) {
                var r3 = "", n3 = false;
                for (i.Character.isOctalDigit(e4.charCodeAt(0)) ? (n3 = true, r3 = "0" + this.source[this.index++]) : ++this.index; !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)); )
                  r3 += this.source[this.index++];
                return n3 || r3.length !== 0 || this.throwUnexpectedToken(), (i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || i.Character.isDecimalDigit(this.source.charCodeAt(this.index))) && this.throwUnexpectedToken(), { type: 6, value: parseInt(r3, 8), octal: n3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t3, end: this.index };
              }, e3.prototype.isImplicitOctalLiteral = function() {
                for (var e4 = this.index + 1; e4 < this.length; ++e4) {
                  var t3 = this.source[e4];
                  if (t3 === "8" || t3 === "9")
                    return false;
                  if (!i.Character.isOctalDigit(t3.charCodeAt(0)))
                    return true;
                }
                return true;
              }, e3.prototype.scanNumericLiteral = function() {
                var e4 = this.index, t3 = this.source[e4];
                n2.assert(i.Character.isDecimalDigit(t3.charCodeAt(0)) || t3 === ".", "Numeric literal must start with a decimal digit or a decimal point");
                var r3 = "";
                if (t3 !== ".") {
                  if (r3 = this.source[this.index++], t3 = this.source[this.index], r3 === "0") {
                    if (t3 === "x" || t3 === "X")
                      return ++this.index, this.scanHexLiteral(e4);
                    if (t3 === "b" || t3 === "B")
                      return ++this.index, this.scanBinaryLiteral(e4);
                    if (t3 === "o" || t3 === "O")
                      return this.scanOctalLiteral(t3, e4);
                    if (t3 && i.Character.isOctalDigit(t3.charCodeAt(0)) && this.isImplicitOctalLiteral())
                      return this.scanOctalLiteral(t3, e4);
                  }
                  for (; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t3 = this.source[this.index];
                }
                if (t3 === ".") {
                  for (r3 += this.source[this.index++]; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  t3 = this.source[this.index];
                }
                if (t3 === "e" || t3 === "E")
                  if (r3 += this.source[this.index++], (t3 = this.source[this.index]) !== "+" && t3 !== "-" || (r3 += this.source[this.index++]), i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))
                    for (; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                      r3 += this.source[this.index++];
                  else
                    this.throwUnexpectedToken();
                return i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseFloat(r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanStringLiteral = function() {
                var e4 = this.index, t3 = this.source[e4];
                n2.assert(t3 === "'" || t3 === '"', "String literal must starts with a quote"), ++this.index;
                for (var r3 = false, a2 = ""; !this.eof(); ) {
                  var s2 = this.source[this.index++];
                  if (s2 === t3) {
                    t3 = "";
                    break;
                  }
                  if (s2 === "\\")
                    if ((s2 = this.source[this.index++]) && i.Character.isLineTerminator(s2.charCodeAt(0)))
                      ++this.lineNumber, s2 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (s2) {
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, a2 += this.scanUnicodeCodePointEscape();
                          else {
                            var u2 = this.scanHexEscape(s2);
                            u2 === null && this.throwUnexpectedToken(), a2 += u2;
                          }
                          break;
                        case "x":
                          var l = this.scanHexEscape(s2);
                          l === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), a2 += l;
                          break;
                        case "n":
                          a2 += "\n";
                          break;
                        case "r":
                          a2 += "\r";
                          break;
                        case "t":
                          a2 += "	";
                          break;
                        case "b":
                          a2 += "\b";
                          break;
                        case "f":
                          a2 += "\f";
                          break;
                        case "v":
                          a2 += "\v";
                          break;
                        case "8":
                        case "9":
                          a2 += s2, this.tolerateUnexpectedToken();
                          break;
                        default:
                          if (s2 && i.Character.isOctalDigit(s2.charCodeAt(0))) {
                            var c = this.octalToDecimal(s2);
                            r3 = c.octal || r3, a2 += String.fromCharCode(c.code);
                          } else
                            a2 += s2;
                      }
                  else {
                    if (i.Character.isLineTerminator(s2.charCodeAt(0)))
                      break;
                    a2 += s2;
                  }
                }
                return t3 !== "" && (this.index = e4, this.throwUnexpectedToken()), { type: 8, value: a2, octal: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.scanTemplate = function() {
                var e4 = "", t3 = false, r3 = this.index, n3 = this.source[r3] === "`", a2 = false, s2 = 2;
                for (++this.index; !this.eof(); ) {
                  var u2 = this.source[this.index++];
                  if (u2 === "`") {
                    s2 = 1, a2 = true, t3 = true;
                    break;
                  }
                  if (u2 === "$") {
                    if (this.source[this.index] === "{") {
                      this.curlyStack.push("${"), ++this.index, t3 = true;
                      break;
                    }
                    e4 += u2;
                  } else if (u2 === "\\")
                    if (u2 = this.source[this.index++], i.Character.isLineTerminator(u2.charCodeAt(0)))
                      ++this.lineNumber, u2 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                    else
                      switch (u2) {
                        case "n":
                          e4 += "\n";
                          break;
                        case "r":
                          e4 += "\r";
                          break;
                        case "t":
                          e4 += "	";
                          break;
                        case "u":
                          if (this.source[this.index] === "{")
                            ++this.index, e4 += this.scanUnicodeCodePointEscape();
                          else {
                            var l = this.index, c = this.scanHexEscape(u2);
                            c !== null ? e4 += c : (this.index = l, e4 += u2);
                          }
                          break;
                        case "x":
                          var h = this.scanHexEscape(u2);
                          h === null && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), e4 += h;
                          break;
                        case "b":
                          e4 += "\b";
                          break;
                        case "f":
                          e4 += "\f";
                          break;
                        case "v":
                          e4 += "\v";
                          break;
                        default:
                          u2 === "0" ? (i.Character.isDecimalDigit(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral), e4 += "\0") : i.Character.isOctalDigit(u2.charCodeAt(0)) ? this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral) : e4 += u2;
                      }
                  else
                    i.Character.isLineTerminator(u2.charCodeAt(0)) ? (++this.lineNumber, u2 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index, e4 += "\n") : e4 += u2;
                }
                return t3 || this.throwUnexpectedToken(), n3 || this.curlyStack.pop(), { type: 10, value: this.source.slice(r3 + 1, this.index - s2), cooked: e4, head: n3, tail: a2, lineNumber: this.lineNumber, lineStart: this.lineStart, start: r3, end: this.index };
              }, e3.prototype.testRegExp = function(e4, t3) {
                var r3 = e4, n3 = this;
                t3.indexOf("u") >= 0 && (r3 = r3.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function(e5, t4, r4) {
                  var i2 = parseInt(t4 || r4, 16);
                  return i2 > 1114111 && n3.throwUnexpectedToken(o.Messages.InvalidRegExp), i2 <= 65535 ? String.fromCharCode(i2) : "\uFFFF";
                }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "\uFFFF"));
                try {
                  RegExp(r3);
                } catch (e5) {
                  this.throwUnexpectedToken(o.Messages.InvalidRegExp);
                }
                try {
                  return new RegExp(e4, t3);
                } catch (e5) {
                  return null;
                }
              }, e3.prototype.scanRegExpBody = function() {
                var e4 = this.source[this.index];
                n2.assert(e4 === "/", "Regular expression literal must start with a slash");
                for (var t3 = this.source[this.index++], r3 = false, a2 = false; !this.eof(); )
                  if (t3 += e4 = this.source[this.index++], e4 === "\\")
                    e4 = this.source[this.index++], i.Character.isLineTerminator(e4.charCodeAt(0)) && this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t3 += e4;
                  else if (i.Character.isLineTerminator(e4.charCodeAt(0)))
                    this.throwUnexpectedToken(o.Messages.UnterminatedRegExp);
                  else if (r3)
                    e4 === "]" && (r3 = false);
                  else {
                    if (e4 === "/") {
                      a2 = true;
                      break;
                    }
                    e4 === "[" && (r3 = true);
                  }
                return a2 || this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t3.substr(1, t3.length - 2);
              }, e3.prototype.scanRegExpFlags = function() {
                for (var e4 = ""; !this.eof(); ) {
                  var t3 = this.source[this.index];
                  if (!i.Character.isIdentifierPart(t3.charCodeAt(0)))
                    break;
                  if (++this.index, t3 !== "\\" || this.eof())
                    e4 += t3;
                  else if ((t3 = this.source[this.index]) === "u") {
                    ++this.index;
                    var r3 = this.index, n3 = this.scanHexEscape("u");
                    if (n3 !== null)
                      for (e4 += n3; r3 < this.index; ++r3)
                        this.source[r3];
                    else
                      this.index = r3, e4 += "u";
                    this.tolerateUnexpectedToken();
                  } else
                    this.tolerateUnexpectedToken();
                }
                return e4;
              }, e3.prototype.scanRegExp = function() {
                var e4 = this.index, t3 = this.scanRegExpBody(), r3 = this.scanRegExpFlags();
                return { type: 9, value: "", pattern: t3, flags: r3, regex: this.testRegExp(t3, r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
              }, e3.prototype.lex = function() {
                if (this.eof())
                  return { type: 2, value: "", lineNumber: this.lineNumber, lineStart: this.lineStart, start: this.index, end: this.index };
                var e4 = this.source.charCodeAt(this.index);
                return i.Character.isIdentifierStart(e4) ? this.scanIdentifier() : e4 === 40 || e4 === 41 || e4 === 59 ? this.scanPunctuator() : e4 === 39 || e4 === 34 ? this.scanStringLiteral() : e4 === 46 ? i.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1)) ? this.scanNumericLiteral() : this.scanPunctuator() : i.Character.isDecimalDigit(e4) ? this.scanNumericLiteral() : e4 === 96 || e4 === 125 && this.curlyStack[this.curlyStack.length - 1] === "${" ? this.scanTemplate() : e4 >= 55296 && e4 < 57343 && i.Character.isIdentifierStart(this.codePointAt(this.index)) ? this.scanIdentifier() : this.scanPunctuator();
              }, e3;
            }();
            t2.Scanner = u;
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.TokenName = {}, t2.TokenName[1] = "Boolean", t2.TokenName[2] = "<end>", t2.TokenName[3] = "Identifier", t2.TokenName[4] = "Keyword", t2.TokenName[5] = "Null", t2.TokenName[6] = "Numeric", t2.TokenName[7] = "Punctuator", t2.TokenName[8] = "String", t2.TokenName[9] = "RegularExpression", t2.TokenName[10] = "Template";
          }, function(e2, t2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.XHTMLEntities = { quot: '"', amp: "&", apos: "'", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666", lang: "\u27E8", rang: "\u27E9" };
          }, function(e2, t2, r2) {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
            var n2 = r2(10), i = r2(12), o = r2(13), a = function() {
              function e3() {
                this.values = [], this.curly = this.paren = -1;
              }
              return e3.prototype.beforeFunctionExpression = function(e4) {
                return ["(", "{", "[", "in", "typeof", "instanceof", "new", "return", "case", "delete", "throw", "void", "=", "+=", "-=", "*=", "**=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ",", "+", "-", "*", "**", "/", "%", "++", "--", "<<", ">>", ">>>", "&", "|", "^", "!", "~", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!=="].indexOf(e4) >= 0;
              }, e3.prototype.isRegexStart = function() {
                var e4 = this.values[this.values.length - 1], t3 = e4 !== null;
                switch (e4) {
                  case "this":
                  case "]":
                    t3 = false;
                    break;
                  case ")":
                    var r3 = this.values[this.paren - 1];
                    t3 = r3 === "if" || r3 === "while" || r3 === "for" || r3 === "with";
                    break;
                  case "}":
                    if (t3 = false, this.values[this.curly - 3] === "function")
                      t3 = !!(n3 = this.values[this.curly - 4]) && !this.beforeFunctionExpression(n3);
                    else if (this.values[this.curly - 4] === "function") {
                      var n3;
                      t3 = !(n3 = this.values[this.curly - 5]) || !this.beforeFunctionExpression(n3);
                    }
                }
                return t3;
              }, e3.prototype.push = function(e4) {
                e4.type === 7 || e4.type === 4 ? (e4.value === "{" ? this.curly = this.values.length : e4.value === "(" && (this.paren = this.values.length), this.values.push(e4.value)) : this.values.push(null);
              }, e3;
            }(), s = function() {
              function e3(e4, t3) {
                this.errorHandler = new n2.ErrorHandler(), this.errorHandler.tolerant = !!t3 && typeof t3.tolerant == "boolean" && t3.tolerant, this.scanner = new i.Scanner(e4, this.errorHandler), this.scanner.trackComment = !!t3 && typeof t3.comment == "boolean" && t3.comment, this.trackRange = !!t3 && typeof t3.range == "boolean" && t3.range, this.trackLoc = !!t3 && typeof t3.loc == "boolean" && t3.loc, this.buffer = [], this.reader = new a();
              }
              return e3.prototype.errors = function() {
                return this.errorHandler.errors;
              }, e3.prototype.getNextToken = function() {
                if (this.buffer.length === 0) {
                  var e4 = this.scanner.scanComments();
                  if (this.scanner.trackComment)
                    for (var t3 = 0; t3 < e4.length; ++t3) {
                      var r3 = e4[t3], n3 = this.scanner.source.slice(r3.slice[0], r3.slice[1]), i2 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: n3 };
                      this.trackRange && (i2.range = r3.range), this.trackLoc && (i2.loc = r3.loc), this.buffer.push(i2);
                    }
                  if (!this.scanner.eof()) {
                    var a2 = void 0;
                    this.trackLoc && (a2 = { start: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, end: {} });
                    var s2 = this.scanner.source[this.scanner.index] === "/" && this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.lex();
                    this.reader.push(s2);
                    var u = { type: o.TokenName[s2.type], value: this.scanner.source.slice(s2.start, s2.end) };
                    if (this.trackRange && (u.range = [s2.start, s2.end]), this.trackLoc && (a2.end = { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, u.loc = a2), s2.type === 9) {
                      var l = s2.pattern, c = s2.flags;
                      u.regex = { pattern: l, flags: c };
                    }
                    this.buffer.push(u);
                  }
                }
                return this.buffer.shift();
              }, e3;
            }();
            t2.Tokenizer = s;
          }]);
        }, e.exports = n();
      }, function(e, t, r) {
        "use strict";
        var n = r(38), i = r(53), o = r(76), a = r(54), s = Object.prototype.toString, u = Object.prototype.hasOwnProperty, l = { 0: "\\0", 7: "\\a", 8: "\\b", 9: "\\t", 10: "\\n", 11: "\\v", 12: "\\f", 13: "\\r", 27: "\\e", 34: '\\"', 92: "\\\\", 133: "\\N", 160: "\\_", 8232: "\\L", 8233: "\\P" }, c = ["y", "Y", "yes", "Yes", "YES", "on", "On", "ON", "n", "N", "no", "No", "NO", "off", "Off", "OFF"];
        function h(e2) {
          var t2, r2, o2;
          if (t2 = e2.toString(16).toUpperCase(), e2 <= 255)
            r2 = "x", o2 = 2;
          else if (e2 <= 65535)
            r2 = "u", o2 = 4;
          else {
            if (!(e2 <= 4294967295))
              throw new i("code point within a string may not be greater than 0xFFFFFFFF");
            r2 = "U", o2 = 8;
          }
          return "\\" + r2 + n.repeat("0", o2 - t2.length) + t2;
        }
        function p(e2) {
          this.schema = e2.schema || o, this.indent = Math.max(1, e2.indent || 2), this.noArrayIndent = e2.noArrayIndent || false, this.skipInvalid = e2.skipInvalid || false, this.flowLevel = n.isNothing(e2.flowLevel) ? -1 : e2.flowLevel, this.styleMap = function(e3, t2) {
            var r2, n2, i2, o2, a2, s2, l2;
            if (t2 === null)
              return {};
            for (r2 = {}, i2 = 0, o2 = (n2 = Object.keys(t2)).length; i2 < o2; i2 += 1)
              a2 = n2[i2], s2 = String(t2[a2]), a2.slice(0, 2) === "!!" && (a2 = "tag:yaml.org,2002:" + a2.slice(2)), (l2 = e3.compiledTypeMap.fallback[a2]) && u.call(l2.styleAliases, s2) && (s2 = l2.styleAliases[s2]), r2[a2] = s2;
            return r2;
          }(this.schema, e2.styles || null), this.sortKeys = e2.sortKeys || false, this.lineWidth = e2.lineWidth || 80, this.noRefs = e2.noRefs || false, this.noCompatMode = e2.noCompatMode || false, this.condenseFlow = e2.condenseFlow || false, this.implicitTypes = this.schema.compiledImplicit, this.explicitTypes = this.schema.compiledExplicit, this.tag = null, this.result = "", this.duplicates = [], this.usedDuplicates = null;
        }
        function f(e2, t2) {
          for (var r2, i2 = n.repeat(" ", t2), o2 = 0, a2 = -1, s2 = "", u2 = e2.length; o2 < u2; )
            (a2 = e2.indexOf("\n", o2)) === -1 ? (r2 = e2.slice(o2), o2 = u2) : (r2 = e2.slice(o2, a2 + 1), o2 = a2 + 1), r2.length && r2 !== "\n" && (s2 += i2), s2 += r2;
          return s2;
        }
        function d(e2, t2) {
          return "\n" + n.repeat(" ", e2.indent * t2);
        }
        function m(e2) {
          return e2 === 32 || e2 === 9;
        }
        function y(e2) {
          return 32 <= e2 && e2 <= 126 || 161 <= e2 && e2 <= 55295 && e2 !== 8232 && e2 !== 8233 || 57344 <= e2 && e2 <= 65533 && e2 !== 65279 || 65536 <= e2 && e2 <= 1114111;
        }
        function v(e2, t2) {
          return y(e2) && e2 !== 65279 && e2 !== 44 && e2 !== 91 && e2 !== 93 && e2 !== 123 && e2 !== 125 && e2 !== 58 && (e2 !== 35 || t2 && function(e3) {
            return y(e3) && !m(e3) && e3 !== 65279 && e3 !== 13 && e3 !== 10;
          }(t2));
        }
        function _(e2) {
          return /^\n* /.test(e2);
        }
        function g(e2, t2, r2, n2, i2) {
          var o2, a2, s2, u2, l2 = false, c2 = false, h2 = n2 !== -1, p2 = -1, f2 = y(u2 = e2.charCodeAt(0)) && u2 !== 65279 && !m(u2) && u2 !== 45 && u2 !== 63 && u2 !== 58 && u2 !== 44 && u2 !== 91 && u2 !== 93 && u2 !== 123 && u2 !== 125 && u2 !== 35 && u2 !== 38 && u2 !== 42 && u2 !== 33 && u2 !== 124 && u2 !== 61 && u2 !== 62 && u2 !== 39 && u2 !== 34 && u2 !== 37 && u2 !== 64 && u2 !== 96 && !m(e2.charCodeAt(e2.length - 1));
          if (t2)
            for (o2 = 0; o2 < e2.length; o2++) {
              if (!y(a2 = e2.charCodeAt(o2)))
                return 5;
              s2 = o2 > 0 ? e2.charCodeAt(o2 - 1) : null, f2 = f2 && v(a2, s2);
            }
          else {
            for (o2 = 0; o2 < e2.length; o2++) {
              if ((a2 = e2.charCodeAt(o2)) === 10)
                l2 = true, h2 && (c2 = c2 || o2 - p2 - 1 > n2 && e2[p2 + 1] !== " ", p2 = o2);
              else if (!y(a2))
                return 5;
              s2 = o2 > 0 ? e2.charCodeAt(o2 - 1) : null, f2 = f2 && v(a2, s2);
            }
            c2 = c2 || h2 && o2 - p2 - 1 > n2 && e2[p2 + 1] !== " ";
          }
          return l2 || c2 ? r2 > 9 && _(e2) ? 5 : c2 ? 4 : 3 : f2 && !i2(e2) ? 1 : 2;
        }
        function b(e2, t2, r2, n2) {
          e2.dump = function() {
            if (t2.length === 0)
              return "''";
            if (!e2.noCompatMode && c.indexOf(t2) !== -1)
              return "'" + t2 + "'";
            var o2 = e2.indent * Math.max(1, r2), a2 = e2.lineWidth === -1 ? -1 : Math.max(Math.min(e2.lineWidth, 40), e2.lineWidth - o2), s2 = n2 || e2.flowLevel > -1 && r2 >= e2.flowLevel;
            switch (g(t2, s2, e2.indent, a2, function(t3) {
              return function(e3, t4) {
                var r3, n3;
                for (r3 = 0, n3 = e3.implicitTypes.length; r3 < n3; r3 += 1)
                  if (e3.implicitTypes[r3].resolve(t4))
                    return true;
                return false;
              }(e2, t3);
            })) {
              case 1:
                return t2;
              case 2:
                return "'" + t2.replace(/'/g, "''") + "'";
              case 3:
                return "|" + x(t2, e2.indent) + w(f(t2, o2));
              case 4:
                return ">" + x(t2, e2.indent) + w(f(function(e3, t3) {
                  var r3, n3, i2 = /(\n+)([^\n]*)/g, o3 = (s3 = e3.indexOf("\n"), s3 = s3 !== -1 ? s3 : e3.length, i2.lastIndex = s3, E(e3.slice(0, s3), t3)), a3 = e3[0] === "\n" || e3[0] === " ";
                  var s3;
                  for (; n3 = i2.exec(e3); ) {
                    var u2 = n3[1], l2 = n3[2];
                    r3 = l2[0] === " ", o3 += u2 + (a3 || r3 || l2 === "" ? "" : "\n") + E(l2, t3), a3 = r3;
                  }
                  return o3;
                }(t2, a2), o2));
              case 5:
                return '"' + function(e3) {
                  for (var t3, r3, n3, i2 = "", o3 = 0; o3 < e3.length; o3++)
                    (t3 = e3.charCodeAt(o3)) >= 55296 && t3 <= 56319 && (r3 = e3.charCodeAt(o3 + 1)) >= 56320 && r3 <= 57343 ? (i2 += h(1024 * (t3 - 55296) + r3 - 56320 + 65536), o3++) : (n3 = l[t3], i2 += !n3 && y(t3) ? e3[o3] : n3 || h(t3));
                  return i2;
                }(t2) + '"';
              default:
                throw new i("impossible error: invalid scalar style");
            }
          }();
        }
        function x(e2, t2) {
          var r2 = _(e2) ? String(t2) : "", n2 = e2[e2.length - 1] === "\n";
          return r2 + (n2 && (e2[e2.length - 2] === "\n" || e2 === "\n") ? "+" : n2 ? "" : "-") + "\n";
        }
        function w(e2) {
          return e2[e2.length - 1] === "\n" ? e2.slice(0, -1) : e2;
        }
        function E(e2, t2) {
          if (e2 === "" || e2[0] === " ")
            return e2;
          for (var r2, n2, i2 = / [^ ]/g, o2 = 0, a2 = 0, s2 = 0, u2 = ""; r2 = i2.exec(e2); )
            (s2 = r2.index) - o2 > t2 && (n2 = a2 > o2 ? a2 : s2, u2 += "\n" + e2.slice(o2, n2), o2 = n2 + 1), a2 = s2;
          return u2 += "\n", e2.length - o2 > t2 && a2 > o2 ? u2 += e2.slice(o2, a2) + "\n" + e2.slice(a2 + 1) : u2 += e2.slice(o2), u2.slice(1);
        }
        function D(e2, t2, r2) {
          var n2, o2, a2, l2, c2, h2;
          for (a2 = 0, l2 = (o2 = r2 ? e2.explicitTypes : e2.implicitTypes).length; a2 < l2; a2 += 1)
            if (((c2 = o2[a2]).instanceOf || c2.predicate) && (!c2.instanceOf || typeof t2 == "object" && t2 instanceof c2.instanceOf) && (!c2.predicate || c2.predicate(t2))) {
              if (e2.tag = r2 ? c2.tag : "?", c2.represent) {
                if (h2 = e2.styleMap[c2.tag] || c2.defaultStyle, s.call(c2.represent) === "[object Function]")
                  n2 = c2.represent(t2, h2);
                else {
                  if (!u.call(c2.represent, h2))
                    throw new i("!<" + c2.tag + '> tag resolver accepts not "' + h2 + '" style');
                  n2 = c2.represent[h2](t2, h2);
                }
                e2.dump = n2;
              }
              return true;
            }
          return false;
        }
        function S(e2, t2, r2, n2, o2, a2) {
          e2.tag = null, e2.dump = r2, D(e2, r2, false) || D(e2, r2, true);
          var u2 = s.call(e2.dump);
          n2 && (n2 = e2.flowLevel < 0 || e2.flowLevel > t2);
          var l2, c2, h2 = u2 === "[object Object]" || u2 === "[object Array]";
          if (h2 && (c2 = (l2 = e2.duplicates.indexOf(r2)) !== -1), (e2.tag !== null && e2.tag !== "?" || c2 || e2.indent !== 2 && t2 > 0) && (o2 = false), c2 && e2.usedDuplicates[l2])
            e2.dump = "*ref_" + l2;
          else {
            if (h2 && c2 && !e2.usedDuplicates[l2] && (e2.usedDuplicates[l2] = true), u2 === "[object Object]")
              n2 && Object.keys(e2.dump).length !== 0 ? (!function(e3, t3, r3, n3) {
                var o3, a3, s2, u3, l3, c3, h3 = "", p3 = e3.tag, f2 = Object.keys(r3);
                if (e3.sortKeys === true)
                  f2.sort();
                else if (typeof e3.sortKeys == "function")
                  f2.sort(e3.sortKeys);
                else if (e3.sortKeys)
                  throw new i("sortKeys must be a boolean or a function");
                for (o3 = 0, a3 = f2.length; o3 < a3; o3 += 1)
                  c3 = "", n3 && o3 === 0 || (c3 += d(e3, t3)), u3 = r3[s2 = f2[o3]], S(e3, t3 + 1, s2, true, true, true) && ((l3 = e3.tag !== null && e3.tag !== "?" || e3.dump && e3.dump.length > 1024) && (e3.dump && e3.dump.charCodeAt(0) === 10 ? c3 += "?" : c3 += "? "), c3 += e3.dump, l3 && (c3 += d(e3, t3)), S(e3, t3 + 1, u3, true, l3) && (e3.dump && e3.dump.charCodeAt(0) === 10 ? c3 += ":" : c3 += ": ", h3 += c3 += e3.dump));
                e3.tag = p3, e3.dump = h3 || "{}";
              }(e2, t2, e2.dump, o2), c2 && (e2.dump = "&ref_" + l2 + e2.dump)) : (!function(e3, t3, r3) {
                var n3, i2, o3, a3, s2, u3 = "", l3 = e3.tag, c3 = Object.keys(r3);
                for (n3 = 0, i2 = c3.length; n3 < i2; n3 += 1)
                  s2 = "", n3 !== 0 && (s2 += ", "), e3.condenseFlow && (s2 += '"'), a3 = r3[o3 = c3[n3]], S(e3, t3, o3, false, false) && (e3.dump.length > 1024 && (s2 += "? "), s2 += e3.dump + (e3.condenseFlow ? '"' : "") + ":" + (e3.condenseFlow ? "" : " "), S(e3, t3, a3, false, false) && (u3 += s2 += e3.dump));
                e3.tag = l3, e3.dump = "{" + u3 + "}";
              }(e2, t2, e2.dump), c2 && (e2.dump = "&ref_" + l2 + " " + e2.dump));
            else if (u2 === "[object Array]") {
              var p2 = e2.noArrayIndent && t2 > 0 ? t2 - 1 : t2;
              n2 && e2.dump.length !== 0 ? (!function(e3, t3, r3, n3) {
                var i2, o3, a3 = "", s2 = e3.tag;
                for (i2 = 0, o3 = r3.length; i2 < o3; i2 += 1)
                  S(e3, t3 + 1, r3[i2], true, true) && (n3 && i2 === 0 || (a3 += d(e3, t3)), e3.dump && e3.dump.charCodeAt(0) === 10 ? a3 += "-" : a3 += "- ", a3 += e3.dump);
                e3.tag = s2, e3.dump = a3 || "[]";
              }(e2, p2, e2.dump, o2), c2 && (e2.dump = "&ref_" + l2 + e2.dump)) : (!function(e3, t3, r3) {
                var n3, i2, o3 = "", a3 = e3.tag;
                for (n3 = 0, i2 = r3.length; n3 < i2; n3 += 1)
                  S(e3, t3, r3[n3], false, false) && (n3 !== 0 && (o3 += "," + (e3.condenseFlow ? "" : " ")), o3 += e3.dump);
                e3.tag = a3, e3.dump = "[" + o3 + "]";
              }(e2, p2, e2.dump), c2 && (e2.dump = "&ref_" + l2 + " " + e2.dump));
            } else {
              if (u2 !== "[object String]") {
                if (e2.skipInvalid)
                  return false;
                throw new i("unacceptable kind of an object to dump " + u2);
              }
              e2.tag !== "?" && b(e2, e2.dump, t2, a2);
            }
            e2.tag !== null && e2.tag !== "?" && (e2.dump = "!<" + e2.tag + "> " + e2.dump);
          }
          return true;
        }
        function C(e2, t2) {
          var r2, n2, i2 = [], o2 = [];
          for (function e3(t3, r3, n3) {
            var i3, o3, a2;
            if (t3 !== null && typeof t3 == "object")
              if ((o3 = r3.indexOf(t3)) !== -1)
                n3.indexOf(o3) === -1 && n3.push(o3);
              else if (r3.push(t3), Array.isArray(t3))
                for (o3 = 0, a2 = t3.length; o3 < a2; o3 += 1)
                  e3(t3[o3], r3, n3);
              else
                for (i3 = Object.keys(t3), o3 = 0, a2 = i3.length; o3 < a2; o3 += 1)
                  e3(t3[i3[o3]], r3, n3);
          }(e2, i2, o2), r2 = 0, n2 = o2.length; r2 < n2; r2 += 1)
            t2.duplicates.push(i2[o2[r2]]);
          t2.usedDuplicates = new Array(n2);
        }
        function A(e2, t2) {
          var r2 = new p(t2 = t2 || {});
          return r2.noRefs || C(e2, r2), S(r2, 0, e2, true, true) ? r2.dump + "\n" : "";
        }
        e.exports.dump = A, e.exports.safeDump = function(e2, t2) {
          return A(e2, n.extend({ schema: a }, t2));
        };
      }, function(e, t, r) {
        "use strict";
        r(31), r(32), r(33), r(64), r(19), r(65), r(20), r(68), r(92), r(144), r(22), r(94), r(23);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__values || function(e2) {
          var t2 = typeof Symbol == "function" && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
          if (r2)
            return r2.call(e2);
          if (e2 && typeof e2.length == "number")
            return { next: function() {
              return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
            } };
          throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(e2, t2) {
          var r2 = typeof Symbol == "function" && e2[Symbol.iterator];
          if (!r2)
            return e2;
          var n2, i2, o2 = r2.call(e2), a2 = [];
          try {
            for (; (t2 === void 0 || t2-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e3) {
            i2 = { error: e3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t, "__esModule", { value: true });
        var s = r(91), u = r(1), l = r(183), c = r(0), h = r(7), p = r(95), f = r(69), d = r(3), m = r(305), y = r(306), v = r(307), _ = function(e2) {
          function t2(t3, r2) {
            r2 === void 0 && (r2 = false);
            var n2 = e2.call(this) || this;
            return n2._hasDeclaration = false, n2._docTypeName = "", n2._hasDocumentElement = false, n2._currentElementSerialized = false, n2._openTags = [], n2._ended = false, n2._fragment = r2, n2._options = u.applyDefaults(t3 || {}, s.DefaultXMLBuilderCBOptions), n2._builderOptions = { defaultNamespace: n2._options.defaultNamespace, namespaceAlias: n2._options.namespaceAlias }, n2._options.format === "json" ? n2._writer = new y.JSONCBWriter(n2._options) : n2._options.format === "yaml" ? n2._writer = new v.YAMLCBWriter(n2._options) : n2._writer = new m.XMLCBWriter(n2._options), n2._options.data !== void 0 && n2.on("data", n2._options.data), n2._options.end !== void 0 && n2.on("end", n2._options.end), n2._options.error !== void 0 && n2.on("error", n2._options.error), n2._prefixMap = new p.NamespacePrefixMap(), n2._prefixMap.set("xml", h.namespace.XML), n2._prefixIndex = { value: 1 }, n2._push(n2._writer.frontMatter()), n2;
          }
          return i(t2, e2), t2.prototype.ele = function(e3, t3, r2) {
            var n2, i2;
            if (u.isObject(e3) || u.isString(e3) && (/^\s*</.test(e3) || /^\s*[\{\[]/.test(e3) || /^(\s*|(#.*)|(%.*))*---/.test(e3))) {
              var a2 = l.fragment().set(this._options);
              try {
                a2.ele(e3);
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              try {
                for (var s2 = o(a2.node.childNodes), c2 = s2.next(); !c2.done; c2 = s2.next()) {
                  var h2 = c2.value;
                  this._fromNode(h2);
                }
              } catch (e4) {
                n2 = { error: e4 };
              } finally {
                try {
                  c2 && !c2.done && (i2 = s2.return) && i2.call(s2);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              return this;
            }
            if (this._serializeOpenTag(true), !this._fragment && this._hasDocumentElement && this._writer.level === 0)
              return this.emit("error", new Error("Document cannot have multiple document element nodes.")), this;
            try {
              this._currentElement = l.fragment(this._builderOptions).ele(e3, t3, r2);
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._fragment || this._hasDocumentElement || this._docTypeName === "" || this._currentElement.node._qualifiedName === this._docTypeName ? (this._currentElementSerialized = false, this._fragment || (this._hasDocumentElement = true), this) : (this.emit("error", new Error("Document element name does not match DocType declaration name.")), this);
          }, t2.prototype.att = function(e3, t3, r2) {
            if (this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert an attribute node as child of a document node.")), this;
            try {
              this._currentElement.att(e3, t3, r2);
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this;
          }, t2.prototype.com = function(e3) {
            var t3;
            this._serializeOpenTag(true);
            try {
              t3 = l.fragment(this._builderOptions).com(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return !this._options.wellFormed || c.xml_isLegalChar(t3.data) && t3.data.indexOf("--") === -1 && !t3.data.endsWith("-") ? (this._push(this._writer.comment(t3.data)), this) : (this.emit("error", new Error("Comment data contains invalid characters (well-formed required).")), this);
          }, t2.prototype.txt = function(e3) {
            if (!this._fragment && this._currentElement === void 0)
              return this.emit("error", new Error("Cannot insert a text node as child of a document node.")), this;
            var t3;
            this._serializeOpenTag(true);
            try {
              t3 = l.fragment(this._builderOptions).txt(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            if (this._options.wellFormed && !c.xml_isLegalChar(t3.data))
              return this.emit("error", new Error("Text data contains invalid characters (well-formed required).")), this;
            var r2 = t3.data.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            return this._push(this._writer.text(r2)), this;
          }, t2.prototype.ins = function(e3, t3) {
            var r2;
            t3 === void 0 && (t3 = ""), this._serializeOpenTag(true);
            try {
              r2 = l.fragment(this._builderOptions).ins(e3, t3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._options.wellFormed && (r2.target.indexOf(":") !== -1 || /^xml$/i.test(r2.target)) ? (this.emit("error", new Error("Processing instruction target contains invalid characters (well-formed required).")), this) : this._options.wellFormed && !c.xml_isLegalChar(r2.data) ? (this.emit("error", Error("Processing instruction data contains invalid characters (well-formed required).")), this) : (this._push(this._writer.instruction(r2.target, r2.data)), this);
          }, t2.prototype.dat = function(e3) {
            var t3;
            this._serializeOpenTag(true);
            try {
              t3 = l.fragment(this._builderOptions).dat(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._push(this._writer.cdata(t3.data)), this;
          }, t2.prototype.dec = function(e3) {
            return e3 === void 0 && (e3 = { version: "1.0" }), this._fragment ? (this.emit("error", Error("Cannot insert an XML declaration into a document fragment.")), this) : this._hasDeclaration ? (this.emit("error", Error("XML declaration is already inserted.")), this) : (this._push(this._writer.declaration(e3.version || "1.0", e3.encoding, e3.standalone)), this._hasDeclaration = true, this);
          }, t2.prototype.dtd = function(e3) {
            if (this._fragment)
              return this.emit("error", Error("Cannot insert a DocType declaration into a document fragment.")), this;
            if (this._docTypeName !== "")
              return this.emit("error", new Error("DocType declaration is already inserted.")), this;
            if (this._hasDocumentElement)
              return this.emit("error", new Error("Cannot insert DocType declaration after document element.")), this;
            var t3;
            try {
              t3 = l.create().dtd(e3).first().node;
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            return this._options.wellFormed && !c.xml_isPubidChar(t3.publicId) ? (this.emit("error", new Error("DocType public identifier does not match PubidChar construct (well-formed required).")), this) : this._options.wellFormed && (!c.xml_isLegalChar(t3.systemId) || t3.systemId.indexOf('"') !== -1 && t3.systemId.indexOf("'") !== -1) ? (this.emit("error", new Error("DocType system identifier contains invalid characters (well-formed required).")), this) : (this._docTypeName = e3.name, this._push(this._writer.docType(e3.name, t3.publicId, t3.systemId)), this);
          }, t2.prototype.import = function(e3) {
            var t3, r2, n2 = l.fragment().set(this._options);
            try {
              n2.import(e3);
            } catch (e4) {
              return this.emit("error", e4), this;
            }
            try {
              for (var i2 = o(n2.node.childNodes), a2 = i2.next(); !a2.done; a2 = i2.next()) {
                var s2 = a2.value;
                this._fromNode(s2);
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                a2 && !a2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return this;
          }, t2.prototype.up = function() {
            return this._serializeOpenTag(false), this._serializeCloseTag(), this;
          }, t2.prototype.end = function() {
            for (this._serializeOpenTag(false); this._openTags.length > 0; )
              this._serializeCloseTag();
            return this._push(null), this;
          }, t2.prototype._serializeOpenTag = function(e3) {
            if (!this._currentElementSerialized && this._currentElement !== void 0) {
              var r2 = this._currentElement.node;
              if (!this._options.wellFormed || r2.localName.indexOf(":") === -1 && c.xml_isName(r2.localName)) {
                var n2 = "", i2 = false, o2 = this._prefixMap.copy(), a2 = {}, s2 = this._recordNamespaceInformation(r2, o2, a2), u2 = this._openTags.length === 0 ? null : this._openTags[this._openTags.length - 1][1], l2 = r2.namespaceURI;
                if (l2 === null && (l2 = u2), u2 === l2)
                  s2 !== null && (i2 = true), n2 = l2 === h.namespace.XML ? "xml:" + r2.localName : r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2));
                else {
                  var p2 = r2.prefix, f2 = null;
                  if (p2 === null && l2 === s2 || (f2 = o2.get(p2, l2)), p2 === "xmlns") {
                    if (this._options.wellFormed)
                      return void this.emit("error", new Error("An element cannot have the 'xmlns' prefix (well-formed required)."));
                    f2 = p2;
                  }
                  f2 !== null ? (n2 = f2 + ":" + r2.localName, s2 !== null && s2 !== h.namespace.XML && (u2 = s2 || null), this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2))) : p2 !== null ? (p2 in a2 && (p2 = this._generatePrefix(l2, o2, this._prefixIndex)), o2.set(p2, l2), n2 += p2 + ":" + r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns:" + p2, this._serializeAttributeValue(l2, this._options.wellFormed))), s2 !== null && (u2 = s2 || null)) : s2 === null || s2 !== null && s2 !== l2 ? (i2 = true, n2 += r2.localName, u2 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns", this._serializeAttributeValue(l2, this._options.wellFormed)))) : (n2 += r2.localName, u2 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)));
                }
                this._serializeAttributes(r2, o2, this._prefixIndex, a2, i2, this._options.wellFormed);
                var d2 = l2 === h.namespace.HTML;
                d2 && !e3 && t2._VoidElementNames.has(r2.localName) ? (this._push(this._writer.openTagEnd(n2, true, true)), this._writer.endElement(n2)) : d2 || e3 ? this._push(this._writer.openTagEnd(n2, false, false)) : (this._push(this._writer.openTagEnd(n2, true, false)), this._writer.endElement(n2)), this._currentElementSerialized = true, this._openTags.push([n2, u2, this._prefixMap, e3]), this._isPrefixMapModified(this._prefixMap, o2) && (this._prefixMap = o2), this._writer.level++;
              } else
                this.emit("error", new Error("Node local name contains invalid characters (well-formed required)."));
            }
          }, t2.prototype._serializeCloseTag = function() {
            this._writer.level--;
            var e3 = this._openTags.pop();
            if (e3 !== void 0) {
              var t3 = a(e3, 4), r2 = t3[0], n2 = (t3[1], t3[2]), i2 = t3[3];
              this._prefixMap = n2, i2 && (this._push(this._writer.closeTag(r2)), this._writer.endElement(r2));
            } else
              this.emit("error", new Error("Last element is undefined."));
          }, t2.prototype._push = function(e3) {
            e3 === null ? (this._ended = true, this.emit("end")) : this._ended ? this.emit("error", new Error("Cannot push to ended stream.")) : e3.length !== 0 && (this._writer.hasData = true, this.emit("data", e3, this._writer.level));
          }, t2.prototype._fromNode = function(e3) {
            var t3, r2, n2, i2;
            if (d.Guard.isElementNode(e3)) {
              var a2 = e3.prefix ? e3.prefix + ":" + e3.localName : e3.localName;
              e3.namespaceURI !== null ? this.ele(e3.namespaceURI, a2) : this.ele(a2);
              try {
                for (var s2 = o(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                  var l2 = u2.value, c2 = l2.prefix ? l2.prefix + ":" + l2.localName : l2.localName;
                  l2.namespaceURI !== null ? this.att(l2.namespaceURI, c2, l2.value) : this.att(c2, l2.value);
                }
              } catch (e4) {
                t3 = { error: e4 };
              } finally {
                try {
                  u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              try {
                for (var h2 = o(e3.childNodes), p2 = h2.next(); !p2.done; p2 = h2.next()) {
                  var f2 = p2.value;
                  this._fromNode(f2);
                }
              } catch (e4) {
                n2 = { error: e4 };
              } finally {
                try {
                  p2 && !p2.done && (i2 = h2.return) && i2.call(h2);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              this.up();
            } else
              d.Guard.isExclusiveTextNode(e3) && e3.data ? this.txt(e3.data) : d.Guard.isCommentNode(e3) ? this.com(e3.data) : d.Guard.isCDATASectionNode(e3) ? this.dat(e3.data) : d.Guard.isProcessingInstructionNode(e3) && this.ins(e3.target, e3.data);
          }, t2.prototype._serializeAttributes = function(e3, t3, r2, n2, i2, a2) {
            var s2, u2, l2 = a2 ? new f.LocalNameSet() : void 0;
            try {
              for (var p2 = o(e3.attributes), d2 = p2.next(); !d2.done; d2 = p2.next()) {
                var m2 = d2.value;
                if (a2 || i2 || m2.namespaceURI !== null) {
                  if (a2 && l2 && l2.has(m2.namespaceURI, m2.localName))
                    return void this.emit("error", new Error("Element contains duplicate attributes (well-formed required)."));
                  a2 && l2 && l2.set(m2.namespaceURI, m2.localName);
                  var y2 = m2.namespaceURI, v2 = null;
                  if (y2 !== null)
                    if (v2 = t3.get(m2.prefix, y2), y2 === h.namespace.XMLNS) {
                      if (m2.value === h.namespace.XML || m2.prefix === null && i2 || m2.prefix !== null && (!(m2.localName in n2) || n2[m2.localName] !== m2.value) && t3.has(m2.localName, m2.value))
                        continue;
                      if (a2 && m2.value === h.namespace.XMLNS)
                        return void this.emit("error", new Error("XMLNS namespace is reserved (well-formed required)."));
                      if (a2 && m2.value === "")
                        return void this.emit("error", new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required)."));
                      m2.prefix === "xmlns" && (v2 = "xmlns");
                    } else
                      v2 === null && (v2 = m2.prefix === null || t3.hasPrefix(m2.prefix) && !t3.has(m2.prefix, y2) ? this._generatePrefix(y2, t3, r2) : m2.prefix, this._push(this._writer.attribute("xmlns:" + v2, this._serializeAttributeValue(y2, this._options.wellFormed))));
                  if (a2 && (m2.localName.indexOf(":") !== -1 || !c.xml_isName(m2.localName) || m2.localName === "xmlns" && y2 === null))
                    return void this.emit("error", new Error("Attribute local name contains invalid characters (well-formed required)."));
                  this._push(this._writer.attribute((v2 !== null ? v2 + ":" : "") + m2.localName, this._serializeAttributeValue(m2.value, this._options.wellFormed)));
                } else
                  this._push(this._writer.attribute(m2.localName, this._serializeAttributeValue(m2.value, this._options.wellFormed)));
              }
            } catch (e4) {
              s2 = { error: e4 };
            } finally {
              try {
                d2 && !d2.done && (u2 = p2.return) && u2.call(p2);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }, t2.prototype._serializeAttributeValue = function(e3, t3) {
            return t3 && e3 !== null && !c.xml_isLegalChar(e3) ? (this.emit("error", new Error("Invalid characters in attribute value.")), "") : e3 === null ? "" : e3.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
          }, t2.prototype._recordNamespaceInformation = function(e3, t3, r2) {
            var n2, i2, a2 = null;
            try {
              for (var s2 = o(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var l2 = u2.value, c2 = l2.namespaceURI, p2 = l2.prefix;
                if (c2 === h.namespace.XMLNS) {
                  if (p2 === null) {
                    a2 = l2.value;
                    continue;
                  }
                  var f2 = l2.localName, d2 = l2.value;
                  if (d2 === h.namespace.XML)
                    continue;
                  if (d2 === "" && (d2 = null), t3.has(f2, d2))
                    continue;
                  t3.set(f2, d2), r2[f2] = d2 || "";
                }
              }
            } catch (e4) {
              n2 = { error: e4 };
            } finally {
              try {
                u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return a2;
          }, t2.prototype._generatePrefix = function(e3, t3, r2) {
            var n2 = "ns" + r2.value;
            return r2.value++, t3.set(n2, e3), n2;
          }, t2.prototype._isPrefixMapModified = function(e3, t3) {
            var r2 = e3._items, n2 = t3._items, i2 = e3._nullItems, o2 = t3._nullItems;
            for (var a2 in n2) {
              var s2 = r2[a2];
              if (s2 === void 0)
                return true;
              var u2 = n2[a2];
              if (s2.length !== u2.length)
                return true;
              for (var l2 = 0; l2 < s2.length; l2++)
                if (s2[l2] !== u2[l2])
                  return true;
            }
            if (i2.length !== o2.length)
              return true;
            for (l2 = 0; l2 < i2.length; l2++)
              if (i2[l2] !== o2[l2])
                return true;
            return false;
          }, t2._VoidElementNames = new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), t2;
        }(r(308).EventEmitter);
        t.XMLBuilderCBImpl = _;
      }, function(e, t, r) {
        "use strict";
        r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this, t3) || this;
            return r2._lineLength = 0, r2;
          }
          return i(t2, e2), t2.prototype.frontMatter = function() {
            return "";
          }, t2.prototype.declaration = function(e3, t3, r2) {
            var n2 = this._beginLine() + "<?xml";
            return n2 += ' version="' + e3 + '"', t3 !== void 0 && (n2 += ' encoding="' + t3 + '"'), r2 !== void 0 && (n2 += ' standalone="' + (r2 ? "yes" : "no") + '"'), n2 += "?>";
          }, t2.prototype.docType = function(e3, t3, r2) {
            var n2 = this._beginLine();
            return n2 += t3 && r2 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '" "' + r2 + '">' : t3 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '">' : r2 ? "<!DOCTYPE " + e3 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e3 + ">";
          }, t2.prototype.comment = function(e3) {
            return this._beginLine() + "<!--" + e3 + "-->";
          }, t2.prototype.text = function(e3) {
            return this._beginLine() + e3;
          }, t2.prototype.instruction = function(e3, t3) {
            return t3 ? this._beginLine() + "<?" + e3 + " " + t3 + "?>" : this._beginLine() + "<?" + e3 + "?>";
          }, t2.prototype.cdata = function(e3) {
            return this._beginLine() + "<![CDATA[" + e3 + "]]>";
          }, t2.prototype.openTagBegin = function(e3) {
            return this._lineLength += 1 + e3.length, this._beginLine() + "<" + e3;
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            return r2 ? " />" : t3 ? this._writerOptions.allowEmptyTags ? "></" + e3 + ">" : this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">";
          }, t2.prototype.closeTag = function(e3) {
            return this._beginLine() + "</" + e3 + ">";
          }, t2.prototype.attribute = function(e3, t3) {
            var r2 = e3 + '="' + t3 + '"';
            return this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._lineLength + 1 + r2.length > this._writerOptions.width ? (r2 = this._beginLine() + this._indent(1) + r2, this._lineLength = r2.length, r2) : (this._lineLength += 1 + r2.length, " " + r2);
          }, t2.prototype.beginElement = function(e3) {
          }, t2.prototype.endElement = function(e3) {
          }, t2.prototype._beginLine = function() {
            if (this._writerOptions.prettyPrint) {
              var e3 = (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level);
              return this._lineLength = e3.length, e3;
            }
            return "";
          }, t2.prototype._indent = function(e3) {
            return e3 <= 0 ? "" : this._writerOptions.indent.repeat(e3);
          }, t2;
        }(r(114).BaseCBWriter);
        t.XMLCBWriter = o;
      }, function(e, t, r) {
        "use strict";
        r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this, t3) || this;
            return r2._hasChildren = [], r2._additionalLevel = 0, r2;
          }
          return i(t2, e2), t2.prototype.frontMatter = function() {
            return "";
          }, t2.prototype.declaration = function(e3, t3, r2) {
            return "";
          }, t2.prototype.docType = function(e3, t3, r2) {
            return "";
          }, t2.prototype.comment = function(e3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.comment) + this._sep() + this._val(e3) + this._sep() + "}";
          }, t2.prototype.text = function(e3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.text) + this._sep() + this._val(e3) + this._sep() + "}";
          }, t2.prototype.instruction = function(e3, t3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.ins) + this._sep() + this._val(t3 ? e3 + " " + t3 : e3) + this._sep() + "}";
          }, t2.prototype.cdata = function(e3) {
            return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.cdata) + this._sep() + this._val(e3) + this._sep() + "}";
          }, t2.prototype.attribute = function(e3, t3) {
            return this._comma() + this._beginLine(1) + "{" + this._sep() + this._key(this._builderOptions.convert.att + e3) + this._sep() + this._val(t3) + this._sep() + "}";
          }, t2.prototype.openTagBegin = function(e3) {
            var t3 = this._comma() + this._beginLine() + "{" + this._sep() + this._key(e3) + this._sep() + "{";
            return this._additionalLevel++, this.hasData = true, t3 += this._beginLine() + this._key(this._builderOptions.convert.text) + this._sep() + "[", this._hasChildren.push(false), t3;
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            if (t3) {
              var n2 = this._sep() + "]";
              return this._additionalLevel--, n2 += this._beginLine() + "}" + this._sep() + "}";
            }
            return "";
          }, t2.prototype.closeTag = function(e3) {
            var t3 = this._beginLine() + "]";
            return this._additionalLevel--, t3 += this._beginLine() + "}" + this._sep() + "}";
          }, t2.prototype.beginElement = function(e3) {
          }, t2.prototype.endElement = function(e3) {
            this._hasChildren.pop();
          }, t2.prototype._beginLine = function(e3) {
            return e3 === void 0 && (e3 = 0), this._writerOptions.prettyPrint ? (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level + e3) : "";
          }, t2.prototype._indent = function(e3) {
            return e3 + this._additionalLevel <= 0 ? "" : this._writerOptions.indent.repeat(e3 + this._additionalLevel);
          }, t2.prototype._comma = function() {
            var e3 = this._hasChildren[this._hasChildren.length - 1] ? "," : "";
            return this._hasChildren.length > 0 && (this._hasChildren[this._hasChildren.length - 1] = true), e3;
          }, t2.prototype._sep = function() {
            return this._writerOptions.prettyPrint ? " " : "";
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2;
        }(r(114).BaseCBWriter);
        t.JSONCBWriter = o;
      }, function(e, t, r) {
        "use strict";
        r(74);
        var n, i = this && this.__extends || (n = function(e2, t2) {
          return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
            e3.__proto__ = t3;
          } || function(e3, t3) {
            for (var r2 in t3)
              t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
          })(e2, t2);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(t, "__esModule", { value: true });
        var o = function(e2) {
          function t2(t3) {
            var r2 = e2.call(this, t3) || this;
            if (r2._rootWritten = false, r2._additionalLevel = 0, t3.indent.length < 2)
              throw new Error("YAML indententation string must be at least two characters long.");
            if (t3.offset < 0)
              throw new Error("YAML offset should be zero or a positive number.");
            return r2;
          }
          return i(t2, e2), t2.prototype.frontMatter = function() {
            return this._beginLine() + "---";
          }, t2.prototype.declaration = function(e3, t3, r2) {
            return "";
          }, t2.prototype.docType = function(e3, t3, r2) {
            return "";
          }, t2.prototype.comment = function(e3) {
            return this._beginLine() + this._key(this._builderOptions.convert.comment) + " " + this._val(e3);
          }, t2.prototype.text = function(e3) {
            return this._beginLine() + this._key(this._builderOptions.convert.text) + " " + this._val(e3);
          }, t2.prototype.instruction = function(e3, t3) {
            return this._beginLine() + this._key(this._builderOptions.convert.ins) + " " + this._val(t3 ? e3 + " " + t3 : e3);
          }, t2.prototype.cdata = function(e3) {
            return this._beginLine() + this._key(this._builderOptions.convert.cdata) + " " + this._val(e3);
          }, t2.prototype.attribute = function(e3, t3) {
            this._additionalLevel++;
            var r2 = this._beginLine() + this._key(this._builderOptions.convert.att + e3) + " " + this._val(t3);
            return this._additionalLevel--, r2;
          }, t2.prototype.openTagBegin = function(e3) {
            var t3 = this._beginLine() + this._key(e3);
            return this._rootWritten || (this._rootWritten = true), this.hasData = true, this._additionalLevel++, t3 += this._beginLine(true) + this._key(this._builderOptions.convert.text);
          }, t2.prototype.openTagEnd = function(e3, t3, r2) {
            return t3 ? " " + this._val("") : "";
          }, t2.prototype.closeTag = function(e3) {
            return this._additionalLevel--, "";
          }, t2.prototype.beginElement = function(e3) {
          }, t2.prototype.endElement = function(e3) {
          }, t2.prototype._beginLine = function(e3) {
            return e3 === void 0 && (e3 = false), (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level, e3);
          }, t2.prototype._indent = function(e3, t3) {
            if (e3 + this._additionalLevel <= 0)
              return "";
            var r2 = this._writerOptions.indent.repeat(e3 + this._additionalLevel);
            return !t3 && this._rootWritten ? r2.substr(0, r2.length - 2) + "-" + r2.substr(-1, 1) : r2;
          }, t2.prototype._key = function(e3) {
            return '"' + e3 + '":';
          }, t2.prototype._val = function(e3) {
            return JSON.stringify(e3);
          }, t2;
        }(r(114).BaseCBWriter);
        t.YAMLCBWriter = o;
      }, function(e, t, r) {
        "use strict";
        var n, i = typeof Reflect == "object" ? Reflect : null, o = i && typeof i.apply == "function" ? i.apply : function(e2, t2, r2) {
          return Function.prototype.apply.call(e2, t2, r2);
        };
        n = i && typeof i.ownKeys == "function" ? i.ownKeys : Object.getOwnPropertySymbols ? function(e2) {
          return Object.getOwnPropertyNames(e2).concat(Object.getOwnPropertySymbols(e2));
        } : function(e2) {
          return Object.getOwnPropertyNames(e2);
        };
        var a = Number.isNaN || function(e2) {
          return e2 != e2;
        };
        function s() {
          s.init.call(this);
        }
        e.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._eventsCount = 0, s.prototype._maxListeners = void 0;
        var u = 10;
        function l(e2) {
          if (typeof e2 != "function")
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e2);
        }
        function c(e2) {
          return e2._maxListeners === void 0 ? s.defaultMaxListeners : e2._maxListeners;
        }
        function h(e2, t2, r2, n2) {
          var i2, o2, a2, s2;
          if (l(r2), (o2 = e2._events) === void 0 ? (o2 = e2._events = Object.create(null), e2._eventsCount = 0) : (o2.newListener !== void 0 && (e2.emit("newListener", t2, r2.listener ? r2.listener : r2), o2 = e2._events), a2 = o2[t2]), a2 === void 0)
            a2 = o2[t2] = r2, ++e2._eventsCount;
          else if (typeof a2 == "function" ? a2 = o2[t2] = n2 ? [r2, a2] : [a2, r2] : n2 ? a2.unshift(r2) : a2.push(r2), (i2 = c(e2)) > 0 && a2.length > i2 && !a2.warned) {
            a2.warned = true;
            var u2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(t2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u2.name = "MaxListenersExceededWarning", u2.emitter = e2, u2.type = t2, u2.count = a2.length, s2 = u2, console && console.warn && console.warn(s2);
          }
          return e2;
        }
        function p() {
          if (!this.fired)
            return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
        }
        function f(e2, t2, r2) {
          var n2 = { fired: false, wrapFn: void 0, target: e2, type: t2, listener: r2 }, i2 = p.bind(n2);
          return i2.listener = r2, n2.wrapFn = i2, i2;
        }
        function d(e2, t2, r2) {
          var n2 = e2._events;
          if (n2 === void 0)
            return [];
          var i2 = n2[t2];
          return i2 === void 0 ? [] : typeof i2 == "function" ? r2 ? [i2.listener || i2] : [i2] : r2 ? function(e3) {
            for (var t3 = new Array(e3.length), r3 = 0; r3 < t3.length; ++r3)
              t3[r3] = e3[r3].listener || e3[r3];
            return t3;
          }(i2) : y(i2, i2.length);
        }
        function m(e2) {
          var t2 = this._events;
          if (t2 !== void 0) {
            var r2 = t2[e2];
            if (typeof r2 == "function")
              return 1;
            if (r2 !== void 0)
              return r2.length;
          }
          return 0;
        }
        function y(e2, t2) {
          for (var r2 = new Array(t2), n2 = 0; n2 < t2; ++n2)
            r2[n2] = e2[n2];
          return r2;
        }
        Object.defineProperty(s, "defaultMaxListeners", { enumerable: true, get: function() {
          return u;
        }, set: function(e2) {
          if (typeof e2 != "number" || e2 < 0 || a(e2))
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e2 + ".");
          u = e2;
        } }), s.init = function() {
          this._events !== void 0 && this._events !== Object.getPrototypeOf(this)._events || (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }, s.prototype.setMaxListeners = function(e2) {
          if (typeof e2 != "number" || e2 < 0 || a(e2))
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e2 + ".");
          return this._maxListeners = e2, this;
        }, s.prototype.getMaxListeners = function() {
          return c(this);
        }, s.prototype.emit = function(e2) {
          for (var t2 = [], r2 = 1; r2 < arguments.length; r2++)
            t2.push(arguments[r2]);
          var n2 = e2 === "error", i2 = this._events;
          if (i2 !== void 0)
            n2 = n2 && i2.error === void 0;
          else if (!n2)
            return false;
          if (n2) {
            var a2;
            if (t2.length > 0 && (a2 = t2[0]), a2 instanceof Error)
              throw a2;
            var s2 = new Error("Unhandled error." + (a2 ? " (" + a2.message + ")" : ""));
            throw s2.context = a2, s2;
          }
          var u2 = i2[e2];
          if (u2 === void 0)
            return false;
          if (typeof u2 == "function")
            o(u2, this, t2);
          else {
            var l2 = u2.length, c2 = y(u2, l2);
            for (r2 = 0; r2 < l2; ++r2)
              o(c2[r2], this, t2);
          }
          return true;
        }, s.prototype.addListener = function(e2, t2) {
          return h(this, e2, t2, false);
        }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function(e2, t2) {
          return h(this, e2, t2, true);
        }, s.prototype.once = function(e2, t2) {
          return l(t2), this.on(e2, f(this, e2, t2)), this;
        }, s.prototype.prependOnceListener = function(e2, t2) {
          return l(t2), this.prependListener(e2, f(this, e2, t2)), this;
        }, s.prototype.removeListener = function(e2, t2) {
          var r2, n2, i2, o2, a2;
          if (l(t2), (n2 = this._events) === void 0)
            return this;
          if ((r2 = n2[e2]) === void 0)
            return this;
          if (r2 === t2 || r2.listener === t2)
            --this._eventsCount == 0 ? this._events = Object.create(null) : (delete n2[e2], n2.removeListener && this.emit("removeListener", e2, r2.listener || t2));
          else if (typeof r2 != "function") {
            for (i2 = -1, o2 = r2.length - 1; o2 >= 0; o2--)
              if (r2[o2] === t2 || r2[o2].listener === t2) {
                a2 = r2[o2].listener, i2 = o2;
                break;
              }
            if (i2 < 0)
              return this;
            i2 === 0 ? r2.shift() : function(e3, t3) {
              for (; t3 + 1 < e3.length; t3++)
                e3[t3] = e3[t3 + 1];
              e3.pop();
            }(r2, i2), r2.length === 1 && (n2[e2] = r2[0]), n2.removeListener !== void 0 && this.emit("removeListener", e2, a2 || t2);
          }
          return this;
        }, s.prototype.off = s.prototype.removeListener, s.prototype.removeAllListeners = function(e2) {
          var t2, r2, n2;
          if ((r2 = this._events) === void 0)
            return this;
          if (r2.removeListener === void 0)
            return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : r2[e2] !== void 0 && (--this._eventsCount == 0 ? this._events = Object.create(null) : delete r2[e2]), this;
          if (arguments.length === 0) {
            var i2, o2 = Object.keys(r2);
            for (n2 = 0; n2 < o2.length; ++n2)
              (i2 = o2[n2]) !== "removeListener" && this.removeAllListeners(i2);
            return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
          }
          if (typeof (t2 = r2[e2]) == "function")
            this.removeListener(e2, t2);
          else if (t2 !== void 0)
            for (n2 = t2.length - 1; n2 >= 0; n2--)
              this.removeListener(e2, t2[n2]);
          return this;
        }, s.prototype.listeners = function(e2) {
          return d(this, e2, true);
        }, s.prototype.rawListeners = function(e2) {
          return d(this, e2, false);
        }, s.listenerCount = function(e2, t2) {
          return typeof e2.listenerCount == "function" ? e2.listenerCount(t2) : m.call(e2, t2);
        }, s.prototype.listenerCount = m, s.prototype.eventNames = function() {
          return this._eventsCount > 0 ? n(this._events) : [];
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var n = r(77);
        t.createCB = function(e2) {
          return new n.XMLBuilderCBImpl(e2);
        }, t.fragmentCB = function(e2) {
          return new n.XMLBuilderCBImpl(e2, true);
        };
      }]);
    });
  }
});

// src/main.ts
__export(exports, {
  default: () => WordpressPlugin
});
var import_obsidian8 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));

// src/wp-api.ts
var PostStatus;
(function(PostStatus2) {
  PostStatus2["Draft"] = "draft";
  PostStatus2["Publish"] = "publish";
})(PostStatus || (PostStatus = {}));

// src/settings.ts
var ApiType;
(function(ApiType2) {
  ApiType2["XML_RPC"] = "xml-rpc";
  ApiType2["RestAPI_miniOrange"] = "miniOrange";
})(ApiType || (ApiType = {}));
var DEFAULT_SETTINGS = {
  apiType: ApiType.XML_RPC,
  endpoint: "",
  saveUserName: false,
  showRibbonIcon: false,
  defaultPostStatus: PostStatus.Draft
};
var WordpressSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for WordPress plugin" });
    new import_obsidian.Setting(containerEl).setName("WordPress URL").setDesc("Full path of installed WordPress, for example, https://example.com/wordpress").addText((text) => text.setPlaceholder("https://example.com/wordpress").setValue(this.plugin.settings.endpoint).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.endpoint = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("API Type").setDesc("Select which API you want to use.").addDropdown((dropdown) => {
      dropdown.addOption(ApiType.XML_RPC, "XML-RPC").addOption(ApiType.RestAPI_miniOrange, "REST API Authentication by miniOrange").setValue(this.plugin.settings.apiType).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.apiType = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Show icon in sidebar").setDesc(`If enabled, a button which opens publish panel will be added to the Obsidian sidebar.
Changes only take effect on reload.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showRibbonIcon = value;
      yield this.plugin.saveSettings();
      this.display();
      this.plugin.updateRibbonIcon();
    })));
    new import_obsidian.Setting(containerEl).setName("Default Post Status").setDesc("Post status which will be published to WordPress.").addDropdown((dropdown) => {
      dropdown.addOption(PostStatus.Draft, "draft").addOption(PostStatus.Publish, "publish").setValue(this.plugin.settings.defaultPostStatus).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.defaultPostStatus = value;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
  }
};

// src/icons.ts
var import_obsidian2 = __toModule(require("obsidian"));
var icons = {
  "wp-logo": `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <g fill="currentColor">
    <path d="M 7.109375 50 C 7.109375 66.976562 16.976562 81.648438 31.28125 88.601562 L 10.820312 32.542969 C 8.441406 37.878906 7.109375 43.78125 7.109375 50 Z M 7.109375 50 "/>
    <path d="M 78.957031 47.835938 C 78.957031 42.535156 77.054688 38.863281 75.421875 36.003906 C 73.246094 32.472656 71.207031 29.480469 71.207031 25.945312 C 71.207031 22.003906 74.199219 18.332031 78.410156 18.332031 C 78.601562 18.332031 78.78125 18.355469 78.96875 18.367188 C 71.335938 11.375 61.167969 7.105469 50 7.105469 C 35.015625 7.105469 21.832031 14.796875 14.164062 26.441406 C 15.167969 26.472656 16.117188 26.492188 16.921875 26.492188 C 21.410156 26.492188 28.355469 25.949219 28.355469 25.949219 C 30.667969 25.8125 30.941406 29.207031 28.628906 29.480469 C 28.628906 29.480469 26.304688 29.753906 23.722656 29.890625 L 39.339844 76.351562 L 48.726562 48.199219 L 42.042969 29.886719 C 39.734375 29.753906 37.546875 29.480469 37.546875 29.480469 C 35.234375 29.34375 35.507812 25.808594 37.816406 25.945312 C 37.816406 25.945312 44.902344 26.492188 49.117188 26.492188 C 53.601562 26.492188 60.546875 25.945312 60.546875 25.945312 C 62.859375 25.808594 63.132812 29.207031 60.824219 29.480469 C 60.824219 29.480469 58.492188 29.753906 55.914062 29.886719 L 71.414062 75.996094 L 75.691406 61.699219 C 77.546875 55.765625 78.957031 51.507812 78.957031 47.835938 Z M 78.957031 47.835938 "/>
    <path d="M 50.753906 53.75 L 37.882812 91.148438 C 41.726562 92.277344 45.789062 92.894531 50 92.894531 C 54.996094 92.894531 59.785156 92.03125 64.246094 90.464844 C 64.128906 90.28125 64.027344 90.085938 63.941406 89.871094 Z M 50.753906 53.75 "/>
    <path d="M 87.636719 29.417969 C 87.824219 30.785156 87.925781 32.253906 87.925781 33.832031 C 87.925781 38.183594 87.113281 43.074219 84.667969 49.195312 L 71.5625 87.074219 C 84.316406 79.640625 92.894531 65.824219 92.894531 50 C 92.894531 42.542969 90.988281 35.53125 87.636719 29.417969 Z M 87.636719 29.417969 "/>
    <path d="M 50 0 C 22.433594 0 0 22.429688 0 50 C 0 77.570312 22.433594 100 50 100 C 77.570312 100 100.003906 77.570312 100.003906 50 C 100.003906 22.429688 77.570312 0 50 0 Z M 50 97.707031 C 23.695312 97.707031 2.292969 76.304688 2.292969 50 C 2.292969 23.695312 23.695312 2.292969 50 2.292969 C 76.304688 2.292969 97.707031 23.695312 97.707031 50 C 97.707031 76.304688 76.304688 97.707031 50 97.707031 Z M 50 97.707031 "/>
  </g>
</svg>`
};
var addIcons = () => {
  Object.keys(icons).forEach((key) => {
    (0, import_obsidian2.addIcon)(key, icons[key]);
  });
};

// src/xmlrpc-client.ts
var import_obsidian3 = __toModule(require("obsidian"));
var import_xmlbuilder2 = __toModule(require_xmlbuilder2_min());

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array, iteratee) {
  var index = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
var arrayMap_default = arrayMap;

// node_modules/lodash-es/isArray.js
var isArray = Array.isArray;
var isArray_default = isArray;

// node_modules/lodash-es/_baseToString.js
var INFINITY = 1 / 0;
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_default(value)) {
    return arrayMap_default(value, baseToString) + "";
  }
  if (isSymbol_default(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
var baseToString_default = baseToString;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/toFinite.js
var INFINITY2 = 1 / 0;
var MAX_INTEGER = 17976931348623157e292;
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_default(value);
  if (value === INFINITY2 || value === -INFINITY2) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}
var toFinite_default = toFinite;

// node_modules/lodash-es/toInteger.js
function toInteger(value) {
  var result = toFinite_default(value), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_default = toInteger;

// node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;

// node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto2 = Function.prototype;
var objectProto3 = Object.prototype;
var funcToString2 = funcProto2.toString;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value)) {
    return false;
  }
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/lodash-es/_nodeUtil.js
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var freeProcess = moduleExports && freeGlobal_default.process;
var nodeUtil = function() {
  try {
    var types = freeModule && freeModule.require && freeModule.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e) {
  }
}();
var nodeUtil_default = nodeUtil;

// node_modules/lodash-es/_isKey.js
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
var reIsPlainProp = /^\w*$/;
function isKey(value, object) {
  if (isArray_default(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol_default(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
var isKey_default = isKey;

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var hashDelete_default = hashDelete;

// node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto4 = Object.prototype;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty3.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/lodash-es/_hashHas.js
var objectProto5 = Object.prototype;
var hasOwnProperty4 = objectProto5.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty4.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
  return this;
}
var hashSet_default = hashSet;

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_default(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var listCacheSet_default = listCacheSet;

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/lodash-es/memoize.js
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
memoize.Cache = MapCache_default;
var memoize_default = memoize;

// node_modules/lodash-es/_memoizeCapped.js
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize_default(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var memoizeCapped_default = memoizeCapped;

// node_modules/lodash-es/_stringToPath.js
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match2, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
  });
  return result;
});
var stringToPath_default = stringToPath;

// node_modules/lodash-es/toString.js
function toString(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString;

// node_modules/lodash-es/_castPath.js
function castPath(value, object) {
  if (isArray_default(value)) {
    return value;
  }
  return isKey_default(value, object) ? [value] : stringToPath_default(toString_default(value));
}
var castPath_default = castPath;

// node_modules/lodash-es/_toKey.js
var INFINITY3 = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_default(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
}
var toKey_default = toKey;

// node_modules/lodash-es/_baseGet.js
function baseGet(object, path) {
  path = castPath_default(path, object);
  var index = 0, length = path.length;
  while (object != null && index < length) {
    object = object[toKey_default(path[index++])];
  }
  return index && index == length ? object : void 0;
}
var baseGet_default = baseGet;

// node_modules/lodash-es/get.js
function get(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet_default(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_default = get;

// node_modules/lodash-es/isBoolean.js
var boolTag = "[object Boolean]";
function isBoolean(value) {
  return value === true || value === false || isObjectLike_default(value) && baseGetTag_default(value) == boolTag;
}
var isBoolean_default = isBoolean;

// node_modules/lodash-es/_baseIsDate.js
var dateTag = "[object Date]";
function baseIsDate(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == dateTag;
}
var baseIsDate_default = baseIsDate;

// node_modules/lodash-es/isDate.js
var nodeIsDate = nodeUtil_default && nodeUtil_default.isDate;
var isDate = nodeIsDate ? baseUnary_default(nodeIsDate) : baseIsDate_default;
var isDate_default = isDate;

// node_modules/lodash-es/isInteger.js
function isInteger(value) {
  return typeof value == "number" && value == toInteger_default(value);
}
var isInteger_default = isInteger;

// node_modules/lodash-es/isNumber.js
var numberTag = "[object Number]";
function isNumber(value) {
  return typeof value == "number" || isObjectLike_default(value) && baseGetTag_default(value) == numberTag;
}
var isNumber_default = isNumber;

// node_modules/lodash-es/isSafeInteger.js
var MAX_SAFE_INTEGER = 9007199254740991;
function isSafeInteger(value) {
  return isInteger_default(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
}
var isSafeInteger_default = isSafeInteger;

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger2(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger2(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/isDate/index.js
function isDate2(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate2(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function(token, count, options2) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options2 !== null && options2 !== void 0 && options2.addSuffix) {
    if (options2.comparison && options2.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options2.width ? String(options2.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, dirtyOptions) {
    var options2 = dirtyOptions || {};
    var context = options2.context ? String(options2.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options2.width ? String(options2.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options2.width ? String(options2.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options2.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options2.valueCallback ? options2.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger2(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options2) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options2).getTime() - startOfUTCWeekYear(date, options2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  y: function(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  G: function(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  y: function(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  Y: function(date, token, localize2, options2) {
    var signedWeekYear = getUTCWeekYear(date, options2);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function(date, token, localize2, options2) {
    var week = getUTCWeek(date, options2);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  D: function(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function(date, token, localize2, options2) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options2.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  H: function(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  K: function(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  s: function(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  S: function(date, token) {
    return lightFormatters_default.S(date, token);
  },
  X: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function(date, token, _localize, options2) {
    var originalDate = options2._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
function dateLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
}
function timeLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
}
function dateTimeLongFormatter(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
}
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale || en_US_default;
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong, formatterOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!options2.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      if (!options2.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  dirtyObject = dirtyObject || {};
  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }
  return target;
}

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger2(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger2(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger2(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options2) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger2(dirtyWeek);
  var diff = getUTCWeek(date, options2) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var MILLISECONDS_IN_HOUR = 36e5;
var MILLISECONDS_IN_MINUTE = 6e4;
var MILLISECONDS_IN_SECOND = 1e3;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  date: /^(3[0-1]|[0-2]?\d)/,
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  week: /^(5[0-3]|[0-4]?\d)/,
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  hour11h: /^(1[0-1]|0?\d)/,
  hour12h: /^(1[0-2]|0?\d)/,
  minute: /^[0-5]?\d/,
  second: /^[0-5]?\d/,
  singleDigit: /^\d/,
  twoDigits: /^\d{1,2}/,
  threeDigits: /^\d{1,3}/,
  fourDigits: /^\d{1,4}/,
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  twoDigitsSigned: /^-?\d{1,2}/,
  threeDigitsSigned: /^-?\d{1,3}/,
  fourDigitsSigned: /^-?\d{1,4}/
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}
function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), string, valueCallback);
  }
}
function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), string, valueCallback);
  }
}
function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var parsers = {
  G: {
    priority: 140,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(string, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(string, {
            width: "wide"
          }) || match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
      }
    },
    set: function(date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["R", "u", "t", "T"]
  },
  y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return parseNDigits(4, string, valueCallback);
        case "yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]
  },
  Y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return parseNDigits(4, string, valueCallback);
        case "Yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, options2) {
      var currentYear = getUTCWeekYear(date, options2);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options2.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options2);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options2.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options2);
    },
    incompatibleTokens: ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  R: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "R") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  u: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "u") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]
  },
  Q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, string);
        case "Qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, string);
        case "qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  M: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "MM":
          return parseNDigits(2, string, valueCallback);
        case "Mo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "MMM":
          return match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(string, {
            width: "wide",
            context: "formatting"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  L: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "LL":
          return parseNDigits(2, string, valueCallback);
        case "Lo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "LLL":
          return match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(string, {
            width: "wide",
            context: "standalone"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  w: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, string);
        case "wo":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options2) {
      return startOfUTCWeek(setUTCWeek(date, value, options2), options2);
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  I: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, string);
        case "Io":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options2) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options2), options2);
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  d: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, string);
        case "do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  D: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, string);
        case "Do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]
  },
  E: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["D", "i", "e", "c", "t", "T"]
  },
  e: {
    priority: 90,
    parse: function(string, token, match2, options2) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return parseNDigits(token.length, string, valueCallback);
        case "eo":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "eee":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]
  },
  c: {
    priority: 90,
    parse: function(string, token, match2, options2) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options2.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return parseNDigits(token.length, string, valueCallback);
        case "co":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "ccc":
          return match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(string, {
            width: "wide",
            context: "standalone"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCDay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]
  },
  i: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, string);
        case "io":
          return match2.ordinalNumber(string, {
            unit: "day"
          });
        case "iii":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiii":
          return match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiiii":
          return match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiii":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function(date, _flags, value, options2) {
      date = setUTCISODay(date, value, options2);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]
  },
  a: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["b", "B", "H", "k", "t", "T"]
  },
  b: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "B", "H", "k", "t", "T"]
  },
  B: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "t", "T"]
  },
  h: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, string);
        case "ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["H", "K", "k", "t", "T"]
  },
  H: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, string);
        case "Ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "K", "k", "t", "T"]
  },
  K: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, string);
        case "Ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["h", "H", "k", "t", "T"]
  },
  k: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, string);
        case "ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function(date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "H", "K", "t", "T"]
  },
  m: {
    priority: 60,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, string);
        case "mo":
          return match2.ordinalNumber(string, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  s: {
    priority: 50,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, string);
        case "so":
          return match2.ordinalNumber(string, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  S: {
    priority: 30,
    parse: function(string, token, _match, _options) {
      var valueCallback = function(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return parseNDigits(token.length, string, valueCallback);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  X: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "x"]
  },
  x: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "X"]
  },
  t: {
    priority: 40,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  },
  T: {
    priority: 20,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  }
};
var parsers_default = parsers;

// node_modules/date-fns/esm/parse/index.js
var TIMEZONE_UNIT_PRIORITY = 10;
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options2 = dirtyOptions || {};
  var locale2 = options2.locale || en_US_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options2.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options2.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options2.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options2.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    subPriority: -1,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter2 = substring[0];
    if (firstCharacter2 === "p" || firstCharacter2 === "P") {
      var longFormatter = longFormatters_default[firstCharacter2];
      return longFormatter(substring, locale2.formatLong, subFnOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (!options2.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    if (!options2.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    var firstCharacter = token[0];
    var parser2 = parsers_default[firstCharacter];
    if (parser2) {
      var incompatibleTokens = parser2.incompatibleTokens;
      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;
        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;
          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }
        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser2.incompatibleTokens === "*" && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }
      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser2.parse(dateString, token, locale2.match, subFnOptions);
      if (!parseResult) {
        return new Date(NaN);
      }
      setters.push({
        priority: parser2.priority,
        subPriority: parser2.subPriority || 0,
        set: parser2.set,
        validate: parser2.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
        throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
      }
      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString2(token);
      }
      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a, b) {
    return b - a;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date)) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];
    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }
    var result = setter.set(utcDate, flags, setter.value, subFnOptions);
    if (result[0]) {
      utcDate = result[0];
      assign(flags, result[1]);
    } else {
      utcDate = result;
    }
  }
  return utcDate;
}
function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }
  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// src/xmlrpc-client.ts
var XmlRpcClient = class {
  constructor(options2) {
    this.options = options2;
    console.log(options2);
  }
  methodCall(method, params) {
    console.log(`Endpoint: ${this.options.url.href}xmlrpc.php`);
    const xml = this.objectToXml(method, params).end({ prettyPrint: true });
    console.log(xml);
    return (0, import_obsidian3.request)({
      url: `${this.options.url.href}xmlrpc.php`,
      method: "POST",
      headers: {
        "Content-Type": "text/xml",
        "User-Agent": "obsidian.md"
      },
      body: xml
    }).then((res) => {
      console.log(res);
      return this.responseToObject(res);
    });
  }
  objectToXml(method, ...obj) {
    const xml = (0, import_xmlbuilder2.create)({ version: "1.0" }).ele("methodCall").ele("methodName").txt(method).up().ele("params");
    obj.forEach((it) => this.createParam(it, xml));
    return xml;
  }
  createParam(obj, xml) {
    const param = xml.ele("param");
    this.createValue(obj, param);
  }
  createValue(data, param) {
    const value = param.ele("value");
    if (isSafeInteger_default(data)) {
      value.ele("i4").txt(data.toString());
    } else if (isNumber_default(data)) {
      value.ele("double").txt(data.toString());
    } else if (isBoolean_default(data)) {
      value.ele("boolean").txt(data ? "1" : "0");
    } else if (isDate_default(data)) {
      value.ele("dateTime.iso8601").txt(format(data, "yyyyMMddTHH:mm:ss"));
    } else if (isArray_default(data)) {
      const array = value.ele("array").ele("data");
      data.forEach((it) => this.createValue(it, array));
    } else if (isObject_default(data)) {
      const struct = value.ele("struct");
      for (const [prop, value2] of Object.entries(data)) {
        const member = struct.ele("member").ele("name").txt(prop).up();
        this.createValue(value2, member);
      }
    } else {
      value.ele("string").txt(data.toString());
    }
  }
  responseToObject(response) {
    const res = (0, import_xmlbuilder2.create)(response).end({ format: "object" });
    if (get_default(res, "methodResponse.params")) {
      return this.fromValue(get_default(res, "methodResponse.params.param.value"));
    } else if (get_default(res, "methodResponse.fault")) {
      return this.fromValue(get_default(res, "methodResponse.fault.value"));
    }
    throw new Error("Invalid XML-RPC response.");
  }
  fromValue(value) {
    if (get_default(value, "i4") || get_default(value, "int")) {
      return get_default(value, "i4") || get_default(value, "int");
    } else if (get_default(value, "double")) {
      return get_default(value, "double");
    } else if (get_default(value, "boolean")) {
      return get_default(value, "boolean") === "1";
    } else if (get_default(value, "dateTime.iso8601")) {
      return parse(get_default(value, "dateTime.iso8601"), "yyyyMMddTHH:mm:ss", new Date());
    } else if (get_default(value, "array")) {
      const array = [];
      const data = get_default(value, "array.data.value");
      data.forEach((it) => {
        array.push(this.fromValue(it));
      });
      return array;
    } else if (get_default(value, "struct")) {
      const struct = {};
      const members = get_default(value, "struct.member");
      if (isArray_default(members)) {
        members.forEach((member) => {
          struct[get_default(member, "name")] = this.fromValue(get_default(member, "value"));
        });
      } else {
        struct[get_default(members, "name")] = this.fromValue(get_default(members, "value"));
      }
      return struct;
    } else {
      return get_default(value, "string");
    }
  }
};

// src/abstract-wp-client.ts
var import_obsidian6 = __toModule(require("obsidian"));

// src/wp-login-modal.ts
var import_obsidian4 = __toModule(require("obsidian"));
var WpLoginModal = class extends import_obsidian4.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "WordPress Login" });
    let password = "";
    new import_obsidian4.Setting(contentEl).setName("User Name").setDesc(`User name for ${this.plugin.settings.endpoint}`).addText((text) => {
      var _a;
      return text.setValue((_a = this.plugin.settings.userName) != null ? _a : "").onChange((value) => __async(this, null, function* () {
        if (this.plugin.settings.saveUserName) {
          this.plugin.settings.userName = value;
          yield this.plugin.saveSettings();
        }
      }));
    });
    new import_obsidian4.Setting(contentEl).setName("Password").addText((text) => text.onChange((value) => __async(this, null, function* () {
      password = value;
    })));
    new import_obsidian4.Setting(contentEl).setName("Remember User Name").setDesc(`If enabled, the WordPress user name you typed will be saved in local data.
This might be user name disclosure in synchronize services.`).addToggle((toggle) => toggle.setValue(this.plugin.settings.saveUserName).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.saveUserName = value;
      yield this.plugin.saveSettings();
      if (!this.plugin.settings.saveUserName) {
        delete this.plugin.settings.userName;
      }
    })));
    new import_obsidian4.Setting(contentEl).addButton((button) => button.setButtonText("Login").setClass("mod-cta").onClick(() => {
      this.onSubmit(this.plugin.settings.userName, password, this);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// node_modules/marked/lib/marked.esm.js
function getDefaults() {
  return {
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: "",
    highlight: null,
    langPrefix: "language-",
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
var defaults = getDefaults();
function changeDefaults(newDefaults) {
  defaults = newDefaults;
}
var escapeTest = /[&<>"']/;
var escapeReplace = /[&<>"']/g;
var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape2(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
var caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = regex.source || regex;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
var nonWordAndColonTest = /[^\w:]/g;
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    let prot;
    try {
      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, "").toLowerCase();
    } catch (e) {
      return null;
    }
    if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, "%");
  } catch (e) {
    return null;
  }
  return href;
}
var baseUrls = {};
var justDomain = /^[^:]+:\/*[^/]*$/;
var protocol = /^([^:]+:)[\s\S]*$/;
var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(base, href) {
  if (!baseUrls[" " + base]) {
    if (justDomain.test(base)) {
      baseUrls[" " + base] = base + "/";
    } else {
      baseUrls[" " + base] = rtrim(base, "/", true);
    }
  }
  base = baseUrls[" " + base];
  const relativeBase = base.indexOf(":") === -1;
  if (href.substring(0, 2) === "//") {
    if (relativeBase) {
      return href;
    }
    return base.replace(protocol, "$1") + href;
  } else if (href.charAt(0) === "/") {
    if (relativeBase) {
      return href;
    }
    return base.replace(domain, "$1") + href;
  } else {
    return base + href;
  }
}
var noopTest = { exec: function noopTest2() {
} };
function merge(obj) {
  let i = 1, target, key;
  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }
  return obj;
}
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match2, offset, str) => {
    let escaped = false, curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count)
      cells.push("");
  }
  for (; i < cells.length; i++) {
    cells[i] = cells[i].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.substr(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  const l = str.length;
  let level = 0, i = 0;
  for (; i < l; i++) {
    if (str[i] === "\\") {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  return -1;
}
function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
  }
}
function repeatString(pattern, count) {
  if (count < 1) {
    return "";
  }
  let result = "";
  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }
    count >>= 1;
    pattern += pattern;
  }
  return result + pattern;
}
function outputLink(cap, link, raw, lexer2) {
  const href = link.href;
  const title = link.title ? escape2(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer2.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href,
      title,
      text,
      tokens: lexer2.inlineTokens(text, [])
    };
    lexer2.state.inLink = false;
    return token;
  } else {
    return {
      type: "image",
      raw,
      href,
      title,
      text: escape2(text)
    };
  }
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return text.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var Tokenizer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text, "\n") : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim() : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, "#");
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      const token = {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text,
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ *> ?/gm, "");
      return {
        type: "blockquote",
        raw: cap[0],
        tokens: this.lexer.blockTokens(text, []),
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\n]*)?(?:\\n|$))`);
      while (src) {
        endEarly = false;
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split("\n", 1)[0];
        nextLine = src.split("\n", 1)[0];
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])`);
          while (src) {
            rawLine = src.split("\n", 1)[0];
            line = rawLine;
            if (this.options.pedantic) {
              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (nextBulletRegex.test(line)) {
              break;
            }
            if (line.search(/[^ ]/) >= indent || !line.trim()) {
              itemContents += "\n" + line.slice(indent);
            } else if (!blankLine) {
              itemContents += "\n" + line;
            } else {
              break;
            }
            if (!blankLine && !line.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      const l = list.items.length;
      for (i = 0; i < l; i++) {
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        const spacers = list.items[i].tokens.filter((t) => t.type === "space");
        const hasMultipleLineBreaks = spacers.every((t) => {
          const chars = t.raw.split("");
          let lineBreaks = 0;
          for (const char of chars) {
            if (char === "\n") {
              lineBreaks += 1;
            }
            if (lineBreaks > 1) {
              return true;
            }
          }
          return false;
        });
        if (!list.loose && spacers.length && hasMultipleLineBreaks) {
          list.loose = true;
          list.items[i].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
        text: cap[0]
      };
      if (this.options.sanitize) {
        token.type = "paragraph";
        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]);
        token.tokens = [];
        this.lexer.inline(token.text, token.tokens);
      }
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      if (cap[3])
        cap[3] = cap[3].substring(1, cap[3].length - 1);
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      return {
        type: "def",
        tag,
        raw: cap[0],
        href: cap[2],
        title: cap[3]
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      const item = {
        type: "table",
        header: splitCells(cap[1]).map((c) => {
          return { text: c };
        }),
        align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        let l = item.align.length;
        let i, j, k, row;
        for (i = 0; i < l; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = "right";
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = "center";
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = "left";
          } else {
            item.align[i] = null;
          }
        }
        l = item.rows.length;
        for (i = 0; i < l; i++) {
          item.rows[i] = splitCells(item.rows[i], item.header.length).map((c) => {
            return { text: c };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = [];
          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k = 0; k < row.length; k++) {
            row[k].tokens = [];
            this.lexer.inlineTokens(row[k].text, row[k].tokens);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      const token = {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const token = {
        type: "paragraph",
        raw: cap[0],
        text: cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      const token = {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape2(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: this.options.sanitize ? "text" : "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]) : cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link || !link.href) {
        const text = cap[0].charAt(0);
        return {
          type: "text",
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match2 = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match2)
      return;
    if (match2[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match2[1] || match2[2] || "";
    if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
      const lLength = match2[0].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match2[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match2 = endReg.exec(maskedSrc)) != null) {
        rDelim = match2[1] || match2[2] || match2[3] || match2[4] || match2[5] || match2[6];
        if (!rDelim)
          continue;
        rLength = rDelim.length;
        if (match2[3] || match2[4]) {
          delimTotal += rLength;
          continue;
        } else if (match2[5] || match2[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        if (Math.min(lLength, rLength) % 2) {
          const text2 = src.slice(1, lLength + match2.index + rLength);
          return {
            type: "em",
            raw: src.slice(0, lLength + match2.index + rLength + 1),
            text: text2,
            tokens: this.lexer.inlineTokens(text2, [])
          };
        }
        const text = src.slice(2, lLength + match2.index + rLength - 1);
        return {
          type: "strong",
          raw: src.slice(0, lLength + match2.index + rLength + 1),
          text,
          tokens: this.lexer.inlineTokens(text, [])
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape2(text, true);
      return {
        type: "codespan",
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2], [])
      };
    }
  }
  autolink(src, mangle2) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href;
      if (cap[2] === "@") {
        text = escape2(this.options.mangle ? mangle2(cap[1]) : cap[1]);
        href = "mailto:" + text;
      } else {
        text = escape2(cap[1]);
        href = text;
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src, mangle2) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href;
      if (cap[2] === "@") {
        text = escape2(this.options.mangle ? mangle2(cap[0]) : cap[0]);
        href = "mailto:" + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape2(cap[0]);
        if (cap[1] === "www.") {
          href = "http://" + text;
        } else {
          href = text;
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src, smartypants2) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape2(cap[0]) : cap[0];
      } else {
        text = escape2(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text
      };
    }
  }
};
var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = merge({}, block);
block.gfm = merge({}, block.normal, {
  table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
});
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = merge({}, block.normal, {
  html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
});
var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline.escapedEmSt = /\\\*|\\_/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = merge({}, inline);
inline.pedantic = merge({}, inline.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
});
inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
});
function smartypants(text) {
  return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
}
function mangle(text) {
  let out = "", i, ch;
  const l = text.length;
  for (i = 0; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = "x" + ch.toString(16);
    }
    out += "&#" + ch + ";";
  }
  return out;
}
var Lexer = class {
  constructor(options2) {
    this.tokens = [];
    this.tokens.links = Object.create(null);
    this.options = options2 || defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  static get rules() {
    return {
      block,
      inline
    };
  }
  static lex(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.lex(src);
  }
  static lexInline(src, options2) {
    const lexer2 = new Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ");
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/^ +$/gm, "");
    }
    let token, lastToken, cutSrc, lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) {
          tokens[tokens.length - 1].raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens) {
    this.inlineQueue.push({ src, tokens });
  }
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match2;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match2 = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match2[0].slice(match2[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match2 = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index) + "[" + repeatString("a", match2[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match2 = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match2.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var Renderer = class {
  constructor(options2) {
    this.options = options2 || defaults;
  }
  code(code, infostring, escaped) {
    const lang = (infostring || "").match(/\S*/)[0];
    if (this.options.highlight) {
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="' + this.options.langPrefix + escape2(lang, true) + '">' + (escaped ? code : escape2(code, true)) + "</code></pre>\n";
  }
  blockquote(quote) {
    return "<blockquote>\n" + quote + "</blockquote>\n";
  }
  html(html) {
    return html;
  }
  heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      return "<h" + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + "</h" + level + ">\n";
    }
    return "<h" + level + ">" + text + "</h" + level + ">\n";
  }
  hr() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  }
  list(body, ordered, start) {
    const type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
  }
  listitem(text) {
    return "<li>" + text + "</li>\n";
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
  }
  paragraph(text) {
    return "<p>" + text + "</p>\n";
  }
  table(header, body) {
    if (body)
      body = "<tbody>" + body + "</tbody>";
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow(content) {
    return "<tr>\n" + content + "</tr>\n";
  }
  tablecell(content, flags) {
    const type = flags.header ? "th" : "td";
    const tag = flags.align ? "<" + type + ' align="' + flags.align + '">' : "<" + type + ">";
    return tag + content + "</" + type + ">\n";
  }
  strong(text) {
    return "<strong>" + text + "</strong>";
  }
  em(text) {
    return "<em>" + text + "</em>";
  }
  codespan(text) {
    return "<code>" + text + "</code>";
  }
  br() {
    return this.options.xhtml ? "<br/>" : "<br>";
  }
  del(text) {
    return "<del>" + text + "</del>";
  }
  link(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<a href="' + escape2(href) + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text + "</a>";
    return out;
  }
  image(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<img src="' + href + '" alt="' + text + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += this.options.xhtml ? "/>" : ">";
    return out;
  }
  text(text) {
    return text;
  }
};
var TextRenderer = class {
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href, title, text) {
    return "" + text;
  }
  image(href, title, text) {
    return "" + text;
  }
  br() {
    return "";
  }
};
var Slugger = class {
  constructor() {
    this.seen = {};
  }
  serialize(value) {
    return value.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
  }
  getNextSafeSlug(originalSlug, isDryRun) {
    let slug = originalSlug;
    let occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];
      do {
        occurenceAccumulator++;
        slug = originalSlug + "-" + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }
    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }
    return slug;
  }
  slug(value, options2 = {}) {
    const slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options2.dryrun);
  }
};
var Parser = class {
  constructor(options2) {
    this.options = options2 || defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
  }
  static parse(tokens, options2) {
    const parser2 = new Parser(options2);
    return parser2.parse(tokens);
  }
  static parseInline(tokens, options2) {
    const parser2 = new Parser(options2);
    return parser2.parseInline(tokens);
  }
  parse(tokens, top = true) {
    let out = "", i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
          continue;
        }
        case "code": {
          out += this.renderer.code(token.text, token.lang, token.escaped);
          continue;
        }
        case "table": {
          header = "";
          cell = "";
          l2 = token.header.length;
          for (j = 0; j < l2; j++) {
            cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), { header: true, align: token.align[j] });
          }
          header += this.renderer.tablerow(cell);
          body = "";
          l2 = token.rows.length;
          for (j = 0; j < l2; j++) {
            row = token.rows[j];
            cell = "";
            l3 = row.length;
            for (k = 0; k < l3; k++) {
              cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: token.align[k] });
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          body = this.parse(token.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          ordered = token.ordered;
          start = token.start;
          loose = token.loose;
          l2 = token.items.length;
          body = "";
          for (j = 0; j < l2; j++) {
            item = token.items[j];
            checked = item.checked;
            task = item.task;
            itemBody = "";
            if (item.task) {
              checkbox = this.renderer.checkbox(checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox
                  });
                }
              } else {
                itemBody += checkbox;
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          out += this.renderer.html(token.text);
          continue;
        }
        case "paragraph": {
          out += this.renderer.paragraph(this.parseInline(token.tokens));
          continue;
        }
        case "text": {
          body = token.tokens ? this.parseInline(token.tokens) : token.text;
          while (i + 1 < l && tokens[i + 1].type === "text") {
            token = tokens[++i];
            body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    let out = "", i, token, ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          out += renderer.text(token.text);
          break;
        }
        case "html": {
          out += renderer.html(token.text);
          break;
        }
        case "link": {
          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
          break;
        }
        case "image": {
          out += renderer.image(token.href, token.title, token.text);
          break;
        }
        case "strong": {
          out += renderer.strong(this.parseInline(token.tokens, renderer));
          break;
        }
        case "em": {
          out += renderer.em(this.parseInline(token.tokens, renderer));
          break;
        }
        case "codespan": {
          out += renderer.codespan(token.text);
          break;
        }
        case "br": {
          out += renderer.br();
          break;
        }
        case "del": {
          out += renderer.del(this.parseInline(token.tokens, renderer));
          break;
        }
        case "text": {
          out += renderer.text(token.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
function marked(src, opt, callback) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  if (typeof opt === "function") {
    callback = opt;
    opt = null;
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  if (callback) {
    const highlight = opt.highlight;
    let tokens;
    try {
      tokens = Lexer.lex(src, opt);
    } catch (e) {
      return callback(e);
    }
    const done = function(err) {
      let out;
      if (!err) {
        try {
          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }
          out = Parser.parse(tokens, opt);
        } catch (e) {
          err = e;
        }
      }
      opt.highlight = highlight;
      return err ? callback(err) : callback(null, out);
    };
    if (!highlight || highlight.length < 3) {
      return done();
    }
    delete opt.highlight;
    if (!tokens.length)
      return done();
    let pending = 0;
    marked.walkTokens(tokens, function(token) {
      if (token.type === "code") {
        pending++;
        setTimeout(() => {
          highlight(token.text, token.lang, function(err, code) {
            if (err) {
              return done(err);
            }
            if (code != null && code !== token.text) {
              token.text = code;
              token.escaped = true;
            }
            pending--;
            if (pending === 0) {
              done();
            }
          });
        }, 0);
      }
    });
    if (pending === 0) {
      done();
    }
    return;
  }
  try {
    const tokens = Lexer.lex(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parse(tokens, opt);
  } catch (e) {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape2(e.message + "", true) + "</pre>";
    }
    throw e;
  }
}
marked.options = marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = defaults;
marked.use = function(...args) {
  const opts = merge({}, ...args);
  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
  let hasExtensions;
  args.forEach((pack) => {
    if (pack.extensions) {
      hasExtensions = true;
      pack.extensions.forEach((ext) => {
        if (!ext.name) {
          throw new Error("extension name required");
        }
        if (ext.renderer) {
          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
          if (prevRenderer) {
            extensions.renderers[ext.name] = function(...args2) {
              let ret = ext.renderer.apply(this, args2);
              if (ret === false) {
                ret = prevRenderer.apply(this, args2);
              }
              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }
        if (ext.tokenizer) {
          if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
            throw new Error("extension level must be 'block' or 'inline'");
          }
          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }
          if (ext.start) {
            if (ext.level === "block") {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === "inline") {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }
        if (ext.childTokens) {
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
    }
    if (pack.renderer) {
      const renderer = marked.defaults.renderer || new Renderer();
      for (const prop in pack.renderer) {
        const prevRenderer = renderer[prop];
        renderer[prop] = (...args2) => {
          let ret = pack.renderer[prop].apply(renderer, args2);
          if (ret === false) {
            ret = prevRenderer.apply(renderer, args2);
          }
          return ret;
        };
      }
      opts.renderer = renderer;
    }
    if (pack.tokenizer) {
      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
      for (const prop in pack.tokenizer) {
        const prevTokenizer = tokenizer[prop];
        tokenizer[prop] = (...args2) => {
          let ret = pack.tokenizer[prop].apply(tokenizer, args2);
          if (ret === false) {
            ret = prevTokenizer.apply(tokenizer, args2);
          }
          return ret;
        };
      }
      opts.tokenizer = tokenizer;
    }
    if (pack.walkTokens) {
      const walkTokens2 = marked.defaults.walkTokens;
      opts.walkTokens = function(token) {
        pack.walkTokens.call(this, token);
        if (walkTokens2) {
          walkTokens2.call(this, token);
        }
      };
    }
    if (hasExtensions) {
      opts.extensions = extensions;
    }
    marked.setOptions(opts);
  });
};
marked.walkTokens = function(tokens, callback) {
  for (const token of tokens) {
    callback.call(marked, token);
    switch (token.type) {
      case "table": {
        for (const cell of token.header) {
          marked.walkTokens(cell.tokens, callback);
        }
        for (const row of token.rows) {
          for (const cell of row) {
            marked.walkTokens(cell.tokens, callback);
          }
        }
        break;
      }
      case "list": {
        marked.walkTokens(token.items, callback);
        break;
      }
      default: {
        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
            marked.walkTokens(token[childTokens], callback);
          });
        } else if (token.tokens) {
          marked.walkTokens(token.tokens, callback);
        }
      }
    }
  }
};
marked.parseInline = function(src, opt) {
  if (typeof src === "undefined" || src === null) {
    throw new Error("marked.parseInline(): input parameter is undefined or null");
  }
  if (typeof src !== "string") {
    throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  try {
    const tokens = Lexer.lexInline(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parseInline(tokens, opt);
  } catch (e) {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (opt.silent) {
      return "<p>An error occurred:</p><pre>" + escape2(e.message + "", true) + "</pre>";
    }
    throw e;
  }
};
marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parser = Parser.parse;
var lexer = Lexer.lex;

// src/wp-publish-modal.ts
var import_obsidian5 = __toModule(require("obsidian"));
var WpPublishModal = class extends import_obsidian5.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const params = {
      status: this.plugin.settings.defaultPostStatus
    };
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Publish to WordPress" });
    new import_obsidian5.Setting(contentEl).setName("Post Status").addDropdown((dropdown) => {
      dropdown.addOption(PostStatus.Draft, "draft").addOption(PostStatus.Publish, "publish").setValue(this.plugin.settings.defaultPostStatus).onChange((value) => __async(this, null, function* () {
        params.status = value;
      }));
    });
    new import_obsidian5.Setting(contentEl).addButton((button) => button.setButtonText("Publish").setClass("mod-cta").onClick(() => {
      this.onSubmit(params, this);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/abstract-wp-client.ts
var AbstractWordPressClient = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  newPost(defaultPostParams) {
    return new Promise((resolve, reject) => {
      const { workspace } = this.app;
      const activeView = workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (activeView) {
        new WpLoginModal(this.app, this.plugin, (userName, password, loginModal) => __async(this, null, function* () {
          const content = yield this.app.vault.read(activeView.file);
          const title = activeView.file.basename;
          if (defaultPostParams) {
            yield this.doPublish({
              title,
              content,
              userName,
              password,
              postParams: defaultPostParams
            }, loginModal);
          } else {
            new WpPublishModal(this.app, this.plugin, (postParams, publishModal) => __async(this, null, function* () {
              yield this.doPublish({
                title,
                content,
                userName,
                password,
                postParams
              }, loginModal, publishModal);
            })).open();
          }
        })).open();
      } else {
        const error = "There is no editor found. Nothing will be published.";
        console.warn(error);
        reject(new Error(error));
      }
    });
  }
  doPublish(wpParams, loginModal, publishModal) {
    return __async(this, null, function* () {
      var _a;
      const { title, content, userName, password, postParams } = wpParams;
      try {
        const result = yield this.publish(title != null ? title : "A post from Obsidian!", (_a = marked.parse(content)) != null ? _a : "", postParams, {
          userName,
          password
        });
        console.log("newPost", result);
        if (result.code === WordPressClientReturnCode.Error) {
          const data = result.data;
          new import_obsidian6.Notice(`Post published failed!
${data.code}: ${data.message}`);
        } else {
          new import_obsidian6.Notice("Post published successfully!");
          if (publishModal) {
            publishModal.close();
          }
          loginModal.close();
        }
        return result;
      } catch (error) {
        console.log("Reading file content for 'newPost' failed: ", error);
        new import_obsidian6.Notice(error.toString());
      }
    });
  }
};

// src/wp-xml-rpc-client.ts
var WpXmlRpcClient = class extends AbstractWordPressClient {
  constructor(app, plugin) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
    this.client = new XmlRpcClient({
      url: new URL(plugin.settings.endpoint)
    });
  }
  publish(title, content, postParams, wp) {
    return this.client.methodCall("wp.newPost", [
      0,
      wp.userName,
      wp.password,
      {
        post_type: "post",
        post_status: postParams.status,
        post_title: title,
        post_content: content
      }
    ]).then((response) => {
      if (response.faultCode && response.faultString) {
        return {
          code: WordPressClientReturnCode.Error,
          data: {
            code: response.faultCode,
            message: response.faultString
          }
        };
      } else {
        return {
          code: WordPressClientReturnCode.OK,
          data: response
        };
      }
    });
  }
};

// src/wp-rest-client.ts
var import_obsidian7 = __toModule(require("obsidian"));
var WpRestClient = class extends AbstractWordPressClient {
  constructor(app, plugin, context) {
    super(app, plugin);
    this.app = app;
    this.plugin = plugin;
    this.context = context;
    this.options = {
      url: new URL(plugin.settings.endpoint)
    };
  }
  publish(title, content, postParams, wp) {
    return this.httpPost("wp-json/wp/v2/posts", {
      title,
      content,
      status: postParams.status
    }, {
      headers: this.context.getHeaders(wp)
    });
  }
  httpPost(path, body, options2) {
    const opts = __spreadValues({
      headers: {}
    }, options2);
    console.log("REST POST", `${this.options.url.toString()}${path}`, opts);
    return (0, import_obsidian7.request)({
      url: `${this.options.url.toString()}${path}`,
      method: "POST",
      headers: __spreadValues({
        "Content-Type": "application/json",
        "User-Agent": "obsidian.md"
      }, opts.headers),
      body: JSON.stringify(body)
    }).then((response) => {
      console.log("WpRestClient.post response", response);
      try {
        const resp = JSON.parse(response);
        if (resp.code && resp.message) {
          return {
            code: WordPressClientReturnCode.Error,
            data: {
              code: resp.code,
              message: resp.message
            }
          };
        } else if (resp.id) {
          return {
            code: WordPressClientReturnCode.OK,
            data: resp
          };
        }
      } catch (e) {
        console.log("WpRestClient.post", e);
        return {
          code: WordPressClientReturnCode.Error,
          data: {
            code: 500,
            message: "Cannot parse WordPress REST API response."
          }
        };
      }
    });
  }
};
var WpRestClientMiniOrangeContext = class {
  getHeaders(wp) {
    return {
      "Authorization": `Basic ${Buffer.from(`${wp.userName}:${wp.password}`).toString("base64")}`
    };
  }
};

// src/wp-client.ts
var WordPressClientReturnCode;
(function(WordPressClientReturnCode2) {
  WordPressClientReturnCode2[WordPressClientReturnCode2["OK"] = 0] = "OK";
  WordPressClientReturnCode2[WordPressClientReturnCode2["Error"] = 1] = "Error";
})(WordPressClientReturnCode || (WordPressClientReturnCode = {}));
function createWordPressClient(app, plugin) {
  switch (plugin.settings.apiType) {
    case ApiType.XML_RPC:
      return new WpXmlRpcClient(app, plugin);
    case ApiType.RestAPI_miniOrange:
      return new WpRestClient(app, plugin, new WpRestClientMiniOrangeContext());
    default:
      return null;
  }
}

// src/main.ts
var WordpressPlugin = class extends import_obsidian8.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("loading obsidian-wordpress plugin");
      yield this.loadSettings();
      addIcons();
      this.updateRibbonIcon();
      this.addCommand({
        id: "defaultPublish",
        name: "Publish current document with default options",
        editorCallback: (editor, view) => {
          const params = {
            status: this.settings.defaultPostStatus
          };
          this.publishPost(params);
        }
      });
      this.addCommand({
        id: "publish",
        name: "Publish current document",
        editorCallback: (editor, view) => {
          this.publishPost();
        }
      });
      this.addSettingTab(new WordpressSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  updateRibbonIcon() {
    const ribbonIconTitle = "WordPress Publish";
    if (this.settings.showRibbonIcon) {
      this.addRibbonIcon("wp-logo", ribbonIconTitle, () => {
        this.publishPost();
      });
    } else {
      const leftRibbon = this.app.workspace.leftRibbon;
      const children = leftRibbon.ribbonActionsEl.children;
      for (let i = 0; i < children.length; i++) {
        if (children.item(i).getAttribute("aria-label") === ribbonIconTitle) {
          children.item(i).style.display = "none";
        }
      }
    }
  }
  publishPost(defaultPostParams) {
    const client = createWordPressClient(this.app, this);
    if (client) {
      client.newPost(defaultPostParams).then();
    }
  }
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/*! https://mths.be/punycode v1.4.1 by @mathias */
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//# sourceMappingURL=data:application/json;base64,
